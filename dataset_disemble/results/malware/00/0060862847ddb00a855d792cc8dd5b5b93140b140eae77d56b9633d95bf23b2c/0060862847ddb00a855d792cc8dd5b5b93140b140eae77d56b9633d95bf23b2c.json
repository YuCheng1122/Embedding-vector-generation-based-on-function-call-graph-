{
    "entry0": {
        "function_address": "0x00c04e98",
        "instructions": [
            "call fcn.00c05a71",
            "jmp 0xc04ead",
            "pushal",
            "mov esi, dword [esp + 0x24]",
            "mov edi, dword [esp + 0x2c]",
            "or ebp, 0xffffffff",
            "mov ebp, esp",
            "mov edx, dword [ebp + 0x28]",
            "lodsb al, byte [esi]",
            "dec edx",
            "mov cl, al",
            "and al, 7",
            "shr cl, 3",
            "mov ebx, 0xfffffd00",
            "shl ebx, cl",
            "lea esp, [esp + ebx*2 - 0xe70]",
            "and esp, 0xffffffe0",
            "push 0",
            "push 0",
            "mov ebx, esp",
            "push ebx",
            "add ebx, 4",
            "mov ecx, dword [ebp + 0x30]",
            "push dword [ecx]",
            "push edi",
            "push ebx",
            "add ebx, 4",
            "mov byte [ebx + 2], al",
            "lodsb al, byte [esi]",
            "dec edx",
            "mov cl, al",
            "and al, 0xf",
            "mov byte [ebx], al",
            "shr cl, 4",
            "mov byte [ebx + 1], cl",
            "push edx",
            "push esi",
            "push ebx",
            "push eax",
            "push ebp",
            "push edi",
            "push esi",
            "push ebx",
            "sub esp, 0x7c",
            "mov edx, dword [esp + 0x90]",
            "mov dword [esp + 0x74], 0",
            "mov byte [esp + 0x73], 0",
            "mov ebp, dword [esp + 0x9c]",
            "lea eax, [edx + 4]",
            "mov dword [esp + 0x78], eax",
            "mov eax, 1",
            "movzx ecx, byte [edx + 2]",
            "mov ebx, eax",
            "shl ebx, cl",
            "mov ecx, ebx",
            "dec ecx",
            "mov dword [esp + 0x6c], ecx",
            "movzx ecx, byte [edx + 1]",
            "shl eax, cl",
            "dec eax",
            "mov dword [esp + 0x68], eax",
            "mov eax, dword [esp + 0xa8]",
            "movzx esi, byte [edx]",
            "mov dword [ebp], 0",
            "mov dword [esp + 0x60], 0",
            "mov dword [eax], 0",
            "mov eax, 0x300",
            "mov dword [esp + 0x64], esi",
            "mov dword [esp + 0x5c], 1",
            "mov dword [esp + 0x58], 1",
            "mov dword [esp + 0x54], 1",
            "mov dword [esp + 0x50], 1",
            "movzx ecx, byte [edx + 1]",
            "add ecx, esi",
            "shl eax, cl",
            "lea ecx, [eax + 0x736]",
            "cmp dword [esp + 0x74], ecx",
            "jae 0xc04fb3",
            "mov eax, dword [esp + 0x78]",
            "mov word [eax], 0x400",
            "add eax, 2",
            "loop 0xc04fa9",
            "mov ebx, dword [esp + 0x94]",
            "xor edi, edi",
            "mov dword [esp + 0x48], 0xffffffff",
            "mov edx, ebx",
            "add edx, dword [esp + 0x98]",
            "mov dword [esp + 0x4c], edx",
            "xor edx, edx",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc edx",
            "inc ebx",
            "or edi, eax",
            "cmp edx, 4",
            "jle 0xc04fd3",
            "mov ecx, dword [esp + 0xa4]",
            "cmp dword [esp + 0x74], ecx",
            "jae 0xc05961",
            "mov esi, dword [esp + 0x74]",
            "and esi, dword [esp + 0x6c]",
            "mov eax, dword [esp + 0x60]",
            "mov edx, dword [esp + 0x78]",
            "shl eax, 4",
            "mov dword [esp + 0x44], esi",
            "add eax, esi",
            "cmp dword [esp + 0x48], 0xffffff",
            "lea ebp, [edx + eax*2]",
            "ja 0xc0503b",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov dx, word [ebp]",
            "shr eax, 0xb",
            "movzx ecx, dx",
            "imul eax, ecx",
            "cmp edi, eax",
            "jae 0xc05231",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, ecx",
            "mov cl, byte [esp + 0x64]",
            "sar eax, 5",
            "mov esi, 1",
            "lea eax, [edx + eax]",
            "movzx edx, byte [esp + 0x73]",
            "mov word [ebp], ax",
            "mov eax, dword [esp + 0x74]",
            "and eax, dword [esp + 0x68]",
            "mov ebp, dword [esp + 0x78]",
            "shl eax, cl",
            "mov ecx, 8",
            "sub ecx, dword [esp + 0x64]",
            "sar edx, cl",
            "add eax, edx",
            "imul eax, eax, 0x600",
            "cmp dword [esp + 0x60], 6",
            "lea eax, [ebp + eax + 0xe6c]",
            "mov dword [esp + 0x14], eax",
            "jle 0xc05178",
            "mov eax, dword [esp + 0x74]",
            "sub eax, dword [esp + 0x5c]",
            "mov edx, dword [esp + 0xa0]",
            "movzx eax, byte [edx + eax]",
            "mov dword [esp + 0x40], eax",
            "shl dword [esp + 0x40], 1",
            "mov ecx, dword [esp + 0x40]",
            "lea edx, [esi + esi]",
            "mov ebp, dword [esp + 0x14]",
            "and ecx, 0x100",
            "cmp dword [esp + 0x48], 0xffffff",
            "lea eax, [ebp + ecx*2]",
            "mov dword [esp + 0x3c], ecx",
            "lea ebp, [eax + edx]",
            "ja 0xc05107",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov cx, word [ebp + 0x200]",
            "shr eax, 0xb",
            "movzx esi, cx",
            "imul eax, esi",
            "cmp edi, eax",
            "jae 0xc05142",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, esi",
            "mov esi, edx",
            "sar eax, 5",
            "cmp dword [esp + 0x3c], 0",
            "lea eax, [ecx + eax]",
            "mov word [ebp + 0x200], ax",
            "je 0xc05162",
            "jmp 0xc05170",
            "sub dword [esp + 0x48], eax",
            "sub edi, eax",
            "mov eax, ecx",
            "lea esi, [edx + 1]",
            "shr ax, 5",
            "sub cx, ax",
            "cmp dword [esp + 0x3c], 0",
            "mov word [ebp + 0x200], cx",
            "je 0xc05170",
            "cmp esi, 0xff",
            "jle 0xc050c5",
            "jmp 0xc051e9",
            "cmp esi, 0xff",
            "jg 0xc051e9",
            "lea edx, [esi + esi]",
            "mov ebp, dword [esp + 0x14]",
            "add ebp, edx",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc051a3",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov cx, word [ebp]",
            "shr eax, 0xb",
            "movzx esi, cx",
            "imul eax, esi",
            "cmp edi, eax",
            "jae 0xc051d1",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, esi",
            "mov esi, edx",
            "sar eax, 5",
            "lea eax, [ecx + eax]",
            "mov word [ebp], ax",
            "jmp 0xc05170",
            "sub dword [esp + 0x48], eax",
            "sub edi, eax",
            "mov eax, ecx",
            "lea esi, [edx + 1]",
            "shr ax, 5",
            "sub cx, ax",
            "mov word [ebp], cx",
            "jmp 0xc05170",
            "mov edx, dword [esp + 0x74]",
            "mov eax, esi",
            "mov ecx, dword [esp + 0xa0]",
            "mov byte [esp + 0x73], al",
            "mov byte [edx + ecx], al",
            "inc edx",
            "cmp dword [esp + 0x60], 3",
            "mov dword [esp + 0x74], edx",
            "jg 0xc05216",
            "mov dword [esp + 0x60], 0",
            "jmp 0xc05931",
            "cmp dword [esp + 0x60], 9",
            "jg 0xc05227",
            "sub dword [esp + 0x60], 3",
            "jmp 0xc05931",
            "sub dword [esp + 0x60], 6",
            "jmp 0xc05931",
            "mov ecx, dword [esp + 0x48]",
            "sub edi, eax",
            "mov esi, dword [esp + 0x60]",
            "sub ecx, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "cmp ecx, 0xffffff",
            "mov word [ebp], dx",
            "mov ebp, dword [esp + 0x78]",
            "lea esi, [ebp + esi*2]",
            "mov dword [esp + 0x38], esi",
            "ja 0xc05274",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl ecx, 8",
            "inc ebx",
            "or edi, eax",
            "mov ebp, dword [esp + 0x38]",
            "mov eax, ecx",
            "shr eax, 0xb",
            "mov dx, word [ebp + 0x180]",
            "movzx ebp, dx",
            "imul eax, ebp",
            "cmp edi, eax",
            "jae 0xc052e0",
            "mov esi, eax",
            "mov eax, 0x800",
            "sub eax, ebp",
            "mov ebp, dword [esp + 0x58]",
            "sar eax, 5",
            "mov ecx, dword [esp + 0x54]",
            "lea eax, [edx + eax]",
            "mov edx, dword [esp + 0x38]",
            "mov dword [esp + 0x50], ecx",
            "mov ecx, dword [esp + 0x78]",
            "mov word [edx + 0x180], ax",
            "mov eax, dword [esp + 0x5c]",
            "mov dword [esp + 0x54], ebp",
            "mov dword [esp + 0x58], eax",
            "xor eax, eax",
            "cmp dword [esp + 0x60], 6",
            "setg al",
            "add ecx, 0x664",
            "lea eax, [eax + eax*2]",
            "mov dword [esp + 0x60], eax",
            "jmp 0xc05554",
            "mov esi, ecx",
            "sub edi, eax",
            "sub esi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "mov ecx, dword [esp + 0x38]",
            "sub dx, ax",
            "cmp esi, 0xffffff",
            "mov word [ecx + 0x180], dx",
            "ja 0xc05318",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl esi, 8",
            "inc ebx",
            "or edi, eax",
            "mov ebp, dword [esp + 0x38]",
            "mov edx, esi",
            "shr edx, 0xb",
            "mov cx, word [ebp + 0x198]",
            "movzx eax, cx",
            "imul edx, eax",
            "cmp edi, edx",
            "jae 0xc05419",
            "mov ebp, 0x800",
            "mov esi, edx",
            "sub ebp, eax",
            "mov dword [esp + 0x34], 0x800",
            "mov eax, ebp",
            "sar eax, 5",
            "lea eax, [ecx + eax]",
            "mov ecx, dword [esp + 0x38]",
            "mov word [ecx + 0x198], ax",
            "mov eax, dword [esp + 0x60]",
            "mov ecx, dword [esp + 0x44]",
            "shl eax, 5",
            "add eax, dword [esp + 0x78]",
            "cmp edx, 0xffffff",
            "lea ebp, [eax + ecx*2]",
            "ja 0xc0538a",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl esi, 8",
            "inc ebx",
            "or edi, eax",
            "mov dx, word [ebp + 0x1e0]",
            "mov eax, esi",
            "shr eax, 0xb",
            "movzx ecx, dx",
            "imul eax, ecx",
            "cmp edi, eax",
            "jae 0xc05400",
            "sub dword [esp + 0x34], ecx",
            "sar dword [esp + 0x34], 5",
            "mov esi, dword [esp + 0x34]",
            "mov dword [esp + 0x48], eax",
            "cmp dword [esp + 0x74], 0",
            "lea eax, [edx + esi]",
            "mov word [ebp + 0x1e0], ax",
            "je 0xc05959",
            "xor eax, eax",
            "cmp dword [esp + 0x60], 6",
            "mov ebp, dword [esp + 0xa0]",
            "mov edx, dword [esp + 0x74]",
            "setg al",
            "lea eax, [eax + eax + 9]",
            "mov dword [esp + 0x60], eax",
            "mov eax, dword [esp + 0x74]",
            "sub eax, dword [esp + 0x5c]",
            "mov al, byte [ebp + eax]",
            "mov byte [esp + 0x73], al",
            "mov byte [edx + ebp], al",
            "inc edx",
            "mov dword [esp + 0x74], edx",
            "jmp 0xc05931",
            "sub esi, eax",
            "sub edi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "mov word [ebp + 0x1e0], dx",
            "jmp 0xc05538",
            "mov eax, ecx",
            "sub esi, edx",
            "shr ax, 5",
            "mov ebp, dword [esp + 0x38]",
            "sub cx, ax",
            "sub edi, edx",
            "cmp esi, 0xffffff",
            "mov word [ebp + 0x198], cx",
            "ja 0xc0544f",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl esi, 8",
            "inc ebx",
            "or edi, eax",
            "mov ecx, dword [esp + 0x38]",
            "mov eax, esi",
            "shr eax, 0xb",
            "mov dx, word [ecx + 0x1b0]",
            "movzx ecx, dx",
            "imul eax, ecx",
            "cmp edi, eax",
            "jae 0xc0548c",
            "mov esi, eax",
            "mov eax, 0x800",
            "sub eax, ecx",
            "mov ebp, dword [esp + 0x38]",
            "sar eax, 5",
            "lea eax, [edx + eax]",
            "mov word [ebp + 0x1b0], ax",
            "mov eax, dword [esp + 0x58]",
            "jmp 0xc0552c",
            "mov ecx, esi",
            "sub edi, eax",
            "sub ecx, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "mov eax, dword [esp + 0x38]",
            "cmp ecx, 0xffffff",
            "mov word [eax + 0x1b0], dx",
            "ja 0xc054c4",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl ecx, 8",
            "inc ebx",
            "or edi, eax",
            "mov esi, dword [esp + 0x38]",
            "mov eax, ecx",
            "shr eax, 0xb",
            "mov dx, word [esi + 0x1c8]",
            "movzx ebp, dx",
            "imul eax, ebp",
            "cmp edi, eax",
            "jae 0xc054fe",
            "mov esi, eax",
            "mov eax, 0x800",
            "sub eax, ebp",
            "mov ebp, dword [esp + 0x38]",
            "sar eax, 5",
            "lea eax, [edx + eax]",
            "mov word [ebp + 0x1c8], ax",
            "mov eax, dword [esp + 0x54]",
            "jmp 0xc05524",
            "mov esi, ecx",
            "sub edi, eax",
            "sub esi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "mov eax, dword [esp + 0x38]",
            "mov word [eax + 0x1c8], dx",
            "mov edx, dword [esp + 0x54]",
            "mov eax, dword [esp + 0x50]",
            "mov dword [esp + 0x50], edx",
            "mov ecx, dword [esp + 0x58]",
            "mov dword [esp + 0x54], ecx",
            "mov ebp, dword [esp + 0x5c]",
            "mov dword [esp + 0x5c], eax",
            "mov dword [esp + 0x58], ebp",
            "xor eax, eax",
            "cmp dword [esp + 0x60], 6",
            "mov ecx, dword [esp + 0x78]",
            "setg al",
            "add ecx, 0xa68",
            "lea eax, [eax + eax*2 + 8]",
            "mov dword [esp + 0x60], eax",
            "cmp esi, 0xffffff",
            "ja 0xc05572",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl esi, 8",
            "inc ebx",
            "or edi, eax",
            "mov dx, word [ecx]",
            "mov eax, esi",
            "shr eax, 0xb",
            "movzx ebp, dx",
            "imul eax, ebp",
            "cmp edi, eax",
            "jae 0xc055b3",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, ebp",
            "shl dword [esp + 0x44], 4",
            "sar eax, 5",
            "mov dword [esp + 0x2c], 0",
            "lea eax, [edx + eax]",
            "mov word [ecx], ax",
            "mov eax, dword [esp + 0x44]",
            "lea ecx, [ecx + eax + 4]",
            "mov dword [esp + 0x10], ecx",
            "jmp 0xc05625",
            "sub esi, eax",
            "sub edi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "cmp esi, 0xffffff",
            "mov word [ecx], dx",
            "ja 0xc055e1",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "shl esi, 8",
            "inc ebx",
            "or edi, eax",
            "mov dx, word [ecx + 2]",
            "mov eax, esi",
            "shr eax, 0xb",
            "movzx ebp, dx",
            "imul eax, ebp",
            "cmp edi, eax",
            "jae 0xc0562f",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, ebp",
            "shl dword [esp + 0x44], 4",
            "sar eax, 5",
            "mov dword [esp + 0x2c], 8",
            "lea eax, [edx + eax]",
            "mov edx, dword [esp + 0x44]",
            "mov word [ecx + 2], ax",
            "lea ecx, [ecx + edx + 0x104]",
            "mov dword [esp + 0x10], ecx",
            "mov dword [esp + 0x30], 3",
            "jmp 0xc0565e",
            "sub esi, eax",
            "sub edi, eax",
            "mov eax, edx",
            "mov dword [esp + 0x48], esi",
            "shr ax, 5",
            "mov dword [esp + 0x2c], 0x10",
            "sub dx, ax",
            "mov dword [esp + 0x30], 8",
            "mov word [ecx + 2], dx",
            "add ecx, 0x204",
            "mov dword [esp + 0x10], ecx",
            "mov ecx, dword [esp + 0x30]",
            "mov edx, 1",
            "mov dword [esp + 0x28], ecx",
            "lea ebp, [edx + edx]",
            "mov esi, dword [esp + 0x10]",
            "add esi, ebp",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc05696",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov dx, word [esi]",
            "shr eax, 0xb",
            "movzx ecx, dx",
            "imul eax, ecx",
            "cmp edi, eax",
            "jae 0xc056c2",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, ecx",
            "sar eax, 5",
            "lea eax, [edx + eax]",
            "mov edx, ebp",
            "mov word [esi], ax",
            "jmp 0xc056d7",
            "sub dword [esp + 0x48], eax",
            "sub edi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "mov word [esi], dx",
            "lea edx, [ebp + 1]",
            "mov esi, dword [esp + 0x28]",
            "dec esi",
            "mov dword [esp + 0x28], esi",
            "jne 0xc0566b",
            "mov cl, byte [esp + 0x30]",
            "mov eax, 1",
            "shl eax, cl",
            "sub edx, eax",
            "add edx, dword [esp + 0x2c]",
            "cmp dword [esp + 0x60], 3",
            "mov dword [esp + 0xc], edx",
            "jg 0xc058e9",
            "add dword [esp + 0x60], 7",
            "cmp edx, 3",
            "mov eax, edx",
            "jle 0xc05713",
            "mov eax, 3",
            "mov esi, dword [esp + 0x78]",
            "shl eax, 7",
            "mov dword [esp + 0x24], 6",
            "lea eax, [esi + eax + 0x360]",
            "mov dword [esp + 8], eax",
            "mov eax, 1",
            "lea ebp, [eax + eax]",
            "mov esi, dword [esp + 8]",
            "add esi, ebp",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc0575d",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov dx, word [esi]",
            "shr eax, 0xb",
            "movzx ecx, dx",
            "imul eax, ecx",
            "cmp edi, eax",
            "jae 0xc05789",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, ecx",
            "sar eax, 5",
            "lea eax, [edx + eax]",
            "mov word [esi], ax",
            "mov eax, ebp",
            "jmp 0xc0579e",
            "sub dword [esp + 0x48], eax",
            "sub edi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "lea eax, [ebp + 1]",
            "mov word [esi], dx",
            "mov ebp, dword [esp + 0x24]",
            "dec ebp",
            "mov dword [esp + 0x24], ebp",
            "jne 0xc05732",
            "lea edx, [eax - 0x40]",
            "cmp edx, 3",
            "mov dword [esp], edx",
            "jle 0xc058df",
            "mov eax, edx",
            "mov esi, edx",
            "sar eax, 1",
            "and esi, 1",
            "lea ecx, [eax - 1]",
            "or esi, 2",
            "cmp edx, 0xd",
            "mov dword [esp + 0x20], ecx",
            "jg 0xc057ec",
            "mov ebp, dword [esp + 0x78]",
            "shl esi, cl",
            "add edx, edx",
            "mov dword [esp], esi",
            "lea eax, [ebp + esi*2]",
            "sub eax, edx",
            "add eax, 0x55e",
            "mov dword [esp + 4], eax",
            "jmp 0xc05842",
            "lea edx, [eax - 5]",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc05811",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "shr dword [esp + 0x48], 1",
            "add esi, esi",
            "cmp edi, dword [esp + 0x48]",
            "jb 0xc05824",
            "sub edi, dword [esp + 0x48]",
            "or esi, 1",
            "dec edx",
            "jne 0xc057ef",
            "mov eax, dword [esp + 0x78]",
            "shl esi, 4",
            "mov dword [esp], esi",
            "add eax, 0x644",
            "mov dword [esp + 0x20], 4",
            "mov dword [esp + 4], eax",
            "mov dword [esp + 0x1c], 1",
            "mov eax, 1",
            "mov ebp, dword [esp + 4]",
            "add eax, eax",
            "mov dword [esp + 0x18], eax",
            "add ebp, eax",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc0587d",
            "cmp ebx, dword [esp + 0x4c]",
            "je 0xc05959",
            "shl dword [esp + 0x48], 8",
            "movzx eax, byte [ebx]",
            "shl edi, 8",
            "inc ebx",
            "or edi, eax",
            "mov eax, dword [esp + 0x48]",
            "mov dx, word [ebp]",
            "shr eax, 0xb",
            "movzx esi, dx",
            "imul eax, esi",
            "cmp edi, eax",
            "jae 0xc058ad",
            "mov dword [esp + 0x48], eax",
            "mov eax, 0x800",
            "sub eax, esi",
            "sar eax, 5",
            "lea eax, [edx + eax]",
            "mov word [ebp], ax",
            "mov eax, dword [esp + 0x18]",
            "jmp 0xc058cc",
            "sub dword [esp + 0x48], eax",
            "sub edi, eax",
            "mov eax, edx",
            "shr ax, 5",
            "sub dx, ax",
            "mov eax, dword [esp + 0x18]",
            "mov word [ebp], dx",
            "mov edx, dword [esp + 0x1c]",
            "inc eax",
            "or dword [esp], edx",
            "mov ecx, dword [esp + 0x20]",
            "shl dword [esp + 0x1c], 1",
            "dec ecx",
            "mov dword [esp + 0x20], ecx",
            "jne 0xc0584f",
            "mov esi, dword [esp]",
            "inc esi",
            "mov dword [esp + 0x5c], esi",
            "je 0xc05942",
            "mov ecx, dword [esp + 0xc]",
            "mov ebp, dword [esp + 0x74]",
            "add ecx, 2",
            "cmp dword [esp + 0x5c], ebp",
            "ja 0xc05959",
            "mov eax, dword [esp + 0xa0]",
            "mov edx, ebp",
            "sub eax, dword [esp + 0x5c]",
            "add edx, dword [esp + 0xa0]",
            "lea esi, [eax + ebp]",
            "mov al, byte [esi]",
            "inc esi",
            "mov byte [esp + 0x73], al",
            "mov byte [edx], al",
            "inc edx",
            "inc dword [esp + 0x74]",
            "dec ecx",
            "je 0xc05931",
            "mov ebp, dword [esp + 0xa4]",
            "cmp dword [esp + 0x74], ebp",
            "jb 0xc05911",
            "jmp 0xc05942",
            "mov eax, dword [esp + 0xa4]",
            "cmp dword [esp + 0x74], eax",
            "jb 0xc04ffd",
            "cmp dword [esp + 0x48], 0xffffff",
            "ja 0xc05961",
            "cmp ebx, dword [esp + 0x4c]",
            "mov eax, 1",
            "je 0xc05980",
            "jmp 0xc05960",
            "mov eax, 1",
            "jmp 0xc05980",
            "inc ebx",
            "sub ebx, dword [esp + 0x94]",
            "xor eax, eax",
            "mov edx, dword [esp + 0x9c]",
            "mov ecx, dword [esp + 0x74]",
            "mov dword [edx], ebx",
            "mov ebx, dword [esp + 0xa8]",
            "mov dword [ebx], ecx",
            "add esp, 0x7c",
            "pop ebx",
            "pop esi",
            "pop edi",
            "pop ebp",
            "add esi, dword [ebx - 4]",
            "add edi, dword [ebx - 8]",
            "xor eax, eax",
            "lea ecx, [esp - 0x100]",
            "mov esp, ebp",
            "push eax",
            "cmp esp, ecx",
            "jne 0xc05998",
            "mov esp, ebp",
            "xor ecx, ecx",
            "mov edx, dword [esp + 0x24]",
            "add edx, dword [esp + 0x28]",
            "cmp esi, edx",
            "je 0xc059ae",
            "dec eax",
            "sub edi, dword [esp + 0x2c]",
            "mov edx, dword [esp + 0x30]",
            "mov dword [edx], edi",
            "mov dword [esp + 0x1c], eax",
            "popal",
            "ret"
        ]
    },
    "fcn.00c05a71": {
        "function_address": "0x00c05a71",
        "instructions": [
            "pop ebp",
            "call fcn.00c05a24",
            "loopne 0xc05a7f",
            "add byte [eax], al",
            "mov dword [0x490e0000], eax",
            "push cs",
            "dec ecx",
            "push es",
            "add byte [edx], bl",
            "add eax, dword [eax]",
            "sub edx, dword [ecx + eax*8 - 0x125b5d5]",
            "add byte [edx - 0x1f], ah",
            "mov ah, 0x87",
            "aaa",
            "mov ebx, 0x13879b36",
            "sub bh, ch",
            "lahf",
            "dec eax",
            "cmp dl, byte [ebp + 0x5cc0eabc]",
            "inc ecx",
            "push 0x86e05f98",
            "xchg ebx, eax",
            "mov dl, 0x93",
            "das",
            "pop ebp",
            "nop",
            "mov dh, 0x4c",
            "add byte [ecx], dl",
            "outsd dx, dword [esi]",
            "xlatb",
            "fst qword [ecx - 0x42181981]",
            "movsb byte es:[edi], byte [esi]",
            "wait",
            "imul ebx, dword [edx], 0x5e",
            "inc eax",
            "add dword [esp + edx*2 - 0x6fa69d61], edx",
            "rcr byte [edi - 0x26], 0x68",
            "xchg dword [ebp + 0x2d], edx",
            "lodsb al, byte [esi]",
            "dec esp",
            "dec edi",
            "in eax, 0xb1",
            "and bl, byte [ebx + 0x1b]",
            "cmpsd dword [esi], dword es:[edi]",
            "push esp",
            "mov al, byte [0x409ae590]",
            "pushf",
            "dec esi",
            "fidivr dword [ecx - 0x6e]",
            "movsd dword es:[edi], dword [esi]",
            "les ebp, [edx + 0x50]",
            "imul esp, dword [eax - 0x11f201c1], 0xffffff93",
            "retf"
        ]
    },
    "fcn.00c05a24": {
        "function_address": "0x00c05a24",
        "instructions": [
            "push 1",
            "pop edx",
            "call 0xc05a14",
            "or bl, byte [ecx + 0x6a]",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc05a0b",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    },
    "unk.0xc05a14": {
        "function_address": "0x00c05a14",
        "instructions": [
            "push 1",
            "pop edx",
            "call 0xc05a14",
            "or bl, byte [ecx + 0x6a]",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc05a0b",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    }
}