{
    "entry0": {
        "function_address": "0x00c07bb8",
        "instructions": [
            "call fcn.00c07e48",
            "jmp 0xc07bcd",
            "pushal",
            "mov esi, dword [esp + 0x24]",
            "mov edi, dword [esp + 0x2c]",
            "or ebp, 0xffffffff",
            "jmp 0xc07bea",
            "mov al, byte [esi]",
            "inc esi",
            "mov byte [edi], al",
            "inc edi",
            "add ebx, ebx",
            "jne 0xc07bf1",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "mov al, byte [edi]",
            "jb 0xc07be0",
            "mov eax, 1",
            "add ebx, ebx",
            "jne 0xc07c05",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc eax, eax",
            "add ebx, ebx",
            "jae 0xc07c16",
            "jne 0xc07c35",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jb 0xc07c35",
            "dec eax",
            "add ebx, ebx",
            "jne 0xc07c22",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc eax, eax",
            "jmp 0xc07bfa",
            "add ebx, ebx",
            "jne 0xc07c31",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "jmp 0xc07c87",
            "xor ecx, ecx",
            "sub eax, 3",
            "jb 0xc07c4d",
            "shl eax, 8",
            "mov al, byte [esi]",
            "inc esi",
            "xor eax, 0xffffffff",
            "je 0xc07cc2",
            "sar eax, 1",
            "mov ebp, eax",
            "jmp 0xc07c58",
            "add ebx, ebx",
            "jne 0xc07c58",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jb 0xc07c26",
            "inc ecx",
            "add ebx, ebx",
            "jne 0xc07c66",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jb 0xc07c26",
            "add ebx, ebx",
            "jne 0xc07c73",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jae 0xc07c68",
            "jne 0xc07c84",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc07c68",
            "add ecx, 2",
            "cmp ebp, 0xfffffb00",
            "adc ecx, 2",
            "lea edx, [edi + ebp]",
            "cmp ebp, 0xfffffffc",
            "mov al, byte [edi + ecx]",
            "jbe 0xc07cac",
            "mov al, byte [edx]",
            "inc edx",
            "mov byte [edi], al",
            "inc edi",
            "dec ecx",
            "jne 0xc07c9b",
            "jmp 0xc07be6",
            "mov eax, dword [edx]",
            "add edx, 4",
            "mov dword [edi], eax",
            "add edi, 4",
            "sub ecx, 4",
            "ja 0xc07cac",
            "add edi, ecx",
            "jmp 0xc07be6",
            "mov edx, dword [esp + 0x24]",
            "add edx, dword [esp + 0x28]",
            "cmp esi, edx",
            "je 0xc07ccf",
            "dec eax",
            "sub edi, dword [esp + 0x2c]",
            "mov edx, dword [esp + 0x30]",
            "mov dword [edx], edi",
            "mov dword [esp + 0x1c], eax",
            "popal",
            "ret"
        ]
    },
    "fcn.00c07e48": {
        "function_address": "0x00c07e48",
        "instructions": [
            "pop ebp",
            "call fcn.00c07dfb",
            "pop esi",
            "push es",
            "add byte [eax], al",
            "add byte [0x49080000], 0",
            "add byte [edi + 0x57ffffb7], dh",
            "push ebx",
            "sub ecx, ecx",
            "mov edx, 0x278",
            "mov esi, esp",
            "mov edi, esp",
            "sub ebx, ebx",
            "call 0x8dc0912e",
            "pop ecx",
            "add al, 0x1a",
            "shr edx, 1",
            "sbb esi, esi",
            "sti",
            "std",
            "inc eax",
            "sub ecx, eax",
            "lea esp, [esp + eax*8]",
            "test edx, edx",
            "jne 0xc07e79",
            "sub esp, 0xe7441008",
            "call 0x787bb2e",
            "and byte [eax], al",
            "invalid"
        ]
    },
    "fcn.00c07dfb": {
        "function_address": "0x00c07dfb",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc07deb",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc07e29",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc07dc6",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    },
    "unk.0xc07deb": {
        "function_address": "0x00c07deb",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc07deb",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc07e29",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc07dc6",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    }
}