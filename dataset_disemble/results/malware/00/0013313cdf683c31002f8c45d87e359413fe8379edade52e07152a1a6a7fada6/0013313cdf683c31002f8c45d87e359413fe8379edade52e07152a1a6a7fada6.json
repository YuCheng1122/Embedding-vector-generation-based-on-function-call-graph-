{
    "entry0": {
        "function_address": "0x00c0b628",
        "instructions": [
            "call fcn.00c0b80d",
            "jmp 0xc0b63d",
            "pushal",
            "mov esi, dword [esp + 0x24]",
            "mov edi, dword [esp + 0x2c]",
            "or ebp, 0xffffffff",
            "jmp 0xc0b65a",
            "mov al, byte [esi]",
            "inc esi",
            "mov byte [edi], al",
            "inc edi",
            "add ebx, ebx",
            "jne 0xc0b661",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "mov al, byte [edi]",
            "jb 0xc0b650",
            "mov eax, 1",
            "add ebx, ebx",
            "jne 0xc0b675",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc eax, eax",
            "add ebx, ebx",
            "jae 0xc0b66a",
            "jne 0xc0b686",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc0b66a",
            "xor ecx, ecx",
            "sub eax, 3",
            "jb 0xc0b69a",
            "shl eax, 8",
            "mov al, byte [esi]",
            "inc esi",
            "xor eax, 0xffffffff",
            "je 0xc0b70e",
            "mov ebp, eax",
            "add ebx, ebx",
            "jne 0xc0b6a5",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0xc0b6b2",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "jne 0xc0b6d6",
            "inc ecx",
            "add ebx, ebx",
            "jne 0xc0b6c2",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jae 0xc0b6b7",
            "jne 0xc0b6d3",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc0b6b7",
            "add ecx, 2",
            "cmp ebp, 0xfffff300",
            "adc ecx, 1",
            "lea edx, [edi + ebp]",
            "cmp ebp, 0xfffffffc",
            "mov al, byte [edi + ecx]",
            "jbe 0xc0b6f8",
            "mov al, byte [edx]",
            "inc edx",
            "mov byte [edi], al",
            "inc edi",
            "dec ecx",
            "jne 0xc0b6ea",
            "jmp 0xc0b656",
            "mov eax, dword [edx]",
            "add edx, 4",
            "mov dword [edi], eax",
            "add edi, 4",
            "sub ecx, 4",
            "ja 0xc0b6f8",
            "add edi, ecx",
            "jmp 0xc0b656",
            "mov edx, dword [esp + 0x24]",
            "add edx, dword [esp + 0x28]",
            "cmp esi, edx",
            "je 0xc0b71b",
            "dec eax",
            "sub edi, dword [esp + 0x2c]",
            "mov edx, dword [esp + 0x30]",
            "mov dword [edx], edi",
            "mov dword [esp + 0x1c], eax",
            "popal",
            "ret"
        ]
    },
    "fcn.00c0b80d": {
        "function_address": "0x00c0b80d",
        "instructions": [
            "pop ebp",
            "call fcn.00c0b7c0",
            "pop edx",
            "push es",
            "add byte [eax], al",
            "test dword [0x49020000], eax",
            "or dword [eax], eax",
            "fcmovne st(0), st(3)",
            "invalid"
        ]
    },
    "fcn.00c0b7c0": {
        "function_address": "0x00c0b7c0",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc0b7b0",
            "or cl, byte [edx]",
            "outsb dx, byte [esi]",
            "popal",
            "outsb dx, byte [esi]",
            "insd dword es:[edi], dx",
            "outsd dx, dword [esi]",
            "and byte [edi + 0x61], dh",
            "and byte [ebx + 0x68], dh",
            "imul esi, dword [edx + 0x61], 0x2069616e",
            "ja 0xc0b80c",
            "and byte [ecx + 0x6f], bh",
            "sub al, 0xa",
            "pop ecx",
            "push 2",
            "pop ebx",
            "push 4",
            "pop eax",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc0b78b",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    },
    "unk.0xc0b7b0": {
        "function_address": "0x00c0b7b0",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc0b7b0",
            "or cl, byte [edx]",
            "outsb dx, byte [esi]",
            "popal",
            "outsb dx, byte [esi]",
            "insd dword es:[edi], dx",
            "outsd dx, dword [esi]",
            "and byte [edi + 0x61], dh",
            "and byte [ebx + 0x68], dh",
            "imul esi, dword [edx + 0x61], 0x2069616e",
            "ja 0xc0b80c",
            "and byte [ecx + 0x6f], bh",
            "sub al, 0xa",
            "pop ecx",
            "push 2",
            "pop ebx",
            "push 4",
            "pop eax",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc0b78b",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    }
}