{
    "entry0": {
        "function_address": "0x00451dd0",
        "instructions": [
            "call fcn.00451fc8",
            "push rbp",
            "push rbx",
            "push rcx",
            "push rdx",
            "add rsi, rdi",
            "push rsi",
            "mov rsi, rdi",
            "mov rdi, rdx",
            "xor ebx, ebx",
            "xor ecx, ecx",
            "or rbp, 0xffffffffffffffff",
            "call fcn.00451e40",
            "add ebx, ebx",
            "je 0x451df6",
            "repz ret",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "repz ret"
        ]
    },
    "fcn.00451fc8": {
        "function_address": "0x00451fc8",
        "instructions": [
            "pop rbp",
            "lea rax, [rbp - 9]",
            "mov r15d, dword [rax]",
            "mov edx, 0xc8",
            "sub rax, r15",
            "sub r15d, edx",
            "lea rcx, [rax + rdx]",
            "call fcn.00451f5d",
            "jb 0x451fec",
            "add byte [rax], al",
            "insb byte [rdi], dx",
            "add eax, 0x49080000",
            "sbb al, byte [rax]",
            "invalid",
            "or byte [rcx + 0x1a], cl",
            "add dh, bh",
            "invalid"
        ]
    },
    "fcn.00451e40": {
        "function_address": "0x00451e40",
        "instructions": [
            "cld",
            "pop r11",
            "cmp r8b, 8",
            "je 0x451e56",
            "jmp 0x451efa",
            "inc rsi",
            "mov byte [rdi], dl",
            "inc rdi",
            "mov dl, byte [rsi]",
            "add ebx, ebx",
            "jne 0x451e66",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jb 0x451e4e",
            "lea eax, [rcx + 1]",
            "jmp 0x451e74",
            "dec eax",
            "call r11",
            "adc eax, eax",
            "call r11",
            "adc eax, eax",
            "add ebx, ebx",
            "jne 0x451e87",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jae 0x451e6d",
            "sub eax, 3",
            "jb 0x451eab",
            "shl eax, 8",
            "movzx edx, dl",
            "or eax, edx",
            "inc rsi",
            "xor eax, 0xffffffff",
            "je 0x451efa",
            "sar eax, 1",
            "movsxd rbp, eax",
            "jb 0x451ee1",
            "jmp 0x451eb9",
            "add ebx, ebx",
            "jne 0x451eb7",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jb 0x451ee1",
            "inc ecx",
            "add ebx, ebx",
            "jne 0x451ec7",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jb 0x451ee1",
            "call r11",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0x451eda",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jae 0x451ec9",
            "add ecx, 2",
            "jmp 0x451ee6",
            "call r11",
            "adc ecx, ecx",
            "cmp rbp, 0xfffffffffffffb00",
            "adc ecx, 2",
            "call fcn.00451e02",
            "jmp 0x451e56",
            "pop rcx",
            "mov rax, rsi",
            "sub rax, rcx",
            "pop rdx",
            "sub rdi, rdx",
            "pop rcx",
            "mov dword [rcx], edi",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00451f5d": {
        "function_address": "0x00451f5d",
        "instructions": [
            "push 0x1e",
            "pop rdx",
            "call fcn.00451f4c",
            "or cl, byte [rdx]",
            "or cl, byte [rdx]",
            "scasb al, byte [rdi]",
            "outsb dx, byte [rsi]",
            "invalid",
            "pop rbx",
            "push 1",
            "push 0x40000c",
            "push rax",
            "push 0x2e372f",
            "push rcx",
            "push r15",
            "mov edi, 0x800000",
            "push 7",
            "pop rdx",
            "mov esi, 0x2e372f",
            "push 0x32",
            "pop r10",
            "sub r8d, r8d",
            "push 9",
            "pop rax",
            "syscall",
            "cmp edi, eax",
            "jne 0x451f0b",
            "mov esi, segment.LOAD0",
            "mov edx, edi",
            "sub edx, esi",
            "je 0x451faf",
            "add ebp, edx",
            "add dword [rsp + 8], edx",
            "add dword [rsp + 0x18], edx",
            "mov ecx, ebx",
            "sub ecx, esi",
            "shr ecx, 3",
            "cld",
            "rep movsq qword [rdi], qword [rsi]",
            "xchg edi, eax",
            "mov rsi, rbx",
            "push rax",
            "xchg edx, eax",
            "lodsd eax, dword [rsi]",
            "push rax",
            "mov rcx, rsp",
            "lodsd eax, dword [rsi]",
            "xchg edi, eax",
            "lodsd eax, dword [rsi]",
            "movzx r8d, al",
            "xchg rsi, rdi",
            "call rbp",
            "pop rcx",
            "ret"
        ]
    },
    "fcn.00451f4c": {
        "function_address": "0x00451f4c",
        "instructions": [
            "pop rsi",
            "push 2",
            "pop rdi",
            "push 1",
            "pop rax",
            "syscall",
            "push 0x7f",
            "pop rdi",
            "push 0x3c",
            "pop rax",
            "syscall"
        ]
    },
    "fcn.00451e02": {
        "function_address": "0x00451e02",
        "instructions": [
            "lea rax, [rdi + rbp]",
            "cmp ecx, 5",
            "mov dl, byte [rax]",
            "jbe 0x451e2e",
            "cmp rbp, 0xfffffffffffffffc",
            "ja 0x451e2e",
            "sub ecx, 4",
            "mov edx, dword [rax]",
            "add rax, 4",
            "sub ecx, 4",
            "mov dword [rdi], edx",
            "lea rdi, [rdi + 4]",
            "jae 0x451e16",
            "add ecx, 4",
            "mov dl, byte [rax]",
            "je 0x451e3e",
            "inc rax",
            "mov byte [rdi], dl",
            "sub ecx, 1",
            "mov dl, byte [rax]",
            "lea rdi, [rdi + 1]",
            "jne 0x451e2e",
            "repz ret"
        ]
    }
}