{
    "entry0": {
        "function_address": "0x00102e00",
        "instructions": [
            "call fcn.00103058",
            "push rbp",
            "push rbx",
            "push rcx",
            "push rdx",
            "add rsi, rdi",
            "push rsi",
            "mov rsi, rdi",
            "mov rdi, rdx",
            "xor ebx, ebx",
            "xor ecx, ecx",
            "or rbp, 0xffffffffffffffff",
            "call fcn.00102e70",
            "add ebx, ebx",
            "je 0x102e26",
            "repz ret",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "repz ret"
        ]
    },
    "fcn.00103058": {
        "function_address": "0x00103058",
        "instructions": [
            "pop rbp",
            "lea rax, [rbp - 9]",
            "mov r15d, dword [rax]",
            "mov edx, 0xc8",
            "sub rax, r15",
            "sub r15d, edx",
            "lea rcx, [rax + rdx]",
            "call fcn.00102fed",
            "jb 0x10307c",
            "add byte [rax], al",
            "insb byte [rdi], dx",
            "add eax, 0x49020000",
            "add al, 0",
            "invalid",
            "add cl, byte [rcx + 4]",
            "add dh, bh",
            "invalid"
        ]
    },
    "fcn.00102e70": {
        "function_address": "0x00102e70",
        "instructions": [
            "cld",
            "pop r11",
            "cmp r8b, 2",
            "je 0x102e86",
            "jmp 0x102f03",
            "inc rsi",
            "mov byte [rdi], dl",
            "inc rdi",
            "mov dl, byte [rsi]",
            "add ebx, ebx",
            "jne 0x102e96",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jb 0x102e7e",
            "lea eax, [rcx + 1]",
            "call r11",
            "adc eax, eax",
            "add ebx, ebx",
            "jne 0x102eae",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jae 0x102e9b",
            "sub eax, 3",
            "jb 0x102ecc",
            "shl eax, 8",
            "movzx edx, dl",
            "or eax, edx",
            "inc rsi",
            "xor eax, 0xffffffff",
            "je 0x102f03",
            "movsxd rbp, eax",
            "lea eax, [rcx + 1]",
            "call r11",
            "adc ecx, ecx",
            "call r11",
            "adc ecx, ecx",
            "jne 0x102ef3",
            "mov ecx, eax",
            "add eax, 2",
            "call r11",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0x102ef1",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jae 0x102ee0",
            "cmp rbp, 0xfffffffffffff300",
            "adc ecx, eax",
            "call fcn.00102e32",
            "jmp 0x102e86",
            "pop rcx",
            "mov rax, rsi",
            "sub rax, rcx",
            "pop rdx",
            "sub rdi, rdx",
            "pop rcx",
            "mov dword [rcx], edi",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00102fed": {
        "function_address": "0x00102fed",
        "instructions": [
            "push 0x1e",
            "pop rdx",
            "call 0x102fdc",
            "push rax",
            "push rdx",
            "push r12",
            "pop rdi",
            "pop r8",
            "jl 0x102f7a",
            "push rdx",
            "push r12",
            "pop rdi",
            "push rdi",
            "push rdx",
            "push r12",
            "and byte [r14 + 0x61], r12b",
            "imul ebp, dword [rbp + riz*2 + 0x64], 0xa000a2e",
            "add byte [rcx + rcx*2], ah",
            "outsb dx, byte [rsi]",
            "outsw dx, word [rsi]",
            "cmp ah, byte [rax]",
            "push rsp",
            "push 0x66207369",
            "imul ebp, dword [rbp + riz*2 + 0x20], 0x70207369",
            "invalid",
            "je 0x102ff0",
            "jo 0x102fb8",
            "invalid",
            "push rbp",
            "push rax",
            "pop rax",
            "and byte [rbp + riz*2 + 0x61], dl",
            "insd dword [rdi], dx",
            "and byte cs:[rcx + 0x6c], al",
            "insb byte [rdi], dx",
            "and byte [rdx + 0x69], dl",
            "push 0x52207374",
            "jae 0x103036",
            "jb 0x103049",
            "and byte cs:[rdx + rcx], ah",
            "add byte [rax + 0x26a5e90], dl",
            "pop rdi",
            "push 1",
            "pop rax",
            "syscall",
            "push 0x7f",
            "pop rdi",
            "push 0x3c",
            "pop rax",
            "syscall",
            "pop rbx",
            "push 1",
            "push 0x40000c",
            "push rax",
            "push 0x11510a",
            "push rcx",
            "adc dword [rax], eax",
            "push rcx",
            "push r15",
            "mov edi, 0x200000",
            "push 7",
            "pop rdx",
            "mov esi, segment.LOAD0",
            "push 0x32",
            "pop r10",
            "sub r8d, r8d",
            "push 9",
            "pop rax",
            "syscall",
            "cmp edi, eax",
            "jne 0x102f14",
            "mov esi, 0x200000",
            "mov edx, edi",
            "sub edx, esi",
            "je 0x10303f",
            "add ebp, edx",
            "add dword [rsp + 8], edx",
            "add dword [rsp + 0x18], edx",
            "mov ecx, ebx",
            "sub ecx, esi",
            "shr ecx, 3",
            "cld",
            "rep movsq qword [rdi], qword [rsi]",
            "xchg edi, eax",
            "mov rsi, rbx",
            "push rax",
            "xchg edx, eax",
            "lodsd eax, dword [rsi]",
            "push rax",
            "mov rcx, rsp",
            "lodsd eax, dword [rsi]",
            "loope 0x102ff8",
            "xchg edi, eax",
            "lodsd eax, dword [rsi]",
            "movzx r8d, al",
            "xchg rsi, rdi",
            "call rbp",
            "pop rcx",
            "ret"
        ]
    },
    "unk.0x102fdc": {
        "function_address": "0x00102fdc",
        "instructions": [
            "push 0x1e",
            "pop rdx",
            "call 0x102fdc",
            "push rax",
            "push rdx",
            "push r12",
            "pop rdi",
            "pop r8",
            "jl 0x102f7a",
            "push rdx",
            "push r12",
            "pop rdi",
            "push rdi",
            "push rdx",
            "push r12",
            "and byte [r14 + 0x61], r12b",
            "imul ebp, dword [rbp + riz*2 + 0x64], 0xa000a2e",
            "add byte [rcx + rcx*2], ah",
            "outsb dx, byte [rsi]",
            "outsw dx, word [rsi]",
            "cmp ah, byte [rax]",
            "push rsp",
            "push 0x66207369",
            "imul ebp, dword [rbp + riz*2 + 0x20], 0x70207369",
            "invalid",
            "je 0x102ff0",
            "jo 0x102fb8",
            "invalid",
            "push rbp",
            "push rax",
            "pop rax",
            "and byte [rbp + riz*2 + 0x61], dl",
            "insd dword [rdi], dx",
            "and byte cs:[rcx + 0x6c], al",
            "insb byte [rdi], dx",
            "and byte [rdx + 0x69], dl",
            "push 0x52207374",
            "jae 0x103036",
            "jb 0x103049",
            "and byte cs:[rdx + rcx], ah",
            "add byte [rax + 0x26a5e90], dl",
            "pop rdi",
            "push 1",
            "pop rax",
            "syscall",
            "push 0x7f",
            "pop rdi",
            "push 0x3c",
            "pop rax",
            "syscall",
            "pop rbx",
            "push 1",
            "push 0x40000c",
            "push rax",
            "push 0x11510a",
            "push rcx",
            "adc dword [rax], eax",
            "push rcx",
            "push r15",
            "mov edi, 0x200000",
            "push 7",
            "pop rdx",
            "mov esi, segment.LOAD0",
            "push 0x32",
            "pop r10",
            "sub r8d, r8d",
            "push 9",
            "pop rax",
            "syscall",
            "cmp edi, eax",
            "jne 0x102f14",
            "mov esi, 0x200000",
            "mov edx, edi",
            "sub edx, esi",
            "je 0x10303f",
            "add ebp, edx",
            "add dword [rsp + 8], edx",
            "add dword [rsp + 0x18], edx",
            "mov ecx, ebx",
            "sub ecx, esi",
            "shr ecx, 3",
            "cld",
            "rep movsq qword [rdi], qword [rsi]",
            "xchg edi, eax",
            "mov rsi, rbx",
            "push rax",
            "xchg edx, eax",
            "lodsd eax, dword [rsi]",
            "push rax",
            "mov rcx, rsp",
            "lodsd eax, dword [rsi]",
            "loope 0x102ff8",
            "xchg edi, eax",
            "lodsd eax, dword [rsi]",
            "movzx r8d, al",
            "xchg rsi, rdi",
            "call rbp",
            "pop rcx",
            "ret"
        ]
    },
    "fcn.00102e32": {
        "function_address": "0x00102e32",
        "instructions": [
            "lea rax, [rdi + rbp]",
            "cmp ecx, 5",
            "mov dl, byte [rax]",
            "jbe 0x102e5e",
            "cmp rbp, 0xfffffffffffffffc",
            "ja 0x102e5e",
            "sub ecx, 4",
            "mov edx, dword [rax]",
            "add rax, 4",
            "sub ecx, 4",
            "mov dword [rdi], edx",
            "lea rdi, [rdi + 4]",
            "jae 0x102e46",
            "add ecx, 4",
            "mov dl, byte [rax]",
            "je 0x102e6e",
            "inc rax",
            "mov byte [rdi], dl",
            "sub ecx, 1",
            "mov dl, byte [rax]",
            "lea rdi, [rdi + 1]",
            "jne 0x102e5e",
            "repz ret"
        ]
    }
}