{
    "entry0": {
        "function_address": "0x00008d60",
        "instructions": [
            "push rax",
            "push rdx",
            "call fcn.0000902f",
            "push rbp",
            "push rbx",
            "push rcx",
            "push rdx",
            "add rsi, rdi",
            "push rsi",
            "mov rsi, rdi",
            "mov rdi, rdx",
            "xor ebx, ebx",
            "xor ecx, ecx",
            "or rbp, 0xffffffffffffffff",
            "call fcn.00008dd2",
            "add ebx, ebx",
            "je 0x8d88",
            "repz ret",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "repz ret"
        ]
    },
    "fcn.0000902f": {
        "function_address": "0x0000902f",
        "instructions": [
            "pop rbp",
            "call fcn.00008f75",
            "invalid"
        ]
    },
    "fcn.00008dd2": {
        "function_address": "0x00008dd2",
        "instructions": [
            "cld",
            "pop r11",
            "cmp r8b, 8",
            "je 0x8de8",
            "jmp 0x8e8c",
            "inc rsi",
            "mov byte [rdi], dl",
            "inc rdi",
            "mov dl, byte [rsi]",
            "add ebx, ebx",
            "jne 0x8df8",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jb 0x8de0",
            "lea eax, [rcx + 1]",
            "jmp 0x8e06",
            "dec eax",
            "call r11",
            "adc eax, eax",
            "call r11",
            "adc eax, eax",
            "add ebx, ebx",
            "jne 0x8e19",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "mov dl, byte [rsi]",
            "jae 0x8dff",
            "sub eax, 3",
            "jb 0x8e3d",
            "shl eax, 8",
            "movzx edx, dl",
            "or eax, edx",
            "inc rsi",
            "xor eax, 0xffffffff",
            "je 0x8e8c",
            "sar eax, 1",
            "movsxd rbp, eax",
            "jb 0x8e73",
            "jmp 0x8e4b",
            "add ebx, ebx",
            "jne 0x8e49",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jb 0x8e73",
            "inc ecx",
            "add ebx, ebx",
            "jne 0x8e59",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jb 0x8e73",
            "call r11",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0x8e6c",
            "mov ebx, dword [rsi]",
            "sub rsi, 0xfffffffffffffffc",
            "adc ebx, ebx",
            "jae 0x8e5b",
            "add ecx, 2",
            "jmp 0x8e78",
            "call r11",
            "adc ecx, ecx",
            "cmp rbp, 0xfffffffffffffb00",
            "adc ecx, 2",
            "call fcn.00008d94",
            "jmp 0x8de8",
            "pop rcx",
            "mov rax, rsi",
            "sub rax, rcx",
            "pop rdx",
            "sub rdi, rdx",
            "pop rcx",
            "mov dword [rcx], edi",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00008f75": {
        "function_address": "0x00008f75",
        "instructions": [
            "pop rdi",
            "sub esi, esi",
            "push 2",
            "pop rax",
            "syscall",
            "push rax",
            "lea rsi, [rdi + 0xf]",
            "lodsd eax, dword [rsi]",
            "and eax, 0xfffffffe",
            "mov r14d, eax",
            "push rsi",
            "pop rbx",
            "lodsd eax, dword [rsi]",
            "xchg edx, eax",
            "add rdx, rbx",
            "lodsd eax, dword [rsi]",
            "xchg r13d, eax",
            "lodsd eax, dword [rsi]",
            "add r13, rsi",
            "lea rcx, [rbp - 0xb]",
            "mov r15d, dword [rcx]",
            "sub rcx, r15",
            "sub r15d, r14d",
            "pop rdi",
            "sub rdx, rcx",
            "push rdx",
            "push rax",
            "sub r13, rcx",
            "push rdi",
            "push rcx",
            "sub r9, r9",
            "or r8d, 0xffffffff",
            "push 0x22",
            "pop r10",
            "push rdx",
            "pop rsi",
            "push 3",
            "pop rdx",
            "sub edi, edi",
            "push 9",
            "pop rax",
            "syscall",
            "add r14, rax",
            "mov qword [rsp + 0x10], rax",
            "xchg rdi, rax",
            "mov r8d, dword [rsp + 8]",
            "push 0x12",
            "pop r10",
            "mov rsi, r13",
            "push 9",
            "pop rax",
            "syscall",
            "mov rdx, qword [rsp + 0x18]",
            "pop rcx",
            "push rcx",
            "add rdx, rax",
            "sub rax, rcx",
            "mov r12, rax",
            "add rax, rbp",
            "push rax",
            "and rax, 0xfffffffffffff000",
            "push rax",
            "sub rdx, rax",
            "push rdx",
            "mov rsi, rbx",
            "lodsd eax, dword [rsi]",
            "push rax",
            "mov rcx, rsp",
            "lea rdx, [rbx + r12]",
            "mov r13, rdx",
            "lodsd eax, dword [rsi]",
            "push rax",
            "lodsd eax, dword [rsi]",
            "xchg r8d, eax",
            "mov rdi, rsi",
            "pop rsi",
            "call rbp",
            "pop rcx",
            "pop rsi",
            "pop rdi",
            "pop rbp",
            "push 5",
            "pop rdx",
            "push 0xa",
            "pop rax",
            "syscall",
            "jmp r13"
        ]
    },
    "fcn.00008d94": {
        "function_address": "0x00008d94",
        "instructions": [
            "lea rax, [rdi + rbp]",
            "cmp ecx, 5",
            "mov dl, byte [rax]",
            "jbe 0x8dc0",
            "cmp rbp, 0xfffffffffffffffc",
            "ja 0x8dc0",
            "sub ecx, 4",
            "mov edx, dword [rax]",
            "add rax, 4",
            "sub ecx, 4",
            "mov dword [rdi], edx",
            "lea rdi, [rdi + 4]",
            "jae 0x8da8",
            "add ecx, 4",
            "mov dl, byte [rax]",
            "je 0x8dd0",
            "inc rax",
            "mov byte [rdi], dl",
            "sub ecx, 1",
            "mov dl, byte [rax]",
            "lea rdi, [rdi + 1]",
            "jne 0x8dc0",
            "repz ret"
        ]
    }
}