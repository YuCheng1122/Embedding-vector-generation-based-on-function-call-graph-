{
    "entry0": {
        "function_address": "0x00c06c58",
        "instructions": [
            "call fcn.00c06eac",
            "jmp 0xc06c6d",
            "pushal",
            "mov esi, dword [esp + 0x24]",
            "mov edi, dword [esp + 0x2c]",
            "or ebp, 0xffffffff",
            "jmp 0xc06c8a",
            "mov al, byte [esi]",
            "inc esi",
            "mov byte [edi], al",
            "inc edi",
            "add ebx, ebx",
            "jne 0xc06c91",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "mov al, byte [edi]",
            "jb 0xc06c80",
            "mov eax, 1",
            "add ebx, ebx",
            "jne 0xc06ca5",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc eax, eax",
            "add ebx, ebx",
            "jae 0xc06c9a",
            "jne 0xc06cb6",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc06c9a",
            "xor ecx, ecx",
            "sub eax, 3",
            "jb 0xc06cca",
            "shl eax, 8",
            "mov al, byte [esi]",
            "inc esi",
            "xor eax, 0xffffffff",
            "je 0xc06d3e",
            "mov ebp, eax",
            "add ebx, ebx",
            "jne 0xc06cd5",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0xc06ce2",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "jne 0xc06d06",
            "inc ecx",
            "add ebx, ebx",
            "jne 0xc06cf2",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jae 0xc06ce7",
            "jne 0xc06d03",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc06ce7",
            "add ecx, 2",
            "cmp ebp, 0xfffff300",
            "adc ecx, 1",
            "lea edx, [edi + ebp]",
            "cmp ebp, 0xfffffffc",
            "mov al, byte [edi + ecx]",
            "jbe 0xc06d28",
            "mov al, byte [edx]",
            "inc edx",
            "mov byte [edi], al",
            "inc edi",
            "dec ecx",
            "jne 0xc06d1a",
            "jmp 0xc06c86",
            "mov eax, dword [edx]",
            "add edx, 4",
            "mov dword [edi], eax",
            "add edi, 4",
            "sub ecx, 4",
            "ja 0xc06d28",
            "add edi, ecx",
            "jmp 0xc06c86",
            "mov edx, dword [esp + 0x24]",
            "add edx, dword [esp + 0x28]",
            "cmp esi, edx",
            "je 0xc06d4b",
            "dec eax",
            "sub edi, dword [esp + 0x2c]",
            "mov edx, dword [esp + 0x30]",
            "mov dword [edx], edi",
            "mov dword [esp + 0x1c], eax",
            "popal",
            "ret"
        ]
    },
    "fcn.00c06eac": {
        "function_address": "0x00c06eac",
        "instructions": [
            "pop ebp",
            "call fcn.00c06e5f",
            "pop esi",
            "push es",
            "add byte [eax], al",
            "jge 0xc06ebd",
            "add byte [eax], al",
            "add al, byte [esi + 6]",
            "add bl, bl",
            "mov bh, 0xff",
            "call dword [edi + 0x53]",
            "sub ecx, ecx",
            "mov edx, 0x278",
            "mov esi, esp",
            "mov edi, esp",
            "sub ebx, ebx",
            "call 0x8dc07892",
            "pop ecx",
            "add al, 0xd",
            "sal dword [edi + 0x77], 1",
            "invalid"
        ]
    },
    "fcn.00c06e5f": {
        "function_address": "0x00c06e5f",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc06e4f",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc06e8d",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc06e2a",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    },
    "unk.0xc06e4f": {
        "function_address": "0x00c06e4f",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc06e4f",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc06e8d",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc06e2a",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    }
}