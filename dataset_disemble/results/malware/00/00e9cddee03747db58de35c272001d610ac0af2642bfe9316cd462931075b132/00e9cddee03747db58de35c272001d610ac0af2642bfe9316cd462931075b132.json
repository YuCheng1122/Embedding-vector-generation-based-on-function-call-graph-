{
    "entry0": {
        "function_address": "0x00c05ef8",
        "instructions": [
            "call fcn.00c06164",
            "jmp 0xc05f0d",
            "pushal",
            "mov esi, dword [esp + 0x24]",
            "mov edi, dword [esp + 0x2c]",
            "or ebp, 0xffffffff",
            "jmp 0xc05f2a",
            "mov al, byte [esi]",
            "inc esi",
            "mov byte [edi], al",
            "inc edi",
            "add ebx, ebx",
            "jne 0xc05f31",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "mov al, byte [edi]",
            "jb 0xc05f20",
            "mov eax, 1",
            "add ebx, ebx",
            "jne 0xc05f45",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc eax, eax",
            "add ebx, ebx",
            "jae 0xc05f3a",
            "jne 0xc05f56",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc05f3a",
            "xor ecx, ecx",
            "sub eax, 3",
            "jb 0xc05f6a",
            "shl eax, 8",
            "mov al, byte [esi]",
            "inc esi",
            "xor eax, 0xffffffff",
            "je 0xc05fde",
            "mov ebp, eax",
            "add ebx, ebx",
            "jne 0xc05f75",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jne 0xc05f82",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "jne 0xc05fa6",
            "inc ecx",
            "add ebx, ebx",
            "jne 0xc05f92",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "adc ecx, ecx",
            "add ebx, ebx",
            "jae 0xc05f87",
            "jne 0xc05fa3",
            "mov ebx, dword [esi]",
            "sub esi, 0xfffffffc",
            "adc ebx, ebx",
            "jae 0xc05f87",
            "add ecx, 2",
            "cmp ebp, 0xfffff300",
            "adc ecx, 1",
            "lea edx, [edi + ebp]",
            "cmp ebp, 0xfffffffc",
            "mov al, byte [edi + ecx]",
            "jbe 0xc05fc8",
            "mov al, byte [edx]",
            "inc edx",
            "mov byte [edi], al",
            "inc edi",
            "dec ecx",
            "jne 0xc05fba",
            "jmp 0xc05f26",
            "mov eax, dword [edx]",
            "add edx, 4",
            "mov dword [edi], eax",
            "add edi, 4",
            "sub ecx, 4",
            "ja 0xc05fc8",
            "add edi, ecx",
            "jmp 0xc05f26",
            "mov edx, dword [esp + 0x24]",
            "add edx, dword [esp + 0x28]",
            "cmp esi, edx",
            "je 0xc05feb",
            "dec eax",
            "sub edi, dword [esp + 0x2c]",
            "mov edx, dword [esp + 0x30]",
            "mov dword [edx], edi",
            "mov dword [esp + 0x1c], eax",
            "popal",
            "ret"
        ]
    },
    "fcn.00c06164": {
        "function_address": "0x00c06164",
        "instructions": [
            "pop ebp",
            "call fcn.00c06117",
            "pop esi",
            "push es",
            "add byte [eax], al",
            "jge 0xc06175",
            "add byte [eax], al",
            "add cl, byte [ecx]",
            "add bl, bl",
            "mov bh, 0xff",
            "call dword [edi + 0x53]",
            "sub ecx, ecx",
            "mov edx, 0x278",
            "mov esi, esp",
            "mov edi, esp",
            "sub ebx, ebx",
            "call 0x8dc06b4a",
            "pop ecx",
            "add al, 0xd",
            "sal dword [edi + 0x77], 1",
            "invalid"
        ]
    },
    "fcn.00c06117": {
        "function_address": "0x00c06117",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc06107",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc06145",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc060e2",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    },
    "unk.0xc06107": {
        "function_address": "0x00c06107",
        "instructions": [
            "push 0x1d",
            "pop edx",
            "call 0xc06107",
            "push eax",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "inc ebp",
            "pop eax",
            "inc ebp",
            "inc ebx",
            "jl 0xc06145",
            "push edx",
            "dec edi",
            "push esp",
            "pop edi",
            "push edi",
            "push edx",
            "dec ecx",
            "push esp",
            "inc ebp",
            "and byte [esi + 0x61], ah",
            "imul ebp, dword [ebp + 0x64], 0x6a590a2e",
            "add bl, byte [ebx + 0x6a]",
            "add al, 0x58",
            "int 0x80",
            "mov bl, 0x7f",
            "push 1",
            "pop eax",
            "int 0x80",
            "pop esi",
            "lea eax, [ebp - 9]",
            "mov edi, dword [eax]",
            "sub eax, edi",
            "mov edx, eax",
            "add eax, dword [eax + 0x48]",
            "add eax, 0xfff",
            "and eax, 0xfffff000",
            "push 1",
            "push eax",
            "xor ecx, ecx",
            "push 0xffffffffffffffff",
            "push 0x32",
            "mov ch, 0x10",
            "push 7",
            "push ecx",
            "push eax",
            "mov ebx, esp",
            "push 0x5a",
            "pop eax",
            "int 0x80",
            "cmp eax, dword [ebx]",
            "jne 0xc060e2",
            "add ecx, dword [edi]",
            "test dword [esi - 0x6d000001], edx",
            "xchg edx, eax",
            "xchg ebx, eax",
            "cld",
            "lodsd eax, dword [esi]",
            "push eax",
            "mov ecx, esp",
            "push eax",
            "push ecx",
            "push edx",
            "lodsd eax, dword [esi]",
            "push eax",
            "lodsd eax, dword [esi]",
            "mov dword [esp + 0xc], eax",
            "push esi",
            "call ebp",
            "add esp, 0x2c",
            "ret"
        ]
    }
}