{
    "entry0": {
        "function_address": "0x0000069c",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00000700]",
            "ldr r3, [0x00000704]",
            "add r4, pc, r4",
            "ldrb r3, [r4, r3]",
            "cmp r3, 0",
            "popne {r4, pc}",
            "ldr r3, [0x00000708]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x6d4",
            "ldr r3, [0x0000070c]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.__cxa_finalize",
            "ldr r3, [0x00000710]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x6f0",
            "ldr r0, [0x00000714]",
            "add r0, r4, r0",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, [0x00000704]",
            "mov r2, 1",
            "strb r2, [r4, r3]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00000630",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xb10]!"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00000648",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xb00]!"
        ]
    },
    "sym.regcomp": {
        "function_address": "0x000008ac",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, 0",
            "sub sp, sp, 0x18",
            "tst r2, 2",
            "mov r5, r0",
            "mov r6, 0",
            "str r3, [sp, 8]",
            "and r3, r2, 1",
            "orrne r3, r3, 2",
            "tst r2, 0x10",
            "orrne r3, r3, 4",
            "tst r2, 0x20",
            "orrne r3, r3, 0x1000",
            "tst r2, 0x40",
            "orrne r3, r3, 0x800",
            "tst r2, 0x400",
            "orrne r3, r3, 0x20000000",
            "tst r2, 0x200",
            "orrne r3, r3, 0x200",
            "mov r0, r1",
            "add ip, sp, 0x10",
            "mov r1, r3",
            "add r2, sp, 0xc",
            "add r3, sp, 0x14",
            "ldr r4, [0x00000974]",
            "str ip, [sp]",
            "str r6, [sp, 4]",
            "bl sym.imp.pcre_compile2",
            "ldr r3, [sp, 0x10]",
            "cmp r0, r6",
            "add r4, pc, r4",
            "str r0, [r5]",
            "str r3, [r5, 8]",
            "beq 0x958",
            "add r3, sp, 8",
            "mov r1, r6",
            "mov r2, 2",
            "bl sym.imp.pcre_fullinfo",
            "ldr r3, [sp, 8]",
            "mov r0, r6",
            "str r3, [r5, 4]",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 0x54",
            "movgt r0, 3",
            "ldrle r2, [0x00000978]",
            "addle r4, r4, r2",
            "ldrle r0, [r4, r3, lsl 2]",
            "b 0x950"
        ]
    },
    "sym.imp.pcre_compile2": {
        "function_address": "0x00000618",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xb20]!"
        ]
    },
    "sym.imp.pcre_fullinfo": {
        "function_address": "0x00000624",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xb18]!"
        ]
    },
    "sym.regexec": {
        "function_address": "0x0000097c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r3",
            "ldr r8, [r0]",
            "sub sp, sp, 0x9c",
            "mov r4, r2",
            "mvn r2, 0",
            "ldr r6, [sp, 0xc0]",
            "ldr r3, [r8, 8]",
            "ldr fp, [0x00000b88]",
            "ands sl, r6, 4",
            "str r1, [sp, 0x18]",
            "ubfx r3, r3, 0xc, 1",
            "movne sl, 0x80",
            "str r3, [sp, 0x14]",
            "tst r6, 8",
            "ldr r3, [sp, 0x14]",
            "orrne sl, sl, 0x100",
            "tst r6, 0x100",
            "add fp, pc, fp",
            "orrne sl, sl, 0x400",
            "str r2, [r0, 8]",
            "cmp r5, 0",
            "orreq r3, r3, 1",
            "cmp r3, 0",
            "bne 0xaa8",
            "cmp r4, 0",
            "moveq sb, r4",
            "streq r4, [sp, 0x1c]",
            "moveq r7, r4",
            "beq 0xa24",
            "cmp r4, 0xa",
            "bls 0xa18",
            "movw r3, 0xaaaa",
            "movt r3, 0xaaa",
            "cmp r4, r3",
            "bls 0xb50",
            "mov r0, 0xe",
            "add sp, sp, 0x9c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "add sb, r4, r4, lsl 1",
            "add r7, sp, 0x20",
            "str r3, [sp, 0x1c]",
            "ands r6, r6, 0x80",
            "bne 0xac0",
            "ldr r0, [sp, 0x18]",
            "bl sym.imp.strlen",
            "mov r2, r6",
            "mov lr, r0",
            "mov r3, r6",
            "ldr r6, [sp, 0x18]",
            "mov ip, 0",
            "mov r0, r8",
            "mov r1, ip",
            "rsb r3, r3, lr",
            "str ip, [sp]",
            "add r2, r6, r2",
            "str sl, [sp, 4]",
            "str r7, [sp, 8]",
            "str sb, [sp, 0xc]",
            "bl sym.imp.pcre_exec",
            "subs r8, r0, 0",
            "moveq r8, r4",
            "beq 0xacc",
            "bge 0xacc",
            "ldr r6, [sp, 0x1c]",
            "cmp r6, 0",
            "bne 0xb70",
            "add r8, r8, 0x1c",
            "cmp r8, 0x1d",
            "movhi r0, 1",
            "ldrls r3, [0x00000b8c]",
            "addls fp, fp, r3",
            "addls r8, fp, r8, lsl 2",
            "ldrls r0, [r8, 0x154]",
            "b 0xa10",
            "ands r6, r6, 0x80",
            "mov sb, 0",
            "str sb, [sp, 0x1c]",
            "mov r7, sb",
            "mov r4, sb",
            "beq 0xa2c",
            "ldm r5, {r3, lr}",
            "mov r2, r3",
            "b 0xa40",
            "ldr r3, [sp, 0x14]",
            "cmp r3, 0",
            "bne 0xb48",
            "cmp r8, 0",
            "mov r6, r8",
            "beq 0xb18",
            "mov r2, r3",
            "mov r0, r7",
            "mov r1, r3",
            "ldr ip, [r7, r2]",
            "mov r3, r5",
            "add r1, r1, 1",
            "cmp r1, r8",
            "str ip, [r3, r2]!",
            "add r2, r2, 8",
            "ldr ip, [r0, 4]",
            "add r0, r0, 8",
            "str ip, [r3, 4]",
            "blo 0xaf0",
            "ldr r3, [sp, 0x1c]",
            "cmp r3, 0",
            "bne 0xb7c",
            "cmp r4, r8",
            "bls 0xb48",
            "add r5, r5, r8, lsl 3",
            "mvn r3, 0",
            "add r6, r6, 1",
            "str r3, [r5, 4]",
            "cmp r4, r6",
            "str r3, [r5], 8",
            "bhi 0xb34",
            "mov r0, 0",
            "b 0xa10",
            "add sb, r4, r4, lsl 1",
            "lsl r0, sb, 2",
            "bl sym.imp.malloc",
            "subs r7, r0, 0",
            "movne r3, 1",
            "strne r3, [sp, 0x1c]",
            "bne 0xa24",
            "b 0xa0c",
            "mov r0, r7",
            "bl sym.imp.free",
            "b 0xa88",
            "mov r0, r7",
            "bl sym.imp.free",
            "b 0xb24"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x0000066c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xae8]!"
        ]
    },
    "sym.imp.pcre_exec": {
        "function_address": "0x00000678",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xae0]!"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x0000063c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xb08]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00000690",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xad0]!"
        ]
    },
    "sym.regerror": {
        "function_address": "0x0000078c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "cmp r0, 0x11",
            "ldr r4, [0x0000086c]",
            "sub sp, sp, 8",
            "mov r8, r1",
            "mov r6, r2",
            "mov r7, r3",
            "add r4, pc, r4",
            "bgt 0x834",
            "ldr r3, [0x00000870]",
            "add r3, r4, r3",
            "ldr sb, [r3, r0, lsl 2]",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "add sl, r0, 1",
            "cmp r8, 0",
            "moveq r3, r8",
            "beq 0x7e4",
            "ldr r3, [r8, 8]",
            "cmn r3, 1",
            "movne r3, 0x11",
            "moveq r3, 0",
            "cmp r7, 0",
            "addeq r5, r3, sl",
            "beq 0x828",
            "cmp r3, 0",
            "beq 0x808",
            "add r5, r3, sl",
            "cmp r7, r5",
            "mov sl, r5",
            "bhs 0x844",
            "mov r0, r6",
            "mov r1, sb",
            "sub r2, r7, 1",
            "mov r5, sl",
            "bl sym.imp.strncpy",
            "add r6, r6, r7",
            "mov r3, 0",
            "strb r3, [r6, -1]",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr sb, [0x00000874]",
            "mov sl, 0x13",
            "add sb, r4, sb",
            "b 0x7c8",
            "ldr r3, [r8, 8]",
            "mov r0, r6",
            "ldr r1, [0x00000878]",
            "mov r2, sb",
            "str r3, [sp]",
            "ldr r3, [0x0000087c]",
            "add r1, r4, r1",
            "add r3, r4, r3",
            "bl sym.imp.sprintf",
            "b 0x828"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00000654",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xaf8]!"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x00000660",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xaf0]!"
        ]
    },
    "entry.init0": {
        "function_address": "0x00000718",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00000774]",
            "ldr r3, [0x00000778]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x748",
            "ldr r0, [0x0000077c]",
            "ldr r1, [0x00000780]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl loc.imp.__register_frame_info",
            "ldr r3, [0x00000784]",
            "add r0, r4, r3",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "popeq {r4, pc}",
            "ldr r3, [0x00000788]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "popeq {r4, pc}",
            "blx r3",
            "pop {r4, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00000684",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 8, 20",
            "ldr pc, [ip, 0xad8]!"
        ]
    }
}