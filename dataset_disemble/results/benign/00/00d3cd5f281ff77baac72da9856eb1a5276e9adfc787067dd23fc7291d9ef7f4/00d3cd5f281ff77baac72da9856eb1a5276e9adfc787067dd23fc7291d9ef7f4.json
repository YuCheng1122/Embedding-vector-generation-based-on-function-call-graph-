{
    "fcn.00008714": {
        "function_address": "0x00008714",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "movw r3, 0x294c",
            "movt r3, 1",
            "ldr r3, [r3]",
            "ldr r4, [r1, r3, lsl 2]",
            "movw r1, 0x9670",
            "movt r1, 0",
            "mov r0, r4",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x8794",
            "movw r1, 0x96c4",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "subs r5, r0, 0",
            "beq 0x87c0",
            "mov r0, r4",
            "movw r1, 0x9704",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x8780",
            "movw r0, 0x970c",
            "movt r0, 0",
            "pop {r3, r4, r5, lr}",
            "b sym.imp.puts",
            "movw r0, 0x9708",
            "ldr r1, [0x000087e0]",
            "movt r0, 0",
            "pop {r3, r4, r5, lr}",
            "b sym.imp.printf",
            "movw r0, 0x9678",
            "movt r0, 0",
            "bl fcn.00008aa4",
            "movw r0, 0x9694",
            "movt r0, 0",
            "bl fcn.00008a28",
            "movw r0, 0x96b0",
            "mov r1, 1",
            "movt r0, 0",
            "bl fcn.00009120",
            "pop {r3, r4, r5, pc}",
            "movw r0, 0x96d0",
            "movt r0, 0",
            "bl fcn.00008b38",
            "mov r1, r5",
            "movw r0, 0x96ec",
            "movt r0, 0",
            "bl fcn.00009120",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x000086e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x17c]!"
        ]
    },
    "fcn.00008aa4": {
        "function_address": "0x00008aa4",
        "instructions": [
            "push {r4, lr}",
            "movw r0, 0x93ec",
            "movt r0, 0",
            "movw r4, 0x1880",
            "bl sym.imp.puts",
            "movw r0, 0x9400",
            "movt r0, 0",
            "movt r4, 1",
            "bl fcn.000088b4",
            "mov r1, r0",
            "add r0, r4, 0x5c0",
            "bl sym.imp.strcpy",
            "movw r0, 0x9414",
            "movt r0, 0",
            "bl fcn.000088b4",
            "mov r1, r0",
            "add r0, r4, 0x7c0",
            "bl sym.imp.strcpy",
            "movw r0, 0x942c",
            "movt r0, 0",
            "bl sym.imp.config_get",
            "mov r1, r0",
            "add r0, r4, 0x6c0",
            "bl sym.imp.strcpy",
            "movw r0, 0x9438",
            "movt r0, 0",
            "bl sym.imp.config_get",
            "mov r1, r0",
            "add r0, r4, 0x640",
            "bl sym.imp.strcpy",
            "movw r0, 0x9444",
            "movt r0, 0",
            "bl sym.imp.config_get",
            "mov r1, r0",
            "add r0, r4, 0x740",
            "pop {r4, lr}",
            "b sym.imp.strcpy"
        ]
    },
    "fcn.00008a28": {
        "function_address": "0x00008a28",
        "instructions": [
            "push {r4, lr}",
            "movw r0, 0x93ac",
            "sub sp, sp, 0x80",
            "movt r0, 0",
            "bl sym.imp.puts",
            "movw r0, 0x93c4",
            "movt r0, 0",
            "movw r4, 0x1880",
            "bl sym.imp.config_get",
            "movt r4, 1",
            "mov r1, r0",
            "mov r0, sp",
            "bl sym.imp.strcpy",
            "movw r3, 0x93d0",
            "movt r3, 0",
            "ldm r3, {r0, r1}",
            "str r0, [r4, 0xc0]",
            "mov r0, sp",
            "strh r1, [r4, 0xc4]",
            "bl fcn.0000898c",
            "mov r1, r0",
            "add r0, r4, 0x1c0",
            "bl sym.imp.strcpy",
            "movw r0, 0x93d8",
            "movt r0, 0",
            "bl fcn.000088b4",
            "mov r1, r0",
            "add r0, r4, 0x240",
            "bl sym.imp.strcpy",
            "add sp, sp, 0x80",
            "pop {r4, pc}"
        ]
    },
    "fcn.00009120": {
        "function_address": "0x00009120",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x210",
            "mov r5, r0",
            "add r0, sp, 0xc",
            "mov r4, r1",
            "bl sym.imp.time",
            "add r0, sp, 0xc",
            "bl sym.imp.localtime",
            "mov r8, r0",
            "movw r0, 0x9580",
            "movt r0, 0",
            "bl sym.imp.puts",
            "mov r0, r5",
            "movw r1, 0x95a8",
            "movt r1, 0",
            "bl sym.imp.fopen",
            "cmp r4, 0",
            "mov r6, r0",
            "beq 0x92a0",
            "cmp r0, 0",
            "beq 0x92c4",
            "ldr r5, [0x00009398]",
            "add r7, r5, 0x800",
            "sub r4, r5, 0x40",
            "movw r1, 0x95ac",
            "movt r1, 0",
            "mov r0, r4",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9308",
            "movw r1, 0x93b4",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9308",
            "movw r1, 0x95b8",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9308",
            "movw r1, 0x95c4",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9308",
            "movw r1, 0x95d0",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9308",
            "movw r1, 0x95e4",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x92d4",
            "movw r1, 0x9444",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x92d4",
            "movw r1, 0x9604",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9320",
            "movw r1, 0x9624",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x934c",
            "movw r1, 0x9640",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x92d4",
            "movw r1, 0x964c",
            "mov r0, r4",
            "movt r1, 0",
            "bl sym.imp.strcmp",
            "mov r2, r4",
            "cmp r0, 0",
            "bne 0x9380",
            "movw r1, 0x9658",
            "add r0, sp, 0x10",
            "movt r1, 0",
            "bl sym.imp.sprintf",
            "b 0x92ec",
            "cmp r0, 0",
            "beq 0x92c4",
            "movw r1, 0x2b58",
            "add r0, sp, 0x10",
            "movt r1, 1",
            "bl sym.imp.strcpy",
            "add r0, sp, 0x10",
            "mov r1, r6",
            "bl sym.imp.fputs",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "add sp, sp, 0x210",
            "pop {r4, r5, r6, r7, r8, pc}",
            "movw r1, 0x95f4",
            "mov r2, r4",
            "add r0, sp, 0x10",
            "movt r1, 0",
            "mov r3, r5",
            "bl sym.imp.sprintf",
            "add r5, r5, 0x80",
            "add r0, sp, 0x10",
            "mov r1, r6",
            "bl sym.imp.fputs",
            "cmp r5, r7",
            "bne 0x917c",
            "b 0x92c4",
            "mov r2, r4",
            "movw r1, 0x95dc",
            "add r0, sp, 0x10",
            "movt r1, 0",
            "bl sym.imp.sprintf",
            "b 0x92ec",
            "ldr lr, [r8, 4]",
            "mov r2, r4",
            "ldr ip, [r8]",
            "movw r1, 0x960c",
            "ldr r3, [r8, 8]",
            "movt r1, 0",
            "add r0, sp, 0x10",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl sym.imp.sprintf",
            "b 0x92ec",
            "ldr r3, [r8, 0x14]",
            "mov r2, r4",
            "ldr ip, [r8, 0xc]",
            "movw r1, 0x962c",
            "ldr r0, [r8, 0x10]",
            "add r3, r3, 0x760",
            "add r3, r3, 0xc",
            "movt r1, 0",
            "add r0, r0, 1",
            "stm sp, {r0, ip}",
            "add r0, sp, 0x10",
            "bl sym.imp.sprintf",
            "b 0x92ec",
            "movw r1, 0x9664",
            "add r0, sp, 0x10",
            "movt r1, 0",
            "mov r3, r5",
            "bl sym.imp.sprintf",
            "b 0x92ec"
        ]
    },
    "fcn.00008b38": {
        "function_address": "0x00008b38",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x5f0",
            "sub sp, sp, 0xc",
            "movw r0, 0x9464",
            "movt r0, 0",
            "bl sym.imp.puts",
            "movw r0, 0x947c",
            "movw r1, 0x93e8",
            "movt r0, 0",
            "movt r1, 0",
            "bl sym.imp.popen",
            "subs r4, r0, 0",
            "movne r5, 0",
            "bne 0x8b80",
            "b 0x90d4",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "addne r5, r5, 1",
            "mov r1, 0x100",
            "add r0, sp, 0x2f8",
            "mov r2, r4",
            "bl sym.imp.fgets",
            "movw r1, 0x9494",
            "movt r1, 0",
            "cmp r0, 0",
            "add r0, sp, 0x2f8",
            "bne 0x8b74",
            "mov r0, r4",
            "bl sym.imp.pclose",
            "movw r3, 0x2954",
            "cmp r5, 0",
            "movt r3, 1",
            "str r5, [r3, 0x200]",
            "beq 0x90e0",
            "ldr r7, [0x00009110]",
            "movw r0, 0x2b58",
            "str r5, [sp]",
            "movt r0, 1",
            "sub r2, r7, 0x100",
            "sub r3, r7, 0x80",
            "str r7, [sp, 4]",
            "movw r1, 0x94a0",
            "movt r1, 0",
            "bl sym.imp.sprintf",
            "movw r0, 0x947c",
            "movw r1, 0x93e8",
            "movt r0, 0",
            "movt r1, 0",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0x90c8",
            "add r8, r7, 0x1c0",
            "add r7, r7, 0x240",
            "mov r4, 0",
            "add r0, sp, 0x2f8",
            "mov r1, 0x100",
            "mov r2, r6",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x90c0",
            "movw r1, 0x9494",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8ca8",
            "ldrb r2, [r0, 0xd]",
            "add r3, r0, 0xd",
            "cmp r2, 0x22",
            "beq 0x8c5c",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8c50",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8c7c",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8c70",
            "rsb r3, r3, r2",
            "add r0, sp, 0x178",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x480]",
            "movw r1, 0x94bc",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8d28",
            "ldrb r2, [r0, 0xd]",
            "add r3, r0, 0xd",
            "cmp r2, 0x22",
            "beq 0x8cdc",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8cd0",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8cfc",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8cf0",
            "rsb r3, r3, r2",
            "add r0, sp, 0xf8",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x500]",
            "movw r1, 0x94c8",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8da8",
            "ldrb r2, [r0, 0x11]",
            "add r3, r0, 0x11",
            "cmp r2, 0x22",
            "beq 0x8d5c",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8d50",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8d7c",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8d70",
            "rsb r3, r3, r2",
            "add r0, sp, 0x278",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x380]",
            "movw r1, 0x94d8",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8e28",
            "ldrb r2, [r0, 0xf]",
            "add r3, r0, 0xf",
            "cmp r2, 0x22",
            "beq 0x8ddc",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8dd0",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8dfc",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8df0",
            "rsb r3, r3, r2",
            "add r0, sp, 0x1f8",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x400]",
            "movw r1, 0x94e8",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8ea8",
            "ldrb r2, [r0, 0x10]",
            "add r3, r0, 0x10",
            "cmp r2, 0x22",
            "beq 0x8e5c",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8e50",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8e7c",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8e70",
            "rsb r3, r3, r2",
            "add r0, sp, 0x38",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x5c0]",
            "movw r1, 0x94f8",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8f28",
            "ldrb r2, [r0, 0xd]",
            "add r3, r0, 0xd",
            "cmp r2, 0x22",
            "beq 0x8edc",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8ed0",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8efc",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8ef0",
            "rsb r3, r3, r2",
            "add r0, sp, 0x78",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x580]",
            "movw r1, 0x9504",
            "add r0, sp, 0x2f8",
            "movt r1, 0",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x8fa8",
            "ldrb r2, [r0, 0xe]",
            "add r3, r0, 0xe",
            "cmp r2, 0x22",
            "beq 0x8f5c",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x22",
            "bne 0x8f50",
            "ldrb r2, [r3, 1]",
            "add r1, r3, 1",
            "cmp r2, 0x22",
            "mov r2, r1",
            "beq 0x8f7c",
            "ldrb r0, [r2, 1]!",
            "cmp r0, 0x22",
            "bne 0x8f70",
            "rsb r3, r3, r2",
            "add r0, sp, 0xb8",
            "sub sb, r3, 1",
            "add r4, r4, 1",
            "mov r2, sb",
            "bl sym.imp.strncpy",
            "add r3, sp, 0x5f0",
            "add r3, r3, 8",
            "add sb, r3, sb",
            "mov r3, 0",
            "strb r3, [sb, -0x540]",
            "cmp r4, 7",
            "bne 0x8c10",
            "add r1, sp, 0xf8",
            "ldr r0, [0x00009114]",
            "bl sym.imp.strcpy",
            "add r0, sp, 0x178",
            "bl fcn.0000898c",
            "ldr r4, [0x00009118]",
            "sub r5, r5, 1",
            "add fp, r4, 0x80",
            "add sl, r4, 0x100",
            "add sb, r4, 0x180",
            "mov r1, r0",
            "sub r0, r4, 0x100",
            "bl sym.imp.strcpy",
            "add r1, sp, 0x1f8",
            "sub r0, r4, 0x80",
            "bl sym.imp.strcpy",
            "add r1, sp, 0x278",
            "mov r0, r4",
            "bl sym.imp.strcpy",
            "add r1, sp, 0x78",
            "mov r0, fp",
            "bl sym.imp.strcpy",
            "add r1, sp, 0xb8",
            "mov r0, sl",
            "bl sym.imp.strcpy",
            "add r1, sp, 0x38",
            "mov r0, sb",
            "bl sym.imp.strcpy",
            "sub r1, r4, 0x1c0",
            "sub ip, r4, 0x140",
            "sub r2, r4, 0xc0",
            "sub r3, r4, 0x40",
            "add r0, r4, 0x40",
            "str r1, [sp]",
            "add r1, r4, 0xc0",
            "str ip, [sp, 4]",
            "add ip, r4, 0x140",
            "str r2, [sp, 0xc]",
            "sub r2, r4, 0x240",
            "str r3, [sp, 0x14]",
            "sub r3, r4, 0x200",
            "str r0, [sp, 0x1c]",
            "add r0, sp, 0x3f8",
            "str r1, [sp, 0x24]",
            "movw r1, 0x9514",
            "str ip, [sp, 0x2c]",
            "movt r1, 0",
            "str fp, [sp, 0x20]",
            "str sl, [sp, 0x28]",
            "str sb, [sp, 0x30]",
            "str r4, [sp, 0x18]",
            "str r8, [sp, 8]",
            "str r7, [sp, 0x10]",
            "bl sym.imp.sprintf",
            "add r1, sp, 0x3f8",
            "movw r0, 0x2b58",
            "movt r0, 1",
            "bl sym.imp.strcat",
            "cmp r5, 0",
            "movw r3, 0x9458",
            "movt r3, 0",
            "movw r1, 0x945c",
            "movw r0, 0x2b58",
            "movt r1, 0",
            "movt r0, 1",
            "movne r1, r3",
            "bl sym.imp.strcat",
            "b 0x8c0c",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "add sp, sp, 0x5f0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "movw r3, 0x2954",
            "movt r3, 1",
            "str r4, [r3, 0x200]",
            "ldr r2, [0x0000911c]",
            "mov r3, 0",
            "movw r0, 0x2b58",
            "str r3, [sp]",
            "movt r0, 1",
            "add r3, r2, 0x80",
            "movw r1, 0x956c",
            "movt r1, 0",
            "bl sym.imp.sprintf",
            "add sp, sp, 0x5f0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008654",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1dc]!"
        ]
    },
    "fcn.000088b4": {
        "function_address": "0x000088b4",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "movw r4, 0x2954",
            "movt r4, 1",
            "mov r5, r0",
            "mov r1, 0",
            "mov r2, 0x80",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, r4, 0x80",
            "bl sym.imp.memset",
            "mov r0, r5",
            "movw r1, 0x93e8",
            "movt r1, 0",
            "bl sym.imp.fopen",
            "subs r5, r0, 0",
            "beq 0x8974",
            "mov r1, 0x80",
            "mov r2, r5",
            "mov r0, r4",
            "bl sym.imp.fgets",
            "mov r0, r5",
            "bl sym.imp.fclose",
            "ldrb r3, [r4]",
            "cmp r3, 0xd",
            "cmpne r3, 0",
            "movne r1, 1",
            "moveq r1, 0",
            "beq 0x895c",
            "cmp r3, 0xa",
            "beq 0x8980",
            "mov r2, r4",
            "mov r1, 0",
            "b 0x8948",
            "cmp r3, 0xa",
            "beq 0x895c",
            "ldrb r3, [r2, 1]!",
            "add r1, r1, 1",
            "cmp r3, 0",
            "cmpne r3, 0xd",
            "bne 0x8940",
            "ldr r0, [0x00008988]",
            "mov r3, 0",
            "mov r2, 0x80",
            "strb r3, [r4, r1]",
            "sub r1, r0, 0x80",
            "bl sym.imp.strncat",
            "movw r0, 0x2954",
            "movt r0, 1",
            "pop {r3, r4, r5, pc}",
            "mov r1, 0",
            "b 0x895c"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00008618",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x204]!"
        ]
    },
    "sym.imp.config_get": {
        "function_address": "0x00008708",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x164]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000086c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x194]!"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x000086a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1a4]!"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x00008648",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1e4]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x000086cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x18c]!"
        ]
    },
    "sym.imp.strncat": {
        "function_address": "0x00008690",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1b4]!"
        ]
    },
    "fcn.0000898c": {
        "function_address": "0x0000898c",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r4, r0",
            "mov r2, 0x80",
            "ldr r0, [0x00008a20]",
            "bl sym.imp.memset",
            "mov r1, 0",
            "ldr r0, [0x00008a24]",
            "mov r2, 0x80",
            "bl sym.imp.memset",
            "ldrb r1, [r4]",
            "add r0, r4, 1",
            "ldr ip, [0x00008a20]",
            "cmp r1, 0",
            "beq 0x8a04",
            "movw lr, 0x5556",
            "movt lr, 0x5555",
            "mov r3, 1",
            "smull r4, r2, lr, r3",
            "sub r2, r2, r3, asr 31",
            "add r2, r2, r2, lsl 1",
            "cmp r3, r2",
            "beq 0x89f4",
            "cmp r3, 0x12",
            "strbne r1, [ip]",
            "addne ip, ip, 1",
            "ldrb r1, [r0], 1",
            "add r3, r3, 1",
            "cmp r1, 0",
            "bne 0x89d4",
            "ldr r0, [0x00008a24]",
            "mov r3, 0",
            "strb r3, [ip]",
            "sub r1, r0, 0x80",
            "bl sym.imp.strcpy",
            "ldr r0, [0x00008a24]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x000086d8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x184]!"
        ]
    },
    "sym.imp.localtime": {
        "function_address": "0x000086b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x19c]!"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x000086f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x174]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x000086fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x16c]!"
        ]
    },
    "sym.imp.popen": {
        "function_address": "0x00008624",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1fc]!"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x00008678",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1c4]!"
        ]
    },
    "sym.imp.pclose": {
        "function_address": "0x0000863c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1ec]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00008684",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1bc]!"
        ]
    },
    "sym.imp.strcat": {
        "function_address": "0x0000866c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1cc]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008888",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x000088ac]",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "popne {r4, pc}",
            "bl fcn.00008820",
            "mov r3, 1",
            "strb r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.00008820": {
        "function_address": "0x00008820",
        "instructions": [
            "ldr r0, loc.__bss_start__",
            "ldr r3, [0x00008848]",
            "rsb r3, r0, r3",
            "cmp r3, 6",
            "bxls lr",
            "ldr r3, [0x0000884c]",
            "cmp r3, 0",
            "bxeq lr",
            "bx r3"
        ]
    }
}