{
    "dbg.main": {
        "function_address": "0x00008f04",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xa4",
            "mov r5, r0",
            "mov r6, r1",
            "bl sym.imp.getuid",
            "rsbs r4, r0, 1",
            "movlo r4, 0",
            "mov fp, r0",
            "eor r8, r4, 1",
            "cmp r5, 1",
            "movle r8, 0",
            "andgt r8, r8, 1",
            "cmp r8, 0",
            "bne 0x9550",
            "ldr sb, str._usr_local_etc_netatalk_afppasswd",
            "mov r7, 0x64",
            "ldr sl, obj.optarg",
            "mov r1, r6",
            "ldr r2, str.cafnu:p:",
            "mov r0, r5",
            "bl sym.imp.getopt",
            "cmn r0, 1",
            "sub r3, r0, 0x61",
            "beq 0x8fec",
            "cmp r3, 0x14",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x8f68.1",
            "ldr r0, [sl]",
            "bl sym.imp.atoi",
            "mov r1, r6",
            "mov r7, r0",
            "ldr r2, str.cafnu:p:",
            "mov r0, r5",
            "bl sym.imp.getopt",
            "cmn r0, 1",
            "sub r3, r0, 0x61",
            "bne 0x8f64",
            "cmp r8, 0",
            "bne 0x9360",
            "ands sl, r4, 2",
            "movne r2, r8",
            "ldr r8, obj.optind",
            "andeq r2, r4, 1",
            "ldr r3, [r8]",
            "add r3, r2, r3",
            "cmp r3, r5",
            "bne 0x9360",
            "mov r0, sb",
            "add r1, sp, 8",
            "bl sym.imp.stat64",
            "cmp sl, 0",
            "beq 0x9130",
            "tst r4, 1",
            "beq 0x957c",
            "cmp r0, 0",
            "bne 0x9040",
            "tst r4, 4",
            "beq 0x959c",
            "mov r0, sb",
            "movw r1, 0x242",
            "mov r2, 0x180",
            "bl sym.imp.open64",
            "subs r5, r0, 0",
            "blt 0x95bc",
            "ldr r6, obj.buf",
            "bl sym.imp.setpwent",
            "bl sym.imp.getpwent",
            "cmp r0, 0",
            "beq 0x9344",
            "ldr r3, [r0, 8]",
            "cmp r3, r7",
            "blo 0x9060",
            "ldr r4, [r0]",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "add r0, r0, 0x2c",
            "cmp r0, 0x1000",
            "bhi 0x9060",
            "mov r1, r4",
            "ldr r0, obj.buf",
            "bl sym.imp.strcpy",
            "ldr r0, obj.buf",
            "bl sym.imp.strlen",
            "ldr r1, str.:::_n",
            "mov r2, 0x2d",
            "add r0, r6, r0",
            "bl sym.imp.memcpy",
            "ldr r0, obj.buf",
            "bl sym.imp.strlen",
            "mov r4, r0",
            "ldr r1, obj.buf",
            "mov r0, r5",
            "mov r2, r4",
            "bl sym.imp.write",
            "cmp r4, r0",
            "beq 0x9060",
            "ldr r3, obj.stderr",
            "mvn r4, 0",
            "ldr r6, [r3]",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "ldr r1, str.afppasswd:_problem_writing_to__s:__s_n",
            "mov r3, r0",
            "mov r2, sb",
            "mov r0, r6",
            "bl sym.imp.fprintf",
            "b 0x9348",
            "ldr sb, [sl]",
            "b 0x8f48",
            "orr r4, r4, 4",
            "b 0x8f48",
            "orr r4, r4, 2",
            "b 0x8f48",
            "orr r4, r4, 8",
            "b 0x8f48",
            "add r8, r8, 1",
            "b 0x8f48",
            "cmp r0, 0",
            "blt 0x9614",
            "ands r3, r4, 1",
            "str r3, [sp, 4]",
            "bne 0x93e4",
            "mov r0, fp",
            "bl sym.imp.getpwuid",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x95f4",
            "mov r0, sb",
            "ldr r1, aav.0x00009970",
            "ldr r6, [r3]",
            "bl sym.imp.fopen64",
            "subs r5, r0, 0",
            "beq 0x95d8",
            "mov r1, sb",
            "ldr r0, obj.buf",
            "bl sym.imp.strcpy",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "movw r3, 0xffb",
            "cmp r0, r3",
            "mvnhi r3, 0",
            "strhi r3, [sp]",
            "bls 0x94fc",
            "ldr r8, obj.buf",
            "mov r0, r5",
            "bl sym.imp.ftell",
            "mov r1, 0",
            "mov sl, r0",
            "asr fp, sl, 0x1f",
            "movw r2, 0x1001",
            "mov r0, r8",
            "bl sym.imp.memset",
            "b 0x91e0",
            "mov r0, r5",
            "bl sym.imp.ftell",
            "mov r1, 0",
            "mov sl, r0",
            "asr fp, sl, 0x1f",
            "movw r2, 0x1001",
            "ldr r0, obj.buf",
            "bl sym.imp.memset",
            "movw r1, 0x1001",
            "mov r2, r5",
            "ldr r0, obj.buf",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "mov r1, 0x3a",
            "ldr r0, obj.buf",
            "beq 0x941c",
            "bl sym.imp.strchr",
            "subs r7, r0, 0",
            "mov r0, r6",
            "beq 0x91c0",
            "bl sym.imp.strlen",
            "rsb r3, r8, r7",
            "cmp r0, r3",
            "bne 0x91c0",
            "mov r2, r0",
            "mov r1, r6",
            "ldr r0, obj.buf",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x91c0",
            "ldr r3, [sp, 4]",
            "add r8, r7, 1",
            "cmp r3, 0",
            "beq 0x93f8",
            "add r4, sp, 0x94",
            "ldr r0, str.Enter_NEW_AFP_password:",
            "bl sym.imp.getpass",
            "mov r2, 9",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "ldr r0, str.Enter_NEW_AFP_password_again:",
            "strb r3, [sp, 0x9c]",
            "bl sym.imp.getpass",
            "mov r1, r4",
            "bl sym.imp.strcmp",
            "subs r6, r0, 0",
            "bne 0x9530",
            "mov r0, r5",
            "add r7, sp, 0x70",
            "bl sym.imp.fileno",
            "mov r1, r4",
            "mov sb, r0",
            "ldr r2, [sp]",
            "mov r0, r8",
            "bl dbg.convert_passwd",
            "mov r3, 1",
            "mov r1, sl",
            "strd sl, fp, [sp, 0x78]",
            "mov r2, r6",
            "mov r0, r5",
            "mov sl, 1",
            "mov fp, 0",
            "strh r3, [sp, 0x70]",
            "strd sl, fp, [sp, 0x80]",
            "mov r4, r6",
            "strh r6, [sp, 0x72]",
            "bl sym.imp.fseek",
            "mov r1, 0xe",
            "mov r2, r7",
            "mov r0, sb",
            "bl sym.imp.fcntl64",
            "movw r3, 0x1cb8",
            "mov r2, 1",
            "movt r3, 1",
            "ldr r0, obj.buf",
            "rsb r1, r3, 0x10",
            "mov r3, r5",
            "add r1, r8, r1",
            "bl sym.imp.fwrite",
            "mov r3, 2",
            "mov r1, 0xd",
            "mov r2, r7",
            "mov r0, sb",
            "strh r3, [sp, 0x70]",
            "bl sym.imp.fcntl64",
            "ldr r0, str.afppasswd:_updated_password.",
            "bl sym.imp.puts",
            "ldr r3, [sp]",
            "cmp r3, 0",
            "blt 0x9338",
            "mov r0, r3",
            "bl sym.imp.close",
            "mov r0, r5",
            "bl sym.imp.fclose",
            "b 0x9354",
            "mov r4, r0",
            "bl sym.imp.endpwent",
            "mov r0, r5",
            "bl sym.imp.close",
            "mov r0, r4",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r5, obj.stderr",
            "mov r1, 1",
            "ldr r0, str.Usage:_afppasswd___acf____u_minuid____p_path___username__n",
            "mov r2, 0x39",
            "mvn r4, 0",
            "ldr r3, [r5]",
            "bl sym.imp.fwrite",
            "ldr r3, [r5]",
            "mov r1, 1",
            "mov r2, 0x1b",
            "ldr r0, str.___a________add_a_new_user_n",
            "bl sym.imp.fwrite",
            "ldr r3, [r5]",
            "mov r1, 1",
            "mov r2, 0x41",
            "ldr r0, str.___c________create_and_initialize_password_file_or_specific_user_n",
            "bl sym.imp.fwrite",
            "ldr r3, [r5]",
            "mov r1, 1",
            "mov r2, 0x1c",
            "ldr r0, str.___f________force_an_action_n",
            "bl sym.imp.fwrite",
            "ldr r3, [r5]",
            "mov r1, 1",
            "mov r2, 0x30",
            "ldr r0, str.___u_uid____minimum_uid_to_use__defaults_to_100_n",
            "bl sym.imp.fwrite",
            "mov r1, 1",
            "mov r2, 0x23",
            "ldr r3, [r5]",
            "ldr r0, str.___p_path___path_to_afppasswd_file_n",
            "bl sym.imp.fwrite",
            "b 0x9354",
            "ldr r3, [r8]",
            "ldr r0, [r6, r3, lsl 2]",
            "bl sym.imp.getpwnam",
            "mov r3, r0",
            "b 0x9150",
            "ldrb r3, [r7, 1]",
            "cmp r3, 0x2a",
            "bne 0x9488",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x3a",
            "ldr r0, str.Your_password_is_disabled._Please_see_your_administrator._n",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "tst r4, 8",
            "beq 0x94dc",
            "mov r1, r6",
            "ldr r0, obj.buf",
            "bl sym.imp.strcpy",
            "ldr r0, obj.buf",
            "bl sym.imp.strlen",
            "movw r3, 0x1cb8",
            "mov r2, 0x2d",
            "movt r3, 1",
            "ldr r1, str.:::_n",
            "add r0, r3, r0",
            "bl sym.imp.memcpy",
            "mov r1, 0x3a",
            "ldr r0, obj.buf",
            "bl sym.imp.strchr",
            "add r8, r0, 1",
            "ldr r0, obj.buf",
            "bl sym.imp.strlen",
            "mov r3, r5",
            "mov r1, r0",
            "mov r2, 1",
            "ldr r0, obj.buf",
            "bl sym.imp.fwrite",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bne 0x9248",
            "ldr r0, str.Enter_OLD_AFP_password:",
            "bl sym.imp.getpass",
            "ldr r2, [sp]",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, r8",
            "bl dbg.convert_passwd",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, 8",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x9248",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x1d",
            "ldr r0, str.afppasswd:_invalid_password._n",
            "mvn r4, 0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9324",
            "ldr r0, obj.stderr",
            "mov r2, r6",
            "ldr r1, str.afppasswd:_cant_find__s_in__s_n",
            "mov r3, sb",
            "mvn r4, 0",
            "ldr r0, [r0]",
            "bl sym.imp.fprintf",
            "b 0x9324",
            "ldr r0, obj.buf",
            "bl sym.imp.strlen",
            "movw r3, 0x1cb8",
            "ldr r1, str..key",
            "movt r3, 1",
            "mov r2, 5",
            "add r0, r3, r0",
            "bl sym.imp.memcpy",
            "ldr r0, obj.buf",
            "mov r1, 0",
            "bl sym.imp.open64",
            "str r0, [sp]",
            "b 0x9198",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x22",
            "ldr r0, str.afppasswd:_passwords_dont_match__n",
            "mvn r4, 0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9324",
            "ldr r5, obj.stderr",
            "mvn r4, 0",
            "ldr r1, str.afppasswd__Netatalk__s__n",
            "ldr r2, str.2.2.5",
            "ldr r0, [r5]",
            "bl sym.imp.fprintf",
            "mov r1, 1",
            "mov r2, 0x3a",
            "ldr r3, [r5]",
            "ldr r0, str.Usage:_afppasswd___acfn____u_minuid____p_path___username__n",
            "b 0x9378",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x33",
            "ldr r0, str.afppasswd:_only_root_can_create_the_password_file._n",
            "mvn r4, 0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9354",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x29",
            "ldr r0, str.afppasswd:_password_file_already_exists._n",
            "mvn r4, 0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9354",
            "ldr r3, obj.stderr",
            "mov r2, sb",
            "ldr r1, str.afppasswd:_cant_create__s_n",
            "mvn r4, 0",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9354",
            "ldr r3, obj.stderr",
            "mov r2, sb",
            "ldr r1, str.afppasswd:_cant_open__s_n",
            "mvn r4, 0",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9354",
            "ldr r3, obj.stderr",
            "mov r1, 1",
            "mov r2, 0x25",
            "ldr r0, str.afppasswd:_cant_get_password_entry._n",
            "mvn r4, 0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9354",
            "ldr r3, obj.stderr",
            "mov r2, sb",
            "ldr r1, str.afppasswd:__s_doesnt_exist._n",
            "mvn r4, 0",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9354"
        ]
    },
    "sym.imp.getuid": {
        "function_address": "0x00008af4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x148]!"
        ]
    },
    "sym.imp.getopt": {
        "function_address": "0x00008b54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x108]!"
        ]
    },
    "sym.imp.atoi": {
        "function_address": "0x00008b6c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xf8]!"
        ]
    },
    "sym.imp.stat64": {
        "function_address": "0x00008a64",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1a8]!"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00008b30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x120]!"
        ]
    },
    "sym.imp.setpwent": {
        "function_address": "0x00008adc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x158]!"
        ]
    },
    "sym.imp.getpwent": {
        "function_address": "0x000089d4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x208]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00008a40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1c0]!"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00008b9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xd8]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008a04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1e8]!"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00008aa0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x180]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x000089c8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x210]!"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x00008b84",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xe8]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00008b00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x140]!"
        ]
    },
    "sym.imp.getpwuid": {
        "function_address": "0x00008ac4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x168]!"
        ]
    },
    "sym.imp.fopen64": {
        "function_address": "0x00008a28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1d0]!"
        ]
    },
    "sym.imp.ftell": {
        "function_address": "0x00008b60",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x100]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00008ae8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x150]!"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x00008ad0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x160]!"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00008b78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xf0]!"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x00008a10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1e0]!"
        ]
    },
    "sym.imp.getpass": {
        "function_address": "0x00008b48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x110]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008b3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x118]!"
        ]
    },
    "sym.imp.fileno": {
        "function_address": "0x00008a94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x188]!"
        ]
    },
    "dbg.convert_passwd": {
        "function_address": "0x00008c88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r5, r1, 0",
            "sub sp, sp, 0xc4",
            "mov r4, r0",
            "mov r6, r2",
            "beq 0x8e2c",
            "cmp r6, 0",
            "blt 0x8dc8",
            "mov r3, 0",
            "add r7, sp, 0xb0",
            "mov r2, 0",
            "mov r1, 0",
            "mov r0, r6",
            "str r1, [sp]",
            "sub sb, r7, 1",
            "bl sym.imp.lseek64",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, 0x10",
            "mov r6, r7",
            "bl sym.imp.read",
            "bl sym.imp.__ctype_b_loc",
            "add r3, sp, 0xc0",
            "ldr fp, [r0]",
            "str r3, [sp, 0xc]",
            "ldrb r8, [r6]",
            "lsl sl, r8, 1",
            "lsl r8, r8, 4",
            "ldrh r3, [fp, sl]",
            "and r8, r8, 0xf0",
            "tst r3, 8",
            "bne 0x8d20",
            "bl sym.imp.__ctype_toupper_loc",
            "ldr r3, [r0]",
            "ldrsh r8, [r3, sl]",
            "sub r8, r8, 0x37",
            "lsl r8, r8, 4",
            "uxtb r8, r8",
            "ldrb sl, [r6, 1]",
            "sub r3, sl, 0x30",
            "lsl sl, sl, 1",
            "uxtb r3, r3",
            "ldrh r2, [fp, sl]",
            "tst r2, 8",
            "bne 0x8d50",
            "bl sym.imp.__ctype_toupper_loc",
            "ldr r3, [r0]",
            "ldrsh r3, [r3, sl]",
            "sub r3, r3, 0x37",
            "uxtb r3, r3",
            "ldr r2, [sp, 0xc]",
            "add r6, r6, 2",
            "orr r8, r3, r8",
            "strb r8, [sb, 1]!",
            "cmp r6, r2",
            "bne 0x8cec",
            "mov r8, 0",
            "add r3, r7, 8",
            "add r6, sp, 0x1c",
            "mov r0, r7",
            "mov r1, r6",
            "str r8, [r3, 4]",
            "str r8, [sp, 0xb8]",
            "add r7, r7, 8",
            "bl sym.imp.DES_key_sched",
            "cmp r5, r8",
            "str r8, [r7], 4",
            "str r8, [sp, 0xb0]",
            "str r8, [sp, 0xb4]",
            "str r8, [r7]",
            "beq 0x8ee8",
            "mov r0, r5",
            "mov r1, r5",
            "mov r2, r6",
            "mov r3, 1",
            "bl sym.imp.DES_ecb_encrypt",
            "mov r0, r6",
            "mov r1, 0",
            "mov r2, 0x80",
            "bl sym.imp.memset",
            "cmp r5, 0",
            "beq 0x8e24",
            "ldr r6, str.0123456789ABCDEF",
            "mov ip, r5",
            "add r5, r5, 8",
            "add r7, sp, 0x9c",
            "ldm r6!, {r0, r1, r2, r3}",
            "ldr r6, [r6]",
            "stm r7!, {r0, r1, r2, r3}",
            "strb r6, [r7]",
            "ldrb r3, [ip]",
            "add r2, sp, 0xc0",
            "add r3, r2, r3, lsr 4",
            "ldrb r3, [r3, -0x24]",
            "strb r3, [r4]",
            "ldrb r3, [ip], 1",
            "and r3, r3, 0xf",
            "cmp ip, r5",
            "add r3, r2, r3",
            "ldrb r3, [r3, -0x24]",
            "strb r3, [r4, 1]",
            "add r4, r4, 2",
            "bne 0x8df0",
            "add sp, sp, 0xc4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r8, r4",
            "mov r7, r5",
            "bl sym.imp.__ctype_b_loc",
            "str r0, [sp, 0x14]",
            "ldrb sb, [r8]",
            "ldr r2, [sp, 0x14]",
            "ldr sl, [r2]",
            "lsl fp, sb, 1",
            "lsl sb, sb, 4",
            "ldrh r3, [sl, fp]",
            "and sb, sb, 0xf0",
            "tst r3, 8",
            "bne 0x8e78",
            "bl sym.imp.__ctype_toupper_loc",
            "ldr r3, [r0]",
            "ldrsh sb, [r3, fp]",
            "sub sb, sb, 0x37",
            "lsl sb, sb, 4",
            "uxtb sb, sb",
            "ldrb fp, [r8, 1]",
            "sub r3, fp, 0x30",
            "lsl fp, fp, 1",
            "uxtb r3, r3",
            "ldrh r2, [sl, fp]",
            "tst r2, 8",
            "bne 0x8ea8",
            "bl sym.imp.__ctype_toupper_loc",
            "ldr r3, [r0]",
            "ldrsh r3, [r3, fp]",
            "sub r3, r3, 0x37",
            "uxtb r3, r3",
            "orr sb, r3, sb",
            "add r8, r8, 2",
            "strb sb, [r4, r7]",
            "add r7, r7, 1",
            "cmp r7, 8",
            "bne 0x8e3c",
            "mov r3, 0",
            "strb r3, [r4, 8]",
            "strb r3, [r4, 9]",
            "strb r3, [r4, 0xa]",
            "strb r3, [r4, 0xb]",
            "strb r3, [r4, 0xc]",
            "strb r3, [r4, 0xd]",
            "strb r3, [r4, 0xe]",
            "strb r3, [r4, 0xf]",
            "b 0x8ca0",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, r6",
            "mov r3, r5",
            "bl sym.imp.DES_ecb_encrypt",
            "b 0x8db8"
        ]
    },
    "sym.imp.fseek": {
        "function_address": "0x00008b18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x130]!"
        ]
    },
    "sym.imp.fcntl64": {
        "function_address": "0x000089e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x200]!"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x000089ec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1f8]!"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008b90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xe0]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008ab8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x170]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00008a88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x190]!"
        ]
    },
    "sym.imp.endpwent": {
        "function_address": "0x00008a7c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x198]!"
        ]
    },
    "sym.imp.getpwnam": {
        "function_address": "0x00008aac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x178]!"
        ]
    },
    "sym.__do_global_dtors_aux": {
        "function_address": "0x00008bf0",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, obj.completed.5758",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x00008c2c]",
            "cmp r3, 0",
            "beq 0x8c18",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, obj.completed.5758",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00008ba8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xd0]!"
        ]
    },
    "sym.frame_dummy": {
        "function_address": "0x00008c34",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00008c74]",
            "cmp r3, 0",
            "beq 0x8c50",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "ldr r1, obj.object.5763",
            "bl loc.imp.__register_frame_info",
            "ldr r0, obj.__JCR_LIST__",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00008c84]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x000089bc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x218]!"
        ]
    },
    "sym.imp.lseek64": {
        "function_address": "0x00008a58",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1b0]!"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00008a4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1b8]!"
        ]
    },
    "sym.imp.__ctype_b_loc": {
        "function_address": "0x000089f8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1f0]!"
        ]
    },
    "sym.imp.__ctype_toupper_loc": {
        "function_address": "0x00008a34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1c8]!"
        ]
    },
    "sym.imp.DES_key_sched": {
        "function_address": "0x00008a70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1a0]!"
        ]
    },
    "sym.imp.DES_ecb_encrypt": {
        "function_address": "0x00008b24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x128]!"
        ]
    }
}