{
    "entry0": {
        "function_address": "0x000010c4",
        "instructions": [
            "xor ebp, ebp",
            "mov r9, rdx",
            "pop rsi",
            "mov rdx, rsp",
            "and rsp, 0xfffffffffffffff0",
            "push rax",
            "push rsp",
            "lea r8, [0x00001380]",
            "lea rcx, [0x00001310]",
            "lea rdi, [main]",
            "call sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x00000a80",
        "instructions": [
            "jmp qword [reloc.__libc_start_main]"
        ]
    },
    "main": {
        "function_address": "0x00000ae0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov ebp, edi",
            "lea rdi, str.SG3_UTILS_OLD_OPTS",
            "sub rsp, 0x38",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x28], rax",
            "xor eax, eax",
            "call sym.imp.getenv",
            "test rax, rax",
            "mov r14, rax",
            "je 0xc48",
            "lea r13, [rsp + 0x24]",
            "lea rbx, [0x00001d38]",
            "mov dword [rsp + 8], 0",
            "mov dword [rsp + 0x18], 0",
            "mov dword [rsp + 0x1c], 0",
            "xor r15d, r15d",
            "mov dword [rsp + 0x14], 0",
            "mov dword [rsp + 0x10], 0",
            "lea rcx, [0x00203040]",
            "lea rdx, str.bdhHNtvVz",
            "mov r8, r13",
            "mov rsi, r12",
            "mov edi, ebp",
            "mov dword [rsp + 0x24], 0",
            "call sym.imp.getopt_long",
            "cmp eax, 0xffffffff",
            "je 0xc5c",
            "lea edx, [rax - 0x48]",
            "cmp edx, 0x32",
            "ja case.0xb91.73",
            "movsxd rdx, dword [rbx + rdx*4]",
            "add rdx, rbx",
            "jmp rdx",
            "test r14, r14",
            "je 0xd21",
            "add r15d, 1",
            "jmp 0xb52",
            "xor edi, edi",
            "test r14, r14",
            "setne dil",
            "call fcn.000012c0",
            "xor eax, eax",
            "mov rcx, qword [rsp + 0x28]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x10bf",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "add dword [rsp + 8], 1",
            "jmp 0xb52",
            "add dword [rsp + 0x18], 1",
            "jmp 0xb52",
            "add dword [rsp + 0x10], 1",
            "jmp 0xb52",
            "add dword [rsp + 0x14], 1",
            "jmp 0xb52",
            "lea rsi, str.0.60_20151219",
            "lea rdi, str.sg_reset:_version:__s_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "xor eax, eax",
            "jmp 0xbb2",
            "add dword [rsp + 0x1c], 1",
            "jmp 0xb52",
            "lea rdi, str.unrecognised_option_code_0x_x____n",
            "mov esi, eax",
            "xor eax, eax",
            "call fcn.000011f0",
            "xor edi, edi",
            "test r14, r14",
            "setne dil",
            "call fcn.000012c0",
            "mov eax, 1",
            "jmp 0xbb2",
            "lea rdi, str.SG_RESET_OLD_OPTS",
            "call sym.imp.getenv",
            "mov r14, rax",
            "jmp 0xb1b",
            "mov rbx, qword [reloc.optind]",
            "mov ecx, dword [rsp + 8]",
            "mov eax, dword [rbx]",
            "cmp ebp, eax",
            "jle 0xce8",
            "movsxd rdx, eax",
            "add eax, 1",
            "cmp ebp, eax",
            "mov rdx, qword [r12 + rdx*8]",
            "mov dword [rbx], eax",
            "jg 0xd15",
            "test rdx, rdx",
            "je 0xce8",
            "test ecx, ecx",
            "jne 0xc95",
            "test r14, r14",
            "mov eax, 1",
            "cmovne ecx, eax",
            "cmp dword [rsp + 0x10], 0",
            "setne bl",
            "cmp dword [rsp + 0x18], 0",
            "movzx esi, bl",
            "setne r12b",
            "cmp dword [rsp + 0x14], 0",
            "movzx eax, r12b",
            "setne r14b",
            "test r15d, r15d",
            "setne r15b",
            "add esi, eax",
            "movzx eax, r14b",
            "add esi, eax",
            "movzx eax, r15b",
            "add eax, esi",
            "sub eax, 1",
            "jle 0xd2f",
            "lea rdi, str.Can_only_request_one_type_of_reset_per_invocation_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "mov eax, 1",
            "jmp 0xbb2",
            "lea rdi, str.Missing_DEVICE_name._Use___help_to_see_usage._n",
            "xor eax, eax",
            "call fcn.000011f0",
            "mov eax, 1",
            "jmp 0xbb2",
            "mov rsi, qword [r12 + rax*8]",
            "lea rdi, str.Unexpected_extra_argument:__s_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "add dword [rbx], 1",
            "movsxd rax, dword [rbx]",
            "cmp ebp, eax",
            "jg 0xd00",
            "jmp 0xc30",
            "xor edi, edi",
            "call fcn.000012c0",
            "xor eax, eax",
            "jmp 0xbb2",
            "mov rdi, rdx",
            "xor eax, eax",
            "mov esi, 0x802",
            "mov dword [rsp + 0x10], ecx",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebp, eax",
            "mov rdx, qword [rsp + 8]",
            "mov ecx, dword [rsp + 0x10]",
            "js 0xfd0",
            "test bl, bl",
            "mov dword [rsp + 0x24], 0",
            "je 0xe21",
            "test ecx, ecx",
            "jne 0xf89",
            "mov dword [rsp + 0x24], 1",
            "cmp dword [rsp + 0x1c], 0",
            "je 0xd89",
            "add dword [rsp + 0x24], 0x100",
            "cmp ecx, 2",
            "jg 0xe3f",
            "xor eax, eax",
            "mov rdx, r13",
            "mov esi, 0x2284",
            "mov edi, ebp",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.ioctl",
            "test eax, eax",
            "mov ebx, eax",
            "mov ecx, dword [rsp + 8]",
            "js 0xe5e",
            "cmp dword [rsp + 0x1c], 0",
            "je 0xdc4",
            "sub dword [rsp + 0x24], 0x100",
            "test ecx, ecx",
            "je 0xdf8",
            "mov eax, dword [rsp + 0x24]",
            "test eax, eax",
            "je 0xff7",
            "cmp eax, 1",
            "je 0x1021",
            "cmp eax, 4",
            "je 0x1050",
            "cmp eax, 2",
            "je 0x107f",
            "cmp eax, 3",
            "je 0x10ae",
            "mov edi, ebp",
            "call sym.imp.close",
            "mov edx, eax",
            "xor eax, eax",
            "test edx, edx",
            "jns 0xbb2",
            "lea rdi, str.sg_reset:_close_error",
            "call sym.imp.perror",
            "mov eax, 1",
            "jmp 0xbb2",
            "test r12b, r12b",
            "je 0xf5f",
            "test ecx, ecx",
            "jne 0x1008",
            "mov dword [rsp + 0x24], 4",
            "jmp 0xd7a",
            "mov esi, dword [rsp + 0x24]",
            "lea rdi, str.____third_argument_to_ioctl_SG_SCSI_RESET__is_0x_x_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xd92",
            "call sym.imp.__errno_location",
            "mov r12d, dword [rax]",
            "mov ecx, dword [rsp + 8]",
            "lea eax, [r12 - 1]",
            "cmp eax, 0x15",
            "ja case.0xe84.2",
            "mov edx, eax",
            "lea rax, [0x00001e04]",
            "movsxd rdx, dword [rax + rdx*4]",
            "add rax, rdx",
            "jmp rax",
            "mov esi, dword [rsp + 0x24]",
            "lea rdi, str.sg_reset:_SG_SCSI_RESET_not_supported__for_value0x_x__n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "lea rdi, str.sg_reset:_SG_SCSI_RESET_failed",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.perror",
            "mov ecx, dword [rsp + 8]",
            "sub ecx, 1",
            "jle 0xecc",
            "lea rdi, str.sg_reset:_ioctl_SG_SCSI_RESET__returned__d__errno_d_n",
            "mov edx, r12d",
            "mov esi, ebx",
            "xor eax, eax",
            "call fcn.000011f0",
            "mov edi, ebp",
            "call sym.imp.close",
            "mov eax, 1",
            "jmp 0xbb2",
            "lea rdi, str.sg_reset:_no_device_error__may_be_temporary_while_device_is_resetting_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xeb4",
            "lea rdi, str.sg_reset:_BUSY__may_be_resetting_now_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xeb4",
            "lea rdi, str.sg_reset:_reset_requires_CAP_SYS_ADMIN__root__permission_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xeb4",
            "lea rdi, str.sg_reset:_try_again_later__may_be_resetting_now_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xeb4",
            "mov esi, dword [rsp + 0x24]",
            "lea rdi, str.sg_reset:_reset__for_value0x_x__may_not_be_available_n",
            "xor eax, eax",
            "mov dword [rsp + 8], ecx",
            "call fcn.000011f0",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xeb4",
            "test r14b, r14b",
            "je 0xfa2",
            "test ecx, ecx",
            "je 0xf7c",
            "lea rdi, str.sg_reset:_starting_bus_reset",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.puts",
            "mov ecx, dword [rsp + 8]",
            "mov dword [rsp + 0x24], 2",
            "jmp 0xd7a",
            "lea rdi, str.sg_reset:_starting_device_reset",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.puts",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xd72",
            "test r15b, r15b",
            "je 0xd7a",
            "test ecx, ecx",
            "je 0xfc3",
            "lea rdi, str.sg_reset:_starting_host_reset",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.puts",
            "mov ecx, dword [rsp + 8]",
            "mov dword [rsp + 0x24], 3",
            "jmp 0xd7a",
            "lea rdi, str.sg_reset:_open_error:__s:",
            "mov rsi, rdx",
            "xor eax, eax",
            "call fcn.000011f0",
            "lea rdi, [0x00001c8c]",
            "call sym.imp.perror",
            "mov eax, 1",
            "jmp 0xbb2",
            "lea rdi, str.sg_reset:_did_nothing__device_is_normal_mode",
            "call sym.imp.puts",
            "jmp 0xdf8",
            "lea rdi, str.sg_reset:_starting_target_reset",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.puts",
            "mov ecx, dword [rsp + 8]",
            "jmp 0xe32",
            "cmp dword [rsp + 0x1c], 0",
            "lea rax, [0x00001c8c]",
            "lea rdx, str._or_target_or_bus_or_host_",
            "lea rsi, str.sg_reset:_completed_device__sreset_n",
            "mov edi, 1",
            "cmovne rdx, rax",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0xdf8",
            "cmp dword [rsp + 0x1c], 0",
            "lea rax, [0x00001c8c]",
            "lea rdx, str._or_bus_or_host_",
            "lea rsi, str.sg_reset:_completed_target__sreset_n",
            "mov edi, 1",
            "cmovne rdx, rax",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0xdf8",
            "cmp dword [rsp + 0x1c], 0",
            "lea rax, [0x00001c8c]",
            "lea rdx, str._or_host_",
            "lea rsi, str.sg_reset:_completed_bus__sreset_n",
            "mov edi, 1",
            "cmovne rdx, rax",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0xdf8",
            "lea rdi, str.sg_reset:_completed_host_reset",
            "call sym.imp.puts",
            "jmp 0xdf8",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x00000a00",
        "instructions": [
            "jmp qword [reloc.getenv]"
        ]
    },
    "sym.imp.getopt_long": {
        "function_address": "0x00000a50",
        "instructions": [
            "jmp qword [reloc.getopt_long]"
        ]
    },
    "fcn.000012c0": {
        "function_address": "0x000012c0",
        "instructions": [
            "push rbx",
            "mov ebx, edi",
            "lea rdi, str.Usage:_sg_reset____bus_____device_____help_____host_____no_esc_____target__n___________________verbose_____version__DEVICE_n__where:_n______bus_b________SCSI_bus_reset__SPI_concept___might_be_all_targets_n______device_d_____device__logical_unit__reset_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "test ebx, ebx",
            "jne 0x12f2",
            "lea rdi, str.______help_h_______print_usage_information_then_exit_n______host_H_______host__bus_adapter:_HBA__reset_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "pop rbx",
            "lea rdi, [str.______no_esc_N_____overrides_default_action_and_only_does_reset_requested_n______target_t_____target_reset._The_target_holds_the_DEVICE_and_perhaps_n____________________other_LUs_n______verbose_v____increase_the_level_of_verbosity_n______version_V____print_version_number_then_exit_n_nUse_SG_SCSI_RESET_ioctl_to_send_a_reset_to_the_host_bus_target_device_nalong_the_DEVICE_path._The_DEVICE_itself_is_known_as_a_logical_unit__LU__nin_SCSI_terminology._nBe_warned:_if_the__N_option_is_not_given_the",
            "xor eax, eax",
            "jmp fcn.000011f0",
            "lea rdi, str.______help_z_______print_usage_information_then_exit_n______host_h_H____host__bus_adapter:_HBA__reset_n",
            "xor eax, eax",
            "call fcn.000011f0",
            "jmp 0x12e3"
        ]
    },
    "fcn.000011f0": {
        "function_address": "0x000011f0",
        "instructions": [
            "sub rsp, 0xd8",
            "test al, al",
            "mov qword [rsp + 0x28], rsi",
            "mov qword [rsp + 0x30], rdx",
            "mov qword [rsp + 0x38], rcx",
            "mov qword [rsp + 0x40], r8",
            "mov qword [rsp + 0x48], r9",
            "je 0x124b",
            "movaps xmmword [rsp + 0x50], xmm0",
            "movaps xmmword [rsp + 0x60], xmm1",
            "movaps xmmword [rsp + 0x70], xmm2",
            "movaps xmmword [rsp + 0x80], xmm3",
            "movaps xmmword [rsp + 0x90], xmm4",
            "movaps xmmword [rsp + 0xa0], xmm5",
            "movaps xmmword [rsp + 0xb0], xmm6",
            "movaps xmmword [rsp + 0xc0], xmm7",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x18], rax",
            "xor eax, eax",
            "lea rax, [rsp + 0xe0]",
            "mov rdx, rdi",
            "mov esi, 1",
            "mov rcx, rsp",
            "mov qword [rsp + 8], rax",
            "lea rax, [rsp + 0x20]",
            "mov dword [rsp], 8",
            "mov dword [rsp + 4], 0x30",
            "mov qword [rsp + 0x10], rax",
            "mov rax, qword [reloc.stderr]",
            "mov rdi, qword [rax]",
            "call sym.imp.__vfprintf_chk",
            "mov rsi, qword [rsp + 0x18]",
            "xor rsi, qword fs:[0x28]",
            "jne 0x12b3",
            "add rsp, 0xd8",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00000ab0",
        "instructions": [
            "jmp qword [reloc.open64]"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x00000a60",
        "instructions": [
            "jmp qword [reloc.ioctl]"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00000a70",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00000ac0",
        "instructions": [
            "jmp qword [reloc.perror]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00000a20",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00000a30",
        "instructions": [
            "jmp qword [reloc.puts]"
        ]
    },
    "sym.imp.__printf_chk": {
        "function_address": "0x00000aa0",
        "instructions": [
            "jmp qword [reloc.__printf_chk]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00000a40",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00001180",
        "instructions": [
            "cmp byte [loc._edata], 0",
            "jne 0x11b0",
            "cmp qword [reloc.__cxa_finalize], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x11a3",
            "mov rdi, qword [0x00203008]",
            "call sym.imp.__cxa_finalize",
            "call fcn.000010f0",
            "pop rbp",
            "mov byte [loc._edata], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00000ad0",
        "instructions": [
            "jmp qword [0x00202fc0]"
        ]
    },
    "fcn.000010f0": {
        "function_address": "0x000010f0",
        "instructions": [
            "lea rdi, [loc._edata]",
            "lea rax, [0x00203187]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x1120",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x1120",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.__vfprintf_chk": {
        "function_address": "0x00000a10",
        "instructions": [
            "jmp qword [reloc.__vfprintf_chk]"
        ]
    },
    "fcn.000009d0": {
        "function_address": "0x000009d0",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x9e5",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00000a90",
        "instructions": [
            "jmp qword [0x00202fa0]"
        ]
    }
}