{
    "sym.ip_set_protocol": {
        "function_address": "0x08000324",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "ldr r3, [r3, 4]",
            "mov r6, r1",
            "mov r5, r2",
            "cmp r3, 0",
            "mvneq r0, 0x1000",
            "beq 0x80003f0",
            "mov r0, 0xee0",
            "mov r1, 0xd0",
            "mov r2, 0",
            "mvn r3, 0",
            "bl __alloc_skb",
            "subs r4, r0, 0",
            "mvneq r0, 0xb",
            "beq 0x80003f0",
            "add r6, r6, 0x30",
            "mov r7, 1",
            "str r7, [sp]",
            "mov r3, 0",
            "ldr r2, [r5, 8]",
            "ldr r1, [r6, 0xc]",
            "bl sym.start_msg",
            "subs r5, r0, 0",
            "beq 0x80003e4",
            "add r3, sp, 0x10",
            "mov r2, 6",
            "strb r2, [r3, -1]!",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r7",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80003d4",
            "ldr r3, [r4, 0xe0]",
            "mov r0, r8",
            "mov r1, r4",
            "rsb r3, r5, r3",
            "str r3, [r5]",
            "mov r3, 0x40",
            "ldr r2, [r6, 0xc]",
            "bl netlink_unicast",
            "and r0, r0, r0, asr 31",
            "b 0x80003f0",
            "ldr r1, [r4, 0xec]",
            "mov r0, r4",
            "rsb r1, r1, r5",
            "bl skb_trim",
            "mov r0, r4",
            "bl kfree_skb",
            "mvn r0, 0x59",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.start_msg": {
        "function_address": "0x080002a0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov ip, r0",
            "ldr r6, [r0, 0xac]",
            "mov r4, r1",
            "mov r5, r2",
            "mov r7, r3",
            "cmp r6, 0",
            "movne r0, 0",
            "popne {r3, r4, r5, r6, r7, pc}",
            "ldr r2, [ip, 0xe4]",
            "ldr r3, [ip, 0xe0]",
            "rsb r3, r3, r2",
            "cmp r3, 0x13",
            "ble 0x800031c",
            "mov r1, 0x14",
            "bl skb_put",
            "ldr r3, [sp, 0x18]",
            "cmp r0, 0",
            "movne r2, 2",
            "strh r7, [r0, 6]",
            "str r4, [r0, 0xc]",
            "orr r3, r3, 0x600",
            "str r5, [r0, 8]",
            "strh r3, [r0, 4]",
            "mov r3, 0x14",
            "str r3, [r0]",
            "addne r3, r0, 0x10",
            "strbne r2, [r0, 0x10]",
            "strbne r6, [r3, 1]",
            "strhne r6, [r3, 2]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r6",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.ip_set_header": {
        "function_address": "0x080003f8",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r3",
            "ldr r3, [0x0800061c]",
            "mov r8, r1",
            "mov sl, r2",
            "mov sb, r0",
            "ldr r1, [r3]",
            "mov r3, sp",
            "bic r2, r3, 0x1fc0",
            "bic r2, r2, 0x3f",
            "ldr r3, [r2, 4]",
            "add r3, r3, 1",
            "str r3, [r2, 4]",
            "ldr r3, [0x08000620]",
            "cmp r1, 0",
            "ldr r3, [r3, 0x464]",
            "beq 0x8000448",
            "ldr r0, [r3]",
            "cmp r1, r0",
            "bls 0x8000454",
            "ldr r0, [0x08000624]",
            "mov r1, 0x28",
            "bl __bug",
            "add r1, r3, r1, lsl 2",
            "ldr r5, [r1, 8]",
            "ldr r3, [r2, 4]",
            "sub r3, r3, 1",
            "str r3, [r2, 4]",
            "ldr r3, [r2]",
            "tst r3, 2",
            "beq 0x8000478",
            "bl preempt_schedule",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "moveq r7, 1",
            "beq 0x8000494",
            "ldrb r7, [r3, 4]",
            "subs r7, r7, 6",
            "movne r7, 1",
            "cmp r7, 0",
            "bne 0x8000610",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "beq 0x8000610",
            "add r6, sp, 0xe",
            "mov r0, r5",
            "add r1, r1, 4",
            "mov r2, r6",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "mvneq r0, 1",
            "beq 0x8000614",
            "mov r0, 0xee0",
            "mov r1, 0xd0",
            "mov r2, r7",
            "mvn r3, 0",
            "bl __alloc_skb",
            "subs r4, r0, 0",
            "mvneq r0, 0xb",
            "beq 0x8000614",
            "mov r3, 0xc",
            "add r8, r8, 0x30",
            "str r3, [sp]",
            "mov r3, r7",
            "ldr r1, [r8, 0xc]",
            "ldr r2, [sl, 8]",
            "bl sym.start_msg",
            "subs r7, r0, 0",
            "beq 0x8000600",
            "mov r3, 6",
            "mov r1, 1",
            "strb r3, [sp, 0xe]",
            "mov r0, r4",
            "mov r2, r1",
            "mov r3, r6",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80005f0",
            "mov r0, r5",
            "bl strlen",
            "mov r1, 2",
            "add r2, r0, 1",
            "mov r3, r5",
            "mov r0, r4",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80005f0",
            "ldr sl, [r5, 0x30]",
            "add sl, sl, 8",
            "mov r0, sl",
            "bl strlen",
            "mov r1, 3",
            "add r2, r0, 1",
            "mov r3, sl",
            "mov r0, r4",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80005f0",
            "ldrb r3, [r5, 0x38]",
            "mov r0, r4",
            "mov r1, 5",
            "mov r2, 1",
            "strb r3, [sp, 0xe]",
            "mov r3, r6",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80005f0",
            "ldrb r3, [r5, 0x39]",
            "mov r0, r4",
            "mov r1, 4",
            "mov r2, 1",
            "strb r3, [sp, 0xe]",
            "mov r3, r6",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80005f0",
            "ldr r3, [r4, 0xe0]",
            "mov r0, sb",
            "mov r1, r4",
            "rsb r3, r7, r3",
            "str r3, [r7]",
            "mov r3, 0x40",
            "ldr r2, [r8, 0xc]",
            "bl netlink_unicast",
            "and r0, r0, r0, asr 31",
            "b 0x8000614",
            "ldr r1, [r4, 0xec]",
            "mov r0, r4",
            "rsb r1, r1, r7",
            "bl skb_trim",
            "mov r0, r4",
            "bl kfree_skb",
            "mvn r0, 0x59",
            "b 0x8000614",
            "mvn r0, 0x1000",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.find_set_and_id": {
        "function_address": "0x08000150",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mvn r3, 0",
            "mov r4, 0",
            "mov r7, r0",
            "mov r8, r1",
            "mov r6, r2",
            "strh r3, [r2]",
            "mov r5, r4",
            "b 0x80001a8",
            "ldr r3, [r7]",
            "ldr r5, [r3, r4, lsl 2]",
            "cmp r5, 0",
            "beq 0x80001a0",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "strheq r4, [r6]",
            "beq 0x80001b4",
            "add r4, r4, 1",
            "uxth r4, r4",
            "ldrh r3, [r7, 4]",
            "cmp r3, r4",
            "bhi 0x8000174",
            "ldrh r0, [r6]",
            "movw r3, 0xffff",
            "cmp r0, r3",
            "movne r0, r5",
            "moveq r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.ip_set_utest": {
        "function_address": "0x0800078c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r3",
            "ldr r3, [0x0800090c]",
            "sub sp, sp, 0x88",
            "mov r1, sp",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x08000910]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x80007d4",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x80007e0",
            "ldr r0, [0x08000914]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r5, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8000804",
            "bl preempt_schedule",
            "add r0, sp, 8",
            "mov r1, 0",
            "mov r2, 0x7c",
            "bl memset",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x8000830",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x80008e4",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "bne 0x80008f0",
            "b 0x80008e4",
            "mov r0, r5",
            "add r1, r1, 4",
            "add r2, sp, 0x86",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "mvneq r0, 1",
            "beq 0x80008e8",
            "ldr r2, [r4, 0x1c]",
            "add r6, sp, 8",
            "ldr r1, [r5, 0x30]",
            "mov r0, r6",
            "ldrh r3, [r2]",
            "add r2, r2, 4",
            "add r1, r1, 0xa0",
            "str r1, [sp]",
            "mov r1, 0x1e",
            "sub r3, r3, 4",
            "bl nla_parse",
            "subs r4, r0, 0",
            "bne 0x80008e4",
            "bl local_bh_disable",
            "ldr r3, [r5, 0x34]",
            "mov r0, r5",
            "str r4, [sp]",
            "mov r1, r6",
            "str r4, [sp, 4]",
            "mov r2, 2",
            "ldr ip, [r3, 4]",
            "mov r3, r4",
            "blx ip",
            "mov r5, r0",
            "bl local_bh_enable",
            "cmn r5, 0xb",
            "moveq r0, r4",
            "beq 0x80008e8",
            "cmp r5, 0",
            "ldr r0, [0x08000918]",
            "movgt r0, 0",
            "b 0x80008e8",
            "mvn r0, 0x1000",
            "add sp, sp, 0x88",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [r4, 0x1c]",
            "cmp r3, 0",
            "beq 0x80008e4",
            "ldrh r3, [r3, 2]",
            "tst r3, 0x8000",
            "bne 0x8000848",
            "b 0x80008e4"
        ]
    },
    "sym.ip_set_udel": {
        "function_address": "0x08000b70",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r3",
            "ldr r3, [0x08000e08]",
            "sub sp, sp, 0x94",
            "mov sb, r1",
            "mov r1, sp",
            "mov r5, r2",
            "mov fp, r0",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x08000e0c]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8000bc4",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8000bd0",
            "ldr r0, [0x08000e10]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r6, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8000bf4",
            "bl preempt_schedule",
            "add r0, sp, 0x10",
            "mov r1, 0",
            "mov r2, 0x7c",
            "bl memset",
            "ldr r3, [r4, 4]",
            "ldrh r7, [r5, 6]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x8000c24",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x8000da4",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "bne 0x8000db8",
            "b 0x8000da4",
            "ldrh r3, [r3, 2]",
            "tst r3, 0x8000",
            "bne 0x8000de4",
            "b 0x8000da4",
            "ldrh r3, [r0, 2]",
            "tst r3, 0x8000",
            "beq 0x8000da4",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "bne 0x8000dec",
            "b 0x8000da4",
            "ldr sl, [r4, 0x24]",
            "tst r7, 0x200",
            "ldr r2, [r4, 0x1c]",
            "movne r8, 0",
            "moveq r8, 1",
            "subs sl, sl, 0",
            "movne sl, 1",
            "cmp r2, 0",
            "beq 0x8000ce0",
            "ldr r1, [r5, 0x30]",
            "add r4, sp, 0x10",
            "ldrh r3, [r2]",
            "mov r0, r4",
            "add r2, r2, 4",
            "add r1, r1, 0xa0",
            "str r1, [sp]",
            "sub r3, r3, 4",
            "mov r1, 0x1e",
            "bl nla_parse",
            "cmp r0, 0",
            "bne 0x8000da4",
            "mov r3, 1",
            "mov r0, fp",
            "str r3, [sp]",
            "mov r1, sb",
            "mov r2, r5",
            "mov r3, r4",
            "stmib sp, {r8, sl}",
            "bl sym.call_ad",
            "b 0x8000db0",
            "ldr r3, [r4, 0x20]",
            "mov r0, r2",
            "add r7, sp, 0x10",
            "ldrh r6, [r3]",
            "add r4, r3, 4",
            "sub r6, r6, 4",
            "b 0x8000d6c",
            "tst r3, 0x8000",
            "beq 0x8000da4",
            "ldr r2, [r5, 0x30]",
            "mov r0, r7",
            "ldrh r3, [r4]",
            "mov r1, 0x1e",
            "add r2, r2, 0xa0",
            "str r2, [sp]",
            "sub r3, r3, 4",
            "add r2, r4, 4",
            "bl nla_parse",
            "cmp r0, 0",
            "bne 0x8000da4",
            "mov r3, 1",
            "mov r0, fp",
            "str r3, [sp]",
            "mov r1, sb",
            "mov r2, r5",
            "mov r3, r7",
            "stmib sp, {r8, sl}",
            "bl sym.call_ad",
            "cmp r0, 0",
            "blt 0x8000db0",
            "ldrh r3, [r4]",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "rsb r6, r3, r6",
            "add r4, r4, r3",
            "cmp r6, 3",
            "ble 0x8000db0",
            "ldrh r3, [r4]",
            "cmp r3, 3",
            "bls 0x8000db0",
            "cmp r3, r6",
            "bgt 0x8000db0",
            "mov r0, r7",
            "mov r1, 4",
            "bl __memzero",
            "ldrh r3, [r4, 2]",
            "bic r2, r3, 0xc000",
            "cmp r2, 7",
            "beq 0x8000cfc",
            "mvn r0, 0x1000",
            "b 0x8000db0",
            "mvn r0, 1",
            "add sp, sp, 0x94",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r0, [r4, 0x20]",
            "ldr r3, [r4, 0x1c]",
            "subs r2, r0, 0",
            "movne r2, 1",
            "cmp r3, 0",
            "movne ip, r2",
            "eoreq ip, r2, 1",
            "cmp ip, 0",
            "bne 0x8000da4",
            "cmp r3, 0",
            "bne 0x8000c3c",
            "cmp r2, 0",
            "bne 0x8000c4c",
            "mov r0, r6",
            "add r1, r1, 4",
            "add r2, sp, 0x8e",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "bne 0x8000c68",
            "b 0x8000dac"
        ]
    },
    "sym.call_ad": {
        "function_address": "0x080009a4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x44",
            "mov r4, 0",
            "add r6, sp, 0x40",
            "mov r8, r1",
            "mov r5, r2",
            "str r0, [sp, 0xc]",
            "mov sl, r3",
            "ldr fp, [sp, 0x6c]",
            "add r7, r2, 0x20",
            "ldrb sb, [sp, 0x70]",
            "str r4, [r6, -4]!",
            "b 0x80009dc",
            "mov r4, 1",
            "mov r0, r7",
            "bl _raw_spin_lock_bh",
            "ldr r3, [r5, 0x34]",
            "mov r1, sl",
            "str r4, [sp, 4]",
            "mov r0, r5",
            "str fp, [sp]",
            "ldr r2, [sp, 0x68]",
            "ldr ip, [r3, 4]",
            "mov r3, r6",
            "blx ip",
            "mov r4, r0",
            "mov r0, r7",
            "bl _raw_spin_unlock_bh",
            "cmn r4, 0xb",
            "bne 0x8000a44",
            "ldr r3, [r5, 0x34]",
            "ldr r3, [r3, 0x14]",
            "cmp r3, 0",
            "beq 0x8000b60",
            "mov r0, r5",
            "mov r1, 1",
            "blx r3",
            "subs r4, r0, 0",
            "beq 0x80009d8",
            "b 0x8000b60",
            "subs r0, r4, 0",
            "beq 0x8000b58",
            "ldr r3, [0x08000b68]",
            "cmp r4, r3",
            "bne 0x8000a64",
            "tst fp, 1",
            "movne r0, 0",
            "bne 0x8000b58",
            "ldr r3, [sp, 0x3c]",
            "cmp r3, 0",
            "beq 0x8000b58",
            "cmp sb, 0",
            "beq 0x8000b58",
            "ldr r5, [r8, 0xec]",
            "mvn r3, 0",
            "mov r1, 0xd0",
            "mov r2, 0",
            "ldr r7, [r5]",
            "add r7, r7, 4",
            "cmp r7, r3",
            "movhs r7, r3",
            "add r6, r7, 0x10",
            "add r7, r7, 0x13",
            "bic r7, r7, 3",
            "mov r0, r7",
            "bl __alloc_skb",
            "subs r3, r0, 0",
            "str r3, [sp, 8]",
            "mvneq r0, 0xb",
            "beq 0x8000b58",
            "add r8, r8, 0x30",
            "ldr sb, [r5, 8]",
            "ldr fp, [r8, 0xc]",
            "mov r1, r7",
            "bl skb_put",
            "mov r3, 2",
            "subs r1, r7, r6",
            "strh r3, [r0, 4]",
            "mov r3, 0",
            "mov sl, r0",
            "str r6, [r0]",
            "strh r3, [r0, 6]",
            "str fp, [r0, 0xc]",
            "str sb, [r0, 8]",
            "beq 0x8000b00",
            "add r0, r0, r6",
            "bl __memzero",
            "str r4, [sl, 0x10]",
            "mov r1, r5",
            "ldr r2, [r5]",
            "add r0, sl, 0x14",
            "bl memcpy",
            "ldr r3, [r5]",
            "mov r1, 0xa",
            "ldr r2, [0x08000b6c]",
            "add r0, sp, 0x10",
            "sub r3, r3, 0x14",
            "str r2, [sp]",
            "add r2, sl, 0x28",
            "bl nla_parse",
            "ldr r2, [sp, 0x3c]",
            "ldr r3, [sp, 0x34]",
            "str r2, [r3, 4]",
            "mov r3, 0x40",
            "ldr r0, [sp, 0xc]",
            "ldr r1, [sp, 8]",
            "ldr r2, [r8, 0xc]",
            "bl netlink_unicast",
            "mvn r0, 3",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r4",
            "b 0x8000a4c"
        ]
    },
    "sym.ip_set_uadd": {
        "function_address": "0x08000e14",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r3",
            "ldr r3, [0x080010a4]",
            "sub sp, sp, 0x94",
            "mov sb, r1",
            "mov r1, sp",
            "mov r5, r2",
            "mov fp, r0",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x080010a8]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8000e68",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8000e74",
            "ldr r0, [0x080010ac]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r6, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8000e98",
            "bl preempt_schedule",
            "add r0, sp, 0x10",
            "mov r1, 0",
            "mov r2, 0x7c",
            "bl memset",
            "ldr r3, [r4, 4]",
            "ldrh r7, [r5, 6]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x8000ec8",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x8001040",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "bne 0x8001054",
            "b 0x8001040",
            "ldrh r3, [r3, 2]",
            "tst r3, 0x8000",
            "bne 0x8001080",
            "b 0x8001040",
            "ldrh r3, [r0, 2]",
            "tst r3, 0x8000",
            "beq 0x8001040",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "bne 0x8001088",
            "b 0x8001040",
            "ldr sl, [r4, 0x24]",
            "tst r7, 0x200",
            "ldr r2, [r4, 0x1c]",
            "movne r8, 0",
            "moveq r8, 1",
            "subs sl, sl, 0",
            "movne sl, 1",
            "cmp r2, 0",
            "beq 0x8000f80",
            "ldr r1, [r5, 0x30]",
            "add r4, sp, 0x10",
            "ldrh r3, [r2]",
            "mov r0, r4",
            "add r2, r2, 4",
            "add r1, r1, 0xa0",
            "str r1, [sp]",
            "sub r3, r3, 4",
            "mov r1, 0x1e",
            "bl nla_parse",
            "cmp r0, 0",
            "bne 0x8001040",
            "str r0, [sp]",
            "mov r1, sb",
            "mov r0, fp",
            "mov r2, r5",
            "mov r3, r4",
            "stmib sp, {r8, sl}",
            "bl sym.call_ad",
            "b 0x800104c",
            "ldr r3, [r4, 0x20]",
            "mov r0, r2",
            "add r7, sp, 0x10",
            "ldrh r6, [r3]",
            "add r4, r3, 4",
            "sub r6, r6, 4",
            "b 0x8001008",
            "tst r3, 0x8000",
            "beq 0x8001040",
            "ldr r2, [r5, 0x30]",
            "mov r0, r7",
            "ldrh r3, [r4]",
            "mov r1, 0x1e",
            "add r2, r2, 0xa0",
            "str r2, [sp]",
            "sub r3, r3, 4",
            "add r2, r4, 4",
            "bl nla_parse",
            "cmp r0, 0",
            "bne 0x8001040",
            "str r0, [sp]",
            "mov r1, sb",
            "mov r0, fp",
            "mov r2, r5",
            "mov r3, r7",
            "stmib sp, {r8, sl}",
            "bl sym.call_ad",
            "cmp r0, 0",
            "blt 0x800104c",
            "ldrh r3, [r4]",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "rsb r6, r3, r6",
            "add r4, r4, r3",
            "cmp r6, 3",
            "ble 0x800104c",
            "ldrh r3, [r4]",
            "cmp r3, 3",
            "bls 0x800104c",
            "cmp r3, r6",
            "bgt 0x800104c",
            "mov r0, r7",
            "mov r1, 0x7c",
            "bl __memzero",
            "ldrh r3, [r4, 2]",
            "bic r2, r3, 0xc000",
            "cmp r2, 7",
            "beq 0x8000f9c",
            "mvn r0, 0x1000",
            "b 0x800104c",
            "mvn r0, 1",
            "add sp, sp, 0x94",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r0, [r4, 0x20]",
            "ldr r3, [r4, 0x1c]",
            "subs r2, r0, 0",
            "movne r2, 1",
            "cmp r3, 0",
            "movne ip, r2",
            "eoreq ip, r2, 1",
            "cmp ip, 0",
            "bne 0x8001040",
            "cmp r3, 0",
            "bne 0x8000ee0",
            "cmp r2, 0",
            "bne 0x8000ef0",
            "mov r0, r6",
            "add r1, r1, 4",
            "add r2, sp, 0x8e",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "bne 0x8000f0c",
            "b 0x8001048"
        ]
    },
    "sym.ip_set_flush": {
        "function_address": "0x080010b0",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r5, r3",
            "ldr r3, [0x080011f8]",
            "ldr r1, [r3]",
            "mov r3, sp",
            "bic r2, r3, 0x1fc0",
            "bic r2, r2, 0x3f",
            "ldr r3, [r2, 4]",
            "add r3, r3, 1",
            "str r3, [r2, 4]",
            "ldr r3, [0x080011fc]",
            "cmp r1, 0",
            "ldr r3, [r3, 0x464]",
            "beq 0x80010f4",
            "ldr r0, [r3]",
            "cmp r1, r0",
            "bls 0x8001100",
            "ldr r0, [0x08001200]",
            "mov r1, 0x28",
            "bl __bug",
            "add r1, r3, r1, lsl 2",
            "ldr r6, [r1, 8]",
            "ldr r3, [r2, 4]",
            "sub r3, r3, 1",
            "str r3, [r2, 4]",
            "ldr r3, [r2]",
            "tst r3, 2",
            "beq 0x8001124",
            "bl preempt_schedule",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "moveq r4, 1",
            "beq 0x8001140",
            "ldrb r4, [r3, 4]",
            "subs r4, r4, 6",
            "movne r4, 1",
            "cmp r4, 0",
            "mvnne r0, 0x1000",
            "bne 0x80011f4",
            "ldr r1, [r5, 8]",
            "cmp r1, 0",
            "moveq r4, r1",
            "beq 0x800119c",
            "b 0x80011b0",
            "ldr r3, [r6]",
            "ldr r5, [r3, r4, lsl 2]",
            "cmp r5, 0",
            "beq 0x8001194",
            "add r7, r5, 0x20",
            "mov r0, r7",
            "bl _raw_spin_lock_bh",
            "ldr r3, [r5, 0x34]",
            "mov r0, r5",
            "ldr r3, [r3, 0x1c]",
            "blx r3",
            "mov r0, r7",
            "bl _raw_spin_unlock_bh",
            "add r4, r4, 1",
            "uxth r4, r4",
            "ldrh r3, [r6, 4]",
            "cmp r3, r4",
            "bhi 0x8001160",
            "mov r0, 0",
            "b 0x80011f4",
            "mov r0, r6",
            "add r1, r1, 4",
            "add r2, sp, 6",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "mvneq r0, 1",
            "beq 0x80011f4",
            "add r6, r5, 0x20",
            "mov r0, r6",
            "bl _raw_spin_lock_bh",
            "ldr r3, [r5, 0x34]",
            "mov r0, r5",
            "ldr r3, [r3, 0x1c]",
            "blx r3",
            "mov r0, r6",
            "bl _raw_spin_unlock_bh",
            "mov r0, r4",
            "pop {r1, r2, r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.ip_set_dump_start": {
        "function_address": "0x08001b1c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "ldr r3, [r1]",
            "mov r4, r1",
            "mov r1, sp",
            "mov r6, r0",
            "ldr r3, [r3, 0x3c]",
            "cmp r3, 0",
            "movne r3, 2",
            "moveq r3, 0",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x08002028]",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x0800202c]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8001b80",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8001b8c",
            "ldr r0, [0x08002030]",
            "mov r1, 0x28",
            "b __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r8, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8001bb0",
            "bl preempt_schedule",
            "ldr r3, [r4, 0x18]",
            "cmp r3, 0",
            "bne 0x8001c60",
            "ldr r3, [r4]",
            "add r0, sp, 0x18",
            "ldr r1, [0x08002034]",
            "ldr r2, [r3, 0xec]",
            "ldr r3, [r2]",
            "add r2, r2, 0x14",
            "str r1, [sp]",
            "mov r1, 0xa",
            "sub r3, r3, 0x14",
            "bl nla_parse",
            "ldr r1, [sp, 0x20]",
            "cmp r1, 0",
            "beq 0x8001c18",
            "mov r0, r8",
            "add r1, r1, 4",
            "add r2, sp, 0x46",
            "bl sym.find_set_and_id",
            "cmp r0, 0",
            "ldrhne r3, [sp, 0x46]",
            "strne r3, [r4, 0x1c]",
            "movne r3, 2",
            "bne 0x8001c1c",
            "b 0x8001c40",
            "mov r3, 1",
            "ldr r2, [sp, 0x30]",
            "cmp r2, 0",
            "beq 0x8001c34",
            "ldr r2, [r2, 4]",
            "rev r2, r2",
            "orr r3, r3, r2, lsl 16",
            "str r8, [r4, 0x14]",
            "str r3, [r4, 0x18]",
            "b 0x8001c60",
            "ldr r0, [r4]",
            "ldr r1, [r0, 0xec]",
            "ldrh r3, [r1, 6]",
            "tst r3, 4",
            "beq 0x8002010",
            "mvn r2, 1",
            "bl netlink_ack",
            "b 0x8002010",
            "ldr r3, [r4, 0x1c]",
            "ldrh sl, [r8, 4]",
            "cmp r3, sl",
            "bge 0x8002008",
            "ldr r2, [r4, 0x18]",
            "mov r5, 0",
            "mov sb, r5",
            "uxth r7, r2",
            "lsr r2, r2, 0x10",
            "str r2, [sp, 0xc]",
            "cmp r7, 2",
            "ldr r2, [sp, 0xc]",
            "addeq sl, r3, 1",
            "uxtheq sl, sl",
            "lsl fp, r2, 0x10",
            "orr fp, fp, 3",
            "b 0x8001ee4",
            "mov r7, 3",
            "b 0x8001ee4",
            "ldr r0, [0x08002038]",
            "str r3, [sp, 8]",
            "bl _raw_write_lock_bh",
            "ldr r3, [sp, 8]",
            "ldr r2, [r8]",
            "uxth r3, r3",
            "lsl r1, r3, 2",
            "str r1, [sp, 0x14]",
            "ldr r5, [r2, r3, lsl 2]",
            "ldrb r3, [r8, 7]",
            "cmp r5, 0",
            "beq 0x8001ce4",
            "cmp r3, 0",
            "beq 0x8001d08",
            "ldr r0, [0x08002038]",
            "str r3, [sp, 8]",
            "bl _raw_write_unlock_bh",
            "cmp r7, 2",
            "ldr r3, [sp, 8]",
            "beq 0x8002010",
            "cmp r3, 0",
            "bne 0x8002008",
            "b 0x8001ed8",
            "cmp r7, 2",
            "beq 0x8001d38",
            "ldr r3, [r5, 0x30]",
            "ldrh r3, [r3, 0x2e]",
            "ubfx r3, r3, 8, 1",
            "cmp r7, 1",
            "eorne r3, r3, 1",
            "cmp r3, 0",
            "beq 0x8001d38",
            "ldr r0, [0x08002038]",
            "bl _raw_write_unlock_bh",
            "b 0x8001ed8",
            "ldr r3, [r4, 0x24]",
            "ldr r0, [0x08002038]",
            "cmp r3, 0",
            "ldreq r3, [r5, 0x2c]",
            "addeq r3, r3, 1",
            "streq r3, [r5, 0x2c]",
            "bl _raw_write_unlock_bh",
            "ldr r2, [r4]",
            "mov r1, 7",
            "ldr r3, [r4, 4]",
            "mov r0, r6",
            "str r1, [sp]",
            "ldr r1, [r2, 0x3c]",
            "ldr r2, [r3, 8]",
            "ldr r3, [sp, 0x10]",
            "bl sym.start_msg",
            "subs sb, r0, 0",
            "beq 0x8002020",
            "add sl, sp, 0x48",
            "mov r3, 6",
            "mov r1, 1",
            "strb r3, [sl, -2]!",
            "mov r0, r6",
            "mov r2, r1",
            "mov r3, sl",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x8001f2c",
            "mov r0, r5",
            "bl strlen",
            "mov r1, 2",
            "add r2, r0, 1",
            "mov r3, r5",
            "mov r0, r6",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x8001f2c",
            "ldr r2, [sp, 0xc]",
            "tst r2, 2",
            "movne sl, r0",
            "bne 0x8001f30",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "bne local_bh_disable",
            "ldr fp, [r5, 0x30]",
            "add fp, fp, 8",
            "mov r0, fp",
            "bl strlen",
            "mov r1, 3",
            "add r2, r0, 1",
            "mov r3, fp",
            "mov r0, r6",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x8001f2c",
            "ldrb r3, [r5, 0x38]",
            "mov r0, r6",
            "mov r1, 5",
            "mov r2, 1",
            "strb r3, [sp, 0x46]",
            "mov r3, sl",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x8001f2c",
            "ldrb r3, [r5, 0x39]",
            "mov r0, r6",
            "mov r1, 4",
            "mov r2, 1",
            "strb r3, [sp, 0x46]",
            "mov r3, sl",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x8001f2c",
            "ldr r3, [r5, 0x34]",
            "mov r0, r5",
            "mov r1, r6",
            "ldr r3, [r3, 0x24]",
            "blx r3",
            "subs sl, r0, 0",
            "blt 0x8001f58",
            "ldr r3, [sp, 0xc]",
            "tst r3, 4",
            "bne 0x8001f30",
            "ldr r3, [r5, 0x34]",
            "ldr r3, [r3, 0x2c]",
            "cmp r3, 0",
            "beq local_bh_disable",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, 1",
            "blx r3",
            "bl local_bh_disable",
            "ldr r3, [r5, 0x34]",
            "mov r1, r6",
            "mov r2, r4",
            "mov r0, r5",
            "ldr r3, [r3, 0x28]",
            "blx r3",
            "mov sl, r0",
            "bl local_bh_enable",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "beq 0x8001f30",
            "b 0x8001f44",
            "ldr r3, [r4, 0x1c]",
            "add r3, r3, 1",
            "str r3, [r4, 0x1c]",
            "ldr r3, [r4, 0x1c]",
            "cmp r3, sl",
            "blt 0x8001cac",
            "cmp r7, 1",
            "bne 0x8002008",
            "cmp r5, 0",
            "str fp, [r4, 0x18]",
            "str sb, [r4, 0x1c]",
            "beq 0x8001ca4",
            "ldr r3, [r5, 0x34]",
            "ldr r3, [r3, 0x2c]",
            "cmp r3, 0",
            "beq 0x8001ca4",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, sb",
            "blx r3",
            "b 0x8001ca4",
            "mvn sl, 0xd",
            "cmp r7, 2",
            "ldrne r3, [r4, 0x1c]",
            "movweq r3, 0xffff",
            "addne r3, r3, 1",
            "str r3, [r4, 0x1c]",
            "cmp sl, 0",
            "bne 0x8001f58",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "bne 0x8001fc4",
            "ldr r3, [r8]",
            "ldr r1, [sp, 0x14]",
            "ldr r5, [r3, r1]",
            "ldr r3, [r5, 0x34]",
            "ldr r3, [r3, 0x2c]",
            "cmp r3, 0",
            "beq 0x8001f84",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, 0",
            "blx r3",
            "ldr r0, [0x08002038]",
            "bl _raw_write_lock_bh",
            "ldr r3, [r5, 0x2c]",
            "cmp r3, 0",
            "bne 0x8001fa4",
            "ldr r0, [0x0800203c]",
            "mov r1, 0x208",
            "bl __bug",
            "sub r3, r3, 1",
            "ldr r0, [0x08002038]",
            "str r3, [r5, 0x2c]",
            "bl _raw_write_unlock_bh",
            "mov r3, 0",
            "cmp sb, r3",
            "str r3, [r4, 0x24]",
            "beq 0x8002000",
            "ldr r3, [r6, 0xe0]",
            "rsb r3, sb, r3",
            "str r3, [sb], 0x14",
            "sub r3, r3, 0x14",
            "cmp r3, 3",
            "ble 0x8002000",
            "ldrh r2, [sb]",
            "cmp r2, 3",
            "bls 0x8002000",
            "cmp r2, r3",
            "addle r2, r2, 3",
            "bicle r2, r2, 3",
            "rsble r3, r2, r3",
            "addle sb, sb, r2",
            "ble 0x8001fd4",
            "cmp sl, 0",
            "blt 0x8002014",
            "ldr sl, [r6, 0xa8]",
            "b 0x8002014",
            "mvn sl, 1",
            "mov r0, sl",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mvn sl, 0x59",
            "b 0x8001f58"
        ]
    },
    "sym.ip_set_swap": {
        "function_address": "0x08002040",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r3",
            "ldr r3, [0x08002208]",
            "sub sp, sp, 0x28",
            "mov r1, sp",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x0800220c]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8002088",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8002094",
            "ldr r0, [0x08002210]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r6, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x80020b8",
            "bl preempt_schedule",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x80020d4",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x80021ec",
            "ldr r1, [r5, 8]",
            "cmp r1, 0",
            "bne 0x80021f8",
            "b 0x80021ec",
            "mov r0, r6",
            "add r1, r1, 4",
            "add r2, sp, 0x26",
            "bl sym.find_set_and_id",
            "subs r4, r0, 0",
            "mvneq r0, 1",
            "beq 0x80021f0",
            "ldr r1, [r5, 0xc]",
            "mov r0, r6",
            "add r2, sp, 0x24",
            "add r1, r1, 4",
            "bl sym.find_set_and_id",
            "subs r5, r0, 0",
            "ldreq r0, [0x08002214]",
            "beq 0x80021f0",
            "ldr r2, [r4, 0x30]",
            "ldr r3, [r5, 0x30]",
            "ldrh r2, [r2, 0x2e]",
            "ldrh r3, [r3, 0x2e]",
            "cmp r2, r3",
            "bne 0x80021dc",
            "ldrb r2, [r4, 0x38]",
            "ldrb r3, [r5, 0x38]",
            "cmp r2, r3",
            "bne 0x80021dc",
            "ldr r3, [r4, 0x2c]",
            "cmp r3, 0",
            "bne 0x80021e4",
            "ldr r7, [r5, 0x2c]",
            "cmp r7, 0",
            "bne 0x80021e4",
            "add r8, sp, 4",
            "mov r1, r4",
            "mov r2, 0x20",
            "mov r0, r8",
            "bl strncpy",
            "mov r1, r5",
            "mov r2, 0x20",
            "mov r0, r4",
            "bl strncpy",
            "mov r1, r8",
            "mov r2, 0x20",
            "mov r0, r5",
            "bl strncpy",
            "ldr r0, [0x08002218]",
            "bl _raw_write_lock_bh",
            "ldr r3, [r4, 0x28]",
            "ldr r2, [r5, 0x28]",
            "ldr r0, [0x08002218]",
            "str r2, [r4, 0x28]",
            "str r3, [r5, 0x28]",
            "ldrh r2, [sp, 0x26]",
            "ldr r3, [r6]",
            "str r5, [r3, r2, lsl 2]",
            "ldrh r2, [sp, 0x24]",
            "ldr r3, [r6]",
            "str r4, [r3, r2, lsl 2]",
            "bl _raw_write_unlock_bh",
            "mov r0, r7",
            "b 0x80021f0",
            "ldr r0, [0x0800221c]",
            "b 0x80021f0",
            "mvn r0, 0xf",
            "b 0x80021f0",
            "mvn r0, 0x1000",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 0",
            "bne 0x80020ec",
            "b 0x80021ec"
        ]
    },
    "sym.ip_set_rename": {
        "function_address": "0x08002220",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r4, r3",
            "ldr r3, [0x0800238c]",
            "mov r1, sp",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x08002390]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8002264",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8002270",
            "ldr r0, [0x08002394]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r5, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8002294",
            "bl preempt_schedule",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x80022b0",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x8002370",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "bne 0x800237c",
            "b 0x8002370",
            "mov r0, r5",
            "add r1, r1, 4",
            "add r2, sp, 6",
            "bl sym.find_set_and_id",
            "subs r7, r0, 0",
            "mvneq r4, 1",
            "beq 0x8002374",
            "ldr r0, [0x08002398]",
            "bl _raw_read_lock_bh",
            "ldr r3, [r7, 0x28]",
            "cmp r3, 0",
            "ldreq r6, [r4, 0xc]",
            "moveq r4, r3",
            "addeq r6, r6, 4",
            "beq 0x8002334",
            "b 0x8002358",
            "ldr r3, [r5]",
            "ldr r0, [r3, r4, lsl 2]",
            "cmp r0, 0",
            "beq 0x800232c",
            "mov r1, r6",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "beq 0x8002360",
            "add r4, r4, 1",
            "uxth r4, r4",
            "ldrh r3, [r5, 4]",
            "cmp r3, r4",
            "bhi 0x8002308",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, 0x20",
            "mov r4, 0",
            "bl strncpy",
            "b 0x8002364",
            "ldr r4, [0x0800239c]",
            "b 0x8002364",
            "ldr r4, [0x080023a0]",
            "ldr r0, [0x08002398]",
            "bl _raw_read_unlock_bh",
            "b 0x8002374",
            "mvn r4, 0x1000",
            "mov r0, r4",
            "pop {r1, r2, r3, r4, r5, r6, r7, pc}",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 0",
            "bne 0x80022c8",
            "b 0x8002370"
        ]
    },
    "sym.ip_set_destroy": {
        "function_address": "0x080023d0",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r5, r3",
            "ldr r3, [0x080025a0]",
            "mov r1, sp",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x080025a4]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8002414",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8002420",
            "ldr r0, [0x080025a8]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r4, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8002444",
            "bl preempt_schedule",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x8002460",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "mvnne r4, 0x1000",
            "bne 0x8002598",
            "bl rcu_barrier",
            "ldr r0, [0x080025ac]",
            "bl _raw_read_lock_bh",
            "ldr r1, [r5, 8]",
            "cmp r1, 0",
            "strheq r1, [sp, 6]",
            "ldrheq r1, [r4, 4]",
            "bne 0x8002530",
            "b 0x80024c0",
            "ldr r2, [r4]",
            "ldr r2, [r2, r3, lsl 2]",
            "cmp r2, 0",
            "beq 0x80024b8",
            "ldr r0, [r2, 0x28]",
            "cmp r0, 0",
            "bne 0x800258c",
            "ldr r2, [r2, 0x2c]",
            "cmp r2, 0",
            "bne 0x800258c",
            "add r3, r3, 1",
            "strh r3, [sp, 6]",
            "ldrh r3, [sp, 6]",
            "cmp r3, r1",
            "blo 0x8002490",
            "mov r3, 1",
            "ldr r0, [0x080025ac]",
            "strb r3, [r4, 7]",
            "mov r5, 0",
            "bl _raw_read_unlock_bh",
            "mov r3, 0",
            "strh r3, [sp, 6]",
            "b 0x8002510",
            "ldr r2, [r4]",
            "ldr r0, [r2, r3, lsl 2]",
            "cmp r0, 0",
            "beq 0x8002504",
            "str r5, [r2, r3, lsl 2]",
            "bl sym.ip_set_destroy_set",
            "ldrh r3, [sp, 6]",
            "add r3, r3, 1",
            "strh r3, [sp, 6]",
            "ldrh r3, [sp, 6]",
            "ldrh r2, [r4, 4]",
            "cmp r2, r3",
            "bhi 0x80024ec",
            "mov r3, 0",
            "strb r3, [r4, 7]",
            "mov r4, r3",
            "b 0x8002598",
            "mov r0, r4",
            "add r1, r1, 4",
            "add r2, sp, 6",
            "bl sym.find_set_and_id",
            "subs r6, r0, 0",
            "beq 0x8002584",
            "ldr r3, [r6, 0x28]",
            "cmp r3, 0",
            "bne 0x800258c",
            "ldr r5, [r6, 0x2c]",
            "cmp r5, 0",
            "bne 0x800258c",
            "ldr r3, [r4]",
            "mov r4, r5",
            "ldrh r2, [sp, 6]",
            "ldr r0, [0x080025ac]",
            "str r5, [r3, r2, lsl 2]",
            "bl _raw_read_unlock_bh",
            "mov r0, r6",
            "bl sym.ip_set_destroy_set",
            "b 0x8002598",
            "mvn r4, 1",
            "b 0x8002590",
            "ldr r4, [0x080025b0]",
            "ldr r0, [0x080025ac]",
            "bl _raw_read_unlock_bh",
            "mov r0, r4",
            "pop {r2, r3, r4, r5, r6, pc}"
        ]
    },
    "sym.ip_set_destroy_set": {
        "function_address": "0x080023a4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0x34]",
            "ldr r3, [r3, 0x18]",
            "blx r3",
            "ldr r3, [r4, 0x30]",
            "ldr r0, [r3, 0x11c]",
            "bl module_put",
            "mov r0, r4",
            "pop {r4, lr}",
            "b kfree"
        ]
    },
    "sym.ip_set_sockfn_get": {
        "function_address": "0x080025f0",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r6, r3",
            "ldr r8, [r3]",
            "mov r5, r1",
            "mov r1, sp",
            "mov r4, r2",
            "ldr r3, [0x080028c0]",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [0x080028c4]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x8002640",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x800264c",
            "ldr r0, [0x080028c8]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r7, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8002670",
            "bl preempt_schedule",
            "mov r0, 0xc",
            "bl capable",
            "cmp r0, 0",
            "mvneq r0, 0",
            "beq 0x80028bc",
            "cmp r5, 0x53",
            "mvnne r0, 8",
            "bne 0x80028bc",
            "ldr r0, [r6]",
            "cmp r0, 3",
            "mvnls r0, 0x15",
            "bls 0x80028bc",
            "bl vmalloc",
            "subs r5, r0, 0",
            "mvneq r0, 0xb",
            "beq 0x80028bc",
            "mov r1, sp",
            "ldr r2, [r6]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r3, [r3, 8]",
            "adds r1, r4, r2",
            "sbcslo r1, r1, r3",
            "movlo r3, 0",
            "cmp r3, 0",
            "bne 0x80026ec",
            "mov r1, r4",
            "bl __copy_from_user",
            "cmp r0, 0",
            "bne 0x800289c",
            "b 0x8002700",
            "cmp r2, 0",
            "beq 0x8002700",
            "mov r1, r2",
            "bl __memzero",
            "b 0x800289c",
            "ldr r3, [r5]",
            "cmp r3, 0xff",
            "bhi 0x8002728",
            "ldr r2, [r6]",
            "cmp r2, 7",
            "bls 0x80028ac",
            "ldr r2, [r5, 4]",
            "cmp r2, 6",
            "mvnne r8, 0x46",
            "bne 0x80028b0",
            "cmp r3, 7",
            "beq 0x8002818",
            "bhi 0x8002740",
            "cmp r3, 6",
            "bne 0x80028a4",
            "b 0x8002798",
            "cmp r3, 8",
            "beq 0x80027cc",
            "cmp r3, 0x100",
            "bne 0x80028a4",
            "ldr r2, [r6]",
            "cmp r2, 8",
            "bne 0x80028ac",
            "mov r3, 6",
            "mov r1, sp",
            "str r3, [r5, 4]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r3, [r3, 8]",
            "adds r1, r4, 8",
            "sbcslo r1, r1, r3",
            "movlo r3, 0",
            "cmp r3, 0",
            "moveq r0, r4",
            "moveq r1, r5",
            "movne r0, r2",
            "bne 0x8002894",
            "b __copy_to_user",
            "ldr r3, [r6]",
            "cmp r3, 0x28",
            "bne 0x80028ac",
            "mov r3, 0",
            "strb r3, [r5, 0x27]",
            "bl nfnl_lock",
            "add r2, sp, 6",
            "mov r0, r7",
            "add r1, r5, 8",
            "bl sym.find_set_and_id",
            "ldrh r2, [sp, 6]",
            "strh r2, [r5, 8]",
            "b nfnl_unlock",
            "ldr r3, [r6]",
            "cmp r3, 0x2c",
            "bne 0x80028ac",
            "mov r3, 0",
            "strb r3, [r5, 0x2b]",
            "bl nfnl_lock",
            "add r2, sp, 6",
            "mov r0, r7",
            "add r1, r5, 0xc",
            "bl sym.find_set_and_id",
            "ldrh r3, [sp, 6]",
            "movw r2, 0xffff",
            "cmp r3, r2",
            "strh r3, [r5, 0xc]",
            "ldrne r2, [r7]",
            "ldrne r3, [r2, r3, lsl 2]",
            "ldrbne r3, [r3, 0x38]",
            "strne r3, [r5, 8]",
            "b nfnl_unlock",
            "ldr r3, [r6]",
            "cmp r3, 0x28",
            "bne 0x80028ac",
            "ldrh r2, [r5, 8]",
            "ldrh r3, [r7, 4]",
            "cmp r2, r3",
            "bhs 0x80028ac",
            "bl nfnl_lock",
            "mov r0, r5",
            "ldr r3, [r7]",
            "ldrh r2, [r0, 8]!",
            "ldr r1, [r3, r2, lsl 2]",
            "mov r2, 0x20",
            "ldr r3, [0x080028cc]",
            "cmp r1, 0",
            "moveq r1, r3",
            "bl strncpy",
            "bl nfnl_unlock",
            "mov r1, sp",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r3, [r3, 8]",
            "adds r2, r4, r8",
            "sbcslo r2, r2, r3",
            "movlo r3, 0",
            "cmp r3, 0",
            "bne 0x80028b0",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "bl __copy_to_user",
            "mov r8, r0",
            "b 0x80028b0",
            "mvn r8, 0xd",
            "b 0x80028b0",
            "mvn r8, 0x49",
            "b 0x80028b0",
            "mvn r8, 0x15",
            "mov r0, r5",
            "bl vfree",
            "and r0, r8, r8, asr 31",
            "pop {r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.ip_set_type": {
        "function_address": "0x08002f80",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "str r0, [sp, 0xc]",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "ldr r2, [r3, 4]",
            "cmp r2, 0",
            "moveq sl, 1",
            "beq 0x8002fb0",
            "ldrb sl, [r2, 4]",
            "subs sl, sl, 6",
            "movne sl, 1",
            "cmp sl, 0",
            "bne 0x80031d4",
            "ldr r6, [r3, 0xc]",
            "cmp r6, 0",
            "bne 0x80031e8",
            "b 0x80031d4",
            "mov r2, sp",
            "ldr sb, [0x08003218]",
            "ldrb r3, [r3, 4]",
            "bic r5, r2, 0x1fc0",
            "add r6, r6, 4",
            "bic r5, r5, 0x3f",
            "str r3, [sp, 8]",
            "ldr r3, [r5, 4]",
            "add r3, r3, 1",
            "str r3, [r5, 4]",
            "mov r7, 0",
            "ldr r4, [sb]",
            "mov fp, 0xff",
            "mov r8, r7",
            "b 0x8003054",
            "add r0, r4, 8",
            "mov r1, r6",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "bne 0x8003050",
            "ldrb r3, [r4, 0x2a]",
            "ldr r2, [sp, 8]",
            "cmp r3, r2",
            "beq 0x8003034",
            "cmp r3, 0",
            "bne 0x8003050",
            "ldrb r3, [r4, 0x2b]",
            "mov r8, 1",
            "cmp fp, r3",
            "movhs fp, r3",
            "ldrb r3, [r4, 0x2c]",
            "cmp r3, r7",
            "movhi r7, r3",
            "ldr r4, [r4]",
            "ldr r3, [r4]",
            "pld [r3]",
            "cmp r4, sb",
            "bne 0x8003004",
            "ldr r3, [r5, 4]",
            "sub r3, r3, 1",
            "str r3, [r5, 4]",
            "ldr r3, [r5]",
            "tst r3, 2",
            "beq 0x8003080",
            "bl preempt_schedule",
            "cmp r8, 0",
            "bne 0x80031f8",
            "cmp sl, 0",
            "bne 0x80031cc",
            "mov r0, r6",
            "add sl, sl, 1",
            "bl sym.load_settype",
            "cmp r0, 0",
            "bne 0x8002fe4",
            "b 0x80031cc",
            "ldr r3, [sp, 0x10]",
            "add sl, r3, 0x30",
            "mov r3, 0xd",
            "str r3, [sp]",
            "ldr r3, [sp, 0x14]",
            "ldr r1, [sl, 0xc]",
            "ldr r2, [r3, 8]",
            "mov r3, 0",
            "bl sym.start_msg",
            "subs r8, r0, 0",
            "beq 0x80031bc",
            "add r5, sp, 0x20",
            "mov r3, 6",
            "mov r1, 1",
            "strb r3, [r5, -1]!",
            "mov r0, r4",
            "mov r2, r1",
            "mov r3, r5",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80031ac",
            "mov r0, r6",
            "bl strlen",
            "mov r1, 3",
            "add r2, r0, 1",
            "mov r3, r6",
            "mov r0, r4",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80031ac",
            "ldr r2, [sp, 8]",
            "mov r0, r4",
            "mov r1, 5",
            "mov r3, r5",
            "strb r2, [sp, 0x1f]",
            "mov r2, 1",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80031ac",
            "mov r0, r4",
            "mov r1, 4",
            "mov r2, 1",
            "mov r3, r5",
            "strb r7, [sp, 0x1f]",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80031ac",
            "mov r0, r4",
            "mov r1, 0xa",
            "mov r2, 1",
            "mov r3, r5",
            "strb fp, [sp, 0x1f]",
            "bl nla_put",
            "cmp r0, 0",
            "bne 0x80031ac",
            "ldr r3, [r4, 0xe0]",
            "mov r1, r4",
            "ldr r0, [sp, 0xc]",
            "rsb r3, r8, r3",
            "str r3, [r8]",
            "mov r3, 0x40",
            "ldr r2, [sl, 0xc]",
            "bl netlink_unicast",
            "and r0, r0, r0, asr 31",
            "b 0x80031e0",
            "ldr r1, [r4, 0xec]",
            "mov r0, r4",
            "rsb r1, r1, r8",
            "bl skb_trim",
            "mov r0, r4",
            "bl kfree_skb",
            "mvn r0, 0x59",
            "b 0x80031e0",
            "ldr r0, [0x0800321c]",
            "b 0x80031e0",
            "mvn r0, 0x1000",
            "b 0x80031e0",
            "mvn r0, 0xb",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [r3, 0x14]",
            "cmp r3, 0",
            "bne 0x8002fc8",
            "b 0x80031d4",
            "mov r0, 0xee0",
            "mov r1, 0xd0",
            "mov r2, 0",
            "mvn r3, 0",
            "bl __alloc_skb",
            "subs r4, r0, 0",
            "bne 0x80030a8",
            "b 0x80031dc"
        ]
    },
    "sym.load_settype": {
        "function_address": "0x08000250",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl nfnl_unlock",
            "mov r0, 1",
            "mov r2, r4",
            "ldr r1, [0x08000298]",
            "bl __request_module",
            "cmp r0, 0",
            "bge nfnl_lock",
            "mov r1, r4",
            "ldr r0, [0x0800029c]",
            "bl printk",
            "bl nfnl_lock",
            "mov r0, 0",
            "pop {r4, pc}",
            "bl nfnl_lock",
            "mov r0, 1",
            "pop {r4, pc}"
        ]
    },
    "sym.ip_set_create": {
        "function_address": "0x08003220",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r3",
            "ldr r3, [0x08003714]",
            "sub sp, sp, 0x8c",
            "mov r1, sp",
            "mov r4, r2",
            "ldr r2, [r3]",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "str r1, [r3, 4]",
            "ldr r1, [reloc.init_net]",
            "cmp r2, 0",
            "ldr r1, [r1, 0x464]",
            "beq 0x800326c",
            "ldr r0, [r1]",
            "cmp r2, r0",
            "bls 0x8003278",
            "ldr r0, [0x0800371c]",
            "mov r1, 0x28",
            "bl __bug",
            "add r2, r1, r2, lsl 2",
            "ldr r5, [r2, 8]",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x800329c",
            "bl preempt_schedule",
            "add r0, sp, 0x1c",
            "mov r1, 0",
            "mov r2, 0x6c",
            "bl memset",
            "ldrh r4, [r4, 6]",
            "str r4, [sp, 0x10]",
            "ldr r3, [r7, 4]",
            "cmp r3, 0",
            "moveq r3, 1",
            "beq 0x80032d0",
            "ldrb r3, [r3, 4]",
            "subs r3, r3, 6",
            "movne r3, 1",
            "cmp r3, 0",
            "bne 0x8003670",
            "ldr r6, [r7, 8]",
            "cmp r6, 0",
            "bne 0x8003680",
            "b 0x8003670",
            "ldrh r1, [r1, 2]",
            "tst r1, 0x8000",
            "bne 0x80036b0",
            "b 0x8003670",
            "mov sb, 0",
            "add r1, r6, 4",
            "mov r2, 0x20",
            "str sb, [r4, 0x20]",
            "str sb, [r4, 0x24]",
            "mov r8, r4",
            "bl strlcpy",
            "ldr r2, [sp, 8]",
            "add r1, r4, 0x30",
            "ldr fp, [0x08003720]",
            "str r1, [sp, 0x14]",
            "strb r2, [r4, 0x38]",
            "mov r2, sp",
            "ldr r3, [sp, 0xc]",
            "bic r6, r2, 0x1fc0",
            "bic r6, r6, 0x3f",
            "strb r3, [r4, 0x39]",
            "ldr r3, [r6, 4]",
            "add r3, r3, 1",
            "str r3, [r6, 4]",
            "mov r0, sl",
            "ldr r1, [sp, 8]",
            "ldr r2, [sp, 0xc]",
            "bl sym.find_set_type",
            "ldr r3, [sp, 0x14]",
            "cmp r0, 0",
            "str r0, [r3]",
            "beq 0x80033f0",
            "ldr r3, [r0, 0x11c]",
            "mov r4, r8",
            "cmp r3, 0",
            "beq 0x80033e8",
            "ldr r2, [r6, 4]",
            "add r2, r2, 1",
            "str r2, [r6, 4]",
            "ldr r2, [r3]",
            "cmp r2, 2",
            "moveq r6, 0",
            "beq 0x80033b4",
            "ldr r1, [r6, 0x14]",
            "mov r6, 1",
            "ldr r2, [reloc.__per_cpu_offset]",
            "ldr r3, [r3, 0x144]",
            "ldr r2, [r2, r1, lsl 2]",
            "ldr r1, [r3, r2]",
            "add r1, r1, 1",
            "str r1, [r3, r2]",
            "mov r1, sp",
            "bic r3, r1, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x80033dc",
            "bl preempt_schedule",
            "cmp r6, 0",
            "mvneq r6, 0xd",
            "beq 0x8003468",
            "mov r6, 0",
            "b 0x8003468",
            "ldr r4, [fp]",
            "b 0x8003414",
            "add r0, r4, 8",
            "mov r1, sl",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "beq 0x8003460",
            "ldr r4, [r4]",
            "ldr r3, [r4]",
            "pld [r3]",
            "cmp r4, fp",
            "bne 0x80033f8",
            "ldr r3, [r6, 4]",
            "sub r3, r3, 1",
            "str r3, [r6, 4]",
            "ldr r3, [r6]",
            "tst r3, 2",
            "beq 0x8003440",
            "bl preempt_schedule",
            "cmp sb, 0",
            "bne 0x80036dc",
            "mov r0, sl",
            "add sb, sb, 1",
            "bl sym.load_settype",
            "cmp r0, 0",
            "bne 0x800333c",
            "b 0x80036dc",
            "ldr r6, [0x08003728]",
            "mov r4, r8",
            "mov r2, sp",
            "bic r3, r2, 0x1fc0",
            "bic r3, r3, 0x3f",
            "ldr r2, [r3, 4]",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "tst r3, 2",
            "beq 0x8003490",
            "bl preempt_schedule",
            "cmp r6, 0",
            "bne 0x800365c",
            "ldr r2, [r7, 0x1c]",
            "cmp r2, 0",
            "beq 0x80034d4",
            "ldr r1, [r4, 0x30]",
            "add r0, sp, 0x1c",
            "ldrh r3, [r2]",
            "add r2, r2, 4",
            "add r1, r1, 0x34",
            "str r1, [sp]",
            "sub r3, r3, 4",
            "mov r1, 0x1a",
            "bl nla_parse",
            "cmp r0, 0",
            "mvnne r6, 0x1000",
            "bne 0x8003650",
            "ldr r3, [sp, 0x10]",
            "mov r1, r4",
            "ldr r0, [reloc.init_net]",
            "add r2, sp, 0x1c",
            "tst r3, 0x200",
            "ldr r3, [r4, 0x30]",
            "movne sb, 0",
            "moveq sb, 1",
            "ldr ip, [r3, 0x30]",
            "mov r3, sb",
            "blx ip",
            "subs r6, r0, 0",
            "bne 0x8003650",
            "movw r7, 0xffff",
            "mov sl, r6",
            "mov fp, r7",
            "b 0x8003554",
            "ldr r3, [r5]",
            "ldr r8, [r3, sl, lsl 2]",
            "cmp r8, 0",
            "bne 0x8003534",
            "cmp r7, fp",
            "moveq r7, sl",
            "b 0x800354c",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "beq 0x8003570",
            "add sl, sl, 1",
            "uxth sl, sl",
            "ldrh r3, [r5, 4]",
            "cmp sl, r3",
            "blo 0x8003518",
            "movw r2, 0xffff",
            "cmp r7, r2",
            "bne 0x8003628",
            "b 0x80036e8",
            "cmp sb, 0",
            "beq 0x8003634",
            "ldr r0, [r4, 0x30]",
            "mov r2, 0x20",
            "ldr r1, [r8, 0x30]",
            "add r0, r0, 8",
            "add r1, r1, 8",
            "bl strncmp",
            "cmp r0, 0",
            "bne 0x8003634",
            "ldr r2, [r4, 0x30]",
            "ldr r3, [r8, 0x30]",
            "ldrh r0, [r2, 0x2a]",
            "ldrh r1, [r3, 0x2a]",
            "cmp r0, r1",
            "bne 0x8003634",
            "ldrb r2, [r2, 0x2c]",
            "ldrb r3, [r3, 0x2c]",
            "cmp r2, r3",
            "bne 0x8003634",
            "ldr r3, [r4, 0x34]",
            "mov r0, r4",
            "mov r1, r8",
            "ldr r3, [r3, 0x30]",
            "blx r3",
            "cmp r0, 0",
            "movne r6, 0",
            "mvneq r6, 0x10",
            "b 0x8003640",
            "lsl r0, r8, 2",
            "movw r1, 0x80d0",
            "bl __kmalloc",
            "subs r7, r0, 0",
            "beq 0x800363c",
            "ldrh r2, [r5, 4]",
            "ldr sl, [r5]",
            "lsl r2, r2, 2",
            "mov r1, sl",
            "bl memcpy",
            "dmb sy",
            "str r7, [r5]",
            "bl synchronize_net",
            "ldrh r7, [r5, 4]",
            "mov r0, sl",
            "strh r8, [r5, 4]",
            "bl kfree",
            "ldr r3, [r5]",
            "str r4, [r3, r7, lsl 2]",
            "b 0x8003674",
            "mvn r6, 0x10",
            "b 0x8003640",
            "ldr r6, [0x0800372c]",
            "ldr r3, [r4, 0x34]",
            "mov r0, r4",
            "ldr r3, [r3, 0x18]",
            "blx r3",
            "ldr r3, [r4, 0x30]",
            "ldr r0, [r3, 0x11c]",
            "bl module_put",
            "mov r0, r4",
            "bl kfree",
            "b 0x8003674",
            "mvn r6, 0xb",
            "b 0x8003674",
            "mvn r6, 0x1000",
            "mov r0, r6",
            "add sp, sp, 0x8c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr sl, [r7, 0xc]",
            "cmp sl, 0",
            "beq 0x8003670",
            "ldr r3, [r7, 0x10]",
            "cmp r3, 0",
            "beq 0x8003670",
            "ldr r2, [r7, 0x14]",
            "cmp r2, 0",
            "beq 0x8003670",
            "ldr r1, [r7, 0x1c]",
            "cmp r1, 0",
            "bne 0x80032e8",
            "ldrb r2, [r2, 4]",
            "movw r1, 0x80d0",
            "ldr r0, [0x08003730]",
            "add sl, sl, 4",
            "str r2, [sp, 8]",
            "ldrb r3, [r3, 4]",
            "str r3, [sp, 0xc]",
            "bl kmem_cache_alloc",
            "subs r4, r0, 0",
            "bne 0x80032f8",
            "b 0x8003668",
            "mov r4, r8",
            "ldr r6, [0x08003728]",
            "b 0x800365c",
            "add r8, r3, 0x40",
            "uxth r8, r8",
            "cmp r8, r3",
            "movhs r3, 0",
            "movlo r3, 1",
            "cmp r8, r7",
            "movne r7, r3",
            "orreq r7, r3, 1",
            "cmp r7, 0",
            "bne 0x800363c",
            "b 0x80035e4"
        ]
    },
    "sym.find_set_type": {
        "function_address": "0x080001cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "ldr r6, [0x0800024c]",
            "mov r7, r1",
            "mov r5, r2",
            "ldr r4, [r6]",
            "b 0x8000230",
            "add r0, r4, 8",
            "mov r1, r8",
            "mov r2, 0x20",
            "bl strncmp",
            "cmp r0, 0",
            "bne 0x800022c",
            "ldrb r3, [r4, 0x2a]",
            "cmp r3, r7",
            "beq 0x8000214",
            "cmp r3, 0",
            "bne 0x800022c",
            "ldrb r3, [r4, 0x2b]",
            "cmp r3, r5",
            "bhi 0x800022c",
            "ldrb r3, [r4, 0x2c]",
            "cmp r3, r5",
            "bhs 0x8000244",
            "ldr r4, [r4]",
            "ldr r3, [r4]",
            "pld [r3]",
            "cmp r4, r6",
            "bne 0x80001e8",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.ip_set_type_register": {
        "function_address": "0x08002e74",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldrb r1, [r0, 0x28]",
            "sub sp, sp, 0x14",
            "add r6, r0, 8",
            "cmp r1, 6",
            "beq 0x8002ed8",
            "ldrb r3, [r0, 0x2a]",
            "cmp r3, 2",
            "ldreq r2, [0x08002f64]",
            "beq 0x8002eb0",
            "ldr r0, [0x08002f68]",
            "cmp r3, 0xa",
            "ldr r2, [0x08002f6c]",
            "movne r2, r0",
            "ldrb r0, [r4, 0x2c]",
            "str r1, [sp, 4]",
            "mov r1, 6",
            "str r1, [sp, 8]",
            "mov r1, r6",
            "str r0, [sp]",
            "ldrb r3, [r4, 0x2b]",
            "ldr r0, [0x08002f70]",
            "bl printk",
            "b 0x8002f34",
            "ldr r5, [0x08002f74]",
            "add r0, r5, 8",
            "bl mutex_lock",
            "mov r0, r6",
            "ldrb r1, [r4, 0x2a]",
            "ldrb r2, [r4, 0x2b]",
            "bl sym.find_set_type",
            "subs r7, r0, 0",
            "beq 0x8002f3c",
            "ldrb r3, [r4, 0x2a]",
            "cmp r3, 2",
            "ldreq r2, [0x08002f64]",
            "beq 0x8002f1c",
            "ldr r1, [0x08002f68]",
            "cmp r3, 0xa",
            "ldr r2, [0x08002f6c]",
            "movne r2, r1",
            "ldr r0, [0x08002f78]",
            "mov r1, r6",
            "ldrb r3, [r4, 0x2b]",
            "bl printk",
            "ldr r0, [0x08002f7c]",
            "bl mutex_unlock",
            "mvn r0, 0x15",
            "b 0x8002f5c",
            "ldr r3, [r5]",
            "stm r4, {r3, r5}",
            "dmb sy",
            "mov r0, r5",
            "str r4, [r3, 4]",
            "str r4, [r0], 8",
            "bl mutex_unlock",
            "mov r0, r7",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.ip_set_type_unregister": {
        "function_address": "0x08002dd0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "add r5, r4, 8",
            "ldr r0, [0x08002e5c]",
            "bl mutex_lock",
            "mov r0, r5",
            "ldrb r1, [r4, 0x2a]",
            "ldrb r2, [r4, 0x2b]",
            "bl sym.find_set_type",
            "cmp r0, 0",
            "bne 0x8002e38",
            "ldrb r3, [r4, 0x2a]",
            "cmp r3, 2",
            "ldreq r2, [0x08002e60]",
            "beq 0x8002e1c",
            "ldr r1, [0x08002e64]",
            "cmp r3, 0xa",
            "ldr r2, [0x08002e68]",
            "movne r2, r1",
            "mov r1, r5",
            "ldrb r3, [r4, 0x2b]",
            "ldr r0, [0x08002e6c]",
            "bl printk",
            "ldr r0, [0x08002e5c]",
            "pop {r4, r5, r6, lr}",
            "b mutex_unlock",
            "ldm r4, {r2, r3}",
            "ldr r0, [0x08002e5c]",
            "str r3, [r2, 4]",
            "str r2, [r3]",
            "ldr r3, [0x08002e70]",
            "str r3, [r4, 4]",
            "bl mutex_unlock",
            "pop {r4, r5, r6, lr}",
            "b synchronize_sched"
        ]
    }
}