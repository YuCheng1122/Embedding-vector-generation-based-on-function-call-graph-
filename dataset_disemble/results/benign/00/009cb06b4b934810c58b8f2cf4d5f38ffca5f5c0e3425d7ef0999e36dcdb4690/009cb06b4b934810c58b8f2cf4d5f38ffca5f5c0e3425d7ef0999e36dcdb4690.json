{
    "main": {
        "function_address": "0x00010e20",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x20]",
            "str r1, [fp, -0x24]",
            "b 0x10e98",
            "ldr r3, [fp, -8]",
            "cmp r3, 0x68",
            "beq 0x10e58",
            "cmp r3, 0x73",
            "beq 0x10e78",
            "cmp r3, 0x61",
            "beq 0x10e64",
            "b 0x10e8c",
            "mov r0, 0",
            "bl sym.show_usage",
            "movw r3, 0x41a0",
            "movt r3, 2",
            "ldr r3, [r3]",
            "str r3, [fp, -0x18]",
            "b 0x10e98",
            "movw r3, 0x41a0",
            "movt r3, 2",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "b 0x10e98",
            "mvn r0, 0",
            "bl sym.show_usage",
            "movw r2, 0x3d98",
            "movt r2, 1",
            "ldr r1, [fp, -0x24]",
            "ldr r0, [fp, -0x20]",
            "bl sym.imp.getopt",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bgt 0x10e38",
            "mov r0, 0",
            "bl sym.sloop_init",
            "mov r2, 0",
            "movw r1, 0xc3c",
            "movt r1, 1",
            "mov r0, 0xf",
            "bl sym.sloop_register_signal",
            "mov r2, 0",
            "movw r1, 0xc3c",
            "movt r1, 1",
            "mov r0, 2",
            "bl sym.sloop_register_signal",
            "mov r2, 0",
            "movw r1, 0xc3c",
            "movt r1, 1",
            "mov r0, 9",
            "bl sym.sloop_register_signal",
            "mov r2, 0",
            "movw r1, 0xc3c",
            "movt r1, 1",
            "mov r0, 0xe",
            "bl sym.sloop_register_signal",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "beq 0x10f2c",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "bne 0x10f40",
            "movw r0, 0x3da0",
            "movt r0, 1",
            "bl sym.imp.puts",
            "mvn r3, 0",
            "b 0x10fac",
            "mov r0, 0",
            "bl sym.imp.time",
            "mov r3, r0",
            "str r3, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 0x78",
            "str r3, [fp, -0xc]",
            "ldr r2, [fp, -0x18]",
            "movw r3, 0x3dbc",
            "movt r3, 1",
            "mov r1, 0",
            "mov r0, 0",
            "bl sym.xmldbc_set",
            "ldr r2, [fp, -0x14]",
            "movw r3, 0x3dbc",
            "movt r3, 1",
            "mov r1, 0",
            "mov r0, 0",
            "bl sym.xmldbc_set",
            "sub r3, fp, 0x18",
            "movw r2, 0xc68",
            "movt r2, 1",
            "mov r1, 0",
            "mov r0, 1",
            "bl sym.sloop_register_timeout",
            "bl sym.sloop_run",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.show_usage": {
        "function_address": "0x00010c18",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "movw r0, 0x3c68",
            "movt r0, 1",
            "bl sym.imp.puts",
            "ldr r0, [fp, -8]",
            "bl sym.imp.exit"
        ]
    },
    "sym.imp.getopt": {
        "function_address": "0x00010a60",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6f0]!"
        ]
    },
    "sym.sloop_init": {
        "function_address": "0x00011640",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "mov r2, 0x48",
            "mov r1, 0",
            "movw r0, 0x5d40",
            "movt r0, 2",
            "bl sym.imp.memset",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117a4]",
            "str r2, [r3, 0x2c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x2c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x28]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117a8]",
            "str r2, [r3, 0x34]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x34]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x30]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117ac]",
            "str r2, [r3, 0x3c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x3c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x38]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117b0]",
            "str r2, [r3, 0x44]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x44]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x40]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117b4]",
            "str r2, [r3, 0x14]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x14]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x10]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117b8]",
            "str r2, [r3, 0x1c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x1c]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x18]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [0x000117bc]",
            "str r2, [r3, 0x24]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x24]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "str r2, [r3, 0x20]",
            "bl sym.init_list_pools",
            "ldr r0, [0x000117c0]",
            "bl sym.imp.pipe",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [fp, -8]",
            "str r2, [r3, 0xc]",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_register_signal": {
        "function_address": "0x0001189c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "bl sym.get_signal",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bne 0x118d0",
            "mov r3, 0",
            "b 0x11918",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "str r2, [r3, 0xc]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x18]",
            "str r2, [r3, 0x10]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x14]",
            "str r2, [r3, 0x14]",
            "ldr r3, [fp, -8]",
            "ldr r1, [0x00011924]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "movw r1, 0x15f0",
            "movt r1, 1",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.signal",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00010964",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x798]!"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x00010a78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6e0]!"
        ]
    },
    "sym.xmldbc_set": {
        "function_address": "0x00013838",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x218",
            "str r0, [fp, -0x208]",
            "str r1, [fp, -0x20c]",
            "str r2, [fp, -0x210]",
            "str r3, [fp, -0x214]",
            "sub r0, fp, 0x204",
            "ldr r3, [fp, -0x214]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x210]",
            "movw r2, 0x3f1c",
            "movt r2, 1",
            "movw r1, 0x1ff",
            "bl sym.imp.snprintf",
            "mov r3, 0",
            "strb r3, [fp, -5]",
            "sub r3, fp, 0x204",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "sub r2, fp, 0x204",
            "str r3, [sp]",
            "mov r3, r2",
            "ldr r2, [fp, -0x20c]",
            "mov r1, 2",
            "ldr r0, [fp, -0x208]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_register_timeout": {
        "function_address": "0x000119d8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x18]",
            "str r1, [fp, -0x1c]",
            "str r2, [fp, -0x20]",
            "str r3, [fp, -0x24]",
            "bl sym.get_timeout",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "bne 0x11a10",
            "mov r3, 0",
            "b 0x11b9c",
            "bl sym.get_uptime",
            "mov r3, r0",
            "mov r2, r3",
            "ldr r3, [fp, -0x18]",
            "add r3, r2, r3",
            "mov r2, r3",
            "ldr r3, [fp, -0xc]",
            "str r2, [r3, 0xc]",
            "ldr r2, [fp, -0x1c]",
            "ldr r3, [fp, -0xc]",
            "str r2, [r3, 0x10]",
            "b 0x11a6c",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0xc]",
            "add r2, r3, 1",
            "ldr r3, [fp, -0xc]",
            "str r2, [r3, 0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x10]",
            "sub r3, r3, 0xf4000",
            "sub r3, r3, 0x240",
            "ldr r2, [fp, -0xc]",
            "str r3, [r2, 0x10]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0x10]",
            "movw r3, 0x423f",
            "movt r3, 0xf",
            "cmp r2, r3",
            "bgt 0x11a40",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [fp, -0x20]",
            "str r2, [r3, 0x18]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [fp, -0x24]",
            "str r2, [r3, 0x14]",
            "ldr r2, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 4]",
            "ldr r3, [fp, -0xc]",
            "str r2, [r3]",
            "ldr r0, [0x00011ba8]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11ae4",
            "ldr r3, [fp, -0xc]",
            "ldr r1, [0x00011ba8]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "ldr r3, [fp, -0xc]",
            "b 0x11b9c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x40]",
            "str r3, [fp, -8]",
            "b 0x11b70",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0x10]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "bne 0x11b3c",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0x10]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x10]",
            "cmp r2, r3",
            "movlt r3, 1",
            "movge r3, 0",
            "uxtb r3, r3",
            "b 0x11b5c",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "movlt r3, 1",
            "movge r3, 0",
            "uxtb r3, r3",
            "cmp r3, 0",
            "bne 0x11b84",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [0x00011ba8]",
            "cmp r3, r2",
            "bne 0x11af8",
            "b 0x11b88",
            "mov r0, r0",
            "ldr r3, [fp, -0xc]",
            "ldr r1, [fp, -8]",
            "mov r0, r3",
            "bl sym.dlist_add_tail",
            "ldr r3, [fp, -0xc]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_run": {
        "function_address": "0x00011c34",
        "instructions": [
            "push {r4, fp, lr}",
            "add fp, sp, 8",
            "sub sp, sp, 0x14c",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "b 0x123dc",
            "ldr r0, [0x0001247c]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x11c7c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x40]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x10]",
            "b 0x11c84",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x11d68",
            "mov r3, 0",
            "str r3, [fp, -0x140]",
            "ldr r3, [fp, -0x140]",
            "str r3, [fp, -0x144]",
            "bl sym.get_uptime",
            "mov r3, r0",
            "str r3, [fp, -0x144]",
            "ldr r2, [fp, -0x144]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "bne 0x11ce0",
            "ldr r2, [fp, -0x140]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x10]",
            "cmp r2, r3",
            "movge r3, 1",
            "movlt r3, 0",
            "uxtb r3, r3",
            "b 0x11cfc",
            "ldr r2, [fp, -0x144]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "movge r3, 1",
            "movlt r3, 0",
            "uxtb r3, r3",
            "cmp r3, 0",
            "beq 0x11d18",
            "mov r3, 0",
            "str r3, [fp, -0x138]",
            "ldr r3, [fp, -0x138]",
            "str r3, [fp, -0x13c]",
            "b 0x11d68",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x144]",
            "rsb r3, r3, r2",
            "str r3, [fp, -0x13c]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [r3, 0x10]",
            "ldr r3, [fp, -0x140]",
            "rsb r3, r3, r2",
            "str r3, [fp, -0x138]",
            "ldr r3, [fp, -0x138]",
            "cmp r3, 0",
            "bge 0x11d68",
            "ldr r3, [fp, -0x13c]",
            "sub r3, r3, 1",
            "str r3, [fp, -0x13c]",
            "ldr r3, [fp, -0x138]",
            "add r3, r3, 0xf4000",
            "add r3, r3, 0x240",
            "str r3, [fp, -0x138]",
            "sub r3, fp, 0xb4",
            "str r3, [fp, -0x28]",
            "mov r3, 0",
            "str r3, [fp, -0x20]",
            "b 0x11d98",
            "ldr r3, [fp, -0x28]",
            "ldr r2, [fp, -0x20]",
            "mov r1, 0",
            "str r1, [r3, r2, lsl 2]",
            "ldr r3, [fp, -0x20]",
            "add r3, r3, 1",
            "str r3, [fp, -0x20]",
            "ldr r3, [fp, -0x20]",
            "cmp r3, 0x1f",
            "bls 0x11d7c",
            "sub r3, fp, 0x134",
            "str r3, [fp, -0x2c]",
            "mov r3, 0",
            "str r3, [fp, -0x24]",
            "b 0x11dd4",
            "ldr r3, [fp, -0x2c]",
            "ldr r2, [fp, -0x24]",
            "mov r1, 0",
            "str r1, [r3, r2, lsl 2]",
            "ldr r3, [fp, -0x24]",
            "add r3, r3, 1",
            "str r3, [fp, -0x24]",
            "ldr r3, [fp, -0x24]",
            "cmp r3, 0x1f",
            "bls 0x11db8",
            "mov r3, 0",
            "str r3, [fp, -0x18]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 0xc",
            "add r3, r1, r3",
            "ldr r1, [r3, -0xa8]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "and r3, r3, 0x1f",
            "mov r0, 1",
            "lsl r3, r0, r3",
            "orr r1, r1, r3",
            "lsl r3, r2, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "str r1, [r3, -0xa8]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 4]",
            "ldr r3, [fp, -0x18]",
            "cmp r2, r3",
            "ble 0x11e5c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "str r3, [fp, -0x18]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x28]",
            "str r3, [fp, -0x14]",
            "b 0x11ee8",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x30]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 0xc",
            "add r3, r1, r3",
            "ldr r1, [r3, -0xa8]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "and r3, r3, 0x1f",
            "mov r0, 1",
            "lsl r3, r0, r3",
            "orr r1, r1, r3",
            "lsl r3, r2, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "str r1, [r3, -0xa8]",
            "ldr r3, [fp, -0x30]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x18]",
            "cmp r2, r3",
            "ble 0x11edc",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "str r3, [fp, -0x18]",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [0x00012480]",
            "cmp r3, r2",
            "bne 0x11e70",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x30]",
            "str r3, [fp, -0x14]",
            "b 0x11f84",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x30]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 0xc",
            "add r3, r1, r3",
            "ldr r1, [r3, -0x128]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "and r3, r3, 0x1f",
            "mov r0, 1",
            "lsl r3, r0, r3",
            "orr r1, r1, r3",
            "lsl r3, r2, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "str r1, [r3, -0x128]",
            "ldr r3, [fp, -0x30]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x18]",
            "cmp r2, r3",
            "ble 0x11f78",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "str r3, [fp, -0x18]",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [0x00012484]",
            "cmp r3, r2",
            "bne 0x11f0c",
            "ldr r3, [fp, -0x18]",
            "add r0, r3, 1",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x11fb0",
            "sub r3, fp, 0x13c",
            "b 0x11fb4",
            "mov r3, 0",
            "sub r2, fp, 0x134",
            "sub r1, fp, 0xb4",
            "str r3, [sp]",
            "mov r3, 0",
            "bl sym.imp.select",
            "str r0, [fp, -0x1c]",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "bge 0x11ff0",
            "bl sym.imp.__errno_location",
            "mov r3, r0",
            "ldr r3, [r3]",
            "cmp r3, 4",
            "bne 0x12444",
            "b 0x123dc",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "ble 0x12138",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "lsr r3, r3, 5",
            "lsl r3, r3, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "ldr r2, [r3, -0xa8]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "and r3, r3, 0x1f",
            "asr r3, r2, r3",
            "and r3, r3, 1",
            "cmp r3, 0",
            "beq 0x12138",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 4]",
            "sub r1, fp, 0x148",
            "mov r2, 4",
            "mov r0, r3",
            "bl sym.imp.read",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x12138",
            "ldr r3, [fp, -0x148]",
            "cmp r3, 0",
            "beq 0x12138",
            "ldr r0, [0x00012488]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x12138",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x38]",
            "str r3, [fp, -0x14]",
            "b 0x1210c",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x34]",
            "ldr r3, [fp, -0x34]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0x148]",
            "cmp r2, r3",
            "bne 0x12100",
            "ldr r3, [fp, -0x34]",
            "ldr r4, [r3, 0x14]",
            "ldr r3, [fp, -0x34]",
            "ldr r0, [r3, 0xc]",
            "ldr r3, [fp, -0x34]",
            "ldr r1, [r3, 0x10]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0xc]",
            "mov r2, r3",
            "blx r4",
            "mov r3, r0",
            "cmp r3, 0",
            "bge 0x12120",
            "ldr r0, [fp, -0x14]",
            "bl sym.dlist_del",
            "ldr r0, [fp, -0x34]",
            "bl sym.free_signal",
            "b 0x12120",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [0x00012488]",
            "cmp r3, r2",
            "bne 0x12098",
            "b 0x12124",
            "mov r0, r0",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x1244c",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x1220c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r2, [r3, 0x40]",
            "ldr r3, [fp, -0x10]",
            "cmp r2, r3",
            "bne 0x1220c",
            "mov r3, 0",
            "str r3, [fp, -0x140]",
            "ldr r3, [fp, -0x140]",
            "str r3, [fp, -0x144]",
            "bl sym.get_uptime",
            "mov r3, r0",
            "str r3, [fp, -0x144]",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "beq 0x121c4",
            "ldr r2, [fp, -0x144]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "bne 0x121b0",
            "ldr r2, [fp, -0x140]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x10]",
            "cmp r2, r3",
            "bge 0x121c4",
            "b 0x1220c",
            "ldr r2, [fp, -0x144]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "blt 0x1220c",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x18]",
            "cmp r3, 0",
            "beq 0x121f8",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [r3, 0x18]",
            "ldr r3, [fp, -0x10]",
            "ldr r0, [r3, 0x14]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0xc]",
            "mov r1, r3",
            "blx r2",
            "ldr r3, [fp, -0x10]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -0x10]",
            "bl sym.free_timeout",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "bgt 0x1221c",
            "b 0x123dc",
            "ldr r0, [0x00012480]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x122fc",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x28]",
            "str r3, [fp, -0x14]",
            "b 0x122ec",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x30]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "lsr r3, r3, 5",
            "lsl r3, r3, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "ldr r2, [r3, -0xa8]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "and r3, r3, 0x1f",
            "asr r3, r2, r3",
            "and r3, r3, 1",
            "cmp r3, 0",
            "beq 0x122b8",
            "ldr r3, [fp, -0x30]",
            "ldr r4, [r3, 0x14]",
            "ldr r3, [fp, -0x30]",
            "ldr r0, [r3, 0xc]",
            "ldr r3, [fp, -0x30]",
            "ldr r1, [r3, 0x10]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0xc]",
            "mov r2, r3",
            "blx r4",
            "str r0, [fp, -0x1c]",
            "b 0x122c0",
            "mov r3, 0",
            "str r3, [fp, -0x1c]",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "bge 0x122ec",
            "ldr r3, [fp, -0x30]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -0x30]",
            "bl sym.free_socket",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [0x00012480]",
            "cmp r3, r2",
            "bne 0x12244",
            "ldr r0, [0x00012484]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x123dc",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x30]",
            "str r3, [fp, -0x14]",
            "b 0x123cc",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -0x30]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "lsr r3, r3, 5",
            "lsl r3, r3, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "ldr r2, [r3, -0x128]",
            "ldr r3, [fp, -0x30]",
            "ldr r3, [r3, 0xc]",
            "and r3, r3, 0x1f",
            "asr r3, r2, r3",
            "and r3, r3, 1",
            "cmp r3, 0",
            "beq 0x12398",
            "ldr r3, [fp, -0x30]",
            "ldr r4, [r3, 0x14]",
            "ldr r3, [fp, -0x30]",
            "ldr r0, [r3, 0xc]",
            "ldr r3, [fp, -0x30]",
            "ldr r1, [r3, 0x10]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0xc]",
            "mov r2, r3",
            "blx r4",
            "str r0, [fp, -0x1c]",
            "b 0x123a0",
            "mov r3, 0",
            "str r3, [fp, -0x1c]",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "bge 0x123cc",
            "ldr r3, [fp, -0x30]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -0x30]",
            "bl sym.free_socket",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [0x00012484]",
            "cmp r3, r2",
            "bne 0x12324",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x12450",
            "ldr r0, [0x0001247c]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11c4c",
            "ldr r0, [0x00012480]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11c4c",
            "ldr r0, [0x00012484]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11c4c",
            "ldr r0, [0x00012488]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11c4c",
            "b 0x12450",
            "mov r0, r0",
            "b 0x12450",
            "mov r0, r0",
            "mov r0, 0",
            "bl sym.sloop_cancel_signal",
            "mov r0, 0",
            "bl sym.sloop_cancel_timeout",
            "mov r0, 0",
            "bl sym.sloop_cancel_read_sock",
            "mov r0, 0",
            "bl sym.sloop_cancel_write_sock",
            "mov r0, r0",
            "sub sp, fp, 8",
            "pop {r4, fp, pc}"
        ]
    },
    "sym.__do_global_dtors_aux": {
        "function_address": "0x00010ba0",
        "instructions": [
            "ldr r3, obj.completed.8752",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "bxne lr",
            "push {r4, lr}",
            "mov r4, r3",
            "bl sym.deregister_tm_clones",
            "ldr r3, [0x00010be0]",
            "cmp r3, 0",
            "beq 0x10bd0",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "bl loc.imp.__deregister_frame_info",
            "mov r3, 1",
            "strb r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.deregister_tm_clones": {
        "function_address": "0x00010b38",
        "instructions": [
            "ldr r0, loc.__bss_start__",
            "ldr r3, [0x00010b60]",
            "rsb r3, r0, r3",
            "cmp r3, 6",
            "bxls lr",
            "ldr r3, [0x00010b64]",
            "cmp r3, 0",
            "bxeq lr",
            "bx r3"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00010a18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x720]!"
        ]
    },
    "sym.frame_dummy": {
        "function_address": "0x00010be8",
        "instructions": [
            "ldr r3, [0x00010c0c]",
            "cmp r3, 0",
            "beq 0x10c08",
            "push {r4, lr}",
            "ldr r1, obj.object.8757",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "bl loc.imp.__register_frame_info",
            "pop {r4, lr}",
            "b sym.register_tm_clones"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00010ad8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6a0]!"
        ]
    },
    "sym.dlist_add": {
        "function_address": "0x00011088",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3]",
            "mov r2, r3",
            "ldr r1, [fp, -0xc]",
            "ldr r0, [fp, -8]",
            "bl sym.__dlist_add",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.__dlist_add": {
        "function_address": "0x00010fb8",
        "instructions": [
            "str fp, [sp, -4]!",
            "add fp, sp, 0",
            "sub sp, sp, 0x14",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -8]",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "str r2, [r3]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0xc]",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [fp, -8]",
            "str r2, [r3]",
            "mov r0, r0",
            "sub sp, fp, 0",
            "pop {fp}",
            "bx lr"
        ]
    },
    "sym.dlist_add_tail": {
        "function_address": "0x000110c0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 4]",
            "ldr r2, [fp, -0xc]",
            "mov r1, r3",
            "ldr r0, [fp, -8]",
            "bl sym.__dlist_add",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.dlist_del": {
        "function_address": "0x000110f8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "mov r1, r3",
            "mov r0, r2",
            "bl sym.__dlist_del",
            "ldr r3, [fp, -8]",
            "mov r2, 0",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "ldr r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "str r2, [r3]",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.__dlist_del": {
        "function_address": "0x00011010",
        "instructions": [
            "str fp, [sp, -4]!",
            "add fp, sp, 0",
            "sub sp, sp, 0xc",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [fp, -8]",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0xc]",
            "str r2, [r3]",
            "mov r0, r0",
            "sub sp, fp, 0",
            "pop {fp}",
            "bx lr"
        ]
    },
    "sym.get_uptime": {
        "function_address": "0x0001114c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x40",
            "sub r3, fp, 0x44",
            "mov r0, r3",
            "bl sym.imp.sysinfo",
            "ldr r3, [fp, -0x44]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.sysinfo": {
        "function_address": "0x00010988",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x780]!"
        ]
    },
    "sym.init_list_pools": {
        "function_address": "0x00011174",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "mov r2, 0xc00",
            "mov r1, 0",
            "movw r0, 0x41c0",
            "movt r0, 2",
            "bl sym.imp.memset",
            "mov r2, 0xe00",
            "mov r1, 0",
            "movw r0, 0x4dc0",
            "movt r0, 2",
            "bl sym.imp.memset",
            "mov r2, 0x180",
            "mov r1, 0",
            "movw r0, 0x5bc0",
            "movt r0, 2",
            "bl sym.imp.memset",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x11204",
            "ldr r3, [fp, -8]",
            "mov r2, r3",
            "lsl r3, r2, 3",
            "mov r2, r3",
            "lsl r3, r2, 2",
            "rsb r3, r2, r3",
            "movw r2, 0x41c0",
            "movt r2, 2",
            "add r3, r3, r2",
            "ldr r1, [0x000112e8]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0x7f",
            "ble 0x111c8",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x11228",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0x7f",
            "ble 0x1121c",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x1127c",
            "ldr r3, [fp, -8]",
            "mov r2, r3",
            "lsl r3, r2, 2",
            "mov r2, r3",
            "lsl r3, r2, 3",
            "rsb r3, r2, r3",
            "movw r2, 0x4dc0",
            "movt r2, 2",
            "add r3, r3, r2",
            "ldr r1, [0x000112ec]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0x7f",
            "ble 0x11240",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x112d0",
            "ldr r3, [fp, -8]",
            "mov r2, r3",
            "lsl r3, r2, 3",
            "mov r2, r3",
            "lsl r3, r2, 2",
            "rsb r3, r2, r3",
            "movw r2, 0x5bc0",
            "movt r2, 2",
            "add r3, r3, r2",
            "ldr r1, [0x000112f0]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0xf",
            "ble 0x11294",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00010a6c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6e8]!"
        ]
    },
    "sym.get_socket": {
        "function_address": "0x000112f4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "ldr r0, [0x00011358]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x1131c",
            "mov r3, 0",
            "b 0x1134c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x10]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -8]",
            "bl sym.dlist_del",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "movw r2, 0x101",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -0xc]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.dlist_empty": {
        "function_address": "0x0001104c",
        "instructions": [
            "str fp, [sp, -4]!",
            "add fp, sp, 0",
            "sub sp, sp, 0xc",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "moveq r3, 1",
            "movne r3, 0",
            "uxtb r3, r3",
            "mov r0, r3",
            "sub sp, fp, 0",
            "pop {fp}",
            "bx lr"
        ]
    },
    "sym.get_timeout": {
        "function_address": "0x0001135c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "ldr r0, [0x000113c0]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11384",
            "mov r3, 0",
            "b 0x113b4",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x18]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -8]",
            "bl sym.dlist_del",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "movw r2, 0x102",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -0xc]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.get_signal": {
        "function_address": "0x000113c4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "ldr r0, [0x00011428]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x113ec",
            "mov r3, 0",
            "b 0x1141c",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x20]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -8]",
            "bl sym.dlist_del",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "movw r2, 0x103",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -0xc]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.free_socket": {
        "function_address": "0x0001142c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 8]",
            "bic r2, r3, 0x100",
            "ldr r3, [fp, -8]",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -8]",
            "ldr r1, [0x0001146c]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.free_timeout": {
        "function_address": "0x00011470",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 8]",
            "bic r2, r3, 0x100",
            "ldr r3, [fp, -8]",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -8]",
            "ldr r1, [0x000114b0]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.free_signal": {
        "function_address": "0x000114b4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 8]",
            "bic r2, r3, 0x100",
            "ldr r3, [fp, -8]",
            "str r2, [r3, 8]",
            "ldr r3, [fp, -8]",
            "ldr r1, [0x000114f4]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.register_socket": {
        "function_address": "0x000114f8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "bl sym.get_socket",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bne 0x11530",
            "mov r3, 0",
            "b 0x11568",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "str r2, [r3, 0xc]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x18]",
            "str r2, [r3, 0x10]",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x14]",
            "str r2, [r3, 0x14]",
            "ldr r3, [fp, -8]",
            "ldr r1, [fp, -0x1c]",
            "mov r0, r3",
            "bl sym.dlist_add",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.cancel_socket": {
        "function_address": "0x00011574",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x115d0",
            "ldr r3, [fp, -0x10]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -0x10]",
            "bl sym.free_socket",
            "b 0x115e4",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -8]",
            "bl sym.dlist_del",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.free_socket",
            "ldr r0, [fp, -0x14]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x115ac",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_signals_handler": {
        "function_address": "0x000115f0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 8]",
            "sub r1, fp, 8",
            "mov r2, 4",
            "mov r0, r3",
            "bl sym.imp.write",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00010a00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x730]!"
        ]
    },
    "sym.sloop_dump_socket": {
        "function_address": "0x000124b4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "b 0x1251c",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x10]",
            "mov r0, r3",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x14]",
            "str r3, [sp]",
            "mov r3, r0",
            "movw r0, 0x3dc8",
            "movt r0, 1",
            "bl sym.imp.printf",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0x10]",
            "cmp r2, r3",
            "bne 0x124d4",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x00010928",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7c0]!"
        ]
    },
    "sym.__open_socket": {
        "function_address": "0x00013044",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x80",
            "str r0, [fp, -0x80]",
            "mov r2, 0",
            "mov r1, 1",
            "mov r0, 1",
            "bl sym.imp.socket",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bge 0x1307c",
            "mvn r3, 0",
            "b 0x130fc",
            "mov r2, 1",
            "mov r1, 2",
            "ldr r0, [fp, -8]",
            "bl sym.imp.fcntl",
            "mov r3, 1",
            "strh r3, [fp, -0x78]",
            "ldr r3, [fp, -0x80]",
            "cmp r3, 0",
            "bne 0x130ac",
            "movw r3, 0x3f04",
            "movt r3, 1",
            "str r3, [fp, -0x80]",
            "sub r3, fp, 0x78",
            "add r0, r3, 2",
            "ldr r3, [fp, -0x80]",
            "movw r2, 0x3f18",
            "movt r2, 1",
            "mov r1, 0x6c",
            "bl sym.imp.snprintf",
            "sub r3, fp, 0x78",
            "mov r2, 0x6e",
            "mov r1, r3",
            "ldr r0, [fp, -8]",
            "bl sym.imp.connect",
            "mov r3, r0",
            "cmp r3, 0",
            "bge 0x130f8",
            "ldr r0, [fp, -8]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "b 0x130fc",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x000109ac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "sym.imp.fcntl": {
        "function_address": "0x00010acc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6a8]!"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x00010958",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7a0]!"
        ]
    },
    "sym.imp.connect": {
        "function_address": "0x00010940",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7b0]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00010ae4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x698]!"
        ]
    },
    "sym.send_xmldb_cmd": {
        "function_address": "0x00013108",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x18]",
            "str r2, [fp, -0x20]",
            "str r3, [fp, -0x24]",
            "strh r1, [fp, -0x1a]",
            "ldrh r3, [fp, -0x1a]",
            "strh r3, [fp, -0x14]",
            "ldr r3, [fp, -0x20]",
            "str r3, [fp, -0x10]",
            "ldrh r3, [fp, 4]",
            "strh r3, [fp, -0x12]",
            "sub r1, fp, 0x14",
            "mov r3, 0x4000",
            "mov r2, 0xc",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.send",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bgt 0x13168",
            "mvn r3, 0",
            "b 0x13198",
            "ldrh r2, [fp, 4]",
            "mov r3, 0x4000",
            "ldr r1, [fp, -0x24]",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.send",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bgt 0x13194",
            "mvn r3, 0",
            "b 0x13198",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.send": {
        "function_address": "0x000109d0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x750]!"
        ]
    },
    "sym.redirect_output": {
        "function_address": "0x000131a4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x4a0",
            "str r0, [fp, -0x498]",
            "str r1, [fp, -0x49c]",
            "sub r3, fp, 0x90",
            "str r3, [fp, -0xc]",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x131e8",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [fp, -8]",
            "mov r1, 0",
            "str r1, [r3, r2, lsl 2]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0x1f",
            "bls 0x131cc",
            "ldr r3, [fp, -0x498]",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 4",
            "add r3, r1, r3",
            "ldr r1, [r3, -0x8c]",
            "ldr r3, [fp, -0x498]",
            "and r3, r3, 0x1f",
            "mov r0, 1",
            "lsl r3, r0, r3",
            "orr r1, r1, r3",
            "lsl r3, r2, 2",
            "sub r2, fp, 4",
            "add r3, r2, r3",
            "str r1, [r3, -0x8c]",
            "ldr r3, [fp, -0x498]",
            "add r0, r3, 1",
            "sub r1, fp, 0x90",
            "mov r3, 0",
            "str r3, [sp]",
            "mov r3, 0",
            "mov r2, 0",
            "bl sym.imp.select",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x13328",
            "ldr r3, [fp, -0x498]",
            "lsr r3, r3, 5",
            "lsl r3, r3, 2",
            "sub r2, fp, 4",
            "add r3, r2, r3",
            "ldr r2, [r3, -0x8c]",
            "ldr r3, [fp, -0x498]",
            "and r3, r3, 0x1f",
            "asr r3, r2, r3",
            "and r3, r3, 1",
            "cmp r3, 0",
            "beq 0x131b8",
            "sub r3, fp, 0x480",
            "sub r3, r3, 4",
            "sub r3, r3, 0xc",
            "mov r2, 0x400",
            "mov r1, r3",
            "ldr r0, [fp, -0x498]",
            "bl sym.imp.read",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "ble 0x13330",
            "ldr r3, [fp, -0x10]",
            "sub r3, r3, 1",
            "sub r2, fp, 4",
            "add r3, r2, r3",
            "ldrb r3, [r3, -0x48c]",
            "cmp r3, 0",
            "bne 0x13308",
            "sub r3, fp, 0x480",
            "sub r3, r3, 4",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "sub r0, fp, 0x480",
            "sub r0, r0, 4",
            "sub r0, r0, 0xc",
            "ldr r3, [fp, -0x49c]",
            "mov r1, 1",
            "bl sym.imp.fwrite",
            "b 0x13334",
            "ldr r2, [fp, -0x10]",
            "sub r0, fp, 0x480",
            "sub r0, r0, 4",
            "sub r0, r0, 0xc",
            "ldr r3, [fp, -0x49c]",
            "mov r1, 1",
            "bl sym.imp.fwrite",
            "b 0x131b8",
            "mov r0, r0",
            "b 0x131b8",
            "mov r0, r0",
            "ldr r0, [fp, -0x49c]",
            "bl sym.imp.fflush",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.select": {
        "function_address": "0x000109b8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x760]!"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00010a30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x710]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00010ac0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6b0]!"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00010a9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6c8]!"
        ]
    },
    "sym.imp.fflush": {
        "function_address": "0x000109c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x758]!"
        ]
    },
    "sym.redirect_to_buffer": {
        "function_address": "0x00013348",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0xa8",
            "str r0, [fp, -0x98]",
            "str r1, [fp, -0x9c]",
            "str r2, [fp, -0xa0]",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "sub r3, fp, 0x94",
            "str r3, [fp, -0x10]",
            "mov r3, 0",
            "str r3, [fp, -0xc]",
            "b 0x13398",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 0",
            "str r1, [r3, r2, lsl 2]",
            "ldr r3, [fp, -0xc]",
            "add r3, r3, 1",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x1f",
            "bls 0x1337c",
            "ldr r3, [fp, -0x98]",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 4",
            "add r3, r1, r3",
            "ldr r1, [r3, -0x90]",
            "ldr r3, [fp, -0x98]",
            "and r3, r3, 0x1f",
            "mov r0, 1",
            "lsl r3, r0, r3",
            "orr r1, r1, r3",
            "lsl r3, r2, 2",
            "sub r2, fp, 4",
            "add r3, r2, r3",
            "str r1, [r3, -0x90]",
            "ldr r3, [fp, -0x98]",
            "add r0, r3, 1",
            "sub r1, fp, 0x94",
            "mov r3, 0",
            "str r3, [sp]",
            "mov r3, 0",
            "mov r2, 0",
            "bl sym.imp.select",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x134b0",
            "ldr r3, [fp, -0x98]",
            "lsr r3, r3, 5",
            "lsl r3, r3, 2",
            "sub r2, fp, 4",
            "add r3, r2, r3",
            "ldr r2, [r3, -0x90]",
            "ldr r3, [fp, -0x98]",
            "and r3, r3, 0x1f",
            "asr r3, r2, r3",
            "and r3, r3, 1",
            "cmp r3, 0",
            "beq 0x13368",
            "ldr r2, [fp, -0x9c]",
            "ldr r3, [fp, -8]",
            "add r1, r2, r3",
            "ldr r2, [fp, -0xa0]",
            "ldr r3, [fp, -8]",
            "rsb r3, r3, r2",
            "mov r2, r3",
            "ldr r0, [fp, -0x98]",
            "bl sym.imp.read",
            "str r0, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "ble 0x134b8",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [fp, -8]",
            "add r3, r2, r3",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "sub r3, r3, 1",
            "ldr r2, [fp, -0x9c]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x134c0",
            "ldr r2, [fp, -0xa0]",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "bhs 0x134c8",
            "b 0x13368",
            "mov r0, r0",
            "b 0x13368",
            "mov r0, r0",
            "b 0x134cc",
            "mov r0, r0",
            "b 0x134cc",
            "mov r0, r0",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym._cmd_w_out": {
        "function_address": "0x000134dc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "strh r1, [fp, -0x12]",
            "mvn r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0x10]",
            "bl sym.__open_socket",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "blt 0x13580",
            "ldr r3, [fp, 4]",
            "uxth r3, r3",
            "ldrh r1, [fp, -0x12]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x18]",
            "ldr r0, [fp, -0xc]",
            "bl sym.send_xmldb_cmd",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x13578",
            "ldr r3, [fp, 8]",
            "cmp r3, 0",
            "beq 0x13558",
            "ldr r3, [fp, 8]",
            "b 0x13564",
            "movw r3, 0x4198",
            "movt r3, 2",
            "ldr r3, [r3]",
            "mov r1, r3",
            "ldr r0, [fp, -0xc]",
            "bl sym.redirect_output",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.close",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym._cmd_wo_out": {
        "function_address": "0x00013590",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x30",
            "str r0, [fp, -0x20]",
            "str r2, [fp, -0x28]",
            "str r3, [fp, -0x2c]",
            "strh r1, [fp, -0x22]",
            "mvn r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0x20]",
            "bl sym.__open_socket",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "blt 0x13620",
            "ldr r3, [fp, 4]",
            "uxth r3, r3",
            "ldrh r1, [fp, -0x22]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x2c]",
            "ldr r2, [fp, -0x28]",
            "ldr r0, [fp, -0xc]",
            "bl sym.send_xmldb_cmd",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x13618",
            "sub r3, fp, 0x1c",
            "mov r2, 0xc",
            "mov r1, r3",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.read",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x14]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.close",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.signal": {
        "function_address": "0x00010a24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x718]!"
        ]
    },
    "sym.usock_close": {
        "function_address": "0x000129f0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "ble 0x12a28",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "mov r0, r3",
            "bl sym.imp.close",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0x12a44",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0xa",
            "b 0x12a4c",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x78",
            "mov r0, r3",
            "bl sym.imp.unlink",
            "ldr r0, [fp, -8]",
            "bl sym.imp.free",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x00010a3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x708]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00010af0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x690]!"
        ]
    },
    "sym.wpsmonitor_handler": {
        "function_address": "0x00010c68",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x118",
            "str r0, [fp, -0x110]",
            "str r1, [fp, -0x114]",
            "ldr r3, [fp, -0x110]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [r3]",
            "sub r1, fp, 0x88",
            "mov r3, 0x80",
            "str r3, [sp]",
            "mov r3, r1",
            "mov r1, 0",
            "mov r0, 0",
            "bl sym.xmldbc_get_wb",
            "ldr r3, [fp, -8]",
            "ldr r2, [r3, 4]",
            "sub r1, fp, 0x108",
            "mov r3, 0x80",
            "str r3, [sp]",
            "mov r3, r1",
            "mov r1, 0",
            "mov r0, 0",
            "bl sym.xmldbc_get_wb",
            "sub r3, fp, 0x88",
            "movw r1, 0x3d10",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x10d2c",
            "sub r3, fp, 0x88",
            "movw r1, 0x3d20",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x10d2c",
            "sub r3, fp, 0x88",
            "movw r1, 0x3d2c",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x10d54",
            "sub r3, fp, 0x88",
            "mov r1, r3",
            "movw r0, 0x3d38",
            "movt r0, 1",
            "bl sym.imp.printf",
            "movw r0, 0x3d58",
            "movt r0, 1",
            "bl sym.imp.system",
            "bl sym.sloop_terminate",
            "b 0x10e18",
            "sub r3, fp, 0x108",
            "movw r1, 0x3d10",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x10db4",
            "sub r3, fp, 0x108",
            "movw r1, 0x3d20",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x10db4",
            "sub r3, fp, 0x108",
            "movw r1, 0x3d2c",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x10ddc",
            "sub r3, fp, 0x108",
            "mov r1, r3",
            "movw r0, 0x3d6c",
            "movt r0, 1",
            "bl sym.imp.printf",
            "movw r0, 0x3d88",
            "movt r0, 1",
            "bl sym.imp.system",
            "bl sym.sloop_terminate",
            "b 0x10e18",
            "mov r0, 0",
            "bl sym.imp.time",
            "mov r2, r0",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 0xc]",
            "cmp r2, r3",
            "blt 0x10e00",
            "bl sym.sloop_terminate",
            "b 0x10e18",
            "ldr r3, [fp, -0x110]",
            "movw r2, 0xc68",
            "movt r2, 1",
            "mov r1, 0",
            "mov r0, 1",
            "bl sym.sloop_register_timeout",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_get_wb": {
        "function_address": "0x00013630",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "mvn r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0x10]",
            "bl sym.__open_socket",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "blt 0x136c8",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "uxth r3, r3",
            "add r3, r3, 1",
            "uxth r3, r3",
            "str r3, [sp]",
            "ldr r3, [fp, -0x18]",
            "ldr r2, [fp, -0x14]",
            "mov r1, 1",
            "ldr r0, [fp, -0xc]",
            "bl sym.send_xmldb_cmd",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x136c0",
            "ldr r2, [fp, 4]",
            "ldr r1, [fp, -0x1c]",
            "ldr r0, [fp, -0xc]",
            "bl sym.redirect_to_buffer",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.close",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00010a84",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6d8]!"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x00010970",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x790]!"
        ]
    },
    "sym.sloop_terminate": {
        "function_address": "0x0001248c",
        "instructions": [
            "str fp, [sp, -4]!",
            "add fp, sp, 0",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "mov r2, 1",
            "str r2, [r3]",
            "mov r0, r0",
            "sub sp, fp, 0",
            "pop {fp}",
            "bx lr"
        ]
    },
    "sym.sloop_dump_signals": {
        "function_address": "0x00012670",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "movw r0, 0x3dfc",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r0, 0x3eac",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x38]",
            "str r3, [fp, -8]",
            "b 0x126f0",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x10]",
            "mov r0, r3",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x14]",
            "str r3, [sp]",
            "mov r3, r0",
            "movw r0, 0x3ebc",
            "movt r0, 1",
            "bl sym.imp.printf",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [0x00012718]",
            "cmp r3, r2",
            "bne 0x126a8",
            "movw r0, 0x3e30",
            "movt r0, 1",
            "bl sym.imp.puts",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_del": {
        "function_address": "0x00013a6c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 3",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_cancel_read_sock": {
        "function_address": "0x00011844",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r1, [0x0001186c]",
            "ldr r0, [fp, -8]",
            "bl sym.cancel_socket",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_dump_writers": {
        "function_address": "0x00012578",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "movw r0, 0x3dfc",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r0, 0x3e54",
            "movt r0, 1",
            "bl sym.imp.puts",
            "ldr r0, [0x000125b4]",
            "bl sym.sloop_dump_socket",
            "movw r0, 0x3e30",
            "movt r0, 1",
            "bl sym.imp.puts",
            "mov r0, r0",
            "pop {fp, pc}"
        ]
    },
    "sym.usock_recv": {
        "function_address": "0x00012b14",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0x12b84",
            "mov r3, 0x6e",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x76",
            "sub r2, fp, 0xc",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x18]",
            "ldr r1, [fp, -0x14]",
            "bl sym.imp.recvfrom",
            "mov r3, r0",
            "b 0x12ba0",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x18]",
            "ldr r1, [fp, -0x14]",
            "bl sym.imp.recv",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.recvfrom": {
        "function_address": "0x000109a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x770]!"
        ]
    },
    "sym.imp.recv": {
        "function_address": "0x00010934",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7b8]!"
        ]
    },
    "sym.usock_recv_timed": {
        "function_address": "0x00012bac",
        "instructions": [
            "push {r4, fp, lr}",
            "add fp, sp, 8",
            "sub sp, sp, 0xb4",
            "str r0, [fp, -0xa8]",
            "str r1, [fp, -0xac]",
            "str r2, [fp, -0xb0]",
            "str r3, [fp, -0xb4]",
            "ldr r3, [fp, 4]",
            "str r3, [fp, -0x20]",
            "mov r3, 0",
            "str r3, [fp, -0x1c]",
            "sub r3, fp, 0xa0",
            "str r3, [fp, -0x14]",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "b 0x12c08",
            "ldr r3, [fp, -0x14]",
            "ldr r2, [fp, -0x10]",
            "mov r1, 0",
            "str r1, [r3, r2, lsl 2]",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 1",
            "str r3, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0x1f",
            "bls 0x12bec",
            "ldr r0, [fp, -0xa8]",
            "bl sym.usock_fd",
            "mov r3, r0",
            "and r3, r3, 0x1f",
            "mov r2, 1",
            "lsl r4, r2, r3",
            "ldr r0, [fp, -0xa8]",
            "bl sym.usock_fd",
            "mov r3, r0",
            "lsr r2, r3, 5",
            "lsl r3, r2, 2",
            "sub r1, fp, 0xc",
            "add r3, r1, r3",
            "ldr r3, [r3, -0x94]",
            "orr r1, r3, r4",
            "lsl r3, r2, 2",
            "sub r2, fp, 0xc",
            "add r3, r2, r3",
            "str r1, [r3, -0x94]",
            "ldr r0, [fp, -0xa8]",
            "bl sym.usock_fd",
            "mov r3, r0",
            "add r0, r3, 1",
            "sub r1, fp, 0xa0",
            "sub r3, fp, 0x20",
            "str r3, [sp]",
            "mov r3, 0",
            "mov r2, 0",
            "bl sym.imp.select",
            "str r0, [fp, -0x18]",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "ble 0x12cb4",
            "ldr r3, [fp, -0xb4]",
            "ldr r2, [fp, -0xb0]",
            "ldr r1, [fp, -0xac]",
            "ldr r0, [fp, -0xa8]",
            "bl sym.usock_recv",
            "mov r3, r0",
            "b 0x12cb8",
            "ldr r3, [fp, -0x18]",
            "mov r0, r3",
            "sub sp, fp, 8",
            "pop {r4, fp, pc}"
        ]
    },
    "sym.usock_fd": {
        "function_address": "0x0001273c",
        "instructions": [
            "str fp, [sp, -4]!",
            "add fp, sp, 0",
            "sub sp, sp, 0x14",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "mov r0, r3",
            "sub sp, fp, 0",
            "pop {fp}",
            "bx lr"
        ]
    },
    "sym.usock_open": {
        "function_address": "0x000127cc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "beq 0x12964",
            "mov r0, 0xe4",
            "bl sym.imp.malloc",
            "mov r3, r0",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "beq 0x1296c",
            "mov r2, 0xe4",
            "mov r1, 0",
            "ldr r0, [fp, -8]",
            "bl sym.imp.memset",
            "mov r2, 0",
            "mov r1, 2",
            "mov r0, 1",
            "bl sym.imp.socket",
            "mov r2, r0",
            "ldr r3, [fp, -8]",
            "str r2, [r3]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "blt 0x12974",
            "ldr r3, [fp, -8]",
            "mov r2, 1",
            "strh r2, [r3, 8]",
            "ldr r3, [fp, -8]",
            "add r0, r3, 0xa",
            "ldr r3, [fp, -0x14]",
            "movw r2, 0x3ef0",
            "movt r2, 1",
            "mov r1, 0x6c",
            "bl sym.imp.snprintf",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x128c8",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0xa",
            "mov r0, r3",
            "bl sym.imp.unlink",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 8",
            "mov r2, 0x6e",
            "mov r1, r3",
            "bl sym.imp.bind",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x1297c",
            "ldr r3, [fp, -8]",
            "mov r2, 1",
            "str r2, [r3, 4]",
            "b 0x1295c",
            "ldr r3, [fp, -8]",
            "mov r2, 1",
            "strh r2, [r3, 0x76]",
            "ldr r3, [fp, -8]",
            "add r0, r3, 0x78",
            "ldr r3, [fp, -0x14]",
            "movw r2, 0x3ef4",
            "movt r2, 1",
            "mov r1, 0x6c",
            "bl sym.imp.snprintf",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x78",
            "mov r0, r3",
            "bl sym.imp.unlink",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x76",
            "mov r2, 0x6e",
            "mov r1, r3",
            "bl sym.imp.bind",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x12984",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 8",
            "mov r2, 0x6e",
            "mov r1, r3",
            "bl sym.imp.connect",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x1298c",
            "ldr r3, [fp, -8]",
            "mov r2, 0",
            "str r2, [r3, 4]",
            "ldr r3, [fp, -8]",
            "b 0x129e4",
            "mov r0, r0",
            "b 0x12990",
            "mov r0, r0",
            "b 0x12990",
            "mov r0, r0",
            "b 0x12990",
            "mov r0, r0",
            "b 0x12990",
            "mov r0, r0",
            "b 0x12990",
            "mov r0, r0",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "ble 0x129d8",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "mov r0, r3",
            "bl sym.imp.close",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x129c8",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0xa",
            "b 0x129d0",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x78",
            "mov r0, r3",
            "bl sym.imp.unlink",
            "ldr r0, [fp, -8]",
            "bl sym.imp.free",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x0001097c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x788]!"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x00010a0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x728]!"
        ]
    },
    "sym.sig_term": {
        "function_address": "0x00010c3c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "bl sym.sloop_terminate",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_write": {
        "function_address": "0x00013bac",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "str r3, [fp, -0x14]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "ldr r2, [fp, -0x14]",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 0xf",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_w_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.exit": {
        "function_address": "0x00010ab4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6b8]!"
        ]
    },
    "sym.xmldbc_reload": {
        "function_address": "0x00013abc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 4",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_cancel_timeout": {
        "function_address": "0x00011bac",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x11c10",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -8]",
            "bl sym.free_timeout",
            "b 0x11c24",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x40]",
            "str r3, [fp, -0xc]",
            "ldr r0, [fp, -0xc]",
            "bl sym.dlist_del",
            "ldr r3, [fp, -0xc]",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -8]",
            "bl sym.free_timeout",
            "ldr r0, [0x00011c30]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11be8",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.pipe": {
        "function_address": "0x000109f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x738]!"
        ]
    },
    "sym.sloop_dump": {
        "function_address": "0x0001271c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "bl sym.sloop_dump_readers",
            "bl sym.sloop_dump_writers",
            "bl sym.sloop_dump_timeout",
            "bl sym.sloop_dump_signals",
            "mov r0, r0",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_dump_readers": {
        "function_address": "0x00012538",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "movw r0, 0x3dfc",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r0, 0x3e20",
            "movt r0, 1",
            "bl sym.imp.puts",
            "ldr r0, [0x00012574]",
            "bl sym.sloop_dump_socket",
            "movw r0, 0x3e30",
            "movt r0, 1",
            "bl sym.imp.puts",
            "mov r0, r0",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_dump_timeout": {
        "function_address": "0x000125b8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "movw r0, 0x3dfc",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r0, 0x3e64",
            "movt r0, 1",
            "bl sym.imp.puts",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x40]",
            "str r3, [fp, -8]",
            "b 0x12644",
            "ldr r3, [fp, -8]",
            "str r3, [fp, -0xc]",
            "ldr r1, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr r3, [fp, -0xc]",
            "ldr r0, [r3, 0x10]",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x14]",
            "mov ip, r3",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3, 0x18]",
            "str r3, [sp, 4]",
            "str ip, [sp]",
            "mov r3, r0",
            "movw r0, 0x3e74",
            "movt r0, 1",
            "bl sym.imp.printf",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r2, [0x0001266c]",
            "cmp r3, r2",
            "bne 0x125f0",
            "movw r0, 0x3e30",
            "movt r0, 1",
            "bl sym.imp.puts",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_ephp_wb": {
        "function_address": "0x00013734",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "mvn r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0x10]",
            "bl sym.__open_socket",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "blt 0x137cc",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "uxth r3, r3",
            "add r3, r3, 1",
            "uxth r3, r3",
            "str r3, [sp]",
            "ldr r3, [fp, -0x18]",
            "ldr r2, [fp, -0x14]",
            "mov r1, 0xa",
            "ldr r0, [fp, -0xc]",
            "bl sym.send_xmldb_cmd",
            "mov r3, r0",
            "cmp r3, 0",
            "blt 0x137c4",
            "ldr r2, [fp, 4]",
            "ldr r1, [fp, -0x1c]",
            "ldr r0, [fp, -0xc]",
            "bl sym.redirect_to_buffer",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.close",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_ephp": {
        "function_address": "0x000137dc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "str r3, [fp, -0x14]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "ldr r2, [fp, -0x14]",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 0xa",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_w_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_patch": {
        "function_address": "0x00013b0c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 7",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_dump": {
        "function_address": "0x00013c08",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 5",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_cancel_write_sock": {
        "function_address": "0x00011870",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "ldr r1, [0x00011898]",
            "ldr r0, [fp, -8]",
            "bl sym.cancel_socket",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_killtimer": {
        "function_address": "0x00013a1c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 0xe",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_getext": {
        "function_address": "0x00013940",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x218",
            "str r0, [fp, -0x208]",
            "str r1, [fp, -0x20c]",
            "str r2, [fp, -0x210]",
            "str r3, [fp, -0x214]",
            "sub r0, fp, 0x204",
            "ldr r3, [fp, -0x214]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x210]",
            "movw r2, 0x3f1c",
            "movt r2, 1",
            "movw r1, 0x1ff",
            "bl sym.imp.snprintf",
            "mov r3, 0",
            "strb r3, [fp, -5]",
            "sub r3, fp, 0x204",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "sub r1, fp, 0x204",
            "ldr r2, [fp, 4]",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "mov r3, r1",
            "ldr r2, [fp, -0x20c]",
            "mov r1, 0xc",
            "ldr r0, [fp, -0x208]",
            "bl sym._cmd_w_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00010aa8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6c0]!"
        ]
    },
    "sym.sloop_cancel_signal": {
        "function_address": "0x00011928",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0x119b4",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 0xc]",
            "mov r1, 0",
            "mov r0, r3",
            "bl sym.imp.signal",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "bl sym.dlist_del",
            "ldr r0, [fp, -8]",
            "bl sym.free_signal",
            "b 0x119c8",
            "movw r3, 0x5d40",
            "movt r3, 2",
            "ldr r3, [r3, 0x38]",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 0xc]",
            "mov r1, 0",
            "mov r0, r3",
            "bl sym.imp.signal",
            "ldr r0, [fp, -0xc]",
            "bl sym.dlist_del",
            "ldr r0, [fp, -8]",
            "bl sym.free_signal",
            "ldr r0, [0x000119d4]",
            "bl sym.dlist_empty",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x11978",
            "mov r0, r0",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_get": {
        "function_address": "0x000136d8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "str r3, [fp, -0x14]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "ldr r2, [fp, -0x14]",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 1",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_w_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_uptime": {
        "function_address": "0x00011628",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "bl sym.get_uptime",
            "mov r3, r0",
            "mov r0, r3",
            "pop {fp, pc}"
        ]
    },
    "sym.lxmldbc_run_shell": {
        "function_address": "0x00012cc4",
        "instructions": [
            "push {r2, r3}",
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x420",
            "str r0, [fp, -0x420]",
            "str r1, [fp, -0x424]",
            "add r3, fp, 8",
            "str r3, [fp, -0x418]",
            "sub r0, fp, 0x410",
            "sub r0, r0, 4",
            "ldr r3, [fp, -0x418]",
            "ldr r2, [fp, 4]",
            "mov r1, 0x400",
            "bl sym.imp.vsnprintf",
            "sub r3, fp, 0x410",
            "sub r3, r3, 4",
            "movw r1, 0x3f00",
            "movt r1, 1",
            "mov r0, r3",
            "bl sym.imp.popen",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "beq 0x12e50",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x12dcc",
            "ldr r3, [fp, -0xc]",
            "str r3, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x34]",
            "cmp r3, 0",
            "beq 0x12d8c",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [r3, 0x10]",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x18]",
            "cmp r2, r3",
            "bhs 0x12d7c",
            "ldr r3, [fp, -0x10]",
            "ldr r3, [r3, 0x10]",
            "add r1, r3, 1",
            "ldr r2, [fp, -0x10]",
            "str r1, [r2, 0x10]",
            "ldrb r3, [r3]",
            "b 0x12d98",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.__fgetc_unlocked",
            "mov r3, r0",
            "b 0x12d98",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.fgetc",
            "mov r3, r0",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "cmn r3, 1",
            "beq 0x12de4",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x420]",
            "add r3, r2, r3",
            "ldr r2, [fp, -0x14]",
            "uxtb r2, r2",
            "strb r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x424]",
            "sub r2, r3, 1",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "bgt 0x12d30",
            "b 0x12de8",
            "mov r0, r0",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x420]",
            "add r3, r2, r3",
            "mov r2, 0",
            "strb r2, [r3]",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.pclose",
            "ldr r0, [fp, -0x420]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "sub r3, r3, 1",
            "ldr r2, [fp, -0x420]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0xa",
            "bne 0x12e48",
            "ldr r3, [fp, -8]",
            "sub r3, r3, 1",
            "ldr r2, [fp, -0x420]",
            "add r3, r2, r3",
            "mov r2, 0",
            "strb r2, [r3]",
            "mov r3, 0",
            "b 0x12e60",
            "ldr r3, [fp, -0x420]",
            "mov r2, 0",
            "strb r2, [r3]",
            "mvn r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.imp.vsnprintf": {
        "function_address": "0x00010994",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x778]!"
        ]
    },
    "sym.imp.popen": {
        "function_address": "0x0001091c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7c8]!"
        ]
    },
    "sym.imp.__fgetc_unlocked": {
        "function_address": "0x000109dc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x748]!"
        ]
    },
    "sym.imp.fgetc": {
        "function_address": "0x00010a90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x6d0]!"
        ]
    },
    "sym.imp.pclose": {
        "function_address": "0x0001094c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x7a8]!"
        ]
    },
    "sym.usock_send": {
        "function_address": "0x00012a68",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "ldr r3, [fp, -0x10]",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0x12aec",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x78",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x12ab8",
            "mvn r3, 0",
            "b 0x12b08",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x76",
            "mov r2, 0x6e",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x18]",
            "ldr r1, [fp, -0x14]",
            "bl sym.imp.sendto",
            "mov r3, r0",
            "b 0x12b08",
            "ldr r3, [fp, -8]",
            "ldr r0, [r3]",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x18]",
            "ldr r1, [fp, -0x14]",
            "bl sym.imp.send",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.sendto": {
        "function_address": "0x00010a48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x13000",
            "ldr pc, [ip, 0x700]!"
        ]
    },
    "sym.sloop_register_read_sock": {
        "function_address": "0x000117c4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r3, [0x00011800]",
            "ldr r2, [fp, -0x10]",
            "ldr r1, [fp, -0xc]",
            "ldr r0, [fp, -8]",
            "bl sym.register_socket",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.sloop_register_write_sock": {
        "function_address": "0x00011804",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r3, [0x00011840]",
            "ldr r2, [fp, -0x10]",
            "ldr r1, [fp, -0xc]",
            "ldr r0, [fp, -8]",
            "bl sym.register_socket",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.lxmldbc_system": {
        "function_address": "0x00012e74",
        "instructions": [
            "push {r0, r1, r2, r3}",
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x400",
            "sub sp, sp, 8",
            "add r3, fp, 8",
            "str r3, [fp, -0x408]",
            "sub r0, fp, 0x400",
            "sub r0, r0, 4",
            "ldr r3, [fp, -0x408]",
            "ldr r2, [fp, 4]",
            "mov r1, 0x400",
            "bl sym.imp.vsnprintf",
            "sub r3, fp, 0x400",
            "sub r3, r3, 4",
            "mov r0, r3",
            "bl sym.imp.system",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, lr}",
            "add sp, sp, 0x10",
            "bx lr"
        ]
    },
    "sym.xmldbc_setext": {
        "function_address": "0x000138bc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x218",
            "str r0, [fp, -0x208]",
            "str r1, [fp, -0x20c]",
            "str r2, [fp, -0x210]",
            "str r3, [fp, -0x214]",
            "sub r0, fp, 0x204",
            "ldr r3, [fp, -0x214]",
            "str r3, [sp]",
            "ldr r3, [fp, -0x210]",
            "movw r2, 0x3f1c",
            "movt r2, 1",
            "movw r1, 0x1ff",
            "bl sym.imp.snprintf",
            "mov r3, 0",
            "strb r3, [fp, -5]",
            "sub r3, fp, 0x204",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "sub r2, fp, 0x204",
            "str r3, [sp]",
            "mov r3, r2",
            "ldr r2, [fp, -0x20c]",
            "mov r1, 0xb",
            "ldr r0, [fp, -0x208]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.lxmldbc_reatwhite": {
        "function_address": "0x00012f6c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x12f90",
            "mov r3, 0",
            "b 0x13038",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "sub r3, r3, 1",
            "str r3, [fp, -8]",
            "b 0x12fc8",
            "ldr r3, [fp, -8]",
            "sub r2, r3, 1",
            "str r2, [fp, -8]",
            "mov r2, r3",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, r2",
            "mov r2, 0",
            "strb r2, [r3]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "blt 0x13034",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "beq 0x12fa8",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 9",
            "beq 0x12fa8",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0xa",
            "beq 0x12fa8",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0xd",
            "beq 0x12fa8",
            "ldr r3, [fp, -0x10]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_timer": {
        "function_address": "0x000139cc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 0xd",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.xmldbc_read": {
        "function_address": "0x00013b5c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "add r3, r3, 1",
            "str r3, [sp]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0xc]",
            "mov r1, 6",
            "ldr r0, [fp, -8]",
            "bl sym._cmd_wo_out",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    }
}