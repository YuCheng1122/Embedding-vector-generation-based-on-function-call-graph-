{
    "sym.buildXMLUpdateDeviceInfo": {
        "function_address": "0x0000f1fa",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "cmp qword [rbp - 0x18], 0",
            "je 0xf218",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf222",
            "mov eax, 0xffffffff",
            "jmp 0xf2b9",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x10], 0",
            "mov rdx, qword [rbp - 0x20]",
            "lea rax, [rbp - 0x10]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.000020c0",
            "test eax, eax",
            "jne 0xf2b6",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rsi, qword [rax + 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rcx, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rdx, qword [rax + 8]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax]",
            "mov r9, rdi",
            "mov r8, rsi",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_sendinfo___n_t_body_type_deviceinfo___n_t_t_model__s__model__n_t_t_firmware_id__s__firmware_id__n_t_t_firmware_time__s__firmware_time__n_t_t_serial__s__serial__n_t_t_x_agent_id__s__x_agent_id__n_t__body__n__request__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov dword [rbp - 4], 0",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.000020c0": {
        "function_address": "0x000020c0",
        "instructions": [
            "jmp qword [reloc.getDevInfo]"
        ]
    },
    "fcn.00001fc0": {
        "function_address": "0x00001fc0",
        "instructions": [
            "jmp qword [reloc.String]"
        ]
    },
    "fcn.000022f0": {
        "function_address": "0x000022f0",
        "instructions": [
            "jmp qword [reloc.freeDevInfo]"
        ]
    },
    "sym.rcloud_IsRegistered": {
        "function_address": "0x0000cf84",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "mov esi, 0",
            "lea rdi, [0x00011170]",
            "call sym.imp.access",
            "test eax, eax",
            "je 0xcfa4",
            "mov eax, 0xffffffff",
            "jmp 0xcfa9",
            "mov eax, 0",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.access": {
        "function_address": "0x00002450",
        "instructions": [
            "jmp qword [reloc.access]"
        ]
    },
    "sym.fileRXML": {
        "function_address": "0x0000fc32",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 8], rdi",
            "mov qword [rbp - 0x10], rsi",
            "mov qword [rbp - 0x18], rdx",
            "mov qword [rbp - 0x20], rcx",
            "cmp qword [rbp - 8], 0",
            "je 0xfc66",
            "cmp qword [rbp - 0x10], 0",
            "je 0xfc66",
            "cmp qword [rbp - 0x18], 0",
            "je 0xfc66",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xfc6d",
            "mov eax, 0xffffffff",
            "jmp 0xfc8d",
            "mov rsi, qword [rbp - 0x20]",
            "mov rcx, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov r8, rsi",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.rXmlCore",
            "leave",
            "ret"
        ]
    },
    "sym.rXmlCore": {
        "function_address": "0x0000f847",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "push rbx",
            "sub rsp, 0x2198",
            "mov qword [rbp - 0x2178], rdi",
            "mov dword [rbp - 0x217c], esi",
            "mov qword [rbp - 0x2188], rdx",
            "mov qword [rbp - sym.imp.fputs], rcx",
            "mov qword [rbp - 0x2198], r8",
            "cmp dword [rbp - 0x217c], 0",
            "je 0xf8a2",
            "mov eax, dword [rbp - 0x217c]",
            "movsxd rcx, eax",
            "mov rax, qword [rbp - 0x2178]",
            "lea rdx, [0x00011f96]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.fmemopen",
            "jmp 0xf8b8",
            "mov rax, qword [rbp - 0x2178]",
            "lea rsi, [0x00011f96]",
            "mov rdi, rax",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf930",
            "lea rdx, [rbp - sym.imp.snprintf]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - sym.imp.snprintf]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.strerror_r",
            "lea rdx, [rbp - sym.imp.snprintf]",
            "mov rax, qword [rbp - 0x2178]",
            "mov rsi, rax",
            "lea rdi, str.Failed_open_stream__s:__s",
            "mov eax, 0",
            "call sym.String_1",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x2198]",
            "mov qword [rax], rdx",
            "mov eax, 0xffffffff",
            "jmp 0xfc28",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0",
            "mov edi, 0",
            "call sym.imp.XML_ParserCreate",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xf9c9",
            "lea rdx, [rbp - sym.imp.snprintf]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - sym.imp.snprintf]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.strerror_r",
            "lea rdx, [rbp - sym.imp.snprintf]",
            "mov rax, qword [rbp - 0x2178]",
            "mov rsi, rax",
            "lea rdi, str.Failed_allocate_memory_for_parser:__s",
            "mov eax, 0",
            "call sym.String_1",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x2198]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov eax, 0xffffffff",
            "jmp 0xfc28",
            "mov dword [rbp - 0x2c], 0",
            "lea rax, [rbp - fcn.00002070]",
            "mov edx, 0x28",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rax, qword [rbp - 0x2188]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov qword [rbp - sym.imp.XML_ParserCreate], rax",
            "lea rdx, [rbp - fcn.00002070]",
            "mov rax, qword [rbp - 0x28]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.XML_SetUserData",
            "mov rax, qword [rbp - 0x28]",
            "lea rdx, [sym.endElement]",
            "lea rsi, [sym.startElement]",
            "mov rdi, rax",
            "call sym.imp.XML_SetElementHandler",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [sym.handleData]",
            "mov rdi, rax",
            "call sym.imp.XML_SetCharacterDataHandler",
            "mov rdx, qword [rbp - 0x20]",
            "lea rax, [rbp - sym.imp.puts]",
            "mov rcx, rdx",
            "mov edx, sym.imp.unlink",
            "mov esi, 1",
            "mov rdi, rax",
            "call sym.imp.fread",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0x1fff",
            "setbe al",
            "movzx eax, al",
            "mov dword [rbp - 0x2c], eax",
            "mov rax, qword [rbp - 0x38]",
            "mov edi, eax",
            "mov edx, dword [rbp - 0x2c]",
            "lea rsi, [rbp - sym.imp.puts]",
            "mov rax, qword [rbp - 0x28]",
            "mov ecx, edx",
            "mov edx, edi",
            "mov rdi, rax",
            "call sym.imp.XML_Parse",
            "test eax, eax",
            "jne 0xfb3f",
            "lea rdx, [rbp - sym.imp.snprintf]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.XML_GetCurrentLineNumber",
            "mov rbx, rax",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.XML_GetErrorCode",
            "mov edi, eax",
            "call sym.imp.XML_ErrorString",
            "mov rdx, rax",
            "lea rax, [rbp - sym.imp.snprintf]",
            "mov r8, rbx",
            "mov rcx, rdx",
            "lea rdx, str._s_at_line__llu_n",
            "mov esi, 0x100",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "lea rax, [rbp - sym.imp.snprintf]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x2198]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.XML_ParserFree",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov eax, 0xffffffff",
            "jmp 0xfc28",
            "cmp dword [rbp - 0x2c], 0",
            "je 0xfa42",
            "mov dword [rbp - 0x14], 0",
            "mov eax, dword [rbp - 0x204c]",
            "test eax, eax",
            "je 0xfb7c",
            "lea rdi, str.Failed_allocate_memory_in_rxmlexpand_core",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x2198]",
            "mov qword [rax], rdx",
            "mov dword [rbp - 0x14], 0xffffffff",
            "jmp 0xfbd1",
            "mov rax, qword [rbp - fcn.00002070]",
            "test rax, rax",
            "jne 0xfbb5",
            "lea rdi, str.Cant_retrieve_value_n",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x2198]",
            "mov qword [rax], rdx",
            "call sym.imp.__errno_location",
            "mov dword [rax], 2",
            "mov dword [rbp - 0x14], 0xffffffff",
            "jmp 0xfbd1",
            "mov rax, qword [rbp - fcn.00002070]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - sym.imp.fputs]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - fcn.00002070]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x2058]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - sym.imp.XML_ParserCreate]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x2068]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.XML_ParserFree",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov eax, dword [rbp - 0x14]",
            "add rsp, 0x2198",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.bufRXML": {
        "function_address": "0x0000fc8f",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 8], rdi",
            "mov qword [rbp - 0x10], rsi",
            "mov qword [rbp - 0x18], rdx",
            "mov qword [rbp - 0x20], rcx",
            "cmp qword [rbp - 8], 0",
            "je 0xfcc3",
            "cmp qword [rbp - 0x10], 0",
            "je 0xfcc3",
            "cmp qword [rbp - 0x18], 0",
            "je 0xfcc3",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xfcca",
            "mov eax, 0xffffffff",
            "jmp 0xfcf5",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov edi, eax",
            "mov rsi, qword [rbp - 0x20]",
            "mov rcx, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov r8, rsi",
            "mov esi, edi",
            "mov rdi, rax",
            "call sym.rXmlCore",
            "leave",
            "ret"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x000020e0",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.buildXMLRegister": {
        "function_address": "0x0000f059",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "mov qword [rbp - 0x28], rdx",
            "mov qword [rbp - 0x30], rcx",
            "cmp qword [rbp - 0x28], 0",
            "je 0xf07f",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xf089",
            "mov eax, 0xffffffff",
            "jmp 0xf128",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x10], 0",
            "mov rdx, qword [rbp - 0x30]",
            "lea rax, [rbp - 0x10]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.000020c0",
            "test eax, eax",
            "jne 0xf125",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rsi, qword [rax + 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov r9, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov r8, qword [rax + 8]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rcx, qword [rax]",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "push rdi",
            "push rsi",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_registersso___n_t_body_type_registration___n_t_t_email____CDATA__s_____email__n_t_t_password____CDATA__s_____password__n_t_t_model__s__model__n_t_t_firmware_id__s__firmware_id__n_t_t_firmware_time__s__firmware_time__n_t_t_serial__s__serial__n_t_t_x_agent_id__s__x_agent_id__n_t__body__n__request__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "add rsp, 0x10",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rax], rdx",
            "mov dword [rbp - 4], 0",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.Strdup": {
        "function_address": "0x000027a5",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "je 0x27c6",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "jmp 0x27cb",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.strdup": {
        "function_address": "0x00002510",
        "instructions": [
            "jmp qword [reloc.strdup]"
        ]
    },
    "sym.freeDevInfo": {
        "function_address": "0x00005303",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "je 0x5371",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x20]",
            "mov rdi, rax",
            "call fcn.00002100",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "fcn.00002100": {
        "function_address": "0x00002100",
        "instructions": [
            "jmp qword [reloc.freeSystemInfo]"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00001fa0",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "sym.rcloud_GetServerName": {
        "function_address": "0x0000cb1f",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1b0",
            "mov qword [rbp - 0x1a8], rdi",
            "mov qword [rbp - 0x1b0], rsi",
            "cmp qword [rbp - 0x1a8], 0",
            "je 0xcb4c",
            "cmp qword [rbp - 0x1b0], 0",
            "jne 0xcb61",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xcf82",
            "lea rdi, [0x00011478]",
            "call fcn.00002550",
            "mov dword [rbp - 0xc], eax",
            "cmp dword [rbp - 0xc], 0xffffffff",
            "jne 0xcbe3",
            "lea rdx, [rbp - 0x160]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x160]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x160]",
            "mov rdx, rax",
            "lea rsi, [0x00011478]",
            "lea rdi, str.Failed_to_lock__s:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1b0]",
            "mov qword [rax], rdx",
            "mov eax, 0xffffffff",
            "jmp 0xcf82",
            "mov qword [rbp - 0x58], 0",
            "mov rdx, qword [rbp - 0x1b0]",
            "lea rax, [rbp - 0x58]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._readycloud_hook_url",
            "lea rdi, [0x00011478]",
            "call fcn.00002070",
            "test eax, eax",
            "je 0xceff",
            "mov r9d, 0x184",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xcc63",
            "jmp 0xcefd",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x184",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rax, qword [rax]",
            "mov r8, rax",
            "lea rcx, [0x00011478]",
            "lea rdx, str.Cannot_retrieve_data_from__s:__s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xcce7",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xcefd",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "mov rcx, rdx",
            "lea rdx, [0x00011478]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xcd71",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xcefd",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xcdb6",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xcda3",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xced7",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x160]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x60], rax",
            "lea rdx, [rbp - 0x1a0]",
            "lea rax, [rbp - 0x60]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xce6c",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x160]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x160]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x184",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "mov rcx, rdx",
            "lea rdx, [0x00011478]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xcf60",
            "jmp 0xcf60",
            "mov rax, qword [rbp - 0x58]",
            "test rax, rax",
            "je 0xcf60",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, [0x000114b1]",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov qword [rbp - 0x48], rax",
            "add qword [rbp - 0x48], 3",
            "mov rax, qword [rbp - 0x48]",
            "mov esi, 0x2f",
            "mov rdi, rax",
            "call sym.imp.strchr",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "je 0xcf47",
            "mov rax, qword [rbp - 0x50]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a8]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0xc]",
            "mov esi, eax",
            "lea rdi, [0x00011478]",
            "call fcn.000021b0",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00001fe0",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "fcn.00002550": {
        "function_address": "0x00002550",
        "instructions": [
            "jmp qword [reloc.lockF]"
        ]
    },
    "sym.imp.__xpg_strerror_r": {
        "function_address": "0x000020a0",
        "instructions": [
            "jmp qword [reloc.__xpg_strerror_r]"
        ]
    },
    "fcn.00002070": {
        "function_address": "0x00002070",
        "instructions": [
            "jmp qword [reloc.fileRXML]"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x00002170",
        "instructions": [
            "jmp qword [reloc.snprintf]"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00002340",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x000024e0",
        "instructions": [
            "jmp qword [reloc.sprintf]"
        ]
    },
    "sym.imp.strpbrk": {
        "function_address": "0x00002390",
        "instructions": [
            "jmp qword [reloc.strpbrk]"
        ]
    },
    "sym.imp.fopen64": {
        "function_address": "0x000022d0",
        "instructions": [
            "jmp qword [reloc.fopen64]"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x00002310",
        "instructions": [
            "jmp qword [reloc.time]"
        ]
    },
    "sym.imp.localtime_r": {
        "function_address": "0x00002020",
        "instructions": [
            "jmp qword [reloc.localtime_r]"
        ]
    },
    "sym.imp.strftime": {
        "function_address": "0x00002410",
        "instructions": [
            "jmp qword [reloc.strftime]"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x000022b0",
        "instructions": [
            "jmp qword [reloc.fprintf]"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x000020d0",
        "instructions": [
            "jmp qword [reloc.fclose]"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x00002530",
        "instructions": [
            "jmp qword [reloc.strstr]"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00002120",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "fcn.000021b0": {
        "function_address": "0x000021b0",
        "instructions": [
            "jmp qword [reloc.ulockF]"
        ]
    },
    "sym.retrieveEncryptionKeysInfo": {
        "function_address": "0x00005f2e",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1b0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "mov qword [rbp - 0x1a8], rdx",
            "cmp qword [rbp - 0x198], 0",
            "je 0x5f6c",
            "cmp qword [rbp - 0x1a0], 0",
            "je 0x5f6c",
            "cmp qword [rbp - 0x1a8], 0",
            "jne 0x5f76",
            "mov eax, 0xffffffff",
            "jmp 0x6368",
            "mov dword [rbp - 4], 0xffffffff",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rcx, qword [rbp - 0x1a8]",
            "mov rax, qword [rbp - 0x198]",
            "lea rsi, str._response_body_algorithm",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0x6020",
            "mov rax, qword [rbp - 0x1a0]",
            "lea rsi, [rax + 8]",
            "mov rdx, qword [rbp - 0x1a8]",
            "mov rax, qword [rbp - 0x198]",
            "mov rcx, rdx",
            "mov rdx, rsi",
            "lea rsi, str._response_body_key",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0x6020",
            "mov rax, qword [rbp - 0x1a0]",
            "lea rsi, [rax + 0x10]",
            "mov rdx, qword [rbp - 0x1a8]",
            "mov rax, qword [rbp - 0x198]",
            "mov rcx, rdx",
            "mov rdx, rsi",
            "lea rsi, str._response_body_iv",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0x6020",
            "mov dword [rbp - 4], 0",
            "jmp 0x6365",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "cmp eax, 2",
            "jne 0x609c",
            "mov qword [rbp - 0x48], 0",
            "mov rcx, qword [rbp - 0x1a8]",
            "lea rdx, [rbp - 0x48]",
            "mov rax, qword [rbp - 0x198]",
            "lea rsi, [0x00010560]",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0x609c",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rsi, rax",
            "lea rdi, [0x0001057b]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a8]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x63",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rdx, [0x00010490]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0x60e8",
            "jmp 0x6365",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x63",
            "lea rcx, str.key_info.c",
            "lea rdx, [0x0001048a]",
            "lea rsi, [0x00010490]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001049b]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0x6165",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6365",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x0001049f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0x61e5",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6365",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x0001049f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0x622a",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000104a4]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0x6217",
            "mov esi, 0",
            "lea rdi, [0x000104a7]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x6341",
            "lea rsi, [0x000104bf]",
            "lea rdi, [0x000104a7]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x50], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x50]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0x62e0",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, [0x000104c1]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x63",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rsi, [0x000104d3]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002220": {
        "function_address": "0x00002220",
        "instructions": [
            "jmp qword [reloc.bufRXML]"
        ]
    },
    "sym.getRemoteConf": {
        "function_address": "0x0000e38e",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1d0",
            "mov qword [rbp - 0x1c8], rdi",
            "mov qword [rbp - 0x1d0], rsi",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x48], 0",
            "mov qword [rbp - 0x50], 0",
            "mov qword [rbp - 0x58], 0",
            "mov qword [rbp - 0x60], 0",
            "mov qword [rbp - 0x68], 0",
            "mov qword [rbp - 0x70], 0",
            "mov rax, qword [rbp - 0x1c8]",
            "mov rdx, qword [rbp - 0x1d0]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._readycloud_fetch_url",
            "lea rdi, str._opt_readycloud_etc_readycloud.conf",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rax, qword [rbp - 0x1c8]",
            "lea rdx, [rax + 0x10]",
            "mov rax, qword [rbp - 0x1d0]",
            "mov rcx, rax",
            "lea rsi, str._Configuration_AccountInformation_Username",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rax, qword [rbp - 0x1c8]",
            "lea rdx, [rax + 0x18]",
            "mov rax, qword [rbp - 0x1d0]",
            "mov rcx, rax",
            "lea rsi, str._Configuration_AccountInformation_Password",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x48]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_ProxyType__Address",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x50]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_ProxyType__Port",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x58]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_ProxyType_Username",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x60]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_ProxyType_Password",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x68]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_UseProxy",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x70]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_ConnectionSettings_Authtentication__Value",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe641",
            "mov rdx, qword [rbp - 0x50]",
            "mov rax, qword [rbp - 0x48]",
            "mov rsi, rax",
            "lea rdi, str._s:_s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1c8]",
            "mov qword [rax + 0x20], rdx",
            "mov rdx, qword [rbp - 0x60]",
            "mov rax, qword [rbp - 0x58]",
            "mov rsi, rax",
            "lea rdi, str._s:_s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1c8]",
            "mov qword [rax + 0x30], rdx",
            "mov rax, qword [rbp - 0x68]",
            "test rax, rax",
            "je 0xe5f0",
            "mov rax, qword [rbp - 0x68]",
            "lea rsi, str.True",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0xe5f0",
            "mov edx, 1",
            "jmp 0xe5f5",
            "mov edx, 0",
            "mov rax, qword [rbp - 0x1c8]",
            "mov dword [rax + 8], edx",
            "mov rax, qword [rbp - 0x70]",
            "test rax, rax",
            "je 0xe626",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, str.True",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0xe626",
            "mov edx, 1",
            "jmp 0xe62b",
            "mov edx, 0",
            "mov rax, qword [rbp - 0x1c8]",
            "mov dword [rax + 0x28], edx",
            "mov dword [rbp - 4], 0",
            "jmp 0xe919",
            "mov r9d, 0x2a",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rdx, str._s:_s:_d:",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xe68d",
            "jmp 0xe90a",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x2a",
            "lea rcx, str.remoteconf.c",
            "lea rdx, str.ERROR",
            "lea rsi, str._s:_s:_d:",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1d0]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001182a]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xe70a",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xe90a",
            "mov rax, qword [rbp - 0x1d0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, str._s_s",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xe78a",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xe90a",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, str._s_s",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xe7cf",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x00011833]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xe7bc",
            "mov esi, 0",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xe8e6",
            "lea rsi, [0x0001184e]",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x180]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x78], rax",
            "lea rdx, [rbp - 0x1c0]",
            "lea rax, [rbp - 0x78]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xe885",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x180]",
            "mov rcx, rdx",
            "lea rdx, str._b__e__Y__H:_M:_S",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x180]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x2a",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rsi, str._s__s:_s:_d",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1d0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1c8]",
            "mov rdi, rax",
            "call fcn.00002230",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00002290",
        "instructions": [
            "jmp qword [reloc.strcmp]"
        ]
    },
    "fcn.00002230": {
        "function_address": "0x00002230",
        "instructions": [
            "jmp qword [reloc.freeRemoteConf]"
        ]
    },
    "sym.getNasPassword": {
        "function_address": "0x0000ec8b",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1a0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "mov dword [rbp - 4], 0xffffffff",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x198]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_AccountInformation_Password",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xece2",
            "mov dword [rbp - 4], 0",
            "jmp 0xefab",
            "mov r9d, 0x52",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rdx, str._s:_s:_d:",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xed2e",
            "jmp 0xefab",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x52",
            "lea rcx, str.remoteconf.c",
            "lea rdx, str.ERROR",
            "lea rsi, str._s:_s:_d:",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001182a]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xedab",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xefab",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, str._s_s",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xee2b",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xefab",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, str._s_s",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xee70",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x00011833]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xee5d",
            "mov esi, 0",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xef87",
            "lea rsi, [0x0001184e]",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x48], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x48]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xef26",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, str._b__e__Y__H:_M:_S",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x52",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rsi, str._s__s:_s:_d",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.ulockF": {
        "function_address": "0x000028af",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "mov dword [rbp - 0x1c], esi",
            "cmp dword [rbp - 0x1c], 0",
            "jg 0x28c6",
            "jmp 0x291f",
            "mov eax, dword [rbp - 0x1c]",
            "mov edx, 0",
            "mov esi, 0",
            "mov edi, eax",
            "call sym.imp.lockf64",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str._s.lock",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 8], rax",
            "cmp qword [rbp - 8], 0",
            "je 0x2915",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.unlink",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0x1c]",
            "mov edi, eax",
            "call sym.imp.close",
            "leave",
            "ret"
        ]
    },
    "sym.imp.lockf64": {
        "function_address": "0x00002430",
        "instructions": [
            "jmp qword [reloc.lockf64]"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x00002000",
        "instructions": [
            "jmp qword [reloc.unlink]"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00002200",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "sym.rcloud_Register": {
        "function_address": "0x00007f51",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x390",
            "mov qword [rbp - 0x378], rdi",
            "mov qword [rbp - 0x380], rsi",
            "mov qword [rbp - 0x388], rdx",
            "mov qword [rbp - 0x390], rcx",
            "cmp qword [rbp - 0x378], 0",
            "je 0x7fbc",
            "mov rax, qword [rbp - 0x378]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x7fbc",
            "cmp qword [rbp - 0x380], 0",
            "je 0x7fbc",
            "mov rax, qword [rbp - 0x380]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x7fbc",
            "cmp qword [rbp - 0x388], 0",
            "je 0x7fbc",
            "cmp qword [rbp - 0x390], 0",
            "jne 0x7fe2",
            "mov rax, qword [rbp - 0x390]",
            "lea rdx, str.Invalid_parameters_in_function_rcloud_Register__.",
            "mov qword [rax], rdx",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0x9aaa",
            "mov dword [rbp - 4], 0",
            "mov qword [rbp - 0x1d8], 0",
            "mov rcx, qword [rbp - 0x390]",
            "lea rdx, [rbp - 0x1d8]",
            "mov rsi, qword [rbp - 0x380]",
            "mov rax, qword [rbp - 0x378]",
            "mov rdi, rax",
            "call fcn.00002350",
            "cmp eax, 0xffffffff",
            "jne 0x82fc",
            "mov r9d, 0x26",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "jne 0x806d",
            "jmp 0x82f0",
            "mov rax, qword [rbp - 0x50]",
            "mov r8d, 0x26",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x58], rax",
            "cmp qword [rbp - 0x58], 0",
            "jne 0x80ea",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x82f0",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x58]",
            "mov rax, qword [rbp - 0x50]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "jne 0x816a",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x82f0",
            "mov rcx, qword [rbp - 0x58]",
            "mov rdx, qword [rbp - 0x50]",
            "mov rax, qword [rbp - 0x60]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x60]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x68], 0",
            "jmp 0x81af",
            "mov rax, qword [rbp - 0x68]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x68]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0x819c",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x82cc",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x70], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x1e0], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x1e0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "je 0x826b",
            "mov rdx, qword [rbp - 0x78]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x70]",
            "mov r9d, 0x26",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 4], 0xfffffffe",
            "jmp 0x9a98",
            "mov qword [rbp - 0x1e8], 0",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rdx, qword [rbp - 0x390]",
            "lea rcx, [rbp - 0x1e8]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "je 0x8652",
            "mov r9d, 0x2e",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x80], rax",
            "cmp qword [rbp - 0x80], 0",
            "jne 0x837b",
            "jmp 0x8646",
            "mov rax, qword [rbp - 0x80]",
            "mov r8d, 0x2e",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x88], rax",
            "cmp qword [rbp - 0x88], 0",
            "jne 0x83fe",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8646",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x88]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x88]",
            "mov rax, qword [rbp - 0x80]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "jne 0x848d",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8646",
            "mov rcx, qword [rbp - 0x88]",
            "mov rdx, qword [rbp - 0x80]",
            "mov rax, qword [rbp - 0x90]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x90]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x98], 0",
            "jmp 0x84e4",
            "mov rax, qword [rbp - 0x98]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x98]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "jne 0x84cb",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x861c",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xa0], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x1f0], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x1f0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "je 0x85b2",
            "mov rdx, qword [rbp - 0xa8]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0xa0]",
            "mov r9d, 0x2e",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xa0]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 4], 0xfffffffd",
            "jmp 0x9a98",
            "mov qword [rbp - 0xb0], 0",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0",
            "mov rax, qword [rbp - 0x1e8]",
            "mov rcx, qword [rbp - 0x390]",
            "mov rdx, qword [rbp - 0x388]",
            "lea rsi, str._response_body_P2PUsername",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "je 0x9700",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "cmp eax, 2",
            "jne 0x8a5f",
            "mov qword [rbp - 0x1f8], 0",
            "mov rax, qword [rbp - 0x1e8]",
            "mov rcx, qword [rbp - 0x390]",
            "lea rdx, [rbp - 0x1f8]",
            "lea rsi, str._response_body_error_cause",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0x8a53",
            "mov rax, qword [rbp - 0x390]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1f8]",
            "mov rsi, rax",
            "lea rdi, [0x00011133]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x390]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x1f8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x40",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "jne 0x8776",
            "jmp 0x8a53",
            "mov rax, qword [rbp - 0xb8]",
            "mov r8d, 0x40",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc0], rax",
            "cmp qword [rbp - 0xc0], 0",
            "jne 0x87ff",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8a53",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xc0]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xc0]",
            "mov rax, qword [rbp - 0xb8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "jne 0x8894",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8a53",
            "mov rcx, qword [rbp - 0xc0]",
            "mov rdx, qword [rbp - 0xb8]",
            "mov rax, qword [rbp - 0xc8]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xc8]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xd0], 0",
            "jmp 0x88ee",
            "mov rax, qword [rbp - 0xd0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xd0]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xd0], rax",
            "cmp qword [rbp - 0xd0], 0",
            "jne 0x88d5",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x8a26",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xd8], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x200], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x200]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xe0], rax",
            "cmp qword [rbp - 0xe0], 0",
            "je 0x89bc",
            "mov rdx, qword [rbp - 0xe0]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0xd8]",
            "mov r9d, 0x40",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xd8]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xd8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 4], 0xfffffffa",
            "jmp 0x9700",
            "mov r9d, 0x46",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xe8], rax",
            "cmp qword [rbp - 0xe8], 0",
            "jne 0x8ab1",
            "jmp 0x8d85",
            "mov rax, qword [rbp - 0xe8]",
            "mov r8d, 0x46",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x00011136]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xb0]",
            "mov rcx, rax",
            "lea rdx, str.token_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf0], rax",
            "cmp qword [rbp - 0xf0], 0",
            "jne 0x8b37",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8d85",
            "mov rdx, qword [rbp - 0xb0]",
            "mov rax, qword [rbp - 0xf0]",
            "lea rsi, str.token_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xf0]",
            "mov rax, qword [rbp - 0xe8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf8], rax",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0x8bc9",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x8d85",
            "mov rcx, qword [rbp - 0xf0]",
            "mov rdx, qword [rbp - 0xe8]",
            "mov rax, qword [rbp - 0xf8]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xf8]",
            "mov qword [rbp - 0x28], rax",
            "mov qword [rbp - 0x100], 0",
            "jmp 0x8c23",
            "mov rax, qword [rbp - 0x100]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x100]",
            "add rax, 1",
            "mov qword [rbp - 0x28], rax",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x100], rax",
            "cmp qword [rbp - 0x100], 0",
            "jne 0x8c0a",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x8d58",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x108], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x208], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x208]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x110], rax",
            "cmp qword [rbp - 0x110], 0",
            "je 0x8cf1",
            "mov rdx, qword [rbp - 0x110]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x108]",
            "mov r9d, 0x46",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0xb0]",
            "mov rax, qword [rbp - 0x108]",
            "lea rsi, str.token_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x108]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x47",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x118], rax",
            "cmp qword [rbp - 0x118], 0",
            "jne 0x8dd7",
            "jmp 0x90b4",
            "mov rax, qword [rbp - 0x118]",
            "mov r8d, 0x47",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x00011136]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x388]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, str.p2p_username_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x120], rax",
            "cmp qword [rbp - 0x120], 0",
            "jne 0x8e60",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x90b4",
            "mov rax, qword [rbp - 0x388]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x120]",
            "lea rsi, str.p2p_username_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x120]",
            "mov rax, qword [rbp - 0x118]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x128], rax",
            "cmp qword [rbp - 0x128], 0",
            "jne 0x8ef5",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x120]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x90b4",
            "mov rcx, qword [rbp - 0x120]",
            "mov rdx, qword [rbp - 0x118]",
            "mov rax, qword [rbp - 0x128]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x128]",
            "mov qword [rbp - 0x30], rax",
            "mov qword [rbp - 0x130], 0",
            "jmp 0x8f4f",
            "mov rax, qword [rbp - 0x130]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x130]",
            "add rax, 1",
            "mov qword [rbp - 0x30], rax",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x130], rax",
            "cmp qword [rbp - 0x130], 0",
            "jne 0x8f36",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x9087",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x138], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x210], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x210]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x140], rax",
            "cmp qword [rbp - 0x140], 0",
            "je 0x901d",
            "mov rdx, qword [rbp - 0x140]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x138]",
            "mov r9d, 0x47",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x388]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x138]",
            "lea rsi, str.p2p_username_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x138]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x120]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x128]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x48",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x148], rax",
            "cmp qword [rbp - 0x148], 0",
            "jne 0x9106",
            "jmp 0x93da",
            "mov rax, qword [rbp - 0x148]",
            "mov r8d, 0x48",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rcx, rax",
            "lea rdx, str.request_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x150], rax",
            "cmp qword [rbp - 0x150], 0",
            "jne 0x918c",
            "mov rax, qword [rbp - 0x148]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x93da",
            "mov rdx, qword [rbp - 0x1d8]",
            "mov rax, qword [rbp - 0x150]",
            "lea rsi, str.request_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x150]",
            "mov rax, qword [rbp - 0x148]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x158], rax",
            "cmp qword [rbp - 0x158], 0",
            "jne 0x921e",
            "mov rax, qword [rbp - 0x148]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x150]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x93da",
            "mov rcx, qword [rbp - 0x150]",
            "mov rdx, qword [rbp - 0x148]",
            "mov rax, qword [rbp - 0x158]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x158]",
            "mov qword [rbp - 0x38], rax",
            "mov qword [rbp - 0x160], 0",
            "jmp 0x9278",
            "mov rax, qword [rbp - 0x160]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x160]",
            "add rax, 1",
            "mov qword [rbp - 0x38], rax",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x160], rax",
            "cmp qword [rbp - 0x160], 0",
            "jne 0x925f",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x93ad",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x168], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x218], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x218]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x170], rax",
            "cmp qword [rbp - 0x170], 0",
            "je 0x9346",
            "mov rdx, qword [rbp - 0x170]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x168]",
            "mov r9d, 0x48",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x1d8]",
            "mov rax, qword [rbp - 0x168]",
            "lea rsi, str.request_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x168]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x148]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x150]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x158]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x49",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x178], rax",
            "cmp qword [rbp - 0x178], 0",
            "jne 0x942c",
            "jmp 0x9700",
            "mov rax, qword [rbp - 0x178]",
            "mov r8d, 0x49",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1e8]",
            "mov rcx, rax",
            "lea rdx, str.response_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x180], rax",
            "cmp qword [rbp - 0x180], 0",
            "jne 0x94b2",
            "mov rax, qword [rbp - 0x178]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9700",
            "mov rdx, qword [rbp - 0x1e8]",
            "mov rax, qword [rbp - 0x180]",
            "lea rsi, str.response_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x180]",
            "mov rax, qword [rbp - 0x178]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x188], rax",
            "cmp qword [rbp - 0x188], 0",
            "jne 0x9544",
            "mov rax, qword [rbp - 0x178]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x180]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9700",
            "mov rcx, qword [rbp - 0x180]",
            "mov rdx, qword [rbp - 0x178]",
            "mov rax, qword [rbp - 0x188]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x188]",
            "mov qword [rbp - 0x40], rax",
            "mov qword [rbp - segment.NOTE], 0",
            "jmp 0x959e",
            "mov rax, qword [rbp - segment.NOTE]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - segment.NOTE]",
            "add rax, 1",
            "mov qword [rbp - 0x40], rax",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - segment.NOTE], rax",
            "cmp qword [rbp - segment.NOTE], 0",
            "jne 0x9585",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x96d3",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x198], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x220], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x220]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x1a0], rax",
            "cmp qword [rbp - 0x1a0], 0",
            "je 0x966c",
            "mov rdx, qword [rbp - 0x1a0]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x198]",
            "mov r9d, 0x49",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x1e8]",
            "mov rax, qword [rbp - 0x198]",
            "lea rsi, str.response_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x198]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x178]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x180]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x188]",
            "mov rdi, rax",
            "call sym.imp.free",
            "cmp dword [rbp - 4], 0",
            "jne 0x9a7a",
            "mov rax, qword [rbp - 0x388]",
            "mov rsi, qword [rax]",
            "mov rcx, qword [rbp - 0x390]",
            "mov rdx, qword [rbp - 0xb0]",
            "mov rax, qword [rbp - 0x378]",
            "mov r8, rcx",
            "lea rcx, [0x00011170]",
            "mov rdi, rax",
            "call fcn.000024c0",
            "cmp eax, 0xffffffff",
            "jne 0x9a7a",
            "mov r9d, 0x51",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1a8], rax",
            "cmp qword [rbp - 0x1a8], 0",
            "jne 0x9796",
            "jmp 0x9a73",
            "mov rax, qword [rbp - 0x1a8]",
            "mov r8d, 0x51",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1b0], rax",
            "cmp qword [rbp - 0x1b0], 0",
            "jne 0x981f",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9a73",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x1b0]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x1b0]",
            "mov rax, qword [rbp - 0x1a8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - section..gnu.hash], rax",
            "cmp qword [rbp - section..gnu.hash], 0",
            "jne 0x98b4",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9a73",
            "mov rcx, qword [rbp - 0x1b0]",
            "mov rdx, qword [rbp - 0x1a8]",
            "mov rax, qword [rbp - section..gnu.hash]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov qword [rbp - 0x48], rax",
            "mov qword [rbp - 0x1c0], 0",
            "jmp 0x990e",
            "mov rax, qword [rbp - 0x1c0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x1c0]",
            "add rax, 1",
            "mov qword [rbp - 0x48], rax",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x1c0], rax",
            "cmp qword [rbp - 0x1c0], 0",
            "jne 0x98f5",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x9a46",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x1c8], rax",
            "lea rdx, [rbp - 0x330]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x228], rax",
            "lea rdx, [rbp - 0x370]",
            "lea rax, [rbp - 0x228]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x1d0], rax",
            "cmp qword [rbp - 0x1d0], 0",
            "je 0x99dc",
            "mov rdx, qword [rbp - 0x1d0]",
            "lea rax, [rbp - 0x330]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x330]",
            "mov rax, qword [rbp - 0x1c8]",
            "mov r9d, 0x51",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x390]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x1c8]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1c8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 4], 0xfffffffb",
            "mov rax, qword [rbp - 0x1e8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002350": {
        "function_address": "0x00002350",
        "instructions": [
            "jmp qword [reloc.buildXMLRegister]"
        ]
    },
    "fcn.00002490": {
        "function_address": "0x00002490",
        "instructions": [
            "jmp qword [reloc.curlRequest]"
        ]
    },
    "fcn.000024c0": {
        "function_address": "0x000024c0",
        "instructions": [
            "jmp qword [reloc.createOwnerFile]"
        ]
    },
    "sym.lockF": {
        "function_address": "0x000027cd",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "mov rax, qword [rbp - 0x18]",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.access",
            "test eax, eax",
            "je 0x27f8",
            "mov eax, 0",
            "jmp 0x28ad",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str._s.lock",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 8], rax",
            "cmp qword [rbp - 8], 0",
            "jne 0x2825",
            "mov eax, 0xffffffff",
            "jmp 0x28ad",
            "mov rax, qword [rbp - 8]",
            "mov edx, 0x180",
            "mov esi, 0x42",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.open64",
            "mov dword [rbp - 0xc], eax",
            "cmp dword [rbp - 0xc], 0xffffffff",
            "jne 0x285c",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x28ad",
            "mov eax, dword [rbp - 0xc]",
            "mov edx, 0",
            "mov esi, 1",
            "mov edi, eax",
            "call sym.imp.lockf64",
            "cmp eax, 0xffffffff",
            "jne 0x289e",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.unlink",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0xc]",
            "mov edi, eax",
            "call sym.imp.close",
            "mov eax, 0xffffffff",
            "jmp 0x28ad",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0xc]",
            "leave",
            "ret"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00002400",
        "instructions": [
            "jmp qword [reloc.open64]"
        ]
    },
    "sym.curlRequest": {
        "function_address": "0x00002a9f",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x4a0",
            "mov qword [rbp - 0x488], rdi",
            "mov qword [rbp - 0x490], rsi",
            "mov qword [rbp - 0x498], rdx",
            "cmp qword [rbp - 0x488], 0",
            "je 0x2add",
            "cmp qword [rbp - 0x490], 0",
            "je 0x2add",
            "cmp qword [rbp - 0x498], 0",
            "jne 0x2ae7",
            "mov eax, 0xffffffff",
            "jmp 0x504c",
            "lea rax, [rbp - 0x2d0]",
            "mov edx, 0x38",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rdx, qword [rbp - 0x498]",
            "lea rax, [rbp - 0x2d0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.000023d0",
            "test eax, eax",
            "je 0x2e12",
            "mov r9d, 0x32",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "jne 0x2b6d",
            "jmp 0x2df9",
            "mov rax, qword [rbp - 0x60]",
            "mov r8d, 0x32",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001020e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001021f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0x2bea",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x2df9",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x68]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x68]",
            "mov rax, qword [rbp - 0x60]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0x2c6a",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x2df9",
            "mov rcx, qword [rbp - 0x68]",
            "mov rdx, qword [rbp - 0x60]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x70]",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x78], 0",
            "jmp 0x2caf",
            "mov rax, qword [rbp - 0x78]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x78]",
            "add rax, 1",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "jne 0x2c9c",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x2dd5",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x80], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x2f8], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x2f8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x88], rax",
            "cmp qword [rbp - 0x88], 0",
            "je 0x2d74",
            "mov rdx, qword [rbp - 0x88]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x80]",
            "mov r9d, 0x32",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x80]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rax, [rbp - 0x2d0]",
            "mov rdi, rax",
            "call fcn.00002230",
            "mov eax, 0xffffffff",
            "jmp 0x504c",
            "mov qword [rbp - 0x2d8], 0",
            "mov esi, 0",
            "lea rdi, [0x00010268]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x31a3",
            "mov r9d, 0x3a",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "jne 0x2e88",
            "jmp 0x3177",
            "mov rax, qword [rbp - 0x90]",
            "mov r8d, 0x3a",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "lea rdx, str.curlrequest_use_registration_config_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "jne 0x2f04",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3177",
            "mov rax, qword [rbp - 0x98]",
            "movabs rcx, 0x757165726c727563",
            "mov qword [rax], rcx",
            "movabs rcx, 0x2065737520747365",
            "mov qword [rax + 8], rcx",
            "movabs rcx, 0x6172747369676572",
            "mov qword [rax + 0x10], rcx",
            "movabs rcx, 0x6e6f63206e6f6974",
            "mov qword [rax + 0x18], rcx",
            "mov dword [rax + 0x20], 0xa676966",
            "mov byte [rax + 0x24], 0",
            "mov rdx, qword [rbp - 0x98]",
            "mov rax, qword [rbp - 0x90]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa0], rax",
            "cmp qword [rbp - 0xa0], 0",
            "jne 0x2fbd",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3177",
            "mov rcx, qword [rbp - 0x98]",
            "mov rdx, qword [rbp - 0x90]",
            "mov rax, qword [rbp - 0xa0]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xa0]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0xa8], 0",
            "jmp 0x3017",
            "mov rax, qword [rbp - 0xa8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xa8]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "jne 0x2ffe",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x314a",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xb0], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x300], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x300]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "je 0x30e5",
            "mov rdx, qword [rbp - 0xb8]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0xb0]",
            "mov r9d, 0x3a",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xb0]",
            "mov rcx, rax",
            "mov edx, 0x24",
            "mov esi, 1",
            "lea rdi, str.curlrequest_use_registration_config_n",
            "call sym.imp.fwrite",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rdx, qword [rbp - 0x498]",
            "lea rax, [rbp - 0x2d8]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._registration_token",
            "lea rdi, [0x00010268]",
            "call fcn.00002070",
            "jmp 0x386e",
            "mov esi, 0",
            "lea rdi, [0x000102d8]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x3532",
            "mov r9d, 0x3f",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc0], rax",
            "cmp qword [rbp - 0xc0], 0",
            "jne 0x320e",
            "jmp 0x3506",
            "mov rax, qword [rbp - 0xc0]",
            "mov r8d, 0x3f",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "lea rdx, str.curlrequest_use_registeration_tmp_config_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "jne 0x328a",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3506",
            "mov rax, qword [rbp - 0xc8]",
            "movabs rcx, 0x757165726c727563",
            "mov qword [rax], rcx",
            "movabs rcx, 0x2065737520747365",
            "mov qword [rax + 8], rcx",
            "movabs rcx, 0x7265747369676572",
            "mov qword [rax + 0x10], rcx",
            "movabs rsi, 0x6d745f6e6f697461",
            "mov qword [rax + 0x18], rsi",
            "movabs rcx, 0x6769666e6f635f70",
            "mov qword [rax + 0x20], rcx",
            "mov word [rax + 0x28], 0xa",
            "mov rdx, qword [rbp - 0xc8]",
            "mov rax, qword [rbp - 0xc0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xd0], rax",
            "cmp qword [rbp - 0xd0], 0",
            "jne 0x334c",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3506",
            "mov rcx, qword [rbp - 0xc8]",
            "mov rdx, qword [rbp - 0xc0]",
            "mov rax, qword [rbp - 0xd0]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xd0]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0xd8], 0",
            "jmp 0x33a6",
            "mov rax, qword [rbp - 0xd8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xd8]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xd8], rax",
            "cmp qword [rbp - 0xd8], 0",
            "jne 0x338d",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x34d9",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xe0], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x308], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x308]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xe8], rax",
            "cmp qword [rbp - 0xe8], 0",
            "je 0x3474",
            "mov rdx, qword [rbp - 0xe8]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0xe0]",
            "mov r9d, 0x3f",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xe0]",
            "mov rcx, rax",
            "mov edx, 0x29",
            "mov esi, 1",
            "lea rdi, str.curlrequest_use_registeration_tmp_config_n",
            "call sym.imp.fwrite",
            "mov rax, qword [rbp - 0xe0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rdx, qword [rbp - 0x498]",
            "lea rax, [rbp - 0x2d8]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._registration_token",
            "lea rdi, [0x000102d8]",
            "call fcn.00002070",
            "jmp 0x386e",
            "mov r9d, 0x44",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf0], rax",
            "cmp qword [rbp - 0xf0], 0",
            "jne 0x3584",
            "jmp 0x386e",
            "mov rax, qword [rbp - 0xf0]",
            "mov r8d, 0x44",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "lea rdx, str.curlrequest_does_not_find_config_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf8], rax",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0x3600",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x386e",
            "mov rax, qword [rbp - 0xf8]",
            "movabs rsi, 0x757165726c727563",
            "mov qword [rax], rsi",
            "movabs rcx, 0x73656f6420747365",
            "mov qword [rax + 8], rcx",
            "movabs rsi, 0x6e696620746f6e20",
            "mov qword [rax + 0x10], rsi",
            "movabs rcx, 0x6769666e6f632064",
            "mov qword [rax + 0x18], rcx",
            "mov word [rax + 0x20], 0xa",
            "mov rdx, qword [rbp - 0xf8]",
            "mov rax, qword [rbp - 0xf0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x100], rax",
            "cmp qword [rbp - 0x100], 0",
            "jne 0x36b4",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x386e",
            "mov rcx, qword [rbp - 0xf8]",
            "mov rdx, qword [rbp - 0xf0]",
            "mov rax, qword [rbp - 0x100]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x100]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0x108], 0",
            "jmp 0x370e",
            "mov rax, qword [rbp - 0x108]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x108]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x108], rax",
            "cmp qword [rbp - 0x108], 0",
            "jne 0x36f5",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x3841",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x110], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x310], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x310]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x118], rax",
            "cmp qword [rbp - 0x118], 0",
            "je 0x37dc",
            "mov rdx, qword [rbp - 0x118]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x110]",
            "mov r9d, 0x44",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x110]",
            "mov rcx, rax",
            "mov edx, 0x21",
            "mov esi, 1",
            "lea rdi, str.curlrequest_does_not_find_config_n",
            "call sym.imp.fwrite",
            "mov rax, qword [rbp - 0x110]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x100]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x2d8]",
            "test rax, rax",
            "jne 0x389a",
            "mov rax, qword [rbp - 0x498]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x498]",
            "mov qword [rax], 0",
            "call sym.imp.curl_easy_init",
            "mov qword [rbp - 0x120], rax",
            "lea rax, [rbp - 0x2f0]",
            "mov edx, 0x10",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov edi, 1",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x2f0], rax",
            "mov qword [rbp - 0x2e8], 0",
            "mov dword [rbp - 0x124], 0x2712",
            "mov rdx, qword [rbp - 0x2d0]",
            "mov ecx, dword [rbp - 0x124]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x128], 0x40",
            "mov ecx, dword [rbp - 0x128]",
            "mov rax, qword [rbp - 0x120]",
            "mov edx, 0",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x12c], 0x51",
            "mov ecx, dword [rbp - 0x12c]",
            "mov rax, qword [rbp - 0x120]",
            "mov edx, 0",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov rax, qword [rbp - 0x2d8]",
            "test rax, rax",
            "je 0x3a37",
            "mov rax, qword [rbp - 0x2d8]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x3a37",
            "mov rax, qword [rbp - 0x2d8]",
            "lea rsi, str._null_",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "je 0x3a37",
            "mov qword [rbp - 0x138], 0",
            "mov rax, qword [rbp - 0x2d8]",
            "mov rsi, rax",
            "lea rdi, str.Authorization:_Bearer__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 0x138], rax",
            "mov qword [rbp - 0x140], 0",
            "mov rdx, qword [rbp - 0x138]",
            "mov rax, qword [rbp - 0x140]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.curl_slist_append",
            "mov qword [rbp - 0x140], rax",
            "mov dword [rbp - 0x144], 0x2727",
            "mov ecx, dword [rbp - 0x144]",
            "mov rdx, qword [rbp - 0x140]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov rax, qword [rbp - 0x138]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3abc",
            "mov dword [rbp - 0x148], 0x6b",
            "mov ecx, dword [rbp - 0x148]",
            "mov rax, qword [rbp - 0x120]",
            "mov edx, 1",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x14c], 0x27bd",
            "mov rdx, qword [rbp - 0x2c0]",
            "mov ecx, dword [rbp - 0x14c]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x150], 0x27be",
            "mov rdx, qword [rbp - 0x2b8]",
            "mov ecx, dword [rbp - 0x150]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x154], 0x271f",
            "mov ecx, dword [rbp - 0x154]",
            "mov rdx, qword [rbp - 0x488]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x158], 0x3c",
            "mov rax, qword [rbp - 0x488]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov rdx, rax",
            "mov ecx, dword [rbp - 0x158]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x15c], 0x4e2b",
            "mov ecx, dword [rbp - 0x15c]",
            "mov rax, qword [rbp - 0x120]",
            "lea rdx, [sym.WriteMemoryCallback]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x160], 0x2711",
            "mov ecx, dword [rbp - 0x160]",
            "lea rdx, [rbp - 0x2f0]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov eax, dword [rbp - 0x2c8]",
            "test eax, eax",
            "je 0x426a",
            "mov dword [rbp - 0x164], 0x6f",
            "mov ecx, dword [rbp - 0x164]",
            "mov rax, qword [rbp - 0x120]",
            "mov rdx, 0xffffffffffffffef",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov dword [rbp - 0x168], 0x2714",
            "mov rdx, qword [rbp - 0x2b0]",
            "mov ecx, dword [rbp - 0x168]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov r9d, 0x75",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x170], rax",
            "cmp qword [rbp - 0x170], 0",
            "jne 0x3c35",
            "jmp 0x3f09",
            "mov rax, qword [rbp - 0x170]",
            "mov r8d, 0x75",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x2b0]",
            "mov rcx, rax",
            "lea rdx, str.using_proxy__s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x178], rax",
            "cmp qword [rbp - 0x178], 0",
            "jne 0x3cbb",
            "mov rax, qword [rbp - 0x170]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3f09",
            "mov rdx, qword [rbp - 0x2b0]",
            "mov rax, qword [rbp - 0x178]",
            "lea rsi, str.using_proxy__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x178]",
            "mov rax, qword [rbp - 0x170]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x180], rax",
            "cmp qword [rbp - 0x180], 0",
            "jne 0x3d4d",
            "mov rax, qword [rbp - 0x170]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x178]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x3f09",
            "mov rcx, qword [rbp - 0x178]",
            "mov rdx, qword [rbp - 0x170]",
            "mov rax, qword [rbp - 0x180]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x180]",
            "mov qword [rbp - 0x28], rax",
            "mov qword [rbp - 0x188], 0",
            "jmp 0x3da7",
            "mov rax, qword [rbp - 0x188]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x188]",
            "add rax, 1",
            "mov qword [rbp - 0x28], rax",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x188], rax",
            "cmp qword [rbp - 0x188], 0",
            "jne 0x3d8e",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x3edc",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - segment.NOTE], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x318], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x318]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x198], rax",
            "cmp qword [rbp - 0x198], 0",
            "je 0x3e75",
            "mov rdx, qword [rbp - 0x198]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - segment.NOTE]",
            "mov r9d, 0x75",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x2b0]",
            "mov rax, qword [rbp - segment.NOTE]",
            "lea rsi, str.using_proxy__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - segment.NOTE]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x170]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x178]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x180]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0x2a8]",
            "test eax, eax",
            "je 0x426a",
            "mov r9d, 0x79",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1a0], rax",
            "cmp qword [rbp - 0x1a0], 0",
            "jne 0x3f69",
            "jmp 0x423d",
            "mov rax, qword [rbp - 0x1a0]",
            "mov r8d, 0x79",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x2a0]",
            "mov rcx, rax",
            "lea rdx, str.proxy_auth__s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1a8], rax",
            "cmp qword [rbp - 0x1a8], 0",
            "jne 0x3fef",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x423d",
            "mov rdx, qword [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x1a8]",
            "lea rsi, str.proxy_auth__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x1a8]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1b0], rax",
            "cmp qword [rbp - 0x1b0], 0",
            "jne 0x4081",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x423d",
            "mov rcx, qword [rbp - 0x1a8]",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x1b0]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1b0]",
            "mov qword [rbp - 0x30], rax",
            "mov qword [rbp - section..gnu.hash], 0",
            "jmp 0x40db",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - section..gnu.hash]",
            "add rax, 1",
            "mov qword [rbp - 0x30], rax",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - section..gnu.hash], rax",
            "cmp qword [rbp - section..gnu.hash], 0",
            "jne 0x40c2",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x4210",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x1c0], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x320], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x320]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x1c8], rax",
            "cmp qword [rbp - 0x1c8], 0",
            "je 0x41a9",
            "mov rdx, qword [rbp - 0x1c8]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x1c0]",
            "mov r9d, 0x79",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x1c0]",
            "lea rsi, str.proxy_auth__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1c0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1a8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1b0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 0x1cc], 0x2716",
            "mov rdx, qword [rbp - 0x2a0]",
            "mov ecx, dword [rbp - 0x1cc]",
            "mov rax, qword [rbp - 0x120]",
            "mov esi, ecx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.curl_easy_setopt",
            "mov rax, qword [rbp - 0x120]",
            "mov rdi, rax",
            "call sym.imp.curl_easy_perform",
            "mov dword [rbp - 0x34], eax",
            "cmp dword [rbp - 0x34], 0",
            "je 0x45ea",
            "mov eax, dword [rbp - 0x34]",
            "mov edi, eax",
            "call sym.imp.curl_easy_strerror",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_perform_curl:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x498]",
            "mov qword [rax], rdx",
            "mov r9d, 0x83",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1d8], rax",
            "cmp qword [rbp - 0x1d8], 0",
            "jne 0x4303",
            "jmp 0x45e5",
            "mov rax, qword [rbp - 0x1d8]",
            "mov r8d, 0x83",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001020e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001021f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1e0], rax",
            "cmp qword [rbp - 0x1e0], 0",
            "jne 0x438c",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x45e5",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x1e0]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x1e0]",
            "mov rax, qword [rbp - 0x1d8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x1e8], rax",
            "cmp qword [rbp - 0x1e8], 0",
            "jne 0x4421",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1e0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x45e5",
            "mov rcx, qword [rbp - 0x1e0]",
            "mov rdx, qword [rbp - 0x1d8]",
            "mov rax, qword [rbp - 0x1e8]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1e8]",
            "mov qword [rbp - 0x40], rax",
            "mov qword [rbp - 0x1f0], 0",
            "jmp 0x447b",
            "mov rax, qword [rbp - 0x1f0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x1f0]",
            "add rax, 1",
            "mov qword [rbp - 0x40], rax",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x1f0], rax",
            "cmp qword [rbp - 0x1f0], 0",
            "jne 0x4462",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x45b3",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x1f8], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x328], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x328]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x200], rax",
            "cmp qword [rbp - 0x200], 0",
            "je 0x4549",
            "mov rdx, qword [rbp - 0x200]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x1f8]",
            "mov r9d, 0x83",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x1f8]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1f8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x1d8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1e0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x1e8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x49b8",
            "jmp 0x49b8",
            "mov rax, qword [rbp - 0x2e8]",
            "add rax, 1",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x490]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x490]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0x4973",
            "lea rdi, str.Failed_to_allocate_memory",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x498]",
            "mov qword [rax], rdx",
            "mov r9d, 0x8b",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x208], rax",
            "cmp qword [rbp - 0x208], 0",
            "jne 0x468d",
            "jmp 0x496a",
            "mov rax, qword [rbp - 0x208]",
            "mov r8d, 0x8b",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001020e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001021f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x210], rax",
            "cmp qword [rbp - 0x210], 0",
            "jne 0x4716",
            "mov rax, qword [rbp - 0x208]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x496a",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x210]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x210]",
            "mov rax, qword [rbp - 0x208]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x218], rax",
            "cmp qword [rbp - 0x218], 0",
            "jne 0x47ab",
            "mov rax, qword [rbp - 0x208]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x210]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x496a",
            "mov rcx, qword [rbp - 0x210]",
            "mov rdx, qword [rbp - 0x208]",
            "mov rax, qword [rbp - 0x218]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x218]",
            "mov qword [rbp - 0x48], rax",
            "mov qword [rbp - 0x220], 0",
            "jmp 0x4805",
            "mov rax, qword [rbp - 0x220]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x220]",
            "add rax, 1",
            "mov qword [rbp - 0x48], rax",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x220], rax",
            "cmp qword [rbp - 0x220], 0",
            "jne 0x47ec",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x493d",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x228], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x330], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x330]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x230], rax",
            "cmp qword [rbp - 0x230], 0",
            "je 0x48d3",
            "mov rdx, qword [rbp - 0x230]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x228]",
            "mov r9d, 0x8b",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001020e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x498]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x228]",
            "lea rsi, [0x0001021f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x228]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x208]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x210]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x218]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 0x34], 0xffffffff",
            "jmp 0x49b8",
            "mov rax, qword [rbp - 0x2e8]",
            "lea rdx, [rax + 1]",
            "mov rax, qword [rbp - 0x490]",
            "mov rax, qword [rax]",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rdx, qword [rbp - 0x2e8]",
            "mov rcx, qword [rbp - 0x2f0]",
            "mov rax, qword [rbp - 0x490]",
            "mov rax, qword [rax]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.memcpy",
            "mov r9d, 0x95",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x238], rax",
            "cmp qword [rbp - 0x238], 0",
            "jne 0x4a0a",
            "jmp 0x4cde",
            "mov rax, qword [rbp - 0x238]",
            "mov r8d, 0x95",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x488]",
            "mov rcx, rax",
            "lea rdx, [0x000103ce]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x240], rax",
            "cmp qword [rbp - 0x240], 0",
            "jne 0x4a90",
            "mov rax, qword [rbp - 0x238]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x4cde",
            "mov rdx, qword [rbp - 0x488]",
            "mov rax, qword [rbp - 0x240]",
            "lea rsi, [0x000103ce]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x240]",
            "mov rax, qword [rbp - 0x238]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x248], rax",
            "cmp qword [rbp - 0x248], 0",
            "jne 0x4b22",
            "mov rax, qword [rbp - 0x238]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x240]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x4cde",
            "mov rcx, qword [rbp - 0x240]",
            "mov rdx, qword [rbp - 0x238]",
            "mov rax, qword [rbp - 0x248]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x248]",
            "mov qword [rbp - 0x50], rax",
            "mov qword [rbp - 0x250], 0",
            "jmp 0x4b7c",
            "mov rax, qword [rbp - 0x250]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x250]",
            "add rax, 1",
            "mov qword [rbp - 0x50], rax",
            "mov rax, qword [rbp - 0x50]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x250], rax",
            "cmp qword [rbp - 0x250], 0",
            "jne 0x4b63",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x4cb1",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x258], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x338], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x338]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x260], rax",
            "cmp qword [rbp - 0x260], 0",
            "je 0x4c4a",
            "mov rdx, qword [rbp - 0x260]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x258]",
            "mov r9d, 0x95",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x488]",
            "mov rax, qword [rbp - 0x258]",
            "lea rsi, [0x000103ce]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x258]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x238]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x240]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x248]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x96",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rdx, [0x00010214]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x268], rax",
            "cmp qword [rbp - 0x268], 0",
            "jne 0x4d30",
            "jmp 0x500d",
            "mov rax, qword [rbp - 0x268]",
            "mov r8d, 0x96",
            "lea rcx, str.curlrequest.c",
            "lea rdx, [0x0001028e]",
            "lea rsi, [0x00010214]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x490]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, str.respond_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x270], rax",
            "cmp qword [rbp - 0x270], 0",
            "jne 0x4db9",
            "mov rax, qword [rbp - 0x268]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x500d",
            "mov rax, qword [rbp - 0x490]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x270]",
            "lea rsi, str.respond_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x270]",
            "mov rax, qword [rbp - 0x268]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x00010223]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x278], rax",
            "cmp qword [rbp - 0x278], 0",
            "jne 0x4e4e",
            "mov rax, qword [rbp - 0x268]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x270]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x500d",
            "mov rcx, qword [rbp - 0x270]",
            "mov rdx, qword [rbp - 0x268]",
            "mov rax, qword [rbp - 0x278]",
            "lea rsi, [0x00010223]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x278]",
            "mov qword [rbp - 0x58], rax",
            "mov qword [rbp - 0x280], 0",
            "jmp 0x4ea8",
            "mov rax, qword [rbp - 0x280]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x280]",
            "add rax, 1",
            "mov qword [rbp - 0x58], rax",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, [0x00010228]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x280], rax",
            "cmp qword [rbp - 0x280], 0",
            "jne 0x4e8f",
            "mov esi, 0",
            "lea rdi, [0x0001022b]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x4fe0",
            "lea rsi, [0x00010243]",
            "lea rdi, [0x0001022b]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x288], rax",
            "lea rdx, [rbp - 0x440]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x340], rax",
            "lea rdx, [rbp - 0x480]",
            "lea rax, [rbp - 0x340]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x290], rax",
            "cmp qword [rbp - 0x290], 0",
            "je 0x4f76",
            "mov rdx, qword [rbp - 0x290]",
            "lea rax, [rbp - 0x440]",
            "mov rcx, rdx",
            "lea rdx, [0x00010245]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x440]",
            "mov rax, qword [rbp - 0x288]",
            "mov r9d, 0x96",
            "lea r8, str.curlrequest.c",
            "lea rcx, [0x0001028e]",
            "lea rsi, [0x00010257]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x490]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x288]",
            "lea rsi, str.respond_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x288]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x268]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x270]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x278]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x120]",
            "mov rdi, rax",
            "call sym.imp.curl_easy_cleanup",
            "mov rax, qword [rbp - 0x2f0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rax, [rbp - 0x2d0]",
            "mov rdi, rax",
            "call fcn.00002230",
            "mov rax, qword [rbp - 0x2d8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0x34]",
            "leave",
            "ret"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000021c0",
        "instructions": [
            "jmp qword [reloc.memset]"
        ]
    },
    "fcn.000023d0": {
        "function_address": "0x000023d0",
        "instructions": [
            "jmp qword [reloc.getRemoteConf]"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00002500",
        "instructions": [
            "jmp qword [reloc.fwrite]"
        ]
    },
    "sym.imp.curl_easy_init": {
        "function_address": "0x00002210",
        "instructions": [
            "jmp qword [reloc.curl_easy_init]"
        ]
    },
    "sym.imp.curl_easy_setopt": {
        "function_address": "0x00002480",
        "instructions": [
            "jmp qword [reloc.curl_easy_setopt]"
        ]
    },
    "sym.imp.curl_slist_append": {
        "function_address": "0x000023a0",
        "instructions": [
            "jmp qword [reloc.curl_slist_append]"
        ]
    },
    "sym.imp.curl_easy_perform": {
        "function_address": "0x000024f0",
        "instructions": [
            "jmp qword [reloc.curl_easy_perform]"
        ]
    },
    "sym.imp.curl_easy_strerror": {
        "function_address": "0x000022a0",
        "instructions": [
            "jmp qword [reloc.curl_easy_strerror]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x000022e0",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "sym.imp.curl_easy_cleanup": {
        "function_address": "0x00002420",
        "instructions": [
            "jmp qword [reloc.curl_easy_cleanup]"
        ]
    },
    "sym.createOwnerFile": {
        "function_address": "0x000063b0",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x410",
            "mov qword [rbp - 0x3e8], rdi",
            "mov qword [rbp - 0x3f0], rsi",
            "mov qword [rbp - 0x3f8], rdx",
            "mov qword [rbp - 0x400], rcx",
            "mov qword [rbp - 0x408], r8",
            "cmp qword [rbp - 0x3e8], 0",
            "je 0x63fc",
            "cmp qword [rbp - 0x400], 0",
            "je 0x63fc",
            "cmp qword [rbp - 0x408], 0",
            "jne 0x6406",
            "mov eax, 0xffffffff",
            "jmp 0x7730",
            "mov rax, qword [rbp - 0x400]",
            "lea rsi, [0x00010580]",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x6434",
            "cmp qword [rbp - 0x3f0], 0",
            "jne 0x6434",
            "mov eax, 0xffffffff",
            "jmp 0x7730",
            "lea rax, [rbp - 0x160]",
            "mov edx, 0x28",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rdx, qword [rbp - 0x408]",
            "lea rax, [rbp - 0x160]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002050",
            "test eax, eax",
            "je 0x6756",
            "mov r9d, 0x1c",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rdx, [0x000105b9]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0x64ba",
            "jmp 0x673d",
            "mov rax, qword [rbp - 0x38]",
            "mov r8d, 0x1c",
            "lea rcx, str.owner_info.c",
            "lea rdx, [0x000105b3]",
            "lea rsi, [0x000105b9]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000105c4]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "jne 0x6537",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x673d",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x40]",
            "mov rax, qword [rbp - 0x38]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000105c8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "jne 0x65b7",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x673d",
            "mov rcx, qword [rbp - 0x40]",
            "mov rdx, qword [rbp - 0x38]",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x000105c8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x48]",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x50], 0",
            "jmp 0x65fc",
            "mov rax, qword [rbp - 0x50]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x50]",
            "add rax, 1",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "lea rsi, [0x000105cd]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "jne 0x65e9",
            "mov esi, 0",
            "lea rdi, [0x000105d0]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x6719",
            "lea rsi, [0x000105e8]",
            "lea rdi, [0x000105d0]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x58], rax",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x178], rax",
            "lea rdx, [rbp - 0x3a0]",
            "lea rax, [rbp - 0x178]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "je 0x66b8",
            "mov rdx, qword [rbp - 0x60]",
            "lea rax, [rbp - 0x2a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000105ea]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x58]",
            "mov r9d, 0x1c",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rsi, [0x000105fc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rax, [rbp - 0x160]",
            "mov rdi, rax",
            "call fcn.00002100",
            "mov eax, 0xffffffff",
            "jmp 0x7730",
            "mov qword [rbp - 0x168], 0",
            "mov qword [rbp - 0x170], 0",
            "mov rdx, qword [rbp - 0x408]",
            "lea rcx, [rbp - 0x170]",
            "lea rax, [rbp - 0x168]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002380",
            "test eax, eax",
            "je 0x6aaf",
            "mov r9d, 0x25",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rdx, [0x000105b9]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0x67e0",
            "jmp 0x6a78",
            "mov rax, qword [rbp - 0x68]",
            "mov r8d, 0x25",
            "lea rcx, str.owner_info.c",
            "lea rdx, [0x000105b3]",
            "lea rsi, [0x000105b9]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000105c4]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0x685d",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6a78",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x70]",
            "mov rax, qword [rbp - 0x68]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000105c8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "jne 0x68dd",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6a78",
            "mov rcx, qword [rbp - 0x70]",
            "mov rdx, qword [rbp - 0x68]",
            "mov rax, qword [rbp - 0x78]",
            "lea rsi, [0x000105c8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x78]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x80], 0",
            "jmp 0x6922",
            "mov rax, qword [rbp - 0x80]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x80]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000105cd]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x80], rax",
            "cmp qword [rbp - 0x80], 0",
            "jne 0x690f",
            "mov esi, 0",
            "lea rdi, [0x000105d0]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x6a54",
            "lea rsi, [0x000105e8]",
            "lea rdi, [0x000105d0]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x88], rax",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x180], rax",
            "lea rdx, [rbp - 0x3a0]",
            "lea rax, [rbp - 0x180]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "je 0x69ea",
            "mov rdx, qword [rbp - 0x90]",
            "lea rax, [rbp - 0x2a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000105ea]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x88]",
            "mov r9d, 0x25",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rsi, [0x000105fc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x88]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x78]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x168]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x170]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rax, [rbp - 0x160]",
            "mov rdi, rax",
            "call fcn.00002100",
            "mov eax, 0xffffffff",
            "jmp 0x7730",
            "mov rdi, qword [rbp - 0x170]",
            "mov rsi, qword [rbp - 0x168]",
            "mov r9, qword [rbp - 0x148]",
            "mov r8, qword [rbp - 0x150]",
            "mov rcx, qword [rbp - 0x158]",
            "mov rdx, qword [rbp - 0x160]",
            "mov rax, qword [rbp - 0x3e8]",
            "push qword [rbp - 0x3f8]",
            "push rdi",
            "push qword [rbp - 0x3f0]",
            "push rsi",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_registration__n_t_owner__s__owner__n_t_model__s__model__n_t_firmware_id__s__firmware_id__n_t_firmware_time__s__firmware_time__n_t_serial__s__serial__n_t_x_agent_id__s__x_agent_id__n_t_p2powner__s__p2powner__n_t_x_agent_claim_code__s__x_agent_claim_code__n_t_token__s__token__n__registration__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "add rsp, 0x20",
            "mov qword [rbp - 0x98], rax",
            "lea rax, [rbp - 0x160]",
            "mov rdi, rax",
            "call fcn.00002100",
            "mov rax, qword [rbp - 0x168]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x170]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x400]",
            "mov rdi, rax",
            "call fcn.00002550",
            "mov dword [rbp - 0x9c], eax",
            "cmp dword [rbp - 0x9c], 0xffffffff",
            "jne 0x6bd4",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x2a0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x400]",
            "mov rsi, rax",
            "lea rdi, [0x0001074a]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x408]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7730",
            "mov dword [rbp - 0x14], 0xffffffff",
            "mov rax, qword [rbp - 0x400]",
            "lea rsi, [0x00010760]",
            "mov rdi, rax",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "je 0x6fcc",
            "mov rdx, qword [rbp - 0xa8]",
            "mov rax, qword [rbp - 0x98]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.fputs",
            "cmp eax, 0xffffffff",
            "je 0x6c30",
            "mov dword [rbp - 0x14], 0",
            "jmp 0x735e",
            "lea rdx, [rbp - 0x3a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x3a0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rdx, [rbp - 0x3a0]",
            "mov rax, qword [rbp - 0x400]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_write_to_file__s:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x408]",
            "mov qword [rax], rdx",
            "mov r9d, 0x55",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rdx, [0x000105b9]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb0], rax",
            "cmp qword [rbp - 0xb0], 0",
            "jne 0x6ce5",
            "jmp 0x6fc7",
            "mov rax, qword [rbp - 0xb0]",
            "mov r8d, 0x55",
            "lea rcx, str.owner_info.c",
            "lea rdx, [0x000105b3]",
            "lea rsi, [0x000105b9]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000105c4]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "jne 0x6d6e",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6fc7",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xb8]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xb8]",
            "mov rax, qword [rbp - 0xb0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000105c8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc0], rax",
            "cmp qword [rbp - 0xc0], 0",
            "jne 0x6e03",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x6fc7",
            "mov rcx, qword [rbp - 0xb8]",
            "mov rdx, qword [rbp - 0xb0]",
            "mov rax, qword [rbp - 0xc0]",
            "lea rsi, [0x000105c8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xc0]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xc8], 0",
            "jmp 0x6e5d",
            "mov rax, qword [rbp - 0xc8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xc8]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000105cd]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "jne 0x6e44",
            "mov esi, 0",
            "lea rdi, [0x000105d0]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x6f95",
            "lea rsi, [0x000105e8]",
            "lea rdi, [0x000105d0]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xd0], rax",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x188], rax",
            "lea rdx, [rbp - 0x3e0]",
            "lea rax, [rbp - 0x188]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xd8], rax",
            "cmp qword [rbp - 0xd8], 0",
            "je 0x6f2b",
            "mov rdx, qword [rbp - 0xd8]",
            "lea rax, [rbp - 0x2a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000105ea]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0xd0]",
            "mov r9d, 0x55",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rsi, [0x000105fc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xd0]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x735e",
            "jmp 0x735e",
            "lea rdx, [rbp - 0x3a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x3a0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rdx, [rbp - 0x3a0]",
            "mov rax, qword [rbp - 0x400]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_open_file__s_for_write:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x408]",
            "mov qword [rax], rdx",
            "mov r9d, 0x5d",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rdx, [0x000105b9]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xe0], rax",
            "cmp qword [rbp - 0xe0], 0",
            "jne 0x7081",
            "jmp 0x735e",
            "mov rax, qword [rbp - 0xe0]",
            "mov r8d, 0x5d",
            "lea rcx, str.owner_info.c",
            "lea rdx, [0x000105b3]",
            "lea rsi, [0x000105b9]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000105c4]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xe8], rax",
            "cmp qword [rbp - 0xe8], 0",
            "jne 0x710a",
            "mov rax, qword [rbp - 0xe0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x735e",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xe8]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xe8]",
            "mov rax, qword [rbp - 0xe0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000105c8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf0], rax",
            "cmp qword [rbp - 0xf0], 0",
            "jne 0x719f",
            "mov rax, qword [rbp - 0xe0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x735e",
            "mov rcx, qword [rbp - 0xe8]",
            "mov rdx, qword [rbp - 0xe0]",
            "mov rax, qword [rbp - 0xf0]",
            "lea rsi, [0x000105c8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xf0]",
            "mov qword [rbp - 0x28], rax",
            "mov qword [rbp - 0xf8], 0",
            "jmp 0x71f9",
            "mov rax, qword [rbp - 0xf8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xf8]",
            "add rax, 1",
            "mov qword [rbp - 0x28], rax",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000105cd]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xf8], rax",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0x71e0",
            "mov esi, 0",
            "lea rdi, [0x000105d0]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x7331",
            "lea rsi, [0x000105e8]",
            "lea rdi, [0x000105d0]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x100], rax",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - segment.NOTE], rax",
            "lea rdx, [rbp - 0x3e0]",
            "lea rax, segment.NOTE",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x108], rax",
            "cmp qword [rbp - 0x108], 0",
            "je 0x72c7",
            "mov rdx, qword [rbp - 0x108]",
            "lea rax, [rbp - 0x2a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000105ea]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x100]",
            "mov r9d, 0x5d",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rsi, [0x000105fc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x100]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x100]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xe0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "test eax, eax",
            "je 0x7716",
            "lea rdx, [rbp - 0x3a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x3a0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rdx, [rbp - 0x3a0]",
            "mov rax, qword [rbp - 0x400]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_cloase_file__s:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x408]",
            "mov qword [rax], rdx",
            "mov r9d, 0x67",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rdx, [0x000105b9]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x110], rax",
            "cmp qword [rbp - 0x110], 0",
            "jne 0x7439",
            "jmp 0x7716",
            "mov rax, qword [rbp - 0x110]",
            "mov r8d, 0x67",
            "lea rcx, str.owner_info.c",
            "lea rdx, [0x000105b3]",
            "lea rsi, [0x000105b9]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000105c4]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x118], rax",
            "cmp qword [rbp - 0x118], 0",
            "jne 0x74c2",
            "mov rax, qword [rbp - 0x110]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x7716",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x118]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x118]",
            "mov rax, qword [rbp - 0x110]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000105c8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x120], rax",
            "cmp qword [rbp - 0x120], 0",
            "jne 0x7557",
            "mov rax, qword [rbp - 0x110]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x7716",
            "mov rcx, qword [rbp - 0x118]",
            "mov rdx, qword [rbp - 0x110]",
            "mov rax, qword [rbp - 0x120]",
            "lea rsi, [0x000105c8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x120]",
            "mov qword [rbp - 0x30], rax",
            "mov qword [rbp - 0x128], 0",
            "jmp 0x75b1",
            "mov rax, qword [rbp - 0x128]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x128]",
            "add rax, 1",
            "mov qword [rbp - 0x30], rax",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000105cd]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x128], rax",
            "cmp qword [rbp - 0x128], 0",
            "jne 0x7598",
            "mov esi, 0",
            "lea rdi, [0x000105d0]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x76e9",
            "lea rsi, [0x000105e8]",
            "lea rdi, [0x000105d0]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x130], rax",
            "lea rdx, [rbp - 0x2a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x198], rax",
            "lea rdx, [rbp - 0x3e0]",
            "lea rax, [rbp - 0x198]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x138], rax",
            "cmp qword [rbp - 0x138], 0",
            "je 0x767f",
            "mov rdx, qword [rbp - 0x138]",
            "lea rax, [rbp - 0x2a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000105ea]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x2a0]",
            "mov rax, qword [rbp - 0x130]",
            "mov r9d, 0x67",
            "lea r8, str.owner_info.c",
            "lea rcx, [0x000105b3]",
            "lea rsi, [0x000105fc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x408]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x130]",
            "lea rsi, [0x000105c4]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x130]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x110]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x120]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov edx, dword [rbp - 0x9c]",
            "mov rax, qword [rbp - 0x400]",
            "mov esi, edx",
            "mov rdi, rax",
            "call fcn.000021b0",
            "mov eax, dword [rbp - 0x14]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002050": {
        "function_address": "0x00002050",
        "instructions": [
            "jmp qword [reloc.getSystemInfo]"
        ]
    },
    "fcn.00002380": {
        "function_address": "0x00002380",
        "instructions": [
            "jmp qword [reloc.getXAgentInfo]"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x00002190",
        "instructions": [
            "jmp qword [reloc.fputs]"
        ]
    },
    "sym.freeRemoteConf": {
        "function_address": "0x0000efb0",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_FreeRegistrationInfo": {
        "function_address": "0x0000ca89",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "jne 0xca9e",
            "jmp 0xcb1d",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "sym.freeRegInfo": {
        "function_address": "0x0000e33e",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "je 0xe38c",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "sym.getXAgentInfo": {
        "function_address": "0x00010004",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x50",
            "mov qword [rbp - 0x38], rdi",
            "mov qword [rbp - 0x40], rsi",
            "mov qword [rbp - 0x48], rdx",
            "cmp qword [rbp - 0x38], 0",
            "je 0x1002d",
            "cmp qword [rbp - 0x40], 0",
            "je 0x1002d",
            "cmp qword [rbp - 0x48], 0",
            "jne 0x10037",
            "mov eax, 0xffffffff",
            "jmp 0x101e8",
            "lea rsi, [0x00012428]",
            "lea rdi, str._opt_xcloud_etc_xagent.conf",
            "call sym.imp.fopen64",
            "mov qword [rbp - 8], rax",
            "cmp qword [rbp - 8], 0",
            "jne 0x1005f",
            "mov eax, 0xffffffff",
            "jmp 0x101e8",
            "mov qword [rbp - 0x18], 0",
            "mov qword [rbp - 0x20], 0",
            "mov qword [rbp - 0x10], 0",
            "jmp 0x10161",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.delGaps",
            "mov qword [rbp - 0x28], 0",
            "mov qword [rbp - 0x30], 0",
            "mov rax, qword [rbp - 0x18]",
            "lea rcx, [rbp - 0x28]",
            "lea rdx, [rbp - 0x30]",
            "lea rsi, str._m___ms",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.__isoc99_sscanf",
            "cmp eax, 2",
            "jne 0x10149",
            "mov rax, qword [rbp - 0x30]",
            "test rax, rax",
            "je 0x100d5",
            "mov rax, qword [rbp - 0x30]",
            "movzx eax, byte [rax]",
            "cmp al, 0x23",
            "jne 0x100ef",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x10161",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, str.x_agent_id",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x1011c",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call fcn.00002470",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x38]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, str.x_agent_claim_code",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x10149",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call fcn.00002470",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x40]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rdx, qword [rbp - 8]",
            "lea rcx, [rbp - 0x20]",
            "lea rax, [rbp - 0x18]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.getline",
            "mov qword [rbp - 0x10], rax",
            "cmp qword [rbp - 0x10], 0",
            "jg 0x1007c",
            "mov rax, qword [rbp - 0x38]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0x101a9",
            "lea rdi, [0x0001246f]",
            "call fcn.00002470",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x38]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x40]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0x101cb",
            "lea rdi, [0x0001246f]",
            "call fcn.00002470",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x40]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.delGaps": {
        "function_address": "0x0000ff61",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xff79",
            "jmp 0x10002",
            "mov qword [rbp - 8], 0",
            "mov qword [rbp - 0x10], 0",
            "jmp 0xffe2",
            "call sym.imp.__ctype_b_loc",
            "mov rax, qword [rax]",
            "mov rcx, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 8]",
            "add rdx, rcx",
            "movzx edx, byte [rdx]",
            "movsx rdx, dl",
            "add rdx, rdx",
            "add rax, rdx",
            "movzx eax, word [rax]",
            "movzx eax, ax",
            "and eax, sym.imp.unlink",
            "test eax, eax",
            "jne 0xffdd",
            "mov rax, qword [rbp - 0x10]",
            "lea rdx, [rax + 1]",
            "mov qword [rbp - 0x10], rdx",
            "mov rdx, qword [rbp - 0x18]",
            "add rdx, rax",
            "mov rcx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 8]",
            "add rax, rcx",
            "movzx eax, byte [rax]",
            "mov byte [rdx], al",
            "add qword [rbp - 8], 1",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 8]",
            "add rax, rdx",
            "movzx eax, byte [rax]",
            "test al, al",
            "jne 0xff8b",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "add rax, rdx",
            "mov byte [rax], 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.__isoc99_sscanf": {
        "function_address": "0x00002360",
        "instructions": [
            "jmp qword [reloc.__isoc99_sscanf]"
        ]
    },
    "fcn.00002470": {
        "function_address": "0x00002470",
        "instructions": [
            "jmp qword [reloc.Strdup]"
        ]
    },
    "sym.imp.getline": {
        "function_address": "0x000024d0",
        "instructions": [
            "jmp qword [reloc.getline]"
        ]
    },
    "sym.rcloud_GetRegistrationInfo": {
        "function_address": "0x0000c507",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1a0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "cmp qword [rbp - 0x198], 0",
            "je 0xc534",
            "cmp qword [rbp - 0x1a0], 0",
            "jne 0xc549",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xca87",
            "mov dword [rbp - 4], 0xffffffff",
            "mov esi, 0",
            "lea rdi, [0x00011170]",
            "call sym.imp.access",
            "test eax, eax",
            "je 0xc58d",
            "lea rdi, str.Registration_Info_unavailable",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a0]",
            "mov qword [rax], rdx",
            "mov eax, 0xffffffff",
            "jmp 0xca87",
            "lea rdi, [0x00011170]",
            "call fcn.00002550",
            "mov dword [rbp - 0x14], eax",
            "cmp dword [rbp - 0x14], 0xffffffff",
            "je 0xca10",
            "mov rax, qword [rbp - 0x198]",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, [0x0001136f]",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 8]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, [0x00011383]",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x10]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_model",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x18]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_firmware_id",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x20]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_firmware_time",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x28]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_serial",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x30]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_x_agent_id",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xc71d",
            "mov rax, qword [rbp - 0x198]",
            "lea rdx, [rax + 0x38]",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rcx, rax",
            "lea rsi, str._registration_x_agent_claim_code",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "je 0xca05",
            "mov r9d, 0x14c",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xc769",
            "jmp 0xca03",
            "mov rax, qword [rbp - 0x20]",
            "mov r8d, 0x14c",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rax, qword [rax]",
            "mov r8, rax",
            "lea rcx, [0x00011170]",
            "lea rdx, str.Cannot_retrieve_data_from__s:__s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xc7ed",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xca03",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x28]",
            "mov rcx, rdx",
            "lea rdx, [0x00011170]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x28]",
            "mov rax, qword [rbp - 0x20]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xc877",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xca03",
            "mov rcx, qword [rbp - 0x28]",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x30]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x38], 0",
            "jmp 0xc8bc",
            "mov rax, qword [rbp - 0x38]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x38]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0xc8a9",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xc9dd",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x40], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x50], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x50]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "je 0xc972",
            "mov rdx, qword [rbp - 0x48]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x40]",
            "mov r9d, 0x14c",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x40]",
            "mov rcx, rdx",
            "lea rdx, [0x00011170]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xca0e",
            "jmp 0xca0e",
            "mov dword [rbp - 4], 0",
            "jmp 0xca73",
            "jmp 0xca73",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x150]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x150]",
            "mov rdx, rax",
            "lea rsi, [0x00011170]",
            "lea rdi, str.Failed_to_lock__s:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a0]",
            "mov qword [rax], rdx",
            "mov eax, dword [rbp - 0x14]",
            "mov esi, eax",
            "lea rdi, [0x00011170]",
            "call fcn.000021b0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_RegisterTmp": {
        "function_address": "0x00009aac",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x2b0",
            "mov qword [rbp - 0x2a8], rdi",
            "cmp qword [rbp - 0x2a8], 0",
            "jne 0x9add",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xabb1",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x128], 0",
            "mov qword [rbp - 0x130], 0",
            "mov qword [rbp - 0x138], 0",
            "mov rdx, qword [rbp - 0x2a8]",
            "lea rax, [rbp - 0x138]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002370",
            "test eax, eax",
            "jne 0xa17c",
            "mov rax, qword [rbp - 0x138]",
            "mov rdx, qword [rbp - 0x2a8]",
            "mov r8, rdx",
            "lea rcx, str._opt_readycloud_etc_registration_tmp.conf",
            "mov edx, 0",
            "mov esi, 0",
            "mov rdi, rax",
            "call fcn.000024c0",
            "test eax, eax",
            "jne 0xa17c",
            "mov rdx, qword [rbp - 0x2a8]",
            "lea rax, [rbp - 0x128]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002030",
            "test eax, eax",
            "jne 0xa17c",
            "mov rax, qword [rbp - 0x128]",
            "mov rdx, qword [rbp - 0x2a8]",
            "lea rcx, [rbp - 0x130]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "jne 0xa17c",
            "mov rax, qword [rbp - 0x130]",
            "lea rsi, str.SUCCESS",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x130]",
            "cmp rdx, rax",
            "jne 0xa17c",
            "mov dword [rbp - 4], 0",
            "mov r9d, 0x73",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0x9c1d",
            "jmp 0x9e97",
            "mov rax, qword [rbp - 0x38]",
            "mov r8d, 0x73",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x128]",
            "mov rcx, rax",
            "lea rdx, str.request:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "jne 0x9c97",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9e97",
            "mov rdx, qword [rbp - 0x128]",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x40]",
            "mov rax, qword [rbp - 0x38]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "jne 0x9d14",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x9e97",
            "mov rcx, qword [rbp - 0x40]",
            "mov rdx, qword [rbp - 0x38]",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x48]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x50], 0",
            "jmp 0x9d59",
            "mov rax, qword [rbp - 0x50]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x50]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "jne 0x9d46",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x9e73",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x58], rax",
            "lea rdx, [rbp - 0x260]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x140], rax",
            "lea rdx, [rbp - 0x2a0]",
            "lea rax, [rbp - 0x140]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "je 0x9e15",
            "mov rdx, qword [rbp - 0x60]",
            "lea rax, [rbp - 0x260]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x260]",
            "mov rax, qword [rbp - 0x58]",
            "mov r9d, 0x73",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x128]",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x74",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0x9ee3",
            "jmp 0xa177",
            "mov rax, qword [rbp - 0x68]",
            "mov r8d, 0x74",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x130]",
            "mov rcx, rax",
            "lea rdx, str.response:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0x9f5d",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa177",
            "mov rdx, qword [rbp - 0x130]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x70]",
            "mov rax, qword [rbp - 0x68]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "jne 0x9fda",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa177",
            "mov rcx, qword [rbp - 0x70]",
            "mov rdx, qword [rbp - 0x68]",
            "mov rax, qword [rbp - 0x78]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x78]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x80], 0",
            "jmp 0xa01f",
            "mov rax, qword [rbp - 0x80]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x80]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x80], rax",
            "cmp qword [rbp - 0x80], 0",
            "jne 0xa00c",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xa14e",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x88], rax",
            "lea rdx, [rbp - 0x260]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x148], rax",
            "lea rdx, [rbp - 0x2a0]",
            "lea rax, [rbp - 0x148]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "je 0xa0e7",
            "mov rdx, qword [rbp - 0x90]",
            "lea rax, [rbp - 0x260]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x260]",
            "mov rax, qword [rbp - 0x88]",
            "mov r9d, 0x74",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x130]",
            "mov rax, qword [rbp - 0x88]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x78]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xab81",
            "jmp 0xab81",
            "mov r9d, 0x78",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "jne 0xa1ce",
            "jmp 0xa4ab",
            "mov rax, qword [rbp - 0x98]",
            "mov r8d, 0x78",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x2a8]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa0], rax",
            "cmp qword [rbp - 0xa0], 0",
            "jne 0xa257",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa4ab",
            "mov rax, qword [rbp - 0x2a8]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xa0]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xa0]",
            "mov rax, qword [rbp - 0x98]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "jne 0xa2ec",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa4ab",
            "mov rcx, qword [rbp - 0xa0]",
            "mov rdx, qword [rbp - 0x98]",
            "mov rax, qword [rbp - 0xa8]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xa8]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xb0], 0",
            "jmp 0xa346",
            "mov rax, qword [rbp - 0xb0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xb0]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xb0], rax",
            "cmp qword [rbp - 0xb0], 0",
            "jne 0xa32d",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xa47e",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xb8], rax",
            "lea rdx, [rbp - 0x260]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x150], rax",
            "lea rdx, [rbp - 0x2a0]",
            "lea rax, [rbp - 0x150]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xc0], rax",
            "cmp qword [rbp - 0xc0], 0",
            "je 0xa414",
            "mov rdx, qword [rbp - 0xc0]",
            "lea rax, [rbp - 0x260]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x260]",
            "mov rax, qword [rbp - 0xb8]",
            "mov r9d, 0x78",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x2a8]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xb8]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x79",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "jne 0xa4fd",
            "jmp 0xa816",
            "mov rax, qword [rbp - 0xc8]",
            "mov r8d, 0x79",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x128]",
            "test rax, rax",
            "je 0xa541",
            "mov rax, qword [rbp - 0x128]",
            "jmp 0xa548",
            "lea rax, str.NULL",
            "mov rcx, rax",
            "lea rdx, str.request:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xd0], rax",
            "cmp qword [rbp - 0xd0], 0",
            "jne 0xa598",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa816",
            "mov rax, qword [rbp - 0x128]",
            "test rax, rax",
            "je 0xa5ad",
            "mov rax, qword [rbp - 0x128]",
            "jmp 0xa5b4",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0xd0]",
            "mov rdx, rax",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xd0]",
            "mov rax, qword [rbp - 0xc8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xd8], rax",
            "cmp qword [rbp - 0xd8], 0",
            "jne 0xa642",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xa816",
            "mov rcx, qword [rbp - 0xd0]",
            "mov rdx, qword [rbp - 0xc8]",
            "mov rax, qword [rbp - 0xd8]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xd8]",
            "mov qword [rbp - 0x28], rax",
            "mov qword [rbp - 0xe0], 0",
            "jmp 0xa69c",
            "mov rax, qword [rbp - 0xe0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xe0]",
            "add rax, 1",
            "mov qword [rbp - 0x28], rax",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xe0], rax",
            "cmp qword [rbp - 0xe0], 0",
            "jne 0xa683",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xa7e9",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xe8], rax",
            "lea rdx, [rbp - 0x260]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x158], rax",
            "lea rdx, [rbp - 0x2a0]",
            "lea rax, [rbp - 0x158]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xf0], rax",
            "cmp qword [rbp - 0xf0], 0",
            "je 0xa76a",
            "mov rdx, qword [rbp - 0xf0]",
            "lea rax, [rbp - 0x260]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x260]",
            "mov rax, qword [rbp - 0xe8]",
            "mov r9d, 0x79",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x128]",
            "test rax, rax",
            "je 0xa7b5",
            "mov rax, qword [rbp - 0x128]",
            "jmp 0xa7bc",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0xe8]",
            "mov rdx, rax",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xe8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xd8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x7a",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xf8], rax",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0xa868",
            "jmp 0xab81",
            "mov rax, qword [rbp - 0xf8]",
            "mov r8d, 0x7a",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x130]",
            "test rax, rax",
            "je 0xa8ac",
            "mov rax, qword [rbp - 0x130]",
            "jmp 0xa8b3",
            "lea rax, str.NULL",
            "mov rcx, rax",
            "lea rdx, str.response:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x100], rax",
            "cmp qword [rbp - 0x100], 0",
            "jne 0xa903",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xab81",
            "mov rax, qword [rbp - 0x130]",
            "test rax, rax",
            "je 0xa918",
            "mov rax, qword [rbp - 0x130]",
            "jmp 0xa91f",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0x100]",
            "mov rdx, rax",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x100]",
            "mov rax, qword [rbp - 0xf8]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x108], rax",
            "cmp qword [rbp - 0x108], 0",
            "jne 0xa9ad",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x100]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xab81",
            "mov rcx, qword [rbp - 0x100]",
            "mov rdx, qword [rbp - 0xf8]",
            "mov rax, qword [rbp - 0x108]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x108]",
            "mov qword [rbp - 0x30], rax",
            "mov qword [rbp - 0x110], 0",
            "jmp 0xaa07",
            "mov rax, qword [rbp - 0x110]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x110]",
            "add rax, 1",
            "mov qword [rbp - 0x30], rax",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x110], rax",
            "cmp qword [rbp - 0x110], 0",
            "jne 0xa9ee",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xab54",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x118], rax",
            "lea rdx, [rbp - 0x260]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x160], rax",
            "lea rdx, [rbp - 0x2a0]",
            "lea rax, [rbp - 0x160]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x120], rax",
            "cmp qword [rbp - 0x120], 0",
            "je 0xaad5",
            "mov rdx, qword [rbp - 0x120]",
            "lea rax, [rbp - 0x260]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x260]",
            "mov rax, qword [rbp - 0x118]",
            "mov r9d, 0x7a",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x130]",
            "test rax, rax",
            "je 0xab20",
            "mov rax, qword [rbp - 0x130]",
            "jmp 0xab27",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0x118]",
            "mov rdx, rax",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x118]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xf8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x100]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x108]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x128]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x130]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x138]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002370": {
        "function_address": "0x00002370",
        "instructions": [
            "jmp qword [reloc.getNasName]"
        ]
    },
    "fcn.00002030": {
        "function_address": "0x00002030",
        "instructions": [
            "jmp qword [reloc.buildXMLRegisterTmp]"
        ]
    },
    "sym.rcloud_Unregister": {
        "function_address": "0x0000abb3",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x280",
            "mov qword [rbp - 0x268], rdi",
            "mov qword [rbp - 0x270], rsi",
            "mov qword [rbp - 0x278], rdx",
            "cmp qword [rbp - 0x268], 0",
            "je 0xabf1",
            "cmp qword [rbp - 0x270], 0",
            "je 0xabf1",
            "cmp qword [rbp - 0x278], 0",
            "jne 0xac06",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xb8ff",
            "mov r9d, 0x8c",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xac52",
            "jmp 0xaee4",
            "mov rax, qword [rbp - 0x30]",
            "mov r8d, 0x8c",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x00011136]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x270]",
            "mov rax, qword [rbp - 0x268]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, str.rcloud_Unregister_name_s_pass_s__n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0xacd6",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xaee4",
            "mov rcx, qword [rbp - 0x270]",
            "mov rdx, qword [rbp - 0x268]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, str.rcloud_Unregister_name_s_pass_s__n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x38]",
            "mov rax, qword [rbp - 0x30]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "jne 0xad5a",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xaee4",
            "mov rcx, qword [rbp - 0x38]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x40]",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x48], 0",
            "jmp 0xad9f",
            "mov rax, qword [rbp - 0x48]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x48]",
            "add rax, 1",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "jne 0xad8c",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xaec0",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x50], rax",
            "lea rdx, [rbp - 0x220]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xf8], rax",
            "lea rdx, [rbp - 0x260]",
            "lea rax, [rbp - 0xf8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x58], rax",
            "cmp qword [rbp - 0x58], 0",
            "je 0xae5b",
            "mov rdx, qword [rbp - 0x58]",
            "lea rax, [rbp - 0x220]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x220]",
            "mov rax, qword [rbp - 0x50]",
            "mov r9d, 0x8c",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x00011136]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rcx, qword [rbp - 0x270]",
            "mov rdx, qword [rbp - 0x268]",
            "mov rax, qword [rbp - 0x50]",
            "lea rsi, str.rcloud_Unregister_name_s_pass_s__n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov dword [rbp - 0xc], 0xffffffff",
            "mov qword [rbp - 0xf0], 0",
            "mov rcx, qword [rbp - 0x278]",
            "lea rdx, [rbp - 0xf0]",
            "mov rsi, qword [rbp - 0x270]",
            "mov rax, qword [rbp - 0x268]",
            "mov rdi, rax",
            "call fcn.00002460",
            "test eax, eax",
            "jne 0xb8ed",
            "mov r9d, 0x93",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "jne 0xaf6e",
            "jmp 0xb1f1",
            "mov rax, qword [rbp - 0x60]",
            "mov r8d, 0x93",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xf0]",
            "mov rcx, rax",
            "lea rdx, str.request:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0xafe8",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb1f1",
            "mov rdx, qword [rbp - 0xf0]",
            "mov rax, qword [rbp - 0x68]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x68]",
            "mov rax, qword [rbp - 0x60]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0xb065",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb1f1",
            "mov rcx, qword [rbp - 0x68]",
            "mov rdx, qword [rbp - 0x60]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x70]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x78], 0",
            "jmp 0xb0aa",
            "mov rax, qword [rbp - 0x78]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x78]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "jne 0xb097",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xb1cd",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x80], rax",
            "lea rdx, [rbp - 0x220]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x108], rax",
            "lea rdx, [rbp - 0x260]",
            "lea rax, [rbp - 0x108]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x88], rax",
            "cmp qword [rbp - 0x88], 0",
            "je 0xb16f",
            "mov rdx, qword [rbp - 0x88]",
            "lea rax, [rbp - 0x220]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x220]",
            "mov rax, qword [rbp - 0x80]",
            "mov r9d, 0x93",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0xf0]",
            "mov rax, qword [rbp - 0x80]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov qword [rbp - 0x100], 0",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdx, qword [rbp - 0x278]",
            "lea rcx, [rbp - 0x100]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "jne 0xb8de",
            "mov r9d, 0x98",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "jne 0xb276",
            "jmp 0xb54a",
            "mov rax, qword [rbp - 0x90]",
            "mov r8d, 0x98",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x100]",
            "mov rcx, rax",
            "lea rdx, str.response:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "jne 0xb2fc",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb54a",
            "mov rdx, qword [rbp - 0x100]",
            "mov rax, qword [rbp - 0x98]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x98]",
            "mov rax, qword [rbp - 0x90]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa0], rax",
            "cmp qword [rbp - 0xa0], 0",
            "jne 0xb38e",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb54a",
            "mov rcx, qword [rbp - 0x98]",
            "mov rdx, qword [rbp - 0x90]",
            "mov rax, qword [rbp - 0xa0]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xa0]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xa8], 0",
            "jmp 0xb3e8",
            "mov rax, qword [rbp - 0xa8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xa8]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "jne 0xb3cf",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xb51d",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xb0], rax",
            "lea rdx, [rbp - 0x220]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x110], rax",
            "lea rdx, [rbp - 0x260]",
            "lea rax, [rbp - 0x110]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "je 0xb4b6",
            "mov rdx, qword [rbp - 0xb8]",
            "lea rax, [rbp - 0x220]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x220]",
            "mov rax, qword [rbp - 0xb0]",
            "mov r9d, 0x98",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x100]",
            "mov rax, qword [rbp - 0xb0]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x100]",
            "lea rsi, str.SUCCESS",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x100]",
            "cmp rdx, rax",
            "jne 0xb587",
            "mov dword [rbp - 0xc], 0",
            "lea rdi, [0x00011170]",
            "call sym.imp.unlink",
            "jmp 0xb8de",
            "mov rax, qword [rbp - 0x100]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_unregister:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x278]",
            "mov qword [rax], rdx",
            "mov r9d, 0xa2",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc0], rax",
            "cmp qword [rbp - 0xc0], 0",
            "jne 0xb601",
            "jmp 0xb8de",
            "mov rax, qword [rbp - 0xc0]",
            "mov r8d, 0xa2",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x278]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, str.Uregister_error:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "jne 0xb68a",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb8de",
            "mov rax, qword [rbp - 0x278]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xc8]",
            "lea rsi, str.Uregister_error:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xc8]",
            "mov rax, qword [rbp - 0xc0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xd0], rax",
            "cmp qword [rbp - 0xd0], 0",
            "jne 0xb71f",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xb8de",
            "mov rcx, qword [rbp - 0xc8]",
            "mov rdx, qword [rbp - 0xc0]",
            "mov rax, qword [rbp - 0xd0]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xd0]",
            "mov qword [rbp - 0x28], rax",
            "mov qword [rbp - 0xd8], 0",
            "jmp 0xb779",
            "mov rax, qword [rbp - 0xd8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xd8]",
            "add rax, 1",
            "mov qword [rbp - 0x28], rax",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xd8], rax",
            "cmp qword [rbp - 0xd8], 0",
            "jne 0xb760",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xb8b1",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xe0], rax",
            "lea rdx, [rbp - 0x220]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x118], rax",
            "lea rdx, [rbp - 0x260]",
            "lea rax, [rbp - 0x118]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xe8], rax",
            "cmp qword [rbp - 0xe8], 0",
            "je 0xb847",
            "mov rdx, qword [rbp - 0xe8]",
            "lea rax, [rbp - 0x220]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x220]",
            "mov rax, qword [rbp - 0xe0]",
            "mov r9d, 0xa2",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x278]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xe0]",
            "lea rsi, str.Uregister_error:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xe0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x100]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xf0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0xc]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002460": {
        "function_address": "0x00002460",
        "instructions": [
            "jmp qword [reloc.buildXMLUnregister]"
        ]
    },
    "main": {
        "function_address": "0x00007c22",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov dword [rbp - 0x24], edi",
            "mov qword [rbp - 0x30], rsi",
            "cmp dword [rbp - 0x24], 1",
            "jg 0x7c4d",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call fcn.00002280",
            "mov eax, 0",
            "jmp 0x7f4f",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, str.status",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7cfa",
            "mov eax, 0",
            "call fcn.000023e0",
            "test eax, eax",
            "jne 0x7c89",
            "lea rdi, str.Registered:_OK",
            "call sym.imp.puts",
            "mov qword [rbp - 0x10], 0",
            "mov qword [rbp - 0x18], 0",
            "lea rdx, [rbp - 0x18]",
            "lea rax, [rbp - 0x10]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002260",
            "test eax, eax",
            "jne 0x7cca",
            "mov rax, qword [rbp - 0x10]",
            "mov rsi, rax",
            "lea rdi, str.Owner:__s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "jmp 0x7ce2",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str.rcloud_GetOwner___Error:__s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, str.leave",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7d22",
            "mov eax, 0",
            "call sym.leave_cloud",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, [0x00010f70]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "je 0x7d5e",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, [0x00010f73]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7d94",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, [0x00010f70]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7d85",
            "lea rax, [0x00010f2a]",
            "jmp 0x7d8c",
            "lea rax, [0x00010d5e]",
            "mov rdi, rax",
            "call sym.protocol_readycloud",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, str.join",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7def",
            "cmp dword [rbp - 0x24], 3",
            "jg 0x7dce",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call fcn.00002280",
            "mov eax, 0",
            "jmp 0x7f4f",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 0x18",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 0x10",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.join_cloud",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 8",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, str.test",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x7f4a",
            "cmp dword [rbp - 0x24], 3",
            "jg 0x7e2d",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call fcn.00002280",
            "mov eax, 0",
            "jmp 0x7f4f",
            "mov dword [rbp - 4], 0",
            "lea rdi, str.Leave_Cloud...",
            "call sym.imp.puts",
            "mov eax, 0",
            "call sym.leave_cloud",
            "mov dword [rbp - 4], eax",
            "cmp dword [rbp - 4], 0",
            "jne 0x7e5c",
            "lea rax, [0x00010f90]",
            "jmp 0x7e63",
            "lea rax, str.Error",
            "mov rsi, rax",
            "lea rdi, str.Leave_Cloud:__s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "cmp dword [rbp - 4], 0",
            "je 0x7e87",
            "mov eax, 0xffffffff",
            "jmp 0x7f4f",
            "lea rdi, str.Join_Cloud...",
            "call sym.imp.puts",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 0x18",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 0x10",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.join_cloud",
            "mov dword [rbp - 4], eax",
            "cmp dword [rbp - 4], 0",
            "jne 0x7ec6",
            "lea rax, [0x00010f90]",
            "jmp 0x7ecd",
            "lea rax, str.Error",
            "mov rsi, rax",
            "lea rdi, str.Join_Cloud:__s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "cmp dword [rbp - 4], 0",
            "je 0x7eee",
            "mov eax, 0xffffffff",
            "jmp 0x7f4f",
            "lea rdi, str.File_registration.conf:",
            "call sym.imp.puts",
            "lea rdi, str.cat__opt_readycloud_etc_registration.conf",
            "call sym.imp.system",
            "mov edi, 0xa",
            "call sym.imp.putchar",
            "lea rdi, str.xagent_status:",
            "call sym.imp.puts",
            "lea rdi, str.systemctl_status_xagent",
            "call sym.imp.system",
            "mov edi, 0xa",
            "call sym.imp.putchar",
            "lea rdi, str.rcbrokerd_status:",
            "call sym.imp.puts",
            "lea rdi, str.systemctl_status_rcbrokerd",
            "call sym.imp.system",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "fcn.00002280": {
        "function_address": "0x00002280",
        "instructions": [
            "jmp qword [reloc.Usage]"
        ]
    },
    "fcn.000023e0": {
        "function_address": "0x000023e0",
        "instructions": [
            "jmp qword [reloc.rcloud_IsRegistered]"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00002040",
        "instructions": [
            "jmp qword [reloc.puts]"
        ]
    },
    "fcn.00002260": {
        "function_address": "0x00002260",
        "instructions": [
            "jmp qword [reloc.rcloud_GetOwner]"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x00002130",
        "instructions": [
            "jmp qword [reloc.printf]"
        ]
    },
    "sym.leave_cloud": {
        "function_address": "0x0000797a",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_trid___xs:set_id_opid__resource_id_CloudOwner__resource_type_CloudOwner___User_id_0__resource_id_0__resource_type_User__is_domain_member_0___User_Name___User_Name__Password___Password__Confirm_false__Confirm___User___xs:set___xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x10], 0",
            "mov dword [rbp - 0x14], 0",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.request:_n_s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x14]",
            "lea rdx, [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "je 0x79fa",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7a9b",
            "mov rax, qword [rbp - 0x10]",
            "test rax, rax",
            "jne 0x7a19",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7a9b",
            "mov rax, qword [rbp - 0x10]",
            "mov rsi, rax",
            "lea rdi, str.respond:_n_s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, str._xs:response_ref_id_opid__status_success__",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "test rax, rax",
            "jne 0x7a68",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7a9b",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rdi, [0x00010d5e]",
            "call sym.protocol_readycloud",
            "mov eax, 0",
            "call sym.clear_cloud_owner",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.protocol_readycloud": {
        "function_address": "0x0000775b",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x28], rdi",
            "mov rax, qword [rbp - 0x28]",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_trid___xs:set_id_opid__resource_id_Protocols__resource_type_Protocol_Collection___Protocol_Collection__Protocol_id_readycloud__resource_id_readycloud__resource_type_Protocol__raw_enabled___enabled__s__status______Protocol_Collection___xs:set___xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x10], 0",
            "mov dword [rbp - 0x14], 0",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.request:_n_s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x14]",
            "lea rdx, [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "je 0x77e6",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x786e",
            "mov rax, qword [rbp - 0x10]",
            "test rax, rax",
            "jne 0x7802",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x786e",
            "mov rax, qword [rbp - 0x10]",
            "mov rsi, rax",
            "lea rdi, str.respond:_n_s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, str._xs:response_ref_id_opid__status_success__",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "test rax, rax",
            "jne 0x7851",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x786e",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.join_cloud": {
        "function_address": "0x00007a9d",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x40",
            "mov qword [rbp - 0x38], rdi",
            "mov qword [rbp - 0x40], rsi",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x38]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.g_base64_encode",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x40]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.g_base64_encode",
            "mov qword [rbp - 0x10], rax",
            "mov rdx, qword [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_trid___xs:set_id_opid__resource_id_CloudOwner__resource_type_CloudOwner___User_id_0__resource_id_0__resource_type_User__is_domain_member_0___User_Name__s__User_Name__Password__s__Password__Confirm_false__Confirm___User___xs:set___xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov qword [rbp - 0x20], 0",
            "mov dword [rbp - 0x24], 0",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str.request:_n_s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x24]",
            "lea rdx, [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "je 0x7b8c",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7c20",
            "mov rax, qword [rbp - 0x20]",
            "test rax, rax",
            "jne 0x7ba8",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7c20",
            "mov rax, qword [rbp - 0x20]",
            "mov rsi, rax",
            "lea rdi, str.respond:_n_s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, str._xs:response_ref_id_opid__status_success__",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "test rax, rax",
            "jne 0x7bf7",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7c20",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rdi, [0x00010f2a]",
            "call sym.protocol_readycloud",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x00002110",
        "instructions": [
            "jmp qword [reloc.system]"
        ]
    },
    "sym.imp.putchar": {
        "function_address": "0x00001fb0",
        "instructions": [
            "jmp qword [reloc.putchar]"
        ]
    },
    "sym.freeEncryptionKeysInfo": {
        "function_address": "0x0000636a",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "jne 0x637f",
            "jmp 0x63ae",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_RequestPendingSSOUpgrade": {
        "function_address": "0x0000bdb0",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x28], rdi",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xbdd8",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xbe66",
            "mov dword [rbp - 4], 0xffffffff",
            "lea rax, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_sendpendingssoupgradedaccounts___n_t_body_type_void___n_t__body__n__request__n",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x18], 0",
            "mov rdx, qword [rbp - 0x28]",
            "lea rcx, [rbp - 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "jne 0xbe57",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, str.SUCCESS",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "cmp rdx, rax",
            "jne 0xbe35",
            "mov dword [rbp - 4], 0",
            "jmp 0xbe57",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_PendingSSOUpgrade:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_UpdateDeviceInfo": {
        "function_address": "0x0000b901",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1c0",
            "mov qword [rbp - section..gnu.hash], rdi",
            "cmp qword [rbp - section..gnu.hash], 0",
            "jne 0xb932",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xbdae",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x48], 0",
            "mov qword [rbp - 0x50], 0",
            "mov qword [rbp - 0x58], 0",
            "mov rdx, qword [rbp - section..gnu.hash]",
            "lea rax, [rbp - 0x48]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002330",
            "test eax, eax",
            "jne 0xbd87",
            "mov rax, qword [rbp - 0x48]",
            "mov rdx, qword [rbp - section..gnu.hash]",
            "lea rcx, [rbp - 0x50]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "jne 0xbd87",
            "mov rax, qword [rbp - 0x50]",
            "lea rsi, str.SUCCESS",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x50]",
            "cmp rdx, rax",
            "jne 0xbd87",
            "mov rdx, qword [rbp - section..gnu.hash]",
            "lea rax, [rbp - 0x58]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002300",
            "test eax, eax",
            "jne 0xbd87",
            "mov rax, qword [rbp - 0x58]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0xbd27",
            "mov rax, qword [rbp - 0x58]",
            "mov rax, qword [rax]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0xbd07",
            "mov rax, qword [rbp - 0x58]",
            "mov rdx, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x58]",
            "mov rsi, qword [rax + 8]",
            "mov rax, qword [rbp - 0x58]",
            "mov rax, qword [rax]",
            "mov rcx, qword [rbp - section..gnu.hash]",
            "mov r8, rcx",
            "lea rcx, [0x00011170]",
            "mov rdi, rax",
            "call fcn.000024c0",
            "test eax, eax",
            "jne 0xba34",
            "mov dword [rbp - 4], 0",
            "jmp 0xbd87",
            "mov r9d, 0xc9",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xba80",
            "jmp 0xbd02",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0xc9",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xbafd",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xbd02",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xbb7d",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xbd02",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xbbc2",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xbbaf",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xbcd9",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x170]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x60], rax",
            "lea rdx, [rbp - 0x1b0]",
            "lea rax, [rbp - 0x60]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xbc78",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x170]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x170]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0xc9",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xbd87",
            "jmp 0xbd87",
            "lea rdi, str.reginfo__sso_owner_has_zero_lenght",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - section..gnu.hash]",
            "mov qword [rax], rdx",
            "jmp 0xbd87",
            "mov qword [rbp - 0x68], 0",
            "mov rdx, qword [rbp - section..gnu.hash]",
            "lea rax, [rbp - 0x68]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002370",
            "test eax, eax",
            "jne 0xbd87",
            "mov rax, qword [rbp - 0x68]",
            "mov rdx, qword [rbp - section..gnu.hash]",
            "mov r8, rdx",
            "lea rcx, str._opt_readycloud_etc_registration_tmp.conf",
            "mov edx, 0",
            "mov esi, 0",
            "mov rdi, rax",
            "call fcn.000024c0",
            "test eax, eax",
            "jne 0xbd7b",
            "mov dword [rbp - 4], 0",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call fcn.00002250",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002330": {
        "function_address": "0x00002330",
        "instructions": [
            "jmp qword [reloc.buildXMLUpdateDeviceInfo]"
        ]
    },
    "fcn.00002300": {
        "function_address": "0x00002300",
        "instructions": [
            "jmp qword [reloc.getRegInfo]"
        ]
    },
    "fcn.00002250": {
        "function_address": "0x00002250",
        "instructions": [
            "jmp qword [reloc.freeRegInfo]"
        ]
    },
    "sym.getDevInfo": {
        "function_address": "0x0000504e",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "push rbx",
            "sub rsp, 0x28",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "cmp qword [rbp - 0x30], 0",
            "je 0x506d",
            "cmp qword [rbp - 0x28], 0",
            "jne 0x5077",
            "mov eax, 0xffffffff",
            "jmp 0x52fc",
            "mov dword [rbp - 0x14], 0xffffffff",
            "mov edi, 0x28",
            "call sym.imp.malloc",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov edx, 0x28",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rax, qword [rbp - 0x28]",
            "mov rbx, qword [rax]",
            "mov edi, 0x28",
            "call sym.imp.malloc",
            "mov qword [rbx + 0x20], rax",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "test rax, rax",
            "je 0x52ea",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov edx, 0x28",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x30]",
            "mov rsi, rax",
            "mov rdi, rdx",
            "call fcn.00002370",
            "test eax, eax",
            "jne 0x52d7",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "lea rdx, [rax + 8]",
            "mov rax, qword [rbp - 0x30]",
            "mov rsi, rax",
            "mov rdi, rdx",
            "call fcn.00002140",
            "test eax, eax",
            "jne 0x52d7",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "lea rsi, [rax + 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "lea rcx, [rax + 0x10]",
            "mov rax, qword [rbp - 0x30]",
            "mov rdx, rax",
            "mov rdi, rcx",
            "call fcn.00002380",
            "test eax, eax",
            "jne 0x52d7",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002050",
            "test eax, eax",
            "jne 0x52d7",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 8]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 8]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 8]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 8]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x10]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x10]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x18]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x18]",
            "movzx eax, byte [rax]",
            "test al, al",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x20]",
            "test rax, rax",
            "je 0x52b1",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x20]",
            "movzx eax, byte [rax]",
            "test al, al",
            "jne 0x52ce",
            "lea rdi, str.Device_info_is_incomplete.",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x30]",
            "mov qword [rax], rdx",
            "jmp 0x52e8",
            "mov dword [rbp - 0x14], 0",
            "jmp 0x52e8",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "jmp 0x52f9",
            "jmp 0x52f9",
            "mov rax, qword [rbp - 0x28]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "mov eax, dword [rbp - 0x14]",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00002140": {
        "function_address": "0x00002140",
        "instructions": [
            "jmp qword [reloc.getNasPassword]"
        ]
    },
    "sym.buildXMLUnregister": {
        "function_address": "0x0000f2bb",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 8], rdi",
            "mov qword [rbp - 0x10], rsi",
            "mov qword [rbp - 0x18], rdx",
            "mov qword [rbp - 0x20], rcx",
            "cmp qword [rbp - 0x18], 0",
            "je 0xf2e1",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf2e8",
            "mov eax, 0xffffffff",
            "jmp 0xf313",
            "mov rdx, qword [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_unregister___n_t_body_type_registration___n_t_t_username____CDATA__s_____username__n_t_t_password____CDATA__s_____password__n_t__body__n__request__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.getSystemInfo": {
        "function_address": "0x0000fd9c",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "cmp qword [rbp - 0x28], 0",
            "je 0xfdba",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xfdc4",
            "mov eax, 0xffffffff",
            "jmp 0xfef9",
            "mov dword [rbp - 4], 0xffffffff",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_trid___xs:get_id_opid__resource_id_SystemInfo__resource_type_SystemInfo______xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x18], 0",
            "mov dword [rbp - 0x1c], 0",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x1c]",
            "lea rdx, [rbp - 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "jne 0xfede",
            "mov rax, qword [rbp - 0x18]",
            "test rax, rax",
            "je 0xfede",
            "mov rdx, qword [rbp - 0x28]",
            "mov rax, qword [rbp - 0x18]",
            "mov rcx, qword [rbp - 0x30]",
            "lea rsi, str._xs:nml_xs:transaction_xs:response_xs:result_xs:get_s_SystemInfo_Model",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0xfede",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [rax + 8]",
            "mov rax, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rcx, rdx",
            "mov rdx, rsi",
            "lea rsi, str._xs:nml_xs:transaction_xs:response_xs:result_xs:get_s_SystemInfo_Firmware_Version",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0xfede",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [rax + 0x10]",
            "mov rax, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rcx, rdx",
            "mov rdx, rsi",
            "lea rsi, str._xs:nml_xs:transaction_xs:response_xs:result_xs:get_s_SystemInfo_Firmware_Time",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0xfede",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [rax + 0x18]",
            "mov rax, qword [rbp - 0x18]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rcx, rdx",
            "mov rdx, rsi",
            "lea rsi, str._xs:nml_xs:transaction_xs:response_xs:result_xs:get_s_SystemInfo_Serial",
            "mov rdi, rax",
            "call fcn.00002220",
            "test eax, eax",
            "jne 0xfede",
            "mov rax, qword [rbp - 0x28]",
            "lea rdx, [rax + 0x20]",
            "mov rax, qword [rbp - 0x30]",
            "mov rsi, rax",
            "mov rdi, rdx",
            "call sym.getHostname",
            "mov dword [rbp - 4], eax",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "loc.imp.process_request_rddclient": {
        "function_address": "0x00002150",
        "instructions": [
            "jmp qword [reloc.process_request_rddclient]"
        ]
    },
    "sym.getHostname": {
        "function_address": "0x0000fcf7",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "mov dword [rbp - 4], 0xffffffff",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_njl_id_5775___xs:get_id_njl_id_5774__resource_id_Network__resource_type_Network______xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x18], 0",
            "mov dword [rbp - 0x1c], 0",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x1c]",
            "lea rdx, [rbp - 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "jne 0xfd7f",
            "mov rax, qword [rbp - 0x18]",
            "test rax, rax",
            "je 0xfd7f",
            "mov rax, qword [rbp - 0x18]",
            "mov rcx, qword [rbp - 0x30]",
            "mov rdx, qword [rbp - 0x28]",
            "lea rsi, str._xs:nml_xs:transaction_xs:response_xs:result_xs:get_s_Network_General_Settings_Hostname",
            "mov rdi, rax",
            "call fcn.00002220",
            "mov dword [rbp - 4], eax",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_GetOwner": {
        "function_address": "0x0000cfab",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1a0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "cmp qword [rbp - 0x198], 0",
            "je 0xcfd8",
            "cmp qword [rbp - 0x1a0], 0",
            "jne 0xcfed",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xd418",
            "mov dword [rbp - 4], 0xffffffff",
            "mov esi, 0",
            "lea rdi, [0x00011170]",
            "call sym.imp.access",
            "test eax, eax",
            "je 0xd039",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "mov dword [rbp - 4], eax",
            "lea rdi, str.Registration_Info_unavailable",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a0]",
            "mov qword [rax], rdx",
            "mov eax, dword [rbp - 4]",
            "jmp 0xd418",
            "lea rdi, [0x00011170]",
            "call fcn.00002550",
            "mov dword [rbp - 0x14], eax",
            "cmp dword [rbp - 0x14], 0xffffffff",
            "je 0xd3a1",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x198]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, [0x0001136f]",
            "lea rdi, [0x00011170]",
            "call fcn.00002070",
            "test eax, eax",
            "je 0xd36f",
            "mov r9d, 0x1be",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xd0cd",
            "jmp 0xd36a",
            "mov rax, qword [rbp - 0x20]",
            "mov r8d, 0x1be",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rax, qword [rax]",
            "mov r8, rax",
            "lea rcx, [0x00011170]",
            "lea rdx, str.Cannot_retrieve_data_from__s:__s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xd151",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xd36a",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x28]",
            "mov rcx, rdx",
            "lea rdx, [0x00011170]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x28]",
            "mov rax, qword [rbp - 0x20]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xd1db",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xd36a",
            "mov rcx, qword [rbp - 0x28]",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x30]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x38], 0",
            "jmp 0xd220",
            "mov rax, qword [rbp - 0x38]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x38]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0xd20d",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xd341",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x40], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x50], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x50]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "je 0xd2d6",
            "mov rdx, qword [rbp - 0x48]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x40]",
            "mov r9d, 0x1be",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x40]",
            "mov rcx, rdx",
            "lea rdx, [0x00011170]",
            "lea rsi, str.Cannot_retrieve_data_from__s:__s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xd404",
            "jmp 0xd404",
            "mov rax, qword [rbp - 0x198]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "cmp rax, 0x1f",
            "jbe 0xd398",
            "mov rax, qword [rbp - 0x198]",
            "mov rax, qword [rax]",
            "add rax, 0x1f",
            "mov byte [rax], 0",
            "mov dword [rbp - 4], 0",
            "jmp 0xd404",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x150]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x150]",
            "mov rdx, rax",
            "lea rsi, [0x00011170]",
            "lea rdi, str.Failed_to_lock__s:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1a0]",
            "mov qword [rax], rdx",
            "mov eax, dword [rbp - 0x14]",
            "mov esi, eax",
            "lea rdi, [0x00011170]",
            "call fcn.000021b0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.Usage": {
        "function_address": "0x00007732",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rsi, rax",
            "lea rdi, str.Usage:__s_command_n_ncommands:_n_n__status_n__on_n__off_n__join_username_password_n__leave_n__test_username_password_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_UpdateAlias": {
        "function_address": "0x0000be68",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1f0",
            "mov qword [rbp - 0x1e8], rdi",
            "mov qword [rbp - 0x1f0], rsi",
            "cmp qword [rbp - 0x1e8], 0",
            "je 0xbe95",
            "cmp qword [rbp - 0x1f0], 0",
            "jne 0xbeaa",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xc505",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x80], 0",
            "mov rdx, qword [rbp - 0x1f0]",
            "mov rcx, qword [rbp - 0x1e8]",
            "lea rax, [rbp - 0x80]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002160",
            "test eax, eax",
            "jne 0xc4f6",
            "mov r9d, 0x119",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xbf2a",
            "jmp 0xc19b",
            "mov rax, qword [rbp - 0x20]",
            "mov r8d, 0x119",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x80]",
            "mov rcx, rax",
            "lea rdx, str.request:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xbfa1",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xc19b",
            "mov rdx, qword [rbp - 0x80]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x28]",
            "mov rax, qword [rbp - 0x20]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xc01b",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xc19b",
            "mov rcx, qword [rbp - 0x28]",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x30]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x38], 0",
            "jmp 0xc060",
            "mov rax, qword [rbp - 0x38]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x38]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0xc04d",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xc177",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x40], rax",
            "lea rdx, [rbp - 0x1a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x90], rax",
            "lea rdx, [rbp - 0x1e0]",
            "lea rax, [rbp - 0x90]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "je 0xc11c",
            "mov rdx, qword [rbp - 0x48]",
            "lea rax, [rbp - 0x1a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x40]",
            "mov r9d, 0x119",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x80]",
            "mov rax, qword [rbp - 0x40]",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov qword [rbp - 0x88], 0",
            "mov rax, qword [rbp - 0x80]",
            "mov rdx, qword [rbp - 0x1f0]",
            "lea rcx, [rbp - 0x88]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "je 0xc4e7",
            "mov r9d, 0x11e",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "jne 0xc217",
            "jmp 0xc491",
            "mov rax, qword [rbp - 0x50]",
            "mov r8d, 0x11e",
            "lea rcx, str.readycloud.c",
            "lea rdx, str.DEBUG",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x88]",
            "mov rcx, rax",
            "lea rdx, str.response:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x58], rax",
            "cmp qword [rbp - 0x58], 0",
            "jne 0xc291",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xc491",
            "mov rdx, qword [rbp - 0x88]",
            "mov rax, qword [rbp - 0x58]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x58]",
            "mov rax, qword [rbp - 0x50]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "jne 0xc30e",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xc491",
            "mov rcx, qword [rbp - 0x58]",
            "mov rdx, qword [rbp - 0x50]",
            "mov rax, qword [rbp - 0x60]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x60]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x68], 0",
            "jmp 0xc353",
            "mov rax, qword [rbp - 0x68]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x68]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0xc340",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xc46d",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x70], rax",
            "lea rdx, [rbp - 0x1a0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x98], rax",
            "lea rdx, [rbp - 0x1e0]",
            "lea rax, [rbp - 0x98]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "je 0xc40f",
            "mov rdx, qword [rbp - 0x78]",
            "lea rax, [rbp - 0x1a0]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x70]",
            "mov r9d, 0x11e",
            "lea r8, str.readycloud.c",
            "lea rcx, str.DEBUG",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rdx, qword [rbp - 0x88]",
            "mov rax, qword [rbp - 0x70]",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x88]",
            "lea rsi, str.SUCCESS",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x88]",
            "cmp rdx, rax",
            "jne 0xc4bf",
            "mov dword [rbp - 4], 0",
            "jmp 0xc4e7",
            "mov rax, qword [rbp - 0x88]",
            "mov rsi, rax",
            "lea rdi, str.Failed_to_rcloud_UpdateAlias:__s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x1f0]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002160": {
        "function_address": "0x00002160",
        "instructions": [
            "jmp qword [reloc.buildXMLUpdateAlias]"
        ]
    },
    "sym.getNasName": {
        "function_address": "0x0000e966",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1a0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "mov dword [rbp - 4], 0xffffffff",
            "mov rdx, qword [rbp - 0x1a0]",
            "mov rax, qword [rbp - 0x198]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "lea rsi, str._Configuration_AccountInformation_Username",
            "lea rdi, str._opt_p2p_conf_lnconfiguration.xml",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe9bd",
            "mov dword [rbp - 4], 0",
            "jmp 0xec86",
            "mov r9d, 0x42",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rdx, str._s:_s:_d:",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xea09",
            "jmp 0xec86",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x42",
            "lea rcx, str.remoteconf.c",
            "lea rdx, str.ERROR",
            "lea rsi, str._s:_s:_d:",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001182a]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xea86",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xec86",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, str._s_s",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xeb06",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xec86",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, str._s_s",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xeb4b",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x00011833]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xeb38",
            "mov esi, 0",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xec62",
            "lea rsi, [0x0001184e]",
            "lea rdi, str._var_log_readycloud.log",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x48], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x48]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xec01",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, str._b__e__Y__H:_M:_S",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x42",
            "lea r8, str.remoteconf.c",
            "lea rcx, str.ERROR",
            "lea rsi, str._s__s:_s:_d",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x1a0]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x0001182a]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.buildXMLRegisterTmp": {
        "function_address": "0x0000f12a",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "cmp qword [rbp - 0x18], 0",
            "je 0xf148",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf152",
            "mov eax, 0xffffffff",
            "jmp 0xf1f8",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0x10], 0",
            "mov rdx, qword [rbp - 0x20]",
            "lea rax, [rbp - 0x10]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.000020c0",
            "test eax, eax",
            "jne 0xf1f5",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rsi, qword [rax + 0x18]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov r9, qword [rax + 0x10]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov r8, qword [rax + 8]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rcx, qword [rax]",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rax + 8]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax]",
            "push rdi",
            "push rsi",
            "mov rsi, rax",
            "lea rdi, [str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_register___n_t_body_type_registration___n_t_t_username____CDATA__s_____username__n_t_t_password____CDATA__s_____password__n_t_t_model__s__model__n_t_t_firmware_id__s__firmware_id__n_t_t_firmware_time__s__firmware_time__n_t_t_license__n_t_t_t_LicenseKey_asdfasfdasfd__LicenseKey__n_t_t_t_hardwareSN__s__hardwareSN__n_t_t_t_StartTime_0__StartTime__n_t_t_t_ExpiredTime_999__ExpiredTime__n_t_t_t_valid_true__valid__n_t_t__l",
            "mov eax, 0",
            "call fcn.00001fc0",
            "add rsp, 0x10",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov dword [rbp - 4], 0",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.String": {
        "function_address": "0x00002660",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x100",
            "mov qword [rbp - 0xa8], rsi",
            "mov qword [rbp - 0xa0], rdx",
            "mov qword [rbp - 0x98], rcx",
            "mov qword [rbp - 0x90], r8",
            "mov qword [rbp - 0x88], r9",
            "test al, al",
            "je 0x26b2",
            "movaps xmmword [rbp - 0x80], xmm0",
            "movaps xmmword [rbp - 0x70], xmm1",
            "movaps xmmword [rbp - 0x60], xmm2",
            "movaps xmmword [rbp - 0x50], xmm3",
            "movaps xmmword [rbp - 0x40], xmm4",
            "movaps xmmword [rbp - 0x30], xmm5",
            "movaps xmmword [rbp - 0x20], xmm6",
            "movaps xmmword [rbp - 0x10], xmm7",
            "mov qword [rbp - 0xf8], rdi",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0x26d8",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0",
            "jmp 0x27a3",
            "mov dword [rbp - 0xd0], 8",
            "mov dword [rbp - 0xcc], 0x30",
            "lea rax, [rbp + 0x10]",
            "mov qword [rbp - 0xc8], rax",
            "lea rax, [rbp - 0xb0]",
            "mov qword [rbp - 0xc0], rax",
            "lea rax, [rbp - 0xe8]",
            "lea rdx, [rbp - 0xd0]",
            "mov rcx, qword [rdx]",
            "mov qword [rax], rcx",
            "mov rcx, qword [rdx + 8]",
            "mov qword [rax + 8], rcx",
            "mov rdx, qword [rdx + 0x10]",
            "mov qword [rax + 0x10], rdx",
            "lea rdx, [rbp - 0xe8]",
            "mov rax, qword [rbp - 0xf8]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "mov esi, 0",
            "mov edi, 0",
            "call sym.imp.vsnprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "jne 0x277c",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0xc",
            "mov eax, 0",
            "jmp 0x27a3",
            "lea rdx, [rbp - 0xd0]",
            "mov rcx, qword [rbp - 0xf8]",
            "mov rax, qword [rbp - 0xb8]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.vsprintf",
            "mov rax, qword [rbp - 0xb8]",
            "leave",
            "ret"
        ]
    },
    "sym.imp.vsnprintf": {
        "function_address": "0x00002090",
        "instructions": [
            "jmp qword [reloc.vsnprintf]"
        ]
    },
    "sym.imp.vsprintf": {
        "function_address": "0x00002440",
        "instructions": [
            "jmp qword [reloc.vsprintf]"
        ]
    },
    "sym.freeSystemInfo": {
        "function_address": "0x0000fefb",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "cmp qword [rbp - 8], 0",
            "jne 0xff10",
            "jmp 0xff5f",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_Join": {
        "function_address": "0x0000de91",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 8], rdi",
            "mov qword [rbp - 0x10], rsi",
            "mov qword [rbp - 0x18], rdx",
            "cmp qword [rbp - 8], 0",
            "je 0xdeba",
            "cmp qword [rbp - 0x10], 0",
            "je 0xdeba",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xdecc",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xded1",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.getRegInfo": {
        "function_address": "0x0000e240",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "cmp qword [rbp - 0x20], 0",
            "je 0xe25e",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xe268",
            "mov eax, 0xffffffff",
            "jmp 0xe33c",
            "mov dword [rbp - 4], 0xffffffff",
            "mov edi, 0x18",
            "call sym.imp.malloc",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x18]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0xe339",
            "mov rax, qword [rbp - 0x18]",
            "mov rax, qword [rax]",
            "mov edx, 0x18",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rax, qword [rbp - 0x18]",
            "mov rax, qword [rax]",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x20]",
            "mov rcx, rax",
            "lea rsi, str._registration_owner",
            "lea rdi, str._opt_readycloud_etc_registration.conf",
            "call fcn.00002070",
            "test eax, eax",
            "je 0xe2d9",
            "mov eax, dword [rbp - 4]",
            "jmp 0xe33c",
            "mov rax, qword [rbp - 0x18]",
            "mov rax, qword [rax]",
            "lea rdx, [rax + 8]",
            "mov rax, qword [rbp - 0x20]",
            "mov rcx, rax",
            "lea rsi, str._registration_p2powner",
            "lea rdi, str._opt_readycloud_etc_registration.conf",
            "call fcn.00002070",
            "test eax, eax",
            "je 0xe332",
            "mov rax, qword [rbp - 0x18]",
            "mov rax, qword [rax]",
            "lea rdx, [rax + 8]",
            "mov rax, qword [rbp - 0x20]",
            "mov rsi, rax",
            "mov rdi, rdx",
            "call sym.retrieveP2Powner",
            "test eax, eax",
            "jne 0xe329",
            "mov dword [rbp - 4], 0",
            "jmp 0xe339",
            "mov dword [rbp - 4], 0xffffffff",
            "jmp 0xe339",
            "mov dword [rbp - 4], 0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.retrieveP2Powner": {
        "function_address": "0x0000dee2",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x1a0",
            "mov qword [rbp - 0x198], rdi",
            "mov qword [rbp - 0x1a0], rsi",
            "lea rax, str._opt_remote_conf_lnfoldershares.xml",
            "mov qword [rbp - 0x10], rax",
            "cmp qword [rbp - 0x198], 0",
            "jne 0xdf1a",
            "mov eax, 0xffffffff",
            "jmp 0xe23e",
            "mov rcx, qword [rbp - 0x1a0]",
            "mov rdx, qword [rbp - 0x198]",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, str._Shares_Share_AccessList_User__UserName",
            "mov rdi, rax",
            "call fcn.00002070",
            "test eax, eax",
            "jne 0xe239",
            "mov rax, qword [rbp - 0x198]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0xe239",
            "mov rax, qword [rbp - 0x198]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "je 0xe239",
            "mov r9d, 0x18",
            "lea r8, str.registration_info.c",
            "lea rcx, str.INFO",
            "lea rdx, [0x00011521]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xdfb5",
            "jmp 0xe232",
            "mov rax, qword [rbp - 0x18]",
            "mov r8d, 0x18",
            "lea rcx, str.registration_info.c",
            "lea rdx, str.INFO",
            "lea rsi, [0x00011521]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x198]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, str.Retrieve_p2powner_successful__p2powner_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xe032",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xe232",
            "mov rax, qword [rbp - 0x198]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, str.Retrieve_p2powner_successful__p2powner_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x20]",
            "mov rax, qword [rbp - 0x18]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x0001155b]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xe0b2",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xe232",
            "mov rcx, qword [rbp - 0x20]",
            "mov rdx, qword [rbp - 0x18]",
            "mov rax, qword [rbp - 0x28]",
            "lea rsi, [0x0001155b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x30], 0",
            "jmp 0xe0f7",
            "mov rax, qword [rbp - 0x30]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x30]",
            "add rax, 1",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "lea rsi, [0x00011560]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xe0e4",
            "mov esi, 0",
            "lea rdi, [0x00011563]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xe20e",
            "lea rsi, [0x0001157b]",
            "lea rdi, [0x00011563]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "lea rdx, [rbp - 0x150]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0x48], rax",
            "lea rdx, segment.NOTE",
            "lea rax, [rbp - 0x48]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "je 0xe1ad",
            "mov rdx, qword [rbp - 0x40]",
            "lea rax, [rbp - 0x150]",
            "mov rcx, rdx",
            "lea rdx, [0x0001157d]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x150]",
            "mov rax, qword [rbp - 0x38]",
            "mov r9d, 0x18",
            "lea r8, str.registration_info.c",
            "lea rcx, str.INFO",
            "lea rsi, [0x0001158f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x198]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, str.Retrieve_p2powner_successful__p2powner_s_n",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "jmp 0xe23e",
            "mov eax, 0xffffffff",
            "leave",
            "ret"
        ]
    },
    "sym.buildXMLRequestEncryptionKeys": {
        "function_address": "0x0000f012",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov qword [rbp - 8], rdi",
            "mov qword [rbp - 0x10], rsi",
            "cmp qword [rbp - 8], 0",
            "je 0xf030",
            "cmp qword [rbp - 0x10], 0",
            "jne 0xf037",
            "mov eax, 0xffffffff",
            "jmp 0xf057",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_getencryptionkey___n_t_body_type_encryption___n_t_t_supported_algorithms__n_t_t_t_algorithm_aes128__algorithm__n_t_t_t_algorithm_no_encryption__algorithm__n_t_t__supported_algorithms__n_t__body__n__request__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 8]",
            "mov qword [rax], rdx",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.createKeyFile": {
        "function_address": "0x00005373",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x340",
            "mov qword [rbp - 0x328], rdi",
            "mov qword [rbp - 0x330], rsi",
            "mov qword [rbp - 0x338], rdx",
            "mov qword [rbp - 0x340], rcx",
            "cmp qword [rbp - 0x328], 0",
            "je 0x53c2",
            "cmp qword [rbp - 0x330], 0",
            "je 0x53c2",
            "cmp qword [rbp - 0x338], 0",
            "je 0x53c2",
            "cmp qword [rbp - 0x340], 0",
            "jne 0x53cc",
            "mov eax, 0xffffffff",
            "jmp 0x5f2c",
            "mov rcx, qword [rbp - 0x338]",
            "mov rdx, qword [rbp - 0x330]",
            "mov rax, qword [rbp - 0x328]",
            "mov rsi, rax",
            "lea rdi, str._s:_s:_s",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 0x28], rax",
            "lea rdi, str._opt_readycloud_etc_xcloud_messaging.key",
            "call fcn.00002550",
            "mov dword [rbp - 0x2c], eax",
            "cmp dword [rbp - 0x2c], 0xffffffff",
            "jne 0x5487",
            "lea rdx, [rbp - 0x1e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x1e0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x1e0]",
            "mov rdx, rax",
            "lea rsi, str._opt_readycloud_etc_xcloud_messaging.key",
            "lea rdi, [0x00010441]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x340]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x5f2c",
            "mov dword [rbp - 4], 0xffffffff",
            "lea rsi, [0x00010457]",
            "lea rdi, str._opt_readycloud_etc_xcloud_messaging.key",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "je 0x5810",
            "mov rdx, qword [rbp - 0x38]",
            "mov rax, qword [rbp - 0x28]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.fputs",
            "cmp eax, 0xffffffff",
            "je 0x54d4",
            "mov dword [rbp - 4], 0",
            "jmp 0x5b66",
            "lea rdx, [rbp - 0x2e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x2e0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x2e0]",
            "mov rdx, rax",
            "lea rsi, str._opt_readycloud_etc_xcloud_messaging.key",
            "lea rdi, [0x00010460]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x340]",
            "mov qword [rax], rdx",
            "mov r9d, 0x2d",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rdx, [0x00010490]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "jne 0x5583",
            "jmp 0x580b",
            "mov rax, qword [rbp - 0x40]",
            "mov r8d, 0x2d",
            "lea rcx, str.key_info.c",
            "lea rdx, [0x0001048a]",
            "lea rsi, [0x00010490]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001049b]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x48], rax",
            "cmp qword [rbp - 0x48], 0",
            "jne 0x5600",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x580b",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x48]",
            "mov rax, qword [rbp - 0x40]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x0001049f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "jne 0x5680",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x580b",
            "mov rcx, qword [rbp - 0x48]",
            "mov rdx, qword [rbp - 0x40]",
            "mov rax, qword [rbp - 0x50]",
            "lea rsi, [0x0001049f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x50]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x58], 0",
            "jmp 0x56c5",
            "mov rax, qword [rbp - 0x58]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x58]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000104a4]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x58], rax",
            "cmp qword [rbp - 0x58], 0",
            "jne 0x56b2",
            "mov esi, 0",
            "lea rdi, [0x000104a7]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x57e2",
            "lea rsi, [0x000104bf]",
            "lea rdi, [0x000104a7]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x60], rax",
            "lea rdx, [rbp - 0x1e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xd0], rax",
            "lea rdx, [rbp - 0x320]",
            "lea rax, [rbp - 0xd0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "je 0x5781",
            "mov rdx, qword [rbp - 0x68]",
            "lea rax, [rbp - 0x1e0]",
            "mov rcx, rdx",
            "lea rdx, [0x000104c1]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x1e0]",
            "mov rax, qword [rbp - 0x60]",
            "mov r9d, 0x2d",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rsi, [0x000104d3]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x60]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x40]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x50]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x5b66",
            "jmp 0x5b66",
            "lea rdx, [rbp - 0x2e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x2e0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x2e0]",
            "mov rdx, rax",
            "lea rsi, str._opt_readycloud_etc_xcloud_messaging.key",
            "lea rdi, [0x000104e0]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x340]",
            "mov qword [rax], rdx",
            "mov r9d, 0x35",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rdx, [0x00010490]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0x58bf",
            "jmp 0x5b66",
            "mov rax, qword [rbp - 0x70]",
            "mov r8d, 0x35",
            "lea rcx, str.key_info.c",
            "lea rdx, [0x0001048a]",
            "lea rsi, [0x00010490]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001049b]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x78], rax",
            "cmp qword [rbp - 0x78], 0",
            "jne 0x593c",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x5b66",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x78]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x78]",
            "mov rax, qword [rbp - 0x70]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x0001049f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x80], rax",
            "cmp qword [rbp - 0x80], 0",
            "jne 0x59bc",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x78]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x5b66",
            "mov rcx, qword [rbp - 0x78]",
            "mov rdx, qword [rbp - 0x70]",
            "mov rax, qword [rbp - 0x80]",
            "lea rsi, [0x0001049f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x80]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x88], 0",
            "jmp 0x5a0a",
            "mov rax, qword [rbp - 0x88]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x88]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000104a4]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x88], rax",
            "cmp qword [rbp - 0x88], 0",
            "jne 0x59f1",
            "mov esi, 0",
            "lea rdi, [0x000104a7]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x5b42",
            "lea rsi, [0x000104bf]",
            "lea rdi, [0x000104a7]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x90], rax",
            "lea rdx, [rbp - 0x1e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xd8], rax",
            "lea rdx, [rbp - 0x320]",
            "lea rax, [rbp - 0xd8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "je 0x5ad8",
            "mov rdx, qword [rbp - 0x98]",
            "lea rax, [rbp - 0x1e0]",
            "mov rcx, rdx",
            "lea rdx, [0x000104c1]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x1e0]",
            "mov rax, qword [rbp - 0x90]",
            "mov r9d, 0x35",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rsi, [0x000104d3]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x90]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x70]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x78]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x80]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "test eax, eax",
            "je 0x5f18",
            "lea rdx, [rbp - 0x2e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "lea rcx, [rbp - 0x2e0]",
            "mov edx, 0x100",
            "mov rsi, rcx",
            "mov edi, eax",
            "call sym.imp.__xpg_strerror_r",
            "lea rax, [rbp - 0x2e0]",
            "mov rdx, rax",
            "lea rsi, str._opt_readycloud_etc_xcloud_messaging.key",
            "lea rdi, [0x00010505]",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x340]",
            "mov qword [rax], rdx",
            "mov r9d, 0x3f",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rdx, [0x00010490]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa0], rax",
            "cmp qword [rbp - 0xa0], 0",
            "jne 0x5c3b",
            "jmp 0x5f18",
            "mov rax, qword [rbp - 0xa0]",
            "mov r8d, 0x3f",
            "lea rcx, str.key_info.c",
            "lea rdx, [0x0001048a]",
            "lea rsi, [0x00010490]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x0001049b]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xa8], rax",
            "cmp qword [rbp - 0xa8], 0",
            "jne 0x5cc4",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x5f18",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xa8]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0xa8]",
            "mov rax, qword [rbp - 0xa0]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x0001049f]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb0], rax",
            "cmp qword [rbp - 0xb0], 0",
            "jne 0x5d59",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x5f18",
            "mov rcx, qword [rbp - 0xa8]",
            "mov rdx, qword [rbp - 0xa0]",
            "mov rax, qword [rbp - 0xb0]",
            "lea rsi, [0x0001049f]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xb0]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xb8], 0",
            "jmp 0x5db3",
            "mov rax, qword [rbp - 0xb8]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xb8]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000104a4]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "jne 0x5d9a",
            "mov esi, 0",
            "lea rdi, [0x000104a7]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0x5eeb",
            "lea rsi, [0x000104bf]",
            "lea rdi, [0x000104a7]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xc0], rax",
            "lea rdx, [rbp - 0x1e0]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xe0], rax",
            "lea rdx, [rbp - 0x320]",
            "lea rax, [rbp - 0xe0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xc8], rax",
            "cmp qword [rbp - 0xc8], 0",
            "je 0x5e81",
            "mov rdx, qword [rbp - 0xc8]",
            "lea rax, [rbp - 0x1e0]",
            "mov rcx, rdx",
            "lea rdx, [0x000104c1]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x1e0]",
            "mov rax, qword [rbp - 0xc0]",
            "mov r9d, 0x3f",
            "lea r8, str.key_info.c",
            "lea rcx, [0x0001048a]",
            "lea rsi, [0x000104d3]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x340]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0xc0]",
            "lea rsi, [0x0001049b]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0xa0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xa8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xb0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0x2c]",
            "mov esi, eax",
            "lea rdi, str._opt_readycloud_etc_xcloud_messaging.key",
            "call fcn.000021b0",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "sym.rcloud_RequestEncryptionKeys": {
        "function_address": "0x0000d41a",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x250",
            "mov qword [rbp - 0x248], rdi",
            "cmp qword [rbp - 0x248], 0",
            "jne 0xd44b",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0xffffffff",
            "jmp 0xde8f",
            "mov dword [rbp - 4], 0xffffffff",
            "mov qword [rbp - 0xb8], 0",
            "mov qword [rbp - 0xc0], 0",
            "lea rax, [rbp - 0xe0]",
            "mov edx, 0x18",
            "mov esi, 0",
            "mov rdi, rax",
            "call sym.imp.memset",
            "mov rdx, qword [rbp - 0x248]",
            "lea rax, [rbp - 0xb8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.00002240",
            "test eax, eax",
            "jne 0xd51a",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdx, qword [rbp - 0x248]",
            "lea rcx, [rbp - 0xc0]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00002490",
            "test eax, eax",
            "jne 0xd51a",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdx, qword [rbp - 0x248]",
            "lea rcx, [rbp - 0xe0]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call fcn.00001ff0",
            "test eax, eax",
            "jne 0xd51a",
            "mov rdx, qword [rbp - 0xd0]",
            "mov rsi, qword [rbp - 0xd8]",
            "mov rax, qword [rbp - 0xe0]",
            "mov rcx, qword [rbp - 0x248]",
            "mov rdi, rax",
            "call fcn.000023b0",
            "test eax, eax",
            "jne 0xd51a",
            "mov dword [rbp - 4], 0",
            "jmp 0xde5f",
            "mov r9d, 0x1f1",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x28], rax",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xd566",
            "jmp 0xd7e9",
            "mov rax, qword [rbp - 0x28]",
            "mov r8d, 0x1f1",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x248]",
            "mov rax, qword [rax]",
            "mov rcx, rax",
            "lea rdx, [0x000110b8]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x30], rax",
            "cmp qword [rbp - 0x30], 0",
            "jne 0xd5e3",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xd7e9",
            "mov rax, qword [rbp - 0x248]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x30]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x30]",
            "mov rax, qword [rbp - 0x28]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x38], rax",
            "cmp qword [rbp - 0x38], 0",
            "jne 0xd663",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xd7e9",
            "mov rcx, qword [rbp - 0x30]",
            "mov rdx, qword [rbp - 0x28]",
            "mov rax, qword [rbp - 0x38]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x38]",
            "mov qword [rbp - 0x10], rax",
            "mov qword [rbp - 0x40], 0",
            "jmp 0xd6a8",
            "mov rax, qword [rbp - 0x40]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x40]",
            "add rax, 1",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x40], rax",
            "cmp qword [rbp - 0x40], 0",
            "jne 0xd695",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xd7c5",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x48], rax",
            "lea rdx, [rbp - 0x200]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xe8], rax",
            "lea rdx, [rbp - 0x240]",
            "lea rax, [rbp - 0xe8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x50], rax",
            "cmp qword [rbp - 0x50], 0",
            "je 0xd764",
            "mov rdx, qword [rbp - 0x50]",
            "lea rax, [rbp - 0x200]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x200]",
            "mov rax, qword [rbp - 0x48]",
            "mov r9d, 0x1f1",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x248]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x48]",
            "lea rsi, [0x000110b8]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x48]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x28]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x30]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x38]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x1f2",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x58], rax",
            "cmp qword [rbp - 0x58], 0",
            "jne 0xd835",
            "jmp 0xdaf4",
            "mov rax, qword [rbp - 0x58]",
            "mov r8d, 0x1f2",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xb8]",
            "test rax, rax",
            "je 0xd876",
            "mov rax, qword [rbp - 0xb8]",
            "jmp 0xd87d",
            "lea rax, str.NULL",
            "mov rcx, rax",
            "lea rdx, str.request:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x60], rax",
            "cmp qword [rbp - 0x60], 0",
            "jne 0xd8c4",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xdaf4",
            "mov rax, qword [rbp - 0xb8]",
            "test rax, rax",
            "je 0xd8d9",
            "mov rax, qword [rbp - 0xb8]",
            "jmp 0xd8e0",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0x60]",
            "mov rdx, rax",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x60]",
            "mov rax, qword [rbp - 0x58]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x68], rax",
            "cmp qword [rbp - 0x68], 0",
            "jne 0xd959",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xdaf4",
            "mov rcx, qword [rbp - 0x60]",
            "mov rdx, qword [rbp - 0x58]",
            "mov rax, qword [rbp - 0x68]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x68]",
            "mov qword [rbp - 0x18], rax",
            "mov qword [rbp - 0x70], 0",
            "jmp 0xd99e",
            "mov rax, qword [rbp - 0x70]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0x70]",
            "add rax, 1",
            "mov qword [rbp - 0x18], rax",
            "mov rax, qword [rbp - 0x18]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0x70], rax",
            "cmp qword [rbp - 0x70], 0",
            "jne 0xd98b",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xdad0",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0x78], rax",
            "lea rdx, [rbp - 0x200]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xf0], rax",
            "lea rdx, [rbp - 0x240]",
            "lea rax, [rbp - 0xf0]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0x80], rax",
            "cmp qword [rbp - 0x80], 0",
            "je 0xda5a",
            "mov rdx, qword [rbp - 0x80]",
            "lea rax, [rbp - 0x200]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x200]",
            "mov rax, qword [rbp - 0x78]",
            "mov r9d, 0x1f2",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xb8]",
            "test rax, rax",
            "je 0xdaa2",
            "mov rax, qword [rbp - 0xb8]",
            "jmp 0xdaa9",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0x78]",
            "mov rdx, rax",
            "lea rsi, str.request:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0x78]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x58]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x60]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x68]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov r9d, 0x1f3",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rdx, [0x000110ad]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x88], rax",
            "cmp qword [rbp - 0x88], 0",
            "jne 0xdb46",
            "jmp 0xde5f",
            "mov rax, qword [rbp - 0x88]",
            "mov r8d, 0x1f3",
            "lea rcx, str.readycloud.c",
            "lea rdx, [0x000110a7]",
            "lea rsi, [0x000110ad]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0xc0]",
            "test rax, rax",
            "je 0xdb8a",
            "mov rax, qword [rbp - 0xc0]",
            "jmp 0xdb91",
            "lea rax, str.NULL",
            "mov rcx, rax",
            "lea rdx, str.response:_n_s_n",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x90], rax",
            "cmp qword [rbp - 0x90], 0",
            "jne 0xdbe1",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xde5f",
            "mov rax, qword [rbp - 0xc0]",
            "test rax, rax",
            "je 0xdbf6",
            "mov rax, qword [rbp - 0xc0]",
            "jmp 0xdbfd",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0x90]",
            "mov rdx, rax",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rdx, qword [rbp - 0x90]",
            "mov rax, qword [rbp - 0x88]",
            "mov r8, rdx",
            "mov rcx, rax",
            "lea rdx, [0x000110bc]",
            "mov esi, 0",
            "mov edi, 0",
            "mov eax, 0",
            "call sym.imp.snprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0x98], rax",
            "cmp qword [rbp - 0x98], 0",
            "jne 0xdc8b",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xde5f",
            "mov rcx, qword [rbp - 0x90]",
            "mov rdx, qword [rbp - 0x88]",
            "mov rax, qword [rbp - 0x98]",
            "lea rsi, [0x000110bc]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.sprintf",
            "mov rax, qword [rbp - 0x98]",
            "mov qword [rbp - 0x20], rax",
            "mov qword [rbp - 0xa0], 0",
            "jmp 0xdce5",
            "mov rax, qword [rbp - 0xa0]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 0xa0]",
            "add rax, 1",
            "mov qword [rbp - 0x20], rax",
            "mov rax, qword [rbp - 0x20]",
            "lea rsi, [0x000110c1]",
            "mov rdi, rax",
            "call sym.imp.strpbrk",
            "mov qword [rbp - 0xa0], rax",
            "cmp qword [rbp - 0xa0], 0",
            "jne 0xdccc",
            "mov esi, 0",
            "lea rdi, [0x000110c4]",
            "call sym.imp.access",
            "test eax, eax",
            "jne 0xde32",
            "lea rsi, [0x000110dc]",
            "lea rdi, [0x000110c4]",
            "call sym.imp.fopen64",
            "mov qword [rbp - 0xa8], rax",
            "lea rdx, [rbp - 0x200]",
            "mov eax, 0",
            "mov ecx, 0x20",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov edi, 0",
            "call sym.imp.time",
            "mov qword [rbp - 0xf8], rax",
            "lea rdx, [rbp - 0x240]",
            "lea rax, [rbp - 0xf8]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.localtime_r",
            "mov qword [rbp - 0xb0], rax",
            "cmp qword [rbp - 0xb0], 0",
            "je 0xddb3",
            "mov rdx, qword [rbp - 0xb0]",
            "lea rax, [rbp - 0x200]",
            "mov rcx, rdx",
            "lea rdx, [0x000110de]",
            "mov esi, 0x100",
            "mov rdi, rax",
            "call sym.imp.strftime",
            "lea rdx, [rbp - 0x200]",
            "mov rax, qword [rbp - 0xa8]",
            "mov r9d, 0x1f3",
            "lea r8, str.readycloud.c",
            "lea rcx, [0x000110a7]",
            "lea rsi, [0x000110f0]",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xc0]",
            "test rax, rax",
            "je 0xddfe",
            "mov rax, qword [rbp - 0xc0]",
            "jmp 0xde05",
            "lea rax, str.NULL",
            "mov rcx, qword [rbp - 0xa8]",
            "mov rdx, rax",
            "lea rsi, str.response:_n_s_n",
            "mov rdi, rcx",
            "mov eax, 0",
            "call sym.imp.fprintf",
            "mov rax, qword [rbp - 0xa8]",
            "mov rdi, rax",
            "call sym.imp.fclose",
            "mov rax, qword [rbp - 0x88]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x90]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x98]",
            "mov rdi, rax",
            "call sym.imp.free",
            "lea rax, [rbp - 0xe0]",
            "mov rdi, rax",
            "call fcn.000024b0",
            "mov rax, qword [rbp - 0xb8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0xc0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 4]",
            "leave",
            "ret"
        ]
    },
    "fcn.00002240": {
        "function_address": "0x00002240",
        "instructions": [
            "jmp qword [reloc.buildXMLRequestEncryptionKeys]"
        ]
    },
    "fcn.00001ff0": {
        "function_address": "0x00001ff0",
        "instructions": [
            "jmp qword [reloc.retrieveEncryptionKeysInfo]"
        ]
    },
    "fcn.000023b0": {
        "function_address": "0x000023b0",
        "instructions": [
            "jmp qword [reloc.createKeyFile]"
        ]
    },
    "fcn.000024b0": {
        "function_address": "0x000024b0",
        "instructions": [
            "jmp qword [reloc.freeEncryptionKeysInfo]"
        ]
    },
    "sym._init": {
        "function_address": "0x00001f68",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [0x002133b8]",
            "test rax, rax",
            "je 0x1f7d",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x000022c0",
        "instructions": [
            "jmp qword [reloc.__gmon_start__]"
        ]
    },
    "sym.buildXMLUpdateAlias": {
        "function_address": "0x0000f315",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "mov qword [rbp - 0x28], rdx",
            "cmp qword [rbp - 0x18], 0",
            "je 0xf33e",
            "cmp qword [rbp - 0x20], 0",
            "je 0xf33e",
            "cmp qword [rbp - 0x28], 0",
            "jne 0xf348",
            "mov eax, 0xffffffff",
            "jmp 0xf3da",
            "mov qword [rbp - 8], 0",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf39a",
            "mov qword [rbp - 0x10], 0",
            "mov rdx, qword [rbp - 0x28]",
            "lea rax, [rbp - 0x10]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call fcn.000020c0",
            "test eax, eax",
            "jne 0xf39a",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x20]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call fcn.000022f0",
            "cmp qword [rbp - 0x20], 0",
            "je 0xf3a7",
            "mov rax, qword [rbp - 0x20]",
            "jmp 0xf3ab",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.__xml_version_1.0__encoding_utf_8____n_request_moniker__root_devices__method_updatealias___n_t_body_type_alias___n_t_t_alias__s__alias__t__body__n__request__n",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.__do_global_dtors_aux": {
        "function_address": "0x000025f0",
        "instructions": [
            "cmp byte [loc.__bss_start], 0",
            "jne 0x2620",
            "cmp qword [0x002133d0], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x2613",
            "mov rdi, qword [obj.__dso_handle]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc.__bss_start], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00002520",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x00002560",
        "instructions": [
            "lea rdi, [loc.__bss_start]",
            "lea rax, [0x002136df]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x2590",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x2590",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "sym.WriteMemoryCallback": {
        "function_address": "0x000029b1",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x40",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "mov qword [rbp - 0x38], rdx",
            "mov qword [rbp - 0x40], rcx",
            "cmp qword [rbp - 0x28], 0",
            "je 0x29d7",
            "cmp qword [rbp - 0x40], 0",
            "jne 0x29e1",
            "mov eax, 0",
            "jmp 0x2a9d",
            "mov rax, qword [rbp - 0x30]",
            "imul rax, qword [rbp - 0x38]",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 0x40]",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rax + 8]",
            "mov rax, qword [rbp - 8]",
            "add rax, rdx",
            "lea rdx, [rax + 1]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.realloc",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0x2a3c",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "jmp 0x2a9d",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rbp - 0x18]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 8]",
            "lea rcx, [rdx + rax]",
            "mov rdx, qword [rbp - 8]",
            "mov rax, qword [rbp - 0x28]",
            "mov rsi, rax",
            "mov rdi, rcx",
            "call sym.imp.memcpy",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rax + 8]",
            "mov rax, qword [rbp - 8]",
            "add rdx, rax",
            "mov rax, qword [rbp - 0x10]",
            "mov qword [rax + 8], rdx",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 8]",
            "add rax, rdx",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 8]",
            "leave",
            "ret"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x000023c0",
        "instructions": [
            "jmp qword [reloc.realloc]"
        ]
    },
    "sym.clear_cloud_owner": {
        "function_address": "0x00007870",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x20",
            "lea rdi, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_readycloud__dst_nas___xs:transaction_id_trid___xs:get_id_opid__resource_id_CloudOwner__resource_type_CloudOwner______xs:transaction___xs:nml_",
            "mov eax, 0",
            "call fcn.00001fc0",
            "mov qword [rbp - 8], rax",
            "mov qword [rbp - 0x10], 0",
            "mov dword [rbp - 0x14], 0",
            "mov rax, qword [rbp - 8]",
            "mov rsi, rax",
            "lea rdi, str.request:_n_s_n_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.strlen",
            "mov esi, eax",
            "lea rcx, [rbp - 0x14]",
            "lea rdx, [rbp - 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call loc.imp.process_request_rddclient",
            "test eax, eax",
            "je 0x78f0",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7978",
            "mov rax, qword [rbp - 0x10]",
            "test rax, rax",
            "jne 0x790c",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7978",
            "mov rax, qword [rbp - 0x10]",
            "mov rsi, rax",
            "lea rdi, str.respond:_n_s_n",
            "mov eax, 0",
            "call sym.imp.printf",
            "mov rax, qword [rbp - 0x10]",
            "lea rsi, str._xs:response_ref_id_opid__status_success__",
            "mov rdi, rax",
            "call sym.imp.strstr",
            "test rax, rax",
            "jne 0x795b",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0xffffffff",
            "jmp 0x7978",
            "mov rax, qword [rbp - 0x10]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.g_base64_encode": {
        "function_address": "0x000021e0",
        "instructions": [
            "jmp qword [reloc.g_base64_encode]"
        ]
    },
    "sym.String_1": {
        "function_address": "0x0000f3dc",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x100",
            "mov qword [rbp - 0xa8], rsi",
            "mov qword [rbp - 0xa0], rdx",
            "mov qword [rbp - 0x98], rcx",
            "mov qword [rbp - 0x90], r8",
            "mov qword [rbp - 0x88], r9",
            "test al, al",
            "je 0xf42e",
            "movaps xmmword [rbp - 0x80], xmm0",
            "movaps xmmword [rbp - 0x70], xmm1",
            "movaps xmmword [rbp - 0x60], xmm2",
            "movaps xmmword [rbp - 0x50], xmm3",
            "movaps xmmword [rbp - 0x40], xmm4",
            "movaps xmmword [rbp - 0x30], xmm5",
            "movaps xmmword [rbp - 0x20], xmm6",
            "movaps xmmword [rbp - 0x10], xmm7",
            "mov qword [rbp - 0xf8], rdi",
            "cmp qword [rbp - 0xf8], 0",
            "jne 0xf454",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov eax, 0",
            "jmp 0xf51f",
            "mov dword [rbp - 0xd0], 8",
            "mov dword [rbp - 0xcc], 0x30",
            "lea rax, [rbp + 0x10]",
            "mov qword [rbp - 0xc8], rax",
            "lea rax, [rbp - 0xb0]",
            "mov qword [rbp - 0xc0], rax",
            "lea rax, [rbp - 0xe8]",
            "lea rdx, [rbp - 0xd0]",
            "mov rcx, qword [rdx]",
            "mov qword [rax], rcx",
            "mov rcx, qword [rdx + 8]",
            "mov qword [rax + 8], rcx",
            "mov rdx, qword [rdx + 0x10]",
            "mov qword [rax + 0x10], rdx",
            "lea rdx, [rbp - 0xe8]",
            "mov rax, qword [rbp - 0xf8]",
            "mov rcx, rdx",
            "mov rdx, rax",
            "mov esi, 0",
            "mov edi, 0",
            "call sym.imp.vsnprintf",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov qword [rbp - 0xb8], rax",
            "cmp qword [rbp - 0xb8], 0",
            "jne 0xf4f8",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0xc",
            "mov eax, 0",
            "jmp 0xf51f",
            "lea rdx, [rbp - 0xd0]",
            "mov rcx, qword [rbp - 0xf8]",
            "mov rax, qword [rbp - 0xb8]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.vsprintf",
            "mov rax, qword [rbp - 0xb8]",
            "leave",
            "ret"
        ]
    },
    "sym.startElement": {
        "function_address": "0x0000f521",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x40",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "mov qword [rbp - 0x38], rdx",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 0x10], rax",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x18]",
            "test rax, rax",
            "je 0xf554",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x18]",
            "jmp 0xf55b",
            "lea rax, [0x00011f88]",
            "mov rdx, qword [rbp - 0x30]",
            "mov rsi, rax",
            "lea rdi, str._s__s",
            "mov eax, 0",
            "call sym.String_1",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xf58e",
            "mov rax, qword [rbp - 0x10]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf6ae",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 0x10]",
            "mov rdx, qword [rbp - 0x18]",
            "mov qword [rax + 0x18], rdx",
            "mov dword [rbp - 4], 0",
            "jmp 0xf67d",
            "mov eax, dword [rbp - 4]",
            "cdqe",
            "lea rdx, [rax*8]",
            "mov rax, qword [rbp - 0x38]",
            "add rax, rdx",
            "mov rdx, qword [rax]",
            "mov rax, qword [rbp - 0x18]",
            "mov rsi, rax",
            "lea rdi, str._s___s",
            "mov eax, 0",
            "call sym.String_1",
            "mov qword [rbp - 0x20], rax",
            "cmp qword [rbp - 0x20], 0",
            "jne 0xf600",
            "mov rax, qword [rbp - 0x10]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf6ae",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax + 0x10]",
            "mov rdx, qword [rbp - 0x20]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0xf66d",
            "mov eax, dword [rbp - 4]",
            "cdqe",
            "add rax, 1",
            "lea rdx, [rax*8]",
            "mov rax, qword [rbp - 0x38]",
            "add rax, rdx",
            "mov rax, qword [rax]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 0x10]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 0x10]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0xf66d",
            "mov rax, qword [rbp - 0x10]",
            "mov dword [rax + 0x24], 1",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0xf6ae",
            "mov rax, qword [rbp - 0x20]",
            "mov rdi, rax",
            "call sym.imp.free",
            "add dword [rbp - 4], 2",
            "mov eax, dword [rbp - 4]",
            "cdqe",
            "lea rdx, [rax*8]",
            "mov rax, qword [rbp - 0x38]",
            "add rax, rdx",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0xf5b6",
            "mov rax, qword [rbp - 0x10]",
            "mov eax, dword [rax + 0x20]",
            "lea edx, [rax + 1]",
            "mov rax, qword [rbp - 0x10]",
            "mov dword [rax + 0x20], edx",
            "leave",
            "ret"
        ]
    },
    "sym.endElement": {
        "function_address": "0x0000f6b0",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x28], rdi",
            "mov qword [rbp - 0x30], rsi",
            "mov rax, qword [rbp - 0x28]",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "test rax, rax",
            "jne 0xf6e5",
            "mov rax, qword [rbp - 8]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf7b3",
            "mov rax, qword [rbp - 8]",
            "mov rdx, qword [rax + 0x10]",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rsi, rdx",
            "mov rdi, rax",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0xf737",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov rdx, rax",
            "mov rax, qword [rbp - 8]",
            "mov qword [rax], rdx",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0xf737",
            "mov rax, qword [rbp - 8]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf7b3",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov esi, 0x2f",
            "mov rdi, rax",
            "call sym.imp.strrchr",
            "mov qword [rbp - 0x10], rax",
            "cmp qword [rbp - 0x10], 0",
            "je 0xf75e",
            "mov rax, qword [rbp - 0x10]",
            "mov byte [rax], 0",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.strdup",
            "mov qword [rbp - 0x18], rax",
            "cmp qword [rbp - 0x18], 0",
            "jne 0xf786",
            "mov rax, qword [rbp - 8]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf7b3",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov rax, qword [rbp - 8]",
            "mov rdx, qword [rbp - 0x18]",
            "mov qword [rax + 0x18], rdx",
            "mov rax, qword [rbp - 8]",
            "mov eax, dword [rax + 0x20]",
            "lea edx, [rax - 1]",
            "mov rax, qword [rbp - 8]",
            "mov dword [rax + 0x20], edx",
            "leave",
            "ret"
        ]
    },
    "sym.imp.strrchr": {
        "function_address": "0x00002180",
        "instructions": [
            "jmp qword [reloc.strrchr]"
        ]
    },
    "sym.handleData": {
        "function_address": "0x0000f7b5",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x30",
            "mov qword [rbp - 0x18], rdi",
            "mov qword [rbp - 0x20], rsi",
            "mov dword [rbp - 0x24], edx",
            "mov rax, qword [rbp - 0x18]",
            "mov qword [rbp - 8], rax",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov eax, dword [rbp - 0x24]",
            "add eax, 1",
            "cdqe",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "mov rdx, rax",
            "mov rax, qword [rbp - 8]",
            "mov qword [rax + 8], rdx",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "test rax, rax",
            "jne 0xf815",
            "mov rax, qword [rbp - 8]",
            "mov dword [rax + 0x24], 1",
            "jmp 0xf845",
            "mov eax, dword [rbp - 0x24]",
            "movsxd rdx, eax",
            "mov rax, qword [rbp - 8]",
            "mov rax, qword [rax + 8]",
            "mov rcx, qword [rbp - 0x20]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "call sym.imp.strncpy",
            "mov rax, qword [rbp - 8]",
            "mov rdx, qword [rax + 8]",
            "mov eax, dword [rbp - 0x24]",
            "cdqe",
            "add rax, rdx",
            "mov byte [rax], 0",
            "leave",
            "ret"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00002010",
        "instructions": [
            "jmp qword [reloc.strncpy]"
        ]
    },
    "sym.imp.fmemopen": {
        "function_address": "0x000020f0",
        "instructions": [
            "jmp qword [reloc.fmemopen]"
        ]
    },
    "sym.imp.strerror_r": {
        "function_address": "0x00002320",
        "instructions": [
            "jmp qword [reloc.strerror_r]"
        ]
    },
    "sym.imp.XML_ParserCreate": {
        "function_address": "0x00002060",
        "instructions": [
            "jmp qword [reloc.XML_ParserCreate]"
        ]
    },
    "sym.imp.XML_SetUserData": {
        "function_address": "0x000021f0",
        "instructions": [
            "jmp qword [reloc.XML_SetUserData]"
        ]
    },
    "sym.imp.XML_SetElementHandler": {
        "function_address": "0x000024a0",
        "instructions": [
            "jmp qword [reloc.XML_SetElementHandler]"
        ]
    },
    "sym.imp.XML_SetCharacterDataHandler": {
        "function_address": "0x000021a0",
        "instructions": [
            "jmp qword [reloc.XML_SetCharacterDataHandler]"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x00002080",
        "instructions": [
            "jmp qword [reloc.fread]"
        ]
    },
    "sym.imp.XML_Parse": {
        "function_address": "0x00002270",
        "instructions": [
            "jmp qword [reloc.XML_Parse]"
        ]
    },
    "sym.imp.XML_GetCurrentLineNumber": {
        "function_address": "0x000020b0",
        "instructions": [
            "jmp qword [reloc.XML_GetCurrentLineNumber]"
        ]
    },
    "sym.imp.XML_GetErrorCode": {
        "function_address": "0x00001fd0",
        "instructions": [
            "jmp qword [reloc.XML_GetErrorCode]"
        ]
    },
    "sym.imp.XML_ErrorString": {
        "function_address": "0x000023f0",
        "instructions": [
            "jmp qword [reloc.XML_ErrorString]"
        ]
    },
    "sym.imp.XML_ParserFree": {
        "function_address": "0x000021d0",
        "instructions": [
            "jmp qword [reloc.XML_ParserFree]"
        ]
    },
    "sym.imp.__ctype_b_loc": {
        "function_address": "0x00002540",
        "instructions": [
            "jmp qword [reloc.__ctype_b_loc]"
        ]
    }
}