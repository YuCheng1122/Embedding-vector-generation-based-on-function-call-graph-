{
    "entry0": {
        "function_address": "0x00001f08",
        "instructions": [
            "ldr r3, [0x00001f2c]",
            "ldr r2, [0x00001f30]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "cmp r2, 0",
            "blne loc.imp.__gmon_start__",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00001d40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd10]!"
        ]
    },
    "sym.ANTLR3_TREE_ADAPTORDebugNew": {
        "function_address": "0x00009afc",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r1",
            "bl rsym.ANTLR3_TREE_ADAPTORNew",
            "subs r4, r0, 0",
            "beq 0x9b30",
            "mov r1, r5",
            "bl rsym.antlr3BaseTreeAdaptorInit",
            "ldr r2, [0x00009b3c]",
            "ldr r3, [0x00009b40]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r4, 0x40]",
            "str r3, [r4, 0x90]",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.ANTLR3_TREE_ADAPTORNew": {
        "function_address": "0x00001e54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc58]!"
        ]
    },
    "rsym.antlr3BaseTreeAdaptorInit": {
        "function_address": "0x00001bf0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdf0]!"
        ]
    },
    "sym.antlr3SetCTAPI": {
        "function_address": "0x00009050",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "str r0, [sp, 8]",
            "add r0, r0, 0x1c",
            "bl rsym.antlr3BaseTreeNew",
            "ldr r0, [0x00009174]",
            "ldr r1, [0x00009178]",
            "str r0, [sp, 4]",
            "ldr r8, [sp, 4]",
            "ldr r7, [0x0000917c]",
            "str r1, [sp]",
            "str r7, [sp, 0xc]",
            "add r8, pc, r8",
            "str r8, [sp, 4]",
            "ldr r7, [sp]",
            "ldr r8, [sp, 0xc]",
            "add r7, pc, r7",
            "add r8, pc, r8",
            "ldr ip, [0x00009180]",
            "str r7, [sp]",
            "str r8, [sp, 0xc]",
            "ldr r7, [sp, 8]",
            "ldr r8, [sp, 4]",
            "ldr r0, [0x00009184]",
            "ldr r3, [0x00009188]",
            "add ip, pc, ip",
            "ldr sb, [0x0000918c]",
            "ldr sl, [0x00009190]",
            "ldr r6, [0x00009194]",
            "ldr r5, [0x00009198]",
            "ldr r4, [0x0000919c]",
            "ldr r1, [0x000091a0]",
            "ldr r2, [0x000091a4]",
            "ldr fp, [0x000091a8]",
            "add r0, pc, r0",
            "add r3, pc, r3",
            "str r8, [r7, 0x48]",
            "str ip, [r7, 0x30]",
            "ldr r8, [sp]",
            "ldr ip, [sp, 0xc]",
            "str r0, [r7, 0x64]",
            "str r3, [r7, 0x5c]",
            "mov r0, 0",
            "add sb, pc, sb",
            "add sl, pc, sl",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add fp, pc, fp",
            "mvn r3, 0",
            "str r7, [r7, 0x1c]",
            "str sb, [r7, 0x7c]",
            "str sl, [r7, 0x88]",
            "str r8, [r7, 0x74]",
            "str r6, [r7, 0x50]",
            "str r5, [r7, 0x6c]",
            "str r4, [r7, 0x78]",
            "str r1, [r7, 0x68]",
            "str r2, [r7, 0x58]",
            "str fp, [r7, 0x3c]",
            "str ip, [r7, 0x94]",
            "str r0, [r7, 0x98]",
            "str r0, [r7, 0x24]",
            "str r0, [r7, 0xc]",
            "str r0, [r7, 4]",
            "str r0, [r7, 8]",
            "str r0, [r7, 0x10]",
            "str r3, [r7, 0x14]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3BaseTreeNew": {
        "function_address": "0x00001c50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdb0]!"
        ]
    },
    "sym.antlr3MTExceptionNew": {
        "function_address": "0x00003d6c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.antlr3RecognitionExceptionNew",
            "ldr r2, [r4, 8]",
            "ldr r3, [0x00003d9c]",
            "ldr r2, [r2, 4]",
            "add r3, pc, r3",
            "str r3, [r2, 4]",
            "mov r3, 2",
            "str r3, [r2]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3RecognitionExceptionNew": {
        "function_address": "0x00001ecc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc08]!"
        ]
    },
    "sym.antlr3dfapredict": {
        "function_address": "0x0000b90c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r0",
            "sub sp, sp, 0xc",
            "mov r0, r2",
            "mov r5, r3",
            "mov r4, r2",
            "mov r6, r1",
            "ldr ip, [r2, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x28]",
            "mov r8, 0",
            "ldr r3, [r3, r8, lsl 2]",
            "mov sb, r0",
            "cmp r3, 0",
            "mov sl, r8",
            "lsl fp, r8, 2",
            "blt 0xb9a4",
            "str r3, [sp]",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r4",
            "mov r3, r5",
            "ldr ip, [r5, 8]",
            "mov lr, pc",
            "bx ip",
            "subs r8, r0, 0",
            "blt 0xba90",
            "mov r0, r4",
            "ldr ip, [r4, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x28]",
            "mov sl, r8",
            "ldr r3, [r3, r8, lsl 2]",
            "lsl fp, r8, 2",
            "cmp r3, 0",
            "bge 0xb954",
            "ldr r3, [r5, 0x24]",
            "mov r0, r4",
            "ldr r3, [r3, r8, lsl 2]",
            "cmp r3, 0",
            "bgt 0xbaf0",
            "mov r1, 1",
            "ldr ip, [r4, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x1c]",
            "ldr r3, [r3, fp]",
            "cmp r0, r3",
            "blt 0xba40",
            "ldr r2, [r5, 0x20]",
            "ldr r2, [r2, fp]",
            "cmp r0, r2",
            "bgt 0xba40",
            "ldr r2, [r5, 0x2c]",
            "rsb r0, r3, r0",
            "ldr r2, [r2, fp]",
            "ldr r8, [r2, r0, lsl 2]",
            "cmp r8, 0",
            "bge 0xb97c",
            "ldr r3, [r5, 0x14]",
            "ldr r8, [r3, fp]",
            "cmp r8, 0",
            "bge 0xb97c",
            "mov r1, r5",
            "add r2, r5, 4",
            "mov r3, sl",
            "mov r0, r6",
            "bl fcn.0000b890",
            "mov r0, r4",
            "mov r1, sb",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 0",
            "b 0xba84",
            "ldr r3, [r5, 0x14]",
            "ldr r8, [r3, fp]",
            "cmp r8, 0",
            "bge 0xb97c",
            "cmn r0, 1",
            "beq 0xbab8",
            "mov r1, r5",
            "add r2, r5, 4",
            "mov r3, sl",
            "mov r0, r6",
            "bl fcn.0000b890",
            "mov r0, r4",
            "mov r1, sb",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r6, 8]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xba6c",
            "mov r1, r5",
            "mov r0, r6",
            "add r2, r5, 4",
            "mov r3, r8",
            "bl fcn.0000b890",
            "b 0xba6c",
            "ldr r3, [r5, 0x18]",
            "ldr r3, [r3, fp]",
            "cmp r3, 0",
            "blt 0xba58",
            "mov r0, r4",
            "mov r1, sb",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [r5, 0x18]",
            "ldr r3, [r5, 0x24]",
            "ldr r2, [r2, fp]",
            "ldr r0, [r3, r2, lsl 2]",
            "b 0xba84",
            "mov r1, sb",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x24]",
            "ldr r0, [r3, fp]",
            "b 0xba84"
        ]
    },
    "fcn.0000b890": {
        "function_address": "0x0000b890",
        "instructions": [
            "ldr ip, [r0, 8]",
            "push {r4, r5, lr}",
            "ldr r5, [ip, 0x20]",
            "sub sp, sp, 0x14",
            "cmp r5, 0",
            "movgt r3, 1",
            "mov r4, r0",
            "strgt r3, [ip, 0x18]",
            "ble 0xb8c0",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr",
            "str r1, [sp, 0xc]",
            "str r2, [sp, 8]",
            "str r3, [sp, 4]",
            "ldr ip, [r0, 0x88]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [r4, 8]",
            "ldr r2, [sp, 8]",
            "ldr r0, [r0, 4]",
            "ldr ip, [r2]",
            "ldr r1, [sp, 0xc]",
            "mov r2, 3",
            "str r2, [r0]",
            "ldr r2, [r1]",
            "ldr r3, [sp, 4]",
            "str ip, [r0, 8]",
            "str r2, [r0, 0x34]",
            "str r3, [r0, 0x38]",
            "b 0xb8b4"
        ]
    },
    "sym.antlr3CommonTokenDebugStreamSourceNew": {
        "function_address": "0x00010ccc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, r2",
            "bl rsym.antlr3CommonTokenStreamSourceNew",
            "ldr r2, [r0]",
            "ldr sl, [0x00010d48]",
            "ldr r8, [0x00010d4c]",
            "ldr r7, [0x00010d50]",
            "ldr r6, [0x00010d54]",
            "ldr r5, [0x00010d58]",
            "ldr ip, [0x00010d5c]",
            "ldr r1, [0x00010d60]",
            "ldr r3, [r2, 8]",
            "str r4, [r2, 0xc]",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "mov r4, 0",
            "str r4, [r2, 0x10]",
            "str sl, [r2, 0x14]",
            "str r8, [r3, 0x14]",
            "str r7, [r3, 0x18]",
            "str r6, [r3, 0x1c]",
            "str r5, [r3, 0x24]",
            "str ip, [r3, 0x28]",
            "str r1, [r3, 0x30]",
            "pop {r3, r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3CommonTokenStreamSourceNew": {
        "function_address": "0x00001eb4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc18]!"
        ]
    },
    "sym.antlr3GenericSetupStream": {
        "function_address": "0x0000c230",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "str r1, [sp, 0x2c]",
            "str r0, [sp, 4]",
            "bl rsym.antlr3IntStreamNew",
            "ldr ip, [0x0000c434]",
            "ldr r2, [0x0000c438]",
            "str ip, [sp, 8]",
            "ldr ip, [0x0000c43c]",
            "str r2, [sp]",
            "str ip, [sp, 0xc]",
            "ldr ip, [0x0000c440]",
            "mov r3, r0",
            "str ip, [sp, 0x10]",
            "ldr ip, [0x0000c444]",
            "ldr sb, [0x0000c448]",
            "str ip, [sp, 0x14]",
            "ldr ip, [0x0000c44c]",
            "ldr sl, [0x0000c450]",
            "str ip, [sp, 0x18]",
            "ldr ip, [0x0000c454]",
            "ldr r8, [0x0000c458]",
            "str ip, [sp, 0x1c]",
            "ldr ip, [0x0000c45c]",
            "ldr r7, [0x0000c460]",
            "str ip, [sp, 0x20]",
            "ldr ip, [0x0000c464]",
            "ldr r6, [0x0000c468]",
            "str ip, [sp, 0x24]",
            "ldr ip, [0x0000c46c]",
            "ldr r5, [0x0000c470]",
            "str ip, [sp, 0x28]",
            "ldr ip, [sp]",
            "ldr r4, [0x0000c474]",
            "add ip, pc, ip",
            "str ip, [sp]",
            "ldr ip, [sp, 8]",
            "ldr lr, [0x0000c478]",
            "add ip, pc, ip",
            "str ip, [sp, 8]",
            "ldr ip, [sp, 0xc]",
            "ldr r2, [0x0000c47c]",
            "add ip, pc, ip",
            "str ip, [sp, 0xc]",
            "ldr ip, [sp, 0x10]",
            "add r2, pc, r2",
            "add ip, pc, ip",
            "str ip, [sp, 0x10]",
            "ldr ip, [sp, 0x14]",
            "add lr, pc, lr",
            "add ip, pc, ip",
            "str ip, [sp, 0x14]",
            "ldr ip, [sp, 0x18]",
            "add sb, pc, sb",
            "add ip, pc, ip",
            "str ip, [sp, 0x18]",
            "ldr ip, [sp, 0x1c]",
            "add sl, pc, sl",
            "add ip, pc, ip",
            "str ip, [sp, 0x1c]",
            "ldr ip, [sp, 0x20]",
            "add r8, pc, r8",
            "add ip, pc, ip",
            "str ip, [sp, 0x20]",
            "ldr ip, [sp, 0x24]",
            "add r7, pc, r7",
            "add ip, pc, ip",
            "str ip, [sp, 0x24]",
            "ldr ip, [sp, 0x28]",
            "add r6, pc, r6",
            "add ip, pc, ip",
            "str ip, [sp, 0x28]",
            "ldr ip, [sp, 4]",
            "add r5, pc, r5",
            "str r0, [ip]",
            "mov r0, ip",
            "str ip, [r3, 8]",
            "ldr ip, [sp, 0x2c]",
            "add r4, pc, r4",
            "str ip, [r3]",
            "ldr ip, [sp]",
            "str lr, [r3, 0x2c]",
            "str ip, [r3, 0x10]",
            "ldr ip, [sp, 8]",
            "str sb, [r3, 0x14]",
            "str sl, [r3, 0x18]",
            "str r8, [r3, 0x20]",
            "str r7, [r3, 0x1c]",
            "str r6, [r3, 0x24]",
            "str r5, [r3, 0x28]",
            "str r4, [r3, 0x30]",
            "str r2, [r0, 0x40]",
            "str r2, [r0, 0x44]",
            "str ip, [r0, 0x54]",
            "ldr r2, [sp, 0xc]",
            "ldr ip, [sp, 0x10]",
            "str r2, [r0, 0x58]",
            "str ip, [r0, 0x5c]",
            "ldr r2, [sp, 0x14]",
            "ldr ip, [sp, 0x18]",
            "str r2, [r0, 0x60]",
            "str ip, [r0, 0x64]",
            "ldr r2, [sp, 0x1c]",
            "ldr ip, [sp, 0x20]",
            "ldr r1, [0x0000c480]",
            "ldr fp, [0x0000c484]",
            "str r2, [r0, 0x68]",
            "str ip, [r0, 0x6c]",
            "ldr r2, [sp, 0x24]",
            "ldr ip, [sp, 0x28]",
            "mov r3, 1",
            "strb r3, [r0, 8]",
            "add r1, pc, r1",
            "mov r3, 0",
            "add fp, pc, fp",
            "str r1, [r0, 0x48]",
            "str fp, [r0, 0x50]",
            "str r2, [r0, 0x70]",
            "str ip, [r0, 0x4c]",
            "str r3, [r0, 0x30]",
            "bl fcn.0000c0a0",
            "ldr r0, [sp, 4]",
            "mov r1, 0xa",
            "ldr ip, [r0, 0x70]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3IntStreamNew": {
        "function_address": "0x00001c68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xda0]!"
        ]
    },
    "fcn.0000c0a0": {
        "function_address": "0x0000c0a0",
        "instructions": [
            "ldr r2, [r0, 0xc]",
            "ldr r3, [r0, 0x30]",
            "mov r1, 1",
            "push {r4, lr}",
            "cmp r3, 0",
            "str r2, [r0, 0x18]",
            "str r1, [r0, 0x20]",
            "str r2, [r0, 0x24]",
            "mvn r1, 0",
            "mov r2, 0",
            "mov r4, r0",
            "str r1, [r0, 0x28]",
            "str r2, [r0, 0x2c]",
            "movne r0, r3",
            "ldrne ip, [r3, 0x90]",
            "movne lr, pc",
            "bxne ip"
        ]
    },
    "sym.antlr3VectorNew": {
        "function_address": "0x00008178",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, 0xb4",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "moveq r4, 1",
            "movne r1, r5",
            "blne rsym.antlr3SetVectorApi",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00001d1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd28]!"
        ]
    },
    "rsym.antlr3SetVectorApi": {
        "function_address": "0x00001ca4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd78]!"
        ]
    },
    "sym.antlr3BitsetList": {
        "function_address": "0x00006574",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x14",
            "mov r0, 0",
            "bl rsym.antlr3BitsetNew",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym.antlr3EnumNew",
            "mov r4, r0",
            "b 0x65ac",
            "ldr r1, [sp]",
            "ldr ip, [r5, 0x18]",
            "mov lr, pc",
            "bx ip",
            "add r1, sp, 0xc",
            "mov r2, sp",
            "mov r0, r4",
            "ldr ip, [r4, 0xc]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "mov r0, r5",
            "beq 0x659c",
            "mov r0, r4",
            "ldr ip, [r4, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3BitsetNew": {
        "function_address": "0x00001ce0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd50]!"
        ]
    },
    "rsym.antlr3EnumNew": {
        "function_address": "0x00001e78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc40]!"
        ]
    },
    "sym.antlr3RewriteRuleNODEStreamNewAEV": {
        "function_address": "0x0000e260",
        "instructions": [
            "push {r4, lr}",
            "bl fcn.0000dc3c",
            "ldr r4, [0x0000e2a0]",
            "ldr ip, [0x0000e2a4]",
            "ldr r1, [0x0000e2a8]",
            "ldr r2, [0x0000e2ac]",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "str r4, [r0, 0x38]",
            "str ip, [r0, 0x3c]",
            "str r1, [r0, 0x44]",
            "str r2, [r0, 0x50]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0000dc3c": {
        "function_address": "0x0000dc3c",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r3",
            "bl fcn.0000dad8",
            "subs r5, r0, 0",
            "beq 0xdc74",
            "ldr r3, [r5, 8]",
            "cmp r3, 0",
            "beq 0xdc68",
            "ldr r2, [r3, 0x88]",
            "cmp r2, 0",
            "beq 0xdc80",
            "mov r3, 0",
            "str r4, [r5, 8]",
            "str r3, [r5, 0xc]",
            "mov r0, r5",
            "pop {r3, r4, r5, lr}",
            "bx lr",
            "ldr r2, [r5, 0xc]",
            "cmp r2, 1",
            "bne 0xdc68",
            "mov r0, r3",
            "ldr ip, [r3, 0x90]",
            "mov lr, pc",
            "bx ip",
            "b 0xdc68"
        ]
    },
    "fcn.0000dad8": {
        "function_address": "0x0000dad8",
        "instructions": [
            "ldr r3, [r1, 8]",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r3, 0x68]",
            "sub sp, sp, 0x14",
            "ldr r4, [r3, 4]",
            "str r1, [sp, 4]",
            "cmp r4, 0",
            "str r0, [sp, 8]",
            "str r2, [sp, 0xc]",
            "beq 0xdbf0",
            "mov r0, r3",
            "sub r1, r4, 1",
            "ldr ip, [r3, 0x9c]",
            "mov lr, pc",
            "bx ip",
            "mov fp, r0",
            "ldr r1, [0x0000dc0c]",
            "ldr r3, [0x0000dc10]",
            "str r1, [sp]",
            "ldr r8, [sp]",
            "ldr r1, [0x0000dc14]",
            "add r8, pc, r8",
            "str r8, [sp]",
            "ldr r8, [sp, 4]",
            "add r3, pc, r3",
            "str r8, [fp, 0x1c]",
            "ldr r8, [sp]",
            "ldr sb, [0x0000dc18]",
            "ldr sl, [0x0000dc1c]",
            "ldr r7, [0x0000dc20]",
            "ldr r6, [0x0000dc24]",
            "ldr r5, [0x0000dc28]",
            "ldr r4, [0x0000dc2c]",
            "ldr ip, [0x0000dc30]",
            "ldr r0, [0x0000dc34]",
            "ldr r2, [0x0000dc38]",
            "add r1, pc, r1",
            "str r8, [fp, 0x28]",
            "str r3, [fp, 0x50]",
            "ldr r8, [sp, 8]",
            "ldr r3, [sp, 0xc]",
            "add sb, pc, sb",
            "add sl, pc, sl",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r2, pc, r2",
            "str r1, [fp, 0x4c]",
            "mov r1, 0",
            "str sb, [fp, 0x20]",
            "str sl, [fp, 0x24]",
            "str r7, [fp, 0x2c]",
            "str r6, [fp, 0x44]",
            "str r5, [fp, 0x30]",
            "str r4, [fp, 0x34]",
            "str ip, [fp, 0x40]",
            "str r0, [fp, 0x48]",
            "str r2, [fp, 0x3c]",
            "str r1, [fp, 4]",
            "str r1, [fp]",
            "str r1, [fp, 0x18]",
            "str r3, [fp, 0x10]",
            "str r8, [fp, 0x14]",
            "mov r0, fp",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, 0x54",
            "bl sym.imp.malloc",
            "subs fp, r0, 0",
            "beq 0xdbe0",
            "str r4, [fp, 8]",
            "str r4, [fp, 0xc]",
            "b 0xdb18"
        ]
    },
    "sym.antlr3BitsetNew": {
        "function_address": "0x00006404",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "mov r0, 0x3c",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x6468",
            "cmp r6, 0x200",
            "subhs r6, r6, 1",
            "lsrhs r6, r6, 6",
            "addhs r6, r6, 1",
            "lslhs r7, r6, 3",
            "movlo r7, 0x40",
            "mov r0, r7",
            "movlo r6, 8",
            "bl sym.imp.malloc",
            "mov r1, 0",
            "mov r5, r0",
            "str r0, [r4]",
            "mov r2, r7",
            "bl sym.imp.memset",
            "cmp r5, 0",
            "mov r0, r4",
            "str r6, [r4, 4]",
            "beq 0x6474",
            "bl rsym.antlr3BitsetSetAPI",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "bl sym.imp.free",
            "mov r4, r5",
            "b 0x6468"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00001de8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xca0]!"
        ]
    },
    "rsym.antlr3BitsetSetAPI": {
        "function_address": "0x00001dac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xcc8]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00001c20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdd0]!"
        ]
    },
    "sym.antlr3BitsetOf": {
        "function_address": "0x00006688",
        "instructions": [
            "push {r0, r1, r2, r3}",
            "push {r4, lr}",
            "sub sp, sp, 0x10",
            "ldr r1, [sp, 0x18]",
            "mov r0, 0",
            "str r1, [sp, 4]",
            "bl rsym.antlr3BitsetNew",
            "subs r4, r0, 0",
            "ldr r1, [sp, 4]",
            "beq 0x66e0",
            "add r3, sp, 0x1c",
            "cmn r1, 1",
            "str r3, [sp, 0xc]",
            "beq 0x66e0",
            "mov r0, r4",
            "bl fcn.00005e64",
            "ldr r3, [sp, 0xc]",
            "ldr r1, [r3]",
            "add r3, r3, 4",
            "cmn r1, 1",
            "str r3, [sp, 0xc]",
            "bne 0x66c0",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, lr}",
            "add sp, sp, 0x10",
            "bx lr"
        ]
    },
    "fcn.00005e64": {
        "function_address": "0x00005e64",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "ldr r1, [r0, 4]",
            "lsr r4, r6, 6",
            "cmp r1, r4",
            "mov r5, r0",
            "bhi 0x5e9c",
            "lsl r3, r1, 1",
            "add r1, r4, 1",
            "cmp r3, r1",
            "movhi r1, r3",
            "ldr ip, [r0, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "and r6, r6, 0x3f",
            "mov r1, 1",
            "rsb r0, r6, 0x20",
            "lsr r3, r1, r0",
            "subs r0, r6, 0x20",
            "lslpl r3, r1, r0",
            "lsl r2, r1, r6",
            "ldr r1, [r5]",
            "add r4, r1, r4, lsl 3",
            "ldm r4, {r0, r1}",
            "orr r2, r2, r0",
            "orr r3, r3, r1",
            "stm r4, {r2, r3}",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3TopoNew": {
        "function_address": "0x00008374",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "beq 0x83dc",
            "ldr r4, [0x000083e4]",
            "ldr ip, [0x000083e8]",
            "ldr r1, [0x000083ec]",
            "ldr r2, [0x000083f0]",
            "mov r3, 0",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "mov r5, 1",
            "str r3, [r0, 0x18]",
            "str r5, [r0, 0x14]",
            "str r3, [r0]",
            "str r3, [r0, 4]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0xc]",
            "str r4, [r0, 0x1c]",
            "str ip, [r0, 0x20]",
            "str r1, [r0, 0x24]",
            "str r2, [r0, 0x28]",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3CommonTokenStreamNew": {
        "function_address": "0x00010940",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r0, 0x44",
            "sub sp, sp, 0x4c",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "beq 0x10bfc",
            "bl rsym.antlr3TokenStreamNew",
            "ldr r1, [sp, 4]",
            "mov r4, r0",
            "str r0, [r1]",
            "str r1, [r0, 4]",
            "bl rsym.antlr3IntStreamNew",
            "ldr r2, [sp, 4]",
            "ldr fp, [0x00010c0c]",
            "ldr r3, [r2]",
            "str r0, [r4, 8]",
            "ldr r2, [r3, 8]",
            "mov r0, 0",
            "str r3, [r2, 8]",
            "mov r3, 2",
            "str r3, [r2]",
            "bl rsym.antlr3VectorNew",
            "str fp, [sp]",
            "ldr fp, [0x00010c10]",
            "ldr r3, [sp, 4]",
            "str fp, [sp, 0xc]",
            "ldr fp, [0x00010c14]",
            "ldr r2, [r3]",
            "str fp, [sp, 0x14]",
            "ldr fp, [0x00010c18]",
            "ldr r3, [0x00010c1c]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [0x00010c20]",
            "str r3, [sp, 8]",
            "str fp, [sp, 0x24]",
            "ldr fp, [0x00010c24]",
            "ldr r3, [0x00010c28]",
            "str fp, [sp, 0x2c]",
            "ldr fp, [0x00010c2c]",
            "str r3, [sp, 0x10]",
            "str fp, [sp, 0x34]",
            "ldr fp, [0x00010c30]",
            "ldr r3, [0x00010c34]",
            "str fp, [sp, 0x3c]",
            "ldr fp, [0x00010c38]",
            "str r3, [sp, 0x18]",
            "str fp, [sp, 0x44]",
            "ldr fp, [sp]",
            "ldr r3, [0x00010c3c]",
            "add fp, pc, fp",
            "str fp, [sp]",
            "ldr fp, [sp, 8]",
            "str r3, [sp, 0x20]",
            "add fp, pc, fp",
            "str fp, [sp, 8]",
            "ldr fp, [sp, 0xc]",
            "ldr r3, [0x00010c40]",
            "add fp, pc, fp",
            "str fp, [sp, 0xc]",
            "ldr fp, [sp, 0x10]",
            "str r3, [sp, 0x28]",
            "add fp, pc, fp",
            "str fp, [sp, 0x10]",
            "ldr fp, [sp, 0x14]",
            "ldr r3, [0x00010c44]",
            "add fp, pc, fp",
            "str fp, [sp, 0x14]",
            "ldr fp, [sp, 0x18]",
            "str r3, [sp, 0x30]",
            "add fp, pc, fp",
            "ldr r3, [0x00010c48]",
            "str fp, [sp, 0x18]",
            "ldr fp, [sp, 0x1c]",
            "str r3, [sp, 0x38]",
            "ldr r3, [0x00010c4c]",
            "add fp, pc, fp",
            "str r3, [sp, 0x40]",
            "ldr r3, [r2, 8]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "ldr r1, [0x00010c50]",
            "add fp, pc, fp",
            "str fp, [sp, 0x20]",
            "ldr fp, [sp, 0x24]",
            "add r1, pc, r1",
            "add fp, pc, fp",
            "str fp, [sp, 0x24]",
            "ldr fp, [sp, 0x28]",
            "ldr sl, [0x00010c54]",
            "add fp, pc, fp",
            "str fp, [sp, 0x28]",
            "ldr fp, [sp, 0x2c]",
            "ldr r8, [0x00010c58]",
            "add fp, pc, fp",
            "str fp, [sp, 0x2c]",
            "ldr fp, [sp, 0x30]",
            "ldr r7, [0x00010c5c]",
            "add fp, pc, fp",
            "str fp, [sp, 0x30]",
            "ldr fp, [sp, 0x34]",
            "ldr r6, [0x00010c60]",
            "add fp, pc, fp",
            "str fp, [sp, 0x34]",
            "ldr fp, [sp, 0x38]",
            "ldr r5, [0x00010c64]",
            "add fp, pc, fp",
            "str fp, [sp, 0x38]",
            "ldr fp, [sp, 0x3c]",
            "ldr r4, [0x00010c68]",
            "add fp, pc, fp",
            "str fp, [sp, 0x3c]",
            "ldr fp, [sp, 0x40]",
            "ldr ip, [0x00010c6c]",
            "add fp, pc, fp",
            "str fp, [sp, 0x40]",
            "ldr fp, [sp, 0x44]",
            "ldr sb, [0x00010c70]",
            "add fp, pc, fp",
            "str fp, [sp, 0x44]",
            "ldr fp, [sp, 4]",
            "add sl, pc, sl",
            "str r1, [fp, 0x3c]",
            "ldr r1, [sp]",
            "str r0, [fp, 8]",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add sb, pc, sb",
            "mvn r0, 0",
            "str r0, [fp, 0x1c]",
            "str sl, [fp, 0x20]",
            "str r8, [fp, 0x24]",
            "str r7, [fp, 0x28]",
            "str r6, [fp, 0x2c]",
            "str r5, [fp, 0x30]",
            "str r4, [fp, 0x34]",
            "str ip, [fp, 0x38]",
            "str sb, [r2, 0x14]",
            "str r1, [r2, 0x18]",
            "ldr fp, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "str fp, [r2, 0x1c]",
            "str r1, [r2, 0x20]",
            "ldr fp, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "str fp, [r2, 0x24]",
            "str r1, [r2, 0x28]",
            "ldr fp, [sp, 0x18]",
            "ldr r1, [sp, 0x1c]",
            "str fp, [r2, 0x2c]",
            "str r1, [r2, 0x30]",
            "ldr r2, [sp, 0x20]",
            "ldr fp, [sp, 0x24]",
            "ldr r1, [sp, 0x28]",
            "str r2, [r3, 0x18]",
            "ldr r2, [sp, 0x2c]",
            "str fp, [r3, 0x1c]",
            "str r1, [r3, 0x2c]",
            "ldr fp, [sp, 0x30]",
            "ldr r1, [sp, 0x34]",
            "str r2, [r3, 0x34]",
            "ldr r2, [sp, 0x38]",
            "str fp, [r3, 0x20]",
            "str r1, [r3, 0x24]",
            "str r2, [r3, 0x28]",
            "ldr fp, [sp, 0x3c]",
            "ldr r1, [sp, 0x40]",
            "ldr r2, [sp, 0x44]",
            "str fp, [r3, 0x30]",
            "str r1, [r3, 0x14]",
            "str r2, [r3, 0x10]",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3TokenStreamNew": {
        "function_address": "0x00001e6c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc48]!"
        ]
    },
    "rsym.antlr3VectorNew": {
        "function_address": "0x00001cec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd48]!"
        ]
    },
    "sym.antlr3ParserNewStreamDbg": {
        "function_address": "0x0000d780",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r2",
            "mov r2, r3",
            "bl rsym.antlr3ParserNewStream",
            "subs r5, r0, 0",
            "movne r1, r4",
            "ldrne ip, [r5, 0xc]",
            "movne lr, pc",
            "bxne ip"
        ]
    },
    "rsym.antlr3ParserNewStream": {
        "function_address": "0x00001d70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xcf0]!"
        ]
    },
    "sym.antlr3LexerNew": {
        "function_address": "0x0000d2b0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x1c",
            "mov r0, 0x50",
            "mov r4, r1",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "beq 0xd4b8",
            "mov r2, r4",
            "mov r0, 1",
            "mov r1, r5",
            "bl rsym.antlr3BaseRecognizerNew",
            "ldr r3, [sp, 4]",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [r3, 0xc]",
            "beq 0xd508",
            "ldr r5, [r0, 8]",
            "ldr ip, [0x0000d548]",
            "ldr r6, [r5, 0x38]",
            "ldr r0, [0x0000d54c]",
            "ldr r1, [0x0000d550]",
            "ldr r2, [0x0000d554]",
            "ldr r3, [0x0000d558]",
            "ldr r7, [sp, 4]",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "cmp r6, 0",
            "str r6, [sp, 8]",
            "str r7, [r4]",
            "str ip, [r4, 0x28]",
            "str r0, [r4, 0x24]",
            "str r1, [r4, 0x8c]",
            "str r2, [r4, 0x7c]",
            "str r3, [r4, 0x80]",
            "beq 0xd4c8",
            "ldr r7, [0x0000d55c]",
            "ldr lr, [0x0000d560]",
            "str r7, [sp, 0xc]",
            "ldr r7, [0x0000d564]",
            "str lr, [sp]",
            "str r7, [sp, 0x10]",
            "ldr r7, [sp]",
            "ldr r8, [0x0000d568]",
            "add r7, pc, r7",
            "str r7, [sp]",
            "ldr r7, [sp, 0xc]",
            "ldr lr, [0x0000d56c]",
            "add r7, pc, r7",
            "str r7, [sp, 0xc]",
            "ldr r7, [sp, 0x10]",
            "ldr ip, [0x0000d570]",
            "add r7, pc, r7",
            "str r7, [sp, 0x10]",
            "ldr r7, [sp, 8]",
            "add r8, pc, r8",
            "add r7, r7, 8",
            "str r7, [sp, 0x14]",
            "ldr r7, [sp, 4]",
            "add lr, pc, lr",
            "add ip, pc, ip",
            "ldr fp, [0x0000d574]",
            "ldr sb, [0x0000d578]",
            "ldr sl, [0x0000d57c]",
            "ldr r6, [0x0000d580]",
            "ldr r5, [0x0000d584]",
            "ldr r4, [0x0000d588]",
            "ldr r0, [0x0000d58c]",
            "ldr r1, [0x0000d590]",
            "ldr r2, [0x0000d594]",
            "ldr r3, [0x0000d598]",
            "str r8, [r7, 0x18]",
            "str lr, [r7, 0x30]",
            "str ip, [r7, 0x34]",
            "ldr lr, [sp, 0x10]",
            "ldr ip, [sp, 0xc]",
            "ldr r8, [sp]",
            "add r3, pc, r3",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "add r0, pc, r0",
            "add fp, pc, fp",
            "add sb, pc, sb",
            "add sl, pc, sl",
            "str ip, [r7, 0x48]",
            "str lr, [r7, 0x4c]",
            "str r3, [r7, 0x44]",
            "str r6, [r7, 0x1c]",
            "str r5, [r7, 0x28]",
            "str r4, [r7, 0x2c]",
            "str r0, [r7, 0x38]",
            "str r1, [r7, 0x3c]",
            "str r2, [r7, 0x40]",
            "str fp, [r7, 0x10]",
            "str sb, [r7, 0x24]",
            "str sl, [r7, 0x14]",
            "str r8, [r7, 0x20]",
            "ldr r0, [sp, 0x14]",
            "bl rsym.antlr3SetTokenAPI",
            "mvn r1, 0",
            "ldr r2, [sp, 8]",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [r2, 0x60]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r7, 0xc]",
            "mov r5, 0",
            "ldr r3, [r3, 8]",
            "mov r6, 1",
            "ldr r4, [r3, 0x38]",
            "ldr r3, [sp, 8]",
            "add r7, r4, 0x98",
            "str r6, [r3, 0xc]",
            "str r5, [r3, 0x10]",
            "mov r0, r7",
            "bl rsym.antlr3SetTokenAPI",
            "mov r0, r7",
            "mov r1, r5",
            "ldr ip, [r4, 0xf0]",
            "mov lr, pc",
            "bx ip",
            "str r6, [r4, 0x9c]",
            "str r5, [r4, 0xa0]",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, 0x130",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "mov r6, r0",
            "str r0, [r5, 0x38]",
            "beq 0xd520",
            "ldr r3, [0x0000d59c]",
            "ldr r8, [sp, 8]",
            "ldr ip, [sp, 4]",
            "add r3, pc, r3",
            "str r8, [r0, 4]",
            "str ip, [r0, 0x128]",
            "str r3, [r0]",
            "str r0, [sp, 8]",
            "str r8, [r5, 0x34]",
            "b 0xd350",
            "mov r0, r3",
            "ldr ip, [r3, 0x4c]",
            "mov lr, pc",
            "bx ip",
            "str r4, [sp, 4]",
            "b 0xd4b8",
            "mov r0, r4",
            "ldr ip, [r4, 0x90]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 4]",
            "ldr ip, [r7, 0x4c]",
            "mov lr, pc",
            "bx ip",
            "str r6, [sp, 4]",
            "b 0xd4b8"
        ]
    },
    "rsym.antlr3BaseRecognizerNew": {
        "function_address": "0x00001d94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xcd8]!"
        ]
    },
    "rsym.antlr3SetTokenAPI": {
        "function_address": "0x00001e0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc88]!"
        ]
    },
    "sym.antlr3RecognitionExceptionNew": {
        "function_address": "0x00003a78",
        "instructions": [
            "ldr r2, [r0, 4]",
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "ldr r3, [0x00003d4c]",
            "cmp r2, 2",
            "mov r4, r0",
            "add r3, pc, r3",
            "beq 0x3bbc",
            "cmp r2, 4",
            "beq 0x3ba0",
            "cmp r2, 1",
            "beq 0x3acc",
            "ldr r2, [0x00003d50]",
            "ldr r0, [0x00003d54]",
            "ldr r3, [r3, r2]",
            "add r0, pc, r0",
            "mov r1, 1",
            "mov r2, 0x7a",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "pop {r3, r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [r0]",
            "mov r6, 0",
            "ldr r7, [r3, 8]",
            "mov r8, r6",
            "ldr r5, [r7]",
            "ldr r1, [0x00003d58]",
            "mov r2, 0",
            "add r1, pc, r1",
            "mov r0, 1",
            "mov r3, r2",
            "bl rsym.antlr3ExceptionNew",
            "ldr r1, [r5]",
            "mov sl, r0",
            "and r1, r1, 7",
            "cmp r1, 2",
            "beq 0x3c80",
            "cmp r1, 4",
            "beq 0x3bd8",
            "cmp r1, 1",
            "bne 0x3b80",
            "mov r0, r5",
            "ldr ip, [r5, 0x18]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0x28]",
            "mov r0, r7",
            "ldr ip, [r7, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0x2c]",
            "mov r0, r7",
            "ldr ip, [r7, 0x64]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0x30]",
            "mov r0, r5",
            "ldr ip, [r5, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [0x00003d5c]",
            "ldr r2, [r7, 0x34]",
            "add r3, pc, r3",
            "str r0, [sl, 0x14]",
            "str r2, [sl, 0xc]",
            "str r3, [sl, 8]",
            "ldr r3, [r4, 8]",
            "ldr r2, [r3, 4]",
            "str r5, [sl, 0x44]",
            "str r2, [sl, 0x40]",
            "mov r2, 1",
            "str sl, [r3, 4]",
            "str r2, [r3]",
            "b 0x3ac4",
            "ldr r3, [r0]",
            "mov r8, 0",
            "ldr r3, [r3, 8]",
            "mov r7, r8",
            "ldr r6, [r3, 4]",
            "ldr r5, [r6, 4]",
            "b 0x3ae0",
            "ldr r3, [r0]",
            "mov r6, 0",
            "ldr r3, [r3, 8]",
            "mov r7, r6",
            "ldr r8, [r3, 4]",
            "ldr r5, [r3, 8]",
            "b 0x3ae0",
            "mov r1, 1",
            "mov r0, r6",
            "ldr ip, [r6, 8]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0x18]",
            "ldr ip, [r0, 0x58]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 0x18]",
            "str r0, [sl, 0x2c]",
            "mov r0, r3",
            "ldr ip, [r3, 0x34]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r6, 4]",
            "str r0, [sl, 0x30]",
            "mov r0, r3",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 0x18]",
            "str r0, [sl, 0x14]",
            "ldr r2, [r3]",
            "ldr r2, [r2, 0xc]",
            "cmp r2, 0",
            "beq 0x3d28",
            "ldr r3, [r2, 0x1c]",
            "cmp r3, 0",
            "ldrne r3, [r3, 0x34]",
            "str r3, [sl, 0xc]",
            "ldr r3, [0x00003d60]",
            "add r3, pc, r3",
            "str r3, [sl, 8]",
            "ldr r3, [r4, 8]",
            "ldr r2, [r3, 4]",
            "str r5, [sl, 0x44]",
            "str r2, [sl, 0x40]",
            "mov r2, 1",
            "str sl, [r3, 4]",
            "str r2, [r3]",
            "b 0x3ac4",
            "ldr r3, [r8]",
            "mov r1, 1",
            "mov r0, r3",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0x18]",
            "ldr ip, [r0, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 0x18]",
            "str r0, [sl, 0x2c]",
            "mov r0, r3",
            "ldr ip, [r3, 0x64]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r8]",
            "str r0, [sl, 0x30]",
            "ldr r3, [r3, 8]",
            "mov r0, r3",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 0x18]",
            "str r0, [sl, 0x14]",
            "ldr r2, [r3]",
            "cmn r2, 1",
            "ldrne r3, [r3, 0x1c]",
            "moveq r3, 0",
            "ldrne r3, [r3, 0x34]",
            "str r3, [sl, 0xc]",
            "ldr r3, [0x00003d64]",
            "add r3, pc, r3",
            "str r3, [sl, 8]",
            "ldr r3, [r4, 8]",
            "ldr r2, [r3, 4]",
            "str r5, [sl, 0x44]",
            "str r2, [sl, 0x40]",
            "mov r2, 1",
            "str sl, [r3, 4]",
            "str r2, [r3]",
            "b 0x3ac4",
            "ldr r3, [r3, 0x10]",
            "ldr r1, [0x00003d68]",
            "mov r0, r3",
            "add r1, pc, r1",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sl, 0xc]",
            "b 0x3c54"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00001cd4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd58]!"
        ]
    },
    "rsym.antlr3ExceptionNew": {
        "function_address": "0x00001bb4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe18]!"
        ]
    },
    "sym.antlr3VectorFactoryNew": {
        "function_address": "0x0000824c",
        "instructions": [
            "push {r4, lr}",
            "mov r0, 0xd0",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x82b4",
            "mov r2, 0",
            "mvn r3, 0",
            "stm r4, {r2, r3}",
            "bl fcn.000076cc",
            "add r0, r4, 0xc",
            "mov r1, 0x10",
            "bl rsym.antlr3SetVectorApi",
            "ldr r1, [0x000082c0]",
            "ldr r2, [0x000082c4]",
            "ldr r3, [0x000082c8]",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "mov r0, 1",
            "str r0, [r4, 0x94]",
            "str r1, [r4, 0xc4]",
            "str r2, [r4, 0xc8]",
            "str r3, [r4, 0xcc]",
            "mov r0, 0x10",
            "bl rsym.antlr3StackNew",
            "str r0, [r4, 0xc0]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000076cc": {
        "function_address": "0x000076cc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r1}",
            "add r3, r1, 1",
            "add r1, r1, 2",
            "str r3, [r4, 4]",
            "lsl r1, r1, 2",
            "bl sym.imp.realloc",
            "mov r5, r0",
            "str r0, [r4]",
            "mov r0, 0xb400",
            "ldr r6, [r4, 4]",
            "bl sym.imp.malloc",
            "mov r3, 0",
            "str r0, [r5, r6, lsl 2]",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3StackNew": {
        "function_address": "0x00001ddc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xca8]!"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00001c8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd88]!"
        ]
    },
    "sym.antlr3TokenFactoryNew": {
        "function_address": "0x00008b28",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, 0xac",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x8ba4",
            "ldr r3, [0x00008bb0]",
            "ldr r1, [0x00008bb4]",
            "add r3, pc, r3",
            "ldr r2, [0x00008bb8]",
            "str r3, [r4, 0xa4]",
            "mvn r3, 0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "mov r6, r4",
            "str r3, [r4, 4]",
            "mov r3, 0",
            "str r3, [r6], 0xc",
            "str r1, [r4, 0xa0]",
            "str r2, [r4, 0xa8]",
            "bl fcn.00008730",
            "mov r0, r6",
            "bl rsym.antlr3SetTokenAPI",
            "cmp r5, 0",
            "mov r3, 1",
            "str r3, [r4, 0x10]",
            "ldrne r3, [r5, 0x14]",
            "str r5, [r4, 0x9c]",
            "str r5, [r4, 0x28]",
            "strne r3, [r4, 0x14]",
            "streq r5, [r4, 0x14]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.00008730": {
        "function_address": "0x00008730",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r1}",
            "add r3, r1, 1",
            "add r1, r1, 2",
            "str r3, [r4, 4]",
            "lsl r1, r1, 2",
            "bl sym.imp.realloc",
            "mov r5, r0",
            "str r0, [r4]",
            "mov r0, 0x24000",
            "ldr r6, [r4, 4]",
            "bl sym.imp.malloc",
            "mov r3, 0",
            "str r0, [r5, r6, lsl 2]",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3StringFactoryNew": {
        "function_address": "0x0000f77c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0xf80c",
            "mov r0, 0",
            "bl rsym.antlr3VectorNew",
            "mov r3, 0",
            "cmp r0, 0",
            "mov r5, r0",
            "str r0, [r4]",
            "str r3, [r4, 4]",
            "beq 0xf818",
            "ldr r6, [0x0000f828]",
            "ldr r5, [0x0000f82c]",
            "ldr r2, [0x0000f830]",
            "ldr r3, [0x0000f834]",
            "ldr ip, [0x0000f838]",
            "ldr r0, [0x0000f83c]",
            "ldr r1, [0x0000f840]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "str r6, [r4, 8]",
            "str r5, [r4, 0xc]",
            "str r2, [r4, 0x10]",
            "str r2, [r4, 0x14]",
            "str r3, [r4, 0x18]",
            "str r3, [r4, 0x1c]",
            "str ip, [r4, 0x20]",
            "str r0, [r4, 0x24]",
            "str r1, [r4, 0x28]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r5",
            "b 0xf80c"
        ]
    },
    "sym.antlr3CommonTreeNodeStreamNew": {
        "function_address": "0x0000a898",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "str r0, [sp, 0x14]",
            "str r1, [sp, 0x44]",
            "mov r0, 1",
            "mov r1, 0x2fc",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0xac50",
            "ldr r2, [sp, 0x14]",
            "str r2, [r0, 8]",
            "mov r0, r2",
            "bl rsym.ANTLR3_TREE_ADAPTORNew",
            "ldr r3, [sp, 8]",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [r3, 0x288]",
            "beq 0xac60",
            "bl rsym.antlr3TreeNodeStreamNew",
            "ldr r1, [sp, 8]",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [r1, 4]",
            "beq 0xac78",
            "bl rsym.antlr3IntStreamNew",
            "ldr r2, [sp, 8]",
            "ldr r2, [r2, 4]",
            "str r0, [r4, 4]",
            "ldr r3, [r2, 4]",
            "str r2, [sp, 0x10]",
            "cmp r3, 0",
            "str r3, [sp, 0xc]",
            "beq 0xaca4",
            "ldr r3, [0x0000acf0]",
            "ldr fp, [0x0000acf4]",
            "str r3, [sp, 4]",
            "ldr r3, [0x0000acf8]",
            "ldr sb, [0x0000acfc]",
            "str r3, [sp, 0x18]",
            "ldr r3, [0x0000ad00]",
            "ldr sl, [0x0000ad04]",
            "str r3, [sp, 0x1c]",
            "ldr r3, [0x0000ad08]",
            "ldr r8, [0x0000ad0c]",
            "str r3, [sp, 0x20]",
            "ldr r3, [0x0000ad10]",
            "ldr r7, [0x0000ad14]",
            "str r3, [sp, 0x24]",
            "ldr r3, [0x0000ad18]",
            "ldr r6, [0x0000ad1c]",
            "str r3, [sp, 0x28]",
            "ldr r3, [0x0000ad20]",
            "ldr r5, [0x0000ad24]",
            "str r3, [sp, 0x2c]",
            "ldr r3, [0x0000ad28]",
            "ldr r0, [0x0000ad2c]",
            "str r3, [sp, 0x30]",
            "ldr r3, [0x0000ad30]",
            "add r5, pc, r5",
            "str r3, [sp, 0x34]",
            "ldr r3, [0x0000ad34]",
            "add r0, pc, r0",
            "str r3, [sp, 0x38]",
            "ldr r3, [0x0000ad38]",
            "ldr r1, [0x0000ad3c]",
            "str r3, [sp, 0x3c]",
            "ldr r3, [0x0000ad40]",
            "add fp, pc, fp",
            "str r3, [sp, 0x40]",
            "ldr r3, [sp, 4]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str r3, [sp, 4]",
            "ldr r3, [sp, 0x18]",
            "add sl, pc, sl",
            "add r3, pc, r3",
            "str r3, [sp, 0x18]",
            "ldr r3, [sp, 0x1c]",
            "add r8, pc, r8",
            "add r3, pc, r3",
            "str r3, [sp, 0x1c]",
            "ldr r3, [sp, 0x20]",
            "add r7, pc, r7",
            "add r3, pc, r3",
            "str r3, [sp, 0x20]",
            "ldr r3, [sp, 0x24]",
            "add r6, pc, r6",
            "add r3, pc, r3",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x28]",
            "add r1, pc, r1",
            "add r3, pc, r3",
            "str r3, [sp, 0x28]",
            "ldr r3, [sp, 0x2c]",
            "ldr r2, [0x0000ad44]",
            "add r3, pc, r3",
            "str r3, [sp, 0x2c]",
            "ldr r3, [sp, 0x30]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r3, [sp, 0x30]",
            "ldr r3, [sp, 0x34]",
            "ldr r4, [0x0000ad48]",
            "add r3, pc, r3",
            "str r3, [sp, 0x34]",
            "ldr r3, [sp, 0x38]",
            "ldr lr, [0x0000ad4c]",
            "add r3, pc, r3",
            "str r3, [sp, 0x38]",
            "ldr r3, [sp, 0x3c]",
            "ldr ip, [0x0000ad50]",
            "add r3, pc, r3",
            "str r3, [sp, 0x3c]",
            "ldr r3, [sp, 0x40]",
            "add lr, pc, lr",
            "add r3, pc, r3",
            "str r3, [sp, 0x40]",
            "ldr r3, [sp, 8]",
            "add ip, pc, ip",
            "str r5, [r3, 0x2ec]",
            "str r0, [r3, 0x2f4]",
            "str fp, [r3, 0x2d0]",
            "str sb, [r3, 0x2e0]",
            "str sl, [r3, 0x2d4]",
            "str r8, [r3, 0x2d8]",
            "str r7, [r3, 0x2f0]",
            "str r6, [r3, 0x2e8]",
            "ldr r3, [sp, 0x10]",
            "add r4, pc, r4",
            "str r1, [r3, 0x14]",
            "ldr r1, [sp, 4]",
            "str r2, [r3, 0x18]",
            "str r1, [r3, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "ldr r1, [sp, 0x1c]",
            "str lr, [r3, 0xc]",
            "str ip, [r3, 8]",
            "str r2, [r3, 0x20]",
            "str r4, [r3, 0x10]",
            "str r1, [r3, 0x28]",
            "ldr r2, [sp, 0x20]",
            "ldr r3, [sp, 0xc]",
            "ldr r1, [sp, 0x24]",
            "str r2, [r3, 0x14]",
            "ldr r2, [sp, 0x28]",
            "str r1, [r3, 0x20]",
            "str r2, [r3, 0x18]",
            "ldr r1, [sp, 0x2c]",
            "ldr r2, [sp, 0x30]",
            "str r1, [r3, 0x1c]",
            "str r2, [r3, 0x2c]",
            "ldr r1, [sp, 0x34]",
            "ldr r2, [sp, 0x38]",
            "str r1, [r3, 0x24]",
            "ldr r1, [sp, 0x3c]",
            "str r2, [r3, 0x28]",
            "ldr r2, [sp, 0x40]",
            "str r1, [r3, 0x30]",
            "ldr r1, [sp, 0xc]",
            "str r2, [r3, 0x34]",
            "ldr r2, [sp, 0x10]",
            "mov r3, 4",
            "str r3, [r1]",
            "ldr r3, [sp, 8]",
            "str r2, [r1, 8]",
            "mov r1, 0",
            "str r3, [r2]",
            "mov r0, 0xa",
            "str r1, [r3]",
            "str r1, [r3, 0x280]",
            "str r1, [r3, 0x2b4]",
            "bl rsym.antlr3StackNew",
            "ldr r2, [sp, 8]",
            "mvn r5, 0",
            "str r0, [r2, 0x28c]",
            "ldr r0, [sp, 0x44]",
            "mov r4, 1",
            "cmp r0, 0",
            "moveq r0, 0x64",
            "bl rsym.antlr3VectorNew",
            "ldr r1, [sp, 8]",
            "str r0, [r1, 0x27c]",
            "str r5, [r1, 0x290]",
            "add r0, r1, 0xa8",
            "bl rsym.antlr3SetCTAPI",
            "ldr r2, [sp, 8]",
            "add r0, r2, 0xc",
            "bl rsym.antlr3SetCTAPI",
            "ldr r3, [sp, 8]",
            "add r0, r3, 0x144",
            "bl rsym.antlr3SetCTAPI",
            "ldr r1, [sp, 8]",
            "add r0, r1, 0x1e0",
            "bl rsym.antlr3SetCTAPI",
            "mov r0, 3",
            "bl rsym.antlr3CommonTokenNew",
            "ldr r2, [0x0000ad54]",
            "ldr r1, [sp, 0x14]",
            "add r2, pc, r2",
            "str r2, [r0, 0x30]",
            "ldr r2, [sp, 8]",
            "mov r3, r0",
            "str r1, [r0, 8]",
            "str r4, [r0, 0x2c]",
            "str r3, [r2, 0xb4]",
            "mov r0, 2",
            "bl rsym.antlr3CommonTokenNew",
            "ldr r2, [0x0000ad58]",
            "ldr r1, [sp, 0x14]",
            "add r2, pc, r2",
            "str r2, [r0, 0x30]",
            "ldr r2, [sp, 8]",
            "mov r3, r0",
            "str r1, [r0, 8]",
            "str r4, [r0, 0x2c]",
            "str r3, [r2, 0x18]",
            "mov r0, r5",
            "bl rsym.antlr3CommonTokenNew",
            "ldr r2, [0x0000ad5c]",
            "ldr r1, [sp, 0x14]",
            "add r2, pc, r2",
            "str r2, [r0, 0x30]",
            "ldr r2, [sp, 8]",
            "mov r3, r0",
            "str r1, [r0, 8]",
            "str r4, [r0, 0x2c]",
            "str r3, [r2, 0x150]",
            "mov r0, 0",
            "bl rsym.antlr3CommonTokenNew",
            "ldr r3, [0x0000ad60]",
            "ldr r2, [sp, 0x14]",
            "add r3, pc, r3",
            "str r3, [r0, 0x30]",
            "ldr r3, [sp, 8]",
            "str r2, [r0, 8]",
            "str r4, [r0, 0x2c]",
            "str r0, [r3, 0x1ec]",
            "ldr r0, [sp, 8]",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r3",
            "ldr ip, [r3, 0x2f4]",
            "mov lr, pc",
            "bx ip",
            "str r4, [sp, 8]",
            "b 0xac50",
            "ldr r3, [r1, 0x288]",
            "mov r0, r3",
            "ldr ip, [r3, 0xa8]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 8]",
            "ldr ip, [r0, 0x2f4]",
            "mov lr, pc",
            "bx ip",
            "str r4, [sp, 8]",
            "b 0xac50",
            "ldr r1, [sp, 8]",
            "ldr r3, [r1, 0x288]",
            "mov r0, r3",
            "ldr ip, [r3, 0xa8]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 8]",
            "ldr r3, [r2, 4]",
            "mov r0, r3",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 8]",
            "ldr ip, [r0, 0x2f4]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 0xc]",
            "str r3, [sp, 8]",
            "b 0xac50"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x00001b90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe30]!"
        ]
    },
    "rsym.antlr3TreeNodeStreamNew": {
        "function_address": "0x00001e30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc70]!"
        ]
    },
    "rsym.antlr3SetCTAPI": {
        "function_address": "0x00001dc4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xcb8]!"
        ]
    },
    "rsym.antlr3CommonTokenNew": {
        "function_address": "0x00001e3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc68]!"
        ]
    },
    "sym.antlr3UCS2StringFactoryNew": {
        "function_address": "0x0000f844",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "bl rsym.antlr3StringFactoryNew",
            "cmp r0, 0",
            "beq 0xf8c0",
            "ldr r8, [0x0000f8c8]",
            "ldr r7, [0x0000f8cc]",
            "ldr r6, [0x0000f8d0]",
            "ldr r5, [0x0000f8d4]",
            "ldr r4, [0x0000f8d8]",
            "ldr ip, [0x0000f8dc]",
            "ldr r1, [0x0000f8e0]",
            "ldr r2, [0x0000f8e4]",
            "ldr r3, [0x0000f8e8]",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r8, [r0, 8]",
            "str r7, [r0, 0xc]",
            "str r6, [r0, 0x10]",
            "str r5, [r0, 0x14]",
            "str r4, [r0, 0x18]",
            "str ip, [r0, 0x1c]",
            "str r1, [r0, 0x24]",
            "str r2, [r0, 0x20]",
            "str r3, [r0, 0x28]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3StringFactoryNew": {
        "function_address": "0x00001ea8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc20]!"
        ]
    },
    "sym.antlr3ListNew": {
        "function_address": "0x00007f3c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, 0x20",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "moveq r4, 1",
            "beq 0x7fc4",
            "mov r0, r5",
            "bl rsym.antlr3HashTableNew",
            "cmp r0, 1",
            "str r0, [r4]",
            "moveq r4, r0",
            "beq 0x7fc4",
            "ldr r6, [0x00007fd0]",
            "ldr r5, [0x00007fd4]",
            "ldr ip, [0x00007fd8]",
            "ldr r0, [0x00007fdc]",
            "ldr r1, [0x00007fe0]",
            "ldr r2, [0x00007fe4]",
            "ldr r3, [0x00007fe8]",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r6, [r4, 4]",
            "str r5, [r4, 8]",
            "str ip, [r4, 0xc]",
            "str r0, [r4, 0x14]",
            "str r1, [r4, 0x10]",
            "str r2, [r4, 0x18]",
            "str r3, [r4, 0x1c]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3HashTableNew": {
        "function_address": "0x00001d28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd20]!"
        ]
    },
    "sym.antlr3RewriteRuleSubtreeStreamNewAEE": {
        "function_address": "0x0000e128",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dca0",
            "cmp r0, 0",
            "beq 0xe15c",
            "ldr r1, [0x0000e164]",
            "ldr r2, [0x0000e168]",
            "ldr r3, [0x0000e16c]",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r1, [r0, 0x38]",
            "str r2, [r0, 0x44]",
            "str r3, [r0, 0x50]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "fcn.0000dca0": {
        "function_address": "0x0000dca0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r3",
            "bl fcn.0000dad8",
            "subs r4, r0, 0",
            "beq 0xdccc",
            "cmp r5, 0",
            "movne r1, r5",
            "movne r2, 0",
            "ldrne ip, [r4, 0x24]",
            "movne lr, pc",
            "bxne ip",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3ParserNew": {
        "function_address": "0x0000d690",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "mov r0, 0x1c",
            "mov r6, r1",
            "bl sym.imp.malloc",
            "ldr r5, [0x0000d738]",
            "subs r4, r0, 0",
            "add r5, pc, r5",
            "beq 0xd714",
            "mov r2, r6",
            "mov r0, 2",
            "mov r1, r7",
            "bl rsym.antlr3BaseRecognizerNew",
            "cmp r0, 0",
            "mov r6, r0",
            "str r0, [r4, 4]",
            "beq 0xd720",
            "ldr ip, [0x0000d73c]",
            "str r4, [r0]",
            "ldr r1, [0x0000d740]",
            "ldr r0, [0x0000d744]",
            "ldr r2, [0x0000d748]",
            "ldr r3, [0x0000d74c]",
            "ldr ip, [r5, ip]",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str ip, [r6, 0x88]",
            "str r0, [r4, 0xc]",
            "str r1, [r4, 0x10]",
            "str r2, [r4, 0x14]",
            "str r3, [r4, 0x18]",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r4",
            "ldr ip, [r4, 0x18]",
            "mov lr, pc",
            "bx ip",
            "mov r4, r6",
            "b 0xd714"
        ]
    },
    "sym.antlr3TokenStreamNew": {
        "function_address": "0x00010918",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 0x38",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "ldrne r3, [0x0001093c]",
            "addne r3, pc, r3",
            "strne r3, [r0, 0x34]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3Fsize": {
        "function_address": "0x0000bca0",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0x5c",
            "mov r1, r0",
            "mov r2, sp",
            "mov r0, 3",
            "bl sym.imp.__xstat",
            "ldr r0, [sp, 0x2c]",
            "add sp, sp, 0x5c",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.__xstat": {
        "function_address": "0x00001cb0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd70]!"
        ]
    },
    "sym.antlr3HashTableNew": {
        "function_address": "0x00007b3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r0",
            "mov r0, 0x3c",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x7c1c",
            "lsl r0, r5, 2",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "mov r6, r0",
            "str r0, [r4, 8]",
            "beq 0x7c28",
            "mov r3, 0",
            "cmp r5, r3",
            "str r5, [r4, 4]",
            "str r3, [r4, 0xc]",
            "beq 0x7b94",
            "mov r2, r3",
            "add r3, r3, 1",
            "cmp r3, r5",
            "str r2, [r6], 4",
            "bne 0x7b84",
            "ldr sl, [0x00007c38]",
            "ldr r8, [0x00007c3c]",
            "ldr r7, [0x00007c40]",
            "ldr r6, [0x00007c44]",
            "ldr r5, [0x00007c48]",
            "ldr ip, [0x00007c4c]",
            "ldr r0, [0x00007c50]",
            "ldr r1, [0x00007c54]",
            "ldr r2, [0x00007c58]",
            "ldr r3, [0x00007c5c]",
            "mov sb, 0",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str sb, [r4]",
            "mov sb, 1",
            "str sb, [r4, 0x10]",
            "str sl, [r4, 0x20]",
            "str r8, [r4, 0x24]",
            "str r7, [r4, 0x18]",
            "str r6, [r4, 0x1c]",
            "str r5, [r4, 0x30]",
            "str ip, [r4, 0x34]",
            "str r0, [r4, 0x28]",
            "str r1, [r4, 0x2c]",
            "str r2, [r4, 0x38]",
            "str r3, [r4, 0x14]",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0x7c1c"
        ]
    },
    "sym.antlr3ArboretumNew": {
        "function_address": "0x000091ac",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "mov r0, 0xc0",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x923c",
            "mov r0, 0",
            "bl rsym.antlr3VectorFactoryNew",
            "cmp r0, 0",
            "mov r5, r0",
            "str r0, [r4, 0xa8]",
            "beq 0x9248",
            "mov r0, 0",
            "bl rsym.antlr3StackNew",
            "ldr r2, [0x00009258]",
            "ldr r3, [0x0000925c]",
            "ldr ip, [0x00009260]",
            "ldr r1, [0x00009264]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "str r2, [r4, 0xb8]",
            "str r3, [r4, 0xbc]",
            "mov r2, 0",
            "mvn r3, 0",
            "str r0, [r4, 0xac]",
            "str ip, [r4, 0xb0]",
            "mov r0, r4",
            "str r1, [r4, 0xb4]",
            "stm r4, {r2, r3}",
            "bl fcn.00008e98",
            "add r0, r4, 0xc",
            "bl rsym.antlr3SetCTAPI",
            "str r4, [r4, 0x24]",
            "str r6, [r4, 0x38]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r5",
            "b 0x923c"
        ]
    },
    "rsym.antlr3VectorFactoryNew": {
        "function_address": "0x00001efc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xbe8]!"
        ]
    },
    "fcn.00008e98": {
        "function_address": "0x00008e98",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r1}",
            "add r3, r1, 1",
            "add r1, r1, 2",
            "str r3, [r4, 4]",
            "lsl r1, r1, 2",
            "bl sym.imp.realloc",
            "mov r5, r0",
            "str r0, [r4]",
            "mov r0, 0x27000",
            "ldr r6, [r4, 4]",
            "bl sym.imp.malloc",
            "mov r3, 0",
            "str r0, [r5, r6, lsl 2]",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3StackNew": {
        "function_address": "0x000081a4",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, 0x20",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "moveq r4, 1",
            "beq 0x8228",
            "mov r0, r5",
            "bl rsym.antlr3VectorNew",
            "mov r3, 0",
            "cmp r0, 1",
            "str r0, [r4]",
            "str r3, [r4, 4]",
            "moveq r4, r0",
            "beq 0x8228",
            "ldr r5, [0x00008234]",
            "ldr ip, [0x00008238]",
            "ldr r0, [0x0000823c]",
            "ldr r1, [0x00008240]",
            "ldr r2, [0x00008244]",
            "ldr r3, [0x00008248]",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r5, [r4, 0x10]",
            "str ip, [r4, 8]",
            "str r0, [r4, 0xc]",
            "str r1, [r4, 0x14]",
            "str r2, [r4, 0x18]",
            "str r3, [r4, 0x1c]",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3NewAsciiStringInPlaceStream": {
        "function_address": "0x0000f8ec",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "mov r0, 0x74",
            "mov r7, r1",
            "mov r6, r2",
            "bl sym.imp.malloc",
            "subs r5, r0, 0",
            "beq 0xf954",
            "mov r3, 0",
            "str r3, [r5, 0x10]",
            "str r4, [r5, 0xc]",
            "str r7, [r5, 0x1c]",
            "mov r1, 1",
            "bl rsym.antlr3AsciiSetupStream",
            "ldr r0, [r5, 0x14]",
            "cmp r6, 0",
            "ldr r4, [r5]",
            "ldr r3, [r0, 0x18]",
            "beq 0xf960",
            "mov r1, r6",
            "mov lr, pc",
            "bx r3",
            "ldr r3, [r5]",
            "str r0, [r4, 4]",
            "ldr r3, [r3, 4]",
            "str r3, [r5, 0x34]",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r6, [0x0000f96c]",
            "add r6, pc, r6",
            "b 0xf938"
        ]
    },
    "rsym.antlr3AsciiSetupStream": {
        "function_address": "0x00001ed8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc00]!"
        ]
    },
    "sym.antlr3Fopen": {
        "function_address": "0x0000bc80",
        "instructions": [
            "push {r3, lr}",
            "bl sym.imp.fopen",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x00001bfc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xde8]!"
        ]
    },
    "sym._init": {
        "function_address": "0x00001b6c",
        "instructions": [
            "push {r4, lr}",
            "bl entry0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "r15": {
        "function_address": "0x00001f08",
        "instructions": [
            "ldr r3, [0x00001f2c]",
            "ldr r2, [0x00001f30]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "cmp r2, 0",
            "blne loc.imp.__gmon_start__",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3SetTokenAPI": {
        "function_address": "0x0000894c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [0x00008ae0]",
            "sub sp, sp, 0x24",
            "str r5, [sp, 0xc]",
            "ldr r5, [0x00008ae4]",
            "ldr r1, [0x00008ae8]",
            "str r5, [sp, 0x10]",
            "ldr r5, [0x00008aec]",
            "str r1, [sp, 4]",
            "str r5, [sp, 0x14]",
            "ldr r5, [0x00008af0]",
            "ldr r6, [0x00008af4]",
            "str r5, [sp, 0x18]",
            "ldr r5, [0x00008af8]",
            "add r6, pc, r6",
            "str r5, [sp, 0x1c]",
            "ldr r5, [sp, 4]",
            "ldr sb, [0x00008afc]",
            "add r5, pc, r5",
            "str r5, [sp, 4]",
            "ldr r5, [sp, 0xc]",
            "ldr sl, [0x00008b00]",
            "add r5, pc, r5",
            "str r5, [sp, 0xc]",
            "ldr r5, [sp, 0x10]",
            "ldr r8, [0x00008b04]",
            "add r5, pc, r5",
            "str r5, [sp, 0x10]",
            "ldr r5, [sp, 0x14]",
            "ldr r7, [0x00008b08]",
            "add r5, pc, r5",
            "str r5, [sp, 0x14]",
            "ldr r5, [sp, 0x18]",
            "ldr r4, [0x00008b0c]",
            "add r5, pc, r5",
            "str r5, [sp, 0x18]",
            "ldr lr, [0x00008b10]",
            "ldr r5, [sp, 0x1c]",
            "ldr ip, [0x00008b14]",
            "ldr r1, [0x00008b18]",
            "ldr r2, [0x00008b1c]",
            "ldr r3, [0x00008b20]",
            "ldr fp, [0x00008b24]",
            "str r6, [r0, 0x58]",
            "ldr r6, [sp, 4]",
            "add lr, pc, lr",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "add r5, pc, r5",
            "add sb, pc, sb",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r4, pc, r4",
            "add fp, pc, fp",
            "str lr, [r0, 0x64]",
            "str ip, [r0, 0x68]",
            "str r1, [r0, 0x6c]",
            "str r2, [r0, 0x70]",
            "str r3, [r0, 0x74]",
            "str r0, [sp, 8]",
            "str r5, [sp, 0x1c]",
            "str sb, [r0, 0x48]",
            "str sl, [r0, 0x4c]",
            "str r8, [r0, 0x50]",
            "str r7, [r0, 0x54]",
            "str r6, [r0, 0x5c]",
            "str r4, [r0, 0x60]",
            "str fp, [r0, 0x78]",
            "ldr r1, [sp, 0x14]",
            "ldr r3, [sp, 0x1c]",
            "ldr ip, [sp, 0xc]",
            "ldr lr, [sp, 0x10]",
            "ldr r2, [sp, 0x18]",
            "str r1, [r0, 0x84]",
            "str r3, [r0, 0x8c]",
            "str ip, [r0, 0x7c]",
            "str lr, [r0, 0x80]",
            "str r2, [r0, 0x88]",
            "mvn r1, 0",
            "mov r5, r0",
            "bl fcn.00008448",
            "mov r3, 0",
            "str r3, [r5, 0x40]",
            "str r3, [r5, 0x44]",
            "str r3, [r5]",
            "str r3, [r5, 0x2c]",
            "str r3, [r5, 0x24]",
            "str r3, [r5, 0x28]",
            "str r3, [r5, 0x18]",
            "str r3, [r5, 0xc]",
            "str r3, [r5, 0x20]",
            "str r3, [r5, 0x1c]",
            "str r3, [r5, 0x34]",
            "str r3, [r5, 0x38]",
            "str r3, [r5, 0x3c]",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "fcn.00008448": {
        "function_address": "0x00008448",
        "instructions": [
            "str r1, [r0, 0x14]",
            "bx lr"
        ]
    },
    "sym.antlr3BaseRecognizerNew": {
        "function_address": "0x000036bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "str r0, [sp, 0x34]",
            "mov r0, 0x94",
            "mov r5, r1",
            "mov r6, r2",
            "bl sym.imp.malloc",
            "ldr r3, [0x000039f0]",
            "subs r4, r0, 0",
            "add r3, pc, r3",
            "str r3, [sp, 8]",
            "beq 0x3950",
            "cmp r6, 0",
            "strne r6, [r4, 8]",
            "beq 0x3960",
            "ldr sb, [0x000039f4]",
            "ldr r3, [0x000039f8]",
            "add sb, pc, sb",
            "str sb, [r4, 0x74]",
            "ldr sb, [0x000039fc]",
            "add r3, pc, r3",
            "str sb, [sp]",
            "str r3, [r4, 0x38]",
            "ldr sb, [0x00003a00]",
            "ldr r3, [0x00003a04]",
            "str sb, [sp, 0x10]",
            "str r3, [sp, 0xc]",
            "ldr sb, [0x00003a08]",
            "ldr r3, [0x00003a0c]",
            "str sb, [sp, 0x18]",
            "str r3, [sp, 0x14]",
            "ldr sb, [0x00003a10]",
            "ldr r3, [0x00003a14]",
            "str sb, [sp, 0x20]",
            "str r3, [sp, 0x1c]",
            "ldr sb, [0x00003a18]",
            "ldr r3, [0x00003a1c]",
            "str sb, [sp, 0x28]",
            "str r3, [sp, 0x24]",
            "ldr sb, [0x00003a20]",
            "ldr r3, [0x00003a24]",
            "ldr sl, [0x00003a28]",
            "ldr r8, [0x00003a2c]",
            "ldr r7, [0x00003a30]",
            "ldr r6, [0x00003a34]",
            "ldr r5, [0x00003a38]",
            "ldr ip, [0x00003a3c]",
            "ldr r0, [0x00003a40]",
            "ldr r1, [0x00003a44]",
            "ldr r2, [0x00003a48]",
            "str r3, [sp, 0x2c]",
            "str sb, [sp, 0x30]",
            "add sl, pc, sl",
            "ldr sb, [sp, 8]",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "ldr r3, [0x00003a4c]",
            "str sl, [r4, 0x34]",
            "str r8, [r4, 0x4c]",
            "str r7, [r4, 0x3c]",
            "str r6, [r4, 0x40]",
            "str r5, [r4, 0x48]",
            "str ip, [r4, 0x44]",
            "str r0, [r4, 0x5c]",
            "str r1, [r4, 0x60]",
            "str r2, [r4, 0x28]",
            "ldr sb, [sb, r3]",
            "ldr r3, [sp]",
            "str sb, [sp, 8]",
            "add r3, pc, r3",
            "ldr sb, [sp, 0xc]",
            "str r3, [sp]",
            "ldr r3, [sp, 0x10]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str sb, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [sp, 0x18]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str sb, [sp, 0x14]",
            "str r3, [sp, 0x18]",
            "ldr sb, [sp, 0x1c]",
            "ldr r3, [sp, 0x20]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str sb, [sp, 0x1c]",
            "str r3, [sp, 0x20]",
            "ldr sb, [sp, 0x24]",
            "ldr r3, [sp, 0x28]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str sb, [sp, 0x24]",
            "str r3, [sp, 0x28]",
            "ldr sb, [sp, 0x2c]",
            "ldr r3, [sp, 0x30]",
            "add sb, pc, sb",
            "add r3, pc, r3",
            "str sb, [sp, 0x2c]",
            "str r3, [sp, 0x30]",
            "ldr sb, [sp, 8]",
            "ldr r3, [sp]",
            "str sb, [r4, 0x88]",
            "str r3, [r4, 0x30]",
            "ldr sb, [sp, 0xc]",
            "ldr r3, [sp, 0x10]",
            "ldr sl, [0x00003a50]",
            "ldr r8, [0x00003a54]",
            "ldr r7, [0x00003a58]",
            "ldr r6, [0x00003a5c]",
            "ldr r5, [0x00003a60]",
            "ldr ip, [0x00003a64]",
            "ldr r0, [0x00003a68]",
            "ldr r1, [0x00003a6c]",
            "ldr r2, [0x00003a70]",
            "ldr fp, [0x00003a74]",
            "str sb, [r4, 0x54]",
            "str r3, [r4, 0x50]",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [sp, 0x18]",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add fp, pc, fp",
            "str sb, [r4, 0x2c]",
            "str sl, [r4, 0x64]",
            "str r8, [r4, 0x68]",
            "str r7, [r4, 0x70]",
            "str r6, [r4, 0x10]",
            "str r5, [r4, 0x14]",
            "str ip, [r4, 0x78]",
            "str r0, [r4, 0x20]",
            "str r1, [r4, 0x18]",
            "str r2, [r4, 0x1c]",
            "str fp, [r4, 0x58]",
            "str r3, [r4, 0x24]",
            "ldr sb, [sp, 0x1c]",
            "ldr r3, [sp, 0x20]",
            "str sb, [r4, 0x8c]",
            "ldr sb, [sp, 0x24]",
            "str r3, [r4, 0x84]",
            "ldr r3, [sp, 0x28]",
            "str sb, [r4, 0x6c]",
            "ldr sb, [sp, 0x2c]",
            "str r3, [r4, 0x7c]",
            "mov r3, 0",
            "str sb, [r4, 0x80]",
            "str r3, [r4, 0xc]",
            "ldr sb, [sp, 0x34]",
            "ldr r3, [sp, 0x30]",
            "str sb, [r4, 4]",
            "str r3, [r4, 0x90]",
            "mov r0, r4",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, 1",
            "mov r1, 0x6c",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "mov r7, r0",
            "str r0, [r4, 8]",
            "beq 0x39e0",
            "mvn r3, 0",
            "str r3, [r7, 0x14]",
            "str r5, [r7, 8]",
            "mov r0, r6",
            "str r6, [r7, 0x10]",
            "str r6, [r7, 0x18]",
            "str r6, [r7, 0x1c]",
            "str r6, [r7, 0x20]",
            "str r6, [r7, 0xc]",
            "str r6, [r7, 0x24]",
            "str r6, [r7, 0x28]",
            "str r6, [r7, 0x38]",
            "str r6, [r7, 0x34]",
            "bl rsym.antlr3VectorNew",
            "ldr r3, [r4, 8]",
            "str r0, [r7, 0x68]",
            "ldr r5, [r3, 0x68]",
            "cmp r5, 0",
            "bne 0x36f8",
            "mov r0, r3",
            "bl sym.imp.free",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r5",
            "b 0x3950",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r7",
            "b 0x3950"
        ]
    },
    "sym.antlr3CommonTreeNewFromToken": {
        "function_address": "0x00009328",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.antlr3CommonTreeNew",
            "cmp r0, 0",
            "strne r4, [r0, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3CommonTreeNew": {
        "function_address": "0x00001c74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd98]!"
        ]
    },
    "sym.ANTLR3_TREE_ADAPTORNew": {
        "function_address": "0x000098a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "str r0, [sp, 0xc]",
            "mov r0, 0xb4",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0x9a9c",
            "add r2, r0, 4",
            "mov r0, r2",
            "mov r1, 0",
            "str r2, [sp, 0x2c]",
            "bl rsym.antlr3BaseTreeAdaptorInit",
            "ldr ip, [0x00009aa8]",
            "ldr r3, [0x00009aac]",
            "str ip, [sp, 0x10]",
            "ldr ip, [0x00009ab0]",
            "str r3, [sp, 4]",
            "str ip, [sp, 0x14]",
            "ldr ip, [0x00009ab4]",
            "ldr fp, [0x00009ab8]",
            "str ip, [sp, 0x18]",
            "ldr ip, [0x00009abc]",
            "ldr sb, [0x00009ac0]",
            "str ip, [sp, 0x1c]",
            "ldr ip, [0x00009ac4]",
            "ldr sl, [0x00009ac8]",
            "str ip, [sp, 0x20]",
            "ldr ip, [0x00009acc]",
            "ldr r8, [0x00009ad0]",
            "str ip, [sp, 0x24]",
            "ldr ip, [0x00009ad4]",
            "ldr r7, [0x00009ad8]",
            "str ip, [sp, 0x28]",
            "ldr ip, [sp, 4]",
            "ldr r6, [0x00009adc]",
            "add ip, pc, ip",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x10]",
            "ldr r5, [0x00009ae0]",
            "add ip, pc, ip",
            "str ip, [sp, 0x10]",
            "ldr ip, [sp, 0x14]",
            "ldr r4, [0x00009ae4]",
            "add ip, pc, ip",
            "str ip, [sp, 0x14]",
            "ldr ip, [sp, 0x18]",
            "ldr lr, [0x00009ae8]",
            "add ip, pc, ip",
            "str ip, [sp, 0x18]",
            "ldr ip, [sp, 0x1c]",
            "ldr r0, [0x00009aec]",
            "add ip, pc, ip",
            "str ip, [sp, 0x1c]",
            "ldr ip, [sp, 0x20]",
            "ldr r1, [0x00009af0]",
            "add ip, pc, ip",
            "str ip, [sp, 0x20]",
            "ldr ip, [sp, 0x24]",
            "add lr, pc, lr",
            "add ip, pc, ip",
            "str ip, [sp, 0x24]",
            "ldr ip, [sp, 0x28]",
            "add r0, pc, r0",
            "add ip, pc, ip",
            "str ip, [sp, 0x28]",
            "ldr ip, [sp, 8]",
            "add r1, pc, r1",
            "ldr r2, [0x00009af4]",
            "ldr r3, [0x00009af8]",
            "add fp, pc, fp",
            "add sb, pc, sb",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "str fp, [ip, 0x54]",
            "str sb, [ip, 0x44]",
            "str sl, [ip, 0x88]",
            "str r8, [ip, 0x8c]",
            "str r7, [ip, 0x94]",
            "str r6, [ip, 0x98]",
            "str r5, [ip, 0x9c]",
            "str r4, [ip, 0x60]",
            "str lr, [ip, 0x58]",
            "str r0, [ip, 0x70]",
            "str r1, [ip, 0x28]",
            "ldr lr, [sp, 4]",
            "ldr r0, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str lr, [ip, 0x6c]",
            "str r2, [ip, 0x2c]",
            "str r3, [ip, 0x78]",
            "str r0, [ip, 0x74]",
            "str r1, [ip, 0x80]",
            "ldr r3, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "ldr lr, [sp, 0x20]",
            "ldr r0, [sp, 0x24]",
            "ldr r1, [sp, 0x28]",
            "str r2, [ip, 0x7c]",
            "str r3, [ip, 0xac]",
            "str r0, [ip, 0xa8]",
            "str lr, [ip, 0xa0]",
            "str r1, [ip, 0x30]",
            "str ip, [ip, 4]",
            "ldr r0, [sp, 0xc]",
            "bl rsym.antlr3ArboretumNew",
            "ldr r2, [sp, 8]",
            "str r0, [r2, 0xb0]",
            "mov r0, 0",
            "bl rsym.antlr3TokenFactoryNew",
            "ldr r3, [sp, 8]",
            "ldr ip, [sp, 0xc]",
            "str r0, [r3, 0xc]",
            "str ip, [r0, 0x14]",
            "str ip, [r3, 8]",
            "ldr r0, [sp, 0x2c]",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 8]",
            "str r2, [sp, 0x2c]",
            "b 0x9a8c"
        ]
    },
    "rsym.antlr3ArboretumNew": {
        "function_address": "0x00001c5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xda8]!"
        ]
    },
    "rsym.antlr3TokenFactoryNew": {
        "function_address": "0x00001d10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd30]!"
        ]
    },
    "sym.antlr3RewriteRuleSubtreeStreamNewAEV": {
        "function_address": "0x0000e170",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dc3c",
            "cmp r0, 0",
            "beq 0xe1a4",
            "ldr r1, [0x0000e1ac]",
            "ldr r2, [0x0000e1b0]",
            "ldr r3, [0x0000e1b4]",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r1, [r0, 0x38]",
            "str r2, [r0, 0x44]",
            "str r3, [r0, 0x50]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3ParserNewStream": {
        "function_address": "0x0000d750",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r1",
            "mov r1, r2",
            "bl rsym.antlr3ParserNew",
            "subs r5, r0, 0",
            "movne r1, r4",
            "ldrne ip, [r5, 0x10]",
            "movne lr, pc",
            "bxne ip"
        ]
    },
    "rsym.antlr3ParserNew": {
        "function_address": "0x00001b9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe28]!"
        ]
    },
    "sym.antlr3BitsetLoad": {
        "function_address": "0x000065f0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "mov r0, 0",
            "bl rsym.antlr3BitsetNew",
            "subs r6, r0, 0",
            "beq 0x667c",
            "cmp r7, 0",
            "beq 0x667c",
            "ldr ip, [r7, 4]",
            "cmp ip, 0",
            "beq 0x667c",
            "mov r5, 1",
            "mov r4, 0",
            "b 0x6654",
            "ldr r1, [r6]",
            "ldr r2, [r7]",
            "lsl r3, r4, 3",
            "add r2, r2, r3",
            "cmp ip, r5",
            "add r3, r1, r3",
            "add r5, r5, 1",
            "ldm r2, {r0, r1}",
            "add r4, r4, 1",
            "stm r3, {r0, r1}",
            "bls 0x667c",
            "ldr r3, [r6, 4]",
            "cmp r3, r4",
            "bhi 0x6628",
            "mov r1, r5",
            "mov r0, r6",
            "ldr ip, [r6, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ldr ip, [r7, 4]",
            "b 0x6628",
            "mov r0, r6",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3SetVectorApi": {
        "function_address": "0x00007fec",
        "instructions": [
            "cmp r1, 0x10",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "addls r0, r0, 8",
            "mov r5, r1",
            "strls r0, [r4]",
            "movls r5, 0x10",
            "bls 0x8018",
            "lsl r0, r5, 3",
            "bl sym.imp.malloc",
            "str r0, [r4]",
            "cmp r0, 0",
            "beq 0x80a4",
            "ldr sl, [0x000080b0]",
            "ldr r8, [0x000080b4]",
            "ldr r7, [0x000080b8]",
            "ldr r6, [0x000080bc]",
            "ldr ip, [0x000080c0]",
            "ldr r0, [0x000080c4]",
            "ldr r1, [0x000080c8]",
            "ldr r2, [0x000080cc]",
            "ldr r3, [0x000080d0]",
            "mov sb, 0",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str sb, [r4, 4]",
            "str r5, [r4, 0x8c]",
            "str sl, [r4, 0xa8]",
            "str r8, [r4, 0x94]",
            "str r7, [r4, 0x98]",
            "str r6, [r4, 0x90]",
            "str ip, [r4, 0xac]",
            "str r0, [r4, 0x9c]",
            "str r1, [r4, 0xa0]",
            "str r2, [r4, 0xb0]",
            "str r3, [r4, 0xa4]",
            "str sb, [r4, 0x88]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "b 0x809c"
        ]
    },
    "sym.antlr3IntStreamNew": {
        "function_address": "0x0000c4bc",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 1",
            "mov r1, 0x40",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "ldrne r3, [0x0000c4e4]",
            "addne r3, pc, r3",
            "strne r3, [r0, 0x3c]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3CommonTreeNew": {
        "function_address": "0x00009308",
        "instructions": [
            "push {r4, lr}",
            "mov r0, 0x9c",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "blne rsym.antlr3SetCTAPI",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3IntTrieNew": {
        "function_address": "0x000082cc",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r1, 0x20",
            "mov r5, r0",
            "mov r0, 1",
            "bl sym.imp.calloc",
            "subs r4, r0, 0",
            "moveq r4, 1",
            "beq 0x8348",
            "mov r0, 1",
            "mov r1, 0x20",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "str r0, [r4]",
            "beq 0x8354",
            "ldr r3, [0x00008364]",
            "ldr ip, [0x00008368]",
            "ldr r1, [0x0000836c]",
            "ldr r2, [0x00008370]",
            "add r3, pc, r3",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "str r3, [r4, 0x10]",
            "mov r3, 0",
            "str ip, [r4, 0x18]",
            "str r1, [r4, 0x14]",
            "str r2, [r4, 0x1c]",
            "str r5, [r0]",
            "str r0, [r0, 0xc]",
            "str r0, [r0, 0x10]",
            "str r3, [r4, 8]",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, 1",
            "b 0x8348"
        ]
    },
    "sym.antlr3RewriteRuleTOKENStreamNewAEE": {
        "function_address": "0x0000e080",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dca0",
            "ldr r2, [0x0000e0a8]",
            "ldr r3, [0x0000e0ac]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r0, 0x38]",
            "str r3, [r0, 0x44]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3Fread": {
        "function_address": "0x0000bcc8",
        "instructions": [
            "push {r3, lr}",
            "mov r3, r0",
            "mov r0, r2",
            "mov r2, 1",
            "bl sym.imp.fread",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x00001d04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd38]!"
        ]
    },
    "sym.antlr3UCS2SetupStream": {
        "function_address": "0x000111d8",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym.antlr3UCS2StringFactoryNew",
            "mov r1, r5",
            "str r0, [r4, 0x14]",
            "mov r0, r4",
            "bl rsym.antlr3GenericSetupStream",
            "ldr r5, [0x00011248]",
            "ldr ip, [0x0001124c]",
            "ldr r0, [0x00011250]",
            "ldr r1, [0x00011254]",
            "ldr r3, [r4]",
            "ldr r2, [0x00011258]",
            "add r5, pc, r5",
            "add ip, pc, ip",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "str r5, [r3, 0x14]",
            "str ip, [r3, 0x18]",
            "str r0, [r3, 0x20]",
            "str r1, [r3, 0x30]",
            "add r2, pc, r2",
            "mov r3, 2",
            "str r2, [r4, 0x58]",
            "strb r3, [r4, 8]",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3UCS2StringFactoryNew": {
        "function_address": "0x00001cbc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd68]!"
        ]
    },
    "rsym.antlr3GenericSetupStream": {
        "function_address": "0x00001d88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xce0]!"
        ]
    },
    "sym.antlr3TreeNodeStreamNew": {
        "function_address": "0x0000a3fc",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 1",
            "mov r1, 0x30",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "beq 0xa42c",
            "ldr r2, [0x0000a434]",
            "ldr r3, [0x0000a438]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r0, 0x2c]",
            "str r3, [r0, 0x24]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3ExceptionNew": {
        "function_address": "0x0000bc28",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, 1",
            "mov r1, 0x58",
            "mov r6, r2",
            "mov r7, r3",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "beq 0xbc70",
            "ldr r2, [0x0000bc78]",
            "ldr r3, [0x0000bc7c]",
            "stm r0, {r4, r5, r6}",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r7, [r0, 0x10]",
            "str r2, [r0, 0x50]",
            "str r3, [r0, 0x54]",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3Fclose": {
        "function_address": "0x0000bc90",
        "instructions": [
            "push {r3, lr}",
            "bl sym.imp.fclose",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00001e24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc78]!"
        ]
    },
    "sym.antlr3EnumNew": {
        "function_address": "0x00007c60",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "moveq r4, 1",
            "beq 0x7cb0",
            "ldr r3, [r5, 8]",
            "mov r2, 0",
            "ldr r3, [r3]",
            "str r5, [r4]",
            "cmp r3, 0",
            "stmib r4, {r2, r3}",
            "beq 0x7cbc",
            "ldr r2, [0x00007cc4]",
            "ldr r3, [0x00007cc8]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r4, 0x10]",
            "str r3, [r4, 0xc]",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr",
            "bl fcn.000078e0",
            "b 0x7c98"
        ]
    },
    "fcn.000078e0": {
        "function_address": "0x000078e0",
        "instructions": [
            "ldr r3, [r0, 8]",
            "str r4, [sp, -4]!",
            "cmp r3, 0",
            "beq 0x7908",
            "ldr r3, [r3, 0x10]",
            "cmp r3, 0",
            "strne r3, [r0, 8]",
            "beq 0x7908",
            "ldm sp!, {r4}",
            "bx lr",
            "ldm r0, {r1, r3}",
            "ldr r4, [r1, 4]",
            "add r2, r3, 1",
            "cmp r2, r4",
            "str r2, [r0, 4]",
            "bhs 0x7900",
            "ldr r1, [r1, 8]",
            "ldr r2, [r1, r2, lsl 2]",
            "cmp r2, 0",
            "addeq r3, r3, 2",
            "addeq r1, r1, r3, lsl 2",
            "subeq r1, r1, 4",
            "beq 0x7954",
            "b 0x7968",
            "ldr r2, [r1, 4]!",
            "add ip, r3, 1",
            "cmp r2, 0",
            "bne 0x7964",
            "mov r3, ip",
            "cmp r3, r4",
            "bne 0x7940",
            "str r3, [r0, 4]",
            "b 0x7900",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "b 0x7900"
        ]
    },
    "sym.antlr3RewriteRuleSubtreeStreamNewAE": {
        "function_address": "0x0000e0e0",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dad8",
            "cmp r0, 0",
            "beq 0xe114",
            "ldr r1, [0x0000e11c]",
            "ldr r2, [0x0000e120]",
            "ldr r3, [0x0000e124]",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r1, [r0, 0x38]",
            "str r2, [r0, 0x44]",
            "str r3, [r0, 0x50]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3TreeParserNewStream": {
        "function_address": "0x00010fd0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r0, 0x18",
            "mov r7, r1",
            "mov r8, r2",
            "bl sym.imp.malloc",
            "ldr r5, [0x000110a8]",
            "subs r4, r0, 0",
            "add r5, pc, r5",
            "beq 0x11084",
            "mov r1, r6",
            "mov r0, 2",
            "mov r2, r8",
            "bl rsym.antlr3BaseRecognizerNew",
            "cmp r0, 0",
            "mov r6, r0",
            "str r0, [r4, 4]",
            "beq 0x11090",
            "ldr r3, [0x000110ac]",
            "mov r2, 4",
            "add r3, pc, r3",
            "ldr lr, [0x000110b0]",
            "str r2, [r0, 4]",
            "str r3, [r0, 0x20]",
            "str r4, [r0]",
            "ldr ip, [0x000110b4]",
            "ldr r0, [0x000110b8]",
            "ldr r1, [0x000110bc]",
            "ldr r2, [0x000110c0]",
            "ldr r3, [0x000110c4]",
            "ldr lr, [r5, lr]",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "add ip, pc, ip",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r0, [r6, 0x80]",
            "str lr, [r6, 0x88]",
            "str ip, [r6, 0x7c]",
            "mov r0, r4",
            "str r1, [r4, 0x10]",
            "str r2, [r4, 0xc]",
            "str r3, [r4, 0x14]",
            "mov r1, r7",
            "bl fcn.00010d68",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "ldr ip, [r4, 0x14]",
            "mov lr, pc",
            "bx ip",
            "mov r4, r6",
            "b 0x11084"
        ]
    },
    "fcn.00010d68": {
        "function_address": "0x00010d68",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0, 8]",
            "mov r0, r3",
            "ldr ip, [r3, 0x8c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 8]",
            "mov r0, r3",
            "ldr ip, [r3, 0x2f0]",
            "mov lr, pc",
            "bx ip",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3readAscii": {
        "function_address": "0x0000bce4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "ldr r1, fcn.0000695c",
            "mov r4, r0",
            "add r1, pc, r1",
            "mov r0, r6",
            "bl rsym.antlr3Fopen",
            "subs r5, r0, 0",
            "moveq r0, 2",
            "beq 0xbd54",
            "mov r0, r6",
            "bl rsym.antlr3Fsize",
            "mov r6, r0",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "mov r2, r0",
            "str r0, [r4, 0xc]",
            "str r6, [r4, 0x1c]",
            "moveq r0, 1",
            "beq 0xbd54",
            "mov r3, 1",
            "mov r1, r6",
            "str r3, [r4, 0x10]",
            "mov r0, r5",
            "bl rsym.antlr3Fread",
            "mov r0, r5",
            "bl rsym.antlr3Fclose",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3Fopen": {
        "function_address": "0x00001e9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc28]!"
        ]
    },
    "rsym.antlr3Fsize": {
        "function_address": "0x00001d7c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xce8]!"
        ]
    },
    "rsym.antlr3Fread": {
        "function_address": "0x00001e18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc80]!"
        ]
    },
    "rsym.antlr3Fclose": {
        "function_address": "0x00001ef0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xbf0]!"
        ]
    },
    "sym.antlr3RewriteRuleNODEStreamNewAE": {
        "function_address": "0x0000e1b8",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dad8",
            "cmp r0, 0",
            "beq 0xe1f8",
            "ldr ip, [0x0000e200]",
            "ldr r1, [0x0000e204]",
            "ldr r2, [0x0000e208]",
            "ldr r3, [0x0000e20c]",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str ip, [r0, 0x38]",
            "str r1, [r0, 0x3c]",
            "str r2, [r0, 0x44]",
            "str r3, [r0, 0x50]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3NewUCS2StringInPlaceStream": {
        "function_address": "0x0000f970",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r1",
            "sub sp, sp, 0x18",
            "ldr r1, [0x0000fa08]",
            "add r4, sp, 4",
            "add r1, pc, r1",
            "mov r7, r0",
            "mov r5, r2",
            "mov r0, r4",
            "mov r2, 0x12",
            "bl sym.imp.memcpy",
            "mov r0, 0x74",
            "bl sym.imp.malloc",
            "subs r8, r0, 0",
            "beq 0xf9f8",
            "mov r3, 0",
            "mov r1, 1",
            "str r3, [r8, 0x10]",
            "str r7, [r8, 0xc]",
            "str r6, [r8, 0x1c]",
            "bl rsym.antlr3UCS2SetupStream",
            "ldr r3, [r8, 0x14]",
            "cmp r5, 0",
            "moveq r1, r4",
            "mov r0, r3",
            "movne r1, r5",
            "ldr r4, [r8]",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r8]",
            "str r0, [r4, 4]",
            "ldr r3, [r3, 4]",
            "str r3, [r8, 0x34]",
            "mov r0, r8",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00001c44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdb8]!"
        ]
    },
    "rsym.antlr3UCS2SetupStream": {
        "function_address": "0x00001c38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdc0]!"
        ]
    },
    "sym.antlr3CommonTreeNodeStreamNewStream": {
        "function_address": "0x0000a43c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "str r0, [sp, 0x10]",
            "mov r1, 0x2fc",
            "mov r0, 1",
            "bl sym.imp.calloc",
            "cmp r0, 0",
            "str r0, [sp, 0xc]",
            "beq 0xa7dc",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [r3, 8]",
            "ldr r3, [r3, 0x288]",
            "str r2, [r0, 8]",
            "str r3, [r0, 0x288]",
            "bl rsym.antlr3TreeNodeStreamNew",
            "ldr r1, [sp, 0xc]",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [r1, 4]",
            "beq 0xa7ec",
            "bl rsym.antlr3IntStreamNew",
            "ldr r2, [sp, 0xc]",
            "ldr r2, [r2, 4]",
            "str r0, [r4, 4]",
            "ldr r3, [r2, 4]",
            "str r2, [sp, 0x18]",
            "cmp r3, 0",
            "str r3, [sp, 0x14]",
            "beq 0xa804",
            "ldr r3, [0x0000a830]",
            "ldr sb, [0x0000a834]",
            "str r3, [sp, 4]",
            "ldr r3, [0x0000a838]",
            "ldr sl, [0x0000a83c]",
            "str r3, [sp, 0x1c]",
            "ldr r3, [0x0000a840]",
            "ldr r8, [0x0000a844]",
            "str r3, [sp, 0x20]",
            "ldr r3, [0x0000a848]",
            "ldr r7, [0x0000a84c]",
            "str r3, [sp, 0x24]",
            "ldr r3, [0x0000a850]",
            "ldr r6, [0x0000a854]",
            "str r3, [sp, 0x28]",
            "ldr r3, [0x0000a858]",
            "ldr r5, [0x0000a85c]",
            "str r3, [sp, 0x2c]",
            "ldr r3, [0x0000a860]",
            "ldr r4, [0x0000a864]",
            "str r3, [sp, 0x30]",
            "ldr r3, [0x0000a868]",
            "ldr lr, [0x0000a86c]",
            "str r3, [sp, 0x34]",
            "ldr r3, [0x0000a870]",
            "ldr ip, [0x0000a874]",
            "str r3, [sp, 0x38]",
            "ldr r3, [0x0000a878]",
            "add lr, pc, lr",
            "str r3, [sp, 0x3c]",
            "ldr r3, [0x0000a87c]",
            "add ip, pc, ip",
            "str r3, [sp, 0x40]",
            "ldr r3, [0x0000a880]",
            "ldr r1, [0x0000a884]",
            "str r3, [sp, 0x44]",
            "ldr r3, [0x0000a888]",
            "add sb, pc, sb",
            "str r3, [sp, 0x48]",
            "ldr r3, [0x0000a88c]",
            "add sl, pc, sl",
            "str r3, [sp, 0x4c]",
            "ldr r3, [sp, 0x10]",
            "add r8, pc, r8",
            "ldr r3, [r3, 0x28c]",
            "add r7, pc, r7",
            "str r3, [sp, 8]",
            "ldr r3, [sp, 4]",
            "add r6, pc, r6",
            "add r3, pc, r3",
            "str r3, [sp, 4]",
            "ldr r3, [sp, 0x1c]",
            "add r5, pc, r5",
            "add r3, pc, r3",
            "str r3, [sp, 0x1c]",
            "ldr r3, [sp, 0x20]",
            "add r4, pc, r4",
            "add r3, pc, r3",
            "str r3, [sp, 0x20]",
            "ldr r3, [sp, 0x24]",
            "add r1, pc, r1",
            "add r3, pc, r3",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x28]",
            "ldr r2, [0x0000a890]",
            "add r3, pc, r3",
            "str r3, [sp, 0x28]",
            "ldr r3, [sp, 0x2c]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r3, [sp, 0x2c]",
            "ldr r3, [sp, 0x30]",
            "ldr fp, [0x0000a894]",
            "add r3, pc, r3",
            "str r3, [sp, 0x30]",
            "ldr r3, [sp, 0x34]",
            "add fp, pc, fp",
            "add r3, pc, r3",
            "str r3, [sp, 0x34]",
            "ldr r3, [sp, 0x38]",
            "mov r0, 0x64",
            "add r3, pc, r3",
            "str r3, [sp, 0x38]",
            "ldr r3, [sp, 0x3c]",
            "add r3, pc, r3",
            "str r3, [sp, 0x3c]",
            "ldr r3, [sp, 0x40]",
            "add r3, pc, r3",
            "str r3, [sp, 0x40]",
            "ldr r3, [sp, 0x44]",
            "add r3, pc, r3",
            "str r3, [sp, 0x44]",
            "ldr r3, [sp, 0x48]",
            "add r3, pc, r3",
            "str r3, [sp, 0x48]",
            "ldr r3, [sp, 0x4c]",
            "add r3, pc, r3",
            "str r3, [sp, 0x4c]",
            "ldr r3, [sp, 0xc]",
            "str lr, [r3, 0x2e4]",
            "str ip, [r3, 0x2f4]",
            "str sb, [r3, 0x2d0]",
            "str sl, [r3, 0x2e0]",
            "str r8, [r3, 0x2d4]",
            "str r7, [r3, 0x2d8]",
            "str r6, [r3, 0x2f0]",
            "str r5, [r3, 0x2e8]",
            "str r4, [r3, 0x2ec]",
            "ldr r3, [sp, 0x18]",
            "str r1, [r3, 0x10]",
            "ldr r1, [sp, 4]",
            "str r2, [r3, 0xc]",
            "str r1, [r3, 8]",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x20]",
            "str r2, [r3, 0x18]",
            "str r1, [r3, 0x1c]",
            "ldr r2, [sp, 0x24]",
            "ldr r1, [sp, 0x28]",
            "str r2, [r3, 0x20]",
            "str fp, [r3, 0x14]",
            "str r1, [r3, 0x28]",
            "ldr r3, [sp, 0x14]",
            "ldr r2, [sp, 0x2c]",
            "ldr r1, [sp, 0x30]",
            "str r2, [r3, 0x14]",
            "ldr r2, [sp, 0x34]",
            "str r1, [r3, 0x20]",
            "ldr r1, [sp, 0x38]",
            "str r2, [r3, 0x18]",
            "ldr r2, [sp, 0x3c]",
            "str r1, [r3, 0x1c]",
            "ldr r1, [sp, 0x40]",
            "str r2, [r3, 0x2c]",
            "ldr r2, [sp, 0x44]",
            "str r1, [r3, 0x24]",
            "ldr r1, [sp, 0x48]",
            "str r2, [r3, 0x28]",
            "ldr r2, [sp, 0x4c]",
            "str r1, [r3, 0x30]",
            "ldr r1, [sp, 0x14]",
            "str r2, [r3, 0x34]",
            "mov r3, 4",
            "str r3, [r1]",
            "ldr r2, [sp, 0x18]",
            "ldr r3, [sp, 0xc]",
            "str r2, [r1, 8]",
            "str r3, [r2]",
            "ldr r2, [sp, 8]",
            "mov r1, 0",
            "str r2, [r3, 0x28c]",
            "str r1, [r3]",
            "str r1, [r3, 0x280]",
            "str r1, [r3, 0x2b4]",
            "bl rsym.antlr3VectorNew",
            "ldr r3, [sp, 0xc]",
            "ldr r1, [sp, 0xc]",
            "str r0, [r3, 0x27c]",
            "mvn r3, 0",
            "str r3, [r1, 0x290]",
            "add r0, r1, 0xa8",
            "bl rsym.antlr3SetCTAPI",
            "ldr r2, [sp, 0xc]",
            "add r0, r2, 0xc",
            "bl rsym.antlr3SetCTAPI",
            "ldr r3, [sp, 0xc]",
            "add r0, r3, 0x144",
            "bl rsym.antlr3SetCTAPI",
            "ldr r1, [sp, 0xc]",
            "add r0, r1, 0x1e0",
            "bl rsym.antlr3SetCTAPI",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [r3, 0xb4]",
            "ldr r3, [r1, 8]",
            "str r2, [r1, 0xb4]",
            "ldr r2, [sp, 0x10]",
            "ldr r1, [r2, 0xb4]",
            "ldr r2, [r2, 0x18]",
            "str r3, [r1, 8]",
            "ldr r1, [sp, 0xc]",
            "str r2, [r1, 0x18]",
            "ldr r2, [sp, 0x10]",
            "ldr r1, [r2, 0x18]",
            "ldr r2, [r2, 0x150]",
            "str r3, [r1, 8]",
            "ldr r1, [sp, 0xc]",
            "str r2, [r1, 0x150]",
            "ldr r2, [sp, 0x10]",
            "ldr r1, [r2, 0x150]",
            "ldr r2, [r2, 0x1ec]",
            "str r3, [r1, 8]",
            "ldr r1, [sp, 0xc]",
            "str r2, [r1, 0x1ec]",
            "ldr r2, [sp, 0x10]",
            "ldr r1, [r2, 0x1ec]",
            "ldr r2, [r2, 0x284]",
            "str r3, [r1, 8]",
            "ldr r3, [sp, 0xc]",
            "ldr r1, [sp, 0xc]",
            "str r2, [r3, 0x284]",
            "mov r3, 1",
            "str r3, [r1, 0x2f8]",
            "ldr r0, [sp, 0xc]",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r1",
            "ldr ip, [r1, 0x2f4]",
            "mov lr, pc",
            "bx ip",
            "str r4, [sp, 0xc]",
            "b 0xa7dc",
            "mov r0, r2",
            "ldr ip, [r2, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 0xc]",
            "ldr ip, [r0, 0x2f4]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp, 0x14]",
            "str r1, [sp, 0xc]",
            "b 0xa7dc"
        ]
    },
    "sym.antlr3CommonTreeNodeStreamNewTree": {
        "function_address": "0x0000ad64",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x10]",
            "bl rsym.antlr3CommonTreeNodeStreamNew",
            "cmp r0, 0",
            "strne r4, [r0, 0x284]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3CommonTreeNodeStreamNew": {
        "function_address": "0x00001c2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdc8]!"
        ]
    },
    "sym.ConvertUTF8toUTF32": {
        "function_address": "0x0000b664",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [r0]",
            "sub sp, sp, 0x14",
            "cmp r4, r1",
            "str r2, [sp, 0xc]",
            "mov sl, r3",
            "ldr r3, [r2]",
            "movhs r2, 0",
            "str r0, [sp, 8]",
            "mov r5, r1",
            "strhs r2, [sp, 4]",
            "bhs 0xb7d0",
            "ldr r2, [0x0000b878]",
            "ldrb r6, [r4]",
            "add r2, pc, r2",
            "add r2, r2, r6",
            "ldrb r7, [r2, 8]",
            "add r2, r4, r7",
            "cmp r1, r2",
            "bls 0xb7c8",
            "add r8, r3, 4",
            "ldr r3, [0x0000b87c]",
            "ldr sb, [0x0000b880]",
            "mov r2, 0",
            "add r3, pc, r3",
            "ldr fp, [0x0000b884]",
            "str r2, [sp, 4]",
            "add sb, pc, sb",
            "str r3, [sp]",
            "mov r0, r4",
            "add r1, r7, 1",
            "bl fcn.0000ad84",
            "cmp r0, 0",
            "sub r3, r8, 4",
            "beq 0xb858",
            "cmp r7, 5",
            "addls pc, pc, r7, lsl 2",
            "b 0xb818",
            "b 0xb810",
            "b 0xb808",
            "b 0xb800",
            "b 0xb7f8",
            "b 0xb7f0",
            "b 0xb714",
            "lsl r2, r6, 6",
            "ldrb r6, [r4, 1]!",
            "add r2, r6, r2",
            "ldrb r6, [r4, 1]!",
            "lsl r2, r2, 6",
            "add r2, r6, r2",
            "ldrb r6, [r4, 1]!",
            "lsl r2, r2, 6",
            "add r2, r6, r2",
            "ldrb r6, [r4, 1]!",
            "lsl r2, r2, 6",
            "add r2, r6, r2",
            "ldrb r6, [r4, 1]!",
            "lsl r2, r2, 6",
            "add r6, r6, r2",
            "cmp sl, r3",
            "add r2, sb, r7, lsl 2",
            "add r4, r4, 1",
            "ldr r2, [r2, 0x108]",
            "bls 0xb82c",
            "rsb r6, r2, r6",
            "cmp r6, fp",
            "bhi 0xb840",
            "ldr r0, [0x0000b888]",
            "sub r2, r6, 0xd800",
            "cmp r2, r0",
            "movhi r3, r8",
            "strhi r6, [r8, -4]",
            "bhi 0xb7a0",
            "ldr r2, [sp, 0x38]",
            "cmp r2, 0",
            "beq 0xb864",
            "ldr r0, [0x0000b88c]",
            "mov r3, r8",
            "str r0, [r8, -4]",
            "cmp r4, r5",
            "bhs 0xb7d0",
            "ldrb r6, [r4]",
            "ldr r0, [sp]",
            "add r8, r8, 4",
            "add r2, r0, r6",
            "ldrb r7, [r2, 8]",
            "add r2, r4, r7",
            "cmp r5, r2",
            "bhi 0xb6d8",
            "mov r2, 1",
            "str r2, [sp, 4]",
            "ldr r0, [sp, 8]",
            "ldr r2, [sp, 0xc]",
            "str r4, [r0]",
            "ldr r0, [sp, 4]",
            "str r3, [r2]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r2, 0",
            "b 0xb71c",
            "mov r2, 0",
            "b 0xb728",
            "mov r2, 0",
            "b 0xb734",
            "mov r2, 0",
            "b 0xb740",
            "mov r2, 0",
            "b 0xb74c",
            "add r2, sb, r7, lsl 2",
            "cmp sl, r3",
            "mov r6, 0",
            "ldr r2, [r2, 0x108]",
            "bhi 0xb764",
            "mvn r7, r7",
            "mov r2, 2",
            "add r4, r4, r7",
            "str r2, [sp, 4]",
            "b 0xb7d0",
            "ldr r1, [0x0000b88c]",
            "mov r2, 3",
            "mov r3, r8",
            "str r1, [r8, -4]",
            "str r2, [sp, 4]",
            "b 0xb7a0",
            "mov r2, 3",
            "str r2, [sp, 4]",
            "b 0xb7d0",
            "mvn r7, r7",
            "mov r2, 3",
            "add r4, r4, r7",
            "str r2, [sp, 4]",
            "b 0xb7d0"
        ]
    },
    "fcn.0000ad84": {
        "function_address": "0x0000ad84",
        "instructions": [
            "sub r3, r1, 1",
            "add r1, r0, r1",
            "cmp r3, 3",
            "addls pc, pc, r3, lsl 2",
            "b 0xadb0",
            "b 0xae5c",
            "b 0xade8",
            "b 0xadd0",
            "b 0xadb8",
            "tst r3, 0x80",
            "bne 0xae60",
            "mov r0, 0",
            "bx lr",
            "ldrb r3, [r1, -1]",
            "tst r3, 0x80",
            "beq 0xadb0",
            "cmp r3, 0xbf",
            "bhi 0xadb0",
            "sub r1, r1, 1",
            "ldrb r3, [r1, -1]",
            "tst r3, 0x80",
            "beq 0xadb0",
            "cmp r3, 0xbf",
            "bhi 0xadb0",
            "sub r1, r1, 1",
            "ldrb r3, [r1, -1]",
            "cmp r3, 0xbf",
            "bhi 0xadb0",
            "ldrb r0, [r0]",
            "sub r2, r0, 0xe0",
            "cmp r2, 0x14",
            "addls pc, pc, r2, lsl 2",
            "b 0xada8",
            "b 0xaea8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xae78",
            "b 0xada8",
            "b 0xada8",
            "b 0xae9c",
            "b 0xada8",
            "b 0xada8",
            "b 0xada8",
            "b 0xae90",
            "ldrb r0, [r0]",
            "sub r3, r0, 0x80",
            "and r3, r3, 0xff",
            "cmp r3, 0x41",
            "bhi 0xae80",
            "mov r0, 0",
            "bx lr",
            "cmp r3, 0x9f",
            "bhi 0xadb0",
            "cmp r0, 0xf4",
            "movhi r0, 0",
            "movls r0, 1",
            "bx lr",
            "cmp r3, 0x8f",
            "bls 0xae80",
            "b 0xadb0",
            "cmp r3, 0x8f",
            "bhi 0xae80",
            "b 0xadb0",
            "cmp r3, 0x9f",
            "bhi 0xae80",
            "b 0xadb0"
        ]
    },
    "sym.antlr3MTNExceptionNew": {
        "function_address": "0x00010f28",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.antlr3RecognitionExceptionNew",
            "ldr r2, [r4, 8]",
            "ldr r3, [0x00010f58]",
            "ldr r2, [r2, 4]",
            "add r3, pc, r3",
            "str r3, [r2, 4]",
            "mov r3, 7",
            "str r3, [r2]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3RewriteRuleTOKENStreamNewAEV": {
        "function_address": "0x0000e0b0",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dc3c",
            "ldr r2, [0x0000e0d8]",
            "ldr r3, [0x0000e0dc]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r0, 0x38]",
            "str r3, [r0, 0x44]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3AsciiFileStreamNew": {
        "function_address": "0x0000bd60",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r5, r0, 0",
            "moveq r4, r5",
            "beq 0xbdd0",
            "mov r0, 1",
            "mov r1, 0x74",
            "bl sym.imp.calloc",
            "subs r4, r0, 0",
            "beq 0xbdd0",
            "mov r1, r5",
            "bl rsym.antlr3readAscii",
            "mov r1, 1",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym.antlr3AsciiSetupStream",
            "ldr r3, [r4, 0x14]",
            "mov r1, r5",
            "mov r0, r3",
            "ldr r5, [r4]",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "str r0, [r5, 4]",
            "ldr r3, [r3, 4]",
            "cmp r6, 0",
            "str r3, [r4, 0x34]",
            "bne 0xbddc",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "ldr ip, [r4, 0x40]",
            "mov lr, pc",
            "bx ip",
            "mov r4, 0",
            "b 0xbdd0"
        ]
    },
    "rsym.antlr3readAscii": {
        "function_address": "0x00001e48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc60]!"
        ]
    },
    "sym.antlr3RewriteRuleNODEStreamNewAEE": {
        "function_address": "0x0000e210",
        "instructions": [
            "push {r4, lr}",
            "bl fcn.0000dca0",
            "ldr r4, [0x0000e250]",
            "ldr ip, [0x0000e254]",
            "ldr r1, [0x0000e258]",
            "ldr r2, [0x0000e25c]",
            "add r4, pc, r4",
            "add ip, pc, ip",
            "add r1, pc, r1",
            "add r2, pc, r2",
            "str r4, [r0, 0x38]",
            "str ip, [r0, 0x3c]",
            "str r1, [r0, 0x44]",
            "str r2, [r0, 0x50]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3BitsetCopy": {
        "function_address": "0x00006504",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "mov r0, 0x3c",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x6558",
            "ldr r3, [r7, 4]",
            "cmp r3, 7",
            "lslgt r5, r3, 3",
            "movle r5, 0x40",
            "movle r3, 8",
            "str r3, [r4, 4]",
            "mov r0, r5",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "mov r6, r0",
            "str r0, [r4]",
            "beq 0x6564",
            "ldr r1, [r7]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0x6558"
        ]
    },
    "sym.antlr3AsciiSetupStream": {
        "function_address": "0x0000c488",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym.antlr3StringFactoryNew",
            "mov r1, r5",
            "str r0, [r4, 0x14]",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "b rsym.antlr3GenericSetupStream"
        ]
    },
    "sym.antlr3NewAsciiStringCopyStream": {
        "function_address": "0x0000fa0c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "mov r0, 0x74",
            "mov r5, r1",
            "mov r6, r2",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0xfa98",
            "mov r7, 1",
            "str r7, [r4, 0x10]",
            "mov r0, r5",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [r4, 0xc]",
            "moveq r4, r0",
            "beq 0xfa98",
            "mov r2, r5",
            "mov r1, r8",
            "bl sym.imp.memmove",
            "str r5, [r4, 0x1c]",
            "mov r0, r4",
            "mov r1, r7",
            "bl rsym.antlr3AsciiSetupStream",
            "ldr r0, [r4, 0x14]",
            "cmp r6, 0",
            "ldr r5, [r4]",
            "ldr r3, [r0, 0x18]",
            "beq 0xfaa4",
            "mov r1, r6",
            "mov lr, pc",
            "bx r3",
            "ldr r3, [r4]",
            "str r0, [r5, 4]",
            "ldr r3, [r3, 4]",
            "str r3, [r4, 0x34]",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r6, [0x0000fab0]",
            "add r6, pc, r6",
            "b 0xfa7c"
        ]
    },
    "sym.imp.memmove": {
        "function_address": "0x00001c08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xde0]!"
        ]
    },
    "sym.ConvertUTF8toUTF16": {
        "function_address": "0x0000b29c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [r0]",
            "sub sp, sp, 0x14",
            "cmp r4, r1",
            "str r0, [sp, 8]",
            "mov r5, r1",
            "str r2, [sp, 0xc]",
            "mov sl, r3",
            "ldr r8, [r2]",
            "bhs 0xb48c",
            "ldr r3, [0x0000b4ac]",
            "ldrb r6, [r4]",
            "add r3, pc, r3",
            "add r3, r3, r6",
            "ldrb r7, [r3, 8]",
            "add r3, r4, r7",
            "cmp r1, r3",
            "bls 0xb3dc",
            "ldr r3, [0x0000b4b0]",
            "ldr sb, [0x0000b4b4]",
            "add r3, pc, r3",
            "ldr fp, [0x0000b4b8]",
            "add sb, pc, sb",
            "str r3, [sp, 4]",
            "mov r0, r4",
            "add r1, r7, 1",
            "bl fcn.0000ad84",
            "cmp r0, 0",
            "beq 0xb494",
            "cmp r7, 5",
            "addls pc, pc, r7, lsl 2",
            "b 0xb424",
            "b 0xb41c",
            "b 0xb414",
            "b 0xb40c",
            "b 0xb404",
            "b 0xb3fc",
            "b 0xb334",
            "lsl r3, r6, 6",
            "ldrb r6, [r4, 1]!",
            "add r3, r6, r3",
            "ldrb r6, [r4, 1]!",
            "lsl r3, r3, 6",
            "add r3, r6, r3",
            "ldrb r6, [r4, 1]!",
            "lsl r3, r3, 6",
            "add r3, r6, r3",
            "ldrb r6, [r4, 1]!",
            "lsl r3, r3, 6",
            "add r3, r6, r3",
            "ldrb r6, [r4, 1]!",
            "lsl r3, r3, 6",
            "add r6, r6, r3",
            "cmp sl, r8",
            "add r3, sb, r7, lsl 2",
            "add r4, r4, 1",
            "ldr r3, [r3, 0x108]",
            "bls 0xb438",
            "rsb r6, r3, r6",
            "cmp r6, fp",
            "bhi 0xb448",
            "ldr r0, [0x0000b4bc]",
            "sub r3, r6, 0xd800",
            "cmp r3, r0",
            "strhhi r6, [r8], 2",
            "bhi 0xb3b8",
            "ldr r2, [sp, 0x38]",
            "cmp r2, 0",
            "beq 0xb49c",
            "mvn r3, 2",
            "strh r3, [r8], 2",
            "cmp r4, r5",
            "bhs 0xb48c",
            "ldrb r6, [r4]",
            "ldr r2, [sp, 4]",
            "add r3, r2, r6",
            "ldrb r7, [r3, 8]",
            "add r3, r4, r7",
            "cmp r5, r3",
            "bhi 0xb2fc",
            "mov r0, 1",
            "ldr r2, [sp, 8]",
            "str r4, [r2]",
            "ldr r2, [sp, 0xc]",
            "str r8, [r2]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r3, 0",
            "b 0xb33c",
            "mov r3, 0",
            "b 0xb348",
            "mov r3, 0",
            "b 0xb354",
            "mov r3, 0",
            "b 0xb360",
            "mov r3, 0",
            "b 0xb36c",
            "add r3, sb, r7, lsl 2",
            "cmp sl, r8",
            "mov r6, 0",
            "ldr r3, [r3, 0x108]",
            "bhi 0xb384",
            "mvn r7, r7",
            "add r4, r4, r7",
            "mov r0, 2",
            "b 0xb3e0",
            "ldr r0, [0x0000b4c0]",
            "cmp r6, r0",
            "bhi 0xb3a4",
            "add r3, r8, 2",
            "cmp sl, r3",
            "bls 0xb438",
            "sub r6, r6, 0x10000",
            "lsl r3, r6, 0x16",
            "lsr r3, r3, 0x16",
            "lsr r6, r6, 0xa",
            "sub r6, r6, 0x2800",
            "sub r3, r3, 0x2400",
            "cmp r4, r5",
            "strh r6, [r8]",
            "strh r3, [r8, 2]",
            "add r8, r8, 4",
            "blo 0xb3c0",
            "mov r0, 0",
            "b 0xb3e0",
            "mov r0, 3",
            "b 0xb3e0",
            "mvn r7, r7",
            "add r4, r4, r7",
            "mov r0, 3",
            "b 0xb3e0"
        ]
    },
    "sym.antlr3RewriteRuleTOKENStreamNewAE": {
        "function_address": "0x0000e048",
        "instructions": [
            "push {r3, lr}",
            "bl fcn.0000dad8",
            "cmp r0, 0",
            "beq 0xe070",
            "ldr r2, [0x0000e078]",
            "ldr r3, [0x0000e07c]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r2, [r0, 0x38]",
            "str r3, [r0, 0x44]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3CommonTokenNew": {
        "function_address": "0x00008c2c",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, 0x90",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x8c64",
            "bl rsym.antlr3SetTokenAPI",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "mov r0, r4",
            "mov r1, r5",
            "ldr ip, [r4, 0x58]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.antlr3DebugListenerNew": {
        "function_address": "0x0000bb1c",
        "instructions": [
            "ldr r0, fcn.00006aa4",
            "push {r3, lr}",
            "add r0, pc, r0",
            "bl sym.imp.printf",
            "mov r0, 0",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x00001be4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xdf8]!"
        ]
    },
    "sym.antlr3CommonTokenStreamSourceNew": {
        "function_address": "0x00010c74",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r1",
            "bl rsym.antlr3CommonTokenStreamNew",
            "ldr r3, [r0]",
            "mov r4, r0",
            "mov r2, 0",
            "mov r0, r3",
            "str r2, [r4, 0x14]",
            "str r2, [r4, 0xc]",
            "str r2, [r4, 0x10]",
            "str r2, [r4, 0x18]",
            "mov r1, r5",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [0x00010cc8]",
            "mov r0, r4",
            "add r3, pc, r3",
            "str r3, [r4, 0x40]",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3CommonTokenStreamNew": {
        "function_address": "0x00001c98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd80]!"
        ]
    },
    "sym.antlr3LexerNewStream": {
        "function_address": "0x0000d5a0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r1",
            "mov r1, r2",
            "bl rsym.antlr3LexerNew",
            "subs r5, r0, 0",
            "movne r1, r4",
            "blne fcn.0000c700",
            "mov r0, r5",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.antlr3LexerNew": {
        "function_address": "0x00001cc8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xd60]!"
        ]
    },
    "fcn.0000c700": {
        "function_address": "0x0000c700",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "ldr r3, [r0, 0xc]",
            "ldr r4, [0x0000c7ac]",
            "ldr r7, [r3, 8]",
            "mov r5, r0",
            "ldr r3, [r7, 0x34]",
            "add r4, pc, r4",
            "cmp r3, 0",
            "mov r6, r1",
            "str r1, [r5, 8]",
            "beq 0xc79c",
            "mov r0, r3",
            "ldr ip, [r3, 0xa4]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [r5, 0xc]",
            "ldr r3, [r0, 8]",
            "ldr r2, [r3, 0x38]",
            "ldr r1, [r2, 4]",
            "cmp r1, 0",
            "beq 0xc784",
            "ldr r1, [0x0000c7b0]",
            "ldr ip, [r6, 0x34]",
            "ldr r4, [r4, r1]",
            "mov r1, 0",
            "str r4, [r0, 0x88]",
            "str r1, [r3, 0x30]",
            "str r1, [r3, 0x50]",
            "mvn r1, 0",
            "str r1, [r3, 0x4c]",
            "str ip, [r2, 0x12c]",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr ip, [r2, 0x10]",
            "ldr r1, [r6, 0x14]",
            "cmp ip, 0",
            "str r1, [r2, 4]",
            "streq r1, [r2, 0x10]",
            "b 0xc754",
            "mov r0, r1",
            "bl rsym.antlr3TokenFactoryNew",
            "str r0, [r7, 0x34]",
            "b 0xc73c"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00001f34",
        "instructions": [
            "ldr r2, [0x00001f84]",
            "push {r3, lr}",
            "add r2, pc, r2",
            "ldrb r2, [r2]",
            "ldr r3, [0x00001f88]",
            "cmp r2, 0",
            "add r3, pc, r3",
            "bne 0x1f7c",
            "ldr r2, [0x00001f8c]",
            "ldr r3, [r3, r2]",
            "cmp r3, 0",
            "ldrne r0, [0x00001f90]",
            "ldrne r0, [0x00001f6c]",
            "blne sym.imp.__cxa_finalize",
            "ldr r3, [0x00001f94]",
            "mov r2, 1",
            "add r3, pc, r3",
            "strb r2, [r3]",
            "pop {r3, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00001bcc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe08]!"
        ]
    },
    "fcn.00002c18": {
        "function_address": "0x00002c18",
        "instructions": [
            "cmp r2, 0",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r1",
            "mov r7, r0",
            "moveq r6, r2",
            "beq 0x2cb8",
            "mov r0, r2",
            "bl rsym.antlr3BitsetLoad",
            "subs r4, r0, 0",
            "moveq r6, r4",
            "beq 0x2cb8",
            "mov r1, 1",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "subs r5, r0, 0",
            "bne 0x2cec",
            "mov r0, r6",
            "mov r1, 1",
            "ldr r7, [r4, 0x24]",
            "ldr ip, [r6, 0x18]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx r7",
            "cmp r0, 0",
            "movne r6, 1",
            "beq 0x2cc4",
            "cmp r5, 0",
            "beq 0x2ca8",
            "mov r0, r5",
            "ldr ip, [r5, 0x38]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "ldr ip, [r4, 0x38]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 1",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "adds r6, r0, 0",
            "movne r6, 1",
            "cmp r5, 0",
            "bne 0x2c98",
            "b 0x2ca8",
            "mov r0, r4",
            "mov r1, 1",
            "ldr ip, [r4, 0x2c]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r7",
            "ldr ip, [r7, 0x48]",
            "mov lr, pc",
            "bx ip",
            "mov r5, r0",
            "mov r1, r5",
            "mov r0, r4",
            "ldr ip, [r4, 0x10]",
            "mov lr, pc",
            "bx ip",
            "b 0x2c5c"
        ]
    },
    "rsym.antlr3BitsetLoad": {
        "function_address": "0x00001df4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc98]!"
        ]
    },
    "fcn.00004d24": {
        "function_address": "0x00004d24",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r0, r3",
            "ldr ip, [r3, 0x8c]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "mov r1, r6",
            "ldr ip, [r4, 0x7c]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "beq 0x4db4",
            "mov r5, 0",
            "mov r2, r5",
            "mov r1, r6",
            "mov r0, r4",
            "ldr ip, [r4, 0x68]",
            "mov lr, pc",
            "bx ip",
            "mov r8, r0",
            "mov r1, r8",
            "mov r0, r4",
            "bl fcn.00004d24",
            "ldr r3, [r4, 0xc]",
            "mov r1, r6",
            "mov r0, r3",
            "mov r2, r8",
            "add r5, r5, 1",
            "ldr ip, [r3, 0x98]",
            "mov lr, pc",
            "bx ip",
            "cmp r5, r7",
            "bne 0x4d64",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.000050ac": {
        "function_address": "0x000050ac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x5c",
            "str r1, [sp, 0xc]",
            "mov r5, r0",
            "mov r4, r2",
            "ldr ip, [r0, 0x7c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0x5244",
            "ble 0x5244",
            "ldr r3, [0x00005280]",
            "mov r6, 0",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x00005284]",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x00005288]",
            "add r3, pc, r3",
            "str r3, [sp]",
            "ldr r3, [0x0000528c]",
            "add r3, pc, r3",
            "str r3, [sp, 4]",
            "ldr r1, [sp, 0xc]",
            "mov r2, r6",
            "mov r0, r5",
            "ldr ip, [r5, 0x68]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 0x10]",
            "mov r7, r0",
            "add r1, pc, r3",
            "mov r2, r7",
            "add r0, sp, 0x18",
            "bl sym.imp.sprintf",
            "add r1, sp, 0x18",
            "mov r0, r4",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "mov r1, r7",
            "ldr ip, [r5, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r0, 8]",
            "mov sl, r0",
            "cmp r3, 0",
            "ble 0x520c",
            "ldr fp, [0x00005290]",
            "mov r8, 0",
            "add fp, pc, fp",
            "b 0x51c8",
            "cmp r3, 0x22",
            "mov r1, r8",
            "mov r0, sl",
            "beq 0x5268",
            "cmp r3, 0xa",
            "beq 0x5250",
            "ldr sb, [r4, 0x40]",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx sb",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "ble 0x520c",
            "mov r1, r8",
            "mov r0, sl",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0xd",
            "mov r3, r0",
            "bne 0x5180",
            "mov r0, r4",
            "ldr r1, [sp]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "bgt 0x51c8",
            "ldr r3, [sp, 0x14]",
            "mov r0, r4",
            "add r1, pc, r3",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r4",
            "bl fcn.000050ac",
            "ldr r3, [sp, 8]",
            "add r6, r6, 1",
            "cmp r3, r6",
            "bne 0x5108",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, fp",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x51b8",
            "mov r0, r4",
            "ldr r1, [sp, 4]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x51b8"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x00001e90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xc30]!"
        ]
    },
    "fcn.00005294": {
        "function_address": "0x00005294",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs ip, r1, 0",
            "sub sp, sp, 0xac",
            "str ip, [sp, 0xc]",
            "mov r5, r0",
            "mov r4, r2",
            "beq 0x5530",
            "ldr ip, [r0, 0x7c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "str r0, [sp, 0x18]",
            "beq 0x5530",
            "ble 0x5530",
            "ldr ip, [0x0000559c]",
            "ldr r3, [0x000055a0]",
            "str ip, [sp, 0x1c]",
            "add r3, pc, r3",
            "ldr ip, [0x000055a4]",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x000055a8]",
            "str ip, [sp, 0x20]",
            "ldr ip, [0x000055ac]",
            "add r3, pc, r3",
            "str ip, [sp, 0x24]",
            "mov r6, 0",
            "str r3, [sp, 0x14]",
            "ldr r1, [sp, 0xc]",
            "mov r2, r6",
            "mov r0, r5",
            "ldr ip, [r5, 0x68]",
            "mov lr, pc",
            "bx ip",
            "ldr ip, [sp, 0x1c]",
            "mov r7, r0",
            "mov r3, r7",
            "add r1, pc, ip",
            "ldr r2, [sp, 0xc]",
            "add r0, sp, 0x28",
            "bl sym.imp.sprintf",
            "add r1, sp, 0x28",
            "mov r0, r4",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [sp, 0xc]",
            "ldr ip, [r5, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r0, 8]",
            "mov sl, r0",
            "cmp r3, 0",
            "ble 0x5408",
            "ldr fp, [0x000055b0]",
            "mov r8, 0",
            "add fp, pc, fp",
            "b 0x53c4",
            "cmp r3, 0x22",
            "mov r1, r8",
            "mov r0, sl",
            "beq 0x5554",
            "cmp r3, 0xa",
            "beq 0x553c",
            "ldr sb, [r4, 0x40]",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx sb",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "ble 0x5408",
            "mov r1, r8",
            "mov r0, sl",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0xd",
            "mov r3, r0",
            "bne 0x537c",
            "mov r0, r4",
            "ldr r1, [sp, 0x10]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "bgt 0x53c4",
            "ldr ip, [sp, 0x20]",
            "mov r0, r4",
            "add r1, pc, ip",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "mov r1, r7",
            "ldr ip, [r5, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r0, 8]",
            "mov sl, r0",
            "cmp r3, 0",
            "ble 0x54f8",
            "ldr r3, [0x000055b4]",
            "ldr fp, [0x000055b8]",
            "add r3, pc, r3",
            "str r3, [sp, 4]",
            "ldr r3, [0x000055bc]",
            "mov r8, 0",
            "add r3, pc, r3",
            "add fp, pc, fp",
            "str r3, [sp, 8]",
            "b 0x54b4",
            "cmp r3, 0x22",
            "mov r1, r8",
            "mov r0, sl",
            "beq 0x5584",
            "cmp r3, 0xa",
            "beq 0x556c",
            "ldr sb, [r4, 0x40]",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx sb",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "ble 0x54f8",
            "mov r1, r8",
            "mov r0, sl",
            "ldr ip, [sl, 0x54]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0xd",
            "mov r3, r0",
            "bne 0x546c",
            "mov r0, r4",
            "mov r1, fp",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sl, 8]",
            "add r8, r8, 1",
            "cmp r3, r8",
            "bgt 0x54b4",
            "ldr ip, [sp, 0x24]",
            "mov r0, r4",
            "add r1, pc, ip",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r4",
            "bl fcn.00005294",
            "ldr ip, [sp, 0x18]",
            "add r6, r6, 1",
            "cmp ip, r6",
            "bne 0x5300",
            "add sp, sp, 0xac",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, fp",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x53b4",
            "mov r0, r4",
            "ldr r1, [sp, 0x14]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x53b4",
            "mov r0, r4",
            "ldr r1, [sp, 8]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x54a4",
            "mov r0, r4",
            "ldr r1, [sp, 4]",
            "ldr ip, [r4, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x54a4"
        ]
    },
    "fcn.00005964": {
        "function_address": "0x00005964",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00005a5c]",
            "subs r4, r1, 0",
            "add r5, pc, r5",
            "mov r6, r2",
            "beq 0x59d8",
            "cmp r2, 0",
            "beq 0x5a3c",
            "mov r0, r4",
            "ldr ip, [r4, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x5a10",
            "mov r0, r4",
            "ldr ip, [r4, 0x44]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 1",
            "bls 0x59e4",
            "ldr r3, [0x00005a60]",
            "ldr r0, [0x00005a64]",
            "ldr r3, [r5, r3]",
            "add r0, pc, r0",
            "mov r1, 1",
            "mov r2, 0x41",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mov r6, r4",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 0",
            "ldr ip, [r4, 0x38]",
            "mov lr, pc",
            "bx ip",
            "mov r5, r0",
            "mov r0, r4",
            "ldr ip, [r4, 0x78]",
            "mov lr, pc",
            "bx ip",
            "mov r4, r5",
            "mov r1, r6",
            "mov r0, r4",
            "ldr ip, [r4, 0x18]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "ldr ip, [r6, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x5a44",
            "mov r6, r4",
            "b 0x59d8",
            "mov r0, r6",
            "ldr ip, [r6, 0x78]",
            "mov lr, pc",
            "bx ip",
            "mov r6, r4",
            "b 0x59d8"
        ]
    },
    "fcn.00006480": {
        "function_address": "0x00006480",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "ldr r0, [r0, 4]",
            "lsl r0, r0, 6",
            "bl rsym.antlr3BitsetNew",
            "subs r4, r0, 0",
            "beq 0x64b0",
            "ldr r2, [r5, 4]",
            "ldr r0, [r4]",
            "ldr r1, [r5]",
            "lsl r2, r2, 3",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "bx lr"
        ]
    },
    "fcn.00011350": {
        "function_address": "0x00011350",
        "instructions": [
            "cmp r0, 0",
            "mvnne r0, 0",
            "b 0x11370",
            "cmp r1, 0",
            "beq 0x11344",
            "push {r0, r1, lr}",
            "bl fcn.0001125c",
            "pop {r1, r2, lr}",
            "mul r3, r2, r0",
            "sub r1, r1, r3",
            "bx lr",
            "push {r1, lr}",
            "mov r0, 8",
            "bl sym.imp.raise",
            "pop {r1, lr}",
            "bx lr"
        ]
    },
    "fcn.0001125c": {
        "function_address": "0x0001125c",
        "instructions": [
            "subs r2, r1, 1",
            "bxeq lr",
            "blo 0x11344",
            "cmp r0, r1",
            "bls 0x112fc",
            "tst r1, r2",
            "beq 0x11308",
            "tst r1, 0xe0000000",
            "lsleq r1, r1, 3",
            "moveq r3, 8",
            "movne r3, 1",
            "cmp r1, 0x10000000",
            "cmplo r1, r0",
            "lsllo r1, r1, 4",
            "lsllo r3, r3, 4",
            "blo 0x11288",
            "cmp r1, 0x80000000",
            "cmplo r1, r0",
            "lsllo r1, r1, 1",
            "lsllo r3, r3, 1",
            "blo 0x1129c",
            "mov r2, 0",
            "cmp r0, r1",
            "subhs r0, r0, r1",
            "orrhs r2, r2, r3",
            "cmp r0, r1, lsr 1",
            "subhs r0, r0, r1, lsr 1",
            "orrhs r2, r2, r3, lsr 1",
            "cmp r0, r1, lsr 2",
            "subhs r0, r0, r1, lsr 2",
            "orrhs r2, r2, r3, lsr 2",
            "cmp r0, r1, lsr 3",
            "subhs r0, r0, r1, lsr 3",
            "orrhs r2, r2, r3, lsr 3",
            "cmp r0, 0",
            "lsrsne r3, r3, 4",
            "lsrne r1, r1, 4",
            "bne 0x112b4",
            "mov r0, r2",
            "bx lr",
            "moveq r0, 1",
            "movne r0, 0",
            "bx lr",
            "cmp r1, 0x10000",
            "lsrhs r1, r1, 0x10",
            "movhs r2, 0x10",
            "movlo r2, 0",
            "cmp r1, 0x100",
            "lsrhs r1, r1, 8",
            "addhs r2, r2, 8",
            "cmp r1, 0x10",
            "lsrhs r1, r1, 4",
            "addhs r2, r2, 4",
            "cmp r1, 4",
            "addhi r2, r2, 3",
            "addls r2, r2, r1, lsr 1",
            "lsr r0, r0, r2",
            "bx lr"
        ]
    },
    "sym.imp.raise": {
        "function_address": "0x00001ba8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe20]!"
        ]
    },
    "fcn.00006ab4": {
        "function_address": "0x00006ab4",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "ldr r3, [r0, 0xc]",
            "mov r4, r0",
            "cmp r3, 1",
            "mov r5, r1",
            "beq 0x6b68",
            "ldr r3, [r0, 0x18]",
            "mov r0, r3",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "ldr r1, [r4, 0x10]",
            "beq 0x6b70",
            "cmp r1, 0",
            "beq 0x6b68",
            "mov r0, 0",
            "ldr r6, [r4, 8]",
            "mov ip, r0",
            "mov r7, 1",
            "b 0x6b18",
            "add ip, ip, 1",
            "cmp ip, r1",
            "add r0, r0, 4",
            "bhs 0x6b68",
            "ldr r3, [r6, r0]",
            "cmp r3, r5",
            "bne 0x6b08",
            "cmp ip, r1",
            "bhs 0x6b4c",
            "mov r2, r6",
            "mov r3, ip",
            "ldr r1, [r2, r0]",
            "add r3, r3, 1",
            "str r1, [r2], 4",
            "ldr r1, [r4, 0x10]",
            "cmp r1, r3",
            "bhi 0x6b34",
            "rsb r1, ip, r1",
            "add ip, ip, 1",
            "cmp ip, r1",
            "str r1, [r4, 0x10]",
            "str r7, [r4, 0xc]",
            "add r0, r0, 4",
            "blo 0x6b18",
            "pop {r3, r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [r4, 0x18]",
            "ldr r0, [r4, 8]",
            "add r2, r1, 1",
            "str r5, [r0, r1, lsl 2]",
            "mov r0, r3",
            "str r2, [r4, 0x10]",
            "mov r1, r5",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "ldr r7, [r3, r5, lsl 2]",
            "cmp r7, 0",
            "beq 0x6c3c",
            "mov r0, r7",
            "ldr ip, [r7, 0x28]",
            "mov lr, pc",
            "bx ip",
            "mov sl, r0",
            "mov r0, r7",
            "ldr ip, [r7, 0x14]",
            "mov lr, pc",
            "bx ip",
            "subs r8, r0, 0",
            "bne 0x6bf4",
            "b 0x6c3c",
            "adds r3, r8, 0",
            "add r6, r6, 1",
            "movne r3, 1",
            "cmp sl, r6",
            "movlo r3, 0",
            "cmp r3, 0",
            "beq 0x6c3c",
            "mov r1, r6",
            "mov r0, r7",
            "ldr ip, [r7, 0x24]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x6bd8",
            "mov r1, r6",
            "mov r0, r4",
            "sub r8, r8, 1",
            "bl fcn.00006ab4",
            "add r6, r6, 1",
            "adds r3, r8, 0",
            "movne r3, 1",
            "cmp sl, r6",
            "movlo r3, 0",
            "cmp r3, 0",
            "bne 0x6bf4",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 4]",
            "add r2, r3, 1",
            "str r5, [r1, r3, lsl 2]",
            "ldr r3, [r4, 0xc]",
            "str r2, [r4, 0x14]",
            "cmp r3, 0",
            "ldreq r3, [r4, 0x10]",
            "subeq r3, r3, 1",
            "streq r3, [r4, 0x10]",
            "b 0x6b68"
        ]
    },
    "fcn.00006ea0": {
        "function_address": "0x00006ea0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "ldr r0, [r0, 0xc]",
            "ldr r3, [r6]",
            "ldr r2, [r0]",
            "cmp r3, r2",
            "bhi 0x6f38",
            "ldr r0, [r6, 0x10]",
            "ldr r2, [r0]",
            "cmp r2, r3",
            "blo 0x6f50",
            "ldr r4, [r6, 8]",
            "cmp r4, 0",
            "bne 0x6ef0",
            "b 0x6f28",
            "mov r0, r4",
            "bl sym.imp.free",
            "cmp r5, 0",
            "beq 0x6f28",
            "mov r4, r5",
            "ldr r3, [r4]",
            "ldr r5, [r4, 0xc]",
            "cmp r3, 1",
            "bne 0x6edc",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "beq 0x6edc",
            "ldr r0, [r4, 8]",
            "mov lr, pc",
            "bx r3",
            "mov r0, r4",
            "bl sym.imp.free",
            "cmp r5, 0",
            "bne 0x6eec",
            "mov r0, r6",
            "bl sym.imp.free",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl fcn.00006ea0",
            "ldr r0, [r6, 0x10]",
            "ldr r3, [r6]",
            "ldr r2, [r0]",
            "cmp r2, r3",
            "bhs 0x6ecc",
            "bl fcn.00006ea0",
            "b 0x6ecc"
        ]
    },
    "fcn.000066fc": {
        "function_address": "0x000066fc",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "mov r0, r1",
            "ldr r1, [r5, 4]",
            "bl fcn.00011350",
            "ldr r3, [r5, 8]",
            "ldr r0, [r3, r1, lsl 2]",
            "add r3, r3, r1, lsl 2",
            "cmp r0, 0",
            "beq 0x6758",
            "ldr ip, [r0, 4]",
            "cmp ip, r4",
            "moveq r2, r3",
            "bne 0x6748",
            "b 0x6760",
            "ldr r3, [r0, 4]",
            "cmp r3, r4",
            "beq 0x6760",
            "add r2, r0, 0x10",
            "ldr r0, [r0, 0x10]",
            "cmp r0, 0",
            "bne 0x673c",
            "pop {r3, r4, r5, lr}",
            "bx lr",
            "ldr r3, [r5, 0xc]",
            "ldr r1, [r0, 0x10]",
            "sub r3, r3, 1",
            "str r1, [r2]",
            "str r3, [r5, 0xc]",
            "b 0x6758"
        ]
    },
    "fcn.00007780": {
        "function_address": "0x00007780",
        "instructions": [
            "cmp r1, 0",
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0x8c]",
            "beq 0x77cc",
            "cmp r1, r3",
            "lslhs r5, r1, 1",
            "blo 0x77cc",
            "cmp r3, 0x10",
            "bhi 0x77d8",
            "lsl r0, r5, 3",
            "bl sym.imp.malloc",
            "mov r1, r4",
            "str r0, [r1], 8",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "str r5, [r4, 0x8c]",
            "pop {r3, r4, r5, lr}",
            "bx lr",
            "cmp r3, 0x10",
            "lsl r5, r3, 1",
            "bls 0x77a8",
            "ldr r0, [r4]",
            "lsl r1, r5, 3",
            "bl sym.imp.realloc",
            "str r0, [r4]",
            "b 0x77c0"
        ]
    },
    "fcn.00007d04": {
        "function_address": "0x00007d04",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "mov r0, r1",
            "mov r5, r1",
            "bl sym.imp.strlen",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym.antlr3Hash",
            "ldr r1, [r7, 4]",
            "bl fcn.00011350",
            "ldr r3, [r7, 8]",
            "ldr r4, [r3, r1, lsl 2]",
            "add r6, r3, r1, lsl 2",
            "cmp r4, 0",
            "bne 0x7d54",
            "b 0x7d90",
            "add r6, r4, 0x10",
            "ldr r4, [r4, 0x10]",
            "cmp r4, 0",
            "beq 0x7d90",
            "ldr r1, [r4, 4]",
            "mov r0, r5",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x7d44",
            "ldr r2, [r7, 0x10]",
            "ldr r3, [r4, 0x10]",
            "cmp r2, 1",
            "str r3, [r6]",
            "beq 0x7d9c",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "ldr r3, [r7, 0xc]",
            "sub r3, r3, 1",
            "str r3, [r7, 0xc]",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r0, [r4, 4]",
            "bl sym.imp.free",
            "b 0x7d7c"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00001da0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xcd0]!"
        ]
    },
    "rsym.antlr3Hash": {
        "function_address": "0x00001ee4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xbf8]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00001bc0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 24, 20",
            "ldr pc, [ip, 0xe10]!"
        ]
    },
    "fcn.00009b44": {
        "function_address": "0x00009b44",
        "instructions": [
            "ldr r3, [r0, 0x288]",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "mov r0, r3",
            "mov r6, r1",
            "ldr ip, [r3, 0x30]",
            "mov lr, pc",
            "bx ip",
            "subs r2, r0, 0",
            "beq 0x9be0",
            "mov r0, r6",
            "ldr ip, [r6, 0x44]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "movne r8, 0",
            "beq 0x9bd8",
            "mov r4, 0",
            "ldr r3, [r5, 0x288]",
            "mov r2, r4",
            "mov r0, r3",
            "mov r1, r6",
            "ldr ip, [r3, 0x68]",
            "mov lr, pc",
            "bx ip",
            "add r4, r4, 1",
            "mov r1, r0",
            "mov r0, r5",
            "bl fcn.00009b44",
            "cmp r4, r7",
            "blo 0x9b8c",
            "cmp r8, 0",
            "movne r0, r5",
            "movne r1, 3",
            "ldrne ip, [r5, 0x2d0]",
            "movne lr, pc",
            "bxne ip",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r5, 0x27c]",
            "mov r1, r6",
            "mov r0, r3",
            "ldr ip, [r3, 0xa8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "ldr ip, [r6, 0x44]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "beq 0x9bd8",
            "mov r0, r5",
            "mov r1, 2",
            "ldr ip, [r5, 0x2d0]",
            "mov lr, pc",
            "bx ip",
            "mov r8, 1",
            "b 0x9b88"
        ]
    },
    "fcn.00009c2c": {
        "function_address": "0x00009c2c",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r0, 0x284]",
            "mov r4, r0",
            "bl fcn.00009b44",
            "mov r3, 0",
            "str r3, [r4, 0x290]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0000ec30": {
        "function_address": "0x0000ec30",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "str r0, [sp, 0x14]",
            "mov r0, 0x68",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [sp, 0x10]",
            "beq 0xeddc",
            "ldr sl, [0x0000edec]",
            "ldr r8, [0x0000edf0]",
            "str sl, [sp, 0x18]",
            "mov r1, 0",
            "ldr sl, [sp, 0x14]",
            "strb r1, [r0, 0x14]",
            "str r8, [sp, 8]",
            "ldr r3, [0x0000edf4]",
            "ldr r8, [0x0000edf8]",
            "ldr sl, [sl]",
            "str r3, [sp, 0xc]",
            "str r8, [sp, 0x1c]",
            "ldr r8, [sp, 0x14]",
            "str sl, [sp, 0x20]",
            "ldr sl, [sp, 0xc]",
            "ldr r8, [r8, 4]",
            "add sl, pc, sl",
            "str sl, [sp, 0xc]",
            "str r8, [sp, 0x24]",
            "ldr sl, [sp, 0x18]",
            "ldr r8, [sp, 8]",
            "add sl, pc, sl",
            "add r8, pc, r8",
            "ldr r0, [0x0000edfc]",
            "ldr r1, [0x0000ee00]",
            "str r8, [sp, 8]",
            "str sl, [sp, 0x18]",
            "ldr r8, [sp, 0x1c]",
            "ldr sl, [sp, 0x10]",
            "add r0, pc, r0",
            "add r1, pc, r1",
            "ldr r2, [0x0000ee04]",
            "ldr fp, [0x0000ee08]",
            "ldr sb, [0x0000ee0c]",
            "ldr r3, [0x0000ee10]",
            "str r0, [sl, 0x18]",
            "str r0, [sl, 0x1c]",
            "str r1, [sl, 0x20]",
            "str r1, [sl, 0x24]",
            "ldr r0, [sp, 0xc]",
            "add r8, pc, r8",
            "ldr r1, [sp, 8]",
            "add r2, pc, r2",
            "add r3, pc, r3",
            "str r8, [sp, 0x1c]",
            "add fp, pc, fp",
            "mov r8, 0",
            "add sb, pc, sb",
            "str r8, [sl, 8]",
            "str r8, [sl, 0xc]",
            "str r8, [sl, 4]",
            "str r2, [sl, 0x28]",
            "str r2, [sl, 0x2c]",
            "str r0, [sl, 0x40]",
            "str fp, [sl, 0x44]",
            "str sb, [sl, 0x3c]",
            "ldr r7, [0x0000ee14]",
            "str r1, [sl, 0x54]",
            "ldr r6, [0x0000ee18]",
            "str r3, [sl, 0x4c]",
            "str r3, [sl, 0x48]",
            "ldr r5, [0x0000ee1c]",
            "ldr r3, [sp, 0x1c]",
            "ldr r4, [0x0000ee20]",
            "ldr lr, [0x0000ee24]",
            "ldr ip, [0x0000ee28]",
            "ldr r8, [sp, 0x14]",
            "ldr r2, [sp, 0x18]",
            "str r3, [sl, 0x38]",
            "add ip, pc, ip",
            "add lr, pc, lr",
            "mov r3, 1",
            "add r7, pc, r7",
            "add r6, pc, r6",
            "add r5, pc, r5",
            "add r4, pc, r4",
            "str ip, [sl, 0x30]",
            "str r2, [sl, 0x34]",
            "str r7, [sl, 0x58]",
            "str r6, [sl, 0x5c]",
            "str r5, [sl, 0x60]",
            "str r4, [sl, 0x64]",
            "str lr, [sl, 0x50]",
            "str r8, [sl]",
            "str r3, [sp]",
            "ldr r3, [0x0000ee2c]",
            "ldr r0, [sp, 0x20]",
            "mov r2, sl",
            "add r3, pc, r3",
            "ldr r1, [sp, 0x24]",
            "mov sl, r0",
            "ldr ip, [r0, 0xac]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r8, 4]",
            "ldr ip, [sp, 0x10]",
            "add r2, r3, 1",
            "str r3, [ip, 0x10]",
            "str r2, [r8, 4]",
            "ldr r0, [sp, 0x10]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "fcn.000102a0": {
        "function_address": "0x000102a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "ldr r6, [r0, 4]",
            "blt 0x103d0",
            "ldr r3, [r6, 0x1c]",
            "cmn r3, 1",
            "beq 0x1045c",
            "cmp r5, 0",
            "beq 0x1036c",
            "ldr r3, [r4, 8]",
            "ldr r1, [r6, 0x1c]",
            "ldr sl, [r3, 0x38]",
            "add r2, r1, r5",
            "cmp r2, sl",
            "bgt 0x10378",
            "cmp r5, 1",
            "beq 0x10358",
            "ldr r2, [r6]",
            "mov r8, 1",
            "ldr r2, [r2, 8]",
            "ldr r7, [r2, 0x38]",
            "add r2, r1, 1",
            "cmp r2, r7",
            "bge 0x10348",
            "ldr r0, [r6, 8]",
            "ldr ip, [r6, 0x14]",
            "ldr r0, [r0]",
            "ldr sb, [r0, r2, lsl 3]",
            "ldr sb, [sb, 0x18]",
            "cmp sb, ip",
            "addne r1, r0, r1, lsl 3",
            "bne 0x1033c",
            "b 0x10348",
            "ldr r0, [r1, 0x10]",
            "add r1, r1, 8",
            "ldr r0, [r0, 0x18]",
            "cmp r0, ip",
            "beq 0x10348",
            "add r2, r2, 1",
            "cmp r2, r7",
            "bne 0x10328",
            "add r8, r8, 1",
            "cmp r8, r5",
            "mov r1, r2",
            "bne 0x102f8",
            "cmp sl, r1",
            "bls 0x10378",
            "ldr r3, [r6, 8]",
            "ldr r3, [r3]",
            "ldr r5, [r3, r1, lsl 3]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r6, [r4]",
            "mov r0, r3",
            "ldr r7, [r6, 0x88]",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "add r5, r6, 8",
            "mov r1, r0",
            "mov r0, r5",
            "mov lr, pc",
            "bx r7",
            "ldr r3, [r4, 8]",
            "ldr r4, [r6, 0x90]",
            "mov r0, r3",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r5",
            "mov lr, pc",
            "bx r4",
            "b 0x1036c",
            "ldr r2, [r6, 0x1c]",
            "rsb r4, r5, 0",
            "cmn r2, 1",
            "beq 0x10470",
            "cmn r2, r5",
            "bmi 0x10468",
            "mov ip, 1",
            "subs r3, r2, 1",
            "bmi 0x10434",
            "ldr r1, [r6, 8]",
            "ldr r0, [r6, 0x14]",
            "ldr r1, [r1]",
            "ldr r5, [r1, r3, lsl 3]",
            "ldr r5, [r5, 0x18]",
            "cmp r5, r0",
            "addne r2, r1, r2, lsl 3",
            "bne 0x1042c",
            "b 0x10434",
            "ldr r1, [r2, -0x10]",
            "sub r2, r2, 8",
            "ldr r1, [r1, 0x18]",
            "cmp r1, r0",
            "beq 0x10434",
            "subs r3, r3, 1",
            "bhs 0x10418",
            "add ip, ip, 1",
            "cmp r4, ip",
            "mov r2, r3",
            "bge 0x103ec",
            "cmp r3, 0",
            "blt 0x10468",
            "ldr r2, [r6, 8]",
            "ldr r2, [r2]",
            "ldr r5, [r2, r3, lsl 3]",
            "b 0x1036c",
            "mov r0, r6",
            "bl fcn.0000ff44",
            "b 0x102c0",
            "mov r5, 0",
            "b 0x1036c",
            "mov r0, r6",
            "bl fcn.0000ff44",
            "ldr r2, [r6, 0x1c]",
            "b 0x103e0"
        ]
    },
    "fcn.0000ff44": {
        "function_address": "0x0000ff44",
        "instructions": [
            "ldr r3, [r0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r3]",
            "mov r4, r0",
            "mov r0, r3",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x10098",
            "ldr r3, [r6]",
            "cmn r3, 1",
            "beq 0x10098",
            "mov r5, 0",
            "b 0xffd4",
            "ldr r7, [r8, 0xc]",
            "ldr ip, [r6, 0x54]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r8",
            "mov lr, pc",
            "bx r7",
            "cmp r0, 0",
            "beq 0xffe4",
            "ldr r3, [r4]",
            "ldr r3, [r3]",
            "mov r0, r3",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x10098",
            "ldr r3, [r6]",
            "cmn r3, 1",
            "beq 0x10098",
            "ldr r8, [r4, 0x10]",
            "mov r0, r6",
            "cmp r8, 0",
            "bne 0xff80",
            "ldr r3, [r4, 0x18]",
            "cmp r3, 1",
            "beq 0x10100",
            "ldr r7, [r4, 0xc]",
            "mov r0, r6",
            "cmp r7, 0",
            "beq 0x10038",
            "ldr r8, [r7, 0xc]",
            "ldr ip, [r6, 0x54]",
            "mov lr, pc",
            "bx ip",
            "add r1, r0, 1",
            "mov r0, r7",
            "mov lr, pc",
            "bx r8",
            "subs r1, r0, 0",
            "movne r0, r6",
            "subne r1, r1, 1",
            "ldrne ip, [r6, 0x70]",
            "movne lr, pc",
            "bxne ip",
            "mov r1, r5",
            "mov r0, r6",
            "ldr ip, [r6, 0x78]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 8]",
            "add r2, r2, 1",
            "mov r1, r6",
            "str r2, [r4, 0x1c]",
            "mov r0, r3",
            "mov r2, 0",
            "ldr ip, [r3, 0xa8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "add r5, r5, 1",
            "ldr r3, [r3]",
            "mov r0, r3",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "bne 0xffc8",
            "ldr r3, [r4, 8]",
            "ldr r2, [r4]",
            "ldr r0, [r3, 4]",
            "ldr r2, [r2, 8]",
            "cmp r0, 0",
            "str r0, [r2, 0x38]",
            "movle r3, 0",
            "ble 0x100f4",
            "ldr r2, [r3]",
            "ldr ip, [r4, 0x14]",
            "ldr r3, [r2]",
            "ldr r3, [r3, 0x18]",
            "cmp r3, ip",
            "mov r3, 0",
            "bne 0x100e8",
            "b 0x100f4",
            "ldr r1, [r2, 8]!",
            "ldr r1, [r1, 0x18]",
            "cmp r1, ip",
            "beq 0x100f4",
            "add r3, r3, 1",
            "cmp r0, r3",
            "bne 0x100d8",
            "str r3, [r4, 0x1c]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r6",
            "ldr ip, [r6, 0x6c]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 0x14]",
            "cmp r0, r3",
            "bne 0xffa8",
            "b 0xfff0"
        ]
    }
}