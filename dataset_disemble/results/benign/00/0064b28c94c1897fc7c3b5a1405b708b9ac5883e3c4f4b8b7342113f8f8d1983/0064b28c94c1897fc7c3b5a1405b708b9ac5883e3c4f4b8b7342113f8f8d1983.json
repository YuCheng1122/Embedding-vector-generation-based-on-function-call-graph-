{
    "main": {
        "function_address": "0x00009b48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r0, 1",
            "ldr r6, aav.0x0000d85c",
            "sub sp, sp, 0x114",
            "mov r5, r0",
            "add r6, pc, r6",
            "ble 0x9c48",
            "ldr r4, [r1, 4]",
            "add r7, r1, 4",
            "ldrsb r3, [r4]",
            "cmp r3, 0x2d",
            "bne 0x9c4c",
            "ldr r3, [0x00009e60]",
            "add r8, r1, 8",
            "ldr fp, [0x00009e64]",
            "ldr r2, [0x00009e68]",
            "add r3, r6, r3",
            "ldr sl, [0x00009e6c]",
            "str r3, [sp]",
            "add fp, r6, fp",
            "ldr r3, [0x00009e70]",
            "ldr sb, [0x00009e74]",
            "str r2, [sp, 0xc]",
            "add r3, r6, r3",
            "str r3, [sp, 8]",
            "ldr r3, [0x00009e78]",
            "str r3, [sp, 4]",
            "b 0x9be8",
            "ldr r3, [r6, sb]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "sub r5, r5, 1",
            "cmp r5, 1",
            "ble 0x9c48",
            "mov r7, r8",
            "ldr r4, [r8], 4",
            "ldrsb r3, [r4]",
            "cmp r3, 0x2d",
            "bne 0x9c4c",
            "mov r0, r4",
            "add r1, r6, sl",
            "bl sym.matches",
            "cmp r0, 0",
            "sub r4, r8, 4",
            "beq 0x9bb8",
            "ldr r0, [r8, -4]",
            "mov r1, fp",
            "bl sym.matches",
            "cmp r0, 0",
            "beq 0x9bb8",
            "ldr r0, [r8, -4]",
            "ldr r1, [sp]",
            "bl sym.matches",
            "cmp r0, 0",
            "bne 0x9d10",
            "ldr r2, [sp, 4]",
            "sub r5, r5, 1",
            "cmp r5, 1",
            "ldr r3, [r6, r2]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bgt 0x9bd4",
            "bl fcn.00009b08",
            "ldr r8, [0x00009e7c]",
            "ldr sl, [r6, r8]",
            "cmp sl, 0",
            "bne 0x9c6c",
            "b 0x9ca4",
            "ldr sl, [sl]",
            "cmp sl, 0",
            "beq 0x9ca4",
            "add r0, sl, 4",
            "mov r1, r4",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x9c60",
            "cmp sl, 0",
            "beq 0x9dc8",
            "ldr r3, [sl, 0x14]",
            "mov r0, sl",
            "sub r1, r5, 1",
            "mov r2, r7",
            "blx r3",
            "add sp, sp, 0x114",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r2, [0x00009e80]",
            "add sl, sp, 0x10",
            "mov r1, 0x100",
            "mov r3, r4",
            "mov r0, sl",
            "add r2, r6, r2",
            "bl sym.imp.snprintf",
            "mov r0, sl",
            "mov r1, 1",
            "bl sym.imp.dlopen",
            "subs sb, r0, 0",
            "beq 0x9d3c",
            "ldr r2, [0x00009e84]",
            "mov r3, r4",
            "mov r0, sl",
            "mov r1, 0x100",
            "add r2, r6, r2",
            "bl sym.imp.snprintf",
            "mov r1, sl",
            "mov r0, sb",
            "bl sym.imp.dlsym",
            "subs sl, r0, 0",
            "beq 0x9d64",
            "ldr r3, [r6, r8]",
            "str sl, [r6, r8]",
            "str r3, [sl]",
            "b 0x9c80",
            "ldr r0, [r8, -4]",
            "ldr r1, [sp, 8]",
            "bl sym.matches",
            "cmp r0, 0",
            "bne 0x9dec",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [r6, r2]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "b 0x9bc8",
            "add fp, r6, r8",
            "ldr sb, [fp, 4]",
            "cmp sb, 0",
            "bne aav.0x00009cd4",
            "mov r1, 1",
            "bl sym.imp.dlopen",
            "cmp r0, 0",
            "mov sb, r0",
            "str r0, [fp, 4]",
            "bne aav.0x00009cd4",
            "mov r0, 0x1c",
            "bl sym.imp.malloc",
            "subs sl, r0, 0",
            "beq 0x9dc8",
            "mov ip, 0",
            "mov r3, sl",
            "str ip, [r3], 4",
            "mov r0, sl",
            "add r3, r3, 4",
            "str ip, [r0, 4]!",
            "mov r2, 0xf",
            "str ip, [r3], 4",
            "mov r1, r4",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3]",
            "bl sym.imp.strncpy",
            "ldr r2, [0x00009e88]",
            "ldr r3, [0x00009e8c]",
            "add r2, r6, r2",
            "add r3, r6, r3",
            "str r2, [sl, 0x14]",
            "str r3, [sl, 0x18]",
            "b 0x9d00",
            "ldr r3, [0x00009e90]",
            "mov sl, 0",
            "ldr r1, [0x00009e94]",
            "ldr r2, [r7]",
            "ldr r3, [r6, r3]",
            "add r1, r6, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9c88",
            "ldr r1, [0x00009e98]",
            "ldr r0, [r4]",
            "add r1, r6, r1",
            "bl sym.matches",
            "subs r5, r0, 0",
            "beq 0x9e40",
            "ldr r1, [0x00009e9c]",
            "ldr r0, [r4]",
            "add r1, r6, r1",
            "bl sym.matches",
            "cmp r0, 0",
            "beq 0x9c48",
            "ldr r3, [0x00009e90]",
            "ldr r1, [0x00009ea0]",
            "ldr r2, [r4]",
            "ldr r3, [r6, r3]",
            "add r1, r6, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "bl sym.imp.exit",
            "ldr r0, [0x00009ea4]",
            "ldr r1, [0x00009ea8]",
            "add r0, r6, r0",
            "add r1, r6, r1",
            "bl sym.imp.printf",
            "mov r0, r5",
            "bl sym.imp.exit"
        ]
    },
    "sym.matches": {
        "function_address": "0x0000cc10",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r6, r0",
            "bl sym.imp.strlen",
            "mov r4, r0",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "cmp r4, r0",
            "bhi 0xcc48",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r4",
            "pop {r4, r5, r6, lr}",
            "b sym.imp.memcmp",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00009b08": {
        "function_address": "0x00009b08",
        "instructions": [
            "ldr r0, aav.0x0000d89c",
            "mov r1, 1",
            "push {r3, lr}",
            "mov r2, 0x80",
            "ldr r3, [0x00009b40]",
            "add r0, pc, r0",
            "ldr ip, [0x00009b44]",
            "ldr r3, [r0, r3]",
            "add r0, r0, ip",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x000098ec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb90]!"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x00009718",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcc8]!"
        ]
    },
    "sym.imp.dlopen": {
        "function_address": "0x00009814",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc20]!"
        ]
    },
    "sym.imp.dlsym": {
        "function_address": "0x00009874",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbe0]!"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00009754",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xca0]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00009820",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc18]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x000097c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc58]!"
        ]
    },
    "sym.imp.exit": {
        "function_address": "0x00009928",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb68]!"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x000096dc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcf0]!"
        ]
    },
    "sym.get_addr32": {
        "function_address": "0x0000ca6c",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x2c",
            "ldr r4, aav.0x0000a928",
            "mov r0, sp",
            "mov r1, r5",
            "mov r2, 2",
            "bl sym.get_addr_1",
            "cmp r0, 0",
            "add r4, pc, r4",
            "bne 0xcaa4",
            "ldr r0, [sp, 8]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, pc}",
            "ldr r3, [0x0000cacc]",
            "mov r2, r5",
            "ldr r1, [0x0000cad0]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit"
        ]
    },
    "sym.get_addr_1": {
        "function_address": "0x0000c5cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov ip, 0",
            "mov r3, r0",
            "ldr r4, aav.0x0000adc0",
            "mov r6, r0",
            "mov r5, r1",
            "str ip, [r3], 4",
            "add r3, r3, 4",
            "str ip, [r0, 4]",
            "mov r0, r1",
            "ldr r1, [0x0000c7c0]",
            "add r4, pc, r4",
            "str ip, [r3], 4",
            "sub sp, sp, 0x20",
            "str ip, [r3], 4",
            "mov r7, r2",
            "str ip, [r3], 4",
            "add r1, r4, r1",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xc6e8",
            "ldr r1, [0x0000c7c4]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xc6e8",
            "ldr r1, [0x0000c7c8]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xc6e8",
            "mov r0, r5",
            "mov r1, 0x3a",
            "bl sym.imp.strchr",
            "subs r4, r0, 0",
            "bne 0xc6a0",
            "cmp r7, 0xc",
            "beq 0xc714",
            "cmp r7, 2",
            "cmpne r7, 0",
            "mov r3, 2",
            "strb r3, [r6]",
            "beq 0xc750",
            "mvn r0, 0",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, pc}",
            "cmp r7, 0xa",
            "cmpne r7, 0",
            "mov r0, 0xa",
            "moveq r4, 0",
            "movne r4, 1",
            "strb r0, [r6]",
            "bne 0xc694",
            "mov r1, r5",
            "add r2, r6, 8",
            "bl sym.imp.inet_pton",
            "cmp r0, 0",
            "ble 0xc694",
            "mvn r3, 0",
            "mov r0, r4",
            "strh r3, [r6, 2]",
            "mov r3, 0x10",
            "strb r3, [r6, 1]",
            "b 0xc698",
            "cmp r7, 0xc",
            "beq 0xc694",
            "cmp r7, 0xa",
            "strb r7, [r6]",
            "movne r3, 4",
            "moveq r3, 0x10",
            "strb r3, [r6, 1]",
            "mvn r3, 0",
            "strh r3, [r6, 2]",
            "mov r0, 0",
            "b 0xc698",
            "strb r7, [r6]",
            "mov r0, r7",
            "mov r1, r5",
            "add r2, sp, 4",
            "bl sym.dnet_pton",
            "cmp r0, 0",
            "ble 0xc694",
            "ldrh r3, [sp, 6]",
            "mov r0, r4",
            "strh r3, [r6, 8]",
            "mov r3, 2",
            "strb r3, [r6, 1]",
            "mvn r3, 0",
            "strh r3, [r6, 2]",
            "b 0xc698",
            "add r4, r6, 8",
            "add r8, r6, 0xc",
            "add r7, sp, 0x1c",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, 0",
            "bl sym.imp.strtoul",
            "cmp r0, 0xff",
            "bhi 0xc694",
            "ldr r3, [sp, 0x1c]",
            "cmp r5, r3",
            "add r5, r3, 1",
            "beq 0xc694",
            "strb r0, [r4], 1",
            "ldrb r0, [r3]",
            "cmp r0, 0",
            "beq 0xc7a8",
            "cmp r4, r8",
            "beq 0xc694",
            "cmp r0, 0x2e",
            "beq 0xc75c",
            "b 0xc694",
            "mvn r3, 0",
            "strh r3, [r6, 2]",
            "mov r3, 4",
            "strb r3, [r6, 1]",
            "b 0xc698"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00009964",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb40]!"
        ]
    },
    "sym.imp.inet_pton": {
        "function_address": "0x0000970c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcd0]!"
        ]
    },
    "sym.dnet_pton": {
        "function_address": "0x0000db4c",
        "instructions": [
            "cmp r0, 0xc",
            "push {r3, r4, r5, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "beq 0xdb78",
            "bl sym.imp.__errno_location",
            "mvn r3, 0",
            "mov r2, 0x61",
            "str r2, [r0]",
            "mov r0, r3",
            "pop {r3, r4, r5, pc}",
            "bl sym.imp.__errno_location",
            "mov r3, 0",
            "str r3, [r0]",
            "ldrsb r2, [r4]",
            "cmp r2, r3",
            "beq 0xdc5c",
            "sub r2, r2, 0x30",
            "cmp r2, 9",
            "movls r1, r3",
            "bls 0xdbac",
            "b 0xdb70",
            "cmp r2, 9",
            "bhi 0xdbcc",
            "add r1, r1, 1",
            "add r3, r3, r3, lsl 2",
            "ldrsb r0, [r4, r1]",
            "add r3, r2, r3, lsl 1",
            "cmp r0, 0",
            "sub r2, r0, 0x30",
            "uxth r3, r3",
            "bne 0xdba4",
            "cmp r3, 0x3f",
            "bhi 0xdbdc",
            "cmp r0, 0x2e",
            "beq 0xdbe8",
            "mov r3, 0",
            "mov r0, r3",
            "pop {r3, r4, r5, pc}",
            "add r1, r1, 1",
            "ldrsb r2, [r4, r1]",
            "add r4, r4, r1",
            "cmp r2, 0",
            "beq 0xdc5c",
            "sub r1, r2, 0x30",
            "cmp r1, 9",
            "movls r2, 0",
            "movls r0, r2",
            "bls 0xdc1c",
            "b 0xdbdc",
            "cmp r1, 9",
            "bhi 0xdc3c",
            "add r0, r0, 1",
            "add r2, r2, r2, lsl 2",
            "ldrsb ip, [r4, r0]",
            "add r2, r1, r2, lsl 1",
            "cmp ip, 0",
            "sub r1, ip, 0x30",
            "uxth r2, r2",
            "bne 0xdc14",
            "cmp r2, 0x400",
            "bhs 0xdbdc",
            "orr r2, r2, r3, lsl 10",
            "mov r3, 2",
            "strh r3, [r5]",
            "mov r3, 1",
            "strh r2, [r5, 2]",
            "b 0xdb70",
            "mov r3, r2",
            "b 0xdb70"
        ]
    },
    "sym.imp.strtoul": {
        "function_address": "0x00009760",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc98]!"
        ]
    },
    "sym.duparg2": {
        "function_address": "0x0000cbd0",
        "instructions": [
            "ldr ip, aav.0x0000a7d4",
            "mov r2, r0",
            "push {r3, lr}",
            "mov r3, r1",
            "ldr r1, [0x0000cc08]",
            "add ip, pc, ip",
            "ldr r0, [ip, r1]",
            "ldr r1, [0x0000cc0c]",
            "ldr r0, [r0]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "sym.parse_rtattr": {
        "function_address": "0x0000bff0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r7, r3",
            "add r3, r1, 1",
            "mov r4, r1",
            "mov r6, r2",
            "mov r1, 0",
            "ldr r5, aav.0x0000b39c",
            "lsl r2, r3, 2",
            "mov r8, r0",
            "bl sym.imp.memset",
            "cmp r7, 3",
            "add r5, pc, r5",
            "ble 0xc078",
            "ldrh r3, [r6]",
            "cmp r3, 3",
            "bls 0xc08c",
            "cmp r7, r3",
            "bge 0xc054",
            "b 0xc08c",
            "ldrh r2, [r6]",
            "cmp r2, 3",
            "mov r3, r2",
            "bls 0xc08c",
            "cmp r2, r7",
            "bgt 0xc08c",
            "ldrh r2, [r6, 2]",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "rsb r7, r3, r7",
            "cmp r4, r2",
            "strge r6, [r8, r2, lsl 2]",
            "cmp r7, 3",
            "add r6, r6, r3",
            "bgt 0xc03c",
            "cmp r7, 0",
            "bne aav.0x0000c088",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldrh r3, [r6]",
            "ldr r1, [0x0000c0b4]",
            "mov r2, r7",
            "ldr r0, [r5, r1]",
            "ldr r1, [0x0000c0b8]",
            "ldr r0, [r0]",
            "add r1, r5, r1",
            "bl sym.imp.fprintf",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000098bc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbb0]!"
        ]
    },
    "sym.rtnl_from_file": {
        "function_address": "0x0000ba28",
        "instructions": [
            "ldr ip, aav.0x0000b948",
            "mov r3, 0",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2000",
            "sub sp, sp, 0x1c",
            "mov fp, r1",
            "add r8, sp, 0x18",
            "add sl, sp, 0x2000",
            "str ip, [sp, 4]",
            "add sl, sl, 0xc",
            "ldr r1, [sp, 4]",
            "sub r5, r8, 0xc",
            "add r8, r8, 4",
            "add ip, sp, 0x2000",
            "mov r7, r0",
            "mov sb, r2",
            "mov r0, 0x10",
            "add r2, sl, 8",
            "add r1, pc, r1",
            "str r3, [ip, 0xc]",
            "str r1, [sp, 4]",
            "strh r0, [ip, 0xc]",
            "str r3, [ip, 0x10]",
            "str r3, [r2]",
            "mov r1, 1",
            "mov r2, 0x10",
            "mov r3, r7",
            "mov r0, r5",
            "bl sym.imp.fread",
            "subs r2, r0, 0",
            "mov r1, 1",
            "mov r3, r7",
            "mov r0, r8",
            "blt 0xbb10",
            "beq 0xbb38",
            "ldr r4, [r5]",
            "sub r6, r4, 0x10",
            "cmp r4, 0x2000",
            "movls ip, 0",
            "movhi ip, 1",
            "orrs ip, ip, r6, lsr 31",
            "sub r2, r4, 0xd",
            "bic r2, r2, 3",
            "bne 0xbb40",
            "bl sym.imp.fread",
            "subs r3, r0, 0",
            "mov r1, r5",
            "mov r2, sb",
            "mov r0, sl",
            "blt 0xbb7c",
            "cmp r6, r3",
            "bgt 0xbb94",
            "blx fp",
            "cmp r0, 0",
            "bge 0xba88",
            "add sp, sp, 0x1c",
            "add sp, sp, 0x2000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "beq 0xba88",
            "ldr r2, [sp, 4]",
            "ldr r0, [0x0000bbc4]",
            "add r0, r2, r0",
            "bl sym.imp.perror",
            "mvn r0, 0",
            "b 0xbb04",
            "mov r0, r2",
            "b 0xbb04",
            "ldr ip, [sp, 4]",
            "mov r0, r7",
            "ldr r3, [0x0000bbc8]",
            "ldr r3, [ip, r3]",
            "ldr r5, [r3]",
            "bl sym.imp.ftell",
            "ldr ip, [sp, 4]",
            "mov r3, r0",
            "ldr r1, [0x0000bbcc]",
            "mov r0, r5",
            "mov r2, r4",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xbb04",
            "ldr r1, [sp, 4]",
            "ldr r0, [0x0000bbc4]",
            "add r0, r1, r0",
            "bl sym.imp.perror",
            "mvn r0, 0",
            "b 0xbb04",
            "ldr ip, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000bbc8]",
            "mov r2, 0x22",
            "ldr r0, [0x0000bbd0]",
            "ldr r3, [ip, r3]",
            "add r0, ip, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xbb04"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x0000985c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbf0]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x0000991c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb70]!"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00009748",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xca8]!"
        ]
    },
    "sym.imp.ftell": {
        "function_address": "0x000098c8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xba8]!"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00009910",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb78]!"
        ]
    },
    "sym.get_u32": {
        "function_address": "0x0000c390",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc3b0",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc3a4",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtoul",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc3a4",
            "cmp r4, r3",
            "beq 0xc3a4",
            "ldrsb r3, [r3]",
            "cmp r3, 0",
            "streq r0, [r5]",
            "moveq r0, r3",
            "beq 0xc3a8",
            "b 0xc3a4"
        ]
    },
    "sym.print_timestamp": {
        "function_address": "0x0000d6ac",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, 0",
            "sub sp, sp, 0xc",
            "mov r1, r4",
            "mov r6, r0",
            "mov r0, sp",
            "str r4, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.gettimeofday",
            "mov r0, sp",
            "ldr r5, aav.0x00009cd4",
            "bl sym.imp.localtime",
            "bl sym.imp.asctime",
            "mov r7, r0",
            "add r5, pc, r5",
            "bl sym.imp.strlen",
            "ldr r1, [0x0000d71c]",
            "add r0, r7, r0",
            "strb r4, [r0, -1]",
            "mov r2, r7",
            "mov r0, r6",
            "ldr r3, [sp, 4]",
            "add r1, r5, r1",
            "bl sym.imp.fprintf",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.gettimeofday": {
        "function_address": "0x00009898",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbc8]!"
        ]
    },
    "sym.imp.localtime": {
        "function_address": "0x000098b0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbb8]!"
        ]
    },
    "sym.imp.asctime": {
        "function_address": "0x000096c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xd00]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00009958",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb48]!"
        ]
    },
    "sym.rtnl_dump_filter": {
        "function_address": "0x0000afb8",
        "instructions": [
            "ldr ip, aav.0x0000c3bc",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4000",
            "sub sp, sp, 0x4c",
            "mov r4, r3",
            "add fp, sp, 0x4000",
            "mov r5, r0",
            "str ip, [sp, 4]",
            "add ip, sp, 0x4000",
            "ldr r7, [ip, 0x70]",
            "add fp, fp, 0x18",
            "ldr ip, [sp, 4]",
            "add r6, sp, 0x4000",
            "ldr r3, [0x0000b2b8]",
            "add sb, sp, 0x48",
            "ldr r0, [0x0000b2bc]",
            "add r6, r6, 0x34",
            "add ip, pc, ip",
            "str r2, [sp, 0xc]",
            "add r3, ip, r3",
            "mov r2, 0",
            "str r3, [sp, 0x10]",
            "add r3, fp, 0xc",
            "str r2, [r3], 4",
            "sub sb, sb, 0x30",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "add r3, sp, 0x4000",
            "add r3, r3, 0x40",
            "str r0, [sp, 0x14]",
            "add r0, sp, 0x4000",
            "str r1, [sp, 8]",
            "str r3, [r0, 0x20]",
            "mov r1, 0xc",
            "mov r3, 1",
            "str ip, [sp, 4]",
            "str r6, [r0, 0x18]",
            "str r1, [r0, 0x1c]",
            "str r3, [r0, 0x24]",
            "str sb, [r0, 0x40]",
            "mov ip, 0x4000",
            "ldr r0, [r5]",
            "add r3, sp, ip",
            "mov r1, fp",
            "mov r2, 0",
            "str ip, [r3, 0x44]",
            "bl sym.imp.recvmsg",
            "cmp r0, 0",
            "blt 0xb1a8",
            "beq 0xb220",
            "cmp r0, 0xf",
            "ble 0xb168",
            "ldr r3, [sb]",
            "mov sl, sb",
            "cmp r3, 0xf",
            "bls 0xb168",
            "cmp r0, r3",
            "mov r8, r0",
            "bhs 0xb0fc",
            "b 0xb168",
            "cmp r4, 0",
            "beq 0xb0cc",
            "mov r0, r6",
            "mov r1, sl",
            "mov r2, r7",
            "blx r4",
            "cmp r0, 0",
            "blt 0xb15c",
            "ldr r3, [sl]",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "rsb r8, r3, r8",
            "cmp r8, 0xf",
            "mov r0, r8",
            "ble 0xb168",
            "ldr r3, [sl, r3]!",
            "cmp r3, 0xf",
            "bls 0xb168",
            "cmp r3, r8",
            "bhi 0xb168",
            "add r0, sp, 0x4000",
            "ldr r2, [r0, 0x38]",
            "cmp r2, 0",
            "bne 0xb0ac",
            "ldr r0, [sl, 0xc]",
            "ldr r1, [r5, 8]",
            "cmp r0, r1",
            "bne 0xb0ac",
            "ldr r0, [sl, 8]",
            "ldr r1, [r5, 0x20]",
            "cmp r0, r1",
            "bne 0xb0ac",
            "ldrh r1, [sl, 4]",
            "cmp r1, 3",
            "beq 0xb284",
            "cmp r1, 2",
            "beq 0xb250",
            "mov r0, r6",
            "mov r1, sl",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [sp, 8]",
            "blx r3",
            "cmp r0, 0",
            "bge 0xb0cc",
            "add sp, sp, 0x4c",
            "add sp, sp, 0x4000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "add ip, sp, 0x4000",
            "ldr r3, [ip, 0x30]",
            "tst r3, 0x20",
            "bne 0xb1fc",
            "cmp r0, 0",
            "beq 0xb05c",
            "ldr ip, [sp, 4]",
            "mov r2, r0",
            "ldr r3, [0x0000b2bc]",
            "ldr r1, [0x0000b2c0]",
            "ldr r3, [ip, r3]",
            "add r1, ip, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "cmpne r3, 0xb",
            "beq 0xb05c",
            "ldr r1, [sp, 4]",
            "mov r8, r0",
            "mov r0, r3",
            "ldr r3, [0x0000b2bc]",
            "ldr r3, [r1, r3]",
            "ldr r4, [r3]",
            "bl sym.imp.strerror",
            "ldr ip, [sp, 4]",
            "mov r2, r0",
            "ldr r1, [0x0000b2c4]",
            "mov r0, r4",
            "ldr r3, [r8]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xb15c",
            "ldr r1, [sp, 4]",
            "mov r2, 0x12",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [r1, r0]",
            "mov r1, 1",
            "ldr r0, [sp, 0x10]",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xb05c",
            "ldr r0, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000b2bc]",
            "mov r2, 0xf",
            "ldr ip, [sp, 4]",
            "ldr r3, [r0, r3]",
            "ldr r0, [0x0000b2c8]",
            "ldr r3, [r3]",
            "add r0, ip, r0",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb15c",
            "cmp r3, 0x23",
            "bhi 0xb28c",
            "ldr ip, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000b2bc]",
            "mov r2, 0x10",
            "ldr r0, [0x0000b2cc]",
            "ldr r3, [ip, r3]",
            "add r0, ip, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb15c",
            "mov r0, r2",
            "b 0xb15c",
            "bl sym.imp.__errno_location",
            "ldr r3, [sl, 0x10]",
            "ldr r1, [sp, 4]",
            "rsb r3, r3, 0",
            "str r3, [r0]",
            "ldr r0, [0x0000b2d0]",
            "add r0, r1, r0",
            "bl sym.imp.perror",
            "mvn r0, 0",
            "b 0xb15c"
        ]
    },
    "sym.imp.recvmsg": {
        "function_address": "0x00009970",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb38]!"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x00009700",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcd8]!"
        ]
    },
    "sym.get_s16": {
        "function_address": "0x0000c4d8",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc4f8",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc4ec",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc4ec",
            "cmp r4, r3",
            "beq 0xc4ec",
            "ldrsb r3, [r3]",
            "subs r3, r3, 0",
            "movne r3, 1",
            "cmp r0, 0x8000",
            "orrge r3, r3, 1",
            "cmp r3, 0",
            "bne 0xc4ec",
            "cmn r0, 0x8000",
            "strhge r0, [r5]",
            "movge r0, r3",
            "bge 0xc4f0",
            "b 0xc4ec"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x000097a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc68]!"
        ]
    },
    "sym.parse_rtattr_byindex": {
        "function_address": "0x0000c0bc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r1",
            "mov r8, r3",
            "ldr r6, aav.0x0000b2dc",
            "mov r7, r2",
            "mov r1, 0",
            "lsl r2, r5, 2",
            "mov sl, r0",
            "add r6, pc, r6",
            "bl sym.imp.memset",
            "cmp r8, 3",
            "ble 0xc18c",
            "ldrh r3, [r7]",
            "cmp r3, 3",
            "bls 0xc184",
            "cmp r8, r3",
            "blt 0xc184",
            "mov r4, 0",
            "b 0xc120",
            "ldrh r2, [r7]",
            "cmp r2, 3",
            "mov r3, r2",
            "bls 0xc160",
            "cmp r2, r8",
            "bgt 0xc160",
            "ldrh r2, [r7, 2]",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "rsb r8, r3, r8",
            "cmp r2, r5",
            "cmple r4, r5",
            "strlt r7, [sl, r4, lsl 2]",
            "addlt r4, r4, 1",
            "cmp r8, 3",
            "add r7, r7, r3",
            "bgt 0xc108",
            "cmp r8, 0",
            "bne 0xc15c",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "ldrh r3, [r7]",
            "ldr r1, [0x0000c198]",
            "mov r2, r8",
            "ldr r0, [r6, r1]",
            "ldr r1, [0x0000c19c]",
            "ldr r0, [r0]",
            "add r1, r6, r1",
            "bl sym.imp.fprintf",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r4, 0",
            "b 0xc160",
            "mov r4, 0",
            "b 0xc14c"
        ]
    },
    "sym.dnet_ntop": {
        "function_address": "0x0000d98c",
        "instructions": [
            "cmp r0, 0xc",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "mov r6, r3",
            "beq 0xd9bc",
            "mov r5, 0",
            "bl sym.imp.__errno_location",
            "mov r3, 0x61",
            "str r3, [r0]",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}",
            "bl sym.imp.__errno_location",
            "ldrh r1, [r4]",
            "mov r2, 0",
            "ldrh r3, [r4, 2]",
            "str r2, [r0]",
            "cmp r1, 2",
            "movne r5, r2",
            "uxtb r0, r3",
            "lsr r3, r3, 8",
            "bne 0xd9b4",
            "cmp r6, r2",
            "beq 0xd9b4",
            "orr r3, r0, r3, lsl 8",
            "movw r2, 0xcccd",
            "movt r2, 0xcccc",
            "lsr ip, r3, 0xa",
            "umull r0, r2, r2, ip",
            "lsrs r2, r2, 3",
            "moveq r0, r5",
            "moveq r1, 1",
            "beq 0xda30",
            "cmp r6, 1",
            "add r0, r2, 0x30",
            "strb r0, [r5]",
            "beq 0xd9b4",
            "add r2, r2, r2, lsl 2",
            "add r0, r5, 1",
            "sub ip, ip, r2, lsl 1",
            "uxth ip, ip",
            "cmp r6, r1",
            "add ip, ip, 0x30",
            "strb ip, [r0]",
            "beq 0xd9b4",
            "add r2, r1, 1",
            "mov r0, 0x2e",
            "cmp r6, r2",
            "strb r0, [r5, r1]",
            "beq 0xd9b4",
            "lsl r3, r3, 0x16",
            "add r1, r5, r2",
            "mov ip, r1",
            "lsr r3, r3, 0x16",
            "cmp r3, 0x3e8",
            "blo 0xdaf8",
            "mov r1, 0x31",
            "strb r1, [r5, r2]",
            "add r2, r2, 1",
            "cmp r6, r2",
            "beq 0xd9b4",
            "sub r3, r3, 0x3e8",
            "add r1, r5, r2",
            "uxth r3, r3",
            "mov r0, 0",
            "add r2, r2, 1",
            "add ip, r0, 0x30",
            "cmp r6, r2",
            "strb ip, [r1]",
            "beq 0xd9b4",
            "add r0, r0, r0, lsl 2",
            "movw r1, 0xcccd",
            "movt r1, 0xcccc",
            "add r4, r0, r0, lsl 2",
            "add ip, r5, r2",
            "mov r0, 1",
            "sub r3, r3, r4, lsl 2",
            "uxth r3, r3",
            "umull r4, r1, r1, r3",
            "ubfx r1, r1, 3, 0x10",
            "cmp r1, 0",
            "bne 0xdb24",
            "cmp r0, 0",
            "bne 0xdb24",
            "add r2, r2, 1",
            "add r3, r3, 0x30",
            "cmp r6, r2",
            "strb r3, [ip]",
            "movne r3, 0",
            "strbne r3, [r5, r2]",
            "b 0xd9b4",
            "movw r0, 0x851f",
            "movt r0, 0x51eb",
            "umull r4, r0, r0, r3",
            "ubfx r0, r0, 5, 0x10",
            "cmp r0, 0",
            "bne 0xda90",
            "movw r1, 0xcccd",
            "movt r1, 0xcccc",
            "umull r4, r1, r1, r3",
            "ubfx r1, r1, 3, 0x10",
            "b 0xdacc",
            "add r2, r2, 1",
            "add r0, r1, 0x30",
            "cmp r6, r2",
            "strb r0, [ip]",
            "beq 0xd9b4",
            "add r1, r1, r1, lsl 2",
            "add ip, r5, r2",
            "sub r3, r3, r1, lsl 1",
            "uxth r3, r3",
            "b 0xdadc"
        ]
    },
    "sym.get_u8": {
        "function_address": "0x0000c468",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc488",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc47c",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtoul",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc47c",
            "cmp r4, r3",
            "beq 0xc47c",
            "ldrsb r3, [r3]",
            "cmp r0, 0xff",
            "cmpls r3, 0",
            "moveq r3, 0",
            "movne r3, 1",
            "strbeq r0, [r5]",
            "moveq r0, r3",
            "beq 0xc480",
            "b 0xc47c"
        ]
    },
    "sym.makeargs": {
        "function_address": "0x0000d8cc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r1",
            "ldr r4, aav.0x00009ad8",
            "mov r8, r2",
            "ldr sl, [0x0000d980]",
            "add r4, pc, r4",
            "add sl, r4, sl",
            "mov r1, sl",
            "bl sym.imp.strtok",
            "cmp r0, 0",
            "beq 0xd948",
            "sub r8, r8, 1",
            "cmp r8, 0",
            "movgt r7, r5",
            "movgt r6, 0",
            "bgt 0xd918",
            "b 0xd954",
            "cmp r6, r8",
            "bge 0xd954",
            "str r0, [r7], 4",
            "mov r1, sl",
            "mov r0, 0",
            "add r6, r6, 1",
            "bl sym.imp.strtok",
            "cmp r0, 0",
            "bne 0xd910",
            "lsl r3, r6, 2",
            "mov r2, 0",
            "mov r0, r6",
            "str r2, [r5, r3]",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r3, r0",
            "mov r6, r0",
            "b 0xd938",
            "ldr r3, [0x0000d984]",
            "mov r1, 1",
            "ldr r0, [0x0000d988]",
            "mov r2, 0x1e",
            "ldr r3, [r4, r3]",
            "add r0, r4, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mov r0, 1",
            "bl sym.imp.exit"
        ]
    },
    "sym.imp.strtok": {
        "function_address": "0x00009844",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc00]!"
        ]
    },
    "sym.__get_hz": {
        "function_address": "0x0000ccc0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x400",
            "ldr r4, aav.0x0000a6e4",
            "sub sp, sp, 0xc",
            "ldr r5, [0x0000ce2c]",
            "add r4, pc, r4",
            "add r5, r4, r5",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0xcd14",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "bl sym.imp.atoi",
            "cmp r0, 0",
            "movne r4, r0",
            "moveq r4, 0x64",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "add sp, sp, 0x400",
            "pop {r4, r5, pc}",
            "ldr r5, [0x0000ce30]",
            "add r5, r4, r5",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0xcdc4",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "ldr r2, [0x0000ce34]",
            "mov r3, r0",
            "movw r1, 0x3ff",
            "mov r0, sp",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "ldr r1, [0x0000ce38]",
            "mov r0, sp",
            "add r1, r4, r1",
            "bl sym.imp.fopen",
            "subs r5, r0, 0",
            "moveq r4, 0x64",
            "beq aav.0x0000cd04",
            "ldr r1, [0x0000ce3c]",
            "add r2, sp, 0x400",
            "add r2, r2, 4",
            "add r3, sp, 0x400",
            "add r1, r4, r1",
            "bl sym.imp.fscanf",
            "cmp r0, 2",
            "beq 0xcd98",
            "mov r0, r5",
            "mov r4, 0x64",
            "bl sym.imp.fclose",
            "b aav.0x0000cd04",
            "ldr r2, [sp, 0x404]",
            "movw r3, 0x4240",
            "movt r3, 0xf",
            "cmp r2, r3",
            "bne 0xcd88",
            "ldr r4, [sp, 0x400]",
            "mov r0, r5",
            "bl sym.imp.fclose",
            "cmp r4, 0",
            "moveq r4, 0x64",
            "b aav.0x0000cd04",
            "ldr r5, [0x0000ce40]",
            "add r5, r4, r5",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0xce00",
            "mov r0, r5",
            "bl sym.imp.getenv",
            "ldr r2, [0x0000ce44]",
            "mov r3, r0",
            "movw r1, 0x3ff",
            "mov r0, sp",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "b 0xcd4c",
            "ldr ip, [0x0000ce48]",
            "add r5, sp, 8",
            "sub r5, r5, 8",
            "mov lr, r5",
            "add ip, r4, ip",
            "ldm ip!, {r0, r1, r2, r3}",
            "stm lr!, {r0, r1, r2, r3}",
            "ldr r2, [ip]",
            "strb r2, [lr]",
            "b 0xcd4c"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x00009724",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcc0]!"
        ]
    },
    "sym.imp.atoi": {
        "function_address": "0x00009940",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb58]!"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x000098a4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbc0]!"
        ]
    },
    "sym.imp.fscanf": {
        "function_address": "0x00009730",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcb8]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x000098d4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xba0]!"
        ]
    },
    "sym.get_integer": {
        "function_address": "0x0000c204",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc224",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc218",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc218",
            "cmp r4, r3",
            "beq 0xc218",
            "ldrsb r3, [r3]",
            "cmp r3, 0",
            "streq r0, [r5]",
            "moveq r0, r3",
            "beq 0xc21c",
            "b 0xc218"
        ]
    },
    "sym.addattr32": {
        "function_address": "0x0000bbd4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr ip, [r4]",
            "sub sp, sp, 8",
            "ldr r0, aav.0x0000b7c0",
            "add ip, ip, 3",
            "str r3, [sp, 4]",
            "bic ip, ip, 3",
            "add r3, ip, 8",
            "add r0, pc, r0",
            "cmp r3, r1",
            "bhi 0xbc44",
            "add r0, r4, ip",
            "mov r3, 8",
            "strh r2, [r0, 2]",
            "add r1, sp, 4",
            "strh r3, [r4, ip]",
            "add r0, r0, 4",
            "mov r2, 4",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "mov r0, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r3, r3, 8",
            "str r3, [r4]",
            "add sp, sp, 8",
            "pop {r4, pc}",
            "ldr r3, [0x0000bc6c]",
            "mov r2, r1",
            "ldr r1, [0x0000bc70]",
            "ldr r3, [r0, r3]",
            "add r1, r0, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xbc3c"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x0000973c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xcb0]!"
        ]
    },
    "sym.get_addr": {
        "function_address": "0x0000c994",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "cmp r2, 0x11",
            "ldr r4, aav.0x0000aa14",
            "mov r5, r1",
            "add r4, pc, r4",
            "beq 0xc9dc",
            "bl sym.get_addr_1",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [0x0000c9f4]",
            "mov r2, r5",
            "ldr r1, [0x0000c9f8]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r3, [0x0000c9f4]",
            "mov r2, r1",
            "ldr r1, [0x0000c9fc]",
            "ldr r3, [r4, r3]",
            "b 0xc9c8"
        ]
    },
    "sym.addattr_nest_compat_end": {
        "function_address": "0x0000be64",
        "instructions": [
            "ldr r2, [r0]",
            "mov r3, r1",
            "ldrh r1, [r1]",
            "push {r4, lr}",
            "mov r4, r0",
            "add r2, r2, 3",
            "bic r2, r2, 3",
            "add r1, r1, 3",
            "add r2, r0, r2",
            "bic r1, r1, 3",
            "rsb r2, r3, r2",
            "add r1, r3, r1",
            "strh r2, [r3]",
            "bl sym.addattr_nest_end",
            "ldr r0, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.addattr_nest_end": {
        "function_address": "0x0000bdf8",
        "instructions": [
            "mov r3, r0",
            "ldr r0, [r0]",
            "add r2, r0, 3",
            "bic r2, r2, 3",
            "add r3, r3, r2",
            "rsb r3, r1, r3",
            "strh r3, [r1]",
            "bx lr"
        ]
    },
    "sym.rtnl_dump_request": {
        "function_address": "0x0000af04",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, 0x10",
            "sub sp, sp, 0x4c",
            "ldr r4, [r0, 0x1c]",
            "add sl, r3, r5",
            "mov ip, 0",
            "str r3, [sp, 0x28]",
            "mov r3, 0xc",
            "add lr, sp, 8",
            "add r6, sp, 0x3c",
            "str r3, [sp, 4]",
            "add r3, sp, 0x1c",
            "str ip, [lr], 4",
            "add r4, r4, 1",
            "add r7, r6, 8",
            "str r3, [sp, 8]",
            "mov r3, 2",
            "str ip, [lr], 4",
            "str r2, [sp, 0x24]",
            "add r8, sp, 0x2c",
            "str ip, [lr], 4",
            "mov r2, ip",
            "strh r1, [sp, 0x30]",
            "mov r1, sp",
            "str r4, [r0, 0x1c]",
            "str r4, [r0, 0x20]",
            "str ip, [lr], 4",
            "str r3, [sp, 0xc]",
            "movw r3, 0x301",
            "str ip, [lr]",
            "str ip, [r7]",
            "ldr r0, [r0]",
            "str ip, [sp, 0x3c]",
            "str r8, [sp, 0x1c]",
            "str r5, [sp, 0x20]",
            "str r6, [sp]",
            "str ip, [sp, 0x40]",
            "strh r5, [sp, 0x3c]",
            "str sl, [sp, 0x2c]",
            "strh r3, [sp, 0x32]",
            "str ip, [sp, 0x38]",
            "str r4, [sp, 0x34]",
            "bl sym.imp.sendmsg",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.sendmsg": {
        "function_address": "0x00009808",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc28]!"
        ]
    },
    "sym.rt_addr_n2a": {
        "function_address": "0x0000d194",
        "instructions": [
            "ldr ip, aav.0x0000a210",
            "push {r4, r5, r6, lr}",
            "sub r6, r0, 2",
            "sub sp, sp, 0x18",
            "mov r5, r3",
            "add ip, pc, ip",
            "ldr r4, [sp, 0x28]",
            "cmp r6, 0xa",
            "addls pc, pc, r6, lsl 2",
            "b 0xd26c",
            "b 0xd258",
            "b 0xd26c",
            "b 0xd240",
            "b 0xd26c",
            "b 0xd26c",
            "b 0xd26c",
            "b 0xd26c",
            "b 0xd26c",
            "b 0xd258",
            "b 0xd26c",
            "b 0xd1e8",
            "mov ip, 0",
            "add r6, sp, 0x18",
            "mov r3, 2",
            "mov r1, r2",
            "str ip, [sp]",
            "mov r2, 2",
            "strh r3, [r6, -0x18]!",
            "add r3, sp, 4",
            "str ip, [r3], 4",
            "add r0, r6, r2",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "str ip, [r3], 4",
            "strh ip, [r3]",
            "bl sym.imp.memcpy",
            "mov r0, 0xc",
            "mov r1, sp",
            "mov r2, r5",
            "mov r3, r4",
            "bl sym.dnet_ntop",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, pc}",
            "mov r1, r2",
            "mov r0, 4",
            "mov r2, r3",
            "mov r3, r4",
            "bl sym.ipx_ntop",
            "b 0xd238",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, r4",
            "bl sym.imp.inet_ntop",
            "b 0xd238",
            "ldr r0, [0x0000d27c]",
            "add r0, ip, r0",
            "b 0xd238"
        ]
    },
    "sym.ipx_ntop": {
        "function_address": "0x0000dc64",
        "instructions": [
            "cmp r0, 4",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "mov r6, r3",
            "beq 0xdc94",
            "mov r5, 0",
            "bl sym.imp.__errno_location",
            "mov r3, 0x61",
            "str r3, [r0]",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}",
            "bl sym.imp.__errno_location",
            "cmp r6, 0",
            "mov r3, 0",
            "str r3, [r0]",
            "beq 0xdc8c",
            "mov r1, 0x1c",
            "ldr r2, [r4]",
            "cmp r6, r3",
            "rev r2, r2",
            "beq 0xdc8c",
            "lsr r2, r2, r1",
            "sub r1, r1, 4",
            "and r2, r2, 0xf",
            "cmp r2, 9",
            "add r0, r2, 0x37",
            "add r2, r2, 0x30",
            "strbhi r0, [r5, r3]",
            "strbls r2, [r5, r3]",
            "add r3, r3, 1",
            "cmp r3, 8",
            "bne 0xdcac",
            "cmp r6, 8",
            "beq 0xdc8c",
            "mov r2, 0xa",
            "mov r3, 9",
            "mov r1, 0x2e",
            "strb r1, [r5, 8]",
            "cmp r6, r3",
            "ldrb r1, [r4, 4]",
            "add r4, r4, 1",
            "beq 0xdc8c",
            "lsr r1, r1, 4",
            "cmp r1, 9",
            "add r0, r1, 0x37",
            "add r1, r1, 0x30",
            "strbhi r0, [r5, r3]",
            "strbls r1, [r5, r3]",
            "cmp r6, r2",
            "ldrb r1, [r4, 3]",
            "beq 0xdc8c",
            "and r1, r1, 0xf",
            "add r3, r3, 2",
            "cmp r1, 9",
            "add r0, r1, 0x37",
            "add r1, r1, 0x30",
            "strbhi r0, [r5, r2]",
            "strbls r1, [r5, r2]",
            "cmp r3, 0x15",
            "add r2, r2, 2",
            "bne aav.0x0000dd00",
            "cmp r6, r3",
            "mov r0, r5",
            "movne r3, 0",
            "strbne r3, [r5, 0x15]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.inet_ntop": {
        "function_address": "0x00009934",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb60]!"
        ]
    },
    "sym.format_host": {
        "function_address": "0x0000d280",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "ldr r5, aav.0x0000a118",
            "mov r4, r1",
            "mov r6, r0",
            "mov r7, r2",
            "str r3, [sp]",
            "ldr r3, [0x0000d508]",
            "add r5, pc, r5",
            "ldr r1, [sp, 0x40]",
            "ldr r3, [r5, r3]",
            "str r1, [sp, 4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xd368",
            "cmp r4, 0",
            "ble 0xd484",
            "cmp r0, 0xa",
            "beq 0xd42c",
            "sub r3, r4, 4",
            "mov sl, r6",
            "mov fp, r7",
            "str r4, [sp, 8]",
            "str r4, [sp, 0x14]",
            "movw sb, 0xff01",
            "ldr r3, [fp, r3]",
            "movt sb, 0xff00",
            "umull r1, sb, sb, r3",
            "lsr sb, sb, 8",
            "ldr r2, [0x0000d50c]",
            "add sb, sb, sb, lsl 8",
            "str r2, [sp, 0x10]",
            "add r2, r5, r2",
            "rsb sb, sb, r3",
            "ldr r2, [r2, sb, lsl 2]",
            "cmp r2, 0",
            "str r2, [sp, 0xc]",
            "beq 0xd38c",
            "mov r8, r2",
            "b 0xd32c",
            "ldr r8, [r8]",
            "cmp r8, 0",
            "beq 0xd38c",
            "ldrb r3, [r8, 8]",
            "cmp r3, sl",
            "bne 0xd320",
            "ldrb r3, [r8, 9]",
            "cmp r4, r3",
            "bne 0xd320",
            "add r0, r8, 0x10",
            "mov r1, fp",
            "ldr r2, [sp, 8]",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0xd320",
            "ldr r0, [r8, 4]",
            "b 0xd418",
            "ldr r4, [sp, 0x14]",
            "ldr ip, [sp, 4]",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r7",
            "ldr r3, [sp]",
            "str ip, [sp, 0x40]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b sym.rt_addr_n2a",
            "mov r0, 0x30",
            "bl sym.imp.malloc",
            "subs r8, r0, 0",
            "beq 0xd364",
            "mov r3, 0",
            "strb sl, [r8, 8]",
            "strb r4, [r8, 9]",
            "mov r1, fp",
            "str r3, [r8, 4]",
            "add r0, r8, 0x10",
            "ldr r2, [sp, 8]",
            "bl sym.imp.memcpy",
            "ldr ip, [sp, 0x10]",
            "ldr r1, [sp, 0xc]",
            "add r3, r5, ip",
            "ldr r0, [r3, 0x404]",
            "str r1, [r8]",
            "str r8, [r3, sb, lsl 2]",
            "add r0, r0, 1",
            "cmp r0, 1",
            "str r0, [r3, 0x404]",
            "beq 0xd4fc",
            "ldr r3, [0x0000d510]",
            "ldr r3, [r5, r3]",
            "ldr r0, [r3]",
            "bl sym.imp.fflush",
            "mov r0, fp",
            "ldr r1, [sp, 8]",
            "mov r2, sl",
            "bl sym.imp.gethostbyaddr",
            "cmp r0, 0",
            "beq 0xd35c",
            "ldr r0, [r0]",
            "bl sym.imp.strdup",
            "str r0, [r8, 4]",
            "cmp r0, 0",
            "beq 0xd364",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r4, 0x10",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "bne 0xd46c",
            "ldr r3, [r7, 4]",
            "cmp r3, 0",
            "bne 0xd46c",
            "ldr r2, [r7, 8]",
            "cmn r2, 0x10000",
            "bne 0xd46c",
            "mov ip, 4",
            "str r4, [sp, 0x14]",
            "str ip, [sp, 8]",
            "add fp, r7, 0xc",
            "mov sl, 2",
            "mov r4, ip",
            "b 0xd2e0",
            "str r4, [sp, 8]",
            "sub r3, r4, 4",
            "str r4, [sp, 0x14]",
            "mov fp, r7",
            "mov sl, 0xa",
            "b 0xd2e0",
            "sub r3, r0, 2",
            "cmp r3, 0xa",
            "addls pc, pc, r3, lsl 2",
            "b 0xd368",
            "b 0xd4f4",
            "b 0xd368",
            "b 0xd4e0",
            "b 0xd368",
            "b 0xd368",
            "b 0xd368",
            "b 0xd368",
            "b 0xd368",
            "b 0xd428",
            "b 0xd368",
            "b 0xd4c0",
            "mov r2, 2",
            "mvn r3, 1",
            "mov r4, r2",
            "str r2, [sp, 8]",
            "str r4, [sp, 0x14]",
            "mov sl, r6",
            "mov fp, r7",
            "b 0xd2e0",
            "mov r1, 0xa",
            "mov r3, 6",
            "str r1, [sp, 8]",
            "mov r4, r1",
            "b 0xd4d0",
            "mov r4, 4",
            "b 0xd2cc",
            "bl sym.imp.sethostent",
            "b 0xd3e4"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00009850",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbf8]!"
        ]
    },
    "sym.imp.fflush": {
        "function_address": "0x00009784",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc80]!"
        ]
    },
    "sym.imp.gethostbyaddr": {
        "function_address": "0x0000976c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc90]!"
        ]
    },
    "sym.imp.strdup": {
        "function_address": "0x00009880",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbd8]!"
        ]
    },
    "sym.imp.sethostent": {
        "function_address": "0x000096e8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xce8]!"
        ]
    },
    "sym.hexstring_a2n": {
        "function_address": "0x0000d5b0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r1",
            "ldrb r1, [r0]",
            "mov r3, 0",
            "cmp r1, 0x3a",
            "beq 0xd67c",
            "cmp r1, 0",
            "beq 0xd67c",
            "add ip, r0, 1",
            "mov r6, 0",
            "b 0xd5fc",
            "mov r0, ip",
            "ldrb r1, [ip], 1",
            "sxtb r5, r5",
            "cmp r1, 0x3a",
            "add r6, r5, r6, lsl 4",
            "beq 0xd650",
            "cmp r1, 0",
            "beq 0xd650",
            "uxtb r1, r1",
            "sub r0, r1, 0x30",
            "sub r5, r1, 0x61",
            "uxtb r0, r0",
            "uxtb r8, r5",
            "cmp r0, 9",
            "sub r7, r1, 0x57",
            "uxtb r5, r0",
            "bls 0xd5dc",
            "cmp r8, 5",
            "uxtb r5, r7",
            "bls 0xd5dc",
            "sub r7, r1, 0x41",
            "sub r1, r1, 0x37",
            "uxtb r7, r7",
            "uxtb r5, r1",
            "cmp r7, 5",
            "bls 0xd5dc",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}",
            "cmp r6, 0xff",
            "bhi 0xd644",
            "cmp r3, r2",
            "strblt r6, [r4, r3]",
            "addlt r3, r3, 1",
            "cmp r1, 0",
            "beq 0xd694",
            "add r0, r0, 1",
            "ldrb r1, [r0]",
            "cmp r1, 0x3a",
            "bne 0xd5c8",
            "cmp r3, r2",
            "mov r6, 0",
            "strblt r6, [r4, r3]",
            "addlt r3, r3, 1",
            "cmp r1, 0",
            "bne 0xd66c",
            "cmp r3, r2",
            "bge 0xd648",
            "add r0, r4, r3",
            "rsb r2, r3, r2",
            "bl sym.imp.memset",
            "b 0xd648"
        ]
    },
    "sym.rta_addattr_l": {
        "function_address": "0x0000bf44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr ip, [sp, 0x10]",
            "ldrh r0, [r0]",
            "add r5, ip, 7",
            "ldr lr, aav.0x0000b450",
            "bic r5, r5, 3",
            "add r0, r0, 3",
            "bic r6, r0, 3",
            "add lr, pc, lr",
            "add r0, r5, r6",
            "add r5, ip, 4",
            "cmp r0, r1",
            "bgt 0xbfc0",
            "uxth r5, r5",
            "add r0, r4, r6",
            "strh r2, [r0, 2]",
            "mov r1, r3",
            "strh r5, [r4, r6]",
            "mov r2, ip",
            "add r0, r0, 4",
            "add r5, r5, 3",
            "bl sym.imp.memcpy",
            "ldrh r3, [r4]",
            "bic r5, r5, 3",
            "mov r0, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r5, r5, r3",
            "strh r5, [r4]",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [0x0000bfe8]",
            "mov r2, r1",
            "ldr r1, [0x0000bfec]",
            "ldr r3, [lr, r3]",
            "add r1, lr, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.get_u16": {
        "function_address": "0x0000c3f4",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc414",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc408",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtoul",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc408",
            "cmp r4, r3",
            "beq 0xc408",
            "ldrsb r3, [r3]",
            "subs r3, r3, 0",
            "movne r3, 1",
            "cmp r0, 0x10000",
            "orrhs r3, r3, 1",
            "cmp r3, 0",
            "strheq r0, [r5]",
            "moveq r0, r3",
            "beq 0xc40c",
            "b 0xc408"
        ]
    },
    "sym.rtnl_close": {
        "function_address": "0x0000ab84",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "poplt {r4, pc}",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00009988",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb28]!"
        ]
    },
    "sym.get_jiffies": {
        "function_address": "0x0000ce4c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r1",
            "sub sp, sp, 0xc",
            "ldr r4, aav.0x0000a548",
            "mov r6, r0",
            "mov r1, 0x2e",
            "mov r0, r5",
            "mov r8, r2",
            "mov r7, r3",
            "add r4, pc, r4",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0xceb4",
            "mov r0, r5",
            "add r1, sp, 4",
            "bl sym.imp.strtod",
            "mov r2, 0",
            "mov r3, 0",
            "mov r8, r0",
            "mov sb, r1",
            "bl fcn.0000e674",
            "cmp r0, 0",
            "beq 0xced0",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r2, r8",
            "add r1, sp, 4",
            "mov r0, r5",
            "bl sym.imp.strtoul",
            "bl fcn.0000e028",
            "mov r8, r0",
            "mov sb, r1",
            "ldr sl, [sp, 4]",
            "cmp sl, r5",
            "beq 0xcea8",
            "ldr r5, [0x0000d14c]",
            "ldr fp, [r4, r5]",
            "ldr r3, [fp]",
            "cmp r3, 0",
            "beq 0xd0d8",
            "mov r3, 1",
            "str r3, [r7]",
            "ldrsb r3, [sl]",
            "cmp r3, 0",
            "beq 0xd0a0",
            "ldr r1, [0x0000d150]",
            "mov r3, 0",
            "str r3, [r7]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd078",
            "ldr r1, [0x0000d154]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd078",
            "ldr r1, [0x0000d158]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd078",
            "ldr r1, [0x0000d15c]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0e8",
            "ldr r1, [0x0000d160]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0e8",
            "ldr r1, [0x0000d164]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0e8",
            "ldr r1, [0x0000d168]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd108",
            "ldr r1, [0x0000d16c]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd108",
            "ldr r1, [0x0000d170]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd108",
            "ldr r1, [0x0000d174]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd128",
            "ldr r1, [0x0000d178]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd128",
            "ldr r1, [0x0000d17c]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd128",
            "ldr r1, [0x0000d180]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0a0",
            "ldr r1, [0x0000d184]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0a0",
            "ldr r1, [0x0000d188]",
            "mov r0, sl",
            "add r1, r4, r1",
            "bl sym.imp.strcasecmp",
            "cmp r0, 0",
            "beq 0xd0a0",
            "b 0xcea8",
            "ldr r3, [r4, r5]",
            "ldr r0, [r3]",
            "bl fcn.0000e04c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000e128",
            "mov r8, r0",
            "mov sb, r1",
            "mov r1, sb",
            "mov r0, r8",
            "bl fcn.0000e6c4",
            "str r0, [r6]",
            "mov r4, r0",
            "bl fcn.0000e028",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000e674",
            "cmp r0, 0",
            "addne r4, r4, 1",
            "movne r0, 0",
            "strne r4, [r6]",
            "b 0xceac",
            "bl sym.__get_hz",
            "ldr sl, [sp, 4]",
            "str r0, [fp]",
            "b 0xcef0",
            "ldr r3, [r4, r5]",
            "ldr r0, [r3]",
            "bl fcn.0000e04c",
            "mov r3, 0x4000",
            "mov r2, 0",
            "movt r3, 0x408f",
            "bl fcn.0000e394",
            "b 0xd084",
            "ldr r3, [r4, r5]",
            "ldr r0, [r3]",
            "bl fcn.0000e04c",
            "movw r3, 0x8480",
            "mov r2, 0",
            "movt r3, 0x412e",
            "bl fcn.0000e394",
            "b 0xd084",
            "ldr r3, [r4, r5]",
            "ldr r0, [r3]",
            "bl fcn.0000e04c",
            "movw r3, 0xcd65",
            "mov r2, 0",
            "movt r3, 0x41cd",
            "bl fcn.0000e394",
            "b 0xd084"
        ]
    },
    "sym.imp.strtod": {
        "function_address": "0x000097b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc60]!"
        ]
    },
    "fcn.0000e674": {
        "function_address": "0x0000e674",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000e64c",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "fcn.0000e028": {
        "function_address": "0x0000e028",
        "instructions": [
            "teq r1, 0",
            "moveq r1, r0",
            "moveq r0, 0",
            "clz r3, r1",
            "addeq r3, r3, 0x20",
            "sub r3, r3, 0xb",
            "subs r2, r3, 0x20",
            "bge 0xdf04",
            "adds r2, r2, 0xc",
            "ble 0xdf00",
            "add ip, r2, 0x14",
            "rsb r2, r2, 0xc",
            "lsl r0, r1, ip",
            "lsr r1, r1, r2",
            "b 0xdf14",
            "add r2, r2, 0x14",
            "rsble ip, r2, 0x20",
            "lsl r1, r1, r2",
            "orrle r1, r1, r0, lsr ip",
            "lslle r0, r0, r2",
            "subs r4, r4, r3",
            "addge r1, r1, r4, lsl 20",
            "orrge r1, r1, r5",
            "popge {r4, r5, pc}",
            "mvn r4, r4",
            "subs r4, r4, 0x1f",
            "bge 0xdf68",
            "adds r4, r4, 0xc",
            "bgt 0xdf50",
            "add r4, r4, 0x14",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r2",
            "orr r1, r5, r1, lsr r4",
            "pop {r4, r5, pc}",
            "rsb r4, r4, 0xc",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r2",
            "orr r0, r0, r1, lsl r4",
            "mov r1, r5",
            "pop {r4, r5, pc}",
            "lsr r0, r1, r4",
            "mov r1, r5",
            "pop {r4, r5, pc}",
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "mov r5, 0",
            "mov r1, 0",
            "b 0xdec4"
        ]
    },
    "sym.imp.strcasecmp": {
        "function_address": "0x0000982c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc10]!"
        ]
    },
    "fcn.0000e04c": {
        "function_address": "0x0000e04c",
        "instructions": [
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "ands r5, r0, 0x80000000",
            "rsbmi r0, r0, 0",
            "mov r1, 0",
            "b 0xdec4"
        ]
    },
    "fcn.0000e128": {
        "function_address": "0x0000e128",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.0000e308",
            "add r4, r4, r5",
            "eor r6, r1, r3",
            "bic r1, r1, ip, lsl 21",
            "bic r3, r3, ip, lsl 21",
            "orrs r5, r0, r1, lsl 12",
            "orrsne r5, r2, r3, lsl 12",
            "orr r1, r1, 0x100000",
            "orr r3, r3, 0x100000",
            "beq 0xe1e0",
            "umull ip, lr, r0, r2",
            "mov r5, 0",
            "umlal lr, r5, r1, r2",
            "and r2, r6, 0x80000000",
            "umlal lr, r5, r0, r3",
            "mov r6, 0",
            "umlal r5, r6, r1, r3",
            "teq ip, 0",
            "orrne lr, lr, 1",
            "sub r4, r4, 0xff",
            "cmp r6, 0x200",
            "sbc r4, r4, 0x300",
            "bhs 0xe1ac",
            "lsls lr, lr, 1",
            "adcs r5, r5, r5",
            "adc r6, r6, r6",
            "orr r1, r2, r6, lsl 11",
            "orr r1, r1, r5, lsr 21",
            "lsl r0, r5, 0xb",
            "orr r0, r0, lr, lsr 21",
            "lsl lr, lr, 0xb",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xe20c",
            "cmp lr, 0x80000000",
            "lsrseq lr, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and r6, r6, 0x80000000",
            "orr r1, r6, r1",
            "orr r0, r0, r2",
            "eor r1, r1, r3",
            "subs r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "bgt 0xe374",
            "cmn r4, 0x36",
            "movle r0, 0",
            "andle r1, r1, 0x80000000",
            "pople {r4, r5, r6, pc}",
            "rsb r4, r4, 0",
            "subs r4, r4, 0x20",
            "bge 0xe290",
            "adds r4, r4, 0xc",
            "bgt 0xe264",
            "add r4, r4, 0x14",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r5",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r5",
            "and r2, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r2, r1, lsr r4",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r4, r4, 0xc",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r4",
            "lsr r0, r0, r5",
            "orr r0, r0, r1, lsl r4",
            "and r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r1, 0",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r5, r4, 0x20",
            "orr lr, lr, r0, lsl r5",
            "lsr r3, r0, r4",
            "orr r3, r3, r1, lsl r5",
            "lsr r0, r1, r4",
            "and r1, r1, 0x80000000",
            "bic r0, r0, r1, lsr r4",
            "add r0, r0, r3, lsr 31",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "and r1, r1, 0x80000000",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e6c4": {
        "function_address": "0x0000e6c4",
        "instructions": [
            "lsls r2, r1, 1",
            "bhs 0xe6f8",
            "adds r2, r2, 0x200000",
            "bhs 0xe700",
            "bpl 0xe6f8",
            "mvn r3, 0x3e0",
            "subs r2, r3, r2, asr 21",
            "bmi 0xe708",
            "lsl r3, r1, 0xb",
            "orr r3, r3, 0x80000000",
            "orr r3, r3, r0, lsr 21",
            "lsr r0, r3, r2",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "orrs r0, r0, r1, lsl 12",
            "bne 0xe710",
            "mvn r0, 0",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "fcn.0000e394": {
        "function_address": "0x0000e394",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.0000e528",
            "sub r4, r4, r5",
            "eor lr, r1, r3",
            "orrs r5, r2, r3, lsl 12",
            "lsl r1, r1, 0xc",
            "beq 0xe4f8",
            "lsl r3, r3, 0xc",
            "mov r5, 0x10000000",
            "orr r3, r5, r3, lsr 4",
            "orr r3, r3, r2, lsr 24",
            "lsl r2, r2, 8",
            "orr r5, r5, r1, lsr 4",
            "orr r5, r5, r0, lsr 24",
            "lsl r6, r0, 8",
            "and r1, lr, 0x80000000",
            "cmp r5, r3",
            "cmpeq r6, r2",
            "adc r4, r4, 0xfd",
            "add r4, r4, 0x300",
            "bhs 0xe408",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs r6, r6, r2",
            "sbc r5, r5, r3",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "mov r0, 0x100000",
            "mov ip, 0x80000",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 1",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 2",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 3",
            "orrs lr, r5, r6",
            "beq 0xe4c8",
            "lsl r5, r5, 4",
            "orr r5, r5, r6, lsr 28",
            "lsl r6, r6, 4",
            "lsl r3, r3, 3",
            "orr r3, r3, r2, lsr 29",
            "lsl r2, r2, 3",
            "lsrs ip, ip, 4",
            "bne 0xe420",
            "tst r1, 0x100000",
            "bne 0xe4d4",
            "orr r1, r1, r0",
            "mov r0, 0",
            "mov ip, 0x80000000",
            "b 0xe420",
            "tst r1, 0x100000",
            "orreq r1, r1, r0",
            "moveq r0, 0",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xe20c",
            "subs ip, r5, r3",
            "subseq ip, r6, r2",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and lr, lr, 0x80000000",
            "orr r1, lr, r1, lsr 12",
            "adds r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "b 0xe20c"
        ]
    },
    "sym.rtnl_talk": {
        "function_address": "0x0000b2d4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4000",
            "sub sp, sp, 0x54",
            "ldr r4, [r0, 0x1c]",
            "add ip, sp, 0x4000",
            "mov r8, r0",
            "ldr ip, [ip, 0x78]",
            "add r0, sp, 0x4000",
            "ldr lr, [r1]",
            "add r0, r0, 0x20",
            "ldr r5, aav.0x0000c088",
            "add r4, r4, 1",
            "cmp ip, 0",
            "str r0, [sp, 8]",
            "mov ip, 0",
            "add r0, r0, 0xc",
            "mov sb, r2",
            "add fp, sp, 0x4000",
            "add r2, sp, 0x4000",
            "str ip, [r0], 4",
            "str ip, [r2, 0x3c]",
            "add fp, fp, 0x3c",
            "str ip, [r0], 4",
            "add r5, pc, r5",
            "str ip, [r0], 4",
            "str r4, [sp, 0x10]",
            "mov r4, 0x10",
            "str ip, [r0]",
            "add ip, sp, 0x4000",
            "str r1, [r2, 0x48]",
            "str r3, [ip, 0x44]",
            "strh r4, [r2, 0x3c]",
            "ldrheq r3, [r1, 6]",
            "ldr r7, [r2, 0x7c]",
            "ldr sl, [r2, 0x80]",
            "str lr, [r2, 0x4c]",
            "orreq r3, r3, 4",
            "str fp, [r2, 0x20]",
            "mov r2, 0xc",
            "str r5, [sp, 4]",
            "ldr r5, [sp, 0x10]",
            "str r2, [ip, 0x24]",
            "add r2, sp, 0x4000",
            "add r2, r2, 0x48",
            "str sb, [ip, 0x40]",
            "str r2, [ip, 0x28]",
            "mov r2, 1",
            "str r5, [r8, 0x1c]",
            "str r2, [ip, 0x2c]",
            "mov r2, 0",
            "strheq r3, [r1, 6]",
            "str r5, [r1, 8]",
            "ldr r0, [r8]",
            "ldr r1, [sp, 8]",
            "bl sym.imp.sendmsg",
            "cmp r0, 0",
            "blt 0xb684",
            "add r3, sp, 0x50",
            "mov r1, 0",
            "sub r3, r3, 0x30",
            "mov r2, 0x4000",
            "str r3, [sp, 0xc]",
            "mov r0, r3",
            "ldr r3, [0x0000b740]",
            "add r5, sp, 0x4000",
            "str r3, [sp, 0x14]",
            "bl sym.imp.memset",
            "ldr ip, [sp, 4]",
            "ldr r3, [0x0000b744]",
            "ldr r4, [sp, 0xc]",
            "add r3, ip, r3",
            "str r3, [sp, 0x18]",
            "ldr r3, [0x0000b748]",
            "str r4, [r5, 0x48]",
            "add r3, ip, r3",
            "str r3, [sp, 0x1c]",
            "mov r4, 0x4000",
            "ldr r0, [r8]",
            "add r3, sp, r4",
            "ldr r1, [sp, 8]",
            "str r4, [r3, 0x4c]",
            "mov r2, 0",
            "bl sym.imp.recvmsg",
            "subs r4, r0, 0",
            "blt 0xb560",
            "beq 0xb654",
            "add r5, sp, 0x4000",
            "ldr r2, [r5, 0x24]",
            "cmp r2, 0xc",
            "bne 0xb6bc",
            "ldr r5, [sp, 0xc]",
            "b 0xb474",
            "cmp r7, 0",
            "beq 0xb464",
            "mov r0, fp",
            "mov r1, r5",
            "mov r2, sl",
            "blx r7",
            "cmp r0, 0",
            "blt 0xb554",
            "add r6, r6, 3",
            "bic r6, r6, 3",
            "rsb r4, r6, r4",
            "add r5, r5, r6",
            "cmp r4, 0xf",
            "bls 0xb5b4",
            "ldr r6, [r5]",
            "sub r3, r6, 0x10",
            "lsr r2, r3, 0x1f",
            "cmp r6, r4",
            "orrgt r2, r2, 1",
            "cmp r2, 0",
            "bne 0xb5f4",
            "add ip, sp, 0x4000",
            "ldr r1, [ip, 0x40]",
            "cmp sb, r1",
            "bne 0xb444",
            "ldr r0, [r5, 0xc]",
            "ldr r1, [r8, 8]",
            "cmp r0, r1",
            "bne 0xb444",
            "ldr r1, [r5, 8]",
            "ldr r0, [sp, 0x10]",
            "cmp r0, r1",
            "bne 0xb444",
            "ldrh r1, [r5, 4]",
            "cmp r1, 2",
            "beq 0xb508",
            "add r3, sp, 0x4000",
            "ldr r3, [r3, 0x78]",
            "cmp r3, 0",
            "bne 0xb69c",
            "ldr r0, [sp, 4]",
            "mov r1, 1",
            "ldr ip, [sp, 0x14]",
            "mov r2, 0x14",
            "ldr r3, [r0, ip]",
            "ldr r0, [sp, 0x18]",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xb464",
            "cmp r3, 0x13",
            "bls 0xb6f8",
            "bl sym.imp.__errno_location",
            "ldr r4, [r5, 0x10]",
            "rsb r4, r4, 0",
            "cmp r4, 0",
            "str r4, [r0]",
            "bne 0xb6e0",
            "add ip, sp, 0x4000",
            "ldr ip, [ip, 0x78]",
            "cmp ip, 0",
            "addeq ip, sp, 0x4000",
            "ldreq r0, [ip, 0x78]",
            "beq 0xb554",
            "mov r0, ip",
            "mov r1, r5",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "add sp, sp, 0x54",
            "add sp, sp, 0x4000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "cmpne r3, 0xb",
            "beq 0xb404",
            "ldr r5, [sp, 4]",
            "mov r4, r0",
            "mov r0, r3",
            "ldr r3, [0x0000b740]",
            "ldr r3, [r5, r3]",
            "ldr r5, [r3]",
            "bl sym.imp.strerror",
            "ldr ip, [sp, 4]",
            "mov r2, r0",
            "ldr r1, [0x0000b74c]",
            "mov r0, r5",
            "ldr r3, [r4]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xb554",
            "add r1, sp, 0x4000",
            "ldr r3, [r1, 0x38]",
            "tst r3, 0x20",
            "bne 0xb630",
            "cmp r4, 0",
            "beq 0xb404",
            "ldr r3, [0x0000b740]",
            "mov r2, r4",
            "ldr r5, [sp, 4]",
            "ldr r1, [0x0000b750]",
            "ldr r3, [r5, r3]",
            "add r1, r5, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "add r0, sp, 0x4000",
            "ldr r3, [r0, 0x38]",
            "tst r3, 0x20",
            "beq 0xb724",
            "ldr r4, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000b740]",
            "mov r2, 0x12",
            "ldr r0, [0x0000b754]",
            "ldr r3, [r4, r3]",
            "add r0, r4, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb554",
            "ldr r2, [sp, 0x14]",
            "mov r1, 1",
            "ldr r4, [sp, 4]",
            "ldr r0, [sp, 0x1c]",
            "ldr r3, [r4, r2]",
            "mov r2, 0x12",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xb404",
            "ldr r0, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000b740]",
            "mov r2, 0xf",
            "ldr r4, [sp, 4]",
            "ldr r3, [r0, r3]",
            "ldr r0, [0x0000b758]",
            "ldr r3, [r3]",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb554",
            "ldr r1, [sp, 4]",
            "ldr r0, [0x0000b75c]",
            "add r0, r1, r0",
            "bl sym.imp.perror",
            "mvn r0, 0",
            "b 0xb554",
            "mov sl, r2",
            "mov r0, r3",
            "mov r1, r5",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "add r4, sp, 0x4000",
            "mov r0, sl",
            "b 0xb554",
            "ldr ip, [sp, 4]",
            "ldr r3, [0x0000b740]",
            "ldr r1, [0x0000b760]",
            "ldr r3, [ip, r3]",
            "add r1, ip, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r2, [sp, 4]",
            "ldr r0, [0x0000b764]",
            "add r0, r2, r0",
            "bl sym.imp.perror",
            "mvn r0, 0",
            "b 0xb554",
            "ldr r4, [sp, 4]",
            "mov r1, 1",
            "ldr r3, [0x0000b740]",
            "mov r2, 0x10",
            "ldr r0, [0x0000b768]",
            "ldr r3, [r4, r3]",
            "add r0, r4, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb554",
            "ldr r3, [0x0000b740]",
            "mov r2, r6",
            "ldr r5, [sp, 4]",
            "ldr r1, [0x0000b76c]",
            "ldr r3, [r5, r3]",
            "b 0xb5e0"
        ]
    },
    "sym.duparg": {
        "function_address": "0x0000cb90",
        "instructions": [
            "ldr ip, aav.0x0000a814",
            "mov r2, r0",
            "push {r3, lr}",
            "mov r3, r1",
            "ldr r1, [0x0000cbc8]",
            "add ip, pc, ip",
            "ldr r0, [ip, r1]",
            "ldr r1, [0x0000cbcc]",
            "ldr r0, [r0]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "sym.rta_addattr32": {
        "function_address": "0x0000bea4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldrh ip, [r4]",
            "sub sp, sp, 8",
            "ldr r0, aav.0x0000b4f0",
            "add ip, ip, 3",
            "str r3, [sp, 4]",
            "bic ip, ip, 3",
            "add r3, ip, 8",
            "add r0, pc, r0",
            "cmp r3, r1",
            "bgt 0xbf14",
            "add r0, r4, ip",
            "mov r3, 8",
            "strh r2, [r0, 2]",
            "add r1, sp, 4",
            "strh r3, [r4, ip]",
            "add r0, r0, 4",
            "mov r2, 4",
            "bl sym.imp.memcpy",
            "ldrh r3, [r4]",
            "mov r0, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r3, r3, 8",
            "strh r3, [r4]",
            "add sp, sp, 8",
            "pop {r4, pc}",
            "ldr r3, [0x0000bf3c]",
            "mov r2, r1",
            "ldr r1, [0x0000bf40]",
            "ldr r3, [r0, r3]",
            "add r1, r0, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xbf0c"
        ]
    },
    "sym.get_prefix_1": {
        "function_address": "0x0000c7cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r3, r0",
            "mov r4, 0",
            "ldr r5, aav.0x0000abc0",
            "mov r7, r0",
            "mov r6, r1",
            "str r4, [r3], 4",
            "add r3, r3, 4",
            "str r4, [r0, 4]",
            "mov r0, r1",
            "ldr r1, [0x0000c988]",
            "add r5, pc, r5",
            "str r4, [r3], 4",
            "sub sp, sp, 0x30",
            "str r4, [r3], 4",
            "mov r8, r2",
            "str r4, [r3], 4",
            "add r1, r5, r1",
            "str r4, [r3], 4",
            "str r4, [r3], 4",
            "str r4, [r3], 4",
            "str r4, [r3], 4",
            "str r4, [r3]",
            "bl sym.imp.strcmp",
            "cmp r0, r4",
            "beq 0xc924",
            "ldr r1, [0x0000c98c]",
            "mov r0, r6",
            "add r1, r5, r1",
            "bl sym.imp.strcmp",
            "cmp r0, r4",
            "beq 0xc924",
            "ldr r1, [0x0000c990]",
            "mov r0, r6",
            "add r1, r5, r1",
            "bl sym.imp.strcmp",
            "cmp r0, r4",
            "beq 0xc924",
            "mov r1, 0x2f",
            "mov r0, r6",
            "bl sym.imp.strchr",
            "subs r5, r0, 0",
            "mov r1, r6",
            "strbne r4, [r5]",
            "mov r0, r7",
            "mov r2, r8",
            "bl sym.get_addr_1",
            "subs r4, r0, 0",
            "bne 0xc8f4",
            "ldrb r3, [r7]",
            "cmp r3, 0xa",
            "moveq r3, 0x80",
            "strheq r3, [r7, 2]",
            "beq 0xc8b8",
            "cmp r3, 0xc",
            "movne r3, 0x20",
            "strhne r3, [r7, 2]",
            "moveq r3, 0x10",
            "strheq r3, [r7, 2]",
            "cmp r5, 0",
            "beq 0xc904",
            "add r6, r5, 1",
            "add r0, sp, 0x2c",
            "mov r1, r6",
            "mov r2, 0",
            "bl sym.get_unsigned",
            "cmp r0, 0",
            "ldreq r3, [sp, 0x2c]",
            "bne 0xc948",
            "ldrsh r2, [r7, 2]",
            "cmp r3, r2",
            "bls 0xc910",
            "mvn r4, 0",
            "b 0xc8fc",
            "cmp r5, 0",
            "beq 0xc904",
            "mov r3, 0x2f",
            "strb r3, [r5]",
            "mov r0, r4",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r2, [r7, 4]",
            "strh r3, [r7, 2]",
            "orr r3, r2, 1",
            "str r3, [r7, 4]",
            "b 0xc8fc",
            "cmp r8, 0xc",
            "mvneq r4, 0",
            "beq 0xc904",
            "mov r3, 0",
            "strb r8, [r7]",
            "strb r3, [r7, 1]",
            "mov r4, r3",
            "strh r3, [r7, 2]",
            "b 0xc904",
            "add r0, sp, 4",
            "mov r1, r6",
            "mov r2, 2",
            "bl sym.get_addr_1",
            "cmp r0, 0",
            "bne 0xc8ec",
            "ldrb r3, [sp, 4]",
            "cmp r3, 2",
            "bne 0xc8ec",
            "ldr r0, [sp, 0xc]",
            "bl sym.mask2bits",
            "subs r3, r0, 0",
            "bge 0xc8e0",
            "mvn r4, 0",
            "b 0xc8fc"
        ]
    },
    "sym.get_unsigned": {
        "function_address": "0x0000c29c",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc2bc",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc2b0",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtoul",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc2b0",
            "cmp r4, r3",
            "beq 0xc2b0",
            "ldrsb r3, [r3]",
            "cmp r3, 0",
            "streq r0, [r5]",
            "moveq r0, r3",
            "beq 0xc2b4",
            "b 0xc2b0"
        ]
    },
    "sym.mask2bits": {
        "function_address": "0x0000c268",
        "instructions": [
            "rev r3, r0",
            "rsb r0, r3, 0",
            "bics r0, r0, r3",
            "bne 0xc294",
            "cmp r3, 0",
            "moveq r0, r3",
            "bxeq lr",
            "lsls r3, r3, 1",
            "add r0, r0, 1",
            "bne 0xc284",
            "bx lr",
            "mvn r0, 0",
            "bx lr"
        ]
    },
    "sym.addattr_nest": {
        "function_address": "0x0000bdc4",
        "instructions": [
            "push {r4, lr}",
            "mov lr, 0",
            "ldr r4, [r0]",
            "sub sp, sp, 8",
            "mov r3, lr",
            "str lr, [sp]",
            "add r4, r4, 3",
            "bic r4, r4, 3",
            "add r4, r0, r4",
            "bl sym.addattr_l",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "sym.addattr_l": {
        "function_address": "0x0000bc74",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldr ip, [sp, 0x18]",
            "ldr r0, [r0]",
            "add r5, ip, 7",
            "ldr lr, aav.0x0000b71c",
            "bic r5, r5, 3",
            "add r7, ip, 4",
            "add r0, r0, 3",
            "bic r6, r0, 3",
            "add lr, pc, lr",
            "add r0, r5, r6",
            "cmp r0, r1",
            "bhi 0xbce4",
            "add r0, r4, r6",
            "mov r1, r3",
            "strh r2, [r0, 2]",
            "mov r2, ip",
            "strh r7, [r4, r6]",
            "add r0, r0, 4",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "mov r0, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r5, r5, r3",
            "str r5, [r4]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "ldr r3, [0x0000bd0c]",
            "mov r2, r1",
            "ldr r1, [0x0000bd10]",
            "ldr r3, [lr, r3]",
            "add r1, lr, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.rtnl_open_byproto": {
        "function_address": "0x0000aba8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, 0",
            "mov r6, r0",
            "sub sp, sp, 0x1c",
            "mov ip, 0x8000",
            "mov r5, r0",
            "str r4, [r6], 4",
            "add r3, r6, 4",
            "str r4, [r0, 4]",
            "mov sl, r1",
            "str r4, [r3], 4",
            "mov r0, 0x10",
            "str r4, [r3], 4",
            "mov r1, 3",
            "str r4, [r3], 4",
            "ldr r7, aav.0x0000c7c4",
            "str r4, [r3], 4",
            "str r4, [r3], 4",
            "str r4, [r3], 4",
            "add r7, pc, r7",
            "str r4, [r3]",
            "str ip, [sp, 0x10]",
            "str ip, [sp, 0xc]",
            "bl sym.imp.socket",
            "cmp r0, r4",
            "str r0, [r5]",
            "blt 0xad18",
            "mov r8, 4",
            "mov r1, 1",
            "mov r2, 7",
            "add r3, sp, 0x10",
            "str r8, [sp]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "blt 0xad2c",
            "ldr r0, [r5]",
            "mov r1, 1",
            "mov r2, 8",
            "add r3, sp, 0xc",
            "str r8, [sp]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "blt 0xad40",
            "add r3, r6, 8",
            "str r4, [r5, 4]",
            "str r4, [r6, 4]",
            "mov r1, r6",
            "str r4, [r3]",
            "mov r3, 0x10",
            "mov r2, 0xc",
            "strh r3, [r5, 4]",
            "str sl, [r5, 0xc]",
            "ldr r0, [r5]",
            "bl sym.imp.bind",
            "cmp r0, 0",
            "blt 0xad54",
            "add r2, sp, 0x18",
            "mov r3, 0xc",
            "str r3, [r2, -4]!",
            "mov r1, r6",
            "ldr r0, [r5]",
            "bl sym.imp.getsockname",
            "cmp r0, 0",
            "blt 0xad68",
            "ldr r2, [sp, 0x14]",
            "cmp r2, 0xc",
            "bne 0xacf8",
            "ldrh r2, [r5, 4]",
            "cmp r2, 0x10",
            "bne 0xacd8",
            "mov r0, r4",
            "bl sym.imp.time",
            "str r0, [r5, 0x1c]",
            "mov r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "ldr r3, [0x0000ad80]",
            "mvn r4, 0",
            "ldr r1, [0x0000ad84]",
            "ldr r3, [r7, r3]",
            "add r1, r7, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0xaccc",
            "ldr r3, [0x0000ad80]",
            "mvn r4, 0",
            "ldr r1, [0x0000ad88]",
            "ldr r3, [r7, r3]",
            "add r1, r7, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0xaccc",
            "ldr r0, [0x0000ad8c]",
            "mvn r4, 0",
            "add r0, r7, r0",
            "bl sym.imp.perror",
            "b 0xaccc",
            "ldr r0, [0x0000ad90]",
            "mvn r4, 0",
            "add r0, r7, r0",
            "bl sym.imp.perror",
            "b 0xaccc",
            "ldr r0, [0x0000ad94]",
            "mvn r4, 0",
            "add r0, r7, r0",
            "bl sym.imp.perror",
            "b 0xaccc",
            "ldr r0, [0x0000ad98]",
            "mvn r4, 0",
            "add r0, r7, r0",
            "bl sym.imp.perror",
            "b 0xaccc",
            "ldr r0, [0x0000ad9c]",
            "mvn r4, 0",
            "add r0, r7, r0",
            "bl sym.imp.perror",
            "b 0xaccc"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x00009778",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc88]!"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x000097f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc38]!"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x000097d8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc48]!"
        ]
    },
    "sym.imp.getsockname": {
        "function_address": "0x000099a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb18]!"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x000098e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb98]!"
        ]
    },
    "sym.addattr_nest_compat": {
        "function_address": "0x0000be18",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "ldr r5, [r0]",
            "mov r4, r0",
            "mov r7, r1",
            "mov r6, r2",
            "ldr ip, [sp, 0x20]",
            "add r5, r5, 3",
            "bic r5, r5, 3",
            "str ip, [sp]",
            "add r5, r0, r5",
            "bl sym.addattr_l",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r6",
            "bl sym.addattr_nest",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.addraw_l": {
        "function_address": "0x0000bd14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "add r6, r3, 3",
            "bic r6, r6, 3",
            "mov r5, r3",
            "ldr r3, aav.0x0000b67c",
            "add r0, r0, 3",
            "bic r0, r0, 3",
            "add ip, r6, r0",
            "add r3, pc, r3",
            "cmp ip, r1",
            "bhi 0xbd94",
            "mov r1, r2",
            "add r0, r4, r0",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "rsb r2, r5, r6",
            "mov r1, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r5, r5, r3",
            "add r0, r4, r5",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "mov r0, 0",
            "add r3, r3, 3",
            "bic r3, r3, 3",
            "add r6, r6, r3",
            "str r6, [r4]",
            "pop {r4, r5, r6, pc}",
            "mov r2, r1",
            "ldr r1, [0x0000bdbc]",
            "ldr r0, [r3, r1]",
            "ldr r1, [0x0000bdc0]",
            "ldr r0, [r0]",
            "add r1, r3, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.__parse_rtattr_nested_compat": {
        "function_address": "0x0000c1a0",
        "instructions": [
            "ldrh ip, [r2]",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "sub ip, ip, 4",
            "cmp ip, r3",
            "blo 0xc1fc",
            "add r4, r3, 3",
            "bic r4, r4, 3",
            "add r4, r4, 4",
            "cmp ip, r4",
            "bhs 0xc1e4",
            "add r2, r1, 1",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "bl sym.imp.memset",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "ldrh r3, [r2, r4]",
            "add r2, r2, r4",
            "add r2, r2, 4",
            "sub r3, r3, 4",
            "pop {r4, r5, r6, lr}",
            "b sym.parse_rtattr",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.hexstring_n2a": {
        "function_address": "0x0000d514",
        "instructions": [
            "ldr ip, aav.0x00009e8c",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov sb, r0",
            "mov r5, r3",
            "add ip, pc, ip",
            "str r2, [sp, 4]",
            "ble 0xd59c",
            "cmp r3, 2",
            "ble 0xd59c",
            "ldr r8, [0x0000d5ac]",
            "sub sl, r4, 1",
            "mov r7, r2",
            "mov r6, 0",
            "mov fp, 0x3a",
            "add r8, ip, r8",
            "b 0xd564",
            "cmp r5, 2",
            "ble 0xd59c",
            "sub r5, r5, 2",
            "mov r0, r7",
            "ldrb r2, [sb, r6]",
            "mov r1, r8",
            "bl sym.imp.sprintf",
            "cmp r6, sl",
            "cmpne r5, 1",
            "add r7, r7, 2",
            "movgt r3, fp",
            "add r6, r6, 1",
            "subgt r5, r5, 1",
            "strbgt r3, [r7], 1",
            "cmp r4, r6",
            "bgt 0xd55c",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x000098f8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb88]!"
        ]
    },
    "sym.get_u64": {
        "function_address": "0x0000c300",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 8",
            "mov r6, r0",
            "bne 0xc320",
            "mvn r0, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc314",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtoull",
            "mov r3, r1",
            "ldr r1, [sp, 4]",
            "mov r2, r0",
            "cmp r1, 0",
            "beq 0xc314",
            "cmp r4, r1",
            "beq 0xc314",
            "mvn r4, 0",
            "mov r5, 0",
            "ldrsb r0, [r1]",
            "eor r4, r4, r2",
            "eor r5, r5, r3",
            "orrs r1, r4, r5",
            "movne r1, 0",
            "moveq r1, 1",
            "cmp r0, 0",
            "moveq r0, r1",
            "orrne r0, r1, 1",
            "cmp r0, 0",
            "bne 0xc314",
            "strd r2, r3, [r6]",
            "b 0xc318"
        ]
    },
    "sym.imp.strtoull": {
        "function_address": "0x0000988c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xbd0]!"
        ]
    },
    "sym.rtnl_send_check": {
        "function_address": "0x0000ae14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, 0",
            "sub sp, sp, 0x400",
            "mov r5, r0",
            "ldr r4, aav.0x0000c584",
            "ldr r0, [r0]",
            "bl sym.imp.send",
            "subs r3, r0, 0",
            "add r4, pc, r4",
            "blt 0xae7c",
            "ldr r0, [r5]",
            "mov r1, sp",
            "mov r2, 0x400",
            "mov r3, 0x40",
            "bl sym.imp.recv",
            "cmp r0, 0",
            "mov r6, sp",
            "blt 0xae88",
            "cmp r0, 0xf",
            "ble 0xae78",
            "ldr r3, [sp]",
            "cmp r3, 0xf",
            "bls 0xae78",
            "cmp r3, r0",
            "bls 0xaea0",
            "mov r3, 0",
            "mov r0, r3",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, pc}",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 0xb",
            "mvnne r3, 0",
            "moveq r3, 0",
            "b 0xae7c",
            "ldrh r2, [r6, 4]",
            "cmp r2, 2",
            "mvnne r3, 0",
            "bne 0xae7c",
            "cmp r3, 0x23",
            "bls 0xaed0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r6, 0x10]",
            "mvn r3, 0",
            "rsb r2, r2, 0",
            "str r2, [r0]",
            "b 0xae7c",
            "ldr r3, [0x0000aefc]",
            "mov r1, 1",
            "ldr r0, [0x0000af00]",
            "add r2, r2, 0xe",
            "ldr r3, [r4, r3]",
            "add r0, r4, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r3, 0",
            "b 0xae7c"
        ]
    },
    "sym.imp.send": {
        "function_address": "0x00009790",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc78]!"
        ]
    },
    "sym.imp.recv": {
        "function_address": "0x000096f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xce0]!"
        ]
    },
    "sym.genl_ctrl_resolve_family": {
        "function_address": "0x00009eac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x1040",
            "sub sp, sp, 0x2c",
            "mov r1, 0",
            "add sl, sp, 0x28",
            "movw r2, 0x1010",
            "sub r4, sl, 0x14",
            "mov r5, r0",
            "mov r0, r4",
            "movw r7, 0xefac",
            "bl sym.imp.memset",
            "add ip, sp, 0x1040",
            "mov r3, 0x14",
            "add ip, ip, 0x28",
            "add r8, sp, 0x1000",
            "movt r7, 0xffff",
            "add r8, r8, 0x24",
            "str r3, [ip, r7]",
            "mov r3, 5",
            "mov ip, 0x10",
            "strh r3, [r4, 6]",
            "strh ip, [r4, 4]",
            "mov r3, 3",
            "ldr r6, case.0xd48c.0",
            "mov r0, r8",
            "mov r1, 0",
            "mov r2, 0x10",
            "strb r3, [sl, -4]",
            "bl sym.rtnl_open_byproto",
            "cmp r0, 0",
            "add r6, pc, r6",
            "blt 0xa088",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "add r0, r0, 1",
            "mov r3, r5",
            "mov r1, 0x80",
            "mov r5, 0",
            "str r0, [sp]",
            "mov r2, 2",
            "mov r0, r4",
            "bl sym.addattr_l",
            "mov r0, r8",
            "mov r1, r4",
            "mov r2, r5",
            "mov r3, r5",
            "stm sp, {r4, r5}",
            "str r5, [sp, 8]",
            "bl sym.rtnl_talk",
            "cmp r0, r5",
            "blt 0xa040",
            "ldrh r3, [r4, 4]",
            "add r1, sp, 0x1040",
            "add r1, r1, 0x28",
            "ldr r2, [r1, r7]",
            "cmp r3, 0x10",
            "beq 0x9fc0",
            "ldr r1, [0x0000a0b4]",
            "ldr r0, [r6, r1]",
            "ldr r1, [0x0000a0b8]",
            "ldr r0, [r0]",
            "add r1, r6, r1",
            "bl sym.imp.fprintf",
            "mov r0, r8",
            "bl sym.rtnl_close",
            "mov r0, r5",
            "add sp, sp, 0x6c",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "ldrb r4, [sl, -4]",
            "cmp r4, 1",
            "beq 0x9fec",
            "ldr r3, [0x0000a0b4]",
            "mov r2, r4",
            "ldr r1, [0x0000a0bc]",
            "ldr r3, [r6, r3]",
            "add r1, r6, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9fa8",
            "subs r3, r2, 0x14",
            "bmi 0xa064",
            "add r0, sp, 0x1040",
            "mov r1, 7",
            "add r0, r0, 8",
            "mov r2, sl",
            "bl sym.parse_rtattr",
            "add r3, sp, 0x1000",
            "ldr r5, [r3, 0x4c]",
            "cmp r5, 0",
            "ldrhne r5, [r5, 4]",
            "bne 0x9fa8",
            "ldr r3, [0x0000a0b4]",
            "mov r1, r4",
            "ldr r0, [0x0000a0c0]",
            "mov r2, 0x16",
            "ldr r3, [r6, r3]",
            "add r0, r6, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9fa8",
            "ldr r3, [0x0000a0b4]",
            "mov r1, 1",
            "ldr r0, [0x0000a0c4]",
            "mov r2, 0x1c",
            "ldr r3, [r6, r3]",
            "add r0, r6, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0x9fa8",
            "mov r2, r3",
            "ldr r3, [0x0000a0b4]",
            "ldr r1, [0x0000a0c8]",
            "mvn r5, 0",
            "ldr r3, [r6, r3]",
            "add r1, r6, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9fb0",
            "ldr r3, [0x0000a0b4]",
            "mov r1, 1",
            "ldr r0, [0x0000a0cc]",
            "mov r2, 0x23",
            "ldr r3, [r6, r3]",
            "add r0, r6, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mov r0, 1",
            "bl sym.imp.exit"
        ]
    },
    "sym.invarg": {
        "function_address": "0x0000cb50",
        "instructions": [
            "ldr ip, aav.0x0000a854",
            "mov r2, r1",
            "ldr r1, [0x0000cb88]",
            "push {r3, lr}",
            "mov r3, r0",
            "add ip, pc, ip",
            "ldr r0, [ip, r1]",
            "ldr r1, [0x0000cb8c]",
            "ldr r0, [r0]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "sym.print_ctrl_cmd_flags": {
        "function_address": "0x0000a0d0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r2, r1",
            "ldr r4, aav.0x0000d2d0",
            "mov r5, r1",
            "mov r6, r0",
            "ldr r1, [0x0000a1c8]",
            "add r4, pc, r4",
            "add r1, r4, r1",
            "bl sym.imp.fprintf",
            "cmp r5, 0",
            "beq 0xa134",
            "ldr r0, [0x0000a1cc]",
            "mov r1, 1",
            "mov r2, 3",
            "mov r3, r6",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "tst r5, 1",
            "bne 0xa160",
            "tst r5, 2",
            "bne 0xa180",
            "tst r5, 4",
            "bne 0xa1a0",
            "tst r5, 8",
            "bne 0xa144",
            "mov r0, 0xa",
            "mov r1, r6",
            "pop {r4, r5, r6, lr}",
            "b sym.imp.fputc",
            "ldr r0, [0x0000a1d0]",
            "mov r1, 1",
            "mov r2, 0xb",
            "mov r3, r6",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "b 0xa134",
            "ldr r0, [0x0000a1d4]",
            "mov r1, 1",
            "mov r2, 0x1b",
            "mov r3, r6",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "tst r5, 2",
            "beq 0xa124",
            "ldr r0, [0x0000a1d8]",
            "mov r1, 1",
            "mov r2, 0xa",
            "mov r3, r6",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "tst r5, 4",
            "beq 0xa12c",
            "ldr r0, [0x0000a1dc]",
            "mov r1, 1",
            "mov r2, 0xc",
            "mov r3, r6",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "tst r5, 8",
            "beq 0xa134",
            "b 0xa144"
        ]
    },
    "sym.rtnl_wilddump_request": {
        "function_address": "0x0000ada8",
        "instructions": [
            "ldr ip, [r0, 0x1c]",
            "mov r3, 0",
            "push {r4, r5, lr}",
            "sub sp, sp, 0x1c",
            "add r4, sp, 4",
            "mov lr, 0x14",
            "add ip, ip, 1",
            "add r5, r4, 0xc",
            "str r3, [r5], 4",
            "strh r2, [sp, 8]",
            "mov r2, lr",
            "str r3, [r5]",
            "str ip, [r0, 0x1c]",
            "strb r1, [sp, 0x14]",
            "mov r1, r4",
            "str ip, [r0, 0x20]",
            "str lr, [sp, 4]",
            "movw lr, 0x301",
            "ldr r0, [r0]",
            "strh lr, [sp, 0xa]",
            "str ip, [sp, 0xc]",
            "bl sym.imp.send",
            "add sp, sp, 0x1c",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.incomplete_command": {
        "function_address": "0x0000cad4",
        "instructions": [
            "ldr r0, aav.0x0000a8d0",
            "mov r1, 1",
            "push {r3, lr}",
            "mov r2, 0x30",
            "ldr r3, [0x0000cb0c]",
            "add r0, pc, r0",
            "ldr ip, [0x0000cb10]",
            "ldr r3, [r0, r3]",
            "add r0, r0, ip",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "sym.getcmdline": {
        "function_address": "0x0000d720",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldr r8, aav.0x00009c78",
            "mov r7, r0",
            "mov fp, r2",
            "str r1, [sp, 8]",
            "bl sym.imp.getline",
            "subs r5, r0, 0",
            "add r8, pc, r8",
            "blt 0xd874",
            "ldr sl, [0x0000d8bc]",
            "mov r1, 0x23",
            "ldr r4, [r7]",
            "ldr r3, [r8, sl]",
            "mov r0, r4",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0xd8b0",
            "mov r2, 0",
            "ldr r3, [0x0000d8c0]",
            "strb r2, [r0]",
            "ldr r4, [r7]",
            "add r3, r8, r3",
            "add r2, sp, 0x1c",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0x18",
            "mov r6, 0",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "mov r0, r4",
            "b 0xd858",
            "str r6, [sp, 0x1c]",
            "sub r5, r5, 2",
            "str r6, [sp, 0x18]",
            "bl sym.imp.getline",
            "ldr r3, [r8, sl]",
            "mov r1, 0x23",
            "mov sb, r0",
            "add r5, r5, sb",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "strb r6, [r4]",
            "ldr r4, [sp, 0x1c]",
            "mov r0, r4",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "strbne r6, [r0]",
            "ldr r3, [r7]",
            "ldrne r4, [sp, 0x1c]",
            "mov r0, r3",
            "str r3, [sp]",
            "bl sym.imp.strlen",
            "mov r1, r0",
            "mov r0, r4",
            "str r1, [sp, 4]",
            "bl sym.imp.strlen",
            "ldr r1, [sp, 4]",
            "ldr r3, [sp]",
            "ldr r2, [sp, 8]",
            "add r1, r1, r0",
            "mov r0, r3",
            "add r3, r1, 1",
            "mov r1, r3",
            "str r3, [r2]",
            "bl sym.imp.realloc",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [r7]",
            "beq 0xd880",
            "ldr r1, [sp, 0x1c]",
            "bl sym.imp.strcat",
            "ldr r0, [sp, 0x1c]",
            "bl sym.imp.free",
            "ldr r0, [r7]",
            "ldr r1, [sp, 0xc]",
            "bl sym.imp.strstr",
            "subs r4, r0, 0",
            "mov r2, fp",
            "ldr r1, [sp, 0x14]",
            "ldr r0, [sp, 0x10]",
            "bne 0xd7a8",
            "mov r0, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [0x0000d8c4]",
            "mov r1, 1",
            "ldr r0, [0x0000d8c8]",
            "mov r2, 0xe",
            "mvn r5, 0",
            "ldr r3, [r8, r3]",
            "add r0, r8, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "ldr r3, [sp, 8]",
            "str r4, [r3]",
            "b 0xd874",
            "ldr r3, [0x0000d8c0]",
            "b 0xd784"
        ]
    },
    "sym.imp.getline": {
        "function_address": "0x0000994c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb50]!"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00009838",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc08]!"
        ]
    },
    "sym.imp.strcat": {
        "function_address": "0x000097cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc50]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00009994",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb20]!"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x000097fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc30]!"
        ]
    },
    "sym.get_s8": {
        "function_address": "0x0000c554",
        "instructions": [
            "push {r4, r5, lr}",
            "subs r4, r1, 0",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "bne 0xc574",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "beq 0xc568",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0xc568",
            "cmp r4, r3",
            "beq 0xc568",
            "ldrsb r3, [r3]",
            "cmp r0, 0x7f",
            "cmple r3, 0",
            "moveq r3, 0",
            "movne r3, 1",
            "bne 0xc568",
            "cmn r0, 0x80",
            "strbge r0, [r5]",
            "movge r0, r3",
            "bge 0xc56c",
            "b 0xc568"
        ]
    },
    "sym.inet_addr_match": {
        "function_address": "0x0000cc50",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "asrs r7, r2, 5",
            "mov r4, r2",
            "mov r5, r0",
            "mov r6, r1",
            "bne 0xcca0",
            "ands r0, r4, 0x1f",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "add r7, r7, 2",
            "rsb r0, r0, 0x20",
            "ldr r2, [r6, r7, lsl 2]",
            "mvn r4, 0",
            "ldr r3, [r5, r7, lsl 2]",
            "lsl r0, r4, r0",
            "rev r0, r0",
            "eor r3, r2, r3",
            "tst r0, r3",
            "moveq r0, 0",
            "movne r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}",
            "add r0, r0, 8",
            "add r1, r1, 8",
            "lsl r2, r7, 2",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "beq 0xcc68",
            "mvn r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.rtnl_listen": {
        "function_address": "0x0000b770",
        "instructions": [
            "ldr ip, [0x0000ba04]",
            "mov r3, 0",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2040",
            "sub sp, sp, 4",
            "ldr sb, aav.0x0000bc14",
            "mov r5, r2",
            "mov r6, r1",
            "str ip, [sp, 0xc]",
            "add ip, sp, 0x2000",
            "add ip, ip, 0x10",
            "ldr r2, [0x0000ba0c]",
            "str ip, [sp]",
            "add sb, pc, sb",
            "ldr r1, [sp]",
            "add r4, sp, 0x2000",
            "add r2, sb, r2",
            "add ip, sp, 0x2000",
            "str r2, [sp, 8]",
            "add r4, r4, 0x2c",
            "add r2, r1, 0xc",
            "str r0, [sp, 4]",
            "str r3, [r2], 4",
            "mov r0, 0x10",
            "str r3, [r2], 4",
            "add fp, sp, 0x40",
            "str r3, [r2], 4",
            "add r1, r4, 8",
            "str r3, [r2]",
            "add r2, sp, 0x2000",
            "add r2, r2, 0x38",
            "str r3, [ip, 0x2c]",
            "sub fp, fp, 0x30",
            "strh r0, [ip, 0x2c]",
            "str r2, [ip, 0x18]",
            "mov r0, 0xc",
            "mov r2, 1",
            "str r4, [ip, 0x10]",
            "str r0, [ip, 0x14]",
            "str r2, [ip, 0x1c]",
            "str r3, [ip, 0x30]",
            "str r3, [r1]",
            "str fp, [ip, 0x38]",
            "ldr r2, [sp, 4]",
            "mov ip, 0x2000",
            "add r3, sp, ip",
            "ldr r1, [sp]",
            "str ip, [r3, 0x3c]",
            "ldr r0, [r2]",
            "mov r2, 0",
            "bl sym.imp.recvmsg",
            "subs r7, r0, 0",
            "blt 0xb8d8",
            "beq 0xb9a8",
            "add r0, sp, 0x2000",
            "ldr r2, [r0, 0x14]",
            "cmp r2, 0xc",
            "bne 0xb9d0",
            "cmp r7, 0xf",
            "bls 0xb924",
            "ldr r8, [fp]",
            "mov sl, fp",
            "sub r2, r8, 0x10",
            "cmp r7, r8",
            "movge r3, 0",
            "movlt r3, 1",
            "orrs r3, r3, r2, lsr 31",
            "beq 0xb8b4",
            "b 0xb950",
            "add r8, r8, 3",
            "bic r8, r8, 3",
            "rsb r7, r8, r7",
            "cmp r7, 0xf",
            "bls 0xb924",
            "ldr r8, [sl, r8]!",
            "sub r2, r8, 0x10",
            "cmp r8, r7",
            "movle r3, 0",
            "movgt r3, 1",
            "orrs r3, r3, r2, lsr 31",
            "bne 0xb950",
            "mov r0, r4",
            "mov r1, sl",
            "mov r2, r5",
            "blx r6",
            "cmp r0, 0",
            "bge 0xb884",
            "add sp, sp, 0x44",
            "add sp, sp, 0x2000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "cmpne r3, 0xb",
            "beq 0xb81c",
            "mov r7, r0",
            "mov r0, r3",
            "ldr r3, [0x0000ba04]",
            "ldr r3, [sb, r3]",
            "ldr r4, [r3]",
            "bl sym.imp.strerror",
            "ldr r1, [0x0000ba10]",
            "mov r2, r0",
            "ldr r3, [r7]",
            "mov r0, r4",
            "add r1, sb, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xb8cc",
            "add r2, sp, 0x2000",
            "ldr r3, [r2, 0x28]",
            "tst r3, 0x20",
            "bne 0xb988",
            "cmp r7, 0",
            "beq 0xb81c",
            "ldr r3, [0x0000ba04]",
            "mov r2, r7",
            "ldr r1, [0x0000ba14]",
            "ldr r3, [sb, r3]",
            "b 0xb9dc",
            "add r1, sp, 0x2000",
            "ldr r3, [r1, 0x28]",
            "tst r3, 0x20",
            "beq 0xb9f0",
            "ldr r3, [0x0000ba04]",
            "mov r1, 1",
            "ldr r0, [0x0000ba18]",
            "mov r2, 0x12",
            "ldr r3, [sb, r3]",
            "add r0, sb, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb8cc",
            "ldr ip, [sp, 0xc]",
            "mov r1, 1",
            "ldr r0, [sp, 8]",
            "mov r2, 0x12",
            "ldr r3, [sb, ip]",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xb81c",
            "ldr r3, [0x0000ba04]",
            "mov r1, 1",
            "ldr r0, [0x0000ba1c]",
            "mov r2, 0xf",
            "ldr r3, [sb, r3]",
            "add r0, sb, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mvn r0, 0",
            "b 0xb8cc",
            "ldr r3, [0x0000ba04]",
            "ldr r1, [0x0000ba20]",
            "ldr r3, [sb, r3]",
            "add r1, sb, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r3, [0x0000ba04]",
            "mov r2, r8",
            "ldr r1, [0x0000ba24]",
            "ldr r3, [sb, r3]",
            "b 0xb9dc"
        ]
    },
    "sym.get_prefix": {
        "function_address": "0x0000ca00",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "cmp r2, 0x11",
            "ldr r4, aav.0x0000a9a8",
            "mov r5, r1",
            "add r4, pc, r4",
            "beq 0xca48",
            "bl sym.get_prefix_1",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [0x0000ca60]",
            "mov r2, r5",
            "ldr r1, [0x0000ca64]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r3, [0x0000ca60]",
            "mov r2, r1",
            "ldr r1, [0x0000ca68]",
            "ldr r3, [r4, r3]",
            "b 0xca34"
        ]
    },
    "sym.missarg": {
        "function_address": "0x0000cb14",
        "instructions": [
            "push {r3, lr}",
            "mov r2, r0",
            "ldr r3, aav.0x0000a894",
            "ldr r1, [0x0000cb48]",
            "add r3, pc, r3",
            "ldr r0, [r3, r1]",
            "ldr r1, [0x0000cb4c]",
            "ldr r0, [r0]",
            "add r1, r3, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "entry.init0": {
        "function_address": "0x00009a2c",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00009a6c]",
            "cmp r3, 0",
            "beq 0x9a48",
            "ldr r0, [0x00009a70]",
            "ldr r1, [0x00009a74]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x00009a78]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00009a7c]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x0000997c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb30]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x000099e8",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, loc.__bss_start__",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x00009a24]",
            "cmp r3, 0",
            "beq 0x9a10",
            "ldr r0, [0x00009a28]",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, loc.__bss_start__",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x000097e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xc40]!"
        ]
    },
    "fcn.0000a1e0": {
        "function_address": "0x0000a1e0",
        "instructions": [
            "ldrh r3, [r1, 4]",
            "ldr r0, case.0xd1b4.1",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x430",
            "cmp r3, 0x10",
            "sub sp, sp, 0xc",
            "add r0, pc, r0",
            "mov r4, r2",
            "str r0, [sp, 4]",
            "ldr r2, [r1]",
            "bne 0xa5a8",
            "ldrb r3, [r1, 0x10]",
            "add ip, r1, 0x10",
            "sub r1, r3, 1",
            "uxtb r1, r1",
            "cmp r3, 7",
            "cmpne r1, 2",
            "bhi 0xa418",
            "subs r3, r2, 0x14",
            "bmi 0xa5cc",
            "add r0, sp, 0x400",
            "add r2, ip, 4",
            "add r0, r0, 0xc",
            "mov r1, 7",
            "bl sym.parse_rtattr",
            "ldr r2, [sp, 0x414]",
            "cmp r2, 0",
            "beq 0xa268",
            "ldr r1, [0x0000a5fc]",
            "mov r0, r4",
            "ldr r3, [sp, 4]",
            "add r2, r2, 4",
            "add r1, r3, r1",
            "bl sym.imp.fprintf",
            "ldr r3, [sp, 0x410]",
            "cmp r3, 0",
            "beq 0xa28c",
            "ldr r1, [0x0000a600]",
            "mov r0, r4",
            "ldr ip, [sp, 4]",
            "ldrh r2, [r3, 4]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "ldr r5, [sp, 0x418]",
            "cmp r5, 0",
            "moveq sl, 1",
            "beq 0xa2b8",
            "ldr r3, [sp, 4]",
            "mov r0, r4",
            "ldr r1, [0x0000a604]",
            "ldr r2, [r5, 4]",
            "add r1, r3, r1",
            "bl sym.imp.fprintf",
            "ldr sl, [r5, 4]",
            "ldr r3, [sp, 0x41c]",
            "cmp r3, 0",
            "beq 0xa2dc",
            "ldr r1, [0x0000a608]",
            "mov r0, r4",
            "ldr ip, [sp, 4]",
            "ldr r2, [r3, 4]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "ldr r3, [sp, 0x420]",
            "cmp r3, 0",
            "beq 0xa300",
            "ldr r2, [r3, 4]",
            "mov r0, r4",
            "ldr r1, [0x0000a60c]",
            "ldr r3, [sp, 4]",
            "add r1, r3, r1",
            "bl sym.imp.fprintf",
            "mov r0, 0xa",
            "mov r1, r4",
            "bl sym.imp.fputc",
            "ldr r2, [sp, 0x424]",
            "cmp r2, 0",
            "beq 0xa464",
            "ldrh r3, [r2]",
            "add r6, sp, 8",
            "mov r1, 0x100",
            "add r2, r2, 4",
            "mov r0, r6",
            "ldr r7, [0x0000a610]",
            "sub r3, r3, 4",
            "ldr fp, [0x0000a614]",
            "bl sym.parse_rtattr",
            "ldr ip, [sp, 4]",
            "mov r1, 1",
            "ldr r0, [0x0000a618]",
            "mov r2, 0x16",
            "mov r3, r4",
            "ldr sb, [0x0000a61c]",
            "add r8, sp, 0x420",
            "mov r5, 0",
            "add r0, ip, r0",
            "add r8, r8, 0xc",
            "bl sym.imp.fwrite",
            "ldr r0, [sp, 4]",
            "add r7, r0, r7",
            "add fp, r0, fp",
            "add sb, r0, sb",
            "b 0xa3cc",
            "ldrh r3, [r3]",
            "sub r3, r3, 4",
            "bl sym.parse_rtattr",
            "ldr r3, [sp, 0x430]",
            "mov r1, sb",
            "mov r0, r4",
            "cmp r3, 0",
            "beq 0xa3a4",
            "ldr r2, [r3, 4]",
            "bl sym.imp.fprintf",
            "ldr r3, [sp, 0x434]",
            "cmp r3, 0",
            "cmpne sl, 1",
            "bhi 0xa448",
            "mov r0, 0xa",
            "mov r1, r4",
            "bl sym.imp.fputc",
            "add r5, r5, 1",
            "cmp r5, 0x100",
            "beq 0xa458",
            "ldr r3, [r6], 4",
            "mov r2, r5",
            "mov r1, r7",
            "mov r0, r4",
            "cmp r3, 0",
            "beq 0xa3c0",
            "bl sym.imp.fprintf",
            "ldr r3, [r6, -4]",
            "mov r1, 2",
            "mov r0, r8",
            "cmp r3, 0",
            "add r2, r3, 4",
            "bne 0xa37c",
            "mov r1, 1",
            "mov r2, 0x17",
            "mov r3, r4",
            "mov r0, fp",
            "bl sym.imp.fwrite",
            "b 0xa3b4",
            "cmp r3, 8",
            "beq 0xa228",
            "ldr r0, [sp, 4]",
            "mov r2, r3",
            "ldr r3, [0x0000a620]",
            "ldr r1, [0x0000a624]",
            "ldr r3, [r0, r3]",
            "add r1, r0, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r0, 0",
            "b 0xa59c",
            "mov r0, r4",
            "ldr r1, [r3, 4]",
            "bl sym.print_ctrl_cmd_flags",
            "b 0xa3b4",
            "mov r0, 0xa",
            "mov r1, r4",
            "bl sym.imp.fputc",
            "ldr r2, [sp, 0x428]",
            "cmp r2, 0",
            "beq 0xa590",
            "ldrh r3, [r2]",
            "add r6, sp, 8",
            "mov r1, 0x100",
            "add r2, r2, 4",
            "mov r0, r6",
            "ldr r7, [0x0000a610]",
            "sub r3, r3, 4",
            "ldr fp, [0x0000a628]",
            "bl sym.parse_rtattr",
            "ldr ip, [sp, 4]",
            "mov r1, 1",
            "ldr r0, [0x0000a62c]",
            "mov r2, 0x13",
            "mov r3, r4",
            "ldr sl, [0x0000a630]",
            "ldr sb, [0x0000a61c]",
            "add r8, sp, 0x420",
            "add r0, ip, r0",
            "mov r5, 0",
            "bl sym.imp.fwrite",
            "ldr r0, [sp, 4]",
            "add r8, r8, 0xc",
            "add r7, r0, r7",
            "add fp, r0, fp",
            "add sl, r0, sl",
            "add sb, r0, sb",
            "b 0xa538",
            "ldrh r3, [r3]",
            "sub r3, r3, 4",
            "bl sym.parse_rtattr",
            "ldr r3, [sp, 0x434]",
            "mov r1, sb",
            "mov r0, r4",
            "cmp r3, 0",
            "beq 0xa504",
            "ldr r2, [r3, 4]",
            "bl sym.imp.fprintf",
            "ldr r3, [sp, 0x430]",
            "mov r0, r4",
            "mov r1, sl",
            "cmp r3, 0",
            "add r2, r3, 4",
            "beq 0xa520",
            "bl sym.imp.fprintf",
            "mov r0, 0xa",
            "mov r1, r4",
            "bl sym.imp.fputc",
            "add r5, r5, 1",
            "cmp r5, 0x100",
            "beq 0xa584",
            "ldr r3, [r6], 4",
            "mov r2, r5",
            "mov r1, r7",
            "mov r0, r4",
            "cmp r3, 0",
            "beq 0xa52c",
            "bl sym.imp.fprintf",
            "ldr r3, [r6, -4]",
            "mov r1, 2",
            "mov r0, r8",
            "cmp r3, 0",
            "add r2, r3, 4",
            "bne 0xa4dc",
            "mov r1, 1",
            "mov r2, 0x15",
            "mov r3, r4",
            "mov r0, fp",
            "bl sym.imp.fwrite",
            "b 0xa520",
            "mov r0, 0xa",
            "mov r1, r4",
            "bl sym.imp.fputc",
            "mov r0, r4",
            "bl sym.imp.fflush",
            "mov r0, 0",
            "add sp, sp, 0x3c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r1, [0x0000a620]",
            "ldr ip, [sp, 4]",
            "ldr r0, [r0, r1]",
            "ldr r1, [0x0000a634]",
            "ldr r0, [r0]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mov r0, 0",
            "b 0xa59c",
            "ldr r1, [sp, 4]",
            "mov r2, r3",
            "ldr r3, [0x0000a620]",
            "ldr ip, [sp, 4]",
            "ldr r3, [r1, r3]",
            "ldr r1, [0x0000a638]",
            "ldr r0, [r3]",
            "add r1, ip, r1",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0xa59c"
        ]
    },
    "sym.imp.fputc": {
        "function_address": "0x00009904",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xd000",
            "ldr pc, [ip, 0xb80]!"
        ]
    },
    "fcn.0000a63c": {
        "function_address": "0x0000a63c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x1040",
            "sub sp, sp, 0x18",
            "mov r7, r0",
            "add r4, sp, 0x18",
            "mov sb, r1",
            "sub r4, r4, 8",
            "mov r1, 0",
            "mov sl, r2",
            "mov r0, r4",
            "movw r2, 0x1010",
            "movw r8, 0xefb8",
            "bl sym.imp.memset",
            "add ip, sp, 0x1040",
            "mov r3, 0x14",
            "add ip, ip, 0x18",
            "movt r8, 0xffff",
            "str r3, [ip, r8]",
            "add r6, sp, 0x1000",
            "mov r3, 5",
            "mov ip, 0x10",
            "strh r3, [r4, 6]",
            "add r6, r6, 0x20",
            "mov r3, 3",
            "ldr r5, aav.0x0000cd04",
            "mov r0, r6",
            "mov r1, 0",
            "mov r2, 0x10",
            "strh ip, [r4, 4]",
            "strb r3, [r4, 0x10]",
            "add r5, pc, r5",
            "bl sym.rtnl_open_byproto",
            "cmp r0, 0",
            "blt 0xa92c",
            "cmp r7, 3",
            "beq 0xa75c",
            "cmp r7, 0",
            "movne r7, 0",
            "beq 0xa6f0",
            "mov r0, r6",
            "bl sym.rtnl_close",
            "mov r0, r7",
            "add sp, sp, 0x58",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "add r3, sp, 0x1040",
            "add ip, sp, 0x1000",
            "add r3, r3, 0x18",
            "mov r0, r6",
            "ldr r2, [r3, r8]",
            "mov r1, r4",
            "ldr r3, [ip, 0x3c]",
            "movw ip, 0x301",
            "strh ip, [r4, 6]",
            "add ip, sp, 0x1000",
            "add r3, r3, 1",
            "str r3, [ip, 0x3c]",
            "str r3, [ip, 0x40]",
            "str r3, [r4, 8]",
            "bl sym.rtnl_send",
            "cmp r0, 0",
            "blt 0xa884",
            "ldr r2, [0x0000a958]",
            "mov r0, r6",
            "ldr r1, [0x0000a95c]",
            "mov r3, r7",
            "str r7, [sp]",
            "ldr r2, [r5, r2]",
            "add r1, r5, r1",
            "ldr r2, [r2]",
            "bl sym.rtnl_dump_filter",
            "b 0xa6d8",
            "cmp sb, 2",
            "bne 0xa8dc",
            "ldr r1, [0x0000a960]",
            "ldr r0, [sl]",
            "add r1, r5, r1",
            "bl sym.matches",
            "cmp r0, 0",
            "bne 0xa828",
            "add r7, sp, 0x1040",
            "ldr r1, [sl, 4]",
            "add r7, r7, 4",
            "mov r2, 0xf",
            "mov r0, r7",
            "bl sym.imp.strncpy",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "mov r1, 0x80",
            "add ip, r0, 1",
            "mov r2, sb",
            "mov r0, r4",
            "mov r3, r7",
            "str ip, [sp]",
            "bl sym.addattr_l",
            "mov r7, 0",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r7",
            "mov r3, r7",
            "stm sp, {r4, r7}",
            "str r7, [sp, 8]",
            "bl sym.rtnl_talk",
            "cmp r0, r7",
            "blt 0xa898",
            "ldr r3, [0x0000a958]",
            "mov r0, r7",
            "mov r1, r4",
            "ldr r3, [r5, r3]",
            "ldr r2, [r3]",
            "bl fcn.0000a1e0",
            "cmp r0, 0",
            "bge 0xa6d8",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a968]",
            "mov r2, 0x10",
            "mvn r7, 0",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xa6d8",
            "ldr r1, [0x0000a96c]",
            "ldr r0, [sl]",
            "add r1, r5, r1",
            "bl sym.matches",
            "subs r2, r0, 0",
            "bne 0xa904",
            "add r7, sp, 0x1040",
            "ldr r1, [sl, 4]",
            "add r7, r7, 0x16",
            "mov r0, r7",
            "bl sym.get_u16",
            "cmp r0, 0",
            "beq 0xa8c0",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a970]",
            "mov r2, 0xd",
            "mvn r7, 0",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xa6d8",
            "ldr r0, [0x0000a974]",
            "mvn r7, 0",
            "add r0, r5, r0",
            "bl sym.imp.perror",
            "b 0xa6d8",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a978]",
            "mov r2, 0x1c",
            "mvn r7, 0",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xa6d8",
            "mov r0, r4",
            "mov r1, 0x80",
            "mov r2, 1",
            "mov r3, r7",
            "str sb, [sp]",
            "bl sym.addattr_l",
            "b 0xa7b8",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a97c]",
            "mov r2, 0x17",
            "mvn r7, 0",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xa6e0",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a980]",
            "mov r2, 0xd",
            "mvn r7, 0",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "b 0xa6d8",
            "ldr r3, [0x0000a964]",
            "mov r1, 1",
            "ldr r0, [0x0000a984]",
            "mov r2, 0x23",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mov r0, 1",
            "bl sym.imp.exit"
        ]
    },
    "sym.rtnl_send": {
        "function_address": "0x0000ae08",
        "instructions": [
            "ldr r0, [r0]",
            "mov r3, 0",
            "b sym.imp.send"
        ]
    },
    "fcn.0000e64c": {
        "function_address": "0x0000e64c",
        "instructions": [
            "push {r0, lr}",
            "bl fcn.0000e5a8",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, pc}"
        ]
    },
    "fcn.0000e5a8": {
        "function_address": "0x0000e5a8",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "lsl ip, r3, 1",
            "mvnsne ip, ip, asr 21",
            "beq 0xe600",
            "add sp, sp, 4",
            "orrs ip, r0, r1, lsl 1",
            "orrseq ip, r2, r3, lsl 1",
            "teqne r1, r3",
            "teqeq r0, r2",
            "moveq r0, 0",
            "bxeq lr",
            "cmn r0, 0",
            "teq r1, r3",
            "cmppl r1, r3",
            "cmpeq r0, r2",
            "asrhs r0, r3, 0x1f",
            "mvnlo r0, r3, asr 31",
            "orr r0, r0, 1",
            "bx lr",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "bne 0xe614",
            "orrs ip, r0, r1, lsl 12",
            "bne 0xe628",
            "lsl ip, r3, 1",
            "mvns ip, ip, asr 21",
            "bne 0xe5c4",
            "orrs ip, r2, r3, lsl 12",
            "beq 0xe5c4",
            "pop {r0}",
            "bx lr"
        ]
    },
    "fcn.0000e308": {
        "function_address": "0x0000e308",
        "instructions": [
            "teq r4, 0",
            "bne 0xe2e8",
            "and r6, r1, 0x80000000",
            "lsls r0, r0, 1",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "subeq r4, r4, 1",
            "beq 0xe2c8",
            "orr r1, r1, r6",
            "teq r5, 0",
            "bxne lr",
            "and r6, r3, 0x80000000",
            "lsls r2, r2, 1",
            "adc r3, r3, r3",
            "tst r3, 0x100000",
            "subeq r5, r5, 1",
            "beq 0xe2ec",
            "orr r3, r3, r6",
            "bx lr",
            "teq r4, ip",
            "and r5, ip, r3, lsr 20",
            "teqne r5, ip",
            "beq 0xe334",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xe2bc",
            "eor r1, r1, r3",
            "and r1, r1, 0x80000000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "orrs r6, r0, r1, lsl 1",
            "moveq r0, r2",
            "moveq r1, r3",
            "orrsne r6, r2, r3, lsl 1",
            "beq 0xe388",
            "teq r4, ip",
            "bne 0xe358",
            "orrs r6, r0, r1, lsl 12",
            "bne 0xe388",
            "teq r5, ip",
            "bne 0xe370",
            "orrs r6, r2, r3, lsl 12",
            "movne r0, r2",
            "movne r1, r3",
            "bne 0xe388",
            "eor r1, r1, r3",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf80000",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e528": {
        "function_address": "0x0000e528",
        "instructions": [
            "and r5, ip, r3, lsr 20",
            "teq r4, ip",
            "teqeq r5, ip",
            "beq 0xe388",
            "teq r4, ip",
            "bne 0xe55c",
            "orrs r4, r0, r1, lsl 12",
            "bne 0xe388",
            "teq r5, ip",
            "bne 0xe370",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xe388",
            "teq r5, ip",
            "bne 0xe578",
            "orrs r5, r2, r3, lsl 12",
            "beq 0xe324",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xe388",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xe2bc",
            "orrs r4, r0, r1, lsl 1",
            "bne 0xe370",
            "orrs r5, r2, r3, lsl 1",
            "bne 0xe324",
            "b 0xe388"
        ]
    }
}