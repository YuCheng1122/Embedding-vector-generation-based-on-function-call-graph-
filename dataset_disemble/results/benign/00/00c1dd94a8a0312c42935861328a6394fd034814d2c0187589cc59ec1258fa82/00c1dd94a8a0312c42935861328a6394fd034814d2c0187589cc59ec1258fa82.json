{
    "main": {
        "function_address": "0x00009b40",
        "instructions": [
            "cmp r0, 1",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r1",
            "ble 0x9bd0",
            "ldr r7, aav.0x00009c74",
            "mov r4, 0",
            "mov r5, r4",
            "ldr r0, [r6, 4]",
            "ldr r1, [r7, r4]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x9b98",
            "add r3, r7, r4",
            "ldr r1, [r3, 4]",
            "cmp r1, 0",
            "beq 0x9bac",
            "ldr r0, [r6, 8]",
            "cmp r0, 0",
            "beq 0x9b98",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9bac",
            "add r5, r5, 1",
            "add r4, r4, 0x10",
            "cmp r5, 7",
            "bne 0x9b5c",
            "b 0x9bd0",
            "ldr r3, aav.0x00009c74",
            "mov r0, r6",
            "add r5, r3, r5, lsl 4",
            "ldr r3, [r5, 8]",
            "blx r3",
            "cmp r0, 0",
            "movge r0, 0",
            "mvnlt r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "ldr r3, obj.stdout",
            "ldr r0, str.Usage:_ubdcmd__start____n____________set_____n____________detect_____n____________manualset_____n____________get__n____________ttl__n____________auto__n",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008a70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x718]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x000089ec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x770]!"
        ]
    },
    "entry.init0": {
        "function_address": "0x00008b44",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00008b84]",
            "cmp r3, 0",
            "beq 0x8b60",
            "ldr r0, [0x00008b88]",
            "ldr r1, [0x00008b8c]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x00008b90]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00008b94]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x0000892c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7f0]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008b00",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00008b38]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x00008b3c]",
            "cmp r3, 0",
            "beq 0x8b28",
            "ldr r0, [0x00008b40]",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, [0x00008b38]",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00008ab8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x6e8]!"
        ]
    },
    "fcn.00008b98": {
        "function_address": "0x00008b98",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "rsbs r5, r0, 1",
            "movlo r5, 0",
            "cmp r1, 0x420",
            "orrhi r5, r5, 1",
            "sub sp, sp, 0x4c",
            "cmp r5, 0",
            "mov r8, r1",
            "mov sl, r0",
            "beq 0x8bdc",
            "ldr r3, obj.stderr",
            "mov r2, sl",
            "ldr r1, str.Invalid_parameters__p__d_n",
            "ldr r0, [r3]",
            "mov r3, r8",
            "bl sym.imp.fprintf",
            "b 0x8c04",
            "mov r0, 0x10",
            "mov r1, 3",
            "mov r2, 0x1f",
            "bl sym.imp.socket",
            "subs r7, r0, 0",
            "bge 0x8c0c",
            "ldr r0, str.Netlink_socket_create_failed_n",
            "ldr r3, obj.stderr",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "mvn r6, 0",
            "b 0x8d5c",
            "add r4, sp, 0x34",
            "mov r6, 0xc",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, r6",
            "add fp, sp, 0x28",
            "bl sym.imp.memset",
            "mov r2, 0x10",
            "strh r2, [sp, 0x34]",
            "bl sym.imp.getpid",
            "mov r1, r4",
            "str r0, [sp, 0x38]",
            "mov r2, r6",
            "mov r0, r7",
            "str r5, [sp, 0x3c]",
            "bl sym.imp.bind",
            "mov r1, r5",
            "mov r2, r6",
            "mov r0, fp",
            "bl sym.imp.memset",
            "mov r3, 0x10",
            "mov r0, 0x430",
            "strh r3, [sp, 0x28]",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "ldreq r0, str.Out_of_memory_allocating_cfg_buffer_n",
            "beq 0x8bf8",
            "mov r3, 0x430",
            "add sb, sp, 0xc",
            "str r3, [r4]",
            "str r3, [sp]",
            "bl sym.imp.getpid",
            "add r2, r4, 0x10",
            "str r0, [r4, 0xc]",
            "str r2, [sp, 4]",
            "mov r0, r2",
            "mov r1, sl",
            "mov r2, r8",
            "strh r5, [r4, 6]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4]",
            "mov r1, r5",
            "mov r0, sb",
            "str r4, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "mov r2, 0x1c",
            "bl sym.imp.memset",
            "add r2, sp, 0x40",
            "mov r0, r7",
            "str r2, [sp, 0x14]",
            "mov r2, 1",
            "str r2, [sp, 0x18]",
            "mov r1, sb",
            "mov r2, r5",
            "str r6, [sp, 0x10]",
            "str fp, [sp, 0xc]",
            "bl sym.imp.sendmsg",
            "subs r6, r0, 0",
            "ldr r3, [sp]",
            "ldrlt r0, str.sendmsg:",
            "blt 0x8d2c",
            "mov r2, r3",
            "mov r1, r5",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r7",
            "mov r1, sb",
            "mov r2, r5",
            "bl sym.imp.recvmsg",
            "subs r6, r0, 0",
            "bge 0x8d3c",
            "ldr r0, str.recvmsg:",
            "bl sym.imp.perror",
            "mov r0, r4",
            "bl sym.imp.free",
            "b 0x8d5c",
            "ldr r1, [sp, 4]",
            "mov r2, r8",
            "mov r0, sl",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r0, r7",
            "bl sym.imp.close",
            "mov r0, r6",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00008a10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x758]!"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x00008a4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x730]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000089f8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "sym.imp.getpid": {
        "function_address": "0x000089a4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7a0]!"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x00008920",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7f8]!"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00008974",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7c0]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008950",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7d8]!"
        ]
    },
    "sym.imp.sendmsg": {
        "function_address": "0x00008998",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7a8]!"
        ]
    },
    "sym.imp.recvmsg": {
        "function_address": "0x00008a1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x750]!"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00008a04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x760]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00008a88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x708]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x000089e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x778]!"
        ]
    },
    "fcn.000091b4": {
        "function_address": "0x000091b4",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "ldr r0, str.wan_mtu",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.atoi",
            "mov r4, r0",
            "ldr r0, str.pppoe_mtu",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.atoi",
            "ldr r1, str.dhcp",
            "mov r5, r0",
            "ldr r0, str.wan_proto",
            "bl sym.imp.acosNvramConfig_match",
            "cmp r0, 0",
            "bne 0x9200",
            "ldr r0, str.wan_proto",
            "ldr r1, str.static",
            "bl sym.imp.acosNvramConfig_match",
            "cmp r0, 0",
            "beq 0x9214",
            "sub r3, r4, 0x268",
            "cmp r3, 0x374",
            "subls r4, r4, 0x2a",
            "bls 0x92a8",
            "b 0x928c",
            "ldr r0, str.wan_proto",
            "ldr r1, str.pppoe",
            "bl sym.imp.acosNvramConfig_match",
            "cmp r0, 0",
            "beq 0x923c",
            "sub r4, r4, 0x268",
            "cmp r4, 0x36c",
            "subls r4, r5, 0x32",
            "bls 0x92a8",
            "b 0x9294",
            "ldr r0, str.wan_proto",
            "ldr r1, str.pptp",
            "bl sym.imp.acosNvramConfig_match",
            "cmp r0, 0",
            "beq 0x9264",
            "sub r3, r4, 0x268",
            "cmp r3, 0x334",
            "subls r4, r4, 0x4e",
            "bls 0x92a8",
            "b 0x929c",
            "ldr r0, str.wan_proto",
            "ldr r1, str.l2tp",
            "bl sym.imp.acosNvramConfig_match",
            "cmp r0, 0",
            "beq 0x92a4",
            "sub r3, r4, 0x268",
            "cmp r3, 0x32c",
            "subls r4, r4, 0x50",
            "bls 0x92a8",
            "b 0x92a4",
            "movw r4, 0x23e",
            "b 0x92a8",
            "movw r4, 0x236",
            "b 0x92a8",
            "movw r4, 0x21a",
            "b 0x92a8",
            "mov r4, 0x218",
            "sub r0, r4, 8",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.acosNvramConfig_get": {
        "function_address": "0x00008a64",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x720]!"
        ]
    },
    "sym.imp.atoi": {
        "function_address": "0x00008a94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x700]!"
        ]
    },
    "sym.imp.acosNvramConfig_match": {
        "function_address": "0x00008944",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7e0]!"
        ]
    },
    "fcn.00008f84": {
        "function_address": "0x00008f84",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x650",
            "sub sp, sp, 0xc",
            "mov fp, r2",
            "mov r2, 0x45",
            "mov r5, 0",
            "mov sl, r3",
            "ldr r3, [sp, 0x680]",
            "strb r2, [r0]",
            "add r2, sp, 0x600",
            "strb r5, [r0, 1]",
            "mov sb, r1",
            "ldrh r8, [r2, 0x84]",
            "add r7, sp, 0x650",
            "mov r4, r0",
            "add r7, r7, 4",
            "add r6, r4, 0x14",
            "add r2, r8, 0x1c",
            "add r8, r8, 8",
            "ubfx r1, r2, 8, 8",
            "orr r2, r1, r2, lsl 8",
            "uxth r2, r2",
            "str r2, [r0, 2]",
            "ldr r2, [0x00009100]",
            "ldr r2, [r2]",
            "ubfx r1, r2, 8, 8",
            "orr r2, r1, r2, lsl 8",
            "mov r1, 0x14",
            "uxth r2, r2",
            "str r2, [r0, 4]",
            "ldr r2, [0x00009104]",
            "str r5, [r0, 6]",
            "ldrb r2, [r2, 0x26]",
            "str r5, [r0, 0xa]",
            "str fp, [r0, 0x10]",
            "strb r2, [r0, 8]",
            "mov r2, 0x11",
            "strb r2, [r0, 9]",
            "str sb, [r0, 0xc]",
            "str r3, [sp, 4]",
            "bl fcn.00008d80",
            "mov r2, 2",
            "str r0, [sp, 0x654]",
            "mov r1, r7",
            "add r0, r4, 0xa",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 4]",
            "ubfx r2, sl, 8, 8",
            "orr sl, r2, sl, lsl 8",
            "strh r5, [r6, 6]",
            "ubfx r2, r3, 8, 8",
            "strh sl, [r4, 0x14]",
            "orr r3, r2, r3, lsl 8",
            "add sl, r4, 0x1b",
            "strh r3, [r6, 2]",
            "ubfx r3, r8, 8, 8",
            "orr r8, r3, r8, lsl 8",
            "uxth r8, r8",
            "strh r8, [r6, 4]",
            "b 0x908c",
            "mov r0, r5",
            "mov r1, 0x17",
            "add r5, r5, 1",
            "bl sym.imp.__aeabi_idivmod",
            "add r1, r1, 0x61",
            "strb r1, [sl, 1]!",
            "ldr r3, [sp, 0x684]",
            "cmp r5, r3",
            "bne 0x9074",
            "add sl, sp, 8",
            "mov r1, 0",
            "mov r0, sl",
            "movw r2, 0x64c",
            "bl sym.imp.memset",
            "mov r3, 0x11",
            "add r2, r5, 8",
            "mov r1, r6",
            "add r0, sl, 0xc",
            "strb r3, [sp, 0x11]",
            "str sb, [sp, 8]",
            "str fp, [sp, 0xc]",
            "str r8, [sp, 0x12]",
            "bl sym.imp.memcpy",
            "add r1, r5, 0x14",
            "mov r0, sl",
            "bl fcn.00008d80",
            "add r1, sp, 0x650",
            "str r0, [r7]",
            "add r1, r1, 4",
            "add r0, r4, 0x1a",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "add sp, sp, 0x25c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00008d80": {
        "function_address": "0x00008d80",
        "instructions": [
            "mov r3, 0",
            "sub sp, sp, 8",
            "strh r3, [sp, 6]",
            "mov r3, 0",
            "b 0x8da0",
            "ldrh r2, [r0], 2",
            "sub r1, r1, 2",
            "add r3, r3, r2",
            "cmp r1, 1",
            "bgt 0x8d94",
            "ldrbeq r2, [r0]",
            "strbeq r2, [sp, 6]",
            "ldrheq r2, [sp, 6]",
            "addeq r3, r3, r2",
            "uxth r2, r3",
            "add r3, r2, r3, asr 16",
            "add r3, r3, r3, asr 16",
            "mvn r0, r3",
            "uxth r0, r0",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.imp.__aeabi_idivmod": {
        "function_address": "0x00008a7c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x710]!"
        ]
    },
    "fcn.000092d0": {
        "function_address": "0x000092d0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r2, 0x10",
            "ldr r5, [0x00009394]",
            "mov r1, 0",
            "mov r3, 0x64",
            "ldr r4, [0x00009398]",
            "mov r0, r5",
            "str r3, [r4, 8]",
            "bl sym.imp.memset",
            "ldr r0, str.wan_ipaddr",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.inet_addr",
            "str r0, [r4, 0x10]",
            "bl sym.imp.getpid",
            "mov r3, 0x14",
            "str r0, [r4, 0x18]",
            "str r3, [r4, 4]",
            "mov r0, 0",
            "ldr r3, [0x000093a0]",
            "strh r3, [r4, 0x1c]",
            "strh r3, [r4, 0x1e]",
            "mov r3, 2",
            "strh r3, [r5]",
            "bl sym.imp.time",
            "bl sym.imp.srand",
            "bl sym.imp.rand",
            "movw r1, 0x7530",
            "bl sym.imp.__aeabi_idivmod",
            "add r1, r1, 0x2700",
            "ldr r0, str.www.netgear.com",
            "add r1, r1, 0x10",
            "strh r1, [r4, 0x24]",
            "bl sym.imp.gethostbyname",
            "subs r3, r0, 0",
            "bne 0x9374",
            "ldr r0, str.wan_gateway",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.inet_addr",
            "str r0, [r5, 4]",
            "str r0, [r4, 0xc]",
            "pop {r3, r4, r5, pc}",
            "ldr r2, [r3, 0x10]",
            "add r0, r5, 4",
            "ldr r1, [r2]",
            "ldr r2, [r3, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r5, 4]",
            "str r3, [r4, 0xc]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.inet_addr": {
        "function_address": "0x00008a28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x748]!"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x000089d4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x780]!"
        ]
    },
    "sym.imp.srand": {
        "function_address": "0x00008aa0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x6f8]!"
        ]
    },
    "sym.imp.rand": {
        "function_address": "0x00008a58",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x728]!"
        ]
    },
    "sym.imp.gethostbyname": {
        "function_address": "0x00008938",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7e8]!"
        ]
    },
    "fcn.00009108": {
        "function_address": "0x00009108",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x420",
            "sub sp, sp, 4",
            "mov r5, r0",
            "mov r1, 0",
            "mov r2, 0x420",
            "mov r0, sp",
            "mov r4, sp",
            "bl sym.imp.memset",
            "ldr lr, [0x000091a8]",
            "mov r3, 4",
            "str r3, [sp, 0x1c]",
            "mov r3, 2",
            "str r3, [sp, 0x14]",
            "add ip, sp, 0x20",
            "str r5, [sp, 0x10]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1}",
            "stm ip, {r0, r1}",
            "mov r0, sp",
            "mov r1, 0x420",
            "bl fcn.00008b98",
            "cmp r0, 0",
            "blt 0x9198",
            "ldr r3, [sp, 0x18]",
            "cmp r3, 1",
            "moveq r0, 0",
            "beq 0x919c",
            "ldr r3, obj.stderr",
            "add r2, sp, 0x20",
            "ldr r1, aav.0x00009ce4",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "add sp, sp, 0x24",
            "add sp, sp, 0x400",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.000094c8": {
        "function_address": "0x000094c8",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 2",
            "mov r1, 3",
            "mov r2, 0xff",
            "bl sym.imp.socket",
            "cmp r0, 0",
            "popge {r3, pc}",
            "ldr r0, str.create_socket_fail",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r3, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008aac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x6f0]!"
        ]
    },
    "fcn.000094f8": {
        "function_address": "0x000094f8",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x640",
            "ldr r4, [0x00009568]",
            "sub sp, sp, 0xc",
            "add r5, sp, 8",
            "mov r0, r5",
            "ldrh r2, [r4, 0x1e]",
            "ldrh r3, [r4, 0x1c]",
            "ldr r1, [r4, 0x10]",
            "str r2, [sp]",
            "ldr r2, [r4, 8]",
            "str r2, [sp, 4]",
            "ldr r2, [r4, 0xc]",
            "bl fcn.00008f84",
            "ldr r3, [0x0000956c]",
            "mov r1, r5",
            "ldr r2, [r4, 8]",
            "str r3, [sp]",
            "mov r3, 0x10",
            "str r3, [sp, 4]",
            "add r2, r2, 0x1c",
            "ldr r3, [0x00009570]",
            "ldr r0, [r3, 4]",
            "mov r3, 0",
            "bl sym.imp.sendto",
            "add sp, sp, 0x24c",
            "add sp, sp, 0x400",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.sendto": {
        "function_address": "0x0000898c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7b0]!"
        ]
    },
    "fcn.000093ac": {
        "function_address": "0x000093ac",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "ldr r4, [0x0000947c]",
            "ldr r5, [0x00009480]",
            "bl fcn.000091b4",
            "mov r2, 0x10",
            "mov r1, 0",
            "str r0, [r4, 8]",
            "add r0, r5, 0x10",
            "bl sym.imp.memset",
            "ldr r0, str.wan_ipaddr",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.inet_addr",
            "str r0, [r4, 0x10]",
            "bl sym.imp.getpid",
            "mov r3, 0x14",
            "str r0, [r4, 0x18]",
            "str r3, [r4, 4]",
            "mov r0, 0",
            "ldrsb r3, [r4, 0x26]",
            "sub r3, r3, 0x7d00",
            "sub r3, r3, 0x66",
            "uxth r3, r3",
            "strh r3, [r4, 0x1c]",
            "strh r3, [r4, 0x1e]",
            "mov r3, 2",
            "strh r3, [r5, 0x10]",
            "bl sym.imp.time",
            "bl sym.imp.srand",
            "bl sym.imp.rand",
            "movw r1, 0x7530",
            "bl sym.imp.__aeabi_idivmod",
            "add r1, r1, 0x2700",
            "ldr r0, str.www.netgear.com",
            "add r1, r1, 0x10",
            "strh r1, [r4, 0x24]",
            "bl sym.imp.gethostbyname",
            "subs r3, r0, 0",
            "bne 0x945c",
            "ldr r0, str.wan_gateway",
            "bl sym.imp.acosNvramConfig_get",
            "bl sym.imp.inet_addr",
            "str r0, [r5, 0x14]",
            "str r0, [r4, 0xc]",
            "pop {r3, r4, r5, pc}",
            "ldr r2, [r3, 0x10]",
            "add r0, r5, 0x14",
            "ldr r1, [r2]",
            "ldr r2, [r3, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r5, 0x14]",
            "str r3, [r4, 0xc]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.00009670": {
        "function_address": "0x00009670",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x640",
            "ldr r4, [0x000096e0]",
            "sub sp, sp, 0xc",
            "add r5, sp, 8",
            "mov r0, r5",
            "ldrh r2, [r4, 0x1e]",
            "ldrh r3, [r4, 0x1c]",
            "ldr r1, [r4, 0x10]",
            "str r2, [sp]",
            "ldr r2, [r4, 8]",
            "str r2, [sp, 4]",
            "ldr r2, [r4, 0xc]",
            "bl fcn.00008f84",
            "ldr r3, [0x000096e4]",
            "mov r1, r5",
            "ldr r2, [r4, 8]",
            "str r3, [sp]",
            "mov r3, 0x10",
            "str r3, [sp, 4]",
            "add r2, r2, 0x1c",
            "ldr r3, [0x000096e8]",
            "ldr r0, [r3, 8]",
            "mov r3, 0",
            "bl sym.imp.sendto",
            "add sp, sp, 0x24c",
            "add sp, sp, 0x400",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.00009574": {
        "function_address": "0x00009574",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "ldr r6, [0x00009660]",
            "bl fcn.000092d0",
            "ldr r2, [r6, 0xc]",
            "cmp r2, 0",
            "rev r3, r2",
            "beq 0x9654",
            "and r2, r3, 0xff000000",
            "cmp r2, 0xa000000",
            "beq 0x9654",
            "lsr r2, r3, 0x14",
            "ldr r1, [0x00009664]",
            "lsl r2, r2, 0x14",
            "cmp r2, r1",
            "beq 0x9654",
            "lsr r3, r3, 0x10",
            "ldr r2, [0x00009668]",
            "lsl r3, r3, 0x10",
            "cmp r3, r2",
            "beq 0x9654",
            "mov r0, 1",
            "ldr r5, [0x0000966c]",
            "bl fcn.00009108",
            "mov r4, 1",
            "movw r7, 0x829b",
            "bl fcn.000094c8",
            "add r3, sp, 0x10",
            "mov r1, r4",
            "strb r4, [r3, -1]!",
            "mov r2, 0xb",
            "str r0, [r5, 4]",
            "str r4, [sp]",
            "bl sym.imp.setsockopt",
            "ldrh r2, [r6, 0x24]",
            "add r3, r7, 0x7d00",
            "add r3, r3, 0x66",
            "strb r4, [r6, 0x26]",
            "add r4, r4, 1",
            "strh r7, [r6, 0x1e]",
            "add r3, r3, r2",
            "uxtb r4, r4",
            "strh r3, [r6, 0x1c]",
            "add r7, r7, 1",
            "bl fcn.000094f8",
            "ldr r3, [r5]",
            "cmp r4, 0x15",
            "uxth r7, r7",
            "add r3, r3, 1",
            "str r3, [r5]",
            "bne 0x95fc",
            "ldr r3, [0x0000966c]",
            "ldr r0, [r3, 4]",
            "bl fcn.000094c4",
            "mov r0, 0",
            "b 0x9658",
            "mvn r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x000089bc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x790]!"
        ]
    },
    "fcn.000094c4": {
        "function_address": "0x000094c4",
        "instructions": [
            "b sym.imp.close"
        ]
    },
    "fcn.00008dd4": {
        "function_address": "0x00008dd4",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x420",
            "mov r1, 0",
            "mov r2, 0x420",
            "mov r0, sp",
            "mov r4, sp",
            "bl sym.imp.memset",
            "mov r3, 4",
            "mov r0, sp",
            "str r3, [sp, 0x10]",
            "mov r1, 0x420",
            "str r3, [sp, 0x1c]",
            "mov r3, 1",
            "str r3, [sp, 0x14]",
            "str r3, [sp, 0x20]",
            "bl fcn.00008b98",
            "cmp r0, 0",
            "blt 0x8e5c",
            "ldr r3, [sp, 0x18]",
            "cmp r3, 1",
            "beq 0x8e40",
            "ldr r3, obj.stderr",
            "add r2, sp, 0x20",
            "ldr r1, aav.0x00009ce4",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x8e5c",
            "ldrb r3, [sp, 0x20]",
            "ldr r2, [0x00008e70]",
            "cmp r3, 0",
            "strb r3, [r2, 0x26]",
            "movne r0, 0",
            "mvneq r0, 0",
            "b 0x8e60",
            "mvn r0, 0",
            "add sp, sp, 0x420",
            "pop {r4, pc}"
        ]
    },
    "fcn.000096ec": {
        "function_address": "0x000096ec",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "mov r5, 0",
            "bl fcn.000093ac",
            "mov r0, 5",
            "ldr r4, [0x00009770]",
            "bl fcn.00009108",
            "bl fcn.000094c8",
            "mov r1, 1",
            "add r3, sp, 0x10",
            "strb r1, [r3, -1]!",
            "mov r2, 0xb",
            "str r0, [r4, 8]",
            "str r1, [sp]",
            "ldr r6, [0x00009774]",
            "bl sym.imp.setsockopt",
            "b 0x9748",
            "ldrh r3, [r6, 0x24]",
            "add r3, r5, r3",
            "strh r3, [r6, 0x1c]",
            "bl fcn.00009670",
            "ldr r3, [r4]",
            "add r3, r3, 1",
            "str r3, [r4]",
            "ldr r3, [r6, 4]",
            "add r5, r5, 1",
            "cmp r5, r3",
            "bls 0x972c",
            "ldr r3, [0x00009770]",
            "ldr r0, [r3, 8]",
            "bl fcn.000094c4",
            "mov r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00008e74": {
        "function_address": "0x00008e74",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x420",
            "sub sp, sp, 4",
            "mov r1, 0",
            "mov r2, 0x420",
            "mov r0, sp",
            "bl sym.imp.memset",
            "mov r3, 2",
            "mov r0, sp",
            "str r3, [sp, 0x10]",
            "add r3, r3, r3",
            "str r3, [sp, 0x1c]",
            "mov r1, 0x420",
            "mov r3, 1",
            "mov r4, sp",
            "str r3, [sp, 0x14]",
            "add r5, sp, 0x20",
            "str r3, [sp, 0x20]",
            "bl fcn.00008b98",
            "cmp r0, 0",
            "blt 0x8eec",
            "ldr r3, [sp, 0x18]",
            "cmp r3, 1",
            "ldreq r0, [r5]",
            "beq 0x8ef0",
            "ldr r3, obj.stderr",
            "mov r2, r5",
            "ldr r1, aav.0x00009ce4",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "add sp, sp, 0x24",
            "add sp, sp, 0x400",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.00009494": {
        "function_address": "0x00009494",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 2",
            "mov r1, 3",
            "mov r2, 0xff",
            "bl sym.imp.socket",
            "cmp r0, 0",
            "popge {r3, pc}",
            "ldr r0, str.create_socket_fail",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r3, pc}"
        ]
    },
    "fcn.0000986c": {
        "function_address": "0x0000986c",
        "instructions": [
            "ldr r3, [0x00009980]",
            "mov r2, 0x45",
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x640",
            "sub sp, sp, 0xc",
            "mov r4, 0",
            "add r6, sp, 8",
            "ldr sl, [r3, 8]",
            "add r5, r6, 0x14",
            "add r0, r3, 0x10",
            "ldm r0, {r0, r7, r8}",
            "ldr r1, [r3, 0xc]",
            "strb r2, [sp, 8]",
            "add r2, sl, 0x1c",
            "ubfx ip, r2, 8, 8",
            "strb r4, [sp, 9]",
            "orr r2, ip, r2, lsl 8",
            "uxth r2, r2",
            "str r2, [sp, 0xa]",
            "str r4, [sp, 0xc]",
            "str r4, [sp, 0xe]",
            "ldrb r3, [r3, 0x26]",
            "str r4, [sp, 0x12]",
            "str r0, [sp, 0x14]",
            "mov r0, r6",
            "strb r3, [sp, 0x10]",
            "mov r3, 1",
            "strb r3, [sp, 0x11]",
            "str r1, [r6, 0x10]",
            "mov r1, 0x14",
            "bl fcn.00008d80",
            "mov r3, 8",
            "str r0, [sp, 0x12]",
            "strb r3, [sp, 0x1c]",
            "ubfx r3, r8, 8, 8",
            "orr r8, r3, r8, lsl 8",
            "ubfx r3, r7, 8, 8",
            "orr r7, r3, r7, lsl 8",
            "strb r4, [r5, 1]",
            "strh r8, [r5, 4]",
            "add r6, r6, 0x1b",
            "strh r7, [r5, 6]",
            "strh r4, [r5, 2]",
            "b 0x9934",
            "mov r0, r4",
            "mov r1, 0x17",
            "add r4, r4, 1",
            "bl sym.imp.__aeabi_idivmod",
            "add r1, r1, 0x61",
            "strb r1, [r6, 1]!",
            "cmp r4, sl",
            "bne 0x991c",
            "add r1, r4, 8",
            "mov r0, r5",
            "bl fcn.00008d80",
            "ldr r3, [0x00009984]",
            "add r1, sp, 8",
            "strh r0, [r5, 2]",
            "add r2, r4, 0x1c",
            "str r3, [sp]",
            "mov r3, 0x10",
            "str r3, [sp, 4]",
            "ldr r3, [0x00009988]",
            "ldr r0, [r3, 0xc]",
            "mov r3, 0",
            "bl sym.imp.sendto",
            "add sp, sp, 0x24c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    }
}