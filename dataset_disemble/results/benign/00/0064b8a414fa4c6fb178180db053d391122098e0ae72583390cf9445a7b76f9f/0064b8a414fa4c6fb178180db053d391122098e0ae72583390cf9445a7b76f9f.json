{
    "sym.ndr_print_PAC_BUFFER": {
        "function_address": "0x00003ba0",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_BUFFER",
            "push rbx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "mov edx, dword [rbp]",
            "lea rsi, str.type",
            "mov rdi, rbx",
            "call fcn.00003230",
            "test dword [rbx], 0x4000000",
            "jne 0x3c50",
            "mov edx, dword [rbp + 4]",
            "lea rsi, str._ndr_size",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov rdx, qword [rbp + 8]",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [rbx + 4]",
            "mov rsi, qword [rbp + 8]",
            "add eax, 1",
            "test rsi, rsi",
            "mov dword [rbx + 4], eax",
            "je 0x3c2c",
            "mov edx, dword [rbp]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_set_switch_value",
            "mov rdx, qword [rbp + 8]",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call fcn.00003170",
            "mov eax, dword [rbx + 4]",
            "mov edx, dword [rbp + 0x10]",
            "sub eax, 1",
            "lea rsi, str._pad",
            "mov dword [rbx + 4], eax",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "sub dword [rbx + 4], 1",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov r12d, dword [rbp]",
            "mov rdi, qword [rbp + 8]",
            "xor edx, edx",
            "mov esi, r12d",
            "call fcn.00003470",
            "cmp r12d, 1",
            "je 0x3c70",
            "mov edx, eax",
            "jmp 0x3bd7",
            "add rax, 7",
            "and rax, 0xfffffffffffffff8",
            "mov edx, eax",
            "jmp 0x3bd7"
        ]
    },
    "sym.imp.ndr_print_struct": {
        "function_address": "0x000034e0",
        "instructions": [
            "jmp qword [reloc.ndr_print_struct]"
        ]
    },
    "fcn.00003230": {
        "function_address": "0x00003230",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_TYPE]"
        ]
    },
    "sym.imp.ndr_print_uint32": {
        "function_address": "0x00003450",
        "instructions": [
            "jmp qword [reloc.ndr_print_uint32]"
        ]
    },
    "sym.imp.ndr_print_ptr": {
        "function_address": "0x000030e0",
        "instructions": [
            "jmp qword [reloc.ndr_print_ptr]"
        ]
    },
    "sym.imp.ndr_print_set_switch_value": {
        "function_address": "0x00002f30",
        "instructions": [
            "jmp qword [reloc.ndr_print_set_switch_value]"
        ]
    },
    "fcn.00003170": {
        "function_address": "0x00003170",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_INFO]"
        ]
    },
    "fcn.00003470": {
        "function_address": "0x00003470",
        "instructions": [
            "jmp qword [reloc.ndr_size_PAC_INFO]"
        ]
    },
    "sym.ndr_print_decode_pac_raw": {
        "function_address": "0x000069b0",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov ebp, edx",
            "lea rdx, str.decode_pac_raw",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov r12, rcx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test r12, r12",
            "je 0x6a78",
            "add dword [rbx + 4], 1",
            "test bpl, 0x40",
            "jne 0x6a18",
            "test bpl, 0x10",
            "jne 0x6a24",
            "and ebp, 0x20",
            "jne 0x6a59",
            "mov eax, dword [rbx + 4]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "sub eax, 1",
            "mov dword [rbx + 4], eax",
            "mov rbx, qword [rsp]",
            "add rsp, 0x18",
            "ret",
            "or dword [rbx], 0x4000000",
            "test bpl, 0x10",
            "je 0x69f0",
            "lea rdx, str.decode_pac_raw",
            "lea rsi, [0x000079b1]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "lea rsi, [0x00007c36]",
            "mov rdx, r12",
            "mov rdi, rbx",
            "call fcn.00003500",
            "sub dword [rbx + 4], 1",
            "and ebp, 0x20",
            "je 0x69f5",
            "lea rdx, str.decode_pac_raw",
            "lea rsi, [0x000079bf]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "jmp 0x69f5",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003500": {
        "function_address": "0x00003500",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_DATA_RAW]"
        ]
    },
    "sym.ndr_print_PAC_CONSTRAINED_DELEGATION": {
        "function_address": "0x000045a0",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_CONSTRAINED_DELEGATION",
            "push rbx",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x4680",
            "add dword [r12 + 4], 1",
            "lea rsi, str.proxy_target",
            "mov rdx, rbp",
            "mov rdi, r12",
            "call sym.imp.ndr_print_lsa_String",
            "mov edx, dword [rbp + 0x10]",
            "lea rsi, str.num_transited_services",
            "mov rdi, r12",
            "call sym.imp.ndr_print_uint32",
            "mov rdx, qword [rbp + 0x18]",
            "lea rsi, [0x00007a4b]",
            "mov rdi, r12",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [r12 + 4]",
            "add eax, 1",
            "cmp qword [rbp + 0x18], 0",
            "mov dword [r12 + 4], eax",
            "je 0x4671",
            "xor eax, eax",
            "lea rdx, [0x00007a4b]",
            "mov ecx, dword [rbp + 0x10]",
            "lea rsi, str._s:_ARRAY__d_",
            "mov rdi, r12",
            "call qword [r12 + 0x10]",
            "mov eax, dword [r12 + 4]",
            "mov edx, dword [rbp + 0x10]",
            "add eax, 1",
            "test edx, edx",
            "mov dword [r12 + 4], eax",
            "je 0x466e",
            "xor ebx, ebx",
            "nop dword [rax]",
            "mov edx, ebx",
            "lea rsi, [0x00007a4b]",
            "mov rdi, r12",
            "shl rdx, 4",
            "add rdx, qword [rbp + 0x18]",
            "add ebx, 1",
            "call sym.imp.ndr_print_lsa_String",
            "cmp dword [rbp + 0x10], ebx",
            "ja 0x4648",
            "mov eax, dword [r12 + 4]",
            "sub eax, 1",
            "pop rbx",
            "sub eax, 2",
            "pop rbp",
            "mov dword [r12 + 4], eax",
            "pop r12",
            "ret",
            "pop rbx",
            "pop rbp",
            "mov rdi, r12",
            "pop r12",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.imp.ndr_print_lsa_String": {
        "function_address": "0x00003390",
        "instructions": [
            "jmp qword [reloc.ndr_print_lsa_String]"
        ]
    },
    "fcn.00000010": {
        "function_address": "0x00000010",
        "instructions": [
            "add eax, dword [rax]",
            "add byte ds:[rcx], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte ss:[rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax + 0x94], dh",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "cmp byte [rax], al",
            "invalid"
        ]
    },
    "sym.ndr_pull_PAC_LOGON_INFO_CTR": {
        "function_address": "0x000047a0",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov ebx, esi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x28",
            "test esi, 0xfffffcff",
            "mov rbp, rdi",
            "jne 0x4898",
            "test bh, 1",
            "mov r12, rdx",
            "jne 0x4820",
            "and bh, 2",
            "je 0x4818",
            "mov rsi, qword [r12]",
            "test rsi, rsi",
            "je 0x4818",
            "mov rbx, qword [rbp + 0x50]",
            "mov rdi, rbp",
            "mov qword [rbp + 0x50], rsi",
            "call fcn.00003d90",
            "test eax, eax",
            "jne 0x47fd",
            "test rbx, rbx",
            "je 0x4928",
            "mov qword [rbp + 0x50], rbx",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x10]",
            "mov rbp, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "ret",
            "xor eax, eax",
            "jmp 0x47fd",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x47fd",
            "lea rsi, [rsp + 0xc]",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x47fd",
            "mov ecx, dword [rsp + 0xc]",
            "test ecx, ecx",
            "je 0x48b8",
            "mov rdi, qword [rbp + 0x50]",
            "test rdi, rdi",
            "je 0x48e0",
            "lea rdx, str.default_librpc_gen_ndr_ndr_krb5pac.c:301",
            "mov esi, 0x140",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [r12], rax",
            "jne 0x48c0",
            "lea r8, str.default_librpc_gen_ndr_ndr_krb5pac.c:301",
            "lea rcx, str.r__info",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_error",
            "jmp 0x47fd",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "call sym.imp.ndr_pull_error",
            "jmp 0x47fd",
            "mov qword [r12], 0",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x47cc",
            "jmp 0x47fd",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:301",
            "xor esi, esi",
            "mov rdi, rbp",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbp + 0x50], rax",
            "jne 0x4854",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:301",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x47fd",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:312",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_error",
            "jmp 0x47fd"
        ]
    },
    "fcn.00003d90": {
        "function_address": "0x00003d90",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbp, rsi",
            "mov qword [rsp - 8], r12",
            "mov esi, 5",
            "sub rsp, 0x28",
            "mov rbx, rdi",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x3e81",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_netr_SamInfo3",
            "test eax, eax",
            "jne 0x3e81",
            "lea rsi, [rsp + 0xc]",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x3e81",
            "mov eax, dword [rsp + 0xc]",
            "test eax, eax",
            "jne 0x3e98",
            "mov qword [rbp + 0x128], 0",
            "lea r12, [rbp + 0x130]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "mov rdx, r12",
            "call sym.imp.ndr_pull_samr_RidWithAttributeArray",
            "test eax, eax",
            "jne 0x3e81",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "jne 0x3e81",
            "mov rdx, rbp",
            "mov esi, 0x200",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_netr_SamInfo3",
            "test eax, eax",
            "jne 0x3e81",
            "mov rdx, qword [rbp + 0x128]",
            "test rdx, rdx",
            "je 0x3e71",
            "mov rbp, qword [rbx + 0x50]",
            "mov esi, 0x300",
            "mov qword [rbx + 0x50], rdx",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_dom_sid2",
            "test eax, eax",
            "jne 0x3e81",
            "test rbp, rbp",
            "je 0x3f30",
            "mov qword [rbx + 0x50], rbp",
            "mov rdx, r12",
            "mov esi, 0x200",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_samr_RidWithAttributeArray",
            "mov rbx, qword [rsp + 0x10]",
            "mov rbp, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "ret",
            "mov rdi, qword [rbx + 0x50]",
            "test rdi, rdi",
            "je 0x3ef0",
            "lea rdx, str.default_librpc_gen_ndr_ndr_krb5pac.c:146",
            "mov esi, 0x44",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [rbp + 0x128], rax",
            "jne 0x3dff",
            "lea r8, str.default_librpc_gen_ndr_ndr_krb5pac.c:146",
            "lea rcx, str.r__res_group_dom_sid",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x3e81",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:146",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x3ea1",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:146",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x3e81",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:159",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x3e81"
        ]
    },
    "sym.imp.ndr_pull_align": {
        "function_address": "0x00003490",
        "instructions": [
            "jmp qword [reloc.ndr_pull_align]"
        ]
    },
    "sym.imp.ndr_pull_generic_ptr": {
        "function_address": "0x00003200",
        "instructions": [
            "jmp qword [reloc.ndr_pull_generic_ptr]"
        ]
    },
    "sym.imp.talloc_named_const": {
        "function_address": "0x000035b0",
        "instructions": [
            "jmp qword [reloc.talloc_named_const]"
        ]
    },
    "sym.imp.ndr_pull_error": {
        "function_address": "0x000030f0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_error]"
        ]
    },
    "sym.imp.ndr_pull_trailer_align": {
        "function_address": "0x00002f90",
        "instructions": [
            "jmp qword [reloc.ndr_pull_trailer_align]"
        ]
    },
    "sym.ndr_push_PAC_DATA": {
        "function_address": "0x00005980",
        "instructions": [
            "push r13",
            "mov r13d, esi",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 8",
            "test esi, 0xfffffcff",
            "jne 0x5a88",
            "test esi, 0x100",
            "mov rbp, rdx",
            "jne 0x59f8",
            "and r13d, 0x200",
            "je 0x59e7",
            "mov r9d, dword [rbp]",
            "test r9d, r9d",
            "je 0x59e7",
            "xor ebx, ebx",
            "nop dword [rax + rax]",
            "mov eax, ebx",
            "mov esi, 0x200",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "lea rdx, [rax + rdx*8]",
            "call fcn.000032f0",
            "test eax, eax",
            "jne 0x59e9",
            "add ebx, 1",
            "cmp dword [rbp], ebx",
            "ja 0x59c0",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x59e9",
            "mov edx, dword [rbp]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x59e9",
            "mov edx, dword [rbp + 4]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x59e9",
            "mov r10d, dword [rbp]",
            "xor ebx, ebx",
            "test r10d, r10d",
            "je 0x5a67",
            "nop dword [rax]",
            "mov eax, ebx",
            "mov esi, 0x100",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "lea rdx, [rax + rdx*8]",
            "call fcn.000032f0",
            "test eax, eax",
            "jne 0x59e9",
            "add ebx, 1",
            "cmp dword [rbp], ebx",
            "ja 0x5a40",
            "mov esi, 5",
            "mov rdi, r12",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x59a7",
            "jmp 0x59e9",
            "add rsp, 8",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "mov esi, 0x14",
            "xor eax, eax",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "fcn.000032f0": {
        "function_address": "0x000032f0",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_BUFFER]"
        ]
    },
    "sym.imp.ndr_push_align": {
        "function_address": "0x000035d0",
        "instructions": [
            "jmp qword [reloc.ndr_push_align]"
        ]
    },
    "sym.imp.ndr_push_uint32": {
        "function_address": "0x00003510",
        "instructions": [
            "jmp qword [reloc.ndr_push_uint32]"
        ]
    },
    "sym.imp.ndr_push_trailer_align": {
        "function_address": "0x00003550",
        "instructions": [
            "jmp qword [reloc.ndr_push_trailer_align]"
        ]
    },
    "sym.ndr_print_PAC_Validate": {
        "function_address": "0x00006d60",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_Validate",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x6e00",
            "add dword [rbx + 4], 1",
            "test dword [rbx], 0x4000000",
            "mov edx, 3",
            "jne 0x6d95",
            "mov edx, dword [rbp]",
            "lea rsi, str.MessageType",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov edx, dword [rbp + 4]",
            "lea rsi, str.ChecksumLength",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov edx, dword [rbp + 8]",
            "lea rsi, str.SignatureType",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_int32",
            "mov edx, dword [rbp + 0xc]",
            "lea rsi, str.SignatureLength",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov rdx, qword [rbp + 0x10]",
            "mov rcx, qword [rbp + 0x18]",
            "lea rsi, str.ChecksumAndSignature",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_DATA_BLOB",
            "sub dword [rbx + 4], 1",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.imp.ndr_print_int32": {
        "function_address": "0x000034a0",
        "instructions": [
            "jmp qword [reloc.ndr_print_int32]"
        ]
    },
    "sym.imp.ndr_print_DATA_BLOB": {
        "function_address": "0x00003540",
        "instructions": [
            "jmp qword [reloc.ndr_print_DATA_BLOB]"
        ]
    },
    "sym.ndr_pull_PAC_BUFFER": {
        "function_address": "0x000038e0",
        "instructions": [
            "mov qword [rsp - 0x28], rbx",
            "mov qword [rsp - 0x20], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x18], r12",
            "mov qword [rsp - 0x10], r13",
            "mov r12d, esi",
            "mov qword [rsp - 8], r14",
            "sub rsp, 0x38",
            "test esi, 0x100",
            "mov rbp, rdx",
            "jne 0x3a00",
            "and r12d, 0x200",
            "jne 0x3940",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x10]",
            "mov rbp, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x20]",
            "mov r13, qword [rsp + 0x28]",
            "mov r14, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [rbp + 8]",
            "test rsi, rsi",
            "je 0x39f7",
            "mov rdi, rbx",
            "mov r13d, dword [rbx + 0x14]",
            "call sym.imp.ndr_pull_relative_ptr2",
            "test eax, eax",
            "jne 0x391d",
            "mov rax, qword [rbp + 8]",
            "mov r14, qword [rbx + 0x50]",
            "test rax, rax",
            "je 0x3ae8",
            "mov ecx, dword [rbp + 4]",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov qword [rbx + 0x50], rax",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_subcontext_start",
            "test eax, eax",
            "jne 0x391d",
            "mov rsi, qword [rbp + 8]",
            "mov edx, dword [rbp]",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.ndr_pull_set_switch_value",
            "test eax, eax",
            "jne 0x391d",
            "mov rdx, qword [rbp + 8]",
            "mov rdi, qword [rsp + 8]",
            "mov esi, 0x300",
            "call fcn.00003060",
            "test eax, eax",
            "jne 0x391d",
            "mov ecx, dword [rbp + 4]",
            "mov rsi, qword [rsp + 8]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_subcontext_end",
            "test eax, eax",
            "jne 0x391d",
            "test r14, r14",
            "je 0x3b58",
            "mov qword [rbx + 0x50], r14",
            "mov dword [rbx + 0x14], r13d",
            "mov dword [rbx], r12d",
            "jmp 0x391b",
            "mov esi, 4",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x391d",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call fcn.00003160",
            "test eax, eax",
            "jne 0x391d",
            "lea rdx, [rbp + 4]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x391d",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r13d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "lea rsi, [rsp + 4]",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x391d",
            "mov eax, dword [rsp + 4]",
            "test eax, eax",
            "je 0x3ab8",
            "mov rdi, qword [rbx + 0x50]",
            "test rdi, rdi",
            "je 0x3b10",
            "lea rdx, str..._librpc_ndr_ndr_krb5pac.c:91",
            "mov esi, 0x18",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [rbp + 8], rax",
            "je 0x3b78",
            "mov edx, dword [rsp + 4]",
            "mov rsi, rax",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_relative_ptr1",
            "test eax, eax",
            "je 0x3ac0",
            "jmp 0x391d",
            "mov qword [rbp + 8], 0",
            "lea rdx, [rbp + 0x10]",
            "mov dword [rbx], r13d",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "je 0x3912",
            "jmp 0x391d",
            "lea rcx, str..._librpc_ndr_ndr_krb5pac.c:109",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x391d",
            "lea rdx, str.talloc_new:_.._librpc_ndr_ndr_krb5pac.c:91",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x3a7d",
            "lea rcx, str..._librpc_ndr_ndr_krb5pac.c:91",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x391d",
            "lea rcx, str..._librpc_ndr_ndr_krb5pac.c:117",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x391d",
            "lea r8, str..._librpc_ndr_ndr_krb5pac.c:91",
            "lea rcx, str.r__info",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x391d"
        ]
    },
    "sym.imp.ndr_set_flags": {
        "function_address": "0x00003410",
        "instructions": [
            "jmp qword [reloc.ndr_set_flags]"
        ]
    },
    "sym.imp.ndr_pull_relative_ptr2": {
        "function_address": "0x000034f0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_relative_ptr2]"
        ]
    },
    "sym.imp.ndr_pull_subcontext_start": {
        "function_address": "0x000035f0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_subcontext_start]"
        ]
    },
    "sym.imp.ndr_pull_set_switch_value": {
        "function_address": "0x00003570",
        "instructions": [
            "jmp qword [reloc.ndr_pull_set_switch_value]"
        ]
    },
    "fcn.00003060": {
        "function_address": "0x00003060",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_INFO]"
        ]
    },
    "sym.imp.ndr_pull_subcontext_end": {
        "function_address": "0x00003290",
        "instructions": [
            "jmp qword [reloc.ndr_pull_subcontext_end]"
        ]
    },
    "fcn.00003160": {
        "function_address": "0x00003160",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_TYPE]"
        ]
    },
    "sym.imp.ndr_pull_uint32": {
        "function_address": "0x00003310",
        "instructions": [
            "jmp qword [reloc.ndr_pull_uint32]"
        ]
    },
    "sym.imp.ndr_pull_relative_ptr1": {
        "function_address": "0x000034c0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_relative_ptr1]"
        ]
    },
    "sym.ndr_push_PAC_Validate": {
        "function_address": "0x00006aa0",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test esi, 0xfffffcff",
            "jne 0x6b98",
            "xor eax, eax",
            "and esi, 0x100",
            "jne 0x6ae0",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "mov esi, 4",
            "mov rbp, rdx",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x6acc",
            "mov edx, 3",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x6acc",
            "mov edx, dword [rbp + 4]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x6acc",
            "mov edx, dword [rbp + 8]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_int32",
            "test eax, eax",
            "jne 0x6acc",
            "mov edx, dword [rbp + 0xc]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x6acc",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rdx, qword [rbp + 0x10]",
            "mov rcx, qword [rbp + 0x18]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_DATA_BLOB",
            "test eax, eax",
            "jne 0x6acc",
            "mov dword [rbx], r12d",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 4",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_trailer_align",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov r12, qword [rsp + 0x10]",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "sym.imp.ndr_push_int32": {
        "function_address": "0x00003070",
        "instructions": [
            "jmp qword [reloc.ndr_push_int32]"
        ]
    },
    "sym.imp.ndr_push_DATA_BLOB": {
        "function_address": "0x00002f20",
        "instructions": [
            "jmp qword [reloc.ndr_push_DATA_BLOB]"
        ]
    },
    "sym.ndr_pull_netsamlogoncache_entry": {
        "function_address": "0x00007000",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov ebx, esi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test esi, 0xfffffcff",
            "mov rbp, rdi",
            "jne 0x70d0",
            "test bh, 1",
            "mov r12, rdx",
            "jne 0x7078",
            "and bh, 2",
            "jne 0x7050",
            "xor eax, eax",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "lea rdx, [r12 + 8]",
            "mov rdi, rbp",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 0x200",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_pull_netr_SamInfo3",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x7033",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_time_t",
            "test eax, eax",
            "jne 0x7033",
            "lea rdx, [r12 + 8]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_netr_SamInfo3",
            "test eax, eax",
            "jne 0x7033",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x702c",
            "jmp 0x7033",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov r12, qword [rsp + 0x10]",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_pull_error"
        ]
    },
    "sym.imp.ndr_pull_time_t": {
        "function_address": "0x00003340",
        "instructions": [
            "jmp qword [reloc.ndr_pull_time_t]"
        ]
    },
    "sym.imp.ndr_pull_netr_SamInfo3": {
        "function_address": "0x00003120",
        "instructions": [
            "jmp qword [reloc.ndr_pull_netr_SamInfo3]"
        ]
    },
    "sym.ndr_push_PAC_CONSTRAINED_DELEGATION_CTR": {
        "function_address": "0x00004b00",
        "instructions": [
            "push r12",
            "test esi, 0xfffffcff",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "mov ebx, esi",
            "jne 0x4c78",
            "test bh, 1",
            "mov rbp, rdx",
            "jne 0x4c40",
            "and bh, 2",
            "je 0x4c33",
            "mov rbx, qword [rbp]",
            "xor eax, eax",
            "test rbx, rbx",
            "je 0x4c35",
            "mov esi, 5",
            "mov rdi, r12",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x4c35",
            "mov rdx, rbx",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_lsa_String",
            "test eax, eax",
            "jne 0x4c35",
            "mov edx, dword [rbx + 0x10]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x4c35",
            "mov rsi, qword [rbx + 0x18]",
            "mov rdi, r12",
            "call sym.imp.ndr_push_unique_ptr",
            "test eax, eax",
            "jne 0x4c35",
            "mov esi, 5",
            "mov rdi, r12",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "jne 0x4c35",
            "mov rdx, rbx",
            "mov esi, 0x200",
            "mov rdi, r12",
            "call sym.imp.ndr_push_lsa_String",
            "test eax, eax",
            "jne 0x4c35",
            "cmp qword [rbx + 0x18], 0",
            "je 0x4c33",
            "mov edx, dword [rbx + 0x10]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint3264",
            "test eax, eax",
            "jne 0x4c35",
            "mov esi, dword [rbx + 0x10]",
            "test esi, esi",
            "je 0x4c33",
            "xor ebp, ebp",
            "nop",
            "mov edx, ebp",
            "mov esi, 0x100",
            "mov rdi, r12",
            "shl rdx, 4",
            "add rdx, qword [rbx + 0x18]",
            "call sym.imp.ndr_push_lsa_String",
            "test eax, eax",
            "jne 0x4c35",
            "mov eax, dword [rbx + 0x10]",
            "add ebp, 1",
            "cmp ebp, eax",
            "jb 0x4be0",
            "test eax, eax",
            "je 0x4c33",
            "xor ebp, ebp",
            "nop dword [rax + rax]",
            "mov edx, ebp",
            "mov esi, 0x200",
            "mov rdi, r12",
            "shl rdx, 4",
            "add rdx, qword [rbx + 0x18]",
            "call sym.imp.ndr_push_lsa_String",
            "test eax, eax",
            "jne 0x4c35",
            "add ebp, 1",
            "cmp ebp, dword [rbx + 0x10]",
            "jb 0x4c10",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x4c35",
            "mov rsi, qword [rbp]",
            "mov rdi, r12",
            "call sym.imp.ndr_push_unique_ptr",
            "test eax, eax",
            "jne 0x4c35",
            "mov esi, 5",
            "mov rdi, r12",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x4b21",
            "jmp 0x4c35",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "sym.imp.ndr_push_lsa_String": {
        "function_address": "0x000033b0",
        "instructions": [
            "jmp qword [reloc.ndr_push_lsa_String]"
        ]
    },
    "sym.imp.ndr_push_unique_ptr": {
        "function_address": "0x00003100",
        "instructions": [
            "jmp qword [reloc.ndr_push_unique_ptr]"
        ]
    },
    "sym.imp.ndr_push_uint3264": {
        "function_address": "0x00003280",
        "instructions": [
            "jmp qword [reloc.ndr_push_uint3264]"
        ]
    },
    "sym.ndr_print_PAC_LOGON_INFO": {
        "function_address": "0x00004400",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_LOGON_INFO",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x44a0",
            "add dword [rbx + 4], 1",
            "lea rsi, str.info3",
            "mov rdx, rbp",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_netr_SamInfo3",
            "mov rdx, qword [rbp + 0x128]",
            "lea rsi, [0x000078f3]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [rbx + 4]",
            "mov rdx, qword [rbp + 0x128]",
            "add eax, 1",
            "test rdx, rdx",
            "mov dword [rbx + 4], eax",
            "je 0x4474",
            "lea rsi, [0x000078f3]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_dom_sid2",
            "mov eax, dword [rbx + 4]",
            "sub eax, 1",
            "lea rdx, [rbp + 0x130]",
            "lea rsi, str.res_groups",
            "mov dword [rbx + 4], eax",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_samr_RidWithAttributeArray",
            "sub dword [rbx + 4], 1",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.imp.ndr_print_netr_SamInfo3": {
        "function_address": "0x000035e0",
        "instructions": [
            "jmp qword [reloc.ndr_print_netr_SamInfo3]"
        ]
    },
    "sym.imp.ndr_print_dom_sid2": {
        "function_address": "0x00003110",
        "instructions": [
            "jmp qword [reloc.ndr_print_dom_sid2]"
        ]
    },
    "sym.imp.ndr_print_samr_RidWithAttributeArray": {
        "function_address": "0x00003210",
        "instructions": [
            "jmp qword [reloc.ndr_print_samr_RidWithAttributeArray]"
        ]
    },
    "sym.ndr_pull_PAC_INFO": {
        "function_address": "0x000055d0",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov ebx, esi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "mov rsi, rdx",
            "sub rsp, 0x38",
            "mov rbp, rdi",
            "mov r12, rdx",
            "call sym.imp.ndr_pull_get_switch_value",
            "test ebx, 0xfffffcff",
            "mov r13d, eax",
            "jne 0x5698",
            "and bh, 1",
            "jne 0x5630",
            "xor ebx, ebx",
            "mov eax, ebx",
            "mov rbp, qword [rsp + 0x20]",
            "mov rbx, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x28]",
            "mov r13, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov esi, 4",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_union_align",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x560e",
            "cmp r13d, 0xb",
            "jbe 0x56c0",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_subcontext_start",
            "test eax, eax",
            "jne 0x568e",
            "mov rdi, qword [rsp + 8]",
            "mov rsi, r12",
            "call fcn.00003c80",
            "test eax, eax",
            "jne 0x568e",
            "mov rcx, 0xffffffffffffffff",
            "xor edx, edx",
            "mov rsi, qword [rsp + 8]",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_subcontext_end",
            "test eax, eax",
            "je 0x560e",
            "mov ebx, eax",
            "jmp 0x560e",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, ebx",
            "mov esi, 0x14",
            "mov rdi, rbp",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "mov ebx, eax",
            "jmp 0x560e",
            "lea rax, [0x00007cd8]",
            "movsxd rdx, dword [rax + r13*4]",
            "add rax, rdx",
            "jmp rax",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call fcn.000033d0",
            "mov ebx, eax",
            "jmp 0x560e",
            "mov esi, 4",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x568e",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_NTTIME",
            "test eax, eax",
            "jne 0x568e",
            "lea rdx, [r12 + 8]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_uint16",
            "test eax, eax",
            "jne 0x568e",
            "movzx ecx, word [r12 + 8]",
            "lea rdx, [r12 + 0x10]",
            "xor r9d, r9d",
            "mov r8d, 1",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_charset",
            "test eax, eax",
            "jne 0x568e",
            "mov esi, 4",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x560c",
            "mov ebx, eax",
            "jmp 0x560e",
            "lea rsi, [rsp + 8]",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_subcontext_start",
            "test eax, eax",
            "jne 0x568e",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r12",
            "mov esi, 0x300",
            "call fcn.00003520",
            "test eax, eax",
            "jne 0x568e",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "jmp 0x567d",
            "lea rsi, [rsp + 8]",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_subcontext_start",
            "test eax, eax",
            "jne 0x568e",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r12",
            "mov esi, 0x300",
            "call fcn.00003010",
            "test eax, eax",
            "je 0x57bb",
            "mov ebx, eax",
            "jmp 0x560e"
        ]
    },
    "sym.imp.ndr_pull_get_switch_value": {
        "function_address": "0x00003130",
        "instructions": [
            "jmp qword [reloc.ndr_pull_get_switch_value]"
        ]
    },
    "sym.imp.ndr_pull_union_align": {
        "function_address": "0x000034d0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_union_align]"
        ]
    },
    "fcn.00003c80": {
        "function_address": "0x00003c80",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbp, rsi",
            "mov qword [rsp - 8], r12",
            "mov esi, 4",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x3ced",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_DATA_BLOB",
            "test eax, eax",
            "jne 0x3ced",
            "mov dword [rbx], r12d",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 4",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_pull_trailer_align",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "fcn.000033d0": {
        "function_address": "0x000033d0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_SIGNATURE_DATA]"
        ]
    },
    "sym.imp.ndr_pull_NTTIME": {
        "function_address": "0x000035a0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_NTTIME]"
        ]
    },
    "sym.imp.ndr_pull_uint16": {
        "function_address": "0x000031f0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_uint16]"
        ]
    },
    "sym.imp.ndr_pull_charset": {
        "function_address": "0x00003360",
        "instructions": [
            "jmp qword [reloc.ndr_pull_charset]"
        ]
    },
    "fcn.00003520": {
        "function_address": "0x00003520",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_CONSTRAINED_DELEGATION_CTR]"
        ]
    },
    "fcn.00003010": {
        "function_address": "0x00003010",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_LOGON_INFO_CTR]"
        ]
    },
    "sym.ndr_print_decode_pac_validate": {
        "function_address": "0x00006e10",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov ebp, edx",
            "lea rdx, str.decode_pac_validate",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov r12, rcx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test r12, r12",
            "je 0x6ed8",
            "add dword [rbx + 4], 1",
            "test bpl, 0x40",
            "jne 0x6e78",
            "test bpl, 0x10",
            "jne 0x6e84",
            "and ebp, 0x20",
            "jne 0x6eb9",
            "mov eax, dword [rbx + 4]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "sub eax, 1",
            "mov dword [rbx + 4], eax",
            "mov rbx, qword [rsp]",
            "add rsp, 0x18",
            "ret",
            "or dword [rbx], 0x4000000",
            "test bpl, 0x10",
            "je 0x6e50",
            "lea rdx, str.decode_pac_validate",
            "lea rsi, [0x000079b1]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "lea rsi, [0x00007c04]",
            "mov rdx, r12",
            "mov rdi, rbx",
            "call fcn.000032d0",
            "sub dword [rbx + 4], 1",
            "and ebp, 0x20",
            "je 0x6e55",
            "lea rdx, str.decode_pac_validate",
            "lea rsi, [0x000079bf]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "jmp 0x6e55",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.000032d0": {
        "function_address": "0x000032d0",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_Validate]"
        ]
    },
    "sym.ndr_pull_PAC_DATA_RAW": {
        "function_address": "0x00006640",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14d, esi",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 8",
            "test esi, 0xfffffcff",
            "jne 0x67d0",
            "test esi, 0x100",
            "mov r12, rdx",
            "jne 0x66f8",
            "and r14d, 0x200",
            "je 0x66e0",
            "mov rax, qword [r12 + 8]",
            "mov edx, dword [r12]",
            "mov r14, qword [rbp + 0x50]",
            "test rax, rax",
            "je 0x684f",
            "test edx, edx",
            "mov qword [rbp + 0x50], rax",
            "je 0x66d3",
            "sub edx, 1",
            "xor ebx, ebx",
            "lea r13, [rdx + rdx*2 + 3]",
            "shl r13, 3",
            "jmp 0x66b5",
            "mov rax, qword [r12 + 8]",
            "lea rdx, [rax + rbx]",
            "mov esi, 0x200",
            "mov rdi, rbp",
            "call fcn.00003480",
            "test eax, eax",
            "jne 0x66e2",
            "add rbx, 0x18",
            "cmp rbx, r13",
            "jne 0x66b0",
            "test r14, r14",
            "je 0x6867",
            "mov qword [rbp + 0x50], r14",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x66e2",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x66e2",
            "lea rdx, [r12 + 4]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x66e2",
            "mov rdi, qword [rbp + 0x50]",
            "mov ebx, dword [r12]",
            "test rdi, rdi",
            "je 0x67f3",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:855",
            "mov edx, ebx",
            "mov esi, 0x18",
            "call sym.imp._talloc_array",
            "test rax, rax",
            "mov qword [r12 + 8], rax",
            "je 0x6870",
            "test ebx, ebx",
            "mov r15, qword [rbp + 0x50]",
            "mov qword [rbp + 0x50], rax",
            "je 0x67a7",
            "sub ebx, 1",
            "lea r13, [rbx + rbx*2 + 3]",
            "xor ebx, ebx",
            "shl r13, 3",
            "jmp 0x6785",
            "mov rax, qword [r12 + 8]",
            "lea rdx, [rax + rbx]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call fcn.00003480",
            "test eax, eax",
            "jne 0x66e2",
            "add rbx, 0x18",
            "cmp rbx, r13",
            "jne 0x6780",
            "test r15, r15",
            "je 0x683f",
            "mov qword [rbp + 0x50], r15",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x666f",
            "jmp 0x66e2",
            "add rsp, 8",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "mov esi, 0x14",
            "xor eax, eax",
            "jmp sym.imp.ndr_pull_error",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:855",
            "xor esi, esi",
            "mov rdi, rbp",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbp + 0x50], rax",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:855",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "jne 0x6741",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "jmp sym.imp.ndr_pull_error",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:861",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "jmp 0x6822",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:867",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "jmp 0x682c",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:871",
            "jmp 0x6846",
            "pop r10",
            "mov ecx, ebx",
            "mov rdi, rbp",
            "lea r9, str.default_librpc_gen_ndr_ndr_krb5pac.c:855",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "lea r8, str.r__buffers",
            "lea rdx, str.Alloc__u___s_failed:__s_n",
            "mov esi, 0xc",
            "jmp sym.imp.ndr_pull_error"
        ]
    },
    "fcn.00003480": {
        "function_address": "0x00003480",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_BUFFER_RAW]"
        ]
    },
    "sym.imp._talloc_array": {
        "function_address": "0x000030a0",
        "instructions": [
            "jmp qword [reloc._talloc_array]"
        ]
    },
    "sym.ndr_push_PAC_LOGON_INFO_CTR": {
        "function_address": "0x00004690",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbp, rsi",
            "mov qword [rsp - 8], r12",
            "mov esi, 5",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x4065",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_netr_SamInfo3",
            "test eax, eax",
            "jne 0x4065",
            "mov rsi, qword [rbp + 0x128]",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_unique_ptr",
            "test eax, eax",
            "jne 0x4065",
            "lea r12, [rbp + 0x130]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "mov rdx, r12",
            "call sym.imp.ndr_push_samr_RidWithAttributeArray",
            "test eax, eax",
            "jne 0x4065",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "jne 0x4065",
            "mov rdx, rbp",
            "mov esi, 0x200",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_netr_SamInfo3",
            "test eax, eax",
            "jne 0x4065",
            "mov rdx, qword [rbp + 0x128]",
            "test rdx, rdx",
            "je 0x4043",
            "mov esi, 0x300",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_dom_sid2",
            "test eax, eax",
            "jne 0x4065",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 0x200",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_samr_RidWithAttributeArray",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov ebx, esi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test esi, 0xfffffcff",
            "mov rbp, rdi",
            "jne 0x4738",
            "test bh, 1",
            "mov r12, rdx",
            "jne 0x4700",
            "and bh, 2",
            "je 0x46e8",
            "mov rsi, qword [r12]",
            "test rsi, rsi",
            "je 0x46e8",
            "mov rdi, rbp",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp 0x3f90",
            "xor eax, eax",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x46ea",
            "mov rsi, qword [r12]",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_unique_ptr",
            "test eax, eax",
            "jne 0x46ea",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x46bc",
            "jmp 0x46ea",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov r12, qword [rsp + 0x10]",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "sym.imp.ndr_push_netr_SamInfo3": {
        "function_address": "0x00003250",
        "instructions": [
            "jmp qword [reloc.ndr_push_netr_SamInfo3]"
        ]
    },
    "sym.imp.ndr_push_samr_RidWithAttributeArray": {
        "function_address": "0x00003530",
        "instructions": [
            "jmp qword [reloc.ndr_push_samr_RidWithAttributeArray]"
        ]
    },
    "sym.imp.ndr_push_dom_sid2": {
        "function_address": "0x00002fd0",
        "instructions": [
            "jmp qword [reloc.ndr_push_dom_sid2]"
        ]
    },
    "sym.ndr_pull_PAC_DATA": {
        "function_address": "0x00005af0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14d, esi",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 8",
            "test esi, 0xfffffcff",
            "jne 0x5c80",
            "test esi, 0x100",
            "mov r12, rdx",
            "jne 0x5ba8",
            "and r14d, 0x200",
            "je 0x5b90",
            "mov rax, qword [r12 + 8]",
            "mov edx, dword [r12]",
            "mov r14, qword [rbp + 0x50]",
            "test rax, rax",
            "je 0x5cff",
            "test edx, edx",
            "mov qword [rbp + 0x50], rax",
            "je 0x5b83",
            "sub edx, 1",
            "xor ebx, ebx",
            "lea r13, [rdx + rdx*2 + 3]",
            "shl r13, 3",
            "jmp 0x5b65",
            "mov rax, qword [r12 + 8]",
            "lea rdx, [rax + rbx]",
            "mov esi, 0x200",
            "mov rdi, rbp",
            "call fcn.00002fe0",
            "test eax, eax",
            "jne 0x5b92",
            "add rbx, 0x18",
            "cmp rbx, r13",
            "jne 0x5b60",
            "test r14, r14",
            "je 0x5d17",
            "mov qword [rbp + 0x50], r14",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x5b92",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x5b92",
            "lea rdx, [r12 + 4]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x5b92",
            "mov rdi, qword [rbp + 0x50]",
            "mov ebx, dword [r12]",
            "test rdi, rdi",
            "je 0x5ca3",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:680",
            "mov edx, ebx",
            "mov esi, 0x18",
            "call sym.imp._talloc_array",
            "test rax, rax",
            "mov qword [r12 + 8], rax",
            "je 0x5d20",
            "test ebx, ebx",
            "mov r15, qword [rbp + 0x50]",
            "mov qword [rbp + 0x50], rax",
            "je 0x5c57",
            "sub ebx, 1",
            "lea r13, [rbx + rbx*2 + 3]",
            "xor ebx, ebx",
            "shl r13, 3",
            "jmp 0x5c35",
            "mov rax, qword [r12 + 8]",
            "lea rdx, [rax + rbx]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call fcn.00002fe0",
            "test eax, eax",
            "jne 0x5b92",
            "add rbx, 0x18",
            "cmp rbx, r13",
            "jne 0x5c30",
            "test r15, r15",
            "je 0x5cef",
            "mov qword [rbp + 0x50], r15",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x5b1f",
            "jmp 0x5b92",
            "add rsp, 8",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "mov esi, 0x14",
            "xor eax, eax",
            "jmp sym.imp.ndr_pull_error",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:680",
            "xor esi, esi",
            "mov rdi, rbp",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbp + 0x50], rax",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:680",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "jne 0x5bf1",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "jmp sym.imp.ndr_pull_error",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:686",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "jmp 0x5cd2",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:692",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "jmp 0x5cdc",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:696",
            "jmp 0x5cf6",
            "pop r11",
            "mov ecx, ebx",
            "mov rdi, rbp",
            "lea r9, str.default_librpc_gen_ndr_ndr_krb5pac.c:680",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "lea r8, str.r__buffers",
            "lea rdx, str.Alloc__u___s_failed:__s_n",
            "mov esi, 0xc",
            "jmp sym.imp.ndr_pull_error"
        ]
    },
    "fcn.00002fe0": {
        "function_address": "0x00002fe0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_PAC_BUFFER]"
        ]
    },
    "sym.ndr_print_PAC_CONSTRAINED_DELEGATION_CTR": {
        "function_address": "0x000053d0",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_CONSTRAINED_DELEGATION_CTR",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x5438",
            "add dword [rbx + 4], 1",
            "mov rdx, qword [rbp]",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [rbx + 4]",
            "mov rdx, qword [rbp]",
            "add eax, 1",
            "test rdx, rdx",
            "mov dword [rbx + 4], eax",
            "je 0x5428",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call fcn.00002fa0",
            "mov eax, dword [rbx + 4]",
            "sub eax, 2",
            "mov dword [rbx + 4], eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00002fa0": {
        "function_address": "0x00002fa0",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_CONSTRAINED_DELEGATION]"
        ]
    },
    "sym.ndr_print_PAC_INFO": {
        "function_address": "0x00005810",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_SIGNATURE_DATA]",
            "jmp qword [reloc.ndr_print_PAC_LOGON_NAME]",
            "jmp qword [reloc.ndr_print_PAC_CONSTRAINED_DELEGATION_CTR]",
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "sub rsp, 0x28",
            "mov r13, rsi",
            "mov rsi, rdx",
            "mov r12, rdx",
            "call sym.imp.ndr_print_get_switch_value",
            "lea rcx, str.PAC_INFO",
            "mov ebp, eax",
            "mov rsi, r13",
            "mov edx, ebp",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_union",
            "cmp ebp, 0xb",
            "jbe 0x5880",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rsi, str.unknown",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "jmp fcn.00003080",
            "lea rax, [0x00007d08]",
            "movsxd rdx, dword [rax + rbp*4]",
            "add rax, rdx",
            "jmp rax",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rsi, str.constrained_delegation",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "jmp 0x3420",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rsi, str.logon_info",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "jmp fcn.000031d0",
            "lea rsi, str.srv_cksum",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "jmp 0x2f70",
            "mov rdx, r12",
            "lea rsi, str.kdc_cksum",
            "jmp 0x58fa",
            "mov rdx, r12",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rsi, str.logon_name",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "jmp 0x2fc0"
        ]
    },
    "sym.imp.ndr_print_get_switch_value": {
        "function_address": "0x00002fb0",
        "instructions": [
            "jmp qword [reloc.ndr_print_get_switch_value]"
        ]
    },
    "sym.imp.ndr_print_union": {
        "function_address": "0x000034b0",
        "instructions": [
            "jmp qword [reloc.ndr_print_union]"
        ]
    },
    "sym.ndr_pull_PAC_CONSTRAINED_DELEGATION_CTR": {
        "function_address": "0x00004f10",
        "instructions": [
            "mov qword [rsp - 0x30], rbx",
            "mov qword [rsp - 0x28], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x20], r12",
            "mov qword [rsp - 0x18], r13",
            "mov ebp, esi",
            "mov qword [rsp - 0x10], r14",
            "mov qword [rsp - 8], r15",
            "sub rsp, 0x58",
            "test esi, 0xfffffcff",
            "jne 0x51f0",
            "test esi, 0x100",
            "mov r12, rdx",
            "jne 0x5178",
            "and ebp, 0x200",
            "je 0x5150",
            "mov rbp, qword [r12]",
            "test rbp, rbp",
            "je 0x5150",
            "mov r13, qword [rbx + 0x50]",
            "mov esi, 5",
            "mov qword [rbx + 0x50], rbp",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x5152",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_lsa_String",
            "test eax, eax",
            "jne 0x5152",
            "lea rdx, [rbp + 0x10]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x5152",
            "lea rsi, [rsp + 0x1c]",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x5152",
            "mov edi, dword [rsp + 0x1c]",
            "test edi, edi",
            "jne 0x5238",
            "mov qword [rbp + 0x18], 0",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "jne 0x5152",
            "mov rdx, rbp",
            "mov esi, 0x200",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_lsa_String",
            "test eax, eax",
            "jne 0x5152",
            "mov rax, qword [rbp + 0x18]",
            "test rax, rax",
            "je 0x5138",
            "mov rdx, qword [rbx + 0x50]",
            "lea r14, [rbp + 0x18]",
            "mov qword [rbx + 0x50], rax",
            "mov rdi, rbx",
            "mov rsi, r14",
            "mov qword [rsp], rdx",
            "call sym.imp.ndr_pull_array_size",
            "test eax, eax",
            "jne 0x5152",
            "mov rdi, rbx",
            "mov rsi, r14",
            "call sym.imp.ndr_get_array_size",
            "mov rdi, qword [rbx + 0x50]",
            "mov r12d, eax",
            "test rdi, rdi",
            "je 0x5302",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:235",
            "mov edx, r12d",
            "mov esi, 0x10",
            "call sym.imp._talloc_array",
            "test rax, rax",
            "mov qword [rbp + 0x18], rax",
            "je 0x539a",
            "mov rdx, qword [rbx + 0x50]",
            "test r12d, r12d",
            "mov qword [rbx + 0x50], rax",
            "mov qword [rsp + 8], rdx",
            "je 0x50f1",
            "sub r12d, 1",
            "xor r15d, r15d",
            "add r12, 1",
            "shl r12, 4",
            "jmp 0x50a4",
            "mov rax, qword [rbp + 0x18]",
            "lea rdx, [rax + r15]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_lsa_String",
            "test eax, eax",
            "jne 0x5152",
            "add r15, 0x10",
            "cmp r15, r12",
            "jne 0x50a0",
            "xor r15d, r15d",
            "nop dword [rax]",
            "mov rdx, qword [rbp + 0x18]",
            "mov esi, 0x200",
            "mov rdi, rbx",
            "add rdx, r15",
            "call sym.imp.ndr_pull_lsa_String",
            "test eax, eax",
            "jne 0x5152",
            "add r15, 0x10",
            "cmp r12, r15",
            "jne 0x50d0",
            "cmp qword [rsp + 8], 0",
            "je 0x536f",
            "cmp qword [rsp], 0",
            "mov rax, qword [rsp + 8]",
            "mov qword [rbx + 0x50], rax",
            "je 0x5391",
            "cmp qword [rbp + 0x18], 0",
            "mov rdx, qword [rsp]",
            "mov qword [rbx + 0x50], rdx",
            "je 0x5138",
            "mov edx, dword [rbp + 0x10]",
            "mov rsi, r14",
            "mov rdi, rbx",
            "call sym.imp.ndr_check_array_size",
            "test eax, eax",
            "jne 0x5152",
            "nop word [rax + rax]",
            "test r13, r13",
            "je 0x52e0",
            "mov qword [rbx + 0x50], r13",
            "xor eax, eax",
            "jmp 0x5152",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x28]",
            "mov rbp, qword [rsp + 0x30]",
            "mov r12, qword [rsp + 0x38]",
            "mov r13, qword [rsp + 0x40]",
            "mov r14, qword [rsp + 0x48]",
            "mov r15, qword [rsp + 0x50]",
            "add rsp, 0x58",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x5152",
            "lea rsi, [rsp + 0x18]",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x5152",
            "mov r8d, dword [rsp + 0x18]",
            "test r8d, r8d",
            "je 0x5210",
            "mov rdi, qword [rbx + 0x50]",
            "test rdi, rdi",
            "je 0x5298",
            "lea rdx, str.default_librpc_gen_ndr_ndr_krb5pac.c:357",
            "mov esi, 0x20",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [r12], rax",
            "jne 0x5218",
            "lea r8, str.default_librpc_gen_ndr_ndr_krb5pac.c:357",
            "lea rcx, str.r__info",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5152",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5152",
            "mov qword [r12], 0",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x4f52",
            "jmp 0x5152",
            "mov rdi, qword [rbx + 0x50]",
            "test rdi, rdi",
            "je 0x5345",
            "lea rdx, str.default_librpc_gen_ndr_ndr_krb5pac.c:222",
            "mov esi, 0x10",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [rbp + 0x18], rax",
            "jne 0x4fe2",
            "lea r8, str.default_librpc_gen_ndr_ndr_krb5pac.c:222",
            "lea rcx, str.r__transited_services",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "test eax, eax",
            "je 0x5138",
            "jmp 0x5152",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:357",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x51ae",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:357",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5152",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:368",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5152",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:235",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x505a",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:235",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5285",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:222",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:222",
            "jne 0x5245",
            "jmp 0x532a",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:244",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5285",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:245",
            "jmp 0x5376",
            "lea r9, str.default_librpc_gen_ndr_ndr_krb5pac.c:235",
            "lea r8, str.r__transited_services",
            "lea rdx, str.Alloc__u___s_failed:__s_n",
            "mov ecx, r12d",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x5285"
        ]
    },
    "sym.imp.ndr_pull_lsa_String": {
        "function_address": "0x00003320",
        "instructions": [
            "jmp qword [reloc.ndr_pull_lsa_String]"
        ]
    },
    "sym.imp.ndr_pull_array_size": {
        "function_address": "0x000033e0",
        "instructions": [
            "jmp qword [reloc.ndr_pull_array_size]"
        ]
    },
    "sym.imp.ndr_get_array_size": {
        "function_address": "0x00003220",
        "instructions": [
            "jmp qword [reloc.ndr_get_array_size]"
        ]
    },
    "sym.imp.ndr_check_array_size": {
        "function_address": "0x00002f60",
        "instructions": [
            "jmp qword [reloc.ndr_check_array_size]"
        ]
    },
    "sym.ndr_print_PAC_LOGON_INFO_CTR": {
        "function_address": "0x00004990",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_LOGON_INFO_CTR",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x49f8",
            "add dword [rbx + 4], 1",
            "mov rdx, qword [rbp]",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [rbx + 4]",
            "mov rdx, qword [rbp]",
            "add eax, 1",
            "test rdx, rdx",
            "mov dword [rbx + 4], eax",
            "je 0x49e8",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call fcn.00003300",
            "mov eax, dword [rbx + 4]",
            "sub eax, 2",
            "mov dword [rbx + 4], eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003300": {
        "function_address": "0x00003300",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_LOGON_INFO]"
        ]
    },
    "sym.ndr_print_decode_login_info_ctr": {
        "function_address": "0x00004a10",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov ebp, edx",
            "lea rdx, str.decode_login_info_ctr",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov r12, rcx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test r12, r12",
            "je 0x4ad8",
            "add dword [rbx + 4], 1",
            "test bpl, 0x40",
            "jne 0x4a78",
            "test bpl, 0x10",
            "jne 0x4a84",
            "and ebp, 0x20",
            "jne 0x4ab9",
            "mov eax, dword [rbx + 4]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "sub eax, 1",
            "mov dword [rbx + 4], eax",
            "mov rbx, qword [rsp]",
            "add rsp, 0x18",
            "ret",
            "or dword [rbx], 0x4000000",
            "test bpl, 0x10",
            "je 0x4a50",
            "lea rdx, str.decode_login_info_ctr",
            "lea rsi, [0x000079b1]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "lea rsi, str.logon_info_ctr",
            "mov rdx, r12",
            "mov rdi, rbx",
            "call fcn.000031d0",
            "sub dword [rbx + 4], 1",
            "and ebp, 0x20",
            "je 0x4a55",
            "lea rdx, str.decode_login_info_ctr",
            "lea rsi, [0x000079bf]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "jmp 0x4a55",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.000031d0": {
        "function_address": "0x000031d0",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_LOGON_INFO_CTR]"
        ]
    },
    "sym.ndr_print_PAC_DATA_RAW": {
        "function_address": "0x000068e0",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_DATA_RAW",
            "push rbx",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x69a0",
            "add dword [r12 + 4], 1",
            "mov edx, dword [rbp]",
            "lea rsi, str.num_buffers",
            "mov rdi, r12",
            "call sym.imp.ndr_print_uint32",
            "mov edx, dword [rbp + 4]",
            "lea rsi, str.version",
            "mov rdi, r12",
            "call sym.imp.ndr_print_uint32",
            "xor eax, eax",
            "mov ecx, dword [rbp]",
            "lea rdx, [0x00007b47]",
            "lea rsi, str._s:_ARRAY__d_",
            "mov rdi, r12",
            "call qword [r12 + 0x10]",
            "mov eax, dword [r12 + 4]",
            "mov r11d, dword [rbp]",
            "add eax, 1",
            "test r11d, r11d",
            "mov dword [r12 + 4], eax",
            "je 0x698a",
            "xor ebx, ebx",
            "nop dword [rax]",
            "mov eax, ebx",
            "lea rsi, [0x00007b47]",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "add ebx, 1",
            "lea rdx, [rax + rdx*8]",
            "call fcn.00003580",
            "cmp dword [rbp], ebx",
            "ja 0x6960",
            "mov eax, dword [r12 + 4]",
            "pop rbx",
            "sub eax, 2",
            "pop rbp",
            "mov dword [r12 + 4], eax",
            "pop r12",
            "ret",
            "pop rbx",
            "pop rbp",
            "mov rdi, r12",
            "pop r12",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003580": {
        "function_address": "0x00003580",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_BUFFER_RAW]"
        ]
    },
    "sym.ndr_push_PAC_DATA_RAW": {
        "function_address": "0x000064d0",
        "instructions": [
            "push r13",
            "mov r13d, esi",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 8",
            "test esi, 0xfffffcff",
            "jne 0x65d8",
            "test esi, 0x100",
            "mov rbp, rdx",
            "jne 0x6548",
            "and r13d, 0x200",
            "je 0x6537",
            "mov eax, dword [rbp]",
            "test eax, eax",
            "je 0x6537",
            "xor ebx, ebx",
            "nop dword [rax]",
            "mov eax, ebx",
            "mov esi, 0x200",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "lea rdx, [rax + rdx*8]",
            "call fcn.000031b0",
            "test eax, eax",
            "jne 0x6539",
            "add ebx, 1",
            "cmp dword [rbp], ebx",
            "ja 0x6510",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x6539",
            "mov edx, dword [rbp]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x6539",
            "mov edx, dword [rbp + 4]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x6539",
            "mov eax, dword [rbp]",
            "xor ebx, ebx",
            "test eax, eax",
            "je 0x65b7",
            "nop word [rax + rax]",
            "mov eax, ebx",
            "mov esi, 0x100",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "lea rdx, [rax + rdx*8]",
            "call fcn.000031b0",
            "test eax, eax",
            "jne 0x6539",
            "add ebx, 1",
            "cmp dword [rbp], ebx",
            "ja 0x6590",
            "mov esi, 5",
            "mov rdi, r12",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x64f7",
            "jmp 0x6539",
            "add rsp, 8",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "mov esi, 0x14",
            "xor eax, eax",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "fcn.000031b0": {
        "function_address": "0x000031b0",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_BUFFER_RAW]"
        ]
    },
    "sym.ndr_pull_PAC_SIGNATURE_DATA": {
        "function_address": "0x00004260",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov ebp, esi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "mov esi, 0x2000000",
            "sub rsp, 0x28",
            "mov rbx, rdi",
            "mov r13, rdx",
            "mov r12d, dword [rdi]",
            "call sym.imp.ndr_set_flags",
            "test ebp, 0xfffffcff",
            "jne 0x4320",
            "and ebp, 0x100",
            "jne 0x42c0",
            "mov dword [rbx], r12d",
            "xor eax, eax",
            "mov rbx, qword [rsp + 8]",
            "mov rbp, qword [rsp + 0x10]",
            "mov r12, qword [rsp + 0x18]",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "ret",
            "mov esi, 4",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x42a6",
            "mov rdx, r13",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x42a6",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov ebp, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "lea rdx, [r13 + 8]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_DATA_BLOB",
            "test eax, eax",
            "jne 0x42a6",
            "mov dword [rbx], ebp",
            "mov esi, 4",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x42a1",
            "jmp 0x42a6",
            "mov ecx, ebp",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov r13, qword [rsp + 0x20]",
            "mov esi, 0x14",
            "xor eax, eax",
            "add rsp, 0x28",
            "jmp sym.imp.ndr_pull_error"
        ]
    },
    "sym.imp.ndr_pull_DATA_BLOB": {
        "function_address": "0x00003430",
        "instructions": [
            "jmp qword [reloc.ndr_pull_DATA_BLOB]"
        ]
    },
    "sym.ndr_print_PAC_DATA": {
        "function_address": "0x00005d90",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_DATA",
            "push rbx",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x5e50",
            "add dword [r12 + 4], 1",
            "mov edx, dword [rbp]",
            "lea rsi, str.num_buffers",
            "mov rdi, r12",
            "call sym.imp.ndr_print_uint32",
            "mov edx, dword [rbp + 4]",
            "lea rsi, str.version",
            "mov rdi, r12",
            "call sym.imp.ndr_print_uint32",
            "xor eax, eax",
            "mov ecx, dword [rbp]",
            "lea rdx, [0x00007b47]",
            "lea rsi, str._s:_ARRAY__d_",
            "mov rdi, r12",
            "call qword [r12 + 0x10]",
            "mov eax, dword [r12 + 4]",
            "mov ebx, dword [rbp]",
            "add eax, 1",
            "test ebx, ebx",
            "mov dword [r12 + 4], eax",
            "je 0x5e3a",
            "xor ebx, ebx",
            "nop word [rax + rax]",
            "mov eax, ebx",
            "lea rsi, [0x00007b47]",
            "mov rdi, r12",
            "lea rdx, [rax + rax*2]",
            "mov rax, qword [rbp + 8]",
            "add ebx, 1",
            "lea rdx, [rax + rdx*8]",
            "call fcn.00003140",
            "cmp dword [rbp], ebx",
            "ja 0x5e10",
            "mov eax, dword [r12 + 4]",
            "pop rbx",
            "sub eax, 2",
            "pop rbp",
            "mov dword [r12 + 4], eax",
            "pop r12",
            "ret",
            "pop rbx",
            "pop rbp",
            "mov rdi, r12",
            "pop r12",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003140": {
        "function_address": "0x00003140",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_BUFFER]"
        ]
    },
    "sym.ndr_pull_PAC_TYPE": {
        "function_address": "0x00005460",
        "instructions": [
            "push rbx",
            "mov rbx, rdx",
            "mov esi, 0x100",
            "sub rsp, 0x10",
            "lea rdx, [rsp + 0xc]",
            "call sym.imp.ndr_pull_enum_uint32",
            "test eax, eax",
            "jne 0x5481",
            "mov edx, dword [rsp + 0xc]",
            "mov dword [rbx], edx",
            "add rsp, 0x10",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.ndr_pull_enum_uint32": {
        "function_address": "0x00003350",
        "instructions": [
            "jmp qword [reloc.ndr_pull_enum_uint32]"
        ]
    },
    "sym.ndr_print_decode_pac": {
        "function_address": "0x00005e60",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov ebp, edx",
            "lea rdx, str.decode_pac",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov r12, rcx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test r12, r12",
            "je 0x5f28",
            "add dword [rbx + 4], 1",
            "test bpl, 0x40",
            "jne 0x5ec8",
            "test bpl, 0x10",
            "jne 0x5ed4",
            "and ebp, 0x20",
            "jne 0x5f09",
            "mov eax, dword [rbx + 4]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "sub eax, 1",
            "mov dword [rbx + 4], eax",
            "mov rbx, qword [rsp]",
            "add rsp, 0x18",
            "ret",
            "or dword [rbx], 0x4000000",
            "test bpl, 0x10",
            "je 0x5ea0",
            "lea rdx, str.decode_pac",
            "lea rsi, [0x000079b1]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "lea rsi, [0x00007c36]",
            "mov rdx, r12",
            "mov rdi, rbx",
            "call fcn.00003020",
            "sub dword [rbx + 4], 1",
            "and ebp, 0x20",
            "je 0x5ea5",
            "lea rdx, str.decode_pac",
            "lea rsi, [0x000079bf]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "jmp 0x5ea5",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003020": {
        "function_address": "0x00003020",
        "instructions": [
            "jmp qword [reloc.ndr_print_PAC_DATA]"
        ]
    },
    "sym.ndr_print_DATA_BLOB_REM": {
        "function_address": "0x00005560",
        "instructions": [
            "mov qword [rsp - 8], rbp",
            "mov rbp, rdx",
            "lea rdx, str.DATA_BLOB_REM",
            "mov qword [rsp - 0x10], rbx",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x55b8",
            "add dword [rbx + 4], 1",
            "mov rdx, qword [rbp]",
            "lea rsi, str.remaining",
            "mov rcx, qword [rbp + 8]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_DATA_BLOB",
            "sub dword [rbx + 4], 1",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "add rsp, 0x18",
            "ret",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.ndr_pull_PAC_Validate": {
        "function_address": "0x00006c00",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test esi, 0xfffffcff",
            "jne 0x6cf0",
            "xor eax, eax",
            "and esi, 0x100",
            "jne 0x6c40",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "mov esi, 4",
            "mov rbp, rdx",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x6c2c",
            "mov rdx, rbp",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x6c2c",
            "lea rdx, [rbp + 4]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x6c2c",
            "lea rdx, [rbp + 8]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_int32",
            "test eax, eax",
            "jne 0x6c2c",
            "lea rdx, [rbp + 0xc]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x6c2c",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "lea rdx, [rbp + 0x10]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_DATA_BLOB",
            "test eax, eax",
            "jne 0x6c2c",
            "mov dword [rbx], r12d",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 4",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_pull_trailer_align",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov r12, qword [rsp + 0x10]",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_pull_error"
        ]
    },
    "sym.imp.ndr_pull_int32": {
        "function_address": "0x00003030",
        "instructions": [
            "jmp qword [reloc.ndr_pull_int32]"
        ]
    },
    "sym.ndr_push_PAC_BUFFER": {
        "function_address": "0x00003700",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "sub rsp, 0x38",
            "test esi, 0x100",
            "mov r12d, esi",
            "mov rbp, rdx",
            "jne 0x3830",
            "and r12d, 0x200",
            "jne 0x3758",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x18]",
            "mov rbp, qword [rsp + 0x20]",
            "mov r12, qword [rsp + 0x28]",
            "mov r13, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [rbp + 8]",
            "test rsi, rsi",
            "je 0x381f",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr2_start",
            "test eax, eax",
            "jne 0x3738",
            "mov rdi, qword [rbp + 8]",
            "mov esi, dword [rbp]",
            "xor edx, edx",
            "call fcn.00003470",
            "lea rcx, [rax + 7]",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov rdi, rbx",
            "and rcx, 0xfffffffffffffff8",
            "call sym.imp.ndr_push_subcontext_start",
            "test eax, eax",
            "jne 0x3738",
            "mov rsi, qword [rbp + 8]",
            "mov edx, dword [rbp]",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.ndr_push_set_switch_value",
            "test eax, eax",
            "jne 0x3738",
            "mov rdx, qword [rbp + 8]",
            "mov rdi, qword [rsp + 8]",
            "mov esi, 0x300",
            "call fcn.000032b0",
            "test eax, eax",
            "jne 0x3738",
            "mov rdi, qword [rbp + 8]",
            "mov esi, dword [rbp]",
            "xor edx, edx",
            "call fcn.00003470",
            "mov rsi, qword [rsp + 8]",
            "lea rcx, [rax + 7]",
            "xor edx, edx",
            "mov rdi, rbx",
            "and rcx, 0xfffffffffffffff8",
            "call sym.imp.ndr_push_subcontext_end",
            "test eax, eax",
            "jne 0x3738",
            "mov rsi, qword [rbp + 8]",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr2_end",
            "test eax, eax",
            "jne 0x3738",
            "mov dword [rbx], r12d",
            "jmp 0x3736",
            "mov esi, 4",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x3738",
            "mov edx, dword [rbp]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call fcn.00002f50",
            "test eax, eax",
            "jne 0x3738",
            "mov r13d, dword [rbp]",
            "mov rdi, qword [rbp + 8]",
            "xor edx, edx",
            "mov esi, r13d",
            "call fcn.00003470",
            "cmp r13d, 1",
            "jne 0x387a",
            "add rax, 7",
            "and rax, 0xfffffffffffffff8",
            "mov edx, eax",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x3738",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r13d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [rbp + 8]",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr1",
            "test eax, eax",
            "jne 0x3738",
            "xor edx, edx",
            "mov dword [rbx], r13d",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "je 0x372d",
            "jmp 0x3738"
        ]
    },
    "sym.imp.ndr_push_relative_ptr2_start": {
        "function_address": "0x00003330",
        "instructions": [
            "jmp qword [reloc.ndr_push_relative_ptr2_start]"
        ]
    },
    "sym.imp.ndr_push_subcontext_start": {
        "function_address": "0x000032c0",
        "instructions": [
            "jmp qword [reloc.ndr_push_subcontext_start]"
        ]
    },
    "sym.imp.ndr_push_set_switch_value": {
        "function_address": "0x000032e0",
        "instructions": [
            "jmp qword [reloc.ndr_push_set_switch_value]"
        ]
    },
    "fcn.000032b0": {
        "function_address": "0x000032b0",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_INFO]"
        ]
    },
    "sym.imp.ndr_push_subcontext_end": {
        "function_address": "0x00003050",
        "instructions": [
            "jmp qword [reloc.ndr_push_subcontext_end]"
        ]
    },
    "sym.imp.ndr_push_relative_ptr2_end": {
        "function_address": "0x00003090",
        "instructions": [
            "jmp qword [reloc.ndr_push_relative_ptr2_end]"
        ]
    },
    "fcn.00002f50": {
        "function_address": "0x00002f50",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_TYPE]"
        ]
    },
    "sym.imp.ndr_push_relative_ptr1": {
        "function_address": "0x00003440",
        "instructions": [
            "jmp qword [reloc.ndr_push_relative_ptr1]"
        ]
    },
    "sym.ndr_push_netsamlogoncache_entry": {
        "function_address": "0x00006f00",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov ebx, esi",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test esi, 0xfffffcff",
            "mov rbp, rdi",
            "jne 0x6fd0",
            "test bh, 1",
            "mov r12, rdx",
            "jne 0x6f78",
            "and bh, 2",
            "jne 0x6f50",
            "xor eax, eax",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "lea rdx, [r12 + 8]",
            "mov rdi, rbp",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 0x200",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_netr_SamInfo3",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x6f33",
            "mov rdx, qword [r12]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_time_t",
            "test eax, eax",
            "jne 0x6f33",
            "lea rdx, [r12 + 8]",
            "mov esi, 0x100",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_netr_SamInfo3",
            "test eax, eax",
            "jne 0x6f33",
            "mov esi, 5",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x6f2c",
            "jmp 0x6f33",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov r12, qword [rsp + 0x10]",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "sym.imp.ndr_push_time_t": {
        "function_address": "0x00003150",
        "instructions": [
            "jmp qword [reloc.ndr_push_time_t]"
        ]
    },
    "sym.ndr_print_decode_login_info": {
        "function_address": "0x000044b0",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov ebp, edx",
            "lea rdx, str.decode_login_info",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov r12, rcx",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test r12, r12",
            "je 0x4578",
            "add dword [rbx + 4], 1",
            "test bpl, 0x40",
            "jne 0x4518",
            "test bpl, 0x10",
            "jne 0x4524",
            "and ebp, 0x20",
            "jne 0x4559",
            "mov eax, dword [rbx + 4]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "sub eax, 1",
            "mov dword [rbx + 4], eax",
            "mov rbx, qword [rsp]",
            "add rsp, 0x18",
            "ret",
            "or dword [rbx], 0x4000000",
            "test bpl, 0x10",
            "je 0x44f0",
            "lea rdx, str.decode_login_info",
            "lea rsi, [0x000079b1]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "add dword [rbx + 4], 1",
            "lea rsi, str.logon_info",
            "mov rdx, r12",
            "mov rdi, rbx",
            "call fcn.00003300",
            "sub dword [rbx + 4], 1",
            "and ebp, 0x20",
            "je 0x44f5",
            "lea rdx, str.decode_login_info",
            "lea rsi, [0x000079bf]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_struct",
            "jmp 0x44f5",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.ndr_push_PAC_SIGNATURE_DATA": {
        "function_address": "0x00004160",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov ebp, esi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "mov esi, 0x2000000",
            "sub rsp, 0x28",
            "mov rbx, rdi",
            "mov r13, rdx",
            "mov r12d, dword [rdi]",
            "call sym.imp.ndr_set_flags",
            "test ebp, 0xfffffcff",
            "jne 0x4230",
            "and ebp, 0x100",
            "jne 0x41c0",
            "mov dword [rbx], r12d",
            "xor eax, eax",
            "mov rbx, qword [rsp + 8]",
            "mov rbp, qword [rsp + 0x10]",
            "mov r12, qword [rsp + 0x18]",
            "mov r13, qword [rsp + 0x20]",
            "add rsp, 0x28",
            "ret",
            "mov esi, 4",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x41a6",
            "mov edx, dword [r13]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x41a6",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov ebp, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rdx, qword [r13 + 8]",
            "mov rcx, qword [r13 + 0x10]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_DATA_BLOB",
            "test eax, eax",
            "jne 0x41a6",
            "mov dword [rbx], ebp",
            "mov esi, 4",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x41a1",
            "jmp 0x41a6",
            "mov ecx, ebp",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x18]",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov r13, qword [rsp + 0x20]",
            "mov esi, 0x14",
            "xor eax, eax",
            "add rsp, 0x28",
            "jmp sym.imp.ndr_push_error"
        ]
    },
    "sym.ndr_print_PAC_LOGON_NAME": {
        "function_address": "0x000040c0",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_LOGON_NAME",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x4148",
            "add dword [rbx + 4], 1",
            "mov rdx, qword [rbp]",
            "lea rsi, str.logon_time",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_NTTIME",
            "test dword [rbx], 0x4000000",
            "jne 0x4130",
            "movzx edx, word [rbp + 8]",
            "lea rsi, [0x000072a2]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint16",
            "mov rdx, qword [rbp + 0x10]",
            "lea rsi, str.account_name",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_string",
            "sub dword [rbx + 4], 1",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "mov rdi, qword [rbp + 0x10]",
            "call sym.imp.strlen_m",
            "lea edx, [rax + rax]",
            "movzx edx, dx",
            "jmp 0x4100",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.imp.ndr_print_NTTIME": {
        "function_address": "0x000030d0",
        "instructions": [
            "jmp qword [reloc.ndr_print_NTTIME]"
        ]
    },
    "sym.imp.ndr_print_uint16": {
        "function_address": "0x000031e0",
        "instructions": [
            "jmp qword [reloc.ndr_print_uint16]"
        ]
    },
    "sym.imp.ndr_print_string": {
        "function_address": "0x00003180",
        "instructions": [
            "jmp qword [reloc.ndr_print_string]"
        ]
    },
    "sym.imp.strlen_m": {
        "function_address": "0x000033a0",
        "instructions": [
            "jmp qword [reloc.strlen_m]"
        ]
    },
    "sym.ndr_print_netsamlogoncache_entry": {
        "function_address": "0x00007100",
        "instructions": [
            "mov qword [rsp - 8], rbp",
            "mov rbp, rdx",
            "lea rdx, str.netsamlogoncache_entry",
            "mov qword [rsp - 0x10], rbx",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x7168",
            "add dword [rbx + 4], 1",
            "mov rdx, qword [rbp]",
            "lea rsi, str.timestamp",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_time_t",
            "lea rdx, [rbp + 8]",
            "lea rsi, str.info3",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_netr_SamInfo3",
            "sub dword [rbx + 4], 1",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "add rsp, 0x18",
            "ret",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.imp.ndr_print_time_t": {
        "function_address": "0x00003260",
        "instructions": [
            "jmp qword [reloc.ndr_print_time_t]"
        ]
    },
    "sym.ndr_push_PAC_BUFFER_RAW": {
        "function_address": "0x00005f50",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "sub rsp, 0x38",
            "test esi, 0xfffffcff",
            "mov ebp, esi",
            "jne 0x60f0",
            "test esi, 0x100",
            "mov r12, rdx",
            "jne 0x6048",
            "and ebp, 0x200",
            "jne 0x5fb0",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x18]",
            "mov rbp, qword [rsp + 0x20]",
            "mov r12, qword [rsp + 0x28]",
            "mov r13, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov ebp, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [r12 + 8]",
            "test rsi, rsi",
            "je 0x603d",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr2_start",
            "test eax, eax",
            "jne 0x5f92",
            "mov ecx, dword [r12 + 4]",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov rdi, rbx",
            "add ecx, 7",
            "and ecx, 0xfffffff8",
            "call sym.imp.ndr_push_subcontext_start",
            "test eax, eax",
            "jne 0x5f92",
            "mov rsi, qword [r12 + 8]",
            "mov rdi, qword [rsp + 8]",
            "call fcn.00003d00",
            "test eax, eax",
            "jne 0x5f92",
            "mov ecx, dword [r12 + 4]",
            "mov rsi, qword [rsp + 8]",
            "xor edx, edx",
            "mov rdi, rbx",
            "add ecx, 7",
            "and ecx, 0xfffffff8",
            "call sym.imp.ndr_push_subcontext_end",
            "test eax, eax",
            "jne 0x5f92",
            "mov rsi, qword [r12 + 8]",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr2_end",
            "test eax, eax",
            "jne 0x5f92",
            "mov dword [rbx], ebp",
            "jmp 0x5f90",
            "mov esi, 5",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x5f92",
            "mov edx, dword [r12]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call fcn.00002f50",
            "test eax, eax",
            "jne 0x5f92",
            "mov edx, dword [r12 + 4]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x5f92",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r13d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [r12 + 8]",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_relative_ptr1",
            "test eax, eax",
            "jne 0x5f92",
            "xor edx, edx",
            "mov dword [rbx], r13d",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_uint32",
            "test eax, eax",
            "jne 0x5f92",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x5f88",
            "jmp 0x5f92",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "call sym.imp.ndr_push_error",
            "jmp 0x5f92"
        ]
    },
    "fcn.00003d00": {
        "function_address": "0x00003d00",
        "instructions": [
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov rbp, rsi",
            "mov qword [rsp - 8], r12",
            "mov esi, 4",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x3d72",
            "mov esi, 0x200000",
            "mov rdi, rbx",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rdx, qword [rbp]",
            "mov rcx, qword [rbp + 8]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_push_DATA_BLOB",
            "test eax, eax",
            "jne 0x3d72",
            "mov dword [rbx], r12d",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "mov esi, 4",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_push_trailer_align",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "sym.imp.ndr_push_error": {
        "function_address": "0x00003590",
        "instructions": [
            "jmp qword [reloc.ndr_push_error]"
        ]
    },
    "sym.ndr_push_PAC_INFO": {
        "function_address": "0x00004ca0",
        "instructions": [
            "mov qword [rsp - 0x28], rbx",
            "mov qword [rsp - 0x18], r12",
            "mov ebx, esi",
            "mov qword [rsp - 0x20], rbp",
            "mov qword [rsp - 0x10], r13",
            "mov r12, rdi",
            "mov qword [rsp - 8], r14",
            "sub rsp, 0x38",
            "test esi, 0xfffffcff",
            "jne 0x4d88",
            "test bh, 1",
            "mov r13, rdx",
            "jne 0x4d10",
            "xor ebp, ebp",
            "and bh, 2",
            "jne 0x4d00",
            "mov eax, ebp",
            "mov rbx, qword [rsp + 0x10]",
            "mov rbp, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x20]",
            "mov r13, qword [rsp + 0x28]",
            "mov r14, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov rsi, r13",
            "mov rdi, r12",
            "call sym.imp.ndr_push_get_switch_value",
            "jmp 0x4cdd",
            "mov rsi, rdx",
            "call sym.imp.ndr_push_get_switch_value",
            "mov esi, 4",
            "mov rdi, r12",
            "mov r14d, eax",
            "call sym.imp.ndr_push_union_align",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x4cdd",
            "cmp r14d, 0xb",
            "jbe 0x4da8",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov rdi, r12",
            "call sym.imp.ndr_push_subcontext_start",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdi, qword [rsp + 8]",
            "mov rsi, r13",
            "call fcn.00003d00",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rcx, 0xffffffffffffffff",
            "xor edx, edx",
            "mov rsi, qword [rsp + 8]",
            "mov rdi, r12",
            "call sym.imp.ndr_push_subcontext_end",
            "test eax, eax",
            "je 0x4cd6",
            "mov ebp, eax",
            "jmp 0x4cdd",
            "lea rdx, str.Invalid_push_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "call sym.imp.ndr_push_error",
            "mov ebp, eax",
            "jmp 0x4cdd",
            "lea rax, [0x00007c74]",
            "movsxd rdx, dword [rax + r14*4]",
            "add rax, rdx",
            "jmp rax",
            "mov rdx, r13",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call fcn.000033c0",
            "test eax, eax",
            "je 0x4cd6",
            "jmp 0x4d7d",
            "mov esi, 4",
            "mov rdi, r12",
            "call sym.imp.ndr_push_align",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdx, qword [r13]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_NTTIME",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdi, qword [r13 + 0x10]",
            "call sym.imp.strlen_m",
            "lea edx, [rax + rax]",
            "mov esi, 0x100",
            "mov rdi, r12",
            "movzx edx, dx",
            "call sym.imp.ndr_push_uint16",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdi, qword [r13 + 0x10]",
            "call sym.imp.strlen_m",
            "mov rdx, qword [r13 + 0x10]",
            "lea ecx, [rax + rax]",
            "xor r9d, r9d",
            "mov r8d, 1",
            "mov esi, 0x100",
            "mov rdi, r12",
            "call sym.imp.ndr_push_charset",
            "test eax, eax",
            "jne 0x4d7d",
            "mov esi, 4",
            "mov rdi, r12",
            "call sym.imp.ndr_push_trailer_align",
            "test eax, eax",
            "je 0x4cd6",
            "jmp 0x4d7d",
            "lea rsi, [rsp + 8]",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "mov rdi, r12",
            "call sym.imp.ndr_push_subcontext_start",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r13",
            "mov esi, 0x300",
            "call fcn.00002f80",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "jmp 0x4d68",
            "lea rsi, [rsp + 8]",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 0xfffffc01",
            "mov rdi, r12",
            "call sym.imp.ndr_push_subcontext_start",
            "test eax, eax",
            "jne 0x4d7d",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r13",
            "mov esi, 0x300",
            "call fcn.00003560",
            "test eax, eax",
            "je 0x4ebb",
            "jmp 0x4d7d"
        ]
    },
    "sym.imp.ndr_push_get_switch_value": {
        "function_address": "0x00003190",
        "instructions": [
            "jmp qword [reloc.ndr_push_get_switch_value]"
        ]
    },
    "sym.imp.ndr_push_union_align": {
        "function_address": "0x000035c0",
        "instructions": [
            "jmp qword [reloc.ndr_push_union_align]"
        ]
    },
    "fcn.000033c0": {
        "function_address": "0x000033c0",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_SIGNATURE_DATA]"
        ]
    },
    "sym.imp.ndr_push_NTTIME": {
        "function_address": "0x000030c0",
        "instructions": [
            "jmp qword [reloc.ndr_push_NTTIME]"
        ]
    },
    "sym.imp.ndr_push_uint16": {
        "function_address": "0x00003000",
        "instructions": [
            "jmp qword [reloc.ndr_push_uint16]"
        ]
    },
    "sym.imp.ndr_push_charset": {
        "function_address": "0x00003270",
        "instructions": [
            "jmp qword [reloc.ndr_push_charset]"
        ]
    },
    "fcn.00002f80": {
        "function_address": "0x00002f80",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_LOGON_INFO_CTR]"
        ]
    },
    "fcn.00003560": {
        "function_address": "0x00003560",
        "instructions": [
            "jmp qword [reloc.ndr_push_PAC_CONSTRAINED_DELEGATION_CTR]"
        ]
    },
    "sym.ndr_pull_PAC_BUFFER_RAW": {
        "function_address": "0x00006110",
        "instructions": [
            "mov qword [rsp - 0x28], rbx",
            "mov qword [rsp - 0x20], rbp",
            "mov rbx, rdi",
            "mov qword [rsp - 0x18], r12",
            "mov qword [rsp - 0x10], r13",
            "mov ebp, esi",
            "mov qword [rsp - 8], r14",
            "sub rsp, 0x38",
            "test esi, 0xfffffcff",
            "jne 0x6300",
            "test esi, 0x100",
            "mov r12, rdx",
            "jne 0x6240",
            "and ebp, 0x200",
            "jne 0x6178",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x10]",
            "mov rbp, qword [rsp + 0x18]",
            "mov r12, qword [rsp + 0x20]",
            "mov r13, qword [rsp + 0x28]",
            "mov r14, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov ebp, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "mov rsi, qword [r12 + 8]",
            "test rsi, rsi",
            "je 0x6232",
            "mov rdi, rbx",
            "mov r13d, dword [rbx + 0x14]",
            "call sym.imp.ndr_pull_relative_ptr2",
            "test eax, eax",
            "jne 0x6157",
            "mov rax, qword [r12 + 8]",
            "mov r14, qword [rbx + 0x50]",
            "test rax, rax",
            "je 0x6360",
            "mov ecx, dword [r12 + 4]",
            "lea rsi, [rsp + 8]",
            "xor edx, edx",
            "mov qword [rbx + 0x50], rax",
            "mov rdi, rbx",
            "add ecx, 7",
            "and ecx, 0xfffffff8",
            "call sym.imp.ndr_pull_subcontext_start",
            "test eax, eax",
            "jne 0x6157",
            "mov rsi, qword [r12 + 8]",
            "mov rdi, qword [rsp + 8]",
            "call fcn.00003c80",
            "test eax, eax",
            "jne 0x6157",
            "mov ecx, dword [r12 + 4]",
            "mov rsi, qword [rsp + 8]",
            "xor edx, edx",
            "mov rdi, rbx",
            "add ecx, 7",
            "and ecx, 0xfffffff8",
            "call sym.imp.ndr_pull_subcontext_end",
            "test eax, eax",
            "jne 0x6157",
            "test r14, r14",
            "je 0x63c8",
            "mov eax, dword [rbx + 0x14]",
            "cmp eax, dword [rbx + 0x18]",
            "mov qword [rbx + 0x50], r14",
            "jbe 0x622e",
            "mov dword [rbx + 0x18], eax",
            "mov dword [rbx + 0x14], r13d",
            "mov dword [rbx], ebp",
            "jmp 0x6155",
            "mov esi, 5",
            "call sym.imp.ndr_pull_align",
            "test eax, eax",
            "jne 0x6157",
            "mov rdx, r12",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call fcn.00003160",
            "test eax, eax",
            "jne 0x6157",
            "lea rdx, [r12 + 4]",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x6157",
            "mov esi, 0x1000000",
            "mov rdi, rbx",
            "mov r13d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "lea rsi, [rsp + 4]",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_generic_ptr",
            "test eax, eax",
            "jne 0x6157",
            "mov r14d, dword [rsp + 4]",
            "test r14d, r14d",
            "je 0x6320",
            "mov rdi, qword [rbx + 0x50]",
            "test rdi, rdi",
            "je 0x6380",
            "lea rdx, str.default_librpc_gen_ndr_ndr_krb5pac.c:768",
            "mov esi, 0x10",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov qword [r12 + 8], rax",
            "je 0x63e8",
            "mov edx, dword [rsp + 4]",
            "mov rsi, rax",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_relative_ptr1",
            "test eax, eax",
            "je 0x6329",
            "jmp 0x6157",
            "lea rdx, str.Invalid_pull_struct_ndr_flags_0x_x",
            "mov ecx, esi",
            "xor eax, eax",
            "mov esi, 0x14",
            "call sym.imp.ndr_pull_error",
            "jmp 0x6157",
            "mov qword [r12 + 8], 0",
            "lea rdx, [r12 + 0x10]",
            "mov dword [rbx], r13d",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_uint32",
            "test eax, eax",
            "jne 0x6157",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_trailer_align",
            "test eax, eax",
            "je 0x614d",
            "jmp 0x6157",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:787",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x6157",
            "lea rdx, str.talloc_new:_default_librpc_gen_ndr_ndr_krb5pac.c:768",
            "xor esi, esi",
            "mov rdi, rbx",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x62c0",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:768",
            "lea rdx, str._NDR_PULL_FIX_CURRENT_MEM_CTX___failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.ndr_pull_error",
            "jmp 0x6157",
            "lea rcx, str.default_librpc_gen_ndr_ndr_krb5pac.c:794",
            "lea rdx, str.NDR_PULL_SET_MEM_CTX_NULL_:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x6157",
            "lea r8, str.default_librpc_gen_ndr_ndr_krb5pac.c:768",
            "lea rcx, str.r__info",
            "lea rdx, str.Alloc__s_failed:__s_n",
            "mov esi, 0xc",
            "mov rdi, rbx",
            "call sym.imp.ndr_pull_error",
            "jmp 0x6157"
        ]
    },
    "sym._init": {
        "function_address": "0x00002f00",
        "instructions": [
            "sub rsp, 8",
            "call entry0",
            "add rsp, 8",
            "ret"
        ]
    },
    "rip": {
        "function_address": "0x00003600",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x3612",
            "call rax",
            "add rsp, 8",
            "ret"
        ]
    },
    "sym.ndr_print_PAC_SIGNATURE_DATA": {
        "function_address": "0x00004350",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_SIGNATURE_DATA",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "mov rbx, rdi",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x43d8",
            "mov rdi, rbx",
            "mov esi, 0x2000000",
            "mov r12d, dword [rbx]",
            "call sym.imp.ndr_set_flags",
            "add dword [rbx + 4], 1",
            "mov edx, dword [rbp]",
            "lea rsi, str.type",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov rdx, qword [rbp + 8]",
            "mov rcx, qword [rbp + 0x10]",
            "lea rsi, str.signature",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_DATA_BLOB",
            "mov dword [rbx], r12d",
            "sub dword [rbx + 4], 1",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "ret",
            "mov rdi, rbx",
            "mov rbp, qword [rsp + 8]",
            "mov rbx, qword [rsp]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "sym.ndr_print_PAC_BUFFER_RAW": {
        "function_address": "0x00006410",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "lea rdx, str.PAC_BUFFER_RAW",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call sym.imp.ndr_print_struct",
            "test rbp, rbp",
            "je 0x64c0",
            "add dword [rbx + 4], 1",
            "mov edx, dword [rbp]",
            "lea rsi, str.type",
            "mov rdi, rbx",
            "call fcn.00003230",
            "mov edx, dword [rbp + 4]",
            "lea rsi, [0x0000729e]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "mov rdx, qword [rbp + 8]",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_ptr",
            "mov eax, dword [rbx + 4]",
            "mov rdx, qword [rbp + 8]",
            "add eax, 1",
            "test rdx, rdx",
            "mov dword [rbx + 4], eax",
            "je 0x6490",
            "lea rsi, [0x00007273]",
            "mov rdi, rbx",
            "call fcn.00003080",
            "mov eax, dword [rbx + 4]",
            "sub eax, 1",
            "xor edx, edx",
            "test dword [rbx], 0x4000000",
            "mov dword [rbx + 4], eax",
            "jne 0x64a3",
            "mov edx, dword [rbp + 0x10]",
            "lea rsi, str._pad",
            "mov rdi, rbx",
            "call sym.imp.ndr_print_uint32",
            "sub dword [rbx + 4], 1",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 8",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.ndr_print_null"
        ]
    },
    "fcn.00003080": {
        "function_address": "0x00003080",
        "instructions": [
            "jmp qword [reloc.ndr_print_DATA_BLOB_REM]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00003690",
        "instructions": [
            "cmp byte [loc.__bss_start], 0",
            "jne 0x36c0",
            "cmp qword [0x00208fd0], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x36b3",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call fcn.00003620",
            "pop rbp",
            "mov byte [loc.__bss_start], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00003240",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "fcn.00003620": {
        "function_address": "0x00003620",
        "instructions": [
            "lea rax, [0x0020937f]",
            "lea rdi, [loc.__bss_start]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "ja 0x363d",
            "pop rbp",
            "ret",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x363b",
            "pop rbp",
            "jmp rax"
        ]
    },
    "sym.imp.ndr_pull_samr_RidWithAttributeArray": {
        "function_address": "0x00003400",
        "instructions": [
            "jmp qword [reloc.ndr_pull_samr_RidWithAttributeArray]"
        ]
    },
    "sym.imp.ndr_pull_dom_sid2": {
        "function_address": "0x00002f40",
        "instructions": [
            "jmp qword [reloc.ndr_pull_dom_sid2]"
        ]
    }
}