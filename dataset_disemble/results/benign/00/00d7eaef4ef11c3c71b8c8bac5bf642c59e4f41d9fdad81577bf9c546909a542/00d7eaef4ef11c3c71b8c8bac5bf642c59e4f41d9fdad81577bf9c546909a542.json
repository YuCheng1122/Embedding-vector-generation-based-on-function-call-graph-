{
    "fcn.0000cf2c": {
        "function_address": "0x0000cf2c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x720",
            "sub sp, sp, 4",
            "mov r0, 0",
            "add r4, sp, 0x180",
            "mov r5, 0",
            "bl sym.imp.time",
            "add r6, r4, 0x28",
            "bl sym.imp.srand",
            "mov r1, r5",
            "mov r2, r5",
            "mov r3, r5",
            "str r5, [sp]",
            "mov r0, r4",
            "str r5, [sp, 4]",
            "str r5, [sp, 8]",
            "str r5, [sp, 0xc]",
            "str r5, [sp, 0x10]",
            "str r5, [sp, 0x14]",
            "str r5, [sp, 0x18]",
            "str r5, [sp, 0x1c]",
            "str r5, [sp, 0x20]",
            "str r5, [sp, 0x24]",
            "bl method.nv::Looper.Looper_unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int_",
            "ldr r3, aav.0x0001ae88",
            "add r0, r4, 0x550",
            "mov r1, 1",
            "mvn r2, 1",
            "add r0, r0, 4",
            "str r3, [sp, 0x180]",
            "add r3, r3, 0x9c",
            "str r3, [sp, 0x1e4]",
            "bl sym.imp.nv::Allocator::Allocator_unsigned_int__unsigned_int_",
            "add r0, r4, 0x570",
            "ldr r7, [0x0000d4a4]",
            "add r0, r0, 8",
            "bl rsym._ZN11vector_baseC2Ev",
            "mov r3, r5",
            "ldr r1, aav.0x0000fdf0",
            "mov r2, 0xc",
            "add r0, r4, 0x580",
            "bl sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_",
            "mov r0, r6",
            "mov r1, 3",
            "mov r2, 0x200",
            "bl sym.imp.nv::policies::add_policy_unsigned_int__unsigned_int_",
            "mov r1, 4",
            "mov r2, 0x200",
            "mov r0, r6",
            "bl sym.imp.nv::policies::add_policy_unsigned_int__unsigned_int_",
            "mov r0, r5",
            "bl sym.imp.time",
            "add r5, r4, 0x64",
            "ldr r3, aav.0x000126c8",
            "mov r1, 0x64",
            "add r2, sp, 0x98",
            "str r4, [sp, 0x9c]",
            "str r3, [sp, 0x98]",
            "str r0, [r7]",
            "mov r0, r5",
            "bl sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____",
            "add r0, sp, 0x98",
            "bl fcn.0000df94",
            "ldr r3, aav.0x000143e0",
            "mov r0, r5",
            "mov r1, 0xa",
            "mov r2, 1",
            "str r4, [sp, 0x9c]",
            "str r3, [sp, 0x98]",
            "add r3, sp, 0x98",
            "bl sym.imp.nv::Runner::addSighandler_int__bool__function_void__int___",
            "ldr r3, [sp, 0x98]",
            "cmp r3, 0",
            "ble 0xd078",
            "ldr r0, [sp, 0x9c]",
            "cmp r0, r3",
            "beq 0xd094",
            "tst r0, 1",
            "beq 0xd094",
            "bic r0, r0, 1",
            "str r0, [sp, 0x9c]",
            "bl sym.imp.free",
            "b 0xd094",
            "bne 0xd094",
            "ldr r0, [sp, 0x9c]",
            "cmp r0, 0",
            "beq 0xd094",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0xc]",
            "blx r3",
            "ldr r1, aav.0x0000d814",
            "mov r2, 0xc",
            "mov r3, 0",
            "add r0, sp, 0x60",
            "ldr sb, aav.0x000116d8",
            "mov r5, 0",
            "str r4, [r7, 4]",
            "mov fp, 0x200",
            "str r4, [r7, 8]",
            "bl sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_",
            "ldr r1, aav.0x0000d808",
            "mov r2, 0xc",
            "mov r3, 0",
            "add r0, sp, 0x7c",
            "bl sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_",
            "mvn r3, 0",
            "str r5, [sp, 0x50]",
            "str r3, [sp, 0x3c]",
            "str r3, [sp, 0x40]",
            "str r3, [sp, 0x44]",
            "str r3, [sp, 0x48]",
            "str r3, [sp, 0x4c]",
            "str r5, [sp, 0x54]",
            "str r5, [sp, 0x58]",
            "str r5, [sp, 0x5c]",
            "bl sym.imp.nv::getRunner__",
            "movw r1, 0x2ee0",
            "add r2, sp, 0x98",
            "add r3, sp, 0x3c",
            "str sb, [sp, 0x98]",
            "str r3, [sp, 0x9c]",
            "bl sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____",
            "add r0, sp, 0x98",
            "ldr r8, aav.0x0001af40",
            "bl fcn.0000df94",
            "add r3, sp, 0x3c",
            "mov r2, r5",
            "mov r1, 1",
            "str r3, [r7, 0xc]",
            "mov r0, r3",
            "str fp, [sp]",
            "mov r3, r5",
            "bl fcn.000173f0",
            "mov r0, 0x40",
            "bl sym.imp.malloc",
            "ldr sl, aav.0x0001271c",
            "mov r6, r0",
            "bl sym.imp.string::string__",
            "add r3, r6, 0x14",
            "str r5, [r6, 4]",
            "str r5, [r6, 8]",
            "strb r5, [r6, 0xc]",
            "str r5, [r6, 0x10]",
            "str r3, [r6, 0x20]",
            "str r3, [r6, 0x24]",
            "mov r3, 0x19000",
            "str r8, [r6, 0x14]",
            "str r3, [r6, 0x38]",
            "bl sym.imp.nv::getRunner__",
            "mov r1, 0x3e8",
            "add r2, sp, 0x98",
            "str r6, [sp, 0x9c]",
            "str sl, [sp, 0x98]",
            "bl sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____",
            "add r0, sp, 0x98",
            "bl fcn.0000df94",
            "str r5, [r6, 0x34]",
            "mov r0, 0xc8",
            "str r6, [r7, 0x10]",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "add r0, sp, 0x98",
            "bl sym.imp.string::string__",
            "add r1, sp, 0x98",
            "mov r2, 1",
            "mov r0, r6",
            "mvn r3, 1",
            "bl sym.imp.AMap::AMap_string_const__unsigned_int__unsigned_int_",
            "add r3, r8, 0x18",
            "add r0, sp, 0x98",
            "str r3, [r6]",
            "bl rsym._ZN6stringD1Ev",
            "mov r3, r6",
            "add r2, r8, 0xf8",
            "mov r1, 1",
            "str r2, [r3], 0x28",
            "mov r2, fp",
            "mov r0, r3",
            "str r3, [sp, 0x2c]",
            "bl sym.imp.nv::policies::set_policy_unsigned_int__unsigned_int_",
            "ldr r3, [sp, 0x2c]",
            "mov r1, 2",
            "mov r2, 0x40",
            "ldr fp, [0x0000d4c8]",
            "mov r0, r3",
            "bl sym.imp.nv::policies::set_policy_unsigned_int__unsigned_int_",
            "mov r2, r6",
            "mov r1, 1",
            "mov r0, r4",
            "str r6, [r7, 0x14]",
            "bl sym.imp.nv::Looper::addHandler_unsigned_int__nv::Handler_",
            "mov r0, 0x70",
            "bl sym.imp.malloc",
            "ldr r1, str._nova_store_resolver_config",
            "mov r6, r0",
            "add r0, sp, 0x98",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x98",
            "mov r0, r6",
            "bl sym.imp.AHolder::AHolder_string_const_",
            "add r3, r8, 0x1d8",
            "add r0, sp, 0x98",
            "str r3, [r6]",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, aav.0x0001bbd0",
            "mov r0, 0xc8",
            "str r6, [r7, 0x18]",
            "str r3, [r6]",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "add r0, sp, 0x98",
            "bl sym.imp.string::string__",
            "add r1, sp, 0x98",
            "mov r2, 1",
            "mov r0, r6",
            "mvn r3, 1",
            "bl sym.imp.AMap::AMap_string_const__unsigned_int__unsigned_int_",
            "add r3, r8, 0x278",
            "add r0, sp, 0x98",
            "str r3, [r6]",
            "bl rsym._ZN6stringD1Ev",
            "ldr r2, [r7, 0x18]",
            "add r3, r8, 0x358",
            "mov r1, 2",
            "str r3, [r6]",
            "mov r0, r4",
            "str r6, [fp]",
            "bl sym.imp.nv::Looper::addHandler_unsigned_int__nv::Handler_",
            "ldr r0, [r7, 0x18]",
            "mov r6, 1",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0x8c]",
            "blx r3",
            "ldr r1, str._nova_store_resolver_static",
            "add r0, sp, 0x34",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x34",
            "mov r2, 1",
            "mvn r3, 2",
            "add r0, sp, 0x98",
            "bl sym.imp.AOmap::AOmap_string_const__unsigned_int__unsigned_int_",
            "ldr r3, aav.0x0001b378",
            "add r0, sp, 0x34",
            "str r3, [sp, 0x98]",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, aav.0x0001b468",
            "mov r1, 3",
            "str r5, [sp, 0x17c]",
            "add r2, sp, 0x98",
            "mov r0, r4",
            "str r3, [sp, 0x98]",
            "add r3, sp, 0x720",
            "str r6, [r3, -0x5b0]!",
            "str r3, [sp, 0x174]",
            "str r3, [sp, 0x178]",
            "bl sym.imp.nv::Looper::addHandler_unsigned_int__nv::Handler_",
            "ldr r3, [sp, 0x98]",
            "add r0, sp, 0x98",
            "ldr r3, [r3, 0xbc]",
            "blx r3",
            "ldr r2, [fp]",
            "mov r1, 4",
            "mov r0, r4",
            "bl sym.imp.nv::Looper::addHandler_unsigned_int__nv::Handler_",
            "mov r0, r5",
            "bl sym.imp.time",
            "add r5, sp, 0x720",
            "ldr r1, str.entering_main_loop_on",
            "str r0, [r5, -0x6f0]!",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov fp, r0",
            "mov r0, r5",
            "bl sym.imp.ctime",
            "mov r1, r0",
            "mov r0, fp",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r3, [sp, 0x180]",
            "mov r0, r4",
            "ldr r3, [r3, 0x90]",
            "blx r3",
            "ldr r1, [0x0000d4e8]",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "ldr r4, [r7, 0x10]",
            "cmp r4, 0",
            "beq 0xd3f8",
            "bl sym.imp.nv::getRunner__",
            "tst r4, 1",
            "str sl, [sp, 0x34]",
            "str r4, [sp, 0x38]",
            "beq 0xd3c4",
            "bl sym.imp.abort",
            "add r1, sp, 0x34",
            "bl sym.imp.nv::ThinRunner::removeTimer_function_void_____const_",
            "add r0, sp, 0x34",
            "bl fcn.0000df94",
            "mov r1, r4",
            "strb r6, [r4, 0x3c]",
            "mov r0, r4",
            "bl fcn.000147c8",
            "str r8, [r4, 0x14]",
            "mov r0, r4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "bl sym.imp.free",
            "ldr r3, [0x0000d4a4]",
            "ldr r0, [r3, 0x14]",
            "mov r4, r3",
            "cmp r0, 0",
            "beq 0xd418",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r0, [r4, 0x18]",
            "cmp r0, 0",
            "beq 0xd430",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r1, str.exit",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x98",
            "bl fcn.000120e0",
            "bl sym.imp.nv::getRunner__",
            "add r1, sp, 0x34",
            "add r3, sp, 0x3c",
            "str sb, [sp, 0x34]",
            "str r3, [sp, 0x38]",
            "bl sym.imp.nv::ThinRunner::removeTimer_function_void_____const_",
            "add r0, sp, 0x34",
            "bl fcn.0000df94",
            "add r0, sp, 0x3c",
            "bl fcn.0001728c",
            "add r0, sp, 0x7c",
            "ldr r1, aav.0x0000d9fc",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "add r0, sp, 0x60",
            "ldr r1, aav.0x0000da00",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "add r0, sp, 0x180",
            "bl fcn.00012f60",
            "mov r0, 0",
            "add sp, sp, 0x720",
            "add sp, sp, 4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x0000cc94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x750]!"
        ]
    },
    "sym.imp.srand": {
        "function_address": "0x0000c7c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa88]!"
        ]
    },
    "method.nv::Looper.Looper_unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int__unsigned_int_": {
        "function_address": "0x0000c634",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb90]!"
        ]
    },
    "sym.imp.nv::Allocator::Allocator_unsigned_int__unsigned_int_": {
        "function_address": "0x0000c4fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc60]!"
        ]
    },
    "rsym._ZN11vector_baseC2Ev": {
        "function_address": "0x0000c988",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x958]!"
        ]
    },
    "sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_": {
        "function_address": "0x0000cab4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x890]!"
        ]
    },
    "sym.imp.nv::policies::add_policy_unsigned_int__unsigned_int_": {
        "function_address": "0x0000c640",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb88]!"
        ]
    },
    "sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____": {
        "function_address": "0x0000cea4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5f0]!"
        ]
    },
    "fcn.0000df94": {
        "function_address": "0x0000df94",
        "instructions": [
            "ldr r3, [r0]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "ble 0xdfcc",
            "ldr r0, [r0, 4]",
            "cmp r0, r3",
            "beq 0xdfe8",
            "tst r0, 1",
            "beq 0xdfe8",
            "bic r0, r0, 1",
            "str r0, [r4, 4]",
            "bl sym.imp.free",
            "b 0xdfe8",
            "bne 0xdfe8",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0xdfe8",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0xc]",
            "blx r3",
            "mov r3, 0",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.nv::Runner::addSighandler_int__bool__function_void__int___": {
        "function_address": "0x0000ca54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8d0]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x0000c628",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb98]!"
        ]
    },
    "sym.imp.nv::getRunner__": {
        "function_address": "0x0000cac0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x888]!"
        ]
    },
    "fcn.000173f0": {
        "function_address": "0x000173f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x44",
            "mov r4, r0",
            "mov r7, r1",
            "ldr r5, [sp, 0x68]",
            "mov r8, r3",
            "mov r6, r2",
            "bl fcn.0001728c",
            "cmp r5, 0x1000",
            "str r5, [r4, 0x14]",
            "movls r3, 0x1000",
            "strhi r5, [r4, 0x18]",
            "strls r3, [r4, 0x18]",
            "ldr r0, [r4, 0x18]",
            "bl sym.imp.malloc",
            "cmp r7, 0",
            "str r0, [r4, 0x1c]",
            "beq 0x1783c",
            "mov r0, r4",
            "mov r1, 0x35",
            "bl fcn.00013068",
            "cmp r0, 0",
            "str r0, [r4]",
            "bge 0x17480",
            "ldr r1, str.create_udp_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x174a0",
            "ldr r3, aav.0x0001a5c4",
            "mov r1, r4",
            "str r3, [sp, 0x10]",
            "mov r3, 0",
            "str r3, [sp, 0x14]",
            "add r3, sp, 0x10",
            "ldm r3, {r2, r3}",
            "bl fcn.00011f50",
            "mov r0, 0xa",
            "mov r1, 2",
            "mov r2, 0",
            "bl sym.imp.socket",
            "subs r5, r0, 0",
            "bge 0x174e8",
            "ldr r1, [0x00017950]",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x17624",
            "add sb, sp, 0x40",
            "mov fp, 1",
            "mov sl, 4",
            "mov r1, fp",
            "str fp, [sb, -8]!",
            "mov r2, 2",
            "mov r3, sb",
            "str sl, [sp]",
            "bl sym.imp.setsockopt",
            "subs r3, r0, 0",
            "beq 0x17530",
            "ldr r1, str.setsockopt_SO_REUSEADDR:",
            "ldr r0, obj.cout",
            "str r3, [sp, 0xc]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r3, [sp, 0xc]",
            "mov r1, r3",
            "b 0x17564",
            "str sl, [sp]",
            "mov r0, r5",
            "mov r1, 0x29",
            "mov r2, 0x31",
            "mov r3, sb",
            "str fp, [sp, 0x38]",
            "bl sym.imp.setsockopt",
            "subs fp, r0, 0",
            "beq 0x175a8",
            "ldr r1, str.setsockopt_IPV6_PKTINFO:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, fp",
            "bl sym.imp.operator___ostream__int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sl, r0",
            "bl sym.imp.__errno_location",
            "mov sb, r0",
            "mov r0, sl",
            "ldr r1, [sb]",
            "bl sym.imp.operator___ostream__int_",
            "ldr r1, [0x00017960]",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sl, r0",
            "ldr r0, [sb]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, sl",
            "b 0x17614",
            "mov r1, 0x29",
            "mov r2, 0x17",
            "mov r3, sb",
            "str sl, [sp]",
            "mov r0, r5",
            "str fp, [sp, 0x38]",
            "bl sym.imp.setsockopt",
            "mov r0, r5",
            "bl fcn.00013190",
            "cmp r0, 0",
            "mov r0, r5",
            "beq 0x17620",
            "mov r1, sl",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "movge r0, r5",
            "bge 0x17628",
            "ldr r1, str.fcntl6_O_NONBLOCK:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, sb",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r5",
            "bl sym.imp.close",
            "mvn r0, 0",
            "cmn r0, 1",
            "str r0, [r4, 0xc]",
            "bne 0x176bc",
            "ldr r1, str.create_udp6_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "mov r5, r0",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, sb",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r4",
            "mov r1, 0x35",
            "bl fcn.00014490",
            "cmp r0, 0",
            "str r0, [r4, 0x10]",
            "bge 0x176a0",
            "ldr r1, str.create_tcp_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sb, r0",
            "ldr r0, [r5]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, sb",
            "b 0x17810",
            "ldr r3, aav.0x00013310",
            "mov r1, r4",
            "str r3, [sp, 0x18]",
            "mov r3, 0",
            "str r3, [sp, 0x1c]",
            "add r3, sp, 0x18",
            "b 0x17834",
            "ldr r3, aav.0x0001a5c4",
            "mov r5, 0",
            "mov r1, r4",
            "str r5, [sp, 0x24]",
            "str r3, [sp, 0x20]",
            "add r3, sp, 0x20",
            "ldm r3, {r2, r3}",
            "bl fcn.00011f50",
            "mov r1, 1",
            "mov r2, r5",
            "mov r0, 0xa",
            "bl sym.imp.socket",
            "subs r5, r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, aav.0x0001b7a4",
            "blt 0x17768",
            "add r3, sp, 0x40",
            "mov sb, 1",
            "mov sl, 4",
            "mov r1, sb",
            "str sb, [r3, -8]!",
            "mov r2, 2",
            "str sl, [sp]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "mov r0, r5",
            "bge 0x17738",
            "bl sym.imp.close",
            "ldr r0, obj.cout",
            "ldr r1, str.setsockopt_SO_REUSEADDR:",
            "b 0x17768",
            "bl fcn.00013190",
            "cmp r0, 0",
            "mov r0, r5",
            "beq 0x177d8",
            "mov r1, sb",
            "bl sym.imp.listen",
            "cmp r0, 0",
            "mov r0, r5",
            "bge 0x17790",
            "bl sym.imp.close",
            "ldr r0, obj.cout",
            "ldr r1, str.listen:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x177dc",
            "mov r1, sl",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "movge r0, r5",
            "bge 0x177e0",
            "ldr r1, str.fcntl_O_NONBLOCK:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, sb",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r5",
            "bl sym.imp.close",
            "mvn r0, 0",
            "cmn r0, 1",
            "str r0, [r4, 0x10]",
            "bne 0x1781c",
            "ldr r1, str.create_tcp6_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x1783c",
            "ldr r3, aav.0x00013310",
            "mov r1, r4",
            "str r3, [sp, 0x28]",
            "mov r3, 0",
            "str r3, [sp, 0x2c]",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "bl fcn.00011f50",
            "cmp r6, 0",
            "beq 0x17918",
            "uxth r8, r8",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00013068",
            "cmp r0, 0",
            "str r0, [r4, 4]",
            "bge 0x17890",
            "ldr r1, str.create_udp_hot_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x178b0",
            "ldr r3, aav.0x0001a458",
            "mov r1, r4",
            "str r3, [sp, 0x30]",
            "mov r3, 0",
            "str r3, [sp, 0x34]",
            "add r3, sp, 0x30",
            "ldm r3, {r2, r3}",
            "bl fcn.00011f50",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00014490",
            "cmp r0, 0",
            "str r0, [r4, 8]",
            "bge 0x178f8",
            "ldr r1, str.create_tcp_hot_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x17918",
            "ldr r3, aav.0x00010f3c",
            "add ip, sp, 0x40",
            "mov r1, r4",
            "str r3, [sp, 0x38]",
            "mov r3, 0",
            "str r3, [sp, 0x3c]",
            "ldmdb ip, {r2, r3}",
            "bl fcn.00011f50",
            "orrs r6, r7, r6",
            "beq 0x1792c",
            "bl sym.imp.nv::getLooper__",
            "mov r1, 0",
            "b 0x17934",
            "bl sym.imp.nv::getLooper__",
            "mov r1, 0x3e8",
            "bl sym.imp.nv::Looper::setupLeave_unsigned_int_",
            "mov r0, 1",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x0000cec8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5d8]!"
        ]
    },
    "sym.imp.string::string__": {
        "function_address": "0x0000c898",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9f8]!"
        ]
    },
    "sym.imp.AMap::AMap_string_const__unsigned_int__unsigned_int_": {
        "function_address": "0x0000ca24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8f0]!"
        ]
    },
    "rsym._ZN6stringD1Ev": {
        "function_address": "0x0000c5d4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xbd0]!"
        ]
    },
    "sym.imp.nv::policies::set_policy_unsigned_int__unsigned_int_": {
        "function_address": "0x0000c9c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x930]!"
        ]
    },
    "sym.imp.nv::Looper::addHandler_unsigned_int__nv::Handler_": {
        "function_address": "0x0000c574",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc10]!"
        ]
    },
    "sym.imp.string::string_char_const_": {
        "function_address": "0x0000cdc0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x688]!"
        ]
    },
    "sym.imp.AHolder::AHolder_string_const_": {
        "function_address": "0x0000cc28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x798]!"
        ]
    },
    "sym.imp.AOmap::AOmap_string_const__unsigned_int__unsigned_int_": {
        "function_address": "0x0000c700",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb08]!"
        ]
    },
    "sym.imp.operator___ostream__char_const_": {
        "function_address": "0x0000ce2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x640]!"
        ]
    },
    "sym.imp.ctime": {
        "function_address": "0x0000ccd0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x728]!"
        ]
    },
    "sym.imp.endl_ostream_": {
        "function_address": "0x0000ccc4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x730]!"
        ]
    },
    "sym.imp.abort": {
        "function_address": "0x0000c6b8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb38]!"
        ]
    },
    "sym.imp.nv::ThinRunner::removeTimer_function_void_____const_": {
        "function_address": "0x0000cc04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7b0]!"
        ]
    },
    "fcn.000147c8": {
        "function_address": "0x000147c8",
        "instructions": [
            "ldr r3, [r1, 8]",
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "cmp r3, 0",
            "mov r8, r0",
            "mov r4, r1",
            "beq 0x1489c",
            "ldr r3, [r3, 8]",
            "add r5, sp, 8",
            "str r3, [r5, -4]!",
            "ldr r6, [r4, 8]",
            "ldr r3, [sp, 4]",
            "add r2, r6, 4",
            "cmp r3, r2",
            "beq 0x14878",
            "mov r0, r8",
            "ldr r1, [r3, 0x10]",
            "bl fcn.000147c8",
            "cmp r0, 0",
            "beq 0x1486c",
            "ldr r6, [sp, 4]",
            "mov r0, r5",
            "bl sym.imp.tree_iterator_base::incr__",
            "ldr r1, str.del_domain:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r6, 0x10]",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "ldr r7, [r6, 0x10]",
            "cmp r7, 0",
            "beq 0x14854",
            "mov r0, r7",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r7",
            "bl sym.imp.free",
            "ldr r0, [r4, 8]",
            "mov r1, r6",
            "ldr r2, aav.0x0000d97c",
            "str r6, [sp]",
            "bl sym.imp.tree_base::erase_tree_iterator_base__void____tree_node_base__",
            "b 0x147ec",
            "mov r0, r5",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0x147ec",
            "ldr r5, [r6]",
            "cmp r5, 0",
            "bne 0x1489c",
            "mov r0, r6",
            "ldr r1, aav.0x0000d97c",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "mov r0, r6",
            "bl sym.imp.free",
            "str r5, [r4, 8]",
            "mov r0, r8",
            "mov r1, r4",
            "bl fcn.00014730",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0",
            "movne r0, 0",
            "bne 0x148c4",
            "ldr r0, [r4, 8]",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.000120e0": {
        "function_address": "0x000120e0",
        "instructions": [
            "ldr r3, aav.0x0001b468",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0xd8",
            "bl sym.imp.sectree_base::clear__",
            "mov r0, r4",
            "bl fcn.000120a4",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0001728c": {
        "function_address": "0x0001728c",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r3, 0",
            "str r3, [r0, 0x20]",
            "add r5, sp, 8",
            "ldr r3, [r0, 0x2c]",
            "add r6, r0, 0x28",
            "mov r4, r0",
            "str r3, [r5, -8]!",
            "ldr r3, [sp]",
            "add r0, r4, 0x24",
            "cmp r3, r6",
            "beq 0x172dc",
            "ldr r0, [r3, 0xc]",
            "bl fcn.0000df18",
            "ldr r3, [sp]",
            "ldr r0, [r3, 0xc]",
            "bl sym.imp.close",
            "mov r0, sp",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0x172ac",
            "ldr r1, aav.0x0000da00",
            "add r5, sp, 8",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "ldr r3, [r4, 0x48]",
            "add r6, r4, 0x44",
            "str r3, [r5, -4]!",
            "ldr r3, [sp, 4]",
            "add r0, r4, 0x40",
            "cmp r3, r6",
            "beq 0x17318",
            "ldr r0, [r3, 0x28]",
            "bl sym.imp.free",
            "mov r0, r5",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0x172f4",
            "ldr r1, aav.0x0000d9fc",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "ble 0x17340",
            "bl fcn.0000df18",
            "ldr r0, [r4]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4]",
            "ldr r0, [r4, 4]",
            "cmp r0, 0",
            "ble 0x17360",
            "bl fcn.0000df18",
            "ldr r0, [r4, 4]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 4]",
            "ldr r0, [r4, 8]",
            "cmp r0, 0",
            "ble 0x17380",
            "bl fcn.0000df18",
            "ldr r0, [r4, 8]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 8]",
            "ldr r0, [r4, 0xc]",
            "cmp r0, 0",
            "ble 0x173a0",
            "bl fcn.0000df18",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 0xc]",
            "ldr r0, [r4, 0x10]",
            "cmp r0, 0",
            "ble 0x173c0",
            "bl fcn.0000df18",
            "ldr r0, [r4, 0x10]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 0x10]",
            "ldr r0, [r4, 0x1c]",
            "cmp r0, 0",
            "beq 0x173e0",
            "mov r5, 0",
            "str r5, [r4, 0x14]",
            "str r5, [r4, 0x18]",
            "bl sym.imp.free",
            "str r5, [r4, 0x1c]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.tree_base::clear_void____tree_node_base__": {
        "function_address": "0x0000ca84",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8b0]!"
        ]
    },
    "fcn.00012f60": {
        "function_address": "0x00012f60",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "add r5, r0, 0x580",
            "ldr r3, aav.0x0001ae88",
            "add r6, sp, 0x10",
            "add r8, r5, 4",
            "mov r4, r0",
            "str r3, [r0]",
            "add r3, r3, 0x9c",
            "str r3, [r0, 0x64]",
            "ldr r3, [r0, 0x588]",
            "str r3, [r6, -0xc]!",
            "ldr r3, [sp, 4]",
            "cmp r3, r8",
            "beq 0x12fc0",
            "ldr r7, [r3, 0x10]",
            "cmp r7, 0",
            "beq 0x12fb4",
            "mov r0, r7",
            "bl fcn.00012e24",
            "mov r0, r7",
            "bl sym.imp.free",
            "mov r0, r6",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0x12f8c",
            "mov r0, r5",
            "ldr r1, aav.0x00011b18",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "ldr r3, aav.0x000126c8",
            "tst r4, 1",
            "add r0, r4, 0x64",
            "str r4, [sp, 0xc]",
            "str r3, [sp, 8]",
            "beq 0x12fe8",
            "bl sym.imp.abort",
            "add r1, sp, 8",
            "bl sym.imp.nv::ThinRunner::removeTimer_function_void_____const_",
            "add r0, sp, 8",
            "bl fcn.0000df94",
            "ldr r1, aav.0x00011b18",
            "mov r0, r5",
            "bl sym.imp.tree_base::clear_void____tree_node_base__",
            "add r0, r4, 0x570",
            "add r0, r0, 8",
            "bl fcn.0001222c",
            "add r0, r4, 0x550",
            "add r0, r0, 4",
            "bl sym.imp.nv::Allocator::Allocator__",
            "mov r0, r4",
            "bl sym.imp.nv::Looper::Looper__",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "method.vector_unsigned_int_.vector__": {
        "function_address": "0x00015adc",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r0, {r1, r2}",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r4",
            "bl sym.imp.vector_base::vector_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.vector_base::erase_raw_char__char_": {
        "function_address": "0x0000c820",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa48]!"
        ]
    },
    "sym.imp.vector_base::vector_base__": {
        "function_address": "0x0000cb08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x858]!"
        ]
    },
    "method.vector_unsigned_int_.operator_vector_unsigned_int__const_": {
        "function_address": "0x00018edc",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r1, {r1, r2}",
            "bl method vector<unsigned int>::assign(unsigned int const*, unsigned int const*)",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "method.vector_unsigned_int_.assign_unsigned_int_const__unsigned_int_const_": {
        "function_address": "0x00018eac",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "ldm r0, {r1, r2}",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r4",
            "ldr r1, [r4]",
            "mov r2, r6",
            "mov r3, r5",
            "pop {r4, r5, r6, lr}",
            "b method vector<unsigned int>::insert(unsigned int*, unsigned int const*, unsigned int const*)"
        ]
    },
    "method.vector_string_.insert_string__string_const__string_const_": {
        "function_address": "0x00018428",
        "instructions": [
            "cmp r2, r3",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0x18478",
            "rsb r7, r2, r3",
            "mov r3, 4",
            "mov r4, 0",
            "asr r7, r7, 2",
            "mov r2, r7",
            "bl sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_",
            "mov r5, r0",
            "cmp r4, r7",
            "beq 0x18478",
            "lsl r1, r4, 2",
            "add r4, r4, 1",
            "add r0, r5, r1",
            "add r1, r6, r1",
            "bl sym.imp.string::string_string_const_",
            "b 0x18458",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_": {
        "function_address": "0x0000cce8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x718]!"
        ]
    },
    "sym.imp.string::string_string_const_": {
        "function_address": "0x0000c61c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xba0]!"
        ]
    },
    "method.vector_nv::flat_message_.push_back_nv::flat_message_": {
        "function_address": "0x0001426c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 3",
            "cmp r6, r0, lsr 3",
            "bne 0x142b8",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 8",
            "asr r3, r3, 3",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 3",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl sym.imp.vector_unsigned_char_::vector_vector_unsigned_char__const_",
            "ldr r3, [r4, 4]",
            "add r3, r3, 8",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.sizeOfAllocatedMem_void_": {
        "function_address": "0x0000c958",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x978]!"
        ]
    },
    "sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_": {
        "function_address": "0x0000c484",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcb0]!"
        ]
    },
    "sym.imp.vector_unsigned_char_::vector_vector_unsigned_char__const_": {
        "function_address": "0x0000c5e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xbc8]!"
        ]
    },
    "method.vector_unsigned_int_.push_back_unsigned_int_const_": {
        "function_address": "0x00018500",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 2",
            "cmp r6, r0, lsr 2",
            "bne 0x1854c",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 4",
            "asr r3, r3, 2",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 2",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r2, [r5]",
            "ldr r3, [r4, 4]",
            "str r2, [r3], 4",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "method.vector_string_.push_back_string_const_": {
        "function_address": "0x000185c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 2",
            "cmp r6, r0, lsr 2",
            "bne 0x18614",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 4",
            "asr r3, r3, 2",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 2",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl sym.imp.string::string_string_const_",
            "ldr r3, [r4, 4]",
            "add r3, r3, 4",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "method.vector_unsigned_int_.insert_unsigned_int__unsigned_int_const__unsigned_int_const_": {
        "function_address": "0x00018e5c",
        "instructions": [
            "cmp r2, r3",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "beq 0x18ea4",
            "rsb r6, r2, r3",
            "mov r3, 4",
            "asr r6, r6, 2",
            "mov r2, r6",
            "lsl r6, r6, 2",
            "bl sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_",
            "mov ip, 0",
            "mov r4, r0",
            "cmp ip, r6",
            "ldrne r3, [r5, ip]",
            "strne r3, [r4, ip]",
            "addne ip, ip, 4",
            "bne 0x18e90",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "method.vector_string_.erase_string__string_": {
        "function_address": "0x000184a0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "mov r5, r1",
            "mov r7, r2",
            "mov r4, r1",
            "cmp r4, r7",
            "beq 0x184cc",
            "mov r0, r4",
            "add r4, r4, 4",
            "bl rsym._ZN6stringD1Ev",
            "b 0x184b4",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "b sym.imp.vector_base::erase_raw_char__char_"
        ]
    },
    "method.vector_string_.assign_string_const__string_const_": {
        "function_address": "0x00018f94",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "ldm r0, {r1, r2}",
            "bl method vector<string>::erase(string*, string*)",
            "mov r0, r4",
            "ldr r1, [r4]",
            "mov r2, r6",
            "mov r3, r5",
            "pop {r4, r5, r6, lr}",
            "b method vector<string>::insert(string*, string const*, string const*)"
        ]
    },
    "method.vector_IPAddr6_.vector__": {
        "function_address": "0x00018480",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r0, {r1, r2}",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r4",
            "bl sym.imp.vector_base::vector_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "method.vector_string_.vector__": {
        "function_address": "0x000184e0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r0, {r1, r2}",
            "bl method vector<string>::erase(string*, string*)",
            "mov r0, r4",
            "bl sym.imp.vector_base::vector_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "method.vector_nv::flat_message_.insert_nv::flat_message__nv::flat_message_const__nv::flat_message_const_": {
        "function_address": "0x0001a17c",
        "instructions": [
            "cmp r2, r3",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0x1a1cc",
            "rsb r7, r2, r3",
            "mov r3, 8",
            "mov r4, 0",
            "asr r7, r7, 3",
            "mov r2, r7",
            "bl sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_",
            "mov r5, r0",
            "cmp r4, r7",
            "beq 0x1a1cc",
            "lsl r1, r4, 3",
            "add r4, r4, 1",
            "add r0, r5, r1",
            "add r1, r6, r1",
            "bl sym.imp.vector_unsigned_char_::vector_vector_unsigned_char__const_",
            "b 0x1a1ac",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "method.vector_IPAddr6_.assign_IPAddr6_const__IPAddr6_const_": {
        "function_address": "0x00018f4c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "ldm r0, {r1, r2}",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r4",
            "ldr r1, [r4]",
            "mov r2, r6",
            "mov r3, r5",
            "pop {r4, r5, r6, lr}",
            "b method vector<IPAddr6>::insert(IPAddr6*, IPAddr6 const*, IPAddr6 const*)"
        ]
    },
    "method.vector_IPAddr6_.insert_IPAddr6__IPAddr6_const__IPAddr6_const_": {
        "function_address": "0x00018ef4",
        "instructions": [
            "cmp r2, r3",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0x18f44",
            "rsb r7, r2, r3",
            "mov r3, 0x10",
            "mov r4, 0",
            "asr r7, r7, 4",
            "mov r2, r7",
            "bl sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_",
            "mov r5, r0",
            "cmp r4, r7",
            "beq 0x18f44",
            "lsl r1, r4, 4",
            "add r4, r4, 1",
            "add r0, r5, r1",
            "add r1, r6, r1",
            "bl fcn.0000de94",
            "b 0x18f24",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000de94": {
        "function_address": "0x0000de94",
        "instructions": [
            "add r2, r1, 0x10",
            "mov r3, r0",
            "ldr ip, [r1], 4",
            "cmp r1, r2",
            "str ip, [r3], 4",
            "bne 0xde9c",
            "bx lr"
        ]
    },
    "method.vector_string_.push_back_string_": {
        "function_address": "0x00018560",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 2",
            "cmp r6, r0, lsr 2",
            "bne 0x185ac",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 4",
            "asr r3, r3, 2",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 2",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl sym.imp.string::string_string_const_",
            "ldr r3, [r4, 4]",
            "add r3, r3, 4",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "method.vector_unsigned_int_.push_back_unsigned_int_": {
        "function_address": "0x00015afc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 2",
            "cmp r6, r0, lsr 2",
            "bne 0x15b48",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 4",
            "asr r3, r3, 2",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 2",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r2, [r5]",
            "ldr r3, [r4, 4]",
            "str r2, [r3], 4",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "method.vector_IPAddr6_.operator_vector_IPAddr6__const_": {
        "function_address": "0x00018f7c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r1, {r1, r2}",
            "bl method vector<IPAddr6>::assign(IPAddr6 const*, IPAddr6 const*)",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "entry.init0": {
        "function_address": "0x0000d66c",
        "instructions": [
            "push {r3, lr}",
            "ldr r0, obj.cout",
            "ldr r3, obj.cout",
            "rsb r3, r0, r3",
            "asr r3, r3, 2",
            "add r3, r3, r3, lsr 31",
            "asrs r1, r3, 1",
            "popeq {r3, pc}",
            "ldr r2, [0x0000d624]",
            "cmp r2, 0",
            "popeq {r3, pc}",
            "blx r2",
            "pop {r3, pc}",
            "push {r3, lr}",
            "ldr r3, [0x0000d6b0]",
            "cmp r3, 0",
            "beq 0xd688",
            "ldr r0, [0x0000d6b4]",
            "ldr r1, [0x0000d6b8]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x0000d6bc]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0xd6a8",
            "ldr r3, [0x0000d6c0]",
            "cmp r3, 0",
            "beq 0xd6a8",
            "blx r3",
            "pop {r3, lr}",
            "b 0xd5e8"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x0000cb68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x818]!"
        ]
    },
    "entry.init1": {
        "function_address": "0x0000d4f8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0x41",
            "ldr r4, [0x0000d534]",
            "mov r2, 0",
            "mov r0, r4",
            "bl sym.imp.nv::lstream::lstream_unsigned_int__::_",
            "mov r3, 0",
            "add r0, r4, 0x28",
            "mov r1, 0x41",
            "mov r2, 6",
            "bl sym.imp.nv::lstream::lstream_unsigned_int__::_",
            "add r3, r4, 0x50",
            "str r3, [r4, 0x50]",
            "str r3, [r4, 0x54]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.nv::lstream::lstream_unsigned_int__::_": {
        "function_address": "0x0000cd18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x6f8]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x0000d628",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0000d660]",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "popne {r4, pc}",
            "bl fcn.0000d5b0",
            "ldr r3, [0x0000d664]",
            "cmp r3, 0",
            "beq 0xd654",
            "ldr r0, [0x0000d668]",
            "bl loc.imp.__deregister_frame_info",
            "mov r3, 1",
            "strb r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000d5b0": {
        "function_address": "0x0000d5b0",
        "instructions": [
            "push {r3, lr}",
            "ldr r0, obj.cout",
            "ldr r3, [0x0000d5e0]",
            "rsb r3, r0, r3",
            "cmp r3, 6",
            "popls {r3, pc}",
            "ldr r3, [0x0000d5e4]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x0000cb2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x840]!"
        ]
    },
    "entry.fini1": {
        "function_address": "0x0000cf28",
        "instructions": [
            "b 0x19d80",
            "push {r3, r4, r5, lr}",
            "ldr r4, [0x00019db0]",
            "add r5, r4, 0x50",
            "mov r0, r5",
            "bl sym.imp.seclist_base::clear__",
            "mov r0, r5",
            "bl fcn.0001251c",
            "add r0, r4, 0x28",
            "bl sym.imp.nv::lstream::lstream__",
            "mov r0, r4",
            "pop {r3, r4, r5, lr}",
            "b sym.imp.nv::lstream::lstream__"
        ]
    },
    "sym.imp.seclist_base::clear__": {
        "function_address": "0x0000cba4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7f0]!"
        ]
    },
    "fcn.0001251c": {
        "function_address": "0x0001251c",
        "instructions": [
            "ldr r2, [r0, 4]",
            "ldr r3, [r0]",
            "str r2, [r3, 4]",
            "ldr r2, [r0, 4]",
            "str r3, [r2]",
            "str r0, [r0]",
            "str r0, [r0, 4]",
            "bx lr"
        ]
    },
    "sym.imp.nv::lstream::lstream__": {
        "function_address": "0x0000c538",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc38]!"
        ]
    },
    "fcn.00013068": {
        "function_address": "0x00013068",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "mov r0, 2",
            "mov r7, r1",
            "mov r2, 0",
            "mov r1, r0",
            "bl sym.imp.socket",
            "subs r4, r0, 0",
            "bge 0x130bc",
            "ldr r1, [0x00013184]",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x13178",
            "add r5, sp, 0x10",
            "mov r1, 1",
            "mov r6, 4",
            "mov r2, 2",
            "str r1, [r5, -4]!",
            "mov r3, r5",
            "str r6, [sp]",
            "bl sym.imp.setsockopt",
            "mov r1, 0",
            "mov r2, 8",
            "mov r3, r5",
            "str r6, [sp]",
            "mov r0, r4",
            "bl sym.imp.setsockopt",
            "mov r1, 0",
            "mov r2, 0xa",
            "mov r3, r5",
            "str r6, [sp]",
            "mov r0, r4",
            "str r1, [sp, 0xc]",
            "bl sym.imp.setsockopt",
            "mov r0, r8",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00014410",
            "cmp r0, 0",
            "mov r0, r4",
            "beq 0x13174",
            "mov r1, r6",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "movge r0, r4",
            "bge 0x1317c",
            "ldr r1, str.fcntl_O_NONBLOCK:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r4",
            "bl sym.imp.close",
            "mvn r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x0000ce98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5f8]!"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x0000c604",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xbb0]!"
        ]
    },
    "fcn.00011f50": {
        "function_address": "0x00011f50",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r4, r1",
            "mov r5, r0",
            "stm sp, {r2, r3}",
            "bl sym.imp.nv::getRunner__",
            "ldm sp, {r2, r3}",
            "tst r3, 1",
            "ldrne r1, [r4, r3, asr 1]",
            "add r3, r4, r3, asr 1",
            "ldrne r2, [r1, r2]",
            "tst r3, 1",
            "str r3, [sp, 0xc]",
            "str r2, [sp, 8]",
            "beq 0x11f90",
            "bl sym.imp.abort",
            "mov r1, r5",
            "mov r2, 1",
            "add r3, sp, 8",
            "bl sym.imp.nv::ThinRunner::addSocket_int__unsigned_int__function_void__int__unsigned_int___",
            "add r0, sp, 8",
            "bl fcn.0000df30",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x0000cc34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x790]!"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x0000ca48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8d8]!"
        ]
    },
    "sym.imp.operator___ostream__int_": {
        "function_address": "0x0000c910",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9a8]!"
        ]
    },
    "fcn.00013190": {
        "function_address": "0x00013190",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x20",
            "mov r4, r0",
            "mov r1, 0",
            "mov r2, 0x1c",
            "add r0, sp, 4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add r1, sp, 4",
            "mov r2, 0x1c",
            "mov r3, 0xa",
            "strh r3, [sp, 4]",
            "mov r3, 0x3500",
            "strh r3, [sp, 6]",
            "bl sym.imp.bind",
            "cmp r0, 0",
            "movge r0, 1",
            "bge 0x13208",
            "ldr r1, str.bind6_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, 0",
            "add sp, sp, 0x20",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.fcntl": {
        "function_address": "0x0000cb8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x800]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x0000c544",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc30]!"
        ]
    },
    "fcn.00014490": {
        "function_address": "0x00014490",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "mov r7, r1",
            "mov r0, 2",
            "mov r1, 1",
            "mov r2, 0",
            "bl sym.imp.socket",
            "subs r4, r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, aav.0x0001b7a4",
            "blt 0x14534",
            "add r3, sp, 0x10",
            "mov r5, 1",
            "mov r6, 4",
            "mov r1, r5",
            "str r5, [r3, -4]!",
            "mov r2, 2",
            "str r6, [sp]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "bge 0x144f8",
            "mov r0, r4",
            "bl sym.imp.close",
            "ldr r0, obj.cout",
            "ldr r1, str.setsockopt_SO_REUSEADDR:",
            "b 0x14534",
            "mov r0, r8",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00014410",
            "cmp r0, 0",
            "mov r0, r4",
            "beq 0x145a4",
            "mov r1, r5",
            "bl sym.imp.listen",
            "cmp r0, 0",
            "mov r0, r4",
            "bge 0x1455c",
            "bl sym.imp.close",
            "ldr r0, obj.cout",
            "ldr r1, str.listen:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x145a8",
            "mov r1, r6",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "movge r0, r4",
            "bge 0x145ac",
            "ldr r1, str.fcntl_O_NONBLOCK:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r4",
            "bl sym.imp.close",
            "mvn r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.listen": {
        "function_address": "0x0000c8c8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9d8]!"
        ]
    },
    "sym.imp.nv::getLooper__": {
        "function_address": "0x0000cca0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x748]!"
        ]
    },
    "sym.imp.nv::Looper::setupLeave_unsigned_int_": {
        "function_address": "0x0000cc4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x780]!"
        ]
    },
    "sym.imp.tree_iterator_base::incr__": {
        "function_address": "0x0000c964",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x970]!"
        ]
    },
    "sym.imp.operator___ostream__string_const_": {
        "function_address": "0x0000c67c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb60]!"
        ]
    },
    "sym.imp.tree_base::erase_tree_iterator_base__void____tree_node_base__": {
        "function_address": "0x0000c874",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa10]!"
        ]
    },
    "fcn.00014730": {
        "function_address": "0x00014730",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldr r4, [r1, 0x10]",
            "ldr r6, [0x000147bc]",
            "cmp r4, 0",
            "beq 0x147b8",
            "ldrb r3, [r4, 0x1a]",
            "cmp r3, 0",
            "bne 0x147b0",
            "ldrb r3, [r5, 0x3c]",
            "cmp r3, 0",
            "bne 0x14774",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r6]",
            "add r2, r2, 3",
            "cmp r2, r3",
            "bge 0x147b0",
            "ldr r1, str.too_old:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr r3, [r3, 8]",
            "blx r3",
            "ldr r0, obj.cout",
            "bl sym.imp.endl_ostream_",
            "ldr r7, [r4, 8]",
            "mov r1, r4",
            "mov r0, r5",
            "bl fcn.00014664",
            "mov r4, r7",
            "b 0x14740",
            "ldr r4, [r4, 8]",
            "b 0x14740",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.sectree_base::clear__": {
        "function_address": "0x0000cbbc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7e0]!"
        ]
    },
    "fcn.000120a4": {
        "function_address": "0x000120a4",
        "instructions": [
            "ldr r3, aav.0x0001b378",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl sym.imp.AOmap::AOmap__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.AOmap::AOmap__": {
        "function_address": "0x0000c6dc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb20]!"
        ]
    },
    "fcn.0000df18": {
        "function_address": "0x0000df18",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.nv::getRunner__",
            "mov r1, r4",
            "pop {r4, lr}",
            "b sym.imp.nv::ThinRunner::removeSocket_int_"
        ]
    },
    "fcn.00012e24": {
        "function_address": "0x00012e24",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "mov r5, 0",
            "ldr r3, fcn.00018fc4",
            "mov r4, r0",
            "str r5, [sp, 4]",
            "str r3, [sp]",
            "ldm sp, {r1, r2}",
            "bl fcn.00012824",
            "ldr r3, aav.0x00019048",
            "str r5, [sp, 0xc]",
            "mov r0, r4",
            "str r3, [sp, 8]",
            "add r3, sp, 0x10",
            "ldmdb r3, {r1, r2}",
            "bl fcn.00012824",
            "add r0, r4, 4",
            "mov r1, r5",
            "bl fcn.00012dd4",
            "ldr r6, [r4, 0x4c]",
            "cmp r6, r5",
            "beq 0x12e8c",
            "mov r0, r6",
            "bl fcn.0000e390",
            "mov r0, r6",
            "bl sym.imp.free",
            "str r5, [r4, 0x4c]",
            "ldr r5, [r4, 0x54]",
            "cmp r5, 0",
            "beq 0x12eb0",
            "mov r0, r5",
            "bl fcn.0000e390",
            "mov r0, r5",
            "bl sym.imp.free",
            "mov r3, 0",
            "str r3, [r4, 0x54]",
            "ldr r3, [r4, 0x58]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x58]",
            "cmp r5, r3",
            "beq 0x12ee4",
            "ldr r0, [r5, 8]",
            "cmp r0, 0",
            "beq 0x12edc",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r5, [r5]",
            "b 0x12eb8",
            "add r0, r4, 0x58",
            "add r5, r4, 0x3c",
            "bl fcn.0000e0d4",
            "add r0, r4, 0x48",
            "bl rsym._ZN2nv7messageD1Ev",
            "add r0, r4, 0x44",
            "bl rsym._ZN2nv7messageD1Ev",
            "ldr r1, [r4, 0x3c]",
            "ldr r2, [r4, 0x40]",
            "mov r0, r5",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r5",
            "bl sym.imp.vector_base::vector_base__",
            "add r0, r4, 0xc",
            "bl fcn.0000e174",
            "ldr r0, [r4, 4]",
            "cmp r0, 0",
            "beq 0x12f4c",
            "ldr r3, [r0, 4]",
            "sub r3, r3, 1",
            "str r3, [r0, 4]",
            "cmp r3, 0",
            "bne 0x12f4c",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0001222c": {
        "function_address": "0x0001222c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl fcn.00012224",
            "mov r0, r4",
            "bl sym.imp.vector_base::vector_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.nv::Allocator::Allocator__": {
        "function_address": "0x0000c4cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc80]!"
        ]
    },
    "sym.imp.nv::Looper::Looper__": {
        "function_address": "0x0000c424",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcf0]!"
        ]
    },
    "fcn.0000daf4": {
        "function_address": "0x0000daf4",
        "instructions": [
            "ldr r3, aav.0x0001a9ac",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "add r3, r3, 0x14",
            "str r3, [r0, 4]!",
            "bl sym.imp.ios::ios__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.ios::ios__": {
        "function_address": "0x0000c4e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc70]!"
        ]
    },
    "fcn.0000db38": {
        "function_address": "0x0000db38",
        "instructions": [
            "ldr r3, aav.0x0001a984",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "add r3, r3, 0x14",
            "str r3, [r0, 4]!",
            "bl sym.imp.ios::ios__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000dbec": {
        "function_address": "0x0000dbec",
        "instructions": [
            "ldr r3, aav.0x0001ba08",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x20",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "ldr r3, aav.0x0001af40",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.vector_unsigned_char_::vector__": {
        "function_address": "0x0000cebc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5e0]!"
        ]
    },
    "fcn.0000dd24": {
        "function_address": "0x0000dd24",
        "instructions": [
            "push {r3, lr}",
            "mov r2, 0x10",
            "bl sym.imp.memcmp",
            "lsr r0, r0, 0x1f",
            "pop {r3, pc}"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x0000ccac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x740]!"
        ]
    },
    "fcn.0000da90": {
        "function_address": "0x0000da90",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r7, r0",
            "mov r8, r1",
            "mov r4, r2",
            "mov sb, r3",
            "ldr r6, [r4]",
            "ldr r3, [sb]",
            "cmp r6, r3",
            "beq 0xdaf0",
            "mov r0, 0xc",
            "ldr sl, [r8]",
            "bl sym.imp.malloc",
            "add r1, r6, 8",
            "mov r5, r0",
            "add r0, r0, 8",
            "bl sym.imp.string::string_string_const_",
            "mov r0, r7",
            "mov r1, sl",
            "mov r2, r5",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "ldr r3, [r4]",
            "ldr r3, [r3]",
            "str r3, [r4]",
            "b 0xdaa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.imp.list_base::link_list_node_base__list_node_base_": {
        "function_address": "0x0000ccdc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x720]!"
        ]
    },
    "fcn.0000e09c": {
        "function_address": "0x0000e09c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0]",
            "ldr r4, [r5]",
            "mov r2, r5",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r5",
            "beq 0xe0d0",
            "ldr r6, [r4]",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0xe0b4",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.list_base::unlink_list_node_base__list_node_base_": {
        "function_address": "0x0000c748",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xad8]!"
        ]
    },
    "fcn.0000e0f0": {
        "function_address": "0x0000e0f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0]",
            "ldr r4, [r5]",
            "mov r2, r5",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r5",
            "beq 0xe12c",
            "mov r0, r4",
            "ldr r6, [r0], 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0xe108",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e174": {
        "function_address": "0x0000e174",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl fcn.0000e0f0",
            "mov r0, r4",
            "bl sym.imp.list_base::list_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.list_base::list_base__": {
        "function_address": "0x0000c8ec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9c0]!"
        ]
    },
    "fcn.0000e1e0": {
        "function_address": "0x0000e1e0",
        "instructions": [
            "ldr r3, aav.0x0001b838",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x20",
            "bl fcn.0000e174",
            "ldr r3, aav.0x0001af40",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e228": {
        "function_address": "0x0000e228",
        "instructions": [
            "ldr r3, aav.0x0001b850",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x24",
            "bl fcn.0000e174",
            "add r0, r4, 0x20",
            "bl fcn.0000e174",
            "ldr r3, aav.0x0001af40",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e278": {
        "function_address": "0x0000e278",
        "instructions": [
            "ldr r3, aav.0x0001b868",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x24",
            "bl fcn.0000e174",
            "ldr r3, aav.0x0001af40",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e2c0": {
        "function_address": "0x0000e2c0",
        "instructions": [
            "ldr r3, aav.0x0001b880",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x24",
            "bl fcn.0000e174",
            "add r0, r4, 0x20",
            "bl fcn.0000e174",
            "ldr r3, aav.0x0001af40",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e350": {
        "function_address": "0x0000e350",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0]",
            "ldr r4, [r5]",
            "mov r2, r5",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r5",
            "beq 0xe38c",
            "mov r0, r4",
            "ldr r6, [r0], 8",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0xe368",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e310": {
        "function_address": "0x0000e310",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0]",
            "ldr r4, [r5]",
            "mov r2, r5",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r5",
            "beq 0xe34c",
            "mov r0, r4",
            "ldr r6, [r0], 8",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0xe328",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e0d4": {
        "function_address": "0x0000e0d4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl fcn.0000e09c",
            "mov r0, r4",
            "bl sym.imp.list_base::list_base__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e4b0": {
        "function_address": "0x0000e4b0",
        "instructions": [
            "ldr r2, aav.0x0001a9d0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r2, [r0], 4",
            "bl fcn.0000e174",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e4ec": {
        "function_address": "0x0000e4ec",
        "instructions": [
            "ldr r3, aav.0x0001b9f8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x10",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "mov r0, r4",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e530": {
        "function_address": "0x0000e530",
        "instructions": [
            "ldr r3, aav.0x0001a9e0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x10",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e574": {
        "function_address": "0x0000e574",
        "instructions": [
            "ldr r3, aav.0x0001b9d8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x14",
            "bl fcn.0000e174",
            "add r0, r4, 0x10",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e5c0": {
        "function_address": "0x0000e5c0",
        "instructions": [
            "ldr r3, aav.0x0001b9e8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x14",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e604": {
        "function_address": "0x0000e604",
        "instructions": [
            "ldr r3, aav.0x0001b9c8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x14",
            "bl fcn.0000e174",
            "add r0, r4, 0x10",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e650": {
        "function_address": "0x0000e650",
        "instructions": [
            "ldr r3, aav.0x0001aad0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e68c": {
        "function_address": "0x0000e68c",
        "instructions": [
            "ldr r3, aav.0x0001a9f0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl fcn.0000e4b0",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e6c8": {
        "function_address": "0x0000e6c8",
        "instructions": [
            "ldr r2, aav.0x0001a9d0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r2, [r0], 4",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "rsym._ZN9list_baseC2Ev": {
        "function_address": "0x0000c8a4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9f0]!"
        ]
    },
    "fcn.0000e818": {
        "function_address": "0x0000e818",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "mov r2, r1",
            "add r0, sp, 4",
            "ldr r1, aav.0x0001ad2c",
            "bl sym.imp.sprintf",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r4",
            "add sp, sp, 0x18",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x0000cda8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x698]!"
        ]
    },
    "fcn.0000e920": {
        "function_address": "0x0000e920",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "mov r5, r2",
            "bl sym.imp.string::string_string_const_",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.string::append_string_const_",
            "mov r0, r4",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.string::append_string_const_": {
        "function_address": "0x0000c904",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9b0]!"
        ]
    },
    "fcn.0000e8fc": {
        "function_address": "0x0000e8fc",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "mov r5, r2",
            "bl sym.imp.string::string_string_const_",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.string::append_char_const_",
            "mov r0, r4",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.string::append_char_const_": {
        "function_address": "0x0000c85c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa20]!"
        ]
    },
    "fcn.0000ece4": {
        "function_address": "0x0000ece4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "mov r5, r0",
            "bl sym.imp.string::string__",
            "ldr r3, [r6]",
            "ldr r4, [r3]",
            "ldr r3, [r6]",
            "cmp r4, r3",
            "beq 0xed34",
            "ldr r3, [r3]",
            "cmp r4, r3",
            "beq 0xed20",
            "mov r0, r5",
            "mov r1, 0x2e",
            "bl sym.imp.string::push_back_char_",
            "add r1, r4, 8",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "ldr r4, [r4]",
            "b 0xecfc",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.string::push_back_char_": {
        "function_address": "0x0000ce20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x648]!"
        ]
    },
    "fcn.0000ec6c": {
        "function_address": "0x0000ec6c",
        "instructions": [
            "b sym.imp.string::append_string_const_"
        ]
    },
    "fcn.0000ea28": {
        "function_address": "0x0000ea28",
        "instructions": [
            "cmp r1, 0xa",
            "push {r4, r5, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x14",
            "mov r4, r1",
            "beq 0xeb6c",
            "bhi 0xeab0",
            "cmp r1, 4",
            "beq 0xeb4c",
            "bhi 0xea74",
            "cmp r1, 1",
            "beq 0xeb3c",
            "blo 0xeb34",
            "cmp r1, 2",
            "beq 0xeb44",
            "cmp r1, 3",
            "ldreq r1, [0x0000ec0c]",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 7",
            "beq 0xeb5c",
            "bhi 0xea98",
            "cmp r1, 5",
            "beq 0xeb54",
            "cmp r1, 6",
            "ldreq r1, [0x0000ec10]",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 8",
            "beq 0xeb64",
            "cmp r1, 9",
            "ldreq r1, [0x0000ec14]",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 0x10",
            "beq 0xeb8c",
            "bhi 0xeaf8",
            "cmp r1, 0xd",
            "beq 0xeb7c",
            "bhi 0xeae0",
            "cmp r1, 0xb",
            "beq 0xeb74",
            "cmp r1, 0xc",
            "ldreq r1, [0x0000ec18]",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 0xe",
            "beq 0xeb84",
            "cmp r1, 0xf",
            "ldreq r1, [0x0000ec1c]",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 0xfd",
            "beq 0xeb9c",
            "bhi 0xeb1c",
            "cmp r1, 0x1c",
            "beq 0xeb94",
            "cmp r1, 0xfc",
            "ldreq r1, str.AXFR",
            "beq 0xeba8",
            "b 0xebb0",
            "cmp r1, 0xfe",
            "beq 0xeba4",
            "cmp r1, 0xff",
            "ldreq r1, [0x0000ec24]",
            "beq 0xeba8",
            "b 0xebb0",
            "ldr r1, str.0_NEGATIVE_",
            "b 0xeba8",
            "ldr r1, [0x0000ec2c]",
            "b 0xeba8",
            "ldr r1, aav.0x0001aa60",
            "b 0xeba8",
            "ldr r1, [0x0000ec34]",
            "b 0xeba8",
            "ldr r1, str.CNAME",
            "b 0xeba8",
            "ldr r1, [0x0000ec3c]",
            "b 0xeba8",
            "ldr r1, [0x0000ec40]",
            "b 0xeba8",
            "ldr r1, str.NULL",
            "b 0xeba8",
            "ldr r1, [0x0000ec48]",
            "b 0xeba8",
            "ldr r1, str.HINFO",
            "b 0xeba8",
            "ldr r1, str.MINFO",
            "b 0xeba8",
            "ldr r1, aav.0x0001aa98",
            "b 0xeba8",
            "ldr r1, str.AAAA",
            "b 0xeba8",
            "ldr r1, str.MAILB",
            "b 0xeba8",
            "ldr r1, str.MAILA",
            "bl sym.imp.string::string_char_const_",
            "b 0xec00",
            "ldr r1, str.UNKNOWN__",
            "add r0, sp, 8",
            "bl sym.imp.string::string_char_const_",
            "add r0, sp, 0xc",
            "mov r1, r4",
            "bl fcn.0000e818",
            "add r0, sp, 4",
            "add r1, sp, 8",
            "add r2, sp, 0xc",
            "bl fcn.0000e920",
            "add r1, sp, 4",
            "ldr r2, [0x0000ec68]",
            "mov r0, r5",
            "bl fcn.0000e8fc",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000de5c": {
        "function_address": "0x0000de5c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.IPAddr6::empty___const",
            "cmp r0, 0",
            "moveq r0, r4",
            "movne r0, 0",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.IPAddr6::empty___const": {
        "function_address": "0x0000cef8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5b8]!"
        ]
    },
    "fcn.0001566c": {
        "function_address": "0x0001566c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "mov r7, r0",
            "mov r4, r1",
            "add r0, sp, 0xc",
            "mov r1, r2",
            "mov r5, r3",
            "ldrb sb, [sp, 0x40]",
            "ldr sl, [sp, 0x44]",
            "bl fcn.0000e04c",
            "add r0, sp, 0x10",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, sp, 0x14",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, sp, 0x14",
            "bl fcn.0000dbb4",
            "mov r3, r5",
            "str sl, [sp]",
            "mov r0, r7",
            "add r1, sp, 0x14",
            "add r2, sp, 0xc",
            "bl fcn.00016654",
            "ldr r3, [sp, 0x14]",
            "ldr r6, [r3]",
            "cmp r6, r3",
            "bne 0x157b4",
            "cmp r5, 5",
            "cmpne r5, 0xff",
            "movne r3, 0",
            "moveq r3, 1",
            "beq 0x157e8",
            "str r3, [sp]",
            "add r2, sp, 0xc",
            "mov r3, 5",
            "mov r0, r7",
            "add r1, sp, 0x14",
            "bl fcn.00016654",
            "ldr r3, [sp, 0x14]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "beq 0x157e8",
            "mov r0, 0xc",
            "ldr r8, [sp, 0x10]",
            "bl sym.imp.malloc",
            "add r1, sp, 0xc",
            "mov r6, r0",
            "add r0, r0, 8",
            "bl fcn.0000e04c",
            "mov r1, r8",
            "mov r2, r6",
            "add r0, sp, 0x10",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "ldr r3, [sp, 0x14]",
            "ldr r3, [r3]",
            "ldr fp, [r3, 8]",
            "ldr r3, [sp, 0x10]",
            "add r8, fp, 0x20",
            "ldr r6, [r3]",
            "ldr r3, [sp, 0x10]",
            "cmp r6, r3",
            "beq 0x1577c",
            "add r0, r6, 8",
            "mov r1, r8",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "bne 0x157e8",
            "ldr r6, [r6]",
            "b 0x15754",
            "cmp sb, 0",
            "beq 0x157a4",
            "add r1, sp, 0xc",
            "mov r0, r7",
            "mov r2, fp",
            "bl fcn.00016fdc",
            "add r1, sp, 8",
            "str r0, [sp, 8]",
            "mov r0, r4",
            "bl fcn.00017258",
            "add r0, sp, 0xc",
            "mov r1, r8",
            "bl fcn.0000e130",
            "b 0x156a4",
            "ldr r3, [sp, 0x14]",
            "cmp r6, r3",
            "beq 0x15824",
            "ldr r2, [r6, 8]",
            "add r1, sp, 0xc",
            "mov r0, r7",
            "bl fcn.00016fdc",
            "add r1, sp, 8",
            "str r0, [sp, 8]",
            "mov r0, r4",
            "bl fcn.00017258",
            "ldr r6, [r6]",
            "b 0x157b4",
            "ldr r3, [r4]",
            "ldr r5, [r3]",
            "ldr r3, [r4]",
            "cmp r5, r3",
            "beq 0x1581c",
            "ldr r0, [r5, 8]",
            "cmp r0, 0",
            "beq 0x15814",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r5, [r5]",
            "b 0x157f0",
            "mov r0, r4",
            "bl fcn.0000e09c",
            "add r0, sp, 0x14",
            "bl fcn.0000dbb4",
            "add r0, sp, 0x14",
            "bl sym.imp.list_base::list_base__",
            "add r0, sp, 0x10",
            "bl fcn.0000e190",
            "add r0, sp, 0xc",
            "bl fcn.0000e174",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000e04c": {
        "function_address": "0x0000e04c",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "bl rsym._ZN9list_baseC2Ev",
            "ldr r3, [r4]",
            "mov r0, r4",
            "add r1, sp, 4",
            "ldr r3, [r3]",
            "str r3, [sp, 4]",
            "ldr r3, [r5]",
            "ldr r2, [r3]",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0xc",
            "str r2, [sp, 8]",
            "add r2, sp, 8",
            "bl fcn.0000da90",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000dbb4": {
        "function_address": "0x0000dbb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0]",
            "ldr r4, [r5]",
            "mov r2, r5",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r5",
            "beq 0xdbe8",
            "ldr r6, [r4]",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r6",
            "b 0xdbcc",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00016654": {
        "function_address": "0x00016654",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r1",
            "mov r1, r2",
            "mov r6, r0",
            "mov r8, r3",
            "bl fcn.00014c7c",
            "subs r5, r0, 0",
            "beq 0x16784",
            "ldr r4, [r5, 0x10]",
            "add fp, r6, 0x14",
            "ldr sb, [0x0001678c]",
            "mov r2, 0",
            "mov sl, 1",
            "cmp r4, 0",
            "beq 0x16740",
            "ldrb r1, [r4, 0x1a]",
            "cmp r1, 0",
            "beq 0x166a8",
            "ldr r3, [sp, 0x30]",
            "cmp r3, 0",
            "strbne sl, [r3]",
            "ldrb r1, [r4, 0x1a]",
            "cmp r1, 0",
            "bne 0x166c4",
            "ldr r0, [r4, 0x1c]",
            "ldr r1, [sb]",
            "cmp r0, r1",
            "blt 0x16738",
            "cmp r8, 0xff",
            "beq 0x166d8",
            "ldrh r1, [r4, 0x18]",
            "cmp r8, r1",
            "bne 0x16738",
            "ldr r2, [r7]",
            "mov r0, 0xc",
            "ldr r1, [r2]",
            "str r1, [sp, 4]",
            "bl sym.imp.malloc",
            "ldr r1, [sp, 4]",
            "mov r2, r0",
            "str r4, [r0, 8]",
            "mov r0, r7",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "ldrb r2, [r4, 0x1a]",
            "cmp r2, 0",
            "bne 0x16734",
            "ldr r2, [r4, 0xc]",
            "ldr r1, [r4, 0x10]",
            "str r1, [r2, 0x10]",
            "ldr r1, [r4, 0x10]",
            "str r2, [r1, 0xc]",
            "ldr r2, [r6, 0x24]",
            "str r4, [r2, 0xc]",
            "str r2, [r4, 0x10]",
            "str fp, [r4, 0xc]",
            "str r4, [r6, 0x24]",
            "mov r2, r4",
            "ldr r4, [r4, 8]",
            "b 0x16688",
            "cmp r2, 0",
            "beq 0x16784",
            "ldr r3, [r5, 0x10]",
            "cmp r2, r3",
            "beq 0x16784",
            "ldr r1, [r2, 8]",
            "cmp r1, 0",
            "ldrne r0, [r2, 4]",
            "strne r0, [r1, 4]",
            "ldr r0, [r2, 4]",
            "str r1, [r0]",
            "add r1, r5, 0x10",
            "str r1, [r2, 4]",
            "mov r1, r2",
            "str r3, [r1, 8]!",
            "str r1, [r3, 4]",
            "str r2, [r5, 0x10]",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00017ae4": {
        "function_address": "0x00017ae4",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "ldr r3, [r1]",
            "mov r5, r1",
            "ldr r2, [r0]",
            "ldr r3, [r3]",
            "ldr r4, [r2]",
            "ldr r2, [r6]",
            "ldr r0, [r5]",
            "cmp r4, r2",
            "beq 0x17b44",
            "cmp r3, r0",
            "bne 0x17b20",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r1, r3",
            "add r0, r4, 8",
            "ldr r7, [r1], 8",
            "bl fcn.0000e8b8",
            "cmp r0, 0",
            "beq 0x17b18",
            "ldr r4, [r4]",
            "mov r3, r7",
            "b 0x17b00",
            "subs r3, r3, r0",
            "rsbs r0, r3, 0",
            "adcs r0, r0, r3",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00016fdc": {
        "function_address": "0x00016fdc",
        "instructions": [
            "ldrh r3, [r2, 0x18]",
            "push {r4, r5, r6, r7, r8, lr}",
            "sub r3, r3, 1",
            "mov r8, r1",
            "mov r5, r2",
            "cmp r3, 0x1b",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x16ff4.9",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001aad0",
            "str r3, [r4]",
            "ldr r3, [r5, 0x20]",
            "str r3, [r4, 0x10]",
            "b 0x171f0",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6e8",
            "add r0, r4, 0x10",
            "add r1, r5, 0x20",
            "b 0x17164",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9c8",
            "mov r6, r4",
            "add r7, r4, 0x14",
            "str r3, [r6], 0x10",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r7",
            "bl rsym._ZN9list_baseC2Ev",
            "add r1, r5, 0x20",
            "mov r0, r6",
            "bl fcn.0000e130",
            "mov r0, r7",
            "add r1, r5, 0x24",
            "bl fcn.0000e130",
            "ldr r3, [r5, 0x28]",
            "str r3, [r4, 0x18]",
            "ldr r3, [r5, 0x2c]",
            "str r3, [r4, 0x1c]",
            "ldr r3, [r5, 0x30]",
            "str r3, [r4, 0x20]",
            "ldr r3, [r5, 0x34]",
            "str r3, [r4, 0x24]",
            "ldr r3, [r5, 0x38]",
            "str r3, [r4, 0x28]",
            "b 0x171f0",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9d8",
            "mov r6, r4",
            "add r7, r4, 0x14",
            "str r3, [r6], 0x10",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r7",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r6",
            "add r1, r5, 0x20",
            "bl fcn.0000e130",
            "mov r0, r7",
            "add r1, r5, 0x24",
            "bl fcn.0000e130",
            "b 0x171f0",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9e8",
            "mov r6, r4",
            "str r3, [r6], 0x14",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "ldrh r3, [r5, 0x20]",
            "mov r0, r6",
            "strh r3, [r4, 0x10]",
            "b 0x17160",
            "mov r0, 0x20",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e85c",
            "add r0, r4, 0x10",
            "add r1, r5, 0x20",
            "bl fcn.0000de78",
            "b 0x171f0",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9f8",
            "mov r6, r4",
            "str r3, [r6], 0x10",
            "mov r0, r6",
            "bl rsym._ZN6vectorIhEC1Ev",
            "mov r0, r6",
            "add r1, r5, 0x20",
            "bl fcn.0000e8a0",
            "add r0, r4, 4",
            "mov r1, r8",
            "bl fcn.0000e130",
            "ldrh r3, [r5, 0x18]",
            "strh r3, [r4, 8]",
            "mov r3, 1",
            "strh r3, [r4, 0xa]",
            "ldrb r3, [r5, 0x1a]",
            "cmp r3, 0",
            "ldr r3, [r5, 0x1c]",
            "beq 0x17228",
            "cmp r3, 0",
            "moveq r3, 1",
            "b 0x17234",
            "ldr r2, [0x00017254]",
            "ldr r2, [r2]",
            "rsb r3, r2, r3",
            "str r3, [r4, 0xc]",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00017258": {
        "function_address": "0x00017258",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r5, [r0]",
            "mov r0, 0xc",
            "mov r6, r1",
            "bl sym.imp.malloc",
            "ldr r3, [r6]",
            "mov r1, r5",
            "mov r2, r0",
            "str r3, [r0, 8]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b sym.imp.list_base::link_list_node_base__list_node_base_"
        ]
    },
    "fcn.0000e130": {
        "function_address": "0x0000e130",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r5, [r1]",
            "ldr r6, [r5]",
            "bl fcn.0000e0f0",
            "ldr r3, [r4]",
            "mov r0, r4",
            "add r1, sp, 0xc",
            "add r2, sp, 8",
            "ldr r3, [r3]",
            "stmib sp, {r5, r6}",
            "str r3, [sp, 0xc]",
            "add r3, sp, 4",
            "bl fcn.0000da90",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000e190": {
        "function_address": "0x0000e190",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldr r6, [r0]",
            "ldr r4, [r6]",
            "mov r2, r6",
            "mov r1, r4",
            "bl sym.imp.list_base::unlink_list_node_base__list_node_base_",
            "cmp r4, r6",
            "beq 0xe1d0",
            "mov r0, r4",
            "ldr r7, [r0], 8",
            "bl fcn.0000e174",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r4, r7",
            "b 0xe1ac",
            "mov r0, r5",
            "bl sym.imp.list_base::list_base__",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000e710": {
        "function_address": "0x0000e710",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "add r0, r0, 0x18",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r4, 0x1c",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r4, 0x24",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r4, 0x28",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0xc",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x0000c8b0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9e8]!"
        ]
    },
    "fcn.00013cd0": {
        "function_address": "0x00013cd0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "mov r6, r1",
            "add r0, sp, 0x10",
            "mov r5, r2",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r1, r6",
            "add r0, sp, 0x10",
            "bl fcn.0000e130",
            "mov r1, r4",
            "mov r3, 1",
            "strh r3, [sp, 0x16]",
            "ldr r3, [r1, 0x18]!",
            "mov r0, sp",
            "add r2, sp, 0xc",
            "strh r5, [sp, 0x14]",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0x10",
            "bl fcn.00013c78",
            "add r0, sp, 0x10",
            "bl fcn.0000e174",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00013c78": {
        "function_address": "0x00013c78",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r0, 0x10",
            "mov r5, r3",
            "ldr r8, [r2]",
            "mov r7, r1",
            "bl sym.imp.malloc",
            "mov r1, r5",
            "mov r4, r0",
            "add r0, r0, 8",
            "bl fcn.0000e04c",
            "ldrh r3, [r5, 4]",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, r4",
            "strh r3, [r4, 0xc]",
            "ldrh r3, [r5, 6]",
            "strh r3, [r4, 0xe]",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "str r0, [r6]",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.0000dc34": {
        "function_address": "0x0000dc34",
        "instructions": [
            "push {r3, lr}",
            "bl sym.imp.string::compare_string_const__const",
            "lsr r0, r0, 0x1f",
            "pop {r3, pc}"
        ]
    },
    "sym.imp.string::compare_string_const__const": {
        "function_address": "0x0000c724",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xaf0]!"
        ]
    },
    "fcn.0000e85c": {
        "function_address": "0x0000e85c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r2, aav.0x0001a9f0",
            "mov r0, r4",
            "str r2, [r0], 0x10",
            "bl fcn.0000e850",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000e850": {
        "function_address": "0x0000e850",
        "instructions": [
            "mov r1, 0",
            "mov r2, 0x10",
            "b sym.imp.memset"
        ]
    },
    "fcn.00018a84": {
        "function_address": "0x00018a84",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x24",
            "mov r1, r4",
            "add r0, sp, 0xc",
            "bl fcn.00012cac",
            "add r1, sp, 0xc",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.done_reqs:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 0x40]",
            "ldr r3, [r4, 0x3c]",
            "ldr r1, [0x00018dac]",
            "rsb r3, r3, r2",
            "asr r3, r3, 2",
            "mul r1, r1, r3",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._dur:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.nv::getJiffies__",
            "ldr r1, [r4, 0x14]",
            "rsb r1, r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x50]",
            "mov r5, r0",
            "add r0, sp, 0x10",
            "bl fcn.0000e944",
            "add r1, sp, 0x10",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, [0x00018db8]",
            "ldr r7, [r4]",
            "ldr r6, [r3]",
            "add sb, r6, 0x580",
            "ldr r3, [r6, 0x584]",
            "add r2, sb, 4",
            "bic r3, r3, 3",
            "mov r4, r2",
            "cmp r3, 0",
            "beq 0x18b70",
            "ldr ip, [r6, 0x594]",
            "ldr r1, [r3, 4]",
            "ldr r0, [r3, 8]",
            "ldr ip, [r3, ip]",
            "cmp ip, r7",
            "movhs r4, r3",
            "movlo r3, r0",
            "movhs r3, r1",
            "b 0x18b44",
            "cmp r4, r2",
            "beq 0x18b88",
            "ldr r3, [r6, 0x594]",
            "ldr r3, [r4, r3]",
            "cmp r7, r3",
            "movlo r4, r2",
            "cmp r4, r2",
            "beq 0x18d9c",
            "ldr r0, [0x00018dbc]",
            "ldr r5, [r4, 0x10]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0x18ce0",
            "ldr r1, str.done_query:_",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r7",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "mov r0, sp",
            "mov r1, r5",
            "bl fcn.00018684",
            "mov r1, 3",
            "mov r0, sp",
            "bl sym.imp.nv::IdTraits_nv::string_id_::set_type_nv::message::get_nv::string_id__nv::string_id__const",
            "mov r1, r0",
            "add r0, sp, 4",
            "bl sym.imp.string::string_string_const_",
            "mov r1, 4",
            "mov r0, sp",
            "bl sym.imp.nv::IdTraits_nv::be32_id_::set_type_nv::message::get_nv::be32_id__nv::be32_id__const",
            "mov r1, 0xa",
            "str r0, [sp, 8]",
            "mov r0, sp",
            "bl sym.imp.nv::IdTraits_nv::addr6_id_::set_type_nv::message::get_nv::addr6_id__nv::addr6_id__const",
            "mov r1, r0",
            "add r0, sp, 0x10",
            "bl fcn.0000de94",
            "ldr r3, [sp, 4]",
            "add r2, r3, 4",
            "ldr r3, [r3]",
            "cmp r3, r2",
            "beq 0x18c2c",
            "ldr r1, aav.0x0001acb0",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, sp, 4",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r3, [sp, 8]",
            "cmp r3, 0",
            "beq 0x18c68",
            "ldr r1, aav.0x0001acb0",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, sp, 8",
            "mov r8, r0",
            "add r0, sp, 0xc",
            "bl sym.imp.IPAddr::str___const",
            "mov r0, r8",
            "add r1, sp, 0xc",
            "bl sym.imp.operator___ostream__string_const_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x10",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "beq 0x18c8c",
            "ldr r1, aav.0x0001acb0",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, sp, 0x10",
            "bl sym.imp.operator___ostream__IPAddr6_const_",
            "mov r0, sp",
            "ldr r1, [0x00018dc4]",
            "bl sym.imp.bool_nv::message::has_nv::string_id__nv::string_id__const",
            "cmp r0, 0",
            "beq 0x18cc8",
            "ldr r1, aav.0x0001acb0",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [0x00018dc4]",
            "mov r8, r0",
            "mov r0, sp",
            "bl sym.imp.nv::IdTraits_nv::string_id_::set_type_nv::message::get_nv::string_id__nv::string_id__const",
            "mov r1, r0",
            "mov r0, r8",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r0, [0x00018dbc]",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, sp",
            "bl rsym._ZN2nv7messageD1Ev",
            "ldrb r3, [r5, 0x38]",
            "cmp r3, 0",
            "beq 0x18d28",
            "add r1, r5, 0x44",
            "add r0, sp, 0xc",
            "bl sym.imp.nv::message::message_nv::message_const_",
            "add r0, sp, 0x10",
            "mov r1, r5",
            "bl fcn.00018684",
            "mov r0, r6",
            "add r1, sp, 0xc",
            "add r2, sp, 0x10",
            "bl sym.imp.nv::Handler::replyMessage_nv::message_const__nv::message_",
            "add r0, sp, 0x10",
            "bl rsym._ZN2nv7messageD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN2nv7messageD1Ev",
            "b 0x18d68",
            "ldr sl, [r5, 0x54]",
            "ldr r2, [r5, 0x50]",
            "ldr fp, [0x00018dc8]",
            "ldrb r3, [sl, 3]",
            "bfi r3, r2, 0, 4",
            "strb r3, [sl, 3]",
            "ldr r8, [r5, 0x3c]",
            "ldr r3, [r5, 0x40]",
            "cmp r8, r3",
            "beq 0x18d68",
            "mov r1, r8",
            "ldr r0, [fp]",
            "mov r2, sl",
            "add r8, r8, 0x1c",
            "bl fcn.00013970",
            "b 0x18d44",
            "mov r0, r5",
            "bl fcn.00012e24",
            "mov r0, r5",
            "bl sym.imp.free",
            "add r0, r6, 0x550",
            "add r0, r0, 4",
            "mov r1, r7",
            "bl sym.imp.nv::Allocator::free_unsigned_int_",
            "mov r0, sb",
            "mov r1, r4",
            "ldr r2, aav.0x00011b18",
            "str r4, [sp, 0x10]",
            "bl sym.imp.tree_base::erase_tree_iterator_base__void____tree_node_base__",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00012cac": {
        "function_address": "0x00012cac",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x20",
            "mov r4, r0",
            "mov r5, r1",
            "add r0, sp, 0x14",
            "add r1, r1, 0xc",
            "bl fcn.0000ece4",
            "ldr r6, aav.0x0001add0",
            "add r0, sp, 0x10",
            "ldr r1, [0x00012dc8]",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x14",
            "add r0, sp, 0x10",
            "bl sym.imp.string::append_string_const_",
            "add r1, sp, 0x10",
            "add r0, sp, 0xc",
            "bl sym.imp.string::string_string_const_",
            "mov r1, r6",
            "add r0, sp, 0xc",
            "bl sym.imp.string::append_char_const_",
            "add r0, sp, 0x18",
            "ldr r1, [r5, 0x10]",
            "bl fcn.0000ea28",
            "add r1, sp, 0xc",
            "add r0, sp, 8",
            "bl sym.imp.string::string_string_const_",
            "add r1, sp, 0x18",
            "add r0, sp, 8",
            "bl sym.imp.string::append_string_const_",
            "add r1, sp, 8",
            "add r0, sp, 4",
            "bl sym.imp.string::string_string_const_",
            "mov r1, r6",
            "add r0, sp, 4",
            "bl sym.imp.string::append_char_const_",
            "ldr r2, [r5]",
            "add r0, sp, 0x1c",
            "ldr r1, [0x00012dcc]",
            "bl sym.imp.s_char_const__::_",
            "add r1, sp, 4",
            "mov r0, sp",
            "bl sym.imp.string::string_string_const_",
            "add r1, sp, 0x1c",
            "mov r0, sp",
            "bl sym.imp.string::append_string_const_",
            "mov r1, sp",
            "mov r0, r4",
            "bl sym.imp.string::string_string_const_",
            "ldr r1, aav.0x0001acac",
            "mov r0, r4",
            "bl sym.imp.string::append_char_const_",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x1c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.operator___ostream__unsigned_int_": {
        "function_address": "0x0000cdfc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x660]!"
        ]
    },
    "sym.imp.nv::getJiffies__": {
        "function_address": "0x0000cd3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x6e0]!"
        ]
    },
    "fcn.0000e944": {
        "function_address": "0x0000e944",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "cmp r1, 5",
            "ldrls pc, [pc, r1, lsl 2]",
            "b 0xe9ac",
            "ldr r1, str.no_error",
            "b 0xe9a4",
            "ldr r1, str.format_error",
            "b 0xe9a4",
            "ldr r1, [0x0000ea10]",
            "b 0xe9a4",
            "ldr r1, str.name_error",
            "b 0xe9a4",
            "ldr r1, str.not_implemented",
            "b 0xe9a4",
            "ldr r1, str.refused",
            "bl sym.imp.string::string_char_const_",
            "b 0xe9fc",
            "ldr r1, str.UNKNOWN__",
            "add r0, sp, 8",
            "bl sym.imp.string::string_char_const_",
            "add r0, sp, 0xc",
            "mov r1, r5",
            "bl fcn.0000e818",
            "add r0, sp, 4",
            "add r1, sp, 8",
            "add r2, sp, 0xc",
            "bl fcn.0000e920",
            "add r1, sp, 4",
            "ldr r2, [0x0000ea24]",
            "mov r0, r4",
            "bl fcn.0000e8fc",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000dd08": {
        "function_address": "0x0000dd08",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.nv::lstream::isMuted___const",
            "cmp r0, 0",
            "moveq r0, r4",
            "movne r0, 0",
            "pop {r4, pc}"
        ]
    },
    "fcn.00018684": {
        "function_address": "0x00018684",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "add r5, r1, 0x48",
            "sub sp, sp, 0x34",
            "mov r7, r0",
            "add r0, sp, 0x28",
            "mov r4, r1",
            "bl sym.imp.nv::message::message__",
            "add r1, sp, 0x28",
            "mov r0, r5",
            "bl sym.imp.nv::message::operator_nv::message_const__const",
            "mov r6, r0",
            "add r0, sp, 0x28",
            "bl rsym._ZN2nv7messageD1Ev",
            "cmp r6, 0",
            "bne 0x186d0",
            "mov r0, r7",
            "mov r1, r5",
            "bl sym.imp.nv::message::message_nv::message_const_",
            "b 0x18a5c",
            "add r0, sp, 8",
            "bl sym.imp.nv::message::message__",
            "ldr r3, [r4, 0x50]",
            "cmp r3, 0",
            "beq 0x18724",
            "cmp r3, 3",
            "add r0, sp, 8",
            "ldr r1, [0x00018a68]",
            "bne 0x18a10",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "mov r4, 2",
            "ldr r1, [0x00018a6c]",
            "str r4, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "ldr r1, [0x00018a70]",
            "str r4, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_",
            "ldr r1, str.dns_name_does_not_exist",
            "b 0x18a40",
            "add r0, sp, 0xc",
            "bl sym.imp.string::string__",
            "ldrb r3, [r4, 0x38]",
            "cmp r3, 0",
            "beq 0x18754",
            "add r0, r4, 0x44",
            "mov r1, 3",
            "bl sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_",
            "mov r1, r0",
            "add r0, sp, 0xc",
            "bl fcn.0000e884",
            "b 0x18774",
            "add r0, sp, 0x28",
            "add r1, r4, 0xc",
            "bl fcn.0000ece4",
            "add r0, sp, 0xc",
            "add r1, sp, 0x28",
            "bl fcn.0000e884",
            "add r0, sp, 0x28",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x10",
            "add r6, r4, 0x44",
            "bl rsym._ZN11vector_baseC2Ev",
            "add r0, sp, 0x18",
            "bl rsym._ZN11vector_baseC2Ev",
            "add r0, sp, 0x20",
            "bl rsym._ZN11vector_baseC2Ev",
            "add r0, sp, 0x28",
            "bl rsym._ZN11vector_baseC2Ev",
            "ldr r3, [r4, 0x58]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x58]",
            "ldr r2, [r4, 0x10]",
            "cmp r5, r3",
            "beq 0x188a8",
            "ldr r1, [r5, 8]",
            "ldrh r3, [r1, 8]",
            "cmp r3, r2",
            "bne 0x188a0",
            "cmp r3, 1",
            "bne 0x187e8",
            "add r0, sp, 0x10",
            "add r1, sp, 0xc",
            "bl method vector<string>::push_back(string const&)",
            "ldr r1, [r5, 8]",
            "add r0, sp, 0x18",
            "add r1, r1, 0x10",
            "bl method vector<unsigned int>::push_back(unsigned int const&)",
            "b 0x18890",
            "cmp r3, 0x1c",
            "bne 0x1880c",
            "add r0, sp, 0x10",
            "add r1, sp, 0xc",
            "bl method vector<string>::push_back(string const&)",
            "ldr r1, [r5, 8]",
            "add r0, sp, 0x20",
            "add r1, r1, 0x10",
            "b 0x1888c",
            "cmp r3, 0xc",
            "bne 0x188a0",
            "add r0, sp, 4",
            "add r1, r1, 0x10",
            "bl fcn.0000ece4",
            "add r1, sp, 4",
            "add r0, sp, 0x10",
            "bl method vector<string>::push_back(string&&)",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r6",
            "mov r1, 4",
            "bl sym.imp.bool_nv::message::has_nv::be32_id__nv::be32_id__const",
            "cmp r0, 0",
            "beq 0x18864",
            "mov r1, 4",
            "mov r0, r6",
            "bl sym.imp.nv::IdTraits_nv::be32_id_::set_type_nv::message::get_nv::be32_id__nv::be32_id__const",
            "add r1, sp, 4",
            "str r0, [sp, 4]",
            "add r0, sp, 0x18",
            "bl method vector<unsigned int>::push_back(unsigned int&&)",
            "mov r0, r6",
            "mov r1, 0xa",
            "bl sym.imp.bool_nv::message::has_nv::addr6_id__nv::addr6_id__const",
            "cmp r0, 0",
            "beq 0x18890",
            "mov r1, 0xa",
            "mov r0, r6",
            "bl sym.imp.nv::IdTraits_nv::addr6_id_::set_type_nv::message::get_nv::addr6_id__nv::addr6_id__const",
            "mov r1, r0",
            "add r0, sp, 0x20",
            "bl fcn.00010544",
            "ldr r1, [r5, 8]",
            "add r0, sp, 0x28",
            "add r1, r1, 0xc",
            "bl method vector<unsigned int>::push_back(unsigned int const&)",
            "ldr r5, [r5]",
            "b 0x187a0",
            "cmp r2, 0xc",
            "bne 0x188cc",
            "ldr r1, [sp, 0x10]",
            "ldr r3, [sp, 0x14]",
            "rsb r3, r1, r3",
            "lsrs r3, r3, 2",
            "beq 0x188cc",
            "add r0, sp, 0xc",
            "bl fcn.0000e884",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [sp, 0x14]",
            "rsb r3, r3, r2",
            "lsrs r3, r3, 2",
            "beq 0x189a8",
            "ldr r3, [sp, 0xc]",
            "add r2, r3, 4",
            "ldr r3, [r3]",
            "cmp r3, r2",
            "beq 0x18908",
            "mov r1, 3",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_",
            "add r1, sp, 0xc",
            "bl fcn.0000e884",
            "ldr r3, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "rsb r2, r3, r2",
            "lsrs r2, r2, 2",
            "beq 0x1892c",
            "add r0, sp, 8",
            "mov r1, 4",
            "ldr r2, [r3]",
            "bl sym.imp.void_nv::message::insert_nv::be32_id__nv::be32_id__nv::IdTraits_nv::be32_id_::set_type_",
            "ldr r3, [sp, 0x20]",
            "ldr r2, [sp, 0x24]",
            "rsb r3, r3, r2",
            "lsrs r3, r3, 4",
            "beq 0x18954",
            "mov r1, 0xa",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::addr6_id_::type_nv::message::operator___nv::addr6_id__nv::addr6_id_",
            "ldr r1, [sp, 0x20]",
            "bl fcn.0000de78",
            "add r0, sp, 8",
            "mov r1, 5",
            "bl sym.imp.nv::IdTraits_nv::string_array_id_::type_nv::message::operator___nv::string_array_id__nv::string_array_id_",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x14]",
            "bl method vector<string>::assign(string const*, string const*)",
            "add r2, sp, 0x18",
            "add r0, sp, 8",
            "mov r1, 6",
            "bl sym.imp.void_nv::message::insert_nv::be32_array_id__nv::be32_array_id__nv::IdTraits_nv::be32_array_id_::set_type_",
            "add r0, sp, 8",
            "mov r1, 0xb",
            "bl sym.imp.nv::IdTraits_nv::addr6_array_id_::type_nv::message::operator___nv::addr6_array_id__nv::addr6_array_id_",
            "add r1, sp, 0x20",
            "bl method vector<IPAddr6>::operator=(vector<IPAddr6> const&)",
            "add r0, sp, 8",
            "mov r1, 7",
            "bl sym.imp.nv::IdTraits_nv::u32_array_id_::type_nv::message::operator___nv::u32_array_id__nv::u32_array_id_",
            "add r1, sp, 0x28",
            "bl method vector<unsigned int>::operator=(vector<unsigned int> const&)",
            "b 0x189e4",
            "ldr r1, [0x00018a68]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "mov r3, 2",
            "ldr r1, [0x00018a6c]",
            "str r3, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "mov r3, 3",
            "ldr r1, [0x00018a70]",
            "str r3, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_",
            "ldr r1, str.dns_name_exists__but_no_appropriate_record",
            "bl sym.imp.string::assign_char_const_",
            "add r0, sp, 0x28",
            "bl method vector<unsigned int>::~vector()",
            "add r0, sp, 0x20",
            "bl method vector<IPAddr6>::~vector()",
            "add r0, sp, 0x18",
            "bl method vector<unsigned int>::~vector()",
            "add r0, sp, 0x10",
            "bl method vector<string>::~vector()",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x18a44",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "mov r3, 2",
            "ldr r1, [0x00018a6c]",
            "str r3, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_",
            "mov r3, 1",
            "ldr r1, [0x00018a70]",
            "str r3, [r0]",
            "add r0, sp, 8",
            "bl sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_",
            "ldr r1, str.dns_server_failure",
            "bl sym.imp.string::assign_char_const_",
            "ldr r3, [sp, 8]",
            "add r0, sp, 8",
            "str r3, [r7]",
            "ldr r3, obj.nv::message::nilRep",
            "str r3, [sp, 8]",
            "bl rsym._ZN2nv7messageD1Ev",
            "mov r0, r7",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.nv::IdTraits_nv::string_id_::set_type_nv::message::get_nv::string_id__nv::string_id__const": {
        "function_address": "0x0000cd9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x6a0]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::be32_id_::set_type_nv::message::get_nv::be32_id__nv::be32_id__const": {
        "function_address": "0x0000cf1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5a0]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::addr6_id_::set_type_nv::message::get_nv::addr6_id__nv::addr6_id__const": {
        "function_address": "0x0000cbb0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7e8]!"
        ]
    },
    "sym.imp.IPAddr::str___const": {
        "function_address": "0x0000cd24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x6f0]!"
        ]
    },
    "sym.imp.operator___ostream__IPAddr6_const_": {
        "function_address": "0x0000c568",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc18]!"
        ]
    },
    "sym.imp.bool_nv::message::has_nv::string_id__nv::string_id__const": {
        "function_address": "0x0000c5bc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xbe0]!"
        ]
    },
    "rsym._ZN2nv7messageD1Ev": {
        "function_address": "0x0000c5b0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xbe8]!"
        ]
    },
    "sym.imp.nv::message::message_nv::message_const_": {
        "function_address": "0x0000ceb0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5e8]!"
        ]
    },
    "sym.imp.nv::Handler::replyMessage_nv::message_const__nv::message_": {
        "function_address": "0x0000ceec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5c0]!"
        ]
    },
    "fcn.00013970": {
        "function_address": "0x00013970",
        "instructions": [
            "ldrh r3, [r1, 0x1a]",
            "push {r4, r5, r6, r7, r8, sb, lr}",
            "mov r7, r2",
            "sub sp, sp, 0x10000",
            "lsl r2, r3, 8",
            "orr r3, r2, r3, lsr 8",
            "sub sp, sp, 4",
            "mov r6, r0",
            "strh r3, [r7]",
            "ldr r0, [0x00013c44]",
            "mov r5, r1",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0x13a18",
            "ldr r0, [0x00013c44]",
            "ldr r1, str.____sending_reply_to",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r5, 4]",
            "cmp r2, 0",
            "mov r4, r0",
            "mov r0, sp",
            "beq 0x139d4",
            "add r1, r5, 4",
            "bl sym.imp.IPAddr::str___const",
            "b 0x139dc",
            "add r1, r5, 8",
            "bl sym.imp.IPAddr6::str_bool__const",
            "mov r1, sp",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrh r1, [r5, 0x18]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r7",
            "ldr r1, [0x00013c44]",
            "bl fcn.000135d8",
            "ldr r8, [r6, 0x44]",
            "add sb, r6, 0x44",
            "bic r8, r8, 3",
            "mov r4, sb",
            "cmp r8, 0",
            "beq 0x13a5c",
            "ldr r0, [r6, 0x54]",
            "mov r1, r5",
            "add r0, r8, r0",
            "bl fcn.0000dd38",
            "ldr r3, [r8, 4]",
            "ldr r2, [r8, 8]",
            "cmp r0, 0",
            "moveq r4, r8",
            "movne r8, r2",
            "moveq r8, r3",
            "b 0x13a28",
            "cmp r4, sb",
            "bne 0x13a6c",
            "mov r4, sb",
            "b 0x13a84",
            "ldr r1, [r6, 0x54]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl fcn.0000dd38",
            "cmp r0, 0",
            "bne 0x13a64",
            "cmp r4, sb",
            "bne 0x13abc",
            "mov r0, sp",
            "mov r1, r5",
            "bl fcn.0001159c",
            "mov r1, sp",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.no_request_for_reply",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "b 0x13c38",
            "ldrb sb, [r5, 1]",
            "mov r0, r7",
            "cmp sb, 0",
            "beq 0x13b18",
            "add r1, sp, 2",
            "movw r2, 0xfffe",
            "bl fcn.00011274",
            "ldr r1, [r6, 0x1c]",
            "ldr r2, [r6, 0x14]",
            "bl fcn.00011274",
            "add sp, sp, 0x10000",
            "add sp, sp, 4",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "sym.imp.nv::Allocator::free_unsigned_int_": {
        "function_address": "0x0000c994",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x950]!"
        ]
    },
    "fcn.000104f0": {
        "function_address": "0x000104f0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldr r6, [r1]",
            "ldr r4, [r6]",
            "bl fcn.0000e09c",
            "ldr r3, [r5]",
            "ldr r7, [r3]",
            "cmp r4, r6",
            "beq 0x1053c",
            "mov r0, 0xc",
            "bl sym.imp.malloc",
            "ldr r3, [r4, 8]",
            "mov r1, r7",
            "mov r2, r0",
            "str r3, [r0, 8]",
            "mov r0, r5",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "ldr r4, [r4]",
            "b 0x1050c",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.000159f4": {
        "function_address": "0x000159f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x20",
            "mov r5, r1",
            "add r0, sp, 0x10",
            "mov r1, r2",
            "bl fcn.0000e04c",
            "add r0, sp, 0x14",
            "add r6, r5, 0x20",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r3, 0",
            "str r3, [sp]",
            "add r1, sp, 0x14",
            "str r3, [sp, 4]",
            "add r2, sp, 0x10",
            "ldr r3, [0x00015ad8]",
            "ldr r0, [r3]",
            "mov r3, 2",
            "bl fcn.0001566c",
            "ldr r3, [sp, 0x14]",
            "ldr r4, [r3]",
            "ldr r3, [sp, 0x14]",
            "cmp r4, r3",
            "beq 0x15a6c",
            "ldr r3, [r4, 8]",
            "mov r0, r6",
            "add r1, sp, 0x18",
            "str r3, [sp, 0x18]",
            "bl fcn.00017258",
            "ldr r4, [r4]",
            "b 0x15a44",
            "add r0, sp, 0x14",
            "bl sym.imp.list_base::count_nodes___const",
            "subs r4, r0, 0",
            "beq 0x15a8c",
            "add r0, sp, 0x14",
            "mov r4, 1",
            "bl fcn.0000e0d4",
            "b 0x15ac4",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [r2]",
            "cmp r3, r2",
            "beq 0x15abc",
            "add r0, sp, 8",
            "add r1, sp, 0x10",
            "add r2, sp, 0x1c",
            "str r3, [sp, 0x1c]",
            "bl fcn.0000e008",
            "add r0, sp, 0x14",
            "bl fcn.0000e0d4",
            "b 0x15a0c",
            "add r0, sp, 0x14",
            "bl fcn.0000e0d4",
            "add r0, sp, 0x10",
            "bl fcn.0000e174",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.list_base::count_nodes___const": {
        "function_address": "0x0000cc70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "fcn.0000e008": {
        "function_address": "0x0000e008",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "ldr r1, [r2]",
            "mov r4, r2",
            "bl sym.imp.list_base::unlink_list_node_base_",
            "ldr r4, [r4]",
            "cmp r4, 0",
            "mov r6, r0",
            "beq 0xe040",
            "add r0, r4, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "bl sym.imp.free",
            "str r6, [r5]",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0001584c": {
        "function_address": "0x0001584c",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r8, r1",
            "add r0, sp, 8",
            "mov r4, r2",
            "bl rsym._ZN9list_baseC2Ev",
            "ldr r3, [r8]",
            "ldr sb, [0x000159f0]",
            "ldr r7, [r3]",
            "ldr r3, [r8]",
            "cmp r7, r3",
            "beq 0x159c0",
            "ldr r2, [r7, 8]",
            "ldrh r0, [r2, 8]",
            "sub r0, r0, 2",
            "uxth r0, r0",
            "cmp r0, 0xd",
            "bhi 0x158e4",
            "mov r3, 1",
            "movw r1, 0x4ef",
            "lsl r0, r3, r0",
            "and r1, r0, r1",
            "cmp r1, 0",
            "bne 0x158c8",
            "tst r0, 0x2000",
            "beq 0x158e4",
            "str r1, [sp, 4]",
            "add r2, r2, 0x14",
            "str r3, [sp]",
            "add r1, sp, 8",
            "ldr r0, [sb]",
            "b 0x158e0",
            "ldr r0, [sb]",
            "mov r1, 0",
            "add r2, r2, 0x10",
            "str r1, [sp, 4]",
            "add r1, sp, 8",
            "str r3, [sp]",
            "bl fcn.0001566c",
            "ldr r3, [sp, 8]",
            "add sl, r4, 0x24",
            "ldr r6, [r3]",
            "ldr r3, [sp, 8]",
            "cmp r6, r3",
            "beq 0x159b0",
            "ldr r3, [r6, 8]",
            "str r3, [sp, 0xc]",
            "ldr r3, [r4, 0x1c]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x1c]",
            "cmp r5, r3",
            "beq 0x15950",
            "ldr r1, [r5, 8]",
            "ldr r0, [sp, 0xc]",
            "add r1, r1, 4",
            "add r0, r0, 4",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "beq 0x159d0",
            "ldr r0, [sp, 0xc]",
            "ldr r3, [r5, 8]",
            "ldrh r2, [r0, 8]",
            "ldrh r3, [r3, 8]",
            "cmp r2, r3",
            "bne 0x159d0",
            "b 0x159d8",
            "ldr r3, [r4, 0x20]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x20]",
            "cmp r5, r3",
            "beq 0x1599c",
            "ldr r1, [r5, 8]",
            "ldr r0, [sp, 0xc]",
            "add r1, r1, 4",
            "add r0, r0, 4",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "beq 0x159e8",
            "ldr r0, [sp, 0xc]",
            "ldr r3, [r5, 8]",
            "ldrh r2, [r0, 8]",
            "ldrh r3, [r3, 8]",
            "cmp r2, r3",
            "bne 0x159e8",
            "b 0x159d8",
            "mov r0, sl",
            "add r1, sp, 0xc",
            "bl fcn.00017258",
            "ldr r6, [r6]",
            "b 0x158f0",
            "add r0, sp, 8",
            "bl fcn.0000e09c",
            "ldr r7, [r7]",
            "b 0x1586c",
            "add r0, sp, 8",
            "bl fcn.0000e0d4",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr r5, [r5]",
            "b 0x1590c",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "b 0x159a8",
            "ldr r5, [r5]",
            "b 0x15958"
        ]
    },
    "fcn.0001a724": {
        "function_address": "0x0001a724",
        "instructions": [
            "subs r2, r1, 1",
            "bxeq lr",
            "blo 0x1a904",
            "cmp r0, r1",
            "bls 0x1a8e8",
            "tst r1, r2",
            "beq 0x1a8f4",
            "clz r3, r0",
            "clz r2, r1",
            "sub r3, r2, r3",
            "rsbs r3, r3, 0x1f",
            "addne r3, r3, r3, lsl 1",
            "mov r2, 0",
            "addne pc, pc, r3, lsl 2",
            "mov r0, r0",
            "cmp r0, r1, lsl 31",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 31",
            "cmp r0, r1, lsl 30",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 30",
            "cmp r0, r1, lsl 29",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 29",
            "cmp r0, r1, lsl 28",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 28",
            "cmp r0, r1, lsl 27",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 27",
            "cmp r0, r1, lsl 26",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 26",
            "cmp r0, r1, lsl 25",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 25",
            "cmp r0, r1, lsl 24",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 24",
            "cmp r0, r1, lsl 23",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 23",
            "cmp r0, r1, lsl 22",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 22",
            "cmp r0, r1, lsl 21",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 21",
            "cmp r0, r1, lsl 20",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 20",
            "cmp r0, r1, lsl 19",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 19",
            "cmp r0, r1, lsl 18",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 18",
            "cmp r0, r1, lsl 17",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 17",
            "cmp r0, r1, lsl 16",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 16",
            "cmp r0, r1, lsl 15",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 15",
            "cmp r0, r1, lsl 14",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 14",
            "cmp r0, r1, lsl 13",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 13",
            "cmp r0, r1, lsl 12",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 12",
            "cmp r0, r1, lsl 11",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 11",
            "cmp r0, r1, lsl 10",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 10",
            "cmp r0, r1, lsl 9",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 9",
            "cmp r0, r1, lsl 8",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 8",
            "cmp r0, r1, lsl 7",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 7",
            "cmp r0, r1, lsl 6",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 6",
            "cmp r0, r1, lsl 5",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 5",
            "cmp r0, r1, lsl 4",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 4",
            "cmp r0, r1, lsl 3",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 3",
            "cmp r0, r1, lsl 2",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 2",
            "cmp r0, r1, lsl 1",
            "adc r2, r2, r2",
            "subhs r0, r0, r1, lsl 1",
            "cmp r0, r1",
            "adc r2, r2, r2",
            "subhs r0, r0, r1",
            "mov r0, r2",
            "bx lr",
            "moveq r0, 1",
            "movne r0, 0",
            "bx lr",
            "clz r2, r1",
            "rsb r2, r2, 0x1f",
            "lsr r0, r0, r2",
            "bx lr",
            "cmp r0, 0",
            "mvnne r0, 0",
            "b 0x1a930",
            "push {r1, lr}",
            "mov r0, 8",
            "bl sym.imp.raise",
            "pop {r1, pc}"
        ]
    },
    "sym.imp.raise": {
        "function_address": "0x0000c460",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcc8]!"
        ]
    },
    "fcn.00018dd0": {
        "function_address": "0x00018dd0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0x18]",
            "cmp r3, 0",
            "bne 0x18df4",
            "mov r3, 2",
            "str r3, [r0, 0x50]",
            "pop {r3, r4, r5, lr}",
            "b fcn.00018a84",
            "sub r3, r3, 1",
            "str r3, [r0, 0x18]",
            "ldrb r3, [r0, 0x1c]",
            "cmp r3, 0",
            "bne 0x18e30",
            "ldr r3, [0x00018e58]",
            "add r0, r0, 0x24",
            "ldr r3, [r3]",
            "ldr r1, [r3, 0x578]",
            "ldr r3, [r3, 0x57c]",
            "cmp r1, r3",
            "beq 0x18e30",
            "ldr r3, [r1], 4",
            "str r3, [r4, 0x20]",
            "bl fcn.0000de78",
            "ldr r5, [r4, 0x4c]",
            "bl sym.imp.rand",
            "ubfx r3, r0, 8, 8",
            "orr r0, r3, r0, lsl 8",
            "mov r3, 0",
            "strh r0, [r5]",
            "mov r0, r4",
            "strb r3, [r4, 8]",
            "pop {r3, r4, r5, lr}",
            "b fcn.00015b5c"
        ]
    },
    "fcn.0000de78": {
        "function_address": "0x0000de78",
        "instructions": [
            "add r2, r1, 0x10",
            "mov r3, r0",
            "ldr ip, [r1], 4",
            "cmp r1, r2",
            "str ip, [r3], 4",
            "bne 0xde80",
            "bx lr"
        ]
    },
    "sym.imp.rand": {
        "function_address": "0x0000c7e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa70]!"
        ]
    },
    "fcn.000190c8": {
        "function_address": "0x000190c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x13c",
            "mov r4, r0",
            "add r0, sp, 0x30",
            "ldr r5, [r1]",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, sp, 0x24",
            "mov r1, r4",
            "bl fcn.00012cac",
            "add r1, sp, 0x24",
            "ldr r0, obj.cout",
            "add r6, sp, 0x28",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.recv",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r7, 0",
            "mov sl, r0",
            "mov r0, r6",
            "bl sym.imp.string::string__",
            "ldr r3, [r5, 0x1c]",
            "ldr r8, [r3]",
            "ldr r3, [r5, 0x1c]",
            "cmp r8, r3",
            "beq 0x19174",
            "cmp r7, 2",
            "beq 0x19174",
            "ldr r3, [r3]",
            "cmp r8, r3",
            "beq 0x19148",
            "mov r0, r6",
            "ldr r1, aav.0x0001ab38",
            "bl sym.imp.string::append_char_const_",
            "ldr r1, [r8, 8]",
            "add r0, sp, 0x38",
            "bl fcn.000129b8",
            "add r1, sp, 0x38",
            "mov r0, r6",
            "add r7, r7, 1",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x38",
            "bl rsym._ZN6stringD1Ev",
            "ldr r8, [r8]",
            "b 0x1911c",
            "add sb, r5, 0x1c",
            "mov r0, sb",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, r7",
            "bls 0x191b4",
            "mov r0, sb",
            "bl sym.imp.list_base::count_nodes___const",
            "ldr r1, str.___u_more_",
            "rsb r2, r7, r0",
            "add r0, sp, 0x38",
            "bl sym.imp.s_char_const__::_",
            "mov r0, r6",
            "add r1, sp, 0x38",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x38",
            "bl rsym._ZN6stringD1Ev",
            "mov r1, r6",
            "mov r0, sl",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r6",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "ldr r0, [0x000198d8]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0x19254",
            "ldr r0, [0x000198d8]",
            "ldr r1, str.____got_answer_from",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 0x20]",
            "cmp r2, 0",
            "mov r7, r0",
            "add r0, sp, 0x38",
            "beq 0x19210",
            "add r1, r4, 0x20",
            "bl sym.imp.IPAddr::str___const",
            "b 0x19218",
            "add r1, r4, 0x24",
            "bl sym.imp.IPAddr6::str_bool__const",
            "add r1, sp, 0x38",
            "mov r0, r7",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x34]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x38",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "ldr r1, [0x000198d8]",
            "bl fcn.000135d8",
            "ldrh r2, [r5]",
            "ldr r3, [r4, 0x4c]",
            "lsl r1, r2, 8",
            "orr r1, r1, r2, lsr 8",
            "ldrh r2, [r3]",
            "uxth r1, r1",
            "lsl r0, r2, 8",
            "orr r2, r0, r2, lsr 8",
            "uxth r2, r2",
            "cmp r1, r2",
            "bne 0x19830",
            "ldrb r2, [r5, 2]",
            "lsrs r1, r2, 7",
            "beq 0x19830",
            "ldrb r3, [r3, 2]",
            "ubfx r2, r2, 3, 4",
            "ubfx r3, r3, 3, 4",
            "cmp r2, r3",
            "bne 0x19830",
            "add r0, r5, 0x18",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 1",
            "bne 0x19830",
            "ldr r3, [r5, 0x18]",
            "add r0, sp, 0x30",
            "ldr fp, [0x000198e4]",
            "add r8, r4, 0xc",
            "ldr sl, [0x000198e8]",
            "ldr r7, [r3]",
            "add r1, r7, 8",
            "bl fcn.0000e130",
            "ldrh r3, [r7, 0xc]",
            "add r2, sp, 0x138",
            "add r0, sp, 0x30",
            "mov r1, r8",
            "strh r3, [r2, fp]",
            "ldrh r3, [r7, 0xe]",
            "strh r3, [r2, sl]",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "beq 0x19830",
            "add r3, sp, 0x138",
            "ldrh r2, [r3, fp]",
            "ldr r3, [r4, 0x10]",
            "cmp r2, r3",
            "bne 0x19830",
            "add r1, sp, 0x138",
            "ldrh r3, [r1, sl]",
            "cmp r3, 1",
            "bne 0x19830",
            "ldrb r3, [r5, 3]",
            "lsrs r2, r3, 7",
            "bne 0x19334",
            "and r3, r3, 0xf",
            "cmp r3, 3",
            "bne 0x19840",
            "ldrb r1, [r5, 3]",
            "and r1, r1, 0xf",
            "str r1, [r4, 0x50]",
            "cmp r1, 3",
            "ldreq r1, [r5, 0x20]",
            "ldreq r3, [r1]",
            "bne 0x196bc",
            "cmp r3, r1",
            "beq 0x196b0",
            "ldr r2, [r3, 8]",
            "ldrh r0, [r2, 8]",
            "cmp r0, 6",
            "bne 0x195bc",
            "ldr r3, [0x000198ec]",
            "mov r0, r8",
            "ldr sl, [r2, 0xc]",
            "ldr r7, [r3]",
            "ldr r3, [r2, 0x28]",
            "cmp sl, r3",
            "movhs sl, r3",
            "ldr r3, [0x000198f0]",
            "mov r5, r7",
            "ldr r3, [r3]",
            "ldr r3, [r3, 0x64]",
            "ldr r3, [r3, 0x20]",
            "cmp sl, r3",
            "movhs sl, r3",
            "str sl, [sp, 0x14]",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x194d0",
            "ldr r8, [r4, 0xc]",
            "mov fp, 0",
            "ldr sl, [r5, 8]",
            "ldr r8, [r8, 4]",
            "cmp sl, 0",
            "add sb, r8, 8",
            "beq 0x19464",
            "ldr r2, [sl, 4]",
            "add ip, sl, 4",
            "bic r2, r2, 3",
            "mov r6, ip",
            "cmp r2, 0",
            "beq 0x1941c",
            "ldr r0, [sl, 0x14]",
            "mov r1, sb",
            "str r2, [sp, 0x10]",
            "add r0, r2, r0",
            "str ip, [sp, 0xc]",
            "bl fcn.0000dc34",
            "ldr r2, [sp, 0x10]",
            "ldr ip, [sp, 0xc]",
            "ldmib r2, {r1, lr}",
            "cmp r0, 0",
            "moveq r6, r2",
            "movne r2, lr",
            "moveq r2, r1",
            "b 0x193dc",
            "cmp r6, ip",
            "bne 0x1942c",
            "mov r6, ip",
            "b 0x1944c",
            "ldr r1, [sl, 0x14]",
            "mov r0, sb",
            "str ip, [sp, 0xc]",
            "add r1, r6, r1",
            "bl fcn.0000dc34",
            "ldr ip, [sp, 0xc]",
            "cmp r0, 0",
            "bne 0x19424",
            "ldr r3, [r5, 8]",
            "add r3, r3, 4",
            "cmp r6, r3",
            "ldrne r5, [r6, 0x10]",
            "bne 0x194c0",
            "b 0x19484",
            "mov r0, 0x1c",
            "bl sym.imp.malloc",
            "ldr r1, aav.0x0000d7b4",
            "mov r2, 0xc",
            "mov r3, sl",
            "mov r6, r0",
            "bl sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_",
            "str r6, [r5, 8]",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl sym.imp.string::string__",
            "mov r1, sb",
            "mov r0, r6",
            "bl fcn.0000e884",
            "stmib r6, {r5, fp}",
            "strb fp, [r6, 0xc]",
            "mov r1, sb",
            "ldr r0, [r5, 8]",
            "mov r5, r6",
            "str fp, [r6, 0x10]",
            "bl fcn.00011d74",
            "str r6, [r0]",
            "ldr r3, [r4, 0xc]",
            "ldr r3, [r3]",
            "cmp r8, r3",
            "bne 0x193b8",
            "ldrb r3, [r5, 0xc]",
            "cmp r3, 0",
            "beq 0x194fc",
            "ldr r3, [r5, 0x10]",
            "cmp r3, 0",
            "ldrne r2, [0x000198f8]",
            "ldrne r1, [sp, 0x14]",
            "ldrne r2, [r2]",
            "addne sl, r1, r2",
            "strne sl, [r3, 0x1c]",
            "b 0x196b0",
            "mov r0, r7",
            "mov r1, r5",
            "bl fcn.00014730",
            "ldr r8, [r5, 0x10]",
            "cmp r8, 0",
            "bne 0x196b0",
            "mov sb, 1",
            "mov r0, 0x20",
            "strb sb, [r5, 0xc]",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001af40",
            "mov r2, r5",
            "str r3, [r0]",
            "mov r6, r0",
            "ldr r3, [r7, 0x24]",
            "str r0, [r2, 0x10]!",
            "stmib r0, {r2, r8}",
            "str r0, [r3, 0xc]",
            "str r3, [r0, 0x10]",
            "add r3, r7, 0x14",
            "str r3, [r0, 0xc]",
            "ldr r3, [0x000198f8]",
            "ldr r2, [sp, 0x14]",
            "str r0, [r7, 0x24]",
            "ldr r3, [r3]",
            "strh r8, [r0, 0x18]",
            "add sl, r2, r3",
            "strb r8, [r0, 0x1a]",
            "str sl, [r0, 0x1c]",
            "mov r0, 0x10",
            "bl sym.imp.malloc",
            "mvn r3, 0",
            "str r3, [r0, 4]",
            "mov r7, r0",
            "ldr r3, aav.0x0001bac0",
            "mov r2, r7",
            "str r5, [r0, 8]",
            "str r6, [r0, 0xc]",
            "str r3, [r0]",
            "add r0, sp, 0x18",
            "ldr r3, [0x00019904]",
            "ldr r1, [r3]",
            "mov r3, sb",
            "bl sym.imp.AMap::add_Object__bool_",
            "ldr r3, [r5, 0x10]",
            "ldr r2, [r7, 4]",
            "str r2, [r3, 0x14]",
            "b 0x196b0",
            "ldr r3, [r3]",
            "b 0x19350",
            "ldr r3, fcn.00018fc4",
            "mov r0, r4",
            "str r3, [sp, 0x38]",
            "mov r3, 0",
            "str r3, [sp, 0x3c]",
            "add r3, sp, 0x38",
            "ldm r3, {r1, r2}",
            "bl fcn.00012824",
            "ldrb r3, [r4, 8]",
            "cmp r3, 0",
            "beq 0x19774",
            "ldrb r3, [r4, 0x1c]",
            "cmp r3, 0",
            "bne 0x1961c",
            "mov r2, 1",
            "stm sp, {r2, r3}",
            "ldr r3, [0x000198ec]",
            "add r1, r4, 0x58",
            "mov r2, r8",
            "ldr r0, [r3]",
            "ldr r3, [r4, 0x10]",
            "bl fcn.0001566c",
            "ldr r3, [r4, 0x58]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "bne 0x19640",
            "add r0, r4, 0x58",
            "mov r1, sb",
            "bl fcn.000104f0",
            "mov r0, sb",
            "bl fcn.0000e09c",
            "ldrb r3, [r4, 0x38]",
            "cmp r3, 0",
            "bne 0x198a4",
            "ldr r0, [0x0001990c]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "bne 0x198a4",
            "ldr r0, [r4, 0x54]",
            "cmp r0, 0",
            "beq 0x196b0",
            "add r5, r4, 0x58",
            "add r0, r0, 0x1c",
            "mov r1, r5",
            "bl fcn.000104f0",
            "mov r0, r5",
            "bl fcn.0000e09c",
            "ldr r1, [r4, 0x54]",
            "mov r2, r8",
            "mov r0, r4",
            "bl fcn.000159f4",
            "ldr r2, [r4, 0x54]",
            "mov r0, r4",
            "add r1, r2, 0x1c",
            "bl fcn.0001584c",
            "ldr r2, [r4, 0x54]",
            "mov r0, r4",
            "add r1, r2, 0x20",
            "bl fcn.0001584c",
            "mov r0, r4",
            "bl fcn.00018a84",
            "b 0x19830",
            "cmp r1, 0",
            "add r7, r4, 4",
            "bne 0x19794",
            "mov r0, r7",
            "ldrb sl, [r5, 2]",
            "bl fcn.00012dd4",
            "ldr r3, [r5, 0x1c]",
            "ldr fp, [0x000198ec]",
            "ubfx sl, sl, 2, 1",
            "ldr r7, [r3]",
            "ldr r3, [r5, 0x1c]",
            "cmp r7, r3",
            "beq 0x1970c",
            "ldr r1, [r7, 8]",
            "mov r2, 0",
            "ldr r0, [fp]",
            "mov r3, sl",
            "bl fcn.000149f4",
            "ldr r7, [r7]",
            "b 0x196e4",
            "ldr r3, [r5, 0x20]",
            "ldr fp, [0x000198ec]",
            "ldr r7, [r3]",
            "ldr r3, [r5, 0x20]",
            "cmp r7, r3",
            "beq 0x19740",
            "ldr r1, [r7, 8]",
            "mov r2, 0",
            "ldr r0, [fp]",
            "mov r3, sl",
            "bl fcn.000149f4",
            "ldr r7, [r7]",
            "b 0x19718",
            "ldr r3, [r5, 0x24]",
            "ldr fp, [0x000198ec]",
            "ldr r7, [r3]",
            "ldr r3, [r5, 0x24]",
            "cmp r7, r3",
            "beq 0x195c4",
            "ldr r1, [r7, 8]",
            "mov r2, 0",
            "ldr r0, [fp]",
            "mov r3, sl",
            "bl fcn.000149f4",
            "ldr r7, [r7]",
            "b 0x1974c",
            "ldrb r3, [r5, 2]",
            "tst r3, 2",
            "beq 0x195f0",
            "mov r3, 1",
            "mov r0, r4",
            "strb r3, [r4, 8]",
            "bl fcn.00015b5c",
            "b 0x19830",
            "mov r0, r6",
            "mov r1, r4",
            "bl fcn.00012cac",
            "mov r1, r6",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.error:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x50]",
            "mov r5, r0",
            "add r0, sp, 0x38",
            "bl fcn.0000e944",
            "add r1, sp, 0x38",
            "mov r0, r5",
            "mov r5, 0",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x38",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r6",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, fcn.00018fc4",
            "str r5, [sp, 0x2c]",
            "mov r0, r4",
            "str r3, [sp, 0x28]",
            "ldm r6, {r1, r2}",
            "bl fcn.00012824",
            "mov r1, r5",
            "mov r0, r7",
            "bl fcn.00012dd4",
            "ldr r3, [0x00019914]",
            "add r1, sp, 0x38",
            "add r2, r4, 0x24",
            "ldr r0, [r3]",
            "ldr r3, [r4, 0x20]",
            "str r3, [sp, 0x38]",
            "bl fcn.00013d30",
            "mov r0, r4",
            "bl fcn.00018dd0",
            "add r0, sp, 0x30",
            "bl fcn.0000e174",
            "add sp, sp, 0x13c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r0, [r4, 0x20]",
            "bl sym.imp.inet_ntoa",
            "ldr r1, str.DNS_server__s_does_not_allow_recursive_requests",
            "mov r2, r0",
            "add r0, sp, 0x38",
            "bl sym.imp.sprintf",
            "mov r0, r6",
            "mov r1, r4",
            "bl fcn.00012cac",
            "mov r1, r6",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "add r1, sp, 0x38",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r6",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, [0x00019914]",
            "mov r1, r6",
            "add r2, r4, 0x24",
            "ldr r0, [r3]",
            "ldr r3, [r4, 0x20]",
            "str r3, [sp, 0x28]",
            "bl fcn.00013d30",
            "b 0x19334",
            "mov r0, r6",
            "mov r1, r4",
            "bl fcn.00018684",
            "add r0, r4, 0x48",
            "mov r1, r6",
            "bl sym.imp.nv::message::operator_nv::message_const_",
            "mov r0, r6",
            "bl rsym._ZN2nv7messageD1Ev",
            "b 0x1965c"
        ]
    },
    "fcn.000129b8": {
        "function_address": "0x000129b8",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x2c",
            "mov r4, r1",
            "mov r5, r0",
            "add r1, r1, 4",
            "add r0, sp, 0x20",
            "bl fcn.0000ece4",
            "ldr r1, [0x00012c84]",
            "add r0, sp, 0x1c",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x20",
            "add r0, sp, 0x1c",
            "bl sym.imp.string::append_string_const_",
            "ldr r2, aav.0x0001add0",
            "add r0, sp, 0x18",
            "add r1, sp, 0x1c",
            "bl fcn.0000e8fc",
            "add r0, sp, 0x24",
            "ldrh r1, [r4, 8]",
            "bl fcn.0000ea28",
            "add r0, sp, 0x14",
            "add r1, sp, 0x18",
            "add r2, sp, 0x24",
            "bl fcn.0000e920",
            "add r1, sp, 0x14",
            "ldr r2, aav.0x0001add0",
            "mov r0, r5",
            "bl fcn.0000e8fc",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x1c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x20",
            "bl rsym._ZN6stringD1Ev",
            "ldr r2, [r4, 0xc]",
            "add r0, sp, 0x24",
            "ldr r1, [0x00012c8c]",
            "bl sym.imp.s_char_const__::_",
            "add r1, sp, 0x24",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "ldrh r3, [r4, 8]",
            "sub r3, r3, 1",
            "cmp r3, 0x1b",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x12a80.9",
            "ldr r0, [r4, 0x10]",
            "bl sym.imp.inet_ntoa",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.string::append_char_const_",
            "b 0x12c6c",
            "add r0, sp, 0x24",
            "add r1, r4, 0x10",
            "bl fcn.0000ece4",
            "b 0x12c58",
            "ldr r3, [r4, 0x20]",
            "add r0, sp, 0x24",
            "ldr r1, str.serial:_u_refresh:_u_retry:_u_expire:_u_min:_u",
            "ldr r2, [r4, 0x18]",
            "str r3, [sp]",
            "ldr r3, [r4, 0x24]",
            "str r3, [sp, 4]",
            "ldr r3, [r4, 0x28]",
            "str r3, [sp, 8]",
            "ldr r3, [r4, 0x1c]",
            "bl sym.imp.s_char_const__::_",
            "b 0x12c58",
            "add r0, sp, 0x20",
            "add r1, r4, 0x10",
            "bl fcn.0000ece4",
            "ldr r1, str.resp:",
            "add r0, sp, 0x1c",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x20",
            "add r0, sp, 0x1c",
            "bl sym.imp.string::append_string_const_",
            "ldr r2, str._err:",
            "add r0, sp, 0x18",
            "add r1, sp, 0x1c",
            "bl fcn.0000e8fc",
            "add r0, sp, 0x24",
            "add r1, r4, 0x14",
            "bl fcn.0000ece4",
            "add r2, sp, 0x24",
            "add r0, sp, 0x14",
            "add r1, sp, 0x18",
            "bl fcn.0000e920",
            "add r1, sp, 0x14",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x18",
            "b 0x12c18",
            "add r0, sp, 0x20",
            "ldr r1, str.pref:_u",
            "ldrh r2, [r4, 0x10]",
            "bl sym.imp.s_char_const__::_",
            "ldr r2, str._exch:",
            "add r0, sp, 0x1c",
            "add r1, sp, 0x20",
            "bl fcn.0000e8fc",
            "add r0, sp, 0x24",
            "add r1, r4, 0x14",
            "bl fcn.0000ece4",
            "add r2, sp, 0x24",
            "add r0, sp, 0x18",
            "add r1, sp, 0x1c",
            "bl fcn.0000e920",
            "add r1, sp, 0x18",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x1c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x20",
            "b 0x12c68",
            "add r0, sp, 0x24",
            "add r1, r4, 0x10",
            "mov r2, 0",
            "bl sym.imp.IPAddr6::str_bool__const",
            "b 0x12c58",
            "ldr r2, [r4, 0x14]",
            "add r0, sp, 0x24",
            "ldr r3, [r4, 0x10]",
            "ldr r1, str.rawbytes:_u",
            "rsb r2, r3, r2",
            "bl sym.imp.s_char_const__::_",
            "mov r0, r5",
            "add r1, sp, 0x24",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "ldr r1, [0x00012ca8]",
            "bl sym.imp.string::append_char_const_",
            "mov r0, r5",
            "add sp, sp, 0x2c",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.s_char_const__::_": {
        "function_address": "0x0000c694",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb50]!"
        ]
    },
    "sym.imp.IPAddr6::str_bool__const": {
        "function_address": "0x0000c670",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb68]!"
        ]
    },
    "fcn.000135d8": {
        "function_address": "0x000135d8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov r0, r1",
            "ldr r1, [0x00013928]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r3, [r0]",
            "mov r6, r0",
            "ldr r0, [r3, -0xc]",
            "add r0, r6, r0",
            "bl fcn.0000db7c",
            "ldrh r1, [r4]",
            "mov r0, r6",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r3, [r0]",
            "ldr r3, [r3, -0xc]",
            "add r0, r0, r3",
            "bl fcn.0000db98",
            "ldr r1, str._rd:",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 2]",
            "and r1, r1, 1",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._tc:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 2]",
            "ubfx r1, r1, 1, 1",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._aa:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 2]",
            "ubfx r1, r1, 2, 1",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._qr:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 2]",
            "lsr r1, r1, 7",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._ra:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 3]",
            "lsr r1, r1, 7",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r6, [r4, 2]",
            "ubfx r6, r6, 3, 4",
            "cmp r6, 1",
            "mov r7, r0",
            "beq 0x136cc",
            "blo 0x136c0",
            "cmp r6, 2",
            "bne 0x136dc",
            "mov r0, sp",
            "ldr r1, str.STATUS",
            "b 0x136d4",
            "mov r0, sp",
            "ldr r1, [0x00013948]",
            "b 0x136d4",
            "ldr r1, str.IQUERY",
            "mov r0, sp",
            "bl sym.imp.string::string_char_const_",
            "b 0x1372c",
            "ldr r1, str.UNKNOWN__",
            "add r0, sp, 8",
            "bl sym.imp.string::string_char_const_",
            "add r0, sp, 4",
            "mov r1, r6",
            "bl fcn.0000e818",
            "add r0, sp, 0xc",
            "add r1, sp, 8",
            "add r2, sp, 4",
            "bl fcn.0000e920",
            "add r1, sp, 0xc",
            "ldr r2, [0x00013954]",
            "mov r0, sp",
            "bl fcn.0000e8fc",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r1, sp",
            "mov r0, r7",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, [0x00013958]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 3]",
            "and r1, r1, 0xf",
            "mov r6, r0",
            "add r0, sp, 0xc",
            "bl fcn.0000e944",
            "add r1, sp, 0xc",
            "mov r0, r6",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, [0x0001395c]",
            "bl sym.imp.operator___ostream__char_const_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "ldrb r3, [r4, 3]",
            "tst r3, 0x70",
            "beq 0x1379c",
            "ldr r1, aav.0x0001acb0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 3]",
            "ubfx r1, r1, 4, 3",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "mov r0, r5",
            "bl sym.imp.endl_ostream_",
            "add r0, r4, 0x18",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x137c0",
            "mov r0, r5",
            "ldr r1, str.question:",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r3, [r4, 0x18]",
            "ldr r6, [r3]",
            "ldr r3, [r4, 0x18]",
            "cmp r6, r3",
            "beq 0x13800",
            "add r1, r6, 8",
            "add r0, sp, 0xc",
            "bl fcn.0000ed3c",
            "add r1, sp, 0xc",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "ldr r6, [r6]",
            "b 0x137c8",
            "add r0, r4, 0x1c",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x13820",
            "ldr r1, str.answer:",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "ldr r3, [r4, 0x1c]",
            "ldr r6, [r3]",
            "ldr r3, [r4, 0x1c]",
            "cmp r6, r3",
            "beq 0x13860",
            "ldr r1, [r6, 8]",
            "add r0, sp, 0xc",
            "bl fcn.000129b8",
            "add r1, sp, 0xc",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "ldr r6, [r6]",
            "b 0x13828",
            "add r0, r4, 0x20",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x13880",
            "ldr r1, str.authority:",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "ldr r3, [r4, 0x20]",
            "ldr r6, [r3]",
            "ldr r3, [r4, 0x20]",
            "cmp r6, r3",
            "beq 0x138c0",
            "ldr r1, [r6, 8]",
            "add r0, sp, 0xc",
            "bl fcn.000129b8",
            "add r1, sp, 0xc",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "ldr r6, [r6]",
            "b 0x13888",
            "add r0, r4, 0x24",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x138e0",
            "ldr r1, str.additional:",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "ldr r3, [r4, 0x24]",
            "ldr r6, [r3]",
            "ldr r3, [r4, 0x24]",
            "cmp r6, r3",
            "beq 0x13920",
            "ldr r1, [r6, 8]",
            "add r0, sp, 0xc",
            "bl fcn.000129b8",
            "add r1, sp, 0xc",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "ldr r6, [r6]",
            "b 0x138e8",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000e884": {
        "function_address": "0x0000e884",
        "instructions": [
            "cmp r0, r1",
            "push {r4, lr}",
            "mov r4, r0",
            "beq 0xe898",
            "bl sym.imp.string::assign_string_const_",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.00011d74": {
        "function_address": "0x00011d74",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "add r7, r0, 4",
            "ldr r5, [r0, 4]",
            "mov r6, r0",
            "mov r8, r1",
            "mov r4, r7",
            "bic r5, r5, 3",
            "cmp r5, 0",
            "beq 0x11dc4",
            "ldr r0, [r6, 0x14]",
            "mov r1, r8",
            "add r0, r5, r0",
            "bl fcn.0000dc34",
            "ldr r3, [r5, 4]",
            "ldr r2, [r5, 8]",
            "cmp r0, 0",
            "moveq r4, r5",
            "movne r5, r2",
            "moveq r5, r3",
            "b 0x11d90",
            "cmp r4, r7",
            "bne 0x11dd4",
            "mov r4, r7",
            "b 0x11dec",
            "ldr r1, [r6, 0x14]",
            "mov r0, r8",
            "add r1, r4, r1",
            "bl fcn.0000dc34",
            "cmp r0, 0",
            "bne 0x11dcc",
            "cmp r4, r7",
            "bne 0x11e2c",
            "mov r1, r8",
            "add r0, sp, 8",
            "str r4, [sp, 4]",
            "bl sym.imp.string::string_string_const_",
            "mov r3, 0",
            "mov r0, r6",
            "str r3, [sp, 0xc]",
            "add r2, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r3, aav.0x0000d8bc",
            "bl sym.imp.tree_base::insert_unique_tree_iterator_base__void__tree_node_base____void__",
            "mov r4, r0",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r4, 0x10",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.AMap::add_Object__bool_": {
        "function_address": "0x0000c7b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa90]!"
        ]
    },
    "fcn.00012824": {
        "function_address": "0x00012824",
        "instructions": [
            "push {r0, r1, r2, r3, r4, lr}",
            "mov r4, r0",
            "stm sp, {r1, r2}",
            "bl sym.imp.nv::getRunner__",
            "ldm sp, {r2, r3}",
            "tst r3, 1",
            "ldrne r1, [r4, r3, asr 1]",
            "add r3, r4, r3, asr 1",
            "ldrne r2, [r1, r2]",
            "tst r3, 1",
            "str r3, [sp, 0xc]",
            "str r2, [sp, 8]",
            "beq 0x1285c",
            "bl sym.imp.abort",
            "add r1, sp, 8",
            "bl sym.imp.nv::ThinRunner::removeTimer_function_void_____const_",
            "add r0, sp, 8",
            "bl fcn.0000df94",
            "add sp, sp, 0x10",
            "pop {r4, pc}"
        ]
    },
    "fcn.00012dd4": {
        "function_address": "0x00012dd4",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "ldrne r2, [r1, 4]",
            "ldr r0, [r0]",
            "addne r2, r2, 1",
            "strne r2, [r1, 4]",
            "cmp r0, 0",
            "str r1, [r4]",
            "beq 0x12e1c",
            "ldr r2, [r0, 4]",
            "sub r2, r2, 1",
            "str r2, [r0, 4]",
            "cmp r2, 0",
            "bne 0x12e1c",
            "ldr r2, [r0]",
            "ldr r2, [r2, 4]",
            "blx r2",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.000149f4": {
        "function_address": "0x000149f4",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sb, r3",
            "ldrh r3, [r2, 8]",
            "mov r8, r0",
            "mov r7, r1",
            "mov r5, r2",
            "sub r3, r3, 1",
            "cmp r3, 0x1b",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x1073c.9",
            "mov r0, 0x24",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b808",
            "str r3, [r0]",
            "mov r4, r0",
            "ldr r3, [r5, 0x10]",
            "str r3, [r0, 0x20]",
            "b 0x10944",
            "mov r0, 0x24",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b838",
            "mov r6, r0",
            "mov r4, r0",
            "str r3, [r6], 0x20",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r6",
            "add r1, r5, 0x10",
            "b 0x108b0",
            "mov r0, 0x3c",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b880",
            "mov r4, r0",
            "mov r6, r0",
            "add sl, r4, 0x24",
            "str r3, [r6], 0x20",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, sl",
            "bl rsym._ZN9list_baseC2Ev",
            "add r1, r5, 0x10",
            "mov r0, r6",
            "bl fcn.0000e130",
            "mov r0, sl",
            "add r1, r5, 0x14",
            "bl fcn.0000e130",
            "ldr r3, [r5, 0x18]",
            "str r3, [r4, 0x28]",
            "ldr r3, [r5, 0x1c]",
            "str r3, [r4, 0x2c]",
            "ldr r3, [r5, 0x20]",
            "str r3, [r4, 0x30]",
            "ldr r3, [r5, 0x24]",
            "str r3, [r4, 0x34]",
            "ldr r3, [r5, 0x28]",
            "str r3, [r4, 0x38]",
            "b 0x10944",
            "mov r0, 0x28",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b850",
            "mov r6, r0",
            "mov r4, r0",
            "add sl, r4, 0x24",
            "str r3, [r6], 0x20",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, sl",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r6",
            "add r1, r5, 0x10",
            "bl fcn.0000e130",
            "mov r0, sl",
            "add r1, r5, 0x14",
            "bl fcn.0000e130",
            "b 0x10944",
            "mov r0, 0x28",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b868",
            "mov r6, r0",
            "mov r4, r0",
            "str r3, [r6], 0x24",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "ldrh r3, [r5, 0x10]",
            "mov r0, r6",
            "strh r3, [r4, 0x20]",
            "b 0x108ac",
            "mov r0, 0x30",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001b820",
            "mov r6, r0",
            "mov r4, r0",
            "str r3, [r6], 0x20",
            "mov r0, r6",
            "bl fcn.0000e850",
            "mov r0, r6",
            "add r1, r5, 0x10",
            "bl fcn.0000de78",
            "b 0x10944",
            "mov r0, 0x28",
            "bl sym.imp.malloc",
            "ldr r3, aav.0x0001ba08",
            "mov r6, r0",
            "mov r4, r0",
            "str r3, [r6], 0x20",
            "mov r0, r6",
            "bl rsym._ZN6vectorIhEC1Ev",
            "mov r0, r6",
            "add r1, r5, 0x10",
            "bl fcn.0000e8a0",
            "cmp sb, 0",
            "ldrh r3, [r5, 8]",
            "strb sb, [r4, 0x1a]",
            "mov r0, 0x10",
            "ldreq r2, [0x00010a14]",
            "strh r3, [r4, 0x18]",
            "ldr r3, [r5, 0xc]",
            "ldreq r2, [r2]",
            "addeq r3, r2, r3",
            "mov r2, r7",
            "str r3, [r4, 0x1c]",
            "ldr r3, [r2, 0x10]!",
            "cmp r3, 0",
            "stmib r4, {r2, r3}",
            "addne r2, r4, 8",
            "strne r2, [r3, 4]",
            "cmp sb, 0",
            "str r4, [r7, 0x10]",
            "ldreq r3, [r8, 0x24]",
            "movne r3, 0",
            "strne r3, [r4, 0x10]",
            "strne r3, [r4, 0xc]",
            "streq r4, [r3, 0xc]",
            "streq r3, [r4, 0x10]",
            "addeq r3, r8, 0x14",
            "streq r3, [r4, 0xc]",
            "streq r4, [r8, 0x24]",
            "bl sym.imp.malloc",
            "mvn r3, 0",
            "str r3, [r0, 4]",
            "mov r5, r0",
            "ldr r3, aav.0x0001bac0",
            "mov r2, r5",
            "str r7, [r0, 8]",
            "str r4, [r0, 0xc]",
            "str r3, [r0]",
            "mov r0, sp",
            "ldr r3, [0x00010a1c]",
            "ldr r1, [r3]",
            "mov r3, 1",
            "bl sym.imp.AMap::add_Object__bool_",
            "ldr r3, [r5, 4]",
            "str r3, [r4, 0x14]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs sb, r2, 0",
            "sub sp, sp, 0x14",
            "mov r7, r0",
            "mov r5, r1",
            "mov r4, r0",
            "str r3, [sp, 0xc]",
            "bne 0x14a30",
            "ldr r3, [0x00014c70]",
            "ldr r2, [r1, 0xc]",
            "ldr r3, [r3]",
            "ldr r3, [r3, 0x64]",
            "ldr r3, [r3, 0x20]",
            "cmp r2, r3",
            "strhi r3, [r1, 0xc]",
            "add r0, r5, 4",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x14b60",
            "ldr sl, [r5, 4]",
            "ldr r8, [r4, 8]",
            "ldr sl, [sl, 4]",
            "cmp r8, 0",
            "add fp, sl, 8",
            "beq 0x14aec",
            "ldr r3, [r8, 4]",
            "add r2, r8, 4",
            "bic r3, r3, 3",
            "mov r6, r2",
            "cmp r3, 0",
            "beq 0x14aa4",
            "ldr r0, [r8, 0x14]",
            "mov r1, fp",
            "stmib sp, {r2, r3}",
            "add r0, r3, r0",
            "bl fcn.0000dc34",
            "ldr r3, [sp, 8]",
            "ldr r2, [sp, 4]",
            "ldmib r3, {r1, ip}",
            "cmp r0, 0",
            "moveq r6, r3",
            "movne r3, ip",
            "moveq r3, r1",
            "b 0x14a68",
            "cmp r6, r2",
            "bne 0x14ab4",
            "mov r6, r2",
            "b 0x14ad4",
            "ldr r1, [r8, 0x14]",
            "mov r0, fp",
            "str r2, [sp, 4]",
            "add r1, r6, r1",
            "bl fcn.0000dc34",
            "ldr r2, [sp, 4]",
            "cmp r0, 0",
            "bne 0x14aac",
            "ldr r3, [r4, 8]",
            "add r3, r3, 4",
            "cmp r6, r3",
            "ldrne r4, [r6, 0x10]",
            "bne 0x14b50",
            "b 0x14b0c",
            "mov r0, 0x1c",
            "bl sym.imp.malloc",
            "ldr r1, aav.0x0000d7b4",
            "mov r2, 0xc",
            "mov r3, r8",
            "mov r6, r0",
            "bl sym.imp.tree_base::tree_base_bool____void__void__void___unsigned_int__void_",
            "str r6, [r4, 8]",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl sym.imp.string::string__",
            "mov r1, fp",
            "mov r0, r6",
            "bl fcn.0000e884",
            "mov r3, 0",
            "str r4, [r6, 4]",
            "mov r1, fp",
            "str r3, [r6, 8]",
            "strb r3, [r6, 0xc]",
            "ldr r0, [r4, 8]",
            "mov r4, r6",
            "str r3, [r6, 0x10]",
            "bl fcn.00011d74",
            "str r6, [r0]",
            "ldr r3, [r5, 4]",
            "ldr r3, [r3]",
            "cmp sl, r3",
            "bne 0x14a44",
            "ldrb r3, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x14b88",
            "ldr r1, [r4, 0x10]",
            "cmp r1, 0",
            "beq 0x14b80",
            "mov r0, r7",
            "bl fcn.00014664",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "ldr r6, [r4, 0x10]",
            "mov r1, 0",
            "mov r8, r1",
            "cmp r6, 0",
            "beq 0x14c20",
            "cmp sb, 0",
            "bne 0x14bb0",
            "ldrb r3, [r6, 0x1a]",
            "cmp r3, 0",
            "bne 0x14c68",
            "ldrh r2, [r5, 8]",
            "ldrh r3, [r6, 0x18]",
            "cmp r2, r3",
            "bne 0x14c18",
            "ldr r3, [r6]",
            "mov r0, r6",
            "mov r1, r5",
            "add r8, r8, 1",
            "ldr r3, [r3, 0xc]",
            "blx r3",
            "cmp r0, 0",
            "beq 0x14c14",
            "ldr r3, [sp, 0xc]",
            "orrs r3, sb, r3",
            "movne r0, r7",
            "movne r1, r6",
            "bne 0x14c60",
            "ldr r3, [0x00014c78]",
            "ldr r2, [r3]",
            "ldr r3, [r5, 0xc]",
            "add r3, r2, r3",
            "ldr r2, [r6, 0x1c]",
            "cmp r3, r2",
            "strgt r3, [r6, 0x1c]",
            "b 0x14c68",
            "mov r1, r6",
            "ldr r6, [r6, 8]",
            "b 0x14b94",
            "ldrh r3, [r5, 8]",
            "cmp r3, 0x1c",
            "cmpne r3, 1",
            "beq 0x14c40",
            "cmp r3, 5",
            "beq 0x14c40",
            "cmp r8, 0x13",
            "bhi 0x14c5c",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, r5",
            "mov r3, sb",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b 0x1071c",
            "mov r0, r7",
            "bl fcn.00014664",
            "b 0x14c40",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00015b5c": {
        "function_address": "0x00015b5c",
        "instructions": [
            "add r3, r0, 4",
            "mov r1, 0",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x8c",
            "mov r4, r0",
            "mov r0, r3",
            "str r3, [sp, 0x10]",
            "bl fcn.00012dd4",
            "ldr r3, [r4, 0x20]",
            "add fp, r4, 0x24",
            "cmp r3, 0",
            "bne 0x15b9c",
            "mov r0, fp",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "beq 0x15cf0",
            "ldrb r6, [r4, 8]",
            "add r8, sp, 0x2c",
            "ldr r7, [r4, 0x20]",
            "and sb, r4, 1",
            "cmp r6, 0",
            "ldr r5, fcn.000190c8",
            "add sl, sp, 0x3c",
            "bne 0x160ec",
            "mov r1, fp",
            "mov r0, r8",
            "bl fcn.0000de94",
            "ldr lr, [r4, 0x4c]",
            "cmp sb, 0",
            "ldr fp, [r4, 0x34]",
            "str r5, [sp, 0x1c]",
            "str lr, [sp, 0x14]",
            "str r4, [sp, 0x20]",
            "bne 0x15ea4",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r2, 0x14",
            "mov r1, r6",
            "mov sb, r0",
            "bl sym.imp.memset",
            "ldr r3, aav.0x0001b708",
            "mov r1, r8",
            "str r6, [sb, 4]",
            "add r0, sp, 0x4c",
            "str r6, [sb, 8]",
            "add r5, sb, 8",
            "str r3, [sb]",
            "mvn r3, 0",
            "str r6, [sb, 0xc]",
            "str r3, [sb, 0x10]",
            "bl fcn.0000de94",
            "mov r0, sl",
            "add r1, sp, 0x1c",
            "bl fcn.00010370",
            "cmp r5, sl",
            "beq 0x15c50",
            "mov r0, r5",
            "bl fcn.0001048c",
            "mov r0, r5",
            "mov r1, sl",
            "bl fcn.00010370",
            "add r5, sp, 0x5c",
            "add r1, sp, 0x4c",
            "mov r0, r5",
            "bl fcn.0000de94",
            "cmp r7, 0",
            "mov r1, 2",
            "mov r2, 0",
            "moveq r0, 0xa",
            "movne r0, 2",
            "bl sym.imp.socket",
            "cmp r0, 0",
            "mov ip, r0",
            "str r0, [sb, 0x10]",
            "bge 0x15ec0",
            "ldr r1, str.create_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r6, 0",
            "add r0, sp, 0x3c",
            "bl fcn.0001048c",
            "cmp r6, 0",
            "movne r1, sb",
            "bne 0x15ce0",
            "ldr r3, [sb]",
            "mov r0, sb",
            "ldr r3, [r3, 4]",
            "blx r3",
            "mov r1, r6",
            "ldr r0, [sp, 0x10]",
            "bl fcn.00012dd4",
            "add r0, sp, 0x1c",
            "bl fcn.0001048c",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "bne 0x15d30",
            "ldrb r3, [r4, 0x1c]",
            "cmp r3, 0",
            "bne 0x15d24",
            "ldr r3, [0x000163e0]",
            "add r1, sp, 0x88",
            "add r2, r4, 0x24",
            "ldr r0, [r3]",
            "ldr r3, [r4, 0x20]",
            "str r3, [r1, -0x1c]!",
            "bl fcn.00013d30",
            "mov r0, r4",
            "bl fcn.00018dd0",
            "b 0x163c8",
            "add r0, sp, 0x5c",
            "mov r1, r4",
            "bl fcn.00012cac",
            "add r1, sp, 0x5c",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.send",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 8]",
            "ldr r2, aav.0x0001b724",
            "ldr r3, aav.0x0001b720",
            "cmp r1, 0",
            "moveq r1, r2",
            "movne r1, r3",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 0x20]",
            "cmp r2, 0",
            "mov r5, r0",
            "add r0, sp, 0x6c",
            "beq 0x15d94",
            "add r1, r4, 0x20",
            "bl sym.imp.IPAddr::str___const",
            "b 0x15d9c",
            "add r1, r4, 0x24",
            "bl sym.imp.IPAddr6::str_bool__const",
            "add r1, sp, 0x6c",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x34]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x6c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x5c",
            "bl rsym._ZN6stringD1Ev",
            "ldr r0, [0x000163f4]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0x15e70",
            "ldr r1, str.____sending",
            "ldr r0, [0x000163f4]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrb r1, [r4, 8]",
            "ldr r2, aav.0x0001b724",
            "ldr r3, aav.0x0001b720",
            "cmp r1, 0",
            "moveq r1, r2",
            "movne r1, r3",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, str._query_to",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 0x20]",
            "cmp r2, 0",
            "mov r5, r0",
            "add r0, sp, 0x6c",
            "beq 0x15e2c",
            "add r1, r4, 0x20",
            "bl sym.imp.IPAddr::str___const",
            "b 0x15e34",
            "add r1, r4, 0x24",
            "bl sym.imp.IPAddr6::str_bool__const",
            "add r1, sp, 0x6c",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x34]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x6c",
            "bl rsym._ZN6stringD1Ev",
            "ldr r0, [r4, 0x4c]",
            "ldr r1, [0x000163f4]",
            "bl fcn.000135d8",
            "ldr r3, [0x00016400]",
            "mov r1, 0xa",
            "ldr r3, [r3]",
            "ldr r3, [r3, 0x64]",
            "ldr r0, [r3, 0x28]",
            "bl fcn.0001a724",
            "mov r5, r0",
            "bl sym.imp.nv::getRunner__",
            "ldr r3, fcn.00018fc4",
            "tst r4, 1",
            "str r4, [sp, 0x70]",
            "str r3, [sp, 0x6c]",
            "beq 0x15ea8",
            "bl sym.imp.abort",
            "mov r1, r5",
            "add r2, sp, 0x6c",
            "bl sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____",
            "add r0, sp, 0x6c",
            "bl fcn.0000df94",
            "b 0x163c8",
            "cmp r7, 0",
            "beq 0x15f4c",
            "add r3, sp, 0x88",
            "mov r1, 0",
            "mov r2, 4",
            "str r1, [sp, 0x70]",
            "str r1, [r3, -0x64]!",
            "mov r5, 2",
            "str r2, [sp]",
            "mov r2, 0xa",
            "strh r1, [sp, 0x6e]",
            "strh r5, [sp, 0x6c]",
            "bl sym.imp.setsockopt",
            "ldr r0, [sb, 0x10]",
            "add r1, sp, 0x6c",
            "mov r2, 0x10",
            "bl sym.imp.bind",
            "cmp r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, str.bind_socket:",
            "blt 0x15fec",
            "ubfx r3, fp, 8, 8",
            "ldr r0, [sb, 0x10]",
            "add r1, sp, 0x6c",
            "mov r2, 0x10",
            "orr fp, r3, fp, lsl 8",
            "strh r5, [sp, 0x6c]",
            "str r7, [sp, 0x70]",
            "strh fp, [sp, 0x6e]",
            "bl sym.imp.connect",
            "cmp r0, 0",
            "bge 0x1601c",
            "ldr r0, obj.cout",
            "ldr r1, str.connect_socket:",
            "b 0x15fec",
            "add r8, sp, 0x74",
            "mov r1, r7",
            "mov r2, 0x10",
            "str ip, [sp, 0xc]",
            "mov r0, r8",
            "mov sl, 0xa",
            "strh sl, [sp, 0x6c]",
            "bl sym.imp.memset",
            "ldr ip, [sp, 0xc]",
            "add r3, sp, 0x88",
            "mov r2, 4",
            "mov r1, 0x29",
            "str r7, [r3, -0x64]!",
            "mov r0, ip",
            "str r2, [sp]",
            "mov r2, 0x17",
            "strh r7, [sp, 0x6e]",
            "bl sym.imp.setsockopt",
            "ldr r0, [sb, 0x10]",
            "add r1, sp, 0x6c",
            "mov r2, 0x1c",
            "bl sym.imp.bind",
            "cmp r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, str.bind_socket6:",
            "blt 0x15fec",
            "ldm r5, {r0, r1, r2, r3}",
            "strh sl, [sp, 0x6c]",
            "stm r8, {r0, r1, r2, r3}",
            "ubfx r3, fp, 8, 8",
            "ldr r0, [sb, 0x10]",
            "add r1, sp, 0x6c",
            "mov r2, 0x1c",
            "orr fp, r3, fp, lsl 8",
            "strh fp, [sp, 0x6e]",
            "bl sym.imp.connect",
            "cmp r0, 0",
            "bge 0x1601c",
            "ldr r0, obj.cout",
            "ldr r1, str.connect_socket6:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, sb",
            "bl fcn.00010690",
            "b 0x15cb4",
            "ldr r0, [sb, 0x10]",
            "mov r1, 4",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, str.fcntl_O_NONBLOCK_socket:",
            "blt 0x15fec",
            "bl sym.imp.nv::getLooper__",
            "ldr r3, fcn.000181ac",
            "ldr r7, [0x00016420]",
            "mov r2, 1",
            "ldr r1, [sb, 0x10]",
            "str r3, [sp, 0x6c]",
            "add r3, sp, 0x6c",
            "str sb, [sp, 0x70]",
            "add r0, r0, 0x64",
            "bl sym.imp.nv::ThinRunner::addSocket_int__unsigned_int__function_void__int__unsigned_int___",
            "add r0, sp, 0x6c",
            "bl fcn.0000df30",
            "ldr r3, [r7]",
            "ldr r0, [sp, 0x14]",
            "ldr r1, [r3, 0x1c]",
            "ldr r2, [r3, 0x14]",
            "bl fcn.00011274",
            "mov r1, fp",
            "mov r0, sl",
            "bl fcn.0000de94",
            "ldr lr, [r4, 0x4c]",
            "cmp sb, 0",
            "ldr fp, [r4, 0x34]",
            "str r5, [sp, 0x24]",
            "str lr, [sp, 0x14]",
            "str r4, [sp, 0x28]",
            "bne 0x15ea4",
            "mov r0, 0x28",
            "bl sym.imp.malloc",
            "mov r1, sb",
            "mov r2, 0x28",
            "mov r5, r0",
            "bl sym.imp.memset",
            "ldr r3, aav.0x0001b718",
            "str sb, [r5, 4]",
            "str sb, [r5, 8]",
            "str sb, [r5, 0xc]",
            "add sb, r5, 0x18",
            "str r3, [r5]",
            "mvn r3, 0",
            "mov r0, sb",
            "str r3, [r5, 0x10]",
            "bl rsym._ZN6vectorIhEC1Ev",
            "add r0, r5, 0x20",
            "bl rsym._ZN6vectorIhEC1Ev",
            "mov r1, sl",
            "add r0, sp, 0x4c",
            "add sl, r5, 8",
            "bl fcn.0000de94",
            "mov r0, r8",
            "add r1, sp, 0x24",
            "bl fcn.00010370",
            "cmp sl, r8",
            "beq 0x16194",
            "mov r0, sl",
            "bl fcn.0001048c",
            "mov r0, sl",
            "mov r1, r8",
            "bl fcn.00010370",
            "add sl, sp, 0x5c",
            "add r1, sp, 0x4c",
            "mov r0, sl",
            "bl fcn.0000de94",
            "cmp r7, 0",
            "mov r1, 1",
            "mov r2, 0",
            "moveq r0, 0xa",
            "movne r0, 2",
            "bl sym.imp.socket",
            "cmp r0, 0",
            "str r0, [r5, 0x10]",
            "bge 0x161f8",
            "ldr r1, str.create_tcp_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r6, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r6",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x16290",
            "mov r1, 4",
            "mov r2, 0x800",
            "bl sym.imp.fcntl",
            "cmp r0, 0",
            "ldrlt r0, obj.cout",
            "ldrlt r1, str.fcntl_O_NONBLOCK_socket:",
            "blt 0x162dc",
            "cmp r7, 0",
            "beq 0x16298",
            "mov r3, 2",
            "ldr r0, [r5, 0x10]",
            "strh r3, [sp, 0x6c]",
            "add r1, sp, 0x6c",
            "ubfx r3, fp, 8, 8",
            "mov r2, 0x10",
            "orr fp, r3, fp, lsl 8",
            "str r7, [sp, 0x70]",
            "strh fp, [sp, 0x6e]",
            "bl sym.imp.connect",
            "cmp r0, 0",
            "bge 0x162f0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "mov r7, r0",
            "cmp r3, 0x73",
            "beq 0x162f0",
            "ldr r0, obj.cout",
            "ldr r1, str.connect_tcp_socket:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r6, r0",
            "ldr r0, [r7]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r6",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r5",
            "bl fcn.000105f4",
            "mov r6, 0",
            "b 0x16390",
            "mov r3, 0xa",
            "strh r3, [sp, 0x6c]",
            "ldm sl, {r0, r1, r2, r3}",
            "add lr, sp, 0x6c",
            "add ip, sp, 0x74",
            "stm ip, {r0, r1, r2, r3}",
            "ubfx r3, fp, 8, 8",
            "ldr r0, [r5, 0x10]",
            "mov r1, lr",
            "mov r2, 0x1c",
            "orr fp, r3, fp, lsl 8",
            "strh fp, [sp, 0x6e]",
            "bl sym.imp.connect",
            "cmp r0, 0",
            "bge 0x162f0",
            "ldr r0, obj.cout",
            "ldr r1, str.connect_tcp_socket6:",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r6, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x16274",
            "cmp r6, 0",
            "beq 0x16390",
            "bl sym.imp.nv::getLooper__",
            "ldr r3, fcn.000142d4",
            "ldr r1, [r5, 0x10]",
            "mov r2, 4",
            "str r5, [sp, 0x70]",
            "mov r7, 0",
            "str r3, [sp, 0x6c]",
            "add r3, sp, 0x6c",
            "add r0, r0, 0x64",
            "bl sym.imp.nv::ThinRunner::addSocket_int__unsigned_int__function_void__int__unsigned_int___",
            "add r0, sp, 0x6c",
            "bl fcn.0000df30",
            "mov r0, sb",
            "mov r1, 0x2000",
            "add r2, sp, 0x6c",
            "strb r7, [sp, 0x6c]",
            "bl sym.imp.vector_unsigned_char_::resize_unsigned_int__unsigned_char_const_",
            "ldr r1, [r5, 0x18]",
            "ldr r2, [r5, 0x1c]",
            "ldr r0, [sp, 0x14]",
            "rsb r2, r1, r2",
            "add r1, r1, 2",
            "sub r2, r2, 2",
            "bl fcn.00011274",
            "mov r0, r8",
            "bl fcn.0001048c",
            "cmp r6, 0",
            "movne r1, r5",
            "bne 0x163b8",
            "ldr r3, [r5]",
            "mov r0, r5",
            "ldr r3, [r3, 4]",
            "blx r3",
            "mov r1, r6",
            "ldr r0, [sp, 0x10]",
            "bl fcn.00012dd4",
            "add r0, sp, 0x24",
            "b 0x15cec",
            "add sp, sp, 0x8c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00013d30": {
        "function_address": "0x00013d30",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x18",
            "ldr r4, [r0, 0x578]",
            "mov r6, r0",
            "mov r8, r1",
            "mov r7, r2",
            "add r4, r4, 4",
            "ldr r3, [r6, 0x57c]",
            "sub r5, r4, 4",
            "cmp r5, r3",
            "beq 0x13de4",
            "ldr r3, [r8]",
            "cmp r3, 0",
            "beq 0x13d74",
            "ldr r2, [r4, -4]",
            "cmp r3, r2",
            "beq 0x13d9c",
            "mov r0, r7",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "beq 0x13ddc",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, 0x10",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x13ddc",
            "mov r1, r5",
            "add r4, sp, 0x18",
            "ldr r3, [r1], 4",
            "add r6, r6, 0x570",
            "add r6, r6, 8",
            "str r3, [r4, -0x14]!",
            "add r0, r4, 4",
            "bl fcn.0000de94",
            "mov r1, r5",
            "mov r0, r6",
            "add r2, r5, 0x14",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r6",
            "mov r1, r4",
            "bl fcn.0001219c",
            "b 0x13de4",
            "add r4, r4, 0x14",
            "b 0x13d4c",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.inet_ntoa": {
        "function_address": "0x0000c730",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xae8]!"
        ]
    },
    "sym.imp.nv::message::operator_nv::message_const_": {
        "function_address": "0x0000c688",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb58]!"
        ]
    },
    "fcn.00010370": {
        "function_address": "0x00010370",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r3, [r1]",
            "cmp r3, 0",
            "str r3, [r0]",
            "ldr r0, [r1, 4]",
            "str r0, [r4, 4]",
            "ble 0x103cc",
            "cmp r0, r3",
            "popeq {r3, r4, r5, pc}",
            "tst r0, 1",
            "popeq {r3, r4, r5, pc}",
            "bic r0, r0, 1",
            "str r0, [r4, 4]",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "mov r5, r0",
            "bl sym.imp.malloc",
            "ldr r1, [r4, 4]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "orr r3, r0, 1",
            "str r3, [r4, 4]",
            "pop {r3, r4, r5, pc}",
            "popne {r3, r4, r5, pc}",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "str r0, [r4, 4]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x0000c778",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xab8]!"
        ]
    },
    "fcn.0001048c": {
        "function_address": "0x0001048c",
        "instructions": [
            "ldr r3, [r0]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "ble 0x104c4",
            "ldr r0, [r0, 4]",
            "cmp r0, r3",
            "beq 0x104e0",
            "tst r0, 1",
            "beq 0x104e0",
            "bic r0, r0, 1",
            "str r0, [r4, 4]",
            "bl sym.imp.free",
            "b 0x104e0",
            "bne 0x104e0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x104e0",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0xc]",
            "blx r3",
            "mov r3, 0",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.0001219c": {
        "function_address": "0x0001219c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r7}",
            "mov r6, r1",
            "ldr r5, [0x00012220]",
            "rsb r7, r0, r7",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "mov r1, 0x14",
            "bl fcn.0001a724",
            "asr r7, r7, 2",
            "mul r7, r5, r7",
            "cmp r7, r0",
            "bne 0x121fc",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r2, 0x14",
            "mov r0, r4",
            "asr r3, r3, 2",
            "mul r5, r5, r3",
            "lsls r5, r5, 1",
            "movne r1, r5",
            "moveq r1, 1",
            "mul r1, r2, r1",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "mov r1, r6",
            "ldr r0, [r4, 4]",
            "ldr r3, [r1], 4",
            "str r3, [r0], 4",
            "bl fcn.0000de94",
            "ldr r3, [r4, 4]",
            "add r3, r3, 0x14",
            "str r3, [r4, 4]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.nv::lstream::isMuted___const": {
        "function_address": "0x0000cbd4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7d0]!"
        ]
    },
    "fcn.0000db7c": {
        "function_address": "0x0000db7c",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 4",
            "mov r4, r0",
            "mov r2, 0xe",
            "bl sym.imp.ios::setf_unsigned_int__unsigned_int_",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000db98": {
        "function_address": "0x0000db98",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 2",
            "mov r4, r0",
            "mov r2, 0xe",
            "bl sym.imp.ios::setf_unsigned_int__unsigned_int_",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000ed3c": {
        "function_address": "0x0000ed3c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x2c",
            "mov r4, r0",
            "add r0, sp, 0x10",
            "mov r5, r1",
            "bl fcn.0000ece4",
            "ldr r2, aav.0x0001add0",
            "add r0, sp, 0xc",
            "add r1, sp, 0x10",
            "bl fcn.0000e8fc",
            "ldrh r1, [r5, 4]",
            "add r0, sp, 0x14",
            "bl fcn.0000ea28",
            "add r0, sp, 8",
            "add r1, sp, 0xc",
            "add r2, sp, 0x14",
            "bl fcn.0000e920",
            "add r0, sp, 4",
            "add r1, sp, 8",
            "ldr r2, aav.0x0001add0",
            "bl fcn.0000e8fc",
            "ldrh r5, [r5, 6]",
            "sub r3, r5, 1",
            "cmp r3, 3",
            "ldrls pc, [pc, r3, lsl 2]",
            "b 0xede8",
            "add r0, sp, 0x18",
            "ldr r1, [0x0000ee88]",
            "b 0xedc8",
            "ldr r1, [0x0000ee8c]",
            "add r0, sp, 0x18",
            "bl sym.imp.string::string_char_const_",
            "b 0xee38",
            "add r0, sp, 0x18",
            "ldr r1, fcn.0001aabc",
            "b 0xedc8",
            "add r0, sp, 0x18",
            "ldr r1, [0x0000ee94]",
            "b 0xedc8",
            "ldr r1, str.UNKNOWN__",
            "add r0, sp, 0x20",
            "bl sym.imp.string::string_char_const_",
            "add r0, sp, 0x1c",
            "mov r1, r5",
            "bl fcn.0000e818",
            "add r0, sp, 0x24",
            "add r1, sp, 0x20",
            "add r2, sp, 0x1c",
            "bl fcn.0000e920",
            "add r1, sp, 0x24",
            "ldr r2, [0x0000ee9c]",
            "add r0, sp, 0x18",
            "bl fcn.0000e8fc",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x1c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x20",
            "bl rsym._ZN6stringD1Ev",
            "add r1, sp, 4",
            "add r2, sp, 0x18",
            "mov r0, r4",
            "bl fcn.0000e920",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 0x2c",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.00018fc4": {
        "function_address": "0x00018fc4",
        "instructions": [
            "push {r0, r1, r4, lr}",
            "mov r4, r0",
            "mov r1, r4",
            "add r0, sp, 4",
            "bl fcn.00012cac",
            "add r1, sp, 4",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.server_timeout",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldrb r3, [r4, 0x1c]",
            "cmp r3, 0",
            "bne 0x19020",
            "ldr r3, [0x00019044]",
            "add r1, sp, 4",
            "add r2, r4, 0x24",
            "ldr r0, [r3]",
            "ldr r3, [r4, 0x20]",
            "str r3, [sp, 4]",
            "bl fcn.00013d30",
            "mov r1, 0",
            "add r0, r4, 4",
            "bl fcn.00012dd4",
            "mov r0, r4",
            "bl fcn.00018dd0",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "fcn.00010690": {
        "function_address": "0x00010690",
        "instructions": [
            "ldr r3, [r0, 0x10]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "poplt {r4, pc}",
            "bl sym.imp.nv::getLooper__",
            "ldr r1, [r4, 0x10]",
            "add r0, r0, 0x64",
            "bl sym.imp.nv::ThinRunner::removeSocket_int_",
            "ldr r0, [r4, 0x10]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 0x10]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.nv::ThinRunner::removeSocket_int_": {
        "function_address": "0x0000cdd8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x678]!"
        ]
    },
    "fcn.000181ac": {
        "function_address": "0x000181ac",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldr r5, [0x00018288]",
            "ldr r0, [r0, 0x10]",
            "ldr r3, [r5]",
            "ldr r1, [r3, 0x1c]",
            "ldr r2, [r3, 0x14]",
            "mov r3, 0",
            "bl sym.imp.recv",
            "subs r6, r0, 0",
            "bgt 0x18204",
            "beq 0x18280",
            "ldr r1, [0x0001828c]",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r4",
            "b 0x18214",
            "cmp r6, 0xb",
            "bgt 0x18220",
            "ldr r0, obj.cout",
            "ldr r1, str.too_small_dns_message",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x18280",
            "mov r0, 0x2c",
            "mov r3, 0",
            "str r3, [sp, 4]",
            "bl sym.imp.malloc",
            "mov r7, r0",
            "bl fcn.0000e710",
            "ldr r3, [r5]",
            "mov r0, r7",
            "mov r2, r6",
            "str r7, [sp, 4]",
            "ldr r1, [r3, 0x1c]",
            "bl fcn.00018028",
            "cmp r0, 0",
            "beq 0x18264",
            "add r0, r4, 8",
            "add r1, sp, 4",
            "bl fcn.000105ac",
            "ldr r4, [sp, 4]",
            "cmp r4, 0",
            "beq 0x18280",
            "mov r0, r4",
            "bl fcn.0000e390",
            "mov r0, r4",
            "bl sym.imp.free",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.recv": {
        "function_address": "0x0000c7fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa60]!"
        ]
    },
    "fcn.00018028": {
        "function_address": "0x00018028",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "add r2, r1, r2",
            "str r1, [r0, 0xc]",
            "sub sp, sp, 0x1c",
            "str r2, [r0, 0x10]",
            "add r6, r0, 0x18",
            "ldr r3, [r1]",
            "mov r4, r0",
            "mov r5, 0",
            "add r1, r1, 0xc",
            "str r3, [r0]",
            "ldr r3, [r1, -8]",
            "str r3, [r0, 4]",
            "ldr r3, [r1, -4]",
            "str r1, [r0, 0x14]",
            "str r3, [r0, 8]",
            "ldrh r3, [r0, 4]",
            "lsl r7, r3, 8",
            "orr r3, r7, r3, lsr 8",
            "uxth r7, r3",
            "cmp r5, r7",
            "bhs 0x1810c",
            "add r0, sp, 0x10",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "add r1, sp, 0x10",
            "bl fcn.00015508",
            "cmp r0, 0",
            "beq 0x18100",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 4",
            "cmp r2, r1",
            "bhi 0x18100",
            "ldrh r1, [r3]",
            "add r5, r5, 1",
            "lsl r0, r1, 8",
            "orr r1, r0, r1, lsr 8",
            "strh r1, [sp, 0x14]",
            "ldrh r3, [r3, 2]",
            "mov r0, sp",
            "str r2, [r4, 0x14]",
            "add r2, sp, 0xc",
            "lsl r1, r3, 8",
            "orr r3, r1, r3, lsr 8",
            "strh r3, [sp, 0x16]",
            "ldr r3, [r4, 0x18]",
            "mov r1, r6",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0x10",
            "bl fcn.00013c78",
            "add r0, sp, 0x10",
            "bl fcn.0000e174",
            "b 0x18078",
            "add r0, sp, 0x10",
            "bl fcn.0000e174",
            "b 0x18154",
            "ldrh r3, [r4, 6]",
            "mov r0, r4",
            "lsl r2, r3, 8",
            "orr r1, r2, r3, lsr 8",
            "add r2, r4, 0x1c",
            "uxth r1, r1",
            "bl fcn.00017c20",
            "cmp r0, 0",
            "beq 0x18154",
            "ldrh r3, [r4, 8]",
            "mov r0, r4",
            "lsl r2, r3, 8",
            "orr r1, r2, r3, lsr 8",
            "add r2, r4, 0x20",
            "uxth r1, r1",
            "bl fcn.00017c20",
            "cmp r0, 0",
            "bne 0x1815c",
            "mov r0, 0",
            "b 0x181a4",
            "ldrh r3, [r4, 0xa]",
            "mov r0, r4",
            "lsl r2, r3, 8",
            "orr r1, r2, r3, lsr 8",
            "add r2, r4, 0x24",
            "uxth r1, r1",
            "bl fcn.00017c20",
            "cmp r0, 0",
            "beq 0x18154",
            "mov r0, r6",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 1",
            "bhi 0x18154",
            "ldr r0, [r4, 0x14]",
            "ldr r3, [r4, 0x10]",
            "subs r3, r0, r3",
            "rsbs r0, r3, 0",
            "adcs r0, r0, r3",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.000105ac": {
        "function_address": "0x000105ac",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "rsblt r3, r3, 0",
            "addlt r0, r0, 4",
            "blt 0x105ec",
            "ldr r0, [r0, 4]",
            "cmp r3, r0",
            "bne 0x105dc",
            "mov r0, r1",
            "blx r3",
            "pop {r3, pc}",
            "cmp r3, 0",
            "bicgt r0, r0, 1",
            "ldrle r3, [r0]",
            "ldrle r3, [r3]",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "fcn.0000e390": {
        "function_address": "0x0000e390",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0x1c]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x1c]",
            "cmp r5, r3",
            "beq 0xe3cc",
            "ldr r0, [r5, 8]",
            "cmp r0, 0",
            "beq 0xe3c4",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r5, [r5]",
            "b 0xe3a0",
            "ldr r3, [r4, 0x20]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x20]",
            "cmp r5, r3",
            "beq 0xe400",
            "ldr r0, [r5, 8]",
            "cmp r0, 0",
            "beq 0xe3f8",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r5, [r5]",
            "b 0xe3d4",
            "ldr r3, [r4, 0x24]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x24]",
            "cmp r5, r3",
            "beq 0xe434",
            "ldr r0, [r5, 8]",
            "cmp r0, 0",
            "beq 0xe42c",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r5, [r5]",
            "b 0xe408",
            "add r5, r4, 0x18",
            "add r7, r4, 0x1c",
            "add r8, r4, 0x20",
            "add sb, r4, 0x24",
            "mov r0, r5",
            "add r6, r4, 0x28",
            "bl fcn.0000e350",
            "mov r0, r7",
            "bl fcn.0000e09c",
            "mov r0, r8",
            "bl fcn.0000e09c",
            "mov r0, sb",
            "bl fcn.0000e09c",
            "mov r0, r6",
            "bl fcn.0000e310",
            "mov r0, r6",
            "bl fcn.0000e310",
            "mov r0, r6",
            "bl sym.imp.list_base::list_base__",
            "mov r0, sb",
            "bl fcn.0000e0d4",
            "mov r0, r8",
            "bl fcn.0000e0d4",
            "mov r0, r7",
            "bl fcn.0000e0d4",
            "mov r0, r5",
            "bl fcn.0000e350",
            "mov r0, r5",
            "bl sym.imp.list_base::list_base__",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "fcn.0000df30": {
        "function_address": "0x0000df30",
        "instructions": [
            "ldr r3, [r0]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "ble 0xdf68",
            "ldr r0, [r0, 4]",
            "cmp r0, r3",
            "beq 0xdf84",
            "tst r0, 1",
            "beq 0xdf84",
            "bic r0, r0, 1",
            "str r0, [r4, 4]",
            "bl sym.imp.free",
            "b 0xdf84",
            "bne 0xdf84",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0xdf84",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0xc]",
            "blx r3",
            "mov r3, 0",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.00011274": {
        "function_address": "0x00011274",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, lr}",
            "add r3, r1, r2",
            "mov r4, r0",
            "str r1, [r0, 0xc]",
            "str r3, [r0, 0x10]",
            "add r1, r1, 0xc",
            "add r0, r0, 0x28",
            "str r1, [r0, -0x14]",
            "mov r7, r2",
            "bl fcn.0000e310",
            "ldr r3, [r4, 0x18]",
            "add r8, r4, 0x18",
            "mov r6, 0",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x18]",
            "cmp r5, r3",
            "beq 0x11324",
            "mov r0, r4",
            "add r1, r5, 8",
            "ldr sb, [r4, 0x14]",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "beq 0x11320",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 4",
            "cmp r1, r2",
            "blo 0x11320",
            "ldrh r2, [r5, 0xc]",
            "add r6, r6, 1",
            "lsl r1, r2, 8",
            "orr r2, r1, r2, lsr 8",
            "strh r2, [r3]",
            "ldrh r3, [r5, 0xe]",
            "ldr r2, [r4, 0x14]",
            "lsl r1, r3, 8",
            "orr r3, r1, r3, lsr 8",
            "strh r3, [r2, 2]",
            "ldr r3, [r4, 0x14]",
            "ldr r5, [r5]",
            "add r3, r3, 4",
            "str r3, [r4, 0x14]",
            "b 0x112ac",
            "str sb, [r4, 0x14]",
            "ubfx r3, r6, 8, 8",
            "mov r0, r8",
            "orr r3, r3, r6, lsl 8",
            "strh r3, [r4, 4]",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r6, r0",
            "ldrne r0, obj.cout",
            "ldrne r1, str.questions_truncated______",
            "bne 0x113f0",
            "add r6, r4, 0x1c",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.00010c64",
            "ubfx r3, r0, 8, 8",
            "mov r5, r0",
            "orr r3, r3, r0, lsl 8",
            "mov r0, r6",
            "strh r3, [r4, 6]",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r5, r0",
            "ldrne r0, obj.cout",
            "ldrne r1, str.answers_truncated",
            "bne 0x113f0",
            "add r6, r4, 0x20",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.00010c64",
            "ubfx r3, r0, 8, 8",
            "mov r5, r0",
            "orr r3, r3, r0, lsl 8",
            "mov r0, r6",
            "strh r3, [r4, 8]",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r5, r0",
            "ldrne r0, obj.cout",
            "ldrne r1, str.authority_truncated",
            "bne 0x113f0",
            "add r6, r4, 0x24",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.00010c64",
            "ubfx r3, r0, 8, 8",
            "mov r5, r0",
            "orr r3, r3, r0, lsl 8",
            "mov r0, r6",
            "strh r3, [r4, 0xa]",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r5, r0",
            "beq 0x11404",
            "ldr r0, obj.cout",
            "ldr r1, str.additional_truncated",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "ldrb r3, [r4, 2]",
            "orr r3, r3, 2",
            "strb r3, [r4, 2]",
            "ldr r3, [r4]",
            "ldr r2, [r4, 0xc]",
            "str r3, [r2]",
            "ldr r3, [r4, 4]",
            "str r3, [r2, 4]",
            "ldr r3, [r4, 8]",
            "str r3, [r2, 8]",
            "ldr r3, [r4, 0x14]",
            "ldr r0, [r4, 0xc]",
            "rsb r0, r0, r3",
            "str r3, [r4, 0x10]",
            "cmp r0, r7",
            "pople {r3, r4, r5, r6, r7, r8, sb, pc}",
            "ldr r1, str.dns_packet_compose_too_long",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r7",
            "bl sym.imp.operator___ostream__int_",
            "ldr r3, [r4, 0xc]",
            "ldr r1, [r4, 0x14]",
            "rsb r1, r3, r1",
            "bl sym.imp.operator___ostream__int_",
            "bl sym.imp.endl_ostream_",
            "bl sym.imp.abort"
        ]
    },
    "fcn.00010a5c": {
        "function_address": "0x00010a5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "add r0, sp, 8",
            "bl fcn.0000e04c",
            "add r0, sp, 0xc",
            "bl sym.imp.string::string__",
            "movw r7, 0xbfff",
            "add r0, sp, 8",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x10c20",
            "ldr r3, [r4, 0x28]",
            "ldr r5, [r3]",
            "ldr r3, [r4, 0x28]",
            "cmp r5, r3",
            "beq 0x10ab4",
            "add r0, sp, 8",
            "add r1, r5, 8",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "beq 0x10ac4",
            "ldr r3, [r4, 0x28]",
            "cmp r5, r3",
            "beq 0x10afc",
            "b 0x10acc",
            "ldr r5, [r5]",
            "b 0x10a94",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 2",
            "cmp r1, r2",
            "bhs 0x10ae8",
            "mov r4, 0",
            "b 0x10c48",
            "ldrh r2, [r5, 0xc]",
            "strh r2, [r3]",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 2",
            "b 0x10c40",
            "ldr r3, [sp, 8]",
            "add r0, sp, 0xc",
            "ldr r1, [r3]",
            "add r1, r1, 8",
            "bl fcn.0000e884",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r2]",
            "rsb r2, r2, r1",
            "ldr r1, [r4, 0x10]",
            "sub r2, r2, 3",
            "add r2, r3, r2",
            "cmp r1, r2",
            "blo 0x10ae0",
            "ldr r5, [r4, 0xc]",
            "rsb r5, r5, r3",
            "cmp r5, r7",
            "bhi 0x10bac",
            "add r0, sp, 0x10",
            "mov r6, r4",
            "bl rsym._ZN9list_baseC2Ev",
            "add r1, sp, 8",
            "add r0, sp, 0x10",
            "bl fcn.0000e130",
            "mvn r3, r5, lsl 18",
            "mvn r3, r3, lsr 18",
            "mov r0, 0x10",
            "ubfx r2, r3, 8, 8",
            "ldr r8, [r6, 0x28]!",
            "orr r3, r2, r3, lsl 8",
            "strh r3, [sp, 0x14]",
            "bl sym.imp.malloc",
            "add r1, sp, 0x10",
            "mov r5, r0",
            "add r0, r0, 8",
            "bl fcn.0000e04c",
            "ldrh r3, [sp, 0x14]",
            "mov r0, r6",
            "mov r1, r8",
            "mov r2, r5",
            "strh r3, [r5, 0xc]",
            "bl sym.imp.list_base::link_list_node_base__list_node_base_",
            "add r0, sp, 0x10",
            "bl fcn.0000e174",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [r4, 0x14]",
            "add r1, r3, 4",
            "ldr r3, [r3]",
            "rsb r3, r1, r3",
            "strb r3, [r2]",
            "ldr r3, [sp, 0xc]",
            "ldr r0, [r4, 0x14]",
            "add r1, r3, 4",
            "add r0, r0, 1",
            "str r0, [r4, 0x14]",
            "ldr r2, [r3]",
            "rsb r2, r1, r2",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 0xc]",
            "mov r0, sp",
            "add r1, sp, 8",
            "add r2, r3, 4",
            "ldr r3, [r3]",
            "rsb r3, r2, r3",
            "ldr r2, [r4, 0x14]",
            "add r3, r2, r3",
            "str r3, [r4, 0x14]",
            "ldr r3, [sp, 8]",
            "add r2, sp, 0x10",
            "ldr r3, [r3]",
            "str r3, [sp, 0x10]",
            "bl fcn.0000e008",
            "b 0x10a7c",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 1",
            "cmp r1, r2",
            "blo 0x10ae0",
            "strb r0, [r3]",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 1",
            "str r3, [r4, 0x14]",
            "mov r4, 1",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl fcn.0000e174",
            "mov r0, r4",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00010c64": {
        "function_address": "0x00010c64",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr r3, [r1]",
            "mov sl, r1",
            "mov sb, 0",
            "ldr r8, [r3]",
            "ldr r3, [sl]",
            "cmp r8, r3",
            "beq 0x10f34",
            "ldr r5, [r8, 8]",
            "mov r0, r4",
            "ldr fp, [r4, 0x14]",
            "add r1, r5, 4",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "beq 0x10f30",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 0xa",
            "cmp r1, r2",
            "blo 0x10f30",
            "ldrh r2, [r5, 8]",
            "lsl r1, r2, 8",
            "orr r2, r1, r2, lsr 8",
            "strh r2, [r3]",
            "ldrh r3, [r5, 0xa]",
            "ldr r2, [r4, 0x14]",
            "lsl r1, r3, 8",
            "orr r3, r1, r3, lsr 8",
            "strh r3, [r2, 2]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r5, 0xc]",
            "rev r2, r2",
            "str r2, [r3, 4]",
            "ldrh r3, [r5, 8]",
            "ldr r6, [r4, 0x14]",
            "sub r3, r3, 1",
            "add r7, r6, 0xa",
            "str r7, [r4, 0x14]",
            "cmp r3, 0x1b",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x10d04.9",
            "ldr r2, [r4, 0x10]",
            "add r3, r6, 0xe",
            "cmp r2, r3",
            "blo 0x10f30",
            "ldr r3, [r5, 0x10]",
            "str r3, [r6, 0xa]",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 4",
            "b 0x10f0c",
            "mov r0, r4",
            "add r1, r5, 0x10",
            "b 0x10e8c",
            "mov r0, r4",
            "add r1, r5, 0x10",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "beq 0x10f30",
            "mov r0, r4",
            "add r1, r5, 0x14",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "beq 0x10f30",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 0x14",
            "cmp r1, r2",
            "blo 0x10f30",
            "ldr r2, [r5, 0x18]",
            "rev r2, r2",
            "str r2, [r3]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r5, 0x1c]",
            "rev r2, r2",
            "str r2, [r3, 4]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r5, 0x20]",
            "rev r2, r2",
            "str r2, [r3, 8]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r5, 0x24]",
            "rev r2, r2",
            "str r2, [r3, 0xc]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r5, 0x28]",
            "rev r2, r2",
            "str r2, [r3, 0x10]",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 0x14",
            "b 0x10f0c",
            "mov r0, r4",
            "add r1, r5, 0x10",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "bne 0x10e84",
            "b 0x10f30",
            "ldr r2, [r4, 0x10]",
            "add r3, r6, 0xc",
            "cmp r2, r3",
            "blo 0x10f30",
            "ldrh r3, [r5, 0x10]",
            "lsl r2, r3, 8",
            "orr r3, r2, r3, lsr 8",
            "strh r3, [r6, 0xa]",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 2",
            "str r3, [r4, 0x14]",
            "add r1, r5, 0x14",
            "mov r0, r4",
            "bl fcn.00010a5c",
            "cmp r0, 0",
            "bne 0x10f10",
            "b 0x10f30",
            "ldr r2, [r4, 0x10]",
            "add r3, r6, 0x1a",
            "cmp r2, r3",
            "blo 0x10f30",
            "add r5, r5, 0x10",
            "mov r3, r7",
            "add r2, r5, 0x10",
            "ldr r1, [r5], 4",
            "cmp r5, r2",
            "str r1, [r3], 4",
            "bne 0x10eb8",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 0x10",
            "b 0x10f0c",
            "ldr r1, [r5, 0x10]",
            "ldr r2, [r5, 0x14]",
            "ldr r0, [r4, 0x10]",
            "rsb r2, r1, r2",
            "add r3, r7, r2",
            "cmp r0, r3",
            "blo 0x10f30",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "ldr r2, [r5, 0x14]",
            "ldr r3, [r5, 0x10]",
            "rsb r3, r3, r2",
            "ldr r2, [r4, 0x14]",
            "add r3, r2, r3",
            "str r3, [r4, 0x14]",
            "ldr r3, [r4, 0x14]",
            "add sb, sb, 1",
            "rsb r7, r7, r3",
            "ubfx r3, r7, 8, 8",
            "orr r7, r3, r7, lsl 8",
            "strh r7, [r6, 8]",
            "ldr r8, [r8]",
            "b 0x10c7c",
            "str fp, [r4, 0x14]",
            "mov r0, sb",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.000105f4": {
        "function_address": "0x000105f4",
        "instructions": [
            "ldr r3, [r0, 0x10]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "poplt {r4, pc}",
            "bl sym.imp.nv::getLooper__",
            "ldr r1, [r4, 0x10]",
            "add r0, r0, 0x64",
            "bl sym.imp.nv::ThinRunner::removeSocket_int_",
            "ldr r0, [r4, 0x10]",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4, 0x10]",
            "pop {r4, pc}"
        ]
    },
    "fcn.000142d4": {
        "function_address": "0x000142d4",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r1, [r0, 0x18]",
            "ldr r2, [r0, 0x1c]",
            "ldr r3, [r0, 0x14]",
            "rsb r2, r1, r2",
            "ldr r0, [r0, 0x10]",
            "add r1, r1, r3",
            "rsb r2, r3, r2",
            "mov r3, 0",
            "bl sym.imp.send",
            "subs r5, r0, 0",
            "bgt 0x14364",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "mov r6, r0",
            "cmp r3, 0xb",
            "cmpne r3, 4",
            "beq 0x143c8",
            "ldr r1, str.tcp_send_failed:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r5",
            "bl sym.imp.operator___ostream__int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "ldr r0, [r6]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r4",
            "bl fcn.000105f4",
            "b 0x143c8",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r4, 0x1c]",
            "add r5, r5, r3",
            "ldr r3, [r4, 0x18]",
            "str r5, [r4, 0x14]",
            "rsb r3, r3, r2",
            "cmp r5, r3",
            "bne 0x143c8",
            "bl sym.imp.nv::getLooper__",
            "ldr r1, [r4, 0x10]",
            "add r0, r0, 0x64",
            "bl sym.imp.nv::ThinRunner::removeSocket_int_",
            "bl sym.imp.nv::getLooper__",
            "ldr r3, aav.0x00018298",
            "tst r4, 1",
            "ldr r1, [r4, 0x10]",
            "stm sp, {r3, r4}",
            "add r0, r0, 0x64",
            "beq 0x143b4",
            "bl sym.imp.abort",
            "mov r2, 1",
            "mov r3, sp",
            "bl sym.imp.nv::ThinRunner::addSocket_int__unsigned_int__function_void__int__unsigned_int___",
            "mov r0, sp",
            "bl fcn.0000df30",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.send": {
        "function_address": "0x0000cee0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5c8]!"
        ]
    },
    "sym.imp.nv::ThinRunner::addSocket_int__unsigned_int__function_void__int__unsigned_int___": {
        "function_address": "0x0000c70c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb00]!"
        ]
    },
    "fcn.0001159c": {
        "function_address": "0x0001159c",
        "instructions": [
            "push {r0, r1, r4, lr}",
            "mov r4, r0",
            "add r0, sp, 4",
            "bl fcn.00011184",
            "add r1, sp, 4",
            "mov r0, r4",
            "bl sym.imp.string::string_string_const_",
            "ldr r1, aav.0x0001acac",
            "mov r0, r4",
            "bl sym.imp.string::append_char_const_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "fcn.00011184": {
        "function_address": "0x00011184",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl sym.imp.string::string__",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "beq 0x111ac",
            "mov r0, r5",
            "ldr r1, str.hotspot.",
            "bl sym.imp.string::append_char_const_",
            "ldrb r1, [r4, 1]",
            "mov r0, r5",
            "ldr r3, str.tcp.",
            "ldr r2, str.udp.",
            "cmp r1, 0",
            "movne r1, r3",
            "moveq r1, r2",
            "bl sym.imp.string::append_char_const_",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "beq 0x111f8",
            "add r0, sp, 4",
            "add r1, r4, 4",
            "bl sym.imp.IPAddr::str___const",
            "mov r0, r5",
            "add r1, sp, 4",
            "bl fcn.0000ec6c",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r6, r4, 8",
            "mov r0, r6",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "beq 0x11230",
            "add r0, sp, 4",
            "mov r1, r6",
            "mov r2, 0",
            "bl sym.imp.IPAddr6::str_bool__const",
            "mov r0, r5",
            "add r1, sp, 4",
            "bl fcn.0000ec6c",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldrh r2, [r4, 0x18]",
            "add r0, sp, 4",
            "ldrh r3, [r4, 0x1a]",
            "ldr r1, str.:_u._x",
            "bl sym.imp.s_char_const__::_",
            "add r1, sp, 4",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00015508": {
        "function_address": "0x00015508",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, lr}",
            "sub sp, sp, 0x14",
            "ldr r6, [r0, 0x14]",
            "mov r4, r0",
            "add r0, sp, 8",
            "mov sb, r1",
            "bl rsym._ZN11vector_baseC2Ev",
            "mov r7, 1",
            "mov r8, 0",
            "ldr r3, [r4, 0x10]",
            "add r1, r6, 1",
            "cmp r1, r3",
            "bhi 0x15654",
            "ldrb r5, [r6]",
            "and r2, r5, 0xc0",
            "cmp r2, 0xc0",
            "bne 0x155c8",
            "add r2, r6, 2",
            "cmp r3, r2",
            "blo 0x15654",
            "ldrh r3, [r6]",
            "ldr r2, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "lsl r6, r3, 8",
            "rsb r1, r2, r1",
            "orr r6, r6, r3, lsr 8",
            "ubfx r6, r6, 0, 0xe",
            "mov r3, 0",
            "asr r1, r1, 2",
            "cmp r3, r1",
            "beq 0x15598",
            "ldr r0, [r2, r3, lsl 2]",
            "cmp r6, r0",
            "beq 0x15654",
            "add r3, r3, 1",
            "b 0x1557c",
            "add r0, sp, 8",
            "add r1, sp, 4",
            "str r6, [sp, 4]",
            "bl method vector<unsigned int>::push_back(unsigned int&&)",
            "ldr r3, [r4, 0xc]",
            "cmp r7, 0",
            "add r6, r3, r6",
            "ldrne r3, [r4, 0x14]",
            "movne r7, 0",
            "addne r3, r3, 2",
            "strne r3, [r4, 0x14]",
            "b 0x1552c",
            "cmp r5, 0",
            "beq 0x15634",
            "cmp r5, 0x3f",
            "bhi 0x15654",
            "add r6, r1, r5",
            "cmp r6, r3",
            "bhi 0x15654",
            "mov r2, r5",
            "add r0, sp, 4",
            "bl sym.imp.string::string_char_const__unsigned_int_",
            "mov r0, sp",
            "add r1, sp, 4",
            "add r8, r8, r5",
            "bl fcn.0000e7b4",
            "mov r1, sp",
            "mov r0, sb",
            "bl fcn.00016790",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "cmp r7, 0",
            "ldrne r3, [r4, 0x14]",
            "addne r5, r5, 1",
            "addne r5, r3, r5",
            "strne r5, [r4, 0x14]",
            "b 0x1552c",
            "cmp r7, 0",
            "ldrne r3, [r4, 0x14]",
            "addne r3, r3, 1",
            "strne r3, [r4, 0x14]",
            "cmp r8, 0xff",
            "movhi r4, 0",
            "movls r4, 1",
            "b 0x15658",
            "mov r4, 0",
            "add r0, sp, 8",
            "bl method vector<unsigned int>::~vector()",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "fcn.00017c20": {
        "function_address": "0x00017c20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "add r0, sp, 8",
            "str r1, [sp, 4]",
            "mov sb, r2",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r5, 0",
            "ldr r3, [sp, 4]",
            "cmp r5, r3",
            "beq 0x17ff0",
            "add r0, sp, 8",
            "bl fcn.0000e0f0",
            "mov r0, r4",
            "add r1, sp, 8",
            "bl fcn.00015508",
            "cmp r0, 0",
            "beq 0x17fe8",
            "ldr r3, [r4, 0x14]",
            "ldr r1, [r4, 0x10]",
            "add r2, r3, 0xa",
            "cmp r2, r1",
            "bhi 0x17fe8",
            "ldrh r0, [r3]",
            "ldr sl, [r3, 4]",
            "lsl r7, r0, 8",
            "rev sl, sl",
            "orr r7, r7, r0, lsr 8",
            "ldrh r0, [r3, 2]",
            "ldrh r3, [r3, 8]",
            "str r2, [r4, 0x14]",
            "uxth r7, r7",
            "lsl fp, r0, 8",
            "lsl ip, r3, 8",
            "orr fp, fp, r0, lsr 8",
            "orr ip, ip, r3, lsr 8",
            "uxth fp, fp",
            "uxth r8, ip",
            "add r2, r2, r8",
            "cmp r1, r2",
            "blo 0x17fe8",
            "sub r3, r7, 1",
            "cmp r3, 0x1b",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0x17ccc.9",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001aad0",
            "str r6, [sp, 0xc]",
            "str r3, [r6]",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r3], 4",
            "str r2, [r6, 0x10]",
            "b 0x17f4c",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6e8",
            "str r6, [sp, 0xc]",
            "mov r0, r4",
            "add r1, r6, 0x10",
            "b 0x17ef4",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9c8",
            "mov r8, r6",
            "str r3, [r8], 0x10",
            "mov r0, r8",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r6, 0x14",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "mov r1, r8",
            "str r6, [sp, 0xc]",
            "bl fcn.00015508",
            "cmp r0, 0",
            "beq 0x17fe8",
            "ldr r1, [sp, 0xc]",
            "mov r0, r4",
            "add r1, r1, 0x14",
            "bl fcn.00015508",
            "cmp r0, 0",
            "beq 0x17fe8",
            "ldr r3, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "add r1, r3, 0x14",
            "cmp r1, r2",
            "bhi 0x17fe8",
            "ldr r2, [sp, 0xc]",
            "ldr r0, [r3]",
            "rev r0, r0",
            "str r0, [r2, 0x18]",
            "ldr r0, [r3, 4]",
            "rev r0, r0",
            "str r0, [r2, 0x1c]",
            "ldr r0, [r3, 8]",
            "rev r0, r0",
            "str r0, [r2, 0x20]",
            "ldr r0, [r3, 0xc]",
            "rev r0, r0",
            "str r0, [r2, 0x24]",
            "ldr r3, [r3, 0x10]",
            "rev r3, r3",
            "str r3, [r2, 0x28]",
            "str r1, [r4, 0x14]",
            "b 0x17fb4",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001b9d8",
            "mov r8, r6",
            "str r3, [r8], 0x10",
            "mov r0, r8",
            "bl rsym._ZN9list_baseC2Ev",
            "add r0, r6, 0x14",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "mov r1, r8",
            "str r6, [sp, 0xc]",
            "bl fcn.00015508",
            "cmp r0, 0",
            "beq 0x17fe8",
            "ldr r1, [sp, 0xc]",
            "mov r0, r4",
            "add r1, r1, 0x14",
            "b 0x17ef4",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r8, r0",
            "bl fcn.0000e6c8",
            "ldr r2, aav.0x0001b9e8",
            "mov r6, r8",
            "str r2, [r6], 0x14",
            "mov r0, r6",
            "bl rsym._ZN9list_baseC2Ev",
            "ldr r1, [r4, 0x14]",
            "ldr r0, [r4, 0x10]",
            "add r2, r1, 2",
            "str r8, [sp, 0xc]",
            "cmp r2, r0",
            "bhi 0x17fe8",
            "ldrh r1, [r1]",
            "lsl r0, r1, 8",
            "orr r1, r0, r1, lsr 8",
            "mov r0, r4",
            "strh r1, [r8, 0x10]",
            "mov r1, r6",
            "str r2, [r4, 0x14]",
            "bl fcn.00015508",
            "cmp r0, 0",
            "bne 0x17fb4",
            "b 0x17fe8",
            "mov r0, 0x20",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e85c",
            "ldr r3, [r4, 0x14]",
            "add ip, r6, 0x10",
            "str r6, [sp, 0xc]",
            "add lr, r3, 0x10",
            "ldr r0, [r3]",
            "add r3, r3, 8",
            "ldr r1, [r3, -4]",
            "cmp r3, lr",
            "mov r2, ip",
            "stm r2!, {r0, r1}",
            "mov ip, r2",
            "bne 0x17f24",
            "ldr r3, [r4, 0x14]",
            "add r3, r3, 0x10",
            "str r3, [r4, 0x14]",
            "b 0x17fb4",
            "mov r0, 0x18",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6c8",
            "ldr r2, aav.0x0001b9f8",
            "mov r3, r6",
            "str r2, [r3], 0x10",
            "mov r0, r3",
            "str r3, [sp]",
            "bl rsym._ZN6vectorIhEC1Ev",
            "ldr r1, [r4, 0x14]",
            "add r0, sp, 0x10",
            "str r6, [sp, 0xc]",
            "add r2, r1, r8",
            "bl sym.imp.vector_unsigned_char_::vector_unsigned_char_const__unsigned_char_const_",
            "ldr r3, [sp]",
            "add r1, sp, 0x10",
            "mov r0, r3",
            "bl fcn.0000e8a0",
            "add r0, sp, 0x10",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "ldr r3, [r4, 0x14]",
            "add ip, r3, r8",
            "str ip, [r4, 0x14]",
            "ldr r0, [sp, 0xc]",
            "add r1, sp, 8",
            "add r5, r5, 1",
            "add r0, r0, 4",
            "bl fcn.0000e130",
            "add r1, sp, 0x18",
            "mov r0, sb",
            "ldr r3, [r1, -0xc]!",
            "strh r7, [r3, 8]",
            "strh fp, [r3, 0xa]",
            "str sl, [r3, 0xc]",
            "bl fcn.00017258",
            "b 0x17c40",
            "mov r4, 0",
            "b 0x17ff4",
            "mov r4, 1",
            "add r0, sp, 8",
            "bl fcn.0000e174",
            "mov r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000dd38": {
        "function_address": "0x0000dd38",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldrb r2, [r0, 1]",
            "mov r4, r1",
            "ldrb r3, [r1, 1]",
            "cmp r2, r3",
            "blt 0xddec",
            "ble 0xdd60",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "add r6, r0, 4",
            "add r7, r1, 4",
            "mov r0, r6",
            "mov r1, r7",
            "bl sym.imp.IPAddr::operator__IPAddr_const__const",
            "cmp r0, 0",
            "bne 0xddec",
            "mov r0, r7",
            "mov r1, r6",
            "bl sym.imp.IPAddr::operator__IPAddr_const__const",
            "cmp r0, 0",
            "bne 0xdd58",
            "add r6, r5, 8",
            "add r7, r4, 8",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.0000dd24",
            "cmp r0, 0",
            "bne 0xddec",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.0000dd24",
            "cmp r0, 0",
            "bne 0xdd58",
            "ldrh r2, [r5, 0x18]",
            "ldrh r3, [r4, 0x18]",
            "cmp r2, r3",
            "blo 0xddec",
            "pophi {r3, r4, r5, r6, r7, pc}",
            "ldrh r0, [r5, 0x1a]",
            "ldrh r3, [r4, 0x1a]",
            "cmp r0, r3",
            "movhs r0, 0",
            "movlo r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.IPAddr::operator__IPAddr_const__const": {
        "function_address": "0x0000c9a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x948]!"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x0000cc1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7a0]!"
        ]
    },
    "sym.imp.sendmsg": {
        "function_address": "0x0000c9ac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x940]!"
        ]
    },
    "fcn.000115dc": {
        "function_address": "0x000115dc",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "add r0, sp, 4",
            "mov r8, r1",
            "bl fcn.0001159c",
            "add r1, sp, 4",
            "ldr r0, obj.cout",
            "add r7, r5, 0x44",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.discard",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r4, r7",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldr r6, [r5, 0x44]",
            "bic r6, r6, 3",
            "cmp r6, 0",
            "beq 0x11654",
            "ldr r0, [r5, 0x54]",
            "mov r1, r8",
            "add r0, r6, r0",
            "bl fcn.0000dd38",
            "ldr r3, [r6, 4]",
            "ldr r2, [r6, 8]",
            "cmp r0, 0",
            "moveq r4, r6",
            "movne r6, r2",
            "moveq r6, r3",
            "b 0x11620",
            "cmp r4, r7",
            "bne 0x11664",
            "mov r4, r7",
            "b 0x1167c",
            "ldr r1, [r5, 0x54]",
            "mov r0, r8",
            "add r1, r4, r1",
            "bl fcn.0000dd38",
            "cmp r0, 0",
            "bne 0x1165c",
            "cmp r4, r7",
            "bne 0x11698",
            "ldr r1, str.not_found",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "b 0x116c0",
            "ldr r0, [r4, 0x28]",
            "bl sym.imp.free",
            "add r0, r5, 0x40",
            "mov r1, r4",
            "ldr r2, aav.0x0000d9fc",
            "str r4, [sp, 4]",
            "bl sym.imp.tree_base::erase_tree_iterator_base__void____tree_node_base__",
            "ldr r3, [r5, 0x20]",
            "sub r3, r3, 1",
            "str r3, [r5, 0x20]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00016f48": {
        "function_address": "0x00016f48",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r0, 0x2c",
            "mov r5, r2",
            "mov r6, r1",
            "mov r7, r3",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "bl fcn.0000e710",
            "mov r2, 0",
            "bfi r2, r7, 0, 4",
            "strb r2, [r4, 3]",
            "mov r3, 0x80",
            "ldrb r2, [r5, 2]",
            "strb r3, [r4, 2]",
            "uxtb r3, r3",
            "ubfx r1, r2, 3, 4",
            "bfi r3, r1, 3, 4",
            "mov r1, r6",
            "bfi r3, r2, 0, 1",
            "strb r3, [r4, 2]",
            "ldrb r3, [r4, 3]",
            "mov r2, r4",
            "orr r3, r3, 0x80",
            "strb r3, [r4, 3]",
            "ldr r3, [0x00016fd8]",
            "ldr r0, [r3]",
            "bl fcn.00013970",
            "mov r0, r4",
            "bl fcn.0000e390",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r0, r5",
            "bl fcn.0000e390",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, lr}",
            "b sym.imp.free"
        ]
    },
    "fcn.0000e8b8": {
        "function_address": "0x0000e8b8",
        "instructions": [
            "ldr r2, [r0]",
            "push {r3, lr}",
            "add ip, r2, 4",
            "ldr r3, [r1]",
            "ldr r2, [r2]",
            "rsb r2, ip, r2",
            "add ip, r3, 4",
            "ldr r3, [r3]",
            "rsb r3, ip, r3",
            "cmp r2, r3",
            "bne 0xe8f4",
            "bl sym.imp.string::compare_string_const__const",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r3, pc}",
            "mov r0, 0",
            "pop {r3, pc}"
        ]
    },
    "fcn.0001147c": {
        "function_address": "0x0001147c",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldr r7, [r4, 0x40]",
            "mov r5, r1",
            "ldr r0, [r0, 0x3c]",
            "ldr r6, [0x00011590]",
            "rsb r7, r0, r7",
            "asr r7, r7, 2",
            "mul r7, r6, r7",
            "cmp r7, 0x63",
            "movhi r0, 0",
            "bhi 0x11588",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "mov r1, 0x1c",
            "bl fcn.0001a724",
            "cmp r7, r0",
            "bne 0x114f0",
            "mov r0, r4",
            "ldr r2, [r4, 0x40]",
            "ldr r3, [r0, 0x3c]!",
            "rsb r3, r3, r2",
            "mov r2, 0x1c",
            "asr r3, r3, 2",
            "mul r6, r6, r3",
            "lsls r6, r6, 1",
            "movne r1, r6",
            "moveq r1, 1",
            "mul r1, r2, r1",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r6, [r4, 0x40]",
            "add r1, r5, 8",
            "ldrb r3, [r5]",
            "add r0, r6, 8",
            "strb r3, [r6]",
            "ldrb r3, [r5, 1]",
            "strb r3, [r6, 1]",
            "ldr r3, [r5, 4]",
            "str r3, [r6, 4]",
            "bl fcn.0000de94",
            "ldrh r3, [r5, 0x18]",
            "mov r1, r4",
            "mov r0, sp",
            "strh r3, [r6, 0x18]",
            "ldrh r3, [r5, 0x1a]",
            "strh r3, [r6, 0x1a]",
            "ldr r3, [r4, 0x40]",
            "add r3, r3, 0x1c",
            "str r3, [r4, 0x40]",
            "bl fcn.00012cac",
            "mov r1, sp",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.add_req",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r5",
            "mov r4, r0",
            "add r0, sp, 4",
            "bl fcn.00011184",
            "add r1, sp, 4",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000e758": {
        "function_address": "0x0000e758",
        "instructions": [
            "ldr r3, [r1]",
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r4, [r3]",
            "mov r6, r1",
            "ldr r3, [r6]",
            "cmp r4, r3",
            "beq 0xe794",
            "add r1, r4, 8",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "mov r1, 0x2e",
            "bl sym.imp.operator___ostream__char_",
            "ldr r4, [r4]",
            "b 0xe76c",
            "ldr r3, [r4]",
            "cmp r3, r4",
            "bne 0xe7ac",
            "mov r0, r5",
            "mov r1, 0x2e",
            "bl sym.imp.operator___ostream__char_",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.operator___ostream__char_": {
        "function_address": "0x0000c8e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9c8]!"
        ]
    },
    "fcn.000103ec": {
        "function_address": "0x000103ec",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, lr}",
            "add r6, r0, 0xc",
            "mov r4, r0",
            "mov r5, 0",
            "str r5, [r0, 4]",
            "mov sb, r2",
            "strb r5, [r0, 8]",
            "mov r0, r6",
            "mov r7, r1",
            "mov r8, r3",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r3, 5",
            "add r0, r4, 0x24",
            "str r3, [r4, 0x18]",
            "strb r5, [r4, 0x1c]",
            "str r5, [r4, 0x20]",
            "bl fcn.0000e850",
            "mov r3, 0x35",
            "strb r5, [r4, 0x38]",
            "add r0, r4, 0x3c",
            "str r3, [r4, 0x34]",
            "bl rsym._ZN11vector_baseC2Ev",
            "add r0, r4, 0x44",
            "bl sym.imp.nv::message::message__",
            "add r0, r4, 0x48",
            "bl sym.imp.nv::message::message__",
            "str r5, [r4, 0x4c]",
            "str r5, [r4, 0x50]",
            "add r0, r4, 0x58",
            "str r5, [r4, 0x54]",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r1, sb",
            "str r7, [r4]",
            "mov r0, r6",
            "bl fcn.0000e130",
            "str r8, [r4, 0x10]",
            "bl sym.imp.nv::getJiffies__",
            "str r0, [r4, 0x14]",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "sym.imp.nv::message::message__": {
        "function_address": "0x0000cf04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x5b0]!"
        ]
    },
    "fcn.000145c8": {
        "function_address": "0x000145c8",
        "instructions": [
            "ldr r2, [r0, 4]",
            "add ip, r0, 4",
            "push {r4, r5, r6, r7, lr}",
            "bic r2, r2, 3",
            "sub sp, sp, 0x14",
            "mov r3, ip",
            "cmp r2, 0",
            "beq 0x1460c",
            "ldr r6, [r0, 0x14]",
            "ldmib r2, {r4, r5}",
            "ldr r7, [r2, r6]",
            "ldr r6, [r1]",
            "cmp r7, r6",
            "movhs r3, r2",
            "movlo r2, r5",
            "movhs r2, r4",
            "b 0x145e0",
            "cmp r3, ip",
            "beq 0x14628",
            "ldr r2, [r0, 0x14]",
            "ldr r4, [r1]",
            "ldr r2, [r3, r2]",
            "cmp r4, r2",
            "movlo r3, ip",
            "cmp r3, ip",
            "bne 0x14654",
            "ldr r2, [r1]",
            "mov r1, r3",
            "ldr r3, aav.0x0001196c",
            "str r2, [sp, 8]",
            "mov r2, 0",
            "str r2, [sp, 0xc]",
            "add r2, sp, 8",
            "bl sym.imp.tree_base::insert_unique_tree_iterator_base__void__tree_node_base____void__",
            "mov r3, r0",
            "add r0, r3, 0x10",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.tree_base::insert_unique_tree_iterator_base__void__tree_node_base____void__": {
        "function_address": "0x0000c91c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x9a0]!"
        ]
    },
    "fcn.0000eef0": {
        "function_address": "0x0000eef0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r3, 0",
            "mov fp, r0",
            "strb r3, [sp, 0x13]",
            "ldrb r3, [r0, 0x1c]",
            "cmp r3, 0",
            "bne 0xf200",
            "ldr sb, [0x0000f3f4]",
            "add r5, r0, 0x58",
            "add r4, r0, 0xc",
            "ldr r3, [r0, 0x10]",
            "ldr r2, [sb]",
            "cmp r2, sb",
            "beq 0xefe8",
            "subs r2, r3, 1",
            "movne r2, 1",
            "subs r8, r3, 0x1c",
            "str r2, [sp, 0xc]",
            "movne r8, 1",
            "tst r8, r2",
            "beq 0xef50",
            "cmp r3, 0xff",
            "bne 0xefe8",
            "add r0, sp, 0x14",
            "mov r1, r4",
            "bl fcn.0000ece4",
            "ldr r7, [sb]",
            "cmp r7, sb",
            "beq 0xefd4",
            "ldrb r2, [r7, -3]",
            "cmp r2, 0",
            "bne 0xefe0",
            "ldr r2, [sp, 0x14]",
            "add r0, r7, 0xc",
            "add r1, r2, 4",
            "ldr r2, [r2]",
            "bl sym.imp.reMatchChar",
            "cmp r0, 0",
            "beq 0xefe0",
            "cmp r8, 0",
            "beq 0xefa4",
            "ldr r2, [r7, -0x30]",
            "cmp r2, 0",
            "bne 0xf220",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 0",
            "beq 0xefc4",
            "sub r6, r7, 0x2c",
            "mov r0, r6",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "bne 0xf274",
            "ldr r2, [fp, 0x58]",
            "ldr r1, [r2]",
            "cmp r1, r2",
            "beq 0xefe0",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "b 0xefe8",
            "ldr r7, [r7]",
            "b 0xef60",
            "ldr r3, [fp, 0x58]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "bne 0xf020",
            "mov r3, 1",
            "str r3, [sp]",
            "add r3, sp, 0x13",
            "str r3, [sp, 4]",
            "ldr r3, [0x0000f3f8]",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r0, [r3]",
            "ldr r3, [fp, 0x10]",
            "bl fcn.0001566c",
            "ldr r2, [fp, 0x3c]",
            "ldr r3, [fp, 0x40]",
            "cmp r2, r3",
            "beq 0xf064",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e710",
            "str r6, [fp, 0x54]",
            "mov r3, 0x81",
            "strb r3, [r6, 2]",
            "mov r3, 0x80",
            "strb r3, [r6, 3]",
            "mov r0, r6",
            "mov r1, r4",
            "ldr r2, [fp, 0x10]",
            "bl fcn.00013cd0",
            "ldr r1, [fp, 0x58]",
            "mov r2, 0",
            "ldr r6, [r1]",
            "mov r3, r6",
            "cmp r3, r1",
            "beq 0xf094",
            "ldr r0, [r3, 8]",
            "ldr r3, [r3]",
            "ldr r0, [r0, 0xc]",
            "cmp r0, 0",
            "movle r2, 1",
            "b 0xf074",
            "cmp r2, 0",
            "beq 0xf0d0",
            "ldr r3, [fp, 0x58]",
            "cmp r6, r3",
            "beq 0xf0c8",
            "ldr r0, [r6, 8]",
            "cmp r0, 0",
            "beq 0xf0c0",
            "ldr r3, [r0]",
            "ldr r3, [r3, 4]",
            "blx r3",
            "ldr r6, [r6]",
            "b 0xf09c",
            "mov r0, r5",
            "bl fcn.0000e09c",
            "ldr r3, [fp, 0x58]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "bne 0xf200",
            "ldr r3, [0x0000f3f8]",
            "mov r0, r4",
            "ldr r8, [r3]",
            "bl sym.imp.list_base::count_nodes___const",
            "mov r6, r8",
            "cmp r0, 0",
            "beq 0xf1ac",
            "ldr sb, [fp, 0xc]",
            "ldr r7, [r6, 8]",
            "ldr sb, [sb, 4]",
            "cmp r7, 0",
            "beq 0xf200",
            "ldr r5, [r7, 4]",
            "add sl, r7, 4",
            "add ip, sb, 8",
            "bic r5, r5, 3",
            "mov r4, sl",
            "cmp r5, 0",
            "beq 0xf160",
            "ldr r0, [r7, 0x14]",
            "mov r1, ip",
            "str ip, [sp, 8]",
            "add r0, r5, r0",
            "bl fcn.0000dc34",
            "ldr r3, [r5, 4]",
            "ldr r2, [r5, 8]",
            "ldr ip, [sp, 8]",
            "cmp r0, 0",
            "moveq r4, r5",
            "movne r5, r2",
            "moveq r5, r3",
            "b 0xf124",
            "cmp r4, sl",
            "bne 0xf170",
            "mov r4, sl",
            "b 0xf188",
            "ldr r1, [r7, 0x14]",
            "mov r0, ip",
            "add r1, r4, r1",
            "bl fcn.0000dc34",
            "cmp r0, 0",
            "bne 0xf168",
            "ldr r3, [r6, 8]",
            "add r3, r3, 4",
            "cmp r4, r3",
            "beq 0xf200",
            "ldr r3, [fp, 0xc]",
            "ldr r6, [r4, 0x10]",
            "ldr r3, [r3]",
            "cmp sb, r3",
            "bne 0xf100",
            "ldrb r3, [r6, 0xc]",
            "cmp r3, 0",
            "beq 0xf200",
            "ldr r3, [r6, 0x10]",
            "cmp r3, 0",
            "beq 0xf2c8",
            "ldrb r2, [r3, 0x1a]",
            "cmp r2, 0",
            "bne 0xf2c8",
            "ldr r2, [r3, 0xc]",
            "ldr r1, [r3, 0x10]",
            "str r1, [r2, 0x10]",
            "ldr r1, [r3, 0x10]",
            "str r2, [r1, 0xc]",
            "ldr r2, [r8, 0x24]",
            "str r3, [r2, 0xc]",
            "str r2, [r3, 0x10]",
            "add r2, r8, 0x14",
            "str r2, [r3, 0xc]",
            "str r3, [r8, 0x24]",
            "b 0xf2c8",
            "ldr r3, [fp, 0x58]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "bne 0xf2dc",
            "ldrb r4, [sp, 0x13]",
            "cmp r4, 0",
            "bne 0xf2dc",
            "b 0xf33c",
            "mov r0, 0x14",
            "bl sym.imp.malloc",
            "mov r6, r0",
            "bl fcn.0000e6c8",
            "ldr r2, aav.0x0001aad0",
            "mov r0, r6",
            "mov r1, r4",
            "str r2, [r0], 4",
            "bl fcn.0000e130",
            "mov r2, 1",
            "strh r2, [r6, 8]",
            "mov r0, r5",
            "strh r2, [r6, 0xa]",
            "add r1, sp, 0x18",
            "ldr r2, [r7, -8]",
            "str r2, [r6, 0xc]",
            "ldr r2, [r7, -0x30]",
            "str r6, [sp, 0x18]",
            "str r2, [r6, 0x10]",
            "bl fcn.00017258",
            "b 0xefa4",
            "mov r0, 0x20",
            "bl sym.imp.malloc",
            "mov sl, r0",
            "bl fcn.0000e85c",
            "mov r1, r4",
            "add r0, sl, 4",
            "bl fcn.0000e130",
            "mov r1, 1",
            "strh r1, [sl, 0xa]",
            "mov r3, 0x1c",
            "ldr r1, [r7, -8]",
            "add r0, sl, 0x10",
            "strh r3, [sl, 8]",
            "str r1, [sl, 0xc]",
            "mov r1, r6",
            "bl fcn.0000de78",
            "mov r0, r5",
            "add r1, sp, 0x18",
            "str sl, [sp, 0x18]",
            "bl fcn.00017258",
            "b 0xefc4",
            "mov r3, 3",
            "str r3, [fp, 0x50]",
            "mov r0, fp",
            "bl fcn.00018a84",
            "b 0xf3ec",
            "ldr r2, [fp, 0x3c]",
            "ldr r3, [fp, 0x40]",
            "cmp r2, r3",
            "beq 0xf2d0",
            "add r4, fp, 0x58",
            "ldr r0, [fp, 0x54]",
            "mov r1, r4",
            "add r0, r0, 0x1c",
            "bl fcn.000104f0",
            "mov r0, r4",
            "bl fcn.0000e09c",
            "ldr r1, [fp, 0x54]",
            "add r2, fp, 0xc",
            "mov r0, fp",
            "bl fcn.000159f4",
            "ldr r2, [fp, 0x54]",
            "mov r0, fp",
            "add r1, r2, 0x1c",
            "bl fcn.0001584c",
            "ldr r2, [fp, 0x54]",
            "mov r0, fp",
            "add r1, r2, 0x20",
            "bl fcn.0001584c",
            "b 0xf2d0",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "mov r5, r0",
            "bl fcn.0000e710",
            "ldrb r3, [r5, 2]",
            "mov r0, r5",
            "str r5, [fp, 0x4c]",
            "add r1, fp, 0xc",
            "bfi r3, r4, 0, 1",
            "ldrb r2, [r5, 3]",
            "bfi r3, r4, 1, 1",
            "bfi r3, r4, 2, 1",
            "bfi r2, r4, 0, 4",
            "bfi r3, r4, 3, 4",
            "bfi r2, r4, 4, 3",
            "bfi r3, r4, 7, 1",
            "bfi r2, r4, 7, 1",
            "strb r2, [r5, 3]",
            "uxtb r3, r3",
            "ldr r2, [fp, 0x10]",
            "orr r3, r3, 1",
            "strb r3, [r5, 2]",
            "bl fcn.00013cd0",
            "ldr r3, [0x0000f400]",
            "mov r1, 0xa",
            "ldr r3, [r3]",
            "ldr r3, [r3, 0x64]",
            "ldr r0, [r3, 0x2c]",
            "bl fcn.0001a724",
            "mov r4, r0",
            "bl sym.imp.nv::getRunner__",
            "ldr r3, aav.0x00019048",
            "tst fp, 1",
            "str fp, [sp, 0x1c]",
            "str r3, [sp, 0x18]",
            "beq 0xf3d0",
            "bl sym.imp.abort",
            "mov r1, r4",
            "add r2, sp, 0x18",
            "bl sym.imp.nv::ThinRunner::addTimer_unsigned_int__function_void_____",
            "add r0, sp, 0x18",
            "bl fcn.0000df94",
            "mov r0, fp",
            "bl fcn.00018dd0",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.reMatchChar": {
        "function_address": "0x0000c784",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xab0]!"
        ]
    },
    "sym.imp.string::assign_string_const_": {
        "function_address": "0x0000ca0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x900]!"
        ]
    },
    "fcn.0000ec70": {
        "function_address": "0x0000ec70",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r1",
            "mov r5, r0",
            "bl sym.imp.string::string__",
            "ldr r3, [r6]",
            "mov r7, 1",
            "ldr r4, [r3]",
            "ldr r3, [r6]",
            "cmp r4, r3",
            "beq 0xecdc",
            "ldr r3, [r3]",
            "cmp r4, r3",
            "beq 0xecc8",
            "cmp r7, 0",
            "mov r0, r5",
            "beq 0xecc0",
            "mov r1, 0x40",
            "mov r7, 0",
            "bl sym.imp.string::push_back_char_",
            "b 0xecc8",
            "mov r1, 0x2e",
            "bl sym.imp.string::push_back_char_",
            "add r1, r4, 8",
            "mov r0, r5",
            "bl fcn.0000ec6c",
            "ldr r4, [r4]",
            "b 0xec8c",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000e8a0": {
        "function_address": "0x0000e8a0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldm r1, {r1, r2}",
            "bl sym.imp.vector_unsigned_char_::assign_unsigned_char_const__unsigned_char_const_",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.vector_unsigned_char_::assign_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0000c6f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb10]!"
        ]
    },
    "fcn.0000d878": {
        "function_address": "0x0000d878",
        "instructions": [
            "ldr r3, aav.0x0001af58",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl sym.imp.AMap::AMap__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.AMap::AMap__": {
        "function_address": "0x0000c73c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xae0]!"
        ]
    },
    "fcn.00010310": {
        "function_address": "0x00010310",
        "instructions": [
            "ldr r3, aav.0x0001b1b8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl sym.imp.AMap::AMap__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0001062c": {
        "function_address": "0x0001062c",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "ldr r3, aav.0x0001b718",
            "mov r4, r0",
            "str r3, [r5], 0x20",
            "bl fcn.000105f4",
            "mov r0, r5",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "add r0, r4, 0x18",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "add r0, r4, 8",
            "bl fcn.0001048c",
            "ldr r3, aav.0x0001b6f8",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.000106c8": {
        "function_address": "0x000106c8",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "ldr r3, aav.0x0001b708",
            "mov r4, r0",
            "str r3, [r5], 8",
            "bl fcn.00010690",
            "mov r0, r5",
            "bl fcn.0001048c",
            "ldr r3, aav.0x0001b6f8",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.00010a20": {
        "function_address": "0x00010a20",
        "instructions": [
            "ldr r3, aav.0x0001b038",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl fcn.0000d878",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.list_base::unlink_list_node_base_": {
        "function_address": "0x0000c7a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa98]!"
        ]
    },
    "fcn.00011e3c": {
        "function_address": "0x00011e3c",
        "instructions": [
            "ldr r3, [r0, 4]",
            "add r2, r0, 4",
            "push {r4, r5, r6, r7, lr}",
            "bic r3, r3, 3",
            "sub sp, sp, 0x54",
            "mov r5, r0",
            "mov r7, r1",
            "mov r4, r2",
            "cmp r3, 0",
            "beq 0x11e8c",
            "ldr ip, [r5, 0x14]",
            "ldr r1, [r3, 4]",
            "ldr r0, [r3, 8]",
            "ldr r6, [r3, ip]",
            "ldr ip, [r7]",
            "cmp r6, ip",
            "movge r4, r3",
            "movlt r3, r0",
            "movge r3, r1",
            "b 0x11e5c",
            "cmp r4, r2",
            "beq 0x11ea8",
            "ldr r3, [r5, 0x14]",
            "ldr r1, [r7]",
            "ldr r3, [r4, r3]",
            "cmp r1, r3",
            "movlt r4, r2",
            "cmp r4, r2",
            "bne 0x11f40",
            "str r4, [sp]",
            "add r4, sp, 8",
            "mov r2, 0x24",
            "mov r1, 0",
            "add r6, sp, 0x20",
            "add r0, sp, 4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl fcn.0000e850",
            "mov r0, r6",
            "bl rsym._ZN6vectorIhEC1Ev",
            "ldr r3, [r7]",
            "mov r1, r4",
            "add r0, sp, 0x30",
            "add r7, sp, 0x48",
            "str r3, [sp, 0x28]",
            "ldr r3, [sp, 4]",
            "str r3, [sp, 0x2c]",
            "bl fcn.0000de94",
            "ldrh r3, [sp, 0x18]",
            "mov r1, r6",
            "mov r0, r7",
            "strh r3, [sp, 0x40]",
            "ldr r3, [sp, 0x1c]",
            "str r3, [sp, 0x44]",
            "bl rsym._ZN6vectorIhEC1ERKS0_",
            "ldr r1, [sp]",
            "add r2, sp, 0x28",
            "ldr r3, aav.0x0000deb0",
            "mov r0, r5",
            "bl sym.imp.tree_base::insert_unique_tree_iterator_base__void__tree_node_base____void__",
            "mov r4, r0",
            "mov r0, r7",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "mov r0, r6",
            "bl sym.imp.vector_unsigned_char_::vector__",
            "add r0, r4, 0x10",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "rsym._ZN6vectorIhEC1Ev": {
        "function_address": "0x0000cb44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x830]!"
        ]
    },
    "rsym._ZN6vectorIhEC1ERKS0_": {
        "function_address": "0x0000c49c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xca0]!"
        ]
    },
    "fcn.0000dc84": {
        "function_address": "0x0000dc84",
        "instructions": [
            "ldr r3, [r0, 0x48]",
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, lr}",
            "add sb, r0, 0x40",
            "add r6, sp, 8",
            "add r7, r0, 0x44",
            "mov r4, r0",
            "mov r8, r1",
            "str r3, [r6, -4]!",
            "ldr r5, [sp, 4]",
            "cmp r5, r7",
            "beq 0xdcfc",
            "ldr r3, [r5, 0x28]",
            "mov r0, r6",
            "ldr r3, [r3]",
            "cmp r8, r3",
            "bne 0xdcf4",
            "bl sym.imp.tree_iterator_base::incr__",
            "ldr r0, [r5, 0x28]",
            "bl sym.imp.free",
            "mov r0, sb",
            "mov r1, r5",
            "ldr r2, aav.0x0000d9fc",
            "str r5, [sp]",
            "bl sym.imp.tree_base::erase_tree_iterator_base__void____tree_node_base__",
            "ldr r3, [r4, 0x20]",
            "sub r3, r3, 1",
            "str r3, [r4, 0x20]",
            "b 0xdca4",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0xdca4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "fcn.00010330": {
        "function_address": "0x00010330",
        "instructions": [
            "ldr r3, aav.0x0001b298",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl fcn.00010310",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.00012124": {
        "function_address": "0x00012124",
        "instructions": [
            "ldr r3, aav.0x0001b118",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl sym.imp.AHolder::AHolder__",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.AHolder::AHolder__": {
        "function_address": "0x0000c7f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa68]!"
        ]
    },
    "fcn.00012160": {
        "function_address": "0x00012160",
        "instructions": [
            "ldr r3, aav.0x0001bbd0",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0]",
            "bl fcn.00012124",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.00012224": {
        "function_address": "0x00012224",
        "instructions": [
            "ldm r0, {r1, r2}",
            "b sym.imp.vector_base::erase_raw_char__char_"
        ]
    },
    "fcn.00012248": {
        "function_address": "0x00012248",
        "instructions": [
            "ldr r3, aav.0x0001bba8",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x10",
            "bl fcn.0001222c",
            "add r0, r4, 8",
            "bl fcn.0001222c",
            "ldr r3, aav.0x0001bb58",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.00012300": {
        "function_address": "0x00012300",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r1",
            "ldr r3, [r1], 4",
            "mov r4, r0",
            "str r3, [r0], 4",
            "bl fcn.0000de78",
            "add r1, r5, 0x14",
            "add r0, r4, 0x14",
            "bl fcn.0000e884",
            "add r0, r4, 0x18",
            "add r1, r5, 0x18",
            "bl fcn.0000e884",
            "mov r0, r4",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.000124ac": {
        "function_address": "0x000124ac",
        "instructions": [
            "push {r0, r1, r2, r3, r4, lr}",
            "mov r4, r0",
            "mov r0, sp",
            "bl fcn.0000e850",
            "mov r0, r4",
            "mov r2, 0",
            "mov r1, sp",
            "str r2, [r0], 4",
            "bl fcn.0000de94",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, pc}"
        ]
    },
    "fcn.00014664": {
        "function_address": "0x00014664",
        "instructions": [
            "ldr r3, [r1, 8]",
            "push {r0, r1, r4, r5, r6, lr}",
            "cmp r3, 0",
            "mov r4, r1",
            "ldr ip, [r1, 0x14]",
            "ldrne r2, [r1, 4]",
            "strne r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "ldrb r3, [r1, 0x1a]",
            "cmp r3, 0",
            "ldreq r2, [r1, 0x10]",
            "ldreq r3, [r1, 0xc]",
            "streq r2, [r3, 0x10]",
            "ldreq r2, [r1, 0x10]",
            "streq r3, [r2, 0xc]",
            "ldr r3, [0x0001472c]",
            "ldr r0, [r3]",
            "add r1, r0, 0x68",
            "ldr r2, [r0, 0x68]",
            "mov r3, r1",
            "bic r2, r2, 3",
            "cmp r2, 0",
            "beq 0x146e8",
            "ldr r6, [r0, 0x78]",
            "ldr lr, [r2, 4]",
            "ldr r5, [r2, 8]",
            "ldr r6, [r2, r6]",
            "cmp r6, ip",
            "movhs r3, r2",
            "movlo r2, r5",
            "movhs r2, lr",
            "b 0x146bc",
            "cmp r3, r1",
            "beq 0x14700",
            "ldr r2, [r0, 0x78]",
            "ldr r2, [r3, r2]",
            "cmp ip, r2",
            "movlo r3, r1",
            "cmp r3, r1",
            "beq 0x14714",
            "add r1, sp, 8",
            "str r3, [r1, -4]!",
            "bl sym.imp.AMap::remove_AMapIterator_",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr r3, [r3, 4]",
            "blx r3",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.AMap::remove_AMapIterator_": {
        "function_address": "0x0000c934",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x990]!"
        ]
    },
    "fcn.000125f8": {
        "function_address": "0x000125f8",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r6, r1",
            "mov r1, 0x5b",
            "mov r5, r0",
            "bl sym.imp.operator___ostream__char_",
            "ldr r4, [r6]",
            "ldr r3, [r6, 4]",
            "cmp r4, r3",
            "beq 0x1268c",
            "ldr r3, [r6]",
            "cmp r4, r3",
            "beq 0x12634",
            "mov r0, r5",
            "ldr r1, [0x000126a4]",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, 0x3c",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_",
            "mov r1, r4",
            "mov r7, r0",
            "add r0, sp, 4",
            "bl sym.imp.IPAddr::str___const",
            "add r1, sp, 4",
            "mov r0, r7",
            "bl sym.imp.operator___ostream__string_const_",
            "mov r7, r0",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldr r1, aav.0x0001ab38",
            "mov r0, r7",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, r4, 4",
            "bl sym.imp.operator___ostream__IPAddr6_const_",
            "mov r1, 0x3e",
            "bl sym.imp.operator___ostream__char_",
            "add r4, r4, 0x14",
            "b 0x12610",
            "mov r0, r5",
            "mov r1, 0x5d",
            "bl sym.imp.operator___ostream__char_",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00012580": {
        "function_address": "0x00012580",
        "instructions": [
            "cmp r2, r3",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r1",
            "mov r5, r2",
            "beq 0x125ec",
            "rsb r3, r2, r3",
            "ldr r8, [0x000125f4]",
            "add r5, r5, 4",
            "mov r7, 0",
            "asr r3, r3, 2",
            "mul r8, r8, r3",
            "mov r3, 0x14",
            "mov r2, r8",
            "bl sym.imp.vector_base::insert_raw_char__unsigned_int__unsigned_int_",
            "add r4, r0, 4",
            "mov r6, r0",
            "cmp r7, r8",
            "beq 0x125ec",
            "ldr r3, [r5, -4]",
            "mov r0, r4",
            "mov r1, r5",
            "add r7, r7, 1",
            "add r4, r4, 0x14",
            "add r5, r5, 0x14",
            "str r3, [r4, -0x18]",
            "bl fcn.0000de94",
            "b 0x125c0",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00012874": {
        "function_address": "0x00012874",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "mov r5, r1",
            "mov r4, r2",
            "bl fcn.00012224",
            "mov r0, r6",
            "ldr r1, [r6]",
            "mov r2, r5",
            "mov r3, r4",
            "pop {r4, r5, r6, lr}",
            "b fcn.00012580"
        ]
    },
    "fcn.00014410": {
        "function_address": "0x00014410",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r3, 2",
            "mov r0, r1",
            "strh r3, [sp]",
            "lsl r3, r2, 8",
            "orr r2, r3, r2, lsr 8",
            "mov r1, sp",
            "strh r2, [sp, 2]",
            "mov r2, 0x10",
            "mov r4, 0",
            "str r4, [sp, 4]",
            "bl sym.imp.bind",
            "cmp r0, r4",
            "movge r0, 1",
            "bge 0x14480",
            "ldr r1, str.bind_socket:",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r1, r0",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x0000cdcc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x680]!"
        ]
    },
    "fcn.000132a8": {
        "function_address": "0x000132a8",
        "instructions": [
            "ldr r3, aav.0x0001ad60",
            "push {r4, lr}",
            "mov r4, r0",
            "str r3, [r0], 0x44",
            "bl fcn.0001251c",
            "add r0, r4, 0x30",
            "bl sym.imp.secmap_node::unlink__",
            "add r0, r4, 0x2c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r4, 0x28",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "ldr r3, aav.0x0001bb58",
            "mov r0, r4",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.secmap_node::unlink__": {
        "function_address": "0x0000cbec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x7c0]!"
        ]
    },
    "fcn.0001253c": {
        "function_address": "0x0001253c",
        "instructions": [
            "cmp r1, r0",
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r1]",
            "cmp r3, r1",
            "beq 0x12564",
            "mov r0, r1",
            "bl fcn.0001251c",
            "ldr r3, [r5, 4]",
            "str r5, [r4]",
            "str r3, [r4, 4]",
            "ldr r3, [r5, 4]",
            "str r4, [r3]",
            "str r4, [r5, 4]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.ios::setf_unsigned_int__unsigned_int_": {
        "function_address": "0x0000c46c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcc0]!"
        ]
    },
    "fcn.00016a38": {
        "function_address": "0x00016a38",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r1",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "bl fcn.0000e0f0",
            "mov r1, r4",
            "add r0, sp, 8",
            "bl sym.imp.string::string_string_const_",
            "ldr r3, [sp, 8]",
            "ldr r1, [r3], 4",
            "cmp r1, r3",
            "beq 0x16ac0",
            "rsb r1, r3, r1",
            "cmp r1, 0xff",
            "bhi 0x16ac0",
            "sub r1, r1, 1",
            "ldrb r3, [r3, r1]",
            "cmp r3, 0x2e",
            "bne 0x16a90",
            "add r0, sp, 8",
            "mov r2, 0",
            "bl sym.imp.string::resize_unsigned_int__char_",
            "add r0, sp, 8",
            "mov r1, 0x2e",
            "mov r2, 0",
            "bl sym.imp.string::find_char__unsigned_int__const",
            "cmn r0, 1",
            "mov r4, r0",
            "bne 0x16af4",
            "ldr r3, [sp, 8]",
            "ldr r2, [r3], 4",
            "rsb r1, r3, r2",
            "cmp r1, 0x3f",
            "bls 0x16ac8",
            "mov r4, 0",
            "b 0x16b88",
            "cmp r2, r3",
            "beq 0x16b84",
            "add r0, sp, 0xc",
            "add r1, sp, 8",
            "bl fcn.0000e7b4",
            "mov r0, r5",
            "add r1, sp, 0xc",
            "bl fcn.00016790",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x16b84",
            "cmp r0, 0x3f",
            "bhi 0x16ac0",
            "mov r2, 0",
            "mov r3, r4",
            "add r0, sp, 0xc",
            "add r1, sp, 8",
            "bl sym.imp.string::substr_unsigned_int__unsigned_int__const",
            "ldr r3, [sp, 0xc]",
            "add r2, r3, 4",
            "ldr r3, [r3]",
            "cmp r3, r2",
            "bne 0x16b30",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x16ac0",
            "add r0, sp, 4",
            "add r1, sp, 0xc",
            "bl fcn.0000e7b4",
            "add r1, sp, 4",
            "mov r0, r5",
            "bl fcn.00016790",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r2, r4, 1",
            "mvn r3, 0",
            "add r0, sp, 4",
            "add r1, sp, 8",
            "bl sym.imp.string::substr_unsigned_int__unsigned_int__const",
            "add r1, sp, 4",
            "add r0, sp, 8",
            "bl fcn.0000e884",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x16a90",
            "mov r4, 1",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.string::resize_unsigned_int__char_": {
        "function_address": "0x0000c94c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x980]!"
        ]
    },
    "sym.imp.string::find_char__unsigned_int__const": {
        "function_address": "0x0000cc88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x758]!"
        ]
    },
    "fcn.0000e7b4": {
        "function_address": "0x0000e7b4",
        "instructions": [
            "ldr r3, [r1]",
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "ldr r1, [r3]",
            "add r2, r3, 4",
            "mov r5, r0",
            "mov r4, 0",
            "rsb r1, r2, r1",
            "mov r2, 0",
            "bl sym.imp.string::string_unsigned_int__char_",
            "ldr r2, [r6]",
            "add r3, r2, 4",
            "ldr r2, [r2]",
            "rsb r2, r3, r2",
            "cmp r4, r2",
            "bhs 0xe810",
            "ldrb r0, [r3, r4]",
            "bl sym.imp.tolower",
            "ldr r3, [r5]",
            "add r3, r3, r4",
            "add r4, r4, 1",
            "strb r0, [r3, 4]",
            "b 0xe7dc",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00016790": {
        "function_address": "0x00016790",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldr r6, [r0]",
            "mov r0, 0xc",
            "mov r7, r1",
            "bl sym.imp.malloc",
            "mov r1, r7",
            "mov r4, r0",
            "add r0, r0, 8",
            "bl sym.imp.string::string_string_const_",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "b sym.imp.list_base::link_list_node_base__list_node_base_"
        ]
    },
    "sym.imp.string::substr_unsigned_int__unsigned_int__const": {
        "function_address": "0x0000c970",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x968]!"
        ]
    },
    "fcn.00013dec": {
        "function_address": "0x00013dec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r7, r0",
            "sub sp, sp, 0x18",
            "add r0, r0, 0x550",
            "add r0, r0, 4",
            "mov sl, r1",
            "mov sb, r2",
            "mov r8, r3",
            "ldr r5, [sp, 0x38]",
            "ldr r6, [sp, 0x3c]",
            "bl sym.imp.nv::Allocator::allocate__",
            "str r0, [sp, 4]",
            "ldr r0, [0x00013f18]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0x13e80",
            "ldr r1, str.local_query:_",
            "ldr r0, [0x00013f18]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [sp, 4]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, sb",
            "bl fcn.0000e758",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r8",
            "mov r4, r0",
            "add r0, sp, 8",
            "bl fcn.0000ea28",
            "add r1, sp, 8",
            "mov r0, r4",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, 0x5c",
            "bl sym.imp.malloc",
            "ldr r1, [sp, 4]",
            "mov r2, sb",
            "mov r3, r8",
            "mov r4, r0",
            "bl fcn.000103ec",
            "cmp r5, 0",
            "bne 0x13ee8",
            "mov r0, r6",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "bne 0x13ee8",
            "mov r1, sl",
            "add r0, r4, 0x44",
            "bl sym.imp.nv::message::operator_nv::message_const_",
            "mov r3, 1",
            "add r1, sp, 4",
            "strb r3, [r4, 0x38]",
            "add r0, r7, 0x580",
            "bl fcn.000145c8",
            "str r4, [r0]",
            "mov r0, r4",
            "bl fcn.0000eef0",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r1, r6",
            "add r0, sp, 8",
            "bl fcn.0000de94",
            "mov r3, 1",
            "str r5, [r4, 0x20]",
            "add r0, r4, 0x24",
            "strb r3, [r4, 0x1c]",
            "add r1, sp, 8",
            "bl fcn.0000de78",
            "ldr r3, [sp, 0x40]",
            "str r3, [r4, 0x34]",
            "b 0x13eb4"
        ]
    },
    "sym.imp.nv::Allocator::allocate__": {
        "function_address": "0x0000c580",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc08]!"
        ]
    },
    "fcn.00016b9c": {
        "function_address": "0x00016b9c",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "bl rsym._ZN9list_baseC2Ev",
            "ldr r0, [r5]",
            "rev r0, r0",
            "bl sym.imp.inet_ntoa",
            "mov r1, r0",
            "mov r0, sp",
            "bl sym.imp.string::string_char_const_",
            "ldr r1, str..in_addr.arpa",
            "mov r0, sp",
            "bl sym.imp.string::append_char_const_",
            "mov r0, r4",
            "bl fcn.0000e0f0",
            "add r0, sp, 4",
            "mov r1, sp",
            "bl sym.imp.string::string_string_const_",
            "add r0, sp, 4",
            "mov r1, 0x2e",
            "mov r2, 0",
            "bl sym.imp.string::find_char__unsigned_int__const",
            "cmn r0, 1",
            "mov r5, r0",
            "bne 0x16c38",
            "ldr r3, [r4]",
            "ldr r2, [r3]",
            "cmp r2, r3",
            "beq 0x16ca0",
            "add r0, sp, 0xc",
            "add r1, sp, 4",
            "bl fcn.0000e7b4",
            "mov r0, r4",
            "add r1, sp, 0xc",
            "bl fcn.00016790",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x16ca0",
            "mov r3, r5",
            "mov r2, 0",
            "add r0, sp, 8",
            "add r1, sp, 4",
            "bl sym.imp.string::substr_unsigned_int__unsigned_int__const",
            "add r0, sp, 0xc",
            "add r1, sp, 8",
            "bl fcn.0000e7b4",
            "add r1, sp, 0xc",
            "mov r0, r4",
            "bl fcn.00016790",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 8",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0xc",
            "add r1, sp, 4",
            "add r2, r5, 1",
            "mvn r3, 0",
            "bl sym.imp.string::substr_unsigned_int__unsigned_int__const",
            "add r0, sp, 4",
            "add r1, sp, 0xc",
            "bl fcn.0000e884",
            "add r0, sp, 0xc",
            "bl rsym._ZN6stringD1Ev",
            "b 0x16be8",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, sp",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.000123f4": {
        "function_address": "0x000123f4",
        "instructions": [
            "ldr r3, [r1, 0x28]",
            "push {r4, r5, r6, r7, r8, lr}",
            "add r7, r3, 4",
            "ldr r3, [r3]",
            "sub sp, sp, 0x20",
            "mov r4, r1",
            "mov r5, r0",
            "cmp r3, r7",
            "add r0, sp, 0x18",
            "add r1, r1, 0x14",
            "ldreq r7, [r1, 0x18]",
            "ldrne r6, [0x000124a0]",
            "addeq r7, r7, 4",
            "ldreq r6, str.regex",
            "bl sym.imp.IPAddr::str___const",
            "add r0, sp, 0x1c",
            "add r1, r4, 0x18",
            "mov r2, 0",
            "ldr r8, [sp, 0x18]",
            "bl sym.imp.IPAddr6::str_bool__const",
            "ldr r3, [sp, 0x1c]",
            "mov r2, r6",
            "ldr r1, str._s__s__s__s_ttl:_u_dis:_u_dyn:_u_:",
            "mov r0, r5",
            "add r3, r3, 4",
            "str r3, [sp, 4]",
            "ldr r3, [r4, 0x3c]",
            "add r8, r8, 4",
            "str r8, [sp]",
            "str r3, [sp, 8]",
            "ldrb r3, [r4, 0x41]",
            "str r3, [sp, 0xc]",
            "ldrb r3, [r4, 0x40]",
            "str r3, [sp, 0x10]",
            "mov r3, r7",
            "bl sym.imp.s_char_const__::_",
            "add r0, sp, 0x1c",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00014d5c": {
        "function_address": "0x00014d5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r2",
            "ldr r2, [r2, 0x28]",
            "mov r8, r3",
            "sub sp, sp, 0x44",
            "mov r6, r0",
            "mov r7, r1",
            "ldr r3, [r2], 4",
            "cmp r3, r2",
            "ldr r2, [r4, 0x2c]",
            "add r3, r2, 4",
            "ldr r2, [r2]",
            "beq 0x14da4",
            "cmp r2, r3",
            "addne r0, sp, 0x24",
            "ldrne r1, str.only_name_or_regexp_allowed",
            "bne 0x14db4",
            "b 0x14dd0",
            "cmp r2, r3",
            "bne 0x14dd0",
            "ldr r1, str.name_or_regexp_required",
            "add r0, sp, 0x24",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r6",
            "add r1, sp, 0x24",
            "bl sym.imp.nv::failedMsg_string_const_",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "b 0x150d4",
            "ldr r3, [r4, 0x14]",
            "cmp r3, 0",
            "bne 0x14df4",
            "add r0, r4, 0x18",
            "bl sym.imp.IPAddr6::empty___const",
            "cmp r0, 0",
            "addne r0, sp, 0x24",
            "ldrne r1, str.bad_address",
            "bne 0x14db4",
            "ldrb r3, [r4, 0x41]",
            "cmp r3, 0",
            "bne 0x15010",
            "add r3, r4, 0x14",
            "str r3, [sp, 0xc]",
            "ldr r3, [r4, 0x14]",
            "add r5, sp, 0x40",
            "add r1, r4, 0x18",
            "str r3, [r5, -0x1c]!",
            "add sl, r5, 4",
            "add fp, r5, 0x14",
            "add sb, r5, 0x18",
            "mov r0, sl",
            "bl fcn.0000de94",
            "add r1, r4, 0x28",
            "mov r0, fp",
            "bl sym.imp.string::string_string_const_",
            "add r1, r4, 0x2c",
            "mov r0, sb",
            "bl sym.imp.string::string_string_const_",
            "mov r1, r8",
            "ldr r0, [sp, 0xc]",
            "bl fcn.00012300",
            "add r3, r7, 0xd8",
            "ldr r7, [r7, 0xd8]",
            "mov r8, r3",
            "str r3, [sp, 0x10]",
            "bic r7, r7, 3",
            "str sb, [sp, 0x14]",
            "cmp r7, 0",
            "beq 0x14f18",
            "mov sb, r7",
            "ldr r2, [sp, 0x24]",
            "ldr r1, [sb, -0x1c]!",
            "cmp r1, r2",
            "beq 0x14e94",
            "mov r0, sb",
            "mov r1, r5",
            "bl sym.imp.IPAddr::operator__IPAddr_const__const",
            "b 0x14efc",
            "add ip, sb, 4",
            "mov r1, sl",
            "mov r2, 0x10",
            "str ip, [sp, 8]",
            "mov r0, ip",
            "bl sym.imp.memcmp",
            "ldr ip, [sp, 8]",
            "cmp r0, 0",
            "beq 0x14ec8",
            "mov r0, ip",
            "mov r1, sl",
            "bl fcn.0000dd24",
            "b 0x14efc",
            "add r2, sb, 0x14",
            "mov r1, fp",
            "str r2, [sp, 8]",
            "mov r0, r2",
            "bl fcn.0000e8b8",
            "ldr r2, [sp, 8]",
            "cmp r0, 0",
            "addne r0, sb, 0x18",
            "moveq r0, r2",
            "moveq r1, fp",
            "ldrne r1, [sp, 0x14]",
            "bl sym.imp.string::compare_string_const__const",
            "lsr r0, r0, 0x1f",
            "ldr r3, [r7, 4]",
            "cmp r0, 0",
            "ldr r2, [r7, 8]",
            "moveq r8, r7",
            "movne r7, r2",
            "moveq r7, r3",
            "b 0x14e68",
            "ldr r3, [sp, 0x10]",
            "cmp r8, r3",
            "beq 0x14fb4",
            "mov r7, r8",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [r7, -0x1c]!",
            "cmp r2, r3",
            "beq 0x14f48",
            "mov r0, r5",
            "mov r1, r7",
            "bl sym.imp.IPAddr::operator__IPAddr_const__const",
            "b 0x14fa8",
            "add sl, r7, 4",
            "add fp, r5, 4",
            "mov r2, 0x10",
            "mov r0, fp",
            "mov r1, sl",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "beq 0x14f78",
            "mov r0, fp",
            "mov r1, sl",
            "bl fcn.0000dd24",
            "b 0x14fa8",
            "add sl, r7, 0x14",
            "add fp, r5, 0x14",
            "mov r1, sl",
            "mov r0, fp",
            "bl fcn.0000e8b8",
            "cmp r0, 0",
            "addne r0, r5, 0x18",
            "addne r1, r7, 0x18",
            "moveq r0, fp",
            "moveq r1, sl",
            "bl sym.imp.string::compare_string_const__const",
            "lsr r0, r0, 0x1f",
            "cmp r0, 0",
            "subeq r8, r8, 0x30",
            "beq 0x14fb8",
            "mov r8, 0",
            "cmp r8, r4",
            "cmpne r8, 0",
            "beq 0x14ff4",
            "ldr r1, str.entry_already_exists",
            "add r0, sp, 0x20",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 0x20",
            "mov r0, r6",
            "bl sym.imp.nv::failedMsg_string_const_",
            "add r0, sp, 0x20",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r5, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r5, 0x14",
            "b 0x14dc8",
            "mov r1, r5",
            "ldr r0, [sp, 0xc]",
            "bl fcn.00012300",
            "add r0, r5, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r0, r5, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x20",
            "bl rsym._ZN9list_baseC2Ev",
            "ldr r3, [r4, 0x28]",
            "add r2, r3, 4",
            "ldr r3, [r3]",
            "cmp r3, r2",
            "beq 0x1506c",
            "add r0, sp, 0x20",
            "add r1, r4, 0x28",
            "bl fcn.00016a38",
            "cmp r0, 0",
            "bne 0x1506c",
            "ldr r1, str.bad_name",
            "add r0, sp, 0x24",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r6",
            "add r1, sp, 0x24",
            "bl sym.imp.nv::failedMsg_string_const_",
            "add r0, sp, 0x24",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x20",
            "bl fcn.0000e174",
            "b 0x150d4",
            "ldr r2, [r4, 0x2c]",
            "add r1, r2, 4",
            "ldr r3, [r2]",
            "cmp r3, r1",
            "beq 0x150c8",
            "ldr r0, str.bad_regexp",
            "add r3, sp, 0x40",
            "str r0, [r3, -0x1c]!",
            "mov r0, 0",
            "str r0, [sp]",
            "add r0, r4, 0x50",
            "ldr r2, [r2]",
            "bl sym.imp.reMake",
            "cmp r0, 0",
            "beq 0x150c8",
            "ldr r1, [sp, 0x24]",
            "add r0, sp, 0x1c",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r6",
            "add r1, sp, 0x1c",
            "bl sym.imp.nv::failedMsg_string_const_",
            "add r0, sp, 0x1c",
            "b 0x1505c",
            "mov r0, r6",
            "bl sym.imp.nv::message::message__",
            "b 0x15060",
            "mov r0, r6",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.nv::failedMsg_string_const_": {
        "function_address": "0x0000cafc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x860]!"
        ]
    },
    "sym.imp.reMake": {
        "function_address": "0x0000ca00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x908]!"
        ]
    },
    "fcn.00011ff8": {
        "function_address": "0x00011ff8",
        "instructions": [
            "push {r0, r1, r4, lr}",
            "add r3, r2, 0x30",
            "mov r4, r0",
            "ldr r2, fcn.0000fd60",
            "mov r0, sp",
            "bl sym.imp.sectree_base::insert_unique_bool____tree_node_base__tree_node_base___tree_node_base_",
            "ldr r3, [sp]",
            "mov r0, r4",
            "str r3, [r4]",
            "mov r3, 0x30",
            "str r3, [r4, 4]",
            "ldrb r3, [sp, 4]",
            "strb r3, [r4, 8]",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.sectree_base::insert_unique_bool____tree_node_base__tree_node_base___tree_node_base_": {
        "function_address": "0x0000c478",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcb8]!"
        ]
    },
    "fcn.0000fd60": {
        "function_address": "0x0000fd60",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "ldr r3, [r5, -0x1c]!",
            "ldr r2, [r4, -0x1c]!",
            "cmp r3, r2",
            "beq 0xfd8c",
            "mov r0, r5",
            "mov r1, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "b sym.imp.IPAddr::operator__IPAddr_const__const",
            "add r7, r5, 4",
            "add r6, r4, 4",
            "mov r2, 0x10",
            "mov r0, r7",
            "mov r1, r6",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "beq 0xfdbc",
            "mov r0, r7",
            "mov r1, r6",
            "pop {r3, r4, r5, r6, r7, lr}",
            "b fcn.0000dd24",
            "add r7, r5, 0x14",
            "add r6, r4, 0x14",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.0000e8b8",
            "cmp r0, 0",
            "addne r0, r5, 0x18",
            "addne r1, r4, 0x18",
            "moveq r0, r7",
            "moveq r1, r6",
            "bl sym.imp.string::compare_string_const__const",
            "lsr r0, r0, 0x1f",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00016cc0": {
        "function_address": "0x00016cc0",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "ldr r7, [r2]",
            "bl fcn.00014c7c",
            "cmp r0, 0",
            "beq 0x16d24",
            "ldr r1, [r0, 0x10]",
            "cmp r1, 0",
            "beq 0x16d24",
            "ldrb r3, [r1, 0x1a]",
            "cmp r3, 0",
            "bne 0x16d04",
            "ldrh r3, [r1, 0x18]",
            "cmp r3, 1",
            "bne 0x16d1c",
            "ldr r3, [r1, 0x20]",
            "cmp r3, r7",
            "bne 0x16d1c",
            "mov r0, r4",
            "bl fcn.00014664",
            "b 0x16d24",
            "ldr r1, [r1, 8]",
            "b 0x16ce4",
            "ldr r3, [r5]",
            "add r1, sp, 4",
            "mov r0, sp",
            "str r3, [sp, 4]",
            "bl fcn.00016b9c",
            "mov r0, r4",
            "mov r1, sp",
            "mov r2, r6",
            "bl fcn.00017bb4",
            "mov r0, sp",
            "bl fcn.0000e174",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00014c7c": {
        "function_address": "0x00014c7c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "mov r0, r1",
            "mov sb, r1",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 0",
            "beq 0x14d48",
            "ldr r8, [sb]",
            "ldr r7, [r6, 8]",
            "ldr r8, [r8, 4]",
            "cmp r7, 0",
            "bne 0x14cb4",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r5, [r7, 4]",
            "add sl, r7, 4",
            "add fp, r8, 8",
            "bic r5, r5, 3",
            "mov r4, sl",
            "cmp r5, 0",
            "beq 0x14cfc",
            "ldr r0, [r7, 0x14]",
            "mov r1, fp",
            "add r0, r5, r0",
            "bl fcn.0000dc34",
            "ldr r3, [r5, 4]",
            "ldr r2, [r5, 8]",
            "cmp r0, 0",
            "moveq r4, r5",
            "movne r5, r2",
            "moveq r5, r3",
            "b 0x14cc8",
            "cmp r4, sl",
            "bne 0x14d0c",
            "mov r4, sl",
            "b 0x14d24",
            "ldr r1, [r7, 0x14]",
            "mov r0, fp",
            "add r1, r4, r1",
            "bl fcn.0000dc34",
            "cmp r0, 0",
            "bne 0x14d04",
            "ldr r3, [r6, 8]",
            "add r3, r3, 4",
            "cmp r4, r3",
            "beq 0x14cac",
            "ldr r3, [sb]",
            "ldr r6, [r4, 0x10]",
            "ldr r3, [r3]",
            "cmp r8, r3",
            "bne 0x14c9c",
            "ldrb r3, [r6, 0xc]",
            "cmp r3, 0",
            "bne 0x14cac",
            "mov r0, r6",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00017bb4": {
        "function_address": "0x00017bb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r6, r2",
            "bl fcn.00014c7c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "ldr r4, [r0, 0x10]",
            "cmp r4, 0",
            "beq 0x17c1c",
            "ldrb r3, [r4, 0x1a]",
            "cmp r3, 0",
            "bne 0x17bf0",
            "ldrh r3, [r4, 0x18]",
            "cmp r3, 0xc",
            "bne 0x17c14",
            "add r0, r4, 0x20",
            "mov r1, r6",
            "bl fcn.00017ae4",
            "cmp r0, 0",
            "beq 0x17c14",
            "mov r0, r5",
            "mov r1, r4",
            "pop {r4, r5, r6, lr}",
            "b fcn.00014664",
            "ldr r4, [r4, 8]",
            "b 0x17bd0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.000168a8": {
        "function_address": "0x000168a8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r6, r1",
            "mov r0, sp",
            "mov r1, r2",
            "mov r7, r2",
            "bl fcn.0000de94",
            "mov r0, r5",
            "mov r1, r6",
            "bl fcn.00014c7c",
            "cmp r0, 0",
            "beq 0x16930",
            "ldr r4, [r0, 0x10]",
            "cmp r4, 0",
            "beq 0x16930",
            "ldrb r3, [r4, 0x1a]",
            "cmp r3, 0",
            "bne 0x16900",
            "ldrh r3, [r4, 0x18]",
            "cmp r3, 1",
            "bne 0x16928",
            "add r0, r4, 0x20",
            "mov r1, sp",
            "mov r2, 0x10",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x16928",
            "mov r0, r5",
            "mov r1, r4",
            "bl fcn.00014664",
            "b 0x16930",
            "ldr r4, [r4, 8]",
            "b 0x168e0",
            "mov r1, r7",
            "mov r0, sp",
            "bl fcn.000167cc",
            "mov r0, r5",
            "mov r1, sp",
            "mov r2, r6",
            "bl fcn.00017bb4",
            "mov r0, sp",
            "bl fcn.0000e174",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.000167cc": {
        "function_address": "0x000167cc",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r5, 0xf",
            "ldrb r2, [r6, r5]",
            "mov r0, sp",
            "ldr r1, [0x0001689c]",
            "and r2, r2, 0xf",
            "bl sym.imp.sprintf",
            "mov r1, sp",
            "add r0, sp, 4",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 4",
            "mov r0, r4",
            "bl fcn.00016790",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldrb r2, [r6, r5]",
            "ldr r1, [0x0001689c]",
            "mov r0, sp",
            "lsr r2, r2, 4",
            "bl sym.imp.sprintf",
            "mov r1, sp",
            "add r0, sp, 4",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl fcn.00016790",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "subs r5, r5, 1",
            "bhs 0x167e0",
            "add r0, sp, 4",
            "ldr r1, [0x000168a0]",
            "bl sym.imp.string::string_char_const_",
            "add r1, sp, 4",
            "mov r0, r4",
            "bl fcn.00016790",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 4",
            "ldr r1, [0x000168a4]",
            "bl sym.imp.string::string_char_const_",
            "mov r0, r4",
            "add r1, sp, 4",
            "bl fcn.00016790",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00016e60": {
        "function_address": "0x00016e60",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x30",
            "mov r5, r0",
            "add r0, sp, 8",
            "mov r8, r2",
            "mov r7, r3",
            "mov r6, r1",
            "bl fcn.0000e6c8",
            "ldr r3, aav.0x0001aad0",
            "mov r1, r6",
            "add r0, sp, 0xc",
            "mov r4, 1",
            "str r3, [sp, 8]",
            "bl fcn.0000e130",
            "ldr r3, [r8]",
            "mov r2, r4",
            "add r1, sp, 8",
            "mov r0, r5",
            "strh r4, [sp, 0x10]",
            "str r3, [sp, 0x18]",
            "mov r3, 0",
            "strh r4, [sp, 0x12]",
            "str r7, [sp, 0x14]",
            "bl fcn.000149f4",
            "add r0, sp, 0x1c",
            "bl fcn.0000e6e8",
            "ldr r3, [r8]",
            "add r1, sp, 4",
            "mov r0, sp",
            "str r3, [sp, 4]",
            "bl fcn.00016b9c",
            "add r0, sp, 0x20",
            "bl fcn.0000e0f0",
            "ldr r2, [sp]",
            "ldr r3, [sp, 0x20]",
            "mov r0, sp",
            "str r2, [sp, 0x20]",
            "str r3, [sp]",
            "bl fcn.0000e174",
            "mov r1, r6",
            "add r0, sp, 0x2c",
            "mov r3, 0xc",
            "strh r4, [sp, 0x26]",
            "strh r3, [sp, 0x24]",
            "str r7, [sp, 0x28]",
            "bl fcn.0000e130",
            "add r1, sp, 0x1c",
            "mov r2, r4",
            "mov r3, 0",
            "mov r0, r5",
            "bl fcn.000149f4",
            "add r0, sp, 0x1c",
            "bl fcn.0000e530",
            "add r0, sp, 8",
            "bl fcn.0000e650",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.0000e6e8": {
        "function_address": "0x0000e6e8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl fcn.0000e6c8",
            "ldr r2, aav.0x0001a9e0",
            "mov r0, r4",
            "str r2, [r0], 0x10",
            "bl rsym._ZN9list_baseC2Ev",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.0001695c": {
        "function_address": "0x0001695c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x38",
            "mov r5, r0",
            "mov r6, r1",
            "add r0, sp, 0x18",
            "mov r8, r2",
            "mov r7, r3",
            "bl fcn.0000e85c",
            "mov r1, r6",
            "add r0, sp, 0x1c",
            "bl fcn.0000e130",
            "mov r4, 1",
            "mov r1, r8",
            "add r0, sp, 0x28",
            "mov r3, 0x1c",
            "strh r4, [sp, 0x22]",
            "strh r3, [sp, 0x20]",
            "str r7, [sp, 0x24]",
            "bl fcn.0000de78",
            "mov r2, r4",
            "mov r3, 0",
            "add r1, sp, 0x18",
            "mov r0, r5",
            "bl fcn.000149f4",
            "add r0, sp, 4",
            "bl fcn.0000e6e8",
            "mov r1, r8",
            "mov r0, sp",
            "bl fcn.000167cc",
            "add r0, sp, 8",
            "bl fcn.0000e0f0",
            "ldr r2, [sp]",
            "ldr r3, [sp, 8]",
            "mov r0, sp",
            "str r2, [sp, 8]",
            "str r3, [sp]",
            "bl fcn.0000e174",
            "mov r1, r6",
            "add r0, sp, 0x14",
            "mov r3, 0xc",
            "strh r4, [sp, 0xe]",
            "strh r3, [sp, 0xc]",
            "str r7, [sp, 0x10]",
            "bl fcn.0000e130",
            "add r1, sp, 4",
            "mov r2, r4",
            "mov r3, 0",
            "mov r0, r5",
            "bl fcn.000149f4",
            "add r0, sp, 4",
            "bl fcn.0000e530",
            "add r0, sp, 0x18",
            "bl fcn.0000e68c",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.string::string_unsigned_int__char_": {
        "function_address": "0x0000ca78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8b8]!"
        ]
    },
    "sym.imp.tolower": {
        "function_address": "0x0000c808",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa58]!"
        ]
    },
    "fcn.00013218": {
        "function_address": "0x00013218",
        "instructions": [
            "push {r0, r1, r4, lr}",
            "mov r4, r0",
            "ldrh r1, [r4, 0x18]",
            "add r0, sp, 4",
            "bl fcn.0000ea28",
            "add r1, sp, 4",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "add r0, sp, 4",
            "bl rsym._ZN6stringD1Ev",
            "ldrb r3, [r4, 0x1a]",
            "cmp r3, 0",
            "beq 0x13268",
            "ldr r1, aav.0x0001ada8",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [r4, 0x1c]",
            "b 0x1327c",
            "ldr r3, [0x000132a0]",
            "ldr r1, [r4, 0x1c]",
            "ldr r0, obj.cout",
            "ldr r3, [r3]",
            "rsb r1, r3, r1",
            "bl sym.imp.operator___ostream__int_",
            "ldr r1, aav.0x0001acac",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "fcn.000128a0": {
        "function_address": "0x000128a0",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "ldr r5, [r0, 0x64]",
            "add r4, sp, 8",
            "add r6, r5, 0x10",
            "mov r0, r6",
            "bl fcn.00012224",
            "ldr r3, [0x00012984]",
            "ldr r3, [r3]",
            "add r8, r3, 0x68",
            "ldr r2, [r3, 0x6c]",
            "str r2, [r4, -8]!",
            "ldr r3, [sp]",
            "cmp r3, r8",
            "beq 0x128f8",
            "ldr r1, [r3, 0x10]",
            "mov r0, r6",
            "add r1, r1, 8",
            "bl fcn.0001219c",
            "mov r0, sp",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0x128d0",
            "ldr r1, str.udpate_servers",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, r5, 8",
            "bl fcn.000125f8",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov r1, r6",
            "bl fcn.000125f8",
            "bl sym.imp.endl_ostream_",
            "mov r0, sp",
            "bl rsym._ZN11vector_baseC2Ev",
            "ldr r1, [sp]",
            "ldr r2, [r5, 8]",
            "mov r0, sp",
            "ldr r3, [r5, 0xc]",
            "bl fcn.00012580",
            "ldr r1, [sp, 4]",
            "ldr r2, [r5, 0x10]",
            "mov r0, sp",
            "ldr r3, [r5, 0x14]",
            "bl fcn.00012580",
            "ldr r3, [0x00012994]",
            "ldm sp, {r1, r2}",
            "ldr r0, [r3]",
            "add r0, r0, 0x570",
            "add r0, r0, 8",
            "bl fcn.00012874",
            "mov r0, r7",
            "mov r1, 0",
            "bl sym.imp.AHolder::changed_bool_",
            "mov r0, sp",
            "bl fcn.0001222c",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.AHolder::changed_bool_": {
        "function_address": "0x0000c664",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb70]!"
        ]
    },
    "sym.imp.string::string_char_const__unsigned_int_": {
        "function_address": "0x0000c790",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xaa8]!"
        ]
    },
    "sym.imp.vector_unsigned_char_::vector_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0000c610",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xba8]!"
        ]
    },
    "fcn.00010544": {
        "function_address": "0x00010544",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldm r0, {r0, r6}",
            "mov r5, r1",
            "rsb r6, r0, r6",
            "bl sym.imp.sizeOfAllocatedMem_void_",
            "asr r6, r6, 4",
            "cmp r6, r0, lsr 4",
            "bne 0x10590",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "mov r0, r4",
            "mov r2, 0x10",
            "asr r3, r3, 4",
            "lsls r3, r3, 1",
            "movne r1, r3",
            "moveq r1, 1",
            "lsl r1, r1, 4",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl fcn.0000de94",
            "ldr r3, [r4, 4]",
            "add r3, r3, 0x10",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.nv::message::operator_nv::message_const__const": {
        "function_address": "0x0000ca3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x8e0]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::u32_id_::type_nv::message::operator___nv::u32_id__nv::u32_id_": {
        "function_address": "0x0000cb14",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x850]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::string_id_::type_nv::message::operator___nv::string_id__nv::string_id_": {
        "function_address": "0x0000c55c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc20]!"
        ]
    },
    "sym.imp.bool_nv::message::has_nv::be32_id__nv::be32_id__const": {
        "function_address": "0x0000c4a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc98]!"
        ]
    },
    "sym.imp.bool_nv::message::has_nv::addr6_id__nv::addr6_id__const": {
        "function_address": "0x0000c9f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x910]!"
        ]
    },
    "sym.imp.void_nv::message::insert_nv::be32_id__nv::be32_id__nv::IdTraits_nv::be32_id_::set_type_": {
        "function_address": "0x0000c868",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa18]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::addr6_id_::type_nv::message::operator___nv::addr6_id__nv::addr6_id_": {
        "function_address": "0x0000cdf0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x668]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::string_array_id_::type_nv::message::operator___nv::string_array_id__nv::string_array_id_": {
        "function_address": "0x0000c454",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xcd0]!"
        ]
    },
    "sym.imp.void_nv::message::insert_nv::be32_array_id__nv::be32_array_id__nv::IdTraits_nv::be32_array_id_::set_type_": {
        "function_address": "0x0000c844",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xa30]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::addr6_array_id_::type_nv::message::operator___nv::addr6_array_id__nv::addr6_array_id_": {
        "function_address": "0x0000cad8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x878]!"
        ]
    },
    "sym.imp.nv::IdTraits_nv::u32_array_id_::type_nv::message::operator___nv::u32_array_id__nv::u32_array_id_": {
        "function_address": "0x0000caa8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x898]!"
        ]
    },
    "sym.imp.string::assign_char_const_": {
        "function_address": "0x0000c40c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xd00]!"
        ]
    },
    "sym.imp.connect": {
        "function_address": "0x0000cdb4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x690]!"
        ]
    },
    "sym.imp.vector_unsigned_char_::resize_unsigned_int__unsigned_char_const_": {
        "function_address": "0x0000c6a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xb48]!"
        ]
    },
    "fcn.00012298": {
        "function_address": "0x00012298",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "mov r0, r1",
            "mov r1, 1",
            "bl sym.imp.bool_nv::message::has_nv::be32_id__nv::be32_id__const",
            "cmp r0, 0",
            "beq 0x122c8",
            "mov r0, r4",
            "mov r1, 1",
            "bl sym.imp.nv::IdTraits_nv::be32_id_::set_type_nv::message::get_nv::be32_id__nv::be32_id__const",
            "str r0, [r5]",
            "mov r0, r4",
            "mov r1, 2",
            "bl sym.imp.bool_nv::message::has_nv::addr6_id__nv::addr6_id__const",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "mov r0, r4",
            "mov r1, 2",
            "bl sym.imp.nv::IdTraits_nv::addr6_id_::set_type_nv::message::get_nv::addr6_id__nv::addr6_id__const",
            "mov r1, r0",
            "add r0, r5, 4",
            "pop {r3, r4, r5, lr}",
            "b fcn.0000de78"
        ]
    },
    "fcn.00011fb0": {
        "function_address": "0x00011fb0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldm r0, {r6, r7}",
            "mov r5, r6",
            "cmp r5, r7",
            "beq 0x11fd8",
            "mov r0, r5",
            "add r5, r5, 8",
            "bl rsym._ZN6vectorIhED2Ev",
            "b 0x11fc0",
            "mov r1, r6",
            "mov r2, r5",
            "mov r0, r4",
            "bl sym.imp.vector_base::erase_raw_char__char_",
            "mov r0, r4",
            "bl sym.imp.vector_base::vector_base__",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "rsym._ZN6vectorIhED2Ev": {
        "function_address": "0x0000ccb8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x738]!"
        ]
    },
    "fcn.00012038": {
        "function_address": "0x00012038",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r3, [r4], 4",
            "mov r6, r0",
            "mov r5, r1",
            "cmp r3, 0",
            "bne 0x12088",
            "mov r0, r4",
            "bl sym.imp.IPAddr6::empty___const",
            "cmp r0, 0",
            "bne 0x12088",
            "mov r0, r4",
            "bl fcn.0000de5c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "mov r0, r5",
            "mov r2, r4",
            "mov r1, 2",
            "pop {r4, r5, r6, lr}",
            "b sym.imp.void_nv::message::insert_nv::addr6_id__nv::addr6_id__nv::IdTraits_nv::addr6_id_::set_type_",
            "mov r0, r5",
            "mov r1, 1",
            "ldr r2, [r6]",
            "bl sym.imp.void_nv::message::insert_nv::be32_id__nv::be32_id__nv::IdTraits_nv::be32_id_::set_type_",
            "b 0x12064"
        ]
    },
    "fcn.00019ed8": {
        "function_address": "0x00019ed8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "add r0, sp, 0x10",
            "mov r7, r2",
            "mov r8, r1",
            "bl rsym._ZN11vector_baseC2Ev",
            "ldm r4, {r1, r2}",
            "sub r1, r2, r1",
            "ldr r6, [0x00019fa8]",
            "add r0, sp, 0x10",
            "mov r2, 8",
            "mov r5, 0",
            "asr r1, r1, 2",
            "mul r1, r6, r1",
            "lsl r1, r1, 3",
            "bl sym.imp.vector_base::reserve_raw_unsigned_int__unsigned_int_",
            "ldm r4, {r2, r3}",
            "sub r3, r3, r2",
            "asr r3, r3, 2",
            "mul r3, r6, r3",
            "cmp r5, r3",
            "bhs 0x19f88",
            "add r0, sp, 4",
            "bl sym.imp.nv::message::message__",
            "ldr r3, [r4]",
            "mov r0, 0x14",
            "add r1, sp, 4",
            "mla r0, r0, r5, r3",
            "bl fcn.00012038",
            "add r0, sp, 8",
            "bl rsym._ZN6vectorIhEC2Ev",
            "add r0, sp, 4",
            "add r1, sp, 8",
            "add r5, r5, 1",
            "bl sym.imp.nv::message::flatten_vector_unsigned_char___const",
            "add r1, sp, 8",
            "add r0, sp, 0x10",
            "bl method vector<nv::flat_message>::push_back(nv::flat_message&&)",
            "add r0, sp, 8",
            "bl rsym._ZN6vectorIhED2Ev",
            "add r0, sp, 4",
            "bl rsym._ZN2nv7messageD1Ev",
            "b 0x19f1c",
            "mov r0, r8",
            "mov r1, r7",
            "add r2, sp, 0x10",
            "bl sym.imp.void_nv::message::insert_nv::message_array_id__nv::message_array_id__nv::IdTraits_nv::message_array_id_::set_type_",
            "add r0, sp, 0x10",
            "bl fcn.00011fb0",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "rsym._ZN6vectorIhEC2Ev": {
        "function_address": "0x0000cd78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x6b8]!"
        ]
    },
    "sym.imp.nv::message::flatten_vector_unsigned_char___const": {
        "function_address": "0x0000c4b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0xc90]!"
        ]
    },
    "sym.imp.void_nv::message::insert_nv::message_array_id__nv::message_array_id__nv::IdTraits_nv::message_array_id_::set_type_": {
        "function_address": "0x0000c9e8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x17000",
            "ldr pc, [ip, 0x918]!"
        ]
    },
    "fcn.0000f408": {
        "function_address": "0x0000f408",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "mov r7, r2",
            "ldr r2, [r0, 0x20]",
            "str r3, [sp, 4]",
            "mov r6, r0",
            "ldr r3, [0x0000fb04]",
            "mov r4, r1",
            "ldr sb, [sp, 0x60]",
            "ldr r3, [r3]",
            "ldr r3, [r3, 0x64]",
            "ldr r3, [r3, 0x30]",
            "cmp r2, r3",
            "blo 0xf474",
            "add r0, sp, 0x18",
            "bl fcn.0001159c",
            "add r1, sp, 0x18",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, [r6, 0x20]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, str._requests_active__ignoring",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "b 0xf558",
            "mov r0, 0x2c",
            "add fp, r6, 0x44",
            "bl sym.imp.malloc",
            "mov r5, r0",
            "bl fcn.0000e710",
            "mov r1, r7",
            "ldr r2, [sp, 4]",
            "mov r0, r5",
            "mov r7, fp",
            "bl fcn.00018028",
            "ldrh r3, [r5]",
            "ldr sl, [r6, 0x44]",
            "bic sl, sl, 3",
            "lsl r2, r3, 8",
            "orr r3, r2, r3, lsr 8",
            "strh r3, [r4, 0x1a]",
            "mov r8, r0",
            "cmp sl, 0",
            "beq 0xf4ec",
            "ldr r0, [r6, 0x54]",
            "mov r1, r4",
            "add r0, sl, r0",
            "bl fcn.0000dd38",
            "ldr r2, [sl, 4]",
            "ldr r1, [sl, 8]",
            "cmp r0, 0",
            "moveq r7, sl",
            "movne sl, r1",
            "moveq sl, r2",
            "b 0xf4b8",
            "cmp r7, fp",
            "bne 0xf4fc",
            "mov r7, fp",
            "b 0xf514",
            "ldr r1, [r6, 0x54]",
            "mov r0, r4",
            "add r1, r7, r1",
            "bl fcn.0000dd38",
            "cmp r0, 0",
            "bne 0xf4f4",
            "cmp r7, fp",
            "beq 0xf560",
            "add r0, sp, 0x18",
            "mov r1, r4",
            "bl fcn.0001159c",
            "add r1, sp, 0x18",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.query_already_in_progress__ignoring",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "bl fcn.0000e390",
            "mov r0, r5",
            "bl sym.imp.free",
            "mov r0, sb",
            "b 0xf734",
            "cmp r8, 0",
            "bne 0xf628",
            "add r0, sp, 0x18",
            "mov r1, r4",
            "bl fcn.0001159c",
            "add r1, sp, 0x18",
            "ldr r0, obj.cout",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.packet_parse_failed",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "ldr r1, obj.cout",
            "mov r0, r5",
            "bl fcn.000135d8",
            "mov r0, 0x2c",
            "bl sym.imp.malloc",
            "mov r7, r0",
            "bl fcn.0000e710",
            "ldrb r3, [r7, 2]",
            "ldrb r2, [r7, 3]",
            "bfi r3, r8, 0, 1",
            "ldrb r1, [r5, 2]",
            "bfi r3, r8, 1, 1",
            "bfi r2, r8, 0, 4",
            "bfi r3, r8, 2, 1",
            "ubfx r0, r1, 3, 4",
            "bfi r3, r8, 3, 4",
            "bfi r2, r8, 4, 3",
            "and r2, r2, 0x70",
            "mvn r3, r3, lsl 25",
            "orr r2, r2, 0x81",
            "mvn r3, r3, lsr 25",
            "bfi r3, r0, 3, 4",
            "bfi r3, r1, 0, 1",
            "strb r2, [r7, 3]",
            "strb r3, [r7, 2]",
            "mov r1, r4",
            "mov r2, r7",
            "mov r0, r6",
            "bl fcn.00013970",
            "mov r0, r5",
            "bl fcn.0000e390",
            "mov r0, r5",
            "bl sym.imp.free",
            "mov r0, r7",
            "bl fcn.0000e390",
            "mov r0, r7",
            "b 0xf554",
            "add r0, sp, 0x10",
            "mov r1, r4",
            "bl fcn.0001159c",
            "add r1, sp, 0x10",
            "ldr r0, obj.cout",
            "mov r8, 0",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, str.new_request",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [sp, 4]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "mov fp, r0",
            "add r0, sp, 0x14",
            "bl sym.imp.string::string__",
            "ldr r3, [r5, 0x18]",
            "ldr sl, [r3]",
            "ldr r3, [r5, 0x18]",
            "cmp sl, r3",
            "beq 0xf784",
            "cmp r8, 2",
            "beq 0xf784",
            "b 0xf740",
            "cmp r8, r7",
            "bne 0xf8a4",
            "mov r8, r7",
            "cmp r8, r7",
            "bne 0xf6f4",
            "ldrb r3, [r4]",
            "add r1, r4, 8",
            "add r0, sp, 0x20",
            "str r8, [sp, 0x14]",
            "strb r3, [sp, 0x18]",
            "ldrb r3, [r4, 1]",
            "strb r3, [sp, 0x19]",
            "ldr r3, [r4, 4]",
            "str r3, [sp, 0x1c]",
            "bl fcn.0000de94",
            "ldrh r3, [r4, 0x18]",
            "add r0, r6, 0x40",
            "ldr r1, [sp, 0x14]",
            "add r2, sp, 0x18",
            "strh r3, [sp, 0x30]",
            "ldrh r3, [r4, 0x1a]",
            "strh r3, [sp, 0x32]",
            "mov r3, 0",
            "str r3, [sp, 0x34]",
            "ldr r3, aav.0x00016440",
            "bl sym.imp.tree_base::insert_unique_tree_iterator_base__void__tree_node_base____void__",
            "mov r8, r0",
            "ldr r3, [r6, 0x20]",
            "str sb, [r8, 0x28]",
            "add r3, r3, 1",
            "str r3, [r6, 0x20]",
            "ldr r3, [0x0000fb24]",
            "ldr r6, [r3]",
            "ldrb r3, [r5, 2]",
            "lsrs r2, r3, 7",
            "beq 0xf8c0",
            "ldr r3, [0x0000fb28]",
            "mov r1, r4",
            "ldr r0, [r3]",
            "bl fcn.000115dc",
            "mov r0, r5",
            "bl fcn.0000e390",
            "mov r0, r5",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b sym.imp.free",
            "ldr r3, [r3]",
            "cmp sl, r3",
            "beq 0xf758",
            "add r0, sp, 0x14",
            "ldr r1, aav.0x0001ab38",
            "bl sym.imp.string::append_char_const_",
            "add r1, sl, 8",
            "add r0, sp, 0x18",
            "bl fcn.0000ed3c",
            "add r1, sp, 0x18",
            "add r0, sp, 0x14",
            "add r8, r8, 1",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "ldr sl, [sl]",
            "b 0xf670",
            "add sl, r5, 0x18",
            "mov r0, sl",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, r8",
            "bls 0xf7c4",
            "mov r0, sl",
            "bl sym.imp.list_base::count_nodes___const",
            "ldr r1, str.___u_more_",
            "rsb r2, r8, r0",
            "add r0, sp, 0x18",
            "bl sym.imp.s_char_const__::_",
            "add r0, sp, 0x14",
            "add r1, sp, 0x18",
            "bl fcn.0000ec6c",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "add r1, sp, 0x14",
            "mov r0, fp",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "ldr r0, [0x0000fb34]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0xf864",
            "ldr r0, [0x0000fb34]",
            "ldr r1, str.____got_query_from",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 4]",
            "cmp r2, 0",
            "mov r8, r0",
            "add r0, sp, 0x18",
            "beq 0xf820",
            "add r1, r4, 4",
            "bl sym.imp.IPAddr::str___const",
            "b 0xf828",
            "add r1, r4, 8",
            "bl sym.imp.IPAddr6::str_bool__const",
            "add r1, sp, 0x18",
            "mov r0, r8",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrh r1, [r4, 0x18]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001add0",
            "bl sym.imp.operator___ostream__char_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x18",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, r5",
            "ldr r1, [0x0000fb34]",
            "bl fcn.000135d8",
            "ldr fp, [r6, 0x44]",
            "mov r8, r7",
            "bic fp, fp, 3",
            "cmp fp, 0",
            "beq 0xf688",
            "ldr r0, [r6, 0x54]",
            "mov r1, r4",
            "add r0, fp, r0",
            "bl fcn.0000dd38",
            "ldr r3, [fp, 4]",
            "ldr r2, [fp, 8]",
            "cmp r0, 0",
            "moveq r8, fp",
            "movne fp, r2",
            "moveq fp, r3",
            "b 0xf870",
            "ldr r1, [r6, 0x54]",
            "mov r0, r4",
            "add r1, r8, r1",
            "bl fcn.0000dd38",
            "cmp r0, 0",
            "bne 0xf690",
            "b 0xf694",
            "tst r3, 0x78",
            "movne r0, r6",
            "movne r1, r4",
            "movne r2, r5",
            "movne r3, 4",
            "bne 0xf8f8",
            "mov r0, sl",
            "bl sym.imp.list_base::count_nodes___const",
            "cmp r0, 1",
            "beq 0xf900",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r5",
            "mov r3, 1",
            "bl fcn.00016f48",
            "b 0xfafc",
            "ldr r3, [r5, 0x18]",
            "add r0, sp, 0x18",
            "ldr r7, [r3]",
            "add r1, r7, 8",
            "bl fcn.0000e04c",
            "ldrh r3, [r7, 0xc]",
            "strh r3, [sp, 0x1c]",
            "ldrh r3, [r7, 0xe]",
            "cmp r3, 1",
            "strh r3, [sp, 0x1e]",
            "beq 0xf944",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r5",
            "mov r3, 4",
            "bl fcn.00016f48",
            "b 0xfaf4",
            "mov r0, r5",
            "add r7, r6, 0x580",
            "bl fcn.0000e390",
            "mov r0, r5",
            "bl sym.imp.free",
            "ldr r3, [r6, 0x588]",
            "add r5, sp, 0x38",
            "add r8, r7, 4",
            "str r3, [r5, -0x30]!",
            "ldr r3, [sp, 8]",
            "cmp r3, r8",
            "beq 0xf9f8",
            "ldr r1, [r3, 0x10]",
            "ldrb r3, [r1, 0x38]",
            "cmp r3, 0",
            "bne 0xf9ec",
            "ldrh r2, [sp, 0x1c]",
            "ldr r3, [r1, 0x10]",
            "cmp r2, r3",
            "bne 0xf9ec",
            "add r1, r1, 0xc",
            "add r0, sp, 0x14",
            "bl fcn.0000e04c",
            "add r1, sp, 0x14",
            "add r0, sp, 0x18",
            "bl fcn.00017ae4",
            "mov sb, r0",
            "add r0, sp, 0x14",
            "bl fcn.0000e174",
            "cmp sb, 0",
            "beq 0xf9ec",
            "ldr r3, [sp, 8]",
            "mov r1, r4",
            "ldr r0, [r3, 0x10]",
            "bl fcn.0001147c",
            "cmp r0, 0",
            "bne 0xfaf4",
            "ldr r3, [0x0000fb28]",
            "mov r1, r4",
            "ldr r0, [r3]",
            "bl fcn.000115dc",
            "b 0xfaf4",
            "mov r0, r5",
            "bl sym.imp.tree_iterator_base::incr__",
            "b 0xf968",
            "add r0, r6, 0x550",
            "add r0, r0, 4",
            "bl sym.imp.nv::Allocator::allocate__",
            "str r0, [sp, 0xc]",
            "ldr r0, [0x0000fb40]",
            "bl fcn.0000dd08",
            "cmp r0, 0",
            "beq 0xfab0",
            "ldr r0, [0x0000fb40]",
            "ldr r1, [0x0000fb44]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r2, [r4, 4]",
            "cmp r2, 0",
            "mov r5, r0",
            "add r0, sp, 0x14",
            "beq 0xfa44",
            "add r1, r4, 4",
            "bl sym.imp.IPAddr::str___const",
            "b 0xfa4c",
            "add r1, r4, 8",
            "bl sym.imp.IPAddr6::str_bool__const",
            "mov r0, r5",
            "add r1, sp, 0x14",
            "bl sym.imp.operator___ostream__string_const_",
            "ldr r1, [0x0000fb48]",
            "bl sym.imp.operator___ostream__char_const_",
            "ldr r1, [sp, 0xc]",
            "bl sym.imp.operator___ostream__unsigned_int_",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "add r1, sp, 0x18",
            "bl fcn.0000e758",
            "ldr r1, aav.0x0001acb0",
            "bl sym.imp.operator___ostream__char_const_",
            "ldrh r1, [sp, 0x1c]",
            "mov r5, r0",
            "add r0, sp, 0x10",
            "bl fcn.0000ea28",
            "add r1, sp, 0x10",
            "mov r0, r5",
            "bl sym.imp.operator___ostream__string_const_",
            "bl sym.imp.endl_ostream_",
            "add r0, sp, 0x10",
            "bl rsym._ZN6stringD1Ev",
            "add r0, sp, 0x14",
            "bl rsym._ZN6stringD1Ev",
            "mov r0, 0x5c",
            "add r6, sp, 0x38",
            "bl sym.imp.malloc",
            "add r2, sp, 0x18",
            "ldr r1, [r6, -0x2c]!",
            "ldrh r3, [sp, 0x1c]",
            "mov r5, r0",
            "bl fcn.000103ec",
            "mov r1, r4",
            "mov r0, r5",
            "bl fcn.0001147c",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.000145c8",
            "str r5, [r0]",
            "mov r0, r5",
            "bl fcn.0000eef0",
            "add r0, sp, 0x18",
            "bl fcn.0000e174",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000ddf4": {
        "function_address": "0x0000ddf4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r6, 0x1c",
            "mov r4, r0",
            "mov r1, r5",
            "mov r2, r6",
            "str r5, [r0], 8",
            "bl sym.imp.memset",
            "mov r1, r5",
            "add r0, r4, 0x24",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "mov r1, r5",
            "mov r2, r6",
            "add r0, r4, 0x34",
            "bl sym.imp.memset",
            "mov r1, r5",
            "add r0, r4, 0x50",
            "mov r2, 8",
            "bl sym.imp.memset",
            "add r0, r4, 0x58",
            "mov r1, r5",
            "mov r2, 0x20",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}"
        ]
    }
}