{
    "entry0": {
        "function_address": "0x00005e58",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 8",
            "ldr r4, [0x00005f10]",
            "ldr r6, [0x00005f14]",
            "add r4, pc, r4",
            "ldr r3, [r4, r6]",
            "add r5, r4, r6",
            "cmp r3, 0",
            "movge r0, 0",
            "blt 0x5e88",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r7, [0x00005f18]",
            "mov r1, 2",
            "add r0, r4, r7",
            "bl loc.imp.open",
            "cmp r0, 0",
            "str r0, [r4, r6]",
            "blt 0x5efc",
            "mov r2, 1",
            "mov r6, 0",
            "str r0, [sp]",
            "mov r3, r2",
            "mov r1, 0x10000",
            "mov r0, r6",
            "str r6, [sp, 4]",
            "bl loc.imp.mmap",
            "ldr r3, [0x00005f1c]",
            "cmn r0, 1",
            "mov r8, r0",
            "str r0, [r4, r3]",
            "beq 0x5ef0",
            "ldr r0, [r5]",
            "mov r1, 2",
            "mov r2, 1",
            "bl loc.imp.fcntl",
            "mov r0, r6",
            "b 0x5e80",
            "ldr r0, [r5]",
            "bl loc.imp.close",
            "str r8, [r5]",
            "add r0, r4, r7",
            "bl loc.imp.perror",
            "bl loc.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x5e80"
        ]
    },
    "loc.imp.open": {
        "function_address": "0x00005e1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x304]!"
        ]
    },
    "loc.imp.mmap": {
        "function_address": "0x00005d20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3ac]!"
        ]
    },
    "loc.imp.fcntl": {
        "function_address": "0x00005e34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x2f4]!"
        ]
    },
    "loc.imp.close": {
        "function_address": "0x00005e40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x2ec]!"
        ]
    },
    "loc.imp.perror": {
        "function_address": "0x00005cd8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3dc]!"
        ]
    },
    "loc.imp.__errno_location": {
        "function_address": "0x00005df8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x31c]!"
        ]
    },
    "sym.nvram_set_bitflag": {
        "function_address": "0x00006228",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "cmp r1, 0x1f",
            "ldr r4, [0x000062c0]",
            "mov r6, r0",
            "sub sp, sp, 0x10",
            "mov r7, r1",
            "mov r8, r2",
            "movhi r0, 0",
            "add r4, pc, r4",
            "bls 0x6258",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}",
            "bl rsym.nvram_get",
            "subs r3, r0, 0",
            "mov r1, 0",
            "add r2, sp, 8",
            "mov r5, sp",
            "str r1, [r2], 4",
            "str r1, [sp]",
            "str r1, [sp, 4]",
            "str r1, [r2]",
            "beq 0x629c",
            "mov r3, 1",
            "mov r2, 0x10",
            "lsl r7, r3, r7",
            "bl loc.imp.strtoul",
            "cmp r8, 0",
            "orrne r3, r0, r7",
            "biceq r3, r0, r7",
            "ldr r2, [0x000062c4]",
            "mov r0, sp",
            "mov r1, 0xf",
            "add r2, r4, r2",
            "bl loc.imp.snprintf",
            "mov r0, r6",
            "mov r1, sp",
            "bl rsym.nvram_set",
            "b 0x6250"
        ]
    },
    "rsym.nvram_get": {
        "function_address": "0x00005d98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x35c]!"
        ]
    },
    "loc.imp.strtoul": {
        "function_address": "0x00005d08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3bc]!"
        ]
    },
    "loc.imp.snprintf": {
        "function_address": "0x00005cb4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3f4]!"
        ]
    },
    "rsym.nvram_set": {
        "function_address": "0x00005d5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x384]!"
        ]
    },
    "sym.nvram_getall": {
        "function_address": "0x0000618c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "ldr r4, [0x00006218]",
            "mov r5, r1",
            "ldr r6, [0x0000621c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r6]",
            "cmp r3, 0",
            "blt 0x61f4",
            "cmp r5, 0",
            "moveq r8, r5",
            "bne 0x61c4",
            "mov r0, r8",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r3, 0",
            "mov r1, r7",
            "strb r3, [r7]",
            "mov r2, r5",
            "ldr r0, [r4, r6]",
            "bl loc.imp.read",
            "subs r8, r0, 0",
            "blt 0x6208",
            "cmp r8, r5",
            "moveq r8, 0",
            "mov r0, r8",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, 0",
            "bl rsym.nvram_init",
            "subs r8, r0, 0",
            "beq 0x61b0",
            "b 0x61bc",
            "ldr r0, [0x00006220]",
            "add r0, r4, r0",
            "bl loc.imp.perror",
            "b 0x61e4"
        ]
    },
    "loc.imp.read": {
        "function_address": "0x00005d68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x37c]!"
        ]
    },
    "rsym.nvram_init": {
        "function_address": "0x00005e28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x2fc]!"
        ]
    },
    "sym.acosNvramConfig_readFile": {
        "function_address": "0x000069e8",
        "instructions": [
            "cmp r0, 0",
            "cmpne r1, 0",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "movne r6, 0",
            "moveq r6, 1",
            "mov r7, r2",
            "bne 0x6a14",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r1",
            "mov r1, r6",
            "bl loc.imp.memset",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r7",
            "bl rsym.nvram_get",
            "mov r0, r6",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "loc.imp.memset": {
        "function_address": "0x00005da4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x354]!"
        ]
    },
    "sym.acosNvramConfig_readAsInt": {
        "function_address": "0x00006978",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r0, 0",
            "cmpne r1, 0",
            "ldr r4, [0x000069e0]",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 4",
            "mov r5, r1",
            "moveq r3, 1",
            "add r4, pc, r4",
            "bne 0x69b0",
            "mov r0, r3",
            "add sp, sp, 4",
            "add sp, sp, 0x1000",
            "pop {r4, r5, pc}",
            "mov r1, sp",
            "mov r2, 0x1000",
            "bl rsym.nvram_get",
            "cmp r0, 0",
            "beq 0x69d4",
            "bl rsym.acos_atoi",
            "mov r3, 0",
            "str r0, [r5]",
            "b 0x69a0",
            "ldr r0, [0x000069e4]",
            "add r0, r4, r0",
            "b 0x69c4"
        ]
    },
    "rsym.acos_atoi": {
        "function_address": "0x00005c9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x404]!"
        ]
    },
    "sym.acosNvramConfig_writeAsInt": {
        "function_address": "0x00006b48",
        "instructions": [
            "cmp r0, 0",
            "push {r4, r5, r6, r7, lr}",
            "moveq r0, 1",
            "sub sp, sp, 0x44",
            "beq 0x6c14",
            "add r3, sp, 0x20",
            "cmp r1, 0",
            "mov ip, 0",
            "add lr, r3, 8",
            "str ip, [lr], 4",
            "str ip, [sp, 0x20]",
            "str ip, [lr], 4",
            "str ip, [sp, 0x24]",
            "str ip, [lr], 4",
            "str ip, [lr], 4",
            "str ip, [lr], 4",
            "strh ip, [lr]",
            "blt 0x6c0c",
            "movwne r7, 0x6667",
            "movne r6, sp",
            "movtne r7, 0x6666",
            "bne 0x6ba8",
            "b 0x6bfc",
            "mov ip, r5",
            "asr lr, r1, 0x1f",
            "smull r5, r4, r7, r1",
            "add r5, ip, 1",
            "rsb r4, lr, r4, asr 2",
            "mov lr, r4",
            "add r4, r4, r4, lsl 2",
            "sub r4, r1, r4, lsl 1",
            "subs r1, lr, 0",
            "add r4, r4, 0x30",
            "uxtb r4, r4",
            "strb r4, [r6, ip]",
            "bne 0x6ba4",
            "mov r1, ip",
            "sub lr, r3, 1",
            "b 0x6be8",
            "ldrb r4, [r6, ip]",
            "sub ip, ip, 1",
            "strb r4, [lr, 1]!",
            "cmn ip, 1",
            "bne 0x6be4",
            "add r1, r1, 1",
            "add ip, sp, 0x40",
            "add r1, ip, r1",
            "mov ip, 0",
            "strb ip, [r1, -0x20]",
            "mov r1, r3",
            "bl rsym.acosNvramConfig_write",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "rsym.acosNvramConfig_write": {
        "function_address": "0x00005e04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x314]!"
        ]
    },
    "sym.copy_bssid_default_values": {
        "function_address": "0x000073a4",
        "instructions": [
            "ldr r3, [0x00007470]",
            "ldr r2, [0x00007474]",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x40",
            "add r3, pc, r3",
            "ldr r4, [r3, r2]",
            "ldr sl, [r4]",
            "cmp sl, 0",
            "beq 0x7464",
            "ldr r6, [0x00007478]",
            "add r4, r4, 0xc",
            "ldr r8, [0x0000747c]",
            "sub r7, r0, 1",
            "ldr sb, [0x00007480]",
            "mov r5, sp",
            "add r6, r3, r6",
            "add r8, r3, r8",
            "add sb, r3, sb",
            "b 0x73fc",
            "ldr sl, [r4], 0xc",
            "cmp sl, 0",
            "beq 0x7464",
            "mov r0, sl",
            "mov r1, r6",
            "mov r2, 3",
            "bl loc.imp.strncmp",
            "cmp r0, 0",
            "bne 0x73f0",
            "add r3, sl, 3",
            "mov r2, r7",
            "mov r1, r8",
            "mov r0, sp",
            "bl loc.imp.sprintf",
            "ldr r1, [r4, -8]",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "ldr r3, [r4, -0xc]",
            "mov r1, sb",
            "mov r2, r7",
            "mov r0, sp",
            "add r3, r3, 3",
            "bl loc.imp.sprintf",
            "ldr r1, [r4, -8]",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "ldr sl, [r4], 0xc",
            "cmp sl, 0",
            "bne 0x73fc",
            "mov r0, 0",
            "add sp, sp, 0x40",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "loc.imp.strncmp": {
        "function_address": "0x00005d74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x374]!"
        ]
    },
    "loc.imp.sprintf": {
        "function_address": "0x00005dd4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x334]!"
        ]
    },
    "sym.acosNvramConfig_set_encode": {
        "function_address": "0x00006dc4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0x14",
            "mov r3, 0",
            "add lr, sp, 0x1000",
            "movw ip, 0xeffc",
            "str r3, [lr, 0xc]",
            "add lr, sp, 0x1000",
            "movt ip, 0xffff",
            "add lr, lr, 0x10",
            "add r6, sp, 0xc",
            "str r0, [sp, 4]",
            "mov r4, r1",
            "movw r2, 0xffc",
            "add r0, r6, 4",
            "mov r1, r3",
            "str r3, [lr, ip]",
            "bl loc.imp.memset",
            "ldr r2, [sp, 4]",
            "ldr r5, [0x00006f94]",
            "cmp r4, 0",
            "cmpne r2, 0",
            "add r5, pc, r5",
            "beq 0x6f58",
            "mov r0, r4",
            "bl loc.imp.strlen",
            "movw r3, 0xaaab",
            "add fp, r0, 2",
            "movt r3, 0xaaaa",
            "umull lr, fp, r3, fp",
            "lsr fp, fp, 1",
            "add r2, sp, 0x1000",
            "lsl fp, fp, 2",
            "cmp fp, 0x1000",
            "str fp, [r2, 0xc]",
            "bhi 0x6f58",
            "cmp r0, 2",
            "movls sb, r6",
            "bls 0x6ecc",
            "ldr r2, [0x00006f98]",
            "add r3, sp, 0x10",
            "add r2, r5, r2",
            "ldrb sl, [r4]",
            "sub r0, r0, 3",
            "ldrb ip, [r4, 1]",
            "cmp r0, 2",
            "ldrb r1, [r4, 2]",
            "mov sb, r3",
            "ldrb r7, [r2, sl, lsr 2]",
            "add r4, r4, 3",
            "lsl sl, sl, 4",
            "lsl r8, ip, 2",
            "and lr, r1, 0x3f",
            "and sl, sl, 0x30",
            "ldrb lr, [r2, lr]",
            "and r8, r8, 0x3c",
            "orr ip, sl, ip, lsr 4",
            "orr r1, r8, r1, lsr 6",
            "strb r7, [r3, -4]",
            "ldrb ip, [r2, ip]",
            "ldrb r1, [r2, r1]",
            "strb lr, [r3, -1]",
            "strb ip, [r3, -3]",
            "strb r1, [r3, -2]",
            "add r3, r3, 4",
            "bhi 0x6e6c",
            "cmp r0, 0",
            "beq 0x6f30",
            "ldr r1, [0x00006f98]",
            "cmp r0, 2",
            "ldrb r2, [r4]",
            "mov r3, sb",
            "add r5, r5, r1",
            "ldrb r1, [r5, r2, lsr 2]",
            "lsl r2, r2, 4",
            "strb r1, [r3], 1",
            "and r2, r2, 0x30",
            "bne 0x6f80",
            "ldrb r1, [r4, 1]",
            "add r3, r3, 1",
            "orr r2, r2, r1, lsr 4",
            "lsl r1, r1, 2",
            "ldrb r2, [r5, r2]",
            "and r1, r1, 0x3c",
            "strb r2, [sb, 1]",
            "ldrb r2, [r5, r1]",
            "mov sb, r3",
            "strb r2, [sb], 1",
            "add sb, sb, 1",
            "mov r2, 0x3d",
            "strb r2, [r3, 1]",
            "cmp fp, 0x1000",
            "mov r1, r6",
            "movne r3, 0",
            "strbne r3, [sb]",
            "ldr r0, [sp, 4]",
            "bl rsym.acosNvramConfig_set",
            "mov r0, 0",
            "add sp, sp, 0x14",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [0x00006f9c]",
            "mov r1, 1",
            "ldr r0, [0x00006fa0]",
            "mov r2, 0x3f",
            "ldr r3, [r5, r3]",
            "add r0, r5, r0",
            "ldr r3, [r3]",
            "bl loc.imp.fwrite",
            "mvn r0, 0",
            "b 0x6f4c",
            "ldrb r1, [r5, r2]",
            "add r3, r3, 1",
            "mov r2, 0x3d",
            "strb r1, [sb, 1]",
            "b 0x6f1c"
        ]
    },
    "loc.imp.strlen": {
        "function_address": "0x00005e10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x30c]!"
        ]
    },
    "rsym.acosNvramConfig_set": {
        "function_address": "0x00005dec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x324]!"
        ]
    },
    "loc.imp.fwrite": {
        "function_address": "0x00005de0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x32c]!"
        ]
    },
    "sym.acosNvramConfig_read": {
        "function_address": "0x000068fc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "cmp r0, 0",
            "cmpne r1, 0",
            "ldr r5, [0x00006970]",
            "mov r4, r1",
            "mov r6, r0",
            "mov r7, r2",
            "movne r1, 0",
            "moveq r1, 1",
            "add r5, pc, r5",
            "bne 0x6930",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r4",
            "bl loc.imp.memset",
            "mov r1, r4",
            "mov r0, r6",
            "mov r2, r7",
            "bl rsym.nvram_get",
            "subs r1, r0, 0",
            "beq 0x6964",
            "mov r0, r4",
            "mov r2, r7",
            "bl loc.imp.strncpy",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "ldr r1, [0x00006974]",
            "add r1, r5, r1",
            "b 0x6950"
        ]
    },
    "loc.imp.strncpy": {
        "function_address": "0x00005d80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x36c]!"
        ]
    },
    "sym.acosNvramConfig_read_decode": {
        "function_address": "0x00006ff4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 8",
            "mov r4, 0",
            "movw r3, 0xeffc",
            "add r5, sp, 4",
            "add ip, sp, 0x1000",
            "movt r3, 0xffff",
            "add ip, ip, 8",
            "mov r8, r0",
            "mov r6, r1",
            "mov r7, r2",
            "mov r1, r4",
            "movw r2, 0xffc",
            "add r0, r5, 4",
            "str r4, [ip, r3]",
            "bl loc.imp.memset",
            "add r3, sp, 0x1000",
            "mov r0, r8",
            "str r4, [r3, 4]",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym.acosNvramConfig_read",
            "subs r4, r0, 0",
            "movne r0, 1",
            "bne 0x7084",
            "mov r1, r6",
            "mov r2, 0x1000",
            "mov r0, r5",
            "bl loc.imp.strncpy",
            "add r1, sp, 0x1000",
            "mov r0, r6",
            "add r1, r1, 4",
            "mov r2, r5",
            "bl fcn.00006400",
            "mov r0, r4",
            "add sp, sp, 8",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "rsym.acosNvramConfig_read": {
        "function_address": "0x00005d14",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3b4]!"
        ]
    },
    "fcn.00006400": {
        "function_address": "0x00006400",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, 0",
            "str r5, [r1]",
            "mov r7, r1",
            "sub sp, sp, 0x1c",
            "mov r8, r0",
            "ldrb r3, [r2]",
            "ldr r1, [0x000065dc]",
            "str r5, [sp, 0x14]",
            "cmp r3, r5",
            "add r1, pc, r1",
            "beq 0x64f4",
            "mov r4, r2",
            "ldr r2, [0x000065e0]",
            "ldr sb, [0x000065e4]",
            "mov r6, r5",
            "ldr fp, [0x000065e8]",
            "mov sl, r5",
            "add r2, r1, r2",
            "add sb, r1, sb",
            "str r2, [sp, 0xc]",
            "add fp, r1, fp",
            "b 0x64b8",
            "sub r2, r3, 0x61",
            "uxtb r2, r2",
            "cmp r2, 0x19",
            "subls r3, r3, 0x47",
            "uxtbls r2, r3",
            "bls 0x64c8",
            "sub r2, r3, 0x30",
            "uxtb r2, r2",
            "cmp r2, 9",
            "addls r3, r3, 4",
            "uxtbls r2, r3",
            "bls 0x64c8",
            "cmp r3, 0x2b",
            "beq 0x65cc",
            "cmp r3, 0x3d",
            "beq 0x6504",
            "cmp r3, 0x2f",
            "beq 0x65d4",
            "cmp r6, 0",
            "bne 0x64f4",
            "ldrb r3, [r4, 1]!",
            "cmp r3, 0",
            "beq 0x64f4",
            "sub r2, r3, 0x41",
            "uxtb r2, r2",
            "cmp r2, 0x19",
            "bhi 0x645c",
            "cmp r6, 0",
            "bne 0x6514",
            "add r3, r5, 1",
            "add r0, sp, 0x18",
            "add r1, r0, r5",
            "ands r5, r3, 3",
            "strb r2, [r1, -4]",
            "beq 0x6518",
            "ldrb r3, [r4, 1]!",
            "cmp r3, 0",
            "bne 0x64b8",
            "mov r0, 0",
            "strb r0, [r8]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "cmp r6, 0",
            "bne 0x64f4",
            "subs r5, r5, 1",
            "movmi r5, 3",
            "mov r6, 1",
            "ldrb r3, [sp, 0x15]",
            "cmp r5, 1",
            "ldrb lr, [sp, 0x14]",
            "ldrb r1, [sp, 0x16]",
            "ubfx r2, r3, 4, 2",
            "ldrb ip, [sp, 0x17]",
            "ubfx r0, r1, 2, 4",
            "orr r2, r2, lr, lsl 2",
            "orr r3, r0, r3, lsl 4",
            "uxtb r2, r2",
            "uxtb r3, r3",
            "beq 0x65a8",
            "cmp r5, 2",
            "beq 0x6584",
            "and ip, ip, 0x3f",
            "mov r0, r8",
            "orr r1, ip, r1, lsl 6",
            "add r8, r8, 3",
            "uxtb r1, r1",
            "str r1, [sp]",
            "mov r1, fp",
            "bl loc.imp.sprintf",
            "ldr r3, [r7]",
            "add r3, r3, 3",
            "str r3, [r7]",
            "str sl, [sp, 0x14]",
            "b 0x64ac",
            "mov r0, r8",
            "ldr r1, [sp, 0xc]",
            "bl loc.imp.sprintf",
            "ldr r3, [r7]",
            "add r8, r8, 2",
            "add r3, r3, 2",
            "str r3, [r7]",
            "str sl, [sp, 0x14]",
            "b 0x64ac",
            "mov r0, r8",
            "mov r1, sb",
            "bl loc.imp.sprintf",
            "ldr r3, [r7]",
            "add r8, r8, 1",
            "add r3, r3, 1",
            "str r3, [r7]",
            "str sl, [sp, 0x14]",
            "b 0x64ac",
            "mov r2, 0x3e",
            "b 0x64c8",
            "mov r2, 0x3f",
            "b 0x64c8"
        ]
    },
    "sym.acosNvramConfig_exist": {
        "function_address": "0x000068d8",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 4",
            "mov r2, 0x1000",
            "mov r1, sp",
            "bl rsym.nvram_get",
            "add sp, sp, 4",
            "add sp, sp, 0x1000",
            "ldm sp!, {pc}"
        ]
    },
    "sym.acosNvramConfig_get": {
        "function_address": "0x00006774",
        "instructions": [
            "push {r4, lr}",
            "cmp r0, 0",
            "ldr r4, [0x000067d8]",
            "add r4, pc, r4",
            "popeq {r4, pc}",
            "ldr r3, [0x000067dc]",
            "ldr ip, [r4, r3]",
            "add r1, r4, r3",
            "add r1, r1, 4",
            "add r2, ip, 1",
            "cmp r2, 0xa",
            "add r1, r1, ip, lsl 12",
            "str r2, [r4, r3]",
            "moveq r2, 0",
            "streq r2, [r4, r3]",
            "cmp r1, 0",
            "beq 0x67d0",
            "mov r2, 0x1000",
            "bl rsym.nvram_get",
            "cmp r0, 0",
            "ldreq r0, [0x000067e0]",
            "addeq r0, r4, r0",
            "pop {r4, pc}",
            "mov r0, r1",
            "pop {r4, pc}"
        ]
    },
    "sym.acosNvramConfig_invmatch": {
        "function_address": "0x0000689c",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x1000",
            "mov r4, r1",
            "mov r2, 0x1000",
            "mov r1, sp",
            "bl rsym.nvram_get",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x68d0",
            "mov r1, r4",
            "bl loc.imp.strcmp",
            "subs r0, r0, 0",
            "movne r0, 1",
            "add sp, sp, 0x1000",
            "pop {r4, pc}"
        ]
    },
    "loc.imp.strcmp": {
        "function_address": "0x00005dc8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x33c]!"
        ]
    },
    "sym.nvram_set": {
        "function_address": "0x00006224",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x6c",
            "mov r8, r1",
            "ldr r4, [0x00006018]",
            "mov sl, r0",
            "bl loc.imp.strlen",
            "mov r6, r0",
            "mov r0, 0",
            "bl rsym.nvram_init",
            "cmp r0, 0",
            "add r4, pc, r4",
            "bne 0x5fd4",
            "cmp r8, 0",
            "add r5, r6, 1",
            "beq 0x5f6c",
            "mov r0, r8",
            "add r5, r5, 1",
            "bl loc.imp.strlen",
            "add r5, r5, r0",
            "cmp r5, 0x64",
            "addls r7, sp, 4",
            "movls r6, r7",
            "bhi 0x5ffc",
            "cmp r8, 0",
            "beq 0x5fdc",
            "ldr r1, [0x0000601c]",
            "mov r0, r6",
            "mov r2, sl",
            "mov r3, r8",
            "add r1, r4, r1",
            "bl loc.imp.sprintf",
            "ldr r3, [0x00006020]",
            "mov r1, r6",
            "mov r2, r5",
            "ldr r0, [r4, r3]",
            "bl loc.imp.write",
            "subs r8, r0, 0",
            "blt 0x5fec",
            "cmp r6, r7",
            "beq 0x5fc8",
            "mov r0, r6",
            "bl loc.imp.free",
            "cmp r8, r5",
            "movne r0, r8",
            "moveq r0, 0",
            "add sp, sp, 0x6c",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "mov r0, r6",
            "mov r1, sl",
            "bl loc.imp.strcpy",
            "b 0x5f9c",
            "ldr r0, [0x00006024]",
            "add r0, r4, r0",
            "bl loc.imp.perror",
            "b 0x5fb8",
            "mov r0, r5",
            "bl loc.imp.malloc",
            "subs r6, r0, 0",
            "addne r7, sp, 4",
            "bne 0x5f7c",
            "mvn r0, 0xb",
            "b 0x5fd4",
            "b 0x5f20"
        ]
    },
    "loc.imp.write": {
        "function_address": "0x00005d2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3a4]!"
        ]
    },
    "loc.imp.free": {
        "function_address": "0x00005e4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x2e4]!"
        ]
    },
    "loc.imp.strcpy": {
        "function_address": "0x00005c90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x40c]!"
        ]
    },
    "loc.imp.malloc": {
        "function_address": "0x00005cfc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3c4]!"
        ]
    },
    "sym.acosNvramConfig_loadFactoryDefault": {
        "function_address": "0x00006c4c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r6, r0, 0",
            "ldr sl, [0x00006d88]",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0xc",
            "add sl, pc, sl",
            "beq 0x6d48",
            "ldr r2, [0x00006d8c]",
            "ldr r4, [sl, r2]",
            "str r2, [sp, 4]",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "beq 0x6d10",
            "ldr r7, [0x00006d90]",
            "add r4, r4, 0xc",
            "mov r5, 0",
            "add r8, sp, 8",
            "add r7, sl, r7",
            "b 0x6ca8",
            "ldr r0, [r4], 0xc",
            "add r5, r5, 1",
            "cmp r0, 0",
            "beq 0x6d10",
            "mov r2, 0x1000",
            "mov r1, r8",
            "bl rsym.nvram_get",
            "ldr sb, [r4, -8]",
            "subs r3, r0, 0",
            "moveq r3, r7",
            "str r3, [sp]",
            "mov r0, sb",
            "bl loc.imp.strlen",
            "ldr r3, [sp]",
            "mov fp, r0",
            "mov r1, r6",
            "mov r0, r3",
            "bl loc.imp.strcmp",
            "cmp r0, 0",
            "bne 0x6c98",
            "cmp fp, 0",
            "beq 0x6d20",
            "ldr r2, [sp, 4]",
            "add r5, r5, r5, lsl 1",
            "mov r1, sb",
            "ldr r3, [sl, r2]",
            "ldr r0, [r3, r5, lsl 2]",
            "bl rsym.nvram_set",
            "cmp r0, 0",
            "bne 0x6d3c",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r2, [sp, 4]",
            "add r5, r5, r5, lsl 1",
            "ldr r1, [0x00006d90]",
            "ldr r3, [sl, r2]",
            "add r1, sl, r1",
            "ldr r0, [r3, r5, lsl 2]",
            "bl rsym.nvram_set",
            "bl rsym.nvram_commit",
            "mov r0, 0",
            "b 0x6d14",
            "ldr r0, [0x00006d94]",
            "ldr r1, [0x00006d98]",
            "add r0, sl, r0",
            "add r1, sl, r1",
            "bl rsym.nvram_set",
            "ldr r0, [0x00006d9c]",
            "ldr r1, [0x00006da0]",
            "add r0, sl, r0",
            "add r1, sl, r1",
            "bl rsym.nvram_set",
            "bl rsym.nvram_commit",
            "mov r0, 1",
            "mov r1, 0xf",
            "bl loc.imp.kill",
            "mov r0, r6",
            "b 0x6d14"
        ]
    },
    "rsym.nvram_commit": {
        "function_address": "0x00005dbc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x344]!"
        ]
    },
    "loc.imp.kill": {
        "function_address": "0x00005d44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x394]!"
        ]
    },
    "sym.acosNvramConfig_match": {
        "function_address": "0x00006860",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x1000",
            "mov r4, r1",
            "mov r2, 0x1000",
            "mov r1, sp",
            "bl rsym.nvram_get",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x6894",
            "mov r1, r4",
            "bl loc.imp.strcmp",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "add sp, sp, 0x1000",
            "pop {r4, pc}"
        ]
    },
    "sym.nvram_get": {
        "function_address": "0x00006028",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x68",
            "ldr r4, [0x00006100]",
            "mov r8, r0",
            "bl loc.imp.strlen",
            "mov r7, r0",
            "mov r0, 0",
            "bl rsym.nvram_init",
            "cmp r0, 0",
            "add r4, pc, r4",
            "movne r7, 0",
            "bne 0x60b0",
            "add r7, r7, 1",
            "add r6, sp, 4",
            "cmp r7, 0x64",
            "movls r5, r6",
            "bhi 0x60e4",
            "mov r1, r8",
            "mov r0, r5",
            "bl loc.imp.strcpy",
            "ldr r3, [0x00006104]",
            "mov r1, r5",
            "mov r2, r7",
            "ldr r0, [r4, r3]",
            "bl loc.imp.read",
            "cmp r0, 4",
            "beq 0x60bc",
            "cmp r0, 0",
            "movge r7, 0",
            "blt 0x60d0",
            "cmp r5, r6",
            "beq 0x60b0",
            "mov r0, r5",
            "bl loc.imp.free",
            "mov r0, r7",
            "add sp, sp, 0x68",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r2, [0x00006108]",
            "ldr r3, [r5]",
            "ldr r7, [r4, r2]",
            "add r7, r7, r3",
            "b 0x60a0",
            "ldr r0, [0x0000610c]",
            "mov r7, 0",
            "add r0, r4, r0",
            "bl loc.imp.perror",
            "b 0x60a0",
            "mov r0, r7",
            "bl loc.imp.malloc",
            "cmp r0, 0",
            "mov r5, r0",
            "bne 0x606c",
            "mov r7, r0",
            "b 0x60b0"
        ]
    },
    "sym.nvram_commit": {
        "function_address": "0x000062d0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xc",
            "ldr r4, [0x0000636c]",
            "ldr r0, [0x00006370]",
            "ldr r1, [0x00006374]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl loc.imp.fopen",
            "subs r5, r0, 0",
            "beq 0x631c",
            "bl loc.imp.getpid",
            "ldr r1, [0x00006378]",
            "mov r2, r0",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl loc.imp.fprintf",
            "mov r0, r5",
            "bl loc.imp.fclose",
            "mov r0, 0",
            "bl rsym.nvram_init",
            "subs r2, r0, 0",
            "beq 0x6338",
            "mov r0, r2",
            "add sp, sp, 0xc",
            "pop {r4, r5, pc}",
            "ldr r3, [0x0000637c]",
            "movw r1, 0x4c46",
            "movt r1, 0x4853",
            "ldr r0, [r4, r3]",
            "bl loc.imp.ioctl",
            "subs r2, r0, 0",
            "bge 0x632c",
            "ldr r0, [0x00006380]",
            "str r2, [sp, 4]",
            "add r0, r4, r0",
            "bl loc.imp.perror",
            "ldr r2, [sp, 4]",
            "b 0x632c"
        ]
    },
    "loc.imp.fopen": {
        "function_address": "0x00005d8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x364]!"
        ]
    },
    "loc.imp.getpid": {
        "function_address": "0x00005cc0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3ec]!"
        ]
    },
    "loc.imp.fprintf": {
        "function_address": "0x00005d38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x39c]!"
        ]
    },
    "loc.imp.fclose": {
        "function_address": "0x00005db0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x34c]!"
        ]
    },
    "loc.imp.ioctl": {
        "function_address": "0x00005ca8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3fc]!"
        ]
    },
    "sym.WAN_ith_CONFIG_SET_AS_STR": {
        "function_address": "0x00007350",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r3, 0",
            "sub sp, sp, 0x204",
            "mov r6, r0",
            "mov r7, r1",
            "mov r5, r2",
            "mov r1, r3",
            "mov r2, 0x1fc",
            "add r0, sp, 4",
            "str r3, [sp]",
            "bl loc.imp.memset",
            "mov r1, r7",
            "mov r0, sp",
            "mov r2, r6",
            "mov r4, sp",
            "bl loc.imp.sprintf",
            "mov r0, sp",
            "mov r1, r5",
            "bl rsym.acosNvramConfig_set",
            "add sp, sp, 0x204",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.acosNvramConfigInit": {
        "function_address": "0x00006750",
        "instructions": [
            "push {r3, lr}",
            "bl rsym.nvram_init",
            "subs r0, r0, 0",
            "movne r0, 1",
            "pop {r3, pc}"
        ]
    },
    "sym.acosNvramConfig_setPAParam": {
        "function_address": "0x00007090",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "cmp r0, 0",
            "ldr r4, [0x000072cc]",
            "add r4, pc, r4",
            "beq 0x71b0",
            "cmp r0, 1",
            "popne {r4, r5, r6, pc}",
            "ldr r5, [0x000072d0]",
            "ldr r0, [0x000072d4]",
            "add r5, r4, r5",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072d8]",
            "mov r1, r5",
            "ldr r5, [0x000072dc]",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072e0]",
            "add r5, r4, r5",
            "ldr r1, [0x000072e4]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072e8]",
            "ldr r1, [0x000072ec]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f0]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f4]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f8]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072fc]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007300]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007304]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007308]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x0000730c]",
            "mov r1, r5",
            "ldr r5, [0x00007310]",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007314]",
            "add r5, r4, r5",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007318]",
            "mov r1, r5",
            "add r0, r4, r0",
            "pop {r4, r5, r6, lr}",
            "b rsym.acosNvramConfig_set",
            "ldr r5, [0x0000731c]",
            "ldr r0, [0x000072d4]",
            "add r5, r4, r5",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072d8]",
            "mov r1, r5",
            "ldr r5, [0x00007320]",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072e0]",
            "add r5, r4, r5",
            "ldr r1, [0x00007324]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072e8]",
            "ldr r1, [0x00007328]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f0]",
            "ldr r1, [0x0000732c]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f4]",
            "ldr r1, [0x00007330]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072f8]",
            "ldr r1, [0x00007334]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x000072fc]",
            "ldr r1, [0x00007338]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007300]",
            "ldr r1, [0x0000733c]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007304]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007308]",
            "ldr r1, [0x00007340]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x0000730c]",
            "mov r1, r5",
            "add r0, r4, r0",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007314]",
            "ldr r1, [0x00007344]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl rsym.acosNvramConfig_set",
            "ldr r0, [0x00007318]",
            "ldr r1, [0x00007348]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "pop {r4, r5, r6, lr}",
            "b rsym.acosNvramConfig_set"
        ]
    },
    "sym.acosNvramConfig_save": {
        "function_address": "0x00006c1c",
        "instructions": [
            "push {r3, lr}",
            "bl rsym.nvram_commit",
            "cmp r0, 0",
            "movgt r0, 0",
            "movle r0, 1",
            "pop {r3, pc}"
        ]
    },
    "sym.nvram_get_bitflag": {
        "function_address": "0x00006110",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "cmp r1, 0x1f",
            "ldr r4, [0x00006180]",
            "mov r5, r1",
            "movhi r0, 0",
            "add r4, pc, r4",
            "pophi {r3, r4, r5, pc}",
            "bl rsym.nvram_get",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "popeq {r3, r4, r5, pc}",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl loc.imp.strtoul",
            "cmp r0, 0",
            "beq 0x6168",
            "mov r3, 1",
            "ands r3, r0, r3, lsl r5",
            "beq 0x6174",
            "ldr r0, [0x00006184]",
            "add r0, r4, r0",
            "pop {r3, r4, r5, pc}",
            "ldr r0, [0x00006188]",
            "add r0, r4, r0",
            "pop {r3, r4, r5, pc}",
            "ldr r0, [0x00006188]",
            "add r0, r4, r0",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.sync_essential_values": {
        "function_address": "0x00007484",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub r6, r0, 1",
            "ldr r5, [0x000075a0]",
            "sub sp, sp, 0x44",
            "mov r2, r6",
            "mov r0, sp",
            "ldr r8, [0x000075a4]",
            "mov r4, sp",
            "ldr sl, [0x000075a8]",
            "add r5, pc, r5",
            "ldr r7, [0x000075ac]",
            "ldr sb, [0x000075b0]",
            "add r8, r5, r8",
            "add sl, r5, sl",
            "ldr fp, [0x000075b4]",
            "add r7, r5, r7",
            "mov r3, sl",
            "mov r1, r8",
            "add sb, r5, sb",
            "bl loc.imp.sprintf",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "add fp, r5, fp",
            "mov r2, r6",
            "mov r3, sb",
            "mov r1, r8",
            "mov r0, sp",
            "bl loc.imp.sprintf",
            "mov r1, fp",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "mov r1, r8",
            "ldr r8, [0x000075b8]",
            "mov r2, r6",
            "mov r0, sp",
            "add r8, r5, r8",
            "mov r3, r8",
            "bl loc.imp.sprintf",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "ldr r1, [0x000075bc]",
            "mov r2, r6",
            "mov r3, sl",
            "mov r0, sp",
            "add r5, r5, r1",
            "mov r1, r5",
            "bl loc.imp.sprintf",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "mov r2, r6",
            "mov r3, sb",
            "mov r1, r5",
            "mov r0, sp",
            "bl loc.imp.sprintf",
            "mov r1, fp",
            "mov r0, sp",
            "bl rsym.nvram_set",
            "mov r1, r5",
            "mov r2, r6",
            "mov r3, r8",
            "mov r0, sp",
            "bl loc.imp.sprintf",
            "mov r0, sp",
            "mov r1, r7",
            "bl rsym.nvram_set",
            "mov r0, 0",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.nvram_loaddefault": {
        "function_address": "0x00006384",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x84",
            "mov r1, 0",
            "mov r2, 0x80",
            "mov r0, sp",
            "mov r5, sp",
            "ldr r4, [0x000063ec]",
            "bl loc.imp.memset",
            "ldr r0, [0x000063f0]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "bl loc.imp.system",
            "ldr r1, [0x000063f4]",
            "mov r0, sp",
            "ldr r2, [0x000063f8]",
            "add r1, r4, r1",
            "add r2, r4, r2",
            "bl loc.imp.sprintf",
            "mov r0, sp",
            "bl loc.imp.system",
            "ldr r0, [0x000063fc]",
            "add r0, r4, r0",
            "bl loc.imp.puts",
            "mov r0, 0",
            "add sp, sp, 0x84",
            "pop {r4, r5, pc}"
        ]
    },
    "loc.imp.system": {
        "function_address": "0x00005cf0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3cc]!"
        ]
    },
    "loc.imp.puts": {
        "function_address": "0x00005ce4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3d4]!"
        ]
    },
    "sym.acosNvramConfig_bget": {
        "function_address": "0x000067e4",
        "instructions": [
            "push {r4, lr}",
            "cmp r0, 0",
            "cmpne r1, 0",
            "ldr r4, [0x00006824]",
            "moveq r0, 0",
            "add r4, pc, r4",
            "popeq {r4, pc}",
            "cmp r2, 0",
            "bne 0x6810",
            "mov r0, r2",
            "pop {r4, pc}",
            "bl rsym.nvram_get",
            "cmp r0, 0",
            "ldreq r0, [0x00006828]",
            "addeq r0, r4, r0",
            "pop {r4, pc}"
        ]
    },
    "sym.acosNvramConfig_get_decode": {
        "function_address": "0x00006fa4",
        "instructions": [
            "push {r4, lr}",
            "mov r3, 0",
            "sub sp, sp, 8",
            "ldr r4, [0x00006fec]",
            "str r3, [sp, 4]",
            "bl rsym.acosNvramConfig_get",
            "subs r2, r0, 0",
            "add r4, pc, r4",
            "moveq r0, r2",
            "beq 0x6fe4",
            "ldr r3, [0x00006ff0]",
            "add r1, sp, 4",
            "add r4, r4, r3",
            "mov r0, r4",
            "bl fcn.00006400",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, pc}"
        ]
    },
    "rsym.acosNvramConfig_get": {
        "function_address": "0x00005d50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x38c]!"
        ]
    },
    "sym.acosNvramConfig_write": {
        "function_address": "0x00006aec",
        "instructions": [
            "cmp r0, 0",
            "cmpne r1, 0",
            "push {r4, lr}",
            "mov r4, r2",
            "bne 0x6b08",
            "mov r0, 1",
            "pop {r4, pc}",
            "bl rsym.nvram_set",
            "subs r3, r0, 0",
            "movne r3, 1",
            "cmp r4, 1",
            "movne r3, 0",
            "cmp r3, 0",
            "bne 0x6b34",
            "cmp r0, 0",
            "movgt r0, 0",
            "movle r0, 1",
            "pop {r4, pc}",
            "bl rsym.nvram_commit",
            "cmp r0, 0",
            "movgt r0, 0",
            "movle r0, 1",
            "pop {r4, pc}"
        ]
    },
    "sym.acosNvramConfig_readDefault": {
        "function_address": "0x00006a38",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r0, 0",
            "cmpne r1, 0",
            "ldr r6, [0x00006ae4]",
            "mov r7, r1",
            "mov r4, r0",
            "mov fp, r2",
            "movne r8, 0",
            "moveq r8, 1",
            "add r6, pc, r6",
            "beq 0x6ad4",
            "ldr sb, [0x00006ae8]",
            "ldr sl, [r6, sb]",
            "ldr r0, [sl]",
            "cmp r0, 0",
            "bne 0x6a8c",
            "b 0x6adc",
            "ldr r0, [sl, 0xc]!",
            "add r8, r8, 1",
            "cmp r0, 0",
            "beq 0x6ad4",
            "mov r1, r4",
            "bl loc.imp.strcmp",
            "subs r5, r0, 0",
            "bne 0x6a7c",
            "ldr r3, [r6, sb]",
            "add r8, r8, r8, lsl 1",
            "add r8, r3, r8, lsl 2",
            "ldr r4, [r8, 4]",
            "mov r0, r4",
            "bl loc.imp.strlen",
            "mov r1, r4",
            "cmp r0, fp",
            "movlo r2, r0",
            "movhs r2, fp",
            "mov r0, r7",
            "bl loc.imp.memcpy",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "loc.imp.memcpy": {
        "function_address": "0x00005ccc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 16, 20",
            "ldr pc, [ip, 0x3e4]!"
        ]
    }
}