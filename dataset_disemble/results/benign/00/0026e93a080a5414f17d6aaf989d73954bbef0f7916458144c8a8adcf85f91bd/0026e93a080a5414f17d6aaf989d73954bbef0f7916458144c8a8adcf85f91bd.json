{
    "sym.wbcCtxDcInfo": {
        "function_address": "0x00005f50",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "mov r14, r8",
            "sub rsp, 0x1608",
            "lea rbx, [rsp + 0x20]",
            "lea rbp, [rsp + 0x850]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + sym.wbcSetUidHwm], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x5fb5",
            "lea rdi, [rbx + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rdx, rbx",
            "mov rcx, rbp",
            "mov esi, 0x29",
            "mov rdi, r15",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x6040",
            "mov rdi, qword [rsp + 0x15f0]",
            "xor ebp, ebp",
            "xor r15d, r15d",
            "test rdi, rdi",
            "je 0x6002",
            "call sym.imp.free",
            "test ebx, ebx",
            "jne 0x6002",
            "mov eax, dword [rsp + 0x858]",
            "xor ebx, ebx",
            "mov qword [r12], rax",
            "mov qword [r13], r15",
            "xor r15d, r15d",
            "mov qword [r14], rbp",
            "xor ebp, ebp",
            "mov rdi, r15",
            "call fcn.000031b0",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov rdx, qword [rsp + 0x15f8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebx",
            "jne 0x61f7",
            "add rsp, 0x1608",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov edi, dword [rsp + 0x858]",
            "call fcn.00003200",
            "test rax, rax",
            "mov r15, rax",
            "je 0x6090",
            "mov edi, dword [rsp + 0x858]",
            "call fcn.00003200",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x60a8",
            "mov eax, dword [rsp + 0x850]",
            "mov r8, qword [rsp + 0x15f0]",
            "mov rdx, r8",
            "cmp eax, 0xda8",
            "ja 0x60c0",
            "mov rdi, rdx",
            "mov ebx, 8",
            "jmp 0x5fdb",
            "mov rdi, qword [rsp + 0x15f0]",
            "mov bl, 3",
            "xor ebp, ebp",
            "jmp 0x5fdb",
            "mov rdi, qword [rsp + 0x15f0]",
            "mov ebx, 3",
            "jmp 0x5fdb",
            "cmp byte [r8 + rax - 0xda9], 0",
            "jne 0x6081",
            "mov eax, dword [rsp + 0x858]",
            "test eax, eax",
            "je 0x61fc",
            "mov qword [rsp + 8], 0",
            "mov dword [rsp + 0x18], 8",
            "jmp 0x6192",
            "mov r8, qword [rsp + 0x10]",
            "mov rsi, rax",
            "mov qword [rsp + 0x18], rax",
            "sub rsi, r8",
            "mov rdi, r8",
            "call sym.imp.__strndup",
            "mov rdx, qword [rsp + 8]",
            "test rax, rax",
            "mov qword [r15 + rdx*8], rax",
            "mov rdx, qword [rsp + 0x18]",
            "je 0x60a8",
            "add rdx, 1",
            "mov esi, 0xa",
            "mov rdi, rdx",
            "mov qword [rsp + 0x10], rdx",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov rdx, qword [rsp + 0x10]",
            "je 0x61ca",
            "mov rsi, rax",
            "mov rdi, rdx",
            "mov qword [rsp + 0x10], rax",
            "sub rsi, rdx",
            "call sym.imp.__strndup",
            "mov rdx, qword [rsp + 8]",
            "test rax, rax",
            "mov r8, qword [rsp + 0x10]",
            "mov qword [rbp + rdx*8], rax",
            "je 0x60a8",
            "mov rcx, qword [rsp + 8]",
            "add r8, 1",
            "mov eax, ecx",
            "add rcx, 1",
            "add eax, 1",
            "cmp dword [rsp + 0x858], eax",
            "mov qword [rsp + 8], rcx",
            "jbe 0x61e3",
            "mov dword [rsp + 0x18], 0",
            "mov esi, 0xa",
            "mov rdi, r8",
            "mov qword [rsp + 0x10], r8",
            "call sym.imp.strchr",
            "test rax, rax",
            "jne 0x60f0",
            "mov ebx, dword [rsp + 0x18]",
            "mov rdx, qword [rsp + 0x15f0]",
            "test rdx, rdx",
            "mov rdi, rdx",
            "jne 0x5fe0",
            "jmp 0x5fe5",
            "mov rdx, qword [rsp + 0x15f0]",
            "test rdx, rdx",
            "mov rdi, rdx",
            "jne 0x5fe0",
            "jmp 0x5fe9",
            "mov rdx, qword [rsp + 0x15f0]",
            "xor eax, eax",
            "cmp byte [r8], 0",
            "je 0x61d2",
            "mov ebx, eax",
            "jmp 0x61b9",
            "call sym.imp.__stack_chk_fail",
            "mov eax, 8",
            "jmp 0x61ed"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00002d80",
        "instructions": [
            "jmp qword [reloc.strncpy]"
        ]
    },
    "fcn.00002ee0": {
        "function_address": "0x00002ee0",
        "instructions": [
            "jmp qword [reloc.wbcRequestResponse]"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00002d10",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "fcn.000031b0": {
        "function_address": "0x000031b0",
        "instructions": [
            "jmp qword [reloc.wbcFreeMemory]"
        ]
    },
    "fcn.00003200": {
        "function_address": "0x00003200",
        "instructions": [
            "jmp qword [reloc.wbcAllocateStringArray]"
        ]
    },
    "sym.imp.__strndup": {
        "function_address": "0x00003000",
        "instructions": [
            "jmp qword [reloc.__strndup]"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00002ec0",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00002e90",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "sym.wbcCtxEndpwent": {
        "function_address": "0x00009600",
        "instructions": [
            "test rdi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "je 0x9640",
            "mov eax, dword [rbx + 8]",
            "test eax, eax",
            "je 0x962a",
            "lea rdi, [0x0020d080]",
            "mov dword [rbx + 8], 0",
            "mov dword [rbx + 0xc], 0",
            "call sym.imp.winbindd_free_response",
            "mov rdi, rbx",
            "xor ecx, ecx",
            "xor edx, edx",
            "pop rbx",
            "mov esi, 8",
            "jmp fcn.00002ee0",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x9609"
        ]
    },
    "sym.imp.winbindd_free_response": {
        "function_address": "0x00003030",
        "instructions": [
            "jmp qword [reloc.winbindd_free_response]"
        ]
    },
    "fcn.00003230": {
        "function_address": "0x00003230",
        "instructions": [
            "jmp qword [reloc.wbcGetGlobalCtx]"
        ]
    },
    "sym.wbcCtxListTrusts": {
        "function_address": "0x00005950",
        "instructions": [
            "push r15",
            "push r14",
            "mov r8, rdi",
            "push r13",
            "push r12",
            "mov ecx, 0x1b5",
            "push rbp",
            "push rbx",
            "mov r12, rsi",
            "mov r13, rdx",
            "sub rsp, 0xde8",
            "mov qword [rsi], 0",
            "mov qword [rdx], 0",
            "lea rbx, [rsp + 0x30]",
            "xor edx, edx",
            "mov esi, 0x14",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0xdd8], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "rep stosq qword [rdi], rax",
            "mov rcx, rbx",
            "mov rdi, r8",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x5a18",
            "mov rax, qword [rsp + 0xdd0]",
            "test rax, rax",
            "je 0x59c5",
            "cmp byte [rax], 0",
            "jne 0x5a20",
            "xor r14d, r14d",
            "xor r15d, r15d",
            "mov ebp, 7",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rdi, r14",
            "call fcn.000031b0",
            "mov rdi, r15",
            "call sym.imp.free",
            "mov rdx, qword [rsp + 0xdd8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x5d84",
            "add rsp, 0xde8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "xor r14d, r14d",
            "xor r15d, r15d",
            "jmp 0x59d0",
            "mov edi, dword [rsp + 0x38]",
            "lea rdx, [0x00004e10]",
            "mov esi, 0x60",
            "add edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov r14, rax",
            "je 0x5cc0",
            "mov rdi, qword [rsp + 0xdd0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov r15, rax",
            "je 0x5ce0",
            "mov eax, dword [rsp + 0x38]",
            "test eax, eax",
            "je 0x5d67",
            "lea rax, [r14 + 0x10]",
            "mov qword [rsp + 0x20], r12",
            "mov dword [rsp + 0x18], 0",
            "mov dword [rsp + 0x1c], ebp",
            "mov r12, r15",
            "mov qword [rsp + 0x28], r13",
            "mov qword [rsp + 8], rax",
            "mov esi, 0xa",
            "mov rdi, r12",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x5aa7",
            "mov byte [rax], 0",
            "add rbp, 1",
            "mov esi, 0x5c",
            "mov rdi, r12",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov r13, rax",
            "je 0x5cd0",
            "mov byte [rax], 0",
            "mov rdi, r12",
            "call sym.imp.__strdup",
            "mov rsi, qword [rsp + 8]",
            "test rax, rax",
            "mov qword [rsi - 0x10], rax",
            "je 0x5ce0",
            "lea r12, [r13 + 1]",
            "mov esi, 0x5c",
            "mov rdi, r12",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x5cd0",
            "mov byte [rax], 0",
            "mov rdi, r12",
            "mov qword [rsp + 0x10], rax",
            "call sym.imp.__strdup",
            "mov r13, qword [rsp + 8]",
            "test rax, rax",
            "mov qword [r13 - 8], rax",
            "je 0x5ce0",
            "mov rdx, qword [rsp + 0x10]",
            "mov esi, 0x5c",
            "lea r12, [rdx + 1]",
            "mov rdi, r12",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x5cd0",
            "mov byte [rax], 0",
            "mov rsi, r13",
            "mov rdi, r12",
            "mov qword [rsp + 0x10], rax",
            "call fcn.00003120",
            "test eax, eax",
            "jne 0x5cf0",
            "mov rdx, qword [rsp + 0x10]",
            "mov esi, 0x5c",
            "lea r12, [rdx + 1]",
            "mov rdi, r12",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov r8, rax",
            "je 0x5cd0",
            "lea rdi, str.None",
            "mov byte [rax], 0",
            "mov rsi, r12",
            "mov ecx, 5",
            "lea r9, [rax + 1]",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x5cf7",
            "mov rax, qword [rsp + 8]",
            "mov dword [rax + 0x4c], 0",
            "mov esi, 0x5c",
            "mov rdi, r9",
            "mov qword [rsp + 0x10], r8",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov r12, rax",
            "je 0x5cd0",
            "mov r8, qword [rsp + 0x10]",
            "mov byte [rax], 0",
            "lea rdi, [rax + 1]",
            "cmp byte [r8 + 1], 0x59",
            "jne 0x5bee",
            "cmp byte [r8 + 2], 0x65",
            "jne 0x5bee",
            "cmp byte [r8 + 3], 0x73",
            "jne 0x5bee",
            "cmp byte [r8 + 4], 0",
            "jne 0x5bee",
            "mov rax, qword [rsp + 8]",
            "or dword [rax + 0x48], 1",
            "mov esi, 0x5c",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov rdx, rax",
            "je 0x5cd0",
            "mov byte [rax], 0",
            "cmp byte [r12 + 1], 0x59",
            "lea rdi, [rax + 1]",
            "jne 0x5c34",
            "cmp byte [r12 + 2], 0x65",
            "jne 0x5c34",
            "cmp byte [r12 + 3], 0x73",
            "jne 0x5c34",
            "cmp byte [r12 + 4], 0",
            "jne 0x5c34",
            "mov rax, qword [rsp + 8]",
            "or dword [rax + 0x48], 2",
            "mov esi, 0x5c",
            "mov qword [rsp + 0x10], rdx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x5cd0",
            "mov rdx, qword [rsp + 0x10]",
            "mov byte [rax], 0",
            "lea rsi, [rax + 1]",
            "cmp byte [rdx + 1], 0x59",
            "jne 0x5c79",
            "cmp byte [rdx + 2], 0x65",
            "jne 0x5c79",
            "cmp byte [rdx + 3], 0x73",
            "jne 0x5c79",
            "cmp byte [rdx + 4], 0",
            "jne 0x5c79",
            "mov rax, qword [rsp + 8]",
            "or dword [rax + 0x48], 4",
            "lea rdi, str.Offline",
            "mov ecx, 8",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x5c92",
            "mov rax, qword [rsp + 8]",
            "or dword [rax + 0x44], 8",
            "add dword [rsp + 0x18], 1",
            "add qword [rsp + 8], 0x60",
            "test rbp, rbp",
            "mov eax, dword [rsp + 0x18]",
            "je 0x5d89",
            "cmp eax, dword [rsp + 0x38]",
            "jae 0x5d89",
            "mov r12, rbp",
            "jmp 0x5a8b",
            "xor r15d, r15d",
            "mov ebp, 3",
            "jmp 0x59d0",
            "mov ebp, 8",
            "jmp 0x59d0",
            "mov ebp, 3",
            "jmp 0x59d0",
            "mov ebp, eax",
            "jmp 0x59d0",
            "lea rdi, str.External",
            "mov ecx, 9",
            "mov rsi, r12",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x5d1b",
            "mov rax, qword [rsp + 8]",
            "mov dword [rax + 0x4c], 3",
            "jmp 0x5b9f",
            "lea rdi, [0x00009d22]",
            "mov ecx, 7",
            "mov rsi, r12",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x5d3f",
            "mov rax, qword [rsp + 8]",
            "mov dword [rax + 0x4c], 1",
            "jmp 0x5b9f",
            "lea rdi, str.In_Forest",
            "mov ecx, 0xa",
            "mov rsi, r12",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x5cd0",
            "mov rax, qword [rsp + 8]",
            "mov dword [rax + 0x4c], 2",
            "jmp 0x5b9f",
            "mov dword [rsp + 0x18], 0",
            "movsxd rax, dword [rsp + 0x18]",
            "mov qword [r12], r14",
            "xor r14d, r14d",
            "mov qword [r13], rax",
            "jmp 0x59d0",
            "call sym.imp.__stack_chk_fail",
            "mov ebp, dword [rsp + 0x1c]",
            "mov r12, qword [rsp + 0x20]",
            "mov r13, qword [rsp + 0x28]",
            "jmp 0x5d6f"
        ]
    },
    "fcn.00003140": {
        "function_address": "0x00003140",
        "instructions": [
            "jmp qword [reloc.wbcAllocateMemory]"
        ]
    },
    "sym.imp.__strdup": {
        "function_address": "0x00002f60",
        "instructions": [
            "jmp qword [reloc.__strdup]"
        ]
    },
    "fcn.00003120": {
        "function_address": "0x00003120",
        "instructions": [
            "jmp qword [reloc.wbcStringToSid]"
        ]
    },
    "sym.wbcCtxGetgrlist": {
        "function_address": "0x00009940",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "mov rbx, rdi",
            "sub rsp, 0x848",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x838], rax",
            "xor eax, eax",
            "test rdi, rdi",
            "je 0x9a20",
            "mov edx, dword [rbx + 0x14]",
            "cmp edx, dword [rbx + 0x10]",
            "jb 0x99d2",
            "lea rdi, [0x0020de40]",
            "mov dword [rbx + 0x14], 0",
            "call sym.imp.winbindd_free_response",
            "lea rsi, [0x0020de40]",
            "xor eax, eax",
            "mov ecx, 0x1b5",
            "mov rdx, rsp",
            "mov rdi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rsp",
            "mov cx, 0x106",
            "rep stosq qword [rdi], rax",
            "mov rcx, rsi",
            "mov rdi, rbx",
            "mov esi, 0x2d",
            "mov dword [rsp + 0x118], 0x1f4",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x9a01",
            "mov eax, dword [0x0020de48]",
            "mov edx, dword [rbx + 0x14]",
            "mov dword [rbx + 0x10], eax",
            "imul rdx, rdx, 0x20c",
            "xor esi, esi",
            "mov rdi, rdx",
            "add rdi, qword [0x0020ebe0]",
            "call fcn.00006680",
            "mov rdx, rax",
            "mov qword [rbp], rax",
            "mov eax, 3",
            "test rdx, rdx",
            "je 0x9a01",
            "add dword [rbx + 0x14], 1",
            "xor al, al",
            "mov rcx, qword [rsp + 0x838]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x9a2d",
            "add rsp, 0x848",
            "pop rbx",
            "pop rbp",
            "ret",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x996b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00006680": {
        "function_address": "0x00006680",
        "instructions": [
            "push r15",
            "push r14",
            "lea rdx, [0x000064f0]",
            "push r13",
            "push r12",
            "mov r15, rdi",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "mov esi, 0x20",
            "sub rsp, 0x18",
            "mov qword [rsp + 8], rdi",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov r14, rax",
            "je 0x6809",
            "mov rdi, r15",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14], rax",
            "je 0x67e0",
            "lea rdi, [r15 + 0x100]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14 + 8], rax",
            "je 0x67e0",
            "mov ebp, dword [r15 + 0x204]",
            "mov eax, dword [r15 + 0x200]",
            "mov esi, 8",
            "lea edi, [rbp + 1]",
            "mov dword [r14 + 0x10], eax",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov qword [r14 + 0x18], rax",
            "je 0x67e0",
            "test rbx, rbx",
            "je 0x680d",
            "test ebp, ebp",
            "je 0x680d",
            "xor r12d, r12d",
            "xor r13d, r13d",
            "jmp 0x677b",
            "mov byte [rax], 0",
            "mov r15, r12",
            "add r15, qword [r14 + 0x18]",
            "mov rdi, rbx",
            "call sym.imp.__strdup",
            "mov qword [r15], rax",
            "mov rax, qword [r14 + 0x18]",
            "cmp qword [rax + r12], 0",
            "je 0x67e0",
            "mov rcx, qword [rsp + 8]",
            "add r13d, 1",
            "add r12, 8",
            "lea rbx, [rbp + 1]",
            "cmp r13d, dword [rcx + 0x204]",
            "jae 0x6800",
            "test rbx, rbx",
            "je 0x6800",
            "mov esi, 0x2c",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov rbp, rax",
            "jne 0x6730",
            "movsxd r13, r13d",
            "mov rdi, rbx",
            "lea rbp, [r13*8]",
            "mov r12, rbp",
            "add r12, qword [r14 + 0x18]",
            "add rbp, 8",
            "call sym.imp.__strdup",
            "mov qword [r12], rax",
            "mov rax, qword [r14 + 0x18]",
            "cmp qword [rax + r13*8], 0",
            "je 0x67e0",
            "mov qword [rax + rbp], 0",
            "mov rax, r14",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdi, r14",
            "call fcn.000031b0",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "movsxd rbp, r13d",
            "shl rbp, 3",
            "jmp 0x67bd",
            "xor eax, eax",
            "jmp 0x67c8",
            "xor ebp, ebp",
            "jmp 0x67bd"
        ]
    },
    "sym.wbcCtxCredentialSave": {
        "function_address": "0x00007050",
        "instructions": [
            "push r13",
            "push r12",
            "mov ecx, 0x106",
            "push rbp",
            "push rbx",
            "mov r12, rdi",
            "mov r13, rdx",
            "mov edx, 0xff",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x11c]",
            "call sym.imp.strncpy",
            "lea rdi, [rsp + 0x21c]",
            "mov edx, 0xff",
            "mov rsi, r13",
            "call sym.imp.strncpy",
            "call sym.imp.getuid",
            "mov rdx, rsp",
            "mov rcx, rbp",
            "mov esi, 0x3d",
            "mov rdi, r12",
            "mov dword [rsp + 0x118], eax",
            "call fcn.00002ee0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x70fa",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.getuid": {
        "function_address": "0x00002ea0",
        "instructions": [
            "jmp qword [reloc.getuid]"
        ]
    },
    "sym.wbcCtxAllocateUid": {
        "function_address": "0x00003c00",
        "instructions": [
            "push rbx",
            "mov r9, rdi",
            "mov ecx, 0x106",
            "mov rbx, rsi",
            "mov esi, 0x1e",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea r8, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, r8",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, r8",
            "mov rdi, r9",
            "call fcn.00002d40",
            "test eax, eax",
            "jne 0x38de",
            "mov edx, dword [rsp + 0x838]",
            "mov dword [rbx], edx",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x38fa",
            "add rsp, 0x15e0",
            "pop rbx",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x3c10",
            "jmp 0x3880",
            "mov eax, 5",
            "ret"
        ]
    },
    "fcn.00002d40": {
        "function_address": "0x00002d40",
        "instructions": [
            "jmp qword [reloc.wbcRequestResponsePriv]"
        ]
    },
    "sym.wbcCtxChangeUserPassword": {
        "function_address": "0x00006ff0",
        "instructions": [
            "sub rsp, 0x68",
            "mov r10, rdi",
            "mov r11, rcx",
            "xor eax, eax",
            "mov rdi, rsp",
            "mov ecx, 0xb",
            "rep stosq qword [rdi], rax",
            "xor r8d, r8d",
            "mov qword [rsp], rsi",
            "mov qword [rsp + 0x18], rdx",
            "mov rsi, rsp",
            "xor edx, edx",
            "mov rdi, r10",
            "mov dword [rsp + 0x14], 1",
            "mov qword [rsp + 0x38], r11",
            "call fcn.00002e20",
            "add rsp, 0x68",
            "ret"
        ]
    },
    "fcn.00002e20": {
        "function_address": "0x00002e20",
        "instructions": [
            "jmp qword [reloc.wbcCtxChangeUserPasswordEx]"
        ]
    },
    "sym.wbcCtxAuthenticateUser": {
        "function_address": "0x00004910",
        "instructions": [
            "sub rsp, 0x68",
            "mov r9, rdi",
            "mov ecx, 0xa",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x58], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "rep stosq qword [rdi], rax",
            "mov qword [rsp], rsi",
            "mov qword [rsp + 0x28], rdx",
            "mov rsi, rsp",
            "xor edx, edx",
            "mov rdi, r9",
            "mov dword [rsp + 0x20], 1",
            "call fcn.00002ed0",
            "mov rcx, qword [rsp + 0x58]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x4965",
            "add rsp, 0x68",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00002ed0": {
        "function_address": "0x00002ed0",
        "instructions": [
            "jmp qword [reloc.wbcCtxAuthenticateUserEx]"
        ]
    },
    "sym.wbcCtxGidToSid": {
        "function_address": "0x00003fd0",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov r9, rdi",
            "mov ecx, 0x106",
            "mov rbp, rdx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov dword [rsp + 0x118], esi",
            "mov esi, 0x1d",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, rbx",
            "mov rdi, r9",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x3fa9",
            "lea rdi, [rbx + 8]",
            "mov rsi, rbp",
            "call fcn.00003120",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x3fc6",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rdx, rdx",
            "je 0x3fe0",
            "jmp 0x3f40",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcLookupRids": {
        "function_address": "0x00008c20",
        "instructions": [
            "sub rsp, 0x10",
            "push r9",
            "mov r9, r8",
            "mov r8, rcx",
            "mov rcx, rdx",
            "mov edx, esi",
            "mov rsi, rdi",
            "xor edi, edi",
            "call fcn.00002d60",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "fcn.00002d60": {
        "function_address": "0x00002d60",
        "instructions": [
            "jmp qword [reloc.wbcCtxLookupRids]"
        ]
    },
    "sym.wbcCtxGetgrnam": {
        "function_address": "0x00009040",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x908d",
            "test rdx, rdx",
            "mov r12, rdx",
            "jne 0x90c0",
            "mov ebp, 5",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x910d",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "lea rdi, [rsp + 0x118]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 4",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x9092",
            "mov rsi, qword [rsp + 0x15d0]",
            "lea rdi, [rbx + 8]",
            "call fcn.00006680",
            "test rax, rax",
            "mov qword [r12], rax",
            "mov eax, 3",
            "cmove ebp, eax",
            "jmp 0x9092",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcSidToStringBuf": {
        "function_address": "0x00008dd0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov ebp, edx",
            "sub rsp, 8",
            "test rdi, rdi",
            "je 0x8f38",
            "movzx eax, byte [rdi + 6]",
            "movzx r13d, byte [rdi + 7]",
            "lea r8, str.S__hhu_",
            "movzx r9d, byte [rdi]",
            "movsxd rsi, ebp",
            "mov rcx, 0xffffffffffffffff",
            "shl rax, 8",
            "mov rdx, rax",
            "movzx eax, byte [rdi + 5]",
            "shl rax, 0x10",
            "add rax, rdx",
            "mov edx, 1",
            "add r13, rax",
            "movzx eax, byte [rdi + 4]",
            "shl rax, 0x18",
            "add rax, r13",
            "movzx r13d, byte [rdi + 3]",
            "shl r13, 0x20",
            "add rax, r13",
            "movzx r13d, byte [rdi + 2]",
            "mov rdi, r12",
            "shl r13, 0x28",
            "add r13, rax",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "mov ebx, eax",
            "mov eax, 0xfffffffe",
            "mov esi, ebp",
            "cmp r13, rax",
            "ja 0x8f00",
            "sub esi, ebx",
            "mov eax, 0",
            "movsxd rdi, ebx",
            "cmovs esi, eax",
            "lea r8, str._llu",
            "add rdi, r12",
            "movsxd rsi, esi",
            "mov r9, r13",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "call sym.imp.__snprintf_chk",
            "add ebx, eax",
            "xor r14d, r14d",
            "xor r13d, r13d",
            "cmp byte [r15 + 1], 0",
            "je 0x8eeb",
            "nop dword [rax + rax]",
            "movsxd rax, r14d",
            "mov ecx, ebp",
            "movsxd rdi, ebx",
            "sub ecx, ebx",
            "mov r9d, dword [r15 + rax*4 + 8]",
            "lea r8, [0x00009e0c]",
            "cmovs ecx, r13d",
            "mov edx, 1",
            "add rdi, r12",
            "movsxd rsi, ecx",
            "xor eax, eax",
            "mov rcx, 0xffffffffffffffff",
            "call sym.imp.__snprintf_chk",
            "add ebx, eax",
            "movzx eax, byte [r15 + 1]",
            "add r14d, 1",
            "cmp eax, r14d",
            "jg 0x8ea8",
            "add rsp, 8",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "sub esi, ebx",
            "mov eax, 0",
            "movsxd rdi, ebx",
            "cmovs esi, eax",
            "lea r8, str.0x_llx",
            "add rdi, r12",
            "movsxd rsi, esi",
            "mov r9, r13",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "call sym.imp.__snprintf_chk",
            "add ebx, eax",
            "jmp 0x8e96",
            "lea rsi, str._NULL_SID_",
            "mov rdi, r12",
            "movsxd rdx, edx",
            "call sym.imp.strlcpy",
            "add rsp, 8",
            "mov eax, 0xa",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "sym.imp.__snprintf_chk": {
        "function_address": "0x00002d00",
        "instructions": [
            "jmp qword [reloc.__snprintf_chk]"
        ]
    },
    "sym.imp.strlcpy": {
        "function_address": "0x00003060",
        "instructions": [
            "jmp qword [reloc.strlcpy]"
        ]
    },
    "sym.wbcStrDup": {
        "function_address": "0x00003510",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "sub rsp, 8",
            "call sym.imp.strlen",
            "lea rbx, [rax + 1]",
            "xor edx, edx",
            "mov esi, 1",
            "mov rdi, rbx",
            "call fcn.00003140",
            "test rax, rax",
            "mov rcx, rax",
            "je 0x354a",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, rax",
            "call sym.imp.memcpy",
            "mov rcx, rax",
            "add rsp, 8",
            "mov rax, rcx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00002e50",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00003070",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "sym.wbcCtxLookupUserSids": {
        "function_address": "0x00007f90",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rcx",
            "push r13",
            "push r12",
            "mov ecx, 0x106",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov r9, rsi",
            "sub rsp, 0x15f8",
            "lea rbx, [rsp + 0x10]",
            "lea r12, [rsp + 0x840]",
            "mov qword [rsp + 8], r8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15e8], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, r12",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x8120",
            "lea rsi, [rsp + 0x128]",
            "mov r13d, edx",
            "mov rdi, r9",
            "mov edx, 0x100",
            "call fcn.00003080",
            "cmp r13b, 1",
            "mov rcx, r12",
            "mov rdx, rbx",
            "sbb esi, esi",
            "mov rdi, rbp",
            "add esi, 0x31",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r13d, eax",
            "je 0x8060",
            "mov rdi, r12",
            "call sym.imp.winbindd_free_response",
            "mov rcx, qword [rsp + 0x15e8]",
            "xor rcx, qword fs:[0x28]",
            "mov eax, r13d",
            "jne 0x815b",
            "add rsp, 0x15f8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov edi, dword [rsp + 0x848]",
            "test edi, edi",
            "je 0x807a",
            "cmp qword [rsp + 0x15e0], 0",
            "je 0x8150",
            "xor edx, edx",
            "mov esi, 0x44",
            "call fcn.00003140",
            "test rax, rax",
            "mov r14, rax",
            "je 0x8130",
            "mov eax, dword [rsp + 0x848]",
            "mov rbx, qword [rsp + 0x15e0]",
            "test eax, eax",
            "je 0x8140",
            "xor ebp, ebp",
            "jmp 0x80cb",
            "mov rdi, rbx",
            "add ebp, 1",
            "call sym.imp.strlen",
            "lea rbx, [rbx + rax + 1]",
            "mov eax, dword [rsp + 0x848]",
            "cmp eax, ebp",
            "jbe 0x8140",
            "mov esi, 0xa",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x80e0",
            "mov byte [rax], 0",
            "mov eax, ebp",
            "mov rdi, rbx",
            "mov rdx, rax",
            "shl rdx, 6",
            "lea rsi, [rdx + rax*4]",
            "add rsi, r14",
            "call fcn.00003120",
            "test eax, eax",
            "je 0x80b0",
            "mov rdi, r12",
            "mov dword [rsp + 8], eax",
            "call sym.imp.winbindd_free_response",
            "mov rdi, r14",
            "call fcn.000031b0",
            "mov eax, dword [rsp + 8]",
            "mov r13d, eax",
            "jmp 0x802b",
            "mov r13d, 5",
            "jmp 0x8023",
            "mov r13d, 3",
            "jmp 0x8023",
            "mov dword [r15], eax",
            "mov rax, qword [rsp + 8]",
            "mov qword [rax], r14",
            "jmp 0x8023",
            "mov r13d, 8",
            "jmp 0x8023",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00003080": {
        "function_address": "0x00003080",
        "instructions": [
            "jmp qword [reloc.wbcSidToStringBuf]"
        ]
    },
    "sym.wbcRequestResponsePriv": {
        "function_address": "0x00003830",
        "instructions": [
            "sub rsp, 8",
            "test rdi, rdi",
            "je 0x3870",
            "mov rdi, qword [rdi]",
            "call sym.imp.winbindd_priv_request_response",
            "lea edx, [rax + 1]",
            "mov eax, 9",
            "cmp edx, 2",
            "jbe 0x3858",
            "add rsp, 8",
            "ret",
            "lea rax, [0x00009c14]",
            "mov eax, dword [rax + rdx*4]",
            "add rsp, 8",
            "ret",
            "xor edi, edi",
            "jmp 0x383c"
        ]
    },
    "sym.imp.winbindd_priv_request_response": {
        "function_address": "0x00003180",
        "instructions": [
            "jmp qword [reloc.winbindd_priv_request_response]"
        ]
    },
    "sym.wbcCtxLookupRids": {
        "function_address": "0x00008900",
        "instructions": [
            "push r15",
            "push r14",
            "mov r10, rsi",
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "sub rsp, 0x1638",
            "mov rax, qword [rsp + 0x1670]",
            "mov qword [rsp + 0x10], rdi",
            "lea rdi, [rsp + 0x50]",
            "lea rbx, [rsp + 0x880]",
            "mov dword [rsp + 8], edx",
            "mov qword [rsp + 0x18], r8",
            "mov qword [rsp], rdi",
            "mov qword [rsp + 0x20], r9",
            "mov qword [rsp + 0x28], rax",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1628], rax",
            "xor eax, eax",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x8976",
            "test edx, edx",
            "jne 0x89d0",
            "mov ebp, 5",
            "xor r13d, r13d",
            "xor r12d, r12d",
            "xor r14d, r14d",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rdi, r14",
            "call fcn.000031b0",
            "mov rdi, r12",
            "call fcn.000031b0",
            "mov rdi, r13",
            "call fcn.000031b0",
            "mov rdx, qword [rsp + 0x1628]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x8c18",
            "add rsp, 0x1638",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rax, qword [rsp]",
            "mov rdi, r10",
            "mov edx, 0x100",
            "xor r13d, r13d",
            "xor ebp, ebp",
            "lea rsi, [rax + 0x118]",
            "call fcn.00003080",
            "movsxd rax, dword [rsp + 8]",
            "mov rdx, rax",
            "mov qword [rsp + 0x30], rax",
            "lea rax, [rax + rax*4]",
            "lea r15, [rdx + rax*2 + 1]",
            "mov rdi, r15",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r14, rax",
            "je 0x8ab0",
            "mov qword [rsp + 0x38], rbx",
            "mov rbx, rbp",
            "mov rbp, qword [rsp + 0x30]",
            "nop dword [rax]",
            "mov r9d, dword [r12 + rbx*4]",
            "lea rdi, [r14 + r13]",
            "mov rsi, r15",
            "lea r8, [0x00009de9]",
            "sub rsi, r13",
            "xor eax, eax",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "add rbx, 1",
            "call sym.imp.__snprintf_chk",
            "cdqe",
            "add r13, rax",
            "cmp rbp, rbx",
            "ja 0x8a28",
            "mov rbx, qword [rsp + 0x38]",
            "mov rdx, qword [rsp]",
            "lea r10, [r13 + 1]",
            "mov rdi, qword [rsp + 0x10]",
            "mov esi, 0x17",
            "mov byte [r14 + r13], 0",
            "mov dword [rsp + 0x878], r10d",
            "mov qword [rsp + 0x870], r14",
            "mov rcx, rbx",
            "call fcn.00002ee0",
            "mov rdi, r14",
            "mov ebp, eax",
            "call sym.imp.free",
            "test ebp, ebp",
            "je 0x8ac8",
            "xor r13d, r13d",
            "xor r12d, r12d",
            "xor r14d, r14d",
            "jmp 0x8984",
            "mov ebp, 3",
            "xor r13d, r13d",
            "xor r12d, r12d",
            "xor r14d, r14d",
            "jmp 0x8984",
            "lea rdi, [rbx + 8]",
            "call fcn.00002f00",
            "test rax, rax",
            "mov r14, rax",
            "je 0x8ab0",
            "mov edi, dword [rsp + 8]",
            "call fcn.00003200",
            "test rax, rax",
            "mov r12, rax",
            "je 0x8bad",
            "mov rdi, qword [rsp + 0x30]",
            "xor edx, edx",
            "mov esi, 4",
            "call fcn.00003140",
            "test rax, rax",
            "mov r13, rax",
            "je 0x8bba",
            "lea rax, [rsp + 0x48]",
            "mov qword [rsp], r14",
            "mov dword [rsp + 0x10], ebp",
            "mov rdi, qword [rsp + 0x1620]",
            "xor r15d, r15d",
            "mov r14, qword [rsp + 0x30]",
            "mov qword [rsp + 8], rbx",
            "mov rbp, rax",
            "jmp 0x8b95",
            "mov edx, 0xa",
            "mov rsi, rbp",
            "call sym.imp.strtoul",
            "mov rdi, qword [rsp + 0x48]",
            "mov dword [r13 + r15*4], eax",
            "cmp byte [rdi], 0x20",
            "jne 0x8b9a",
            "lea rbx, [rdi + 1]",
            "mov esi, 0xa",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov qword [rsp + 0x48], rax",
            "je 0x8b9a",
            "mov byte [rax], 0",
            "mov rdi, rbx",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r12 + r15*8], rax",
            "je 0x8be0",
            "mov rax, qword [rsp + 0x48]",
            "add r15, 1",
            "cmp r14, r15",
            "lea rdi, [rax + 1]",
            "jbe 0x8bc4",
            "cmp byte [rdi], 0",
            "jne 0x8b38",
            "mov r14, qword [rsp]",
            "mov rbx, qword [rsp + 8]",
            "mov ebp, 8",
            "jmp 0x8984",
            "mov ebp, 3",
            "xor r13d, r13d",
            "jmp 0x8984",
            "mov ebp, 3",
            "jmp 0x8984",
            "cmp byte [rdi], 0",
            "mov r14, qword [rsp]",
            "mov ebp, dword [rsp + 0x10]",
            "mov rbx, qword [rsp + 8]",
            "je 0x8bf3",
            "mov ebp, 8",
            "jmp 0x8984",
            "mov r14, qword [rsp]",
            "mov rbx, qword [rsp + 8]",
            "mov ebp, 3",
            "jmp 0x8984",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rax], r14",
            "mov rax, qword [rsp + 0x20]",
            "mov qword [rax], r12",
            "mov rax, qword [rsp + 0x28]",
            "mov qword [rax], r13",
            "jmp 0x89a4",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x000030f0",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "fcn.00002f00": {
        "function_address": "0x00002f00",
        "instructions": [
            "jmp qword [reloc.wbcStrDup]"
        ]
    },
    "sym.imp.strtoul": {
        "function_address": "0x000031c0",
        "instructions": [
            "jmp qword [reloc.strtoul]"
        ]
    },
    "sym.wbcCtxLookupSid": {
        "function_address": "0x00007b80",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r9, rsi",
            "mov r14, rdx",
            "mov edx, 0x100",
            "sub rsp, 0x15e8",
            "mov r12, r8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "lea rsi, [rsp + 0x118]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, r9",
            "call fcn.00003080",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 0x15",
            "mov rdi, r15",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x62e0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x6367",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdi, [rbx + 8]",
            "call fcn.00002f00",
            "test rax, rax",
            "mov r15, rax",
            "je 0x6340",
            "lea rdi, [rbx + 0x108]",
            "call fcn.00002f00",
            "test rax, rax",
            "mov rdi, rax",
            "je 0x6360",
            "test r14, r14",
            "je 0x6310",
            "mov qword [r14], r15",
            "xor r15d, r15d",
            "test r13, r13",
            "je 0x631b",
            "mov qword [r13], rdi",
            "xor edi, edi",
            "test r12, r12",
            "je 0x632b",
            "mov eax, dword [rsp + 0xa38]",
            "mov dword [r12], eax",
            "call fcn.000031b0",
            "mov rdi, r15",
            "call fcn.000031b0",
            "jmp 0x62ae",
            "xor edi, edi",
            "mov ebp, 3",
            "call fcn.000031b0",
            "mov rdi, r15",
            "call fcn.000031b0",
            "jmp 0x62ae",
            "mov ebp, 3",
            "jmp 0x632b",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x7b90",
            "jmp 0x6230",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcCtxGetpwnam": {
        "function_address": "0x00006570",
        "instructions": [
            "test rsi, rsi",
            "je 0x657a",
            "test rdx, rdx",
            "jne 0x6580",
            "mov eax, 5",
            "ret",
            "jmp 0x9200",
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "mov edx, 0xff",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 1",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x9286",
            "lea rdi, [rbx + 8]",
            "call fcn.000065b0",
            "test rax, rax",
            "mov qword [r12], rax",
            "mov eax, 3",
            "cmove ebp, eax",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x92a9",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.000065b0": {
        "function_address": "0x000065b0",
        "instructions": [
            "push rbp",
            "push rbx",
            "lea rdx, [0x000064b0]",
            "mov rbp, rdi",
            "mov esi, 0x30",
            "mov edi, 1",
            "sub rsp, 8",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x6678",
            "mov rdi, rbp",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx], rax",
            "je 0x6660",
            "lea rdi, [rbp + 0x100]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 8], rax",
            "je 0x6660",
            "lea rdi, [rbp + 0x208]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x18], rax",
            "je 0x6660",
            "lea rdi, [rbp + 0x408]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x28], rax",
            "je 0x6660",
            "lea rdi, [rbp + 0x308]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x20], rax",
            "je 0x6660",
            "mov eax, dword [rbp + 0x200]",
            "mov dword [rbx + 0x10], eax",
            "mov eax, dword [rbp + 0x204]",
            "mov dword [rbx + 0x14], eax",
            "mov rax, rbx",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "mov rdi, rbx",
            "call fcn.000031b0",
            "add rsp, 8",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "ret",
            "xor eax, eax",
            "jmp 0x6654"
        ]
    },
    "sym.wbcCtxResolveWinsByName": {
        "function_address": "0x00005db0",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "mov edx, 0xff",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 0x2c",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x5e48",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x5e67",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "lea rdi, [rbx + 8]",
            "call fcn.00002f00",
            "test rax, rax",
            "je 0x5e60",
            "mov qword [r12], rax",
            "jmp 0x5e1e",
            "mov ebp, 3",
            "jmp 0x5e1e",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxLogoffUser": {
        "function_address": "0x000071d0",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rcx",
            "push r12",
            "push rbp",
            "mov r12, rdi",
            "push rbx",
            "mov ecx, 0x106",
            "mov r14d, edx",
            "mov edx, 0xff",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "mov rbx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "test r13, r13",
            "mov dword [rsp + 0x318], r14d",
            "je 0x718f",
            "lea rdi, [rsp + 0x218]",
            "mov edx, 0xff",
            "mov rsi, r13",
            "call sym.imp.strncpy",
            "mov rdx, rbx",
            "mov rcx, rbp",
            "mov esi, 0x10",
            "mov rdi, r12",
            "call fcn.00002ee0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x71c5",
            "add rsp, 0x15e0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x71e0",
            "jmp 0x7110",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcCtxChangeUserPasswordEx": {
        "function_address": "0x00006bd0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x1618",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1608], rax",
            "xor eax, eax",
            "cmp qword [rsi], 0",
            "je 0x6c90",
            "test rdx, rdx",
            "mov r15, rdi",
            "mov r12, rdx",
            "mov r13, rcx",
            "je 0x6c16",
            "mov qword [rdx], 0",
            "test r8, r8",
            "je 0x6c22",
            "mov qword [r8], 0",
            "test r13, r13",
            "je 0x6c2f",
            "mov dword [r13], 0xffffffff",
            "lea rbp, [rsp + 0x30]",
            "xor eax, eax",
            "mov ecx, 0x106",
            "lea r14, [rsp + 0x860]",
            "mov rdi, rbp",
            "rep stosq qword [rdi], rax",
            "mov rdi, r14",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov eax, dword [rbx + 0x14]",
            "cmp eax, 1",
            "je 0x6cc0",
            "cmp eax, 2",
            "jne 0x6c90",
            "mov rsi, qword [rbx]",
            "test rsi, rsi",
            "je 0x6c90",
            "mov rcx, qword [rbx + 8]",
            "test rcx, rcx",
            "je 0x6c90",
            "mov r9d, dword [rbx + 0x28]",
            "test r9d, r9d",
            "jne 0x6da8",
            "cmp qword [rbx + 0x30], 0",
            "je 0x6db3",
            "nop dword [rax]",
            "mov eax, 5",
            "mov rdx, qword [rsp + 0x1608]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x6fc5",
            "add rsp, 0x1618",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rsi, qword [rbx]",
            "mov qword [rsp], r8",
            "test rsi, rsi",
            "je 0x6c90",
            "lea rdi, [rbp + 0x118]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rsi, qword [rbx + 0x18]",
            "mov r8, qword [rsp]",
            "test rsi, rsi",
            "je 0x6cff",
            "lea rdi, [rbp + 0x218]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov r8, qword [rsp]",
            "mov rsi, qword [rbx + 0x38]",
            "mov ebx, 0xf",
            "test rsi, rsi",
            "je 0x6d26",
            "lea rdi, [rbp + 0x318]",
            "mov edx, 0xff",
            "mov qword [rsp], r8",
            "call sym.imp.strncpy",
            "mov r8, qword [rsp]",
            "mov rcx, r14",
            "mov rdx, rbp",
            "mov esi, ebx",
            "mov rdi, r15",
            "mov qword [rsp], r8",
            "call fcn.00002ee0",
            "test eax, eax",
            "je 0x6c95",
            "test r12, r12",
            "mov r8, qword [rsp]",
            "je 0x6d71",
            "mov eax, dword [rsp + 0x868]",
            "test eax, eax",
            "je 0x6d71",
            "mov rsi, r12",
            "mov rdi, r14",
            "mov qword [rsp], r8",
            "call fcn.00003620",
            "test eax, eax",
            "mov r8, qword [rsp]",
            "jne 0x6c95",
            "test r8, r8",
            "je 0x6d89",
            "mov rsi, r8",
            "mov rdi, r14",
            "call fcn.000036b0",
            "test eax, eax",
            "jne 0x6c95",
            "test r13, r13",
            "je 0x6d99",
            "mov eax, dword [rsp + 0xb88]",
            "mov dword [r13], eax",
            "mov eax, 0xd",
            "jmp 0x6c95",
            "cmp qword [rbx + 0x30], 0",
            "je 0x6c90",
            "mov r10d, dword [rbx + 0x18]",
            "test r10d, r10d",
            "je 0x6f40",
            "cmp qword [rbx + 0x20], 0",
            "je 0x6c90",
            "mov r11d, dword [rbx + 0x48]",
            "test r11d, r11d",
            "jne 0x6f50",
            "cmp qword [rbx + 0x50], 0",
            "jne 0x6c90",
            "nop dword [rax + rax]",
            "mov eax, dword [rbx + 0x38]",
            "test eax, eax",
            "mov dword [rsp], eax",
            "je 0x6f60",
            "mov rax, qword [rbx + 0x40]",
            "test rax, rax",
            "mov qword [rsp + 8], rax",
            "je 0x6c90",
            "lea rdi, [rbp + 0x118]",
            "mov edx, 0xff",
            "mov qword [rsp + 0x28], r8",
            "mov dword [rsp + 0x24], r11d",
            "mov dword [rsp + 0x18], r10d",
            "mov dword [rsp + 0x20], r9d",
            "mov qword [rsp + 0x10], rcx",
            "call sym.imp.strncpy",
            "mov rcx, qword [rsp + 0x10]",
            "lea rdi, [rbp + 0x218]",
            "mov edx, 0xff",
            "mov rsi, rcx",
            "call sym.imp.strncpy",
            "mov eax, dword [rsp]",
            "mov rsi, qword [rsp + 8]",
            "lea rdi, [rbp + 0x318]",
            "mov ecx, 0x518",
            "movzx edx, ax",
            "mov word [rsp + 0x54c], ax",
            "call sym.imp.__memcpy_chk",
            "mov r9d, dword [rsp + 0x20]",
            "mov r10d, dword [rsp + 0x18]",
            "mov r11d, dword [rsp + 0x24]",
            "mov r8, qword [rsp + 0x28]",
            "mov rsi, qword [rbx + 0x50]",
            "test rsi, rsi",
            "je 0x6ec6",
            "lea rdi, [rbp + 0x530]",
            "movzx edx, r11w",
            "mov ecx, 0x300",
            "mov qword [rsp + 0x10], r8",
            "mov dword [rsp + 8], r10d",
            "mov dword [rsp], r9d",
            "mov word [rsp + 0x764], r11w",
            "call sym.imp.__memcpy_chk",
            "mov r8, qword [rsp + 0x10]",
            "mov r10d, dword [rsp + 8]",
            "mov r9d, dword [rsp]",
            "mov rsi, qword [rbx + 0x20]",
            "test rsi, rsi",
            "je 0x6eff",
            "lea rdi, [rbp + 0x51e]",
            "movzx edx, r10w",
            "mov ecx, 0x312",
            "mov qword [rsp + 8], r8",
            "mov dword [rsp], r9d",
            "mov word [rsp + 0x55e], r10w",
            "call sym.imp.__memcpy_chk",
            "mov r8, qword [rsp + 8]",
            "mov r9d, dword [rsp]",
            "mov rsi, qword [rbx + 0x30]",
            "mov ebx, 0x11",
            "test rsi, rsi",
            "je 0x6d26",
            "lea rdi, [rbp + 0x736]",
            "movzx edx, r9w",
            "mov ecx, 0xfa",
            "mov qword [rsp], r8",
            "mov word [rsp + 0x776], r9w",
            "call sym.imp.__memcpy_chk",
            "mov r8, qword [rsp]",
            "jmp 0x6d26",
            "cmp qword [rbx + 0x20], 0",
            "jne 0x6c90",
            "jmp 0x6dcb",
            "cmp qword [rbx + 0x50], 0",
            "jne 0x6de8",
            "jmp 0x6c90",
            "cmp qword [rbx + 0x40], 0",
            "jne 0x6c90",
            "lea rdi, [rbp + 0x118]",
            "mov edx, 0xff",
            "mov qword [rsp + 0x18], r8",
            "mov dword [rsp + 0x20], r11d",
            "mov dword [rsp + 0x10], r10d",
            "mov dword [rsp + 8], r9d",
            "mov qword [rsp], rcx",
            "call sym.imp.strncpy",
            "mov rcx, qword [rsp]",
            "lea rdi, [rbp + 0x218]",
            "mov edx, 0xff",
            "mov rsi, rcx",
            "call sym.imp.strncpy",
            "mov r9d, dword [rsp + 8]",
            "mov r10d, dword [rsp + 0x10]",
            "mov r11d, dword [rsp + 0x20]",
            "mov r8, qword [rsp + 0x18]",
            "jmp 0x6e83",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00003620": {
        "function_address": "0x00003620",
        "instructions": [
            "push r13",
            "push r12",
            "lea rdx, [0x00003420]",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov r13, rsi",
            "mov edi, 1",
            "mov esi, 0x20",
            "sub rsp, 8",
            "mov r12d, 3",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x3692",
            "mov eax, dword [rbp + 8]",
            "lea rdi, [rbp + 0xc]",
            "mov dword [rbx], eax",
            "mov eax, dword [rbp + 0x20c]",
            "mov dword [rbx + 0x10], eax",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 8], rax",
            "je 0x3692",
            "lea rdi, [rbp + 0x10c]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x18], rax",
            "je 0x3692",
            "mov qword [r13], rbx",
            "xor r12b, r12b",
            "xor ebx, ebx",
            "mov rdi, rbx",
            "call fcn.000031b0",
            "add rsp, 8",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.000036b0": {
        "function_address": "0x000036b0",
        "instructions": [
            "push r12",
            "push rbp",
            "xor edx, edx",
            "push rbx",
            "mov r12, rsi",
            "mov rbx, rdi",
            "mov esi, 0x20",
            "mov edi, 1",
            "mov ebp, 3",
            "call fcn.00003140",
            "test rax, rax",
            "je 0x370c",
            "mov rdx, qword [rbx + 0x348]",
            "xor bpl, bpl",
            "mov qword [rax + 0x18], rdx",
            "mov edx, dword [rbx + 0x330]",
            "mov dword [rax], edx",
            "mov edx, dword [rbx + 0x334]",
            "mov dword [rax + 4], edx",
            "mov edx, dword [rbx + 0x338]",
            "mov dword [rax + 8], edx",
            "mov rdx, qword [rbx + 0x340]",
            "mov qword [rax + 0x10], rdx",
            "mov qword [r12], rax",
            "xor edi, edi",
            "call fcn.000031b0",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.__memcpy_chk": {
        "function_address": "0x00003010",
        "instructions": [
            "jmp qword [reloc.__memcpy_chk]"
        ]
    },
    "sym.wbcCtxListUsers": {
        "function_address": "0x00007c20",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "sub rsp, 0x1608",
            "lea rbx, [rsp + 0x20]",
            "mov qword [rsp + 0x18], rcx",
            "mov ecx, 0x106",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + sym.wbcSetUidHwm], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "test rsi, rsi",
            "mov qword [rsp + 0x10], rdx",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x850]",
            "mov qword [rsp + 8], rdi",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x7c88",
            "lea rdi, [rbx + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rcx, qword [rsp + 8]",
            "mov rdx, rbx",
            "mov esi, 0x12",
            "mov rdi, rbp",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r13d, eax",
            "jne 0x7d60",
            "mov edi, dword [rsp + 0x858]",
            "call fcn.00003200",
            "mov rbp, rax",
            "mov eax, 3",
            "test rbp, rbp",
            "je 0x7d77",
            "mov r15, qword [rsp + 0x15f0]",
            "test r15, r15",
            "je 0x7dbb",
            "mov eax, dword [rsp + 0x858]",
            "xor ebx, ebx",
            "test eax, eax",
            "jne 0x7d1f",
            "jmp 0x7d54",
            "mov byte [rax], 0",
            "lea r14, [rax + 1]",
            "mov eax, ebx",
            "lea r12, [rbp + rax*8]",
            "mov rdi, r15",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r12], rax",
            "je 0x7da0",
            "add ebx, 1",
            "test r14, r14",
            "je 0x7d4b",
            "cmp dword [rsp + 0x858], ebx",
            "jbe 0x7d54",
            "mov r15, r14",
            "mov esi, 0x2c",
            "mov rdi, r15",
            "call sym.imp.strchr",
            "test rax, rax",
            "jne 0x7ce8",
            "mov eax, ebx",
            "mov rdi, r15",
            "add ebx, 1",
            "lea r14, [rbp + rax*8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14], rax",
            "je 0x7da0",
            "cmp dword [rsp + 0x858], ebx",
            "je 0x7da8",
            "mov r13d, 8",
            "jmp 0x7d62",
            "xor ebp, ebp",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.winbindd_free_response",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov eax, r13d",
            "mov rdx, qword [rsp + 0x15f8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x7dbf",
            "add rsp, 0x1608",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r13d, 3",
            "jmp 0x7d62",
            "mov rax, qword [rsp + 0x10]",
            "mov dword [rax], ebx",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rax], rbp",
            "xor ebp, ebp",
            "jmp 0x7d62",
            "xor ebx, ebx",
            "jmp 0x7d4b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxAuthenticateUserEx": {
        "function_address": "0x00004480",
        "instructions": [
            "push r15",
            "push r14",
            "mov r10, rdi",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov rbx, rsi",
            "mov r14, rdx",
            "sub rsp, 0x23a8",
            "lea r12, [rsp + 0x10]",
            "lea rbp, [rsp + 0x840]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x2398], rax",
            "xor eax, eax",
            "mov rdi, r12",
            "test r13, r13",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x44df",
            "mov qword [r13], 0",
            "test rbx, rbx",
            "je 0x45f0",
            "mov eax, dword [rbx + 0x20]",
            "cmp eax, 4",
            "je 0x4770",
            "mov rsi, qword [rbx]",
            "test rsi, rsi",
            "je 0x45f0",
            "cmp eax, 2",
            "mov r15d, 1",
            "je 0x45f6",
            "cmp eax, 3",
            "je 0x45d8",
            "cmp eax, 1",
            "mov r15b, 5",
            "jne 0x45f6",
            "mov r15, qword [rbx + 0x28]",
            "mov dword [rsp + 0x24], 0xe",
            "test r15, r15",
            "je 0x45f0",
            "mov rax, qword [rbx + 8]",
            "test rax, rax",
            "je 0x454b",
            "cmp byte [rax], 0",
            "jne 0x4840",
            "lea rdi, [r12 + 0x118]",
            "mov edx, 0xff",
            "mov qword [rsp], r10",
            "call sym.imp.strncpy",
            "mov r10, qword [rsp]",
            "lea rdi, [r12 + 0x218]",
            "mov edx, 0xff",
            "mov rsi, r15",
            "mov qword [rsp], r10",
            "call sym.imp.strncpy",
            "mov eax, dword [rbx + 0x18]",
            "mov r10, qword [rsp]",
            "test eax, eax",
            "jne 0x4818",
            "mov rcx, rbp",
            "mov rdx, r12",
            "mov esi, 0xd",
            "mov rdi, r10",
            "call fcn.00002ee0",
            "mov r15d, eax",
            "mov eax, dword [rsp + 0x848]",
            "test eax, eax",
            "je 0x47f0",
            "test r13, r13",
            "je 0x45c9",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00003620",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x45f6",
            "mov r15d, 0xa",
            "jmp 0x45f6",
            "mov r15d, dword [rbx + 0x40]",
            "mov dword [rsp + 0x24], 0xe",
            "test r15d, r15d",
            "jne 0x4640",
            "cmp qword [rbx + 0x48], 0",
            "je 0x4647",
            "mov r15d, 5",
            "mov rdi, rbp",
            "call sym.imp.winbindd_free_response",
            "mov rdi, qword [rsp + 0x830]",
            "call sym.imp.free",
            "mov rdx, qword [rsp + 0x2398]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, r15d",
            "jne 0x4909",
            "add rsp, 0x23a8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "cmp qword [rbx + 0x48], 0",
            "je 0x45f0",
            "mov r8d, dword [rbx + 0x30]",
            "test r8d, r8d",
            "jne 0x4828",
            "cmp qword [rbx + 0x38], 0",
            "jne 0x45f0",
            "nop dword [rax + rax]",
            "lea rdi, [r12 + 0x124]",
            "mov edx, 0xff",
            "mov qword [rsp + 8], r10",
            "mov dword [rsp], r8d",
            "call sym.imp.strncpy",
            "mov rsi, qword [rbx + 8]",
            "mov r8d, dword [rsp]",
            "mov r10, qword [rsp + 8]",
            "test rsi, rsi",
            "je 0x46a8",
            "lea rdi, [r12 + 0x224]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov r10, qword [rsp + 8]",
            "mov r8d, dword [rsp]",
            "mov rsi, qword [rbx + 0x10]",
            "test rsi, rsi",
            "je 0x46d5",
            "lea rdi, [r12 + 0x52c]",
            "mov edx, 0xff",
            "mov qword [rsp + 8], r10",
            "mov dword [rsp], r8d",
            "call sym.imp.strncpy",
            "mov r10, qword [rsp + 8]",
            "mov r8d, dword [rsp]",
            "mov eax, dword [rbx + 0x1c]",
            "mov rsi, qword [rbx + 0x48]",
            "cmp r15d, 0x100",
            "mov dword [rsp + 0x130], eax",
            "mov rax, qword [rbx + 0x28]",
            "mov qword [rsp + 0x128], rax",
            "mov eax, 0x100",
            "cmova r15d, eax",
            "test rsi, rsi",
            "mov dword [rsp + 0x434], r15d",
            "je 0x4733",
            "lea rdi, [r12 + 0x324]",
            "mov edx, r15d",
            "mov ecx, 0x50c",
            "mov qword [rsp + 8], r10",
            "mov dword [rsp], r8d",
            "call sym.imp.__memcpy_chk",
            "mov r10, qword [rsp + 8]",
            "mov r8d, dword [rsp]",
            "cmp r8d, 0x100",
            "mov dword [rsp + 0x538], r8d",
            "ja 0x48b9",
            "mov rsi, qword [rbx + 0x38]",
            "test rsi, rsi",
            "je 0x47b0",
            "lea rdi, [r12 + 0x428]",
            "mov edx, r8d",
            "mov ecx, 0x408",
            "mov qword [rsp], r10",
            "call sym.imp.__memcpy_chk",
            "mov r10, qword [rsp]",
            "jmp 0x47b0",
            "mov r15, qword [rbx + 0x30]",
            "mov qword [rsp], r10",
            "mov dword [rsp + 0x24], 0x42",
            "mov rdi, r15",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [rsp + 0x830], rax",
            "je 0x47e0",
            "mov rsi, qword [rbx + 0x28]",
            "mov rdx, r15",
            "mov rdi, rax",
            "call sym.imp.memcpy",
            "mov r10, qword [rsp]",
            "mov dword [rsp + 0x838], r15d",
            "mov eax, dword [rbx + 0x18]",
            "test eax, eax",
            "je 0x47bb",
            "or dword [rsp + 0x24], eax",
            "mov rcx, rbp",
            "mov rdx, r12",
            "mov esi, 0xe",
            "mov rdi, r10",
            "call fcn.00002d40",
            "mov r15d, eax",
            "jmp 0x45a3",
            "mov r15d, 3",
            "jmp 0x45f6",
            "test r15d, r15d",
            "jne 0x45f6",
            "test r14, r14",
            "je 0x45f6",
            "mov rsi, r14",
            "mov rdi, rbp",
            "call fcn.00004000",
            "mov r15d, eax",
            "jmp 0x45f6",
            "or dword [rsp + 0x24], eax",
            "jmp 0x458d",
            "cmp qword [rbx + 0x38], 0",
            "jne 0x4660",
            "jmp 0x45f0",
            "lea rdx, [rsp + 0x15f0]",
            "xor eax, eax",
            "mov ecx, 0x1b5",
            "mov esi, 0x24",
            "mov qword [rsp], r10",
            "mov rdi, rdx",
            "rep stosq qword [rdi], rax",
            "mov rcx, rdx",
            "mov rdi, r10",
            "xor edx, edx",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x45f6",
            "push qword [rbx]",
            "movsx eax, byte [rsp + 0x1600]",
            "lea rdi, [r12 + 0x118]",
            "mov r9, qword [rbx + 8]",
            "lea r8, str._s_c_s",
            "mov ecx, 0x100",
            "mov edx, 1",
            "mov esi, 0xff",
            "push rax",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "pop rdx",
            "pop rcx",
            "mov r15, qword [rbx + 0x28]",
            "mov r10, qword [rsp]",
            "jmp 0x4565",
            "mov r15d, r8d",
            "mov qword [rsp], r10",
            "mov dword [rsp + 0x24], 0x1000e",
            "mov rdi, r15",
            "mov dword [rsp + 0x838], r8d",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [rsp + 0x830], rax",
            "mov r10, qword [rsp]",
            "je 0x47e0",
            "mov rsi, qword [rbx + 0x38]",
            "mov rdx, r15",
            "mov rdi, rax",
            "mov qword [rsp], r10",
            "call sym.imp.memcpy",
            "mov r10, qword [rsp]",
            "jmp 0x47b0",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00004000": {
        "function_address": "0x00004000",
        "instructions": [
            "push r15",
            "push r14",
            "lea rdx, [0x000033a0]",
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "mov edi, 1",
            "mov esi, 0xb8",
            "mov ebx, 3",
            "sub rsp, 0x88",
            "call fcn.00003140",
            "test rax, rax",
            "mov r15, rax",
            "je 0x4230",
            "mov eax, dword [r13 + 0x394]",
            "lea rdi, [r13 + 0x4a0]",
            "mov dword [r15], eax",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 8], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0x5a0]",
            "mov qword [r15 + 0x10], 0",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x18], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0xba0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x20], rax",
            "je 0x4230",
            "mov qword [r15 + 0x28], 0",
            "mov eax, dword [r13 + 0x398]",
            "lea rdi, [r13 + 0xaa0]",
            "mov dword [r15 + 0x30], eax",
            "mov rax, qword [r13 + 0x210]",
            "mov qword [r15 + 0x34], rax",
            "mov rax, qword [r13 + 0x218]",
            "mov qword [r15 + 0x3c], rax",
            "mov rax, qword [r13 + 0x220]",
            "mov qword [r15 + 0x44], rax",
            "mov eax, dword [r13 + 0x380]",
            "mov word [r15 + 0x4c], ax",
            "mov eax, dword [r13 + 0x384]",
            "mov word [r15 + 0x4e], ax",
            "mov rax, qword [r13 + 0x350]",
            "mov qword [r15 + 0x50], rax",
            "mov rax, qword [r13 + 0x358]",
            "mov qword [r15 + 0x58], rax",
            "mov rax, qword [r13 + 0x360]",
            "mov qword [r15 + 0x60], rax",
            "mov rax, qword [r13 + 0x368]",
            "mov qword [r15 + 0x68], rax",
            "mov rax, qword [r13 + 0x370]",
            "mov qword [r15 + 0x70], rax",
            "mov rax, qword [r13 + 0x378]",
            "mov qword [r15 + 0x78], rax",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x80], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0x6a0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x88], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0x7a0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x90], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0x8a0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0x98], rax",
            "je 0x4230",
            "lea rdi, [r13 + 0x9a0]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15 + 0xa0], rax",
            "je 0x4230",
            "mov dword [r15 + 0xa8], 2",
            "mov eax, dword [r13 + 0x390]",
            "mov edi, 0x48",
            "add eax, 2",
            "mov dword [r15 + 0xa8], eax",
            "add eax, dword [r13 + 0x39c]",
            "mov dword [r15 + 0xa8], eax",
            "mov esi, eax",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov qword [r15 + 0xb0], rax",
            "je 0x4230",
            "lea rax, [rsp + 0x30]",
            "lea rdi, [r13 + 0x3a0]",
            "mov rsi, rax",
            "mov qword [rsp], rax",
            "call fcn.00003120",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x4230",
            "cmp byte [rsp + 0x31], 0xe",
            "mov r10d, dword [r13 + 0x388]",
            "mov rax, qword [r15 + 0xb0]",
            "jbe 0x424c",
            "mov ebx, 4",
            "nop dword [rax + rax]",
            "mov rdi, r15",
            "call fcn.000031b0",
            "add rsp, 0x88",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdi, rax",
            "mov ecx, 0x11",
            "mov rsi, qword [rsp]",
            "rep movsd dword [rdi], dword [rsi]",
            "mov rsi, qword [rsp]",
            "movzx edx, byte [rax + 1]",
            "lea ecx, [rdx + 1]",
            "mov byte [rax + 1], cl",
            "mov dword [rax + rdx*4 + 8], r10d",
            "mov ecx, 0x11",
            "mov dword [rax + 0x44], 0",
            "mov rax, qword [r15 + 0xb0]",
            "mov r10d, dword [r13 + 0x38c]",
            "lea rdi, [rax + 0x48]",
            "rep movsd dword [rdi], dword [rsi]",
            "movzx edx, byte [rax + 0x49]",
            "lea ecx, [rdx + 1]",
            "mov byte [rax + 0x49], cl",
            "mov dword [rax + rdx*4 + 0x50], r10d",
            "mov dword [rax + 0x8c], 0",
            "mov r8, qword [r13 + 0xda0]",
            "test r8, r8",
            "je 0x438d",
            "cmp dword [r13 + 0x390], 0",
            "je 0x4397",
            "lea rax, [rsp + 0x2c]",
            "mov r14, r8",
            "mov r12d, 2",
            "mov qword [rsp + 8], rax",
            "lea rax, [rsp + 0x28]",
            "mov qword [rsp + 0x10], rax",
            "jmp 0x4377",
            "mov rcx, qword [rsp + 8]",
            "mov rdx, qword [rsp + 0x10]",
            "lea r8, [rax + 1]",
            "lea rsi, str.0x_08X:0x_08X",
            "mov byte [rax], 0",
            "mov rdi, r14",
            "xor eax, eax",
            "mov qword [rsp + 0x18], r8",
            "call sym.imp.sscanf",
            "cmp eax, 2",
            "jne 0x438d",
            "mov eax, r12d",
            "cmp byte [rsp + 0x31], 0xe",
            "mov r9d, dword [rsp + 0x2c]",
            "lea rdx, [rax + rax*8]",
            "mov rax, qword [r15 + 0xb0]",
            "mov r10d, dword [rsp + 0x28]",
            "lea rax, [rax + rdx*8]",
            "ja 0x4226",
            "mov rdi, rax",
            "mov rsi, qword [rsp]",
            "mov ecx, 0x11",
            "rep movsd dword [rdi], dword [rsi]",
            "lea r14d, [r12 + 1]",
            "sub r12d, 1",
            "mov r8, qword [rsp + 0x18]",
            "movzx edx, byte [rax + 1]",
            "lea ecx, [rdx + 1]",
            "mov byte [rax + 1], cl",
            "mov dword [rax + rdx*4 + 8], r10d",
            "mov dword [rax + 0x44], r9d",
            "cmp dword [r13 + 0x390], r12d",
            "jbe 0x439d",
            "mov r12d, r14d",
            "mov r14, r8",
            "mov esi, 0xa",
            "mov rdi, r8",
            "call sym.imp.strchr",
            "test rax, rax",
            "jne 0x42e6",
            "mov ebx, 8",
            "jmp 0x4230",
            "mov r14d, 2",
            "lea rax, [rsp + 0x2c]",
            "mov dword [rsp + 0x18], ebx",
            "mov qword [rsp], 0",
            "mov rbx, r8",
            "mov qword [rsp + 0x10], rax",
            "jmp 0x4442",
            "mov esi, 0xa",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x446e",
            "mov byte [rax], 0",
            "mov esi, 0x3a",
            "add rax, 1",
            "mov rdi, rbx",
            "mov qword [rsp + 8], rax",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x446e",
            "mov rdx, qword [rsp + 0x10]",
            "lea rdi, [rax + 1]",
            "lea rsi, [0x00009bcc]",
            "mov byte [rax], 0",
            "xor eax, eax",
            "call sym.imp.sscanf",
            "sub eax, 1",
            "jne 0x446e",
            "imul r12, r12, 0x48",
            "mov rdi, rbx",
            "mov rsi, r12",
            "add rsi, qword [r15 + 0xb0]",
            "call fcn.00003120",
            "add qword [rsp], 1",
            "test eax, eax",
            "jne 0x4473",
            "mov rax, qword [r15 + 0xb0]",
            "mov edx, dword [rsp + 0x2c]",
            "mov rbx, qword [rsp + 8]",
            "mov dword [rax + r12 + 0x44], edx",
            "mov rax, qword [rsp]",
            "cmp eax, dword [r13 + 0x39c]",
            "lea r12d, [r14 + rax]",
            "jb 0x43bb",
            "mov dword [r15 + 0xa8], r12d",
            "mov ebx, dword [rsp + 0x18]",
            "mov qword [rbp], r15",
            "xor r15d, r15d",
            "jmp 0x4230",
            "mov eax, 8",
            "mov ebx, eax",
            "jmp 0x4230"
        ]
    },
    "sym.wbcRequestResponse": {
        "function_address": "0x00003b20",
        "instructions": [
            "sub rsp, 8",
            "test rdi, rdi",
            "je 0x3b60",
            "mov rdi, qword [rdi]",
            "call sym.imp.winbindd_request_response",
            "lea edx, [rax + 1]",
            "mov eax, 9",
            "cmp edx, 2",
            "jbe 0x3b48",
            "add rsp, 8",
            "ret",
            "lea rax, [0x00009c14]",
            "mov eax, dword [rax + rdx*4]",
            "add rsp, 8",
            "ret",
            "xor edi, edi",
            "jmp 0x3b2c"
        ]
    },
    "sym.imp.winbindd_request_response": {
        "function_address": "0x00002fa0",
        "instructions": [
            "jmp qword [reloc.winbindd_request_response]"
        ]
    },
    "sym.wbcCtxGetGroups": {
        "function_address": "0x00009450",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r14d, 5",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x94d1",
            "lea rdi, [rsp + 0x118]",
            "mov r13, rdx",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 6",
            "mov rdi, r15",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r14d, eax",
            "je 0x9510",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "xor edi, edi",
            "call fcn.000031b0",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "mov eax, r14d",
            "jne 0x957b",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov edi, dword [rsp + 0x838]",
            "xor edx, edx",
            "mov esi, 4",
            "call fcn.00003140",
            "test rax, rax",
            "je 0x9570",
            "mov edx, dword [rsp + 0x838]",
            "test edx, edx",
            "je 0x9559",
            "xor esi, esi",
            "nop dword [rax]",
            "mov rdx, qword [rsp + 0x15d0]",
            "mov r8d, esi",
            "add esi, 1",
            "mov edx, dword [rdx + r8*4]",
            "mov dword [rax + r8*4], edx",
            "mov edx, dword [rsp + 0x838]",
            "cmp edx, esi",
            "ja 0x9538",
            "mov dword [r13], edx",
            "mov qword [r12], rax",
            "jmp 0x94d1",
            "mov r14d, 3",
            "jmp 0x94d1",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcAddNamedBlob": {
        "function_address": "0x00005150",
        "instructions": [
            "test rdx, rdx",
            "mov eax, 5",
            "je 0x524f",
            "push r15",
            "push r14",
            "mov r14, r9",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov rbp, rdx",
            "mov rbx, rdi",
            "lea rdx, [0x00004e50]",
            "mov esi, 0x20",
            "sub rsp, 0x18",
            "mov rax, qword [rdi]",
            "mov qword [rsp + 8], r8",
            "mov dword [rsp + 4], ecx",
            "lea rdi, [rax + 2]",
            "call fcn.00003140",
            "mov r13, rax",
            "mov eax, 3",
            "test r13, r13",
            "je 0x5241",
            "mov r15, qword [r12]",
            "test r15, r15",
            "je 0x51d7",
            "mov rdx, qword [rbx]",
            "mov rsi, r15",
            "mov rdi, r13",
            "shl rdx, 5",
            "call sym.imp.memcpy",
            "cmp qword [rbx], 0",
            "jne 0x5258",
            "mov rdi, r15",
            "call fcn.000031b0",
            "mov rdx, qword [rbx]",
            "mov rdi, rbp",
            "mov qword [r12], r13",
            "mov ebp, 3",
            "shl rdx, 5",
            "lea r15, [r13 + rdx]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r15], rax",
            "je 0x5237",
            "mov eax, dword [rsp + 4]",
            "mov qword [r15 + 0x18], r14",
            "mov rdi, r14",
            "mov dword [r15 + 8], eax",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [r15 + 0x10], rax",
            "je 0x5237",
            "mov rsi, qword [rsp + 8]",
            "mov rdx, r14",
            "mov rdi, rax",
            "xor bpl, bpl",
            "call sym.imp.memcpy",
            "add qword [rbx], 1",
            "mov qword [r12], r13",
            "xor r13d, r13d",
            "mov rdi, r13",
            "call fcn.000031b0",
            "mov eax, ebp",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "repz ret",
            "mov qword [r15], 0",
            "jmp 0x51cf"
        ]
    },
    "sym.wbcCtxLogonUser": {
        "function_address": "0x00007200",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdx",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r14, r8",
            "sub rsp, 0x1648",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1638], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rdi",
            "lea rdi, [rsp + 0x60]",
            "test rdx, rdx",
            "mov qword [rsp + 8], rdi",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x890]",
            "mov qword [rsp], rdi",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x7263",
            "mov qword [rdx], 0",
            "test r13, r13",
            "je 0x7270",
            "mov qword [r13], 0",
            "test r14, r14",
            "je 0x727c",
            "mov qword [r14], 0",
            "test rsi, rsi",
            "je 0x743b",
            "mov rax, qword [rsi]",
            "test rax, rax",
            "je 0x743b",
            "mov rdx, qword [rsi + 0x10]",
            "test rdx, rdx",
            "mov qword [rsp + 0x18], rdx",
            "je 0x7430",
            "mov rcx, qword [rsi + 0x18]",
            "test rcx, rcx",
            "mov qword [rsp + 0x28], rcx",
            "je 0x743b",
            "mov rbx, qword [rsi + 8]",
            "mov dword [rsp + 0x74], 0xe",
            "test rbx, rbx",
            "je 0x743b",
            "mov r12, qword [rsp + 8]",
            "mov edx, 0xff",
            "mov rsi, rax",
            "xor ebp, ebp",
            "lea rdi, [r12 + 0x118]",
            "call sym.imp.strncpy",
            "lea rdi, [r12 + 0x218]",
            "mov rsi, rbx",
            "mov edx, 0xff",
            "xor ebx, ebx",
            "call sym.imp.strncpy",
            "lea rax, [r12 + 0x318]",
            "mov qword [rsp + 0x38], r15",
            "mov r15, qword [rsp + 0x28]",
            "mov qword [rsp + 0x28], r13",
            "mov r13, qword [rsp + 0x18]",
            "mov qword [rsp + 0x48], rax",
            "lea rax, [rsp + 0x5c]",
            "mov qword [rsp + 0x40], rax",
            "lea rax, [r12 + 0x818]",
            "mov qword [rsp + 0x30], rax",
            "lea rax, [r12 + 0x718]",
            "mov qword [rsp + 0x20], rax",
            "jmp 0x736b",
            "mov rsi, qword [rbx + 0x10]",
            "test rsi, rsi",
            "je 0x7360",
            "mov rdi, qword [rsp + 0x20]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "lea ebx, [rbp + 1]",
            "cmp r13, rbx",
            "mov rbp, rbx",
            "jbe 0x73d8",
            "shl rbx, 5",
            "lea rsi, str.krb5_cc_type",
            "add rbx, r15",
            "mov r12, qword [rbx]",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "je 0x7348",
            "lea rsi, str.user_uid",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "jne 0x7478",
            "mov rsi, qword [rbx + 0x10]",
            "test rsi, rsi",
            "je 0x7360",
            "cmp qword [rbx + 0x18], 4",
            "mov edx, 4",
            "mov rdi, qword [rsp + 0x30]",
            "cmovbe rdx, qword [rbx + 0x18]",
            "lea ebx, [rbp + 1]",
            "mov ecx, 0x18",
            "mov rbp, rbx",
            "call sym.imp.__memcpy_chk",
            "cmp r13, rbx",
            "ja 0x736b",
            "nop dword [rax]",
            "mov r15, qword [rsp + 0x38]",
            "mov r13, qword [rsp + 0x28]",
            "mov rcx, qword [rsp]",
            "mov rdx, qword [rsp + 8]",
            "mov esi, 0xd",
            "mov rdi, qword [rsp + 0x10]",
            "call fcn.00002ee0",
            "mov ebx, eax",
            "mov eax, dword [rsp + 0x898]",
            "test eax, eax",
            "je 0x7510",
            "test r13, r13",
            "je 0x7422",
            "mov rdi, qword [rsp]",
            "mov rsi, r13",
            "call fcn.00003620",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x7440",
            "mov ebx, 0xa",
            "jmp 0x7440",
            "cmp qword [rsi + 0x18], 0",
            "je 0x7598",
            "mov ebx, 5",
            "mov rdi, qword [rsp]",
            "call sym.imp.winbindd_free_response",
            "mov rcx, qword [rsp + 0x1638]",
            "xor rcx, qword fs:[0x28]",
            "mov eax, ebx",
            "jne 0x76e0",
            "add rsp, 0x1648",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rsi, str.flags",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "jne 0x74c8",
            "mov rsi, qword [rbx + 0x10]",
            "test rsi, rsi",
            "je 0x7360",
            "cmp qword [rbx + 0x18], 4",
            "mov edx, 4",
            "mov rdi, qword [rsp + 0x40]",
            "cmovbe rdx, qword [rbx + 0x18]",
            "mov ecx, 4",
            "call sym.imp.__memcpy_chk",
            "mov eax, dword [rsp + 0x5c]",
            "or dword [rsp + 0x74], eax",
            "jmp 0x7360",
            "lea rsi, str.membership_of",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "jne 0x7360",
            "mov rsi, qword [rbx + 0x10]",
            "test rsi, rsi",
            "je 0x7360",
            "cmp byte [rsi], 0",
            "je 0x7360",
            "mov rdi, qword [rsp + 0x48]",
            "mov edx, 0x3ff",
            "call sym.imp.strncpy",
            "jmp 0x7360",
            "test ebx, ebx",
            "jne 0x7440",
            "test r15, r15",
            "je 0x7579",
            "lea rdx, [0x000034a0]",
            "mov esi, 0x18",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x75e0",
            "mov rdi, qword [rsp]",
            "mov rsi, rax",
            "call fcn.00004000",
            "test eax, eax",
            "jne 0x7662",
            "cmp byte [rsp + 0xab8], 0",
            "jne 0x75f2",
            "cmp byte [rsp + 0x1530], 0",
            "jne 0x7669",
            "mov qword [r15], rbp",
            "xor edi, edi",
            "call fcn.000031b0",
            "test r14, r14",
            "je 0x7440",
            "mov rdi, qword [rsp]",
            "mov rsi, r14",
            "call fcn.000036b0",
            "mov ebx, eax",
            "jmp 0x7440",
            "mov rbx, qword [rsi + 8]",
            "mov dword [rsp + 0x74], 0xe",
            "test rbx, rbx",
            "je 0x743b",
            "mov rbp, qword [rsp + 8]",
            "mov edx, 0xff",
            "mov rsi, rax",
            "lea rdi, [rbp + 0x118]",
            "call sym.imp.strncpy",
            "lea rdi, [rbp + 0x218]",
            "mov edx, 0xff",
            "mov rsi, rbx",
            "call sym.imp.strncpy",
            "jmp 0x73e2",
            "mov ebx, 3",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "jmp 0x7440",
            "mov rax, qword [rsp]",
            "lea rsi, [rax + 0x228]",
            "mov rdx, rsi",
            "mov ecx, dword [rdx]",
            "add rdx, 4",
            "lea eax, [rcx - 0x1010101]",
            "not ecx",
            "and eax, ecx",
            "and eax, 0x80808080",
            "je 0x7600",
            "mov ecx, eax",
            "lea rdi, [rbp + 8]",
            "shr ecx, 0x10",
            "test eax, 0x8080",
            "cmove eax, ecx",
            "lea rcx, [rdx + 2]",
            "cmove rdx, rcx",
            "add al, al",
            "mov rax, qword [rsp]",
            "sbb rdx, 3",
            "xor ecx, ecx",
            "sub rdx, rsi",
            "lea rsi, [rbp + 0x10]",
            "lea r9, [rdx + 1]",
            "lea r8, [rax + 0x228]",
            "lea rdx, str.krb5ccname",
            "call fcn.00002db0",
            "test eax, eax",
            "je 0x7561",
            "mov ebx, eax",
            "jmp 0x75e5",
            "mov rax, qword [rsp]",
            "lea rsi, [rax + 0xca0]",
            "mov rdx, rsi",
            "mov ecx, dword [rdx]",
            "add rdx, 4",
            "lea eax, [rcx - 0x1010101]",
            "not ecx",
            "and eax, ecx",
            "and eax, 0x80808080",
            "je 0x7677",
            "mov ecx, eax",
            "lea rdi, [rbp + 8]",
            "shr ecx, 0x10",
            "test eax, 0x8080",
            "cmove eax, ecx",
            "lea rcx, [rdx + 2]",
            "cmove rdx, rcx",
            "add al, al",
            "mov rax, qword [rsp]",
            "sbb rdx, 3",
            "xor ecx, ecx",
            "sub rdx, rsi",
            "lea rsi, [rbp + 0x10]",
            "lea r9, [rdx + 1]",
            "lea r8, [rax + 0xca0]",
            "lea rdx, str.unix_username",
            "call fcn.00002db0",
            "test eax, eax",
            "je 0x756f",
            "mov ebx, eax",
            "jmp 0x75e5",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.strcasecmp": {
        "function_address": "0x00002d50",
        "instructions": [
            "jmp qword [reloc.strcasecmp]"
        ]
    },
    "fcn.00002db0": {
        "function_address": "0x00002db0",
        "instructions": [
            "jmp qword [reloc.wbcAddNamedBlob]"
        ]
    },
    "sym.wbcCtxSidToGid": {
        "function_address": "0x00004d90",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r8, rsi",
            "mov r12, rdx",
            "mov edx, 0x100",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "lea rsi, [rsp + 0x118]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, r8",
            "call fcn.00003080",
            "mov rcx, rbp",
            "mov rdx, rsp",
            "mov esi, 0x1a",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x4d5d",
            "mov edx, dword [rsp + 0x838]",
            "mov dword [r12], edx",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x4d7e",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x4d9a",
            "test rdx, rdx",
            "jne 0x4da0",
            "mov eax, 5",
            "ret",
            "jmp 0x4ce0"
        ]
    },
    "sym.wbcCtxGetpwuid": {
        "function_address": "0x00006550",
        "instructions": [
            "test rdx, rdx",
            "je 0x6560",
            "jmp 0x92b0",
            "mov eax, 5",
            "ret",
            "push r12",
            "push rbp",
            "mov r9, rdi",
            "push rbx",
            "mov ecx, 0x106",
            "mov rbp, rdx",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov dword [rsp + 0x118], esi",
            "mov esi, 2",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, rbx",
            "mov rdi, r9",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x932b",
            "lea rdi, [rbx + 8]",
            "call fcn.000065b0",
            "test rax, rax",
            "mov qword [rbp], rax",
            "mov eax, 3",
            "cmove r12d, eax",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "mov eax, r12d",
            "jne 0x934d",
            "add rsp, 0x15e0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxCheckTrustCredentials": {
        "function_address": "0x00003980",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov rbx, rsp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x39da",
            "lea rdi, [rsp + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rdx, rbx",
            "mov rcx, rbp",
            "mov esi, 0x20",
            "mov rdi, r13",
            "call fcn.00002d40",
            "mov edx, dword [rsp + 0x838]",
            "test edx, edx",
            "je 0x3a11",
            "test r12, r12",
            "je 0x3a0c",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00003620",
            "test eax, eax",
            "jne 0x3a11",
            "mov eax, 0xa",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x3a32",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcGuidToString": {
        "function_address": "0x00003dd0",
        "instructions": [
            "push r12",
            "push rbp",
            "xor edx, edx",
            "push rbx",
            "mov r12, rsi",
            "mov rbx, rdi",
            "mov esi, 1",
            "mov edi, 0x25",
            "call fcn.00003140",
            "mov rbp, rax",
            "mov eax, 3",
            "test rbp, rbp",
            "je 0x3e59",
            "movzx eax, byte [rbx + 0xf]",
            "mov r9d, dword [rbx]",
            "lea r8, [0x00009c20]",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "mov esi, 0x25",
            "mov rdi, rbp",
            "push rax",
            "movzx eax, byte [rbx + 0xe]",
            "push rax",
            "movzx eax, byte [rbx + 0xd]",
            "push rax",
            "movzx eax, byte [rbx + 0xc]",
            "push rax",
            "movzx eax, byte [rbx + 0xb]",
            "push rax",
            "movzx eax, byte [rbx + 0xa]",
            "push rax",
            "movzx eax, byte [rbx + 9]",
            "push rax",
            "movzx eax, byte [rbx + 8]",
            "push rax",
            "movzx eax, word [rbx + 6]",
            "push rax",
            "movzx eax, word [rbx + 4]",
            "push rax",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "mov qword [r12], rbp",
            "add rsp, 0x50",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.wbcStringToSid": {
        "function_address": "0x00008c80",
        "instructions": [
            "test rsi, rsi",
            "je 0x8ca0",
            "test rdi, rdi",
            "je 0x8ca0",
            "movzx edx, byte [rdi]",
            "mov eax, 5",
            "and edx, 0xffffffdf",
            "cmp dl, 0x53",
            "je 0x8cb0",
            "ret",
            "mov eax, 5",
            "ret",
            "cmp byte [rdi + 1], 0x2d",
            "jne 0x8c9a",
            "push r13",
            "push r12",
            "add rdi, 2",
            "push rbp",
            "push rbx",
            "mov edx, 0xa",
            "mov rbx, rsi",
            "sub rsp, 0x18",
            "lea rbp, [rsp + 8]",
            "mov rsi, rbp",
            "call sym.imp.strtoul",
            "lea rdx, [rax - 1]",
            "cmp rdx, 0xfe",
            "jbe 0x8cf6",
            "mov eax, 4",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rdx, qword [rsp + 8]",
            "test rdx, rdx",
            "je 0x8ce6",
            "cmp byte [rdx], 0x2d",
            "jne 0x8ce6",
            "lea rdi, [rdx + 1]",
            "mov byte [rbx], al",
            "xor edx, edx",
            "mov rsi, rbp",
            "call sym.imp.strtoull",
            "mov r12, qword [rsp + 8]",
            "test r12, r12",
            "je 0x8ce6",
            "cmp byte [r12], 0x2d",
            "jne 0x8ce6",
            "movabs rdx, 0xffff000000000000",
            "test rax, rdx",
            "jne 0x8ce6",
            "movzx edx, ah",
            "mov byte [rbx + 7], al",
            "add r12, 1",
            "mov byte [rbx + 6], dl",
            "mov rdx, rax",
            "mov byte [rbx + 1], 0",
            "shr rdx, 0x10",
            "mov r13d, 0xffffffff",
            "mov byte [rbx + 5], dl",
            "mov rdx, rax",
            "shr rdx, 0x18",
            "mov byte [rbx + 4], dl",
            "mov rdx, rax",
            "shr rax, 0x28",
            "shr rdx, 0x20",
            "mov byte [rbx + 2], al",
            "mov byte [rbx + 3], dl",
            "jmp 0x8d9e",
            "cmp rax, r13",
            "ja 0x8ce6",
            "movzx ecx, byte [rbx + 1]",
            "lea esi, [rcx + 1]",
            "mov byte [rbx + 1], sil",
            "mov dword [rbx + rcx*4 + 8], eax",
            "cmp byte [rdx], 0x2d",
            "jne 0x8db8",
            "cmp sil, 0xe",
            "lea r12, [rdx + 1]",
            "ja 0x8ce6",
            "mov edx, 0xa",
            "mov rsi, rbp",
            "mov rdi, r12",
            "call sym.imp.strtoull",
            "mov rdx, qword [rsp + 8]",
            "cmp r12, rdx",
            "jne 0x8d73",
            "xor eax, eax",
            "cmp byte [rdx], 0",
            "jne 0x8ce6",
            "jmp 0x8ceb"
        ]
    },
    "sym.imp.strtoull": {
        "function_address": "0x00002fb0",
        "instructions": [
            "jmp qword [reloc.strtoull]"
        ]
    },
    "sym.wbcStringToGuid": {
        "function_address": "0x00003c70",
        "instructions": [
            "test rsi, rsi",
            "je 0x3dc0",
            "test rdi, rdi",
            "je 0x3dc0",
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x90",
            "lea rbp, [rsp + 0x68]",
            "lea r10, [rsp + 0x58]",
            "lea rax, [rsp + 0x54]",
            "lea rcx, [rsp + 0x50]",
            "lea rdx, [rsp + 0x4c]",
            "lea r11, [rbp + 0x14]",
            "lea rsi, [rbp + 0x10]",
            "lea r12, [r10 + 4]",
            "lea r15, [rbp + 0xc]",
            "lea r14, [rbp + 8]",
            "lea r13, [rbp + 4]",
            "push r11",
            "mov r8, rax",
            "mov r9, r10",
            "mov qword [rsp + 0x18], rsi",
            "mov qword [rsp + 0x48], r11",
            "push rsi",
            "push r15",
            "lea rsi, [0x00009c20]",
            "push r14",
            "push r13",
            "push rbp",
            "push r12",
            "mov qword [rsp + 0x50], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x70], r10",
            "mov qword [rsp + 0x58], rcx",
            "mov qword [rsp + 0x60], rdx",
            "mov qword [rsp + 0x68], rdi",
            "call sym.imp.sscanf",
            "add rsp, 0x40",
            "cmp eax, 0xb",
            "je 0x3d68",
            "sub rsp, 8",
            "lea rsi, str._08x__04x__04x__02x_02x__02x_02x_02x_02x_02x_02x",
            "xor eax, eax",
            "mov r11, qword [rsp + 0x40]",
            "push r11",
            "push qword [rsp + 0x18]",
            "push r15",
            "push r14",
            "push r13",
            "push rbp",
            "push r12",
            "mov r10, qword [rsp + 0x70]",
            "mov r8, qword [rsp + 0x50]",
            "mov rcx, qword [rsp + 0x58]",
            "mov rdx, qword [rsp + 0x60]",
            "mov rdi, qword [rsp + 0x68]",
            "mov r9, r10",
            "call sym.imp.sscanf",
            "add rsp, 0x40",
            "cmp eax, 0xb",
            "je 0x3d68",
            "mov eax, 2",
            "jmp 0x3da4",
            "mov eax, dword [rsp + 0x44]",
            "mov dword [rbx], eax",
            "mov eax, dword [rsp + 0x48]",
            "mov word [rbx + 4], ax",
            "mov eax, dword [rsp + 0x4c]",
            "mov word [rbx + 6], ax",
            "mov eax, dword [rsp + 0x50]",
            "mov byte [rbx + 8], al",
            "mov eax, dword [rsp + 0x54]",
            "mov byte [rbx + 9], al",
            "xor eax, eax",
            "nop",
            "mov edx, dword [rbp + rax*4]",
            "mov byte [rbx + rax + 0xa], dl",
            "add rax, 1",
            "cmp rax, 6",
            "jne 0x3d90",
            "xor al, al",
            "add rsp, 0x88",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.imp.sscanf": {
        "function_address": "0x00003100",
        "instructions": [
            "jmp qword [reloc.sscanf]"
        ]
    },
    "sym.wbcSidToString": {
        "function_address": "0x00008f60",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov ebp, 4",
            "sub rsp, 0xc8",
            "test rdi, rdi",
            "je 0x8f92",
            "mov r12, rsi",
            "mov edx, 0xbe",
            "mov rsi, rsp",
            "call fcn.00003080",
            "lea ebx, [rax + 1]",
            "cmp ebx, 0xbe",
            "jbe 0x8fa8",
            "add rsp, 0xc8",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "xor edx, edx",
            "movsxd rdi, ebx",
            "mov esi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov bpl, 3",
            "je 0x8f92",
            "cmp ebx, 8",
            "jae 0x8fe0",
            "test bl, 4",
            "jne 0x9014",
            "test ebx, ebx",
            "je 0x8fd8",
            "movzx edx, byte [rsp]",
            "test bl, 2",
            "mov byte [rax], dl",
            "jne 0x9025",
            "mov qword [r12], rax",
            "xor ebp, ebp",
            "jmp 0x8f92",
            "mov rdx, qword [rsp]",
            "lea rdi, [rax + 8]",
            "mov rsi, rsp",
            "and rdi, 0xfffffffffffffff8",
            "mov qword [rax], rdx",
            "mov edx, ebx",
            "mov rcx, qword [rsp + rdx - 8]",
            "mov qword [rax + rdx - 8], rcx",
            "mov rdx, rax",
            "sub rdx, rdi",
            "lea ecx, [rbx + rdx]",
            "sub rsi, rdx",
            "shr ecx, 3",
            "mov ecx, ecx",
            "rep movsq qword [rdi], qword [rsi]",
            "jmp 0x8fd8",
            "mov edx, dword [rsp]",
            "mov ebx, ebx",
            "mov dword [rax], edx",
            "mov edx, dword [rsp + rbx - 4]",
            "mov dword [rax + rbx - 4], edx",
            "jmp 0x8fd8",
            "mov ebx, ebx",
            "movzx edx, word [rsp + rbx - 2]",
            "mov word [rax + rbx - 2], dx",
            "jmp 0x8fd8"
        ]
    },
    "sym.wbcCtxGetDisplayName": {
        "function_address": "0x00006370",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdx",
            "push r13",
            "push r12",
            "mov r14, rcx",
            "push rbp",
            "push rbx",
            "mov r13, r8",
            "mov rbp, rdi",
            "mov r12, rsi",
            "sub rsp, 0x28",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "mov r8, rsp",
            "mov qword [rsp + 8], 0",
            "mov qword [rsp + 0x10], 0",
            "call fcn.000030b0",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x63e8",
            "mov eax, dword [rsp]",
            "mov rdx, qword [rsp + 0x10]",
            "cmp eax, 1",
            "je 0x6410",
            "mov rcx, qword [rsp + 8]",
            "mov qword [r15], rcx",
            "mov qword [r14], rdx",
            "mov dword [r13], eax",
            "jmp 0x63fc",
            "mov eax, 3",
            "nop word [rax + rax]",
            "mov ebx, eax",
            "nop word [rax + rax]",
            "mov rdi, qword [rsp + 8]",
            "call fcn.000031b0",
            "mov rdi, qword [rsp + 0x10]",
            "call fcn.000031b0",
            "add rsp, 0x28",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdx, [rsp + 4]",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00002fe0",
            "test eax, eax",
            "jne 0x63e0",
            "mov esi, dword [rsp + 4]",
            "lea rdx, [rsp + 0x18]",
            "mov rdi, rbp",
            "call fcn.00002f80",
            "test eax, eax",
            "jne 0x63e0",
            "mov rdi, qword [rsp + 0x10]",
            "call fcn.000031b0",
            "mov rax, qword [rsp + 0x18]",
            "mov rdi, qword [rax + 0x18]",
            "call fcn.00002f00",
            "mov rdi, qword [rsp + 0x18]",
            "mov qword [rsp + 0x10], rax",
            "call fcn.000031b0",
            "mov rdx, qword [rsp + 0x10]",
            "test rdx, rdx",
            "je 0x63d5",
            "mov eax, dword [rsp]",
            "jmp 0x63c4"
        ]
    },
    "fcn.000030b0": {
        "function_address": "0x000030b0",
        "instructions": [
            "jmp qword [reloc.wbcCtxLookupSid]"
        ]
    },
    "fcn.00002fe0": {
        "function_address": "0x00002fe0",
        "instructions": [
            "jmp qword [reloc.wbcCtxSidToUid]"
        ]
    },
    "fcn.00002f80": {
        "function_address": "0x00002f80",
        "instructions": [
            "jmp qword [reloc.wbcCtxGetpwuid]"
        ]
    },
    "sym.wbcCtxGetSidAliases": {
        "function_address": "0x00008180",
        "instructions": [
            "push r15",
            "push r14",
            "mov r10, rsi",
            "push r13",
            "push r12",
            "mov r13d, ecx",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r15, rdx",
            "sub rsp, 0x16e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x16d8], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x18], rdi",
            "lea rdi, [rsp + 0x100]",
            "test r10, r10",
            "mov qword [rsp + 0x28], rdx",
            "mov qword [rsp + 0x30], r8",
            "mov rsi, rdi",
            "mov qword [rsp + 0x20], rdi",
            "mov qword [rsp + 0x38], r9",
            "rep stosq qword [rdi], rax",
            "lea rcx, [rsp + 0x930]",
            "mov rbx, rcx",
            "mov qword [rsp + 0x10], rcx",
            "mov ecx, 0x1b5",
            "mov rdi, rbx",
            "rep stosq qword [rdi], rax",
            "je 0x8420",
            "lea rsi, [rsi + 0x118]",
            "mov rdi, r10",
            "mov edx, 0x100",
            "call fcn.00003080",
            "imul r12d, r13d, 0x39",
            "mov rdi, r12",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x8430",
            "test r13d, r13d",
            "je 0x8474",
            "sub r13d, 1",
            "mov rcx, r15",
            "mov rbp, r15",
            "add r13, 1",
            "mov rax, r13",
            "shl rax, 6",
            "lea r15, [rax + r13*4]",
            "lea r13, [rsp + 0x40]",
            "add r15, rcx",
            "mov qword [rsp], r13",
            "mov qword [rsp + 8], r15",
            "xor r15d, r15d",
            "mov r13, r15",
            "mov r15, rbx",
            "nop dword [rax]",
            "mov rsi, qword [rsp]",
            "mov edx, 0xbe",
            "mov rdi, rbp",
            "call fcn.00003080",
            "movsxd r14, eax",
            "add r14, r13",
            "lea rbx, [r14 + 2]",
            "cmp r12, rbx",
            "jae 0x82a2",
            "add r12, r12",
            "mov rdi, r15",
            "mov rsi, r12",
            "call sym.imp.realloc",
            "test rax, rax",
            "mov r15, rax",
            "je 0x8450",
            "mov rsi, qword [rsp]",
            "lea rdi, [r15 + r13]",
            "mov rdx, r12",
            "sub rdx, r13",
            "add rbp, 0x44",
            "lea r13, [r14 + 1]",
            "call sym.imp.strncpy",
            "cmp rbp, qword [rsp + 8]",
            "mov byte [r15 + r14], 0xa",
            "mov byte [r15 + r14 + 1], 0",
            "jne 0x8268",
            "mov rax, rbx",
            "mov rbx, r15",
            "mov r14d, eax",
            "mov rcx, qword [rsp + 0x10]",
            "mov rdx, qword [rsp + 0x20]",
            "mov esi, 0x32",
            "mov rdi, qword [rsp + 0x18]",
            "mov dword [rsp + 0x928], r14d",
            "xor r14d, r14d",
            "mov qword [rsp + 0x920], rbx",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x83d8",
            "mov edi, dword [rsp + 0x938]",
            "test edi, edi",
            "je 0x8329",
            "cmp qword [rsp + 0x16d0], 0",
            "je 0x8440",
            "xor edx, edx",
            "mov esi, 4",
            "call fcn.00003140",
            "cmp qword [rsp + 0x28], 0",
            "mov r14, rax",
            "je 0x8461",
            "mov eax, dword [rsp + 0x938]",
            "mov rbp, qword [rsp + 0x16d0]",
            "test eax, eax",
            "je 0x83c1",
            "lea r13, [rsp + 0x40]",
            "xor r15d, r15d",
            "mov esi, 0xa",
            "mov rdi, rbp",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x8374",
            "mov byte [rax], 0",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00003120",
            "test eax, eax",
            "jne 0x846c",
            "movzx eax, byte [rsp + 0x41]",
            "test al, al",
            "je 0x8440",
            "sub eax, 1",
            "mov rdi, rbp",
            "cdqe",
            "mov edx, dword [rsp + rax*4 + 0x48]",
            "mov eax, r15d",
            "add r15d, 1",
            "mov dword [r14 + rax*4], edx",
            "call sym.imp.strlen",
            "lea rbp, [rbp + rax + 1]",
            "mov eax, dword [rsp + 0x938]",
            "cmp eax, r15d",
            "ja 0x835f",
            "mov rcx, qword [rsp + 0x38]",
            "mov dword [rcx], eax",
            "mov rax, qword [rsp + 0x30]",
            "mov qword [rax], r14",
            "xor r14d, r14d",
            "nop dword [rax + rax]",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.winbindd_free_response",
            "mov rdi, r14",
            "call fcn.000031b0",
            "mov rcx, qword [rsp + 0x16d8]",
            "xor rcx, qword fs:[0x28]",
            "mov eax, r12d",
            "jne 0x847f",
            "add rsp, 0x16e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "xor r14d, r14d",
            "mov r12d, 5",
            "xor ebx, ebx",
            "jmp 0x83d8",
            "xor r14d, r14d",
            "mov r12d, 3",
            "jmp 0x83d8",
            "mov r12d, 8",
            "jmp 0x83d8",
            "mov rbx, rax",
            "xor r14d, r14d",
            "mov r12d, 3",
            "jmp 0x83d8",
            "mov r12d, 3",
            "jmp 0x83d8",
            "mov r12d, eax",
            "jmp 0x83d8",
            "mov r14d, 1",
            "jmp 0x82d8",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00003130",
        "instructions": [
            "jmp qword [reloc.realloc]"
        ]
    },
    "sym.wbcCtxLookupDomainController": {
        "function_address": "0x00005020",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "test rsi, rsi",
            "je 0x5051",
            "test rcx, rcx",
            "mov r12, rcx",
            "jne 0x5090",
            "xor ebx, ebx",
            "mov ebp, 5",
            "mov rdi, rbx",
            "call fcn.000031b0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x5132",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r14, rdi",
            "mov ecx, 0x106",
            "mov rdi, rsp",
            "rep stosq qword [rdi], rax",
            "lea r13, [rsp + 0x830]",
            "mov ebx, edx",
            "mov edx, 0xff",
            "mov ebp, 3",
            "mov rdi, r13",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "lea rdx, [0x00004e40]",
            "mov esi, 8",
            "mov edi, 1",
            "mov dword [rsp + 0x14], ebx",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x5058",
            "mov rcx, r13",
            "mov rdx, rsp",
            "mov esi, 0x28",
            "mov rdi, r14",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x5058",
            "lea rdi, [r13 + 8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx], rax",
            "je 0x5128",
            "mov qword [r12], rbx",
            "xor ebx, ebx",
            "jmp 0x5058",
            "mov ebp, 3",
            "jmp 0x5058",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxLookupSids": {
        "function_address": "0x000084b0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14d, edx",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "imul ebp, edx, 0xbf",
            "sub rsp, 0x1628",
            "mov qword [rsp], rdi",
            "mov dword [rsp + 0x18], edx",
            "add ebp, 1",
            "mov qword [rsp + 8], rcx",
            "mov qword [rsp + 0x10], r9",
            "movsxd rdi, ebp",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1618], rax",
            "xor eax, eax",
            "call sym.imp.malloc",
            "mov rbx, rax",
            "mov eax, 3",
            "test rbx, rbx",
            "je 0x8580",
            "test r14d, r14d",
            "mov r15, rbx",
            "jle 0x85b0",
            "mov eax, dword [rsp + 0x18]",
            "mov r14, r12",
            "mov r15, rbx",
            "sub eax, 1",
            "add rax, 1",
            "mov rdx, rax",
            "shl rdx, 6",
            "lea r12, [rdx + rax*4]",
            "add r12, r14",
            "jmp 0x8555",
            "cdqe",
            "add r14, 0x44",
            "add rax, r15",
            "cmp r14, r12",
            "lea r15, [rax + 1]",
            "mov byte [rax], 0xa",
            "je 0x85b0",
            "mov r9, rbx",
            "mov rsi, r15",
            "mov rdi, r14",
            "sub r9, r15",
            "lea r13d, [rbp + r9]",
            "mov edx, r13d",
            "call fcn.00003080",
            "cmp r13d, eax",
            "jge 0x8540",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov eax, 2",
            "mov rcx, qword [rsp + 0x1618]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x888f",
            "add rsp, 0x1628",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdx, [rsp + 0x40]",
            "xor eax, eax",
            "mov ecx, 0x106",
            "lea rbp, [rsp + 0x870]",
            "lea r8, [r15 + 1]",
            "mov esi, 0x18",
            "mov rdi, rdx",
            "mov byte [r15], 0",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "sub r8, rbx",
            "mov qword [rsp + 0x860], rbx",
            "mov dword [rsp + 0x868], r8d",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, qword [rsp]",
            "mov rcx, rbp",
            "call fcn.00002ee0",
            "mov rdi, rbx",
            "mov r12d, eax",
            "call sym.imp.free",
            "test r12d, r12d",
            "mov eax, r12d",
            "jne 0x8580",
            "mov eax, dword [rsp + 0x870]",
            "mov rdi, qword [rsp + 0x1610]",
            "sub eax, 0xda8",
            "test eax, eax",
            "jle 0x8658",
            "cdqe",
            "cmp byte [rdi + rax - 1], 0",
            "jne 0x8658",
            "lea rax, [rsp + 0x38]",
            "mov edx, 0xa",
            "mov rsi, rax",
            "mov qword [rsp], rax",
            "call sym.imp.strtoul",
            "mov rcx, qword [rsp + 0x38]",
            "cmp byte [rcx], 0xa",
            "je 0x8683",
            "xor ebx, ebx",
            "xor r12d, r12d",
            "mov r14d, 8",
            "mov rdi, rbp",
            "call sym.imp.winbindd_free_response",
            "mov rdi, r12",
            "call fcn.000031b0",
            "mov rdi, rbx",
            "call fcn.000031b0",
            "mov eax, r14d",
            "jmp 0x8580",
            "lea edi, [rax + 1]",
            "lea rdx, [0x00007bf0]",
            "mov esi, 0x60",
            "mov dword [rsp + 0x1c], eax",
            "lea r14, [rcx + 1]",
            "mov qword [rsp + 0x20], rax",
            "movsxd rdi, edi",
            "call fcn.00003140",
            "test rax, rax",
            "mov r12, rax",
            "je 0x8763",
            "mov r8, qword [rsp + 0x20]",
            "test r8d, r8d",
            "jle 0x8770",
            "sub r8d, 1",
            "lea rbx, [rax + 0x10]",
            "lea rax, [r8 + r8*2]",
            "shl rax, 5",
            "lea rax, [r12 + rax + 0x70]",
            "mov r15, rax",
            "jmp 0x873f",
            "mov rdi, r14",
            "mov byte [rax], 0",
            "mov rsi, rbx",
            "call fcn.00003120",
            "test eax, eax",
            "mov r14d, eax",
            "jne 0x8888",
            "mov rax, qword [rsp + 0x38]",
            "mov esi, 0xa",
            "lea r14, [rax + 1]",
            "mov rdi, r14",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov qword [rsp + 0x38], rax",
            "je 0x8756",
            "mov byte [rax], 0",
            "mov rdi, r14",
            "call fcn.00002f00",
            "test rax, rax",
            "mov qword [rbx - 0x10], rax",
            "je 0x8763",
            "mov rax, qword [rsp + 0x38]",
            "add rbx, 0x60",
            "cmp rbx, r15",
            "lea r14, [rax + 1]",
            "je 0x8770",
            "mov esi, 0x20",
            "mov rdi, r14",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov qword [rsp + 0x38], rax",
            "jne 0x86e0",
            "xor ebx, ebx",
            "mov r14d, 8",
            "jmp 0x8663",
            "xor ebx, ebx",
            "mov r14d, 3",
            "jmp 0x8663",
            "mov rsi, qword [rsp]",
            "mov rdi, r14",
            "mov edx, 0xa",
            "xor ebx, ebx",
            "mov r14d, 8",
            "call sym.imp.strtoul",
            "mov rcx, qword [rsp + 0x38]",
            "cmp byte [rcx], 0xa",
            "jne 0x8663",
            "add rcx, 1",
            "cmp eax, dword [rsp + 0x18]",
            "mov dword [rsp + 0x20], eax",
            "jne 0x8663",
            "mov eax, dword [rsp + 0x18]",
            "lea rdx, [0x00007bc0]",
            "mov esi, 0x18",
            "mov qword [rsp + 0x28], rcx",
            "add eax, 1",
            "movsxd rdi, eax",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x88cd",
            "mov rcx, qword [rsp + 0x28]",
            "lea r13, [rax + 8]",
            "xor r14b, r14b",
            "cmp r14d, dword [rsp + 0x20]",
            "jge 0x889f",
            "mov r15, qword [rsp]",
            "mov edx, 0xa",
            "mov rdi, rcx",
            "mov rsi, r15",
            "call sym.imp.strtoul",
            "mov edx, eax",
            "mov dword [r13 + 8], eax",
            "shr edx, 0x1f",
            "test dl, dl",
            "jne 0x8894",
            "cmp dword [rsp + 0x1c], eax",
            "jle 0x8894",
            "mov rax, qword [rsp + 0x38]",
            "cmp byte [rax], 0x20",
            "jne 0x8894",
            "lea rdi, [rax + 1]",
            "mov edx, 0xa",
            "mov rsi, r15",
            "call sym.imp.strtoul",
            "mov rdx, qword [rsp + 0x38]",
            "mov dword [r13 - 8], eax",
            "cmp byte [rdx], 0x20",
            "jne 0x8894",
            "lea r15, [rdx + 1]",
            "mov esi, 0xa",
            "mov rdi, r15",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov qword [rsp + 0x38], rax",
            "je 0x8894",
            "mov byte [rax], 0",
            "mov rdi, r15",
            "add r13, 0x18",
            "call fcn.00002f00",
            "mov qword [r13 - 0x18], rax",
            "test rax, rax",
            "je 0x88cd",
            "mov rax, qword [rsp + 0x38]",
            "add r14d, 1",
            "lea rcx, [rax + 1]",
            "jmp 0x87e1",
            "xor ebx, ebx",
            "jmp 0x8663",
            "call sym.imp.__stack_chk_fail",
            "mov r14d, 8",
            "jmp 0x8663",
            "cmp byte [rcx], 0",
            "mov r14d, 8",
            "jne 0x8663",
            "mov rax, qword [rsp + 8]",
            "mov rdi, rbp",
            "mov qword [rax], r12",
            "mov rax, qword [rsp + 0x10]",
            "mov qword [rax], rbx",
            "call sym.imp.winbindd_free_response",
            "xor eax, eax",
            "jmp 0x8580",
            "mov r14d, 3",
            "jmp 0x8663"
        ]
    },
    "sym.wbcCtxChangeTrustCredentials": {
        "function_address": "0x00003a50",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov rbx, rsp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x3aaa",
            "lea rdi, [rsp + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rdx, rbx",
            "mov rcx, rbp",
            "mov esi, 0x21",
            "mov rdi, r13",
            "call fcn.00002d40",
            "mov edx, dword [rsp + 0x838]",
            "test edx, edx",
            "je 0x3ae1",
            "test r12, r12",
            "je 0x3adc",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00003620",
            "test eax, eax",
            "jne 0x3ae1",
            "mov eax, 0xa",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x3b02",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxLookupName": {
        "function_address": "0x00008c60",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdx",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov r12, rdi",
            "mov ecx, 0x106",
            "mov edx, 0xff",
            "mov r14, r8",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "lea rdi, [rsp + 0x218]",
            "mov edx, 0xff",
            "mov rsi, r15",
            "call sym.imp.strncpy",
            "mov rcx, rbp",
            "mov rdx, rsp",
            "mov esi, 0x16",
            "mov rdi, r12",
            "call fcn.00002ee0",
            "test eax, eax",
            "je 0x55c0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x55dc",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdi, [rbp + 8]",
            "mov rsi, r13",
            "call fcn.00003120",
            "test eax, eax",
            "jne 0x559b",
            "mov edx, dword [rsp + 0x938]",
            "mov dword [r14], edx",
            "jmp 0x559b",
            "call sym.imp.__stack_chk_fail",
            "test rcx, rcx",
            "je 0x8c6a",
            "test r8, r8",
            "jne 0x8c70",
            "mov eax, 5",
            "ret",
            "jmp 0x5510"
        ]
    },
    "sym.wbcCtxListGroups": {
        "function_address": "0x00007de0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "sub rsp, 0x1608",
            "lea rbx, [rsp + 0x20]",
            "mov qword [rsp + 0x18], rcx",
            "mov ecx, 0x106",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + sym.wbcSetUidHwm], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "test rsi, rsi",
            "mov qword [rsp + 0x10], rdx",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x850]",
            "mov qword [rsp + 8], rdi",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x7e48",
            "lea rdi, [rbx + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rcx, qword [rsp + 8]",
            "mov rdx, rbx",
            "mov esi, 0x13",
            "mov rdi, rbp",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r13d, eax",
            "jne 0x7f20",
            "mov edi, dword [rsp + 0x858]",
            "call fcn.00003200",
            "mov rbp, rax",
            "mov eax, 3",
            "test rbp, rbp",
            "je 0x7f37",
            "mov r15, qword [rsp + 0x15f0]",
            "test r15, r15",
            "je 0x7f7b",
            "mov eax, dword [rsp + 0x858]",
            "xor ebx, ebx",
            "test eax, eax",
            "jne 0x7edf",
            "jmp 0x7f14",
            "mov byte [rax], 0",
            "lea r14, [rax + 1]",
            "mov eax, ebx",
            "lea r12, [rbp + rax*8]",
            "mov rdi, r15",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r12], rax",
            "je 0x7f60",
            "add ebx, 1",
            "test r14, r14",
            "je 0x7f0b",
            "cmp dword [rsp + 0x858], ebx",
            "jbe 0x7f14",
            "mov r15, r14",
            "mov esi, 0x2c",
            "mov rdi, r15",
            "call sym.imp.strchr",
            "test rax, rax",
            "jne 0x7ea8",
            "mov eax, ebx",
            "mov rdi, r15",
            "add ebx, 1",
            "lea r14, [rbp + rax*8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14], rax",
            "je 0x7f60",
            "cmp dword [rsp + 0x858], ebx",
            "je 0x7f68",
            "mov r13d, 8",
            "jmp 0x7f22",
            "xor ebp, ebp",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.winbindd_free_response",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov eax, r13d",
            "mov rdx, qword [rsp + 0x15f8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x7f7f",
            "add rsp, 0x1608",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r13d, 3",
            "jmp 0x7f22",
            "mov rax, qword [rsp + 0x10]",
            "mov dword [rax], ebx",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rax], rbp",
            "xor ebp, ebp",
            "jmp 0x7f22",
            "xor ebx, ebx",
            "jmp 0x7f0b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxCreate": {
        "function_address": "0x000035d0",
        "instructions": [
            "push rbx",
            "lea rdx, [0x00003440]",
            "mov esi, 0x18",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x3608",
            "call sym.imp.winbindd_ctx_create",
            "test rax, rax",
            "je 0x360c",
            "mov qword [rbx], rax",
            "mov rax, rbx",
            "pop rbx",
            "ret",
            "xor eax, eax",
            "pop rbx",
            "ret",
            "mov rdi, rbx",
            "call fcn.000031b0",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.winbindd_ctx_create": {
        "function_address": "0x00002f90",
        "instructions": [
            "jmp qword [reloc.winbindd_ctx_create]"
        ]
    },
    "sym.wbcCtxCredentialCache": {
        "function_address": "0x00007710",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r8, rsi",
            "push rbp",
            "push rbx",
            "mov rsi, rcx",
            "mov ecx, 0x106",
            "mov r14, rdx",
            "sub rsp, 0x1618",
            "mov qword [rdx], 0",
            "lea rbp, [rsp + 0x30]",
            "lea rbx, [rsp + 0x860]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1608], rax",
            "xor eax, eax",
            "mov rdi, rbp",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x7775",
            "mov qword [rsi], 0",
            "test r8, r8",
            "je 0x7789",
            "mov r13, qword [r8]",
            "test r13, r13",
            "je 0x778c",
            "cmp dword [r8 + 0x10], 1",
            "je 0x77e0",
            "xor r13d, r13d",
            "xor ebp, ebp",
            "mov r12d, 5",
            "mov rdi, r13",
            "call sym.imp.free",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov rdx, qword [rsp + 0x1608]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, r12d",
            "jne 0x7ac9",
            "add rsp, 0x1618",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rax, qword [r8 + 0x18]",
            "test rax, rax",
            "mov qword [rsp + 0x20], rax",
            "je 0x78d9",
            "mov r12, qword [r8 + 0x20]",
            "mov qword [rsp + 0x10], 0",
            "mov qword [rsp + 0x28], 0",
            "mov qword [rsp + 0x18], 0",
            "mov rdx, qword [r12]",
            "lea rsi, str.negotiate_blob",
            "mov qword [rsp + 8], r8",
            "mov rdi, rdx",
            "mov qword [rsp], rdx",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "mov rdx, qword [rsp]",
            "mov r8, qword [rsp + 8]",
            "jne 0x78a8",
            "cmp qword [rsp + 0x18], 0",
            "jne 0x7789",
            "mov qword [rsp + 0x18], r12",
            "nop dword [rax + rax]",
            "add qword [rsp + 0x10], 1",
            "add r12, 0x20",
            "mov rax, qword [rsp + 0x10]",
            "cmp rax, qword [rsp + 0x20]",
            "jne 0x7811",
            "cmp qword [r8 + 8], 0",
            "mov qword [rsp], r8",
            "je 0x7a80",
            "xor edx, edx",
            "mov rcx, rbx",
            "mov esi, 0x24",
            "mov rdi, r15",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r12d, eax",
            "mov r8, qword [rsp]",
            "je 0x78f0",
            "mov r13, qword [rsp + 0x850]",
            "xor ebp, ebp",
            "jmp 0x7794",
            "lea rsi, str.challenge_blob",
            "mov rdi, rdx",
            "mov qword [rsp], r8",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "mov r8, qword [rsp]",
            "jne 0x7850",
            "cmp qword [rsp + 0x28], 0",
            "jne 0x7789",
            "mov qword [rsp + 0x28], r12",
            "jmp 0x7850",
            "mov qword [rsp + 0x28], 0",
            "mov qword [rsp + 0x18], 0",
            "jmp 0x7866",
            "push qword [r8]",
            "movsx eax, byte [rsp + 0x870]",
            "lea rdi, [rbp + 0x11c]",
            "mov r9, qword [r8 + 8]",
            "lea r8, str._s_c_s",
            "mov edx, 1",
            "mov ecx, 0x100",
            "mov esi, 0xff",
            "push rax",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "pop rax",
            "pop rdx",
            "call sym.imp.getuid",
            "mov rdx, qword [rsp + 0x18]",
            "mov dword [rsp + 0x148], eax",
            "mov dword [rsp + 0x24c], 0",
            "mov dword [rsp + 0x250], 0",
            "mov dword [rsp + 0x858], 0",
            "test rdx, rdx",
            "je 0x7ace",
            "mov rax, qword [rdx + 0x18]",
            "cmp qword [rsp + 0x28], 0",
            "mov dword [rsp + 0x24c], eax",
            "mov rdx, qword [rdx + 0x18]",
            "mov eax, edx",
            "mov dword [rsp + 0x858], edx",
            "je 0x7a99",
            "mov rsi, qword [rsp + 0x28]",
            "mov rdx, qword [rsi + 0x18]",
            "mov dword [rsp + 0x250], edx",
            "add eax, dword [rsi + 0x18]",
            "test eax, eax",
            "mov dword [rsp + 0x858], eax",
            "jne 0x7aa1",
            "mov rax, qword [rsp + 0x18]",
            "test rax, rax",
            "je 0x79cb",
            "mov rdx, qword [rax + 0x18]",
            "mov rax, qword [rsp + 0x18]",
            "mov rdi, qword [rsp + 0x850]",
            "mov rsi, qword [rax + 0x10]",
            "call sym.imp.memcpy",
            "mov rax, qword [rsp + 0x28]",
            "test rax, rax",
            "je 0x79f1",
            "mov edi, dword [rsp + 0x24c]",
            "mov rsi, qword [rax + 0x10]",
            "add rdi, qword [rsp + 0x850]",
            "mov rdx, qword [rax + 0x18]",
            "call sym.imp.memcpy",
            "mov rcx, rbx",
            "mov rdx, rbp",
            "mov esi, 0x3c",
            "mov rdi, r15",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x7892",
            "lea rdx, [0x000065a0]",
            "mov esi, 0x10",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x7ae1",
            "mov qword [rax], 0",
            "mov qword [rax + 8], 0",
            "lea r13, [rax + 8]",
            "mov r9d, dword [rsp + 0x878]",
            "mov r8, qword [rsp + 0x1600]",
            "lea rdx, str.auth_blob",
            "xor ecx, ecx",
            "mov rsi, r13",
            "mov rdi, rax",
            "call fcn.00002db0",
            "test eax, eax",
            "mov r12d, eax",
            "je 0x7af4",
            "mov r13, qword [rsp + 0x850]",
            "jmp 0x7794",
            "lea rdi, [rbp + 0x11c]",
            "mov edx, 0xff",
            "mov rsi, r13",
            "call sym.imp.strncpy",
            "jmp 0x7926",
            "test edx, edx",
            "je 0x79b5",
            "mov edi, eax",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [rsp + 0x850], rax",
            "jne 0x79a7",
            "xor r13d, r13d",
            "xor ebp, ebp",
            "mov r12d, 3",
            "jmp 0x7794",
            "call sym.imp.__stack_chk_fail",
            "xor eax, eax",
            "cmp qword [rsp + 0x28], 0",
            "jne 0x7985",
            "jmp 0x79f1",
            "mov r13, qword [rsp + 0x850]",
            "mov r12d, 3",
            "jmp 0x7794",
            "lea r8, [rbx + 8]",
            "lea rdx, str.session_key",
            "xor ecx, ecx",
            "mov r9d, 0x10",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00002db0",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x7a73",
            "cmp byte [rsp + 0x87c], 0",
            "jne 0x7b2f",
            "mov qword [r14], rbp",
            "jmp 0x7892",
            "lea r8, [rbx + 0x1c]",
            "lea rdx, str.new_spnego",
            "xor ecx, ecx",
            "mov r9d, 1",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00002db0",
            "test eax, eax",
            "je 0x7b27",
            "mov r13, qword [rsp + 0x850]",
            "mov r12d, eax",
            "jmp 0x7794"
        ]
    },
    "sym.wbcCtxGetgrent": {
        "function_address": "0x00009830",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov rbx, rsi",
            "sub rsp, 0x848",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x838], rax",
            "xor eax, eax",
            "test rdi, rdi",
            "je 0x9910",
            "mov edx, dword [rbp + 0x14]",
            "mov ecx, dword [rbp + 0x10]",
            "cmp edx, ecx",
            "jb 0x98b7",
            "lea rdi, [0x0020de40]",
            "mov dword [rbp + 0x14], 0",
            "call sym.imp.winbindd_free_response",
            "xor eax, eax",
            "mov ecx, 0x106",
            "mov rdi, rsp",
            "rep stosq qword [rdi], rax",
            "lea rcx, [0x0020de40]",
            "mov rdx, rsp",
            "mov esi, 0xc",
            "mov rdi, rbp",
            "mov dword [rsp + 0x118], 0x1f4",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x98f3",
            "mov ecx, dword [0x0020de48]",
            "mov edx, dword [rbp + 0x14]",
            "mov dword [rbp + 0x10], ecx",
            "imul rdx, rdx, 0x20c",
            "mov rsi, qword [0x0020ebe0]",
            "imul ecx, ecx, 0x20c",
            "lea rdi, [rsi + rdx]",
            "add ecx, dword [rdi + 0x208]",
            "add rsi, rcx",
            "call fcn.00006680",
            "mov rdx, rax",
            "mov qword [rbx], rax",
            "mov eax, 3",
            "test rdx, rdx",
            "je 0x98f3",
            "add dword [rbp + 0x14], 1",
            "xor al, al",
            "mov rbx, qword [rsp + 0x838]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x991d",
            "add rsp, 0x848",
            "pop rbx",
            "pop rbp",
            "ret",
            "call fcn.00003230",
            "mov rbp, rax",
            "jmp 0x985b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxAllocateGid": {
        "function_address": "0x00003bd0",
        "instructions": [
            "push rbx",
            "mov r9, rdi",
            "mov ecx, 0x106",
            "mov rbx, rsi",
            "mov esi, 0x1f",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea r8, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, r8",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, r8",
            "mov rdi, r9",
            "call fcn.00002d40",
            "test eax, eax",
            "jne 0x395e",
            "mov edx, dword [rsp + 0x838]",
            "mov dword [rbx], edx",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x397a",
            "add rsp, 0x15e0",
            "pop rbx",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x3be0",
            "jmp 0x3900",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcCtxPingDc2": {
        "function_address": "0x00006820",
        "instructions": [
            "push r14",
            "push r13",
            "mov r14, rdi",
            "push r12",
            "push rbp",
            "mov r12, rcx",
            "push rbx",
            "mov ecx, 0x106",
            "mov r13, rdx",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "test rsi, rsi",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov rbx, rsp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x687f",
            "lea rdi, [rsp + 0x18]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "mov rcx, rbp",
            "mov rdx, rbx",
            "mov esi, 0x22",
            "mov rdi, r14",
            "call fcn.00002ee0",
            "test r12, r12",
            "je 0x68e2",
            "cmp qword [rsp + 0x15d0], 0",
            "je 0x68e2",
            "mov ebx, dword [rsp + 0x830]",
            "xor edx, edx",
            "mov edi, 1",
            "sub rbx, 0xda8",
            "mov rsi, rbx",
            "call fcn.00003140",
            "mov rdi, rax",
            "mov qword [r12], rax",
            "mov eax, 3",
            "test rdi, rdi",
            "je 0x6906",
            "mov rsi, qword [rsp + 0x15d0]",
            "mov rdx, rbx",
            "call sym.imp.strlcpy",
            "xor eax, eax",
            "mov edx, dword [rsp + 0x838]",
            "test edx, edx",
            "je 0x6906",
            "test r13, r13",
            "je 0x6901",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00003620",
            "test eax, eax",
            "jne 0x6906",
            "mov eax, 0xa",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x6929",
            "add rsp, 0x15e0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxPing": {
        "function_address": "0x00004fa0",
        "instructions": [
            "sub rsp, 0x15e8",
            "mov r8, rdi",
            "mov ecx, 0x106",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rsi, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rsi",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, rsi",
            "mov rdi, r8",
            "mov esi, 0x23",
            "call fcn.00002ee0",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x5008",
            "add rsp, 0x15e8",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxSetgrent": {
        "function_address": "0x00009760",
        "instructions": [
            "test rdi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "je 0x97b0",
            "mov eax, dword [rbx + 0x10]",
            "test eax, eax",
            "je 0x978a",
            "lea rdi, [0x0020de40]",
            "mov dword [rbx + 0x10], 0",
            "mov dword [rbx + 0x14], 0",
            "call sym.imp.winbindd_free_response",
            "lea rdx, [0x0020de40]",
            "mov ecx, 0x1b5",
            "xor eax, eax",
            "mov esi, 0xa",
            "mov rdi, rdx",
            "xor edx, edx",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "pop rbx",
            "jmp fcn.00002ee0",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x9769"
        ]
    },
    "sym.wbcCtxLogoffUserEx": {
        "function_address": "0x00006940",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x1618",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1608], rax",
            "xor eax, eax",
            "test rsi, rsi",
            "mov al, 5",
            "je 0x6ae0",
            "mov r8, qword [rsi]",
            "test r8, r8",
            "je 0x6ae0",
            "mov r13, qword [rsi + 8]",
            "mov r14, rdi",
            "mov r15, rdx",
            "test r13, r13",
            "je 0x6b10",
            "mov rbx, qword [rsi + 0x10]",
            "test rbx, rbx",
            "je 0x6ae0",
            "lea rdi, [rsp + 0x30]",
            "xor eax, eax",
            "mov ecx, 0x106",
            "mov rsi, r8",
            "add rbx, 0x10",
            "xor ebp, ebp",
            "mov qword [rsp + 0x10], rdi",
            "mov r12, qword [rsp + 0x10]",
            "rep stosq qword [rdi], rax",
            "lea rcx, [rsp + 0x860]",
            "mov rdx, rcx",
            "mov qword [rsp + 0x20], rcx",
            "mov ecx, 0x1b5",
            "mov rdi, rdx",
            "mov edx, 0xff",
            "rep stosq qword [rdi], rax",
            "mov rdi, r12",
            "add rdi, 0x118",
            "call sym.imp.strncpy",
            "lea rax, [r12 + 0x14]",
            "mov qword [rsp + 0x28], rax",
            "lea rax, [r12 + 0x318]",
            "mov qword [rsp + 0x18], rax",
            "lea rax, [r12 + 0x218]",
            "mov qword [rsp + 8], rax",
            "jmp 0x6a3c",
            "mov rsi, qword [rbx]",
            "test rsi, rsi",
            "je 0x6a2f",
            "mov rdi, qword [rsp + 8]",
            "mov edx, 0xff",
            "call sym.imp.strncpy",
            "add rbp, 1",
            "add rbx, 0x20",
            "cmp r13, rbp",
            "je 0x6aa0",
            "mov r12, qword [rbx - 0x10]",
            "lea rsi, str.ccfilename",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "je 0x6a18",
            "lea rsi, str.user_uid",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "jne 0x6b68",
            "mov rsi, qword [rbx]",
            "test rsi, rsi",
            "je 0x6a2f",
            "cmp qword [rbx + 8], 4",
            "mov edx, 4",
            "mov rdi, qword [rsp + 0x18]",
            "cmovbe rdx, qword [rbx + 8]",
            "mov ecx, 0x518",
            "add rbp, 1",
            "add rbx, 0x20",
            "call sym.imp.__memcpy_chk",
            "cmp r13, rbp",
            "jne 0x6a3c",
            "nop dword [rax]",
            "mov rdx, qword [rsp + 0x10]",
            "mov rcx, qword [rsp + 0x20]",
            "mov esi, 0x10",
            "mov rdi, r14",
            "call fcn.00002ee0",
            "mov edx, dword [rsp + 0x868]",
            "test edx, edx",
            "je 0x6ae0",
            "test r15, r15",
            "je 0x6ad8",
            "mov rdi, qword [rsp + 0x20]",
            "mov rsi, r15",
            "call fcn.00003620",
            "test eax, eax",
            "jne 0x6ae0",
            "mov eax, 0xa",
            "nop dword [rax]",
            "mov rcx, qword [rsp + 0x1608]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x6bae",
            "add rsp, 0x1618",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "cmp qword [rsi + 0x10], 0",
            "jne 0x6ae0",
            "lea rdi, [rsp + 0x30]",
            "mov rax, r13",
            "mov ecx, 0x106",
            "mov edx, 0xff",
            "mov rsi, r8",
            "mov qword [rsp + 0x10], rdi",
            "rep stosq qword [rdi], rax",
            "lea rax, [rsp + 0x860]",
            "mov qword [rsp + 0x20], rax",
            "mov rdi, rax",
            "mov rax, r13",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, qword [rsp + 0x10]",
            "add rdi, 0x118",
            "call sym.imp.strncpy",
            "jmp 0x6aa0",
            "lea rsi, str.flags",
            "mov rdi, r12",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "jne 0x6a2f",
            "mov rsi, qword [rbx]",
            "test rsi, rsi",
            "je 0x6a2f",
            "cmp qword [rbx + 8], 4",
            "mov edx, 4",
            "mov rdi, qword [rsp + 0x28]",
            "cmovbe rdx, qword [rbx + 8]",
            "mov ecx, 0x81c",
            "call sym.imp.__memcpy_chk",
            "jmp 0x6a2f",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxResolveWinsByIP": {
        "function_address": "0x00005e80",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "mov edx, 0xff",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x118]",
            "call sym.imp.strncpy",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 0x2b",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x5f18",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x5f37",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "lea rdi, [rbx + 8]",
            "call fcn.00002f00",
            "test rax, rax",
            "je 0x5f30",
            "mov qword [r12], rax",
            "jmp 0x5eee",
            "mov ebp, 3",
            "jmp 0x5eee",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxInterfaceDetails": {
        "function_address": "0x00005750",
        "instructions": [
            "push r15",
            "push r14",
            "mov ecx, 0x106",
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "mov r13, rsi",
            "mov esi, 0x30",
            "mov ebp, 3",
            "sub rsp, 0x15f8",
            "lea rdx, [rsp + 0x10]",
            "lea rbx, [rsp + 0x840]",
            "mov qword [rsp + 8], 0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15e8], rax",
            "xor eax, eax",
            "mov rdi, rdx",
            "lea rdx, [0x00004dc0]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov r14, rax",
            "je 0x57dd",
            "xor edx, edx",
            "xor esi, esi",
            "mov rcx, rbx",
            "mov rdi, r12",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x5810",
            "mov rdi, r14",
            "call fcn.000031b0",
            "mov rsi, qword [rsp + 0x15e8]",
            "xor rsi, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x5929",
            "add rsp, 0x15f8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov eax, dword [rsp + 0x848]",
            "xor edx, edx",
            "mov rcx, rbx",
            "mov esi, 0x24",
            "mov rdi, r12",
            "mov dword [r14], eax",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x57dd",
            "lea rdi, [rbx + 9]",
            "mov bpl, 3",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14 + 8], rax",
            "je 0x57dd",
            "movzx eax, byte [rsp + 0x848]",
            "xor edx, edx",
            "mov rcx, rbx",
            "mov esi, 0x2e",
            "mov rdi, r12",
            "mov byte [r14 + 0x10], al",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x57dd",
            "lea r15, [rbx + 8]",
            "mov bpl, 3",
            "mov rdi, r15",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14 + 0x18], rax",
            "je 0x57dd",
            "xor edx, edx",
            "mov rcx, rbx",
            "mov esi, 0x25",
            "mov rdi, r12",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x57dd",
            "mov rdi, r15",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [r14 + 0x20], rax",
            "je 0x5905",
            "lea rdx, [rsp + 8]",
            "mov rsi, rax",
            "mov rdi, r12",
            "call fcn.00002d20",
            "cmp eax, 7",
            "je 0x5916",
            "test eax, eax",
            "jne 0x590f",
            "mov rax, qword [rsp + 8]",
            "test rax, rax",
            "je 0x591f",
            "mov rdi, qword [rax + 8]",
            "call sym.imp.__strdup",
            "mov rdi, qword [rsp + 8]",
            "mov qword [r14 + 0x28], rax",
            "call fcn.000031b0",
            "cmp qword [r14 + 0x28], 0",
            "je 0x5905",
            "mov qword [r13], r14",
            "xor r14d, r14d",
            "jmp 0x57dd",
            "mov ebp, 3",
            "jmp 0x57dd",
            "mov ebp, eax",
            "jmp 0x57dd",
            "mov qword [rsp + 8], 0",
            "mov qword [r14 + 0x28], 0",
            "jmp 0x58f9",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00002d20": {
        "function_address": "0x00002d20",
        "instructions": [
            "jmp qword [reloc.wbcCtxDomainInfo]"
        ]
    },
    "sym.wbcCtxSidToUid": {
        "function_address": "0x00004cb0",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r8, rsi",
            "mov r12, rdx",
            "mov edx, 0x100",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbp, [rsp + 0x830]",
            "lea rsi, [rsp + 0x118]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, r8",
            "call fcn.00003080",
            "mov rcx, rbp",
            "mov rdx, rsp",
            "mov esi, 0x19",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x4c7d",
            "mov edx, dword [rsp + 0x838]",
            "mov dword [r12], edx",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x4c9e",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x4cba",
            "test rdx, rdx",
            "jne 0x4cc0",
            "mov eax, 5",
            "ret",
            "jmp 0x4c00"
        ]
    },
    "sym.wbcCtxGetpwsid": {
        "function_address": "0x00009420",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ecx, 0x106",
            "mov r8, rsi",
            "mov r12, rdx",
            "mov edx, 0x100",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "lea rsi, [rsp + 0x118]",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, r8",
            "call fcn.00003080",
            "mov rcx, rbx",
            "mov rdx, rsp",
            "mov esi, 3",
            "mov rdi, r13",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x93ec",
            "lea rdi, [rbx + 8]",
            "call fcn.000065b0",
            "test rax, rax",
            "mov qword [r12], rax",
            "mov eax, 3",
            "cmove ebp, eax",
            "mov rdx, qword [rsp + 0x15d8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x940f",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rdx, rdx",
            "je 0x9430",
            "jmp 0x9360",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcCtxGetpwent": {
        "function_address": "0x00009660",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "mov rbx, rdi",
            "sub rsp, 0x848",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x838], rax",
            "xor eax, eax",
            "test rdi, rdi",
            "je 0x9730",
            "mov edx, dword [rbx + 0xc]",
            "cmp edx, dword [rbx + 8]",
            "jb 0x96e5",
            "lea rdi, [0x0020d080]",
            "mov dword [rbx + 0xc], 0",
            "call sym.imp.winbindd_free_response",
            "xor eax, eax",
            "mov ecx, 0x106",
            "mov rdi, rsp",
            "rep stosq qword [rdi], rax",
            "lea rcx, [0x0020d080]",
            "mov rdx, rsp",
            "mov esi, 9",
            "mov rdi, rbx",
            "mov dword [rsp + 0x118], 0x1f4",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x9712",
            "mov eax, dword [0x0020d088]",
            "mov edx, dword [rbx + 0xc]",
            "mov dword [rbx + 8], eax",
            "imul rdx, rdx, 0x508",
            "mov rdi, rdx",
            "add rdi, qword [0x0020de20]",
            "call fcn.000065b0",
            "mov rdx, rax",
            "mov qword [rbp], rax",
            "mov eax, 3",
            "test rdx, rdx",
            "je 0x9712",
            "add dword [rbx + 0xc], 1",
            "xor al, al",
            "mov rcx, qword [rsp + 0x838]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x973d",
            "add rsp, 0x848",
            "pop rbx",
            "pop rbp",
            "ret",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x968b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcAllocateMemory": {
        "function_address": "0x000034c0",
        "instructions": [
            "push rbx",
            "mov eax, 0x2000000",
            "mov rbx, rdx",
            "xor edx, edx",
            "div rsi",
            "cmp rax, rdi",
            "jbe 0x3500",
            "imul rsi, rdi",
            "mov edi, 1",
            "add rsi, 0x10",
            "call sym.imp.calloc",
            "test rax, rax",
            "je 0x3500",
            "mov dword [rax], 0x7a2b0e1e",
            "mov qword [rax + 8], rbx",
            "add rax, 0x10",
            "pop rbx",
            "ret",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x00002fc0",
        "instructions": [
            "jmp qword [reloc.calloc]"
        ]
    },
    "sym.wbcCtxUidToSid": {
        "function_address": "0x00003f10",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov r9, rdi",
            "mov ecx, 0x106",
            "mov rbp, rdx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "mov rdx, rsp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov dword [rsp + 0x118], esi",
            "mov esi, 0x1c",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rcx, rbx",
            "mov rdi, r9",
            "call fcn.00002ee0",
            "test eax, eax",
            "jne 0x3ee9",
            "lea rdi, [rbx + 8]",
            "mov rsi, rbp",
            "call fcn.00003120",
            "mov rbx, qword [rsp + 0x15d8]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x3f06",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "ret",
            "call sym.imp.__stack_chk_fail",
            "test rdx, rdx",
            "je 0x3f20",
            "jmp 0x3e80",
            "mov eax, 5",
            "ret"
        ]
    },
    "sym.wbcCtxSetpwent": {
        "function_address": "0x00009590",
        "instructions": [
            "test rdi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "je 0x95e0",
            "mov eax, dword [rbx + 8]",
            "test eax, eax",
            "je 0x95ba",
            "lea rdi, [0x0020d080]",
            "mov dword [rbx + 8], 0",
            "mov dword [rbx + 0xc], 0",
            "call sym.imp.winbindd_free_response",
            "lea rdx, [0x0020d080]",
            "mov ecx, 0x1b5",
            "xor eax, eax",
            "mov esi, 7",
            "mov rdi, rdx",
            "xor edx, edx",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "pop rbx",
            "jmp fcn.00002ee0",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x9599"
        ]
    },
    "sym.wbcCtxLookupDomainControllerEx": {
        "function_address": "0x000054d0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rcx",
            "push r13",
            "push r12",
            "mov ecx, 0x106",
            "push rbp",
            "push rbx",
            "mov r12, rdi",
            "mov rbp, rdx",
            "mov edx, 0xff",
            "mov r13, r9",
            "sub rsp, 0x15f8",
            "lea rbx, [rsp + 0x10]",
            "lea r14, [rsp + 0x840]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15e8], rax",
            "xor eax, eax",
            "mov rdi, rbx",
            "rep stosq qword [rdi], rax",
            "mov rdi, r14",
            "mov dword [rsp + 0x428], r8d",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rbx + 0x118]",
            "call sym.imp.strncpy",
            "test r15, r15",
            "je 0x52f4",
            "lea rdi, [rbx + 0x318]",
            "mov edx, 0xff",
            "mov rsi, r15",
            "call sym.imp.strncpy",
            "test rbp, rbp",
            "je 0x5360",
            "mov rdi, rbp",
            "mov rsi, rsp",
            "mov qword [rsp], 0",
            "call fcn.00002f40",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x5340",
            "mov rdx, qword [rsp + 0x15e8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x54c0",
            "add rsp, 0x15f8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rbp, qword [rsp]",
            "lea rdi, [rbx + 0x218]",
            "mov edx, 0xff",
            "mov rsi, rbp",
            "call sym.imp.strncpy",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov rcx, r14",
            "mov rdx, rbx",
            "mov esi, 0x28",
            "mov rdi, r12",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x5312",
            "test r13, r13",
            "je 0x5312",
            "lea rdx, [0x00004e80]",
            "mov esi, 0x48",
            "mov edi, 1",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x5460",
            "lea rdi, [r14 + 8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx], rax",
            "je 0x5480",
            "lea rdi, [r14 + 0x108]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 8], rax",
            "je 0x5480",
            "mov eax, dword [rsp + 0xa48]",
            "lea rdi, [r14 + 0x20c]",
            "mov rsi, rsp",
            "mov word [rbx + 0x10], ax",
            "call fcn.00003160",
            "test eax, eax",
            "jne 0x5413",
            "mov edi, 0x10",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [rbx + 0x18], rax",
            "je 0x5480",
            "mov rdx, qword [rsp]",
            "mov qword [rax], rdx",
            "mov rdx, qword [rsp + 8]",
            "mov qword [rax + 8], rdx",
            "lea rdi, [r14 + 0x30c]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x20], rax",
            "je 0x5480",
            "cmp byte [rsp + 0xc4c], 0",
            "jne 0x546a",
            "mov eax, dword [rsp + 0xd4c]",
            "mov dword [rbx + 0x30], eax",
            "cmp byte [rsp + 0xd50], 0",
            "jne 0x5492",
            "cmp byte [rsp + 0xe50], 0",
            "jne 0x54a9",
            "mov qword [r13], rbx",
            "jmp 0x5312",
            "mov ebp, 3",
            "jmp 0x5312",
            "lea rdi, [r14 + 0x40c]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x28], rax",
            "jne 0x5432",
            "nop",
            "mov rdi, rbx",
            "mov ebp, 3",
            "call fcn.000031b0",
            "jmp 0x5312",
            "lea rdi, [r14 + 0x510]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x38], rax",
            "jne 0x5446",
            "jmp 0x5480",
            "lea rdi, [r14 + 0x610]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbx + 0x40], rax",
            "jne 0x5450",
            "jmp 0x5480",
            "call sym.imp.__stack_chk_fail",
            "test rsi, rsi",
            "je 0x54da",
            "test r9, r9",
            "jne 0x54e0",
            "mov eax, 5",
            "ret",
            "jmp 0x5270"
        ]
    },
    "fcn.00002f40": {
        "function_address": "0x00002f40",
        "instructions": [
            "jmp qword [reloc.wbcGuidToString]"
        ]
    },
    "fcn.00003160": {
        "function_address": "0x00003160",
        "instructions": [
            "jmp qword [reloc.wbcStringToGuid]"
        ]
    },
    "sym.wbcCtxSidsToUnixIds": {
        "function_address": "0x00004990",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15d, edx",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "imul ebp, edx, 0xbf",
            "sub rsp, 0x1618",
            "mov qword [rsp + 0x10], rdi",
            "mov dword [rsp + 0xc], edx",
            "add ebp, 1",
            "mov qword [rsp + 0x18], rcx",
            "movsxd rdi, ebp",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1608], rax",
            "xor eax, eax",
            "call sym.imp.malloc",
            "mov rbx, rax",
            "mov eax, 3",
            "test rbx, rbx",
            "je 0x4a58",
            "test r15d, r15d",
            "mov r13, rbx",
            "je 0x4a88",
            "mov eax, dword [rsp + 0xc]",
            "mov r15, r12",
            "mov r13, rbx",
            "sub eax, 1",
            "add rax, 1",
            "mov rdx, rax",
            "shl rdx, 6",
            "lea r12, [rdx + rax*4]",
            "add r12, r15",
            "jmp 0x4a2d",
            "cdqe",
            "add r15, 0x44",
            "add rax, r13",
            "cmp r15, r12",
            "lea r13, [rax + 1]",
            "mov byte [rax], 0xa",
            "je 0x4a88",
            "mov r9, rbx",
            "mov rsi, r13",
            "mov rdi, r15",
            "sub r9, r13",
            "lea r14d, [rbp + r9]",
            "mov edx, r14d",
            "call fcn.00003080",
            "cmp r14d, eax",
            "jge 0x4a18",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov eax, 2",
            "mov rcx, qword [rsp + 0x1608]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x4bea",
            "add rsp, 0x1618",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdx, [rsp + 0x30]",
            "xor eax, eax",
            "mov ecx, 0x106",
            "lea rbp, [rsp + 0x860]",
            "lea r8, [r13 + 1]",
            "mov esi, 0x1b",
            "mov rdi, rdx",
            "mov byte [r13], 0",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbp",
            "sub r8, rbx",
            "mov qword [rsp + 0x850], rbx",
            "mov dword [rsp + 0x858], r8d",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "mov rdi, qword [rsp + 0x10]",
            "mov rcx, rbp",
            "call fcn.00002ee0",
            "mov rdi, rbx",
            "mov r12d, eax",
            "call sym.imp.free",
            "test r12d, r12d",
            "mov eax, r12d",
            "jne 0x4a58",
            "mov eax, dword [rsp + 0x860]",
            "mov rdi, qword [rsp + 0x1600]",
            "sub eax, 0xda8",
            "test eax, eax",
            "jle 0x4bb0",
            "cdqe",
            "cmp byte [rdi + rax - 1], 0",
            "jne 0x4bb0",
            "mov eax, dword [rsp + 0xc]",
            "test eax, eax",
            "je 0x4bb6",
            "mov r14d, eax",
            "mov r13, qword [rsp + 0x18]",
            "sub r14d, 1",
            "lea rbx, [r14*8 + 8]",
            "lea r14, [rsp + 0x28]",
            "add rbx, r13",
            "jmp 0x4b82",
            "cmp al, 0x55",
            "je 0x4be0",
            "cmp al, 0x42",
            "je 0x4bd0",
            "mov dword [r13], 0",
            "mov esi, 0xa",
            "call sym.imp.strchr",
            "mov qword [rsp + 0x28], rax",
            "test rax, rax",
            "je 0x4bb0",
            "cmp byte [rax], 0xa",
            "jne 0x4bb0",
            "add r13, 8",
            "lea rdi, [rax + 1]",
            "cmp r13, rbx",
            "je 0x4bb6",
            "movzx eax, byte [rdi]",
            "cmp al, 0x47",
            "jne 0x4b48",
            "mov dword [r13], 2",
            "add rdi, 1",
            "mov edx, 0xa",
            "mov rsi, r14",
            "call sym.imp.strtoul",
            "mov dword [r13 + 4], eax",
            "mov rax, qword [rsp + 0x28]",
            "jmp 0x4b6b",
            "mov r12d, 8",
            "mov rdi, rbp",
            "call sym.imp.winbindd_free_response",
            "mov eax, r12d",
            "jmp 0x4a58",
            "mov dword [r13], 3",
            "jmp 0x4b91",
            "mov dword [r13], 1",
            "jmp 0x4b91",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxEndgrent": {
        "function_address": "0x000097d0",
        "instructions": [
            "test rdi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "je 0x9810",
            "mov eax, dword [rbx + 0x10]",
            "test eax, eax",
            "je 0x97fa",
            "lea rdi, [0x0020de40]",
            "mov dword [rbx + 0x10], 0",
            "mov dword [rbx + 0x14], 0",
            "call sym.imp.winbindd_free_response",
            "mov rdi, rbx",
            "xor ecx, ecx",
            "xor edx, edx",
            "pop rbx",
            "mov esi, 0xb",
            "jmp fcn.00002ee0",
            "call fcn.00003230",
            "mov rbx, rax",
            "jmp 0x97d9"
        ]
    },
    "sym.wbcCtxDomainInfo": {
        "function_address": "0x000055f0",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x15e8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "test rsi, rsi",
            "je 0x561d",
            "test rdx, rdx",
            "mov r12, rdx",
            "jne 0x5658",
            "xor ebp, ebp",
            "mov ebx, 5",
            "mov rdi, rbp",
            "call fcn.000031b0",
            "mov rcx, qword [rsp + 0x15d8]",
            "xor rcx, qword fs:[0x28]",
            "mov eax, ebx",
            "jne 0x5744",
            "add rsp, 0x15e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rbx, rdi",
            "mov ecx, 0x106",
            "mov rdi, rsp",
            "rep stosq qword [rdi], rax",
            "lea r13, [rsp + 0x830]",
            "mov edx, 0xff",
            "xor ebp, ebp",
            "mov rdi, r13",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 0x18]",
            "call sym.imp.strncpy",
            "mov rdi, rbx",
            "mov rcx, r13",
            "mov rdx, rsp",
            "mov esi, 0x26",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x5624",
            "lea rdx, [0x00004df0]",
            "mov esi, 0x60",
            "mov edi, 1",
            "mov bl, 3",
            "call fcn.00003140",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x5624",
            "lea rdi, [r13 + 8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbp], rax",
            "je 0x5624",
            "lea rdi, [r13 + 0x108]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov qword [rbp + 8], rax",
            "je 0x5624",
            "lea rsi, [rbp + 0x10]",
            "lea rdi, [r13 + 0x208]",
            "call fcn.00003120",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x5624",
            "cmp byte [rsp + 0xb38], 0",
            "je 0x571d",
            "or dword [rbp + 0x54], 1",
            "cmp byte [rsp + 0xb39], 0",
            "je 0x572b",
            "or dword [rbp + 0x54], 2",
            "cmp byte [rsp + 0xb3a], 0",
            "je 0x5739",
            "or dword [rbp + 0x54], 4",
            "mov qword [r12], rbp",
            "xor ebp, ebp",
            "jmp 0x5624",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcCtxGetgrgid": {
        "function_address": "0x00009130",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r9, rdi",
            "push rbx",
            "mov ecx, 0x106",
            "mov r12, rdx",
            "mov ebp, 5",
            "sub rsp, 0x15e0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15d8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "lea rbx, [rsp + 0x830]",
            "test r12, r12",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "mov rdx, rsp",
            "mov cx, 0x1b5",
            "rep stosq qword [rdi], rax",
            "je 0x919b",
            "mov dword [rsp + 0x118], esi",
            "mov rcx, rbx",
            "mov esi, 5",
            "mov rdi, r9",
            "call fcn.00002ee0",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x91c8",
            "mov rdi, rbx",
            "call sym.imp.winbindd_free_response",
            "mov rsi, qword [rsp + 0x15d8]",
            "xor rsi, qword fs:[0x28]",
            "mov eax, ebp",
            "jne 0x91ea",
            "add rsp, 0x15e0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rsi, qword [rsp + 0x15d0]",
            "lea rdi, [rbx + 8]",
            "call fcn.00006680",
            "test rax, rax",
            "mov qword [r12], rax",
            "mov eax, 3",
            "cmove ebp, eax",
            "jmp 0x919b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.wbcLibraryDetails": {
        "function_address": "0x00003580",
        "instructions": [
            "push rbx",
            "xor edx, edx",
            "mov rbx, rdi",
            "mov esi, 0x10",
            "mov edi, 1",
            "call fcn.00003140",
            "mov rdx, rax",
            "mov eax, 3",
            "test rdx, rdx",
            "je 0x35c0",
            "xor eax, eax",
            "mov ecx, 0xc",
            "mov word [rdx], ax",
            "lea rax, str.Samba_libwbclient",
            "mov word [rdx + 2], cx",
            "mov qword [rdx + 8], rax",
            "mov qword [rbx], rdx",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00003300",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0x3330",
            "cmp qword [reloc.__cxa_finalize], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x3323",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00003240",
        "instructions": [
            "jmp qword [0x0020cfc0]"
        ]
    },
    "rip": {
        "function_address": "0x00003270",
        "instructions": [
            "lea rdi, [0x0020d008]",
            "lea rax, [0x0020d00f]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x32a0",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x32a0",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    }
}