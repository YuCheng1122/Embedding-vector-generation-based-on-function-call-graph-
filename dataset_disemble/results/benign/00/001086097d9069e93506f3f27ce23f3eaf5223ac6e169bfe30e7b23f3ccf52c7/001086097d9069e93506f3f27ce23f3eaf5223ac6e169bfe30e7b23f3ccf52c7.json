{
    "sym.pam_sm_authenticate": {
        "function_address": "0x00001e90",
        "instructions": [
            "push r15",
            "push r14",
            "shr esi, 0xa",
            "push r13",
            "push r12",
            "mov r15d, esi",
            "push rbp",
            "push rbx",
            "and r15d, 0x20",
            "mov r12, rdi",
            "sub rsp, 0x38",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x28], rax",
            "xor eax, eax",
            "test edx, edx",
            "mov qword [rsp + 0x10], 0",
            "mov qword [rsp + 0x18], 0",
            "jle 0x2071",
            "sub edx, 1",
            "mov rbx, rcx",
            "mov qword [rsp + 8], 0x5a",
            "lea r8, [rdx*8 + 8]",
            "lea rbp, str.debug",
            "lea r13, [rsp + 0x20]",
            "lea r14, [rcx + r8]",
            "jmp 0x1f0d",
            "or r15d, 0x10",
            "add rbx, 8",
            "cmp rbx, r14",
            "je 0x1f48",
            "mov rax, qword [rbx]",
            "mov qword [rsp + 0x20], 0",
            "mov ecx, 6",
            "mov rdi, rbp",
            "mov rsi, rax",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x1f00",
            "lea rdi, str.silent",
            "mov ecx, 7",
            "mov rsi, rax",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x1fb0",
            "add rbx, 8",
            "or r15d, 0x20",
            "cmp rbx, r14",
            "jne 0x1f0d",
            "lea rsi, [rsp + 0x10]",
            "xor edx, edx",
            "mov rdi, r12",
            "call sym.imp.pam_get_user",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x1f70",
            "mov rsi, qword [rsp + 0x10]",
            "test rsi, rsi",
            "je 0x1f70",
            "cmp byte [rsi], 0",
            "jne 0x203b",
            "lea rdx, str.cannot_determine_the_users_name",
            "mov esi, 3",
            "mov rdi, r12",
            "xor eax, eax",
            "mov ebx, 0xa",
            "call sym.imp.pam_syslog",
            "mov eax, ebx",
            "mov rbx, qword [rsp + 0x28]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x214f",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdi, str.inactive",
            "mov ecx, 9",
            "mov rsi, rax",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x2000",
            "lea rdi, [rax + 9]",
            "mov edx, 0xa",
            "mov rsi, r13",
            "call sym.imp.strtol",
            "mov rcx, qword [rbx]",
            "lea rdx, [rcx + 9]",
            "cmp qword [rsp + 0x20], rdx",
            "je 0x2020",
            "lea rdx, [rax - 1]",
            "cmp rdx, 0x1869e",
            "ja 0x2020",
            "mov qword [rsp + 8], rax",
            "jmp 0x1f04",
            "lea rdx, str.unknown_option:__s",
            "mov rcx, rax",
            "mov esi, 3",
            "mov rdi, r12",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1f04",
            "lea rdx, str.bad_option_value:__s",
            "mov esi, 3",
            "mov rdi, r12",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1f04",
            "mov rdi, r12",
            "call sym.imp.pam_modutil_getpwnam",
            "test rax, rax",
            "je 0x207f",
            "mov ebp, dword [rax + 0x10]",
            "test ebp, ebp",
            "je 0x1f8b",
            "mov edx, ebp",
            "mov esi, r15d",
            "mov rdi, r12",
            "call fcn.000011a0",
            "test eax, eax",
            "mov r13d, eax",
            "jns 0x209d",
            "mov ebx, 0x19",
            "jmp 0x1f8b",
            "mov qword [rsp + 8], 0x5a",
            "jmp 0x1f48",
            "lea rdx, str.user_unknown",
            "mov esi, 3",
            "mov rdi, r12",
            "mov ebx, 0xa",
            "call sym.imp.pam_syslog",
            "jmp 0x1f8b",
            "lea r8, [rsp + 0x18]",
            "mov esi, r15d",
            "mov ecx, ebp",
            "or esi, 0x20",
            "mov edx, eax",
            "mov rdi, r12",
            "call fcn.00001780",
            "mov edi, r13d",
            "mov ebp, eax",
            "call sym.imp.close",
            "test ebp, ebp",
            "jne 0x2067",
            "cmp qword [rsp + 0x18], 0",
            "jne 0x20f0",
            "and r15d, 0x10",
            "je 0x1f8b",
            "lea rdx, str.user_never_logged_in___pass",
            "mov esi, 7",
            "mov rdi, r12",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1f8b",
            "xor edi, edi",
            "call sym.imp.time",
            "sub rax, qword [rsp + 0x18]",
            "movabs rdx, 0x1845c8a0ce512957",
            "mov rcx, rax",
            "imul rdx",
            "sar rcx, 0x3f",
            "sar rdx, 0xd",
            "sub rdx, rcx",
            "cmp qword [rsp + 8], rdx",
            "mov r8, rdx",
            "mov qword [rsp + 0x18], rdx",
            "jge 0x1f8b",
            "mov rcx, qword [rsp + 0x10]",
            "lea rdx, str.user__s_inactive_for__d_days___denied",
            "mov esi, 6",
            "mov rdi, r12",
            "xor eax, eax",
            "mov ebx, 7",
            "call sym.imp.pam_syslog",
            "jmp 0x1f8b",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.pam_get_user": {
        "function_address": "0x00000ec0",
        "instructions": [
            "jmp qword [reloc.pam_get_user]"
        ]
    },
    "sym.imp.pam_syslog": {
        "function_address": "0x00000e60",
        "instructions": [
            "jmp qword [reloc.pam_syslog]"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x00000e20",
        "instructions": [
            "jmp qword [reloc.strtol]"
        ]
    },
    "sym.imp.pam_modutil_getpwnam": {
        "function_address": "0x00000d40",
        "instructions": [
            "jmp qword [reloc.pam_modutil_getpwnam]"
        ]
    },
    "fcn.000011a0": {
        "function_address": "0x000011a0",
        "instructions": [
            "and esi, 0x100",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov ebp, edx",
            "push rbx",
            "je 0x11f0",
            "lea rdi, str._var_log_lastlog",
            "mov esi, 2",
            "call sym.imp.__open_2",
            "test eax, eax",
            "mov ebx, eax",
            "js 0x1230",
            "mov edx, ebp",
            "mov edi, ebx",
            "lea rax, [rdx + rdx*8]",
            "lea rsi, [rdx + rax*8]",
            "xor edx, edx",
            "shl rsi, 2",
            "call sym.imp.lseek",
            "test rax, rax",
            "js 0x1283",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "lea rdi, str._var_log_lastlog",
            "xor esi, esi",
            "call sym.imp.__open_2",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x11c8",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.unable_to_open__s:__m",
            "xor eax, eax",
            "mov esi, 3",
            "mov rdi, r12",
            "call sym.imp.pam_syslog",
            "mov eax, 0xffffffff",
            "jmp 0x11ea",
            "call sym.imp.__errno_location",
            "cmp dword [rax], 2",
            "jne 0x1204",
            "lea rdi, str._var_log_lastlog",
            "xor eax, eax",
            "mov edx, 0x1a4",
            "mov esi, 0x42",
            "call sym.imp.open",
            "test eax, eax",
            "mov ebx, eax",
            "lea rcx, str._var_log_lastlog",
            "js 0x127a",
            "lea rdx, str.file__s_created",
            "mov esi, 4",
            "mov rdi, r12",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x11c8",
            "lea rdx, str.unable_to_create__s:__m",
            "jmp 0x1212",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.failed_to_lseek__s:__m",
            "mov esi, 3",
            "mov rdi, r12",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "mov edi, ebx",
            "call sym.imp.close",
            "mov eax, 0xffffffff",
            "jmp 0x11ea"
        ]
    },
    "fcn.00001780": {
        "function_address": "0x00001780",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, r8",
            "push r13",
            "push r12",
            "mov r12d, edx",
            "push rbp",
            "push rbx",
            "mov ebx, ecx",
            "mov r13d, esi",
            "mov esi, 6",
            "sub rsp, 0x2d8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x2c8], rax",
            "xor eax, eax",
            "lea rax, [rbx + rbx*8]",
            "lea r14, [rsp + 0x30]",
            "mov qword [rsp + 8], rdi",
            "mov edi, r12d",
            "mov qword [rsp + 0x18], 0",
            "mov qword [rsp + 0x20], 0",
            "lea rax, [rbx + rax*8]",
            "mov rdx, r14",
            "mov qword [rsp + 0x30], 0",
            "mov qword [rsp + 0x48], 0",
            "mov qword [rsp + 0x40], 0x124",
            "shl rax, 2",
            "mov qword [rsp + 0x38], rax",
            "xor eax, eax",
            "call sym.imp.fcntl",
            "test eax, eax",
            "js 0x1ae0",
            "lea rbp, [rsp + 0x90]",
            "mov edx, 0x124",
            "mov edi, r12d",
            "mov rsi, rbp",
            "call sym.imp.pam_modutil_read",
            "cmp eax, 0x124",
            "je 0x1843",
            "mov ecx, 0x24",
            "xor eax, eax",
            "mov rdi, rbp",
            "rep stosq qword [rdi], rax",
            "mov dword [rdi], 0",
            "mov ecx, 2",
            "mov rdx, r14",
            "xor eax, eax",
            "mov esi, 6",
            "mov edi, r12d",
            "mov word [rsp + 0x30], cx",
            "call sym.imp.fcntl",
            "movsxd rdx, dword [rsp + 0x90]",
            "test edx, edx",
            "mov rax, rdx",
            "mov qword [r15], rdx",
            "jne 0x187b",
            "test r13b, 0x10",
            "jne 0x1a30",
            "test r13b, 0x20",
            "jne 0x197a",
            "movsxd rax, dword [rsp + 0x90]",
            "test eax, eax",
            "je 0x1970",
            "xor r14d, r14d",
            "test r13b, 1",
            "jne 0x1a4e",
            "test r13b, 2",
            "je 0x18b6",
            "cmp byte [rsp + 0xb4], 0",
            "jne 0x1b0e",
            "and r13d, 4",
            "je 0x18ca",
            "cmp byte [rsp + 0x94], 0",
            "jne 0x1bba",
            "test r14, r14",
            "je 0x1b96",
            "mov rbx, qword [rsp + 0x20]",
            "mov r12, qword [rsp + 0x18]",
            "test rbx, rbx",
            "je 0x1b6e",
            "test r12, r12",
            "mov r13, r14",
            "je 0x1bfc",
            "lea rsi, str.Last_login:_s_s_s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "sub rsp, 8",
            "mov r9, r12",
            "mov rcx, rax",
            "push rbx",
            "mov rdi, qword [rsp + 0x18]",
            "xor edx, edx",
            "mov r8, r13",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_prompt",
            "mov r12d, eax",
            "pop rax",
            "pop rdx",
            "xor eax, eax",
            "mov ecx, 0x24",
            "mov rdi, rbp",
            "rep stosq qword [rdi], rax",
            "test r14, r14",
            "mov dword [rdi], 0",
            "jne 0x1959",
            "jmp 0x195f",
            "add r14, 1",
            "mov byte [r14 - 1], 0",
            "cmp byte [r14], 0",
            "jne 0x1950",
            "mov rdi, qword [rsp + 0x18]",
            "jmp 0x1998",
            "and r13d, 8",
            "jne 0x1a9d",
            "mov rbx, qword [rsp + 0x18]",
            "xor r12d, r12d",
            "mov ecx, 0x24",
            "xor eax, eax",
            "mov rdi, rbp",
            "rep stosq qword [rdi], rax",
            "mov dword [rdi], 0",
            "mov rdi, rbx",
            "test rdi, rdi",
            "je 0x19cd",
            "cmp byte [rdi], 0",
            "je 0x19bf",
            "nop word [rax + rax]",
            "add rdi, 1",
            "mov byte [rdi - 1], 0",
            "cmp byte [rdi], 0",
            "jne 0x19a8",
            "mov rdi, qword [rsp + 0x18]",
            "test rdi, rdi",
            "je 0x19cd",
            "call sym.imp.free",
            "mov qword [rsp + 0x18], 0",
            "mov rdi, qword [rsp + 0x20]",
            "test rdi, rdi",
            "je 0x19fc",
            "cmp byte [rdi], 0",
            "je 0x19f7",
            "nop dword [rax]",
            "add rdi, 1",
            "mov byte [rdi - 1], 0",
            "cmp byte [rdi], 0",
            "jne 0x19e0",
            "mov rdi, qword [rsp + 0x20]",
            "test rdi, rdi",
            "je 0x19fc",
            "call sym.imp.free",
            "mov rsi, qword [rsp + 0x2c8]",
            "xor rsi, qword fs:[0x28]",
            "mov eax, r12d",
            "jne 0x1c25",
            "add rsp, 0x2d8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdi, qword [rsp + 8]",
            "lea rdx, str.first_login_for_user_with_uid__lu",
            "mov rcx, rbx",
            "mov esi, 7",
            "call sym.imp.pam_syslog",
            "jmp 0x187b",
            "lea rsi, [rsp + 0x50]",
            "lea rdi, [rsp + 0x28]",
            "mov qword [rsp + 0x28], rax",
            "lea r14, [rsp + 0x1c0]",
            "call sym.imp.localtime_r",
            "lea rsi, str.__a__b__e__H:_M:_S__Z__Y",
            "lea rdi, str.Linux_PAM",
            "mov rbx, rax",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "mov rcx, rbx",
            "mov rdx, rax",
            "mov esi, 0x100",
            "mov rdi, r14",
            "call sym.imp.strftime",
            "jmp 0x18a2",
            "lea rsi, str.Welcome_to_your_new_account_",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "mov rdi, qword [rsp + 8]",
            "lea rcx, [0x00002501]",
            "mov r8, rax",
            "xor edx, edx",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_prompt",
            "mov rbx, qword [rsp + 0x18]",
            "mov r12d, eax",
            "jmp 0x1982",
            "mov rdi, qword [rsp + 8]",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.file__s_is_locked_read",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "mov edi, 1",
            "call sym.imp.sleep",
            "jmp 0x1811",
            "lea rsi, str._from__.s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "lea rdi, [rsp + 0x18]",
            "lea r8, [rbp + 0x24]",
            "mov rdx, rax",
            "mov ecx, 0x100",
            "xor eax, eax",
            "mov esi, 1",
            "call sym.imp.__asprintf_chk",
            "test eax, eax",
            "jns 0x18b6",
            "mov rdi, qword [rsp + 8]",
            "lea rdx, str.out_of_memory",
            "mov esi, 3",
            "xor eax, eax",
            "mov r12d, 5",
            "call sym.imp.pam_syslog",
            "jmp 0x1930",
            "test r12, r12",
            "lea rbx, [0x000024b5]",
            "je 0x1c08",
            "test r14, r14",
            "mov r13, r14",
            "jne 0x18f2",
            "lea r13, [0x000024b5]",
            "jmp 0x18f2",
            "mov r12, qword [rsp + 0x18]",
            "mov rbx, qword [rsp + 0x20]",
            "test r12, r12",
            "je 0x1c10",
            "test rbx, rbx",
            "lea r13, [0x000024b5]",
            "jne 0x18f2",
            "mov rbx, r13",
            "jmp 0x1b8a",
            "lea rsi, str._on__.s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "lea rdi, [rsp + 0x20]",
            "lea r8, [rbp + 4]",
            "mov rdx, rax",
            "mov ecx, 0x20",
            "xor eax, eax",
            "mov esi, 1",
            "call sym.imp.__asprintf_chk",
            "test eax, eax",
            "jns 0x18ca",
            "jmp 0x1b4b",
            "lea r12, [0x000024b5]",
            "jmp 0x18f2",
            "mov r12, rbx",
            "jmp 0x1b7e",
            "test rbx, rbx",
            "lea r12, [0x000024b5]",
            "jne 0x1b8a",
            "jmp 0x197f",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00000df0",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x00000e30",
        "instructions": [
            "jmp qword [reloc.time]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00000dd0",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "sym.pam_sm_close_session": {
        "function_address": "0x000022f0",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "call fcn.00001010",
            "test al, 0x40",
            "je 0x2317",
            "mov rdi, rbx",
            "call fcn.000012c0",
            "lea rdx, [0x000024b5]",
            "mov rdi, rax",
            "mov rsi, rdx",
            "call sym.imp.logwtmp",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00001010": {
        "function_address": "0x00001010",
        "instructions": [
            "push r15",
            "push r14",
            "and esi, 0x8000",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 8",
            "cmp esi, 1",
            "sbb ebp, ebp",
            "and ebp, 0xffffffe0",
            "add ebp, 0x167",
            "test edx, edx",
            "jle 0x109b",
            "sub edx, 1",
            "mov r15, rdi",
            "mov rbx, rcx",
            "lea r12, [rdx*8 + 8]",
            "lea r14, str.debug",
            "mov r13d, 6",
            "add r12, rcx",
            "jmp 0x106c",
            "or ebp, 0x10",
            "add rbx, 8",
            "cmp rbx, r12",
            "je 0x109b",
            "mov rdx, qword [rbx]",
            "mov rdi, r14",
            "mov rcx, r13",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x1060",
            "lea rdi, str.nodate",
            "mov ecx, 7",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x10b0",
            "add rbx, 8",
            "and ebp, 0xfffffffe",
            "cmp rbx, r12",
            "jne 0x106c",
            "add rsp, 8",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdi, str.noterm",
            "mov ecx, 7",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x10d0",
            "and ebp, 0xfffffffb",
            "jmp 0x1063",
            "lea rdi, str.nohost",
            "mov ecx, 7",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x10f0",
            "and ebp, 0xfffffffd",
            "jmp 0x1063",
            "lea rdi, str.silent",
            "mov ecx, 7",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x1110",
            "or ebp, 0x20",
            "jmp 0x1063",
            "lea rdi, str.never",
            "mov rsi, rdx",
            "mov rcx, r13",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x1140",
            "lea rdi, str.nowtmp",
            "mov ecx, 7",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x1148",
            "and ebp, 0xffffffbf",
            "jmp 0x1063",
            "or ebp, 8",
            "jmp 0x1063",
            "lea rdi, str.noupdate",
            "mov ecx, 9",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x1177",
            "lea rdi, str.showfailed",
            "mov ecx, 0xb",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x1182",
            "or bpl, 0x80",
            "jmp 0x1063",
            "and ebp, 0xfffffebf",
            "jmp 0x1063",
            "mov rcx, rdx",
            "lea rdx, str.unknown_option:__s",
            "mov esi, 3",
            "mov rdi, r15",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1063"
        ]
    },
    "fcn.000012c0": {
        "function_address": "0x000012c0",
        "instructions": [
            "sub rsp, 0x18",
            "mov esi, 3",
            "mov rdx, rsp",
            "mov qword [rsp], 0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 8], rax",
            "xor eax, eax",
            "call sym.imp.pam_get_item",
            "test eax, eax",
            "lea rdx, [0x000024b5]",
            "jne 0x1314",
            "mov rdx, qword [rsp]",
            "test rdx, rdx",
            "je 0x1330",
            "lea rsi, str._dev_",
            "mov ecx, 5",
            "mov rdi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "jne 0x1314",
            "add rdx, 5",
            "mov rcx, qword [rsp + 8]",
            "xor rcx, qword fs:[0x28]",
            "mov rax, rdx",
            "jne 0x1339",
            "add rsp, 0x18",
            "ret",
            "lea rdx, [0x000024b5]",
            "jmp 0x1314",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.logwtmp": {
        "function_address": "0x00000e40",
        "instructions": [
            "jmp qword [reloc.logwtmp]"
        ]
    },
    "sym.imp.pam_get_item": {
        "function_address": "0x00000e90",
        "instructions": [
            "jmp qword [reloc.pam_get_item]"
        ]
    },
    "sym.pam_sm_open_session": {
        "function_address": "0x00002180",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x38",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x28], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x20], 0",
            "call fcn.00001010",
            "lea rdx, [rsp + 0x18]",
            "mov esi, 2",
            "mov rdi, rbx",
            "mov r12d, eax",
            "call sym.imp.pam_get_item",
            "test eax, eax",
            "jne 0x21d7",
            "mov rsi, qword [rsp + 0x18]",
            "test rsi, rsi",
            "je 0x21d7",
            "cmp byte [rsi], 0",
            "jne 0x2218",
            "lea rdx, str.user_unknown",
            "xor eax, eax",
            "mov esi, 5",
            "mov rdi, rbx",
            "call sym.imp.pam_syslog",
            "mov eax, 0xa",
            "mov rcx, qword [rsp + 0x28]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x22e3",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdi, rbx",
            "call sym.imp.pam_modutil_getpwnam",
            "mov rdx, rax",
            "mov eax, 0xa",
            "test rdx, rdx",
            "je 0x21f2",
            "mov r13d, dword [rdx + 0x10]",
            "mov esi, r12d",
            "mov rdi, rbx",
            "mov r14, qword [rsp + 0x18]",
            "mov edx, r13d",
            "call fcn.000011a0",
            "mov r15d, eax",
            "mov eax, 3",
            "test r15d, r15d",
            "js 0x21f2",
            "lea r8, [rsp + 0x20]",
            "mov ecx, r13d",
            "mov edx, r15d",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.00001780",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x22d4",
            "test r12d, 0x100",
            "mov edx, 1",
            "jne 0x22b7",
            "mov edi, r15d",
            "mov byte [rsp + 0xf], dl",
            "call sym.imp.close",
            "movzx edx, byte [rsp + 0xf]",
            "test dl, dl",
            "je 0x2296",
            "test r12b, 0x80",
            "jne 0x229d",
            "mov eax, ebp",
            "jmp 0x21f2",
            "mov rcx, qword [rsp + 0x20]",
            "mov rdx, qword [rsp + 0x18]",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.00001340",
            "jmp 0x21f2",
            "mov edx, r15d",
            "mov r8, r14",
            "mov ecx, r13d",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.00001c30",
            "test eax, eax",
            "mov ebp, eax",
            "sete dl",
            "jmp 0x227b",
            "mov edi, r15d",
            "call sym.imp.close",
            "mov eax, ebp",
            "jmp 0x21f2",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00001340": {
        "function_address": "0x00001340",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "push rbx",
            "sub rsp, 0x498",
            "mov qword [rsp + 0x10], rdi",
            "mov rdi, rdx",
            "mov dword [rsp + 0x1c], esi",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x488], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x28], 0",
            "mov qword [rsp + 0x30], 0",
            "call sym.imp.strlen",
            "cmp rax, 0x20",
            "ja 0x15a0",
            "lea rdi, str._var_log_btmp",
            "xor esi, esi",
            "xor eax, eax",
            "xor r13d, r13d",
            "lea rbx, [rsp + 0x80]",
            "call sym.imp.open",
            "test eax, eax",
            "mov ebp, eax",
            "js 0x16a8",
            "lea rax, [rsp + 0x200]",
            "lea r15, [rbx + 0x2c]",
            "mov qword [rsp + 8], rax",
            "nop dword [rax]",
            "mov edx, 0x180",
            "mov rsi, rbx",
            "mov edi, ebp",
            "call sym.imp.pam_modutil_read",
            "cmp eax, 0x180",
            "jne 0x1420",
            "movsxd rax, dword [rsp + 0x1d4]",
            "cmp rax, r12",
            "jl 0x13d0",
            "mov edx, 0x20",
            "mov rsi, r14",
            "mov rdi, r15",
            "call sym.imp.strncmp",
            "test eax, eax",
            "jne 0x13d0",
            "mov rdi, qword [rsp + 8]",
            "mov rsi, rbx",
            "mov ecx, 0x30",
            "add r13d, 1",
            "rep movsq qword [rdi], qword [rsi]",
            "jmp 0x13d0",
            "test eax, eax",
            "jne 0x15c0",
            "xor ebx, ebx",
            "test r13d, r13d",
            "je 0x1555",
            "xor ebx, ebx",
            "test byte [rsp + 0x1c], 1",
            "jne 0x16e0",
            "test byte [rsp + 0x1c], 2",
            "je 0x1455",
            "cmp byte [rsp + 0x24c], 0",
            "jne 0x15e4",
            "test byte [rsp + 0x1c], 4",
            "lea rax, [rsp + 0x30]",
            "mov qword [rsp + 8], rax",
            "je 0x1474",
            "cmp byte [rsp + 0x208], 0",
            "jne 0x1647",
            "mov r14, qword [rsp + 0x30]",
            "mov r15, qword [rsp + 0x28]",
            "test r14, r14",
            "je 0x1737",
            "test r15, r15",
            "je 0x174f",
            "lea r12, [0x000024b5]",
            "test rbx, rbx",
            "cmovne r12, rbx",
            "lea rsi, str.Last_failed_login:_s_s_s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "sub rsp, 8",
            "xor edx, edx",
            "mov rcx, rax",
            "push r14",
            "mov rdi, qword [rsp + 0x20]",
            "xor eax, eax",
            "mov r9, r15",
            "mov r8, r12",
            "mov esi, 4",
            "call sym.imp.pam_prompt",
            "mov rdi, qword [rsp + 0x40]",
            "pop rax",
            "pop rdx",
            "test rdi, rdi",
            "je 0x14f2",
            "call sym.imp.free",
            "mov qword [rsp + 0x30], 0",
            "lea rdx, str.There_were__d_failed_login_attempts_since_the_last_successful_login.",
            "lea rsi, str.There_was__d_failed_login_attempt_since_the_last_successful_login.",
            "lea rdi, str.Linux_PAM",
            "movsxd rcx, r13d",
            "mov r8d, 5",
            "call sym.imp.dcngettext",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, rax",
            "mov ecx, r13d",
            "xor eax, eax",
            "mov esi, 1",
            "call sym.imp.__asprintf_chk",
            "test eax, eax",
            "js 0x1690",
            "mov r8, qword [rsp + 0x30]",
            "mov rdi, qword [rsp + 0x10]",
            "lea rcx, [0x00002501]",
            "xor edx, edx",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_prompt",
            "mov ebx, eax",
            "mov rdi, qword [rsp + 0x28]",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x30]",
            "call sym.imp.free",
            "mov edi, ebp",
            "call sym.imp.close",
            "mov eax, ebx",
            "mov rcx, qword [rsp + 0x488]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x1773",
            "add rsp, 0x498",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdi, qword [rsp + 0x10]",
            "lea rdx, str.username_too_long__output_might_be_inaccurate",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1397",
            "mov rdi, qword [rsp + 0x10]",
            "lea rcx, str._var_log_btmp",
            "lea rdx, str.corruption_detected_in__s",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "jmp 0x1428",
            "lea rsi, str._from__.s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "lea rdi, [rsp + 0x28]",
            "lea r8, [rsp + 0x24c]",
            "mov rdx, rax",
            "mov ecx, 0x100",
            "xor eax, eax",
            "mov esi, 1",
            "call sym.imp.__asprintf_chk",
            "test eax, eax",
            "jns 0x1455",
            "mov rdi, qword [rsp + 0x10]",
            "lea rdx, str.out_of_memory",
            "mov esi, 3",
            "xor eax, eax",
            "mov ebx, 5",
            "call sym.imp.pam_syslog",
            "jmp 0x1555",
            "lea rsi, str._on__.s",
            "lea rdi, str.Linux_PAM",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "mov rdi, qword [rsp + 8]",
            "lea r8, [rsp + 0x208]",
            "mov rdx, rax",
            "mov ecx, 0x20",
            "xor eax, eax",
            "mov esi, 1",
            "call sym.imp.__asprintf_chk",
            "test eax, eax",
            "jns 0x1474",
            "jmp 0x1625",
            "mov qword [rsp + 0x30], 0",
            "mov ebx, 5",
            "jmp 0x1555",
            "call sym.imp.__errno_location",
            "mov rdi, qword [rsp + 0x10]",
            "mov ebx, dword [rax]",
            "lea rcx, str._var_log_btmp",
            "lea rdx, str.unable_to_open__s:__m",
            "xor eax, eax",
            "mov esi, 3",
            "call sym.imp.pam_syslog",
            "xor eax, eax",
            "cmp ebx, 2",
            "setne al",
            "lea eax, [rax + rax*2]",
            "jmp 0x1572",
            "movsxd rax, dword [rsp + 0x354]",
            "lea rsi, [rsp + 0x40]",
            "lea rdi, [rsp + 0x38]",
            "lea rbx, [rsp + 0x380]",
            "mov qword [rsp + 0x38], rax",
            "call sym.imp.localtime_r",
            "lea rsi, str.__a__b__e__H:_M:_S__Z__Y",
            "lea rdi, str.Linux_PAM",
            "mov r12, rax",
            "mov edx, 5",
            "call sym.imp.dcgettext",
            "mov rcx, r12",
            "mov rdx, rax",
            "mov esi, 0x100",
            "mov rdi, rbx",
            "call sym.imp.strftime",
            "jmp 0x1440",
            "test rbx, rbx",
            "je 0x175b",
            "test r15, r15",
            "mov r12, rbx",
            "lea r14, [0x000024b5]",
            "jne 0x149e",
            "lea r15, [0x000024b5]",
            "jmp 0x1490",
            "lea r14, [0x000024b5]",
            "test r15, r15",
            "mov r12, r14",
            "jne 0x149e",
            "jmp 0x14f2",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "fcn.00001c30": {
        "function_address": "0x00001c30",
        "instructions": [
            "push r15",
            "push r14",
            "mov ecx, ecx",
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov ebp, edx",
            "mov r15d, esi",
            "xor edx, edx",
            "mov edi, ebp",
            "sub rsp, 0x178",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x168], rax",
            "xor eax, eax",
            "lea rax, [rcx + rcx*8]",
            "mov qword [rsp], r8",
            "mov qword [rsp + 0x18], 0",
            "lea rbx, [rcx + rax*8]",
            "shl rbx, 2",
            "mov rsi, rbx",
            "call sym.imp.lseek",
            "test rax, rax",
            "js 0x1e10",
            "lea rdi, [rsp + 0x10]",
            "lea r14, [0x000024b5]",
            "call sym.imp.time",
            "mov rax, qword [rsp + 0x10]",
            "lea rdx, [rsp + 0x18]",
            "mov esi, 4",
            "mov rdi, r13",
            "mov dword [rsp + 0x40], eax",
            "call sym.imp.pam_get_item",
            "test eax, eax",
            "je 0x1df0",
            "lea r12, [rsp + 0x40]",
            "mov ecx, 0x100",
            "mov edx, 0xff",
            "mov rsi, r14",
            "mov byte [rsp + 0x64], 0",
            "lea rdi, [r12 + 0x24]",
            "call sym.imp.__strncat_chk",
            "mov rdi, r13",
            "call fcn.000012c0",
            "lea rdi, [r12 + 4]",
            "mov ecx, 0x20",
            "mov edx, 0x1f",
            "mov rsi, rax",
            "mov byte [rsp + 0x44], 0",
            "call sym.imp.__strncat_chk",
            "lea rax, [rsp + 0x20]",
            "mov edx, 1",
            "mov qword [rsp + 0x20], 0",
            "mov esi, 6",
            "mov word [rsp + 0x20], dx",
            "mov edi, ebp",
            "mov qword [rsp + 8], rax",
            "mov rdx, rax",
            "xor eax, eax",
            "mov qword [rsp + 0x38], 0",
            "mov qword [rsp + 0x28], rbx",
            "mov qword [rsp + 0x30], 0x124",
            "call sym.imp.fcntl",
            "test eax, eax",
            "js 0x1e50",
            "mov edx, 0x124",
            "mov rsi, r12",
            "mov edi, ebp",
            "call sym.imp.pam_modutil_write",
            "xor ebx, ebx",
            "cmp eax, 0x124",
            "je 0x1d89",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.failed_to_write__s:__m",
            "mov esi, 3",
            "mov rdi, r13",
            "xor eax, eax",
            "mov bl, 3",
            "call sym.imp.pam_syslog",
            "mov rdx, qword [rsp + 8]",
            "mov eax, 2",
            "mov esi, 6",
            "mov word [rsp + 0x20], ax",
            "mov edi, ebp",
            "xor eax, eax",
            "call sym.imp.fcntl",
            "and r15d, 0x40",
            "jne 0x1e38",
            "xor eax, eax",
            "mov ecx, 0x24",
            "mov rdi, r12",
            "rep stosq qword [rdi], rax",
            "mov eax, ebx",
            "mov dword [rdi], 0",
            "mov rbx, qword [rsp + 0x168]",
            "xor rbx, qword fs:[0x28]",
            "jne 0x1e7c",
            "add rsp, 0x178",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r14, qword [rsp + 0x18]",
            "lea rax, [0x000024b5]",
            "test r14, r14",
            "cmove r14, rax",
            "jmp 0x1cc0",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.failed_to_lseek__s:__m",
            "xor eax, eax",
            "mov esi, 3",
            "mov rdi, r13",
            "call sym.imp.pam_syslog",
            "mov eax, 3",
            "jmp 0x1dc5",
            "mov rsi, qword [rsp]",
            "lea rdi, [r12 + 4]",
            "mov rdx, r14",
            "call sym.imp.logwtmp",
            "jmp 0x1db0",
            "lea rcx, str._var_log_lastlog",
            "lea rdx, str.file__s_is_locked_write",
            "mov rdi, r13",
            "mov esi, 4",
            "xor eax, eax",
            "call sym.imp.pam_syslog",
            "mov edi, 1",
            "call sym.imp.sleep",
            "jmp 0x1d52",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00000fa0",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0xfd0",
            "cmp qword [0x00202ff8], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0xfc3",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00000f00",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x00000f10",
        "instructions": [
            "lea rdi, [section..bss]",
            "lea rax, [0x00203117]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0xf40",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0xf40",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.__open_2": {
        "function_address": "0x00000da0",
        "instructions": [
            "jmp qword [reloc.__open_2]"
        ]
    },
    "sym.imp.lseek": {
        "function_address": "0x00000de0",
        "instructions": [
            "jmp qword [reloc.lseek]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00000d50",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.open": {
        "function_address": "0x00000e80",
        "instructions": [
            "jmp qword [reloc.open]"
        ]
    },
    "sym.imp.fcntl": {
        "function_address": "0x00000d90",
        "instructions": [
            "jmp qword [reloc.fcntl]"
        ]
    },
    "sym.imp.pam_modutil_read": {
        "function_address": "0x00000eb0",
        "instructions": [
            "jmp qword [reloc.pam_modutil_read]"
        ]
    },
    "sym.imp.dcgettext": {
        "function_address": "0x00000db0",
        "instructions": [
            "jmp qword [reloc.dcgettext]"
        ]
    },
    "sym.imp.pam_prompt": {
        "function_address": "0x00000d80",
        "instructions": [
            "jmp qword [reloc.pam_prompt]"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00000d30",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "sym.imp.localtime_r": {
        "function_address": "0x00000d70",
        "instructions": [
            "jmp qword [reloc.localtime_r]"
        ]
    },
    "sym.imp.strftime": {
        "function_address": "0x00000e70",
        "instructions": [
            "jmp qword [reloc.strftime]"
        ]
    },
    "sym.imp.sleep": {
        "function_address": "0x00000ef0",
        "instructions": [
            "jmp qword [reloc.sleep]"
        ]
    },
    "sym.imp.__asprintf_chk": {
        "function_address": "0x00000e00",
        "instructions": [
            "jmp qword [reloc.__asprintf_chk]"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00000dc0",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x00000d60",
        "instructions": [
            "jmp qword [reloc.strncmp]"
        ]
    },
    "sym.imp.dcngettext": {
        "function_address": "0x00000ea0",
        "instructions": [
            "jmp qword [reloc.dcngettext]"
        ]
    },
    "sym.imp.__strncat_chk": {
        "function_address": "0x00000ee0",
        "instructions": [
            "jmp qword [reloc.__strncat_chk]"
        ]
    },
    "sym.imp.pam_modutil_write": {
        "function_address": "0x00000e50",
        "instructions": [
            "jmp qword [reloc.pam_modutil_write]"
        ]
    }
}