{
    "sym.imessaging_register": {
        "function_address": "0x00003ed0",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12d, edx",
            "push rbp",
            "push rbx",
            "cmp dword [rdi + 0x48], r12d",
            "mov rbp, rsi",
            "mov rbx, rcx",
            "jbe 0x3f50",
            "mov rdi, qword [rdi + 0x40]",
            "lea rdx, str.struct_dispatch_fn",
            "mov esi, 0x28",
            "call sym.imp._talloc_zero",
            "test rax, rax",
            "je 0x3fb0",
            "mov rdx, qword [r13 + 0x40]",
            "mov qword [rax + 0x18], rbp",
            "mov qword [rax + 0x20], rbx",
            "mov dword [rax + 0x10], r12d",
            "lea rdx, [rdx + r12*8]",
            "mov rcx, qword [rdx]",
            "test rcx, rcx",
            "je 0x3fc0",
            "mov rcx, qword [rcx + 8]",
            "mov qword [rax + 8], rcx",
            "mov rcx, qword [rdx]",
            "mov qword [rcx + 8], rax",
            "mov rcx, qword [rdx]",
            "mov qword [rax], rcx",
            "mov qword [rdx], rax",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "lea r14d, [r12 + 1]",
            "mov rsi, qword [rdi + 0x40]",
            "lea r8, str.struct_dispatch_fn_",
            "mov edx, 8",
            "mov ecx, r14d",
            "call sym.imp._talloc_realloc_array",
            "test rax, rax",
            "je 0x3fb0",
            "mov r8d, dword [r13 + 0x48]",
            "mov qword [r13 + 0x40], rax",
            "cmp r12d, r8d",
            "jae 0x3f8c",
            "jmp 0x3fd3",
            "mov rax, qword [r13 + 0x40]",
            "mov edx, r8d",
            "add r8d, 1",
            "cmp r12d, r8d",
            "mov qword [rax + rdx*8], 0",
            "jae 0x3f88",
            "mov rdi, qword [r13 + 0x40]",
            "mov dword [r13 + 0x48], r14d",
            "jmp 0x3eee",
            "pop rbx",
            "mov eax, 0xc0000017",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov qword [rdx], rax",
            "mov qword [rax + 8], rax",
            "mov qword [rax], 0",
            "jmp 0x3f40",
            "mov rdi, rax",
            "jmp 0x3fa4"
        ]
    },
    "sym.imp._talloc_zero": {
        "function_address": "0x000023b0",
        "instructions": [
            "jmp qword [reloc._talloc_zero]"
        ]
    },
    "sym.imp._talloc_realloc_array": {
        "function_address": "0x00002550",
        "instructions": [
            "jmp qword [reloc._talloc_realloc_array]"
        ]
    },
    "sym.irpc_all_servers": {
        "function_address": "0x000036d0",
        "instructions": [
            "push rbp",
            "push rbx",
            "lea rdx, str.struct_irpc_name_records",
            "mov rbp, rdi",
            "mov rdi, rsi",
            "mov esi, 0x10",
            "sub rsp, 8",
            "call sym.imp._talloc_zero",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x3740",
            "mov rdi, qword [rbp + 0x68]",
            "lea rsi, [0x00002e90]",
            "mov rdx, rax",
            "call sym.imp.server_id_db_traverse_read",
            "cmp eax, 0xffffffff",
            "mov rdi, rbx",
            "je 0x3720",
            "add rsp, 8",
            "mov rax, rdi",
            "pop rbx",
            "pop rbp",
            "ret",
            "lea rsi, str..._source4_lib_messaging_messaging.c:846",
            "call sym.imp._talloc_free",
            "add rsp, 8",
            "xor edi, edi",
            "mov rax, rdi",
            "pop rbx",
            "pop rbp",
            "ret",
            "xor edi, edi",
            "jmp 0x3710"
        ]
    },
    "sym.imp.server_id_db_traverse_read": {
        "function_address": "0x00002480",
        "instructions": [
            "jmp qword [reloc.server_id_db_traverse_read]"
        ]
    },
    "sym.imp._talloc_free": {
        "function_address": "0x00002240",
        "instructions": [
            "jmp qword [reloc._talloc_free]"
        ]
    },
    "sym.imessaging_register_tmp": {
        "function_address": "0x00003e40",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rdi, qword [rdi + 0x40]",
            "mov r12, rdx",
            "lea rdx, str.struct_dispatch_fn",
            "mov esi, 0x28",
            "mov r14, rcx",
            "call sym.imp._talloc_zero",
            "mov rbx, rax",
            "mov eax, 0xc0000017",
            "test rbx, rbx",
            "je 0x3ea1",
            "mov rdi, qword [rbp + 0x50]",
            "mov qword [rbx + 0x18], r13",
            "mov ecx, 0xffff",
            "mov qword [rbx + 0x20], r12",
            "mov edx, 0xf000",
            "mov rsi, rbx",
            "call sym.imp.idr_get_new_above",
            "cmp eax, 0xffffffff",
            "je 0x3eb0",
            "mov dword [rbx + 0x10], eax",
            "mov dword [r14], eax",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "lea rsi, str..._source4_lib_messaging_messaging.c:198",
            "mov rdi, rbx",
            "call sym.imp._talloc_free",
            "mov eax, 0xc000015a",
            "jmp 0x3ea1"
        ]
    },
    "sym.imp.idr_get_new_above": {
        "function_address": "0x00002650",
        "instructions": [
            "jmp qword [reloc.idr_get_new_above]"
        ]
    },
    "sym._init": {
        "function_address": "0x000021c0",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x21d5",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00002260",
        "instructions": [
            "jmp qword [0x00206d60]"
        ]
    },
    "sym.irpc_binding_handle_add_security_token": {
        "function_address": "0x00003550",
        "instructions": [
            "push rbx",
            "mov rbx, rsi",
            "call sym.imp._dcerpc_binding_handle_data",
            "lea rdx, str..._source4_lib_messaging_messaging.c:1187",
            "lea rsi, str.struct_irpc_bh_state",
            "mov rdi, rax",
            "call sym.imp._talloc_get_type_abort",
            "mov qword [rax + 0x30], rbx",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp._dcerpc_binding_handle_data": {
        "function_address": "0x00002540",
        "instructions": [
            "jmp qword [reloc._dcerpc_binding_handle_data]"
        ]
    },
    "sym.imp._talloc_get_type_abort": {
        "function_address": "0x00002610",
        "instructions": [
            "jmp qword [reloc._talloc_get_type_abort]"
        ]
    },
    "sym.irpc_add_name": {
        "function_address": "0x00003750",
        "instructions": [
            "sub rsp, 8",
            "mov rdi, qword [rdi + 0x68]",
            "call sym.imp.server_id_db_add",
            "xor edx, edx",
            "test eax, eax",
            "jne 0x3770",
            "mov eax, edx",
            "add rsp, 8",
            "ret",
            "mov edi, eax",
            "call sym.imp.map_nt_error_from_unix_common",
            "mov edx, eax",
            "add rsp, 8",
            "mov eax, edx",
            "ret"
        ]
    },
    "sym.imp.server_id_db_add": {
        "function_address": "0x00002330",
        "instructions": [
            "jmp qword [reloc.server_id_db_add]"
        ]
    },
    "sym.imp.map_nt_error_from_unix_common": {
        "function_address": "0x00002410",
        "instructions": [
            "jmp qword [reloc.map_nt_error_from_unix_common]"
        ]
    },
    "sym.irpc_binding_handle": {
        "function_address": "0x00003580",
        "instructions": [
            "push rbp",
            "push rbx",
            "lea rax, str..._source4_lib_messaging_messaging.c:1139",
            "mov rbp, rsi",
            "lea rsi, section..data.rel.ro",
            "mov rcx, rdx",
            "sub rsp, 0x18",
            "mov rbx, rdx",
            "mov r9d, 0x38",
            "push rax",
            "lea rax, str.struct_irpc_bh_state",
            "xor edx, edx",
            "push rax",
            "lea r8, [rsp + 0x18]",
            "call sym.imp._dcerpc_binding_handle_create",
            "test rax, rax",
            "pop rdx",
            "pop rcx",
            "je 0x35ed",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, qword [rsp + 0x30]",
            "mov qword [rdi + 8], rdx",
            "mov rdx, qword [rsp + 0x38]",
            "mov qword [rdi], rbp",
            "mov qword [rdi + 0x20], rbx",
            "mov dword [rdi + 0x28], 0xa",
            "mov qword [rdi + 0x10], rdx",
            "mov rdx, qword [rsp + 0x40]",
            "mov qword [rdi + 0x18], rdx",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp._dcerpc_binding_handle_create": {
        "function_address": "0x000022f0",
        "instructions": [
            "jmp qword [reloc._dcerpc_binding_handle_create]"
        ]
    },
    "sym.imessaging_dgm_unref_ev": {
        "function_address": "0x00003c70",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "sub rsp, 8",
            "mov rbx, qword [0x00207010]",
            "test rbx, rbx",
            "jne 0x3c99",
            "jmp 0x3cd0",
            "mov rbx, qword [rbx + 8]",
            "test rbx, rbx",
            "je 0x3cd0",
            "cmp qword [rbx + 0x10], rbp",
            "jne 0x3c90",
            "mov rdi, qword [rbx + 0x80]",
            "test rdi, rdi",
            "je 0x3c90",
            "lea rsi, str..._source4_lib_messaging_messaging.c:271",
            "call sym.imp._talloc_free",
            "mov qword [rbx + 0x80], 0",
            "mov rbx, qword [rbx + 8]",
            "test rbx, rbx",
            "jne 0x3c99",
            "nop dword [rax + rax]",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.irpc_send_reply": {
        "function_address": "0x00003780",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12d, 0xc0000017",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x10",
            "mov dword [rdi + 0x40], esi",
            "mov rdi, qword [rdi + 0x60]",
            "call sym.imp.ndr_push_init_ctx",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x3834",
            "or dword [rbx + 0x3c], 1",
            "lea rdx, [rbx + 0x20]",
            "mov qword [rbx + 0x48], 0",
            "mov esi, 0x300",
            "mov rdi, rax",
            "call sym.imp.ndr_push_irpc_header",
            "test eax, eax",
            "jne 0x3850",
            "mov rax, qword [rbx + 0x78]",
            "mov esi, 0x20",
            "mov rdi, rbp",
            "mov rdx, qword [rax + 0x20]",
            "movsxd rax, dword [rax + 0x28]",
            "mov rcx, qword [rdx + 0x30]",
            "mov rdx, qword [rbx + 0x80]",
            "lea rax, [rax + rax*8]",
            "lea rax, [rcx + rax*8]",
            "call qword [rax + 0x10]",
            "test eax, eax",
            "jne 0x3850",
            "mov rdi, rbp",
            "call sym.imp.ndr_push_blob",
            "sub rsp, 8",
            "mov qword [rsp + 8], rax",
            "mov qword [rsp + 0x10], rdx",
            "mov rdi, qword [rbx + 0x70]",
            "lea rdx, [rsp + 8]",
            "push qword [rbx + 0x10]",
            "push qword [rbx + 8]",
            "push qword [rbx]",
            "mov esi, 0x702",
            "call sym.imp.imessaging_send",
            "add rsp, 0x20",
            "mov r12d, eax",
            "lea rsi, str..._source4_lib_messaging_messaging.c:658",
            "mov rdi, rbx",
            "call sym.imp._talloc_free",
            "add rsp, 0x10",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov edi, eax",
            "call sym.imp.ndr_map_error2ntstatus",
            "mov r12d, eax",
            "jmp 0x3834"
        ]
    },
    "sym.imp.ndr_push_init_ctx": {
        "function_address": "0x00002270",
        "instructions": [
            "jmp qword [reloc.ndr_push_init_ctx]"
        ]
    },
    "sym.imp.ndr_push_irpc_header": {
        "function_address": "0x000023a0",
        "instructions": [
            "jmp qword [reloc.ndr_push_irpc_header]"
        ]
    },
    "fcn.00000010": {
        "function_address": "0x00000010",
        "instructions": [
            "add eax, dword [rax]",
            "add byte ds:[rcx], al",
            "add byte [rax], al",
            "add al, dl",
            "add byte es:[rax], al",
            "add byte [rax], al",
            "add byte [rax], al"
        ]
    },
    "sym.imp.ndr_push_blob": {
        "function_address": "0x000021f0",
        "instructions": [
            "jmp qword [reloc.ndr_push_blob]"
        ]
    },
    "sym.imp.imessaging_send": {
        "function_address": "0x000024d0",
        "instructions": [
            "jmp qword [reloc.imessaging_send]"
        ]
    },
    "sym.imp.ndr_map_error2ntstatus": {
        "function_address": "0x00002600",
        "instructions": [
            "jmp qword [reloc.ndr_map_error2ntstatus]"
        ]
    },
    "sym.imessaging_init": {
        "function_address": "0x00003fe0",
        "instructions": [
            "test rdx, rdx",
            "je 0x4260",
            "push r13",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "lea rdx, str.struct_imessaging_context",
            "mov rbp, rsi",
            "mov esi, 0x88",
            "sub rsp, 0x18",
            "call sym.imp._talloc_zero",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x424f",
            "lea rsi, [0x00002840]",
            "mov rdi, rax",
            "mov qword [rax + 0x10], r12",
            "call sym.imp._talloc_set_destructor",
            "mov rdi, rbp",
            "call sym.imp.lpcfg_lock_directory",
            "test rax, rax",
            "mov r13, rax",
            "je 0x4240",
            "lea rdx, str.msg.sock",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call sym.imp.lpcfg_private_path",
            "test rax, rax",
            "mov qword [rbx + 0x30], rax",
            "je 0x4240",
            "call sym.imp.geteuid",
            "mov rdi, qword [rbx + 0x30]",
            "mov edx, 0x1c0",
            "mov esi, eax",
            "call sym.imp.directory_create_or_exist_strict",
            "test al, al",
            "je 0x4240",
            "lea rdx, str.msg.lock",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call sym.imp.lpcfg_lock_path",
            "test rax, rax",
            "mov qword [rbx + 0x38], rax",
            "je 0x4240",
            "call sym.imp.geteuid",
            "mov rdi, qword [rbx + 0x38]",
            "mov edx, 0x1ed",
            "mov esi, eax",
            "call sym.imp.directory_create_or_exist_strict",
            "test al, al",
            "je 0x4240",
            "lea rax, [rsp + 0xc]",
            "lea rdx, [rsp + 0x50]",
            "mov rcx, qword [rbx + 0x30]",
            "lea r9, [fcn.00003070]",
            "mov rsi, r12",
            "mov rdi, rbx",
            "push rax",
            "push rbx",
            "mov r8, qword [rbx + 0x38]",
            "call sym.imp.messaging_dgm_ref",
            "test rax, rax",
            "mov qword [rbx + 0x80], rax",
            "pop rdx",
            "pop rcx",
            "je 0x4240",
            "mov rax, qword [rsp + 0x40]",
            "mov rdi, rbx",
            "mov qword [rbx + 0x18], rax",
            "mov rax, qword [rsp + 0x48]",
            "mov qword [rbx + 0x20], rax",
            "mov rax, qword [rsp + 0x50]",
            "mov qword [rbx + 0x28], rax",
            "call sym.imp.idr_init",
            "test rax, rax",
            "mov qword [rbx + 0x60], rax",
            "je 0x4240",
            "mov rdi, rbx",
            "call sym.imp.idr_init",
            "test rax, rax",
            "mov qword [rbx + 0x50], rax",
            "je 0x4240",
            "call sym.imp.timeval_current",
            "xor esi, esi",
            "mov qword [rbx + 0x78], rdx",
            "mov rdi, rbp",
            "mov qword [rbx + 0x70], rax",
            "call sym.imp.lpcfg_tdb_flags",
            "sub rsp, 8",
            "or eax, 0x801",
            "xor edx, edx",
            "push qword [rsp + 0x58]",
            "push qword [rsp + 0x58]",
            "mov ecx, eax",
            "push qword [rsp + 0x58]",
            "mov rsi, r13",
            "mov rdi, rbx",
            "call sym.imp.server_id_db_init",
            "add rsp, 0x20",
            "test rax, rax",
            "mov qword [rbx + 0x68], rax",
            "je 0x4240",
            "lea rcx, [0x00002fb0]",
            "xor esi, esi",
            "mov edx, 2",
            "mov rdi, rbx",
            "call fcn.000025e0",
            "test eax, eax",
            "jne 0x4240",
            "lea rcx, [0x00003450]",
            "xor esi, esi",
            "mov edx, 9",
            "mov rdi, rbx",
            "call fcn.000025e0",
            "test eax, eax",
            "jne 0x4240",
            "lea rcx, [0x00003860]",
            "xor esi, esi",
            "mov edx, 0x702",
            "mov rdi, rbx",
            "call fcn.000025e0",
            "test eax, eax",
            "jne 0x4240",
            "lea rcx, [0x000034c0]",
            "xor esi, esi",
            "mov edx, 0x33",
            "mov rdi, rbx",
            "call fcn.000025e0",
            "test eax, eax",
            "jne 0x4240",
            "mov rsi, qword [reloc.ndr_table_irpc]",
            "lea rcx, [0x00003520]",
            "xor edx, edx",
            "mov r8, rbx",
            "mov rdi, rbx",
            "call fcn.00002400",
            "test eax, eax",
            "jne 0x4240",
            "mov rax, qword [0x00207010]",
            "test rax, rax",
            "je 0x4268",
            "mov rdx, qword [rax]",
            "mov qword [0x00207010], rbx",
            "mov qword [rbx], rdx",
            "mov qword [rax], rbx",
            "mov qword [rbx + 8], rax",
            "add rsp, 0x18",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "lea rsi, str..._source4_lib_messaging_messaging.c:430",
            "mov rdi, rbx",
            "call sym.imp._talloc_free",
            "xor eax, eax",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "xor eax, eax",
            "ret",
            "mov qword [0x00207010], rbx",
            "mov qword [rbx], rbx",
            "mov rax, rbx",
            "mov qword [rbx + 8], 0",
            "jmp 0x4251"
        ]
    },
    "sym.imp._talloc_set_destructor": {
        "function_address": "0x000022b0",
        "instructions": [
            "jmp qword [reloc._talloc_set_destructor]"
        ]
    },
    "sym.imp.lpcfg_lock_directory": {
        "function_address": "0x000023c0",
        "instructions": [
            "jmp qword [reloc.lpcfg_lock_directory]"
        ]
    },
    "sym.imp.lpcfg_private_path": {
        "function_address": "0x00002250",
        "instructions": [
            "jmp qword [reloc.lpcfg_private_path]"
        ]
    },
    "sym.imp.geteuid": {
        "function_address": "0x000023e0",
        "instructions": [
            "jmp qword [reloc.geteuid]"
        ]
    },
    "sym.imp.directory_create_or_exist_strict": {
        "function_address": "0x00002510",
        "instructions": [
            "jmp qword [reloc.directory_create_or_exist_strict]"
        ]
    },
    "sym.imp.lpcfg_lock_path": {
        "function_address": "0x00002530",
        "instructions": [
            "jmp qword [reloc.lpcfg_lock_path]"
        ]
    },
    "sym.imp.messaging_dgm_ref": {
        "function_address": "0x000022a0",
        "instructions": [
            "jmp qword [reloc.messaging_dgm_ref]"
        ]
    },
    "sym.imp.idr_init": {
        "function_address": "0x000024f0",
        "instructions": [
            "jmp qword [reloc.idr_init]"
        ]
    },
    "sym.imp.timeval_current": {
        "function_address": "0x00002640",
        "instructions": [
            "jmp qword [reloc.timeval_current]"
        ]
    },
    "sym.imp.lpcfg_tdb_flags": {
        "function_address": "0x00002590",
        "instructions": [
            "jmp qword [reloc.lpcfg_tdb_flags]"
        ]
    },
    "sym.imp.server_id_db_init": {
        "function_address": "0x000022d0",
        "instructions": [
            "jmp qword [reloc.server_id_db_init]"
        ]
    },
    "fcn.000025e0": {
        "function_address": "0x000025e0",
        "instructions": [
            "jmp qword [reloc.imessaging_register]"
        ]
    },
    "fcn.00002400": {
        "function_address": "0x00002400",
        "instructions": [
            "jmp qword [reloc.irpc_register]"
        ]
    },
    "sym.irpc_register": {
        "function_address": "0x00003a70",
        "instructions": [
            "push r14",
            "push r13",
            "mov r14, r8",
            "push r12",
            "push rbp",
            "mov r12, rdi",
            "push rbx",
            "mov r9, qword [rdi + 0x58]",
            "mov rbx, rsi",
            "mov ebp, edx",
            "mov r13, rcx",
            "test r9, r9",
            "jne 0x3aa0",
            "jmp 0x3ae0",
            "mov r9, qword [r9]",
            "test r9, r9",
            "je 0x3ae0",
            "cmp qword [r9 + 0x20], rbx",
            "jne 0x3a98",
            "cmp dword [r9 + 0x28], ebp",
            "jne 0x3a98",
            "mov qword [r9 + 0x20], rbx",
            "mov dword [r9 + 0x28], ebp",
            "mov qword [r9 + 0x30], r13",
            "mov qword [r9 + 0x38], r14",
            "mov rax, qword [rbx + 8]",
            "mov qword [r9 + 0x10], rax",
            "mov rax, qword [rbx + 0x10]",
            "mov qword [r9 + 0x18], rax",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "lea rdx, str.struct_irpc_list",
            "mov esi, 0x40",
            "mov rdi, r12",
            "call sym.imp.talloc_named_const",
            "mov r9, rax",
            "mov eax, 0xc0000017",
            "test r9, r9",
            "je 0x3ace",
            "mov rax, qword [r12 + 0x58]",
            "test rax, rax",
            "je 0x3b21",
            "mov rdx, qword [rax + 8]",
            "mov qword [r9 + 8], rdx",
            "mov qword [rax + 8], r9",
            "mov qword [r9], rax",
            "mov qword [r12 + 0x58], r9",
            "jmp 0x3aac",
            "mov qword [r12 + 0x58], r9",
            "mov qword [r9 + 8], r9",
            "mov qword [r9], 0",
            "jmp 0x3aac"
        ]
    },
    "sym.imp.talloc_named_const": {
        "function_address": "0x000026a0",
        "instructions": [
            "jmp qword [reloc.talloc_named_const]"
        ]
    },
    "sym.imessaging_deregister": {
        "function_address": "0x00003cf0",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "mov ebx, esi",
            "sub rsp, 8",
            "cmp dword [rdi + 0x48], ebx",
            "jbe 0x3db0",
            "mov rax, qword [rdi + 0x40]",
            "mov rbp, rdx",
            "lea r13, [rbx*8]",
            "mov rdi, qword [rax + rbx*8]",
            "test rdi, rdi",
            "jne 0x3d30",
            "jmp 0x3da0",
            "test rbx, rbx",
            "mov rdi, rbx",
            "je 0x3da0",
            "cmp qword [rdi + 0x18], rbp",
            "mov rbx, qword [rdi]",
            "jne 0x3d28",
            "mov rcx, r13",
            "add rcx, qword [r12 + 0x40]",
            "mov rdx, qword [rcx]",
            "cmp rdx, rdi",
            "je 0x3df0",
            "test rdx, rdx",
            "je 0x3d5c",
            "cmp qword [rdx + 8], rdi",
            "je 0x3e28",
            "mov rdx, qword [rdi + 8]",
            "test rdx, rdx",
            "je 0x3e10",
            "mov qword [rdx], rbx",
            "mov rsi, qword [rdi]",
            "test rsi, rsi",
            "je 0x3d78",
            "mov qword [rsi + 8], rdx",
            "cmp qword [rcx], rdi",
            "je 0x3d8c",
            "mov qword [rdi + 8], 0",
            "mov qword [rdi], 0",
            "lea rsi, str..._source4_lib_messaging_messaging.c:228",
            "call sym.imp._talloc_free",
            "test rbx, rbx",
            "mov rdi, rbx",
            "jne 0x3d30",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rdi, qword [rdi + 0x50]",
            "mov esi, ebx",
            "call sym.imp.idr_find",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x3da0",
            "mov rdi, qword [r12 + 0x50]",
            "mov esi, ebx",
            "call sym.imp.idr_remove",
            "add rsp, 8",
            "mov rdi, rbp",
            "lea rsi, str..._source4_lib_messaging_messaging.c:220",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "jmp sym.imp._talloc_free",
            "test rbx, rbx",
            "je 0x3dfd",
            "mov rdx, qword [rdi + 8]",
            "mov qword [rbx + 8], rdx",
            "mov qword [rcx], rbx",
            "mov rcx, r13",
            "add rcx, qword [r12 + 0x40]",
            "jmp 0x3d78",
            "test rbx, rbx",
            "mov rsi, rbx",
            "jne 0x3d74",
            "jmp 0x3d7d",
            "mov rdx, qword [rdi + 8]",
            "mov qword [rdx], 0",
            "mov rsi, qword [rcx]",
            "mov qword [rsi + 8], rdx",
            "jmp 0x3d78"
        ]
    },
    "sym.imp.idr_find": {
        "function_address": "0x000025c0",
        "instructions": [
            "jmp qword [reloc.idr_find]"
        ]
    },
    "sym.imp.idr_remove": {
        "function_address": "0x000025d0",
        "instructions": [
            "jmp qword [reloc.idr_remove]"
        ]
    },
    "sym.irpc_binding_handle_by_name": {
        "function_address": "0x00003600",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12, rcx",
            "push rbx",
            "mov rbp, rsi",
            "mov rbx, rdi",
            "mov rsi, rdi",
            "mov rdi, rbp",
            "sub rsp, 0x30",
            "lea rcx, [rsp + 4]",
            "lea r8, [rsp + 8]",
            "call sym.imp.irpc_servers_byname",
            "test eax, eax",
            "jne 0x3680",
            "mov rdi, qword [rsp + 8]",
            "lea rsi, str..._source4_lib_messaging_messaging.c:1171",
            "mov rdx, qword [rdi]",
            "mov qword [rsp + 0x10], rdx",
            "mov rdx, qword [rdi + 8]",
            "mov qword [rsp + 0x18], rdx",
            "mov rdx, qword [rdi + 0x10]",
            "mov qword [rsp + 0x20], rdx",
            "call sym.imp._talloc_free",
            "sub rsp, 8",
            "mov rdx, r12",
            "mov rsi, rbp",
            "push qword [rsp + 0x28]",
            "push qword [rsp + 0x28]",
            "mov rdi, rbx",
            "push qword [rsp + 0x28]",
            "call fcn.00002570",
            "add rsp, 0x20",
            "add rsp, 0x30",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x63",
            "add rsp, 0x30",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.irpc_servers_byname": {
        "function_address": "0x00002320",
        "instructions": [
            "jmp qword [reloc.irpc_servers_byname]"
        ]
    },
    "fcn.00002570": {
        "function_address": "0x00002570",
        "instructions": [
            "jmp qword [reloc.irpc_binding_handle]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x000025a0",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imessaging_client_init": {
        "function_address": "0x00004280",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12, rdx",
            "push rbx",
            "mov rbp, rsi",
            "mov rbx, rdi",
            "sub rsp, 0x20",
            "mov qword [rsp], 0",
            "mov qword [rsp + 8], 0",
            "mov qword [rsp + 0x10], 0",
            "call sym.imp.getpid",
            "cdqe",
            "mov qword [rsp], rax",
            "call sym.imp.generate_random",
            "mov dword [rsp + 8], eax",
            "mov rax, 0xffffffffffffffff",
            "mov dword [rsp + 0xc], 0xffffffff",
            "mov qword [rsp + 0x10], rax",
            "sub rsp, 8",
            "mov rdx, r12",
            "push rax",
            "push qword [rsp + 0x18]",
            "mov rsi, rbp",
            "push qword [rsp + 0x18]",
            "mov rdi, rbx",
            "call fcn.00002440",
            "add rsp, 0x40",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.getpid": {
        "function_address": "0x00002370",
        "instructions": [
            "jmp qword [reloc.getpid]"
        ]
    },
    "sym.imp.generate_random": {
        "function_address": "0x00002660",
        "instructions": [
            "jmp qword [reloc.generate_random]"
        ]
    },
    "fcn.00002440": {
        "function_address": "0x00002440",
        "instructions": [
            "jmp qword [reloc.imessaging_init]"
        ]
    },
    "sym.imessaging_reinit_all": {
        "function_address": "0x00003b40",
        "instructions": [
            "push rbp",
            "push rbx",
            "sub rsp, 0x18",
            "mov rbx, qword [0x00207010]",
            "lea rbp, [rsp + 0xc]",
            "test rbx, rbx",
            "jne 0x3b87",
            "jmp 0x3c20",
            "mov rdi, qword [rbx + 0x68]",
            "sub rsp, 8",
            "push qword [rbx + 0x28]",
            "push qword [rbx + 0x20]",
            "push qword [rbx + 0x18]",
            "call sym.imp.server_id_db_reinit",
            "add rsp, 0x20",
            "mov rbx, qword [rbx + 8]",
            "test rbx, rbx",
            "je 0x3c20",
            "mov rdi, qword [rbx + 0x80]",
            "mov dword [rsp + 0xc], 0xffffffff",
            "test rdi, rdi",
            "je 0x3bb2",
            "lea rsi, str..._source4_lib_messaging_messaging.c:280",
            "call sym.imp._talloc_free",
            "mov qword [rbx + 0x80], 0",
            "call sym.imp.getpid",
            "cdqe",
            "mov rcx, qword [rbx + 0x30]",
            "mov rsi, qword [rbx + 0x10]",
            "mov qword [rbx + 0x18], rax",
            "push rbp",
            "lea rdx, [rbx + 0x28]",
            "push rbx",
            "mov r8, qword [rbx + 0x38]",
            "lea r9, [fcn.00003070]",
            "mov rdi, rbx",
            "call sym.imp.messaging_dgm_ref",
            "test rax, rax",
            "mov qword [rbx + 0x80], rax",
            "pop rdx",
            "pop rcx",
            "jne 0x3b60",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "mov rax, qword [rax]",
            "cmp dword [rax], 1",
            "jg 0x3c30",
            "mov edi, dword [rsp + 0xc]",
            "call sym.imp.map_nt_error_from_unix_common",
            "test eax, eax",
            "je 0x3b7a",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "ret",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "ret",
            "lea rcx, str.imessaging_reinit",
            "lea rdx, str..._source4_lib_messaging_messaging.c:295",
            "xor esi, esi",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x3bff",
            "mov edi, dword [rsp + 0xc]",
            "call sym.imp.strerror",
            "lea rdi, str.messaging_dgm_ref_failed:__s_n",
            "mov rsi, rax",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x3bff"
        ]
    },
    "sym.imp.server_id_db_reinit": {
        "function_address": "0x00002340",
        "instructions": [
            "jmp qword [reloc.server_id_db_reinit]"
        ]
    },
    "sym.imp.dbghdrclass": {
        "function_address": "0x000026c0",
        "instructions": [
            "jmp qword [reloc.dbghdrclass]"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x000024b0",
        "instructions": [
            "jmp qword [reloc.strerror]"
        ]
    },
    "sym.imp.dbgtext": {
        "function_address": "0x000025b0",
        "instructions": [
            "jmp qword [reloc.dbgtext]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00002760",
        "instructions": [
            "cmp byte [loc.__bss_start], 0",
            "jne 0x2790",
            "cmp qword [reloc.__cxa_finalize], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x2783",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc.__bss_start], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00002430",
        "instructions": [
            "jmp qword [0x00206e48]"
        ]
    },
    "rip": {
        "function_address": "0x000026d0",
        "instructions": [
            "lea rdi, [loc.__bss_start]",
            "lea rax, [0x0020700f]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x2700",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x2700",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.000027e0": {
        "function_address": "0x000027e0",
        "instructions": [
            "sub rsp, 8",
            "call sym.imp._dcerpc_binding_handle_data",
            "lea rdx, str..._source4_lib_messaging_messaging.c:877",
            "lea rsi, str.struct_irpc_bh_state",
            "mov rdi, rax",
            "call sym.imp._talloc_get_type_abort",
            "cmp qword [rax], 0",
            "setne al",
            "add rsp, 8",
            "ret"
        ]
    },
    "fcn.00003070": {
        "function_address": "0x00003070",
        "instructions": [
            "push r14",
            "push r13",
            "mov r14, rsi",
            "push r12",
            "push rbp",
            "lea rsi, str.struct_imessaging_context",
            "push rbx",
            "mov rbx, rdx",
            "lea rdx, str..._source4_lib_messaging_messaging.c:486",
            "mov r13, rdi",
            "mov rdi, r9",
            "mov r12, r8",
            "sub rsp, 0xc0",
            "call sym.imp._talloc_get_type_abort",
            "cmp rbx, 0x33",
            "jbe 0x3148",
            "test r12, r12",
            "jne 0x3148",
            "cmp qword [rax + 0x10], r13",
            "mov rbp, rax",
            "je 0x31e0",
            "lea rsi, [rbx + 0x10]",
            "lea rdx, str..._source4_lib_messaging_messaging.c:458",
            "mov rdi, rax",
            "call sym.imp.talloc_named_const",
            "test rax, rax",
            "mov r12, rax",
            "je 0x3170",
            "lea rsi, str.struct_imessaging_post_state",
            "mov rdi, rax",
            "call sym.imp.talloc_set_name_const",
            "lea rsi, str..._source4_lib_messaging_messaging.c:464",
            "mov rdi, r12",
            "call sym.imp._tevent_create_immediate",
            "test rax, rax",
            "mov r13, rax",
            "je 0x3160",
            "lea rdi, [r12 + 0x10]",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov qword [r12], rbp",
            "mov qword [r12 + 8], rbx",
            "call sym.imp.memcpy",
            "mov rsi, qword [rbp + 0x10]",
            "lea r9, str..._source4_lib_messaging_messaging.c:475",
            "lea r8, str.imessaging_post_handler",
            "lea rdx, [0x00003400]",
            "mov rcx, r12",
            "mov rdi, r13",
            "call sym.imp._tevent_schedule_immediate",
            "nop dword [rax + rax]",
            "add rsp, 0xc0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "lea rsi, str..._source4_lib_messaging_messaging.c:466",
            "mov rdi, r12",
            "call sym.imp._talloc_free",
            "nop",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "mov rax, qword [rax]",
            "mov eax, dword [rax]",
            "test eax, eax",
            "jle 0x3148",
            "lea rcx, str.imessaging_dgm_recv",
            "lea rdx, str..._source4_lib_messaging_messaging.c:509",
            "xor esi, esi",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x3148",
            "lea rsi, str.imessaging_dgm_recv",
            "lea rdi, str._s:",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "test al, al",
            "je 0x3148",
            "mov edi, 0xc",
            "call sym.imp.strerror",
            "lea rdi, str.imessaging_post_self_failed:__s_n",
            "mov rsi, rax",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x3148",
            "lea r12, [rsp + 0x40]",
            "lea rsi, [rsp + 0x20]",
            "lea rdi, [rsp + 0xc]",
            "mov rcx, r14",
            "sub rbx, 0x34",
            "add r14, 0x34",
            "mov rdx, r12",
            "call sym.imp.message_hdr_get",
            "mov rax, qword [rbp + 0x18]",
            "cmp qword [rsp + 0x40], rax",
            "mov qword [rsp + 0x10], r14",
            "mov qword [rsp + 0x18], rbx",
            "je 0x3340",
            "mov ecx, dword [rsp + 0x48]",
            "test ecx, ecx",
            "jne 0x32a8",
            "test rax, rax",
            "jne 0x32a8",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "mov rax, qword [rax]",
            "cmp dword [rax], 9",
            "jg 0x3362",
            "mov esi, dword [rsp + 0xc]",
            "cmp esi, 0xefff",
            "ja 0x3354",
            "cmp esi, dword [rbp + 0x48]",
            "jae 0x3148",
            "mov rax, qword [rbp + 0x40]",
            "mov rax, qword [rax + rsi*8]",
            "test rax, rax",
            "je 0x3148",
            "lea r12, [rsp + 0x10]",
            "nop",
            "mov rbx, qword [rax]",
            "sub rsp, 8",
            "mov edx, dword [rax + 0x10]",
            "mov rsi, qword [rax + 0x18]",
            "push qword [rsp + 0x38]",
            "mov rcx, r12",
            "push qword [rsp + 0x38]",
            "push qword [rsp + 0x38]",
            "mov rdi, rbp",
            "call qword [rax + 0x20]",
            "add rsp, 0x20",
            "test rbx, rbx",
            "mov rax, rbx",
            "jne 0x3270",
            "jmp 0x3148",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "mov rax, qword [rax]",
            "cmp dword [rax], 9",
            "jle 0x3148",
            "lea rcx, [0x00004fe0]",
            "lea rdx, str..._source4_lib_messaging_messaging.c:539",
            "xor esi, esi",
            "mov edi, 0xa",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x3148",
            "sub rsp, 8",
            "lea rdi, [rsp + 0x68]",
            "push qword [rbp + 0x28]",
            "push qword [rbp + 0x20]",
            "push qword [rbp + 0x18]",
            "call sym.imp.server_id_str_buf",
            "add rsp, 0x18",
            "mov rbx, rax",
            "lea rdi, [rsp + 0x98]",
            "push qword [rsp + 0x58]",
            "push qword [rsp + 0x58]",
            "push qword [rsp + 0x58]",
            "call sym.imp.server_id_str_buf",
            "add rsp, 0x20",
            "mov edx, dword [rsp + 0xc]",
            "lea rsi, str.imessaging_dgm_recv",
            "lea rdi, str._s:_Ignoring_type0x_x_dst__s__I_am__s___n",
            "mov rcx, rax",
            "mov r8, rbx",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x3148",
            "mov rcx, qword [rbp + 0x20]",
            "cmp qword [rsp + 0x48], rcx",
            "jne 0x321b",
            "jmp 0x322c",
            "mov rdi, qword [rbp + 0x50]",
            "call sym.imp.idr_find",
            "jmp 0x3260",
            "lea rcx, [0x00004fe0]",
            "lea rdx, str..._source4_lib_messaging_messaging.c:527",
            "xor esi, esi",
            "mov edi, 0xa",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x323f",
            "mov ebx, dword [rsp + 0xc]",
            "push rdx",
            "lea rsi, [rbp + 0x18]",
            "mov ecx, 6",
            "lea rax, [rsp + 0x68]",
            "sub rsp, 0x18",
            "mov rdi, rsp",
            "rep movsd dword [rdi], dword [rsi]",
            "mov rdi, rax",
            "call sym.imp.server_id_str_buf",
            "add rsp, 0x18",
            "mov r13, rax",
            "mov rsi, r12",
            "lea rax, [rsp + 0x98]",
            "sub rsp, 0x18",
            "mov ecx, 6",
            "mov rdi, rsp",
            "rep movsd dword [rdi], dword [rsi]",
            "mov rdi, rax",
            "call sym.imp.server_id_str_buf",
            "lea rsi, str.imessaging_dgm_recv",
            "lea rdi, str._s:_dst__s_matches_my_id:__s__type0x_x_n",
            "mov rdx, rax",
            "add rsp, 0x20",
            "mov r8d, ebx",
            "mov rcx, r13",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x323f"
        ]
    },
    "sym.imp.talloc_set_name_const": {
        "function_address": "0x000024e0",
        "instructions": [
            "jmp qword [reloc.talloc_set_name_const]"
        ]
    },
    "sym.imp._tevent_create_immediate": {
        "function_address": "0x00002200",
        "instructions": [
            "jmp qword [reloc._tevent_create_immediate]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x000026b0",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "sym.imp._tevent_schedule_immediate": {
        "function_address": "0x00002620",
        "instructions": [
            "jmp qword [reloc._tevent_schedule_immediate]"
        ]
    },
    "sym.imp.message_hdr_get": {
        "function_address": "0x00002380",
        "instructions": [
            "jmp qword [reloc.message_hdr_get]"
        ]
    },
    "fcn.00000020": {
        "function_address": "0x00000020",
        "instructions": [
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], bh",
            "jno 0x2b",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "add byte [rax], al",
            "cmp byte [rax], al",
            "invalid"
        ]
    },
    "sym.imp.server_id_str_buf": {
        "function_address": "0x00002520",
        "instructions": [
            "jmp qword [reloc.server_id_str_buf]"
        ]
    }
}