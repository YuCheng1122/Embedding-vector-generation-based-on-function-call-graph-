{
    "entry0": {
        "function_address": "0x00008f18",
        "instructions": [
            "ldr ip, fcn.0000aa64",
            "mov fp, 0",
            "pop {r1}",
            "mov r2, sp",
            "str r2, [sp, -4]!",
            "str r0, [sp, -4]!",
            "ldr r0, main",
            "ldr r3, fcn.0000aa0c",
            "str ip, [sp, -4]!",
            "bl sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x00008e64",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x47c]!"
        ]
    },
    "fcn.0000aa64": {
        "function_address": "0x0000aa64",
        "instructions": [
            "push {r4, r5, sl, lr}",
            "ldr sl, aav.0x00008818",
            "add sl, pc, sl",
            "ldr r2, [0x0000aab0]",
            "ldr r3, [0x0000aab4]",
            "rsb r4, r3, r2",
            "asr r4, r4, 2",
            "sub r4, r4, 1",
            "cmn r4, 1",
            "beq 0xaaa4",
            "add r5, sl, r3",
            "mov lr, pc",
            "ldr pc, [r5, r4, lsl 2]",
            "bl fcn.0000aaf4",
            "pop {r4, r5, sl, pc}"
        ]
    },
    "fcn.0000aaf4": {
        "function_address": "0x0000aaf4",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl fcn.00008f7c",
            "pop {pc}"
        ]
    },
    "fcn.00008f7c": {
        "function_address": "0x00008f7c",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r5, [0x00008fc4]",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "popne {r4, r5, pc}",
            "ldr r4, [0x00008fc8]",
            "b 0x8fa8",
            "ldr r3, [r4]",
            "add r3, r3, 4",
            "str r3, [r4]",
            "blx r2",
            "ldr r3, [r4]",
            "ldr r2, [r3]",
            "cmp r2, 0",
            "bne 0x8f98",
            "mov r3, 1",
            "strb r3, [r5]",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000aa0c": {
        "function_address": "0x0000aa0c",
        "instructions": [
            "push {r4, r5, r6, sl, lr}",
            "ldr sl, aav.0x00008870",
            "add sl, pc, sl",
            "bl fcn.00008d4c",
            "mov r4, 0",
            "ldr r3, [0x0000aa5c]",
            "ldr r2, [0x0000aa60]",
            "rsb r3, r2, r3",
            "cmp r4, r3, asr 2",
            "pophs {r4, r5, r6, sl, pc}",
            "add r6, sl, r2",
            "ldr r3, [0x0000aa5c]",
            "rsb r5, r2, r3",
            "mov lr, pc",
            "ldr pc, [r6, r4, lsl 2]"
        ]
    },
    "fcn.00008d4c": {
        "function_address": "0x00008d4c",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl fcn.00008f50",
            "bl fcn.00008fd4",
            "bl fcn.0000aab8",
            "pop {pc}"
        ]
    },
    "fcn.00008f50": {
        "function_address": "0x00008f50",
        "instructions": [
            "push {sl, lr}",
            "ldr sl, aav.0x0000a32c",
            "add sl, pc, sl",
            "ldr r3, [0x00008f78]",
            "ldr r3, [sl, r3]",
            "cmp r3, 0",
            "popeq {sl, pc}",
            "blx r3",
            "pop {sl, pc}"
        ]
    },
    "fcn.00008fd4": {
        "function_address": "0x00008fd4",
        "instructions": [
            "ldr r0, [0x00008ff4]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bxeq lr",
            "ldr r3, [0x00008ff8]",
            "cmp r3, 0",
            "bxeq lr",
            "b loc.imp._Jv_RegisterClasses"
        ]
    },
    "fcn.0000aab8": {
        "function_address": "0x0000aab8",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0000aae8]",
            "sub r4, r3, 4",
            "ldr r2, [r3, -4]",
            "cmn r2, 1",
            "popeq {r4, pc}",
            "mov r3, r2",
            "blx r3",
            "ldr r3, [r4, -4]!",
            "cmn r3, 1",
            "bne 0xaad4",
            "pop {r4, pc}"
        ]
    },
    "sym.nvram_restore": {
        "function_address": "0x00009fd0",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x14",
            "ldr r0, str._Restore_to_default_",
            "bl sym.imp.puts",
            "ldr r3, aav.0x0000b170",
            "ldrb r3, [r3]",
            "strb r3, [sp]",
            "add r0, sp, 1",
            "mov r1, 0",
            "mov r2, 0x11",
            "bl sym.imp.memset",
            "ldr r0, str.wl0_macaddr",
            "bl sym.nvram_get",
            "mov r3, r0",
            "mov r0, sp",
            "ldr r1, aav.0x0000af28",
            "cmp r3, 0",
            "movne r1, r3",
            "bl sym.imp.strcpy",
            "bl sym.nvram_clear",
            "ldr r3, obj.shared_nvram",
            "ldr r2, [r3]",
            "mov r3, 1",
            "strb r3, [r2, 1]",
            "ldr r4, obj.defnv_list",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "beq 0xa058",
            "mov r0, r4",
            "add r1, r4, 0x20",
            "bl sym.nvram_set",
            "ldrb r3, [r4, 0x120]!",
            "cmp r3, 0",
            "bne 0xa040",
            "ldr r0, str.wl0_macaddr",
            "mov r1, sp",
            "bl sym.nvram_set",
            "bl sym.nvram_commit",
            "mov r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008de0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4d4]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00008eb8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x444]!"
        ]
    },
    "sym.nvram_get": {
        "function_address": "0x00009bb0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9be0",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "ldrne r3, obj.shared_nvram",
            "ldrne r2, [r3]",
            "bne 0x9bf0",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "add r0, r5, 0x24",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x9bf0",
            "mov r4, 0",
            "ldr r3, obj.shared_nvram",
            "ldr r7, [r3]",
            "mov r6, 0x7f0",
            "add r6, r6, 0xf",
            "add r3, r4, r4, lsl 3",
            "rsb r3, r4, r3, lsl 3",
            "add r5, r7, r3, lsl 2",
            "add r0, r5, 4",
            "mov r1, r8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9be8",
            "add r4, r4, 1",
            "cmp r4, r6",
            "ble 0x9c10",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00008f0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x40c]!"
        ]
    },
    "sym.nvram_clear": {
        "function_address": "0x00009f6c",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9f98",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "ldrne r3, obj.shared_nvram",
            "ldrne r2, [r3]",
            "bne 0x9fa0",
            "mvn r0, 0",
            "pop {pc}",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x9fa0",
            "ldr r3, obj.shared_nvram",
            "ldr r0, [r3]",
            "add r0, r0, 4",
            "mov r1, 0",
            "mov r2, 0x8e000",
            "bl sym.imp.memset",
            "mov r0, 0",
            "pop {pc}"
        ]
    },
    "sym.nvram_set": {
        "function_address": "0x00009ce0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "mov r4, r1",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9d0c",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "bne 0x9d4c",
            "ldr r4, obj.shared_nvram",
            "ldr r0, str.shared_nvram__NULL_shared_nvram__0x08x",
            "ldr r1, [r4]",
            "bl sym.imp.printf",
            "ldr r4, [r4]",
            "cmp r4, 0",
            "beq 0x9d3c",
            "ldrb r1, [r4, 1]",
            "and r1, r1, 0xff",
            "ldr r0, str.created__d_n",
            "bl sym.imp.printf",
            "b 0x9d44",
            "mov r0, 0xa",
            "bl sym.imp.putchar",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "cmp r7, 0",
            "beq 0x9d60",
            "ldrb r3, [r7]",
            "cmp r3, 0",
            "bne 0x9d70",
            "ldr r0, str.name__NULL",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r3, aav.0x0000af28",
            "cmp r4, 0",
            "movne r8, r4",
            "moveq r8, r3",
            "mov r5, 0",
            "ldr r3, obj.shared_nvram",
            "ldr r6, [r3]",
            "mov r4, 0x7f0",
            "add r4, r4, 0xf",
            "add r0, r5, r5, lsl 3",
            "rsb r0, r5, r0, lsl 3",
            "add r0, r6, r0, lsl 2",
            "add r0, r0, 4",
            "mov r1, r7",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9dc0",
            "add r5, r5, 1",
            "cmp r5, r4",
            "ble 0x9d94",
            "cmp r5, 0x800",
            "bne 0x9e00",
            "sub r5, r5, 0x800",
            "ldr r3, obj.shared_nvram",
            "ldr r1, [r3]",
            "mov r2, 0x7f0",
            "add r2, r2, 0xf",
            "add r3, r5, r5, lsl 3",
            "rsb r3, r5, r3, lsl 3",
            "add r3, r1, r3, lsl 2",
            "ldrb r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0x9e00",
            "add r5, r5, 1",
            "cmp r5, r2",
            "ble 0x9ddc",
            "ldr r1, obj.shared_nvram",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x9e08",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "add r3, r3, 1",
            "strb r3, [r2]",
            "ldr r3, [r1]",
            "ldrb r3, [r3]",
            "cmp r3, 1",
            "bhi 0x9e04",
            "add r4, r5, r5, lsl 3",
            "rsb r4, r5, r4, lsl 3",
            "lsl r4, r4, 2",
            "ldr r5, obj.shared_nvram",
            "ldr r0, [r5]",
            "add r0, r4, r0",
            "add r0, r0, 4",
            "mov r1, r7",
            "mov r2, 0x1f",
            "bl sym.imp.strncpy",
            "ldr r3, [r5]",
            "add r4, r4, r3",
            "add r4, r4, 0x24",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, 0xfb",
            "bl sym.imp.strncpy",
            "ldr r2, [r5]",
            "mov r3, 0",
            "strb r3, [r2]",
            "mov r0, r3",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.nvram_commit": {
        "function_address": "0x000098fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9920",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "bne 0x9928",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, 0x1740",
            "add r0, r0, 0x22",
            "mov r1, 0x10000",
            "mov r2, 0x1b4",
            "add r2, r2, 2",
            "bl sym.imp.shmget",
            "mov r4, r0",
            "cmn r0, 1",
            "bne 0x9964",
            "ldr r0, str.shared_memory_allocate_error__n",
            "bl sym.imp.perror",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r1, 0",
            "mov r2, r1",
            "bl sym.imp.shmat",
            "ldr r3, [0x00009b60]",
            "str r0, [r3]",
            "ldr r4, [0x00009b64]",
            "str r0, [r4]",
            "mov r1, 0",
            "mov r2, 0x10000",
            "bl sym.imp.memset",
            "ldr r2, [r4]",
            "ldr r3, [0x00009b68]",
            "str r3, [r2]",
            "ldr r3, [r4]",
            "mov r2, 0",
            "str r2, [r3, 4]",
            "ldr r3, [r4]",
            "str r2, [r3, 8]",
            "ldr r2, [r4]",
            "mov r3, 0x10",
            "str r3, [r2, 0xc]",
            "ldr r3, [r4]",
            "add r8, r3, 0x10",
            "ldr r1, obj.shared_nvram",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x99c8",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "add r3, r3, 1",
            "strb r3, [r2]",
            "ldr r3, [r1]",
            "ldrb r3, [r3]",
            "cmp r3, 1",
            "bhi 0x99c4",
            "mov r7, 0",
            "ldr sb, [0x00009b64]",
            "ldr sl, obj.shared_nvram",
            "ldr r6, [sb]",
            "add r3, r7, r7, lsl 3",
            "rsb r3, r7, r3, lsl 3",
            "ldr r5, [sl]",
            "add r5, r5, r3, lsl 2",
            "add r0, r5, 4",
            "bl sym.imp.strlen",
            "mov r4, r0",
            "add r5, r5, 0x24",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "add r4, r4, r0",
            "ldr r3, [r6, 0xc]",
            "add r4, r4, r3",
            "add r4, r4, 2",
            "cmp r4, 0x10000",
            "bhs 0x995c",
            "ldr r3, [sl]",
            "add r2, r7, r7, lsl 3",
            "rsb r2, r7, r2, lsl 3",
            "add r2, r3, r2, lsl 2",
            "ldrb r3, [r2, 4]",
            "cmp r3, 0",
            "bne 0x9a6c",
            "ldrb r3, [r2, 0x24]",
            "cmp r3, 0",
            "beq 0x9b08",
            "add r6, r7, r7, lsl 3",
            "rsb r6, r7, r6, lsl 3",
            "lsl r6, r6, 2",
            "ldr r3, [sl]",
            "add r3, r6, r3",
            "mov r0, r8",
            "ldr r1, str._s_s",
            "add r2, r3, 4",
            "add r3, r3, 0x24",
            "bl sym.imp.sprintf",
            "ldr r4, [sl]",
            "add r4, r6, r4",
            "add r0, r4, 4",
            "bl sym.imp.strlen",
            "mov r5, r0",
            "add r4, r4, 0x24",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "add r5, r5, r0",
            "add r8, r8, r5",
            "add r8, r8, 2",
            "ldr r2, [sb]",
            "ldr r3, [r2, 8]",
            "add r3, r3, 1",
            "str r3, [r2, 8]",
            "ldr r5, [sb]",
            "ldr r3, [sl]",
            "add r6, r6, r3",
            "add r0, r6, 4",
            "bl sym.imp.strlen",
            "mov r4, r0",
            "add r6, r6, 0x24",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "add r4, r4, r0",
            "ldr r3, [r5, 0xc]",
            "add r4, r4, r3",
            "add r4, r4, 2",
            "str r4, [r5, 0xc]",
            "add r7, r7, 1",
            "cmp r7, 0x800",
            "blt 0x9a00",
            "ldr r3, [0x00009b64]",
            "ldr r4, [r3]",
            "mov r0, r4",
            "ldr r1, [r4, 0xc]",
            "bl sym.crc32",
            "str r0, [r4, 4]",
            "ldr r0, str._dev_mtd_2",
            "ldr r3, [0x00009b60]",
            "ldr r1, [r3]",
            "mov r2, 0x10000",
            "bl sym.mtd_write",
            "ldr r3, obj.shared_nvram",
            "ldr r2, [r3]",
            "mov r3, 0",
            "strb r3, [r2]",
            "mov r0, r3",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.gemtek_log": {
        "function_address": "0x0000a218",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x5100",
            "sub sp, sp, 4",
            "mov r7, r0",
            "mov sl, r1",
            "ldr r2, obj.log_semaphore",
            "ldr r3, [r2]",
            "cmp r3, 0",
            "bne 0xa230",
            "mov r2, 1",
            "ldr r3, obj.log_semaphore",
            "str r2, [r3]",
            "add r0, sp, 4",
            "sub r0, r0, 4",
            "bl sym.imp.time",
            "mov r5, 0",
            "mov r0, r7",
            "ldr r1, aav.0x0000b02c",
            "bl sym.imp.fopen",
            "mov r4, r0",
            "cmp r0, r5",
            "beq 0xa2b4",
            "add r0, sp, 0x104",
            "mov r1, r5",
            "mov r2, 0x5000",
            "bl sym.imp.memset",
            "add r6, sp, 0x104",
            "add r0, r5, r5, lsl 2",
            "add r0, r6, r0, lsl 5",
            "mov r1, 0xa0",
            "mov r2, r4",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0xa2ac",
            "add r5, r5, 1",
            "cmp r5, 0x7f",
            "ble 0xa284",
            "mov r0, r4",
            "bl sym.imp.fclose",
            "cmp r5, 0x7f",
            "ble 0xa498",
            "mov r4, 1",
            "ldr r0, aav.0x0000b108",
            "bl sym.nvram_get",
            "ldr r3, aav.0x0000af28",
            "cmp r0, 0",
            "movne r1, r0",
            "moveq r1, r3",
            "ldrb r2, [r1]",
            "subs r2, r2, 0x31",
            "moveq r3, r4",
            "movne r3, 0",
            "cmp r3, 0",
            "beq 0xa344",
            "ldrb r2, [r1, 1]",
            "cmp r4, r4",
            "movls r3, 0",
            "movhi r3, 1",
            "cmp r2, 0",
            "movne r3, 0",
            "cmp r3, 0",
            "beq 0xa344",
            "ldrb r2, [r1, 2]",
            "ldr r0, [0x0000a510]",
            "ldrb r3, [r0]",
            "subs r2, r2, r3",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r4, 2",
            "movls r3, 0",
            "andhi r3, r3, 1",
            "cmp r3, 0",
            "ldrbne r2, [r1, 3]",
            "ldrbne r3, [r0, 1]",
            "rsbne r2, r3, r2",
            "cmp r2, 0",
            "bne 0xa43c",
            "mov r4, 1",
            "ldr r0, aav.0x0000b124",
            "bl sym.nvram_get",
            "ldr r3, aav.0x0000af28",
            "cmp r0, 0",
            "movne r1, r0",
            "moveq r1, r3",
            "ldrb r2, [r1]",
            "subs r2, r2, 0x31",
            "moveq r3, r4",
            "movne r3, 0",
            "cmp r3, 0",
            "beq 0xa3d4",
            "ldrb r2, [r1, 1]",
            "cmp r4, r4",
            "movls r3, 0",
            "movhi r3, 1",
            "cmp r2, 0",
            "movne r3, 0",
            "cmp r3, 0",
            "beq 0xa3d4",
            "ldrb r2, [r1, 2]",
            "ldr r0, [0x0000a510]",
            "ldrb r3, [r0]",
            "subs r2, r2, r3",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r4, 2",
            "movls r3, 0",
            "andhi r3, r3, 1",
            "cmp r3, 0",
            "ldrbne r2, [r1, 3]",
            "ldrbne r3, [r0, 1]",
            "rsbne r2, r3, r2",
            "subs r1, r2, 0",
            "bne 0xa43c",
            "mov r3, 0xaf000000",
            "asr r3, r3, 0x10",
            "ldr r2, aav.0x0000b170",
            "ldrb r2, [r2]",
            "add r0, sp, 0x5100",
            "add r0, r0, 4",
            "strb r2, [r0, r3]",
            "add r0, sp, 0x104",
            "sub r0, r0, 0xff",
            "mov r2, 0xff",
            "bl sym.imp.memset",
            "ldr r0, aav.0x0000b134",
            "bl sym.nvram_get",
            "mov r3, r0",
            "add r4, sp, 4",
            "mov r0, r4",
            "ldr r1, str._bin_sendmail__s__f__s_",
            "ldr r2, aav.0x0000af28",
            "cmp r3, 0",
            "movne r2, r3",
            "mov r3, r7",
            "bl sym.imp.sprintf",
            "mov r0, r4",
            "bl sym.imp.system",
            "mov r0, r7",
            "bl sym.imp.unlink",
            "mov r0, r7",
            "ldr r1, aav.0x0000b160",
            "bl sym.imp.fopen",
            "mov r4, r0",
            "cmp r0, 0",
            "beq 0xa490",
            "mov r6, 1",
            "cmp r6, r5",
            "bge 0xa490",
            "add r8, sp, 0x104",
            "add r0, r6, r6, lsl 2",
            "add r0, r8, r0, lsl 5",
            "mov r1, r4",
            "bl sym.imp.fputs",
            "cmn r0, 1",
            "beq 0xa490",
            "add r6, r6, 1",
            "cmp r6, r5",
            "blt 0xa46c",
            "mov r0, r4",
            "bl sym.imp.fclose",
            "mov r0, r7",
            "ldr r1, aav.0x0000b164",
            "bl sym.imp.fopen",
            "mov r4, r0",
            "cmp r0, 0",
            "ldreq r3, obj.log_semaphore",
            "streq r0, [r3]",
            "mvneq r0, 0",
            "beq 0xa4f4",
            "add r0, sp, 4",
            "sub r0, r0, 4",
            "bl sym.imp.ctime",
            "mov r3, r0",
            "mov r0, r4",
            "ldr r1, str._s___s",
            "mov r2, sl",
            "bl sym.imp.fprintf",
            "mov r0, r4",
            "bl sym.imp.fclose",
            "mov r2, 0",
            "ldr r3, obj.log_semaphore",
            "str r2, [r3]",
            "mov r0, r2",
            "add sp, sp, 0x104",
            "add sp, sp, 0x5000",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x00008e1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4ac]!"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x00008ed0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x434]!"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x00008e28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4a4]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00008e7c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x46c]!"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x00008edc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x42c]!"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x00008dd4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4dc]!"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x00008db0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4f4]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x00008e34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x49c]!"
        ]
    },
    "sym.imp.ctime": {
        "function_address": "0x00008e88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x464]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00008da4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4fc]!"
        ]
    },
    "fcn.00009640": {
        "function_address": "0x00009640",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9660",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "bne 0x96a0",
            "ldr r5, obj.shared_nvram",
            "mov r4, 0",
            "str r4, [r5]",
            "mov r0, 0x1580",
            "add r0, r0, 0x20",
            "mov r1, 0x8e000",
            "add r1, r1, 4",
            "mov r2, 0x3b4",
            "add r2, r2, 2",
            "bl sym.imp.shmget",
            "mov r1, r4",
            "mov r2, r4",
            "bl sym.imp.shmat",
            "ldr r3, obj.shared_memory",
            "str r0, [r3]",
            "str r0, [r5]",
            "mov r0, 0",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.nvram_match": {
        "function_address": "0x0000a1a0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r1",
            "cmp r0, 0",
            "popeq {r4, pc}",
            "bl sym.nvram_get",
            "cmp r0, 0",
            "bne 0xa1c8",
            "rsbs r0, r4, 1",
            "movlo r0, 0",
            "pop {r4, pc}",
            "cmp r4, 0",
            "moveq r0, r4",
            "popeq {r4, pc}",
            "mov r1, r4",
            "bl sym.imp.strcmp",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008d80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x514]!"
        ]
    },
    "sym.nvram_invmatch": {
        "function_address": "0x0000a1e8",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r5, r1",
            "bl sym.nvram_get",
            "mov r4, 0",
            "cmp r0, r4",
            "beq 0xa210",
            "mov r1, r5",
            "bl sym.imp.strcmp",
            "cmp r0, r4",
            "movne r4, 1",
            "mov r0, r4",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.nvram_get2buf": {
        "function_address": "0x00009b74",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl sym.nvram_get",
            "cmp r0, 0",
            "moveq r0, 0",
            "popeq {r4, r5, pc}",
            "mov r0, r4",
            "bl sym.nvram_get",
            "mov r3, r0",
            "mov r0, r5",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "mov r0, 1",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.pot_init": {
        "function_address": "0x0000a61c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, obj.pot_buf",
            "mov r5, 0x21c",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, r5",
            "bl sym.imp.memset",
            "ldr r0, str._dev_mtd_4",
            "ldr r1, aav.0x0000b02c",
            "bl sym.imp.fopen",
            "mov r6, r0",
            "mov r0, r4",
            "mov r1, 1",
            "mov r2, r5",
            "mov r3, r6",
            "bl sym.imp.fread",
            "cmp r0, r5",
            "mvnne r0, 0",
            "popne {r4, r5, r6, pc}",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x00008df8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4c4]!"
        ]
    },
    "sym.increase_pot": {
        "function_address": "0x000093d0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x34",
            "ldr r3, str._dev_mtd_4",
            "add ip, sp, 8",
            "ldm r3, {r0, r1, r2}",
            "stm ip!, {r0, r1}",
            "strh r2, [ip], 2",
            "lsr r2, r2, 0x10",
            "strb r2, [ip]",
            "bl sym.pot_init",
            "mov r1, 0",
            "ldr r0, obj.pot_buf",
            "mov r2, 0x218",
            "add r2, r2, 3",
            "ldrb r3, [r0, r1]",
            "cmp r3, 0",
            "bne 0x9420",
            "add r1, r1, 1",
            "cmp r1, r2",
            "ble 0x9408",
            "cmp r1, 0x21c",
            "bge 0x94f4",
            "ldr r3, obj.pot_buf",
            "ldrb r3, [r3, r1]",
            "cmp r3, 0xf0",
            "mvneq r2, 0x1f",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "bgt 0x9490",
            "cmp r3, 0xc0",
            "mvneq r2, 0x7f",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "bgt 0x9478",
            "cmp r3, 0x80",
            "moveq r2, 0",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "b 0x94e8",
            "cmp r3, 0xe0",
            "mvneq r2, 0x3f",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "b 0x94e8",
            "cmp r3, 0xfc",
            "mvneq r2, 7",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "bgt 0x94c0",
            "cmp r3, 0xf8",
            "mvneq r2, 0xf",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "b 0x94e8",
            "cmp r3, 0xfe",
            "mvneq r2, 3",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "cmp r3, 0xff",
            "mvneq r2, 1",
            "ldreq r3, obj.pot_buf",
            "strbeq r2, [r3, r1]",
            "beq 0x94f4",
            "mvn r2, 0",
            "ldr r3, obj.pot_buf",
            "strb r2, [r3, r1]",
            "add r5, sp, 8",
            "mov r0, r5",
            "mov r1, 2",
            "bl sym.imp.open",
            "mov r4, r0",
            "cmp r0, 0",
            "bge 0x9524",
            "mov r0, r5",
            "bl sym.imp.perror",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x95d4",
            "mov r1, 0x204000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x80000001",
            "add r2, sp, 0x14",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "beq 0x955c",
            "add r0, sp, 8",
            "bl sym.imp.perror",
            "mov r0, r4",
            "bl sym.imp.close",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x95d4",
            "mov r3, 0",
            "str r3, [sp]",
            "mov r2, sp",
            "ldr r3, [sp, 0x20]",
            "str r3, [sp, 4]",
            "mov r0, r4",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000006",
            "bl sym.imp.ioctl",
            "mov r0, r4",
            "ldr r1, obj.pot_buf",
            "mov r2, 0x21c",
            "bl sym.imp.write",
            "cmp r0, 0x21c",
            "beq 0x95b0",
            "add r0, sp, 8",
            "bl sym.imp.perror",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x95d4",
            "mov r0, r4",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000005",
            "mov r2, sp",
            "bl sym.imp.ioctl",
            "mov r0, r4",
            "bl sym.imp.close",
            "mov r0, 0",
            "add sp, sp, 0x34",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.open": {
        "function_address": "0x00008e94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x45c]!"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00008d98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x504]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00008dc8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4e4]!"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x00008eac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x44c]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008d8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x50c]!"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00008d74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x51c]!"
        ]
    },
    "sym.nvram_update": {
        "function_address": "0x0000a08c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r0, str._update_nvram_with_default_list_",
            "bl sym.imp.puts",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xa0b8",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "bne 0xa0c0",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, pc}",
            "ldr r5, obj.defnv_list",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "beq 0xa18c",
            "mov r6, 0x7f0",
            "add r6, r6, 0xf",
            "mov r7, 0",
            "mov r4, r7",
            "add r3, r4, r4, lsl 3",
            "rsb r3, r4, r3, lsl 3",
            "ldr r2, obj.shared_nvram",
            "ldr r0, [r2]",
            "add r0, r0, r3, lsl 2",
            "add r0, r0, 4",
            "mov r1, r5",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xa128",
            "mov r7, 1",
            "ldr r3, [r5, 0x11c]",
            "cmp r3, r7",
            "bne 0xa134",
            "mov r0, r5",
            "add r1, r5, 0x20",
            "bl sym.nvram_set",
            "b 0xa134",
            "add r4, r4, 1",
            "cmp r4, r6",
            "ble 0xa0e0",
            "cmp r7, 0",
            "bne 0xa148",
            "mov r0, r5",
            "add r1, r5, 0x20",
            "bl sym.nvram_set",
            "ldrb r3, [r5, 0x120]!",
            "cmp r3, 0",
            "bne 0xa0d8",
            "ldr r5, obj.defnv_list",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "beq 0xa18c",
            "mov r0, r5",
            "bl sym.nvram_get",
            "cmp r0, 0",
            "bne 0xa180",
            "mov r0, r5",
            "add r1, r5, 0x20",
            "bl sym.nvram_set",
            "ldrb r3, [r5, 0x120]!",
            "cmp r3, 0",
            "bne 0xa164",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x00008e70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x474]!"
        ]
    },
    "sym.imp.putchar": {
        "function_address": "0x00008dbc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4ec]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00008ec4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x43c]!"
        ]
    },
    "sym.nvramd_restore": {
        "function_address": "0x0000a878",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, str._Restore_to_default",
            "bl sym.imp.printf",
            "mov r0, 0x1580",
            "add r0, r0, 0x20",
            "mov r1, 0x8e000",
            "add r1, r1, 4",
            "mov r2, 0x3b4",
            "add r2, r2, 2",
            "bl sym.imp.shmget",
            "mov r1, 0",
            "mov r2, r1",
            "bl sym.imp.shmat",
            "ldr r3, obj.nvshm",
            "str r0, [r3]",
            "ldr r4, obj.shm_nvramd",
            "str r0, [r4]",
            "bl fcn.0000a9e4",
            "ldr r2, [r4]",
            "mov r3, 1",
            "strb r3, [r2, 1]",
            "ldr r4, obj.defnv_list",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "beq 0xa8f4",
            "mov r0, r4",
            "add r1, r4, 0x20",
            "bl sym.nvramd_set",
            "ldrb r3, [r4, 0x11c]!",
            "cmp r3, 0",
            "bne 0xa8dc",
            "bl sym.nvram_commit",
            "mov r0, 0",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.shmget": {
        "function_address": "0x00008e04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4bc]!"
        ]
    },
    "sym.imp.shmat": {
        "function_address": "0x00008f00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x414]!"
        ]
    },
    "fcn.0000a9e4": {
        "function_address": "0x0000a9e4",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, obj.shm_nvramd",
            "ldr r0, [r3]",
            "mov r1, 0",
            "mov r2, 0x8e000",
            "add r2, r2, 4",
            "bl sym.imp.memset",
            "mov r0, 0",
            "pop {pc}"
        ]
    },
    "sym.nvramd_set": {
        "function_address": "0x0000a910",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, r0",
            "ldr r3, obj.shm_nvramd",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "mvneq r0, 0",
            "popeq {r4, r5, r6, pc}",
            "cmp ip, 0",
            "beq 0xa940",
            "ldrb r3, [ip]",
            "cmp r3, 0",
            "bne 0xa948",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}",
            "ldr r3, aav.0x0000af28",
            "cmp r1, 0",
            "movne r6, r1",
            "moveq r6, r3",
            "mov r2, 0",
            "ldr r3, obj.shm_nvramd",
            "ldr r0, [r3]",
            "mov r1, 0x7f0",
            "add r1, r1, 0xf",
            "add r3, r2, r2, lsl 3",
            "rsb r3, r2, r3, lsl 3",
            "add r3, r0, r3, lsl 2",
            "ldrb r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0xa990",
            "add r2, r2, 1",
            "cmp r2, r1",
            "ble 0xa96c",
            "add r4, r2, r2, lsl 3",
            "rsb r4, r2, r4, lsl 3",
            "lsl r4, r4, 2",
            "ldr r5, obj.shm_nvramd",
            "ldr r0, [r5]",
            "add r0, r4, r0",
            "add r0, r0, 4",
            "mov r1, ip",
            "mov r2, 0x1f",
            "bl sym.imp.strncpy",
            "ldr r3, [r5]",
            "add r4, r4, r3",
            "add r4, r4, 0x24",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, 0xfb",
            "bl sym.imp.strncpy",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.nvram_unset": {
        "function_address": "0x00009ea0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r0",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9ecc",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "ldrne r1, obj.shared_nvram",
            "bne 0x9ee0",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "strb r0, [r4, 0x24]",
            "strb r0, [r4, 4]",
            "b 0x9f50",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x9ee4",
            "ldr r2, [r1]",
            "ldrb r3, [r2]",
            "add r3, r3, 1",
            "strb r3, [r2]",
            "ldr r3, [r1]",
            "ldrb r3, [r3]",
            "cmp r3, 1",
            "bhi 0x9ee0",
            "mov r5, 0",
            "ldr r3, obj.shared_nvram",
            "ldr r7, [r3]",
            "mov r6, 0x7f0",
            "add r6, r6, 0xf",
            "add r3, r5, r5, lsl 3",
            "rsb r3, r5, r3, lsl 3",
            "add r4, r7, r3, lsl 2",
            "add r0, r4, 4",
            "mov r1, r8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9ed4",
            "add r5, r5, 1",
            "cmp r5, r6",
            "ble 0x9f24",
            "ldr r3, obj.shared_nvram",
            "ldr r2, [r3]",
            "mov r3, 0",
            "strb r3, [r2]",
            "mov r0, r3",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.dump_pot": {
        "function_address": "0x000095e4",
        "instructions": [
            "push {r4, r5, lr}",
            "bl sym.pot_init",
            "mov r4, 0",
            "mov r5, 0x218",
            "add r5, r5, 3",
            "tst r4, 0xf",
            "bne 0x9610",
            "ldr r0, str._n__04d__0x_04X__",
            "mov r1, r4",
            "mov r2, r4",
            "bl sym.imp.printf",
            "ldr r0, str.__02X",
            "ldr r3, obj.pot_buf",
            "ldrb r1, [r3, r4]",
            "bl sym.imp.printf",
            "add r4, r4, 1",
            "cmp r4, r5",
            "ble 0x95f8",
            "mov r0, 0",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00008e40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x494]!"
        ]
    },
    "sym.crc32": {
        "function_address": "0x00009014",
        "instructions": [
            "str lr, [sp, -4]!",
            "mov ip, r0",
            "mvn r0, 0",
            "mov r2, 0",
            "cmp r2, r1",
            "bhs 0x9050",
            "ldr lr, aav.0x0000ab04",
            "ldrb r3, [ip, r2]",
            "eor r3, r3, r0",
            "and r3, r3, 0xff",
            "ldr r3, [lr, r3, lsl 2]",
            "eor r0, r3, r0, lsr 8",
            "add r2, r2, 1",
            "cmp r2, r1",
            "blo 0x9030",
            "mvn r0, r0",
            "pop {pc}"
        ]
    },
    "sym.mtd_write": {
        "function_address": "0x0000905c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x28",
            "mov sl, r0",
            "mov sb, r1",
            "mov r6, r2",
            "mov r1, 2",
            "bl fcn.000091b8",
            "mov r5, r0",
            "cmp r0, 0",
            "bge 0x9098",
            "mov r0, sl",
            "bl sym.imp.perror",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x91b0",
            "mov r1, 0x204000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x80000001",
            "add r2, sp, 8",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "beq 0x9100",
            "mov r0, sl",
            "bl sym.imp.perror",
            "mov r0, r5",
            "bl sym.imp.close",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x91b0",
            "mov r0, sl",
            "bl sym.imp.perror",
            "mov r0, r5",
            "bl sym.imp.close",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x91b0",
            "mov r0, sl",
            "bl sym.imp.perror",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x91b0",
            "ldr r3, [sp, 0x14]",
            "str r3, [sp, 4]",
            "mov r3, 0",
            "str r3, [sp]",
            "cmp r6, r3",
            "ble 0x91a4",
            "mov r7, 0x84000",
            "add r7, r7, 0xd00",
            "mov r8, sp",
            "ldr r3, [sp, 0x14]",
            "cmp r6, r3",
            "movlo r4, r6",
            "movhs r4, r3",
            "rsb r6, r4, r6",
            "mov r0, r5",
            "add r1, r7, 0x40000006",
            "mov r2, r8",
            "bl sym.imp.ioctl",
            "mov r0, r5",
            "add r1, r7, 0x40000002",
            "mov r2, r8",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "bne 0x90d0",
            "mov r0, r5",
            "mov r1, sb",
            "mov r2, r4",
            "bl sym.imp.write",
            "cmp r0, r4",
            "bne 0x90ec",
            "mov r0, r5",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000005",
            "mov r2, sp",
            "bl sym.imp.ioctl",
            "ldr r3, [sp]",
            "add r3, r4, r3",
            "str r3, [sp]",
            "cmp r6, 0",
            "bgt 0x9124",
            "mov r0, r5",
            "bl fcn.000091c4",
            "mov r0, 0",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.set_factory_from_nvram": {
        "function_address": "0x000096b0",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r0, 0x24",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "cmp r0, 0",
            "bne 0x96d8",
            "ldr r0, str.Memory_allocation_error__",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r4, r5, pc}",
            "mov r5, r0",
            "mov r2, 0",
            "str r2, [r0, 4]",
            "add r3, r0, 8",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "ldr r3, str.FACTORY",
            "ldm r3, {r0, r1}",
            "str r0, [r4]",
            "strh r1, [r4, 4]",
            "lsr r1, r1, 0x10",
            "strb r1, [r4, 6]",
            "str r2, [r4, 8]",
            "mov r3, 0x24",
            "str r3, [r4, 0xc]",
            "ldr r0, str.cwf_serial_number",
            "bl sym.nvram_get",
            "cmp r0, 0",
            "bne 0x9748",
            "ldr r0, str.error____Cant_get_serial_number_from_nvram",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r4, r5, pc}",
            "ldr r0, str.cwf_serial_number",
            "bl sym.nvram_get",
            "mov r3, r0",
            "add r0, r4, 0x11",
            "ldr r1, aav.0x0000af28",
            "cmp r3, 0",
            "movne r1, r3",
            "bl sym.imp.strcpy",
            "mov r3, 1",
            "strb r3, [r4, 0x10]",
            "mov r0, r4",
            "ldr r1, [r4, 0xc]",
            "bl sym.crc32",
            "str r0, [r4, 8]",
            "ldr r0, aav.0x0000af04",
            "mov r1, r4",
            "ldr r2, [r4, 0xc]",
            "bl sym.mtd_write",
            "mov r0, r4",
            "bl sym.imp.free",
            "ldr r0, str.Done",
            "bl sym.imp.puts",
            "mov r0, 0",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00008dec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x4cc]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00008ea0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x454]!"
        ]
    },
    "fcn.000091b8": {
        "function_address": "0x000091b8",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl sym.imp.open",
            "pop {pc}"
        ]
    },
    "fcn.000091c4": {
        "function_address": "0x000091c4",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl sym.imp.close",
            "pop {pc}"
        ]
    },
    "sym.clear_pot": {
        "function_address": "0x000092a0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x34",
            "ldr r3, str._dev_mtd_4",
            "add ip, sp, 8",
            "ldm r3, {r0, r1, r2}",
            "stm ip!, {r0, r1}",
            "strh r2, [ip], 2",
            "lsr r2, r2, 0x10",
            "strb r2, [ip]",
            "add r4, sp, 8",
            "mov r0, r4",
            "mov r1, 2",
            "bl sym.imp.open",
            "mov r5, r0",
            "cmp r0, 0",
            "bge 0x92f4",
            "mov r0, r4",
            "bl sym.imp.perror",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x93c0",
            "mov r1, 0x204000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x80000001",
            "add r2, sp, 0x14",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "beq 0x932c",
            "add r0, sp, 8",
            "bl sym.imp.perror",
            "mov r0, r5",
            "bl sym.imp.close",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x93c0",
            "mov r3, 0",
            "str r3, [sp]",
            "mov r4, sp",
            "ldr r3, [sp, 0x20]",
            "str r3, [sp, 4]",
            "mov r0, r5",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000006",
            "mov r2, sp",
            "bl sym.imp.ioctl",
            "ldr r0, str.Erasing_POT_..",
            "bl sym.imp.printf",
            "mov r0, r5",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000002",
            "mov r2, sp",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "beq 0x939c",
            "add r0, sp, 8",
            "bl sym.imp.perror",
            "mov r0, r5",
            "bl sym.imp.close",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "b 0x93c0",
            "mov r0, r5",
            "mov r1, 0x84000",
            "add r1, r1, 0xd00",
            "add r1, r1, 0x40000005",
            "mov r2, sp",
            "bl sym.imp.ioctl",
            "mov r0, r5",
            "bl sym.imp.close",
            "mov r0, 0",
            "add sp, sp, 0x34",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.nvram_list_all": {
        "function_address": "0x00009c48",
        "instructions": [
            "push {r4, r5, lr}",
            "bl fcn.00009640",
            "ldr r3, obj.shared_nvram",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x9c74",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "ldrne r3, obj.shared_nvram",
            "ldrne r2, [r3]",
            "bne 0x9c7c",
            "mvn r0, 0",
            "pop {r4, r5, pc}",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x9c7c",
            "mov r4, 0",
            "mov r5, 0x7f0",
            "add r5, r5, 0xf",
            "ldr r3, obj.shared_nvram",
            "ldr r2, [r3]",
            "add r3, r4, r4, lsl 3",
            "rsb r3, r4, r3, lsl 3",
            "add r2, r2, r3, lsl 2",
            "add r1, r2, 4",
            "ldrb r3, [r2, 4]",
            "cmp r3, 0",
            "beq 0x9cc4",
            "ldr r0, str._s_s_n",
            "add r2, r2, 0x24",
            "bl sym.imp.printf",
            "add r4, r4, 1",
            "cmp r4, r5",
            "ble 0x9c94",
            "mov r0, 0",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.get_pot": {
        "function_address": "0x000091d0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, 0",
            "bl sym.pot_init",
            "mov r2, r4",
            "ldr r0, obj.pot_buf",
            "mov r1, 0x218",
            "add r1, r1, 3",
            "ldrb r3, [r0, r2]",
            "cmp r3, 0xff",
            "beq 0x9284",
            "cmp r3, 0xe0",
            "moveq r3, 5",
            "beq 0x9274",
            "bgt 0x9238",
            "cmp r3, 0x80",
            "moveq r3, 7",
            "beq 0x9274",
            "bgt 0x9228",
            "cmp r3, 0",
            "moveq r3, 8",
            "beq 0x9274",
            "b 0x9270",
            "cmp r3, 0xc0",
            "moveq r3, 6",
            "beq 0x9274",
            "b 0x9270",
            "cmp r3, 0xf8",
            "moveq r3, 3",
            "beq 0x9274",
            "bgt 0x9258",
            "cmp r3, 0xf0",
            "moveq r3, 4",
            "beq 0x9274",
            "b 0x9270",
            "cmp r3, 0xfc",
            "moveq r3, 2",
            "beq 0x9274",
            "cmp r3, 0xfe",
            "subeq r3, r3, 0xfd",
            "beq 0x9274",
            "mov r3, 0",
            "add r4, r4, r3",
            "add r2, r2, 1",
            "cmp r2, r1",
            "ble 0x91ec",
            "ldr r0, str.total_min_is__d_n",
            "mov r1, r4",
            "bl sym.imp.printf",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.nvramd_exit": {
        "function_address": "0x0000a7c0",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, obj.nvshm",
            "ldr r0, [r3]",
            "bl sym.imp.shmdt",
            "mov r0, 0",
            "pop {pc}"
        ]
    },
    "sym.imp.shmdt": {
        "function_address": "0x00008e58",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x484]!"
        ]
    },
    "sym.nvramd_init": {
        "function_address": "0x0000a530",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r0, 0x1740",
            "add r0, r0, 0x22",
            "mov r1, 0x10000",
            "mov r2, 0x3b4",
            "add r2, r2, 2",
            "bl sym.imp.shmget",
            "mov r4, r0",
            "cmn r0, 1",
            "bne 0xa568",
            "ldr r0, str.shared_memory_allocate_error__n",
            "bl sym.imp.perror",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}",
            "mov r1, 0",
            "mov r2, r1",
            "bl sym.imp.shmat",
            "ldr r4, [0x0000a608]",
            "str r0, [r4]",
            "mov r5, 0x10000",
            "mov r1, 0",
            "mov r2, r5",
            "bl sym.imp.memset",
            "ldr r0, [r4]",
            "ldr r3, [0x0000a60c]",
            "str r0, [r3]",
            "mov r1, 0",
            "mov r2, r5",
            "bl sym.imp.memset",
            "ldr r0, str._dev_mtd_2",
            "ldr r1, aav.0x0000b02c",
            "bl sym.imp.fopen",
            "mov r6, r0",
            "ldr r0, [r4]",
            "mov r1, 1",
            "mov r2, r5",
            "mov r3, r6",
            "bl sym.imp.fread",
            "cmp r0, r5",
            "mvnne r0, 0",
            "popne {r4, r5, r6, pc}",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "mov r3, 0",
            "ldr r2, obj.shm_nvramd",
            "str r3, [r2]",
            "bl fcn.0000a7dc",
            "cmp r0, 0",
            "beq 0xa5fc",
            "bl sym.nvramd_restore",
            "pop {r4, r5, r6, pc}",
            "bl fcn.0000a684",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000a7dc": {
        "function_address": "0x0000a7dc",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0000a870]",
            "ldr r0, [r4]",
            "ldr r1, str.NVRM",
            "mov r2, 4",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0xa828",
            "ldr r0, [r4]",
            "ldr r3, [r0, 8]",
            "cmp r3, 0",
            "beq 0xa828",
            "cmn r3, 1",
            "beq 0xa828",
            "ldr r0, [r0, 0xc]",
            "cmp r0, 0x10",
            "bls 0xa828",
            "cmn r0, 1",
            "bne 0xa830",
            "mvn r0, 0",
            "pop {r4, pc}",
            "ldr r1, [0x0000a870]",
            "ldr r2, [r1]",
            "ldr r4, [r2, 4]",
            "mov r3, 0",
            "str r3, [r2, 4]",
            "ldr r3, [r1]",
            "mov r0, r3",
            "ldr r1, [r3, 0xc]",
            "bl sym.crc32",
            "cmp r4, r0",
            "mvnne r0, 0",
            "ldreq r3, [0x0000a870]",
            "ldreq r3, [r3]",
            "streq r0, [r3, 4]",
            "moveq r0, 0",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000a684": {
        "function_address": "0x0000a684",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x20",
            "mov r0, 0x1580",
            "add r0, r0, 0x20",
            "mov r1, 0x8e000",
            "add r1, r1, 4",
            "mov r2, 0x3b4",
            "add r2, r2, 2",
            "bl sym.imp.shmget",
            "mov r1, 0",
            "mov r2, r1",
            "bl sym.imp.shmat",
            "ldr r3, obj.nvshm",
            "str r0, [r3]",
            "ldr r3, obj.shm_nvramd",
            "str r0, [r3]",
            "mov r1, 0",
            "mov r2, 0x8e000",
            "add r2, r2, 4",
            "bl sym.imp.memset",
            "bl fcn.0000a9e4",
            "ldr r3, [0x0000a7bc]",
            "ldr r3, [r3]",
            "add r4, r3, 0x10",
            "mov r6, 0",
            "ldr r3, [r3, 8]",
            "cmp r6, r3",
            "bhs 0xa798",
            "mov r5, r6",
            "mov r7, sp",
            "str r5, [sp]",
            "str r5, [sp, 4]",
            "str r5, [sp, 8]",
            "str r5, [sp, 0xc]",
            "str r5, [sp, 0x10]",
            "str r5, [sp, 0x14]",
            "str r5, [sp, 0x18]",
            "str r5, [sp, 0x1c]",
            "mov r1, r5",
            "ldrb r2, [r4, r1]",
            "cmp r2, 0",
            "cmpne r2, 0x3d",
            "beq 0xa748",
            "add r0, sp, 0x20",
            "add r3, r0, r1",
            "strb r2, [r3, -0x20]",
            "add r1, r1, 1",
            "cmp r1, 0x1e",
            "ble 0xa720",
            "ldrb r3, [sp]",
            "cmp r3, 0",
            "mvneq r0, 0",
            "beq 0xa7ac",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add r3, r0, r4",
            "mov r0, r7",
            "add r1, r3, 1",
            "bl sym.nvramd_set",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "add r4, r4, r0",
            "add r4, r4, 1",
            "add r6, r6, 1",
            "ldr r3, [0x0000a7bc]",
            "ldr r3, [r3]",
            "ldr r3, [r3, 8]",
            "cmp r6, r3",
            "blo 0xa6fc",
            "ldr r3, obj.shm_nvramd",
            "ldr r2, [r3]",
            "mov r3, 1",
            "strb r3, [r2, 1]",
            "mov r0, 0",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00008e4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x48c]!"
        ]
    },
    "sym.get_factory_to_nvram": {
        "function_address": "0x000097c4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r0, aav.0x0000af04",
            "mov r1, 0",
            "bl sym.imp.open",
            "mov r5, r0",
            "cmp r0, 0",
            "bge 0x97f0",
            "ldr r0, str.Open__s_error___Cant_read_serial_number__n",
            "bl sym.imp.printf",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}",
            "mov r0, 0x24",
            "bl sym.imp.malloc",
            "mov r4, r0",
            "cmp r0, 0",
            "bne 0x9814",
            "ldr r0, str.Memory_allocation_error__",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}",
            "mov r6, r0",
            "mov r2, 0",
            "str r2, [r0, 4]",
            "add r3, r0, 8",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "ldr r3, str.FACTORY",
            "ldm r3, {r0, r1}",
            "str r0, [r4]",
            "strh r1, [r4, 4]",
            "lsr r1, r1, 0x10",
            "strb r1, [r4, 6]",
            "str r2, [r4, 8]",
            "add r2, r2, 0x24",
            "str r2, [r4, 0xc]",
            "mov r0, r5",
            "mov r1, r4",
            "bl sym.imp.read",
            "cmp r0, 0",
            "bge 0x9888",
            "ldr r0, str.read_serial_number_error",
            "bl sym.imp.puts",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}",
            "mov r0, r5",
            "bl sym.imp.close",
            "ldrb r3, [r4, 0x10]",
            "cmp r3, 1",
            "bne 0x98ac",
            "ldr r0, str.cwf_serial_number",
            "add r1, r4, 0x11",
            "bl sym.nvram_set",
            "b 0x98c0",
            "ldr r0, str.no_factory_default_number",
            "bl sym.imp.puts",
            "ldr r0, str.cwf_serial_number",
            "ldr r1, str.BEL99999999",
            "bl sym.nvram_set",
            "mov r0, r4",
            "bl sym.imp.free",
            "ldr r0, str.Done",
            "bl sym.imp.puts",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00008ef4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xa000",
            "ldr pc, [ip, 0x41c]!"
        ]
    },
    "main": {
        "function_address": "0x00009004",
        "instructions": [
            "str lr, [sp, -4]!",
            "bl sym.nvramd_init",
            "mov r0, 0",
            "pop {pc}"
        ]
    }
}