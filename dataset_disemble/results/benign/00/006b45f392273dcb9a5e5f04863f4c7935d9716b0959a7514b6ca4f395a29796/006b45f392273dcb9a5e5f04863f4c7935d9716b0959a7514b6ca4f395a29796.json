{
    "entry0": {
        "function_address": "0x00008b24",
        "instructions": [
            "mov fp, 0",
            "mov lr, 0",
            "pop {r1}",
            "mov r2, sp",
            "str r2, [sp, -4]!",
            "str r0, [sp, -4]!",
            "ldr ip, fcn.000090cc",
            "str ip, [sp, -4]!",
            "ldr r0, main",
            "ldr r3, fcn.000090d0",
            "bl sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x000087a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x154]!"
        ]
    },
    "main": {
        "function_address": "0x0000883c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "cmp r0, 1",
            "sub sp, sp, 0x10",
            "mov r5, r0",
            "mov r4, r1",
            "ble 0x8a0c",
            "ldr r6, [r1, 4]",
            "ldrb r3, [r6]",
            "cmp r3, 0x2d",
            "bne 0x8870",
            "ldrb r3, [r6, 1]",
            "cmp r3, 0x61",
            "beq 0x8904",
            "ldr r0, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_dpv_1347435858000__dst_nas___xs:transaction_id_njl_id_1112___xs:get_id_njl_id_1111___resource_id_SystemInfo__resource_type_SystemInfo____xs:get___xs:transaction___xs:nml_",
            "bl fcn.00008e38",
            "subs r4, r0, 0",
            "beq 0x8a68",
            "mov r3, 0",
            "add r0, sp, 8",
            "ldr r1, str.__s_",
            "mov r2, r6",
            "str r3, [sp, 8]",
            "str r3, [sp, 0xc]",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x88f8",
            "add r0, sp, 0xc",
            "ldr r1, str.___s_",
            "mov r2, r6",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8a5c",
            "add r1, sp, 8",
            "ldm r1, {r1, r2}",
            "mov r0, r4",
            "bl fcn.00008d78",
            "mov r5, r0",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.free",
            "ldr r0, [sp, 8]",
            "bl sym.imp.free",
            "cmp r5, 0",
            "beq 0x88f8",
            "mov r0, r5",
            "bl sym.imp.puts",
            "mov r0, r5",
            "bl sym.imp.free",
            "mov r0, r4",
            "bl sym.imp.free",
            "b 0x89f0",
            "ldrb r3, [r6, 2]",
            "cmp r3, 0",
            "bne 0x8870",
            "cmp r0, 2",
            "beq 0x8a00",
            "ldr r6, [r1, 8]",
            "ldr r1, str.useradd",
            "mov r0, r6",
            "bl sym.imp.strcmp",
            "subs ip, r0, 0",
            "bne 0x8a24",
            "cmp r5, 5",
            "ble 0x8a34",
            "add r1, r4, 0xc",
            "ldm r1, {r1, r2}",
            "cmp r2, 0",
            "cmpne r1, 0",
            "ldr r3, [r4, 0x14]",
            "beq 0x8a18",
            "cmp r3, 0",
            "beq 0x8a18",
            "add r0, sp, 0x10",
            "str ip, [r0, -4]!",
            "str r1, [sp]",
            "ldr r1, str.__xml_version_1.0__encoding_UTF_8____xs:nml_xmlns:xs_http:__www.netgear.com_protocol_transaction_NMLSchema_0.9__xmlns_urn:netgear:nas:readynasd__src_dpv_1347435858000__dst_nas___xs:transaction_id_njl_id_1112___xs:add_id_njl_id_1111__resource_type_User__c_resource_id_Users__c_resource_type_User_Collection_______User_Collection__________User_id_0__resource_type_User_______________User_Id____CDATA______User_Id__User_Name____CDATA__s_____User_Name__Password____CDATA__s_____Password__Group_Name____",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8a50",
            "ldr r0, [sp, 0xc]",
            "bl fcn.00008e38",
            "subs r6, r0, 0",
            "beq 0x8a48",
            "ldr r1, str.status_",
            "ldr r2, aav.0x00009528",
            "bl fcn.00008d78",
            "subs r5, r0, 0",
            "beq 0x8a40",
            "ldr r1, str.success",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "mov r0, r5",
            "beq 0x8acc",
            "ldr r1, str.failure",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "movne r4, 0",
            "beq 0x8ab0",
            "mov r0, r5",
            "bl sym.imp.free",
            "mov r0, r6",
            "bl sym.imp.free",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.free",
            "cmp r4, 0",
            "beq 0x8a50",
            "mov r0, r4",
            "bl sym.imp.puts",
            "mov r0, r4",
            "bl sym.imp.free",
            "mov r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, str.missed_argument",
            "bl sym.imp.puts",
            "b 0x89f0",
            "ldr r0, str.Usage:_readyinfo__node_name__nfor_ex.:_readyinfo_SystemInfo_n",
            "bl sym.imp.puts",
            "b 0x89f0",
            "ldr r0, str.Empty_group_or_name_or_pass",
            "bl sym.imp.puts",
            "b 0x89f0",
            "mov r1, r6",
            "ldr r0, str.command___s__not_implemented_yet_n",
            "bl sym.imp.printf",
            "b 0x89f0",
            "ldr r0, str.command_useradd_required_an_parameters",
            "bl sym.imp.puts",
            "b 0x89f0",
            "mov r0, r6",
            "bl sym.imp.free",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.free",
            "ldr r0, str.Error_to_add_user._Sorry_",
            "bl sym.imp.puts",
            "b 0x89f0",
            "ldr r0, [sp, 8]",
            "bl sym.imp.free",
            "b 0x88f8",
            "add r5, sp, 0x10",
            "str r4, [r5, -4]!",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "ldr r1, str.ERROR:GetInfo:Read__s",
            "mov r2, r0",
            "mov r0, r5",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x89f0",
            "mov r1, 0xaa",
            "ldr r2, [sp, 0xc]",
            "ldr r0, str._d__s_n",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.free",
            "b 0x89f0",
            "mov r0, r6",
            "ldr r1, str._xs:error_details____CDATA_",
            "ldr r2, str._____xs:error_details_",
            "bl fcn.00008d78",
            "subs r4, r0, 0",
            "bne 0x89c0",
            "mov r0, r5",
            "bl sym.imp.__strdup",
            "mov r4, r0",
            "b 0x89c0"
        ]
    },
    "fcn.00008e38": {
        "function_address": "0x00008e38",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, obj.__stack_chk_guard",
            "mov r8, r0",
            "ldr r3, [r7]",
            "mov r0, 1",
            "sub sp, sp, 0x90",
            "mov r1, r0",
            "mov r2, 0",
            "str r3, [sp, 0x8c]",
            "bl sym.imp.socket",
            "cmn r0, 1",
            "mov r4, r0",
            "beq 0x9068",
            "mov r5, 1",
            "mov ip, 8",
            "add r3, sp, 0x14",
            "mov r1, r5",
            "str ip, [sp]",
            "mov r2, 0xd",
            "add r6, sp, 0x90",
            "str r5, [sp, 0x14]",
            "str r5, [sp, 0x18]",
            "bl sym.imp.setsockopt",
            "strh r5, [r6, -0x74]!",
            "mov r2, 0x1d",
            "ldr r1, str._run_readynasd_getset_socket",
            "add r0, sp, 0x1e",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, 0x1e",
            "bl sym.imp.connect",
            "subs r5, r0, 0",
            "add r0, sp, 0x90",
            "beq 0x8f20",
            "mov r3, 0",
            "str r3, [r0, -0x80]!",
            "ldr r1, str.ERROR:GetInfo:Connect_faild",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8ef4",
            "ldr r0, str._d__s_n",
            "mov r1, 0x8b",
            "ldr r2, [sp, 0x10]",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.free",
            "mov r5, 0",
            "mov r0, r4",
            "bl sym.imp.close",
            "ldr r2, [sp, 0x8c]",
            "ldr r3, [r7]",
            "cmp r2, r3",
            "mov r0, r5",
            "bne 0x90a4",
            "add sp, sp, 0x90",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "str r5, [r0, -0x84]!",
            "ldr r1, str.Accept_Language:_en_US_q0.6_en_q0.4_r_nAuthorization:_admin_r_nX_Remote_Ip:__r_nCookie:_READYDROPD__r_nSession:__r_n_r_n_s",
            "mov r2, r8",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8f8c",
            "ldr r6, [sp, 0xc]",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl sym.imp.write",
            "cmn r0, 1",
            "beq 0x9020",
            "mov r0, r4",
            "ldr r1, str.__TRANSACTION_TERMINATED__",
            "mov r2, 0x1c",
            "bl sym.imp.write",
            "cmn r0, 1",
            "beq 0x8fd4",
            "mov r0, r4",
            "bl fcn.00008c7c",
            "mov r5, r0",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.free",
            "b 0x8ef8",
            "add r6, sp, 0x90",
            "str r5, [r6, -0x80]!",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "ldr r1, str.ERROR:GetInfo:Memory_allocation__s",
            "mov r2, r0",
            "mov r0, r6",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8ef4",
            "mov r1, 0x88",
            "ldr r2, [sp, 0x10]",
            "ldr r0, str._d__s_n",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.free",
            "b 0x8ef4",
            "mov r3, 0",
            "add r5, sp, 0x90",
            "str r3, [r5, -0x80]!",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "ldr r1, str.ERROR:GetInfo:Write__s",
            "mov r2, r0",
            "mov r0, r5",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8f74",
            "mov r1, 0x83",
            "ldr r2, [sp, 0x10]",
            "ldr r0, str._d__s_n",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.free",
            "b 0x8f74",
            "add r6, sp, 0x90",
            "str r5, [r6, -0x80]!",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "ldr r1, str.ERROR:GetInfo:Write__s",
            "mov r2, r0",
            "mov r0, r6",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x8f5c",
            "mov r1, 0x81",
            "ldr r2, [sp, 0x10]",
            "ldr r0, str._d__s_n",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.free",
            "b 0x8f5c",
            "add r0, sp, 0x90",
            "mov r3, 0",
            "str r3, [r0, -0x80]!",
            "ldr r1, str.ERROR:GetInfo:Can_not_create_socket",
            "bl sym.imp.asprintf",
            "cmn r0, 1",
            "beq 0x909c",
            "ldr r0, str._d__s_n",
            "mov r1, 0x8f",
            "ldr r2, [sp, 0x10]",
            "bl sym.imp.printf",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.free",
            "mov r5, 0",
            "b 0x8f00",
            "bl sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.asprintf": {
        "function_address": "0x00008800",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x114]!"
        ]
    },
    "fcn.00008d78": {
        "function_address": "0x00008d78",
        "instructions": [
            "cmp r1, 0",
            "cmpne r0, 0",
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "beq 0x8e08",
            "cmp r2, 0",
            "beq 0x8e08",
            "bl sym.imp.__strdup",
            "subs r6, r0, 0",
            "beq 0x8e30",
            "mov r1, r4",
            "bl sym.imp.strstr",
            "subs r7, r0, 0",
            "beq 0x8e1c",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "add r4, r7, r0",
            "bne 0x8dec",
            "mov r0, r4",
            "bl sym.imp.__strdup",
            "mov r4, r0",
            "mov r0, r6",
            "bl sym.imp.free",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "movne r3, 0",
            "strbne r3, [r0]",
            "b 0x8dcc",
            "bl sym.imp.__errno_location",
            "mov r3, 0x16",
            "str r3, [r0]",
            "mov r4, 0",
            "b 0x8de0",
            "mov r0, 1",
            "mov r1, r0",
            "bl sym.imp.calloc",
            "mov r4, r0",
            "b 0x8dd8",
            "mov r4, r6",
            "b 0x8de0"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00008764",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x17c]!"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008794",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x15c]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008734",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x19c]!"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x0000874c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x18c]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x000087d0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x134]!"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x000087ac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x14c]!"
        ]
    },
    "sym.imp.__strdup": {
        "function_address": "0x000087dc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x12c]!"
        ]
    },
    "fcn.000090d0": {
        "function_address": "0x000090d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr sl, [0x00009134]",
            "ldr r5, [0x00009138]",
            "mov r6, r0",
            "mov r7, r1",
            "mov r8, r2",
            "bl fcn.000086f8",
            "ldr r3, aav.0x000087c8",
            "rsb r5, sl, r5",
            "add r3, pc, r3",
            "asrs r5, r5, 2",
            "add sl, r3, sl",
            "beq 0x912c",
            "mov r4, 0",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, r8",
            "ldr ip, [sl, r4, lsl 2]",
            "mov lr, pc",
            "bx ip",
            "add r4, r4, 1",
            "cmp r4, r5",
            "blo 0x9108",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "fcn.000086f8": {
        "function_address": "0x000086f8",
        "instructions": [
            "push {r4, lr}",
            "bl fcn.00008b60",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008c1c",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00008c44]",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "bne 0x8c3c",
            "bl fcn.00008b8c",
            "mov r3, 1",
            "strb r3, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00008b8c": {
        "function_address": "0x00008b8c",
        "instructions": [
            "push {r3, lr}",
            "ldr r0, [0x00008bc4]",
            "ldr r3, [0x00008bc8]",
            "rsb r3, r0, r3",
            "cmp r3, 6",
            "bhi 0x8bac",
            "pop {r3, lr}",
            "bx lr",
            "ldr r3, [0x00008bcc]",
            "cmp r3, 0",
            "beq 0x8ba4",
            "mov lr, pc",
            "bx r3",
            "b 0x8ba4"
        ]
    },
    "fcn.00008b60": {
        "function_address": "0x00008b60",
        "instructions": [
            "ldr r3, aav.0x00008d54",
            "ldr r2, [0x00008b88]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "cmp r2, 0",
            "push {r4, lr}",
            "blne loc.imp.__gmon_start__",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x000087b8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x144]!"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x0000880c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x10c]!"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x00008740",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x194]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008770",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x174]!"
        ]
    },
    "sym.imp.connect": {
        "function_address": "0x00008830",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xf4]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008824",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0xfc]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x000087c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x13c]!"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x000087f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x11c]!"
        ]
    },
    "fcn.00008c7c": {
        "function_address": "0x00008c7c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr sb, obj.__stack_chk_guard",
            "sub sp, sp, 0x810",
            "sub sp, sp, 4",
            "ldr r3, [sb]",
            "mov r1, 0",
            "mov r2, 0x800",
            "mov r8, r0",
            "add r0, sp, 0xc",
            "str r3, [sp, 0x80c]",
            "mov r5, r1",
            "bl sym.imp.memset",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "str r3, [sp, 4]",
            "mov sl, r0",
            "mov r6, r5",
            "mov r0, r8",
            "add r1, sp, 0xc",
            "mov r2, 0x800",
            "bl sym.imp.read",
            "subs r4, r0, 0",
            "beq 0x8cf0",
            "cmn r4, 1",
            "bne 0x8d20",
            "ldr r3, [sl]",
            "cmp r3, 4",
            "cmpne r3, 0xb",
            "beq aav.0x00008d54",
            "cmp r6, 0",
            "movne r3, 0",
            "strbne r3, [r6, r5]",
            "ldr r2, [sp, 0x80c]",
            "ldr r3, [sb]",
            "cmp r2, r3",
            "mov r0, r6",
            "bne 0x8d70",
            "add sp, sp, 0x14",
            "add sp, sp, 0x800",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r7, r4, r5",
            "mov r0, r6",
            "add r1, r7, 1",
            "bl sym.imp.realloc",
            "subs fp, r0, 0",
            "beq 0x8d60",
            "add r0, fp, r5",
            "add r1, sp, 0xc",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "mov r5, r7",
            "mov r6, fp",
            "b 0x8cc0",
            "ldr r3, [sp, 4]",
            "str r3, [sl]",
            "b 0x8cc0",
            "mov r0, r6",
            "bl sym.imp.free",
            "mov r6, fp",
            "b 0x8cfc",
            "bl sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x0000877c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x16c]!"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x00008728",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1a4]!"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x0000871c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x1ac]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000087e8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x124]!"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00008758",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x184]!"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00008788",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x164]!"
        ]
    }
}