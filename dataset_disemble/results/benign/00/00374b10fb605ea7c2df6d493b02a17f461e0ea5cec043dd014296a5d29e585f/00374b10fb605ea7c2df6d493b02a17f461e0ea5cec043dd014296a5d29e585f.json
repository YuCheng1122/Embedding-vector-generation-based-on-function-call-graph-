{
    "main": {
        "function_address": "0x000094e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x1c",
            "mov r7, r0",
            "mov r6, r1",
            "bl sym.imp.iw_sockets_open",
            "subs r4, r0, 0",
            "bge 0x9510",
            "ldr r0, str.socket",
            "bl sym.imp.perror",
            "mvn r5, 0",
            "b 0x96d0",
            "cmp r7, 1",
            "moveq r2, 0",
            "ldreq r1, sym.print_priv_info",
            "beq 0x955c",
            "ldr r5, [r6, 4]",
            "ldr r1, [0x000096e4]",
            "mov r0, r5",
            "mov r2, 2",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x9550",
            "mov r0, r5",
            "ldr r1, str.__all",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x956c",
            "ldr r1, sym.print_priv_all",
            "mov r2, 0",
            "mov r0, r4",
            "mov r3, r2",
            "bl sym.imp.iw_enum_devices",
            "mov r5, 0",
            "b 0x96c8",
            "mov r0, r5",
            "ldr r1, aav.0x00009ee4",
            "mov r2, 2",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x9598",
            "mov r0, r5",
            "ldr r1, str.__help",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x95ac",
            "ldr r3, loc.__bss_start__",
            "ldr r0, str.Usage:_iwpriv_interface__private_command__private_arguments___n",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "b 0x9564",
            "mov r0, r5",
            "ldr r1, [0x00009700]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x95d4",
            "mov r0, r5",
            "ldr r1, str.__version",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x95e4",
            "ldr r0, str.iwpriv",
            "bl sym.imp.iw_print_version_info",
            "mov r5, r0",
            "b 0x96c8",
            "cmp r7, 2",
            "bne 0x9604",
            "mov r2, 0",
            "mov r1, r5",
            "mov r0, r4",
            "mov r3, r2",
            "bl sym.print_priv_info",
            "b 0x9564",
            "ldr r8, [r6, 8]",
            "ldr r1, [0x000096e4]",
            "mov r0, r8",
            "mov r2, 2",
            "bl sym.imp.strncmp",
            "add sl, r6, 8",
            "cmp r0, 0",
            "beq 0x9638",
            "mov r0, r8",
            "ldr r1, str.__all",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x9650",
            "mov r2, 0",
            "mov r1, r5",
            "mov r0, r4",
            "mov r3, r2",
            "bl sym.print_priv_all",
            "b 0x9564",
            "mov r0, r4",
            "mov r1, r5",
            "add r2, sp, 0x14",
            "bl sym.imp.iw_get_priv_info",
            "subs ip, r0, 0",
            "bgt 0x9694",
            "ldr r3, loc.__bss_start__",
            "mov r2, r5",
            "ldr r0, [r3]",
            "ldr r1, str.__8.16s__no_private_ioctls._n_n",
            "bl sym.imp.fprintf",
            "ldr r0, [sp, 0x14]",
            "cmp r0, 0",
            "beq 0x968c",
            "bl sym.imp.free",
            "mvn r5, 0",
            "b 0x96c8",
            "ldr lr, [r6, 8]",
            "mov r3, r5",
            "str lr, [sp]",
            "ldr lr, [sp, 0x14]",
            "add r1, sl, 4",
            "sub r2, r7, 3",
            "mov r0, r4",
            "str lr, [sp, 4]",
            "str ip, [sp, 8]",
            "bl sym.set_private_cmd",
            "mov r5, r0",
            "ldr r0, [sp, 0x14]",
            "bl sym.imp.free",
            "mov r0, r4",
            "bl sym.imp.close",
            "mov r0, r5",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.iw_sockets_open": {
        "function_address": "0x0000884c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8bc]!"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00008864",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8ac]!"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x000088b8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x874]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x000088e8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x854]!"
        ]
    },
    "sym.imp.iw_enum_devices": {
        "function_address": "0x00008810",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8e4]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x0000893c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x81c]!"
        ]
    },
    "sym.imp.iw_print_version_info": {
        "function_address": "0x00008948",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x814]!"
        ]
    },
    "sym.print_priv_info": {
        "function_address": "0x00008a88",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x1c",
            "add r2, sp, 0x14",
            "mov r4, r1",
            "bl sym.imp.iw_get_priv_info",
            "subs r7, r0, 0",
            "bgt 0x8abc",
            "ldr r3, loc.__bss_start__",
            "mov r2, r4",
            "ldr r0, [r3]",
            "ldr r1, str.__8.16s__no_private_ioctls._n_n",
            "bl sym.imp.fprintf",
            "b 0x8b44",
            "mov r1, r4",
            "ldr r0, str.__8.16s__Available_private_ioctls_:_n",
            "bl sym.imp.printf",
            "ldr r6, obj.argtype",
            "mov r4, 0",
            "mov r5, r4",
            "ldr r2, [sp, 0x14]",
            "add r5, r5, 1",
            "add r1, r2, r4",
            "ldrb r3, [r1, 8]",
            "cmp r3, 0",
            "beq 0x8b30",
            "ldrh r3, [r1, 4]",
            "ldrh r0, [r1, 6]",
            "and lr, r3, 0x7000",
            "and ip, r0, 0x7000",
            "ldr lr, [r6, lr, lsr 10]",
            "ldr ip, [r6, ip, lsr 10]",
            "lsl r0, r0, 0x15",
            "lsr r0, r0, 0x15",
            "lsl r3, r3, 0x15",
            "str r0, [sp, 4]",
            "str lr, [sp]",
            "str ip, [sp, 8]",
            "add r1, r1, 8",
            "ldr r2, [r2, r4]",
            "lsr r3, r3, 0x15",
            "ldr r0, str.____________16.16s___.4X__:_set__3d__s__get__3d__s_n",
            "bl sym.imp.printf",
            "cmp r5, r7",
            "add r4, r4, 0x18",
            "blt 0x8ad4",
            "mov r0, 0xa",
            "bl sym.imp.putchar",
            "ldr r0, [sp, 0x14]",
            "cmp r0, 0",
            "beq 0x8b54",
            "bl sym.imp.free",
            "mov r0, 0",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.print_priv_all": {
        "function_address": "0x0000940c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x18",
            "add r2, sp, 0x14",
            "mov r8, r0",
            "mov r6, r1",
            "bl sym.imp.iw_get_priv_info",
            "subs r7, r0, 0",
            "bgt 0x9444",
            "ldr r3, loc.__bss_start__",
            "mov r2, r6",
            "ldr r0, [r3]",
            "ldr r1, str.__8.16s__no_private_ioctls._n_n",
            "bl sym.imp.fprintf",
            "b 0x94bc",
            "ldr r0, str.__8.16s__Available_read_only_private_ioctl_:_n",
            "mov r1, r6",
            "bl sym.imp.printf",
            "mov r4, 0",
            "mov r5, r4",
            "ldr ip, [sp, 0x14]",
            "add r5, r5, 1",
            "add lr, ip, r4",
            "ldrb r3, [lr, 8]",
            "add r4, r4, 0x18",
            "cmp r3, 0",
            "beq 0x94ac",
            "ldrh r1, [lr, 4]",
            "cmp r1, 0",
            "bne 0x94ac",
            "ldrh r3, [lr, 6]",
            "cmp r3, 0",
            "beq 0x94ac",
            "add lr, lr, 8",
            "mov r0, r8",
            "mov r2, r1",
            "mov r3, r6",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "str r7, [sp, 8]",
            "bl sym.set_private_cmd",
            "cmp r5, r7",
            "blt 0x9458",
            "mov r0, 0xa",
            "bl sym.imp.putchar",
            "ldr r0, [sp, 0x14]",
            "cmp r0, 0",
            "beq 0x94cc",
            "bl sym.imp.free",
            "mov r0, 0",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.iw_get_priv_info": {
        "function_address": "0x00008918",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x834]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00008888",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x894]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x0000896c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x7fc]!"
        ]
    },
    "sym.set_private_cmd": {
        "function_address": "0x00008b74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x10c0",
            "sub sp, sp, 0x14",
            "str r0, [sp, 0x18]",
            "subs r6, r2, 0",
            "add r0, sp, 0x1000",
            "mov r5, r1",
            "str r3, [sp, 0x10]",
            "ldr sl, [r0, 0xf8]",
            "ldr r8, [r0, 0xfc]",
            "ldr r4, [r0, 0x100]",
            "ble 0x8bd8",
            "add r2, sp, 0x10c0",
            "ldr r0, [r1]",
            "add r2, r2, 0xc",
            "ldr r1, str.__i_",
            "bl sym.imp.sscanf",
            "cmp r0, 1",
            "bne 0x8bd8",
            "add r1, sp, 0x1000",
            "ldr r1, [r1, 0xcc]",
            "add r5, r5, 4",
            "sub r6, r6, 1",
            "str r1, [sp, 0xc]",
            "b 0x8be0",
            "mov r2, 0",
            "str r2, [sp, 0xc]",
            "mov r7, r8",
            "mov fp, r8",
            "mvn sb, 0",
            "add sb, sb, 1",
            "cmp sb, r4",
            "add r0, fp, 8",
            "mov r1, sl",
            "bge 0x8c14",
            "bl sym.imp.strcmp",
            "add fp, fp, 0x18",
            "cmp r0, 0",
            "bne 0x8bec",
            "b 0x8c28",
            "ldreq r3, loc.__bss_start__",
            "moveq r2, sl",
            "ldreq r0, [r3]",
            "ldreq r1, str.Invalid_command_:__s_n",
            "beq 0x8c9c",
            "mov r3, 0x18",
            "mul r2, r3, sb",
            "ldr r1, [0x000093b8]",
            "ldr r3, [r8, r2]",
            "add r2, r8, r2",
            "cmp r3, r1",
            "movhi r7, 0",
            "mvnls sb, 0",
            "bls 0x8c54",
            "b 0x8ca4",
            "add r7, r7, 0x18",
            "add sb, sb, 1",
            "cmp sb, r4",
            "bge 0x8c7c",
            "ldrb r1, [r7, 8]",
            "cmp r1, 0",
            "bne 0x8c50",
            "ldr r0, [r7, 4]",
            "ldr r1, [r2, 4]",
            "cmp r0, r1",
            "bne 0x8c50",
            "cmp sb, r4",
            "strne r3, [sp, 0xc]",
            "movne r7, 4",
            "bne 0x8ca4",
            "ldr r3, loc.__bss_start__",
            "ldr r1, str.Invalid_private_ioctl_definition_for_:__s_n",
            "ldr r0, [r3]",
            "mov r2, sl",
            "bl sym.imp.fprintf",
            "b 0x9144",
            "mov r3, 0x18",
            "mul sb, r3, sb",
            "add r4, r8, sb",
            "str sb, [sp, 0x14]",
            "ldrh sb, [r4, 4]",
            "ands r3, sb, 0x7000",
            "beq 0x9030",
            "lsl fp, sb, 0x15",
            "lsr fp, fp, 0x15",
            "cmp fp, 0",
            "beq 0x9030",
            "cmp r3, 0x4000",
            "beq 0x8d68",
            "bgt 0x8cf0",
            "cmp r3, 0x1000",
            "beq 0x8d04",
            "cmp r3, 0x2000",
            "bne 0x8ff4",
            "b 0x8ddc",
            "cmp r3, 0x5000",
            "beq 0x8e50",
            "cmp r3, 0x6000",
            "bne 0x8ff4",
            "b 0x8f7c",
            "lsl r6, r6, 0x10",
            "lsr r6, r6, 0x10",
            "cmp r6, fp",
            "add r3, sp, 0x1000",
            "bicgt sb, sb, 0xf800",
            "strh r6, [r3, 0xb4]",
            "strhgt sb, [r3, 0xb4]",
            "add sb, sp, 0x10c0",
            "mov r6, 0",
            "add sb, sb, 0xc",
            "add fp, sp, 0x20",
            "b 0x8d4c",
            "ldr r0, [r5], 4",
            "bl sym.imp.sscanf",
            "add ip, sp, 0x1000",
            "ldr r3, [ip, 0xcc]",
            "strb r3, [fp, r6]",
            "add r6, r6, 1",
            "add r0, sp, 0x1000",
            "ldrh r3, [r0, 0xb4]",
            "ldr r1, [0x000093c0]",
            "cmp r6, r3",
            "mov r2, sb",
            "blt 0x8d34",
            "b 0x8ffc",
            "lsl r6, r6, 0x10",
            "lsr r6, r6, 0x10",
            "cmp r6, fp",
            "add r1, sp, 0x1000",
            "strh r6, [r1, 0xb4]",
            "bicgt sb, sb, 0xf800",
            "mov r6, 0",
            "add fp, sp, 0x10c0",
            "strhgt sb, [r1, 0xb4]",
            "add fp, fp, 0xc",
            "mov sb, r6",
            "add ip, sp, 0x20",
            "b 0x8dbc",
            "ldr r0, [r5, r6]",
            "str ip, [sp, 8]",
            "bl sym.imp.sscanf",
            "add r2, sp, 0x1000",
            "ldr r3, [r2, 0xcc]",
            "ldr ip, [sp, 8]",
            "str r3, [ip, r6]",
            "add r6, r6, 4",
            "add r0, sp, 0x1000",
            "ldrh r3, [r0, 0xb4]",
            "ldr r1, [0x000093c0]",
            "cmp sb, r3",
            "mov r2, fp",
            "add sb, sb, 1",
            "blt 0x8d9c",
            "b 0x8ffc",
            "cmp r6, 0",
            "ble 0x8e34",
            "ldr r5, [r5]",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "add r1, sp, 0x1000",
            "add r3, r0, 1",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "cmp r3, fp",
            "strh r3, [r1, 0xb4]",
            "bicgt sb, sb, 0xf800",
            "add r3, sp, 0x1000",
            "strhgt sb, [r1, 0xb4]",
            "add r0, sp, 0x20",
            "ldrh r2, [r3, 0xb4]",
            "mov r1, r5",
            "bl sym.imp.memcpy",
            "mov r2, 0",
            "add r3, sp, 0xd0",
            "strb r2, [r3, 0xf4f]",
            "b 0x8ffc",
            "mov r2, 0",
            "add r3, sp, 0xd0",
            "mov ip, 1",
            "add r0, sp, 0x1000",
            "strb r2, [r3, -0xb0]",
            "strh ip, [r0, 0xb4]",
            "b 0x8ffc",
            "lsl r6, r6, 0x10",
            "lsr r6, r6, 0x10",
            "cmp r6, fp",
            "add r1, sp, 0x1000",
            "bicgt sb, sb, 0xf800",
            "strh r6, [r1, 0xb4]",
            "mov fp, 0",
            "strhgt sb, [r1, 0xb4]",
            "mov r6, r5",
            "add sb, sp, 0x20",
            "str r4, [sp, 0x1c]",
            "b 0x8f54",
            "ldr r0, [r6], 4",
            "bl sym.imp.sscanf",
            "mov r1, 0x47",
            "cmp r0, 1",
            "ldrne r1, [r5]",
            "ldrne r0, str.Invalid_float___s_..._n",
            "bne 0x8fc0",
            "ldr r4, [r6, -4]",
            "mov r0, r4",
            "bl sym.imp.strchr",
            "mov r2, 0",
            "ldr r3, [0x000093c8]",
            "cmp r0, 0",
            "beq 0x8ecc",
            "add ip, sp, 0x10c0",
            "ldrd r0, r1, [ip]",
            "bl sym.__aeabi_dmul",
            "add r2, sp, 0x10c0",
            "strd r0, r1, [r2]",
            "mov r1, 0x4d",
            "mov r0, r4",
            "bl sym.imp.strchr",
            "mov r2, 0",
            "ldr r3, [0x000093cc]",
            "cmp r0, 0",
            "beq 0x8efc",
            "add ip, sp, 0x10c0",
            "ldrd r0, r1, [ip]",
            "bl sym.__aeabi_dmul",
            "add r2, sp, 0x10c0",
            "strd r0, r1, [r2]",
            "mov r1, 0x6b",
            "mov r0, r4",
            "bl sym.imp.strchr",
            "mov r2, 0",
            "ldr r3, [0x000093d0]",
            "cmp r0, 0",
            "beq 0x8f2c",
            "add ip, sp, 0x10c0",
            "ldrd r0, r1, [ip]",
            "bl sym.__aeabi_dmul",
            "add r2, sp, 0x10c0",
            "strd r0, r1, [r2]",
            "add r2, sp, 0x10c0",
            "ldr r1, [0x000093c0]",
            "add r2, r2, 0xc",
            "mov r0, r4",
            "bl sym.imp.sscanf",
            "add r3, sp, 0x10c0",
            "mov r2, sb",
            "ldrd r0, r1, [r3]",
            "bl sym.imp.iw_float2freq",
            "add sb, sb, 8",
            "add ip, sp, 0x1000",
            "ldrh r3, [ip, 0xb4]",
            "add r2, sp, 0x10c0",
            "cmp fp, r3",
            "ldr r1, [0x000093d4]",
            "mov r5, r6",
            "add fp, fp, 1",
            "blt 0x8e80",
            "ldr r4, [sp, 0x1c]",
            "b 0x8ffc",
            "lsl r6, r6, 0x10",
            "lsr r6, r6, 0x10",
            "cmp r6, fp",
            "add r0, sp, 0x1000",
            "bicgt sb, sb, 0xf800",
            "strh r6, [r0, 0xb4]",
            "strhgt sb, [r0, 0xb4]",
            "mov r6, r5",
            "mov sb, 0",
            "add r5, sp, 0x20",
            "b 0x8fc8",
            "ldr r2, [r6], 4",
            "bl sym.imp.iw_in_addr",
            "cmp r0, 0",
            "bge 0x8fc8",
            "ldr r1, [fp]",
            "ldr r0, str.Invalid_address___s_..._n",
            "bl sym.imp.printf",
            "b 0x9144",
            "add ip, sp, 0x1000",
            "ldrh r2, [ip, 0xb4]",
            "mov r3, r5",
            "cmp sb, r2",
            "mov fp, r6",
            "ldr r0, [sp, 0x18]",
            "ldr r1, [sp, 0x10]",
            "add r5, r5, 0x10",
            "add sb, sb, 1",
            "blt 0x8fa8",
            "b 0x8ffc",
            "ldr r0, str.Not_implemented..._n",
            "b 0x938c",
            "ldrh r2, [r4, 4]",
            "tst r2, 0x800",
            "beq 0x903c",
            "add r0, sp, 0x1000",
            "ldrh r3, [r0, 0xb4]",
            "lsl r2, r2, 0x15",
            "lsr r2, r2, 0x15",
            "cmp r3, r2",
            "beq 0x903c",
            "mov r1, sl",
            "ldr r0, str.The_command__s_needs_exactly__d_argument_s_..._n",
            "bl sym.imp.printf",
            "b 0x9144",
            "mov r1, 0",
            "add r2, sp, 0x1000",
            "strh r1, [r2, 0xb4]",
            "add r0, sp, 0x1080",
            "add r0, r0, 0x20",
            "ldr r1, [sp, 0x10]",
            "mov r2, 0x10",
            "bl sym.imp.strncpy",
            "ldrh r0, [r4, 4]",
            "tst r0, 0x800",
            "beq 0x9098",
            "bl sym.imp.iw_get_priv_size",
            "add r0, r0, r7",
            "cmp r0, 0x10",
            "bgt 0x9098",
            "cmp r7, 0",
            "ldrne r3, [sp, 0xc]",
            "add r0, sp, 0x1080",
            "addne ip, sp, 0x1000",
            "add r0, r0, 0x30",
            "strne r3, [ip, 0xb0]",
            "add r0, r0, r7",
            "rsb r2, r7, 0x10",
            "add r1, sp, 0x20",
            "bl sym.imp.memcpy",
            "b 0x90e4",
            "ldrh r3, [r4, 4]",
            "cmp r3, 0",
            "bne 0x90d0",
            "ldrh r0, [r4, 6]",
            "tst r0, 0x800",
            "beq 0x90d0",
            "bl sym.imp.iw_get_priv_size",
            "cmp r0, 0x10",
            "bgt 0x90d0",
            "cmp r7, 0",
            "ldrne r0, [sp, 0xc]",
            "addne r1, sp, 0x1000",
            "strne r0, [r1, 0xb0]",
            "b 0x90e4",
            "add r3, sp, 0x20",
            "add r2, sp, 0x1000",
            "str r3, [r2, 0xb0]",
            "ldr r3, [sp, 0xc]",
            "strh r3, [r2, 0xb6]",
            "ldr ip, [sp, 0x14]",
            "add r2, sp, 0x1080",
            "ldr r0, [sp, 0x18]",
            "ldr r1, [r8, ip]",
            "add r2, r2, 0x20",
            "bl sym.imp.ioctl",
            "cmp r0, 0",
            "bge 0x914c",
            "ldr r4, loc.__bss_start__",
            "ldr r0, str.Interface_doesnt_accept_private_ioctl..._n",
            "ldr r1, [r4]",
            "bl sym.imp.fputs",
            "bl sym.imp.__errno_location",
            "ldr r1, [sp, 0x14]",
            "ldr r4, [r4]",
            "ldr r5, [r8, r1]",
            "ldr r0, [r0]",
            "bl sym.imp.strerror",
            "mov r2, sl",
            "mov r3, r5",
            "ldr r1, str._s___X_:__s_n",
            "str r0, [sp]",
            "mov r0, r4",
            "bl sym.imp.fprintf",
            "mvn r0, 0",
            "b 0x93a0",
            "ldrh r3, [r4, 6]",
            "tst r3, 0x7000",
            "beq 0x939c",
            "lsl r3, r3, 0x15",
            "lsr r3, r3, 0x15",
            "cmp r3, 0",
            "beq 0x939c",
            "ldr r1, [sp, 0x10]",
            "ldr r0, str.__8.16s___s:",
            "mov r2, sl",
            "bl sym.imp.printf",
            "ldrh r0, [r4, 6]",
            "tst r0, 0x800",
            "beq 0x91b4",
            "bl sym.imp.iw_get_priv_size",
            "cmp r0, 0x10",
            "bgt 0x91b4",
            "add r1, sp, 0x1080",
            "add r0, sp, 0x20",
            "add r1, r1, 0x30",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "ldrh r5, [r4, 6]",
            "lsl r5, r5, 0x15",
            "lsr r5, r5, 0x15",
            "b 0x91bc",
            "add r2, sp, 0x1000",
            "ldrh r5, [r2, 0xb4]",
            "ldrh r3, [r4, 6]",
            "and r3, r3, 0x7000",
            "cmp r3, 0x4000",
            "beq 0x9224",
            "bgt 0x91e4",
            "cmp r3, 0x1000",
            "beq 0x91f8",
            "cmp r3, 0x2000",
            "bne 0x9388",
            "b 0x9268",
            "cmp r3, 0x5000",
            "beq 0x9218",
            "cmp r3, 0x6000",
            "bne 0x9388",
            "b 0x9204",
            "mov r4, 0",
            "add r6, sp, 0x20",
            "b 0x923c",
            "add r7, sp, 0x1000",
            "add r6, sp, 0x20",
            "mov r4, 0",
            "add r7, r7, 0x20",
            "b 0x937c",
            "add r6, sp, 0x20",
            "mov r4, 0",
            "b 0x9328",
            "add r6, sp, 0x20",
            "mov r4, 0",
            "b 0x9254",
            "ldrb r1, [r6, r4]",
            "bl sym.imp.printf",
            "add r4, r4, 1",
            "cmp r4, r5",
            "ldr r0, str._d",
            "blt 0x9230",
            "b 0x9334",
            "ldr r1, [r6], 4",
            "bl sym.imp.printf",
            "cmp r4, r5",
            "ldr r0, str._d",
            "add r4, r4, 1",
            "blt 0x924c",
            "b 0x9334",
            "add r3, sp, 0xd0",
            "add r5, r3, r5",
            "mov r4, 0",
            "add r0, sp, 0x20",
            "strb r4, [r5, -0xb0]",
            "bl sym.imp.puts",
            "mov r0, r4",
            "b 0x93a0",
            "bl sym.imp.iw_freq2float",
            "mov r2, 0",
            "ldr r3, [0x000093c8]",
            "mov r8, r0",
            "mov sb, r1",
            "bl sym.__aeabi_dcmpge",
            "mov r2, 0",
            "ldr r3, [0x000093cc]",
            "mov r1, sb",
            "cmp r0, 0",
            "mov r0, r8",
            "beq 0x92d4",
            "mov r2, 0",
            "ldr r3, [0x000093c8]",
            "bl sym.__aeabi_ddiv",
            "mov r2, r0",
            "mov r3, r1",
            "ldr r0, str._gG",
            "b 0x931c",
            "bl sym.__aeabi_dcmpge",
            "mov r2, 0",
            "ldr r3, [0x000093d0]",
            "mov r1, sb",
            "cmp r0, 0",
            "mov r0, r8",
            "beq 0x930c",
            "mov r2, 0",
            "ldr r3, [0x000093cc]",
            "bl sym.__aeabi_ddiv",
            "mov r2, r0",
            "mov r3, r1",
            "ldr r0, str._gM",
            "b 0x931c",
            "bl sym.__aeabi_ddiv",
            "mov r2, r0",
            "ldr r0, str._gk",
            "mov r3, r1",
            "bl sym.imp.printf",
            "add r4, r4, 1",
            "add r6, r6, 8",
            "cmp r4, r5",
            "mov r0, r6",
            "blt 0x9288",
            "mov r0, 0xa",
            "bl sym.imp.putchar",
            "b 0x939c",
            "cmp r4, 0",
            "add r4, r4, 1",
            "beq 0x9364",
            "mov r0, sl",
            "bl sym.imp.strlen",
            "ldr r2, str.",
            "mov r1, r0",
            "ldr r0, str.____________.s",
            "bl sym.imp.printf",
            "add r0, r6, 2",
            "mov r1, r7",
            "bl sym.imp.iw_ether_ntop",
            "mov r0, r7",
            "bl sym.imp.puts",
            "add r6, r6, 0x10",
            "cmp r4, r5",
            "blt 0x9340",
            "b 0x939c",
            "ldr r0, str.Not_yet_implemented..._n",
            "ldr r3, loc.__bss_start__",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "b 0x9144",
            "mov r0, 0",
            "add sp, sp, 0xd4",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008960",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x804]!"
        ]
    },
    "sym.__do_global_dtors_aux": {
        "function_address": "0x000089f0",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, obj.completed.5529",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x00008a2c]",
            "cmp r3, 0",
            "beq 0x8a18",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, obj.completed.5529",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00008894",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x88c]!"
        ]
    },
    "sym.frame_dummy": {
        "function_address": "0x00008a34",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00008a74]",
            "cmp r3, 0",
            "beq 0x8a50",
            "ldr r0, obj.__EH_FRAME_BEGIN__",
            "ldr r1, obj.object.5541",
            "bl loc.imp.__register_frame_info",
            "ldr r0, obj.__JCR_LIST__",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00008a84]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00008954",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x80c]!"
        ]
    },
    "sym.imp.printf": {
        "function_address": "0x00008828",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8d4]!"
        ]
    },
    "sym.imp.putchar": {
        "function_address": "0x00008804",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8ec]!"
        ]
    },
    "sym.imp.sscanf": {
        "function_address": "0x000088d0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x864]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00008924",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x82c]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008858",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8b4]!"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00008930",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x824]!"
        ]
    },
    "sym.__muldf3": {
        "function_address": "0x00009710",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.000098f0",
            "add r4, r4, r5",
            "eor r6, r1, r3",
            "bic r1, r1, ip, lsl 21",
            "bic r3, r3, ip, lsl 21",
            "orrs r5, r0, r1, lsl 12",
            "orrsne r5, r2, r3, lsl 12",
            "orr r1, r1, 0x100000",
            "orr r3, r3, 0x100000",
            "beq 0x97c8",
            "umull ip, lr, r0, r2",
            "mov r5, 0",
            "umlal lr, r5, r1, r2",
            "and r2, r6, 0x80000000",
            "umlal lr, r5, r0, r3",
            "mov r6, 0",
            "umlal r5, r6, r1, r3",
            "teq ip, 0",
            "orrne lr, lr, 1",
            "sub r4, r4, 0xff",
            "cmp r6, 0x200",
            "sbc r4, r4, 0x300",
            "bhs 0x9794",
            "lsls lr, lr, 1",
            "adcs r5, r5, r5",
            "adc r6, r6, r6",
            "orr r1, r2, r6, lsl 11",
            "orr r1, r1, r5, lsr 21",
            "lsl r0, r5, 0xb",
            "orr r0, r0, lr, lsr 21",
            "lsl lr, lr, 0xb",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0x97f4",
            "cmp lr, 0x80000000",
            "lsrseq lr, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and r6, r6, 0x80000000",
            "orr r1, r6, r1",
            "orr r0, r0, r2",
            "eor r1, r1, r3",
            "subs r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1"
        ]
    },
    "sym.imp.iw_float2freq": {
        "function_address": "0x000088ac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x87c]!"
        ]
    },
    "sym.imp.iw_in_addr": {
        "function_address": "0x00008840",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8c4]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x000088c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x86c]!"
        ]
    },
    "sym.imp.iw_get_priv_size": {
        "function_address": "0x000088f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x84c]!"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x0000881c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8dc]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x0000890c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x83c]!"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x00008834",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8cc]!"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008870",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x8a4]!"
        ]
    },
    "sym.imp.iw_freq2float": {
        "function_address": "0x00008900",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x844]!"
        ]
    },
    "sym.__aeabi_dcmpge": {
        "function_address": "0x00009c84",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl sym.__aeabi_cdrcmple",
            "movls r0, 1",
            "movhi r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.__divdf3": {
        "function_address": "0x0000997c",
        "instructions": [
            "bgt 0x995c",
            "cmn r4, 0x36",
            "movle r0, 0",
            "andle r1, r1, 0x80000000",
            "pople {r4, r5, r6, pc}",
            "rsb r4, r4, 0",
            "subs r4, r4, 0x20",
            "bge 0x9878",
            "adds r4, r4, 0xc",
            "bgt 0x984c",
            "add r4, r4, 0x14",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r5",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r5",
            "and r2, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r2, r1, lsr r4",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r4, r4, 0xc",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r4",
            "lsr r0, r0, r5",
            "orr r0, r0, r1, lsl r4",
            "and r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r1, 0",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r5, r4, 0x20",
            "orr lr, lr, r0, lsl r5",
            "lsr r3, r0, r4",
            "orr r3, r3, r1, lsl r5",
            "lsr r0, r1, r4",
            "and r1, r1, 0x80000000",
            "bic r0, r0, r1, lsr r4",
            "add r0, r0, r3, lsr 31",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "and r1, r1, 0x80000000",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.00009b10",
            "sub r4, r4, r5",
            "eor lr, r1, r3",
            "orrs r5, r2, r3, lsl 12",
            "lsl r1, r1, 0xc",
            "beq 0x9ae0",
            "lsl r3, r3, 0xc",
            "mov r5, 0x10000000",
            "orr r3, r5, r3, lsr 4",
            "orr r3, r3, r2, lsr 24",
            "lsl r2, r2, 8",
            "orr r5, r5, r1, lsr 4",
            "orr r5, r5, r0, lsr 24",
            "lsl r6, r0, 8",
            "and r1, lr, 0x80000000",
            "cmp r5, r3",
            "cmpeq r6, r2",
            "adc r4, r4, 0xfd",
            "add r4, r4, 0x300",
            "bhs 0x99f0",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs r6, r6, r2",
            "sbc r5, r5, r3",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "mov r0, 0x100000",
            "mov ip, 0x80000",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 1",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 2",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 3",
            "orrs lr, r5, r6",
            "beq 0x9ab0",
            "lsl r5, r5, 4",
            "orr r5, r5, r6, lsr 28",
            "lsl r6, r6, 4",
            "lsl r3, r3, 3",
            "orr r3, r3, r2, lsr 29",
            "lsl r2, r2, 3",
            "lsrs ip, ip, 4",
            "bne 0x9a08",
            "tst r1, 0x100000",
            "bne 0x9abc",
            "orr r1, r1, r0",
            "mov r0, 0",
            "mov ip, 0x80000000",
            "b 0x9a08",
            "tst r1, 0x100000",
            "orreq r1, r1, r0",
            "moveq r0, 0",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0x97f4",
            "subs ip, r5, r3",
            "subseq ip, r6, r2",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and lr, lr, 0x80000000",
            "orr r1, lr, r1, lsr 12",
            "adds r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "b 0x97f4"
        ]
    },
    "sym.imp.iw_ether_ntop": {
        "function_address": "0x000088a0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x884]!"
        ]
    },
    "sym.__aeabi_dcmple": {
        "function_address": "0x00009c70",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl sym.__aeabi_cdcmple",
            "movls r0, 1",
            "movhi r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.__aeabi_cdcmpeq": {
        "function_address": "0x00009c34",
        "instructions": [
            "push {r0, lr}",
            "bl sym.__cmpdf2",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, pc}"
        ]
    },
    "sym.__aeabi_cdcmple": {
        "function_address": "0x00009c34",
        "instructions": [
            "push {r0, lr}",
            "bl sym.__cmpdf2",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, pc}"
        ]
    },
    "sym.__nedf2": {
        "function_address": "0x00009b90",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "lsl ip, r3, 1",
            "mvnsne ip, ip, asr 21",
            "beq 0x9be8",
            "add sp, sp, 4",
            "orrs ip, r0, r1, lsl 1",
            "orrseq ip, r2, r3, lsl 1",
            "teqne r1, r3",
            "teqeq r0, r2",
            "moveq r0, 0",
            "bxeq lr",
            "cmn r0, 0",
            "teq r1, r3",
            "cmppl r1, r3",
            "cmpeq r0, r2",
            "asrhs r0, r3, 0x1f",
            "mvnlo r0, r3, asr 31",
            "orr r0, r0, 1",
            "bx lr",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "bne 0x9bfc",
            "orrs ip, r0, r1, lsl 12",
            "bne 0x9c10",
            "lsl ip, r3, 1",
            "mvns ip, ip, asr 21",
            "bne 0x9bac",
            "orrs ip, r2, r3, lsl 12",
            "beq 0x9bac",
            "pop {r0}",
            "bx lr"
        ]
    },
    "sym.__aeabi_dcmplt": {
        "function_address": "0x00009c5c",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl sym.__aeabi_cdcmple",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.__aeabi_ddiv": {
        "function_address": "0x0000997c",
        "instructions": [
            "bgt 0x995c",
            "cmn r4, 0x36",
            "movle r0, 0",
            "andle r1, r1, 0x80000000",
            "pople {r4, r5, r6, pc}",
            "rsb r4, r4, 0",
            "subs r4, r4, 0x20",
            "bge 0x9878",
            "adds r4, r4, 0xc",
            "bgt 0x984c",
            "add r4, r4, 0x14",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r5",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r5",
            "and r2, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r2, r1, lsr r4",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r4, r4, 0xc",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r4",
            "lsr r0, r0, r5",
            "orr r0, r0, r1, lsl r4",
            "and r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r1, 0",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r5, r4, 0x20",
            "orr lr, lr, r0, lsl r5",
            "lsr r3, r0, r4",
            "orr r3, r3, r1, lsl r5",
            "lsr r0, r1, r4",
            "and r1, r1, 0x80000000",
            "bic r0, r0, r1, lsr r4",
            "add r0, r0, r3, lsr 31",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "and r1, r1, 0x80000000",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.00009b10",
            "sub r4, r4, r5",
            "eor lr, r1, r3",
            "orrs r5, r2, r3, lsl 12",
            "lsl r1, r1, 0xc",
            "beq 0x9ae0",
            "lsl r3, r3, 0xc",
            "mov r5, 0x10000000",
            "orr r3, r5, r3, lsr 4",
            "orr r3, r3, r2, lsr 24",
            "lsl r2, r2, 8",
            "orr r5, r5, r1, lsr 4",
            "orr r5, r5, r0, lsr 24",
            "lsl r6, r0, 8",
            "and r1, lr, 0x80000000",
            "cmp r5, r3",
            "cmpeq r6, r2",
            "adc r4, r4, 0xfd",
            "add r4, r4, 0x300",
            "bhs 0x99f0",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs r6, r6, r2",
            "sbc r5, r5, r3",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "mov r0, 0x100000",
            "mov ip, 0x80000",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 1",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 2",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 3",
            "orrs lr, r5, r6",
            "beq 0x9ab0",
            "lsl r5, r5, 4",
            "orr r5, r5, r6, lsr 28",
            "lsl r6, r6, 4",
            "lsl r3, r3, 3",
            "orr r3, r3, r2, lsr 29",
            "lsl r2, r2, 3",
            "lsrs ip, ip, 4",
            "bne 0x9a08",
            "tst r1, 0x100000",
            "bne 0x9abc",
            "orr r1, r1, r0",
            "mov r0, 0",
            "mov ip, 0x80000000",
            "b 0x9a08",
            "tst r1, 0x100000",
            "orreq r1, r1, r0",
            "moveq r0, 0",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0x97f4",
            "subs ip, r5, r3",
            "subseq ip, r6, r2",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and lr, lr, 0x80000000",
            "orr r1, lr, r1, lsr 12",
            "adds r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "b 0x97f4"
        ]
    },
    "fcn.00009b10": {
        "function_address": "0x00009b10",
        "instructions": [
            "and r5, ip, r3, lsr 20",
            "teq r4, ip",
            "teqeq r5, ip",
            "beq 0x9970",
            "teq r4, ip",
            "bne 0x9b44",
            "orrs r4, r0, r1, lsl 12",
            "bne 0x9970",
            "teq r5, ip",
            "bne 0x9958",
            "mov r0, r2",
            "mov r1, r3",
            "b 0x9970",
            "teq r5, ip",
            "bne 0x9b60",
            "orrs r5, r2, r3, lsl 12",
            "beq 0x990c",
            "mov r0, r2",
            "mov r1, r3",
            "b 0x9970",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0x98a4",
            "orrs r4, r0, r1, lsl 1",
            "bne 0x9958",
            "orrs r5, r2, r3, lsl 1",
            "bne 0x990c",
            "b 0x9970"
        ]
    },
    "sym.__aeabi_dmul": {
        "function_address": "0x00009710",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.000098f0",
            "add r4, r4, r5",
            "eor r6, r1, r3",
            "bic r1, r1, ip, lsl 21",
            "bic r3, r3, ip, lsl 21",
            "orrs r5, r0, r1, lsl 12",
            "orrsne r5, r2, r3, lsl 12",
            "orr r1, r1, 0x100000",
            "orr r3, r3, 0x100000",
            "beq 0x97c8",
            "umull ip, lr, r0, r2",
            "mov r5, 0",
            "umlal lr, r5, r1, r2",
            "and r2, r6, 0x80000000",
            "umlal lr, r5, r0, r3",
            "mov r6, 0",
            "umlal r5, r6, r1, r3",
            "teq ip, 0",
            "orrne lr, lr, 1",
            "sub r4, r4, 0xff",
            "cmp r6, 0x200",
            "sbc r4, r4, 0x300",
            "bhs 0x9794",
            "lsls lr, lr, 1",
            "adcs r5, r5, r5",
            "adc r6, r6, r6",
            "orr r1, r2, r6, lsl 11",
            "orr r1, r1, r5, lsr 21",
            "lsl r0, r5, 0xb",
            "orr r0, r0, lr, lsr 21",
            "lsl lr, lr, 0xb",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0x97f4",
            "cmp lr, 0x80000000",
            "lsrseq lr, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and r6, r6, 0x80000000",
            "orr r1, r6, r1",
            "orr r0, r0, r2",
            "eor r1, r1, r3",
            "subs r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1"
        ]
    },
    "fcn.000098f0": {
        "function_address": "0x000098f0",
        "instructions": [
            "teq r4, 0",
            "bne 0x98d0",
            "and r6, r1, 0x80000000",
            "lsls r0, r0, 1",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "subeq r4, r4, 1",
            "beq 0x98b0",
            "orr r1, r1, r6",
            "teq r5, 0",
            "bxne lr",
            "and r6, r3, 0x80000000",
            "lsls r2, r2, 1",
            "adc r3, r3, r3",
            "tst r3, 0x100000",
            "subeq r5, r5, 1",
            "beq 0x98d4",
            "orr r3, r3, r6",
            "bx lr",
            "teq r4, ip",
            "and r5, ip, r3, lsr 20",
            "teqne r5, ip",
            "beq 0x991c",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0x98a4",
            "eor r1, r1, r3",
            "and r1, r1, 0x80000000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "orrs r6, r0, r1, lsl 1",
            "moveq r0, r2",
            "moveq r1, r3",
            "orrsne r6, r2, r3, lsl 1",
            "beq 0x9970",
            "teq r4, ip",
            "bne 0x9940",
            "orrs r6, r0, r1, lsl 12",
            "bne 0x9970",
            "teq r5, ip",
            "bne 0x9958",
            "orrs r6, r2, r3, lsl 12",
            "movne r0, r2",
            "movne r1, r3",
            "bne 0x9970",
            "eor r1, r1, r3",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf80000",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.__aeabi_dcmpgt": {
        "function_address": "0x00009c98",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl sym.__aeabi_cdrcmple",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.__aeabi_cdrcmple": {
        "function_address": "0x00009c18",
        "instructions": [
            "mov ip, r0",
            "mov r0, r2",
            "mov r2, ip",
            "mov ip, r1",
            "mov r1, r3",
            "mov r3, ip",
            "b sym.__aeabi_cdcmple"
        ]
    },
    "sym.__aeabi_dcmpeq": {
        "function_address": "0x00009c48",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl sym.__aeabi_cdcmple",
            "moveq r0, 1",
            "movne r0, 0",
            "ldr pc, [sp], 8"
        ]
    }
}