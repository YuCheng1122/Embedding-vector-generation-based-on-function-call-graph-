{
    "sym.samba_init_module": {
        "function_address": "0x00009af0",
        "instructions": [
            "push rbx",
            "lea rdx, [0x0020e040]",
            "lea rsi, str.fruit",
            "mov edi, 0x22",
            "call sym.imp.smb_register_vfs",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x9b26",
            "lea rdi, str.fruit",
            "call sym.imp.debug_add_class",
            "cmp eax, 0xffffffff",
            "je 0x9b30",
            "mov dword [0x0020e008], eax",
            "mov eax, ebx",
            "pop rbx",
            "ret",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "mov dword [0x0020e008], 0xc",
            "mov rax, qword [rax]",
            "mov eax, dword [rax + 0x30]",
            "test eax, eax",
            "js 0x9b26",
            "lea rcx, str.samba_init_module",
            "lea rdx, str..._source3_modules_vfs_fruit.c:3904",
            "xor edi, edi",
            "mov esi, 0xc",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x9b26",
            "lea rsi, str.vfs_fruit_init",
            "lea rdi, str._s:_Couldnt_register_custom_debugging_class__n",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x9b26"
        ]
    },
    "sym.imp.smb_register_vfs": {
        "function_address": "0x00002e50",
        "instructions": [
            "jmp qword [reloc.smb_register_vfs]"
        ]
    },
    "sym.imp.debug_add_class": {
        "function_address": "0x00002fa0",
        "instructions": [
            "jmp qword [reloc.debug_add_class]"
        ]
    },
    "sym.imp.dbghdrclass": {
        "function_address": "0x00002fb0",
        "instructions": [
            "jmp qword [reloc.dbghdrclass]"
        ]
    },
    "sym.imp.dbgtext": {
        "function_address": "0x000033a0",
        "instructions": [
            "jmp qword [reloc.dbgtext]"
        ]
    },
    "sym._init": {
        "function_address": "0x00002d40",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x2d55",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00002e30",
        "instructions": [
            "jmp qword [0x0020dc18]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x000035d0",
        "instructions": [
            "cmp byte [loc._edata], 0",
            "jne 0x3600",
            "cmp qword [reloc.__cxa_finalize], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x35f3",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc._edata], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00003030",
        "instructions": [
            "jmp qword [0x0020dd18]"
        ]
    },
    "rip": {
        "function_address": "0x00003540",
        "instructions": [
            "lea rdi, [loc._edata]",
            "lea rax, [0x0020e3a7]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x3570",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x3570",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.000077a0": {
        "function_address": "0x000077a0",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdx",
            "mov rbx, rdi",
            "sub rsp, 0x18",
            "lea rcx, [rsp + 8]",
            "mov rdx, rsp",
            "call sym.imp.parent_dirname",
            "test al, al",
            "mov ecx, 0xffffffff",
            "je 0x77ea",
            "mov rcx, qword [rsp + 8]",
            "mov rdx, qword [rsp]",
            "lea rsi, str._s_.__s",
            "xor eax, eax",
            "mov rdi, rbx",
            "call sym.imp.talloc_asprintf",
            "xor ecx, ecx",
            "test rax, rax",
            "mov qword [rbp], rax",
            "sete cl",
            "neg ecx",
            "add rsp, 0x18",
            "mov eax, ecx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.parent_dirname": {
        "function_address": "0x00003400",
        "instructions": [
            "jmp qword [reloc.parent_dirname]"
        ]
    },
    "sym.imp.talloc_asprintf": {
        "function_address": "0x000030e0",
        "instructions": [
            "jmp qword [reloc.talloc_asprintf]"
        ]
    },
    "fcn.00003640": {
        "function_address": "0x00003640",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r13d, esi",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov rbx, rdx",
            "sub rsp, 0x28",
            "mov rdi, qword [rdi + 0x160]",
            "call sym.imp.talloc_get_size",
            "mov r12, rax",
            "lea eax, [r13 + r13*2]",
            "lea eax, [rax*4 + 0x1a]",
            "cdqe",
            "cmp r12, rax",
            "jae 0x36b0",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov r12d, dword [rax + rdx*4]",
            "test r12d, r12d",
            "jg 0x3780",
            "xor r13d, r13d",
            "add rsp, 0x28",
            "mov eax, r13d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rcx, qword [rbp + 0x160]",
            "movzx r10d, byte [rcx + 1]",
            "movzx eax, byte [rcx]",
            "movzx edx, byte [rcx + 2]",
            "shl r10d, 8",
            "or r10d, eax",
            "movzx eax, byte [rcx + 3]",
            "shl eax, 8",
            "or eax, edx",
            "shl eax, 0x10",
            "or r10d, eax",
            "bswap r10d",
            "mov dword [rbp + 0x14], r10d",
            "movzx r9d, byte [rcx + 7]",
            "movzx edx, byte [rcx + 6]",
            "movzx r8d, byte [rcx + 5]",
            "movzx eax, byte [rcx + 4]",
            "shl r9d, 8",
            "or r9d, edx",
            "shl r8d, 8",
            "or r8d, eax",
            "shl r9d, 0x10",
            "or r8d, r9d",
            "cmp r10d, 0x51607",
            "bswap r8d",
            "setne dl",
            "cmp r8d, 0x20000",
            "mov dword [rbp + 0x18], r8d",
            "setne al",
            "or dl, al",
            "je 0x37c0",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov ebp, dword [rax + rdx*4]",
            "test ebp, ebp",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:600",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x369a",
            "lea rdi, str.wrong_magic_or_version_n",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:593",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x369a",
            "lea rdi, str.bad_size_n",
            "xor eax, eax",
            "xor r13d, r13d",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "movzx r14d, byte [rcx + 0x18]",
            "movzx eax, byte [rcx + 0x19]",
            "shl r14d, 8",
            "or r14d, eax",
            "cmp r14d, r13d",
            "je 0x3830",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov ebx, dword [rax + rdx*4]",
            "test ebx, ebx",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:606",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x369a",
            "lea rdi, str.invalid_number_of_entries:__d_n",
            "mov esi, r14d",
            "xor eax, eax",
            "xor r13d, r13d",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "test r14d, r14d",
            "jle 0x3a8b",
            "sub r14d, 1",
            "lea r10, [r14 + r14*2]",
            "xor r14d, r14d",
            "shl r10, 2",
            "jmp 0x397b",
            "cmp eax, 0x8053567e",
            "je 0x3a00",
            "cmp eax, 0x8053594e",
            "mov esi, 0x11",
            "mov r9d, 0x12",
            "jne 0x39d6",
            "nop dword [rax]",
            "movzx r8d, byte [rcx + r14 + 0x1f]",
            "movzx eax, byte [rcx + r14 + 0x1e]",
            "movzx edx, byte [rcx + r14 + 0x20]",
            "movzx r15d, byte [rcx + r14 + 0x23]",
            "shl r8d, 8",
            "or r8d, eax",
            "movzx eax, byte [rcx + r14 + 0x21]",
            "shl r15d, 8",
            "shl eax, 8",
            "or eax, edx",
            "movzx edx, byte [rcx + r14 + 0x24]",
            "shl eax, 0x10",
            "or r8d, eax",
            "movzx eax, byte [rcx + r14 + 0x22]",
            "bswap r8d",
            "or r15d, eax",
            "movzx eax, byte [rcx + r14 + 0x25]",
            "shl eax, 8",
            "or eax, edx",
            "shl eax, 0x10",
            "or r15d, eax",
            "cmp esi, 0x13",
            "bswap r15d",
            "ja 0x3b80",
            "cmp r9d, 2",
            "mov r11d, r8d",
            "setne al",
            "cmp r12, r11",
            "setb r13b",
            "and r13b, al",
            "jne 0x3b08",
            "cmp r9d, 9",
            "je 0x390c",
            "test al, al",
            "je 0x390c",
            "lea edx, [r15 + r8]",
            "cmp r12, rdx",
            "jb 0x3c4d",
            "cmp r11, rbx",
            "ja 0x3a96",
            "mov edx, r15d",
            "add edx, r8d",
            "jb 0x3be0",
            "mov edx, edx",
            "cmp rbx, rdx",
            "jae 0x3955",
            "test al, al",
            "jne 0x3c88",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov r15d, ebx",
            "sub r15d, r8d",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov eax, dword [rax + rdx*4]",
            "test eax, eax",
            "jg 0x3a10",
            "shl r9, 4",
            "mov eax, r15d",
            "add r9, rbp",
            "cmp r14, r10",
            "mov qword [r9 + 0x20], r11",
            "mov qword [r9 + 0x28], rax",
            "je 0x3a8b",
            "mov rcx, qword [rbp + 0x160]",
            "add r14, 0xc",
            "movzx eax, byte [rcx + r14 + 0x1b]",
            "movzx edx, byte [rcx + r14 + 0x1a]",
            "movzx esi, byte [rcx + r14 + 0x1c]",
            "shl eax, 8",
            "or eax, edx",
            "movzx edx, byte [rcx + r14 + 0x1d]",
            "shl edx, 8",
            "or edx, esi",
            "shl edx, 0x10",
            "or eax, edx",
            "bswap eax",
            "cmp eax, 0xf",
            "lea esi, [rax - 1]",
            "mov r9d, eax",
            "jbe 0x3878",
            "cmp eax, 0x80494e4f",
            "je 0x39e8",
            "ja 0x3850",
            "cmp eax, 0x80444556",
            "mov esi, 0xf",
            "mov r9d, 0x10",
            "je 0x3878",
            "mov esi, 0xffffffff",
            "xor r9d, r9d",
            "jmp 0x3878",
            "mov esi, 0x10",
            "mov r9d, 0x11",
            "jmp 0x3878",
            "mov esi, 0x12",
            "mov r9d, 0x13",
            "jmp 0x3878",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:689",
            "mov edi, 1",
            "mov qword [rsp + 0x18], r10",
            "mov dword [rsp + 0x10], r9d",
            "mov qword [rsp + 8], r11",
            "mov dword [rsp], r8d",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "mov r8d, dword [rsp]",
            "mov r11, qword [rsp + 8]",
            "mov r9d, dword [rsp + 0x10]",
            "mov r10, qword [rsp + 0x18]",
            "je 0x3955",
            "lea rdi, str.Limiting_ADEID_RFORK:_off:__u__len:__u_n",
            "mov edx, r15d",
            "mov esi, r8d",
            "xor eax, eax",
            "mov qword [rsp + 0x10], r10",
            "mov dword [rsp + 8], r9d",
            "mov qword [rsp], r11",
            "call sym.imp.dbgtext",
            "mov r10, qword [rsp + 0x10]",
            "mov r9d, dword [rsp + 8]",
            "mov r11, qword [rsp]",
            "jmp 0x3955",
            "mov r13d, 1",
            "jmp 0x369d",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov ecx, dword [rax + rdx*4]",
            "test ecx, ecx",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:655",
            "mov dword [rsp + 8], r9d",
            "mov dword [rsp], r8d",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "mov r8d, dword [rsp]",
            "mov r9d, dword [rsp + 8]",
            "je 0x369a",
            "lea rdi, str.bogus_eid__d:_off:__u__len:__u_n",
            "mov ecx, r15d",
            "mov edx, r8d",
            "mov esi, r9d",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov r10d, dword [rax + rdx*4]",
            "test r10d, r10d",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:629",
            "mov edi, 1",
            "mov dword [rsp + 8], r9d",
            "mov dword [rsp], r8d",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "mov r8d, dword [rsp]",
            "mov r9d, dword [rsp + 8]",
            "je 0x369a",
            "lea rdi, str.bogus_eid__d:_off:__u__len:__u_n",
            "mov ecx, r15d",
            "mov edx, r8d",
            "mov esi, r9d",
            "xor eax, eax",
            "xor r13d, r13d",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov r11d, dword [rax + rdx*4]",
            "test r11d, r11d",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:618",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x369a",
            "lea rdi, str.bogus_eid__d_n",
            "xor esi, esi",
            "xor eax, eax",
            "xor r13d, r13d",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov edx, dword [rax + rdx*4]",
            "test edx, edx",
            "jle 0x369a",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:666",
            "mov edi, 1",
            "mov dword [rsp + 8], r9d",
            "mov dword [rsp], r8d",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "mov r8d, dword [rsp]",
            "mov r9d, dword [rsp + 8]",
            "je 0x369a",
            "lea rdi, str.offset_wrap_in_eid__d:_off:__u__len:__u_n",
            "mov ecx, r15d",
            "mov edx, r8d",
            "mov esi, r9d",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x369d",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov edi, dword [rax + rdx*4]",
            "test edi, edi",
            "jle 0x369a",
            "mov dword [rsp + 8], r9d",
            "mov dword [rsp], r8d",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:646",
            "jmp 0x3acc",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 0",
            "jle 0x369a",
            "mov dword [rsp + 8], r9d",
            "mov dword [rsp], r8d",
            "lea rcx, str.ad_unpack",
            "lea rdx, str..._source3_modules_vfs_fruit.c:679",
            "jmp 0x3acc"
        ]
    },
    "sym.imp.talloc_get_size": {
        "function_address": "0x00002da0",
        "instructions": [
            "jmp qword [reloc.talloc_get_size]"
        ]
    },
    "fcn.00003e70": {
        "function_address": "0x00003e70",
        "instructions": [
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi + 0x160]",
            "call sym.imp.talloc_get_size",
            "cmp eax, 4",
            "jbe 0x40e8",
            "movzx ecx, byte [rbx + 0x17]",
            "mov rdx, qword [rbx + 0x160]",
            "mov byte [rdx], cl",
            "mov edx, dword [rbx + 0x14]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "movzx edx, dh",
            "mov byte [rcx + 1], dl",
            "mov edx, dword [rbx + 0x14]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "shr edx, 0x10",
            "mov byte [rcx + 2], dl",
            "mov edx, dword [rbx + 0x14]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "shr edx, 0x18",
            "cmp eax, 8",
            "mov byte [rcx + 3], dl",
            "jbe 0x40e8",
            "movzx ecx, byte [rbx + 0x1b]",
            "mov rdx, qword [rbx + 0x160]",
            "mov byte [rdx + 4], cl",
            "mov edx, dword [rbx + 0x18]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "movzx edx, dh",
            "mov byte [rcx + 5], dl",
            "mov edx, dword [rbx + 0x18]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "shr edx, 0x10",
            "mov byte [rcx + 6], dl",
            "mov edx, dword [rbx + 0x18]",
            "mov rcx, qword [rbx + 0x160]",
            "bswap edx",
            "shr edx, 0x18",
            "cmp eax, 0x18",
            "mov byte [rcx + 7], dl",
            "jbe 0x40e8",
            "cmp dword [rbx + 0x10], 1",
            "mov edi, eax",
            "je 0x40f0",
            "cmp eax, 0x1a",
            "jbe 0x40e8",
            "lea rdx, [rbx + 0x20]",
            "lea r8, [0x0000a200]",
            "lea r10, [rbx + 0x160]",
            "mov eax, 0x1a",
            "xor r9d, r9d",
            "nop dword [rax]",
            "cmp qword [rdx], 0",
            "je 0x40b0",
            "lea r11d, [rax + 4]",
            "cmp r11d, eax",
            "jb 0x40e8",
            "cmp edi, r11d",
            "jbe 0x40e8",
            "mov ecx, dword [r8]",
            "mov rbp, qword [rbx + 0x160]",
            "mov esi, eax",
            "mov r12d, ecx",
            "bswap ecx",
            "shr r12d, 0x18",
            "mov byte [rbp + rsi], r12b",
            "mov r12, qword [rbx + 0x160]",
            "lea esi, [rax + 1]",
            "movzx ebp, ch",
            "mov byte [r12 + rsi], bpl",
            "mov r12, qword [rbx + 0x160]",
            "lea esi, [rax + 2]",
            "mov ebp, ecx",
            "shr ecx, 0x18",
            "shr ebp, 0x10",
            "mov byte [r12 + rsi], bpl",
            "mov rbp, qword [rbx + 0x160]",
            "lea esi, [rax + 3]",
            "mov byte [rbp + rsi], cl",
            "lea esi, [rax + 8]",
            "cmp r11d, esi",
            "ja 0x40e8",
            "cmp edi, esi",
            "jbe 0x40e8",
            "mov ecx, r11d",
            "mov r11, qword [rdx]",
            "mov rbp, qword [rbx + 0x160]",
            "shr r11, 0x18",
            "mov byte [rbp + rcx], r11b",
            "mov rcx, qword [rdx]",
            "lea r11d, [rax + 5]",
            "mov rbp, qword [rbx + 0x160]",
            "bswap ecx",
            "movzx ecx, ch",
            "mov byte [rbp + r11], cl",
            "mov rcx, qword [rdx]",
            "lea r11d, [rax + 6]",
            "mov rbp, qword [rbx + 0x160]",
            "bswap ecx",
            "shr ecx, 0x10",
            "mov byte [rbp + r11], cl",
            "mov rcx, qword [rdx]",
            "lea r11d, [rax + 7]",
            "mov rbp, qword [rbx + 0x160]",
            "bswap ecx",
            "shr ecx, 0x18",
            "mov byte [rbp + r11], cl",
            "lea r11d, [rax + 0xc]",
            "cmp esi, r11d",
            "ja 0x40e8",
            "cmp edi, r11d",
            "jbe 0x40e8",
            "mov ecx, esi",
            "mov rsi, qword [rdx + 8]",
            "mov rbp, qword [rbx + 0x160]",
            "add r9d, 1",
            "shr rsi, 0x18",
            "mov byte [rbp + rcx], sil",
            "mov rcx, qword [rdx + 8]",
            "lea esi, [rax + 9]",
            "mov rbp, qword [rbx + 0x160]",
            "bswap ecx",
            "movzx ecx, ch",
            "mov byte [rbp + rsi], cl",
            "mov rcx, qword [rdx + 8]",
            "lea esi, [rax + 0xa]",
            "mov rbp, qword [rbx + 0x160]",
            "add eax, 0xb",
            "bswap ecx",
            "shr ecx, 0x10",
            "mov byte [rbp + rsi], cl",
            "mov rcx, qword [rdx + 8]",
            "mov rsi, qword [rbx + 0x160]",
            "bswap ecx",
            "shr ecx, 0x18",
            "mov byte [rsi + rax], cl",
            "mov eax, r11d",
            "add rdx, 0x10",
            "add r8, 4",
            "cmp rdx, r10",
            "jne 0x3f58",
            "mov rax, qword [rbx + 0x160]",
            "mov edx, r9d",
            "shr dx, 8",
            "mov byte [rax + 0x18], dl",
            "mov rax, qword [rbx + 0x160]",
            "mov byte [rax + 0x19], r9b",
            "mov eax, 1",
            "jmp 0x40ea",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rdx, qword [rbx + 0x160]",
            "movabs rsi, 0x6b6c61746174654e",
            "mov qword [rdx + 8], rsi",
            "movabs rsi, 0x2020202020202020",
            "mov qword [rdx + 0x10], rsi",
            "jmp 0x3f31"
        ]
    },
    "fcn.00007a10": {
        "function_address": "0x00007a10",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdi",
            "push r13",
            "push r12",
            "xor edi, edi",
            "push rbp",
            "push rbx",
            "mov r12, rsi",
            "mov r13d, edx",
            "mov r15, rcx",
            "sub rsp, 8",
            "call sym.imp.time",
            "test r12, r12",
            "je 0x7b40",
            "mov rbp, rax",
            "mov rax, qword [r12 + 0x28]",
            "test rax, rax",
            "je 0x7b40",
            "test r13d, r13d",
            "je 0x7b30",
            "cmp r13d, 1",
            "jne 0x7b5b",
            "cmp dword [rax], 1",
            "lea rbx, [0x0000b600]",
            "lea rax, [0x0000b630]",
            "cmovne rbx, rax",
            "mov rsi, r12",
            "mov rcx, r15",
            "mov edx, r13d",
            "mov rdi, r14",
            "call fcn.00003cd0",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x7ab1",
            "jmp 0x7b5b",
            "mov eax, dword [rbx + 4]",
            "shl rdx, 4",
            "add rbx, 0xc",
            "add rdx, r12",
            "mov qword [rdx + 0x20], rax",
            "mov eax, dword [rbx - 4]",
            "mov qword [rdx + 0x28], rax",
            "mov edx, dword [rbx]",
            "test edx, edx",
            "jne 0x7a98",
            "lea rbx, [r12 + 0x160]",
            "mov rdi, qword [r12 + 0xa0]",
            "mov ecx, ebp",
            "mov edx, 0x400",
            "mov rsi, rbx",
            "call fcn.00009ac0",
            "mov rdi, qword [r12 + 0xa0]",
            "mov ecx, ebp",
            "mov edx, 0x404",
            "mov rsi, rbx",
            "call fcn.00009ac0",
            "mov rdi, qword [r12 + 0xa0]",
            "mov ecx, ebp",
            "mov edx, 0x40c",
            "mov rsi, rbx",
            "call fcn.00009ac0",
            "mov rdi, qword [r12 + 0xa0]",
            "mov ecx, 0x80",
            "mov edx, 8",
            "mov rsi, rbx",
            "call fcn.00009ac0",
            "mov rax, r12",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rbx, [0x0000b680]",
            "jmp 0x7a73",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov eax, dword [rax + rdx*4]",
            "test eax, eax",
            "jns 0x7b6c",
            "add rsp, 8",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rcx, str.ad_init",
            "lea rdx, str..._source3_modules_vfs_fruit.c:1121",
            "xor edi, edi",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x7b5b",
            "lea rsi, str.ad_init",
            "lea rdi, str._s___failed_to_get_vfs_handle__data__n",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "xor eax, eax",
            "jmp 0x7b21"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x00003510",
        "instructions": [
            "jmp qword [reloc.time]"
        ]
    },
    "fcn.00003cd0": {
        "function_address": "0x00003cd0",
        "instructions": [
            "test rsi, rsi",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "je 0x3dc8",
            "mov rax, qword [rsi + 0x28]",
            "test rax, rax",
            "je 0x3dc8",
            "test edx, edx",
            "mov r12d, edx",
            "mov r13, rcx",
            "je 0x3d68",
            "cmp edx, 1",
            "jne 0x3db8",
            "cmp dword [rax], 1",
            "mov r14d, 0",
            "mov eax, 0x52",
            "cmove r14, rax",
            "test r13, r13",
            "je 0x3e20",
            "xor ecx, ecx",
            "mov edx, 0x168",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call sym.imp.vfs_add_fsp_extension_notype",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x3db8",
            "test r14, r14",
            "jne 0x3d70",
            "mov qword [rax + 8], r13",
            "mov qword [rbx], rbp",
            "mov dword [rbx + 0x10], r12d",
            "mov rax, rbx",
            "mov dword [rbx + 0x14], 0x51607",
            "mov dword [rbx + 0x18], 0x20000",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov r14d, 0x192",
            "jmp 0x3d16",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call sym.imp.vfs_memctx_fsp_extension",
            "lea rcx, str.char",
            "mov edx, r14d",
            "mov esi, 1",
            "mov rdi, rax",
            "call sym.imp._talloc_zero_array",
            "mov qword [rbx + 8], r13",
            "mov qword [rbx + 0x160], rax",
            "test rax, rax",
            "jne 0x3d42",
            "lea rsi, str..._source3_modules_vfs_fruit.c:1096",
            "mov rdi, rbx",
            "call sym.imp._talloc_free",
            "nop dword [rax]",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov eax, dword [rax + rdx*4]",
            "test eax, eax",
            "js 0x3db8",
            "lea rcx, str.ad_alloc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:1045",
            "xor edi, edi",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x3db8",
            "lea rsi, str.ad_alloc",
            "lea rdi, str._s___failed_to_get_vfs_handle__data__n",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "xor eax, eax",
            "jmp 0x3d5a",
            "lea rdx, str.struct_adouble",
            "mov esi, 0x168",
            "call sym.imp._talloc_zero",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x3db8",
            "test r14, r14",
            "je 0x3d42",
            "lea rcx, str.char",
            "mov edx, r14d",
            "mov esi, 1",
            "mov rdi, rax",
            "call sym.imp._talloc_zero_array",
            "mov qword [rbx + 0x160], rax",
            "jmp 0x3d9d"
        ]
    },
    "fcn.00009ac0": {
        "function_address": "0x00009ac0",
        "instructions": [
            "test rdi, rdi",
            "je 0x9ad5",
            "mov eax, edx",
            "and eax, 0xc",
            "and dh, 4",
            "jne 0x9ae0",
            "add rdi, qword [rsi]",
            "mov dword [rdi + rax], ecx",
            "xor eax, eax",
            "ret",
            "sub ecx, 0x386d4380",
            "bswap ecx",
            "jmp 0x9acf"
        ]
    },
    "fcn.00007800": {
        "function_address": "0x00007800",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "mov rbx, rdi",
            "sub rsp, 8",
            "call fcn.00003e70",
            "test al, al",
            "je 0x78a0",
            "mov eax, dword [rbx + 0x10]",
            "test eax, eax",
            "je 0x78b0",
            "cmp eax, 1",
            "jne 0x78a0",
            "mov rax, qword [rbx + 8]",
            "test rax, rax",
            "je 0x78a0",
            "mov rax, qword [rax + 0x28]",
            "test rax, rax",
            "je 0x78a0",
            "cmp dword [rax + 8], 0xffffffff",
            "je 0x78a0",
            "mov rdi, qword [rbx + 0x160]",
            "call sym.imp.talloc_get_size",
            "mov rdx, qword [rbx + 8]",
            "mov rsi, qword [rbx + 0x160]",
            "xor ecx, ecx",
            "mov rdx, qword [rdx + 0x28]",
            "mov edi, dword [rdx + 8]",
            "mov rdx, rax",
            "call sym.imp.sys_pwrite",
            "mov rdi, qword [rbx + 0x160]",
            "mov rbp, rax",
            "call sym.imp.talloc_get_size",
            "mov rdx, rax",
            "xor eax, eax",
            "cmp rbp, rdx",
            "je 0x78a5",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov eax, dword [rax + rdx*4]",
            "test eax, eax",
            "jg 0x78e0",
            "nop dword [rax]",
            "mov eax, 0xffffffff",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "mov rax, qword [rbx]",
            "mov rcx, qword [rbx + 0x160]",
            "mov rsi, rbp",
            "lea rdx, str.user.org.netatalk.Metadata",
            "xor r9d, r9d",
            "mov r8d, 0x192",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, qword [rax + 0x68]",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.smb_vfs_call_setxattr",
            "lea rcx, str.ad_write",
            "lea rdx, str..._source3_modules_vfs_fruit.c:1243",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x78a0",
            "mov rdi, qword [rbx + 8]",
            "call sym.imp.fsp_str_dbg",
            "lea rdi, str.short_write_on__s:__zd",
            "mov rsi, rax",
            "mov rdx, rbp",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "mov eax, 0xffffffff",
            "jmp 0x78a5"
        ]
    },
    "sym.imp.sys_pwrite": {
        "function_address": "0x000033e0",
        "instructions": [
            "jmp qword [reloc.sys_pwrite]"
        ]
    },
    "sym.imp.fsp_str_dbg": {
        "function_address": "0x00003370",
        "instructions": [
            "jmp qword [reloc.fsp_str_dbg]"
        ]
    },
    "fcn.00007920": {
        "function_address": "0x00007920",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdx",
            "mov edx, ecx",
            "xor ecx, ecx",
            "sub rsp, 8",
            "call fcn.00003cd0",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x794b",
            "mov rsi, rbp",
            "mov rdi, rax",
            "call fcn.00004120",
            "cmp rax, 0xffffffffffffffff",
            "je 0x7958",
            "add rsp, 8",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "ret",
            "lea rsi, str..._source3_modules_vfs_fruit.c:1199",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call sym.imp._talloc_free",
            "add rsp, 8",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00004120": {
        "function_address": "0x00004120",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rsi",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0xc8",
            "mov eax, dword [rdi + 0x10]",
            "test eax, eax",
            "je 0x4260",
            "cmp eax, 1",
            "jne 0x4240",
            "mov rax, qword [rdi]",
            "mov qword [rsp + 0x18], 0",
            "test rax, rax",
            "je 0x43a8",
            "mov rbp, qword [rax + 0x28]",
            "test rbp, rbp",
            "je 0x43a8",
            "mov rax, qword [rdi + 8]",
            "test rax, rax",
            "je 0x42f8",
            "mov rax, qword [rax + 0x28]",
            "test rax, rax",
            "je 0x42f8",
            "mov r13d, dword [rax + 8]",
            "mov byte [rsp + 0xf], 0",
            "mov r12d, 2",
            "cmp r13d, 0xffffffff",
            "je 0x42f8",
            "cmp dword [rbp], 2",
            "jne 0x4408",
            "mov rax, qword [rbx]",
            "mov edi, 0xffffffff",
            "mov rax, qword [rax + 0x18]",
            "test rax, rax",
            "je 0x41c1",
            "mov rax, qword [rax + 0x28]",
            "mov edi, dword [rax]",
            "call sym.imp.lp_fake_directory_create_times",
            "lea rsi, [rsp + 0x20]",
            "movzx edx, al",
            "mov edi, r13d",
            "call sym.imp.sys_fstat",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x44e0",
            "mov rbp, qword [rsp + 0x50]",
            "xor r12d, r12d",
            "mov qword [rbx + 0x48], rbp",
            "xor r15d, r15d",
            "xor ebx, ebx",
            "jmp 0x4460",
            "call sym.imp.__errno_location",
            "mov rbx, rax",
            "mov eax, dword [rax]",
            "cmp eax, 2",
            "je 0x4240",
            "cmp eax, 0x3d",
            "je 0x44f0",
            "mov rdx, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rcx, dword [0x0020e008]",
            "mov rdx, qword [rdx]",
            "mov rsi, rcx",
            "cmp dword [rdx + rcx*4], 1",
            "jg 0x47a3",
            "cmp eax, 0x16",
            "je 0x42c9",
            "nop",
            "mov rbp, 0xffffffffffffffff",
            "add rsp, 0xc8",
            "mov rax, rbp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rax, qword [rdi]",
            "mov rcx, qword [rdi + 0x160]",
            "lea rdx, str.user.org.netatalk.Metadata",
            "mov r8d, 0x192",
            "mov rax, qword [rax + 0x18]",
            "mov rdi, qword [rax + 0x68]",
            "call sym.imp.smb_vfs_call_getxattr",
            "cmp rax, 0xffffffffffffffff",
            "mov rbp, rax",
            "je 0x4200",
            "cmp rax, 0x192",
            "je 0x45c8",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jg 0x4500",
            "call sym.imp.__errno_location",
            "mov rbx, rax",
            "mov dword [rax], 0x16",
            "call sym.imp.become_root",
            "lea rsi, str.user.org.netatalk.Metadata",
            "mov rdi, r14",
            "mov rbp, 0xffffffffffffffff",
            "call sym.imp.removexattr",
            "call sym.imp.unbecome_root",
            "mov dword [rbx], 2",
            "jmp 0x4247",
            "cmp dword [rbp], 2",
            "je 0x4638",
            "lea rdi, str..._source3_modules_vfs_fruit.c:854",
            "call sym.imp._talloc_tos",
            "lea rdx, [rsp + 0x18]",
            "mov rsi, r14",
            "mov rdi, rax",
            "call fcn.000077a0",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x44c0",
            "mov r12d, 2",
            "jmp 0x4376",
            "mov rdi, qword [rsp + 0x18]",
            "mov esi, r12d",
            "call sym.imp.__open_2",
            "cmp eax, 0xffffffff",
            "mov r13d, eax",
            "jne 0x46f0",
            "call sym.imp.__errno_location",
            "mov edx, dword [rax]",
            "mov r15, rax",
            "cmp edx, 0xd",
            "je 0x4369",
            "cmp edx, 0x1e",
            "jne 0x4590",
            "cmp r12d, 2",
            "jne 0x4590",
            "xor r12d, r12d",
            "cmp dword [rbp], 2",
            "jne 0x4338",
            "mov r15d, 0xffffffff",
            "mov ebx, 0x26",
            "xor r12d, r12d",
            "call sym.imp.__errno_location",
            "mov r13d, r15d",
            "mov dword [rax], 0x26",
            "mov byte [rsp + 0xf], 0",
            "jmp 0x4459",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov edx, dword [rax + rdx*4]",
            "test edx, edx",
            "js 0x4240",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:843",
            "xor edi, edi",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x4240",
            "lea rsi, str.ad_header_read_rsrc",
            "lea rdi, str._s___failed_to_get_vfs_handle__data__n",
            "xor eax, eax",
            "mov rbp, 0xffffffffffffffff",
            "call sym.imp.dbgtext",
            "jmp 0x4247",
            "mov rsi, qword [rbx + 0x160]",
            "xor ecx, ecx",
            "mov edx, 0x52",
            "mov edi, r13d",
            "call sym.imp.sys_pread",
            "cmp rax, 0x52",
            "mov rbp, rax",
            "je 0x4660",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jg 0x4536",
            "call sym.imp.__errno_location",
            "mov ebx, dword [rax]",
            "xor r12d, r12d",
            "mov r15d, 0xffffffff",
            "mov rbp, 0xffffffffffffffff",
            "cmp byte [rsp + 0xf], 0",
            "jne 0x44b0",
            "mov rdi, qword [rsp + 0x18]",
            "test rdi, rdi",
            "je 0x4486",
            "lea rsi, str..._source3_modules_vfs_fruit.c:998",
            "call sym.imp._talloc_free",
            "mov qword [rsp + 0x18], 0",
            "test r12, r12",
            "je 0x449a",
            "lea rsi, str..._source3_modules_vfs_fruit.c:999",
            "mov rdi, r12",
            "call sym.imp._talloc_free",
            "test r15d, r15d",
            "je 0x4247",
            "call sym.imp.__errno_location",
            "mov dword [rax], ebx",
            "jmp 0x4247",
            "mov edi, r13d",
            "call sym.imp.close",
            "jmp 0x4467",
            "call sym.imp.__errno_location",
            "xor r12d, r12d",
            "mov ebx, dword [rax]",
            "mov byte [rsp + 0xf], 0",
            "mov r13d, 0xffffffff",
            "jmp 0x4459",
            "call sym.imp.__errno_location",
            "xor r12d, r12d",
            "mov ebx, dword [rax]",
            "jmp 0x4459",
            "mov dword [rbx], 2",
            "jmp 0x4247",
            "lea rcx, str.ad_header_read_meta",
            "lea rdx, str..._source3_modules_vfs_fruit.c:781",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x42bb",
            "lea rdi, str.bad_size__zd_n",
            "mov rsi, rbp",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x42bb",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:911",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x4449",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "mov rbx, rax",
            "xor r12d, r12d",
            "mov r15d, 0xffffffff",
            "call sym.imp.strerror",
            "lea rdi, str._s:_bad_size:__zd_n",
            "mov rsi, rax",
            "mov rdx, rbp",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "mov ebx, dword [rbx]",
            "jmp 0x4459",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rcx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rcx",
            "cmp dword [rax + rcx*4], 1",
            "jg 0x47e5",
            "mov ebx, edx",
            "mov byte [rsp + 0xf], 0",
            "xor r12d, r12d",
            "mov r15d, 0xffffffff",
            "jmp 0x4459",
            "mov edx, 0x192",
            "mov esi, 8",
            "mov rdi, rbx",
            "call fcn.00003640",
            "test al, al",
            "jne 0x4700",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jle 0x42bb",
            "lea rcx, str.ad_header_read_meta",
            "lea rdx, str..._source3_modules_vfs_fruit.c:790",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x42bb",
            "lea rdi, str.invalid_AppleDouble_metadata_xattr_n",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x42bb",
            "lea rdi, str..._source3_modules_vfs_fruit.c:852",
            "call sym.imp._talloc_tos",
            "mov rsi, r14",
            "mov rdi, rax",
            "call sym.imp.talloc_strdup",
            "mov qword [rsp + 0x18], rax",
            "jmp 0x4329",
            "mov rax, qword [rbx]",
            "mov edi, 0xffffffff",
            "mov rax, qword [rax + 0x18]",
            "test rax, rax",
            "je 0x4677",
            "mov rax, qword [rax + 0x28]",
            "mov edi, dword [rax]",
            "call sym.imp.lp_fake_directory_create_times",
            "lea rsi, [rsp + 0x20]",
            "movzx edx, al",
            "mov edi, r13d",
            "call sym.imp.sys_fstat",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x44e0",
            "mov rdx, qword [rsp + 0x50]",
            "mov esi, 2",
            "mov rdi, rbx",
            "call fcn.00003640",
            "test al, al",
            "jne 0x4816",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "mov eax, dword [rax + rdx*4]",
            "test eax, eax",
            "jg 0x48de",
            "call sym.imp.__errno_location",
            "mov ebx, 0x16",
            "mov dword [rax], 0x16",
            "xor r12d, r12d",
            "mov r15d, 0xffffffff",
            "jmp 0x4459",
            "mov byte [rsp + 0xf], 1",
            "jmp 0x41a0",
            "cmp qword [rbx + 0xb0], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x60], 0",
            "je 0x4760",
            "cmp qword [rbx + 0xa0], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x100], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x120], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x130], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x140], 0",
            "je 0x4760",
            "cmp qword [rbx + 0x150], 0",
            "mov ebp, 0x192",
            "jne 0x4247",
            "nop word cs:[rax + rax]",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jle 0x42bb",
            "lea rcx, str.ad_header_read_meta",
            "lea rdx, str..._source3_modules_vfs_fruit.c:804",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x42bb",
            "jmp 0x4620",
            "lea rcx, str.ad_header_read_meta",
            "lea rdx, str..._source3_modules_vfs_fruit.c:775",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "jne 0x47c6",
            "mov eax, dword [rbx]",
            "jmp 0x4236",
            "mov edi, dword [rbx]",
            "call sym.imp.strerror",
            "lea rdi, str.error_reading_meta_xattr:__s_n",
            "mov rsi, rax",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "mov eax, dword [rbx]",
            "jmp 0x4236",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:887",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "mov byte [rsp + 0xf], al",
            "jne 0x4878",
            "mov ebx, dword [r15]",
            "xor r12d, r12d",
            "mov r15d, 0xffffffff",
            "jmp 0x4459",
            "cmp qword [rbx + 0xb0], 0x32",
            "je 0x48ac",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jle 0x46d0",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:939",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x46d0",
            "lea rdi, str.invalid_AppleDouble_ressource__s_n",
            "mov rsi, r14",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x46d0",
            "mov edi, dword [r15]",
            "xor r12d, r12d",
            "call sym.imp.strerror",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdi, str.open_AppleDouble:__s___s_n",
            "mov rdx, rax",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "mov ebx, dword [r15]",
            "mov byte [rsp + 0xf], 0",
            "mov r15d, 0xffffffff",
            "jmp 0x4459",
            "mov rdx, qword [rbx + 0xb8]",
            "cmp rdx, 0x1f",
            "jbe 0x4824",
            "mov rax, qword [rbx + 0x40]",
            "cmp rax, 0x51",
            "jbe 0x4824",
            "test r12d, r12d",
            "je 0x48d6",
            "cmp rdx, 0x20",
            "jne 0x4903",
            "xor r12d, r12d",
            "jmp 0x41ed",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:927",
            "mov edi, 1",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x46d0",
            "jmp 0x4862",
            "add rax, qword [rbx + 0x48]",
            "xor r9d, r9d",
            "xor edi, edi",
            "mov r8d, r13d",
            "mov ecx, 1",
            "mov edx, 3",
            "mov rsi, rax",
            "mov rbp, rax",
            "call sym.imp.mmap",
            "cmp rax, 0xffffffffffffffff",
            "mov r12, rax",
            "je 0x4a1e",
            "mov rdx, qword [rbx + 0x48]",
            "test rdx, rdx",
            "je 0x4956",
            "mov rsi, rax",
            "mov rax, qword [rbx + 0xb0]",
            "add rsi, qword [rbx + 0x40]",
            "lea rdi, [r12 + rax + 0x20]",
            "call sym.imp.memmove",
            "mov rdx, qword [rbx + 0x48]",
            "mov rax, qword [rbx + 0xb0]",
            "mov edi, r13d",
            "mov qword [rbx + 0xb8], 0x20",
            "lea rsi, [rax + 0x20]",
            "mov qword [rbx + 0x40], rsi",
            "add rsi, rdx",
            "call sym.imp.ftruncate",
            "mov rsi, rbp",
            "mov r15d, eax",
            "mov rdi, r12",
            "call sym.imp.munmap",
            "test r15d, r15d",
            "jne 0x4449",
            "mov rdi, rbx",
            "call fcn.00003e70",
            "test al, al",
            "je 0x4449",
            "mov rsi, qword [rbx + 0x160]",
            "xor ecx, ecx",
            "mov edx, 0x52",
            "mov edi, r13d",
            "call sym.imp.sys_pwrite",
            "cmp rax, 0x52",
            "mov rbp, rax",
            "je 0x4a7e",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jle 0x4449",
            "lea rcx, str.ad_header_read_rsrc",
            "lea rdx, str..._source3_modules_vfs_fruit.c:964",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x4449",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdi, str._s:_bad_size:__zd_n",
            "mov rdx, rbp",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x4449",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 1",
            "jle 0x4449",
            "lea rcx, str.ad_convert",
            "lea rdx, str..._source3_modules_vfs_fruit.c:721",
            "mov edi, 2",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x4449",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "call sym.imp.strerror",
            "lea rdi, str.mmap_AppleDouble:__s_n",
            "mov rsi, rax",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x4449",
            "mov r12, qword [rbx]",
            "lea rdi, str..._source3_modules_vfs_fruit.c:969",
            "call sym.imp._talloc_tos",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rsi, r12",
            "mov rdi, rax",
            "call fcn.00007a10",
            "test rax, rax",
            "mov r12, rax",
            "je 0x4ade",
            "mov rax, qword [rax + 0xb0]",
            "add rax, qword [r12 + 0x160]",
            "mov ecx, 8",
            "mov rsi, qword [rbx + 0xb0]",
            "add rsi, qword [rbx + 0x160]",
            "mov rdi, rax",
            "rep movsd dword [rdi], dword [rsi]",
            "mov rsi, r14",
            "mov rdi, r12",
            "call fcn.00007800",
            "test eax, eax",
            "je 0x41ed",
            "call sym.imp.__errno_location",
            "or r15d, 0xffffffff",
            "mov ebx, dword [rax]",
            "jmp 0x4459"
        ]
    },
    "sym.imp._talloc_free": {
        "function_address": "0x00002e20",
        "instructions": [
            "jmp qword [reloc._talloc_free]"
        ]
    },
    "fcn.00007540": {
        "function_address": "0x00007540",
        "instructions": [
            "sub rsp, 0x28",
            "mov rax, rdi",
            "mov qword [rsp + 0x10], rsi",
            "mov rsi, qword [rdi + 0x20]",
            "lea rdx, [rsp + 0x10]",
            "lea rcx, [rsp + 0x18]",
            "lea r9, [rsp + 0xc]",
            "lea r8, [rsp + 8]",
            "mov qword [rsp + 0x18], 1",
            "mov dword [rsp + 8], 1",
            "mov rdi, qword [rsi + 0x68]",
            "mov rsi, rax",
            "call sym.imp.smb_vfs_call_getlock",
            "test al, al",
            "mov edx, 1",
            "je 0x7592",
            "cmp dword [rsp + 8], 2",
            "setne dl",
            "mov eax, edx",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "sym.imp.smb_vfs_call_getlock": {
        "function_address": "0x000033f0",
        "instructions": [
            "jmp qword [reloc.smb_vfs_call_getlock]"
        ]
    },
    "fcn.00009a70": {
        "function_address": "0x00009a70",
        "instructions": [
            "sub rsp, 0x28",
            "add rsi, rdi",
            "mov edx, 0x20",
            "mov rdi, rsp",
            "mov qword [rsp], 0",
            "mov qword [rsp + 8], 0",
            "mov qword [rsp + 0x10], 0",
            "mov qword [rsp + 0x18], 0",
            "call sym.imp.memcmp",
            "test eax, eax",
            "sete al",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00003330",
        "instructions": [
            "jmp qword [reloc.memcmp]"
        ]
    },
    "sym.imp.lp_fake_directory_create_times": {
        "function_address": "0x00002e70",
        "instructions": [
            "jmp qword [reloc.lp_fake_directory_create_times]"
        ]
    },
    "sym.imp.sys_fstat": {
        "function_address": "0x00003170",
        "instructions": [
            "jmp qword [reloc.sys_fstat]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00003240",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.smb_vfs_call_getxattr": {
        "function_address": "0x000032d0",
        "instructions": [
            "jmp qword [reloc.smb_vfs_call_getxattr]"
        ]
    },
    "sym.imp.become_root": {
        "function_address": "0x00003420",
        "instructions": [
            "jmp qword [reloc.become_root]"
        ]
    },
    "sym.imp.removexattr": {
        "function_address": "0x00003080",
        "instructions": [
            "jmp qword [reloc.removexattr]"
        ]
    },
    "sym.imp.unbecome_root": {
        "function_address": "0x000034b0",
        "instructions": [
            "jmp qword [reloc.unbecome_root]"
        ]
    },
    "sym.imp._talloc_tos": {
        "function_address": "0x00003120",
        "instructions": [
            "jmp qword [reloc._talloc_tos]"
        ]
    },
    "sym.imp.__open_2": {
        "function_address": "0x000034c0",
        "instructions": [
            "jmp qword [reloc.__open_2]"
        ]
    },
    "sym.imp.sys_pread": {
        "function_address": "0x00003010",
        "instructions": [
            "jmp qword [reloc.sys_pread]"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00002df0",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x000030c0",
        "instructions": [
            "jmp qword [reloc.strerror]"
        ]
    },
    "sym.imp.talloc_strdup": {
        "function_address": "0x00002f40",
        "instructions": [
            "jmp qword [reloc.talloc_strdup]"
        ]
    },
    "sym.imp.mmap": {
        "function_address": "0x000034d0",
        "instructions": [
            "jmp qword [reloc.mmap]"
        ]
    },
    "sym.imp.memmove": {
        "function_address": "0x000031c0",
        "instructions": [
            "jmp qword [reloc.memmove]"
        ]
    },
    "sym.imp.ftruncate": {
        "function_address": "0x000033d0",
        "instructions": [
            "jmp qword [reloc.ftruncate]"
        ]
    },
    "sym.imp.munmap": {
        "function_address": "0x00003340",
        "instructions": [
            "jmp qword [reloc.munmap]"
        ]
    },
    "sym.imp.vfs_add_fsp_extension_notype": {
        "function_address": "0x00003060",
        "instructions": [
            "jmp qword [reloc.vfs_add_fsp_extension_notype]"
        ]
    },
    "sym.imp.vfs_memctx_fsp_extension": {
        "function_address": "0x00002f50",
        "instructions": [
            "jmp qword [reloc.vfs_memctx_fsp_extension]"
        ]
    },
    "sym.imp._talloc_zero_array": {
        "function_address": "0x000034a0",
        "instructions": [
            "jmp qword [reloc._talloc_zero_array]"
        ]
    },
    "sym.imp._talloc_zero": {
        "function_address": "0x00002f30",
        "instructions": [
            "jmp qword [reloc._talloc_zero]"
        ]
    },
    "fcn.000075a0": {
        "function_address": "0x000075a0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, r8",
            "push r13",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "mov r13, rcx",
            "lea r8, str.struct_stream_struct",
            "mov edx, 0x18",
            "sub rsp, 0x18",
            "mov eax, dword [rsi]",
            "mov rsi, qword [r12]",
            "mov r14, r9",
            "lea ecx, [rax + 1]",
            "call sym.imp._talloc_realloc_array",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x7650",
            "mov eax, dword [rbp]",
            "lea rsi, str._s:_DATA",
            "mov rdx, r13",
            "mov rdi, rbx",
            "lea rax, [rax + rax*2]",
            "lea rcx, [rbx + rax*8]",
            "xor eax, eax",
            "mov qword [rsp + 8], rcx",
            "call sym.imp.talloc_asprintf",
            "mov edx, dword [rbp]",
            "mov rcx, qword [rsp + 8]",
            "mov qword [rcx + 0x10], rax",
            "mov rax, rdx",
            "lea rdx, [rdx + rdx*2]",
            "lea rdx, [rbx + rdx*8]",
            "cmp qword [rdx + 0x10], 0",
            "je 0x7650",
            "add eax, 1",
            "mov qword [rdx], r15",
            "mov qword [rdx + 8], r14",
            "mov qword [r12], rbx",
            "mov dword [rbp], eax",
            "add rsp, 0x18",
            "pop rbx",
            "mov eax, 1",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "sym.imp._talloc_realloc_array": {
        "function_address": "0x000031e0",
        "instructions": [
            "jmp qword [reloc._talloc_realloc_array]"
        ]
    },
    "fcn.00006f60": {
        "function_address": "0x00006f60",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 8",
            "test dl, dl",
            "mov rbp, qword [rsi + 8]",
            "mov rdi, qword [rdi]",
            "mov qword [rsi + 8], 0",
            "jne 0x6f90",
            "call sym.imp.smb_vfs_call_lstat",
            "mov qword [rbx + 8], rbp",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret",
            "call sym.imp.smb_vfs_call_stat",
            "mov qword [rbx + 8], rbp",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.smb_vfs_call_lstat": {
        "function_address": "0x000032f0",
        "instructions": [
            "jmp qword [reloc.smb_vfs_call_lstat]"
        ]
    },
    "sym.imp.smb_vfs_call_stat": {
        "function_address": "0x000032e0",
        "instructions": [
            "jmp qword [reloc.smb_vfs_call_stat]"
        ]
    },
    "fcn.00007670": {
        "function_address": "0x00007670",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12, rdi",
            "push rbx",
            "lea rdi, str..._source3_modules_vfs_fruit.c:1469",
            "mov rbx, rsi",
            "sub rsp, 0x70",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x68], rax",
            "xor eax, eax",
            "call sym.imp._talloc_tos",
            "mov rsi, rbx",
            "mov rdi, rax",
            "call sym.imp.talloc_strdup_upper",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x772a",
            "lea rbx, [rsp + 0x10]",
            "mov rdi, rbx",
            "call sym.imp.MD5Init",
            "mov edx, 8",
            "mov rsi, r12",
            "mov rdi, rbx",
            "call sym.imp.MD5Update",
            "lea rsi, [r12 + 8]",
            "mov edx, 8",
            "mov rdi, rbx",
            "call sym.imp.MD5Update",
            "mov rdi, rbp",
            "call sym.imp.talloc_get_size",
            "lea rdx, [rax - 1]",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call sym.imp.MD5Update",
            "mov rdi, rsp",
            "mov rsi, rbx",
            "call sym.imp.MD5Final",
            "lea rsi, str..._source3_modules_vfs_fruit.c:1481",
            "mov rdi, rbp",
            "call sym.imp._talloc_free",
            "mov rcx, qword [rsp + 0x68]",
            "xor rcx, qword fs:[0x28]",
            "mov rax, qword [rsp]",
            "jne 0x7750",
            "add rsp, 0x70",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 0",
            "jns 0x7755",
            "lea rdi, str.assert_failed:_upper_sname___NULL",
            "call sym.imp.smb_panic",
            "call sym.imp.__stack_chk_fail",
            "lea rcx, str.fruit_inode",
            "lea rdx, str..._source3_modules_vfs_fruit.c:1470",
            "xor edi, edi",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x7744",
            "lea rcx, str.upper_sname___NULL",
            "lea rsi, str..._source3_modules_vfs_fruit.c",
            "lea rdi, str.PANIC:_assert_failed_at__s__d_:__s_n",
            "mov edx, 0x5be",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x7744"
        ]
    },
    "sym.imp.talloc_strdup_upper": {
        "function_address": "0x00002d80",
        "instructions": [
            "jmp qword [reloc.talloc_strdup_upper]"
        ]
    },
    "sym.imp.MD5Init": {
        "function_address": "0x00003090",
        "instructions": [
            "jmp qword [reloc.MD5Init]"
        ]
    },
    "sym.imp.MD5Update": {
        "function_address": "0x00003380",
        "instructions": [
            "jmp qword [reloc.MD5Update]"
        ]
    },
    "sym.imp.MD5Final": {
        "function_address": "0x00003210",
        "instructions": [
            "jmp qword [reloc.MD5Final]"
        ]
    },
    "sym.imp.smb_panic": {
        "function_address": "0x00002ee0",
        "instructions": [
            "jmp qword [reloc.smb_panic]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x000032a0",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "fcn.00007980": {
        "function_address": "0x00007980",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov r12, qword [rsi]",
            "mov rbx, rdi",
            "lea rdi, str..._source3_modules_vfs_fruit.c:1584",
            "call sym.imp._talloc_tos",
            "xor ecx, ecx",
            "mov rdx, r12",
            "mov rsi, rbx",
            "mov rdi, rax",
            "call fcn.00007920",
            "test rax, rax",
            "je 0x79ee",
            "mov rdx, qword [rax + 0xa0]",
            "test rdx, rdx",
            "je 0x79f8",
            "mov rcx, qword [rax + 0x160]",
            "lea rsi, str..._source3_modules_vfs_fruit.c:1592",
            "mov rdi, rax",
            "mov ebx, dword [rcx + rdx]",
            "call sym.imp._talloc_free",
            "bswap ebx",
            "lea edi, [rbx + 0x386d4380]",
            "call sym.imp.convert_uint32_t_to_time_t",
            "lea rdi, [rbp + 0x18]",
            "mov rsi, rax",
            "xor edx, edx",
            "call sym.imp.update_stat_ex_create_time",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "lea rsi, str..._source3_modules_vfs_fruit.c:1589",
            "mov rdi, rax",
            "jmp sym.imp._talloc_free"
        ]
    },
    "sym.imp.convert_uint32_t_to_time_t": {
        "function_address": "0x00002f90",
        "instructions": [
            "jmp qword [reloc.convert_uint32_t_to_time_t]"
        ]
    },
    "sym.imp.update_stat_ex_create_time": {
        "function_address": "0x00003410",
        "instructions": [
            "jmp qword [reloc.update_stat_ex_create_time]"
        ]
    },
    "fcn.00008df0": {
        "function_address": "0x00008df0",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "lea rdi, str..._source3_modules_vfs_fruit.c:2894",
            "mov rbx, rsi",
            "mov ebp, edx",
            "sub rsp, 8",
            "mov r13, qword [rsi]",
            "call sym.imp._talloc_tos",
            "xor ecx, ecx",
            "mov rsi, r12",
            "mov rdi, rax",
            "mov rdx, r13",
            "call fcn.00007920",
            "test rax, rax",
            "je 0x8e6f",
            "lea rsi, str..._source3_modules_vfs_fruit.c:2901",
            "mov rdi, rax",
            "call sym.imp._talloc_free",
            "movzx edx, bpl",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00006f60",
            "cmp eax, 0xffffffff",
            "je 0x8e64",
            "mov rsi, qword [rbx + 8]",
            "lea rdi, [rbx + 0x18]",
            "mov qword [rbx + 0x48], 0x3c",
            "call fcn.00007670",
            "mov qword [rbx + 0x20], rax",
            "xor eax, eax",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rax, qword [reloc.DEBUGLEVEL_CLASS]",
            "movsxd rdx, dword [0x0020e008]",
            "mov rax, qword [rax]",
            "mov rsi, rdx",
            "cmp dword [rax + rdx*4], 4",
            "jg 0x8e9b",
            "call sym.imp.__errno_location",
            "mov dword [rax], 2",
            "mov eax, 0xffffffff",
            "jmp 0x8e64",
            "lea rcx, str.fruit_stat_meta",
            "lea rdx, str..._source3_modules_vfs_fruit.c:2897",
            "mov edi, 5",
            "call sym.imp.dbghdrclass",
            "test al, al",
            "je 0x8e89",
            "lea rsi, str.fruit_stat_meta",
            "lea rdi, str._s:",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "test al, al",
            "je 0x8e89",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "call sym.imp.strerror",
            "mov rdi, rbx",
            "mov rbp, rax",
            "call sym.imp.smb_fname_str_dbg",
            "lea rdi, str.fruit_stat_meta__s:__s_n",
            "mov rsi, rax",
            "mov rdx, rbp",
            "xor eax, eax",
            "call sym.imp.dbgtext",
            "jmp 0x8e89"
        ]
    },
    "sym.imp.smb_fname_str_dbg": {
        "function_address": "0x00003390",
        "instructions": [
            "jmp qword [reloc.smb_fname_str_dbg]"
        ]
    },
    "fcn.000089f0": {
        "function_address": "0x000089f0",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "lea rdi, str..._source3_modules_vfs_fruit.c:2923",
            "mov rbx, rsi",
            "mov ebp, edx",
            "sub rsp, 8",
            "mov r12, qword [rsi]",
            "call sym.imp._talloc_tos",
            "mov ecx, 1",
            "mov rsi, r13",
            "mov rdi, rax",
            "mov rdx, r12",
            "call fcn.00007920",
            "test rax, rax",
            "mov r12, rax",
            "je 0x8aa0",
            "movzx edx, bpl",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00006f60",
            "cmp eax, 0xffffffff",
            "mov ebp, eax",
            "je 0x8a80",
            "mov rax, qword [r12 + 0x48]",
            "mov rsi, qword [rbx + 8]",
            "lea rdi, [rbx + 0x18]",
            "xor ebp, ebp",
            "mov qword [rbx + 0x48], rax",
            "call fcn.00007670",
            "lea rsi, str..._source3_modules_vfs_fruit.c:2938",
            "mov qword [rbx + 0x20], rax",
            "mov rdi, r12",
            "call sym.imp._talloc_free",
            "add rsp, 8",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "lea rsi, str..._source3_modules_vfs_fruit.c:2931",
            "mov rdi, r12",
            "call sym.imp._talloc_free",
            "add rsp, 8",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "call sym.imp.__errno_location",
            "mov ebp, 0xffffffff",
            "mov dword [rax], 2",
            "jmp 0x8a6d"
        ]
    }
}