{
    "entry0": {
        "function_address": "0x00001e10",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "lsl r5, r0, 3",
            "sub sp, sp, 0xf4",
            "mov r6, r2",
            "mov r0, sp",
            "mov r2, r5",
            "mov r7, r3",
            "bl fcn.00001c60",
            "lsr r1, r5, 5",
            "mov r0, sp",
            "mov r2, r6",
            "add r1, r1, 6",
            "mov r3, r7",
            "mov r4, sp",
            "bl fcn.00001bc4",
            "add sp, sp, 0xf4",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00001c60": {
        "function_address": "0x00001c60",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x548]!"
        ]
    },
    "fcn.00001bc4": {
        "function_address": "0x00001bc4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5b0]!"
        ]
    },
    "sym.init_passhash": {
        "function_address": "0x0000d04c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "mov r6, r2",
            "mov r7, r3",
            "bl loc.imp.strlen",
            "cmp r0, 7",
            "mvnls r0, 0",
            "popls {r3, r4, r5, r6, r7, pc}",
            "cmp r0, 0x3f",
            "bls 0xd084",
            "mvn r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r5",
            "mov r1, 0",
            "mov r2, 0x54",
            "bl loc.imp.memset",
            "mov r3, 1",
            "str r4, [r5, 0x40]",
            "str r3, [r5, 0x14]",
            "mov r0, 0",
            "ldr r3, [sp, 0x18]",
            "str r6, [r5, 0x44]",
            "str r7, [r5, 0x48]",
            "str r3, [r5, 0x4c]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "loc.imp.strlen": {
        "function_address": "0x00001d80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x488]!"
        ]
    },
    "loc.imp.memset": {
        "function_address": "0x00001c78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x538]!"
        ]
    },
    "sym.BN_rshift": {
        "function_address": "0x0000a820",
        "instructions": [
            "asr r3, r2, 0x1f",
            "cmp r2, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "lsr r3, r3, 0x1b",
            "add r7, r2, 0x1f",
            "mov r6, r1",
            "movge r7, r2",
            "ldr r1, [r1, 4]",
            "asr r7, r7, 5",
            "add r5, r2, r3",
            "and r5, r5, 0x1f",
            "cmp r7, r1",
            "rsb r5, r3, r5",
            "mov r4, r0",
            "rsb r8, r5, 0x20",
            "bgt 0xa924",
            "cmp r1, 0",
            "beq 0xa924",
            "cmp r0, r6",
            "beq 0xa9a0",
            "ldr r2, [r6, 0xc]",
            "ldr r3, [r0, 8]",
            "str r2, [r0, 0xc]",
            "ldr r1, [r6, 4]",
            "rsb r1, r7, r1",
            "cmp r1, r3",
            "bge 0xa97c",
            "ldr r3, [r6]",
            "cmp r5, 0",
            "ldr r6, [r4]",
            "str r1, [r4, 4]",
            "add ip, r3, r7, lsl 2",
            "bne 0xa938",
            "cmp r1, 0",
            "blt 0xa8d0",
            "mov r3, r1",
            "ldr r2, [ip, r5]",
            "sub r3, r3, 1",
            "cmn r3, 1",
            "str r2, [r6, r5]",
            "add r5, r5, 4",
            "bne 0xa8b0",
            "add r1, r1, 1",
            "add r6, r6, r1, lsl 2",
            "mov r3, 0",
            "str r3, [r6]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "ble 0xa91c",
            "ldr r2, [r4]",
            "sub r3, r3, 1",
            "ldr r1, [r2, r3, lsl 2]",
            "add r2, r2, r3, lsl 2",
            "cmp r1, 0",
            "beq 0xa90c",
            "b 0xa91c",
            "ldr r1, [r2, -4]!",
            "cmp r1, 0",
            "bne 0xa998",
            "cmp r3, 0",
            "str r3, [r4, 4]",
            "sub r3, r3, 1",
            "bgt 0xa900",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, r4",
            "mov r1, 0",
            "bl fcn.00001af8",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, pc}",
            "cmp r1, 1",
            "ldr r3, [r3, r7, lsl 2]",
            "ble 0xa970",
            "mov r0, r6",
            "mov r2, 1",
            "lsr r7, r3, r5",
            "ldr r3, [ip, 4]!",
            "add r2, r2, 1",
            "cmp r2, r1",
            "orr r7, r7, r3, lsl r8",
            "str r7, [r0], 4",
            "bne 0xa94c",
            "sub r2, r2, 1",
            "add r6, r6, r2, lsl 2",
            "lsr r3, r3, r5",
            "str r3, [r6], 4",
            "b 0xa8d0",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldrne r1, [r6, 4]",
            "rsbne r1, r7, r1",
            "popeq {r4, r5, r6, r7, r8, pc}",
            "b 0xa88c",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, pc}",
            "cmp r2, 0",
            "beq 0xa91c",
            "rsb r1, r7, r1",
            "b 0xa88c"
        ]
    },
    "fcn.00001af8": {
        "function_address": "0x00001af8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x638]!"
        ]
    },
    "fcn.00001c6c": {
        "function_address": "0x00001c6c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x540]!"
        ]
    },
    "sym.bn_mul_words": {
        "function_address": "0x00004d90",
        "instructions": [
            "ldr ip, [0x00004f20]",
            "cmp r2, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "add ip, pc, ip",
            "blt 0x4efc",
            "moveq r0, r2",
            "popeq {r4, r5, r6, r7, r8, pc}",
            "uxth ip, r3",
            "mov r4, 0",
            "lsr r3, r3, 0x10",
            "b 0x4e9c",
            "ldr r4, [r1, 4]",
            "lsr r8, r4, 0x10",
            "uxth r4, r4",
            "mul r5, r8, ip",
            "mul r7, r4, ip",
            "mul r8, r8, r3",
            "mla r4, r4, r3, r5",
            "cmp r5, r4",
            "lsl r5, r4, 0x10",
            "addhi r8, r8, 0x10000",
            "add r4, r8, r4, lsr 16",
            "adds r5, r5, r7",
            "addhs r4, r4, 1",
            "adds r5, r6, r5",
            "addhs r4, r4, 1",
            "cmp r2, 2",
            "str r5, [r0, 4]",
            "beq 0x4eec",
            "ldr r6, [r1, 8]",
            "lsr r8, r6, 0x10",
            "uxth r6, r6",
            "mul r5, r8, ip",
            "mul r7, r6, ip",
            "mul r8, r8, r3",
            "mla r6, r6, r3, r5",
            "cmp r5, r6",
            "lsl r5, r6, 0x10",
            "addhi r8, r8, 0x10000",
            "add r6, r8, r6, lsr 16",
            "adds r5, r5, r7",
            "addhs r6, r6, 1",
            "adds r5, r4, r5",
            "addhs r6, r6, 1",
            "cmp r2, 3",
            "str r5, [r0, 8]",
            "beq 0x4ee4",
            "ldr r4, [r1, 0xc]",
            "lsr r8, r4, 0x10",
            "uxth r4, r4",
            "mul r5, r8, ip",
            "mul r7, r4, ip",
            "mul r8, r8, r3",
            "mla r4, r4, r3, r5",
            "cmp r5, r4",
            "lsl r5, r4, 0x10",
            "addhi r8, r8, 0x10000",
            "add r4, r8, r4, lsr 16",
            "adds r5, r5, r7",
            "addhs r4, r4, 1",
            "adds r5, r6, r5",
            "addhs r4, r4, 1",
            "subs r2, r2, 4",
            "str r5, [r0, 0xc]",
            "beq 0x4ef4",
            "add r1, r1, 0x10",
            "add r0, r0, 0x10",
            "ldr r6, [r1]",
            "lsr r8, r6, 0x10",
            "uxth r6, r6",
            "mul r5, r8, ip",
            "mul r7, r6, ip",
            "mul r8, r8, r3",
            "mla r6, r6, r3, r5",
            "cmp r5, r6",
            "lsl r5, r6, 0x10",
            "addhi r8, r8, 0x10000",
            "add r6, r8, r6, lsr 16",
            "adds r5, r5, r7",
            "addhs r6, r6, 1",
            "adds r5, r4, r5",
            "addhs r6, r6, 1",
            "cmp r2, 1",
            "str r5, [r0]",
            "bne 0x4dbc",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r3, [0x00004f24]",
            "movw r2, 0x1dd",
            "ldr r0, [0x00004f28]",
            "ldr r1, [0x00004f2c]",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r3, r3, 0x14",
            "add r1, ip, r1",
            "bl loc.imp.__assert",
            "andeq r7, r1, ip, ror 5",
            "invalid"
        ]
    },
    "loc.imp.__assert": {
        "function_address": "0x00001db0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x468]!"
        ]
    },
    "sym.BN_rand": {
        "function_address": "0x0000a36c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r5, r1, 0",
            "ldr r4, [0x0000a4d0]",
            "mov r6, r0",
            "mov sl, r2",
            "mov sb, r3",
            "add r4, pc, r4",
            "beq 0xa468",
            "adds r8, r5, 7",
            "addmi r8, r5, 0xe",
            "asr r8, r8, 3",
            "mov r0, r8",
            "bl loc.imp.malloc",
            "subs r7, r0, 0",
            "beq 0xa4a4",
            "ldr r3, [0x0000a4d4]",
            "ldr r2, [r4, r3]",
            "cmp r2, 0",
            "beq 0xa4ac",
            "sub r5, r5, 1",
            "mov r1, r8",
            "asr r3, r5, 0x1f",
            "lsr r3, r3, 0x1d",
            "add r5, r5, r3",
            "and r5, r5, 7",
            "rsb r5, r3, r5",
            "blx r2",
            "cmn sl, 1",
            "ldrbeq r1, [r7]",
            "beq 0xa40c",
            "cmp sl, 0",
            "beq 0xa478",
            "cmp r5, 0",
            "bne 0xa48c",
            "ldrb r3, [r7, 1]",
            "mov r1, 1",
            "strb r1, [r7]",
            "mvn r3, r3, lsl 25",
            "mvn r3, r3, lsr 25",
            "strb r3, [r7, 1]",
            "add r3, r5, 1",
            "mov r2, 0xff",
            "bic r5, r1, r2, lsl r3",
            "cmp sb, 0",
            "subne r3, r8, 1",
            "strb r5, [r7]",
            "mov r1, r8",
            "ldrbne r2, [r7, r3]",
            "mov r0, r7",
            "orrne r2, r2, 1",
            "strbne r2, [r7, r3]",
            "mov r2, r6",
            "bl fcn.00001990",
            "mov r1, 0",
            "mov r2, r8",
            "subs r4, r0, r1",
            "movne r4, 1",
            "mov r0, r7",
            "bl loc.imp.memset",
            "mov r0, r7",
            "bl loc.imp.free",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r4, 1",
            "bl fcn.00001af8",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldrb r3, [r7]",
            "mov r1, 1",
            "orr r1, r3, r1, lsl r5",
            "uxtb r1, r1",
            "b 0xa40c",
            "ldrb r3, [r7]",
            "sub r2, r5, 1",
            "mov r1, 3",
            "orr r1, r3, r1, lsl r2",
            "uxtb r1, r1",
            "b 0xa40c",
            "mov r4, r7",
            "b 0xa460",
            "ldr r3, [0x0000a4d8]",
            "movw r2, 0x10a2",
            "ldr r0, [0x0000a4dc]",
            "ldr r1, [0x0000a4e0]",
            "add r3, r4, r3",
            "add r0, r4, r0",
            "add r3, r3, 0x188",
            "add r1, r4, r1",
            "bl loc.imp.__assert",
            "andeq r1, r1, r4, lsl 26",
            "strdeq r0, r1, [r0], -r0",
            "invalid"
        ]
    },
    "loc.imp.malloc": {
        "function_address": "0x00001a44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6b0]!"
        ]
    },
    "fcn.00001990": {
        "function_address": "0x00001990",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x728]!"
        ]
    },
    "loc.imp.free": {
        "function_address": "0x00001e04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x430]!"
        ]
    },
    "sym.hmac_md5": {
        "function_address": "0x0000e370",
        "instructions": [
            "cmp r3, 0x40",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x168",
            "mov r7, r3",
            "mov sl, r0",
            "mov sb, r1",
            "mov r4, r2",
            "ldr r8, [sp, 0x188]",
            "bgt 0xe478",
            "add r6, sp, 0x114",
            "mov r1, 0",
            "mov r2, 0x41",
            "add r5, sp, 0xd0",
            "mov r0, r6",
            "bl loc.imp.memset",
            "mov r1, 0",
            "mov r2, 0x41",
            "mov r0, r5",
            "bl loc.imp.memset",
            "mov r1, r4",
            "mov r2, r7",
            "mov r0, r6",
            "bl loc.imp.memcpy",
            "mov r1, r4",
            "mov r4, 0",
            "mov r0, r5",
            "mov r2, r7",
            "bl loc.imp.memcpy",
            "ldrb r2, [r6, r4]",
            "ldrb r3, [r5, r4]",
            "eor r2, r2, 0x36",
            "eor r3, r3, 0x5c",
            "strb r2, [r6, r4]",
            "strb r3, [r5, r4]",
            "add r4, r4, 1",
            "cmp r4, 0x40",
            "bne 0xe3e0",
            "add r7, sp, 0x68",
            "mov r0, r7",
            "bl fcn.00001cb4",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r4",
            "bl fcn.00001cfc",
            "mov r2, sb",
            "mov r0, r7",
            "mov r1, sl",
            "bl fcn.00001cfc",
            "mov r1, r7",
            "mov r0, r8",
            "bl fcn.00001ae0",
            "mov r0, r7",
            "bl fcn.00001cb4",
            "mov r0, r7",
            "mov r1, r5",
            "mov r2, r4",
            "bl fcn.00001cfc",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, 0x10",
            "bl fcn.00001cfc",
            "mov r0, r8",
            "mov r1, r7",
            "bl fcn.00001ae0",
            "add sp, sp, 0x168",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, sp",
            "bl fcn.00001cb4",
            "mov r1, r4",
            "mov r2, r7",
            "mov r0, sp",
            "add r4, sp, 0x158",
            "bl fcn.00001cfc",
            "mov r1, sp",
            "mov r0, r4",
            "bl fcn.00001ae0",
            "mov r7, 0x10",
            "b 0xe394"
        ]
    },
    "loc.imp.memcpy": {
        "function_address": "0x00001a14",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6d0]!"
        ]
    },
    "fcn.00001cb4": {
        "function_address": "0x00001cb4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x510]!"
        ]
    },
    "fcn.00001cfc": {
        "function_address": "0x00001cfc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4e0]!"
        ]
    },
    "fcn.00001ae0": {
        "function_address": "0x00001ae0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x648]!"
        ]
    },
    "sym.hmac_sha256_n": {
        "function_address": "0x00010fe0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xac",
            "ldr r4, [sp, 0xd4]",
            "add r7, sp, 8",
            "mov sb, r0",
            "mov sl, r1",
            "add r0, r7, 2",
            "mov r1, r2",
            "mov r2, r3",
            "mov fp, r3",
            "bl loc.imp.memcpy",
            "adds r8, r4, 0x1f",
            "lsl r5, r4, 3",
            "addmi r8, r4, 0x3e",
            "asr r8, r8, 5",
            "asr r2, r5, 8",
            "add r0, sp, 0xa8",
            "cmp r8, 0",
            "add r1, r0, fp",
            "strb r5, [r1, -0x9e]",
            "strb r2, [r1, -0x9d]",
            "ble 0x11098",
            "mov r4, 0",
            "add fp, fp, 4",
            "mov r5, 1",
            "add r6, sp, 0x88",
            "asr ip, r5, 8",
            "mov r0, sb",
            "mov r1, sl",
            "strb r5, [sp, 8]",
            "mov r2, r7",
            "mov r3, fp",
            "strb ip, [sp, 9]",
            "mov ip, 0",
            "str ip, [sp, 4]",
            "add r5, r5, 1",
            "str r6, [sp]",
            "bl fcn.00001b40",
            "ldr r3, [sp, 0xd0]",
            "mov r1, r6",
            "mov r2, 0x20",
            "add r0, r3, r4, lsl 5",
            "add r4, r4, 1",
            "bl loc.imp.memcpy",
            "cmp r8, r4",
            "bgt 0x11048",
            "add sp, sp, 0xac",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00001b40": {
        "function_address": "0x00001b40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x608]!"
        ]
    },
    "sym.aes_cmac_gen_subkeys": {
        "function_address": "0x00002b5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov ip, r0",
            "ldr r7, [0x00002cf4]",
            "sub sp, sp, 0x10",
            "mov r0, r1",
            "mov r4, r2",
            "ldr r8, [0x00002cf8]",
            "mov r1, ip",
            "add r7, pc, r7",
            "mov r5, r3",
            "mov r3, sp",
            "mov r6, sp",
            "add r2, r7, r8",
            "bl fcn.00001bc4",
            "mov r3, 0xf",
            "mov r1, 0",
            "ldrb r2, [r6, r3]",
            "orr r0, r1, r2, lsl 1",
            "lsr r1, r2, 7",
            "strb r0, [r4, r3]",
            "subs r3, r3, 1",
            "bhs 0x2b9c",
            "ldrsb r3, [sp]",
            "cmp r3, 0",
            "blt 0x2c38",
            "mov r3, 0xf",
            "mov r2, 0",
            "ldrb r1, [r4, r3]",
            "orr r2, r2, r1, lsl 1",
            "strb r2, [r5, r3]",
            "ldrb r2, [r4, r3]",
            "sub r3, r3, 1",
            "cmn r3, 1",
            "lsr r2, r2, 7",
            "bne 0x2bc8",
            "ldrsb r3, [r4]",
            "cmp r3, 0",
            "blt 0x2bfc",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}",
            "add r7, r7, r8",
            "add r3, r7, 0x10",
            "orr r2, r5, r3",
            "tst r2, 3",
            "movne r3, 0",
            "beq 0x2c74",
            "add r1, r7, 0x10",
            "ldrb r2, [r5, r3]",
            "ldrb r1, [r1, r3]",
            "eor r2, r1, r2",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2c14",
            "b 0x2bf4",
            "add r0, r7, r8",
            "add r3, r0, 0x10",
            "orr r2, r4, r3",
            "tst r2, 3",
            "movne r3, 0",
            "beq 0x2cb4",
            "add r1, r0, 0x10",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r1, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2c50",
            "b 0x2bc0",
            "ldr r2, [r7, 0x10]",
            "ldm r5, {r1, ip}",
            "ldr r0, [r5, 8]",
            "eor r1, r1, r2",
            "ldr r2, [r5, 0xc]",
            "str r1, [r5]",
            "ldr r1, [r3, 4]",
            "eor r1, ip, r1",
            "str r1, [r5, 4]",
            "ldr r1, [r3, 8]",
            "eor r1, r0, r1",
            "str r1, [r5, 8]",
            "ldr r3, [r3, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r5, 0xc]",
            "b 0x2bf4",
            "ldr r2, [r0, 0x10]",
            "ldm r4, {r1, ip}",
            "ldr r0, [r4, 8]",
            "eor r1, r1, r2",
            "ldr r2, [r4, 0xc]",
            "str r1, [r4]",
            "ldr r1, [r3, 4]",
            "eor r1, ip, r1",
            "str r1, [r4, 4]",
            "ldr r1, [r3, 8]",
            "eor r1, r0, r1",
            "str r1, [r4, 8]",
            "ldr r3, [r3, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r4, 0xc]",
            "b 0x2bc0"
        ]
    },
    "sym.BN_MONT_CTX_set": {
        "function_address": "0x0000be48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x38",
            "mov r4, r0",
            "add r7, sp, 0x1c",
            "mov sl, r1",
            "mov r0, r7",
            "add r8, r4, 0x18",
            "mov sb, r2",
            "mov r5, 0",
            "add r6, r4, 4",
            "bl fcn.00001d98",
            "mov r1, sl",
            "mov r0, r8",
            "bl fcn.00001ce4",
            "str r5, [r4, 0x24]",
            "mov r0, sl",
            "bl fcn.00001b10",
            "adds r2, r0, 0x1f",
            "mov r3, r0",
            "addmi r3, r3, 0x3e",
            "movpl r3, r2",
            "mov r1, r5",
            "bic r3, r3, 0x1f",
            "mov r0, r6",
            "str r3, [r4]",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "bne 0xbec0",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, r6",
            "mov r1, 0x20",
            "bl fcn.00001be8",
            "cmp r0, 0",
            "beq 0xbeb8",
            "ldr r3, [sl]",
            "add sl, sp, 8",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, sl",
            "ldr ip, [r3]",
            "mov r3, sb",
            "str r5, [sp, 0x34]",
            "str r5, [sp, 0x14]",
            "str ip, [sp, 0x30]",
            "add ip, sp, 0x30",
            "str ip, [sp, 8]",
            "mov ip, 1",
            "str ip, [sp, 0xc]",
            "mov ip, 2",
            "str ip, [sp, 0x10]",
            "bl fcn.00001bac",
            "cmp r0, 0",
            "beq 0xbeb8",
            "mov r0, r7",
            "mov r1, r7",
            "mov r2, 0x20",
            "bl fcn.00001d5c",
            "cmp r0, 0",
            "beq 0xbeb8",
            "ldr r3, [sp, 0x20]",
            "cmp r3, r5",
            "beq 0xbf5c",
            "cmp r3, 1",
            "bne 0xc000",
            "ldr r3, [sp, 0x1c]",
            "ldr r3, [r3]",
            "cmp r3, r5",
            "bne 0xc000",
            "mov r0, r7",
            "mvn r1, 0",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xbeb8",
            "mov r0, r7",
            "mov r1, 0",
            "mov r2, r7",
            "mov r3, sl",
            "str sb, [sp]",
            "bl fcn.00001bb8",
            "cmp r0, 0",
            "beq 0xbeb8",
            "ldr r3, [sp, 0x20]",
            "mov r0, r7",
            "cmp r3, 0",
            "ldrgt r3, [sp, 0x1c]",
            "movle r3, 0",
            "ldrgt r3, [r3]",
            "str r3, [r4, 0x40]",
            "bl fcn.00001c24",
            "mov r0, r6",
            "mov r1, 0",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xbeb8",
            "ldr r1, [r4]",
            "mov r0, r6",
            "lsl r1, r1, 1",
            "bl fcn.00001be8",
            "cmp r0, 0",
            "beq 0xbeb8",
            "mov r1, r6",
            "mov r0, 0",
            "mov r2, r6",
            "mov r3, r8",
            "str sb, [sp]",
            "bl fcn.00001bb8",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0xbeb8",
            "mov r0, r7",
            "mov r1, 1",
            "bl fcn.00001ba0",
            "cmp r0, 0",
            "beq 0xbeb8",
            "b 0xbf70"
        ]
    },
    "fcn.00001d98": {
        "function_address": "0x00001d98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x478]!"
        ]
    },
    "fcn.00001ce4": {
        "function_address": "0x00001ce4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4f0]!"
        ]
    },
    "fcn.00001b10": {
        "function_address": "0x00001b10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x628]!"
        ]
    },
    "fcn.00001be8": {
        "function_address": "0x00001be8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x598]!"
        ]
    },
    "fcn.00001bac": {
        "function_address": "0x00001bac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5c0]!"
        ]
    },
    "fcn.00001d5c": {
        "function_address": "0x00001d5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4a0]!"
        ]
    },
    "fcn.00001bb8": {
        "function_address": "0x00001bb8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5b8]!"
        ]
    },
    "fcn.00001c24": {
        "function_address": "0x00001c24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x570]!"
        ]
    },
    "fcn.00001ba0": {
        "function_address": "0x00001ba0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5c8]!"
        ]
    },
    "sym.SHA224": {
        "function_address": "0x00010e28",
        "instructions": [
            "ldr r3, [0x00010e8c]",
            "push {r4, r5, r6, r7, lr}",
            "subs r5, r2, 0",
            "sub sp, sp, 0x74",
            "mov r7, r0",
            "mov r6, r1",
            "add r3, pc, r3",
            "beq 0x10e7c",
            "mov r0, sp",
            "mov r4, sp",
            "bl fcn.00001a50",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r0, r5",
            "mov r1, sp",
            "bl fcn.00001abc",
            "mov r0, r5",
            "add sp, sp, 0x74",
            "pop {r4, r5, r6, r7, pc}",
            "ldr r5, [0x00010e90]",
            "add r5, r3, r5",
            "add r5, r5, 0x20",
            "b 0x10e48"
        ]
    },
    "fcn.00001a50": {
        "function_address": "0x00001a50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6a8]!"
        ]
    },
    "fcn.00001a2c": {
        "function_address": "0x00001a2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6c0]!"
        ]
    },
    "fcn.00001abc": {
        "function_address": "0x00001abc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x660]!"
        ]
    },
    "sym.BN_bin2bn": {
        "function_address": "0x00008ab0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r2, 0",
            "mov r6, r0",
            "mov r5, r1",
            "beq 0x8b90",
            "cmp r5, 0",
            "streq r5, [r4, 4]",
            "bne 0x8ad8",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}",
            "add r3, r5, 6",
            "ldr r2, [r4, 8]",
            "lsl r3, r3, 3",
            "subs r1, r3, 1",
            "addmi r3, r3, 0x1e",
            "movpl r3, r1",
            "cmp r2, r3, asr 5",
            "blt 0x8ba0",
            "sub r1, r5, 1",
            "mov r2, 0",
            "lsr ip, r1, 2",
            "mov r3, r2",
            "and r1, r1, 3",
            "str r2, [r4, 0xc]",
            "add ip, ip, 1",
            "str ip, [r4, 4]",
            "ldrb r0, [r6, r3]",
            "cmp r1, 0",
            "subeq ip, ip, 1",
            "add r3, r3, 1",
            "subne r1, r1, 1",
            "orr r2, r0, r2, lsl 8",
            "ldreq r0, [r4]",
            "streq r2, [r0, ip, lsl 2]",
            "moveq r2, r1",
            "moveq r1, 3",
            "cmp r5, r3",
            "bne 0x8b18",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "ble 0x8ad0",
            "ldr r2, [r4]",
            "sub r3, r3, 1",
            "ldr r1, [r2, r3, lsl 2]",
            "add r2, r2, r3, lsl 2",
            "cmp r1, 0",
            "beq 0x8b7c",
            "b 0x8ad0",
            "ldr r1, [r2, -4]!",
            "cmp r1, 0",
            "bne 0x8ad0",
            "cmp r3, 0",
            "str r3, [r4, 4]",
            "sub r3, r3, 1",
            "bgt 0x8b70",
            "b 0x8ad0",
            "bl fcn.00001de0",
            "subs r4, r0, 0",
            "beq 0x8ad0",
            "b 0x8ac4",
            "add r3, r5, 2",
            "mov r0, r4",
            "lsl r3, r3, 3",
            "add r1, r3, 0x1f",
            "cmp r3, 0",
            "movlt r3, r1",
            "asr r1, r3, 5",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "moveq r4, r0",
            "beq 0x8ad0",
            "b 0x8af8"
        ]
    },
    "fcn.00001de0": {
        "function_address": "0x00001de0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x448]!"
        ]
    },
    "sym.BN_mul": {
        "function_address": "0x00009c6c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r1",
            "ldr sl, [r1, 4]",
            "sub sp, sp, 0x14",
            "mov r6, r2",
            "mov r8, r0",
            "ldr r4, [r2, 4]",
            "mov sb, r3",
            "cmp sl, 0",
            "cmpne r4, 0",
            "bne 0x9cc0",
            "mov r1, 0",
            "bl fcn.00001af8",
            "subs r5, r0, 0",
            "movne r5, 1",
            "bne 0x9cb4",
            "mov r0, sb",
            "bl fcn.00001a5c",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r3",
            "bl fcn.00001a74",
            "cmp r8, r7",
            "cmpne r8, r6",
            "movne r5, r8",
            "beq 0x9dac",
            "ldr r2, [r6, 0xc]",
            "subs r1, sl, r4",
            "ldr r3, [r7, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r5, 0xc]",
            "bne 0x9cf8",
            "cmp sl, 8",
            "beq 0x9dc0",
            "cmp r4, 0xf",
            "cmpgt sl, 0xf",
            "add fp, r4, sl",
            "ble 0x9d20",
            "cmp r1, 1",
            "beq 0x9dec",
            "cmn r1, 1",
            "beq 0x9e98",
            "cmp r1, 0",
            "beq 0x9e10",
            "ldr r3, [r5, 8]",
            "cmp fp, r3",
            "bgt 0x9e7c",
            "str fp, [r5, 4]",
            "mov r2, sl",
            "ldr r0, [r5]",
            "ldr r1, [r7]",
            "ldr r3, [r6]",
            "str r4, [sp]",
            "bl fcn.00001a68",
            "ldr fp, [r5, 4]",
            "cmp fp, 0",
            "ble 0x9d8c",
            "ldr r3, [r5]",
            "sub fp, fp, 1",
            "ldr r2, [r3, fp, lsl 2]",
            "add r3, r3, fp, lsl 2",
            "cmp r2, 0",
            "beq 0x9d7c",
            "b 0x9d8c",
            "ldr r2, [r3, -4]!",
            "cmp r2, 0",
            "bne 0x9d8c",
            "cmp fp, 0",
            "str fp, [r5, 4]",
            "sub fp, fp, 1",
            "bgt 0x9d70",
            "cmp r8, r5",
            "moveq r5, 1",
            "beq 0x9cac",
            "mov r1, r5",
            "mov r0, r8",
            "bl fcn.00001ce4",
            "mov r5, 1",
            "b 0x9cac",
            "mov r0, sb",
            "bl fcn.00001a20",
            "subs r5, r0, 0",
            "bne 0x9cd8",
            "b 0x9cac",
            "ldr r3, [r5, 8]",
            "cmp r3, 0xf",
            "ble 0x9ec0",
            "mov r3, 0x10",
            "ldr r0, [r5]",
            "str r3, [r5, 4]",
            "ldr r1, [r7]",
            "ldr r2, [r6]",
            "bl fcn.00001948",
            "ldr fp, [r5, 4]",
            "b 0x9d4c",
            "ldr r3, [r6, 0x10]",
            "ands r3, r3, 2",
            "bne 0x9d20",
            "ldr r2, [r6, 8]",
            "cmp r4, r2",
            "bge 0x9d20",
            "ldr r2, [r6]",
            "str r3, [r2, r4, lsl 2]",
            "add r4, r4, 1",
            "mov r0, sl",
            "bl fcn.00001984",
            "sub r3, r0, 1",
            "mov r0, sb",
            "str r3, [sp, 0xc]",
            "bl fcn.00001a20",
            "ldr r3, [sp, 0xc]",
            "mov r2, 1",
            "mov ip, r0",
            "cmp sl, r2, lsl r3",
            "bne 0x9d20",
            "ldr r3, [r0, 8]",
            "lsl r4, sl, 2",
            "cmp r4, r3",
            "bgt 0x9edc",
            "ldr r3, [r5, 8]",
            "cmp r4, r3",
            "bgt 0x9efc",
            "ldr ip, [ip]",
            "mov r3, sl",
            "ldr r0, [r5]",
            "ldr r1, [r7]",
            "ldr r2, [r6]",
            "str ip, [sp]",
            "bl fcn.00001d14",
            "str fp, [r5, 4]",
            "b 0x9d4c",
            "mov r0, r5",
            "mov r1, fp",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0x9d2c",
            "mov r5, r0",
            "b 0x9cac",
            "ldr r3, [r7, 0x10]",
            "ands r3, r3, 2",
            "bne 0x9d20",
            "ldr r2, [r7, 8]",
            "cmp sl, r2",
            "bge 0x9d20",
            "ldr r2, [r7]",
            "str r3, [r2, sl, lsl 2]",
            "add sl, sl, 1",
            "b 0x9e10",
            "mov r0, r5",
            "mov r1, 0x10",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0x9dcc",
            "mov r5, r0",
            "b 0x9cac",
            "mov r1, r4",
            "str r0, [sp, 0xc]",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldr ip, [sp, 0xc]",
            "bne 0x9e4c",
            "mov r5, r0",
            "b 0x9cac",
            "mov r0, r5",
            "mov r1, r4",
            "str ip, [sp, 0xc]",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldr ip, [sp, 0xc]",
            "bne 0x9e58",
            "mov r5, r0",
            "b 0x9cac"
        ]
    },
    "fcn.00001a5c": {
        "function_address": "0x00001a5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6a0]!"
        ]
    },
    "fcn.00001a74": {
        "function_address": "0x00001a74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x690]!"
        ]
    },
    "fcn.00001a68": {
        "function_address": "0x00001a68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x698]!"
        ]
    },
    "fcn.00001a20": {
        "function_address": "0x00001a20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6c8]!"
        ]
    },
    "fcn.00001948": {
        "function_address": "0x00001948",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x758]!"
        ]
    },
    "fcn.00001984": {
        "function_address": "0x00001984",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x730]!"
        ]
    },
    "fcn.00001d14": {
        "function_address": "0x00001d14",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4d0]!"
        ]
    },
    "sym.do_passhash": {
        "function_address": "0x0000d0b8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "ldr r7, [r0, 0x14]",
            "sub sp, sp, 0x3c",
            "mov r8, r1",
            "cmp r7, 2",
            "mvngt r0, 0",
            "bgt 0xd180",
            "sub r2, r7, 1",
            "ldr r3, [r6, 0x50]",
            "add r2, r2, r2, lsl 2",
            "cmp r3, 0",
            "add r4, r6, r2, lsl 2",
            "add r4, r4, 0x18",
            "beq 0xd188",
            "add r2, r3, r8",
            "ldr sb, [r6, 0x40]",
            "cmp r2, 0x1000",
            "ldr sl, [r6, 0x44]",
            "rsbgt r8, r3, 0x1000",
            "cmp r8, 0",
            "ble 0xd168",
            "mov r7, 0",
            "add r5, sp, 0x14",
            "mov r2, sb",
            "mov r0, r6",
            "mov r1, 0x14",
            "mov r3, sl",
            "str r5, [sp]",
            "bl fcn.00001ab0",
            "mov r2, 0",
            "ldrb r1, [r5, r2]",
            "ldrb r3, [r4, r2]",
            "eor r3, r1, r3",
            "strb r3, [r4, r2]",
            "add r2, r2, 1",
            "cmp r2, 0x14",
            "bne 0xd134",
            "mov r0, r6",
            "mov r1, r5",
            "add r7, r7, 1",
            "bl loc.imp.memcpy",
            "cmp r8, r7",
            "bgt 0xd118",
            "ldr r3, [r6, 0x50]",
            "add r8, r8, r3",
            "cmp r8, 0x1000",
            "str r8, [r6, 0x50]",
            "movne r0, 1",
            "beq 0xd220",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr sl, [r6, 0x4c]",
            "add r5, sp, 0x14",
            "mov r0, r5",
            "sub r8, r1, 1",
            "ldr r1, [r6, 0x48]",
            "cmp sl, 0x20",
            "movge sl, 0x20",
            "ldr sb, [r6, 0x40]",
            "mov r2, sl",
            "ldr fp, [r6, 0x44]",
            "bl loc.imp.memcpy",
            "asr r3, r7, 0x10",
            "asr lr, r7, 0x18",
            "str r4, [sp]",
            "str r3, [sp, 8]",
            "asr r3, r7, 8",
            "mov r2, sb",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0x38",
            "add ip, r3, sl",
            "mov r0, r5",
            "strb lr, [ip, -0x24]",
            "mov r3, fp",
            "ldr lr, [sp, 8]",
            "add r1, sl, 4",
            "strb r7, [ip, -0x21]",
            "strb lr, [ip, -0x23]",
            "ldr lr, [sp, 0xc]",
            "strb lr, [ip, -0x22]",
            "bl fcn.00001ab0",
            "mov r2, 0x14",
            "mov r0, r6",
            "mov r1, r4",
            "bl loc.imp.memcpy",
            "mov r2, 1",
            "mov r3, r2",
            "str r2, [r6, 0x50]",
            "b 0xd0f4",
            "ldr r0, [r6, 0x14]",
            "mov r3, 0",
            "str r3, [r6, 0x50]",
            "add r0, r0, 1",
            "str r0, [r6, 0x14]",
            "cmp r0, 2",
            "movgt r0, 0",
            "movle r0, 1",
            "b 0xd180"
        ]
    },
    "fcn.00001ab0": {
        "function_address": "0x00001ab0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x668]!"
        ]
    },
    "sym.BN_nnmod": {
        "function_address": "0x0000af28",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, r1",
            "sub sp, sp, 8",
            "mov r5, r0",
            "mov r6, r2",
            "mov r0, 0",
            "str r3, [sp]",
            "mov r1, r5",
            "ldr r4, [0x0000afac]",
            "mov r2, ip",
            "mov r3, r6",
            "bl fcn.00001bb8",
            "cmp r0, 0",
            "add r4, pc, r4",
            "beq 0xaf98",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 0",
            "moveq r0, 1",
            "beq 0xaf98",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 0",
            "bne 0xafa0",
            "ldr r3, [0x0000afb0]",
            "ldr r3, [r4, r3]",
            "mov r0, r5",
            "mov r2, r6",
            "mov r1, r5",
            "blx r3",
            "add sp, sp, 8",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [0x0000afb4]",
            "ldr r3, [r4, r3]",
            "b 0xaf88"
        ]
    },
    "sym.BN_mod_exp_mont": {
        "function_address": "0x0000c018",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r3",
            "ldr r3, [r3]",
            "mov r8, r0",
            "sub sp, sp, 0x2a4",
            "mov r7, r2",
            "mov sl, r1",
            "ldr r6, [sp, 0x2c8]",
            "ldr r0, [r3]",
            "ands r0, r0, 1",
            "moveq r7, r0",
            "bne 0xc054",
            "mov r0, r7",
            "add sp, sp, 0x2a4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r7",
            "bl fcn.00001b10",
            "cmp r0, 0",
            "str r0, [sp, 0xc]",
            "beq 0xc194",
            "mov r0, r6",
            "bl fcn.00001a74",
            "mov r0, r6",
            "bl fcn.00001a20",
            "mov fp, r0",
            "mov r0, r6",
            "bl fcn.00001a20",
            "cmp fp, 0",
            "cmpne r0, 0",
            "mov sb, r0",
            "beq 0xc144",
            "ldr r2, [sp, 0x2cc]",
            "cmp r2, 0",
            "beq 0xc28c",
            "ldr ip, [sp, 0x2cc]",
            "str ip, [sp, 0x10]",
            "add r4, sp, 0x20",
            "mov r0, r4",
            "bl fcn.00001d98",
            "ldr r3, [sl, 0xc]",
            "cmp r3, 0",
            "bne 0xc0d4",
            "mov r0, sl",
            "mov r1, r5",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xc154",
            "mov r1, sl",
            "mov r0, r4",
            "mov r2, r5",
            "mov r3, r6",
            "bl fcn.000019a8",
            "cmp r0, 0",
            "movne r1, r4",
            "bne 0xc158",
            "mov r5, 1",
            "mov r7, r0",
            "ldr r2, [sp, 0x2cc]",
            "cmp r2, 0",
            "bne 0xc1a8",
            "ldr r0, [sp, 0x10]",
            "bl fcn.00001b34",
            "mov r0, r6",
            "bl fcn.00001a5c",
            "cmp r5, 0",
            "beq 0xc048",
            "add r4, sp, 0x20",
            "mov r6, 0",
            "add r0, r6, r6, lsl 2",
            "add r6, r6, 1",
            "add r0, r4, r0, lsl 2",
            "bl fcn.00001dc8",
            "cmp r6, r5",
            "blt 0xc128",
            "b 0xc048",
            "mov r0, r6",
            "mov r7, 0",
            "bl fcn.00001a5c",
            "b 0xc048",
            "mov r1, sl",
            "ldr r3, [r1, 4]",
            "cmp r3, 0",
            "beq 0xc17c",
            "cmp r3, 1",
            "bne 0xc1b4",
            "ldr r3, [r1]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xc1b4",
            "mov r0, r8",
            "mov r1, 0",
            "bl fcn.00001af8",
            "mov r5, 1",
            "mov r7, r0",
            "b 0xc0fc",
            "mov r0, r8",
            "mov r1, 1",
            "bl fcn.00001af8",
            "mov r7, r0",
            "b 0xc048",
            "mov r0, r6",
            "bl fcn.00001a5c",
            "b 0xc124",
            "ldr r2, [sp, 0x10]",
            "mov r0, r4",
            "ldr r3, [sp, 0x10]",
            "str r6, [sp]",
            "add r2, r2, 4",
            "str r2, [sp, 0x14]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc0f4",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 0x2a0",
            "movge r2, 6",
            "strge r2, [sp, 0x18]",
            "blt 0xc2bc",
            "mov r0, fp",
            "mov r1, r4",
            "mov r2, r4",
            "ldr r3, [sp, 0x10]",
            "str r6, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc0f4",
            "ldr r2, [sp, 0x18]",
            "mov r5, 1",
            "sub r3, r2, 1",
            "lsl r3, r5, r3",
            "cmp r3, r5",
            "ble 0xc2f8",
            "str sb, [sp, 0x1c]",
            "mov sl, r7",
            "mov sb, r8",
            "mov r7, r3",
            "ldr r8, [sp, 0x10]",
            "b 0xc244",
            "cmp r7, r5",
            "ble 0xc480",
            "add r3, r5, r5, lsl 2",
            "add r3, r4, r3, lsl 2",
            "mov r0, r3",
            "str r3, [sp, 8]",
            "bl fcn.00001d98",
            "ldr r3, [sp, 8]",
            "sub r1, r5, 1",
            "add r1, r1, r1, lsl 2",
            "mov r2, fp",
            "str r6, [sp]",
            "add r5, r5, 1",
            "mov r0, r3",
            "add r1, r4, r1, lsl 2",
            "mov r3, r8",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "bne 0xc23c",
            "b 0xc0f4",
            "bl fcn.00001b58",
            "subs r3, r0, 0",
            "str r3, [sp, 0x10]",
            "beq 0xc144",
            "mov r1, r5",
            "mov r2, r6",
            "bl fcn.00001978",
            "cmp r0, 0",
            "moveq r5, r0",
            "moveq r7, r5",
            "beq 0xc108",
            "b 0xc0a8",
            "cmp r3, 0xef",
            "movgt r3, 5",
            "strgt r3, [sp, 0x18]",
            "bgt 0xc1ec",
            "cmp r3, 0x4f",
            "movgt ip, 4",
            "strgt ip, [sp, 0x18]",
            "bgt 0xc1ec",
            "cmp r3, 0x17",
            "movgt ip, 3",
            "strgt ip, [sp, 0x18]",
            "bgt 0xc1ec",
            "mov r3, 1",
            "mov r5, r3",
            "str r3, [sp, 0x18]",
            "bl fcn.000019cc",
            "ldr r2, [sp, 0x14]",
            "mov r1, r0",
            "ldr r3, [sp, 0x10]",
            "mov r0, sb",
            "str r6, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc430",
            "ldr ip, [sp, 0xc]",
            "mov r2, 1",
            "str r8, [sp, 0x1c]",
            "mov r8, r6",
            "ldr fp, [sp, 0x18]",
            "sub sl, ip, 1",
            "str r2, [sp, 0xc]",
            "str r5, [sp, 0x18]",
            "str r4, [sp, 0x14]",
            "mov r0, r7",
            "mov r1, sl",
            "bl fcn.00001c3c",
            "cmp r0, 0",
            "beq 0xc408",
            "cmp fp, 1",
            "moveq r6, fp",
            "moveq r4, 0",
            "beq 0xc3ac",
            "subs r1, sl, 1",
            "movpl r6, 1",
            "movpl r4, 0",
            "movpl r5, r6",
            "bpl 0xc384",
            "b 0xc4f4",
            "subs r1, sl, r5",
            "bmi 0xc3ac",
            "mov r0, r7",
            "bl fcn.00001c3c",
            "rsb r3, r4, r5",
            "cmp r0, 0",
            "lsl r3, r6, r3",
            "movne r4, r5",
            "add r5, r5, 1",
            "orrne r6, r3, 1",
            "cmp fp, r5",
            "bgt 0xc37c",
            "ldr r2, [sp, 0xc]",
            "cmp r2, 0",
            "bne 0xc43c",
            "str r6, [sp, 0xc]",
            "mov r5, r2",
            "ldr r6, [sp, 0x10]",
            "b 0xc3d0",
            "cmp r4, r5",
            "blt 0xc438",
            "mov r0, sb",
            "mov r1, sb",
            "mov r2, sb",
            "mov r3, r6",
            "str r8, [sp]",
            "add r5, r5, 1",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "bne 0xc3c8",
            "ldr r5, [sp, 0x18]",
            "mov r6, r8",
            "ldr r4, [sp, 0x14]",
            "mov r7, r0",
            "b 0xc0fc",
            "ldr ip, [sp, 0xc]",
            "cmp ip, 0",
            "beq 0xc4c0",
            "cmp sl, 0",
            "beq 0xc490",
            "sub sl, sl, 1",
            "b 0xc340",
            "ldr r5, [sp, 0x18]",
            "mov r6, r8",
            "ldr r4, [sp, 0x14]",
            "mov r7, r0",
            "b 0xc0fc",
            "ldr r6, [sp, 0xc]",
            "ldr ip, [sp, 0x14]",
            "asr r2, r6, 1",
            "mov r0, sb",
            "ldr r3, [sp, 0x10]",
            "add r2, r2, r2, lsl 2",
            "mov r1, sb",
            "str r8, [sp]",
            "add r2, ip, r2, lsl 2",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc424",
            "mvn r4, r4",
            "adds sl, sl, r4",
            "bmi 0xc490",
            "mov r3, 0",
            "str r3, [sp, 0xc]",
            "b 0xc340",
            "mov r8, sb",
            "mov r7, sl",
            "ldr sb, [sp, 0x1c]",
            "b 0xc2f8",
            "mov r6, r8",
            "ldr r8, [sp, 0x1c]",
            "mov r1, sb",
            "ldr r2, [sp, 0x10]",
            "mov r3, r6",
            "ldr r5, [sp, 0x18]",
            "mov r0, r8",
            "ldr r4, [sp, 0x14]",
            "bl fcn.00001a80",
            "subs r7, r0, 0",
            "movne r7, 1",
            "b 0xc0fc",
            "mov r0, sb",
            "mov r1, sb",
            "mov r2, sb",
            "ldr r3, [sp, 0x10]",
            "str r8, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "bne 0xc414",
            "ldr r5, [sp, 0x18]",
            "mov r6, r8",
            "ldr r4, [sp, 0x14]",
            "ldr r7, [sp, 0xc]",
            "b 0xc0fc",
            "mov r6, 1",
            "mov r4, 0",
            "b 0xc3ac"
        ]
    },
    "fcn.00001da4": {
        "function_address": "0x00001da4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x470]!"
        ]
    },
    "fcn.000019a8": {
        "function_address": "0x000019a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x718]!"
        ]
    },
    "fcn.00001b34": {
        "function_address": "0x00001b34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x610]!"
        ]
    },
    "fcn.00001dc8": {
        "function_address": "0x00001dc8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x458]!"
        ]
    },
    "fcn.00001d2c": {
        "function_address": "0x00001d2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4c0]!"
        ]
    },
    "fcn.00001b58": {
        "function_address": "0x00001b58",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5f8]!"
        ]
    },
    "fcn.00001978": {
        "function_address": "0x00001978",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x738]!"
        ]
    },
    "fcn.000019cc": {
        "function_address": "0x000019cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x700]!"
        ]
    },
    "fcn.00001c3c": {
        "function_address": "0x00001c3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x560]!"
        ]
    },
    "fcn.00001a80": {
        "function_address": "0x00001a80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x688]!"
        ]
    },
    "sym.aes_unwrap": {
        "function_address": "0x00003204",
        "instructions": [
            "ldr ip, [0x000033c0]",
            "cmp r0, 0x18",
            "cmpne r0, 0x10",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c4",
            "mov r4, r3",
            "add ip, pc, ip",
            "str ip, [sp, 8]",
            "beq 0x323c",
            "cmp r0, 0x20",
            "beq 0x323c",
            "mov r0, 1",
            "add sp, sp, 0x2c4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "cmp r2, 0x188",
            "bhi 0x3230",
            "tst r2, 7",
            "bne 0x3230",
            "sub r2, r2, 8",
            "lsl r6, r0, 3",
            "str r2, [sp, 0x20]",
            "add sl, sp, 0x1b0",
            "ldr r3, [sp, 0x20]",
            "add ip, sp, 0x28",
            "mov r2, r6",
            "add r7, sp, 0x2b0",
            "mov r0, sl",
            "str ip, [sp, 0x24]",
            "lsr r6, r6, 5",
            "add r8, sp, 0x2a0",
            "lsr r5, r3, 3",
            "add fp, r7, 8",
            "add sb, r6, 6",
            "bl fcn.00001c9c",
            "sub r3, r5, 1",
            "mov r1, r4",
            "mov r2, 8",
            "mov r0, r7",
            "str r3, [sp, 0x14]",
            "bl loc.imp.memcpy",
            "ldr r0, [sp, 0x24]",
            "mov r3, 6",
            "ldr ip, [sp, 0x14]",
            "add r1, r4, 8",
            "ldr r2, [sp, 0x20]",
            "str r3, [sp, 0xc]",
            "add ip, r0, ip, lsl 3",
            "str ip, [sp, 0x1c]",
            "bl loc.imp.memcpy",
            "add r2, r5, r5, lsl 2",
            "rsb r3, r5, 0",
            "uxtb r3, r3",
            "add ip, r8, 8",
            "add r5, r5, r2",
            "str ip, [sp, 4]",
            "uxtb r5, r5",
            "str r3, [sp, 0x18]",
            "str r5, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "cmn r1, 1",
            "beq 0x3364",
            "ldr r4, [sp, 0x1c]",
            "mov r5, r1",
            "ldr r6, [sp, 0x10]",
            "ldrb r3, [sp, 0x2b7]",
            "mov r1, r4",
            "mov r2, 8",
            "mov r0, fp",
            "sub r5, r5, 1",
            "eor r3, r3, r6",
            "sub r6, r6, 1",
            "strb r3, [sp, 0x2b7]",
            "uxtb r6, r6",
            "bl loc.imp.memcpy",
            "mov r0, sl",
            "mov r1, sb",
            "mov r2, r7",
            "mov r3, r8",
            "bl fcn.00001b04",
            "ldm r8, {r0, r1}",
            "mov r2, 8",
            "stm r7, {r0, r1}",
            "mov r0, r4",
            "ldr r1, [sp, 4]",
            "sub r4, r4, 8",
            "bl loc.imp.memcpy",
            "cmn r5, 1",
            "bne 0x3304",
            "ldr ip, [sp, 0x10]",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0xc]",
            "add r3, ip, r1",
            "subs r2, r2, 1",
            "uxtb r3, r3",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "bne 0x32ec",
            "ldr r3, [sp, 8]",
            "mov r0, r7",
            "ldr r1, [0x000033c4]",
            "mov r2, 8",
            "add r1, r3, r1",
            "bl loc.imp.memcmp",
            "cmp r0, 0",
            "bne 0x3230",
            "ldr r0, [sp, 0x2e8]",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "bl loc.imp.memcpy",
            "ldr r0, [sp, 0xc]",
            "b 0x3234"
        ]
    },
    "fcn.00001c9c": {
        "function_address": "0x00001c9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x520]!"
        ]
    },
    "fcn.00001b04": {
        "function_address": "0x00001b04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x630]!"
        ]
    },
    "loc.imp.memcmp": {
        "function_address": "0x00001c30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x568]!"
        ]
    },
    "sym.BN_CTX_new": {
        "function_address": "0x00007f10",
        "instructions": [
            "push {r4, lr}",
            "mov r0, 0x2c0",
            "bl loc.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x7f30",
            "bl fcn.00001aa4",
            "mov r3, 1",
            "str r3, [r4, 0x284]",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.00001aa4": {
        "function_address": "0x00001aa4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x670]!"
        ]
    },
    "sym.aes_ccm_encrypt": {
        "function_address": "0x000025e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "add r4, sp, 0x30",
            "mov sb, 1",
            "mov r5, r2",
            "mov r7, r0",
            "mov sl, r1",
            "strb sb, [r4, -0x10]!",
            "mov r1, r2",
            "add r0, r4, sb",
            "mov r2, 0xd",
            "ldr fp, [sp, 0x5c]",
            "mov r8, r3",
            "add r6, sp, 0x10",
            "bl loc.imp.memcpy",
            "mov ip, 0",
            "mov r0, r7",
            "strb ip, [sp, 0x2e]",
            "mov r1, sl",
            "strb ip, [sp, 0x2f]",
            "mov r2, r5",
            "ldr ip, [sp, 0x58]",
            "mov r3, r8",
            "str fp, [sp, 4]",
            "str r6, [sp, 0xc]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x60]",
            "str ip, [sp, 8]",
            "bl fcn.00001bdc",
            "cmp r0, 0",
            "beq 0x2670",
            "mvn r0, 0",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r7",
            "mov r1, sl",
            "mov r2, r4",
            "mov r3, 8",
            "str r6, [sp]",
            "str r6, [sp, 4]",
            "bl fcn.00001ac8",
            "cmp r0, 0",
            "bne 0x2664",
            "mov r1, r6",
            "mov r2, 8",
            "ldr r0, [sp, 0x68]",
            "bl loc.imp.memcpy",
            "ldr ip, [sp, 0x60]",
            "mov r0, r7",
            "mov r1, sl",
            "mov r2, r4",
            "mov r3, fp",
            "strb sb, [sp, 0x2f]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x64]",
            "str ip, [sp, 4]",
            "bl fcn.00001ac8",
            "cmp r0, 0",
            "mvnne r0, 0",
            "b 0x2668"
        ]
    },
    "fcn.00001bdc": {
        "function_address": "0x00001bdc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5a0]!"
        ]
    },
    "fcn.00001ac8": {
        "function_address": "0x00001ac8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x658]!"
        ]
    },
    "sym.BN_bn2bin": {
        "function_address": "0x00008bd4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl fcn.00001b10",
            "adds r3, r0, 7",
            "addmi r0, r0, 0xe",
            "movpl r0, r3",
            "asr r0, r0, 3",
            "cmp r0, 0",
            "pople {r4, r5, r6, pc}",
            "sub r3, r0, 1",
            "asr r2, r3, 0x1f",
            "cmp r3, 0",
            "add r6, r3, 3",
            "ldr r1, [r4]",
            "movge r6, r3",
            "lsr r2, r2, 0x1e",
            "asr r6, r6, 2",
            "add ip, r3, r2",
            "ldr r1, [r1, r6, lsl 2]",
            "and ip, ip, 3",
            "rsb r2, r2, ip",
            "sub r3, r3, 1",
            "lsl r2, r2, 3",
            "cmn r3, 1",
            "lsr r2, r1, r2",
            "strb r2, [r5], 1",
            "bne 0x8c00",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.bn_mul_part_recursive": {
        "function_address": "0x00009f20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "ldr r4, [sp, 0x50]",
            "mov r5, r0",
            "mov sb, r1",
            "mov r8, r2",
            "mov r7, r3",
            "ldr r6, [sp, 0x54]",
            "cmp r4, 7",
            "ble 0x9fc0",
            "lsl r3, r4, 2",
            "mov r2, r4",
            "mov r0, r1",
            "add ip, r1, r3",
            "add lr, r8, r3",
            "mov r1, ip",
            "str r3, [sp, 0xc]",
            "str ip, [sp, 0x18]",
            "str lr, [sp, 0x1c]",
            "bl fcn.00001dec",
            "mov sl, r0",
            "mov r1, r8",
            "add sl, sl, sl, lsl 1",
            "ldr r0, [sp, 0x1c]",
            "mov r2, r4",
            "bl fcn.00001dec",
            "add sl, sl, r0",
            "add sl, sl, 4",
            "cmp sl, 8",
            "addls pc, pc, sl, lsl 2",
            "b 0xa168",
            "b 0xa1dc",
            "b 0xa240",
            "b 0xa240",
            "b 0x9fdc",
            "b 0x9fdc",
            "b 0x9fdc",
            "b 0x9fdc",
            "b 0xa200",
            "b 0xa200",
            "add r4, r4, r3",
            "mov r3, r2",
            "str r4, [sp, 0x50]",
            "mov r2, r4",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001a68",
            "ldr lr, [sp, 0xc]",
            "mov r1, sb",
            "ldr r2, [sp, 0x18]",
            "mov r3, r4",
            "mov r0, r6",
            "mov ip, 1",
            "add lr, r6, lr",
            "str lr, [sp, 0x14]",
            "str ip, [sp, 0x24]",
            "bl fcn.00001b88",
            "ldr r0, [sp, 0x14]",
            "mov r1, r8",
            "ldr r2, [sp, 0x1c]",
            "mov r3, r4",
            "bl fcn.00001b88",
            "cmp r4, 8",
            "lsl sl, r4, 1",
            "beq 0xa188",
            "lsl ip, r4, 3",
            "add r3, r6, r4, lsl 4",
            "ldr r2, [sp, 0x14]",
            "asr fp, r4, 1",
            "add lr, r6, ip",
            "str r3, [sp, 0x20]",
            "mov r0, lr",
            "str r3, [sp]",
            "mov r1, r6",
            "mov r3, r4",
            "str ip, [sp, 8]",
            "str lr, [sp, 0x10]",
            "bl fcn.00001d14",
            "ldr lr, [sp, 0x20]",
            "rsb r3, fp, r7",
            "str r3, [sp, 0x14]",
            "mov r0, r5",
            "mov r3, r4",
            "mov r1, sb",
            "mov r2, r8",
            "str lr, [sp]",
            "bl fcn.00001d14",
            "ldr r3, [sp, 0x14]",
            "ldr ip, [sp, 8]",
            "cmp r3, 0",
            "beq 0xa280",
            "ble 0xa2c8",
            "ldr lr, [sp, 0x20]",
            "add ip, r5, ip",
            "ldr r1, [sp, 0x18]",
            "mov r0, ip",
            "ldr r2, [sp, 0x1c]",
            "ldr r3, [sp, 0x14]",
            "stm sp, {fp, lr}",
            "str ip, [sp, 8]",
            "bl fcn.000019f0",
            "rsb r2, r7, r7, lsl 31",
            "add r0, sl, r7, lsl 1",
            "add r2, sl, r2, lsl 1",
            "add r0, r5, r0, lsl 2",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "bl loc.imp.memset",
            "ldr ip, [sp, 8]",
            "mov r3, sl",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, ip",
            "bl fcn.00001dd4",
            "ldr r3, [sp, 0x24]",
            "mov r7, r0",
            "cmp r3, 0",
            "beq 0xa264",
            "ldr r0, [sp, 0x10]",
            "mov r1, r6",
            "mov r3, sl",
            "mov r2, r0",
            "bl fcn.00001b88",
            "rsb r7, r0, r7",
            "ldr ip, [sp, 0xc]",
            "mov r3, sl",
            "ldr r2, [sp, 0x10]",
            "add r0, r5, ip",
            "mov r1, r0",
            "bl fcn.00001dd4",
            "adds r7, r0, r7",
            "beq 0xa160",
            "add r4, sl, r4",
            "ldr r2, [r5, r4, lsl 2]",
            "add r3, r5, r4, lsl 2",
            "add r2, r7, r2",
            "cmp r7, r2",
            "str r2, [r5, r4, lsl 2]",
            "bls 0xa160",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]!",
            "beq 0xa14c",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [sp, 0xc]",
            "cmp r4, 8",
            "mov ip, 0",
            "lsl sl, r4, 1",
            "str ip, [sp, 0x24]",
            "add r3, r6, r3",
            "str r3, [sp, 0x14]",
            "bne 0xa024",
            "mov ip, 0x40",
            "mov r1, r6",
            "add lr, r6, ip",
            "ldr r2, [sp, 0x14]",
            "add ip, r5, ip",
            "mov r0, lr",
            "str ip, [sp, 8]",
            "str lr, [sp, 0x10]",
            "bl fcn.00001948",
            "mov r0, r5",
            "mov r1, sb",
            "mov r2, r8",
            "bl fcn.00001948",
            "ldr ip, [sp, 8]",
            "mov r2, r7",
            "ldr r1, [sp, 0x18]",
            "ldr r3, [sp, 0x1c]",
            "mov r0, ip",
            "str r7, [sp]",
            "bl fcn.00001a68",
            "b 0xa0b4",
            "ldr lr, [sp, 0xc]",
            "mov r2, sb",
            "ldr r1, [sp, 0x18]",
            "mov r3, r4",
            "mov r0, r6",
            "mov ip, 0",
            "add lr, r6, lr",
            "str lr, [sp, 0x14]",
            "b 0x9ffc",
            "ldr lr, [sp, 0xc]",
            "mov r1, sb",
            "ldr r2, [sp, 0x18]",
            "mov r3, r4",
            "mov r0, r6",
            "mov ip, 0",
            "add lr, r6, lr",
            "str lr, [sp, 0x14]",
            "str ip, [sp, 0x24]",
            "bl fcn.00001b88",
            "ldr r0, [sp, 0x14]",
            "mov r2, r8",
            "ldr r1, [sp, 0x1c]",
            "mov r3, r4",
            "bl fcn.00001b88",
            "b 0xa018",
            "ldr lr, [sp, 0xc]",
            "mov r2, sb",
            "ldr r1, [sp, 0x18]",
            "mov r3, r4",
            "mov r0, r6",
            "mov ip, 1",
            "add lr, r6, lr",
            "str lr, [sp, 0x14]",
            "b 0xa220",
            "ldr r0, [sp, 0x10]",
            "mov r2, r6",
            "mov r3, sl",
            "mov r1, r0",
            "bl fcn.00001dd4",
            "add r7, r0, r7",
            "b 0xa110",
            "ldr lr, [sp, 0x20]",
            "add ip, r5, ip",
            "mov r0, ip",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "mov r3, fp",
            "str ip, [sp, 8]",
            "str lr, [sp]",
            "bl fcn.00001d14",
            "rsb r2, fp, fp, lsl 31",
            "add r0, sl, fp, lsl 1",
            "ldr r1, [sp, 0x14]",
            "add r2, sl, r2, lsl 1",
            "add r0, r5, r0, lsl 2",
            "lsl r2, r2, 2",
            "bl loc.imp.memset",
            "ldr ip, [sp, 8]",
            "b 0xa0d4",
            "add r8, r5, ip",
            "mov r1, 0",
            "mov r0, r8",
            "mov r2, ip",
            "bl loc.imp.memset",
            "cmp r7, 0xf",
            "ble 0xa320",
            "asr fp, fp, 1",
            "cmp r7, fp",
            "bgt 0xa344",
            "cmp fp, r7",
            "bne 0xa2e4",
            "ldr lr, [sp, 0x20]",
            "mov r0, r8",
            "ldr r1, [sp, 0x18]",
            "mov r3, fp",
            "ldr r2, [sp, 0x1c]",
            "str lr, [sp]",
            "str r8, [sp, 8]",
            "bl fcn.00001d14",
            "ldr ip, [sp, 8]",
            "b 0xa0d4",
            "ldr r1, [sp, 0x18]",
            "mov r0, r8",
            "mov r2, r7",
            "ldr r3, [sp, 0x1c]",
            "str r7, [sp]",
            "str r8, [sp, 8]",
            "bl fcn.00001a68",
            "ldr ip, [sp, 8]",
            "b 0xa0d4",
            "ldr lr, [sp, 0x20]",
            "mov r0, r8",
            "ldr r1, [sp, 0x18]",
            "rsb r3, fp, r7",
            "ldr r2, [sp, 0x1c]",
            "stm sp, {fp, lr}",
            "str r8, [sp, 8]",
            "bl fcn.000019f0",
            "ldr ip, [sp, 8]",
            "b 0xa0d4"
        ]
    },
    "fcn.00001dec": {
        "function_address": "0x00001dec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x440]!"
        ]
    },
    "fcn.00001b88": {
        "function_address": "0x00001b88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5d8]!"
        ]
    },
    "fcn.000019f0": {
        "function_address": "0x000019f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6e8]!"
        ]
    },
    "fcn.00001dd4": {
        "function_address": "0x00001dd4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x450]!"
        ]
    },
    "sym.BN_sub": {
        "function_address": "0x00008cc0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "ldr r6, [r1, 0xc]",
            "mov r5, r0",
            "mov r7, r2",
            "cmp r6, 0",
            "beq 0x8d0c",
            "ldr r3, [r2, 0xc]",
            "cmp r3, 0",
            "moveq r6, 1",
            "bne 0x8d6c",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "strne r6, [r5, 0xc]",
            "movne r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}",
            "ldr r3, [r2, 0xc]",
            "cmp r3, 0",
            "bne 0x8cec",
            "ldr r1, [r4, 4]",
            "ldr r2, [r7, 4]",
            "ldr r3, [r5, 8]",
            "cmp r1, r2",
            "movlt r1, r2",
            "cmp r1, r3",
            "bgt 0x8d90",
            "mov r0, r4",
            "mov r1, r7",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0x8da4",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "movne r3, 0",
            "movne r0, 1",
            "strne r3, [r5, 0xc]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r4, r2",
            "mov r7, r1",
            "ldr r2, [r7, 4]",
            "ldr r1, [r4, 4]",
            "ldr r3, [r5, 8]",
            "cmp r1, r2",
            "movlt r1, r2",
            "cmp r1, r3",
            "ble 0x8d34",
            "mov r0, r5",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "b 0x8d34",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r4",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "movne r0, 1",
            "strne r0, [r5, 0xc]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00001a98": {
        "function_address": "0x00001a98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x678]!"
        ]
    },
    "fcn.00001d74": {
        "function_address": "0x00001d74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x490]!"
        ]
    },
    "sym.BN_MONT_CTX_init": {
        "function_address": "0x00009318",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r5, [r0], 4",
            "bl fcn.00001d98",
            "add r0, r4, 0x18",
            "bl fcn.00001d98",
            "add r0, r4, 0x2c",
            "bl fcn.00001d98",
            "str r5, [r4, 0x44]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.SHA256_Update": {
        "function_address": "0x00010a3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r5, r2, 0",
            "mov r4, r0",
            "beq 0x10b0c",
            "ldr r3, [r0, 0x20]",
            "mov r6, r1",
            "add r2, r3, r5, lsl 3",
            "cmp r3, r2",
            "ldr r3, [r4, 0x68]",
            "ldrhi r0, [r4, 0x24]",
            "ldrls r0, [r0, 0x24]",
            "str r2, [r4, 0x20]",
            "addhi r0, r0, 1",
            "cmp r3, 0",
            "add r0, r0, r5, lsr 29",
            "str r0, [r4, 0x24]",
            "bne 0x10b14",
            "lsrs r7, r5, 6",
            "bne 0x10bec",
            "cmp r5, 0",
            "beq 0x10b0c",
            "lsrs r8, r5, 2",
            "str r5, [r4, 0x68]",
            "add r1, r4, 0x28",
            "and r5, r5, 3",
            "beq 0x10ae8",
            "mov r2, r8",
            "mov r3, r6",
            "ldrb r0, [r3, 1]",
            "subs r2, r2, 1",
            "ldrb sl, [r3]",
            "ldrb r7, [r3, 3]",
            "ldrb ip, [r3, 2]",
            "add r3, r3, 4",
            "lsl r0, r0, 0x10",
            "orr r0, r0, sl, lsl 24",
            "orr r0, r0, r7",
            "orr r0, r0, ip, lsl 8",
            "str r0, [r1], 4",
            "bne 0x10aac",
            "add r1, r8, 0xa",
            "add r6, r6, r8, lsl 2",
            "add r1, r4, r1, lsl 2",
            "cmp r5, 2",
            "add r3, r6, r5",
            "beq 0x10c68",
            "cmp r5, 3",
            "beq 0x10d70",
            "cmp r5, 1",
            "movne r3, 0",
            "beq 0x10c84",
            "str r3, [r1]",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "add r7, r5, r3",
            "lsr ip, r3, 2",
            "cmp r7, 0x3f",
            "and r3, r3, 3",
            "bls 0x10c0c",
            "cmp r3, 2",
            "add r2, ip, 0xa",
            "ldr r1, [r4, r2, lsl 2]",
            "beq 0x10b54",
            "cmp r3, 3",
            "beq 0x10b5c",
            "cmp r3, 1",
            "ldrbne r1, [r6], 1",
            "ldrb r3, [r6], 1",
            "lslne r1, r1, 0x18",
            "orr r1, r1, r3, lsl 16",
            "ldrb r3, [r6], 1",
            "orr r1, r1, r3, lsl 8",
            "ldrb r3, [r6]",
            "add r0, ip, 1",
            "cmp r0, 0xf",
            "add lr, r6, 1",
            "movhi r6, lr",
            "orr r1, r3, r1",
            "str r1, [r4, r2, lsl 2]",
            "bhi 0x10bc0",
            "add r2, r4, r2, lsl 2",
            "add r8, r4, 0x64",
            "ldrb r3, [r6, 2]",
            "ldrb r7, [r6, 1]",
            "ldrb r0, [r6, 4]",
            "ldrb r1, [r6, 3]",
            "add r6, r6, 4",
            "lsl r3, r3, 0x10",
            "orr r3, r3, r7, lsl 24",
            "orr r3, r3, r0",
            "orr r3, r3, r1, lsl 8",
            "str r3, [r2, 4]!",
            "cmp r2, r8",
            "bne 0x10b84",
            "rsb ip, ip, ip, lsl 30",
            "add lr, lr, ip, lsl 2",
            "add r6, lr, 0x3c",
            "mov r2, 1",
            "mov r0, r4",
            "add r1, r4, 0x28",
            "bl fcn.00001c90",
            "ldr r3, [r4, 0x68]",
            "mov r2, 0",
            "str r2, [r4, 0x68]",
            "sub r3, r3, 0x40",
            "add r5, r5, r3",
            "lsrs r7, r5, 6",
            "beq 0x10a88",
            "mov r2, r7",
            "lsl r7, r7, 6",
            "mov r1, r6",
            "mov r0, r4",
            "add r6, r6, r7",
            "bl fcn.00001ca8",
            "rsb r5, r7, r5",
            "b 0x10a88",
            "add r2, r5, r3",
            "str r7, [r4, 0x68]",
            "cmp r2, 3",
            "bhi 0x10c8c",
            "cmp r3, 1",
            "add r2, ip, 0xa",
            "ldr r1, [r4, r2, lsl 2]",
            "beq 0x10c44",
            "bhs 0x10d90",
            "ldrb r1, [r6]",
            "subs r5, r5, 1",
            "lsl r1, r1, 0x18",
            "beq 0x10c60",
            "add r6, r6, 1",
            "ldrb r3, [r6]",
            "cmp r5, 1",
            "orr r1, r1, r3, lsl 16",
            "beq 0x10c60",
            "add r6, r6, 1",
            "ldrb r3, [r6]",
            "orr r1, r1, r3, lsl 8",
            "str r1, [r4, r2, lsl 2]",
            "b 0x10b0c",
            "mov r0, 0",
            "ldrb r2, [r3, -1]!",
            "orr r2, r0, r2, lsl 16",
            "ldrb r3, [r3, -1]",
            "orr r3, r2, r3, lsl 24",
            "str r3, [r1]",
            "b 0x10b0c",
            "mov r2, 0",
            "b 0x10c74",
            "cmp r3, 0",
            "lsr r5, r7, 2",
            "and r7, r7, 3",
            "beq 0x10d80",
            "cmp r3, 2",
            "add r2, ip, 0xa",
            "ldr r1, [r4, r2, lsl 2]",
            "beq 0x10cbc",
            "cmp r3, 3",
            "beq 0x10cc4",
            "ldrb r3, [r6], 1",
            "orr r1, r1, r3, lsl 16",
            "ldrb r3, [r6], 1",
            "orr r1, r1, r3, lsl 8",
            "ldrb r0, [r6]",
            "add r3, ip, 1",
            "cmp r5, r3",
            "add r8, r6, 1",
            "orr r1, r0, r1",
            "str r1, [r4, r2, lsl 2]",
            "bls 0x10d3c",
            "lsl r1, ip, 2",
            "movw sl, 0xfffc",
            "movt sl, 0xffff",
            "add r3, r4, r2, lsl 2",
            "rsb sl, r1, sl",
            "add sl, sl, r5, lsl 2",
            "add sl, r6, sl",
            "ldrb r2, [r6, 2]",
            "ldrb sb, [r6, 1]",
            "ldrb r0, [r6, 4]",
            "ldrb r1, [r6, 3]",
            "add r6, r6, 4",
            "lsl r2, r2, 0x10",
            "cmp r6, sl",
            "orr r2, r2, sb, lsl 24",
            "orr r2, r2, r0",
            "orr r2, r2, r1, lsl 8",
            "str r2, [r3, 4]!",
            "bne 0x10cfc",
            "mvn ip, ip",
            "mov r3, r5",
            "add r5, ip, r5",
            "add r8, r8, r5, lsl 2",
            "cmp r7, 0",
            "beq 0x10b0c",
            "cmp r7, 2",
            "add r2, r8, r7",
            "beq 0x10da0",
            "cmp r7, 3",
            "movne r1, 0",
            "beq 0x10db0",
            "ldrb r2, [r2, -1]",
            "add r3, r3, 0xa",
            "orr r2, r1, r2, lsl 24",
            "str r2, [r4, r3, lsl 2]",
            "b 0x10b0c",
            "ldrb r0, [r6, 2]",
            "add r3, r6, 2",
            "lsl r0, r0, 8",
            "b 0x10c6c",
            "ldrb r1, [r6], 1",
            "add r2, ip, 0xa",
            "lsl r1, r1, 0x18",
            "b 0x10cb4",
            "cmp r3, 2",
            "beq 0x10c58",
            "str r1, [r4, r2, lsl 2]",
            "b 0x10b0c",
            "mov r0, 0",
            "ldrb r1, [r2, -1]!",
            "orr r1, r0, r1, lsl 16",
            "b 0x10d5c",
            "ldrb r0, [r8, 2]",
            "add r2, r8, 2",
            "lsl r0, r0, 8",
            "b 0x10da4"
        ]
    },
    "fcn.00001c90": {
        "function_address": "0x00001c90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x528]!"
        ]
    },
    "fcn.00001ca8": {
        "function_address": "0x00001ca8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x518]!"
        ]
    },
    "sym.aes_ccm_decrypt": {
        "function_address": "0x000026d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "mov r5, 1",
            "add r4, sp, 0x38",
            "mov sl, r2",
            "mov r7, r0",
            "strb r5, [r4, -0x10]!",
            "mov r8, r1",
            "mov r2, 0xd",
            "mov r1, sl",
            "add r0, r4, r5",
            "ldr r6, [sp, 0x64]",
            "ldr sb, [sp, 0x68]",
            "mov fp, r3",
            "bl loc.imp.memcpy",
            "mov ip, 0",
            "sub r6, r6, 8",
            "strb ip, [sp, 0x36]",
            "mov r0, r7",
            "ldr ip, [sp, 0x6c]",
            "mov r1, r8",
            "mov r2, r4",
            "mov r3, r6",
            "strb r5, [sp, 0x37]",
            "stm sp, {sb, ip}",
            "bl fcn.00001ac8",
            "subs r5, r0, 0",
            "beq 0x2754",
            "mvn r0, 0",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r2, [sp, 0x6c]",
            "add ip, sb, r6",
            "str ip, [sp]",
            "mov r0, r7",
            "mov r1, r8",
            "mov r3, 8",
            "add r2, r2, r6",
            "strb r5, [sp, 0x36]",
            "str r2, [sp, 0x14]",
            "mov r2, r4",
            "ldr ip, [sp, 0x14]",
            "strb r5, [sp, 0x37]",
            "str ip, [sp, 4]",
            "bl fcn.00001ac8",
            "cmp r0, 0",
            "bne 0x2748",
            "ldr ip, [sp, 0x60]",
            "add r4, sp, 0x18",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, sl",
            "mov r3, fp",
            "str ip, [sp]",
            "ldr ip, [sp, 0x6c]",
            "str r6, [sp, 4]",
            "str r4, [sp, 0xc]",
            "str ip, [sp, 8]",
            "bl fcn.00001bdc",
            "cmp r0, 0",
            "bne 0x2748",
            "mov r0, r4",
            "ldr r1, [sp, 0x14]",
            "mov r2, 8",
            "bl loc.imp.memcmp",
            "cmp r0, 0",
            "mvnne r0, 0",
            "b 0x274c"
        ]
    },
    "sym.bn_mul_high": {
        "function_address": "0x000097e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "mov fp, r2",
            "ldr r2, [sp, 0x40]",
            "mov r7, r3",
            "mov r8, r1",
            "mov r5, r0",
            "mov r0, r1",
            "ldr sl, [sp, 0x44]",
            "add r4, r2, r2, lsr 31",
            "asr r4, r4, 1",
            "lsl sb, r4, 2",
            "mov r2, r4",
            "add r3, r1, sb",
            "add ip, fp, sb",
            "mov r1, r3",
            "str r3, [sp, 0xc]",
            "str ip, [sp, 0x10]",
            "bl fcn.00001dec",
            "mov r6, r0",
            "mov r1, fp",
            "add r6, r6, r6, lsl 1",
            "ldr r0, [sp, 0x10]",
            "mov r2, r4",
            "bl fcn.00001dec",
            "add r6, r6, r0",
            "add r6, r6, 4",
            "cmp r6, 8",
            "addls pc, pc, r6, lsl 2",
            "b 0x9c04",
            "b 0x9be4",
            "b 0x9c04",
            "b 0x9a64",
            "b 0x9c04",
            "b 0x9c04",
            "b 0x9c04",
            "b 0x9884",
            "b 0x9c04",
            "b 0x9bc4",
            "ldr r2, [sp, 0xc]",
            "add ip, r5, sb",
            "str ip, [sp, 8]",
            "mov r1, r8",
            "mov r3, r4",
            "mov r0, r5",
            "mov ip, 1",
            "str ip, [sp, 0x14]",
            "bl fcn.00001b88",
            "ldr r0, [sp, 8]",
            "mov r1, fp",
            "ldr r2, [sp, 0x10]",
            "mov r3, r4",
            "bl fcn.00001b88",
            "cmp r4, 8",
            "beq 0x9aa4",
            "ldr ip, [sp, 0x40]",
            "mov r0, sl",
            "mov r1, r5",
            "ldr r2, [sp, 8]",
            "mov r3, r4",
            "add r6, sl, ip, lsl 2",
            "str r6, [sp]",
            "bl fcn.00001d14",
            "mov r0, r5",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 0x10]",
            "mov r3, r4",
            "str r6, [sp]",
            "bl fcn.00001d14",
            "cmp r7, 0",
            "beq 0x9ad4",
            "ldr r3, [sp, 0x40]",
            "mov r1, r5",
            "mov r2, r7",
            "add fp, r4, r3",
            "mov r3, r4",
            "add fp, sl, fp, lsl 2",
            "mov r0, fp",
            "mov r8, fp",
            "bl fcn.00001dd4",
            "ldr ip, [sp, 0x14]",
            "cmp ip, 0",
            "beq 0x9af0",
            "mov r0, r6",
            "mov r1, fp",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.00001b88",
            "cmp r7, 0",
            "beq 0x9b0c",
            "add r1, r7, sb",
            "mov r2, r6",
            "mov r3, r4",
            "mov r0, r8",
            "bl fcn.00001b88",
            "mov r2, r7",
            "mov r1, r8",
            "mov r3, r4",
            "mov r0, r6",
            "bl fcn.00001dd4",
            "mov r2, r5",
            "mov r7, r0",
            "mov r1, r6",
            "mov r0, r6",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "ldr r2, [sp, 0x14]",
            "add r7, r0, r7",
            "cmp r2, 0",
            "beq 0x9b5c",
            "mov r1, r6",
            "mov r0, r6",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.00001b88",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, r4",
            "rsb r7, r0, r7",
            "mov r0, r5",
            "bl fcn.00001dd4",
            "mov r1, r5",
            "mov r6, r0",
            "ldr r2, [sp, 8]",
            "mov r3, r4",
            "mov r0, r5",
            "bl fcn.00001dd4",
            "mov r1, r5",
            "add r6, r0, r6",
            "add r2, sl, sb",
            "mov r0, r5",
            "mov r3, r4",
            "bl fcn.00001b88",
            "rsb r6, r0, r6",
            "cmp r7, 0",
            "beq 0x9a2c",
            "ble 0x9c44",
            "ldr r3, [r5]",
            "add r3, r7, r3",
            "cmp r7, r3",
            "movls r7, 0",
            "movhi r7, 1",
            "str r3, [r5], 4",
            "cmp r7, 0",
            "bne 0x9a0c",
            "cmp r6, 0",
            "beq 0x9a5c",
            "ble 0x9c18",
            "ldr r3, [sp, 8]",
            "ldr r2, [r3]",
            "add r2, r6, r2",
            "cmp r6, r2",
            "movls r6, 0",
            "movhi r6, 1",
            "str r2, [r3], 4",
            "cmp r6, 0",
            "bne 0x9a3c",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r1, [sp, 0xc]",
            "add ip, r5, sb",
            "str ip, [sp, 8]",
            "mov r2, r8",
            "mov r3, r4",
            "mov r0, r5",
            "mov ip, 1",
            "str ip, [sp, 0x14]",
            "bl fcn.00001b88",
            "ldr r0, [sp, 8]",
            "mov r2, fp",
            "ldr r1, [sp, 0x10]",
            "mov r3, r4",
            "bl fcn.00001b88",
            "cmp r4, 8",
            "bne 0x98c4",
            "ldr r3, [sp, 0x40]",
            "mov r0, sl",
            "mov r1, r5",
            "ldr r2, [sp, 8]",
            "add r6, sl, r3, lsl 2",
            "bl fcn.00001948",
            "mov r0, r5",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 0x10]",
            "bl fcn.00001948",
            "cmp r7, 0",
            "bne 0x9904",
            "ldr ip, [sp, 0x14]",
            "mov fp, r5",
            "ldr r2, [sp, 0x40]",
            "cmp ip, 0",
            "add r8, r4, r2",
            "add r8, sl, r8, lsl 2",
            "bne 0x9934",
            "mov r0, r6",
            "mov r1, fp",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "cmp r7, 0",
            "bne 0x9950",
            "cmp r4, 0",
            "ble 0x9b34",
            "mov r3, r7",
            "ldr r2, [r6, r7]",
            "add r3, r3, 1",
            "cmp r3, r4",
            "rsb r2, r2, 0",
            "str r2, [r8, r7]",
            "add r7, r7, 4",
            "bne 0x9b18",
            "mov r2, r5",
            "mov r1, r8",
            "mov r0, r6",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "ldr r2, [sp, 0x14]",
            "mov r7, 0",
            "add r7, r0, r7",
            "cmp r2, 0",
            "bne 0x99a0",
            "mov r1, r6",
            "mov r0, r6",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "mov r2, r8",
            "mov r1, r5",
            "mov r3, r4",
            "add r7, r0, r7",
            "mov r0, r5",
            "bl fcn.00001dd4",
            "mov r1, r5",
            "mov r8, r0",
            "ldr r2, [sp, 8]",
            "mov r3, r4",
            "mov r0, r5",
            "bl fcn.00001dd4",
            "mov r1, r5",
            "mov r6, r0",
            "add r2, sl, sb",
            "mov r0, r5",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "add r6, r0, r6",
            "add r6, r6, r8",
            "b 0x9a00",
            "add ip, r5, sb",
            "mov r1, r8",
            "str ip, [sp, 8]",
            "mov r3, r4",
            "ldr r2, [sp, 0xc]",
            "mov r0, r5",
            "mov ip, 0",
            "b 0x9a80",
            "add ip, r5, sb",
            "ldr r1, [sp, 0xc]",
            "str ip, [sp, 8]",
            "mov r2, r8",
            "mov r3, r4",
            "mov r0, r5",
            "mov ip, 0",
            "b 0x98a0",
            "add r2, r5, sb",
            "mov r3, 0",
            "str r2, [sp, 8]",
            "str r3, [sp, 0x14]",
            "b 0x98bc",
            "ldr r3, [sp, 8]",
            "rsb r6, r6, 0",
            "ldr r2, [r3]",
            "rsb r1, r6, r2",
            "cmp r6, r2",
            "movls r6, 0",
            "movhi r6, 1",
            "cmp r6, 0",
            "str r1, [r3], 4",
            "bne 0x9c20",
            "b 0x9a5c",
            "rsb r7, r7, 0",
            "ldr r3, [r5]",
            "rsb r2, r7, r3",
            "cmp r7, r3",
            "movls r7, 0",
            "movhi r7, 1",
            "cmp r7, 0",
            "str r2, [r5], 4",
            "bne 0x9c48",
            "b 0x9a2c"
        ]
    },
    "sym.BN_CTX_end": {
        "function_address": "0x00007fa8",
        "instructions": [
            "ldr r1, [0x00008010]",
            "cmp r0, 0",
            "push {r3, lr}",
            "add r1, pc, r1",
            "popeq {r3, pc}",
            "ldr r3, [r0, 0x288]",
            "cmp r3, 0",
            "ble 0x7fec",
            "sub r2, r3, 1",
            "mov r1, 0",
            "cmp r2, 0xb",
            "str r1, [r0, 0x2bc]",
            "addle r3, r0, r3, lsl 2",
            "str r2, [r0, 0x288]",
            "ldrle r3, [r3, 0x288]",
            "strle r3, [r0]",
            "pop {r3, pc}",
            "ldr r3, [0x00008014]",
            "movw r2, 0x4bb",
            "ldr r0, [0x00008018]",
            "ldr ip, [0x0000801c]",
            "add r3, r1, r3",
            "add r0, r1, r0",
            "add r3, r3, 0x54",
            "add r1, r1, ip",
            "bl loc.imp.__assert",
            "ldrdeq r4, r5, [r1], -r4",
            "invalid"
        ]
    },
    "sym.bn_mul_normal": {
        "function_address": "0x000093a8",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r8, r2",
            "ldr r5, [sp, 0x20]",
            "mov r4, r0",
            "mov sl, r1",
            "mov r6, r3",
            "cmp r2, r5",
            "movlt r8, r5",
            "movlt sl, r6",
            "movlt r5, r2",
            "movlt r6, r1",
            "mov r0, r4",
            "mov r1, sl",
            "mov r2, r8",
            "ldr r3, [r6]",
            "sub r5, r5, 1",
            "add r7, r4, r8, lsl 2",
            "bl fcn.00001930",
            "cmp r5, 0",
            "str r0, [r4, r8, lsl 2]",
            "pople {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r1, sl",
            "mov r2, r8",
            "ldr r3, [r6, 4]",
            "add r0, r4, 4",
            "bl fcn.00001aec",
            "cmp r5, 1",
            "str r0, [r7, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "add r0, r4, 8",
            "popeq {r3, r4, r5, r6, r7, r8, sl, pc}",
            "ldr r3, [r6, 8]",
            "bl fcn.00001aec",
            "cmp r5, 2",
            "str r0, [r7, 8]",
            "mov r1, sl",
            "add r0, r4, 0xc",
            "mov r2, r8",
            "add r4, r4, 0x10",
            "popeq {r3, r4, r5, r6, r7, r8, sl, pc}",
            "ldr r3, [r6, 0xc]",
            "bl fcn.00001aec",
            "cmp r5, 3",
            "str r0, [r7, 0xc]",
            "mov r1, sl",
            "mov r2, r8",
            "sub r5, r5, 4",
            "mov r0, r4",
            "popeq {r3, r4, r5, r6, r7, r8, sl, pc}",
            "ldr r3, [r6, 0x10]!",
            "bl fcn.00001aec",
            "cmp r5, 0",
            "str r0, [r7, 0x10]!",
            "bgt 0x93fc",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00001930": {
        "function_address": "0x00001930",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "fcn.00001aec": {
        "function_address": "0x00001aec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x640]!"
        ]
    },
    "sym.BN_from_montgomery": {
        "function_address": "0x00008fd8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r8, r3",
            "sub sp, sp, 0x14",
            "mov fp, r0",
            "mov r0, r3",
            "mov r4, r1",
            "mov sl, r2",
            "bl fcn.00001a74",
            "mov r0, r8",
            "bl fcn.00001a20",
            "subs r5, r0, 0",
            "beq 0x92f8",
            "mov r1, r4",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "beq 0x92e0",
            "ldr r3, [sl]",
            "ldr r7, [sl, 0x1c]",
            "add r2, r3, 0x1f",
            "cmp r3, 0",
            "movlt r3, r2",
            "asrs r3, r3, 5",
            "str r3, [sp, 4]",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r7, 0",
            "orreq r3, r3, 1",
            "cmp r3, 0",
            "movne r3, 0",
            "movne r4, 1",
            "strne r3, [r5, 4]",
            "bne 0x92ec",
            "ldr r2, [sp, 4]",
            "add sb, r7, 1",
            "ldr r3, [r5, 8]",
            "add sb, sb, r2",
            "cmp sb, r3",
            "bgt 0x9300",
            "ldr r3, [fp, 8]",
            "cmp sb, r3",
            "bgt 0x92cc",
            "ldr r3, [r5, 4]",
            "ldr r1, [sl, 0x24]",
            "ldr r2, [r4, 0xc]",
            "cmp sb, r3",
            "ldr r6, [r5]",
            "eor r2, r1, r2",
            "str r2, [r5, 0xc]",
            "ldr ip, [sl, 0x18]",
            "ble 0x90c8",
            "lsl r2, r3, 2",
            "mov r1, r6",
            "mov r0, 0",
            "b 0x90b4",
            "ldr r1, [r5]",
            "add r3, r3, 1",
            "str r0, [r1, r2]",
            "cmp sb, r3",
            "add r2, r2, 4",
            "bgt 0x90b0",
            "cmp r7, 0",
            "str sb, [r5, 4]",
            "ldr r3, [sl, 0x40]",
            "ble 0x91a4",
            "add r4, r6, r7, lsl 2",
            "str r5, [sp, 8]",
            "str fp, [sp, 0xc]",
            "mov sb, 0",
            "mov fp, sl",
            "add r4, r4, 0x10",
            "mov sl, r8",
            "mov r5, r3",
            "mov r8, ip",
            "ldr r3, [r6]",
            "mov r0, r6",
            "mov r1, r8",
            "mov r2, r7",
            "add r6, r6, 4",
            "mul r3, r3, r5",
            "bl fcn.00001aec",
            "ldr r3, [r4, -0x10]",
            "add r3, r0, r3",
            "cmp r0, r3",
            "str r3, [r4, -0x10]",
            "bls 0x9180",
            "ldr r3, [r4, -0xc]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r4, -0xc]",
            "bne 0x9180",
            "ldr r3, [r4, -8]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r4, -8]",
            "bne 0x9180",
            "ldr r3, [r4, -4]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r4, -4]",
            "bne 0x9180",
            "mov r3, r4",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3], 4",
            "beq 0x916c",
            "add sb, sb, 1",
            "add r4, r4, 4",
            "cmp r7, sb",
            "bgt 0x90fc",
            "ldr r5, [sp, 8]",
            "mov r8, sl",
            "mov sl, fp",
            "ldr fp, [sp, 0xc]",
            "ldr sb, [r5, 4]",
            "cmp sb, 0",
            "ble 0x91e4",
            "ldr r3, [r5]",
            "sub sb, sb, 1",
            "ldr r2, [r3, sb, lsl 2]",
            "add r3, r3, sb, lsl 2",
            "cmp r2, 0",
            "beq 0x91d4",
            "b 0x91e4",
            "ldr r2, [r3, -4]!",
            "cmp r2, 0",
            "bne 0x91e4",
            "cmp sb, 0",
            "str sb, [r5, 4]",
            "sub sb, sb, 1",
            "bgt 0x91c8",
            "ldr r3, [r5, 0xc]",
            "ldr r4, [fp]",
            "str r3, [fp, 0xc]",
            "ldr r3, [sp, 4]",
            "ldm r5, {r6, lr}",
            "cmp r3, lr",
            "add r6, r6, r3, lsl 2",
            "movgt r3, 0",
            "strgt r3, [fp, 4]",
            "bgt 0x9294",
            "rsb lr, r3, lr",
            "sub sb, lr, 4",
            "str lr, [fp, 4]",
            "cmp sb, 0",
            "movle r3, 0",
            "ble 0x926c",
            "mov r2, r6",
            "mov r3, r4",
            "mov r1, 0",
            "ldr r7, [r2, 4]",
            "add r1, r1, 4",
            "ldr r5, [r2, 8]",
            "cmp sb, r1",
            "ldr r0, [r2, 0xc]",
            "ldr ip, [r2], 0x10",
            "str r7, [r3, 4]",
            "str r5, [r3, 8]",
            "str ip, [r3]",
            "str r0, [r3, 0xc]",
            "add r3, r3, 0x10",
            "bgt 0x9230",
            "sub r3, lr, 5",
            "bic r3, r3, 3",
            "add r3, r3, 4",
            "cmp lr, r3",
            "ble 0x9294",
            "lsl r2, r3, 2",
            "add r1, r6, r2",
            "add r2, r4, r2",
            "ldr r0, [r1], 4",
            "add r3, r3, 1",
            "cmp lr, r3",
            "str r0, [r2], 4",
            "bgt 0x9280",
            "add sl, sl, 0x18",
            "mov r0, fp",
            "mov r1, sl",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "movlt r4, 1",
            "blt 0x92e4",
            "mov r0, fp",
            "mov r2, sl",
            "mov r1, fp",
            "bl fcn.00001d74",
            "subs r4, r0, 0",
            "movne r4, 1",
            "b 0x92e4",
            "mov r0, fp",
            "mov r1, sb",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0x907c",
            "mov r4, r0",
            "mov r0, r8",
            "bl fcn.00001a5c",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r4, r5",
            "b 0x92e4",
            "mov r0, r5",
            "mov r1, sb",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "beq 0x92e0",
            "b 0x9070"
        ]
    },
    "sym.aes_decrypt": {
        "function_address": "0x00001e54",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "lsl r5, r0, 3",
            "sub sp, sp, 0xf4",
            "mov r6, r2",
            "mov r0, sp",
            "mov r2, r5",
            "mov r7, r3",
            "bl fcn.00001c9c",
            "lsr r1, r5, 5",
            "mov r0, sp",
            "mov r2, r6",
            "add r1, r1, 6",
            "mov r3, r7",
            "mov r4, sp",
            "bl fcn.00001b04",
            "add sp, sp, 0xf4",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.BN_add": {
        "function_address": "0x00008dc4",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "ldr r3, [r1, 0xc]",
            "mov r4, r2",
            "mov r6, r0",
            "ldr r7, [r2, 0xc]",
            "cmp r7, r3",
            "beq 0x8e50",
            "cmp r3, 0",
            "movne r3, r1",
            "movne r5, r2",
            "movne r4, r3",
            "mov r0, r5",
            "mov r1, r4",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0x8e2c",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "movne r3, 0",
            "movne r0, 1",
            "strne r3, [r6, 0xc]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r5",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "mov r0, 1",
            "str r0, [r6, 0xc]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "cmp r7, 0",
            "bne 0x8e44",
            "str r7, [r6, 0xc]",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.BN_uadd": {
        "function_address": "0x00008808",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r7, r1",
            "ldr r5, [r1, 4]",
            "mov r8, r2",
            "mov r6, r0",
            "ldr r4, [r2, 4]",
            "cmp r5, r4",
            "bge 0x883c",
            "mov r2, r5",
            "mov r7, r8",
            "mov r5, r4",
            "mov r8, r1",
            "mov r4, r2",
            "ldr r3, [r6, 8]",
            "cmp r3, r5",
            "ble 0x8918",
            "str r5, [r6, 4]",
            "mov r3, r4",
            "ldr r7, [r7]",
            "ldr sl, [r6]",
            "ldr r2, [r8]",
            "mov r1, r7",
            "mov r0, sl",
            "bl fcn.00001dd4",
            "lsl r3, r4, 2",
            "cmp r0, 0",
            "add r1, sl, r3",
            "add r0, r7, r3",
            "beq 0x88dc",
            "cmp r4, r5",
            "bge 0x8938",
            "ldr ip, [r7, r3]",
            "add r0, r0, 4",
            "add r1, r1, 4",
            "add r4, r4, 1",
            "add r2, ip, 1",
            "cmp r2, ip",
            "str r2, [sl, r3]",
            "movlo r2, r0",
            "movlo r3, r1",
            "bhs 0x88dc",
            "cmp r5, r4",
            "mov r1, r3",
            "mov r0, r2",
            "ble 0x8930",
            "ldr ip, [r2], 4",
            "add r4, r4, 1",
            "add r1, ip, 1",
            "mov r0, r2",
            "cmp ip, r1",
            "str r1, [r3], 4",
            "mov r1, r3",
            "bhi 0x88ac",
            "cmp r1, r0",
            "beq 0x8908",
            "cmp r4, r5",
            "bge 0x8908",
            "mov r3, 0",
            "ldr r2, [r0, r3]",
            "add r4, r4, 1",
            "cmp r5, r4",
            "str r2, [r1, r3]",
            "add r3, r3, 4",
            "bgt 0x88f0",
            "mov r3, 0",
            "mov r0, 1",
            "str r3, [r6, 0xc]",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r0, r6",
            "add r1, r5, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, r8, sl, pc}",
            "b 0x8848",
            "cmp r4, r5",
            "blt 0x88dc",
            "mov r3, 1",
            "str r3, [r1], 4",
            "ldr r3, [r6, 4]",
            "add r3, r3, 1",
            "str r3, [r6, 4]",
            "b 0x88dc"
        ]
    },
    "sym.DH_generate_key": {
        "function_address": "0x000048b4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, r0",
            "ldr r0, [r1, 0xc]",
            "sub sp, sp, 0xc",
            "mov r5, r1",
            "cmp r0, 0",
            "beq 0x4904",
            "cmp r4, 0",
            "beq 0x48e8",
            "mov r1, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "b fcn.000019e4",
            "bl fcn.00001b10",
            "adds r4, r0, 7",
            "addmi r4, r0, 0xe",
            "asr r4, r4, 3",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "bl fcn.00001de0",
            "subs r7, r0, 0",
            "moveq r4, r7",
            "beq 0x48f8",
            "bl fcn.00001de0",
            "subs r8, r0, 0",
            "moveq r4, r8",
            "moveq r6, r4",
            "beq 0x497c",
            "bl fcn.000019c0",
            "subs r6, r0, 0",
            "moveq r4, r6",
            "beq 0x4970",
            "ldr r3, [r5, 0x14]",
            "tst r3, 1",
            "bne 0x499c",
            "ldr sl, [r5, 0x18]",
            "ldr r1, [r5, 8]",
            "cmp r1, 0",
            "beq 0x4a0c",
            "mov r2, 0",
            "mov r0, r7",
            "mov r3, r2",
            "bl fcn.0000193c",
            "cmp r0, 0",
            "bne 0x49c8",
            "mov r4, r0",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 0",
            "beq 0x4a28",
            "ldr r3, [r5, 0x10]",
            "cmp r3, 0",
            "beq 0x4a1c",
            "cmp r6, 0",
            "beq 0x48f8",
            "mov r0, r6",
            "bl fcn.00001c54",
            "b 0x48f8",
            "bl fcn.00001b58",
            "cmp r0, 0",
            "mov sl, r0",
            "str r0, [r5, 0x18]",
            "beq 0x4948",
            "ldr r1, [r5]",
            "mov r2, r6",
            "bl fcn.00001978",
            "cmp r0, 0",
            "beq 0x496c",
            "b 0x4944",
            "ldr r1, [r5, 4]",
            "mov r0, r8",
            "ldr r3, [r5]",
            "mov r2, r7",
            "stm sp, {r6, sl}",
            "bl fcn.00004784",
            "cmp r0, 0",
            "beq 0x496c",
            "cmp r4, 0",
            "str r8, [r5, 0xc]",
            "str r7, [r5, 0x10]",
            "beq 0x4a34",
            "mov r1, r4",
            "mov r0, r8",
            "bl fcn.000019e4",
            "mov r4, r0",
            "b 0x4970",
            "ldr r0, [r5]",
            "bl fcn.00001b10",
            "sub r1, r0, 1",
            "b 0x4954",
            "mov r0, r7",
            "bl fcn.00001c24",
            "b 0x4988",
            "mov r0, r8",
            "bl fcn.00001c24",
            "b 0x497c",
            "mov r0, r8",
            "bl fcn.00001b10",
            "adds r3, r0, 7",
            "addmi r0, r0, 0xe",
            "movpl r0, r3",
            "asr r4, r0, 3",
            "b 0x4970"
        ]
    },
    "fcn.000019c0": {
        "function_address": "0x000019c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x708]!"
        ]
    },
    "fcn.0000193c": {
        "function_address": "0x0000193c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x760]!"
        ]
    },
    "fcn.00001c54": {
        "function_address": "0x00001c54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x550]!"
        ]
    },
    "fcn.00004784": {
        "function_address": "0x00004784",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x710]!",
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x558]!",
            "push {r4, r5, r6}",
            "ldr r4, [r1, 4]",
            "ldr r6, [sp, 0xc]",
            "cmp r4, 1",
            "ldr r5, [sp, 0x10]",
            "beq 0x47ac",
            "str r6, [sp, 0xc]",
            "str r5, [sp, 0x10]",
            "pop {r4, r5, r6}",
            "b 0x19b4",
            "ldr r1, [r1]",
            "ldr r1, [r1]",
            "pop {r4, r5, r6}",
            "b 0x1c48"
        ]
    },
    "fcn.000019e4": {
        "function_address": "0x000019e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6f0]!"
        ]
    },
    "sym.hmac_sha1": {
        "function_address": "0x0000d288",
        "instructions": [
            "cmp r3, 0x40",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c4",
            "mov r4, r3",
            "mov sb, r0",
            "mov fp, r1",
            "mov r7, r2",
            "ldr sl, [sp, 0x1e8]",
            "add r5, sp, 0x17c",
            "add r6, sp, 0x138",
            "rsble r8, r3, 0x41",
            "bgt 0xd3a0",
            "mov r2, r4",
            "mov r1, r7",
            "mov r0, r5",
            "bl loc.imp.memcpy",
            "mov r2, r8",
            "add r0, r5, r4",
            "mov r1, 0",
            "mov r4, 0",
            "bl loc.imp.memset",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, 0x41",
            "bl loc.imp.memcpy",
            "ldr r0, [r5, r4]",
            "movw r2, 0x3636",
            "ldr r1, [r6, r4]",
            "movw r3, 0x5c5c",
            "movt r2, 0x3636",
            "movt r3, 0x5c5c",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "str r2, [r5, r4]",
            "str r3, [r6, r4]",
            "add r4, r4, 4",
            "cmp r4, 0x40",
            "bne 0xd2ec",
            "add r7, sp, 0xd0",
            "add r8, sp, 0x68",
            "mov r0, r7",
            "bl fcn.00001b94",
            "mov r1, r7",
            "mov r0, r8",
            "mov r2, 0x68",
            "bl loc.imp.memcpy",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, r7",
            "bl fcn.00001c18",
            "mov r2, fp",
            "mov r1, sb",
            "mov r0, r7",
            "bl fcn.00001c18",
            "mov r1, sl",
            "mov r0, r7",
            "bl fcn.00001ad4",
            "mov r1, r6",
            "mov r2, r4",
            "mov r0, r8",
            "bl fcn.00001c18",
            "mov r1, sl",
            "mov r0, r8",
            "mov r2, 0x14",
            "bl fcn.00001c18",
            "mov r0, r8",
            "mov r1, sl",
            "bl fcn.00001ad4",
            "add sp, sp, 0x1c4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, sp",
            "mov r8, 0x2d",
            "bl fcn.00001b94",
            "mov r2, r4",
            "mov r1, r7",
            "mov r0, sp",
            "mov r4, 0x14",
            "bl fcn.00001c18",
            "mov r0, sp",
            "mov r1, r7",
            "bl fcn.00001ad4",
            "b 0xd2b8"
        ]
    },
    "fcn.00001b94": {
        "function_address": "0x00001b94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5d0]!"
        ]
    },
    "fcn.00001c18": {
        "function_address": "0x00001c18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x578]!"
        ]
    },
    "fcn.00001ad4": {
        "function_address": "0x00001ad4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x650]!"
        ]
    },
    "sym.SHA256_Final": {
        "function_address": "0x00010810",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "ldr r2, [r1, 0x68]",
            "mov r4, r0",
            "add r6, r1, 0x28",
            "ldr r3, [0x00010a24]",
            "ands ip, r2, 3",
            "lsr r2, r2, 2",
            "add r3, pc, r3",
            "beq 0x10868",
            "cmp ip, 2",
            "add r0, r2, 0xa",
            "ldr r1, [r1, r0, lsl 2]",
            "beq 0x109fc",
            "cmp ip, 3",
            "beq 0x10a14",
            "ldr ip, [0x00010a28]",
            "orr r1, r1, 0x800000",
            "add r3, r3, ip",
            "add r3, r3, 0x100",
            "add r3, r3, 1",
            "b 0x10880",
            "ldr ip, [0x00010a28]",
            "mov r1, 0x80000000",
            "add r0, r2, 0xa",
            "add r3, r3, ip",
            "add r3, r3, 0x100",
            "add r3, r3, 2",
            "add ip, r3, 1",
            "ldrb r3, [r3]",
            "orr r1, r1, r3, lsl 8",
            "ldrb r3, [ip]",
            "add r2, r2, 1",
            "cmp r2, 0xe",
            "orr r1, r3, r1",
            "str r1, [r5, r0, lsl 2]",
            "ble 0x1096c",
            "cmp r2, 0xf",
            "mov r0, r5",
            "moveq r3, 0",
            "mov r2, 1",
            "streq r3, [r5, 0x64]",
            "mov r1, r6",
            "bl fcn.00001c90",
            "mov r2, 0",
            "add r3, r2, 9",
            "mov r1, 0",
            "add r3, r5, r3, lsl 2",
            "add r2, r2, 1",
            "str r1, [r3, 4]!",
            "cmp r2, 0xd",
            "ble 0x108d0",
            "ldr r3, [r5, 0x20]",
            "mov r0, r5",
            "ldr ip, [r5, 0x24]",
            "mov r1, r6",
            "mov r2, 1",
            "str r3, [r5, 0x64]",
            "str ip, [r5, 0x60]",
            "bl fcn.00001c90",
            "ldr r3, [r5, 0x6c]",
            "cmp r3, 0x1c",
            "beq 0x109b8",
            "cmp r3, 0x20",
            "beq 0x10974",
            "bhi 0x10a0c",
            "lsrs r3, r3, 2",
            "beq 0x1095c",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r3, [r1], 4",
            "add r2, r2, 1",
            "strb r3, [r4, 3]",
            "lsr ip, r3, 0x18",
            "lsr r0, r3, 0x10",
            "lsr r3, r3, 8",
            "strb ip, [r4]",
            "strb r0, [r4, 1]",
            "strb r3, [r4, 2]",
            "add r4, r4, 4",
            "ldr r3, [r5, 0x6c]",
            "cmp r2, r3, lsr 2",
            "blo 0x10928",
            "mov r3, 0",
            "mov r0, 1",
            "str r3, [r5, 0x68]",
            "pop {r4, r5, r6, pc}",
            "bne 0x108c4",
            "b 0x108e0",
            "mov r2, r5",
            "add ip, r4, 0x20",
            "ldr r3, [r2], 4",
            "strb r3, [r4, 3]",
            "lsr r0, r3, 0x18",
            "lsr r1, r3, 0x10",
            "lsr r3, r3, 8",
            "strb r0, [r4]",
            "strb r1, [r4, 1]",
            "strb r3, [r4, 2]",
            "add r4, r4, 4",
            "cmp ip, r4",
            "bne 0x1097c",
            "mov r3, 0",
            "mov r0, 1",
            "str r3, [r5, 0x68]",
            "pop {r4, r5, r6, pc}",
            "mov r2, r5",
            "add ip, r4, 0x1c",
            "ldr r3, [r2], 4",
            "strb r3, [r4, 3]",
            "lsr r0, r3, 0x18",
            "lsr r1, r3, 0x10",
            "lsr r3, r3, 8",
            "strb r0, [r4]",
            "strb r1, [r4, 1]",
            "strb r3, [r4, 2]",
            "add r4, r4, 4",
            "cmp r4, ip",
            "bne 0x109c0",
            "mov r3, 0",
            "mov r0, 1",
            "str r3, [r5, 0x68]",
            "pop {r4, r5, r6, pc}",
            "ldr ip, [0x00010a28]",
            "add r3, r3, ip",
            "add r3, r3, 0x100",
            "b 0x10880",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "ldr ip, [0x00010a28]",
            "add r3, r3, ip",
            "add ip, r3, 0x100",
            "b 0x1088c"
        ]
    },
    "sym.aes_ctr_crypt": {
        "function_address": "0x000021f4",
        "instructions": [
            "cmp r3, 0x100000",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov sl, r0",
            "mvnhi r0, 0",
            "str r3, [sp]",
            "str r1, [sp, 4]",
            "bhi 0x22f0",
            "add r8, sp, 8",
            "mov r1, r2",
            "mov r0, r8",
            "mov r2, 0x10",
            "bl loc.imp.memcpy",
            "ldr r3, [sp]",
            "lsrs sb, r3, 4",
            "beq 0x22e0",
            "ldr r3, [sp, 4]",
            "add r6, sp, 0x18",
            "ldr r5, [sp, 0x54]",
            "mov r7, 0",
            "ldr r4, [sp, 0x50]",
            "ubfx fp, r3, 2, 0x1b",
            "add fp, fp, 6",
            "mov r3, r6",
            "mov r0, sl",
            "mov r1, fp",
            "mov r2, r8",
            "bl fcn.00001bc4",
            "orr r3, r5, r4",
            "tst r3, 3",
            "movne r3, 0",
            "beq 0x22f8",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r6, r3]",
            "eor r2, r1, r2",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2274",
            "ldrb r3, [sp, 0x17]",
            "add r7, r7, 1",
            "add r4, r4, 0x10",
            "add r5, r5, 0x10",
            "add r3, r3, 1",
            "uxtb r3, r3",
            "cmp r3, 0",
            "strb r3, [sp, 0x17]",
            "ldrbeq r3, [sp, 0x16]",
            "addeq r3, r3, 1",
            "strbeq r3, [sp, 0x16]",
            "cmp r7, sb",
            "blo 0x2250",
            "ldr r3, [sp, 0x50]",
            "lsl sb, sb, 4",
            "add r3, r3, sb",
            "str r3, [sp, 0x50]",
            "ldr r3, [sp, 0x54]",
            "add r3, r3, sb",
            "str r3, [sp, 0x54]",
            "ldr r3, [sp]",
            "ands r4, r3, 0xf",
            "moveq r0, r4",
            "bne 0x2338",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [r4]",
            "ldr r1, [r6]",
            "ldmib r6, {r0, r2}",
            "eor r1, r1, r3",
            "ldr r3, [r6, 0xc]",
            "str r1, [r5]",
            "ldr r1, [r4, 4]",
            "eor r1, r0, r1",
            "str r1, [r5, 4]",
            "ldr r1, [r4, 8]",
            "eor r2, r2, r1",
            "str r2, [r5, 8]",
            "ldr r2, [r4, 0xc]",
            "eor r3, r3, r2",
            "str r3, [r5, 0xc]",
            "b 0x2290",
            "ldr r3, [sp, 4]",
            "add r6, sp, 0x18",
            "mov r0, sl",
            "mov r2, r8",
            "ubfx r1, r3, 2, 0x1b",
            "mov r3, r6",
            "add r1, r1, 6",
            "bl fcn.00001bc4",
            "ldr r0, [sp, 0x50]",
            "mov r3, 0",
            "ldr ip, [sp, 0x54]",
            "ldrb r2, [r0, r3]",
            "ldrb r1, [r6, r3]",
            "eor r2, r1, r2",
            "strb r2, [ip, r3]",
            "add r3, r3, 1",
            "cmp r3, r4",
            "bne 0x2364",
            "mov r0, 0",
            "b 0x22f0"
        ]
    },
    "sym.SHA1Result": {
        "function_address": "0x0000cbe8",
        "instructions": [
            "cmp r0, 0",
            "cmpne r1, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "sub sp, sp, 8",
            "moveq r5, 1",
            "beq 0xcc48",
            "ldr r5, [r0, 0x64]",
            "cmp r5, 0",
            "bne 0xcc48",
            "ldr r3, [r0, 0x60]",
            "cmp r3, 0",
            "beq 0xcc54",
            "mov r3, 0",
            "asr r0, r3, 2",
            "mvn r2, r3",
            "and r2, r2, 3",
            "ldr r0, [r4, r0, lsl 2]",
            "lsl r2, r2, 3",
            "lsr r2, r0, r2",
            "strb r2, [r1, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "bne 0xcc20",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldrh r3, [r0, 0x1c]",
            "sxth r2, r3",
            "cmp r2, 0x37",
            "ble 0xcd8c",
            "add ip, r3, 1",
            "add r2, r0, r2",
            "uxth ip, ip",
            "mvn r0, 0x7f",
            "strb r0, [r2, 0x1e]",
            "sxth r2, ip",
            "strh ip, [r4, 0x1c]",
            "cmp r2, 0x3f",
            "bgt 0xccbc",
            "uxth lr, r3",
            "add r2, r4, r2",
            "add r2, r2, 0x1d",
            "mov r3, lr",
            "mov r0, r5",
            "add r3, r3, 1",
            "strb r0, [r2, 1]!",
            "uxth r3, r3",
            "cmp r3, 0x3f",
            "bne 0xcc9c",
            "rsb r3, lr, ip",
            "add r3, r3, 0x3f",
            "strh r3, [r4, 0x1c]",
            "mov r0, r4",
            "str r1, [sp, 4]",
            "bl fcn.0000c8f4",
            "ldrh r3, [r4, 0x1c]",
            "ldr r1, [sp, 4]",
            "sxth r2, r3",
            "cmp r2, 0x37",
            "bgt 0xcd08",
            "add r2, r4, r2",
            "uxth r3, r3",
            "add r2, r2, 0x1d",
            "mov r0, 0",
            "add r3, r3, 1",
            "strb r0, [r2, 1]!",
            "uxth r3, r3",
            "cmp r3, 0x38",
            "bne 0xccec",
            "mov r3, 0x38",
            "strh r3, [r4, 0x1c]",
            "ldr r2, [r4, 0x18]",
            "mov r0, r4",
            "ldr r3, [r4, 0x14]",
            "strb r2, [r4, 0x59]",
            "lsr r8, r2, 0x18",
            "lsr r7, r2, 0x10",
            "lsr ip, r3, 8",
            "lsr lr, r3, 0x10",
            "lsr r6, r2, 8",
            "lsr r2, r3, 0x18",
            "strb ip, [r4, 0x5c]",
            "strb r2, [r4, 0x5a]",
            "strb r3, [r4, 0x5d]",
            "strb r8, [r4, 0x56]",
            "strb r7, [r4, 0x57]",
            "strb r6, [r4, 0x58]",
            "strb lr, [r4, 0x5b]",
            "str r1, [sp, 4]",
            "bl fcn.0000c8f4",
            "ldr r1, [sp, 4]",
            "mov r3, 0",
            "add r2, r4, 0x1d",
            "mov ip, r3",
            "add r3, r3, 1",
            "mov r0, 0",
            "cmp r3, 0x40",
            "strb ip, [r2, 1]!",
            "bne 0xcd64",
            "mov r3, 1",
            "str r0, [r4, 0x14]",
            "str r0, [r4, 0x18]",
            "str r3, [r4, 0x60]",
            "b 0xcc1c",
            "add ip, r3, 1",
            "add r2, r0, r2",
            "uxth ip, ip",
            "mvn r0, 0x7f",
            "strb r0, [r2, 0x1e]",
            "sxth r2, ip",
            "strh ip, [r4, 0x1c]",
            "cmp r2, 0x38",
            "beq 0xcd08",
            "uxth lr, r3",
            "add r2, r4, r2",
            "add r2, r2, 0x1d",
            "mov r3, lr",
            "mov r0, r5",
            "add r3, r3, 1",
            "strb r0, [r2, 1]!",
            "uxth r3, r3",
            "cmp r3, 0x37",
            "bne 0xcdc4",
            "rsb r3, lr, ip",
            "add r3, r3, 0x37",
            "strh r3, [r4, 0x1c]",
            "b 0xcd08"
        ]
    },
    "fcn.0000c8f4": {
        "function_address": "0x0000c8f4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp}",
            "sub sp, sp, 0x158",
            "add r3, sp, 0x18",
            "mov r2, r0",
            "sub ip, r3, 4",
            "add r6, r3, 0x3c",
            "mov r1, ip",
            "str r0, [sp]",
            "ldrb r0, [r2, 0x1f]",
            "ldrb r7, [r2, 0x1e]",
            "ldrb r5, [r2, 0x21]",
            "ldrb r4, [r2, 0x20]",
            "add r2, r2, 4",
            "lsl r0, r0, 0x10",
            "orr r0, r0, r7, lsl 24",
            "orr r0, r0, r5",
            "orr r0, r0, r4, lsl 8",
            "str r0, [r1, 4]!",
            "cmp r1, r6",
            "bne 0xc914",
            "mov r2, r3",
            "mov r1, 0",
            "ldr r6, [r2, 0x20]",
            "ldr r0, [r2, 0x34]",
            "ldr r5, [r2, 8]",
            "ldr r4, [r3, r1]",
            "add r1, r1, 4",
            "eor r0, r6, r0",
            "cmp r1, 0x100",
            "eor r0, r0, r5",
            "eor r0, r0, r4",
            "ror r0, r0, 0x1f",
            "str r0, [r2, 0x40]",
            "add r2, r2, 4",
            "bne 0xc94c",
            "ldr r1, [sp]",
            "add fp, r3, 0x4c",
            "ldr r2, [sp]",
            "mov sb, r3",
            "ldr r1, [r1]",
            "ldr r2, [r2, 4]",
            "str r1, [sp, 4]",
            "ldr r1, [sp]",
            "str r2, [sp, 8]",
            "ldr r2, [sp]",
            "ldr r1, [r1, 8]",
            "ldr r4, [sp, 4]",
            "ldr r2, [r2, 0xc]",
            "str r1, [sp, 0xc]",
            "ldr r1, [sp]",
            "str r2, [sp, 0x10]",
            "mov r5, r2",
            "ldr r0, [sp, 8]",
            "ldr r1, [r1, 0x10]",
            "ldr r6, [sp, 0xc]",
            "str r1, [sp, 0x14]",
            "mov r7, r1",
            "b 0xc9e8",
            "mov r5, r6",
            "mov r4, r2",
            "mov r6, r1",
            "ldr sl, [ip, 4]!",
            "movw r3, 0x7999",
            "movt r3, 0x5a82",
            "bic r8, r5, r0",
            "and r2, r6, r0",
            "ror r1, r0, 2",
            "add r3, sl, r3",
            "add r3, r3, r7",
            "cmp ip, fp",
            "add r3, r3, r4, ror 27",
            "orr r2, r8, r2",
            "mov r7, r5",
            "mov r0, r4",
            "add r2, r3, r2",
            "bne 0xc9dc",
            "mov r3, sb",
            "mov ip, r2",
            "add sb, sb, 0x4c",
            "add r7, r3, 0x9c",
            "b 0xca44",
            "mov r6, r1",
            "mov ip, r0",
            "mov r1, r2",
            "ldr sl, [sb, 4]!",
            "movw r0, 0xeba1",
            "movt r0, 0x6ed9",
            "eor r8, r1, r4",
            "eor r8, r8, r6",
            "ror r2, r4, 2",
            "add r0, sl, r0",
            "add r0, r0, r5",
            "cmp sb, r7",
            "add r0, r0, ip, ror 27",
            "mov r5, r6",
            "mov r4, ip",
            "add r0, r0, r8",
            "bne 0xca38",
            "add r4, r3, 0x9c",
            "add r7, r3, 0xec",
            "mov r5, r0",
            "b 0xca98",
            "mov r1, r2",
            "mov r5, r0",
            "mov r2, sb",
            "ldr sb, [r4, 4]!",
            "movw r0, 0xbcdc",
            "movt r0, 0x8f1b",
            "orr sl, r1, r2",
            "and sl, sl, ip",
            "and r8, r1, r2",
            "add r0, sb, r0",
            "cmp r4, r7",
            "add r0, r0, r6",
            "orr r8, sl, r8",
            "add r0, r0, r5, ror 27",
            "ror sb, ip, 2",
            "mov r6, r1",
            "mov ip, r5",
            "add r0, r0, r8",
            "bne 0xca8c",
            "add r4, r3, 0xec",
            "add r3, r3, 0x13c",
            "b 0xcaf0",
            "mov r2, sb",
            "mov r0, ip",
            "mov sb, r8",
            "ldr r7, [r4, 4]!",
            "movw ip, 0xc1d6",
            "movt ip, 0xca62",
            "eor r6, sb, r5",
            "eor r6, r6, r2",
            "ror r8, r5, 2",
            "add ip, r7, ip",
            "add ip, ip, r1",
            "cmp r4, r3",
            "add ip, ip, r0, ror 27",
            "mov r1, r2",
            "mov r5, r0",
            "add ip, ip, r6",
            "bne 0xcae4",
            "ldr r1, [sp]",
            "mov r3, 0",
            "strh r3, [r1, 0x1c]",
            "ldr r3, [sp, 4]",
            "ldr r1, [sp, 8]",
            "add ip, ip, r3",
            "ldr r3, [sp, 0xc]",
            "add r0, r0, r1",
            "ldr r1, [sp, 0x10]",
            "add r8, r8, r3",
            "ldr r3, [sp, 0x14]",
            "add sb, sb, r1",
            "ldr r1, [sp]",
            "add r2, r2, r3",
            "str ip, [r1]",
            "stmib r1, {r0, r8, sb}",
            "str r2, [r1, 0x10]",
            "add sp, sp, 0x158",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp}",
            "bx lr"
        ]
    },
    "sym.MD5Final": {
        "function_address": "0x0000e290",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "ldr r1, [r1]",
            "sub sp, sp, 0x44",
            "mov r5, r0",
            "add r7, sp, 0x34",
            "ldr r3, [0x0000e368]",
            "ubfx r2, r1, 3, 6",
            "ldr r0, [r4, 4]",
            "str r1, [sp, 0x38]",
            "cmp r2, 0x37",
            "ldr r1, [0x0000e36c]",
            "add r3, pc, r3",
            "str r0, [sp, 0x3c]",
            "rsble r2, r2, 0x38",
            "rsbgt r2, r2, 0x78",
            "mov r0, r4",
            "add r1, r3, r1",
            "bl fcn.00001cfc",
            "mov r3, r4",
            "sub r2, sp, 4",
            "ldrb r0, [r3, 0x1a]",
            "ldrb r6, [r3, 0x1b]",
            "ldrb lr, [r3, 0x18]",
            "ldrb ip, [r3, 0x19]",
            "add r3, r3, 4",
            "lsl r0, r0, 0x10",
            "orr r0, r0, r6, lsl 24",
            "orr r0, r0, lr",
            "orr r0, r0, ip, lsl 8",
            "str r0, [r2, 4]!",
            "cmp r2, r7",
            "bne 0xe2e4",
            "add r0, r4, 8",
            "mov r1, sp",
            "bl fcn.0000d714",
            "add r3, r4, 4",
            "mov r2, 0",
            "ldr r1, [r3, 4]!",
            "add r2, r2, 4",
            "cmp r2, 0x10",
            "strb r1, [r3, 0x50]",
            "lsr ip, r1, 8",
            "lsr r0, r1, 0x10",
            "lsr r1, r1, 0x18",
            "strb ip, [r3, 0x51]",
            "strb r0, [r3, 0x52]",
            "strb r1, [r3, 0x53]",
            "bne 0xe328",
            "mov r0, r5",
            "add r1, r4, 0x58",
            "bl loc.imp.memcpy",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000d714": {
        "function_address": "0x0000d714",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp}",
            "movw r2, 0xa478",
            "ldr r8, [r1, 4]",
            "sub sp, sp, 0x38",
            "movt r2, 0xd76a",
            "movw r6, 0xb756",
            "ldr r3, [r0, 4]",
            "movt r6, 0xe8c7",
            "ldr r7, [r0, 0xc]",
            "movw fp, 0xd7be",
            "ldr r4, [r0, 8]",
            "movt fp, 0x895c",
            "ldr sb, [r0]",
            "ldr r5, [r1]",
            "add r6, r7, r6",
            "str r8, [sp]",
            "and ip, r4, r3",
            "ldr sl, [r1, 8]",
            "bic r4, r7, r3",
            "add r2, sb, r2",
            "orr r4, r4, ip",
            "add r2, r2, r5",
            "add r6, r6, r8",
            "str sl, [sp, 4]",
            "add r4, r2, r4",
            "ldr ip, [r1, 0xc]",
            "add r4, r3, r4, ror 25",
            "ldr r2, [r0, 8]",
            "movw r7, 0x70db",
            "movt r7, 0x2420",
            "str ip, [sp, 8]",
            "bic ip, r2, r4",
            "and r2, r4, r3",
            "orr ip, ip, r2",
            "ldr r8, [r1, 0x10]",
            "add ip, r6, ip",
            "ldr r6, [r0, 8]",
            "add ip, r4, ip, ror 20",
            "ldr sb, [sp, 8]",
            "str r8, [sp, 0xc]",
            "movw r2, 0xceee",
            "bic r8, r3, ip",
            "add r7, r6, r7",
            "and r6, ip, r4",
            "add r7, r7, sl",
            "orr r6, r8, r6",
            "ldr sl, [r1, 0x14]",
            "add r6, r7, r6",
            "movt r2, 0xc1bd",
            "add r6, ip, r6, ror 15",
            "add r2, r3, r2",
            "str sl, [sp, 0x10]",
            "add r2, r2, sb",
            "and r7, r6, ip",
            "bic sl, r4, r6",
            "orr sl, sl, r7",
            "movw r8, 0xfaf",
            "add sl, r2, sl",
            "ldr r2, [sp, 0xc]",
            "ldr r7, [r1, 0x18]",
            "add sl, r6, sl, ror 10",
            "movt r8, 0xf57c",
            "ldr sb, [sp, 0x10]",
            "add r8, r2, r8",
            "movw r2, 0xc62a",
            "str r7, [sp, 0x14]",
            "add r4, r8, r4",
            "and r7, sl, r6",
            "bic r8, ip, sl",
            "orr r8, r8, r7",
            "movt r2, 0x4787",
            "add r8, r4, r8",
            "add r2, sb, r2",
            "add r8, sl, r8, ror 25",
            "add r2, r2, ip",
            "movw sb, 0x4613",
            "ldr r4, [r1, 0x1c]",
            "bic r7, r6, r8",
            "and ip, r8, sl",
            "orr ip, r7, ip",
            "movt sb, 0xa830",
            "add ip, r2, ip",
            "ldr r2, [sp, 0x14]",
            "add ip, r8, ip, ror 20",
            "movw r7, 0x9501",
            "movt r7, 0xfd46",
            "add sb, r2, sb",
            "and r2, ip, r8",
            "add r6, sb, r6",
            "ldr sb, [r1, 0x20]",
            "add r7, r4, r7",
            "add r7, r7, sl",
            "str sb, [sp, 0x18]",
            "bic sb, sl, ip",
            "orr sb, sb, r2",
            "ldr sl, [r1, 0x24]",
            "add sb, r6, sb",
            "movw r2, 0x98d8",
            "add sb, ip, sb, ror 15",
            "movt r2, 0x6980",
            "str sl, [sp, 0x1c]",
            "and r6, sb, ip",
            "bic sl, r8, sb",
            "orr sl, sl, r6",
            "ldr r6, [sp, 0x18]",
            "add sl, r7, sl",
            "movw r7, 0xf7af",
            "add sl, sb, sl, ror 10",
            "movt r7, 0x8b44",
            "add r2, r6, r2",
            "add r2, r2, r8",
            "ldr r8, [r1, 0x28]",
            "and r6, sl, sb",
            "str r8, [sp, 0x20]",
            "bic r8, ip, sl",
            "orr r8, r8, r6",
            "ldr r6, [sp, 0x20]",
            "add r8, r2, r8",
            "ldr r2, [sp, 0x1c]",
            "add r8, sl, r8, ror 25",
            "add r7, r2, r7",
            "sub r2, r6, 0xa400",
            "add ip, r7, ip",
            "ldr r7, [r1, 0x2c]",
            "and r6, r8, sl",
            "sub r2, r2, 0x4f",
            "add r2, r2, sb",
            "str r7, [sp, 0x24]",
            "bic r7, sb, r8",
            "orr r7, r7, r6",
            "ldr sb, [r1, 0x30]",
            "add r7, ip, r7",
            "add r7, r8, r7, ror 20",
            "str sb, [sp, 0x28]",
            "and ip, r7, r8",
            "bic r6, sl, r7",
            "orr r6, r6, ip",
            "ldr ip, [sp, 0x24]",
            "add r6, r2, r6",
            "ldr r2, [r1, 0x34]",
            "add r6, r7, r6, ror 15",
            "add fp, ip, fp",
            "str r2, [sp, 0x2c]",
            "add sl, fp, sl",
            "and r2, r6, r7",
            "bic fp, r8, r6",
            "orr fp, fp, r2",
            "movw ip, 0x1122",
            "add fp, sl, fp",
            "movt ip, 0x6b90",
            "add fp, r6, fp, ror 10",
            "add ip, sb, ip",
            "ldr sb, [r1, 0x38]",
            "add r8, ip, r8",
            "bic sl, r7, fp",
            "and ip, fp, r6",
            "orr ip, sl, ip",
            "ldr sl, [sp, 0x2c]",
            "str sb, [sp, 0x30]",
            "add ip, r8, ip",
            "ldr r1, [r1, 0x3c]",
            "add ip, fp, ip, ror 25",
            "movw r2, 0x7193",
            "movt r2, 0xfd98",
            "bic r8, r6, ip",
            "str r1, [sp, 0x34]",
            "add r2, sl, r2",
            "and r1, ip, fp",
            "add r7, r2, r7",
            "orr r1, r8, r1",
            "movw r2, 0x438e",
            "add r1, r7, r1",
            "movt r2, 0xa679",
            "add r1, ip, r1, ror 20",
            "add r2, sb, r2",
            "ldr sb, [sp, 0x34]",
            "add r6, r2, r6",
            "mvn r8, r1",
            "and r2, r1, ip",
            "and r7, r8, fp",
            "movw sl, 0x821",
            "orr r2, r7, r2",
            "movt sl, 0x49b4",
            "add sl, sb, sl",
            "add r2, r6, r2",
            "add r2, r1, r2, ror 15",
            "add fp, sl, fp",
            "ldr sl, [sp]",
            "movw r6, 0x2562",
            "mvn r7, r2",
            "movt r6, 0xf61e",
            "and sb, r7, ip",
            "and r8, r2, r8",
            "add r6, sl, r6",
            "and sl, r2, r1",
            "orr sl, sb, sl",
            "add ip, r6, ip",
            "add fp, fp, sl",
            "ldr sb, [sp, 0x14]",
            "add fp, r2, fp, ror 10",
            "movw r6, 0xb340",
            "movt r6, 0xc040",
            "and sl, fp, r1",
            "add r6, sb, r6",
            "orr r8, sl, r8",
            "and r7, fp, r7",
            "add r8, ip, r8",
            "add r1, r6, r1",
            "add r8, fp, r8, ror 27",
            "ldr sl, [sp, 0x24]",
            "movw sb, 0x5a51",
            "and r6, r8, r2",
            "movt sb, 0x265e",
            "orr r7, r6, r7",
            "add sb, sl, sb",
            "add r1, r1, r7",
            "bic sl, r8, fp",
            "add r1, r8, r1, ror 23",
            "add r2, sb, r2",
            "movw ip, 0xc7aa",
            "and sb, r1, fp",
            "movt ip, 0xe9b6",
            "orr sl, sb, sl",
            "add ip, r5, ip",
            "add r2, r2, sl",
            "ldr sb, [sp, 0x10]",
            "add r2, r1, r2, ror 18",
            "bic r7, r1, r8",
            "add ip, ip, fp",
            "movw r6, 0x105d",
            "and fp, r2, r8",
            "orr r7, fp, r7",
            "movt r6, 0xd62f",
            "add r6, sb, r6",
            "add ip, ip, r7",
            "add ip, r2, ip, ror 12",
            "add r8, r6, r8",
            "ldr r6, [sp, 0x20]",
            "movw r7, 0x1453",
            "and fp, ip, r1",
            "bic sl, r2, r1",
            "movt r7, 0x244",
            "orr sl, fp, sl",
            "add r7, r6, r7",
            "add r8, r8, sl",
            "add r1, r7, r1",
            "ldr r7, [sp, 0x34]",
            "add fp, ip, r8, ror 27",
            "movw r6, 0xe681",
            "movt r6, 0xd8a1",
            "ldr sl, [sp, 0xc]",
            "bic sb, ip, r2",
            "add r6, r7, r6",
            "and r7, fp, r2",
            "bic r8, fp, ip",
            "orr sb, r7, sb",
            "movw r7, 0xfbc8",
            "add sb, r1, sb",
            "movt r7, 0xe7d3",
            "add sb, fp, sb, ror 23",
            "add r7, sl, r7",
            "add r2, r6, r2",
            "and sl, sb, ip",
            "add r7, r7, ip",
            "orr r8, sl, r8",
            "ldr ip, [sp, 0x1c]",
            "add r2, r2, r8",
            "bic r6, sb, fp",
            "add sl, sb, r2, ror 18",
            "movw r1, 0xcde6",
            "movt r1, 0x21e1",
            "and r8, sl, fp",
            "add r1, ip, r1",
            "orr r6, r8, r6",
            "add fp, r1, fp",
            "add r7, r7, r6",
            "ldr r1, [sp, 0x30]",
            "add r8, sl, r7, ror 12",
            "movw r2, 0x7d6",
            "bic ip, sl, sb",
            "and r7, r8, sb",
            "movt r2, 0xc337",
            "add r2, r1, r2",
            "orr ip, r7, ip",
            "add sb, r2, sb",
            "add fp, fp, ip",
            "ldr r2, [sp, 8]",
            "add r7, r8, fp, ror 27",
            "movw r1, 0xd87",
            "movt r1, 0xf4d5",
            "bic r6, r8, sl",
            "add r1, r2, r1",
            "and r2, r7, sl",
            "orr r6, r2, r6",
            "bic fp, r7, r8",
            "add r6, sb, r6",
            "ldr sb, [sp, 0x18]",
            "add r6, r7, r6, ror 23",
            "add sl, r1, sl",
            "movw r2, 0x14ed",
            "and ip, r6, r8",
            "movt r2, 0x455a",
            "orr fp, ip, fp",
            "add r2, sb, r2",
            "add sl, sl, fp",
            "add r8, r2, r8",
            "add ip, r6, sl, ror 18",
            "ldr sl, [sp, 0x2c]",
            "movw r2, 0xe905",
            "and r1, ip, r7",
            "bic sb, r6, r7",
            "movt r2, 0xa9e3",
            "orr sb, r1, sb",
            "add r2, sl, r2",
            "add r8, r8, sb",
            "add r7, r2, r7",
            "ldr r2, [sp, 4]",
            "add r1, ip, r8, ror 12",
            "movw sl, 0xa3f8",
            "movt sl, 0xfcef",
            "bic fp, ip, r6",
            "add sl, r2, sl",
            "and r2, r1, r6",
            "bic sb, r1, ip",
            "orr fp, r2, fp",
            "add sl, sl, r6",
            "add r2, r7, fp",
            "movw r8, 0x2d9",
            "add r2, r1, r2, ror 27",
            "movt r8, 0x676f",
            "add r8, r4, r8",
            "and r6, r2, ip",
            "bic fp, r2, r1",
            "orr sb, r6, sb",
            "add r8, r8, ip",
            "add r6, sl, sb",
            "ldr sb, [sp, 0x28]",
            "add r6, r2, r6, ror 23",
            "movw r7, 0x4c8a",
            "movt r7, 0x8d2a",
            "and ip, r6, r1",
            "add r7, sb, r7",
            "orr fp, ip, fp",
            "bic sl, r6, r2",
            "add ip, r8, fp",
            "add r1, r7, r1",
            "add ip, r6, ip, ror 18",
            "ldr r8, [sp, 0x10]",
            "movw r7, 0x3942",
            "and sb, ip, r2",
            "movt r7, 0xfffa",
            "orr sl, sb, sl",
            "add r7, r8, r7",
            "add r1, r1, sl",
            "eor r8, ip, r6",
            "add r1, ip, r1, ror 12",
            "add r2, r7, r2",
            "ldr sb, [sp, 0x18]",
            "movw fp, 0xf681",
            "eor r8, r8, r1",
            "movt fp, 0x8771",
            "add r8, r2, r8",
            "eor sl, r1, ip",
            "add r8, r1, r8, ror 28",
            "add fp, sb, fp",
            "ldr r7, [sp, 0x24]",
            "add r6, fp, r6",
            "eor sl, sl, r8",
            "movw r2, 0x6122",
            "add r6, r6, sl",
            "movt r2, 0x6d9d",
            "add r6, r8, r6, ror 21",
            "add r2, r7, r2",
            "eor r7, r8, r1",
            "ldr sb, [sp, 0x30]",
            "eor r7, r7, r6",
            "add ip, r2, ip",
            "add ip, ip, r7",
            "movw sl, 0x380c",
            "add ip, r6, ip, ror 16",
            "movt sl, 0xfde5",
            "eor r2, r6, r8",
            "add sl, sb, sl",
            "movw r7, 0xcfa9",
            "add r1, sl, r1",
            "eor sl, r2, ip",
            "add r1, r1, sl",
            "ldr sl, [sp]",
            "movw r2, 0xea44",
            "add r1, ip, r1, ror 9",
            "movt r2, 0xa4be",
            "add r2, sl, r2",
            "eor sl, ip, r6",
            "eor sl, sl, r1",
            "add r8, r2, r8",
            "ldr r2, [sp, 0xc]",
            "add r8, r8, sl",
            "add r8, r1, r8, ror 28",
            "movt r7, 0x4bde",
            "add r7, r2, r7",
            "eor r2, r1, ip",
            "add r6, r7, r6",
            "eor sl, r2, r8",
            "add sl, r6, sl",
            "movw r2, sym.DH_init",
            "add sl, r8, sl, ror 21",
            "movt r2, 0xf6bb",
            "eor r6, r8, r1",
            "ldr r7, [sp, 0x20]",
            "add r2, r4, r2",
            "add ip, r2, ip",
            "eor r2, r6, sl",
            "add r2, ip, r2",
            "movw r6, 0xbc70",
            "add r2, sl, r2, ror 16",
            "movt r6, 0xbebf",
            "eor ip, sl, r8",
            "add r6, r7, r6",
            "eor sb, ip, r2",
            "add r1, r6, r1",
            "movw ip, 0x7ec6",
            "add sb, r1, sb",
            "ldr r1, [sp, 0x2c]",
            "add sb, r2, sb, ror 9",
            "movt ip, 0x289b",
            "ldr r6, [sp, 8]",
            "add ip, r1, ip",
            "eor r1, r2, sl",
            "eor r1, r1, sb",
            "add r8, ip, r8",
            "add r8, r8, r1",
            "movw r1, 0x27fa",
            "add r8, sb, r8, ror 28",
            "movt r1, 0xeaa1",
            "add r1, r5, r1",
            "eor ip, sb, r2",
            "add sl, r1, sl",
            "eor ip, ip, r8",
            "movw r1, 0x3085",
            "add sl, sl, ip",
            "movt r1, 0xd4ef",
            "add r7, r8, sl, ror 21",
            "add r1, r6, r1",
            "eor ip, r8, sb",
            "ldr sl, [sp, 0x14]",
            "eor ip, ip, r7",
            "add r2, r1, r2",
            "add r2, r2, ip",
            "movw ip, 0x1d05",
            "add r2, r7, r2, ror 16",
            "movt ip, 0x488",
            "add ip, sl, ip",
            "ldr r1, [sp, 0x1c]",
            "eor sl, r7, r8",
            "add sb, ip, sb",
            "eor sl, sl, r2",
            "movw ip, 0xd039",
            "add sb, sb, sl",
            "movt ip, 0xd9d4",
            "add r6, r2, sb, ror 9",
            "add ip, r1, ip",
            "eor r1, r2, r7",
            "ldr sb, [sp, 0x34]",
            "add r8, ip, r8",
            "eor ip, r1, r6",
            "add ip, r8, ip",
            "ldr r8, [sp, 0x28]",
            "movw r1, 0x99e5",
            "add ip, r6, ip, ror 28",
            "movt r1, 0xe6db",
            "ldr sl, [sp, 4]",
            "add r1, r8, r1",
            "eor r8, r6, r2",
            "eor r8, r8, ip",
            "add r7, r1, r7",
            "add r7, r7, r8",
            "movw r1, 0x7cf8",
            "add r7, ip, r7, ror 21",
            "movt r1, 0x1fa2",
            "eor r8, ip, r6",
            "add r1, sb, r1",
            "ldr sb, [sp, 0x28]",
            "add r2, r1, r2",
            "eor r1, r8, r7",
            "add r1, r2, r1",
            "movw r8, 0x5665",
            "add r1, r7, r1, ror 16",
            "movt r8, 0xc4ac",
            "add r8, sl, r8",
            "eor sl, r7, ip",
            "add r6, r8, r6",
            "eor sl, sl, r1",
            "movw r8, 0x2244",
            "add r6, r6, sl",
            "movt r8, 0xf429",
            "add r2, r1, r6, ror 9",
            "mvn r6, r7",
            "add r8, r5, r8",
            "ldr sl, [sp, 8]",
            "orr r6, r2, r6",
            "add ip, r8, ip",
            "eor r6, r6, r1",
            "movw r5, 0xff97",
            "add ip, ip, r6",
            "movt r5, 0x432a",
            "add ip, r2, ip, ror 26",
            "mvn r6, r1",
            "add r5, r4, r5",
            "ldr r8, [sp, 0x10]",
            "orr r6, ip, r6",
            "add r7, r5, r7",
            "eor r6, r6, r2",
            "movw r4, 0x23a7",
            "add r5, r7, r6",
            "ldr r7, [sp, 0x30]",
            "add r5, ip, r5, ror 22",
            "mvn r6, r2",
            "movt r4, 0xab94",
            "add r4, r7, r4",
            "orr r6, r5, r6",
            "eor r6, r6, ip",
            "add r1, r4, r1",
            "add r1, r1, r6",
            "movw r7, 0xa039",
            "add r1, r5, r1, ror 17",
            "mvn r4, ip",
            "movt r7, 0xfc93",
            "add r7, r8, r7",
            "orr r4, r1, r4",
            "add r2, r7, r2",
            "eor r7, r4, r5",
            "add r2, r2, r7",
            "movw r4, 0x59c3",
            "add r2, r1, r2, ror 11",
            "mvn r6, r5",
            "movt r4, 0x655b",
            "ldr r8, [sp]",
            "add r4, sb, r4",
            "orr r6, r2, r6",
            "eor r6, r6, r1",
            "add ip, r4, ip",
            "add ip, ip, r6",
            "movw r7, 0xcc92",
            "add ip, r2, ip, ror 26",
            "mvn r4, r1",
            "movt r7, 0x8f0c",
            "ldr sb, [sp, 0x18]",
            "add r7, sl, r7",
            "orr r4, ip, r4",
            "add r5, r7, r5",
            "eor r7, r4, r2",
            "add r5, r5, r7",
            "ldr r7, [sp, 0x20]",
            "add r5, ip, r5, ror 22",
            "movw r4, 0xf47d",
            "mvn r6, r2",
            "ldr sl, [sp, 0x34]",
            "movt r4, 0xffef",
            "orr r6, r5, r6",
            "add r4, r7, r4",
            "eor r6, r6, ip",
            "add r1, r4, r1",
            "movw r7, 0x5dd1",
            "add r1, r1, r6",
            "mvn r4, ip",
            "add r1, r5, r1, ror 17",
            "movt r7, 0x8584",
            "add r7, r8, r7",
            "ldr r8, [sp, 0x2c]",
            "orr r4, r1, r4",
            "add r2, r7, r2",
            "eor r7, r4, r5",
            "movw r4, 0x7e4f",
            "add r2, r2, r7",
            "mvn r6, r5",
            "add r2, r1, r2, ror 11",
            "movt r4, 0x6fa8",
            "add r4, sb, r4",
            "ldr sb, [sp, 0xc]",
            "orr r6, r2, r6",
            "add ip, r4, ip",
            "eor r6, r6, r1",
            "movw r7, 0xe6e0",
            "add ip, ip, r6",
            "mvn r4, r1",
            "add ip, r2, ip, ror 26",
            "movt r7, 0xfe2c",
            "add r7, sl, r7",
            "ldr sl, [sp, 0x24]",
            "orr r4, ip, r4",
            "add r5, r7, r5",
            "eor r4, r4, r2",
            "ldr r7, [sp, 0x14]",
            "add r5, r5, r4",
            "movw r6, 0x4314",
            "add r5, ip, r5, ror 22",
            "mvn r4, r2",
            "movt r6, 0xa301",
            "add r6, r7, r6",
            "orr r4, r5, r4",
            "eor r4, r4, ip",
            "add r1, r6, r1",
            "add r1, r1, r4",
            "movw r7, 0x11a1",
            "add r1, r5, r1, ror 17",
            "mvn r4, ip",
            "movt r7, 0x4e08",
            "add r7, r8, r7",
            "orr r4, r1, r4",
            "eor r4, r4, r5",
            "add r2, r7, r2",
            "add r2, r2, r4",
            "movw r6, 0x7e82",
            "add r2, r1, r2, ror 11",
            "mvn r4, r5",
            "movt r6, 0xf753",
            "ldr r8, [sp, 0x1c]",
            "add r6, sb, r6",
            "orr r4, r2, r4",
            "eor r4, r4, r1",
            "add ip, r6, ip",
            "add ip, ip, r4",
            "movw r7, 0xf235",
            "add ip, r2, ip, ror 26",
            "mvn r4, r1",
            "movt r7, 0xbd3a",
            "ldr sb, [r0]",
            "add r7, sl, r7",
            "orr r4, ip, r4",
            "eor r4, r4, r2",
            "add r5, r7, r5",
            "add r5, r5, r4",
            "ldr r7, [sp, 4]",
            "add r5, ip, r5, ror 22",
            "movw r6, 0xd2bb",
            "mvn r4, r2",
            "ldr sl, [r0, 8]",
            "movt r6, 0x2ad7",
            "orr r4, r5, r4",
            "add r6, r7, r6",
            "movw r7, 0xd391",
            "add r6, r6, r1",
            "eor r1, r4, ip",
            "add r1, r6, r1",
            "mvn r4, ip",
            "add r1, r5, r1, ror 17",
            "movt r7, 0xeb86",
            "add r7, r8, r7",
            "orr r4, r1, r4",
            "add r2, r7, r2",
            "eor r4, r4, r5",
            "add r3, r1, r3",
            "add r2, r2, r4",
            "add ip, ip, sb",
            "add r3, r3, r2, ror 11",
            "ldr r2, [r0, 0xc]",
            "add r1, sl, r1",
            "str ip, [r0]",
            "str r3, [r0, 4]",
            "add r5, r2, r5",
            "str r1, [r0, 8]",
            "str r5, [r0, 0xc]",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp}",
            "bx lr"
        ]
    },
    "sym.bn_mul_add_words": {
        "function_address": "0x00004bc0",
        "instructions": [
            "ldr ip, [0x00004d80]",
            "cmp r2, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "add ip, pc, ip",
            "blt 0x4d60",
            "moveq r0, r2",
            "popeq {r4, r5, r6, r7, r8, pc}",
            "uxth r4, r3",
            "add ip, r0, 0x10",
            "lsr r3, r3, 0x10",
            "mov r5, 0",
            "b 0x4ca0",
            "ldr r0, [r1, 8]",
            "lsr r6, r0, 0x10",
            "uxth r0, r0",
            "mul r7, r6, r4",
            "mul r8, r0, r4",
            "mul r6, r6, r3",
            "mla r0, r0, r3, r7",
            "cmp r7, r0",
            "lsl r7, r0, 0x10",
            "addhi r6, r6, 0x10000",
            "add r6, r6, r0, lsr 16",
            "ldr r0, [ip, -8]",
            "adds r7, r7, r8",
            "addhs r6, r6, 1",
            "adds r5, r5, r7",
            "addhs r6, r6, 1",
            "adds r5, r5, r0",
            "addhs r6, r6, 1",
            "cmp r2, 3",
            "str r5, [ip, -8]",
            "beq 0x4d50",
            "ldr r0, [r1, 0xc]",
            "lsr r5, r0, 0x10",
            "uxth r0, r0",
            "mul r7, r5, r4",
            "mul r8, r0, r4",
            "mul r5, r5, r3",
            "mla r0, r0, r3, r7",
            "cmp r7, r0",
            "lsl r7, r0, 0x10",
            "addhi r5, r5, 0x10000",
            "add r5, r5, r0, lsr 16",
            "ldr r0, [ip, -4]",
            "adds r7, r7, r8",
            "addhs r5, r5, 1",
            "adds r6, r6, r7",
            "addhs r5, r5, 1",
            "adds r6, r6, r0",
            "addhs r5, r5, 1",
            "subs r2, r2, 4",
            "str r6, [ip, -4]",
            "add ip, ip, 0x10",
            "beq 0x4d58",
            "add r1, r1, 0x10",
            "ldr r0, [r1]",
            "lsr r8, r0, 0x10",
            "uxth r0, r0",
            "mul r6, r8, r4",
            "mul r7, r0, r4",
            "mul r8, r8, r3",
            "mla r0, r0, r3, r6",
            "cmp r6, r0",
            "lsl r6, r0, 0x10",
            "addhi r8, r8, 0x10000",
            "add r0, r8, r0, lsr 16",
            "adds r6, r6, r7",
            "addhs r0, r0, 1",
            "adds r5, r5, r6",
            "ldr r6, [ip, -0x10]",
            "addhs r0, r0, 1",
            "adds r5, r5, r6",
            "addhs r0, r0, 1",
            "cmp r2, 1",
            "str r5, [ip, -0x10]",
            "popeq {r4, r5, r6, r7, r8, pc}",
            "ldr r5, [r1, 4]",
            "lsr r8, r5, 0x10",
            "uxth r5, r5",
            "mul r6, r8, r4",
            "mul r7, r5, r4",
            "mul r8, r8, r3",
            "mla r5, r5, r3, r6",
            "cmp r6, r5",
            "lsl r6, r5, 0x10",
            "addhi r8, r8, 0x10000",
            "add r5, r8, r5, lsr 16",
            "adds r6, r6, r7",
            "addhs r5, r5, 1",
            "adds r0, r0, r6",
            "ldr r6, [ip, -0xc]",
            "addhs r5, r5, 1",
            "adds r0, r0, r6",
            "addhs r5, r5, 1",
            "cmp r2, 2",
            "str r0, [ip, -0xc]",
            "bne 0x4bf0",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r0, [0x00004d84]",
            "movw r2, 0x1c2",
            "ldr r1, [0x00004d88]",
            "ldr r3, [0x00004d8c]",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "add r3, ip, r3",
            "bl loc.imp.__assert",
            "strheq r7, [r1], -ip",
            "invalid"
        ]
    },
    "sym.PRF": {
        "function_address": "0x0000d3d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x94",
            "ldr r4, [sp, 0xbc]",
            "mov sb, r0",
            "mov sl, r1",
            "add r0, r4, r3",
            "cmp r0, 0x7f",
            "mvngt r0, 0",
            "bgt 0xd490",
            "cmp r3, 0",
            "bne 0xd498",
            "add r7, sp, 0x10",
            "mov fp, r3",
            "mov r0, r7",
            "mov r2, r4",
            "ldr r1, [sp, 0xb8]",
            "bl loc.imp.memcpy",
            "ldr r2, [sp, 0xc4]",
            "movw r3, 0x6667",
            "movt r3, 0x6666",
            "add fp, fp, r4",
            "mov r4, 0",
            "add r2, r2, 0x13",
            "smull r0, r8, r3, r2",
            "asr r1, r2, 0x1f",
            "add r2, sp, 0x90",
            "add r6, r2, fp",
            "rsb r8, r1, r8, asr 3",
            "strb r4, [r6, -0x80]",
            "add fp, fp, 1",
            "cmp r8, r4",
            "movle r0, r4",
            "ble 0xd490",
            "ldr r5, [sp, 0xc0]",
            "mov r3, sl",
            "mov r0, r7",
            "mov r1, fp",
            "mov r2, sb",
            "str r5, [sp]",
            "add r4, r4, 1",
            "bl fcn.00001ab0",
            "ldrb r3, [r6, -0x80]",
            "cmp r4, r8",
            "add r5, r5, 0x14",
            "add r3, r3, 1",
            "strb r3, [r6, -0x80]",
            "blt 0xd458",
            "mov r0, 0",
            "add sp, sp, 0x94",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "add r7, sp, 0x10",
            "mov r1, r2",
            "mov r0, r7",
            "mov r2, r3",
            "str r3, [sp, 0xc]",
            "bl loc.imp.memcpy",
            "ldr r3, [sp, 0xc]",
            "add r0, sp, 0x90",
            "mov r2, 0",
            "add fp, r3, 1",
            "add r3, r0, r3",
            "strb r2, [r3, -0x80]",
            "add r0, r7, fp",
            "b 0xd408"
        ]
    },
    "sym.BN_set_word": {
        "function_address": "0x00008a54",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 8]",
            "mov r5, r1",
            "cmp r3, 0",
            "ble 0x8a9c",
            "ldr r2, [r4]",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "str r3, [r4, 0xc]",
            "str r5, [r2]",
            "ldr r3, [r4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "movne r0, 1",
            "moveq r0, 1",
            "strne r0, [r4, 4]",
            "pop {r3, r4, r5, pc}",
            "mov r1, 2",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "b 0x8a6c"
        ]
    },
    "sym.BN_num_bits": {
        "function_address": "0x00008218",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [r0, 4]",
            "ldr r1, [0x0000827c]",
            "cmp r4, 0",
            "add r1, pc, r1",
            "beq 0x8250",
            "ldr r3, [r0]",
            "sub r4, r4, 1",
            "ldr r0, [r3, r4, lsl 2]",
            "cmp r0, 0",
            "beq 0x8258",
            "bl fcn.00001984",
            "add r0, r0, r4, lsl 5",
            "pop {r4, pc}",
            "mov r0, r4",
            "pop {r4, pc}",
            "ldr r3, [0x00008280]",
            "movw r2, 0xa01",
            "ldr r0, [0x00008284]",
            "ldr ip, [0x00008288]",
            "add r3, r1, r3",
            "add r0, r1, r0",
            "add r3, r3, 0x170",
            "add r1, r1, ip",
            "bl loc.imp.__assert",
            "andeq r3, r1, r0, ror 28",
            "invalid"
        ]
    },
    "sym.bn_div_words": {
        "function_address": "0x000080c0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r8, r2, 0",
            "ldr r4, [0x00008208]",
            "mov r6, r0",
            "mov r7, r1",
            "add r4, pc, r4",
            "bne 0x80e4",
            "mvn r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r8",
            "bl fcn.00001984",
            "cmp r0, 0x20",
            "beq 0x8100",
            "mov r3, 1",
            "cmp r6, r3, lsl r0",
            "bls 0x81e4",
            "rsb r3, r0, 0x20",
            "cmp r8, r6",
            "rsbls r6, r8, r6",
            "cmp r3, 0",
            "lsrne r0, r7, r0",
            "lslne r8, r8, r3",
            "lslne r7, r7, r3",
            "orrne r6, r0, r6, lsl r3",
            "lsr r4, r8, 0x10",
            "uxth r5, r8",
            "mov sl, 2",
            "mov fp, 0",
            "cmp r4, r6, lsr 16",
            "movweq r0, 0xffff",
            "beq 0x8148",
            "mov r0, r6",
            "mov r1, r4",
            "bl loc.imp.__aeabi_uidiv",
            "mul r1, r4, r0",
            "mul r2, r5, r0",
            "rsb r3, r1, r6",
            "lsrs ip, r3, 0x10",
            "bne 0x819c",
            "lsr sb, r7, 0x10",
            "orr r3, sb, r3, lsl 16",
            "cmp r2, r3",
            "addhi r3, r6, r4",
            "rsbhi r3, r1, r3",
            "bhi 0x8188",
            "b 0x819c",
            "orr ip, sb, r3, lsl 16",
            "add r3, r3, r4",
            "cmp ip, r2",
            "bhs 0x819c",
            "lsrs ip, r3, 0x10",
            "sub r0, r0, 1",
            "rsb r1, r4, r1",
            "rsb r2, r5, r2",
            "beq 0x8178",
            "lsl r3, r2, 0x10",
            "add r2, r1, r2, lsr 16",
            "cmp r7, r3",
            "addlo r2, r2, 1",
            "cmp r6, r2",
            "addlo r6, r6, r8",
            "sublo r0, r0, 1",
            "subs sl, sl, 1",
            "beq 0x81dc",
            "rsb r7, r3, r7",
            "rsb r6, r2, r6",
            "lsr r3, r7, 0x10",
            "lsl fp, r0, 0x10",
            "lsl r7, r7, 0x10",
            "orr r6, r3, r6, lsl 16",
            "b 0x8130",
            "orr r0, fp, r0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [0x0000820c]",
            "movw r2, 0x21f",
            "ldr r0, [0x00008210]",
            "ldr r1, [0x00008214]",
            "add r3, r4, r3",
            "add r0, r4, r0",
            "add r3, r3, 0x160",
            "add r1, r4, r1",
            "bl loc.imp.__assert",
            "strheq r3, [r1], -r4",
            "invalid"
        ]
    },
    "loc.imp.__aeabi_uidiv": {
        "function_address": "0x00001c84",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x530]!"
        ]
    },
    "sym.BN_mul_word": {
        "function_address": "0x0000b6ac",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r2, [r0, 4]",
            "mov r3, r1",
            "cmp r2, 0",
            "moveq r0, 1",
            "popeq {r3, r4, r5, pc}",
            "cmp r1, 0",
            "beq 0xb708",
            "ldr r0, [r4]",
            "mov r1, r0",
            "bl fcn.00001930",
            "subs r5, r0, 0",
            "beq 0xb730",
            "ldmib r4, {r1, r3}",
            "cmp r1, r3",
            "bge 0xb714",
            "ldr r2, [r4]",
            "add r3, r1, 1",
            "mov r0, 1",
            "str r5, [r2, r1, lsl 2]",
            "str r3, [r4, 4]",
            "pop {r3, r4, r5, pc}",
            "bl fcn.00001af8",
            "mov r0, 1",
            "pop {r3, r4, r5, pc}",
            "mov r0, r4",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "ldr r1, [r4, 4]",
            "b 0xb6f0",
            "mov r0, 1",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.KDF": {
        "function_address": "0x000110e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x90",
            "ldr r4, [sp, 0xac]",
            "mov r8, r0",
            "mov r7, r1",
            "add r5, r4, r3",
            "cmp r5, 0x7f",
            "mvngt r0, 0",
            "bgt 0x11150",
            "cmp r3, 0",
            "bne 0x11158",
            "add r6, sp, 0x10",
            "mov r5, r4",
            "mov r0, r6",
            "ldr r1, [sp, 0xa8]",
            "mov r2, r4",
            "bl loc.imp.memcpy",
            "ldr ip, [sp, 0xb0]",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r5",
            "str ip, [sp]",
            "ldr ip, [sp, 0xb4]",
            "str ip, [sp, 4]",
            "bl fcn.00001960",
            "mov r0, 0",
            "add sp, sp, 0x90",
            "pop {r4, r5, r6, r7, r8, pc}",
            "add r6, sp, 0x10",
            "mov r1, r2",
            "mov r0, r6",
            "mov r2, r3",
            "str r3, [sp, 0xc]",
            "bl loc.imp.memcpy",
            "ldr r3, [sp, 0xc]",
            "add r0, r6, r3",
            "b 0x1111c"
        ]
    },
    "fcn.00001960": {
        "function_address": "0x00001960",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x748]!"
        ]
    },
    "sym.BN_MONT_CTX_free": {
        "function_address": "0x0000936c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "add r0, r4, 4",
            "bl fcn.00001c24",
            "add r0, r4, 0x18",
            "bl fcn.00001c24",
            "add r0, r4, 0x2c",
            "bl fcn.00001c24",
            "ldr r3, [r4, 0x44]",
            "tst r3, 1",
            "popeq {r4, pc}",
            "mov r0, r4",
            "pop {r4, lr}",
            "b loc.imp.free"
        ]
    },
    "sym.hmac_sha256": {
        "function_address": "0x00010e94",
        "instructions": [
            "cmp r1, 0x40",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x134",
            "mov r5, r1",
            "mov r4, r0",
            "mov fp, r2",
            "mov sb, r3",
            "ldr sl, [sp, 0x158]",
            "movle r8, sp",
            "bgt 0x10fac",
            "add r7, sp, 0xb0",
            "mov r1, 0",
            "mov r2, 0x40",
            "add r6, sp, 0x70",
            "mov r0, r7",
            "bl loc.imp.memset",
            "mov r1, 0",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl loc.imp.memset",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r7",
            "bl loc.imp.memcpy",
            "mov r1, r4",
            "mov r4, 0",
            "mov r0, r6",
            "mov r2, r5",
            "bl loc.imp.memcpy",
            "ldrb r2, [r7, r4]",
            "ldrb r3, [r6, r4]",
            "eor r2, r2, 0x36",
            "eor r3, r3, 0x5c",
            "strb r2, [r7, r4]",
            "strb r3, [r6, r4]",
            "add r4, r4, 1",
            "cmp r4, 0x40",
            "bne 0x10f08",
            "mov r0, sp",
            "bl fcn.00001d20",
            "mov r1, r7",
            "mov r2, r4",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r2, sb",
            "mov r1, fp",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r1, sp",
            "mov r0, sl",
            "bl fcn.00001abc",
            "mov r0, sp",
            "bl fcn.00001d20",
            "mov r1, r6",
            "mov r2, r4",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r2, 0x20",
            "mov r1, sl",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r0, sl",
            "mov r1, sp",
            "bl fcn.00001abc",
            "ldr r2, [sp, 0x15c]",
            "cmp r2, 0",
            "movne r3, 0x20",
            "strne r3, [r2]",
            "add sp, sp, 0x134",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, sp",
            "mov r8, sp",
            "bl fcn.00001d20",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, sp",
            "add r4, sp, 0xf0",
            "bl fcn.00001a2c",
            "mov r1, sp",
            "mov r0, r4",
            "bl fcn.00001abc",
            "mov r5, 0x20",
            "b 0x10ebc"
        ]
    },
    "fcn.00001d20": {
        "function_address": "0x00001d20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4c8]!"
        ]
    },
    "sym.BN_rshift1": {
        "function_address": "0x0000a5a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "ldr r1, [r1, 4]",
            "mov r4, r0",
            "cmp r1, 0",
            "beq 0xa68c",
            "cmp r1, 1",
            "beq 0xa67c",
            "cmp r5, r4",
            "beq 0xa5ec",
            "ldr r3, [r4, 8]",
            "cmp r1, r3",
            "bgt 0xa6a0",
            "str r1, [r4, 4]",
            "ldr r3, [r5, 0xc]",
            "str r3, [r4, 0xc]",
            "ldr r1, [r5, 4]",
            "cmp r1, 0",
            "ldr r5, [r5]",
            "ldr ip, [r4]",
            "ble 0xa630",
            "lsl r2, r1, 2",
            "mov r0, 0",
            "mov r3, r0",
            "add r5, r5, r2",
            "add ip, ip, r2",
            "ldr r2, [r5, -4]!",
            "add r0, r0, 1",
            "orr r6, r3, r2, lsr 1",
            "ands r3, r2, 1",
            "movne r3, 0x80000000",
            "cmp r0, r1",
            "str r6, [ip, -4]!",
            "bne 0xa610",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "ble 0xa674",
            "ldr r2, [r4]",
            "sub r3, r3, 1",
            "ldr r1, [r2, r3, lsl 2]",
            "add r2, r2, r3, lsl 2",
            "cmp r1, 0",
            "beq 0xa664",
            "b 0xa674",
            "ldr r1, [r2, -4]!",
            "cmp r1, 0",
            "bne 0xa6b8",
            "cmp r3, 0",
            "str r3, [r4, 4]",
            "sub r3, r3, 1",
            "bgt 0xa658",
            "mov r0, 1",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [r5]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xa5c8",
            "mov r0, r4",
            "mov r1, 0",
            "bl fcn.00001af8",
            "mov r0, 1",
            "pop {r4, r5, r6, pc}",
            "mov r0, r4",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "ldr r1, [r5, 4]",
            "b 0xa5dc",
            "mov r0, 1",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.BN_MONT_CTX_new": {
        "function_address": "0x00009344",
        "instructions": [
            "push {r4, lr}",
            "mov r0, 0x48",
            "bl loc.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x9364",
            "bl fcn.00001a08",
            "mov r3, 1",
            "str r3, [r4, 0x44]",
            "mov r0, r4",
            "pop {r4, pc}"
        ]
    },
    "fcn.00001a08": {
        "function_address": "0x00001a08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6d8]!"
        ]
    },
    "sym.aes_cmac": {
        "function_address": "0x00002cfc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "ldr ip, [sp, 0x58]",
            "mov fp, r0",
            "mov sb, r1",
            "ldr r4, [sp, 0x5c]",
            "cmp ip, 0",
            "moveq sl, 1",
            "beq 0x2e94",
            "add sl, ip, 0xf",
            "lsr sl, sl, 4",
            "cmp ip, sl, lsl 4",
            "beq 0x2f70",
            "sub r1, sl, 0xf0000001",
            "lsl r1, r1, 4",
            "subs ip, ip, r1",
            "beq 0x2e94",
            "add r7, sp, 0x20",
            "add r1, r4, r1",
            "mov r2, r7",
            "add lr, r7, ip",
            "ldrb r0, [r1], 1",
            "strb r0, [r2], 1",
            "cmp r2, lr",
            "bne 0x2d50",
            "add r2, ip, 1",
            "add r1, sp, 0x30",
            "cmp r2, 0xf",
            "add ip, r1, ip",
            "mvn r1, 0x7f",
            "strb r1, [ip, -0x10]",
            "bhi 0x2d90",
            "mov r1, 0",
            "strb r1, [r7, r2]",
            "add r2, r2, 1",
            "cmp r2, 0xf",
            "bls 0x2d80",
            "orr r2, r3, r7",
            "tst r2, 3",
            "movne r2, 0",
            "beq 0x2f30",
            "ldrb r0, [r7, r2]",
            "ldrb r1, [r3, r2]",
            "eor r1, r0, r1",
            "strb r1, [r7, r2]",
            "add r2, r2, 1",
            "cmp r2, 0x10",
            "bne 0x2da0",
            "cmp sl, 1",
            "mov r3, 0",
            "add r2, sp, 8",
            "mov r5, sp",
            "str r3, [r2], 4",
            "addls r6, sp, 0x10",
            "str r3, [sp]",
            "str r3, [sp, 4]",
            "str r3, [r2]",
            "bls 0x2e38",
            "add r6, sp, 0x10",
            "mov r8, 1",
            "tst r4, 3",
            "movne r3, 0",
            "beq 0x2ea8",
            "ldrb r1, [r4, r3]",
            "ldrb r2, [r5, r3]",
            "eor r2, r1, r2",
            "strb r2, [r6, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2df8",
            "mov r0, sb",
            "mov r1, fp",
            "mov r2, r6",
            "mov r3, sp",
            "add r8, r8, 1",
            "add r4, r4, 0x10",
            "bl fcn.00001bc4",
            "cmp r8, sl",
            "blo 0x2dec",
            "tst r7, 3",
            "movne r3, 0",
            "beq 0x2eec",
            "ldrb r1, [r7, r3]",
            "ldrb r2, [r5, r3]",
            "eor r2, r1, r2",
            "strb r2, [r6, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2e44",
            "mov r2, r6",
            "mov r0, sb",
            "mov r1, fp",
            "mov r3, sp",
            "bl fcn.00001bc4",
            "ldr r2, [sp, 0x64]",
            "mov r1, sp",
            "ldr r0, [sp, 0x60]",
            "cmp r2, 0x10",
            "movhs r2, 0x10",
            "bl loc.imp.memcpy",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mvn r2, 0x7f",
            "add r7, sp, 0x30",
            "strb r2, [r7, -0x10]!",
            "mov r2, 1",
            "b 0x2d7c",
            "ldr r2, [r5]",
            "ldr r3, [r4]",
            "eor r3, r2, r3",
            "str r3, [r6]",
            "ldr r2, [r5, 4]",
            "ldr r3, [r4, 4]",
            "eor r3, r2, r3",
            "str r3, [r6, 4]",
            "ldr r2, [r5, 8]",
            "ldr r3, [r4, 8]",
            "eor r3, r2, r3",
            "str r3, [r6, 8]",
            "ldr r2, [r5, 0xc]",
            "ldr r3, [r4, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r6, 0xc]",
            "b 0x2e14",
            "ldr r3, [sp]",
            "ldr r1, [sp, 0x20]",
            "ldr r2, [sp, 0x24]",
            "ldr r0, [sp, 0x28]",
            "eor r1, r1, r3",
            "ldr r3, [sp, 4]",
            "str r1, [sp, 0x10]",
            "ldr r1, [sp, 0x2c]",
            "eor r3, r2, r3",
            "ldr r2, [sp, 8]",
            "str r3, [sp, 0x14]",
            "ldr r3, [sp, 0xc]",
            "eor r2, r0, r2",
            "str r2, [sp, 0x18]",
            "eor r3, r1, r3",
            "str r3, [sp, 0x1c]",
            "b 0x2e60",
            "ldr r0, [r3]",
            "ldr ip, [sp, 0x20]",
            "ldmib r3, {r1, r2}",
            "eor r0, ip, r0",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [r3, 0xc]",
            "str r0, [sp, 0x20]",
            "eor r1, ip, r1",
            "ldr r0, [sp, 0x28]",
            "str r1, [sp, 0x24]",
            "ldr r1, [sp, 0x2c]",
            "eor r2, r0, r2",
            "str r2, [sp, 0x28]",
            "eor r3, r1, r3",
            "str r3, [sp, 0x2c]",
            "b 0x2dbc",
            "sub r3, sl, 0xf0000001",
            "add r7, sp, 0x20",
            "add ip, r4, r3, lsl 4",
            "orr r1, r2, ip",
            "tst r1, 3",
            "movne r3, 0",
            "beq 0x2fac",
            "ldrb r0, [ip, r3]",
            "ldrb r1, [r2, r3]",
            "eor r1, r0, r1",
            "strb r1, [r7, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2f8c",
            "b 0x2dbc",
            "ldr r1, [r2]",
            "ldr lr, [r4, r3, lsl 4]",
            "ldr r0, [ip, 4]",
            "ldr r3, [r2, 4]",
            "ldr r6, [ip, 8]",
            "eor lr, lr, r1",
            "ldr r5, [r2, 8]",
            "ldr r1, [ip, 0xc]",
            "eor r0, r0, r3",
            "ldr r3, [r2, 0xc]",
            "eor r2, r6, r5",
            "str lr, [sp, 0x20]",
            "str r0, [sp, 0x24]",
            "eor r3, r1, r3",
            "str r2, [sp, 0x28]",
            "str r3, [sp, 0x2c]",
            "b 0x2dbc"
        ]
    },
    "sym.DH_new": {
        "function_address": "0x000047bc",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 0x30",
            "bl loc.imp.malloc",
            "cmp r0, 0",
            "popeq {r3, pc}",
            "mov r3, 0",
            "str r3, [r0]",
            "str r3, [r0, 4]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0xc]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x1c]",
            "str r3, [r0, 0x20]",
            "str r3, [r0, 0x24]",
            "str r3, [r0, 0x28]",
            "str r3, [r0, 0x2c]",
            "str r3, [r0, 0x18]",
            "mov r3, 1",
            "str r3, [r0, 0x14]",
            "pop {r3, pc}"
        ]
    },
    "sym.DH_compute_key": {
        "function_address": "0x00004b30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5e0]!",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r3",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, 0",
            "bl fcn.00001990",
            "mov r2, r5",
            "mov r1, r0",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b 0x1b7c"
        ]
    },
    "sym.prepare_key": {
        "function_address": "0x0000e4a8",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r8, r2",
            "mov r3, 0",
            "strb r3, [r8, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x100",
            "bne 0xe4bc",
            "mov r6, 0",
            "mov r7, r8",
            "add sl, r8, 0x100",
            "mov r1, r6",
            "ldrb r2, [r4, r1]",
            "add r0, r1, 1",
            "ldrb r3, [r7]",
            "mov r1, r5",
            "add r2, r2, r3",
            "add r6, r2, r6",
            "and r6, r6, 0xff",
            "ldrb r2, [r8, r6]",
            "strb r2, [r7], 1",
            "strb r3, [r8, r6]",
            "bl loc.imp.__aeabi_uidivmod",
            "cmp r7, sl",
            "bne 0xe4dc",
            "mov r3, 0",
            "strb r3, [r8, 0x100]",
            "strb r3, [r8, 0x101]",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "loc.imp.__aeabi_uidivmod": {
        "function_address": "0x00001d38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4b8]!"
        ]
    },
    "sym.DH_compute_key_bn": {
        "function_address": "0x00004a50",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0xc",
            "mov r6, r0",
            "mov r5, r1",
            "mov sl, r2",
            "bl fcn.000019c0",
            "subs r4, r0, 0",
            "bne 0x4aa0",
            "mvn r6, 0",
            "cmp r5, 0",
            "beq 0x4a84",
            "mov r0, r5",
            "bl fcn.00001dc8",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, r4",
            "bl fcn.00001c54",
            "mov r0, r6",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "bl fcn.00001a74",
            "mov r0, r4",
            "bl fcn.00001a20",
            "ldr r2, [sl, 0x10]",
            "mov r8, r0",
            "cmp r2, 0",
            "beq 0x4a70",
            "ldr r7, [sl, 0x18]",
            "cmp r7, 0",
            "bne 0x4b00",
            "ldr r3, [sl, 0x14]",
            "tst r3, 1",
            "beq 0x4b00",
            "bl fcn.00001b58",
            "cmp r0, 0",
            "str r0, [sl, 0x18]",
            "beq 0x4afc",
            "ldr r1, [sl]",
            "mov r2, r4",
            "bl fcn.00001978",
            "cmp r0, 0",
            "beq 0x4a70",
            "ldr r7, [sl, 0x18]",
            "ldr r2, [sl, 0x10]",
            "ldr r3, [sl]",
            "mov r0, r8",
            "mov r1, r5",
            "stm sp, {r4, r7}",
            "bl fcn.00004784",
            "cmp r0, 0",
            "beq 0x4a70",
            "mov r1, r6",
            "mov r0, r8",
            "bl fcn.000019e4",
            "mov r6, r0",
            "b 0x4a74"
        ]
    },
    "sym.bn_sub_words": {
        "function_address": "0x000051a8",
        "instructions": [
            "ldr ip, [0x000052cc]",
            "push {r3, r4, r5, r6, r7, lr}",
            "cmp r3, 0",
            "add ip, pc, ip",
            "blt 0x52a8",
            "moveq r7, r3",
            "beq 0x5294",
            "mov ip, 0",
            "b 0x525c",
            "ldr r4, [r2, 4]",
            "ldr r5, [r1, 4]",
            "rsb r6, r4, r5",
            "cmp r5, r4",
            "rsb r4, ip, r6",
            "str r4, [r0, 4]",
            "beq 0x51f0",
            "movhs ip, 0",
            "movlo ip, 1",
            "cmp r3, 2",
            "beq 0x529c",
            "ldr r4, [r2, 8]",
            "ldr r5, [r1, 8]",
            "rsb r6, r4, r5",
            "cmp r5, r4",
            "rsb r4, ip, r6",
            "str r4, [r0, 8]",
            "beq 0x521c",
            "movhs ip, 0",
            "movlo ip, 1",
            "cmp r3, 3",
            "beq 0x529c",
            "ldr r4, [r2, 0xc]",
            "ldr r5, [r1, 0xc]",
            "rsb r6, r4, r5",
            "cmp r5, r4",
            "rsb r4, ip, r6",
            "str r4, [r0, 0xc]",
            "beq 0x5248",
            "movhs ip, 0",
            "movlo ip, 1",
            "subs r3, r3, 4",
            "beq 0x529c",
            "add r1, r1, 0x10",
            "add r2, r2, 0x10",
            "add r0, r0, 0x10",
            "ldr r4, [r2]",
            "mov r7, ip",
            "ldr r5, [r1]",
            "rsb r6, r4, r5",
            "cmp r5, r4",
            "rsb r4, ip, r6",
            "str r4, [r0]",
            "beq 0x5288",
            "movhs ip, 0",
            "movlo ip, 1",
            "mov r7, ip",
            "sub r4, r3, 1",
            "cmp r4, 0",
            "bgt 0x51cc",
            "mov r0, r7",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r7, ip",
            "mov r0, r7",
            "pop {r3, r4, r5, r6, r7, pc}",
            "ldr r3, [0x000052d0]",
            "movw r2, 0x2b3",
            "ldr r0, [0x000052d4]",
            "ldr r1, [0x000052d8]",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r3, r3, 0x44",
            "add r1, ip, r1",
            "bl loc.imp.__assert",
            "ldrdeq r6, r7, [r1], -r4",
            "invalid"
        ]
    },
    "sym.BN_sub_word": {
        "function_address": "0x0000b4a0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r6, [r0, 4]",
            "cmp r6, 0",
            "beq 0xb54c",
            "cmp r6, 1",
            "beq 0xb53c",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 0",
            "bne 0xb54c",
            "cmp r6, 1",
            "beq 0xb574",
            "ldr ip, [r4]",
            "ldr r2, [ip]",
            "cmp r1, r2",
            "bls 0xb584",
            "rsb r1, r1, r2",
            "add r3, r3, 1",
            "str r1, [ip]",
            "lsl r5, r3, 2",
            "ldr r0, [r4]",
            "mov r1, 1",
            "ldr r2, [r0, r3, lsl 2]",
            "add ip, r0, r5",
            "cmp r2, 0",
            "beq 0xb4e0",
            "mov r1, 1",
            "rsb r1, r1, r2",
            "str r1, [ip]",
            "ldr r2, [r4]",
            "ldr r2, [r2, r5]",
            "cmp r2, 0",
            "bne 0xb56c",
            "ldr r2, [r4, 4]",
            "sub r2, r2, 1",
            "cmp r2, r3",
            "beq 0xb568",
            "mov r0, 1",
            "pop {r4, r5, r6, pc}",
            "ldr r3, [r0]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xb4bc",
            "mov r3, 0",
            "mov r0, r4",
            "str r3, [r4, 0xc]",
            "bl fcn.00001cf0",
            "mov r3, 1",
            "str r3, [r4, 0xc]",
            "pop {r4, r5, r6, pc}",
            "str r3, [r4, 4]",
            "mov r0, 1",
            "pop {r4, r5, r6, pc}",
            "ldr ip, [r4]",
            "ldr r2, [ip]",
            "cmp r1, r2",
            "bhi 0xb58c",
            "mov r5, r3",
            "b 0xb50c",
            "rsb r2, r2, r1",
            "mov r0, r6",
            "str r2, [ip]",
            "str r6, [r4, 0xc]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00001cf0": {
        "function_address": "0x00001cf0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4e8]!"
        ]
    },
    "sym.BN_mod_inverse": {
        "function_address": "0x0000b738",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r3",
            "sub sp, sp, 0x2c",
            "mov r5, r0",
            "mov r0, r3",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x18]",
            "bl fcn.00001a74",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov r6, r0",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov r7, r0",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov fp, r0",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov sl, r0",
            "mov r0, r4",
            "bl fcn.00001a20",
            "str r0, [sp, 0x1c]",
            "mov r0, r4",
            "bl fcn.00001a20",
            "str r0, [sp, 0x14]",
            "mov r0, r4",
            "bl fcn.00001a20",
            "subs r8, r0, 0",
            "moveq sb, r8",
            "bne 0xb7f4",
            "rsbs r5, r5, 1",
            "movlo r5, 0",
            "cmp r5, 0",
            "bne 0xb7e4",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, r5",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bl fcn.00001de0",
            "subs sb, r0, 0",
            "bne 0xb800",
            "mov r0, sb",
            "mov r5, 0",
            "bl fcn.00001c24",
            "b 0xb7c4",
            "cmp r5, 0",
            "movne sb, r5",
            "beq 0xb7d8",
            "mov r1, 1",
            "mov r0, fp",
            "bl fcn.00001af8",
            "mov r1, 0",
            "ldr r0, [sp, 0x14]",
            "bl fcn.00001af8",
            "mov r0, r7",
            "ldr r1, [sp, 0x10]",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "beq 0xb7b4",
            "mov r0, r6",
            "ldr r1, [sp, 0x18]",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "beq 0xb7b4",
            "mov r3, 0",
            "str r3, [r6, 0xc]",
            "ldr r3, [r7, 0xc]",
            "cmp r3, 0",
            "bne 0xbb3c",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "bge 0xbb3c",
            "ldr r2, [sp, 0x18]",
            "ldr r3, [r2, 4]",
            "cmp r3, 0",
            "ble 0xb888",
            "ldr r3, [r2]",
            "ldr r3, [r3]",
            "tst r3, 1",
            "bne 0xbb5c",
            "ldr r3, [r7, 4]",
            "cmp r3, 0",
            "beq 0xbc0c",
            "mvn r2, 0",
            "str sb, [sp, 0x20]",
            "str r8, [sp, 0x10]",
            "mov sb, r2",
            "str r5, [sp, 0x24]",
            "mov r8, r4",
            "ldr r5, [sp, 0x14]",
            "ldr r4, [sp, 0x1c]",
            "b 0xb914",
            "mov r0, r6",
            "mov r1, sl",
            "mov r2, fp",
            "mov r3, r8",
            "bl fcn.0000199c",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, r6",
            "mov r1, r6",
            "mov r2, r5",
            "bl fcn.00001a8c",
            "cmp r0, 0",
            "beq 0xb9fc",
            "ldr r3, [r4, 4]",
            "rsb sb, sb, 0",
            "cmp r3, 0",
            "beq 0xbc94",
            "mov r2, r6",
            "mov r6, r7",
            "mov r7, r4",
            "mov r4, r5",
            "mov r5, fp",
            "mov fp, r2",
            "cmp r3, 1",
            "bne 0xb92c",
            "ldr r3, [r7]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xbcb8",
            "mov r0, r6",
            "bl fcn.00001b10",
            "mov r3, r0",
            "mov r0, r7",
            "str r3, [sp, 0xc]",
            "bl fcn.00001b10",
            "ldr r3, [sp, 0xc]",
            "cmp r3, r0",
            "beq 0xbaa8",
            "mov r0, r6",
            "bl fcn.00001b10",
            "mov r3, r0",
            "mov r0, r7",
            "str r3, [sp, 0xc]",
            "bl fcn.00001b10",
            "ldr r3, [sp, 0xc]",
            "add r0, r0, 1",
            "cmp r3, r0",
            "beq 0xba0c",
            "mov r0, sl",
            "mov r1, r4",
            "mov r2, r6",
            "mov r3, r7",
            "str r8, [sp]",
            "bl fcn.00001bb8",
            "cmp r0, 0",
            "beq 0xb9fc",
            "ldr r3, [sl, 4]",
            "cmp r3, 1",
            "bne 0xb8b8",
            "ldr r3, [sl]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xbad8",
            "cmp r3, 2",
            "beq 0xbb00",
            "cmp r3, 4",
            "bne 0xb9d0",
            "ldr r3, [sl, 0xc]",
            "cmp r3, 0",
            "beq 0xbcd0",
            "mov r0, r6",
            "mov r1, fp",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "beq 0xb9fc",
            "ldr r3, [sl]",
            "mov r0, r6",
            "ldr r1, [r3]",
            "bl fcn.00001b28",
            "cmp r0, 0",
            "bne 0xb8d4",
            "ldr sb, [sp, 0x20]",
            "mov r4, r8",
            "ldr r5, [sp, 0x24]",
            "b 0xb7b4",
            "ldr r0, [sp, 0x10]",
            "mov r1, r7",
            "bl fcn.00001d44",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, r6",
            "ldr r1, [sp, 0x10]",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xbaa8",
            "mov r0, r4",
            "mov r1, r6",
            "ldr r2, [sp, 0x10]",
            "bl fcn.000019fc",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, sl",
            "ldr r1, [sp, 0x10]",
            "mov r2, r7",
            "bl fcn.00001a8c",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, r6",
            "mov r1, sl",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xbb24",
            "mov r0, sl",
            "mov r1, 3",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.000019fc",
            "cmp r0, 0",
            "bne 0xb998",
            "b 0xb9fc",
            "mov r0, sl",
            "mov r1, 1",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xb9fc",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl fcn.000019fc",
            "cmp r0, 0",
            "bne 0xb998",
            "b 0xb9fc",
            "ldr r3, [sl, 0xc]",
            "cmp r3, 0",
            "bne 0xb9d0",
            "mov r0, r6",
            "mov r1, fp",
            "mov r2, r5",
            "bl fcn.00001a8c",
            "cmp r0, 0",
            "bne 0xb8ec",
            "b 0xb9fc",
            "ldr r3, [sl, 0xc]",
            "cmp r3, 0",
            "bne 0xb9d0",
            "mov r0, r6",
            "mov r1, fp",
            "bl fcn.00001d44",
            "cmp r0, 0",
            "bne 0xb8d4",
            "b 0xb9fc",
            "mov r0, sl",
            "mov r1, 2",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "bne 0xb998",
            "b 0xb9fc",
            "mov r0, r7",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r4",
            "bl fcn.000019a8",
            "cmp r0, 0",
            "beq 0xb7b4",
            "b 0xb868",
            "mov r0, r2",
            "bl fcn.00001b10",
            "cmp r0, 0x800",
            "bgt 0xb888",
            "ldr r8, [sp, 0x14]",
            "mov sl, r5",
            "ldr r3, [r7, 4]",
            "cmp r3, 0",
            "beq 0xbc08",
            "cmp r3, 1",
            "beq 0xbbf8",
            "mov r5, 0",
            "b 0xbba4",
            "mov r0, fp",
            "mov r1, fp",
            "bl fcn.00001b4c",
            "cmp r0, 0",
            "beq 0xbbf0",
            "mov r1, r5",
            "mov r0, r7",
            "bl fcn.00001c3c",
            "cmp r0, 0",
            "bne 0xbcec",
            "ldr r3, [fp, 4]",
            "add r5, r5, 1",
            "cmp r3, 0",
            "ble 0xbb90",
            "ldr r3, [fp]",
            "ldr r3, [r3]",
            "tst r3, 1",
            "beq 0xbb90",
            "mov r1, fp",
            "ldr r2, [sp, 0x18]",
            "mov r0, fp",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "bne 0xbb90",
            "mov r5, sl",
            "b 0xb7b4",
            "ldr r3, [r7]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xbb88",
            "mov r5, sl",
            "ldr r0, [sp, 0x14]",
            "ldr r1, [sp, 0x18]",
            "mov r2, r0",
            "bl fcn.000019fc",
            "cmp r0, 0",
            "beq 0xb7b4",
            "ldr r3, [r6, 4]",
            "cmp r3, 1",
            "bne 0xb7b4",
            "ldr r3, [r6]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "bne 0xb7b4",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 0",
            "bne 0xb7b4",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [r2, 0xc]",
            "cmp r3, 0",
            "bne 0xbc70",
            "mov r0, r2",
            "ldr r1, [sp, 0x18]",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xbdd8",
            "mov r0, sb",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x18]",
            "mov r3, r4",
            "bl fcn.000019a8",
            "cmp r0, 0",
            "beq 0xb7b4",
            "mov r5, sb",
            "b 0xb7c4",
            "mov r2, sb",
            "ldr r5, [sp, 0x24]",
            "ldr sb, [sp, 0x20]",
            "mov r4, r8",
            "mov r6, r7",
            "str fp, [sp, 0x14]",
            "cmn r2, 1",
            "bne 0xbc24",
            "b 0xbc0c",
            "str r5, [sp, 0x14]",
            "mov r2, sb",
            "ldr r5, [sp, 0x24]",
            "mov r4, r8",
            "ldr sb, [sp, 0x20]",
            "b 0xbcac",
            "mov r0, r6",
            "mov r1, fp",
            "mov r2, 2",
            "bl fcn.00001d5c",
            "cmp r0, 0",
            "bne 0xb8d4",
            "b 0xb9fc",
            "cmp r5, 0",
            "bne 0xbdb8",
            "mov r5, 0",
            "b 0xbd10",
            "mov r0, r8",
            "mov r1, r8",
            "bl fcn.00001b4c",
            "cmp r0, 0",
            "beq 0xbbf0",
            "mov r1, r5",
            "mov r0, r6",
            "bl fcn.00001c3c",
            "cmp r0, 0",
            "bne 0xbd64",
            "ldr r3, [r8, 4]",
            "add r5, r5, 1",
            "cmp r3, 0",
            "ble 0xbcfc",
            "ldr r3, [r8]",
            "ldr r3, [r3]",
            "tst r3, 1",
            "beq 0xbcfc",
            "mov r1, r8",
            "ldr r2, [sp, 0x18]",
            "mov r0, r8",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "bne 0xbcfc",
            "mov r5, sl",
            "b 0xb7b4",
            "cmp r5, 0",
            "bne 0xbe28",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xbdf0",
            "mov r0, fp",
            "mov r1, fp",
            "mov r2, r8",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "beq 0xbbf0",
            "mov r0, r7",
            "mov r1, r7",
            "mov r2, r6",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "bne 0xbb74",
            "mov r5, sl",
            "b 0xb7b4",
            "mov r0, r7",
            "mov r1, r7",
            "mov r2, r5",
            "bl fcn.00001924",
            "cmp r0, 0",
            "bne 0xbcf4",
            "mov r5, sl",
            "b 0xb7b4",
            "mov r0, sb",
            "ldr r1, [sp, 0x14]",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "bne 0xbc8c",
            "b 0xb7b4",
            "mov r0, r8",
            "mov r1, r8",
            "mov r2, fp",
            "bl fcn.00001a98",
            "cmp r0, 0",
            "beq 0xbbf0",
            "mov r0, r6",
            "mov r1, r6",
            "mov r2, r7",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "bne 0xbb74",
            "mov r5, sl",
            "b 0xb7b4",
            "mov r0, r6",
            "mov r1, r6",
            "mov r2, r5",
            "bl fcn.00001924",
            "cmp r0, 0",
            "bne 0xbd6c",
            "mov r5, sl",
            "b 0xb7b4"
        ]
    },
    "fcn.0000199c": {
        "function_address": "0x0000199c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x720]!"
        ]
    },
    "fcn.00001a8c": {
        "function_address": "0x00001a8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x680]!"
        ]
    },
    "fcn.00001b28": {
        "function_address": "0x00001b28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x618]!"
        ]
    },
    "fcn.00001d44": {
        "function_address": "0x00001d44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4b0]!"
        ]
    },
    "fcn.000019fc": {
        "function_address": "0x000019fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6e0]!"
        ]
    },
    "fcn.00001b4c": {
        "function_address": "0x00001b4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x600]!"
        ]
    },
    "fcn.00001924": {
        "function_address": "0x00001924",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x770]!"
        ]
    },
    "sym.BN_div": {
        "function_address": "0x0000a9b0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sb, r0",
            "ldr r0, [r3, 4]",
            "sub sp, sp, 0x5c",
            "mov r8, r3",
            "mov r6, r1",
            "mov r5, r2",
            "ldr r4, [sp, 0x80]",
            "cmp r0, 0",
            "beq 0xaa48",
            "cmp r0, 1",
            "beq 0xaa50",
            "mov r0, r5",
            "mov r1, r8",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "blt 0xaa74",
            "mov r0, r4",
            "bl fcn.00001a74",
            "mov r0, r4",
            "bl fcn.00001a20",
            "str r0, [sp, 0xc]",
            "mov r0, r4",
            "bl fcn.00001a20",
            "str r0, [sp, 0x10]",
            "mov r0, r4",
            "bl fcn.00001a20",
            "cmp sb, 0",
            "mov r7, r0",
            "beq 0xae78",
            "cmp r7, 0",
            "cmpne sb, 0",
            "movne fp, 0",
            "moveq fp, 1",
            "bne 0xaab0",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, 0",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r3, [r3]",
            "ldr r0, [r3]",
            "cmp r0, 0",
            "beq 0xaa48",
            "mov r0, r5",
            "mov r1, r8",
            "bl fcn.00001da4",
            "cmp r0, 0",
            "bge 0xa9f4",
            "cmp r6, 0",
            "beq 0xaa90",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.00001ce4",
            "cmp r0, 0",
            "beq 0xaa48",
            "cmp sb, 0",
            "moveq r0, 1",
            "beq 0xaa48",
            "mov r0, sb",
            "mov r1, 0",
            "bl fcn.00001af8",
            "mov r0, 1",
            "b 0xaa48",
            "ldr r0, [sp, 0xc]",
            "str fp, [r0, 0xc]",
            "mov r0, r8",
            "bl fcn.00001b10",
            "asr r3, r0, 0x1f",
            "mov r2, r0",
            "mov r1, r8",
            "lsr r3, r3, 0x1b",
            "mov r0, r7",
            "add r2, r2, r3",
            "and r2, r2, 0x1f",
            "rsb sl, r3, r2",
            "rsb sl, sl, 0x20",
            "mov r2, sl",
            "bl fcn.00001d5c",
            "cmp r0, 0",
            "beq 0xaa3c",
            "add sl, sl, 0x20",
            "str fp, [r7, 0xc]",
            "ldr r0, [sp, 0x10]",
            "mov r1, r5",
            "mov r2, sl",
            "str sl, [sp, 0x18]",
            "bl fcn.00001d5c",
            "cmp r0, 0",
            "beq 0xaa3c",
            "ldr r2, [sp, 0x10]",
            "add r1, sp, 0x44",
            "mov r0, r1",
            "str r1, [sp, 0x1c]",
            "str fp, [r2, 0xc]",
            "ldr ip, [r2, 4]",
            "ldr r3, [r7, 4]",
            "str ip, [sp, 0x20]",
            "str r3, [sp, 0x14]",
            "bl fcn.00001d98",
            "ldr lr, [sp, 0x10]",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [sp, 0x20]",
            "ldr r2, [lr]",
            "ldr r1, [lr, 8]",
            "cmp r0, 1",
            "rsb r3, r0, ip",
            "str r0, [sp, 0x48]",
            "mov lr, r0",
            "sub r0, r0, 1",
            "add r2, r2, r3, lsl 2",
            "add r1, r1, 1",
            "str r1, [sp, 0x4c]",
            "subne r1, lr, 2",
            "str r2, [sp, 0x44]",
            "ldr r2, [r7]",
            "ldrne fp, [r2, r1, lsl 2]",
            "ldr r1, [sb, 8]",
            "ldr sl, [r2, r0, lsl 2]",
            "ldr r2, [r8, 0xc]",
            "ldr r0, [r5, 0xc]",
            "cmp r3, r1",
            "ldr r1, [sp, 0x10]",
            "eor r2, r2, r0",
            "ldr r8, [r1]",
            "str r2, [sb, 0xc]",
            "bge 0xaec8",
            "ldr ip, [sp, 0xc]",
            "str r3, [sb, 4]",
            "ldr lr, [sp, 0x14]",
            "ldr r2, [ip, 8]",
            "ldr ip, [sb]",
            "cmp lr, r2",
            "bge 0xaee8",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r7",
            "stmib sp, {r3, ip}",
            "bl fcn.00001da4",
            "ldr r3, [sp, 4]",
            "cmp r0, 0",
            "ldr ip, [sp, 8]",
            "sub r3, r3, 1",
            "str r3, [sp, 0x28]",
            "add r0, ip, r3, lsl 2",
            "str r0, [sp, 0x24]",
            "blt 0xaf10",
            "ldr r0, [sp, 0x1c]",
            "mov r2, r7",
            "mov r1, r0",
            "bl fcn.00001d74",
            "cmp r0, 0",
            "ldr ip, [sp, 8]",
            "beq 0xaa3c",
            "ldr r1, [sp, 0x28]",
            "mov r2, 1",
            "str r2, [ip, r1, lsl 2]",
            "ldm sb, {r1, r3}",
            "sub r3, r3, 1",
            "str r2, [r1, r3, lsl 2]",
            "ldr r3, [sb, 4]",
            "ldr r2, [sp, 0x28]",
            "cmp r3, 0",
            "streq r3, [sb, 0xc]",
            "cmp r2, 0",
            "ble 0xae20",
            "ldr ip, [sp, 0x14]",
            "lsr lr, fp, 0x10",
            "ldr r3, [sp, 0x20]",
            "uxth r0, fp",
            "str r7, [sp, 0x20]",
            "ldr r7, [sp, 0x10]",
            "add r1, ip, 1",
            "sub sb, r3, 1",
            "lsl r3, ip, 2",
            "add sb, r8, sb, lsl 2",
            "str r6, [sp, 0x38]",
            "mov r8, 0",
            "str r5, [sp, 0x3c]",
            "mov r6, r3",
            "ldr r5, [sp, 0xc]",
            "str lr, [sp, 0x30]",
            "str r0, [sp, 0x34]",
            "str r1, [sp, 0x2c]",
            "str r4, [sp, 0xc]",
            "ldr r0, [sb]",
            "ldr r3, [sb, -4]!",
            "cmp r0, sl",
            "mvneq r4, 0",
            "beq 0xad34",
            "mov r1, r3",
            "mov r2, sl",
            "str r3, [sp, 4]",
            "bl fcn.00001b1c",
            "ldr lr, [sp, 0x30]",
            "lsr r2, r0, 0x10",
            "ldr r1, [sp, 0x34]",
            "uxth ip, r0",
            "mov r4, r0",
            "ldr r3, [sp, 4]",
            "mul r0, lr, ip",
            "mul ip, r1, ip",
            "mul r1, lr, r2",
            "ldr lr, [sp, 0x34]",
            "mls r3, sl, r4, r3",
            "mla r2, lr, r2, r0",
            "cmp r0, r2",
            "lsl r0, r2, 0x10",
            "addhi r1, r1, 0x10000",
            "add r2, r1, r2, lsr 16",
            "adds r0, r0, ip",
            "addhs r2, r2, 1",
            "b 0xad18",
            "adds r3, r3, sl",
            "sub r4, r4, 1",
            "bhs 0xad34",
            "cmp fp, r0",
            "rsb r0, fp, r0",
            "subhi r2, r2, 1",
            "cmp r2, r3",
            "blo 0xad34",
            "cmp r2, r3",
            "bne 0xad00",
            "ldr r1, [sb, -4]",
            "cmp r1, r0",
            "blo 0xad00",
            "ldr r3, [sp, 0x20]",
            "ldr r2, [sp, 0x14]",
            "ldr r0, [r5]",
            "ldr r1, [r3]",
            "mov r3, r4",
            "bl fcn.00001930",
            "ldr r2, [sp, 0x44]",
            "ldr r3, [sp, 0x48]",
            "ldr ip, [sp, 0x2c]",
            "sub r2, r2, 4",
            "add r3, r3, 1",
            "str r2, [sp, 0x44]",
            "str r3, [sp, 0x48]",
            "cmp ip, 0",
            "ldr r3, [r5]",
            "str r0, [r3, r6]",
            "ble 0xaf08",
            "ldr r2, [r5]",
            "ldr r3, [r2, r6]",
            "cmp r3, 0",
            "bne 0xaf08",
            "add r2, r2, r6",
            "ldr r3, [sp, 0x14]",
            "b 0xada0",
            "ldr r1, [r2, -4]!",
            "cmp r1, 0",
            "bne 0xadb0",
            "cmp r3, 0",
            "mov r0, r3",
            "sub r3, r3, 1",
            "bgt 0xad94",
            "str r0, [r5, 4]",
            "mov r2, r5",
            "ldr r0, [sp, 0x1c]",
            "ldr r3, [sp, 0x48]",
            "mov r1, r0",
            "str r3, [sp, 4]",
            "bl fcn.000019fc",
            "cmp r0, 0",
            "ldr r3, [sp, 4]",
            "beq 0xaf20",
            "ldr r2, [r7, 4]",
            "ldr r1, [sp, 0x48]",
            "add r2, r1, r2",
            "rsb r2, r3, r2",
            "str r2, [r7, 4]",
            "ldr r3, [sp, 0x50]",
            "cmp r3, 0",
            "bne 0xae88",
            "ldr lr, [sp, 0x24]",
            "add r8, r8, 1",
            "str r4, [lr, -4]!",
            "ldr r0, [sp, 0x28]",
            "str lr, [sp, 0x24]",
            "cmp r8, r0",
            "blt 0xac90",
            "ldr r6, [sp, 0x38]",
            "ldr r5, [sp, 0x3c]",
            "ldr r4, [sp, 0xc]",
            "cmp r6, 0",
            "beq 0xae54",
            "mov r0, r6",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x18]",
            "ldr r5, [r5, 0xc]",
            "bl fcn.00001924",
            "ldr r3, [r6, 4]",
            "cmp r3, 0",
            "beq 0xae54",
            "cmp r3, 1",
            "beq 0xae64",
            "str r5, [r6, 0xc]",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, 1",
            "b 0xaa48",
            "ldr r3, [r6]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xae50",
            "b 0xae54",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov sb, r0",
            "b 0xaa28",
            "ldr r0, [sp, 0x1c]",
            "ldr r3, [sp, 0x48]",
            "ldr r2, [sp, 0x20]",
            "mov r1, r0",
            "str r3, [sp, 4]",
            "bl fcn.00001a8c",
            "cmp r0, 0",
            "ldr r3, [sp, 4]",
            "beq 0xaf20",
            "ldr r1, [r7, 4]",
            "sub r4, r4, 1",
            "ldr r2, [sp, 0x48]",
            "add r2, r2, r1",
            "rsb r3, r3, r2",
            "str r3, [r7, 4]",
            "b 0xadf8",
            "add r1, r3, 1",
            "mov r0, sb",
            "str r3, [sp, 4]",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldr r3, [sp, 4]",
            "beq 0xaa3c",
            "b 0xabac",
            "ldr r0, [sp, 0xc]",
            "add r1, lr, 1",
            "stmib sp, {r3, ip}",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldmib sp, {r3, ip}",
            "beq 0xaa3c",
            "b 0xabc8",
            "ldr r0, [sp, 0x2c]",
            "b 0xadb0",
            "ldr r3, [sb, 4]",
            "sub r3, r3, 1",
            "str r3, [sb, 4]",
            "b 0xac30",
            "ldr r4, [sp, 0xc]",
            "b 0xaa3c"
        ]
    },
    "fcn.00001b1c": {
        "function_address": "0x00001b1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x620]!"
        ]
    },
    "sym.aes_ccm_mac": {
        "function_address": "0x00002388",
        "instructions": [
            "cmp r3, 0xff00",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov r8, r0",
            "mov r6, r3",
            "mov r4, r1",
            "ldr sb, [sp, 0x50]",
            "mvnhs r0, 0",
            "ldr r7, [sp, 0x58]",
            "bhs 0x24c4",
            "cmp r3, 0",
            "mov r3, 0x19",
            "strb r3, [sp, 0x18]",
            "bne 0x24cc",
            "add r5, sp, 0x18",
            "mov r1, r2",
            "add r0, r5, 1",
            "mov r2, 0xd",
            "bl loc.imp.memcpy",
            "ldr r3, [sp, 0x54]",
            "ubfx r4, r4, 2, 0x1b",
            "add sl, r4, 6",
            "add r4, sp, 8",
            "mov r0, r8",
            "mov r1, sl",
            "strb r3, [sp, 0x27]",
            "mov r2, r5",
            "lsr ip, r3, 8",
            "mov r3, r4",
            "strb ip, [sp, 0x26]",
            "bl fcn.00001bc4",
            "ldr r3, [sp, 0x54]",
            "lsrs sb, r3, 4",
            "beq 0x2470",
            "mov r5, r7",
            "mov r6, 0",
            "str r7, [sp, 4]",
            "tst r5, 3",
            "movne r3, 0",
            "beq 0x25ac",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r5, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x2428",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r4",
            "mov r3, r4",
            "add r6, r6, 1",
            "add r5, r5, 0x10",
            "bl fcn.00001bc4",
            "cmp r6, sb",
            "blo 0x241c",
            "ldr r7, [sp, 4]",
            "add r7, r7, sb, lsl 4",
            "ldr r1, [sp, 0x54]",
            "ands r0, r1, 0xf",
            "beq 0x24b0",
            "mov r3, 0",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r7, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, r0",
            "bne 0x2480",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r4",
            "mov r3, r4",
            "bl fcn.00001bc4",
            "ldr r0, [sp, 0x5c]",
            "mov r1, r4",
            "mov r2, 8",
            "bl loc.imp.memcpy",
            "mov r0, 0",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "add r5, sp, 0x28",
            "mov r3, 0x59",
            "strb r3, [r5, -0x10]!",
            "mov r1, r2",
            "add r0, r5, 1",
            "mov r2, 0xd",
            "bl loc.imp.memcpy",
            "ldr r1, [sp, 0x54]",
            "ubfx r4, r4, 2, 0x1b",
            "add sl, r4, 6",
            "add r4, sp, 8",
            "mov r2, r5",
            "mov r3, r4",
            "strb r1, [sp, 0x27]",
            "mov r0, r8",
            "lsr ip, r1, 8",
            "mov r1, sl",
            "mov r5, 0",
            "strb ip, [sp, 0x26]",
            "bl fcn.00001bc4",
            "ldrb r2, [sp, 8]",
            "mov r3, 2",
            "ldrb r1, [sp, 9]",
            "eor r2, r2, r6, lsr 8",
            "eor r1, r6, r1",
            "strb r1, [sp, 9]",
            "strb r2, [sp, 8]",
            "b 0x2544",
            "cmp r6, r5",
            "beq 0x258c",
            "add r1, sp, 0x28",
            "add r2, r1, r3",
            "ldrb r1, [sb, r5]",
            "ldrb r0, [r2, -0x20]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "add r5, r5, 1",
            "eor r1, r0, r1",
            "strb r1, [r2, -0x20]",
            "bne 0x253c",
            "mov r3, r4",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r4",
            "bl fcn.00001bc4",
            "cmp r6, r5",
            "mov r3, 0",
            "bne 0x2544",
            "tst r3, 0xf",
            "beq 0x2404",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r4",
            "mov r3, r4",
            "bl fcn.00001bc4",
            "b 0x2404",
            "ldm r5, {r7, ip}",
            "ldr r1, [r5, 8]",
            "ldr r3, [r5, 0xc]",
            "ldm r4, {fp, lr}",
            "ldr r0, [r4, 8]",
            "ldr r2, [r4, 0xc]",
            "eor r7, fp, r7",
            "eor ip, lr, ip",
            "str r7, [r4]",
            "eor r1, r0, r1",
            "str ip, [r4, 4]",
            "eor r3, r2, r3",
            "str r1, [r4, 8]",
            "str r3, [r4, 0xc]",
            "b 0x2444"
        ]
    },
    "sym.BN_set_bit": {
        "function_address": "0x00008e70",
        "instructions": [
            "cmp r1, 0",
            "push {r3, r4, r5, r6, r7, lr}",
            "add r4, r1, 0x1f",
            "ldr r3, [r0, 4]",
            "movge r4, r1",
            "mov r6, r1",
            "asr r4, r4, 5",
            "mov r5, r0",
            "cmp r4, r3",
            "blt 0x8ecc",
            "ldr r2, [r0, 8]",
            "cmp r4, r2",
            "addlt r7, r4, 1",
            "bge 0x8efc",
            "lsl r2, r3, 2",
            "mov r0, 0",
            "ldr r1, [r5]",
            "add r3, r3, 1",
            "cmp r4, r3",
            "str r0, [r1, r2]",
            "add r2, r2, 4",
            "bge 0x8eb0",
            "str r7, [r5, 4]",
            "ldr r3, [r5]",
            "asr r1, r6, 0x1f",
            "mov r2, 1",
            "lsr r1, r1, 0x1b",
            "mov r0, r2",
            "ldr ip, [r3, r4, lsl 2]",
            "add r6, r6, r1",
            "and r6, r6, 0x1f",
            "rsb r1, r1, r6",
            "orr r2, ip, r2, lsl r1",
            "str r2, [r3, r4, lsl 2]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "add r7, r4, 1",
            "mov r1, r7",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "ldr r3, [r5, 4]",
            "cmp r4, r3",
            "bge 0x8ea8",
            "str r7, [r5, 4]",
            "b 0x8ecc"
        ]
    },
    "sym.BN_sqr": {
        "function_address": "0x0000b234",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sl, r1",
            "ldr r8, [r1, 4]",
            "sub sp, sp, 0x80",
            "mov r5, r0",
            "mov r4, r2",
            "cmp r8, 0",
            "movle r3, 0",
            "movle sb, 1",
            "strle r3, [r0, 4]",
            "ble 0xb328",
            "mov r0, r2",
            "bl fcn.00001a74",
            "cmp sl, r5",
            "movne r6, r5",
            "beq 0xb370",
            "mov r0, r4",
            "bl fcn.00001a20",
            "subs sb, r0, 0",
            "beq 0xb320",
            "ldr r3, [r6, 8]",
            "lsl r7, r8, 1",
            "cmp r7, r3",
            "bge 0xb334",
            "cmp r8, 4",
            "beq 0xb380",
            "cmp r8, 8",
            "beq 0xb390",
            "cmp r8, 0xf",
            "ble 0xb358",
            "mov r0, r8",
            "bl fcn.00001984",
            "mov r3, 1",
            "sub r0, r0, 1",
            "cmp r8, r3, lsl r0",
            "beq 0xb3a0",
            "ldr r3, [sb, 8]",
            "cmp r7, r3",
            "bgt 0xb3c8",
            "ldr r0, [r6]",
            "mov r2, r8",
            "ldr r1, [sl]",
            "ldr r3, [sb]",
            "bl fcn.00001ccc",
            "ldr r2, [r6]",
            "sub r3, r7, 1",
            "mov r1, 0",
            "str r7, [r6, 4]",
            "str r1, [r6, 0xc]",
            "ldr r2, [r2, r3, lsl 2]",
            "cmp r2, r1",
            "streq r3, [r6, 4]",
            "cmp r6, r5",
            "moveq sb, 1",
            "beq 0xb320",
            "mov sb, 1",
            "mov r0, r5",
            "mov r1, r6",
            "bl fcn.00001ce4",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, sb",
            "add sp, sp, 0x80",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, r6",
            "add r1, r7, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0xb294",
            "mov sb, r0",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "b 0xb328",
            "ldr r0, [r6]",
            "mov r2, r8",
            "ldr r1, [sl]",
            "mov r3, sp",
            "bl fcn.00001ccc",
            "b 0xb2e4",
            "mov r0, r4",
            "bl fcn.00001a20",
            "mov r6, r0",
            "b 0xb274",
            "ldr r0, [r6]",
            "ldr r1, [sl]",
            "bl fcn.00001c00",
            "b 0xb2e4",
            "ldr r0, [r6]",
            "ldr r1, [sl]",
            "bl fcn.00001bd0",
            "b 0xb2e4",
            "ldr r3, [sb, 8]",
            "lsl r1, r7, 1",
            "cmp r1, r3",
            "bgt 0xb3e4",
            "ldr r0, [r6]",
            "mov r2, r8",
            "ldr r1, [sl]",
            "ldr r3, [sb]",
            "bl fcn.00001cc0",
            "b 0xb2e4",
            "mov r0, sb",
            "mov r1, r7",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0xb2d0",
            "mov sb, r0",
            "b 0xb34c",
            "mov r0, sb",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "bne 0xb3b0",
            "mov sb, r0",
            "b 0xb34c"
        ]
    },
    "fcn.00001ccc": {
        "function_address": "0x00001ccc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x500]!"
        ]
    },
    "fcn.00001c00": {
        "function_address": "0x00001c00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x588]!"
        ]
    },
    "fcn.00001bd0": {
        "function_address": "0x00001bd0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5a8]!"
        ]
    },
    "fcn.00001cc0": {
        "function_address": "0x00001cc0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x508]!"
        ]
    },
    "sym.SHA1Input": {
        "function_address": "0x0000cde8",
        "instructions": [
            "cmp r2, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "sub sp, sp, 8",
            "moveq r6, r2",
            "beq 0xce24",
            "cmp r0, 0",
            "cmpne r1, 0",
            "moveq r6, 1",
            "beq 0xce24",
            "ldr r3, [r0, 0x60]",
            "cmp r3, 0",
            "movne r6, 3",
            "strne r6, [r0, 0x64]",
            "beq 0xce30",
            "mov r0, r6",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r6, [r0, 0x64]",
            "cmp r6, 0",
            "bne 0xce24",
            "sub r7, r2, 1",
            "mov r5, r6",
            "mov r8, 1",
            "b 0xce64",
            "cmp r7, r5",
            "add r5, r5, 1",
            "beq 0xce24",
            "ldr r3, [r4, 0x64]",
            "cmp r3, 0",
            "bne 0xce24",
            "ldrh r3, [r4, 0x1c]",
            "ldrb r0, [r1, r5]",
            "sxtah r2, r4, r3",
            "add r3, r3, 1",
            "strb r0, [r2, 0x1e]",
            "uxth r3, r3",
            "ldr r2, [r4, 0x14]",
            "strh r3, [r4, 0x1c]",
            "add r2, r2, 8",
            "cmp r2, 0",
            "str r2, [r4, 0x14]",
            "bne 0xcea8",
            "ldr r2, [r4, 0x18]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r4, 0x18]",
            "streq r8, [r4, 0x64]",
            "cmp r3, 0x40",
            "bne 0xce4c",
            "mov r0, r4",
            "str r1, [sp, 4]",
            "bl fcn.0000c8f4",
            "ldr r1, [sp, 4]",
            "b 0xce4c"
        ]
    },
    "sym.BN_free": {
        "function_address": "0x0000838c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "beq 0x83d0",
            "ldr r3, [r4, 0x10]",
            "tst r3, 2",
            "beq 0x83cc",
            "orr r3, r3, 0x8000",
            "tst r3, 1",
            "str r3, [r4, 0x10]",
            "popeq {r4, pc}",
            "mov r0, r4",
            "pop {r4, lr}",
            "b loc.imp.free",
            "bl loc.imp.free",
            "ldr r3, [r4, 0x10]",
            "orr r3, r3, 0x8000",
            "tst r3, 1",
            "str r3, [r4, 0x10]",
            "popeq {r4, pc}",
            "b 0x83c0"
        ]
    },
    "sym.BN_mod_exp_mont_word": {
        "function_address": "0x0000c500",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "ldr sb, [r3, 4]",
            "mov r7, r3",
            "mov r8, r1",
            "ldr r3, [sp, 0x54]",
            "cmp sb, 0",
            "str r0, [sp, 0x1c]",
            "str r2, [sp, 0x10]",
            "ldr r6, [sp, 0x50]",
            "str r3, [sp, 0x18]",
            "beq 0xc75c",
            "ldr r3, [r7]",
            "ldr r1, [r3]",
            "ands r3, r1, 1",
            "beq 0xc768",
            "cmp sb, 1",
            "beq 0xc820",
            "ldr r0, [sp, 0x10]",
            "bl fcn.00001b10",
            "subs sl, r0, 0",
            "beq 0xc830",
            "cmp r8, 0",
            "beq 0xc770",
            "mov r0, r6",
            "bl fcn.00001a74",
            "mov r0, r6",
            "bl fcn.00001a20",
            "mov r5, r0",
            "mov r0, r6",
            "bl fcn.00001a20",
            "mov r4, r0",
            "mov r0, r6",
            "bl fcn.00001a20",
            "cmp r5, 0",
            "cmpne r4, 0",
            "mov ip, r0",
            "beq 0xc750",
            "cmp r0, 0",
            "beq 0xc750",
            "ldr r3, [sp, 0x18]",
            "cmp r3, 0",
            "beq 0xc8b4",
            "ldr r3, [sp, 0x18]",
            "str r3, [sp, 0x14]",
            "subs sl, sl, 2",
            "bmi 0xc8e8",
            "ldr r3, [sp, 0x14]",
            "mov fp, r8",
            "str r7, [sp, 0x20]",
            "mov sb, 1",
            "mov r7, ip",
            "add r3, r3, 4",
            "str r3, [sp, 0x24]",
            "mul r5, fp, fp",
            "mov r1, fp",
            "mov r0, r5",
            "bl loc.imp.__aeabi_uidiv",
            "cmp r0, fp",
            "beq 0xc7c8",
            "cmp sb, 0",
            "beq 0xc784",
            "mov r0, r4",
            "mov r1, fp",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xc844",
            "mov r0, r4",
            "mov r1, r4",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [sp, 0x14]",
            "str r6, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc844",
            "mov r5, 1",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, r4",
            "ldr r3, [sp, 0x14]",
            "str r6, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc844",
            "mov sb, 0",
            "ldr r0, [sp, 0x10]",
            "mov r1, sl",
            "bl fcn.00001c3c",
            "cmp r0, 0",
            "moveq fp, r5",
            "beq 0xc6c8",
            "mul fp, r8, r5",
            "mov r1, r8",
            "mov r0, fp",
            "bl loc.imp.__aeabi_uidiv",
            "cmp r5, r0",
            "beq 0xc6c8",
            "cmp sb, 0",
            "beq 0xc7d8",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.00001af8",
            "cmp r0, 0",
            "beq 0xc844",
            "mov r0, r4",
            "mov r1, r4",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [sp, 0x14]",
            "str r6, [sp]",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc844",
            "mov fp, r8",
            "mov sb, 0",
            "subs sl, sl, 1",
            "bpl 0xc5d8",
            "mov ip, r7",
            "ldr r7, [sp, 0x20]",
            "cmp fp, 1",
            "beq 0xc894",
            "cmp sb, 0",
            "beq 0xc84c",
            "mov r0, r4",
            "mov r1, fp",
            "bl fcn.00001af8",
            "subs sb, r0, 0",
            "beq 0xc738",
            "ldr r3, [sp, 0x14]",
            "mov r0, r4",
            "mov r1, r4",
            "str r6, [sp]",
            "add r2, r3, 4",
            "bl fcn.00001d2c",
            "cmp r0, 0",
            "beq 0xc844",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r4",
            "ldr r2, [sp, 0x14]",
            "mov r3, r6",
            "bl fcn.00001a80",
            "subs sb, r0, 0",
            "movne sb, 1",
            "ldr r3, [sp, 0x18]",
            "cmp r3, 0",
            "bne 0xc754",
            "ldr r0, [sp, 0x14]",
            "bl fcn.00001b34",
            "b 0xc754",
            "mov sb, 0",
            "mov r0, r6",
            "bl fcn.00001a5c",
            "mov r0, sb",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov sb, r3",
            "b 0xc75c",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r8",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001af8",
            "mov r0, r4",
            "mov r1, fp",
            "bl fcn.00001b28",
            "cmp r0, 0",
            "beq 0xc738",
            "mov r0, sb",
            "mov r1, r7",
            "mov r2, r4",
            "ldr r3, [sp, 0x20]",
            "str r6, [sp]",
            "bl fcn.00001bb8",
            "cmp r0, 0",
            "beq 0xc738",
            "mov r3, r4",
            "mov r4, r7",
            "mov r7, r3",
            "b 0xc62c",
            "cmp sb, 0",
            "movne sb, 1",
            "bne 0xc654",
            "b 0xc630",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.00001b28",
            "cmp r0, 0",
            "beq 0xc738",
            "mov r0, sb",
            "mov r1, r7",
            "mov r2, r4",
            "ldr r3, [sp, 0x20]",
            "str r6, [sp]",
            "bl fcn.00001bb8",
            "cmp r0, 0",
            "beq 0xc738",
            "mov r3, r4",
            "mov fp, r8",
            "mov r4, r7",
            "mov r7, r3",
            "b 0xc6c8",
            "mov r0, r8",
            "bl loc.imp.__aeabi_uidivmod",
            "mov r8, r1",
            "b 0xc548",
            "ldr r0, [sp, 0x1c]",
            "mov r1, 1",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001af8",
            "mov sb, r0",
            "b 0xc738",
            "mov r0, r4",
            "mov r1, fp",
            "str ip, [sp, 0xc]",
            "bl fcn.00001b28",
            "cmp r0, 0",
            "ldr ip, [sp, 0xc]",
            "beq 0xc738",
            "mov r1, ip",
            "mov r2, r4",
            "mov r0, sb",
            "mov r3, r7",
            "str r6, [sp]",
            "bl fcn.00001bb8",
            "ldr ip, [sp, 0xc]",
            "cmp r0, 0",
            "movne r4, ip",
            "bne 0xc71c",
            "b 0xc738",
            "cmp sb, 0",
            "beq 0xc71c",
            "ldr r0, [sp, 0x1c]",
            "mov r1, fp",
            "bl fcn.00001af8",
            "subs sb, r0, 0",
            "movne sb, 1",
            "b 0xc738",
            "str r0, [sp, 0xc]",
            "bl fcn.00001b58",
            "subs r3, r0, 0",
            "str r3, [sp, 0x14]",
            "beq 0xc750",
            "mov r1, r7",
            "mov r2, r6",
            "bl fcn.00001978",
            "cmp r0, 0",
            "ldr ip, [sp, 0xc]",
            "ldreq sb, [sp, 0x18]",
            "beq 0xc744",
            "b 0xc5b4",
            "mov fp, r8",
            "mov sb, 1",
            "b 0xc6d8"
        ]
    },
    "sym.passhash": {
        "function_address": "0x0000cfb0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0xc",
            "mov r7, r0",
            "mov r6, r1",
            "mov r5, r2",
            "mov r4, r3",
            "bl loc.imp.strlen",
            "cmp r0, 7",
            "ldr sl, [sp, 0x28]",
            "bls 0xcff4",
            "cmp r4, 0x20",
            "movle r8, 0",
            "movgt r8, 1",
            "cmp r0, 0x3f",
            "orrhi r8, r8, 1",
            "cmp r8, 0",
            "beq 0xd000",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "mov ip, 1",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, r4",
            "str sl, [sp, 4]",
            "str ip, [sp]",
            "add sl, sl, 0x14",
            "bl fcn.0000cec4",
            "mov r0, r7",
            "mov ip, 2",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, r4",
            "str ip, [sp]",
            "str sl, [sp, 4]",
            "bl fcn.0000cec4",
            "mov r0, r8",
            "b 0xcff8"
        ]
    },
    "fcn.0000cec4": {
        "function_address": "0x0000cec4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "ldr sb, [sp, 0x70]",
            "cmp r3, 0x20",
            "movlt r6, r3",
            "movge r6, 0x20",
            "add r5, sp, 0x10",
            "mov r8, r0",
            "mov sl, r1",
            "mov r0, r5",
            "mov r1, r2",
            "mov r2, r6",
            "ldr r4, [sp, 0x74]",
            "add r7, sp, 0x34",
            "bl loc.imp.memcpy",
            "asr r3, sb, 8",
            "asr lr, sb, 0x18",
            "str r7, [sp]",
            "asr fp, sb, 0x10",
            "str r3, [sp, 0xc]",
            "add r3, sp, 0x48",
            "add ip, r3, r6",
            "add r1, r6, 4",
            "strb lr, [ip, -0x38]",
            "mov r2, r8",
            "ldr lr, [sp, 0xc]",
            "mov r0, r5",
            "mov r3, sl",
            "strb fp, [ip, -0x37]",
            "strb sb, [ip, -0x35]",
            "movw r6, 0xfff",
            "strb lr, [ip, -0x36]",
            "bl fcn.00001ab0",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, 0x14",
            "bl loc.imp.memcpy",
            "mov r3, sl",
            "mov r1, 0x14",
            "mov r2, r8",
            "mov r0, r7",
            "str r5, [sp]",
            "bl fcn.00001ab0",
            "mov r0, r7",
            "mov r1, r5",
            "mov r2, 0x14",
            "bl loc.imp.memcpy",
            "mov r3, 0",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r5, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "bne 0xcf84",
            "subs r6, r6, 1",
            "bne 0xcf58",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.BN_CTX_free": {
        "function_address": "0x00008304",
        "instructions": [
            "ldr r1, [0x0000837c]",
            "push {r4, r5, r6, lr}",
            "subs r5, r0, 0",
            "add r1, pc, r1",
            "popeq {r4, r5, r6, pc}",
            "ldr r4, [r5, 0x288]",
            "cmp r4, 0",
            "bne 0x8358",
            "add r0, r4, r4, lsl 2",
            "add r4, r4, 1",
            "add r0, r5, r0, lsl 2",
            "add r0, r0, 4",
            "bl fcn.00001dc8",
            "cmp r4, 0x20",
            "bne 0x8324",
            "ldr r3, [r5, 0x284]",
            "tst r3, 1",
            "popeq {r4, r5, r6, pc}",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b loc.imp.free",
            "ldr r3, [0x00008380]",
            "movw r2, 0x493",
            "ldr r0, [0x00008384]",
            "ldr ip, [0x00008388]",
            "add r3, r1, r3",
            "add r0, r1, r0",
            "add r3, r3, 0x17c",
            "add r1, r1, ip",
            "bl loc.imp.__assert",
            "andeq r3, r1, r8, ror sp",
            "invalid"
        ]
    },
    "sym.aes_wrap": {
        "function_address": "0x00003070",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r0, 0x18",
            "cmpne r0, 0x10",
            "ldr r4, [0x000031fc]",
            "sub sp, sp, 0x2b4",
            "lsr sl, r2, 3",
            "str r2, [sp, 0xc]",
            "add r4, pc, r4",
            "beq 0x30a8",
            "cmp r0, 0x20",
            "beq 0x30a8",
            "mov r0, 1",
            "add sp, sp, 0x2b4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r2, [sp, 0xc]",
            "cmp r2, 0x180",
            "bhi 0x309c",
            "tst r2, 7",
            "bne 0x309c",
            "lsl r5, r0, 3",
            "uxtb r2, sl",
            "str r3, [sp]",
            "add sb, sp, 0x1a0",
            "str r2, [sp, 0x1c]",
            "mov r0, sb",
            "mov r2, r5",
            "bl fcn.00001c60",
            "ldr r1, [0x00003200]",
            "add r7, sp, 0x2a0",
            "mov r2, 8",
            "mov r0, r7",
            "lsr r5, r5, 5",
            "add r8, sp, 0x290",
            "add r1, r4, r1",
            "bl loc.imp.memcpy",
            "ldr r3, [sp]",
            "add r1, sp, 0x20",
            "str r1, [sp, 0x18]",
            "add fp, r5, 6",
            "ldr r2, [sp, 0xc]",
            "mov r1, r3",
            "ldr r0, [sp, 0x18]",
            "bl loc.imp.memcpy",
            "mov r2, 1",
            "mov r3, 6",
            "str r2, [sp, 0x14]",
            "add r1, r7, 8",
            "add r2, r8, 8",
            "str r3, [sp, 0x10]",
            "stmib sp, {r1, r2}",
            "cmp sl, 0",
            "ble 0x31ac",
            "ldr r4, [sp, 0x18]",
            "mov r5, 0",
            "ldr r6, [sp, 0x14]",
            "mov r1, r4",
            "mov r2, 8",
            "ldr r0, [sp, 4]",
            "add r5, r5, 1",
            "bl loc.imp.memcpy",
            "mov r3, r8",
            "mov r0, sb",
            "mov r1, fp",
            "mov r2, r7",
            "bl fcn.00001bc4",
            "mov r0, r4",
            "ldr r1, [sp, 8]",
            "mov r2, 8",
            "add r4, r4, 8",
            "bl loc.imp.memcpy",
            "ldm r8, {r0, r1}",
            "cmp sl, r5",
            "add r3, r6, 1",
            "stm r7, {r0, r1}",
            "ldrb r2, [sp, 0x2a7]",
            "eor r2, r2, r6",
            "uxtb r6, r3",
            "strb r2, [sp, 0x2a7]",
            "bgt 0x314c",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x1c]",
            "subs r3, r3, 1",
            "str r3, [sp, 0x10]",
            "add r3, r1, r2",
            "uxtb r3, r3",
            "str r3, [sp, 0x14]",
            "bne 0x3138",
            "mov r1, r7",
            "mov r2, 8",
            "ldr r0, [sp, 0x2d8]",
            "bl loc.imp.memcpy",
            "ldr r3, [sp, 0x2d8]",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0xc]",
            "add r0, r3, 8",
            "bl loc.imp.memcpy",
            "ldr r0, [sp, 0x10]",
            "b 0x30a0"
        ]
    },
    "sym.bn_expand2": {
        "function_address": "0x00008440",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 8]",
            "sub sp, sp, 8",
            "cmp r3, r1",
            "blt 0x8464",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "cmp r1, 0x1000000",
            "blt 0x8474",
            "mov r4, 0",
            "b 0x8458",
            "ldr r3, [r0, 0x10]",
            "tst r3, 2",
            "bne 0x846c",
            "add r0, r1, 1",
            "str r1, [sp, 4]",
            "lsl r0, r0, 2",
            "bl loc.imp.malloc",
            "subs r5, r0, 0",
            "ldr r1, [sp, 4]",
            "moveq r4, r5",
            "beq 0x8458",
            "ldr r2, [r4]",
            "cmp r2, 0",
            "beq 0x85d0",
            "ldr r3, [r4, 4]",
            "asr ip, r3, 2",
            "cmp ip, 0",
            "movle r0, r5",
            "ble 0x8508",
            "mov r6, ip",
            "mov r3, r5",
            "mov r0, r2",
            "ldr sl, [r0, 4]",
            "subs r6, r6, 1",
            "ldr r8, [r0, 8]",
            "ldr r7, [r0, 0xc]",
            "ldr sb, [r0], 0x10",
            "str sl, [r3, 4]",
            "str r8, [r3, 8]",
            "str sb, [r3]",
            "str r7, [r3, 0xc]",
            "add r3, r3, 0x10",
            "bne 0x84cc",
            "lsl ip, ip, 4",
            "ldr r3, [r4, 4]",
            "add r0, r5, ip",
            "add r2, r2, ip",
            "and ip, r3, 3",
            "cmp ip, 2",
            "beq 0x85c0",
            "cmp ip, 3",
            "beq 0x85b8",
            "cmp ip, 1",
            "beq 0x85c8",
            "rsb ip, r3, r1",
            "add r0, r5, r3, lsl 2",
            "asr ip, ip, 3",
            "cmp ip, 0",
            "ble 0x8578",
            "mov r6, ip",
            "mov r3, r0",
            "mov r2, 0",
            "subs r6, r6, 1",
            "str r2, [r3]",
            "str r2, [r3, 4]",
            "str r2, [r3, 8]",
            "str r2, [r3, 0xc]",
            "str r2, [r3, 0x10]",
            "str r2, [r3, 0x14]",
            "str r2, [r3, 0x18]",
            "str r2, [r3, 0x1c]",
            "add r3, r3, 0x20",
            "bne 0x8544",
            "ldr r3, [r4, 4]",
            "add r0, r0, ip, lsl 5",
            "rsb r3, r3, r1",
            "ands r3, r3, 7",
            "beq 0x8594",
            "mov r2, 0",
            "subs r3, r3, 1",
            "str r2, [r0], 4",
            "bne 0x8588",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "beq 0x85ac",
            "str r1, [sp, 4]",
            "bl loc.imp.free",
            "ldr r1, [sp, 4]",
            "str r5, [r4]",
            "str r1, [r4, 8]",
            "b 0x8458",
            "ldr r3, [r2, 8]",
            "str r3, [r0, 8]",
            "ldr r3, [r2, 4]",
            "str r3, [r0, 4]",
            "ldr r3, [r2]",
            "str r3, [r0]",
            "ldr r3, [r4, 4]",
            "b 0x8524"
        ]
    },
    "sym.aes_ccmp_encrypt": {
        "function_address": "0x00002ac4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x54",
            "ldrb ip, [sp, 0x70]",
            "mov r4, r3",
            "add r7, sp, 0x38",
            "mov sl, r1",
            "ldrb r3, [sp, 0x74]",
            "mov r6, r2",
            "mov r1, ip",
            "add ip, sp, 0x4c",
            "mov r8, r0",
            "add r5, sp, 0x18",
            "mov r0, r4",
            "mov r2, r3",
            "str ip, [sp, 4]",
            "mov r3, r7",
            "add ip, sp, 0x48",
            "str r5, [sp]",
            "str ip, [sp, 8]",
            "bl fcn.00001d08",
            "ldr r3, [sp, 0x48]",
            "add ip, r4, r6",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r7",
            "str r5, [sp]",
            "add r4, r4, r3",
            "rsb r6, r3, r6",
            "ldr r3, [sp, 0x4c]",
            "str r6, [sp, 4]",
            "str r4, [sp, 8]",
            "str r4, [sp, 0xc]",
            "str ip, [sp, 0x10]",
            "bl fcn.000019d8",
            "cmp r0, 0",
            "mvnne r0, 0",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00001d08": {
        "function_address": "0x00001d08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4d8]!"
        ]
    },
    "fcn.000019d8": {
        "function_address": "0x000019d8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6f8]!"
        ]
    },
    "sym.DH_free": {
        "function_address": "0x0000480c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "beq 0x4828",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 4]",
            "cmp r0, 0",
            "beq 0x4838",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0x1c]",
            "cmp r0, 0",
            "beq 0x4848",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0x20]",
            "cmp r0, 0",
            "beq 0x4858",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0x24]",
            "cmp r0, 0",
            "beq 0x4868",
            "bl loc.imp.free",
            "ldr r0, [r4, 0x2c]",
            "cmp r0, 0",
            "beq 0x4878",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0xc]",
            "cmp r0, 0",
            "beq 0x4888",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0x10]",
            "cmp r0, 0",
            "beq 0x4898",
            "bl fcn.00001dc8",
            "ldr r0, [r4, 0x18]",
            "cmp r0, 0",
            "beq 0x48a8",
            "bl fcn.00001b34",
            "mov r0, r4",
            "pop {r4, lr}",
            "b loc.imp.free"
        ]
    },
    "sym.rijndaelKeySetupDec": {
        "function_address": "0x000037cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "mov r5, r0",
            "ldr r4, [0x00003afc]",
            "bl fcn.00001c60",
            "lsl r6, r0, 2",
            "add r4, pc, r4",
            "str r0, [sp, 0x34]",
            "cmp r6, 0",
            "ble 0x3858",
            "add r2, r5, r0, lsl 4",
            "mov r3, r5",
            "mov r1, 0",
            "ldr r0, [r3]",
            "add r1, r1, 4",
            "ldr ip, [r2]",
            "rsb r7, r1, r6",
            "cmp r1, r7",
            "str ip, [r3]",
            "str r0, [r2]",
            "ldr ip, [r2, 4]",
            "ldr r0, [r3, 4]",
            "str ip, [r3, 4]",
            "str r0, [r2, 4]",
            "ldr ip, [r2, 8]",
            "ldr r0, [r3, 8]",
            "str ip, [r3, 8]",
            "str r0, [r2, 8]",
            "ldr ip, [r2, 0xc]",
            "ldr r0, [r3, 0xc]",
            "str ip, [r3, 0xc]",
            "add r3, r3, 0x10",
            "str r0, [r2, 0xc]",
            "sub r2, r2, 0x10",
            "blt 0x3800",
            "ldr r1, [sp, 0x34]",
            "cmp r1, 1",
            "ble 0x3af0",
            "mov r2, 1",
            "ldr r3, [0x00003b00]",
            "str r2, [sp, 0x30]",
            "mov r0, r5",
            "ldr r2, [0x00003b04]",
            "add r3, r4, r3",
            "add r2, r4, r2",
            "str r2, [sp, 0x14]",
            "ldr r4, [sp, 0x30]",
            "ldr sl, [r0, 0x10]",
            "ldr r6, [sp, 0x34]",
            "add r4, r4, 1",
            "str r4, [sp, 0x30]",
            "ldr r5, [r0, 0x18]",
            "lsr r1, sl, 0x18",
            "ldr ip, [r0, 0x1c]",
            "cmp r4, r6",
            "add r1, r3, r1, lsl 2",
            "and r4, sl, 0xff",
            "and r8, r5, 0xff",
            "add r4, r3, r4, lsl 2",
            "lsr fp, r5, 0x18",
            "ldrb r1, [r1, 0x28]",
            "add r8, r3, r8, lsl 2",
            "ldr r7, [r0, 0x14]",
            "str fp, [sp, 0xc]",
            "lsr r6, ip, 0x18",
            "str r8, [sp, 0x1c]",
            "and fp, ip, 0xff",
            "ldr r8, [sp, 0xc]",
            "add r6, r3, r6, lsl 2",
            "ldrb r4, [r4, 0x28]",
            "add fp, r3, fp, lsl 2",
            "str r1, [sp, 0xc]",
            "ubfx r1, ip, 0x10, 8",
            "ubfx ip, ip, 8, 8",
            "str r6, [sp, 0x28]",
            "add ip, r3, ip, lsl 2",
            "str r4, [sp, 8]",
            "add r8, r3, r8, lsl 2",
            "ubfx r6, r7, 0x10, 8",
            "str ip, [sp]",
            "ubfx r4, r5, 0x10, 8",
            "ldr ip, [sp, 8]",
            "add r6, r3, r6, lsl 2",
            "str r8, [sp, 0x10]",
            "ubfx r8, sl, 0x10, 8",
            "add r8, r3, r8, lsl 2",
            "add r4, r3, r4, lsl 2",
            "lsr sb, r7, 0x18",
            "str r6, [sp, 0x18]",
            "add ip, r3, ip, lsl 2",
            "str r8, [sp, 4]",
            "ldrb r6, [fp, 0x28]",
            "and r2, r7, 0xff",
            "ldr r8, [sp, 0x1c]",
            "add r2, r3, r2, lsl 2",
            "ldr fp, [sp, 0x28]",
            "add sb, r3, sb, lsl 2",
            "str r4, [sp, 0x20]",
            "add r1, r3, r1, lsl 2",
            "ldr r4, [sp, 0x10]",
            "ubfx sl, sl, 8, 8",
            "str ip, [sp, 8]",
            "add r6, r3, r6, lsl 2",
            "ldr ip, [sp, 4]",
            "add sl, r3, sl, lsl 2",
            "str r1, [sp, 0x2c]",
            "ubfx r7, r7, 8, 8",
            "ldrb r1, [r2, 0x28]",
            "add r7, r3, r7, lsl 2",
            "ldrb r2, [sb, 0x28]",
            "ubfx r5, r5, 8, 8",
            "ldrb sb, [r8, 0x28]",
            "add r5, r3, r5, lsl 2",
            "ldrb r8, [r4, 0x28]",
            "ldrb r4, [fp, 0x28]",
            "add r1, r3, r1, lsl 2",
            "ldrb fp, [ip, 0x28]",
            "add r2, r3, r2, lsl 2",
            "ldr ip, [sp, 0xc]",
            "add sb, r3, sb, lsl 2",
            "add r8, r3, r8, lsl 2",
            "add r4, r3, r4, lsl 2",
            "add fp, r3, fp, lsl 2",
            "add ip, r3, ip, lsl 2",
            "str ip, [sp, 0xc]",
            "ldr ip, [sp, 0x18]",
            "str r1, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "ldrb ip, [ip, 0x28]",
            "str r6, [sp, 0x24]",
            "ldrb sl, [sl, 0x28]",
            "str ip, [sp, 0x10]",
            "ldr ip, [sp, 0x20]",
            "str r8, [sp, 0x20]",
            "ldr r8, [sp, 0x10]",
            "ldrb r1, [ip, 0x28]",
            "ldr ip, [sp, 0x2c]",
            "ldr r6, [sp]",
            "add r8, r3, r8, lsl 2",
            "str r4, [sp, 0x28]",
            "ldrb r2, [ip, 0x28]",
            "add r1, r3, r1, lsl 2",
            "ldr ip, [sp, 8]",
            "str r8, [sp, 0x10]",
            "ldrb r4, [r6, 0x28]",
            "add r2, r3, r2, lsl 2",
            "ldr r8, [ip, 0x428]",
            "ldr ip, [sp, 0x14]",
            "str r2, [sp, 0x2c]",
            "ldr r2, [sp, 0xc]",
            "ldrb r7, [r7, 0x28]",
            "add sl, ip, sl, lsl 2",
            "ldrb r5, [r5, 0x28]",
            "ldr r6, [r2, 0x828]",
            "ldr r2, [sp, 0x18]",
            "str sl, [sp, 8]",
            "add r7, ip, r7, lsl 2",
            "ldr ip, [sp, 0x1c]",
            "eor r6, r8, r6",
            "ldr sl, [r2, 0x428]",
            "ldr r2, [sp, 0x14]",
            "str r7, [sp, 0xc]",
            "ldr r8, [sp, 0x24]",
            "ldr r7, [ip, 0x828]",
            "add ip, r2, r5, lsl 2",
            "ldr r5, [sb, 0x428]",
            "ldr sb, [sp, 0x20]",
            "add r2, r2, r4, lsl 2",
            "eor sl, sl, r7",
            "ldr r4, [sb, 0x828]",
            "ldr sb, [r8, 0x428]",
            "ldr r8, [sp, 0x28]",
            "eor r5, r5, r4",
            "ldr r4, [sp, 0x10]",
            "ldr r7, [r8, 0x828]",
            "ldr r8, [fp, 0xc28]",
            "ldr fp, [r4, 0xc28]",
            "eor sb, sb, r7",
            "ldr r7, [sp, 0x2c]",
            "eor r6, r6, r8",
            "ldr r8, [sp, 8]",
            "ldr r4, [r1, 0xc28]",
            "eor sl, sl, fp",
            "ldr r1, [r7, 0xc28]",
            "ldr r7, [r8, -0xfd0]",
            "ldr r8, [sp, 0xc]",
            "eor r5, r5, r4",
            "eor sb, sb, r1",
            "ldr r4, [ip, -0xfd0]",
            "ldr r1, [r2, -0xfd0]",
            "eor r6, r6, r7",
            "ldr fp, [r8, -0xfd0]",
            "eor r5, r5, r4",
            "str r6, [r0, 0x10]",
            "eor sb, sb, r1",
            "str r5, [r0, 0x18]",
            "eor sl, sl, fp",
            "str sb, [r0, 0x1c]",
            "str sl, [r0, 0x14]",
            "add r0, r0, 0x10",
            "bne 0x3884",
            "ldr r0, [sp, 0x34]",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.aes_cmac_calc": {
        "function_address": "0x00002ff0",
        "instructions": [
            "lsl r3, r3, 3",
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x124",
            "lsr r7, r3, 5",
            "add r4, sp, 0x10",
            "mov sl, r0",
            "mov r8, r1",
            "add r7, r7, 6",
            "mov r1, r2",
            "add r6, sp, 0x110",
            "mov r2, r3",
            "add r5, sp, 0x100",
            "mov r0, r4",
            "bl fcn.00001c60",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, r6",
            "mov r3, r5",
            "bl fcn.0000196c",
            "ldr ip, [sp, 0x140]",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, r6",
            "mov r3, r5",
            "str r8, [sp]",
            "str ip, [sp, 8]",
            "ldr ip, [sp, 0x144]",
            "str sl, [sp, 4]",
            "str ip, [sp, 0xc]",
            "bl fcn.00001b64",
            "add sp, sp, 0x124",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.0000196c": {
        "function_address": "0x0000196c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x740]!"
        ]
    },
    "fcn.00001b64": {
        "function_address": "0x00001b64",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5f0]!"
        ]
    },
    "sym.aes_cbc_decrypt": {
        "function_address": "0x000021c8",
        "instructions": [
            "str lr, [sp, -4]!",
            "mov ip, 0",
            "sub sp, sp, 0x14",
            "str ip, [sp, 8]",
            "ldr ip, [sp, 0x18]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x1c]",
            "str ip, [sp, 4]",
            "bl fcn.00001df8",
            "add sp, sp, 0x14",
            "ldm sp!, {pc}"
        ]
    },
    "fcn.00001df8": {
        "function_address": "0x00001df8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x438]!"
        ]
    },
    "sym.bn_sqr_recursive": {
        "function_address": "0x0000b094",
        "instructions": [
            "cmp r2, 4",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r2",
            "sub sp, sp, 0xc",
            "mov r6, r0",
            "mov r8, r1",
            "mov r5, r3",
            "beq 0xb204",
            "cmp r2, 8",
            "beq 0xb210",
            "cmp r2, 0xf",
            "ble 0xb1f8",
            "asr r7, r2, 1",
            "mov r0, r1",
            "lsl r3, r7, 2",
            "mov r2, r7",
            "add sb, r1, r3",
            "str r3, [sp]",
            "mov r1, sb",
            "bl fcn.00001dec",
            "subs r1, r0, 0",
            "ble 0xb1dc",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, sb",
            "mov r3, r7",
            "bl fcn.00001b88",
            "add fp, r5, r4, lsl 3",
            "lsl sl, r4, 2",
            "mov r1, r5",
            "add r0, r5, sl",
            "mov r2, r7",
            "mov r3, fp",
            "bl fcn.00001cc0",
            "add ip, r6, sl",
            "mov r1, r8",
            "mov r0, r6",
            "mov r2, r7",
            "mov r3, fp",
            "str ip, [sp, 4]",
            "bl fcn.00001cc0",
            "ldr r0, [sp, 4]",
            "mov r1, sb",
            "mov r2, r7",
            "mov r3, fp",
            "bl fcn.00001cc0",
            "add r8, r5, sl",
            "mov r0, r5",
            "mov r1, r6",
            "ldr r2, [sp, 4]",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "mov r1, r5",
            "mov sl, r0",
            "mov r2, r8",
            "mov r3, r4",
            "mov r0, r8",
            "bl fcn.00001b88",
            "ldr r3, [sp]",
            "mov r5, r0",
            "mov r2, r8",
            "add r0, r6, r3",
            "mov r3, r4",
            "mov r1, r0",
            "bl fcn.00001dd4",
            "add sl, r0, sl",
            "subs sl, sl, r5",
            "beq 0xb1d4",
            "add r4, r7, r4",
            "ldr r2, [r6, r4, lsl 2]",
            "add r3, r6, r4, lsl 2",
            "add r2, sl, r2",
            "cmp sl, r2",
            "str r2, [r6, r4, lsl 2]",
            "bls 0xb1d4",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]!",
            "beq 0xb1c0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bne 0xb21c",
            "lsl sl, r4, 2",
            "add fp, r5, r4, lsl 3",
            "add r0, r5, sl",
            "mov r2, sl",
            "bl loc.imp.memset",
            "b 0xb11c",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001ccc",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001c00",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001bd0",
            "mov r0, r5",
            "mov r1, sb",
            "mov r2, r8",
            "mov r3, r7",
            "bl fcn.00001b88",
            "b 0xb100"
        ]
    },
    "sym.bn_sqr_normal": {
        "function_address": "0x0000afb8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "lsl sb, r2, 1",
            "sub r4, r2, 1",
            "mov r8, r0",
            "cmp r4, 0",
            "sub sp, sp, 0xc",
            "mov sl, r2",
            "sub r0, sb, 1",
            "mov r2, 0",
            "mov r5, r8",
            "str r2, [r8, r0, lsl 2]",
            "mov fp, r1",
            "str r3, [sp, 4]",
            "movle r6, r1",
            "str r2, [r5], 4",
            "ble 0xb018",
            "add r6, r1, 4",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r4",
            "ldr r3, [fp]",
            "bl fcn.00001930",
            "str r0, [r5, r4, lsl 2]",
            "add r5, r8, 0xc",
            "sub r4, sl, 2",
            "cmp r4, 0",
            "ble 0xb054",
            "sub r7, sl, 3",
            "add r7, r5, r7, lsl 2",
            "ldr r3, [r6], 4",
            "mov r0, r5",
            "mov r2, r4",
            "sub r4, r4, 1",
            "add r5, r5, 8",
            "mov r1, r6",
            "bl fcn.00001aec",
            "cmp r4, 0",
            "str r0, [r7, 4]!",
            "bgt 0xb02c",
            "mov r3, sb",
            "mov r1, r8",
            "mov r2, r8",
            "mov r0, r8",
            "bl fcn.00001dd4",
            "ldr r0, [sp, 4]",
            "mov r1, fp",
            "mov r2, sl",
            "bl fcn.00001cd8",
            "mov r0, r8",
            "mov r1, r8",
            "ldr r2, [sp, 4]",
            "mov r3, sb",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001dd4"
        ]
    },
    "fcn.00001cd8": {
        "function_address": "0x00001cd8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4f8]!"
        ]
    },
    "sym.bn_sqr_words": {
        "function_address": "0x00004f30",
        "instructions": [
            "ldr ip, [0x00005058]",
            "cmp r2, 0",
            "push {r3, r4, r5, lr}",
            "add ip, pc, ip",
            "blt 0x5034",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r1]",
            "uxth ip, r3",
            "lsr r3, r3, 0x10",
            "mul r5, ip, r3",
            "lsl r4, r5, 0x11",
            "lsr r5, r5, 0xf",
            "mla ip, ip, ip, r4",
            "mla r3, r3, r3, r5",
            "str ip, [r0]",
            "cmp r4, ip",
            "addhi r3, r3, 1",
            "cmp r2, 1",
            "str r3, [r0, 4]",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r1, 4]",
            "uxth ip, r3",
            "lsr r3, r3, 0x10",
            "mul r5, ip, r3",
            "lsl r4, r5, 0x11",
            "lsr r5, r5, 0xf",
            "mla ip, ip, ip, r4",
            "mla r3, r3, r3, r5",
            "str ip, [r0, 8]",
            "cmp r4, ip",
            "addhi r3, r3, 1",
            "cmp r2, 2",
            "str r3, [r0, 0xc]",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r1, 8]",
            "uxth ip, r3",
            "lsr r3, r3, 0x10",
            "mul r5, ip, r3",
            "lsl r4, r5, 0x11",
            "lsr r5, r5, 0xf",
            "mla ip, ip, ip, r4",
            "mla r3, r3, r3, r5",
            "str ip, [r0, 0x10]",
            "cmp r4, ip",
            "addhi r3, r3, 1",
            "cmp r2, 3",
            "str r3, [r0, 0x14]",
            "popeq {r3, r4, r5, pc}",
            "ldr r3, [r1, 0xc]",
            "uxth ip, r3",
            "lsr r3, r3, 0x10",
            "mul r5, ip, r3",
            "lsl r4, r5, 0x11",
            "lsr r5, r5, 0xf",
            "mla ip, ip, ip, r4",
            "mla r3, r3, r3, r5",
            "str ip, [r0, 0x18]",
            "cmp r4, ip",
            "addhi r3, r3, 1",
            "subs r2, r2, 4",
            "str r3, [r0, 0x1c]",
            "popeq {r3, r4, r5, pc}",
            "add r1, r1, 0x10",
            "add r0, r0, 0x20",
            "b 0x4f48",
            "ldr r3, [0x0000505c]",
            "movw r2, 0x1f5",
            "ldr r0, [0x00005060]",
            "ldr r1, [0x00005064]",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r3, r3, 0x24",
            "add r1, ip, r1",
            "bl loc.imp.__assert",
            "andeq r7, r1, ip, asr 2",
            "invalid"
        ]
    },
    "sym.BN_copy": {
        "function_address": "0x00008950",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bne 0x896c",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr r1, [r1, 4]",
            "ldr r3, [r0, 8]",
            "cmp r1, r3",
            "bgt 0x8a3c",
            "asr sl, r1, 2",
            "ldr r7, [r4]",
            "ldr r8, [r5]",
            "cmp sl, 0",
            "ble 0x89d8",
            "mov r2, r8",
            "mov r3, r7",
            "mov r1, sl",
            "ldr sb, [r2, 4]",
            "subs r1, r1, 1",
            "ldr r6, [r2, 8]",
            "ldr r0, [r2, 0xc]",
            "ldr ip, [r2], 0x10",
            "str sb, [r3, 4]",
            "str r6, [r3, 8]",
            "str ip, [r3]",
            "str r0, [r3, 0xc]",
            "add r3, r3, 0x10",
            "bne 0x899c",
            "lsl sl, sl, 4",
            "ldr r1, [r5, 4]",
            "add r7, r7, sl",
            "add r8, r8, sl",
            "and r3, r1, 3",
            "cmp r3, 2",
            "beq 0x8a24",
            "cmp r3, 3",
            "beq 0x8a1c",
            "cmp r3, 1",
            "beq 0x8a2c",
            "cmp r1, 0",
            "str r1, [r4, 4]",
            "bne 0x8a0c",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r1, [r3]",
            "ldr r3, [r5, 0xc]",
            "mov r0, r4",
            "str r3, [r4, 0xc]",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr r3, [r8, 8]",
            "str r3, [r7, 8]",
            "ldr r3, [r8, 4]",
            "str r3, [r7, 4]",
            "ldr r3, [r8]",
            "str r3, [r7]",
            "ldr r1, [r5, 4]",
            "b 0x89f4",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "moveq r4, r0",
            "beq 0x8964",
            "ldr r1, [r5, 4]",
            "b 0x897c"
        ]
    },
    "sym.BN_add_word": {
        "function_address": "0x0000b5a0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0xc]",
            "mov r5, r1",
            "cmp r3, 0",
            "bne 0xb64c",
            "ldmib r0, {r1, r3}",
            "cmp r1, r3",
            "bge 0xb680",
            "cmp r1, 0",
            "movle r2, 0",
            "movle r3, r2",
            "ble 0xb60c",
            "ldr r3, [r4]",
            "ldr r2, [r3]",
            "add r2, r5, r2",
            "cmp r5, r2",
            "str r2, [r3]",
            "movls r3, 0",
            "bls 0xb614",
            "mov r3, 0",
            "ldr r2, [r4, 4]",
            "add r3, r3, 1",
            "cmp r2, r3",
            "bgt 0xb630",
            "lsl r2, r3, 2",
            "mov r5, 1",
            "ldr r1, [r4]",
            "str r5, [r1, r2]",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "addge r2, r2, 1",
            "movge r0, 1",
            "strge r2, [r4, 4]",
            "movlt r0, 1",
            "pop {r3, r4, r5, pc}",
            "ldr r2, [r4]",
            "ldr r1, [r2, r3, lsl 2]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r2, r3, lsl 2]",
            "beq 0xb5f4",
            "b 0xb614",
            "mov r3, 0",
            "str r3, [r0, 0xc]",
            "bl fcn.00001ba0",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "popeq {r3, r4, r5, pc}",
            "cmp r3, 1",
            "beq 0xb698",
            "ldr r3, [r4, 0xc]",
            "rsbs r3, r3, 1",
            "movlo r3, 0",
            "str r3, [r4, 0xc]",
            "pop {r3, r4, r5, pc}",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r3, r4, r5, pc}",
            "ldr r1, [r4, 4]",
            "b 0xb5c4",
            "ldr r3, [r4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "popeq {r3, r4, r5, pc}",
            "b 0xb66c"
        ]
    },
    "sym.MD5Update": {
        "function_address": "0x0000e1c0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r6, r2",
            "ldr r3, [r0]",
            "mov r7, r1",
            "sub sp, sp, 0x44",
            "mov r4, r0",
            "mov r8, sp",
            "add r5, sp, 0x3c",
            "ubfx r2, r3, 3, 6",
            "add sl, r0, 8",
            "add r1, r3, r6, lsl 3",
            "cmp r3, r1",
            "str r1, [r0]",
            "ldrhi r3, [r0, 4]",
            "ldrls r3, [r0, 4]",
            "addhi r3, r3, 1",
            "strhi r3, [r0, 4]",
            "cmp r6, 0",
            "add r3, r3, r6, lsr 29",
            "str r3, [r0, 4]",
            "beq 0xe238",
            "add r3, r4, r2",
            "ldrb r1, [r7], 1",
            "add r2, r2, 1",
            "cmp r2, 0x40",
            "strb r1, [r3, 0x18]",
            "beq 0xe240",
            "sub r6, r6, 1",
            "cmp r6, 0",
            "bne 0xe214",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "mov r3, r4",
            "sub r2, r8, 4",
            "ldrb r1, [r3, 0x1a]",
            "ldrb lr, [r3, 0x1b]",
            "ldrb ip, [r3, 0x18]",
            "ldrb r0, [r3, 0x19]",
            "add r3, r3, 4",
            "lsl r1, r1, 0x10",
            "orr r1, r1, lr, lsl 24",
            "orr r1, r1, ip",
            "orr r1, r1, r0, lsl 8",
            "str r1, [r2, 4]!",
            "cmp r2, r5",
            "bne 0xe248",
            "mov r0, sl",
            "mov r1, sp",
            "bl fcn.0000d714",
            "sub r6, r6, 1",
            "mov r2, 0",
            "b 0xe230"
        ]
    },
    "sym.aes_ccmp_cal_params": {
        "function_address": "0x000027e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr fp, [sp, 0x38]",
            "mov sb, 0",
            "mov r7, r3",
            "mov r4, r3",
            "strb sb, [r7], 1",
            "add r3, r7, 1",
            "strb sb, [r4, 1]",
            "mov r5, r0",
            "strb sb, [r3], 1",
            "mov r0, fp",
            "str r1, [sp, 4]",
            "mov r1, sb",
            "strb sb, [r3], 1",
            "str r2, [sp, 8]",
            "mov r2, 0x1e",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3], 1",
            "strb sb, [r3]",
            "bl loc.imp.memset",
            "ldrb r3, [r5]",
            "ldrb r8, [r5, 1]",
            "orr r8, r3, r8, lsl 8",
            "and sl, r8, 0x300",
            "ubfx r3, r8, 2, 2",
            "cmp sl, 0x300",
            "movne sl, 0",
            "moveq sl, 1",
            "cmp r3, 2",
            "beq 0x2a0c",
            "str sb, [sp, 0xc]",
            "cmp sl, 0",
            "ldr r1, [sp, 0x40]",
            "moveq r2, sl",
            "movne r2, 6",
            "cmp sb, 0",
            "addne r2, r2, 2",
            "add r0, r2, 0x20",
            "add r3, r2, 0x18",
            "str r0, [r1]",
            "add r2, r2, 0x16",
            "ldr r1, [sp, 0x3c]",
            "add r6, r5, r3",
            "mov r0, r7",
            "str r2, [r1]",
            "add r1, r5, 0xa",
            "ldr r2, [sp, 8]",
            "strb r2, [r4]",
            "mov r2, 6",
            "str r3, [sp]",
            "bl loc.imp.memcpy",
            "ldrb r2, [r6, 7]",
            "ldr r1, [sp, 4]",
            "strb r2, [r4, 7]",
            "ldrb r2, [r6, 6]",
            "cmp r1, 0",
            "strb r2, [r4, 8]",
            "ldrb r2, [r6, 5]",
            "strb r2, [r4, 9]",
            "ldrb r2, [r6, 4]",
            "strb r2, [r4, 0xa]",
            "ldrb r2, [r6, 1]",
            "strb r2, [r4, 0xb]",
            "ldr r3, [sp]",
            "ldrb r3, [r5, r3]",
            "strb r3, [r4, 0xc]",
            "bne 0x29ac",
            "ldr r2, [sp, 8]",
            "mov r0, fp",
            "add r1, r5, 4",
            "tst r2, 0x10",
            "movwne r2, 0xc7ff",
            "movweq r2, 0xc78f",
            "andne r2, r8, r2",
            "andeq r2, r8, r2",
            "lsr r3, r2, 8",
            "strb r2, [r0], 1",
            "mov r2, 0x12",
            "strb r3, [fp, 1]",
            "add r0, r0, 1",
            "bl loc.imp.memcpy",
            "ldrb r3, [r5, 0x16]",
            "add fp, fp, 0x14",
            "mov r0, fp",
            "cmp sl, 0",
            "and r3, r3, 0xf",
            "strb r3, [r0], 1",
            "mov r3, 0",
            "strb r3, [fp, 1]",
            "add r0, r0, 1",
            "bne 0x29f8",
            "cmp sb, 0",
            "beq 0x29a4",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "ldrne r1, [sp, 0xc]",
            "ldreq r1, [sp, 0xc]",
            "ldreq r2, [sp, 4]",
            "strbne r1, [r0]",
            "lsrne r3, r1, 8",
            "andeq r3, r1, 0xf",
            "strbeq r2, [r0, 1]",
            "strbeq r3, [r0]",
            "strbne r3, [r0, 1]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "movw r2, 0xf7ff",
            "mov r0, fp",
            "and r2, r8, r2",
            "add r1, r5, 4",
            "lsr r3, r2, 8",
            "strb r2, [r0], 1",
            "mov r2, 0x12",
            "strb r3, [fp, 1]",
            "add r0, r0, 1",
            "add fp, fp, 0x14",
            "bl loc.imp.memcpy",
            "mov r3, 0",
            "mov r0, fp",
            "cmp sl, 0",
            "strb r3, [r0], 1",
            "mov r3, 0",
            "add r0, r0, 1",
            "strb r3, [fp, 1]",
            "beq 0x2970",
            "add r1, r5, 0x18",
            "mov r2, 6",
            "bl loc.imp.memcpy",
            "add r0, fp, 8",
            "b 0x2970",
            "ubfx sb, r8, 4, 4",
            "ands sb, sb, 8",
            "beq 0x287c",
            "cmp sl, 0",
            "mov sb, 1",
            "moveq r3, 0x18",
            "movne r3, 0x1e",
            "ldrh r3, [r5, r3]",
            "str r3, [sp, 0xc]",
            "b 0x2880"
        ]
    },
    "sym.DH_init": {
        "function_address": "0x00004b60",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "mov r7, r1",
            "mov r5, r2",
            "bl fcn.00001b70",
            "mov r1, r7",
            "mov r4, r0",
            "mov r2, 0",
            "mov r0, r6",
            "bl fcn.00001990",
            "str r0, [r4]",
            "bl fcn.00001de0",
            "mov r1, r5",
            "str r0, [r4, 4]",
            "bl fcn.00001af8",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00001b70": {
        "function_address": "0x00001b70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x5e8]!"
        ]
    },
    "sym.aes_ccmp_decrypt": {
        "function_address": "0x00002a34",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x4c",
            "ldrb ip, [sp, 0x68]",
            "mov r4, r3",
            "add r6, sp, 0x30",
            "mov r8, r1",
            "ldrb r3, [sp, 0x6c]",
            "mov r7, r0",
            "mov r1, ip",
            "add ip, sp, 0x44",
            "add r5, sp, 0x10",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "mov sl, r2",
            "add ip, sp, 0x40",
            "mov r2, r3",
            "mov r3, r6",
            "str ip, [sp, 8]",
            "str r5, [sp]",
            "bl fcn.00001d08",
            "ldr r3, [sp, 0x40]",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, r6",
            "str r5, [sp]",
            "add r4, r4, r3",
            "rsb sl, r3, sl",
            "ldr r3, [sp, 0x44]",
            "str sl, [sp, 4]",
            "str r4, [sp, 8]",
            "str r4, [sp, 0xc]",
            "bl fcn.00001a38",
            "cmp r0, 0",
            "mvnne r0, 1",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00001a38": {
        "function_address": "0x00001a38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x6b8]!"
        ]
    },
    "sym.sha256": {
        "function_address": "0x000110a0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x74",
            "mov r6, r1",
            "mov r7, r0",
            "mov r0, sp",
            "mov r5, r2",
            "bl fcn.00001d20",
            "mov r1, r7",
            "mov r0, sp",
            "mov r2, r6",
            "mov r4, sp",
            "bl fcn.00001a2c",
            "mov r0, r5",
            "mov r1, sp",
            "bl fcn.00001abc",
            "add sp, sp, 0x74",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.bn_mul_recursive": {
        "function_address": "0x00009488",
        "instructions": [
            "cmp r3, 8",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r4, r3",
            "mov r6, r0",
            "mov sb, r1",
            "mov r7, r2",
            "ldr r8, [sp, 0x48]",
            "beq 0x97b8",
            "cmp r3, 0xf",
            "ble 0x9634",
            "asr r5, r3, 1",
            "mov r0, r1",
            "lsl fp, r5, 2",
            "mov r2, r5",
            "add r3, r1, fp",
            "add ip, r7, fp",
            "mov r1, r3",
            "str r3, [sp, 0x10]",
            "str ip, [sp, 0x14]",
            "bl fcn.00001dec",
            "mov sl, r0",
            "mov r1, r7",
            "add sl, sl, sl, lsl 1",
            "ldr r0, [sp, 0x14]",
            "mov r2, r5",
            "bl fcn.00001dec",
            "add sl, sl, r0",
            "add sl, sl, 4",
            "cmp sl, 8",
            "addls pc, pc, sl, lsl 2",
            "b 0x9698",
            "b 0x9670",
            "b 0x952c",
            "b 0x9764",
            "b 0x952c",
            "b 0x952c",
            "b 0x952c",
            "b 0x972c",
            "b 0x952c",
            "b 0x96f8",
            "mov r3, 1",
            "mov ip, 0",
            "str ip, [sp, 0x18]",
            "cmp r5, 8",
            "beq 0x96a8",
            "add r2, r8, r4, lsl 3",
            "cmp r3, 0",
            "str r2, [sp, 0x1c]",
            "beq 0x964c",
            "lsl sl, r4, 2",
            "mov r1, 0",
            "add r0, r8, sl",
            "mov r2, sl",
            "bl loc.imp.memset",
            "ldr ip, [sp, 0x1c]",
            "mov r2, r7",
            "mov r0, r6",
            "mov r1, sb",
            "mov r3, r5",
            "add r7, r6, sl",
            "str ip, [sp]",
            "add sl, r8, sl",
            "bl fcn.00001d14",
            "ldr ip, [sp, 0x1c]",
            "mov r0, r7",
            "ldr r1, [sp, 0x10]",
            "mov r3, r5",
            "ldr r2, [sp, 0x14]",
            "str ip, [sp]",
            "bl fcn.00001d14",
            "mov r2, r7",
            "mov r0, r8",
            "mov r1, r6",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "ldr r2, [sp, 0x18]",
            "mov r7, r0",
            "cmp r2, 0",
            "beq 0x979c",
            "mov r0, sl",
            "mov r1, r8",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.00001b88",
            "rsb r7, r0, r7",
            "add r0, r6, fp",
            "mov r2, sl",
            "mov r3, r4",
            "mov r1, r0",
            "bl fcn.00001dd4",
            "adds r7, r0, r7",
            "beq 0x962c",
            "add r4, r5, r4",
            "ldr r2, [r6, r4, lsl 2]",
            "add r3, r6, r4, lsl 2",
            "add r2, r7, r2",
            "cmp r7, r2",
            "str r2, [r6, r4, lsl 2]",
            "bls 0x962c",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]!",
            "beq 0x9618",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r2, r3",
            "str r4, [sp, 0x48]",
            "mov r3, r7",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001a68",
            "ldr r3, [sp, 0x1c]",
            "lsl sl, r4, 2",
            "mov r1, r8",
            "add r2, r8, fp",
            "add r0, r8, sl",
            "str r3, [sp]",
            "mov r3, r5",
            "bl fcn.00001d14",
            "b 0x9564",
            "ldr r1, [sp, 0x10]",
            "mov r2, sb",
            "mov r3, r5",
            "mov r0, r8",
            "bl fcn.00001b88",
            "add r0, r8, fp",
            "mov r1, r7",
            "ldr r2, [sp, 0x14]",
            "mov r3, r5",
            "bl fcn.00001b88",
            "cmp r5, 8",
            "mov r3, 0",
            "str r3, [sp, 0x18]",
            "bne 0x9540",
            "cmp r3, 0",
            "bne 0x97c4",
            "lsl r3, r4, 2",
            "mov r1, r8",
            "add r2, r8, fp",
            "add sl, r8, r3",
            "str r3, [sp, 0xc]",
            "mov r0, sl",
            "bl fcn.00001948",
            "ldr r3, [sp, 0xc]",
            "mov r0, r6",
            "mov r1, sb",
            "mov r2, r7",
            "add r7, r6, r3",
            "bl fcn.00001948",
            "mov r0, r7",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x14]",
            "bl fcn.00001948",
            "b 0x95a4",
            "mov r1, sb",
            "ldr r2, [sp, 0x10]",
            "mov r3, r5",
            "mov r0, r8",
            "bl fcn.00001b88",
            "mov r3, r5",
            "add r0, r8, fp",
            "ldr r1, [sp, 0x14]",
            "mov r2, r7",
            "bl fcn.00001b88",
            "mov r3, 0",
            "str r3, [sp, 0x18]",
            "b 0x9538",
            "mov r1, sb",
            "ldr r2, [sp, 0x10]",
            "mov r3, r5",
            "mov r0, r8",
            "bl fcn.00001b88",
            "mov r3, r5",
            "add r0, r8, fp",
            "mov r1, r7",
            "ldr r2, [sp, 0x14]",
            "bl fcn.00001b88",
            "mov r3, 1",
            "str r3, [sp, 0x18]",
            "mov r3, 0",
            "b 0x9538",
            "ldr r1, [sp, 0x10]",
            "mov r2, sb",
            "mov r3, r5",
            "mov r0, r8",
            "bl fcn.00001b88",
            "mov r2, r7",
            "mov r3, r5",
            "add r0, r8, fp",
            "ldr r1, [sp, 0x14]",
            "bl fcn.00001b88",
            "mov r2, 1",
            "mov r3, 0",
            "str r2, [sp, 0x18]",
            "b 0x9538",
            "mov r0, sl",
            "mov r1, sl",
            "mov r2, r8",
            "mov r3, r4",
            "bl fcn.00001dd4",
            "add r7, r0, r7",
            "b 0x95e0",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b fcn.00001948",
            "lsl r3, r4, 2",
            "mov r1, 0",
            "mov r2, 0x40",
            "add sl, r8, r3",
            "str r3, [sp, 0xc]",
            "mov r0, sl",
            "bl loc.imp.memset",
            "ldr r3, [sp, 0xc]",
            "b 0x96d0"
        ]
    },
    "sym.BN_mod_mul_montgomery": {
        "function_address": "0x0000b3fc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r7, r0",
            "ldr r4, [sp, 0x20]",
            "mov r8, r1",
            "mov sl, r2",
            "mov r6, r3",
            "mov r0, r4",
            "bl fcn.00001a74",
            "mov r0, r4",
            "bl fcn.00001a20",
            "subs r5, r0, 0",
            "beq 0xb468",
            "cmp r8, sl",
            "beq 0xb478",
            "mov r1, r8",
            "mov r2, sl",
            "mov r3, r4",
            "bl fcn.0000199c",
            "cmp r0, 0",
            "beq 0xb48c",
            "mov r1, r5",
            "mov r0, r7",
            "mov r2, r6",
            "mov r3, r4",
            "bl fcn.00001a80",
            "subs r5, r0, 0",
            "movne r5, 1",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r1, r8",
            "mov r2, r4",
            "bl fcn.00001bf4",
            "cmp r0, 0",
            "bne 0xb44c",
            "mov r5, r0",
            "mov r0, r4",
            "bl fcn.00001a5c",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00001bf4": {
        "function_address": "0x00001bf4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x590]!"
        ]
    },
    "sym.aes_cbc_encrypt": {
        "function_address": "0x00002058",
        "instructions": [
            "push {r4, lr}",
            "ands r4, r3, 0xf",
            "sub sp, sp, 0x10",
            "beq 0x2074",
            "mvn r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, pc}",
            "cmp r3, 0xf",
            "bls 0x2068",
            "ldr ip, [sp, 0x18]",
            "str r4, [sp, 8]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x1c]",
            "str ip, [sp, 4]",
            "bl fcn.00001d50",
            "b 0x206c"
        ]
    },
    "fcn.00001d50": {
        "function_address": "0x00001d50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x4a8]!"
        ]
    },
    "sym.BN_lshift1": {
        "function_address": "0x0000a4e4",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "beq 0xa588",
            "ldr r2, [r1, 0xc]",
            "ldr r3, [r0, 8]",
            "str r2, [r0, 0xc]",
            "ldr r1, [r1, 4]",
            "cmp r1, r3",
            "bge 0xa570",
            "str r1, [r5, 4]",
            "ldm r4, {r0, r3}",
            "ldr ip, [r5]",
            "cmp r3, 0",
            "movle r0, 1",
            "pople {r4, r5, r6, pc}",
            "mov r3, 0",
            "mov r1, r3",
            "ldr r2, [r0], 4",
            "add r3, r3, 1",
            "orr r6, r1, r2, lsl 1",
            "lsr r1, r2, 0x1f",
            "str r6, [ip], 4",
            "ldr r2, [r4, 4]",
            "cmp r2, r3",
            "bgt 0xa530",
            "cmp r1, 0",
            "movne r0, 1",
            "moveq r0, 1",
            "strne r0, [ip]",
            "ldrne r3, [r5, 4]",
            "addne r3, r3, r0",
            "strne r3, [r5, 4]",
            "pop {r4, r5, r6, pc}",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "ldr r1, [r4, 4]",
            "b 0xa510",
            "ldmib r0, {r1, r3}",
            "cmp r1, r3",
            "blt 0xa514",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "b 0xa514"
        ]
    },
    "sym.aes_cbc_encrypt_pad": {
        "function_address": "0x00001e98",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "str r1, [sp, 4]",
            "cmp r3, 0xf",
            "mov r8, r3",
            "mov sb, r0",
            "ldr sl, [sp, 0x44]",
            "movls r4, 0",
            "ldrb r1, [sp, 0x48]",
            "ldrls r0, [sp, 0x40]",
            "movls r3, sl",
            "str r1, [sp]",
            "bls 0x1fc0",
            "ldr r3, [sp, 4]",
            "mov r6, 0",
            "ldr r4, [sp, 0x40]",
            "add r5, sp, 8",
            "add r7, sl, r6",
            "ubfx fp, r3, 2, 0x1b",
            "orr r3, r2, r4",
            "add fp, fp, 6",
            "tst r3, 3",
            "movne r3, 0",
            "beq 0x1f54",
            "ldrb r1, [r2, r3]",
            "ldrb r0, [r4, r3]",
            "eor r1, r0, r1",
            "strb r1, [r5, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x1ef8",
            "mov r3, r7",
            "mov r0, sb",
            "mov r1, fp",
            "mov r2, r5",
            "add r6, r6, 0x10",
            "add r4, r4, 0x10",
            "bl fcn.00001bc4",
            "rsb r3, r6, r8",
            "cmp r3, 0xf",
            "bls 0x1f9c",
            "mov r2, r7",
            "add r7, sl, r6",
            "orr r3, r2, r4",
            "tst r3, 3",
            "movne r3, 0",
            "bne 0x1ef8",
            "ldr r1, [sp, 0x40]",
            "ldr ip, [r2]",
            "ldr r0, [r4, 4]",
            "ldr r3, [r1, r6]",
            "ldr r1, [r4, 8]",
            "eor ip, ip, r3",
            "ldr r3, [r4, 0xc]",
            "str ip, [r5]",
            "ldr ip, [r2, 4]",
            "eor r0, ip, r0",
            "str r0, [r5, 4]",
            "ldr r0, [r2, 8]",
            "eor r1, r0, r1",
            "str r1, [r5, 8]",
            "ldr r2, [r2, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r5, 0xc]",
            "b 0x1f14",
            "sub r8, r8, 0x10",
            "ldr r1, [sp, 0x40]",
            "lsr r3, r8, 4",
            "and r8, r8, 0xf",
            "add r4, r3, 1",
            "add r2, sl, r3, lsl 4",
            "lsl r4, r4, 4",
            "add r3, sl, r4",
            "add r0, r1, r4",
            "ldr r1, [sp]",
            "cmp r1, 0",
            "moveq r0, r4",
            "bne 0x1fd8",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "cmp r8, 0",
            "beq 0x2004",
            "mov r1, 0",
            "add r5, sp, 8",
            "ldrb r6, [r2, r1]",
            "ldrb ip, [r0, r1]",
            "eor ip, r6, ip",
            "strb ip, [r5, r1]",
            "add r1, r1, 1",
            "cmp r1, r8",
            "bne 0x1fe8",
            "ldr r1, [sp]",
            "cmp r1, 1",
            "mvnne r0, 0",
            "bne 0x1fd0",
            "rsb r0, r8, 0x10",
            "add r5, sp, 8",
            "and r0, r0, 0xff",
            "ldrb r1, [r2, r8]",
            "eor r1, r0, r1",
            "strb r1, [r5, r8]",
            "add r8, r8, 1",
            "cmp r8, 0x10",
            "bne 0x2020",
            "ldr r2, [sp, 4]",
            "mov r0, sb",
            "ubfx r1, r2, 2, 0x1b",
            "mov r2, r5",
            "add r1, r1, 6",
            "bl fcn.00001bc4",
            "add r0, r4, 0x10",
            "b 0x1fd0"
        ]
    },
    "sym.BN_lshift": {
        "function_address": "0x0000a6c0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r7, r2",
            "ldr r2, [r1, 0xc]",
            "cmp r7, 0",
            "add r6, r7, 0x1f",
            "mov r5, r1",
            "movge r6, r7",
            "ldr r3, [r0, 8]",
            "str r2, [r0, 0xc]",
            "asr r6, r6, 5",
            "ldr r1, [r1, 4]",
            "mov r4, r0",
            "add r1, r6, r1",
            "cmp r1, r3",
            "bge 0xa7fc",
            "asr r3, r7, 0x1f",
            "mov r2, 0",
            "ldr r0, [r4]",
            "lsr r3, r3, 0x1b",
            "ldr ip, [r5]",
            "add r7, r7, r3",
            "str r2, [r0, r1, lsl 2]",
            "and r7, r7, 0x1f",
            "rsb r7, r3, r7",
            "cmp r7, r2",
            "rsb sb, r7, 0x20",
            "bne 0xa7bc",
            "ldr r1, [r5, 4]",
            "cmp r1, r2",
            "ble 0xa758",
            "add r3, r6, r1",
            "add ip, ip, r1, lsl 2",
            "add r3, r0, r3, lsl 2",
            "ldr r2, [ip, -4]!",
            "add r7, r7, 1",
            "cmp r7, r1",
            "str r2, [r3, -4]!",
            "bne 0xa744",
            "lsl r2, r6, 2",
            "mov r1, 0",
            "bl loc.imp.memset",
            "ldr r3, [r5, 4]",
            "add r3, r3, 1",
            "add r6, r3, r6",
            "cmp r6, 0",
            "str r6, [r4, 4]",
            "ble 0xa7b4",
            "ldr r3, [r4]",
            "sub r6, r6, 1",
            "ldr r2, [r3, r6, lsl 2]",
            "add r3, r3, r6, lsl 2",
            "cmp r2, 0",
            "beq 0xa7a4",
            "b 0xa7b4",
            "ldr r2, [r3, -4]!",
            "cmp r2, 0",
            "bne 0xa818",
            "cmp r6, 0",
            "str r6, [r4, 4]",
            "sub r6, r6, 1",
            "bgt 0xa798",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr sl, [r5, 4]",
            "cmp sl, 0",
            "ble 0xa758",
            "add r3, r6, sl",
            "add ip, ip, sl, lsl 2",
            "add r3, r0, r3, lsl 2",
            "ldr r1, [ip, -4]!",
            "add r2, r2, 1",
            "ldr r8, [r3]",
            "cmp r2, sl",
            "lsl lr, r1, r7",
            "orr r1, r8, r1, lsr sb",
            "str r1, [r3]",
            "str lr, [r3, -4]!",
            "bne 0xa7d4",
            "b 0xa758",
            "add r1, r1, 1",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "popeq {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldr r1, [r5, 4]",
            "add r1, r6, r1",
            "b 0xa6fc",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.SHA256": {
        "function_address": "0x00010dc0",
        "instructions": [
            "ldr r3, [0x00010e20]",
            "push {r4, r5, r6, r7, lr}",
            "subs r5, r2, 0",
            "sub sp, sp, 0x74",
            "mov r7, r0",
            "mov r6, r1",
            "add r3, pc, r3",
            "beq 0x10e14",
            "mov r0, sp",
            "mov r4, sp",
            "bl fcn.00001d20",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, sp",
            "bl fcn.00001a2c",
            "mov r0, r5",
            "mov r1, sp",
            "bl fcn.00001abc",
            "mov r0, r5",
            "add sp, sp, 0x74",
            "pop {r4, r5, r6, r7, pc}",
            "ldr r5, [0x00010e24]",
            "add r5, r3, r5",
            "b 0x10de0"
        ]
    },
    "sym.BN_usub": {
        "function_address": "0x000085d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r6, r0",
            "ldr r5, [r1, 4]",
            "sub sp, sp, 8",
            "mov r4, r1",
            "ldr r7, [r2, 4]",
            "cmp r5, r7",
            "movlt r0, 0",
            "blt 0x87e4",
            "ldr r3, [r6, 8]",
            "cmp r5, r3",
            "bgt 0x87ec",
            "cmp r7, 0",
            "ldr r4, [r4]",
            "ldr sl, [r2]",
            "movle r3, 0",
            "ldr r1, [r6]",
            "ble 0x86f8",
            "mov r2, 0",
            "mov r8, r2",
            "mov r3, r2",
            "b 0x8658",
            "add r3, r3, 1",
            "cmp ip, r0",
            "movhi r8, 0",
            "movls r8, 1",
            "sub sb, ip, 1",
            "cmp r3, r7",
            "rsb r0, r0, sb",
            "str r0, [r1, r2]",
            "add r2, r2, 4",
            "beq 0x868c",
            "cmp r8, 0",
            "ldr ip, [r4, r2]",
            "ldr r0, [sl, r2]",
            "bne 0x8630",
            "add r3, r3, 1",
            "cmp ip, r0",
            "movhs r8, 0",
            "movlo r8, 1",
            "cmp r3, r7",
            "rsb r0, r0, ip",
            "str r0, [r1, r2]",
            "add r2, r2, 4",
            "bne 0x8658",
            "lsl r2, r3, 2",
            "cmp r8, 0",
            "add r4, r4, r2",
            "add r1, r1, r2",
            "beq 0x86f8",
            "cmp r5, r3",
            "ble 0x86f8",
            "ldr r0, [r4], 4",
            "add r3, r3, 1",
            "sub r2, r0, 1",
            "cmp r0, r2",
            "str r2, [r1], 4",
            "movls r0, r4",
            "movls r2, r1",
            "bhi 0x86f8",
            "cmp r5, r3",
            "mov r4, r0",
            "mov r1, r2",
            "ble 0x86f8",
            "ldr ip, [r0], 4",
            "add r3, r3, 1",
            "sub r1, ip, 1",
            "mov r4, r0",
            "cmp ip, r1",
            "str r1, [r2], 4",
            "mov r1, r2",
            "bls 0x86c8",
            "cmp r1, r4",
            "beq 0x8794",
            "cmp r3, r5",
            "bge 0x8794",
            "add r3, r3, 1",
            "ldr r2, [r4]",
            "cmp r5, r3",
            "str r2, [r1]",
            "ble 0x8794",
            "add r3, r3, 1",
            "ldr r2, [r4, 4]",
            "cmp r5, r3",
            "addgt r3, r3, 1",
            "str r2, [r1, 4]",
            "movgt r2, r4",
            "bgt 0x8774",
            "b 0x8794",
            "ldr r0, [r2, 0xc]",
            "cmp r5, ip",
            "str r0, [r1, 0xc]",
            "ble 0x8794",
            "ldr r0, [r2, 0x10]",
            "cmp r4, r5",
            "str r0, [r1, 0x10]",
            "bge 0x8794",
            "ldr r0, [r2, 0x14]",
            "cmp r5, r7",
            "add r2, r2, 0x10",
            "str r0, [r1, 0x14]",
            "add r1, r1, 0x10",
            "ble 0x8794",
            "ldr r0, [r2, 8]",
            "cmp r5, r3",
            "add ip, r3, 1",
            "add r4, r3, 2",
            "add r7, r3, 3",
            "add r3, r3, 4",
            "str r0, [r1, 8]",
            "bgt 0x873c",
            "cmp r5, 0",
            "mov r3, 0",
            "str r5, [r6, 4]",
            "str r3, [r6, 0xc]",
            "ble 0x87e0",
            "ldr r3, [r6]",
            "sub r5, r5, 1",
            "ldr r2, [r3, r5, lsl 2]",
            "add r3, r3, r5, lsl 2",
            "cmp r2, 0",
            "beq 0x87d0",
            "b 0x87e0",
            "ldr r2, [r3, -4]!",
            "cmp r2, 0",
            "bne 0x87e0",
            "cmp r5, 0",
            "str r5, [r6, 4]",
            "sub r5, r5, 1",
            "bgt 0x87c4",
            "mov r0, 1",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r1, r5",
            "str r2, [sp, 4]",
            "bl fcn.00001c6c",
            "cmp r0, 0",
            "ldr r2, [sp, 4]",
            "beq 0x87e4",
            "b 0x8608"
        ]
    },
    "sym.get_passhash": {
        "function_address": "0x0000d244",
        "instructions": [
            "push {r4, lr}",
            "cmp r2, 0x28",
            "movgt ip, 0",
            "movle ip, 1",
            "ldr r4, [r0, 0x14]",
            "mov r3, r0",
            "cmp r4, 2",
            "movle ip, 0",
            "cmp ip, 0",
            "bne 0xd274",
            "mvn r0, 0",
            "pop {r4, pc}",
            "mov r0, r1",
            "add r1, r3, 0x18",
            "bl loc.imp.memcpy",
            "mov r0, 0",
            "pop {r4, pc}"
        ]
    },
    "sym.linux_random": {
        "function_address": "0x0000e5ac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "ldr r4, [0x0000e678]",
            "mov r6, r1",
            "ldr r8, [0x0000e67c]",
            "add r4, pc, r4",
            "ldr r0, [r4, r8]",
            "cmn r0, 1",
            "beq 0xe644",
            "mov r1, r5",
            "mov r2, r6",
            "bl loc.imp.read",
            "cmn r0, 1",
            "mov r7, 0",
            "add r8, r4, r8",
            "popne {r4, r5, r6, r7, r8, pc}",
            "bl loc.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "beq 0xe61c",
            "ldr r0, [0x0000e680]",
            "mov r2, 0x59",
            "ldr r1, [0x0000e684]",
            "add r0, r4, r0",
            "ldr r3, [0x0000e688]",
            "add r1, r4, r1",
            "add r3, r4, r3",
            "bl loc.imp.__assert",
            "add r7, r7, 1",
            "cmp r7, 0xa",
            "beq 0xe66c",
            "ldr r0, [r8]",
            "mov r1, r5",
            "mov r2, r6",
            "bl loc.imp.read",
            "cmn r0, 1",
            "beq 0xe5ec",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r0, [0x0000e68c]",
            "mov r1, 0x800",
            "add r0, r4, r0",
            "bl loc.imp.open",
            "cmn r0, 1",
            "str r0, [r4, r8]",
            "bne 0xe5d0",
            "mov r2, 0x51",
            "ldr r0, [0x0000e690]",
            "b 0xe604",
            "mov r2, 0x5f",
            "ldr r0, [0x0000e694]",
            "b 0xe604"
        ]
    },
    "loc.imp.read": {
        "function_address": "0x00001c0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x580]!"
        ]
    },
    "loc.imp.__errno_location": {
        "function_address": "0x00001d68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x498]!"
        ]
    },
    "loc.imp.open": {
        "function_address": "0x00001d8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x1a000",
            "ldr pc, [ip, 0x480]!"
        ]
    },
    "sym.BN_clear_free": {
        "function_address": "0x0000828c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "ldr r0, [r4]",
            "cmp r0, 0",
            "beq 0x82fc",
            "ldr r2, [r4, 8]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "bl loc.imp.memset",
            "ldr r1, [r4, 0x10]",
            "tst r1, 2",
            "beq 0x82f4",
            "mov r2, 0",
            "mov r3, r4",
            "str r2, [r3], 4",
            "tst r1, 1",
            "add r3, r3, 4",
            "str r2, [r4, 4]",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "popeq {r4, pc}",
            "mov r0, r4",
            "pop {r4, lr}",
            "b loc.imp.free",
            "ldr r0, [r4]",
            "bl loc.imp.free",
            "ldr r1, [r4, 0x10]",
            "b 0x82c0"
        ]
    },
    "sym.bn_add_words": {
        "function_address": "0x00005068",
        "instructions": [
            "ldr ip, [0x00005198]",
            "push {r3, r4, r5, lr}",
            "cmp r3, 0",
            "add ip, pc, ip",
            "blt 0x5174",
            "moveq ip, r3",
            "beq 0x516c",
            "ldr ip, [r1]",
            "ldr r4, [r2]",
            "adds r4, ip, r4",
            "movlo ip, 0",
            "movhs ip, 1",
            "subs r3, r3, 1",
            "str r4, [r0]",
            "bne 0x513c",
            "b 0x516c",
            "ldr r5, [r1, 8]",
            "ldr r4, [r2, 8]",
            "adds ip, ip, r5",
            "movlo r5, 0",
            "movhs r5, 1",
            "adds r4, ip, r4",
            "movlo ip, 0",
            "movhs ip, 1",
            "cmp r3, 2",
            "add ip, ip, r5",
            "str r4, [r0, 8]",
            "beq 0x516c",
            "ldr r5, [r1, 0xc]",
            "ldr r4, [r2, 0xc]",
            "adds ip, ip, r5",
            "movlo r5, 0",
            "movhs r5, 1",
            "adds r4, ip, r4",
            "movlo ip, 0",
            "movhs ip, 1",
            "cmp r3, 3",
            "add ip, ip, r5",
            "str r4, [r0, 0xc]",
            "beq 0x516c",
            "ldr r5, [r1, 0x10]!",
            "sub r3, r3, 4",
            "ldr r4, [r2, 0x10]!",
            "adds ip, ip, r5",
            "movlo r5, 0",
            "movhs r5, 1",
            "adds r4, ip, r4",
            "movlo ip, 0",
            "movhs ip, 1",
            "cmp r3, 0",
            "add ip, ip, r5",
            "str r4, [r0, 0x10]!",
            "ble 0x516c",
            "ldr r5, [r1, 4]",
            "ldr r4, [r2, 4]",
            "adds ip, ip, r5",
            "movlo r5, 0",
            "movhs r5, 1",
            "adds r4, ip, r4",
            "movlo ip, 0",
            "movhs ip, 1",
            "cmp r3, 1",
            "add ip, ip, r5",
            "str r4, [r0, 4]",
            "bne 0x50a8",
            "mov r0, ip",
            "pop {r3, r4, r5, pc}",
            "ldr r3, [0x0000519c]",
            "mov r2, 0x280",
            "ldr r0, [0x000051a0]",
            "ldr r1, [0x000051a4]",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r3, r3, 0x34",
            "add r1, ip, r1",
            "bl loc.imp.__assert",
            "andeq r7, r1, r4, lsl r0",
            "invalid"
        ]
    },
    "sym.BN_new": {
        "function_address": "0x0000840c",
        "instructions": [
            "push {r3, lr}",
            "mov r0, 0x14",
            "bl loc.imp.malloc",
            "cmp r0, 0",
            "popeq {r3, pc}",
            "mov r3, 0",
            "mov r2, 1",
            "str r2, [r0, 0x10]",
            "str r3, [r0, 4]",
            "str r3, [r0, 0xc]",
            "str r3, [r0, 8]",
            "str r3, [r0]",
            "pop {r3, pc}"
        ]
    },
    "sym.aes_cbc_decrypt_pad": {
        "function_address": "0x00002098",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ands sl, r3, 0xf",
            "sub sp, sp, 0x1c",
            "mov r5, r3",
            "mov r8, r0",
            "ldr r3, [sp, 0x40]",
            "ldrb sb, [sp, 0x48]",
            "beq 0x20c4",
            "mvn r0, 0",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "cmp r5, 0xf",
            "bls 0x20b8",
            "ldr r4, [sp, 0x44]",
            "ubfx r1, r1, 2, 0x1b",
            "str sb, [sp, 4]",
            "add r7, sp, 8",
            "mov r6, r2",
            "mov fp, r3",
            "mov sb, r0",
            "mov r8, r5",
            "add r1, r1, 6",
            "str r1, [sp]",
            "add r5, fp, sl",
            "mov r3, r7",
            "mov r0, sb",
            "ldr r1, [sp]",
            "mov r2, r5",
            "bl fcn.00001b04",
            "orr r3, r6, r4",
            "tst r3, 3",
            "movne r3, 0",
            "beq 0x2154",
            "ldrb r1, [r6, r3]",
            "ldrb r2, [r7, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x10",
            "bne 0x211c",
            "add sl, sl, 0x10",
            "rsb r3, sl, r8",
            "cmp r3, 0xf",
            "bls 0x219c",
            "add r4, r4, 0x10",
            "mov r6, r5",
            "b 0x20f4",
            "ldr r3, [r7]",
            "ldr r0, [r6]",
            "ldr ip, [sp, 0x44]",
            "ldr r1, [r7, 4]",
            "eor r0, r0, r3",
            "ldr r2, [r7, 8]",
            "ldr r3, [r7, 0xc]",
            "str r0, [ip, sl]",
            "ldr r0, [r6, 4]",
            "eor r1, r0, r1",
            "str r1, [r4, 4]",
            "ldr r1, [r6, 8]",
            "eor r2, r1, r2",
            "str r2, [r4, 8]",
            "ldr r2, [r6, 0xc]",
            "eor r3, r2, r3",
            "str r3, [r4, 0xc]",
            "b 0x2138",
            "ldr sb, [sp, 4]",
            "sub r0, r8, 0x10",
            "bic r0, r0, 0xf",
            "mov r5, r8",
            "add r0, r0, 0x10",
            "cmp sb, 1",
            "ldreq r2, [sp, 0x44]",
            "addeq r3, r2, r0",
            "ldrbeq r3, [r3, -1]",
            "rsbeq r0, r3, r0",
            "b 0x20bc"
        ]
    },
    "sym.fPRF": {
        "function_address": "0x0000d4d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x324",
            "ldr r4, [sp, 0x34c]",
            "mov r6, r0",
            "mov r5, r1",
            "add r0, r4, r3",
            "cmp r0, 0x7f",
            "mvngt r0, 0",
            "bgt 0xd69c",
            "cmp r3, 0",
            "bne 0xd6a4",
            "mov r7, r3",
            "add r0, sp, 0x10",
            "str r0, [sp, 8]",
            "ldr r1, [sp, 0x348]",
            "mov r2, r4",
            "bl loc.imp.memcpy",
            "add r7, r7, r4",
            "cmp r5, 0x40",
            "add r1, sp, 0x320",
            "mov r3, 0",
            "add r8, r1, r7",
            "movle r4, r5",
            "strb r3, [r8, -0x310]",
            "rsble sl, r4, 0x41",
            "bgt 0xd6e0",
            "add r5, sp, 0x2dc",
            "mov r1, r6",
            "mov r2, r4",
            "mov r0, r5",
            "bl loc.imp.memcpy",
            "add r6, sp, 0x298",
            "mov r1, 0",
            "mov r2, sl",
            "add r0, r5, r4",
            "mov r4, r1",
            "bl loc.imp.memset",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, 0x41",
            "bl loc.imp.memcpy",
            "ldr r0, [r5, r4]",
            "movw r2, 0x3636",
            "ldr r1, [r6, r4]",
            "movw r3, 0x5c5c",
            "movt r2, 0x3636",
            "movt r3, 0x5c5c",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "str r2, [r5, r4]",
            "str r3, [r6, r4]",
            "add r4, r4, 4",
            "cmp r4, 0x40",
            "bne 0xd574",
            "add sl, sp, 0x230",
            "add sb, sp, 0x1c8",
            "mov r0, sl",
            "bl fcn.00001b94",
            "mov r1, sl",
            "mov r2, 0x68",
            "mov r0, sb",
            "bl loc.imp.memcpy",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, sl",
            "bl fcn.00001c18",
            "mov r1, r6",
            "mov r2, r4",
            "mov r0, sb",
            "bl fcn.00001c18",
            "ldr r2, [sp, 0x354]",
            "movw r3, 0x6667",
            "movt r3, 0x6666",
            "add r2, r2, 0x13",
            "smull r0, r3, r3, r2",
            "asr r1, r2, 0x1f",
            "rsb fp, r1, r3, asr 3",
            "cmp fp, 0",
            "ble 0xd698",
            "ldr r4, [sp, 0x350]",
            "add r7, r7, 1",
            "str r7, [sp, 0xc]",
            "add r6, sp, 0x160",
            "mov r7, 0",
            "add r5, sp, 0xf8",
            "mov r2, 0x68",
            "mov r1, sl",
            "mov r0, r6",
            "add r7, r7, 1",
            "bl loc.imp.memcpy",
            "mov r1, sb",
            "mov r2, 0x68",
            "mov r0, r5",
            "bl loc.imp.memcpy",
            "ldr r2, [sp, 0xc]",
            "mov r0, r6",
            "ldr r1, [sp, 8]",
            "bl fcn.00001c18",
            "mov r1, r4",
            "mov r0, r6",
            "bl fcn.00001ad4",
            "mov r1, r4",
            "mov r2, 0x14",
            "mov r0, r5",
            "bl fcn.00001c18",
            "mov r1, r4",
            "mov r0, r5",
            "bl fcn.00001ad4",
            "ldrb r3, [r8, -0x310]",
            "cmp fp, r7",
            "add r4, r4, 0x14",
            "add r3, r3, 1",
            "strb r3, [r8, -0x310]",
            "bgt 0xd624",
            "mov r0, 0",
            "add sp, sp, 0x324",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r1, r2",
            "add r0, sp, 0x10",
            "mov r2, r3",
            "str r3, [sp, 4]",
            "str r0, [sp, 8]",
            "bl loc.imp.memcpy",
            "ldr r3, [sp, 4]",
            "add r1, sp, 0x320",
            "ldr r2, [sp, 8]",
            "add r7, r3, 1",
            "add r3, r1, r3",
            "add r0, r2, r7",
            "mov r2, 0",
            "strb r2, [r3, -0x310]",
            "b 0xd508",
            "add sb, sp, 0x90",
            "mov sl, 0x2d",
            "mov r0, sb",
            "mov r4, 0x14",
            "bl fcn.00001b94",
            "mov r1, r6",
            "mov r0, sb",
            "mov r2, r5",
            "bl fcn.00001c18",
            "mov r0, sb",
            "mov r1, r6",
            "bl fcn.00001ad4",
            "b 0xd538"
        ]
    }
}