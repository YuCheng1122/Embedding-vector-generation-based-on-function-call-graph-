{
    "entry0": {
        "function_address": "0x00003af8",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "mov r5, r7",
            "mov r6, 8",
            "mov r4, sp",
            "mov r8, r1",
            "mov r0, sp",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "str r8, [r4]",
            "mov r0, sp",
            "strb r6, [sp, 4]",
            "mov r1, sp",
            "mov r2, 0x10",
            "add r6, r6, 4",
            "bl sym.av_md5_sum",
            "cmp r6, 0x40",
            "ldr r3, [r4]",
            "str r3, [r5, 0x20]",
            "ldr r3, [r4, 4]",
            "str r3, [r5, 0x24]",
            "ldr r3, [r4, 8]",
            "str r3, [r5, 0x28]",
            "ldr r3, [r4, 0xc]",
            "str r3, [r5, 0x2c]",
            "add r5, r5, 0x10",
            "bne 0x3b20",
            "mov r3, 0",
            "str r3, [r7, 0x100]",
            "pop {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x000039fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2e4]!"
        ]
    },
    "sym.av_md5_sum": {
        "function_address": "0x0000a2f4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x5c",
            "mov r5, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov r0, sp",
            "bl sym.av_md5_init",
            "mov r0, sp",
            "mov r1, r7",
            "mov r2, r6",
            "mov r4, sp",
            "bl sym.av_md5_update",
            "mov r0, sp",
            "mov r1, r5",
            "bl sym.av_md5_final",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_md5_init": {
        "function_address": "0x0000a008",
        "instructions": [
            "mov r3, 0",
            "mov r2, 0",
            "strd r2, r3, [r0]",
            "ldr r3, [0x0000a038]",
            "str r3, [r0, 0x48]",
            "ldr r3, [0x0000a03c]",
            "str r3, [r0, 0x4c]",
            "ldr r3, [0x0000a040]",
            "str r3, [r0, 0x50]",
            "ldr r3, [0x0000a044]",
            "str r3, [r0, 0x54]",
            "bx lr"
        ]
    },
    "sym.av_md5_update": {
        "function_address": "0x0000a048",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "str r2, [sp, 0x20]",
            "ldrd r4, r5, [r0]",
            "str r1, [sp, 0x2c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [0x0000a22c]",
            "and r2, r4, 0x3f",
            "adds r4, r4, r1",
            "adc r5, r5, r1, asr 31",
            "ldr r1, [0x0000a230]",
            "add r3, pc, r3",
            "strd r4, r5, [r0]",
            "mov r4, 0",
            "add r1, r3, r1",
            "str r1, [sp, 0x24]",
            "b 0xa218",
            "ldr ip, [sp, 0x2c]",
            "add r3, r0, r2",
            "add r2, r2, 1",
            "cmp r2, 0x40",
            "ldrb r1, [ip, r4]",
            "strb r1, [r3, 8]",
            "bne 0xa214",
            "ldr r1, [r0, 0x54]",
            "mov r5, 0",
            "ldr r3, [r0, 0x50]",
            "add r6, r0, 8",
            "ldr ip, [r0, 0x4c]",
            "mov r8, 5",
            "str r1, [sp, 0xc]",
            "mov r7, 1",
            "str r3, [sp, 0x10]",
            "ldr r1, [r0, 0x48]",
            "ldr r3, [sp, 0x24]",
            "str ip, [sp, 0x14]",
            "str r1, [sp, 0x18]",
            "sub r3, r3, 4",
            "ldr r1, [sp, 0x10]",
            "str r3, [sp, 0x1c]",
            "mov r3, r5",
            "ldr r2, [sp, 0x18]",
            "ldr sl, [sp, 0xc]",
            "str r0, [sp, 4]",
            "b 0xa10c",
            "mov sl, r2",
            "mov r2, ip",
            "mov ip, r1",
            "mov r1, sb",
            "ldr r0, [sp, 0x24]",
            "asr sb, r3, 4",
            "and fp, r3, 3",
            "cmp r3, 0x1f",
            "add sb, r0, sb, lsl 2",
            "ldr r0, [sp, 0x1c]",
            "add sb, sb, fp",
            "ldrb sb, [sb, 0x100]",
            "str sb, [sp, 0x28]",
            "ldr sb, [r0, 4]!",
            "str r0, [sp, 0x1c]",
            "add sl, sl, sb",
            "bgt 0xa178",
            "cmp r3, 0xf",
            "bgt 0xa160",
            "eor sb, ip, r2",
            "and sb, sb, r1",
            "eor sb, sb, r2",
            "add sl, sb, sl",
            "and sb, r3, 0xf",
            "b 0xa190",
            "eor sb, ip, r1",
            "and sb, sb, r2",
            "eor sb, sb, ip",
            "add sl, sb, sl",
            "and sb, r7, 0xf",
            "b 0xa1b0",
            "cmp r3, 0x2f",
            "bgt 0xa19c",
            "eor sb, r1, r2",
            "eor sb, sb, ip",
            "add sl, sb, sl",
            "and sb, r8, 0xf",
            "ldr fp, [r6, sb, lsl 2]",
            "add sl, sl, fp",
            "b 0xa1b8",
            "mvn sb, r2",
            "orr sb, sb, r1",
            "eor sb, sb, ip",
            "add sl, sb, sl",
            "and sb, r5, 0xf",
            "ldr sb, [r6, sb, lsl 2]",
            "add sl, sl, sb",
            "ldr r0, [sp, 0x28]",
            "add r3, r3, 1",
            "cmp r3, 0x40",
            "add r7, r7, 5",
            "add r8, r8, 3",
            "add r5, r5, 7",
            "rsb sb, r0, 0x20",
            "add sb, r1, sl, ror sb",
            "bne 0xa0fc",
            "ldr r3, [sp, 0x18]",
            "ldr r0, [sp, 4]",
            "add ip, ip, r3",
            "ldr r3, [sp, 0xc]",
            "str ip, [r0, 0x48]",
            "ldr ip, [sp, 0x14]",
            "add r2, r2, r3",
            "str r2, [r0, 0x54]",
            "mov r2, 0",
            "add r1, r1, ip",
            "str r1, [r0, 0x4c]",
            "ldr r1, [sp, 0x10]",
            "add sb, sb, r1",
            "str sb, [r0, 0x50]",
            "add r4, r4, 1",
            "ldr ip, [sp, 0x20]",
            "cmp r4, ip",
            "blt 0xa08c",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_md5_final": {
        "function_address": "0x0000a234",
        "instructions": [
            "ldr r2, [r0, 4]",
            "ldr r3, [r0]",
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r7, r1",
            "ldr r8, [0x0000a2e8]",
            "mov r6, r0",
            "lsl r2, r2, 3",
            "mov r4, 0x3f",
            "ldr r1, [0x0000a2ec]",
            "mov r5, 0",
            "orr r2, r2, r3, lsr 29",
            "add r8, pc, r8",
            "lsl r3, r3, 3",
            "str r2, [sp, 4]",
            "add r1, r8, r1",
            "mov r2, 1",
            "str r3, [sp]",
            "bl sym.av_md5_update",
            "ldr r3, [0x0000a2f0]",
            "add r8, r8, r3",
            "b 0xa298",
            "mov r0, r6",
            "mov r1, r8",
            "mov r2, 1",
            "bl sym.av_md5_update",
            "ldrd r2, r3, [r6]",
            "and r2, r2, r4",
            "and r3, r3, r5",
            "cmp r2, 0x38",
            "bne 0xa288",
            "cmp r3, 0",
            "bne 0xa288",
            "mov r0, r6",
            "mov r1, sp",
            "mov r2, 8",
            "bl sym.av_md5_update",
            "ldr r3, [r6, 0x54]",
            "str r3, [r7]",
            "ldr r3, [r6, 0x50]",
            "str r3, [r7, 4]",
            "ldr r3, [r6, 0x4c]",
            "str r3, [r7, 8]",
            "ldr r3, [r6, 0x48]",
            "str r3, [r7, 0xc]",
            "pop {r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_parse_time": {
        "function_address": "0x0000ce20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r1",
            "sub sp, sp, 0x3c",
            "mov r6, r0",
            "mov r0, 0",
            "mov sl, r2",
            "bl sym.imp.time",
            "str r0, [sp, 0x30]",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "subs sb, r0, 0",
            "add r4, sp, 4",
            "addgt r3, r7, sb",
            "movle fp, 0",
            "ldrbgt fp, [r3, -1]",
            "mov r8, 0",
            "ldr r5, [0x0000d130]",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x2c",
            "cmp fp, 0x7a",
            "cmpne fp, 0x5a",
            "movne fp, 0",
            "moveq fp, 1",
            "add r5, pc, r5",
            "bl sym.imp.memset",
            "cmp sl, r8",
            "str r8, [sp, 0x34]",
            "bne 0xcfc4",
            "ldr r1, [0x0000d134]",
            "mov r0, r7",
            "mov r2, sb",
            "add r1, r5, r1",
            "bl sym.av_strncasecmp",
            "cmp r0, r8",
            "beq 0xceec",
            "ldr r1, [0x0000d138]",
            "mov r0, r7",
            "mov r2, r4",
            "add r1, r5, r1",
            "bl fcn.0000c750",
            "cmp r0, r8",
            "str r0, [sp, 0x34]",
            "bne 0xcf04",
            "ldr r1, [0x0000d13c]",
            "mov r0, r7",
            "mov r2, r4",
            "add r1, r5, r1",
            "bl fcn.0000c750",
            "str r0, [sp, 0x34]",
            "b 0xcf04",
            "ldr r3, [0x0000d140]",
            "mov r0, sl",
            "ldr r2, [sp, 0x30]",
            "smull r2, r3, r2, r3",
            "strd r2, r3, [r6]",
            "b 0xd128",
            "ldr r4, [sp, 0x34]",
            "cmp r4, 0",
            "bne 0xcf60",
            "cmp fp, 0",
            "add r4, sp, 4",
            "add r0, sp, 0x30",
            "beq 0xcf28",
            "bl sym.imp.gmtime",
            "b 0xcf2c",
            "bl sym.imp.localtime",
            "mov lr, r0",
            "mov ip, r4",
            "ldm lr!, {r0, r1, r2, r3}",
            "mov r4, r7",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "mov r3, 0",
            "ldm lr, {r0, r1, r2}",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "stm ip, {r0, r1, r2}",
            "str r3, [sp, 0xc]",
            "ldrb r3, [r4]",
            "cmp r3, 0x54",
            "cmpne r3, 0x74",
            "beq 0xcf78",
            "cmp r3, 0x20",
            "bne 0xcf7c",
            "add r4, r4, 1",
            "ldr r1, [0x0000d144]",
            "add r7, sp, 4",
            "mov r0, r4",
            "mov r2, r7",
            "add r1, r5, r1",
            "bl fcn.0000c750",
            "cmp r0, 0",
            "mov r8, r0",
            "str r0, [sp, 0x34]",
            "movne r8, 0",
            "bne 0xd020",
            "ldr r1, [0x0000d148]",
            "mov r0, r4",
            "mov r2, r7",
            "add r1, r5, r1",
            "bl fcn.0000c750",
            "str r0, [sp, 0x34]",
            "b 0xd020",
            "ldrb r3, [r7]",
            "add r2, sp, 4",
            "ldr r1, [0x0000d144]",
            "cmp r3, 0x2d",
            "addeq r7, r7, 1",
            "add r1, r5, r1",
            "mov r0, r7",
            "moveq r8, 1",
            "bl fcn.0000c750",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [sp, 0x34]",
            "bne 0xd020",
            "mov r0, r7",
            "add r1, sp, 0x34",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 0x34]",
            "str r0, [sp, 4]",
            "cmp r3, r7",
            "strne r4, [sp, 8]",
            "strne r4, [sp, 0xc]",
            "beq 0xd02c",
            "ldr r3, [sp, 0x34]",
            "cmp r3, 0",
            "bne 0xd040",
            "mov r2, 0",
            "mov r3, 0x80000000",
            "strd r2, r3, [r6]",
            "mvn r0, 0x15",
            "b 0xd128",
            "cmp sl, 0",
            "beq 0xd06c",
            "ldr r3, [sp, 8]",
            "mov r0, 0x3c",
            "ldr r2, [sp, 0xc]",
            "mul r3, r0, r3",
            "mov r0, 0xe10",
            "mla r0, r0, r2, r3",
            "ldr r3, [sp, 4]",
            "add r0, r0, r3",
            "b 0xd094",
            "cmp fp, 0",
            "mvn r3, 0",
            "str r3, [sp, 0x24]",
            "add r4, sp, 4",
            "beq 0xd08c",
            "mov r0, r4",
            "bl sym.av_timegm",
            "b 0xd094",
            "mov r0, r4",
            "bl sym.imp.mktime",
            "ldr r3, [0x0000d140]",
            "asr r1, r0, 0x1f",
            "umull r4, r5, r0, r3",
            "mla r5, r3, r1, r5",
            "ldr r3, [sp, 0x34]",
            "ldrb r2, [r3]",
            "cmp r2, 0x2e",
            "bne 0xd110",
            "add r3, r3, 1",
            "mov sl, 6",
            "str r3, [sp, 0x34]",
            "mov r7, 0",
            "bl sym.imp.__ctype_b_loc",
            "ldr fp, [r0]",
            "ldr r0, [0x0000d14c]",
            "ldr sb, [sp, 0x34]",
            "ldrb r3, [sb]",
            "lsl r2, r3, 1",
            "ldrh r2, [fp, r2]",
            "tst r2, 8",
            "beq 0xd108",
            "sub r3, r3, 0x30",
            "mov r1, 0xa",
            "mla r7, r3, r0, r7",
            "add sb, sb, 1",
            "bl fcn.0000f06c",
            "subs sl, sl, 1",
            "str sb, [sp, 0x34]",
            "bne 0xd0d0",
            "adds r4, r4, r7",
            "adc r5, r5, r7, asr 31",
            "cmp r8, 0",
            "beq 0xd120",
            "rsbs r4, r4, 0",
            "rsc r5, r5, 0",
            "mov r0, 0",
            "strd r4, r5, [r6]",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x000039a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x31c]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00003918",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x37c]!"
        ]
    },
    "sym.av_strncasecmp": {
        "function_address": "0x00004e68",
        "instructions": [
            "add r2, r0, r2",
            "push {r4, lr}",
            "ldrb r3, [r0], 1",
            "sub ip, r3, 0x41",
            "cmp ip, 0x19",
            "eorls r3, r3, 0x20",
            "uxtb ip, r3",
            "ldrb r3, [r1], 1",
            "sub r4, r3, 0x41",
            "cmp r4, 0x19",
            "eorls r3, r3, 0x20",
            "cmp ip, 0",
            "cmpne r0, r2",
            "uxtb r3, r3",
            "bhs 0x4eac",
            "cmp ip, r3",
            "beq 0x4e70",
            "rsb r0, r3, ip",
            "pop {r4, pc}"
        ]
    },
    "fcn.0000c750": {
        "function_address": "0x0000c750",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r6, r1",
            "mov r5, r2",
            "add r4, sp, 8",
            "str r0, [r4, -4]!",
            "ldrb r2, [r6]",
            "cmp r2, 0",
            "ldreq r0, [sp, 4]",
            "beq 0xc8c8",
            "cmp r2, 0x25",
            "add r6, r6, 1",
            "bne 0xc8ac",
            "ldrb r3, [r6], 1",
            "cmp r3, 0x53",
            "beq 0xc810",
            "bhi 0xc7ac",
            "cmp r3, 0x48",
            "beq 0xc7c8",
            "cmp r3, 0x4d",
            "beq 0xc7ec",
            "cmp r3, 0x25",
            "bne 0xc8c4",
            "b 0xc8ac",
            "cmp r3, 0x64",
            "beq 0xc888",
            "cmp r3, 0x6d",
            "beq 0xc860",
            "cmp r3, 0x59",
            "bne 0xc8c4",
            "b 0xc834",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x17",
            "mov r3, 2",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "str r0, [r5, 8]",
            "b 0xc764",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x3b",
            "mov r3, 2",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "str r0, [r5, 4]",
            "b 0xc764",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x3b",
            "mov r3, 2",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "str r0, [r5]",
            "b 0xc764",
            "mov r0, r4",
            "mov r1, 0",
            "movw r2, 0x270f",
            "mov r3, 4",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "sub r0, r0, 0x760",
            "sub r0, r0, 0xc",
            "str r0, [r5, 0x14]",
            "b 0xc764",
            "mov r0, r4",
            "mov r1, 1",
            "mov r2, 0xc",
            "mov r3, 2",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "sub r0, r0, 1",
            "str r0, [r5, 0x10]",
            "b 0xc764",
            "mov r0, r4",
            "mov r1, 1",
            "mov r2, 0x1f",
            "mov r3, 2",
            "bl fcn.0000c6a8",
            "cmn r0, 1",
            "beq 0xc8c4",
            "str r0, [r5, 0xc]",
            "b 0xc764",
            "ldr r3, [sp, 4]",
            "ldrb r1, [r3]",
            "cmp r2, r1",
            "addeq r3, r3, 1",
            "streq r3, [sp, 4]",
            "beq 0xc764",
            "mov r0, 0",
            "pop {r2, r3, r4, r5, r6, pc}"
        ]
    },
    "sym.imp.gmtime": {
        "function_address": "0x0000393c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x364]!"
        ]
    },
    "sym.imp.localtime": {
        "function_address": "0x000039cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x304]!"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x00003930",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x36c]!"
        ]
    },
    "sym.av_timegm": {
        "function_address": "0x0000cd64",
        "instructions": [
            "ldr r2, [r0, 0x10]",
            "push {r3, r4, r5, r6, r7, lr}",
            "movw r7, 0x16d",
            "ldr r3, [r0, 0x14]",
            "mov r5, r0",
            "add r6, r2, 1",
            "cmp r6, 2",
            "ldr r1, [r0, 0xc]",
            "add r3, r3, 0x760",
            "addle r6, r2, 0xd",
            "add r4, r3, 0xc",
            "addle r4, r3, 0xb",
            "ldr r3, [0x0000ce18]",
            "cmp r4, 0",
            "mov r0, r4",
            "add r3, r1, r3",
            "mvn r1, 0x63",
            "mla r3, r7, r4, r3",
            "add r7, r4, 3",
            "movge r7, r4",
            "add r7, r3, r7, asr 2",
            "bl fcn.0000f06c",
            "mov r1, 0x190",
            "add r7, r7, r0",
            "mov r0, r4",
            "bl fcn.0000f06c",
            "mov r3, 0x99",
            "add r4, r7, r0",
            "mul r6, r3, r6",
            "mov r1, 5",
            "sub r0, r6, 0x1c8",
            "sub r0, r0, 1",
            "bl fcn.0000f06c",
            "ldr r3, [r5, 4]",
            "mov r2, 0x3c",
            "ldr r1, [r5, 8]",
            "add r0, r4, r0",
            "mul r2, r2, r3",
            "mov r3, 0xe10",
            "mla r3, r3, r1, r2",
            "ldr r2, [r5]",
            "add r3, r3, r2",
            "ldr r2, [0x0000ce1c]",
            "mla r0, r2, r0, r3",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.mktime": {
        "function_address": "0x00003984",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x334]!"
        ]
    },
    "sym.imp.__ctype_b_loc": {
        "function_address": "0x00003870",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3ec]!"
        ]
    },
    "fcn.0000f06c": {
        "function_address": "0x0000f06c",
        "instructions": [
            "cmp r1, 0",
            "beq 0xf138",
            "cmp r0, 0",
            "mvngt r0, 0x80000000",
            "movlt r0, 0x80000000",
            "b fcn.0000ffd4"
        ]
    },
    "sym.av_parse_video_size": {
        "function_address": "0x0000c8d4",
        "instructions": [
            "ldr r3, [0x0000c99c]",
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, 0",
            "ldr sl, [0x0000c9a0]",
            "mov r6, r0",
            "add r3, pc, r3",
            "mov r5, r1",
            "mov r8, r2",
            "mov r7, r4",
            "add sl, r3, sl",
            "ldr r0, [sl, r4]",
            "mov r1, r8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xc92c",
            "mov r3, 0xc",
            "cmp r7, 0x25",
            "mla sl, r3, r7, sl",
            "ldr r4, [sl, 4]",
            "ldr r0, [sl, 8]",
            "bne 0xc978",
            "b 0xc93c",
            "add r7, r7, 1",
            "add r4, r4, 0xc",
            "cmp r7, 0x25",
            "bne 0xc8fc",
            "add r1, sp, 8",
            "mov r2, 0xa",
            "str r8, [r1, -4]!",
            "mov r0, r8",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 4]",
            "mov r4, r0",
            "add r1, sp, 4",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "mov r2, 0xa",
            "addne r3, r3, 1",
            "strne r3, [sp, 4]",
            "ldr r0, [sp, 4]",
            "bl sym.imp.strtol",
            "cmp r4, 0",
            "cmpgt r0, 0",
            "movgt r3, 0",
            "movle r3, 1",
            "strgt r4, [r6]",
            "mvnle r0, 0x15",
            "strgt r0, [r5]",
            "movgt r0, r3",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00003a80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x28c]!"
        ]
    },
    "sym.av_fifo_generic_write": {
        "function_address": "0x0000787c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr sl, [r0, 0x14]",
            "mov r5, r1",
            "mov fp, r2",
            "mov sb, r3",
            "ldr r6, [r0, 8]",
            "mov r8, r2",
            "ldr r7, [r4, 0xc]",
            "rsb r7, r6, r7",
            "cmp r7, r8",
            "movge r7, r8",
            "cmp sb, 0",
            "beq 0x78d0",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r7",
            "blx sb",
            "cmp r0, 0",
            "bgt 0x78e4",
            "b 0x7904",
            "mov r1, r5",
            "add r5, r5, r7",
            "mov r0, r6",
            "mov r2, r7",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "add r6, r6, r7",
            "rsb r8, r7, r8",
            "add sl, sl, r7",
            "cmp r6, r3",
            "ldrhs r6, [r4]",
            "cmp r8, 0",
            "bgt 0x789c",
            "str sl, [r4, 0x14]",
            "rsb r0, r8, fp",
            "str r6, [r4, 8]",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00003894",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3d4]!"
        ]
    },
    "sym.av_aes_crypt": {
        "function_address": "0x00003f88",
        "instructions": [
            "ldr ip, [0x00004228]",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr sb, [0x0000422c]",
            "sub sp, sp, 0x24",
            "add ip, pc, ip",
            "add r0, r1, 4",
            "mov r5, r1",
            "mov fp, r2",
            "add sb, ip, sb",
            "str r3, [sp, 0x10]",
            "str r0, [sp, 4]",
            "add r1, r1, 8",
            "add r2, r5, 0xc",
            "add r3, sb, 0x500",
            "add r0, sb, 0x900",
            "ldr r6, [sp, 0x48]",
            "str r1, [sp, 8]",
            "add r8, r4, 0xf0",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x14]",
            "str sb, [sp, 0x18]",
            "str r0, [sp, 0x1c]",
            "b 0x4214",
            "ldr r2, [r4, 0x110]",
            "add r7, r4, 0x100",
            "mov r1, fp",
            "mov r0, r7",
            "add r2, r4, r2, lsl 4",
            "bl fcn.00003d0c",
            "ldr r1, [sp, 0x4c]",
            "cmp r1, 0",
            "beq 0x40f4",
            "ldr sl, [r4, 0x110]",
            "mov ip, 0x100",
            "sub r7, sl, 1",
            "add r7, r4, r7, lsl 4",
            "b 0x4068",
            "mov r0, r8",
            "mov r1, sb",
            "mov r2, 3",
            "mov r3, 1",
            "str ip, [sp]",
            "bl fcn.00003e20",
            "ldrd r0, r1, [r7, 0x10]",
            "ldrd r2, r3, [r4, 0xf0]",
            "ldr ip, [sp]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "strd r2, r3, [r4, ip]",
            "ldrd r0, r1, [r7, 0x18]",
            "ldrd r2, r3, [r4, 0xf8]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "mov r0, 0x108",
            "strd r2, r3, [r4, r0]",
            "sub sl, sl, 1",
            "sub r7, r7, 0x10",
            "cmp sl, 0",
            "bgt 0x4020",
            "ldr r3, [sp, 0x18]",
            "mov r0, r8",
            "mov r1, 0",
            "add r2, r3, 0x400",
            "bl fcn.00003d44",
            "cmp r6, 0",
            "beq 0x40b4",
            "mov r0, r8",
            "mov r1, r6",
            "mov r2, r8",
            "bl fcn.00003d0c",
            "mov r0, r6",
            "mov r1, fp",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "ldrd r0, r1, [r4]",
            "ldrd r2, r3, [r4, 0xf0]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "ldr r0, [sp, 4]",
            "str r2, [r5]",
            "str r3, [r0]",
            "ldrd r0, r1, [r4, 8]",
            "ldrd r2, r3, [r4, 0xf8]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "ldr r0, [sp, 0xc]",
            "ldr r1, [sp, 8]",
            "str r2, [r1]",
            "str r3, [r0]",
            "b 0x41dc",
            "cmp r6, 0",
            "beq 0x410c",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r7",
            "bl fcn.00003d0c",
            "ldr sl, [r4, 0x110]",
            "mov ip, 0x100",
            "sub r7, sl, 1",
            "add r7, r4, r7, lsl 4",
            "b 0x4168",
            "mov r0, r8",
            "ldr r1, [sp, 0x14]",
            "mov r2, 1",
            "mov r3, 3",
            "str ip, [sp]",
            "bl fcn.00003e20",
            "ldrd r0, r1, [r7, 0x10]",
            "ldrd r2, r3, [r4, 0xf0]",
            "ldr ip, [sp]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "strd r2, r3, [r4, ip]",
            "ldrd r0, r1, [r7, 0x18]",
            "ldrd r2, r3, [r4, 0xf8]",
            "eor r3, r3, r1",
            "eor r2, r2, r0",
            "mov r1, 0x108",
            "strd r2, r3, [r4, r1]",
            "sub sl, sl, 1",
            "sub r7, r7, 0x10",
            "cmp sl, 0",
            "bgt 0x4120",
            "mov r0, r8",
            "mov r1, 2",
            "ldr r2, [sp, 0x1c]",
            "bl fcn.00003d44",
            "ldrd r0, r1, [r4]",
            "cmp r6, 0",
            "ldrd r2, r3, [r4, 0xf0]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "ldr r0, [sp, 4]",
            "str r2, [r5]",
            "str r3, [r0]",
            "ldrd r0, r1, [r4, 8]",
            "ldrd r2, r3, [r4, 0xf8]",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "ldr r0, [sp, 0xc]",
            "ldr r1, [sp, 8]",
            "str r2, [r1]",
            "str r3, [r0]",
            "beq 0x41dc",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "ldr r1, [sp, 0x10]",
            "add fp, fp, 0x10",
            "ldr r2, [sp, 4]",
            "add r5, r5, 0x10",
            "ldr r3, [sp, 8]",
            "ldr r0, [sp, 0xc]",
            "sub r1, r1, 1",
            "add r2, r2, 0x10",
            "str r1, [sp, 0x10]",
            "add r3, r3, 0x10",
            "str r2, [sp, 4]",
            "add r0, r0, 0x10",
            "str r3, [sp, 8]",
            "str r0, [sp, 0xc]",
            "ldr r1, [sp, 0x10]",
            "cmp r1, 0",
            "bne 0x3fe8",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00003d0c": {
        "function_address": "0x00003d0c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldrd r4, r5, [r2]",
            "ldr r6, [r1]",
            "ldr r7, [r1, 4]",
            "eor r4, r4, r6",
            "eor r5, r5, r7",
            "strd r4, r5, [r0]",
            "ldrd r2, r3, [r2, 8]",
            "ldr r4, [r1, 8]",
            "ldr r5, [r1, 0xc]",
            "eor r2, r2, r4",
            "eor r3, r3, r5",
            "strd r2, r3, [r0, 8]",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00003e20": {
        "function_address": "0x00003e20",
        "instructions": [
            "add ip, r0, 0x10",
            "push {r4, r5, r6, r7, lr}",
            "add r4, ip, r2, lsl 2",
            "ldrb r6, [ip, 0xa]",
            "sub r2, r2, 1",
            "ldrb r5, [r4, 1]",
            "add r2, ip, r2, lsl 2",
            "ldr r6, [r1, r6, lsl 2]",
            "ldr r5, [r1, r5, lsl 2]",
            "ror r6, r6, 0x10",
            "eor r6, r6, r5, ror 24",
            "ldrb r5, [r0, 0x10]",
            "ldr r5, [r1, r5, lsl 2]",
            "eor r6, r6, r5",
            "add r5, ip, r3, lsl 2",
            "sub r3, r3, 1",
            "ldrb r7, [r5, 3]",
            "add r3, ip, r3, lsl 2",
            "ldr r7, [r1, r7, lsl 2]",
            "eor r6, r6, r7, ror 8",
            "str r6, [r0]",
            "ldrb r6, [r3, 1]",
            "ldr r7, [r1, r6, lsl 2]",
            "ldrb r6, [ip, 0xe]",
            "ldr r6, [r1, r6, lsl 2]",
            "ror r6, r6, 0x10",
            "eor r6, r6, r7, ror 24",
            "ldrb r7, [ip, 4]",
            "ldr r7, [r1, r7, lsl 2]",
            "eor r6, r6, r7",
            "ldrb r7, [r2, 3]",
            "ldr r7, [r1, r7, lsl 2]",
            "eor r6, r6, r7, ror 8",
            "str r6, [r0, 4]",
            "ldrb r5, [r5, 1]",
            "ldrb r4, [r4, 3]",
            "ldr r6, [r1, r5, lsl 2]",
            "ldrb r5, [ip, 2]",
            "ldr r4, [r1, r4, lsl 2]",
            "ldr r5, [r1, r5, lsl 2]",
            "ror r5, r5, 0x10",
            "eor r5, r5, r6, ror 24",
            "ldrb r6, [ip, 8]",
            "ldr r6, [r1, r6, lsl 2]",
            "eor r5, r5, r6",
            "eor r4, r5, r4, ror 8",
            "str r4, [r0, 8]",
            "ldrb r2, [r2, 1]",
            "ldrb r3, [r3, 3]",
            "ldr r4, [r1, r2, lsl 2]",
            "ldrb r2, [ip, 6]",
            "ldrb ip, [ip, 0xc]",
            "ldr r3, [r1, r3, lsl 2]",
            "ldr r2, [r1, r2, lsl 2]",
            "ldr ip, [r1, ip, lsl 2]",
            "ror r2, r2, 0x10",
            "eor r2, r2, r4, ror 24",
            "eor r2, r2, ip",
            "eor r3, r2, r3, ror 8",
            "str r3, [r0, 0xc]",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.00003d44": {
        "function_address": "0x00003d44",
        "instructions": [
            "push {r4, r5, lr}",
            "add r3, r0, 0x10",
            "ldrb r4, [r0, 0x10]",
            "rsb ip, r1, r0",
            "add r1, r0, r1",
            "ldrb r4, [r2, r4]",
            "strb r4, [r0]",
            "ldrb r4, [r3, 4]",
            "ldrb r4, [r2, r4]",
            "strb r4, [r0, 4]",
            "ldrb r4, [r3, 8]",
            "ldrb r4, [r2, r4]",
            "strb r4, [r0, 8]",
            "ldrb r4, [r3, 0xc]",
            "ldrb r4, [r2, r4]",
            "strb r4, [r0, 0xc]",
            "add r4, ip, 0x10",
            "ldrb r5, [r4, 7]",
            "ldrb r5, [r2, r5]",
            "strb r5, [ip, 3]",
            "ldrb r5, [r4, 0xb]",
            "ldrb r5, [r2, r5]",
            "strb r5, [ip, 7]",
            "ldrb r5, [r4, 0xf]",
            "ldrb r5, [r2, r5]",
            "strb r5, [ip, 0xb]",
            "ldrb r4, [r4, 3]",
            "ldrb r4, [r2, r4]",
            "strb r4, [ip, 0xf]",
            "ldrb ip, [r3, 0xa]",
            "ldrb ip, [r2, ip]",
            "strb ip, [r0, 2]",
            "ldrb ip, [r3, 2]",
            "ldrb ip, [r2, ip]",
            "strb ip, [r0, 0xa]",
            "ldrb ip, [r3, 0xe]",
            "ldrb ip, [r2, ip]",
            "strb ip, [r0, 6]",
            "ldrb r3, [r3, 6]",
            "ldrb r3, [r2, r3]",
            "strb r3, [r0, 0xe]",
            "add r3, r1, 0x10",
            "ldrb r0, [r3, 0xd]",
            "ldrb r0, [r2, r0]",
            "strb r0, [r1, 1]",
            "ldrb r0, [r3, 9]",
            "ldrb r0, [r2, r0]",
            "strb r0, [r1, 0xd]",
            "ldrb r0, [r3, 5]",
            "ldrb r0, [r2, r0]",
            "strb r0, [r1, 9]",
            "ldrb r3, [r3, 1]",
            "ldrb r3, [r2, r3]",
            "strb r3, [r1, 5]",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_dict_copy": {
        "function_address": "0x00005ce0",
        "instructions": [
            "ldr r3, [0x00005d38]",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "ldr r8, [0x00005d3c]",
            "mov r6, r1",
            "add r3, pc, r3",
            "mov r5, r2",
            "mov r4, 0",
            "add r8, r3, r8",
            "b 0x5d18",
            "mov r0, r7",
            "ldm r4, {r1, r2}",
            "mov r3, r5",
            "bl sym.av_dict_set",
            "mov r2, r4",
            "mov r0, r6",
            "mov r1, r8",
            "mov r3, 2",
            "bl sym.av_dict_get",
            "subs r4, r0, 0",
            "bne 0x5d08",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_dict_set": {
        "function_address": "0x00005ae0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r0",
            "ldr r4, [r0]",
            "mov r6, r2",
            "mov r2, 0",
            "mov r8, r1",
            "mov r5, r3",
            "mov r0, r4",
            "bl sym.av_dict_get",
            "cmp r4, 0",
            "mov sl, r0",
            "bne 0x5b20",
            "mov r0, 8",
            "bl sym.av_mallocz",
            "mov r4, r0",
            "str r0, [r7]",
            "cmp sl, 0",
            "beq 0x5b70",
            "tst r5, 0x10",
            "movne r0, 0",
            "popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ands sb, r5, 0x20",
            "ldrne sb, [sl, 4]",
            "bne 0x5b48",
            "ldr r0, [sl, 4]",
            "bl sym.av_free",
            "ldr r0, [sl]",
            "bl sym.av_free",
            "ldr r3, [r4]",
            "ldr r2, [r4, 4]",
            "sub r3, r3, 1",
            "str r3, [r4]",
            "add r3, r2, r3, lsl 3",
            "ldm r3, {r0, r1}",
            "stm sl, {r0, r1}",
            "b 0x5b94",
            "ldr r1, [r4]",
            "ldr r0, [r4, 4]",
            "add r1, r1, 1",
            "lsl r1, r1, 3",
            "bl sym.av_realloc",
            "cmp r0, 0",
            "beq 0x5c74",
            "mov sb, sl",
            "str r0, [r4, 4]",
            "cmp r6, 0",
            "beq 0x5c50",
            "ldr sl, [r4, 4]",
            "tst r5, 4",
            "ldr fp, [r4]",
            "strne r8, [sl, fp, lsl 3]",
            "bne 0x5bbc",
            "mov r0, r8",
            "bl sym.av_strdup",
            "str r0, [sl, fp, lsl 3]",
            "tst r5, 8",
            "ldmne r4, {r2, r3}",
            "addne r3, r3, r2, lsl 3",
            "strne r6, [r3, 4]",
            "bne 0x5c44",
            "cmp sb, 0",
            "beq 0x5c2c",
            "tst r5, 0x20",
            "beq 0x5c2c",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "mov r8, r0",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "add r8, r8, r0",
            "mov r0, sb",
            "add r8, r8, 1",
            "mov r1, r8",
            "bl sym.av_realloc",
            "subs r5, r0, 0",
            "beq 0x5c74",
            "mov r2, r8",
            "mov r1, r6",
            "bl sym.av_strlcat",
            "ldm r4, {r2, r3}",
            "add r3, r3, r2, lsl 3",
            "str r5, [r3, 4]",
            "b 0x5c44",
            "ldr r5, [r4]",
            "mov r0, r6",
            "ldr r3, [r4, 4]",
            "add r5, r3, r5, lsl 3",
            "bl sym.av_strdup",
            "str r0, [r5, 4]",
            "ldr r3, [r4]",
            "add r3, r3, 1",
            "str r3, [r4]",
            "ldr r5, [r4]",
            "cmp r5, 0",
            "bne 0x5c7c",
            "ldr r0, [r4, 4]",
            "bl sym.av_free",
            "mov r0, r7",
            "bl sym.av_freep",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mvn r0, 0xb",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_dict_get": {
        "function_address": "0x000059e0",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r6, r0, 0",
            "mov r4, r1",
            "moveq r8, r6",
            "beq 0x5ad8",
            "cmp r2, 0",
            "and sb, r3, 1",
            "ldrne r5, [r6, 4]",
            "moveq r5, r2",
            "and r3, r3, 2",
            "ldr fp, [r6]",
            "str r3, [sp, 4]",
            "rsbne r5, r5, r2",
            "asrne r5, r5, 3",
            "addne r5, r5, 1",
            "lsl r7, r5, 3",
            "b 0x5acc",
            "ldr r3, [r6, 4]",
            "cmp sb, 0",
            "add r8, r3, r7",
            "ldr sl, [r3, r7]",
            "movne r3, 0",
            "bne 0x5a50",
            "bl sym.imp.__ctype_toupper_loc",
            "mov r3, sb",
            "ldr r2, [r0]",
            "b 0x5a70",
            "add r3, r3, 1",
            "ldrb r1, [sl, r3]",
            "ldrb r2, [r4, r3]",
            "cmp r2, r1",
            "bne 0x5aa0",
            "cmp r2, 0",
            "bne 0x5a4c",
            "b 0x5aa0",
            "add r3, r3, 1",
            "ldrb r0, [sl, r3]",
            "ldrb r1, [r4, r3]",
            "lsl r0, r0, 1",
            "lsl ip, r1, 1",
            "ldrsh r0, [r2, r0]",
            "str r0, [sp]",
            "ldrsh r0, [r2, ip]",
            "ldr ip, [sp]",
            "cmp ip, r0",
            "bne 0x5aa0",
            "cmp r1, 0",
            "bne 0x5a6c",
            "ldrb r2, [r4, r3]",
            "cmp r2, 0",
            "bne 0x5ac4",
            "ldrb r3, [sl, r3]",
            "cmp r3, 0",
            "beq 0x5ad8",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bne 0x5ad8",
            "add r5, r5, 1",
            "add r7, r7, 8",
            "cmp r5, fp",
            "blo 0x5a24",
            "mov r8, 0",
            "mov r0, r8",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_image_fill_max_pixsteps": {
        "function_address": "0x00007d30",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r2",
            "mov r1, 0",
            "mov r2, 0x10",
            "mov r5, r0",
            "bl sym.imp.memset",
            "cmp r4, 0",
            "beq 0x7d64",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "mov r3, 0",
            "add r2, r3, 4",
            "ldrb r2, [r6, r2, lsl 1]",
            "ubfx r1, r2, 2, 3",
            "and r2, r2, 3",
            "ldr r0, [r5, r2, lsl 2]",
            "cmp r1, r0",
            "blt 0x7d94",
            "add r1, r1, 1",
            "cmp r4, 0",
            "str r1, [r5, r2, lsl 2]",
            "strne r3, [r4, r2, lsl 2]",
            "add r3, r3, 1",
            "cmp r3, 4",
            "bne 0x7d68",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_add_q": {
        "function_address": "0x0000dc9c",
        "instructions": [
            "sub sp, sp, 8",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "add r4, sp, 0x10",
            "ldr ip, [sp, 0x48]",
            "mov r6, r3",
            "mov r5, r0",
            "stm r4, {r1, r2}",
            "str r3, [sp, 0x44]",
            "mov r2, r3",
            "asr r3, r2, 0x1f",
            "ldr lr, [sp, 0x14]",
            "mov r0, ip",
            "asr r1, r0, 0x1f",
            "ldr r2, [sp, 0x10]",
            "mov sl, lr",
            "asr fp, sl, 0x1f",
            "mov r8, r2",
            "asr sb, r8, 0x1f",
            "mul r3, lr, r3",
            "mul r8, ip, sb",
            "mla r3, r6, fp, r3",
            "umull r6, r7, lr, r6",
            "mla r8, r2, r1, r8",
            "add r7, r3, r7",
            "umull r2, r3, ip, r2",
            "adds r2, r2, r6",
            "add r3, r8, r3",
            "mul r8, lr, r1",
            "umull r0, r1, lr, ip",
            "adc r3, r3, r7",
            "mla r8, ip, fp, r8",
            "add r1, r8, r1",
            "strd r0, r1, [sp]",
            "mvn r0, 0x80000000",
            "mov r1, 0",
            "strd r0, r1, [sp, 8]",
            "add r1, r4, 4",
            "mov r0, r4",
            "bl sym.av_reduce",
            "ldm r4, {r0, r1}",
            "stm r5, {r0, r1}",
            "mov r0, r5",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.av_reduce": {
        "function_address": "0x0000d864",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x5c",
            "ldrd r4, r5, [sp, 0x80]",
            "mov fp, r3",
            "mov sl, r2",
            "asr r2, fp, 0x1f",
            "str r0, [sp, 0x50]",
            "lsr r0, r3, 0x1f",
            "eor r8, r2, sl",
            "str r1, [sp, 0x54]",
            "mov r3, r2",
            "eor sb, r2, fp",
            "subs r8, r8, r2",
            "sbc sb, sb, r3",
            "asr r2, r5, 0x1f",
            "strd r8, sb, [sp, 8]",
            "lsr r1, r5, 0x1f",
            "mov r3, r2",
            "str r0, [sp, 0x48]",
            "eor r8, r2, r4",
            "eor sb, r2, r5",
            "subs r8, r8, r2",
            "sbc sb, sb, r3",
            "str r1, [sp, 0x4c]",
            "mov r2, r8",
            "ldrd r0, r1, [sp, 8]",
            "mov r3, sb",
            "bl sym.av_gcd",
            "orrs ip, r0, r1",
            "mov r7, r0",
            "mov r6, r1",
            "beq 0xd918",
            "mov r2, r7",
            "mov r3, r6",
            "ldrd r0, r1, [sp, 8]",
            "bl fcn.0000ff90",
            "mov r2, r7",
            "mov sl, r0",
            "mov fp, r1",
            "mov r0, r8",
            "mov r1, sb",
            "mov r3, r6",
            "bl fcn.0000ff90",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x8c]",
            "mov r6, 1",
            "cmp r5, r0",
            "bgt 0xd938",
            "bne 0xd93c",
            "ldr r1, [sp, 0x88]",
            "cmp r4, r1",
            "bls 0xd93c",
            "mov r6, 0",
            "ldr r2, [sp, 0x8c]",
            "mov r3, 1",
            "cmp fp, r2",
            "bgt 0xd95c",
            "bne 0xd960",
            "ldr r8, [sp, 0x88]",
            "cmp sl, r8",
            "bls 0xd960",
            "mov r3, 0",
            "and r6, r6, r3",
            "mov sb, 1",
            "uxtb r6, r6",
            "mov ip, 0",
            "str sb, [sp, 0x14]",
            "cmp r6, 0",
            "str ip, [sp, 0x18]",
            "movne r6, r4",
            "movne r7, sl",
            "movne r4, 0",
            "movne r5, 0",
            "moveq r7, 1",
            "b 0xdbb4",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000ff90",
            "mov r2, r7",
            "asr r3, r2, 0x1f",
            "str r0, [sp, 4]",
            "mul ip, r0, r3",
            "strd r2, r3, [sp, 0x30]",
            "umull r2, r3, r0, r7",
            "str r1, [sp]",
            "str r4, [sp, 0x1c]",
            "str r5, [sp, 0x44]",
            "mla ip, r7, r1, ip",
            "add r3, ip, r3",
            "ldr ip, [sp, 0x18]",
            "adds r8, r2, ip",
            "adc sb, r3, ip, asr 31",
            "mov r2, r6",
            "asr r3, r2, 0x1f",
            "mul ip, r0, r3",
            "strd r2, r3, [sp, 8]",
            "strd r8, sb, [sp, 0x20]",
            "umull r2, r3, r0, r6",
            "ldr sb, [sp, 0x14]",
            "mla ip, r6, r1, ip",
            "mov r8, sb",
            "asr sb, r8, 0x1f",
            "strd r8, sb, [sp, 0x38]",
            "adds r8, r8, r2",
            "add r3, ip, r3",
            "ldr ip, [sp, 0x8c]",
            "adc sb, sb, r3",
            "mov r2, 1",
            "strd r8, sb, [sp, 0x28]",
            "cmp sb, ip",
            "bgt 0xda40",
            "bne 0xda3c",
            "ldr r3, [sp, 0x88]",
            "cmp r8, r3",
            "bhi 0xda40",
            "mov r2, 0",
            "ldr r8, [sp, 0x24]",
            "mov r3, 1",
            "ldr sb, [sp, 0x8c]",
            "cmp r8, sb",
            "bgt 0xda6c",
            "bne 0xda68",
            "ldr ip, [sp, 0x20]",
            "ldr r8, [sp, 0x88]",
            "cmp ip, r8",
            "bhi 0xda6c",
            "mov r3, 0",
            "orr r3, r2, r3",
            "tst r3, 0xff",
            "beq 0xdb74",
            "cmp r7, 0",
            "ldr r8, [sp, 4]",
            "ldr sb, [sp]",
            "beq 0xdaac",
            "ldr sb, [sp, 0x18]",
            "mov r2, r7",
            "asr r3, r2, 0x1f",
            "ldrd r0, r1, [sp, 0x88]",
            "subs r0, r0, sb",
            "sbc r1, r1, sb, asr 31",
            "bl fcn.0000ff90",
            "mov r8, r0",
            "mov sb, r1",
            "cmp r6, 0",
            "beq 0xdaec",
            "ldr ip, [sp, 0x14]",
            "mov r2, r6",
            "asr r3, r2, 0x1f",
            "ldrd r0, r1, [sp, 0x88]",
            "subs r0, r0, ip",
            "sbc r1, r1, ip, asr 31",
            "bl fcn.0000ff90",
            "cmp sb, r1",
            "bhi 0xdae4",
            "bne 0xdaec",
            "cmp r8, r0",
            "bls 0xdaec",
            "mov r8, r0",
            "mov sb, r1",
            "ldrd r2, r3, [sp, 8]",
            "ldrd r0, r1, [sp, 0x38]",
            "adds r2, r2, r2",
            "mul sb, r2, sb",
            "adc r3, r3, r3",
            "mla sb, r8, r3, sb",
            "umull r2, r3, r2, r8",
            "adds r2, r2, r0",
            "add r3, sb, r3",
            "ldr sb, [sp, 0x1c]",
            "adc r3, r3, r1",
            "ldr r1, [sp, 0x44]",
            "mul ip, r2, r1",
            "umull r0, r1, r2, sb",
            "mla ip, sb, r3, ip",
            "mov r2, r6",
            "asr r3, r2, 0x1f",
            "add r1, ip, r1",
            "mul ip, r6, fp",
            "mla ip, sl, r3, ip",
            "umull r2, r3, r6, sl",
            "add r3, ip, r3",
            "cmp r1, r3",
            "bhi 0xdb58",
            "bne 0xdbbc",
            "cmp r0, r2",
            "bls 0xdbbc",
            "ldr ip, [sp, 0x30]",
            "ldr r0, [sp, 0x18]",
            "ldr r1, [sp, 8]",
            "ldr r2, [sp, 0x14]",
            "mla r7, r8, ip, r0",
            "mla r6, r8, r1, r2",
            "b 0xdbbc",
            "ldr r8, [sp, 0x44]",
            "ldr sb, [sp, 0x1c]",
            "str r7, [sp, 0x18]",
            "str r6, [sp, 0x14]",
            "mul r3, r0, r8",
            "ldr r6, [sp, 0x28]",
            "ldr r7, [sp, 0x20]",
            "mla r3, sb, r1, r3",
            "umull r0, r1, r0, sb",
            "add r1, r3, r1",
            "subs r0, sl, r0",
            "sbc r1, fp, r1",
            "mov sl, r4",
            "mov fp, r5",
            "mov r4, r0",
            "mov r5, r1",
            "orrs ip, r4, r5",
            "bne 0xd994",
            "add r0, sp, 0x48",
            "ldm r0, {r0, r1, r2, r3}",
            "cmp r0, r1",
            "rsbne r7, r7, 0",
            "orrs r8, r4, r5",
            "str r7, [r2]",
            "movne r0, 0",
            "moveq r0, 1",
            "str r6, [r3]",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_gcd": {
        "function_address": "0x00009a68",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r3",
            "mov r5, r2",
            "orrs r3, r2, r4",
            "popeq {r3, r4, r5, pc}",
            "mov r3, r4",
            "bl fcn.0000ff90",
            "mov r0, r5",
            "mov r1, r4",
            "b 0x9a6c"
        ]
    },
    "fcn.0000ff90": {
        "function_address": "0x0000ff90",
        "instructions": [
            "cmp r3, 0",
            "cmpeq r2, 0",
            "bne 0xffb8",
            "cmp r1, 0",
            "cmpeq r0, 0",
            "movlt r1, 0x80000000",
            "movlt r0, 0",
            "mvngt r1, 0x80000000",
            "mvngt r0, 0",
            "b fcn.0000ffd4",
            "sub sp, sp, 8",
            "push {sp, lr}",
            "bl fcn.0000ffe4",
            "ldr lr, [sp, 4]",
            "add sp, sp, 8",
            "pop {r2, r3}",
            "bx lr"
        ]
    },
    "sym.av_get_double": {
        "function_address": "0x0000bad8",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r3, 1",
            "sub sp, sp, 0x2c",
            "mov r4, 1",
            "mov r5, 0",
            "str r3, [sp, 0x24]",
            "add r3, sp, 0x24",
            "strd r4, r5, [sp, 0x18]",
            "mov r4, 0",
            "str r3, [sp]",
            "add r3, sp, 0x18",
            "ldr r5, [0x0000bb6c]",
            "str r3, [sp, 4]",
            "mov r3, 0",
            "str r3, [sp, 8]",
            "add r3, sp, 0x10",
            "strd r4, r5, [sp, 0x10]",
            "bl fcn.0000b5a0",
            "cmp r0, 0",
            "movlt r0, 0",
            "ldrlt r1, [0x0000bb70]",
            "blt 0xbb64",
            "ldrd r0, r1, [sp, 0x18]",
            "bl fcn.0000f4f8",
            "ldrd r2, r3, [sp, 0x10]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x24]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "add sp, sp, 0x2c",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000b5a0": {
        "function_address": "0x0000b5a0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r7, r3",
            "ldr r3, [sp, 0x30]",
            "mov r6, r2",
            "mov r2, 0",
            "ldr r4, [sp, 0x28]",
            "str r3, [sp]",
            "add r3, sp, 0xc",
            "str r3, [sp, 4]",
            "mov r3, r2",
            "ldr r5, [sp, 0x2c]",
            "bl sym.av_opt_find2",
            "cmp r0, 0",
            "beq 0xb60c",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 0",
            "beq 0xb60c",
            "ldr r1, [r0, 8]",
            "cmp r6, 0",
            "strne r0, [r6]",
            "mov r2, r7",
            "str r5, [sp]",
            "add r1, r3, r1",
            "mov r3, r4",
            "bl fcn.0000a594",
            "b 0xb624",
            "mov r3, 0",
            "mov r2, 0",
            "mvn r0, 0",
            "strd r2, r3, [r5]",
            "mov r3, 0",
            "str r3, [r4]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000f4f8": {
        "function_address": "0x0000f4f8",
        "instructions": [
            "orrs r2, r0, r1",
            "bxeq lr",
            "push {r4, r5, lr}",
            "ands r5, r1, 0x80000000",
            "bpl 0xf514",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "lsrs ip, r1, 0x16",
            "beq 0xf298",
            "mov r2, 3",
            "lsrs ip, ip, 3",
            "addne r2, r2, 3",
            "lsrs ip, ip, 3",
            "addne r2, r2, 3",
            "add r2, r2, ip, lsr 3",
            "rsb r3, r2, 0x20",
            "lsl ip, r0, r3",
            "lsr r0, r0, r2",
            "orr r0, r0, r1, lsl r3",
            "lsr r1, r1, r2",
            "add r4, r4, r2",
            "b 0xf298"
        ]
    },
    "fcn.0000f558": {
        "function_address": "0x0000f558",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.0000f738",
            "add r4, r4, r5",
            "eor r6, r1, r3",
            "bic r1, r1, ip, lsl 21",
            "bic r3, r3, ip, lsl 21",
            "orrs r5, r0, r1, lsl 12",
            "orrsne r5, r2, r3, lsl 12",
            "orr r1, r1, 0x100000",
            "orr r3, r3, 0x100000",
            "beq 0xf610",
            "umull ip, lr, r0, r2",
            "mov r5, 0",
            "umlal lr, r5, r1, r2",
            "and r2, r6, 0x80000000",
            "umlal lr, r5, r0, r3",
            "mov r6, 0",
            "umlal r5, r6, r1, r3",
            "teq ip, 0",
            "orrne lr, lr, 1",
            "sub r4, r4, 0xff",
            "cmp r6, 0x200",
            "sbc r4, r4, 0x300",
            "bhs 0xf5dc",
            "lsls lr, lr, 1",
            "adcs r5, r5, r5",
            "adc r6, r6, r6",
            "orr r1, r2, r6, lsl 11",
            "orr r1, r1, r5, lsr 21",
            "lsl r0, r5, 0xb",
            "orr r0, r0, lr, lsr 21",
            "lsl lr, lr, 0xb",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xf63c",
            "cmp lr, 0x80000000",
            "lsrseq lr, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and r6, r6, 0x80000000",
            "orr r1, r6, r1",
            "orr r0, r0, r2",
            "eor r1, r1, r3",
            "subs r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "bgt 0xf7a4",
            "cmn r4, 0x36",
            "movle r0, 0",
            "andle r1, r1, 0x80000000",
            "pople {r4, r5, r6, pc}",
            "rsb r4, r4, 0",
            "subs r4, r4, 0x20",
            "bge 0xf6c0",
            "adds r4, r4, 0xc",
            "bgt 0xf694",
            "add r4, r4, 0x14",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r5",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r5",
            "and r2, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r2, r1, lsr r4",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r4, r4, 0xc",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r4",
            "lsr r0, r0, r5",
            "orr r0, r0, r1, lsl r4",
            "and r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r1, 0",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "rsb r5, r4, 0x20",
            "orr lr, lr, r0, lsl r5",
            "lsr r3, r0, r4",
            "orr r3, r3, r1, lsl r5",
            "lsr r0, r1, r4",
            "and r1, r1, 0x80000000",
            "bic r0, r0, r1, lsr r4",
            "add r0, r0, r3, lsr 31",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, pc}",
            "and r1, r1, 0x80000000",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000f47c": {
        "function_address": "0x0000f47c",
        "instructions": [
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "ands r5, r0, 0x80000000",
            "rsbmi r0, r0, 0",
            "mov r1, 0",
            "b 0xf2f4"
        ]
    },
    "fcn.0000f7c4": {
        "function_address": "0x0000f7c4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.0000f958",
            "sub r4, r4, r5",
            "eor lr, r1, r3",
            "orrs r5, r2, r3, lsl 12",
            "lsl r1, r1, 0xc",
            "beq 0xf928",
            "lsl r3, r3, 0xc",
            "mov r5, 0x10000000",
            "orr r3, r5, r3, lsr 4",
            "orr r3, r3, r2, lsr 24",
            "lsl r2, r2, 8",
            "orr r5, r5, r1, lsr 4",
            "orr r5, r5, r0, lsr 24",
            "lsl r6, r0, 8",
            "and r1, lr, 0x80000000",
            "cmp r5, r3",
            "cmpeq r6, r2",
            "adc r4, r4, 0xfd",
            "add r4, r4, 0x300",
            "bhs 0xf838",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs r6, r6, r2",
            "sbc r5, r5, r3",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "mov r0, 0x100000",
            "mov ip, 0x80000",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 1",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 2",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 3",
            "orrs lr, r5, r6",
            "beq 0xf8f8",
            "lsl r5, r5, 4",
            "orr r5, r5, r6, lsr 28",
            "lsl r6, r6, 4",
            "lsl r3, r3, 3",
            "orr r3, r3, r2, lsr 29",
            "lsl r2, r2, 3",
            "lsrs ip, ip, 4",
            "bne 0xf850",
            "tst r1, 0x100000",
            "bne 0xf904",
            "orr r1, r1, r0",
            "mov r0, 0",
            "mov ip, 0x80000000",
            "b 0xf850",
            "tst r1, 0x100000",
            "orreq r1, r1, r0",
            "moveq r0, 0",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xf63c",
            "subs ip, r5, r3",
            "subseq ip, r6, r2",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, pc}",
            "and lr, lr, 0x80000000",
            "orr r1, lr, r1, lsr 12",
            "adds r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, pc}",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "b 0xf63c"
        ]
    },
    "sym.av_opt_find2": {
        "function_address": "0x0000ad78",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r5, r0, 0",
            "sub sp, sp, 0x1c",
            "mov sl, r1",
            "mov r6, r2",
            "mov r7, r3",
            "ldr r4, [sp, 0x40]",
            "moveq fp, r5",
            "ldr sb, [sp, 0x44]",
            "beq 0xaed8",
            "ldr r3, [r5]",
            "tst r4, 1",
            "str r3, [sp, 0xc]",
            "bne 0xadb8",
            "mov fp, 0",
            "b 0xaec4",
            "ands r8, r4, 2",
            "movne r3, 0",
            "addne r8, sp, 0x18",
            "strne r3, [r8, -4]!",
            "bne 0xadf8",
            "b 0xae30",
            "mov r3, 0",
            "mov r0, r8",
            "str r3, [sp, 4]",
            "mov r1, sl",
            "mov r2, r6",
            "mov r3, r7",
            "str r4, [sp]",
            "bl sym.av_opt_find2",
            "subs fp, r0, 0",
            "bne 0xaed8",
            "ldr r0, [sp, 0xc]",
            "ldr r1, [sp, 0x14]",
            "bl sym.av_opt_child_class_next",
            "cmp r0, 0",
            "str r0, [sp, 0x14]",
            "bne 0xadd0",
            "b 0xadb0",
            "mov r1, sl",
            "mov r2, r6",
            "mov r3, r7",
            "stm sp, {r4, sb}",
            "bl sym.av_opt_find2",
            "subs fp, r0, 0",
            "bne 0xaed8",
            "mov r1, r8",
            "mov r0, r5",
            "bl sym.av_opt_child_next",
            "subs r8, r0, 0",
            "bne 0xae14",
            "b 0xadb0",
            "ldr r0, [fp]",
            "mov r1, sl",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xaec4",
            "ldr r3, [fp, 0x28]",
            "and r3, r7, r3",
            "cmp r3, r7",
            "bne 0xaec4",
            "cmp r6, 0",
            "ldr r3, [fp, 0xc]",
            "bne 0xae84",
            "cmp r3, 0x80",
            "beq 0xaec4",
            "b 0xaea8",
            "cmp r3, 0x80",
            "bne 0xaec4",
            "ldr r0, [fp, 0x2c]",
            "cmp r0, 0",
            "beq 0xaec4",
            "mov r1, r6",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xaec4",
            "cmp sb, 0",
            "beq 0xaed8",
            "tst r4, 2",
            "movne r3, 0",
            "streq r5, [sb]",
            "strne r3, [sb]",
            "b 0xaed8",
            "mov r1, fp",
            "mov r0, r5",
            "bl sym.av_opt_next",
            "subs fp, r0, 0",
            "bne 0xae48",
            "mov r0, fp",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000a594": {
        "function_address": "0x0000a594",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r2",
            "ldr r2, [r0, 0xc]",
            "mov r5, r3",
            "ldr ip, [sp, 0x10]",
            "cmp r2, 3",
            "beq 0xa618",
            "bhi 0xa5c4",
            "cmp r2, 1",
            "beq 0xa5f4",
            "bhi 0xa600",
            "b 0xa5e0",
            "cmp r2, 6",
            "beq 0xa620",
            "cmp r2, 0x80",
            "beq 0xa638",
            "cmp r2, 4",
            "bne 0xa648",
            "b 0xa60c",
            "ldr r3, [r1]",
            "mov r0, 0",
            "str r0, [ip, 4]",
            "str r3, [ip]",
            "pop {r3, r4, r5, pc}",
            "ldr r2, [r1]",
            "asr r3, r2, 0x1f",
            "b 0xa604",
            "ldrd r2, r3, [r1]",
            "strd r2, r3, [ip]",
            "b 0xa640",
            "ldr r0, [r1]",
            "bl fcn.0000f4a4",
            "b 0xa63c",
            "ldrd r0, r1, [r1]",
            "b 0xa63c",
            "ldr r2, [r1]",
            "asr r3, r2, 0x1f",
            "strd r2, r3, [ip]",
            "ldr r3, [r1, 4]",
            "str r3, [r5]",
            "b 0xa640",
            "ldrd r0, r1, [r0, 0x10]",
            "strd r0, r1, [r4]",
            "mov r0, 0",
            "pop {r3, r4, r5, pc}",
            "mvn r0, 0x15",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.0000f738": {
        "function_address": "0x0000f738",
        "instructions": [
            "teq r4, 0",
            "bne 0xf718",
            "and r6, r1, 0x80000000",
            "lsls r0, r0, 1",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "subeq r4, r4, 1",
            "beq 0xf6f8",
            "orr r1, r1, r6",
            "teq r5, 0",
            "bxne lr",
            "and r6, r3, 0x80000000",
            "lsls r2, r2, 1",
            "adc r3, r3, r3",
            "tst r3, 0x100000",
            "subeq r5, r5, 1",
            "beq 0xf71c",
            "orr r3, r3, r6",
            "bx lr",
            "teq r4, ip",
            "and r5, ip, r3, lsr 20",
            "teqne r5, ip",
            "beq 0xf764",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xf6ec",
            "eor r1, r1, r3",
            "and r1, r1, 0x80000000",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "orrs r6, r0, r1, lsl 1",
            "moveq r0, r2",
            "moveq r1, r3",
            "orrsne r6, r2, r3, lsl 1",
            "beq 0xf7b8",
            "teq r4, ip",
            "bne 0xf788",
            "orrs r6, r0, r1, lsl 12",
            "bne 0xf7b8",
            "teq r5, ip",
            "bne 0xf7a0",
            "orrs r6, r2, r3, lsl 12",
            "movne r0, r2",
            "movne r1, r3",
            "bne 0xf7b8",
            "eor r1, r1, r3",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf80000",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000f958": {
        "function_address": "0x0000f958",
        "instructions": [
            "and r5, ip, r3, lsr 20",
            "teq r4, ip",
            "teqeq r5, ip",
            "beq 0xf7b8",
            "teq r4, ip",
            "bne 0xf98c",
            "orrs r4, r0, r1, lsl 12",
            "bne 0xf7b8",
            "teq r5, ip",
            "bne 0xf7a0",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xf7b8",
            "teq r5, ip",
            "bne 0xf9a8",
            "orrs r5, r2, r3, lsl 12",
            "beq 0xf754",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xf7b8",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xf6ec",
            "orrs r4, r0, r1, lsl 1",
            "bne 0xf7a0",
            "orrs r5, r2, r3, lsl 1",
            "bne 0xf754",
            "b 0xf7b8"
        ]
    },
    "sym.av_int2dbl": {
        "function_address": "0x00008508",
        "instructions": [
            "adds r2, r0, r0",
            "push {r4, r5, r6, r7, r8, lr}",
            "adc r3, r1, r1",
            "mov r4, r0",
            "cmn r3, 0x200000",
            "mov r5, r1",
            "bhi 0x858c",
            "bne 0x8530",
            "cmp r2, 0",
            "bne 0x858c",
            "asr r2, r5, 0x1f",
            "mov r0, 1",
            "mov r1, 0",
            "ldr r3, [0x00008598]",
            "orr r0, r0, r2",
            "orr r1, r1, r2",
            "mvn r2, 0",
            "mov r6, 0",
            "and r2, r2, r4",
            "and r3, r3, r5",
            "adds r2, r2, r6",
            "mov r7, 0x100000",
            "adc r3, r3, r7",
            "mul ip, r0, r3",
            "mla ip, r2, r1, ip",
            "umull r0, r1, r0, r2",
            "add r1, ip, r1",
            "bl fcn.0000f4f8",
            "ubfx r2, r5, 0x14, 0xb",
            "sub r2, r2, 0x430",
            "sub r2, r2, 3",
            "pop {r4, r5, r6, r7, r8, lr}",
            "b sym.imp.ldexp",
            "mov r0, 0",
            "ldr r1, [0x0000859c]",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_find_opt": {
        "function_address": "0x0000ac00",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "mov r6, r2",
            "mov sl, r3",
            "mov r7, 0",
            "ldr r8, [sp, 0x20]",
            "b 0xac68",
            "ldr r0, [r7]",
            "mov r1, r4",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xac68",
            "cmp r6, 0",
            "beq 0xac58",
            "ldr r0, [r7, 0x2c]",
            "cmp r0, 0",
            "beq 0xac68",
            "mov r1, r6",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xac68",
            "ldr r3, [r7, 0x28]",
            "and r3, sl, r3",
            "cmp r3, r8",
            "beq 0xac7c",
            "mov r1, r7",
            "mov r0, r5",
            "bl sym.av_next_option",
            "subs r7, r0, 0",
            "bne 0xac20",
            "mov r0, r7",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_next_option": {
        "function_address": "0x0000abfc",
        "instructions": [
            "b sym.av_opt_next"
        ]
    },
    "sym.av_set_string3": {
        "function_address": "0x0000c618",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r5, r2",
            "ldr r4, [sp, 0x20]",
            "mov r2, 0",
            "mov r3, r2",
            "mov r7, r0",
            "mov r6, r1",
            "str r2, [sp]",
            "bl sym.av_opt_find",
            "cmp r4, 0",
            "mov r1, r6",
            "strne r0, [r4]",
            "mov r2, r5",
            "mov r0, r7",
            "mov r3, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "b sym.av_opt_set"
        ]
    },
    "sym.av_opt_find": {
        "function_address": "0x0000aee4",
        "instructions": [
            "push {r0, r1, r2, lr}",
            "ldr ip, [sp, 0x10]",
            "str ip, [sp]",
            "mov ip, 0",
            "str ip, [sp, 4]",
            "bl sym.av_opt_find2",
            "pop {r1, r2, r3, pc}"
        ]
    },
    "sym.av_opt_child_class_next": {
        "function_address": "0x0000ad54",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [r0, 0x1c]",
            "cmp r3, 0",
            "beq 0xad70",
            "mov r0, r1",
            "blx r3",
            "pop {r3, pc}",
            "mov r0, r3",
            "pop {r3, pc}"
        ]
    },
    "sym.av_opt_child_next": {
        "function_address": "0x0000ad30",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [r0]",
            "ldr r3, [r3, 0x18]",
            "cmp r3, 0",
            "beq 0xad4c",
            "blx r3",
            "pop {r3, pc}",
            "mov r0, r3",
            "pop {r3, pc}"
        ]
    },
    "sym.av_opt_next": {
        "function_address": "0x0000a8b8",
        "instructions": [
            "ldr r3, [r0]",
            "subs r0, r1, 0",
            "bne 0xa8dc",
            "ldr r3, [r3, 8]",
            "ldr r0, [r3]",
            "cmp r0, 0",
            "movne r0, r3",
            "moveq r0, 0",
            "bx lr",
            "ldr r3, [r0, 0x30]!",
            "cmp r3, 0",
            "moveq r0, 0",
            "bx lr"
        ]
    },
    "sym.av_get_pix_fmt": {
        "function_address": "0x0000d554",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x28",
            "ldr r6, [0x0000d5f0]",
            "mov r5, r0",
            "ldr r1, [0x0000d5f4]",
            "add r6, pc, r6",
            "add r1, r6, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xd598",
            "ldr r1, [0x0000d5f8]",
            "mov r0, r5",
            "add r1, r6, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xd5a0",
            "b 0xd5a8",
            "ldr r5, [0x0000d5fc]",
            "b 0xd5a4",
            "ldr r5, [0x0000d600]",
            "add r5, r6, r5",
            "mov r0, r5",
            "bl fcn.0000d248",
            "cmn r0, 1",
            "bne 0xd5e8",
            "ldr r3, [0x0000d604]",
            "add r4, sp, 8",
            "ldr r2, [0x0000d608]",
            "mov r0, r4",
            "mov r1, 0x20",
            "add r3, r6, r3",
            "str r3, [sp]",
            "add r2, r6, r2",
            "mov r3, r5",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "bl fcn.0000d248",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000d248": {
        "function_address": "0x0000d248",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "ldr r3, [0x0000d29c]",
            "movw r5, 0x12b",
            "mov r4, 0",
            "ldr r2, [0x0000d2a0]",
            "add r3, pc, r3",
            "ldr r6, [r3, r2]",
            "ldr r0, [r6, r4, lsl 4]",
            "cmp r0, 0",
            "beq 0xd284",
            "mov r1, r7",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xd294",
            "subs r5, r5, 1",
            "add r4, r4, 1",
            "bne 0xd268",
            "mvn r4, 0",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x00003948",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x35c]!"
        ]
    },
    "sym.av_samples_fill_arrays": {
        "function_address": "0x0000e4cc",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r0",
            "ldr sl, [sp, 0x2c]",
            "mov r7, r1",
            "mov r8, r2",
            "mov r4, r3",
            "mov r0, sl",
            "bl sym.av_sample_fmt_is_planar",
            "ldr r3, [sp, 0x30]",
            "mov r6, r0",
            "mov r1, r4",
            "mov r0, r7",
            "ldr r2, [sp, 0x28]",
            "str r3, [sp]",
            "mov r3, sl",
            "bl sym.av_samples_get_buffer_size",
            "cmp r0, 0",
            "strge r8, [r5]",
            "movge r3, 1",
            "bge 0xe534",
            "b 0xe548",
            "ldr r1, [r5]",
            "add r3, r3, 1",
            "ldr r2, [r7]",
            "add r2, r1, r2",
            "str r2, [r5, 4]!",
            "cmp r6, 0",
            "cmpne r3, r4",
            "movge r0, 0",
            "movlt r0, 1",
            "blt 0xe520",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_sample_fmt_is_planar": {
        "function_address": "0x0000e3c4",
        "instructions": [
            "ldr r3, [0x0000e3f4]",
            "cmp r0, 9",
            "add r3, pc, r3",
            "bhi 0xe3ec",
            "ldr r2, [0x0000e3f8]",
            "add r3, r3, r2",
            "mov r2, 0x14",
            "mla r0, r2, r0, r3",
            "ldr r0, [r0, 0xc]",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.av_samples_get_buffer_size": {
        "function_address": "0x0000e3fc",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r3",
            "mov r7, r0",
            "mov r0, r3",
            "mov r8, r2",
            "mov r6, r1",
            "ldr sb, [sp, 0x30]",
            "bl sym.av_get_bytes_per_sample",
            "mov sl, r0",
            "mov r0, r4",
            "bl sym.av_sample_fmt_is_planar",
            "cmp sl, 0",
            "cmpne r8, 0",
            "mov fp, r0",
            "ble 0xe4c4",
            "cmp r6, 0",
            "ble 0xe4c4",
            "mvn r0, 0x80000000",
            "mov r1, sb",
            "bl fcn.0000f06c",
            "cmp r6, r0",
            "bgt 0xe4c4",
            "mul r1, r6, sb",
            "mvn r0, 0x80000000",
            "smull r2, r3, r8, r6",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "rsb r0, r1, r0",
            "mov r1, sl",
            "bl fcn.0000f06c",
            "ldr r3, [sp]",
            "mov r4, r0",
            "asr r5, r4, 0x1f",
            "ldr r2, [sp, 4]",
            "cmp r3, r5",
            "bgt 0xe4c4",
            "bne 0xe498",
            "cmp r2, r0",
            "bhi 0xe4c4",
            "cmp fp, 0",
            "sub r0, sb, 1",
            "muleq r8, r6, r8",
            "rsb sb, sb, 0",
            "cmp r7, 0",
            "mla r0, sl, r8, r0",
            "and r0, r0, sb",
            "strne r0, [r7]",
            "cmp fp, 0",
            "mulne r0, r6, r0",
            "b 0xe4c8",
            "mvn r0, 0x15",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_des_init": {
        "function_address": "0x000058d0",
        "instructions": [
            "cmp r2, 0xc0",
            "cmpne r2, 0x40",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "moveq r5, 0",
            "movne r5, 1",
            "bne 0x5980",
            "cmp r2, 0x40",
            "movle r2, 0",
            "movgt r2, 1",
            "str r2, [r0, 0x180]",
            "ldr r2, [r1]",
            "ldr r3, [r1, 4]",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.00005378",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "bl fcn.000053a4",
            "ldr r0, [r4, 0x180]",
            "cmp r0, 0",
            "popeq {r4, r5, r6, pc}",
            "ldr r2, [r6, 8]",
            "ldr r3, [r6, 0xc]",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.00005378",
            "mov r2, r0",
            "mov r3, r1",
            "add r0, r4, 0x80",
            "bl fcn.000053a4",
            "ldr r2, [r6, 0x10]",
            "ldr r3, [r6, 0x14]",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.00005378",
            "mov r2, r0",
            "mov r3, r1",
            "add r0, r4, 0x100",
            "bl fcn.000053a4",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00005378": {
        "function_address": "0x00005378",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r1",
            "bl fcn.00005370",
            "mov r4, r0",
            "mov r0, r5",
            "bl fcn.00005370",
            "mov r2, 0",
            "mov r1, r4",
            "orr r2, r2, r0",
            "mov r0, r2",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.000053a4": {
        "function_address": "0x000053a4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sb, r0",
            "ldr r6, [0x00005530]",
            "mov r4, 0",
            "mov r5, 0",
            "sub sp, sp, 0x24",
            "ldr r7, [0x00005534]",
            "add r6, pc, r6",
            "strd r2, r3, [sp, 0x10]",
            "strd sl, fp, [sp, 0x18]",
            "add r7, r6, r7",
            "add r8, r7, 0x38",
            "adds r4, r4, r4",
            "ldrb r2, [r7], 1",
            "ldrd r0, r1, [sp, 0x10]",
            "mov sl, 1",
            "adc r5, r5, r5",
            "mov fp, 0",
            "bl fcn.0000f168",
            "and r2, r0, sl",
            "and r3, r1, fp",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "cmp r7, r8",
            "bne 0x53d4",
            "ldr ip, [0x00005534]",
            "mov r8, sb",
            "ldrd sl, fp, [sp, 0x18]",
            "mov r7, 0",
            "add r6, r6, ip",
            "add ip, r6, 0x38",
            "add sb, r6, 0x68",
            "mov r6, ip",
            "lsr r0, r4, 0x1b",
            "lsr r3, r5, 0x1b",
            "orr r1, r0, r5, lsl 5",
            "str r3, [sp, 0xc]",
            "adds r4, r4, r4",
            "str r1, [sp, 8]",
            "mov r0, 0x10000001",
            "ldrd r2, r3, [sp, 8]",
            "mov r1, 0",
            "adc r5, r5, r5",
            "cmp r7, 8",
            "cmpne r7, 1",
            "and r2, r2, r0",
            "and r3, r3, r1",
            "mvn r0, 0x10000001",
            "mvn r1, 0",
            "and r4, r4, r0",
            "and r5, r5, r1",
            "orr r4, r4, r2",
            "orr r5, r5, r3",
            "ble 0x54c0",
            "cmp r7, 0xf",
            "beq 0x54c0",
            "lsr sl, r4, 0x1b",
            "lsr fp, r5, 0x1b",
            "orr sl, sl, r5, lsl 5",
            "mov r0, 0x10000001",
            "mov r1, 0",
            "adds r4, r4, r4",
            "and r2, sl, r0",
            "and r3, fp, r1",
            "adc r5, r5, r5",
            "mvn r0, 0x10000001",
            "mvn r1, 0",
            "and r4, r4, r0",
            "and r5, r5, r1",
            "orr r4, r4, r2",
            "orr r5, r5, r3",
            "strd r4, r5, [sp]",
            "mov r2, 0",
            "mov r3, 0",
            "mov r4, r6",
            "strd sl, fp, [sp, 0x18]",
            "adds sl, r2, r2",
            "ldrd r0, r1, [sp]",
            "adc fp, r3, r3",
            "strd sl, fp, [sp, 0x10]",
            "mov sl, 1",
            "ldrb r2, [r4], 1",
            "mov fp, 0",
            "bl fcn.0000f168",
            "and r2, r0, sl",
            "and r3, r1, fp",
            "ldrd r0, r1, [sp, 0x10]",
            "adds r2, r2, r0",
            "adc r3, r3, r1",
            "cmp r4, sb",
            "bne 0x54d4",
            "add r7, r7, 1",
            "ldrd r4, r5, [sp]",
            "cmp r7, 0x10",
            "ldrd sl, fp, [sp, 0x18]",
            "strd r2, r3, [r8], 8",
            "bne 0x5428",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00005370": {
        "function_address": "0x00005370",
        "instructions": [
            "rev r0, r0",
            "bx lr"
        ]
    },
    "fcn.0000f168": {
        "function_address": "0x0000f168",
        "instructions": [
            "subs r3, r2, 0x20",
            "rsb ip, r2, 0x20",
            "lsrmi r0, r0, r2",
            "lsrpl r0, r1, r3",
            "orrmi r0, r0, r1, lsl ip",
            "lsr r1, r1, r2",
            "bx lr"
        ]
    },
    "sym.av_sha_final": {
        "function_address": "0x0000eab4",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}",
            "mov r6, r0",
            "ldr r8, [r6, 0xc]",
            "mov r7, r1",
            "mov fp, 0",
            "ldr r0, [r0, 8]",
            "ldr r4, [0x0000eb8c]",
            "lsl r8, r8, 3",
            "orr r8, r8, r0, lsr 29",
            "lsl r0, r0, 3",
            "bl fcn.0000e5d8",
            "mov sl, r0",
            "mov r0, r8",
            "bl fcn.0000e5d8",
            "ldr r1, [0x0000eb90]",
            "mov r2, 0",
            "ldr r8, [0x0000eb94]",
            "add r4, pc, r4",
            "orr r2, r2, r0",
            "mov r3, sl",
            "strd r2, r3, [sp]",
            "mov r0, r6",
            "add r1, r4, r1",
            "mov r2, 1",
            "bl sym.av_sha_update",
            "mov sl, 0x3f",
            "add r8, r4, r8",
            "b 0xeb34",
            "mov r0, r6",
            "mov r1, r8",
            "mov r2, 1",
            "bl sym.av_sha_update",
            "ldrd r4, r5, [r6, 8]",
            "and r4, r4, sl",
            "and r5, r5, fp",
            "cmp r4, 0x38",
            "bne 0xeb24",
            "cmp r5, 0",
            "bne 0xeb24",
            "mov r0, r6",
            "mov r1, sp",
            "mov r2, 8",
            "add r8, r6, 0x4c",
            "bl sym.av_sha_update",
            "mov r4, r5",
            "b 0xeb7c",
            "add r4, r4, 1",
            "ldr r0, [r8, 4]!",
            "bl fcn.0000e5d8",
            "str r0, [r7], 4",
            "ldrb r3, [r6]",
            "cmp r4, r3",
            "blt 0xeb6c",
            "pop {r2, r3, r4, r5, r6, r7, r8, sl, fp, pc}"
        ]
    },
    "fcn.0000e5d8": {
        "function_address": "0x0000e5d8",
        "instructions": [
            "rev r0, r0",
            "bx lr"
        ]
    },
    "sym.av_sha_update": {
        "function_address": "0x0000ea44",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r6, r0",
            "ldrd r4, r5, [r0, 8]",
            "mov r7, r1",
            "mov r8, r2",
            "add sl, r0, 0x50",
            "and r3, r4, 0x3f",
            "adds r4, r4, r2",
            "adc r5, r5, 0",
            "strd r4, r5, [r0, 8]",
            "mov r4, 0",
            "add r5, r0, 0x10",
            "b 0xeaa8",
            "add r2, r6, r3",
            "ldrb r1, [r7, r4]",
            "add r3, r3, 1",
            "cmp r3, 0x40",
            "strb r1, [r2, 0x10]",
            "bne 0xeaa4",
            "ldr r3, [r6, 0x70]",
            "mov r0, sl",
            "mov r1, r5",
            "blx r3",
            "mov r3, 0",
            "add r4, r4, 1",
            "cmp r4, r8",
            "blo 0xea78",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_fifo_alloc": {
        "function_address": "0x000077ec",
        "instructions": [
            "push {r0, r1, r2, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, 0x18",
            "bl sym.av_mallocz",
            "cmp r0, 0",
            "mov r4, r0",
            "str r0, [sp, 4]",
            "moveq r0, r0",
            "beq 0x784c",
            "mov r0, r5",
            "bl sym.av_malloc",
            "str r0, [r4]",
            "ldr r0, [sp, 4]",
            "ldr r3, [r0]",
            "add r5, r3, r5",
            "str r5, [r0, 0xc]",
            "bl sym.av_fifo_reset",
            "ldr r3, [sp, 4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x7848",
            "add r0, sp, 4",
            "bl sym.av_freep",
            "ldr r0, [sp, 4]",
            "pop {r1, r2, r3, r4, r5, pc}"
        ]
    },
    "sym.av_mallocz": {
        "function_address": "0x0000a4ac",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "bl sym.av_malloc",
            "subs r4, r0, 0",
            "beq 0xa4cc",
            "mov r1, 0",
            "mov r2, r5",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.av_malloc": {
        "function_address": "0x0000a354",
        "instructions": [
            "ldr r3, [0x0000a3c8]",
            "push {r0, r1, r2, r4, r5, lr}",
            "mov r5, 0",
            "ldr r2, [0x0000a3cc]",
            "mov r4, r0",
            "add r3, pc, r3",
            "str r5, [sp, 4]",
            "ldr r3, [r3, r2]",
            "sub r3, r3, 0x20",
            "cmp r0, r3",
            "movhi r0, r5",
            "bhi 0xa3c4",
            "cmp r4, r5",
            "beq 0xa3a4",
            "add r0, sp, 4",
            "mov r1, 0x10",
            "mov r2, r4",
            "bl sym.imp.posix_memalign",
            "cmp r0, r5",
            "strne r5, [sp, 4]",
            "ldr r3, [sp, 4]",
            "cmp r4, 0",
            "cmpeq r3, 0",
            "bne 0xa3c0",
            "mov r0, 1",
            "bl sym.av_malloc",
            "str r0, [sp, 4]",
            "ldr r0, [sp, 4]",
            "pop {r1, r2, r3, r4, r5, pc}"
        ]
    },
    "sym.av_fifo_reset": {
        "function_address": "0x000077d0",
        "instructions": [
            "ldr r3, [r0]",
            "str r3, [r0, 4]",
            "str r3, [r0, 8]",
            "mov r3, 0",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x14]",
            "bx lr"
        ]
    },
    "sym.av_freep": {
        "function_address": "0x0000a490",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl sym.av_free",
            "mov r3, 0",
            "str r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.posix_memalign": {
        "function_address": "0x00003ad4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x254]!"
        ]
    },
    "sym.av_free": {
        "function_address": "0x0000a408",
        "instructions": [
            "b sym.imp.free"
        ]
    },
    "sym.av_adler32_update": {
        "function_address": "0x00003c64",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "mov r6, r2",
            "uxth r5, r0",
            "lsr r1, r0, 0x10",
            "b 0x3cf8",
            "ldrb r2, [r3, -4]",
            "sub r6, r6, 4",
            "add r5, r5, r2",
            "ldrb r2, [r3, -3]",
            "add r1, r5, r1",
            "add r5, r5, r2",
            "ldrb r2, [r3, -2]",
            "add r1, r1, r5",
            "add r5, r5, r2",
            "ldrb r2, [r3, -1]",
            "add r1, r1, r5",
            "add r5, r5, r2",
            "add r1, r1, r5",
            "mvn r2, r1",
            "lsr r2, r2, 0x1f",
            "cmp r6, 4",
            "movls r2, 0",
            "mov r4, r3",
            "cmp r2, 0",
            "add r3, r3, 4",
            "bne 0x3c7c",
            "ldrb r0, [r4], 1",
            "sub r6, r6, 1",
            "add r0, r0, r5",
            "add r7, r0, r1",
            "movw r1, 0xfff1",
            "bl fcn.0000f04c",
            "mov r0, r7",
            "mov r5, r1",
            "movw r1, 0xfff1",
            "bl fcn.0000f04c",
            "cmp r6, 0",
            "movne r3, r4",
            "bne 0x3cb0",
            "orr r0, r5, r1, lsl 16",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000f04c": {
        "function_address": "0x0000f04c",
        "instructions": [
            "cmp r1, 0",
            "beq 0xf040",
            "push {r0, r1, lr}",
            "bl fcn.0000efa4",
            "pop {r1, r2, lr}",
            "mul r3, r2, r0",
            "sub r1, r1, r3",
            "bx lr"
        ]
    },
    "sym.av_crc_init": {
        "function_address": "0x000051e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r3",
            "sub r3, r2, 8",
            "mov r4, r0",
            "cmp r3, 0x18",
            "mov r6, r1",
            "mov r5, r2",
            "ldr r7, [sp, 0x18]",
            "bhi 0x52b8",
            "mov r0, 1",
            "mov r1, 0",
            "bl fcn.0000f184",
            "cmp r1, 0",
            "bgt 0x522c",
            "bne 0x52b8",
            "cmp r0, r8",
            "bls 0x52b8",
            "movw r3, 0x404",
            "cmp r7, 0x1000",
            "cmpne r7, r3",
            "moveq r7, 0",
            "movne r7, 1",
            "bne 0x52c0",
            "rsb r5, r5, 0x20",
            "mov r3, r7",
            "lsl r5, r8, r5",
            "cmp r6, 0",
            "lsleq r2, r3, 0x18",
            "moveq r1, 8",
            "beq 0x5280",
            "mov r2, r3",
            "mov r1, 8",
            "sbfx r0, r2, 0, 1",
            "subs r1, r1, 1",
            "and r0, r0, r8",
            "eor r2, r0, r2, lsr 1",
            "bne 0x5268",
            "b 0x5294",
            "and r0, r5, r2, asr 31",
            "subs r1, r1, 1",
            "eor r2, r0, r2, lsl 1",
            "bne 0x5280",
            "rev r2, r2",
            "add r3, r3, 1",
            "str r2, [r4, r7]",
            "cmp r3, 0x100",
            "add r7, r7, 4",
            "bne 0x5250",
            "mov r3, 1",
            "mov r0, 0",
            "str r3, [r4, 0x400]",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}",
            "mvn r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.0000f184": {
        "function_address": "0x0000f184",
        "instructions": [
            "subs r3, r2, 0x20",
            "rsb ip, r2, 0x20",
            "lslmi r1, r1, r2",
            "lslpl r1, r0, r3",
            "orrmi r1, r1, r0, lsr ip",
            "lsl r0, r0, r2",
            "bx lr"
        ]
    },
    "sym.av_expr_parse_and_eval": {
        "function_address": "0x0000770c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x24",
            "mov r4, r0",
            "mov r5, r3",
            "add r0, sp, 0x20",
            "mov r3, 0",
            "str r3, [r0, -4]!",
            "ldr r3, [sp, 0x34]",
            "str r3, [sp]",
            "ldr r3, [sp, 0x38]",
            "str r3, [sp, 4]",
            "ldr r3, [sp, 0x3c]",
            "str r3, [sp, 8]",
            "ldr r3, [sp, 0x44]",
            "str r3, [sp, 0xc]",
            "ldr r3, [sp, 0x48]",
            "str r3, [sp, 0x10]",
            "ldr r3, [sp, 0x30]",
            "bl sym.av_expr_parse",
            "cmp r0, 0",
            "ldrlt r3, [0x000077a0]",
            "movlt r2, 0",
            "strdlt r2, r3, [r4]",
            "blt 0x7798",
            "ldr r2, [sp, 0x40]",
            "mov r1, r5",
            "ldr r0, [sp, 0x1c]",
            "bl sym.av_expr_eval",
            "strd r0, r1, [r4]",
            "ldr r0, [sp, 0x1c]",
            "bl sym.av_expr_free",
            "ldrd r0, r1, [r4]",
            "bl sym.imp.__isnan",
            "cmp r0, 0",
            "mvnne r0, 0x15",
            "add sp, sp, 0x24",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_expr_parse": {
        "function_address": "0x0000753c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "mov r6, r1",
            "mov r8, r0",
            "mov r1, 0",
            "mov r7, r2",
            "add r0, sp, 0x10",
            "mov r2, 0x34",
            "mov sl, r3",
            "ldr r4, [0x000076b4]",
            "bl sym.imp.memset",
            "mov r3, 0",
            "mov r0, r6",
            "str r3, [sp, 0x44]",
            "add r4, pc, r4",
            "bl sym.imp.strlen",
            "add r0, r0, 1",
            "bl sym.av_malloc",
            "subs r5, r0, 0",
            "movne r3, r6",
            "movne fp, r5",
            "bne 0x75b8",
            "b 0x76a4",
            "str r3, [sp, 0xc]",
            "bl sym.imp.__ctype_b_loc",
            "ldr r1, [r0]",
            "lsl r2, sb, 1",
            "ldr r3, [sp, 0xc]",
            "ldrh r2, [r1, r2]",
            "tst r2, 0x20",
            "strbeq sb, [fp], 1",
            "ldrb sb, [r3], 1",
            "cmp sb, 0",
            "bne 0x7598",
            "ldr r3, [0x000076b8]",
            "add r0, sp, 0x44",
            "strb sb, [fp]",
            "str r7, [sp, 0x20]",
            "add r7, sp, 0x10",
            "add r3, r4, r3",
            "mov r1, r7",
            "str r3, [sp, 0x10]",
            "mov r3, 0x64",
            "str r3, [sp, 0x14]",
            "ldr r3, [sp, 0x70]",
            "str sl, [sp, 0x28]",
            "str r5, [sp, 0x18]",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x78]",
            "str r3, [sp, 0x2c]",
            "ldr r3, [sp, 0x74]",
            "str r3, [sp, 0x30]",
            "ldr r3, [sp, 0x7c]",
            "str r3, [sp, 0x38]",
            "ldr r3, [sp, 0x80]",
            "str r3, [sp, 0x3c]",
            "bl fcn.00006974",
            "subs sl, r0, 0",
            "blt 0x7698",
            "ldr r3, [sp, 0x18]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x7660",
            "ldr r0, [sp, 0x44]",
            "bl sym.av_expr_free",
            "ldr r2, [0x000076bc]",
            "mov r0, r7",
            "mov r1, 0x10",
            "ldr r3, [sp, 0x18]",
            "str r6, [sp]",
            "add r2, r4, r2",
            "bl sym.av_log",
            "b 0x767c",
            "ldr r4, [sp, 0x44]",
            "mov r0, r4",
            "bl fcn.00005ff4",
            "cmp r0, 0",
            "bne 0x7684",
            "mov r0, r4",
            "bl sym.av_expr_free",
            "mvn sl, 0x15",
            "b 0x7698",
            "mov r0, 0x50",
            "bl sym.av_mallocz",
            "ldr r3, [sp, 0x44]",
            "str r0, [r4, 0x1c]",
            "str r3, [r8]",
            "mov r0, r5",
            "bl sym.av_free",
            "b 0x76a8",
            "mvn sl, 0xb",
            "mov r0, sl",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_expr_eval": {
        "function_address": "0x000076c0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x3c",
            "add r5, sp, 4",
            "mov r4, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov r0, r5",
            "mov r1, 0",
            "mov r2, 0x34",
            "bl sym.imp.memset",
            "ldr r3, [r4, 0x1c]",
            "mov r0, r5",
            "mov r1, r4",
            "str r7, [sp, 0x10]",
            "str r6, [sp, 0x28]",
            "str r3, [sp, 0x34]",
            "bl fcn.00006074",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_expr_free": {
        "function_address": "0x00006934",
        "instructions": [
            "push {r0, r1, r4, lr}",
            "str r0, [sp, 4]",
            "cmp r0, 0",
            "beq 0x6970",
            "ldr r0, [r0, 0x14]",
            "add r4, sp, 8",
            "bl sym.av_expr_free",
            "ldr r3, [sp, 4]",
            "ldr r0, [r3, 0x18]",
            "bl sym.av_expr_free",
            "ldr r0, [r4, -4]!",
            "add r0, r0, 0x1c",
            "bl sym.av_freep",
            "mov r0, r4",
            "bl sym.av_freep",
            "pop {r2, r3, r4, pc}"
        ]
    },
    "sym.imp.__isnan": {
        "function_address": "0x00003978",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x33c]!"
        ]
    },
    "fcn.00006974": {
        "function_address": "0x00006974",
        "instructions": [
            "ldr r3, [r1, 4]",
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r4, r1",
            "cmp r3, 0",
            "mvnle r8, 0x15",
            "ble 0x6a34",
            "sub r3, r3, 1",
            "add r0, sp, 4",
            "str r3, [r1, 4]",
            "bl fcn.00007498",
            "subs r8, r0, 0",
            "movge r7, sp",
            "bge 0x6a0c",
            "b 0x6a34",
            "add r3, r3, 1",
            "mov r0, sp",
            "str r3, [r4, 8]",
            "mov r1, r4",
            "bl fcn.00007498",
            "subs r8, r0, 0",
            "bge 0x69d8",
            "mov r0, r5",
            "bl sym.av_expr_free",
            "b 0x6a34",
            "mov r0, 0x13",
            "mov r1, r5",
            "ldr r2, [sp]",
            "bl fcn.00006768",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "bne 0x6a0c",
            "mov r0, r5",
            "mvn r8, 0xb",
            "bl sym.av_expr_free",
            "ldr r0, [sp]",
            "bl sym.av_expr_free",
            "b 0x6a34",
            "ldr r3, [r4, 8]",
            "ldr r5, [sp, 4]",
            "ldrb r2, [r3]",
            "cmp r2, 0x3b",
            "beq 0x69b0",
            "ldr r3, [r4, 4]",
            "mov r8, 0",
            "add r3, r3, 1",
            "str r3, [r4, 4]",
            "str r5, [r6]",
            "mov r0, r8",
            "pop {r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_log": {
        "function_address": "0x000094e4",
        "instructions": [
            "push {r2, r3}",
            "push {r0, r1, r2, lr}",
            "cmp r0, 0",
            "moveq r3, r0",
            "add r2, sp, 0x14",
            "ldrne r3, [r0]",
            "str r2, [sp, 4]",
            "cmp r3, 0",
            "beq 0x952c",
            "ldr ip, [r3, 0xc]",
            "ldr r2, [0x00009544]",
            "cmp ip, r2",
            "ble 0x952c",
            "ldr r3, [r3, 0x10]",
            "cmp r3, 0",
            "cmpne r1, 7",
            "ldrgt r3, [r0, r3]",
            "addgt r1, r1, r3",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [sp, 4]",
            "bl sym.av_vlog",
            "pop {r1, r2, r3, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "fcn.00005ff4": {
        "function_address": "0x00005ff4",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 1",
            "mov r4, r0",
            "cmp r4, 0",
            "beq 0x6060",
            "ldr r2, [r4]",
            "cmp r2, 0x1b",
            "bhi 0x603c",
            "ldr r3, [0x00006070]",
            "lsl r2, r1, r2",
            "and r3, r2, r3",
            "cmp r3, 0",
            "bne 0x6034",
            "tst r2, 3",
            "bne 0x6068",
            "b 0x603c",
            "ldr r4, [r4, 0x14]",
            "b 0x6000",
            "ldr r0, [r4, 0x14]",
            "bl fcn.00005ff4",
            "cmp r0, 0",
            "popeq {r4, pc}",
            "ldr r0, [r4, 0x18]",
            "bl fcn.00005ff4",
            "subs r0, r0, 0",
            "movne r0, 1",
            "pop {r4, pc}",
            "mov r0, r4",
            "pop {r4, pc}",
            "mov r0, 1",
            "pop {r4, pc}"
        ]
    },
    "fcn.00007498": {
        "function_address": "0x00007498",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "add r0, sp, 4",
            "mov r5, r1",
            "bl fcn.000073d8",
            "subs r8, r0, 0",
            "movge r7, sp",
            "bge 0x7510",
            "b 0x7534",
            "mov r0, sp",
            "mov r1, r5",
            "bl fcn.000073d8",
            "subs r8, r0, 0",
            "bge 0x74dc",
            "mov r0, r4",
            "bl sym.av_expr_free",
            "b 0x7534",
            "mov r0, 0x12",
            "mov r1, r4",
            "ldr r2, [sp]",
            "bl fcn.00006768",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "bne 0x7510",
            "mov r0, r4",
            "mvn r8, 0xb",
            "bl sym.av_expr_free",
            "ldr r0, [sp]",
            "bl sym.av_expr_free",
            "b 0x7534",
            "ldr r3, [r5, 8]",
            "ldr r4, [sp, 4]",
            "ldrb r8, [r3]",
            "cmp r8, 0x2b",
            "cmpne r8, 0x2d",
            "movne r8, 0",
            "moveq r8, 1",
            "beq 0x74bc",
            "str r4, [r6]",
            "mov r0, r8",
            "pop {r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "fcn.00006768": {
        "function_address": "0x00006768",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "mov r0, 0x20",
            "mov r6, r1",
            "mov r7, r2",
            "bl sym.av_mallocz",
            "cmp r0, 0",
            "popeq {r3, r4, r5, r6, r7, pc}",
            "ldr r5, [0x000067a4]",
            "str r4, [r0]",
            "mov r4, 0",
            "str r6, [r0, 0x14]",
            "strd r4, r5, [r0, 8]",
            "str r7, [r0, 0x18]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_vlog": {
        "function_address": "0x000094c0",
        "instructions": [
            "ldr ip, [0x000094dc]",
            "push {r3, lr}",
            "ldr lr, [0x000094e0]",
            "add ip, pc, ip",
            "ldr ip, [ip, lr]",
            "blx ip",
            "pop {r3, pc}"
        ]
    },
    "fcn.00006074": {
        "function_address": "0x00006074",
        "instructions": [
            "ldr r3, [r1]",
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r0",
            "mov r6, r1",
            "cmp r3, 0x1f",
            "addls pc, pc, r3, lsl 2",
            "b 0x6468",
            "b 0x611c",
            "b 0x6124",
            "b 0x6140",
            "b 0x6158",
            "b 0x6180",
            "b 0x61d0",
            "b 0x6208",
            "b 0x6248",
            "b 0x6280",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6468",
            "b 0x6110",
            "b 0x6294",
            "b 0x62a8",
            "b 0x62bc",
            "b 0x62d0",
            "b 0x62e4",
            "b 0x63b0",
            "b 0x6468",
            "b 0x6468",
            "b 0x6310",
            "b 0x635c",
            "mov r4, 0",
            "ldr r5, [0x00006744]",
            "b 0x6444",
            "ldrd r4, r5, [r1, 8]",
            "b 0x6734",
            "ldr r3, [r1, 0x10]",
            "ldr r2, [r0, 0xc]",
            "ldrd r0, r1, [r1, 8]",
            "lsl r3, r3, 3",
            "add r3, r3, r2",
            "ldrd r2, r3, [r3]",
            "b 0x671c",
            "ldr r8, [r1, 0x10]",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "blx r8",
            "b 0x633c",
            "ldr r5, [r0, 0x24]",
            "ldrd r8, sb, [r1, 8]",
            "ldr r4, [r1, 0x10]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r5",
            "blx r4",
            "b 0x639c",
            "ldr r5, [r0, 0x24]",
            "ldrd sl, fp, [r1, 8]",
            "ldr r4, [r1, 0x10]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r8, r0",
            "mov sb, r1",
            "mov r0, r7",
            "ldr r1, [r6, 0x18]",
            "bl fcn.00006074",
            "mov r2, r8",
            "strd r0, r1, [sp]",
            "mov r3, sb",
            "mov r0, r5",
            "blx r4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, sl",
            "mov r1, fp",
            "b 0x671c",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r2, 0",
            "ldr r3, [0x00006748]",
            "bl fcn.0000f558",
            "bl sym.imp.exp",
            "mov r2, 0",
            "ldr r3, [0x0000674c]",
            "bl fcn.0000f1ac",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, 0",
            "ldr r1, [0x0000674c]",
            "b 0x6240",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov ip, r1",
            "add r3, r1, 0x80000000",
            "mov r2, r0",
            "mov r1, r3",
            "mov r3, ip",
            "bl fcn.0000f558",
            "mov r2, 0",
            "ldr r3, [0x00006750]",
            "bl fcn.0000f558",
            "bl sym.imp.exp",
            "ldr r2, [0x00006754]",
            "ldr r3, [0x00006758]",
            "bl fcn.0000f7c4",
            "b 0x6720",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "ldr r8, [r0, 0x30]",
            "bl fcn.00006074",
            "bl fcn.0000faf4",
            "cmp r0, 9",
            "movlt r3, r0",
            "movge r3, 9",
            "mov r1, r5",
            "bic r3, r3, r3, asr 31",
            "mov r0, r4",
            "lsl r3, r3, 3",
            "ldrd r2, r3, [r3, r8]",
            "b 0x671c",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl sym.imp.__isnan",
            "b 0x62fc",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl sym.imp.floor",
            "b 0x633c",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl sym.imp.ceil",
            "b 0x633c",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl sym.imp.trunc",
            "b 0x633c",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl sym.imp.sqrt",
            "b 0x633c",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "movne r2, 0",
            "ldrne r3, [0x0000674c]",
            "beq 0x6348",
            "b 0x6350",
            "ldrd r4, r5, [r1, 8]",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "bne 0x6348",
            "mov r0, r7",
            "ldr r1, [r6, 0x18]",
            "bl fcn.00006074",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x6350",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, r4",
            "mov r1, r5",
            "b 0x671c",
            "ldrd r8, sb, [r1, 8]",
            "mov r4, 1",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "movne r4, 0",
            "tst r4, 0xff",
            "movne r2, 0",
            "movne r3, 0",
            "bne 0x63a4",
            "mov r0, r7",
            "ldr r1, [r6, 0x18]",
            "bl fcn.00006074",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "b 0x671c",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "bl fcn.0000faf4",
            "cmp r0, 9",
            "movlt r8, r0",
            "movge r8, 9",
            "ldr r7, [r7, 0x30]",
            "bic r8, r8, r8, asr 31",
            "lsl r8, r8, 3",
            "ldrd r4, r5, [r7, r8]",
            "mov r1, r5",
            "mov r0, r4",
            "bl sym.imp.__isnan",
            "cmp r0, 0",
            "movne r0, 0",
            "movne r1, 0",
            "bne 0x6400",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.__aeabi_d2ulz",
            "ldr ip, [0x0000675c]",
            "umull r2, r3, r0, ip",
            "ldr r0, [0x00006760]",
            "mla r3, ip, r1, r3",
            "adds r0, r0, r2",
            "mov r1, 0",
            "adc r1, r1, r3",
            "bl fcn.0000f4e4",
            "mov r2, 0",
            "strd r0, r1, [r7, r8]",
            "ldr r3, [0x00006764]",
            "b 0x6658",
            "mov r0, r7",
            "ldr r1, [r6, 0x18]",
            "bl fcn.00006074",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, r7",
            "ldr r1, [r6, 0x14]",
            "bl fcn.00006074",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "beq 0x6430",
            "b 0x6734",
            "ldr r1, [r1, 0x14]",
            "bl fcn.00006074",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, r7",
            "ldr r1, [r6, 0x18]",
            "bl fcn.00006074",
            "ldr r3, [r6]",
            "mov r8, r0",
            "mov sb, r1",
            "sub r3, r3, 9",
            "cmp r3, 0x14",
            "addls pc, pc, r3, lsl 2",
            "b 0x672c",
            "b 0x64f4",
            "b 0x656c",
            "b 0x6588",
            "b 0x65c0",
            "b 0x65dc",
            "b 0x65f8",
            "b 0x6630",
            "b 0x6648",
            "b 0x6660",
            "b 0x6678",
            "b 0x6718",
            "b 0x6690",
            "b 0x672c",
            "b 0x672c",
            "b 0x672c",
            "b 0x672c",
            "b 0x672c",
            "b 0x672c",
            "b 0x672c",
            "b 0x66d0",
            "b 0x6530",
            "mov r2, r8",
            "mov r3, sb",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "bl sym.imp.floor",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f1a8",
            "b 0x6718",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.__aeabi_d2lz",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl sym.imp.__aeabi_d2lz",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.av_gcd",
            "bl fcn.0000f4f8",
            "b 0x6718",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "ldrd r6, r7, [r6, 8]",
            "bl fcn.0000fae0",
            "b 0x65a0",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "ldrd r6, r7, [r6, 8]",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "mov r1, r7",
            "moveq r4, r8",
            "moveq r5, sb",
            "mov r0, r6",
            "mov r2, r4",
            "mov r3, r5",
            "b 0x671c",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "ldrd r6, r7, [r6, 8]",
            "bl fcn.0000fa90",
            "b 0x6610",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "ldrd r6, r7, [r6, 8]",
            "bl fcn.0000fae0",
            "b 0x6610",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "ldrd r6, r7, [r6, 8]",
            "bl fcn.0000facc",
            "cmp r0, 0",
            "mov r1, r7",
            "movne r2, 0",
            "ldrne r3, [0x0000674c]",
            "moveq r2, 0",
            "moveq r3, 0",
            "mov r0, r6",
            "b 0x671c",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "bl sym.imp.pow",
            "b 0x6718",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000f558",
            "b 0x6718",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000f7c4",
            "b 0x6718",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000f1ac",
            "b 0x6718",
            "mov r1, r5",
            "mov r0, r4",
            "bl fcn.0000faf4",
            "cmp r0, 9",
            "movlt r3, r0",
            "movge r3, 9",
            "ldrd sl, fp, [r6, 8]",
            "ldr r2, [r7, 0x30]",
            "bic r3, r3, r3, asr 31",
            "lsl r3, r3, 3",
            "mov r0, sl",
            "strd r8, sb, [r2, r3]",
            "mov r1, fp",
            "mov r2, r8",
            "mov r3, sb",
            "b 0x671c",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f558",
            "mov r2, r8",
            "mov r4, r0",
            "mov r5, r1",
            "mov r3, sb",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f1ac",
            "bl sym.imp.sqrt",
            "ldrd r2, r3, [r6, 8]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "b 0x6734",
            "ldr r5, [0x00006744]",
            "mov r4, 0",
            "mov r0, r4",
            "mov r1, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.exp": {
        "function_address": "0x00003a50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2ac]!"
        ]
    },
    "fcn.0000f1ac": {
        "function_address": "0x0000f1ac",
        "instructions": [
            "push {r4, r5, lr}",
            "lsl r4, r1, 1",
            "lsl r5, r3, 1",
            "teq r4, r5",
            "teqeq r0, r2",
            "orrsne ip, r4, r0",
            "orrsne ip, r5, r2",
            "mvnsne ip, r4, asr 21",
            "mvnsne ip, r5, asr 21",
            "beq 0xf3bc",
            "lsr r4, r4, 0x15",
            "rsbs r5, r4, r5, lsr 21",
            "rsblt r5, r5, 0",
            "ble 0xf200",
            "add r4, r4, r5",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "eor r0, r2, r0",
            "eor r1, r3, r1",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "cmp r5, 0x36",
            "pophi {r4, r5, pc}",
            "tst r1, 0x80000000",
            "lsl r1, r1, 0xc",
            "mov ip, 0x100000",
            "orr r1, ip, r1, lsr 12",
            "beq 0xf224",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "tst r3, 0x80000000",
            "lsl r3, r3, 0xc",
            "orr r3, ip, r3, lsr 12",
            "beq 0xf23c",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "teq r4, r5",
            "beq 0xf3a4",
            "sub r4, r4, 1",
            "rsbs lr, r5, 0x20",
            "blt 0xf268",
            "lsl ip, r2, lr",
            "adds r0, r0, r2, lsr r5",
            "adc r1, r1, 0",
            "adds r0, r0, r3, lsl lr",
            "adcs r1, r1, r3, asr r5",
            "b 0xf284",
            "sub r5, r5, 0x20",
            "add lr, lr, 0x20",
            "cmp r2, 1",
            "lsl ip, r3, lr",
            "orrhs ip, ip, 2",
            "adds r0, r0, r3, asr r5",
            "adcs r1, r1, r3, asr 31",
            "and r5, r1, 0x80000000",
            "bpl 0xf298",
            "rsbs ip, ip, 0",
            "rscs r0, r0, 0",
            "rsc r1, r1, 0",
            "cmp r1, 0x100000",
            "blo 0xf2dc",
            "cmp r1, 0x200000",
            "blo 0xf2c4",
            "lsrs r1, r1, 1",
            "rrxs r0, r0",
            "rrx ip, ip",
            "add r4, r4, 1",
            "lsl r2, r4, 0x15",
            "cmn r2, 0x400000",
            "bhs 0xf41c",
            "cmp ip, 0x80000000",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "orr r1, r1, r5",
            "pop {r4, r5, pc}",
            "lsls ip, ip, 1",
            "adcs r0, r0, r0",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "sub r4, r4, 1",
            "bne 0xf2c4",
            "teq r1, 0",
            "moveq r1, r0",
            "moveq r0, 0",
            "clz r3, r1",
            "addeq r3, r3, 0x20",
            "sub r3, r3, 0xb",
            "subs r2, r3, 0x20",
            "bge 0xf334",
            "adds r2, r2, 0xc",
            "ble 0xf330",
            "add ip, r2, 0x14",
            "rsb r2, r2, 0xc",
            "lsl r0, r1, ip",
            "lsr r1, r1, r2",
            "b 0xf344",
            "add r2, r2, 0x14",
            "rsble ip, r2, 0x20",
            "lsl r1, r1, r2",
            "orrle r1, r1, r0, lsr ip",
            "lslle r0, r0, r2",
            "subs r4, r4, r3",
            "addge r1, r1, r4, lsl 20",
            "orrge r1, r1, r5",
            "popge {r4, r5, pc}",
            "mvn r4, r4",
            "subs r4, r4, 0x1f",
            "bge 0xf398",
            "adds r4, r4, 0xc",
            "bgt 0xf380",
            "add r4, r4, 0x14",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r2",
            "orr r1, r5, r1, lsr r4",
            "pop {r4, r5, pc}",
            "rsb r4, r4, 0xc",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r2",
            "orr r0, r0, r1, lsl r4",
            "mov r1, r5",
            "pop {r4, r5, pc}",
            "lsr r0, r1, r4",
            "mov r1, r5",
            "pop {r4, r5, pc}",
            "teq r4, 0",
            "eor r3, r3, 0x100000",
            "eoreq r1, r1, 0x100000",
            "addeq r4, r4, 1",
            "subne r5, r5, 1",
            "b 0xf244",
            "mvns ip, r4, asr 21",
            "mvnsne ip, r5, asr 21",
            "beq 0xf42c",
            "teq r4, r5",
            "teqeq r0, r2",
            "beq 0xf3e4",
            "orrs ip, r4, r0",
            "moveq r1, r3",
            "moveq r0, r2",
            "pop {r4, r5, pc}",
            "teq r1, r3",
            "movne r1, 0",
            "movne r0, 0",
            "popne {r4, r5, pc}",
            "lsrs ip, r4, 0x15",
            "bne 0xf40c",
            "lsls r0, r0, 1",
            "adcs r1, r1, r1",
            "orrhs r1, r1, 0x80000000",
            "pop {r4, r5, pc}",
            "adds r4, r4, 0x400000",
            "addlo r1, r1, 0x100000",
            "poplo {r4, r5, pc}",
            "and r5, r1, 0x80000000",
            "orr r1, r5, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, pc}",
            "mvns ip, r4, asr 21",
            "movne r1, r3",
            "movne r0, r2",
            "mvnseq ip, r5, asr 21",
            "movne r3, r1",
            "movne r2, r0",
            "orrs r4, r0, r1, lsl 12",
            "orrseq r5, r2, r3, lsl 12",
            "teqeq r1, r3",
            "orrne r1, r1, 0x80000",
            "pop {r4, r5, pc}"
        ]
    },
    "fcn.0000faf4": {
        "function_address": "0x0000faf4",
        "instructions": [
            "lsl r2, r1, 1",
            "adds r2, r2, 0x200000",
            "bhs 0xfb34",
            "bpl 0xfb2c",
            "mvn r3, 0x3e0",
            "subs r2, r3, r2, asr 21",
            "bls 0xfb3c",
            "lsl r3, r1, 0xb",
            "orr r3, r3, 0x80000000",
            "orr r3, r3, r0, lsr 21",
            "tst r1, 0x80000000",
            "lsr r0, r3, r2",
            "rsbne r0, r0, 0",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "orrs r0, r0, r1, lsl 12",
            "bne 0xfb48",
            "ands r0, r1, 0x80000000",
            "mvneq r0, 0x80000000",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.imp.floor": {
        "function_address": "0x00003888",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3dc]!"
        ]
    },
    "sym.imp.ceil": {
        "function_address": "0x000038ac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3c4]!"
        ]
    },
    "sym.imp.trunc": {
        "function_address": "0x000038d0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3ac]!"
        ]
    },
    "sym.imp.sqrt": {
        "function_address": "0x0000384c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x404]!"
        ]
    },
    "fcn.0000fa90": {
        "function_address": "0x0000fa90",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000fa7c",
            "moveq r0, 1",
            "movne r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.imp.__aeabi_d2ulz": {
        "function_address": "0x0000396c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x344]!"
        ]
    },
    "fcn.0000f4e4": {
        "function_address": "0x0000f4e4",
        "instructions": [
            "orrs r2, r0, r1",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r5, 0",
            "b 0xf514"
        ]
    },
    "fcn.0000f1a8": {
        "function_address": "0x0000f1a8",
        "instructions": [
            "eor r3, r3, 0x80000000"
        ]
    },
    "sym.imp.__aeabi_d2lz": {
        "function_address": "0x000039c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x30c]!"
        ]
    },
    "fcn.0000fae0": {
        "function_address": "0x0000fae0",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000fa60",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "fcn.0000faa4": {
        "function_address": "0x0000faa4",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000fa7c",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "fcn.0000facc": {
        "function_address": "0x0000facc",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000fa60",
            "movls r0, 1",
            "movhi r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.imp.pow": {
        "function_address": "0x00003a68",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x29c]!"
        ]
    },
    "sym.av_strlcatf": {
        "function_address": "0x00004b68",
        "instructions": [
            "push {r2, r3}",
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r6, r1",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "add r3, sp, 0x1c",
            "mov r4, r0",
            "cmp r6, r4",
            "str r3, [sp, 4]",
            "add r0, r5, r0",
            "rsbhi r1, r4, r6",
            "movls r1, 0",
            "ldr r2, [sp, 0x18]",
            "ldr r3, [sp, 4]",
            "bl sym.imp.vsnprintf",
            "add r0, r0, r4",
            "pop {r2, r3, r4, r5, r6, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.imp.vsnprintf": {
        "function_address": "0x00003a44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2b4]!"
        ]
    },
    "sym.av_get_token": {
        "function_address": "0x00004c7c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sb, r0",
            "ldr r0, [r0]",
            "mov fp, r1",
            "ldr r6, [0x00004d8c]",
            "bl sym.imp.strlen",
            "add r0, r0, 1",
            "bl sym.av_malloc",
            "subs sl, r0, 0",
            "add r6, pc, r6",
            "ldr r4, [sb]",
            "beq 0x4d84",
            "ldr r1, [0x00004d90]",
            "mov r0, r4",
            "mov r7, sl",
            "mov r5, sl",
            "add r1, r6, r1",
            "bl sym.imp.strspn",
            "add r4, r4, r0",
            "b 0x4d34",
            "cmp r8, 0x5c",
            "add r4, r4, 1",
            "bne 0x4cf4",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "strbne r3, [r5], 1",
            "addne r4, r4, 1",
            "movne r7, r5",
            "bne 0x4d34",
            "b 0x4d30",
            "cmp r8, 0x27",
            "moveq r2, r4",
            "bne 0x4d30",
            "b 0x4d08",
            "strb r3, [r5], 1",
            "ldrb r3, [r2]",
            "mov r4, r2",
            "add r2, r2, 1",
            "cmp r3, 0x27",
            "cmpne r3, 0",
            "bne 0x4d04",
            "cmp r3, 0",
            "movne r4, r2",
            "movne r7, r5",
            "b 0x4d34",
            "strb r8, [r5], 1",
            "ldrb r8, [r4]",
            "cmp r8, 0",
            "beq 0x4d54",
            "mov r0, r4",
            "mov r1, fp",
            "bl sym.imp.strspn",
            "cmp r0, 0",
            "beq 0x4ccc",
            "ldr r3, [0x00004d90]",
            "mov r8, 0",
            "add r6, r6, r3",
            "strb r8, [r5], -1",
            "cmp r5, r7",
            "blo 0x4d80",
            "mov r0, r5",
            "mov r1, r6",
            "bl sym.imp.strspn",
            "cmp r0, 0",
            "bne 0x4d60",
            "str r4, [sb]",
            "mov r0, sl",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.strspn": {
        "function_address": "0x000038b8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3bc]!"
        ]
    },
    "sym.av_strerror": {
        "function_address": "0x00005d40",
        "instructions": [
            "ldr r3, [0x00005f00]",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "ldr r5, [0x00005f04]",
            "mov r8, r1",
            "cmp r0, r3",
            "mov r7, r2",
            "add r5, pc, r5",
            "beq 0x5e64",
            "bgt 0x5dc8",
            "ldr r3, [0x00005f08]",
            "cmp r0, r3",
            "beq 0x5e94",
            "bgt 0x5da0",
            "ldr r3, [0x00005f0c]",
            "cmp r0, r3",
            "beq 0x5e7c",
            "ldr r3, [0x00005f10]",
            "cmp r0, r3",
            "beq 0x5e5c",
            "ldr r3, [0x00005f14]",
            "cmp r0, r3",
            "bne 0x5ea4",
            "b 0x5e74",
            "ldr r3, [0x00005f18]",
            "cmp r0, r3",
            "beq 0x5e9c",
            "ldr r3, [0x00005f1c]",
            "cmp r0, r3",
            "beq 0x5e44",
            "ldr r3, [0x00005f20]",
            "cmp r0, r3",
            "bne 0x5ea4",
            "b 0x5e8c",
            "ldr r3, [0x00005f24]",
            "cmp r0, r3",
            "beq 0x5e3c",
            "bgt 0x5e00",
            "ldr r3, [0x00005f28]",
            "cmp r0, r3",
            "beq 0x5e84",
            "ldr r3, [0x00005f2c]",
            "cmp r0, r3",
            "beq 0x5e4c",
            "ldr r3, [0x00005f30]",
            "cmp r0, r3",
            "bne 0x5ea4",
            "b 0x5edc",
            "ldr r3, [0x00005f34]",
            "cmp r0, r3",
            "beq 0x5ee4",
            "bgt 0x5e20",
            "ldr r3, [0x00005f38]",
            "cmp r0, r3",
            "bne 0x5ea4",
            "b 0x5e6c",
            "ldr r3, [0x00005f3c]",
            "cmp r0, r3",
            "beq 0x5ee4",
            "ldr r3, [0x00005f40]",
            "cmp r0, r3",
            "bne 0x5ea4",
            "b 0x5e54",
            "ldr r1, [0x00005f44]",
            "b 0x5ee8",
            "ldr r1, [0x00005f48]",
            "b 0x5ee8",
            "ldr r1, [0x00005f4c]",
            "b 0x5ee8",
            "ldr r1, [0x00005f50]",
            "b 0x5ee8",
            "ldr r1, [0x00005f54]",
            "b 0x5ee8",
            "ldr r1, [0x00005f58]",
            "b 0x5ee8",
            "ldr r1, [0x00005f5c]",
            "b 0x5ee8",
            "ldr r1, [0x00005f60]",
            "b 0x5ee8",
            "ldr r1, [0x00005f64]",
            "b 0x5ee8",
            "ldr r1, [0x00005f68]",
            "b 0x5ee8",
            "ldr r1, [0x00005f6c]",
            "b 0x5ee8",
            "ldr r1, [0x00005f70]",
            "b 0x5ee8",
            "ldr r1, [0x00005f74]",
            "b 0x5ee8",
            "rsb r0, r6, 0",
            "mov r1, r8",
            "mov r2, r7",
            "bl sym.imp.__xpg_strerror_r",
            "subs r4, r0, 0",
            "bge 0x5ed4",
            "ldr r2, [0x00005f78]",
            "mov r0, r8",
            "mov r1, r7",
            "mov r3, r6",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldr r1, [0x00005f7c]",
            "b 0x5ee8",
            "ldr r1, [0x00005f80]",
            "add r1, r5, r1",
            "mov r0, r8",
            "mov r2, r7",
            "mov r4, 0",
            "bl sym.av_strlcpy",
            "b 0x5ed4"
        ]
    },
    "sym.imp.__xpg_strerror_r": {
        "function_address": "0x00003960",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x34c]!"
        ]
    },
    "sym.av_strlcpy": {
        "function_address": "0x00004acc",
        "instructions": [
            "push {r4, lr}",
            "mov r3, r0",
            "mov r4, 0",
            "b 0x4ae0",
            "strb ip, [r3], 1",
            "add r4, r4, 1",
            "mov r0, r1",
            "cmp r4, r2",
            "bhs 0x4b00",
            "ldrb ip, [r1], 1",
            "cmp ip, 0",
            "bne 0x4adc",
            "b 0x4b04",
            "bhi 0x4b0c",
            "mov r2, 0",
            "strb r2, [r3]",
            "bl sym.imp.strlen",
            "add r0, r0, r4",
            "sub r0, r0, 1",
            "pop {r4, pc}"
        ]
    },
    "sym.av_d2q": {
        "function_address": "0x0000dda4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r1, r3",
            "mov r4, r0",
            "sub sp, sp, 0x18",
            "mov r0, r2",
            "mov r5, r3",
            "mov r6, r2",
            "bl sym.imp.__isnan",
            "subs r7, r0, 0",
            "movne r3, 0",
            "strne r3, [r4]",
            "strne r3, [r4, 4]",
            "bne 0xdeb8",
            "mov r0, r6",
            "mov r1, r5",
            "bl sym.imp.__isinf",
            "cmp r0, 0",
            "beq 0xde18",
            "mov r3, 0",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, 0",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "str r7, [r4, 4]",
            "mvnne r3, 0",
            "moveq r3, 1",
            "str r3, [r4]",
            "b 0xdeb8",
            "ldr r2, [0x0000dec4]",
            "mov r0, r6",
            "ldr r3, [0x0000dec8]",
            "bic r1, r5, 0x80000000",
            "bl fcn.0000f1ac",
            "bl sym.imp.log",
            "ldr r3, [0x0000decc]",
            "add r7, sp, 0x10",
            "ldr r2, [0x0000ded0]",
            "add sb, r7, 4",
            "bl fcn.0000f7c4",
            "bl fcn.0000faf4",
            "bic r2, r0, r0, asr 31",
            "mov r1, 0",
            "rsb r2, r2, 0x3d",
            "mov r0, 1",
            "bl fcn.0000f184",
            "mov r8, r0",
            "mov sl, r1",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.0000f558",
            "mov r2, 0",
            "ldr r3, [0x0000ded4]",
            "bl fcn.0000f1ac",
            "bl sym.imp.__aeabi_d2lz",
            "mov r2, r0",
            "ldr r0, [sp, 0x38]",
            "mov r3, r1",
            "stm sp, {r8, sl}",
            "asr r1, r0, 0x1f",
            "strd r0, r1, [sp, 8]",
            "mov r1, sb",
            "mov r0, r7",
            "bl sym.av_reduce",
            "ldm r7, {r0, r1}",
            "stm r4, {r0, r1}",
            "mov r0, r4",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.imp.__isinf": {
        "function_address": "0x00003abc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x264]!"
        ]
    },
    "sym.imp.log": {
        "function_address": "0x0000399c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x324]!"
        ]
    },
    "sym.av_parse_color": {
        "function_address": "0x0000ca94",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sb, r3",
            "ldrb r3, [r1]",
            "sub sp, sp, 0x90",
            "mov r5, r0",
            "mov r7, r1",
            "ldr r4, [0x0000cd38]",
            "mov r6, r2",
            "cmp r3, 0x23",
            "moveq r8, 1",
            "add r4, pc, r4",
            "beq 0xcae4",
            "mov r0, r1",
            "ldr r1, [0x0000cd3c]",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "moveq r8, 2",
            "movne r8, 0",
            "cmp r6, 0",
            "bge 0xcaf8",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "mov r6, r0",
            "rsb r3, r8, 1",
            "add sl, sp, 8",
            "add r6, r3, r6",
            "mov r0, sl",
            "cmp r6, 0x80",
            "movlo r2, r6",
            "movhs r2, 0x80",
            "add r1, r7, r8",
            "bl sym.av_strlcpy",
            "mov r1, 0x40",
            "mov r0, sl",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "add r6, sp, 8",
            "movne r3, 0",
            "str r0, [sp, 0x8c]",
            "strbne r3, [r0], 1",
            "strne r0, [sp, 0x8c]",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "ldr r1, [0x0000cd40]",
            "mvn r3, 0",
            "mov sl, r0",
            "strb r3, [r5, 3]",
            "mov r0, r6",
            "add r1, r4, r1",
            "bl sym.av_strcasecmp",
            "cmp r0, 0",
            "beq 0xcb84",
            "ldr r1, [0x0000cd44]",
            "mov r0, r6",
            "add r1, r4, r1",
            "bl sym.av_strcasecmp",
            "cmp r0, 0",
            "bne 0xcba8",
            "bl sym.av_get_random_seed",
            "asr r3, r0, 0x18",
            "strb r0, [r5, 3]",
            "strb r3, [r5]",
            "asr r3, r0, 0x10",
            "strb r3, [r5, 1]",
            "asr r3, r0, 8",
            "strb r3, [r5, 2]",
            "b 0xcc8c",
            "cmp r8, 0",
            "bne 0xcbc8",
            "ldr r1, [0x0000cd48]",
            "mov r0, r6",
            "add r1, r4, r1",
            "bl sym.imp.strspn",
            "cmp r0, sl",
            "bne 0xcc30",
            "add r0, sp, 8",
            "add r1, sp, 0x88",
            "mov r2, 0x10",
            "bl sym.imp.strtoul",
            "ldr r3, [sp, 0x88]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0xcbf4",
            "cmp sl, 8",
            "cmpne sl, 6",
            "beq 0xcc0c",
            "ldr r2, [0x0000cd4c]",
            "mov r0, sb",
            "mov r1, 0x10",
            "add r3, sp, 8",
            "add r2, r4, r2",
            "b 0xcc74",
            "cmp sl, 8",
            "strbeq r0, [r5, 3]",
            "lsreq r0, r0, 8",
            "lsr r3, r0, 0x10",
            "strb r0, [r5, 2]",
            "strb r3, [r5]",
            "lsr r3, r0, 8",
            "strb r3, [r5, 1]",
            "b 0xcc8c",
            "ldr r1, [0x0000cd50]",
            "mov r0, r6",
            "ldr r3, [0x0000cd54]",
            "mov r2, 0x8c",
            "add r1, r4, r1",
            "add r3, r4, r3",
            "add r1, r1, 0x21c",
            "str r3, [sp]",
            "mov r3, 8",
            "bl sym.imp.bsearch",
            "subs r1, r0, 0",
            "bne 0xcc7c",
            "ldr r2, [0x0000cd58]",
            "mov r0, sb",
            "mov r1, 0x10",
            "mov r3, r6",
            "add r2, r4, r2",
            "bl sym.av_log",
            "b 0xcd2c",
            "mov r0, r5",
            "add r1, r1, 4",
            "mov r2, 3",
            "bl sym.imp.memcpy",
            "ldr r6, [sp, 0x8c]",
            "cmp r6, 0",
            "moveq r0, r6",
            "beq 0xcd30",
            "ldr r1, [0x0000cd3c]",
            "mov r0, r6",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "add r1, sp, 0x8c",
            "bne 0xcccc",
            "mov r0, r6",
            "mov r2, 0x10",
            "bl sym.imp.strtoul",
            "b 0xcce4",
            "mov r0, r6",
            "bl sym.imp.strtod",
            "mov r2, 0",
            "ldr r3, [0x0000cd5c]",
            "bl fcn.0000f558",
            "bl fcn.0000fb50",
            "ldr r3, [sp, 0x8c]",
            "cmp r3, r6",
            "beq 0xcd10",
            "ldrb r3, [r3]",
            "cmp r0, 0xff",
            "cmpls r3, 0",
            "moveq r3, 0",
            "movne r3, 1",
            "strbeq r0, [r5, 3]",
            "moveq r0, r3",
            "beq 0xcd30",
            "ldr r2, [0x0000cd60]",
            "mov r0, sb",
            "mov r1, 0x10",
            "mov r3, r6",
            "str r7, [sp]",
            "add r2, r4, r2",
            "bl sym.av_log",
            "mvn r0, 0x15",
            "add sp, sp, 0x90",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x000038f4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x394]!"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00003a98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x27c]!"
        ]
    },
    "sym.av_strcasecmp": {
        "function_address": "0x00004e10",
        "instructions": [
            "mov r3, 0",
            "push {r4, lr}",
            "ldrb r2, [r0, r3]",
            "sub ip, r2, 0x41",
            "cmp ip, 0x19",
            "eorls r2, r2, 0x20",
            "uxtb ip, r2",
            "ldrb r2, [r1, r3]",
            "add r3, r3, 1",
            "sub r4, r2, 0x41",
            "cmp r4, 0x19",
            "eorls r2, r2, 0x20",
            "uxtb r2, r2",
            "cmp ip, r2",
            "movne r4, 0",
            "moveq r4, 1",
            "cmp ip, 0",
            "moveq r4, 0",
            "cmp r4, 0",
            "bne 0x4e18",
            "rsb r0, r2, ip",
            "pop {r4, pc}"
        ]
    },
    "sym.av_get_random_seed": {
        "function_address": "0x0000d724",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r5, sp, 4",
            "ldr r4, [0x0000d850]",
            "mov r0, r5",
            "ldr r1, [0x0000d854]",
            "add r4, pc, r4",
            "add r1, r4, r1",
            "bl fcn.0000d6e0",
            "cmp r0, 4",
            "beq 0xd780",
            "ldr r1, [0x0000d858]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl fcn.0000d6e0",
            "cmp r0, 4",
            "beq 0xd780",
            "mov r4, 0",
            "mov r8, 0",
            "mov sb, 0",
            "mov r5, r4",
            "ldr r7, [0x0000d85c]",
            "mov sl, r4",
            "b 0xd788",
            "ldr r0, [sp, 4]",
            "b 0xd84c",
            "bl sym.imp.clock",
            "cmp sl, 0",
            "mov r6, r0",
            "beq 0xd7cc",
            "rsb r0, sl, r0",
            "bl fcn.0000f47c",
            "mov sl, r0",
            "bic fp, r1, 0x80000000",
            "mov r0, r7",
            "bl fcn.0000f4a4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000fae0",
            "cmp r0, 0",
            "bne 0xd7d4",
            "cmn r6, 1",
            "bne 0xd830",
            "movw r3, 0x270f",
            "cmp r5, r3",
            "bhi 0xd810",
            "mov r0, r7",
            "ldr r1, [0x0000d860]",
            "bl fcn.0000ff40",
            "cmp r0, 0",
            "beq 0xd810",
            "mov r0, r7",
            "mov r1, r7",
            "mov r6, 0",
            "bl fcn.0000fc50",
            "mov r5, r6",
            "mov r7, r0",
            "b 0xd830",
            "adds r2, r8, r8",
            "mov r8, 1",
            "and r8, r8, r5",
            "adc r3, sb, sb",
            "mov sb, 0",
            "adds r8, r8, r2",
            "adc sb, sb, r3",
            "add r4, r4, 1",
            "cmp r4, 0x3f",
            "addle r5, r5, 1",
            "movle sl, r6",
            "ble 0xd788",
            "mrc p15, 0, r3, c9, c13, 0",
            "eor r8, r8, r3",
            "add r0, sb, r8",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.strtoul": {
        "function_address": "0x000038e8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x39c]!"
        ]
    },
    "sym.imp.bsearch": {
        "function_address": "0x00003990",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x32c]!"
        ]
    },
    "sym.imp.strtod": {
        "function_address": "0x00003924",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x374]!"
        ]
    },
    "fcn.0000fb50": {
        "function_address": "0x0000fb50",
        "instructions": [
            "lsls r2, r1, 1",
            "bhs 0xfb84",
            "adds r2, r2, 0x200000",
            "bhs 0xfb8c",
            "bpl 0xfb84",
            "mvn r3, 0x3e0",
            "subs r2, r3, r2, asr 21",
            "bmi 0xfb94",
            "lsl r3, r1, 0xb",
            "orr r3, r3, 0x80000000",
            "orr r3, r3, r0, lsr 21",
            "lsr r0, r3, r2",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "orrs r0, r0, r1, lsl 12",
            "bne 0xfb9c",
            "mvn r0, 0",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.av_opt_get": {
        "function_address": "0x0000bb74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x98",
            "str r2, [sp]",
            "mov r7, r3",
            "mov r2, 0",
            "add r3, sp, 0x94",
            "str r3, [sp, 4]",
            "mov r3, r2",
            "ldr r6, [0x0000bde4]",
            "bl sym.av_opt_find2",
            "cmp r0, 0",
            "add r6, pc, r6",
            "beq 0xbdd0",
            "ldr sl, [sp, 0x94]",
            "cmp sl, 0",
            "beq 0xbdd0",
            "ldr r8, [r0, 8]",
            "cmp r8, 0",
            "bgt 0xbbcc",
            "ldr r3, [r0, 0xc]",
            "cmp r3, 0x80",
            "bne 0xbdd0",
            "mov sb, 0",
            "add r3, sl, r8",
            "strb sb, [sp, 0x14]",
            "ldr r1, [r0, 0xc]",
            "cmp r1, 4",
            "beq 0xbc6c",
            "bhi 0xbc08",
            "cmp r1, 1",
            "beq 0xbc38",
            "blo 0xbc28",
            "cmp r1, 2",
            "beq 0xbc54",
            "cmp r1, 3",
            "bne 0xbdd8",
            "b 0xbc90",
            "cmp r1, 6",
            "beq 0xbca4",
            "blo 0xbce4",
            "cmp r1, 7",
            "beq 0xbd1c",
            "cmp r1, 0x80",
            "bne 0xbdd8",
            "b 0xbcc8",
            "add r0, sp, 0x14",
            "mov r1, 0x80",
            "ldr r2, [0x0000bde8]",
            "b 0xbc44",
            "ldr r2, [0x0000bdec]",
            "add r0, sp, 0x14",
            "mov r1, 0x80",
            "add r2, r6, r2",
            "ldr r3, [sl, r8]",
            "bl sym.imp.snprintf",
            "b 0xbdb4",
            "ldrd r2, r3, [sl, r8]",
            "add r0, sp, 0x14",
            "mov r1, 0x80",
            "strd r2, r3, [sp]",
            "ldr r2, [0x0000bdf0]",
            "b 0xbcd8",
            "ldr r3, [0x0000bdf4]",
            "ldr r0, [sl, r8]",
            "add r6, r6, r3",
            "bl fcn.0000f4a4",
            "mov r2, r6",
            "strd r0, r1, [sp]",
            "add r0, sp, 0x14",
            "mov r1, 0x80",
            "b 0xbcdc",
            "ldrd r2, r3, [sl, r8]",
            "add r0, sp, 0x14",
            "mov r1, 0x80",
            "strd r2, r3, [sp]",
            "b 0xbcd4",
            "ldr r3, [r3, 4]",
            "add r0, sp, 0x14",
            "ldr r2, [0x0000bdf8]",
            "mov r1, 0x80",
            "str r3, [sp]",
            "add r2, r6, r2",
            "ldr r3, [sl, r8]",
            "bl sym.imp.snprintf",
            "b 0xbdb4",
            "ldrd r2, r3, [r0, 0x10]",
            "add r0, sp, 0x14",
            "strd r2, r3, [sp]",
            "ldr r2, [0x0000bdf4]",
            "add r2, r6, r2",
            "bl sym.imp.snprintf",
            "b 0xbdb4",
            "ldr r4, [sl, r8]",
            "cmp r4, 0",
            "beq 0xbd04",
            "mov r0, r4",
            "bl sym.av_strdup",
            "str r0, [r7]",
            "mov r0, sb",
            "b 0xbddc",
            "ldr r0, [0x0000bdfc]",
            "add r0, r6, r0",
            "bl sym.av_strdup",
            "str r0, [r7]",
            "mov r0, r4",
            "b 0xbddc",
            "ldr sb, [r3, 4]",
            "mov r4, 1",
            "mov r5, 0",
            "mov r2, sb",
            "asr r3, r2, 0x1f",
            "adds r2, r2, r2",
            "adc r3, r3, r3",
            "adds r2, r2, r4",
            "adc r3, r3, r5",
            "cmp r3, 0",
            "bne 0xbdd8",
            "cmn r2, 0x80000001",
            "bhi 0xbdd8",
            "lsl r0, sb, 1",
            "str r3, [sp, 8]",
            "str r2, [sp, 0xc]",
            "add r0, r0, 1",
            "bl sym.av_malloc",
            "cmp r0, 0",
            "str r0, [r7]",
            "ldr r3, [sp, 8]",
            "mvneq r0, 0xb",
            "beq 0xbddc",
            "mov r4, r3",
            "ldr r3, [0x0000be00]",
            "ldr r8, [sl, r8]",
            "add r6, r6, r3",
            "b 0xbda8",
            "ldr r0, [r7]",
            "mov r1, 3",
            "ldrb r3, [r8, r4]",
            "mov r2, r6",
            "add r0, r0, r4, lsl 1",
            "add r4, r4, 1",
            "bl sym.imp.snprintf",
            "cmp r4, sb",
            "blt 0xbd8c",
            "b 0xbdc8",
            "cmp r0, 0x7f",
            "bhi 0xbdd8",
            "add r0, sp, 0x14",
            "bl sym.av_strdup",
            "str r0, [r7]",
            "mov r0, 0",
            "b 0xbddc",
            "ldr r0, [0x0000be04]",
            "b 0xbddc",
            "mvn r0, 0x15",
            "add sp, sp, 0x98",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "fcn.0000f4a4": {
        "function_address": "0x0000f4a4",
        "instructions": [
            "lsls r2, r0, 1",
            "asr r1, r2, 3",
            "rrx r1, r1",
            "lsl r0, r2, 0x1c",
            "andsne r3, r2, 0xff000000",
            "teqne r3, 0xff000000",
            "eorne r1, r1, 0x38000000",
            "bxne lr",
            "teq r2, 0",
            "teqne r3, 0xff000000",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x380",
            "and r5, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "b 0xf2f4"
        ]
    },
    "sym.av_strdup": {
        "function_address": "0x0000a50c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r6, r0, 0",
            "moveq r4, r6",
            "beq 0xa540",
            "bl sym.imp.strlen",
            "add r5, r0, 1",
            "mov r0, r5",
            "bl sym.av_malloc",
            "subs r4, r0, 0",
            "beq 0xa540",
            "mov r1, r6",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_aes_init": {
        "function_address": "0x00004230",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3a4",
            "ldr r4, [0x0000459c]",
            "mov r5, r0",
            "mov r7, r2",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x000045a0]",
            "add r4, pc, r4",
            "str r1, [sp, 0xc]",
            "add r3, r4, r3",
            "ldr r3, [r3, 0x8fc]",
            "cmp r3, 0",
            "bne 0x4364",
            "add r1, sp, 0x20",
            "mov r2, 1",
            "add r1, r1, 0xfe",
            "uxtb r0, r2",
            "add ip, sp, 0x3a0",
            "strb r0, [r1, 1]!",
            "strb r0, [r1, -0xff]",
            "add r0, ip, r2",
            "eor r2, r2, r2, lsl 1",
            "strb r3, [r0, -0x180]",
            "add r3, r3, 1",
            "cmp r2, 0xff",
            "eorgt r2, r2, 0x118",
            "eorgt r2, r2, 3",
            "cmp r3, 0xff",
            "bne 0x4270",
            "ldr r6, [0x000045a0]",
            "mov r3, 0",
            "mov r2, r3",
            "add r6, r4, r6",
            "b 0x42c8",
            "ldrb r2, [r8, r3]",
            "add r1, sp, 0x3a0",
            "rsb r2, r2, r1",
            "ldrb r2, [r2, -0x281]",
            "lsl r1, r2, 2",
            "add sb, r6, 0x900",
            "add r8, sp, 0x220",
            "eor r1, r1, r2, lsl 1",
            "eor r1, r1, r2",
            "eor r1, r1, r2, lsl 3",
            "eor r2, r1, r2, lsl 4",
            "eor r1, r2, 0x63",
            "eor r2, r1, r2, lsr 8",
            "and r2, r2, 0xff",
            "add r1, r6, r2",
            "strb r2, [sb, r3]",
            "strb r3, [r1, 0x400]",
            "add r3, r3, 1",
            "cmp r3, 0x100",
            "bne 0x42b8",
            "ldr sl, [0x000045a4]",
            "add ip, sp, 0x390",
            "add fp, sp, 0x20",
            "add sl, r4, sl",
            "ldm sl, {r0, r1, r2, r3}",
            "add sl, sl, 0x10",
            "stm ip, {r0, r1, r2, r3}",
            "add r3, r6, 0x400",
            "mov r1, ip",
            "str r3, [sp]",
            "mov r0, r6",
            "mov r2, r8",
            "mov r3, fp",
            "bl fcn.00003f14",
            "ldm sl, {r0, r1, r2, r3}",
            "add ip, sp, 0x380",
            "stm ip, {r0, r1, r2, r3}",
            "add r0, r6, 0x500",
            "mov r1, ip",
            "mov r2, r8",
            "mov r3, fp",
            "str sb, [sp]",
            "bl fcn.00003f14",
            "cmp r7, 0xc0",
            "cmpne r7, 0x80",
            "beq 0x437c",
            "cmp r7, 0x100",
            "mvnne r0, 0",
            "bne 0x4594",
            "asr r7, r7, 5",
            "ldr r1, [sp, 0xc]",
            "add r0, sp, 0x350",
            "ldr r8, [0x000045a4]",
            "lsl r6, r7, 2",
            "add r2, r7, 6",
            "str r2, [sp, 0x10]",
            "add fp, r7, 7",
            "str r2, [r5, 0x110]",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "ldr r1, [sp, 0xc]",
            "mov r2, r6",
            "ldr sb, [0x000045a0]",
            "bl sym.imp.memcpy",
            "lsl r3, fp, 4",
            "add ip, sp, 0x3a0",
            "add r8, r4, r8",
            "str r3, [sp, 0xc]",
            "sub r3, r7, 1",
            "add ip, ip, r3, lsl 2",
            "mov sl, r6",
            "add r8, r8, 0x1f",
            "add sb, r4, sb",
            "str ip, [sp, 0x1c]",
            "b 0x44bc",
            "ldr ip, [sp, 0x1c]",
            "add r3, r3, 1",
            "and r1, r3, 3",
            "ldrb r0, [r2]",
            "cmp r3, 4",
            "add r1, ip, r1",
            "ldrb r1, [r1, -0x50]",
            "add r1, sb, r1",
            "ldrb r1, [r1, 0x900]",
            "eor r1, r0, r1",
            "strb r1, [r2], 1",
            "bne 0x43e8",
            "ldrb r2, [r8, 1]!",
            "add r1, sp, 0x3a0",
            "ldrb r3, [sp, 0x350]",
            "eor r3, r2, r3",
            "strb r3, [r1, -0x50]!",
            "add r2, r1, 0x14",
            "add r0, r1, 8",
            "mov r3, 1",
            "str r2, [sp, 0x18]",
            "b 0x44a0",
            "cmp r7, 8",
            "bne 0x4450",
            "cmp r3, 4",
            "beq 0x4470",
            "add r2, r1, r3, lsl 2",
            "ldrb lr, [r2], 1",
            "ldrb ip, [r2, -5]",
            "cmp r2, r0",
            "eor ip, lr, ip",
            "strb ip, [r2, -1]",
            "bne 0x4454",
            "b 0x4498",
            "add r2, r1, 0x10",
            "ldrb lr, [r2], 1",
            "ldrb ip, [r2, -5]",
            "add ip, sb, ip",
            "ldrb ip, [ip, 0x900]",
            "eor ip, lr, ip",
            "strb ip, [r2, -1]",
            "ldr ip, [sp, 0x18]",
            "cmp r2, ip",
            "bne 0x4474",
            "add r3, r3, 1",
            "add r0, r0, 4",
            "cmp r3, r7",
            "blt 0x4440",
            "add r0, r5, r6",
            "add r6, r6, sl",
            "add r1, sp, 0x350",
            "mov r2, sl",
            "bl sym.imp.memcpy",
            "ldr r1, [sp, 0xc]",
            "cmp r6, r1",
            "addlt r2, sp, 0x350",
            "movlt r3, 0",
            "blt 0x43e8",
            "ldr r2, [sp, 0x14]",
            "cmp r2, 0",
            "ldreq r3, [sp, 0x10]",
            "asreq fp, fp, 1",
            "moveq r4, r2",
            "addeq r6, r5, r3, lsl 4",
            "beq 0x4580",
            "ldr r3, [0x000045a0]",
            "add r6, sp, 0x320",
            "mov r7, 1",
            "add sl, r6, 0x10",
            "add r4, r4, r3",
            "add r8, r4, 0x900",
            "b 0x4548",
            "add r5, r5, 0x10",
            "add ip, sp, 0x340",
            "ldm r5, {r0, r1, r2, r3}",
            "add r7, r7, 1",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, r8",
            "bl fcn.00003d44",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, 1",
            "mov r3, 3",
            "bl fcn.00003e20",
            "ldm r6, {r0, r1, r2, r3}",
            "stm r5, {r0, r1, r2, r3}",
            "ldr ip, [sp, 0x10]",
            "cmp r7, ip",
            "blt 0x4508",
            "b 0x4590",
            "add r7, r6, 0x10",
            "add r8, sp, 0x370",
            "ldm r7, {r0, r1, r2, r3}",
            "sub ip, r5, 0x10",
            "add r4, r4, 1",
            "stm r8, {r0, r1, r2, r3}",
            "ldm ip, {r0, r1, r2, r3}",
            "stm r7, {r0, r1, r2, r3}",
            "ldm r8, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "cmp r4, fp",
            "sub r6, r6, 0x10",
            "add r5, r5, 0x10",
            "blt 0x4558",
            "mov r0, 0",
            "add sp, sp, 0x3a4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00003f14": {
        "function_address": "0x00003f14",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov ip, 0",
            "ldr r5, [sp, 0x14]",
            "ldrb r4, [r5, ip]",
            "cmp r4, 0",
            "beq 0x3f78",
            "ldr r6, [r1, 4]",
            "ldrb r4, [r2, r4]",
            "ldrb r6, [r2, r6]",
            "add r4, r3, r4",
            "ldrb r7, [r4, r6]",
            "ldr r6, [r1, 8]",
            "ldrb r6, [r2, r6]",
            "ldrb r6, [r4, r6]",
            "lsl r6, r6, 0x10",
            "orr r6, r6, r7, lsl 8",
            "ldr r7, [r1]",
            "ldrb r7, [r2, r7]",
            "ldrb r7, [r4, r7]",
            "orr r6, r6, r7",
            "ldr r7, [r1, 0xc]",
            "ldrb r7, [r2, r7]",
            "ldrb r4, [r4, r7]",
            "orr r4, r6, r4, lsl 24",
            "str r4, [r0, ip, lsl 2]",
            "add ip, ip, 1",
            "cmp ip, 0x100",
            "bne 0x3f20",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_sub_q": {
        "function_address": "0x0000dd58",
        "instructions": [
            "sub sp, sp, 8",
            "push {r4, lr}",
            "sub sp, sp, 0x18",
            "add ip, sp, 8",
            "mov r4, r0",
            "stm ip, {r1, r2}",
            "ldr r2, [sp, 0x28]",
            "str r3, [sp, 0x24]",
            "rsb r3, r3, 0",
            "str r3, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "str r2, [sp]",
            "ldm ip, {r1, r2}",
            "bl sym.av_add_q",
            "mov r0, r4",
            "add sp, sp, 0x18",
            "pop {r4, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.av_get_cpu_flags": {
        "function_address": "0x000051a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000051e0]",
            "ldr r5, [0x000051e4]",
            "add r4, pc, r4",
            "add r6, r4, r5",
            "ldr r3, [r6, 4]",
            "cmp r3, 0",
            "ldrne r0, [r4, r5]",
            "popne {r4, r5, r6, pc}",
            "bl sym.ff_get_cpu_flags_arm",
            "mov r3, 1",
            "str r0, [r4, r5]",
            "str r3, [r6, 4]",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.ff_get_cpu_flags_arm": {
        "function_address": "0x000045a8",
        "instructions": [
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.av_opt_get_double": {
        "function_address": "0x0000b738",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, 1",
            "sub sp, sp, 0x28",
            "mov r5, 0",
            "mov r6, r3",
            "mov r3, 1",
            "strd r4, r5, [sp, 0x18]",
            "mov r4, 0",
            "str r3, [sp, 0x24]",
            "add r3, sp, 0x24",
            "ldr r5, [0x0000b7d0]",
            "str r3, [sp]",
            "add r3, sp, 0x18",
            "str r3, [sp, 4]",
            "add r3, sp, 0x10",
            "str r2, [sp, 8]",
            "mov r2, 0",
            "strd r4, r5, [sp, 0x10]",
            "bl fcn.0000b5a0",
            "cmp r0, 0",
            "blt 0xb7c8",
            "ldrd r0, r1, [sp, 0x18]",
            "bl fcn.0000f4f8",
            "ldrd r2, r3, [sp, 0x10]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x24]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "strd r0, r1, [r6]",
            "mov r0, 0",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_dbl2int": {
        "function_address": "0x000086a0",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, lr}",
            "mov r3, 0",
            "mov r2, 0",
            "mov r6, r0",
            "mov r7, r1",
            "mov r4, 1",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "movne r4, 0",
            "tst r4, 0xff",
            "moveq r4, 0",
            "moveq r5, 0",
            "beq 0x87d8",
            "mov r2, r6",
            "mov r3, r7",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.0000f1a8",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "bne 0x8758",
            "mov r1, r7",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, r6",
            "bl fcn.0000faa4",
            "mov r1, r7",
            "cmp r0, 0",
            "mov r2, r6",
            "mov r0, r6",
            "mov r3, r7",
            "movne r8, 0",
            "ldrne sb, [0x000087e8]",
            "moveq r8, 0",
            "ldreq sb, [0x000087ec]",
            "mov r4, 1",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "mov r5, 0",
            "movne r4, 0",
            "movne r5, 0",
            "adds r4, r4, r8",
            "adc r5, r5, sb",
            "b 0x87d8",
            "mov r0, r6",
            "mov r1, r7",
            "add r2, sp, 4",
            "bl sym.imp.frexp",
            "mov r2, 0",
            "mov r4, r1",
            "mov r8, r0",
            "mov r3, 0",
            "bl fcn.0000faa4",
            "bic r1, r4, 0x80000000",
            "cmp r0, 0",
            "mov r2, 0",
            "ldr r3, [0x000087f0]",
            "mov r0, r8",
            "movne r6, 0",
            "movne r7, 0x80000000",
            "moveq r6, 0",
            "moveq r7, 0",
            "mov r4, 0",
            "bl fcn.0000f1a8",
            "ldr r3, [0x000087f4]",
            "mov r2, 0",
            "bl fcn.0000f558",
            "bl sym.imp.__aeabi_d2lz",
            "ldr r3, [sp, 4]",
            "orr r4, r4, r0",
            "orr r4, r4, r6",
            "lsl r3, r3, 0x14",
            "add r5, r3, 0x3fc00000",
            "add r5, r5, 0x200000",
            "orr r5, r5, r1",
            "orr r5, r5, r7",
            "mov r0, r4",
            "mov r1, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "sym.imp.frexp": {
        "function_address": "0x00003ab0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x26c]!"
        ]
    },
    "sym.av_opt_set": {
        "function_address": "0x0000c090",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "str r3, [sp]",
            "mov r4, r2",
            "add r3, sp, 0xc",
            "mov r2, 0",
            "str r3, [sp, 4]",
            "mov r3, r2",
            "ldr r5, [0x0000c204]",
            "mov r6, r0",
            "bl sym.av_opt_find2",
            "subs r1, r0, 0",
            "add r5, pc, r5",
            "beq 0xc1f0",
            "ldr r8, [sp, 0xc]",
            "cmp r8, 0",
            "beq 0xc1f0",
            "cmp r4, 0",
            "bne 0xc0e8",
            "ldr r3, [r1, 0xc]",
            "cmp r3, 5",
            "bne 0xc1f8",
            "ldr sl, [r1, 8]",
            "ldr r3, [r1, 0xc]",
            "add r7, r8, sl",
            "cmp r3, 7",
            "addls pc, pc, r3, lsl 2",
            "b 0xc1d8",
            "b 0xc1c4",
            "b 0xc1c4",
            "b 0xc1c4",
            "b 0xc1c4",
            "b 0xc1c4",
            "b 0xc120",
            "b 0xc1c4",
            "b 0xc13c",
            "mov r0, r7",
            "bl sym.av_freep",
            "mov r0, r4",
            "bl sym.av_strdup",
            "str r0, [r8, sl]",
            "mov r0, 0",
            "b 0xc1fc",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r5, r0",
            "mov r0, r7",
            "bl sym.av_freep",
            "tst r5, 1",
            "mov r3, 0",
            "str r3, [r7, 4]",
            "bne 0xc1f8",
            "add r5, r5, r5, lsr 31",
            "asr r6, r5, 1",
            "mov r0, r6",
            "bl sym.av_malloc",
            "mov r5, r0",
            "mov sb, r0",
            "b 0xc1ac",
            "bl fcn.0000a650",
            "mov fp, r0",
            "ldrb r0, [r4, 1]",
            "bl fcn.0000a650",
            "orrs r3, r0, fp",
            "bpl 0xc1a0",
            "mov r0, r5",
            "bl sym.av_free",
            "b 0xc1f8",
            "orr fp, r0, fp, lsl 4",
            "add r4, r4, 2",
            "strb fp, [sb], 1",
            "ldrb r0, [r4]",
            "cmp r0, 0",
            "bne 0xc17c",
            "str r5, [r8, sl]",
            "str r6, [r7, 4]",
            "b 0xc1fc",
            "mov r0, r6",
            "mov r2, r4",
            "mov r3, r7",
            "bl fcn.0000b0e4",
            "b 0xc1fc",
            "ldr r2, [0x0000c208]",
            "mov r0, r6",
            "mov r1, 0x10",
            "add r2, r5, r2",
            "bl sym.av_log",
            "b 0xc1f8",
            "ldr r0, [0x0000c20c]",
            "b 0xc1fc",
            "mvn r0, 0x15",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000a650": {
        "function_address": "0x0000a650",
        "instructions": [
            "sub r3, r0, 0x30",
            "uxtb r2, r3",
            "cmp r2, 9",
            "movls r0, r3",
            "bxls lr",
            "sub r3, r0, 0x61",
            "uxtb r3, r3",
            "cmp r3, 5",
            "subls r0, r0, 0x57",
            "bxls lr",
            "sub r3, r0, 0x41",
            "uxtb r3, r3",
            "cmp r3, 5",
            "subls r0, r0, 0x37",
            "mvnhi r0, 0",
            "bx lr"
        ]
    },
    "fcn.0000b0e4": {
        "function_address": "0x0000b0e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x164",
            "ldr r4, [0x0000b4b4]",
            "mov fp, r0",
            "mov r5, r1",
            "mov r8, r2",
            "str r3, [sp, 0x2c]",
            "mov sl, 0",
            "ldr r3, [0x0000b4b8]",
            "add r4, pc, r4",
            "mov r7, r4",
            "add r3, r4, r3",
            "str r3, [sp, 0x30]",
            "ldr r3, [0x0000b4bc]",
            "add r3, r4, r3",
            "str r3, [sp, 0x34]",
            "ldr r3, [0x0000b4c0]",
            "add r3, r4, r3",
            "str r3, [sp, 0x38]",
            "ldr r3, [0x0000b4c4]",
            "add r3, r4, r3",
            "str r3, [sp, 0x3c]",
            "mov r3, 1",
            "mov r2, 0",
            "str r3, [sp, 0x15c]",
            "add ip, sp, 0x150",
            "ldr r3, [0x0000b4c8]",
            "add r1, sp, 0x140",
            "mov r4, 0",
            "strd r2, r3, [ip, -8]",
            "mov r3, 0",
            "mov r2, 1",
            "strd r2, r3, [r1]",
            "ldrb r3, [r8]",
            "cmp r3, 0x2b",
            "cmpne r3, 0x2d",
            "movne r6, 0",
            "moveq r6, 1",
            "addeq r8, r8, 1",
            "moveq r6, r3",
            "b 0xb194",
            "add r2, sp, 0x40",
            "strb r3, [r2, r4]",
            "add r4, r4, 1",
            "cmp r4, 0xff",
            "beq 0xb1b8",
            "ldrb r3, [r8, r4]",
            "cmp r3, 0",
            "beq 0xb1b8",
            "cmp r3, 0x2b",
            "beq 0xb1b8",
            "cmp r3, 0x2d",
            "bne 0xb188",
            "add r3, sp, 0x160",
            "mov r0, fp",
            "add r2, r3, r4",
            "mov r3, 0",
            "strb r3, [r2, -0x120]",
            "add r1, sp, 0x40",
            "ldr r2, [r5, 0x2c]",
            "str r3, [sp]",
            "bl sym.av_opt_find",
            "cmp r0, 0",
            "beq 0xb1f4",
            "ldr r3, [r0, 0xc]",
            "cmp r3, 0x80",
            "ldrdeq r2, r3, [r0, 0x10]",
            "beq 0xb228",
            "add sb, sp, 0x40",
            "ldr r1, [sp, 0x30]",
            "mov r0, sb",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldrdeq r2, r3, [r5, 0x10]",
            "beq 0xb288",
            "mov r0, sb",
            "ldr r1, [sp, 0x34]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb234",
            "ldrd r2, r3, [r5, 0x20]",
            "add ip, sp, 0x150",
            "strd r2, r3, [ip]",
            "b 0xb2f8",
            "mov r0, sb",
            "ldr r1, [sp, 0x38]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldrdeq r2, r3, [r5, 0x18]",
            "beq 0xb288",
            "mov r0, sb",
            "ldr r1, [sp, 0x3c]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "moveq r2, 0",
            "moveq r3, 0",
            "beq 0xb228",
            "ldr r1, [0x0000b4cc]",
            "mov r0, sb",
            "add r1, r7, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb294",
            "ldr r3, [0x0000b4d0]",
            "mov r2, 0",
            "add r1, sp, 0x150",
            "strd r2, r3, [r1]",
            "b 0xb2f8",
            "mov r3, 0",
            "ldr r2, [0x0000b4d4]",
            "str r3, [sp]",
            "mov r1, sb",
            "str r3, [sp, 4]",
            "add r0, sp, 0x150",
            "str r3, [sp, 8]",
            "add r2, r7, r2",
            "str r3, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x0000b4d8]",
            "str fp, [sp, 0x18]",
            "add r3, r7, r3",
            "bl sym.av_expr_parse_and_eval",
            "subs sb, r0, 0",
            "bge 0xb2f8",
            "ldr r2, [0x0000b4dc]",
            "mov r0, fp",
            "mov r1, 0x10",
            "mov r3, r8",
            "mov r4, r7",
            "add r2, r7, r2",
            "bl sym.av_log",
            "b 0xb4a8",
            "ldr r2, [r5, 0xc]",
            "add r3, sp, 0x140",
            "cmp r2, 0",
            "bne 0xb370",
            "str r3, [sp]",
            "mov r0, r5",
            "ldr r1, [sp, 0x2c]",
            "mov r3, r2",
            "bl fcn.0000a594",
            "cmp r6, 0x2b",
            "bne 0xb344",
            "add r2, sp, 0x150",
            "ldrd r0, r1, [r2]",
            "bl sym.imp.__aeabi_d2lz",
            "add ip, sp, 0x140",
            "ldrd r2, r3, [ip]",
            "orr r0, r0, r2",
            "orr r1, r1, r3",
            "b 0xb368",
            "cmp r6, 0x2d",
            "bne 0xb464",
            "add r3, sp, 0x150",
            "ldrd r0, r1, [r3]",
            "bl sym.imp.__aeabi_d2lz",
            "add ip, sp, 0x140",
            "ldrd r2, r3, [ip]",
            "bic r0, r2, r0",
            "bic r1, r3, r1",
            "bl fcn.0000f4f8",
            "b 0xb45c",
            "str r3, [sp]",
            "mov r0, r5",
            "ldr r1, [sp, 0x2c]",
            "add r2, sp, 0x148",
            "add r3, sp, 0x15c",
            "bl fcn.0000a594",
            "cmp r6, 0x2b",
            "bne 0xb3f8",
            "mov r0, sl",
            "bl fcn.0000f47c",
            "add ip, sp, 0x150",
            "ldrd r2, r3, [ip, -8]",
            "bl fcn.0000f558",
            "add r2, sp, 0x140",
            "strd r0, r1, [sp, 0x20]",
            "ldrd r0, r1, [r2]",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 0x20]",
            "bl fcn.0000f558",
            "strd r0, r1, [sp, 0x20]",
            "ldr r0, [sp, 0x15c]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 0x20]",
            "bl fcn.0000f7c4",
            "add ip, sp, 0x150",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [ip]",
            "bl fcn.0000f1ac",
            "b 0xb45c",
            "cmp r6, 0x2d",
            "bne 0xb464",
            "mov r0, sl",
            "bl fcn.0000f47c",
            "add ip, sp, 0x150",
            "ldrd r2, r3, [ip, -8]",
            "bl fcn.0000f558",
            "add r2, sp, 0x140",
            "strd r0, r1, [sp, 0x20]",
            "ldrd r0, r1, [r2]",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 0x20]",
            "bl fcn.0000f558",
            "strd r0, r1, [sp, 0x20]",
            "ldr r0, [sp, 0x15c]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 0x20]",
            "bl fcn.0000f7c4",
            "add ip, sp, 0x150",
            "ldrd r2, r3, [ip]",
            "bl fcn.0000f1a8",
            "add r2, sp, 0x150",
            "strd r0, r1, [r2]",
            "add ip, sp, 0x150",
            "mov sl, 1",
            "ldrd r2, r3, [ip]",
            "mov r0, fp",
            "mov r1, r5",
            "str sl, [sp, 8]",
            "strd r2, r3, [sp]",
            "mov r2, 1",
            "mov r3, 0",
            "strd r2, r3, [sp, 0x10]",
            "ldr r2, [sp, 0x2c]",
            "bl fcn.0000a690",
            "subs sb, r0, 0",
            "blt 0xb4a8",
            "ldrb sb, [r8, r4]!",
            "cmp sb, 0",
            "bne 0xb13c",
            "mov r0, sb",
            "add sp, sp, 0x164",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_get_sample_fmt_string": {
        "function_address": "0x0000e2b8",
        "instructions": [
            "ldr ip, [0x0000e340]",
            "cmp r2, 0",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x20",
            "mov r5, r1",
            "add ip, pc, ip",
            "bge 0xe2e8",
            "ldr r2, [0x0000e344]",
            "add r2, ip, r2",
            "bl sym.imp.snprintf",
            "b 0xe334",
            "cmp r2, 9",
            "bgt 0xe334",
            "ldr r6, [0x0000e348]",
            "mov r3, 0x14",
            "add lr, sp, 0xc",
            "add r6, ip, r6",
            "mla r6, r3, r2, r6",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm lr!, {r0, r1, r2, r3}",
            "mov r0, r4",
            "ldr r3, [r6]",
            "mov r1, r5",
            "ldr r2, [0x0000e34c]",
            "str r3, [lr]",
            "ldr r3, [sp, 0x14]",
            "add r2, ip, r2",
            "str r3, [sp]",
            "add r3, sp, 0xc",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_image_fill_pointers": {
        "function_address": "0x00007ecc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r1",
            "sub sp, sp, 0x3c",
            "mov r1, 0",
            "mov r6, r2",
            "mov r2, 0x10",
            "mov r8, r3",
            "mov r5, r0",
            "add sl, sp, 0x18",
            "ldr r4, [0x000080b8]",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x10",
            "add r0, sp, 0x28",
            "add r4, pc, r4",
            "bl sym.imp.memset",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "movw r3, 0x12a",
            "cmp r7, r3",
            "bhi 0x80a8",
            "ldr r1, [0x000080bc]",
            "lsl ip, r7, 4",
            "ldr fp, [r4, r1]",
            "str r1, [sp, 0x10]",
            "add fp, fp, ip",
            "ldrb sb, [fp, 7]",
            "tst sb, 8",
            "bne 0x80a8",
            "ldr r2, [sp, 0x60]",
            "mov r1, r6",
            "str r8, [r5]",
            "ldr r0, [0x000080c0]",
            "ldr r7, [r2]",
            "str ip, [sp, 4]",
            "bl fcn.0000f06c",
            "cmp r7, r0",
            "ldr ip, [sp, 4]",
            "bgt 0x80a8",
            "mul r7, r6, r7",
            "ands sb, sb, 2",
            "str r7, [sp, 0x28]",
            "bne 0x7fe8",
            "ldrb r3, [fp, 8]",
            "add r1, sp, 0x38",
            "mov r8, 1",
            "ldr r2, [sp, 0x60]",
            "str ip, [sp, 0x14]",
            "sub ip, r6, 1",
            "and r3, r3, 3",
            "add r3, r1, r3, lsl 2",
            "mov r6, r2",
            "str r8, [r3, -0x20]",
            "ldrb r3, [fp, 0xa]",
            "and r3, r3, 3",
            "add r3, r1, r3, lsl 2",
            "str r8, [r3, -0x20]",
            "ldrb r3, [fp, 0xc]",
            "and r3, r3, 3",
            "add r3, r1, r3, lsl 2",
            "str r8, [r3, -0x20]",
            "ldrb r3, [fp, 0xe]",
            "and r3, r3, 3",
            "add r3, r1, r3, lsl 2",
            "str r8, [r3, -0x20]",
            "add r3, sp, 0x24",
            "mov fp, r3",
            "mov r3, r4",
            "b 0x8098",
            "add r7, r7, 3",
            "bic r7, r7, 3",
            "add r8, r8, r7",
            "add r7, r7, 0x400",
            "str r8, [r5, 4]",
            "b 0x80ac",
            "cmp r8, 3",
            "ldr r0, [r5, sb]",
            "ldrne r1, [sp, 0x10]",
            "add sb, sb, 4",
            "moveq r2, 0",
            "ldrne r2, [r3, r1]",
            "ldrne r1, [sp, 0x14]",
            "addne r2, r2, r1",
            "ldr r1, [fp, 4]!",
            "ldrbne r2, [r2, 6]",
            "add r1, r0, r1",
            "mvn r0, 0x80000000",
            "str r1, [r5, sb]",
            "mov r1, 1",
            "add r4, ip, r1, lsl r2",
            "asr r2, r4, r2",
            "ldr r4, [r6, 4]!",
            "str r3, [sp, 8]",
            "mov r1, r2",
            "str r2, [sp, 0xc]",
            "str ip, [sp, 4]",
            "bl fcn.0000f06c",
            "cmp r4, r0",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [sp, 8]",
            "ldr ip, [sp, 4]",
            "bgt 0x80a8",
            "mul r4, r4, r2",
            "add r2, sp, 0x28",
            "str r4, [r2, sb]",
            "mvn r2, 0x80000000",
            "rsb r2, r4, r2",
            "cmp r7, r2",
            "bgt 0x80a8",
            "add r8, r8, 1",
            "add r7, r7, r4",
            "cmp r8, 4",
            "beq 0x80ac",
            "ldr r2, [sl, 4]!",
            "cmp r2, 0",
            "bne 0x8000",
            "b 0x80ac",
            "mvn r7, 0x15",
            "mov r0, r7",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_int2flt": {
        "function_address": "0x000085a0",
        "instructions": [
            "lsl r3, r0, 1",
            "push {r4, lr}",
            "mov r4, r0",
            "cmp r3, 0xff000000",
            "bhi 0x85e4",
            "asr r3, r0, 0x1f",
            "bic r0, r0, 0xff000000",
            "bic r0, r0, 0x800000",
            "orr r3, r3, 1",
            "add r0, r0, 0x800000",
            "mul r0, r0, r3",
            "bl fcn.0000f47c",
            "ubfx r2, r4, 0x17, 8",
            "sub r2, r2, 0x96",
            "bl sym.imp.ldexp",
            "bl fcn.0000fba4",
            "pop {r4, pc}",
            "ldr r0, [pc]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.ldexp": {
        "function_address": "0x00003a08",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2dc]!"
        ]
    },
    "fcn.0000fba4": {
        "function_address": "0x0000fba4",
        "instructions": [
            "lsl r2, r1, 1",
            "subs r3, r2, 0x70000000",
            "subshs ip, r3, 0x200000",
            "rsbshs ip, ip, 0x1fc00000",
            "bls 0xfbd4",
            "and ip, r1, 0x80000000",
            "lsl r2, r0, 3",
            "orr r0, ip, r0, lsr 29",
            "cmp r2, 0x80000000",
            "adc r0, r0, r3, lsl 2",
            "biceq r0, r0, 1",
            "bx lr",
            "tst r1, 0x40000000",
            "bne 0xfc1c",
            "adds r2, r3, 0x2e00000",
            "andlt r0, r1, 0x80000000",
            "bxlt lr",
            "orr r1, r1, 0x100000",
            "lsr r2, r2, 0x15",
            "rsb r2, r2, 0x18",
            "rsb ip, r2, 0x20",
            "lsls r3, r0, ip",
            "lsr r0, r0, r2",
            "orrne r0, r0, 1",
            "lsl r3, r1, 0xb",
            "lsr r3, r3, 0xb",
            "orr r0, r0, r3, lsl ip",
            "lsr r3, r3, r2",
            "lsl r3, r3, 1",
            "b 0xfbb8",
            "mvns r3, r2, asr 21",
            "bne 0xfc34",
            "orrs r3, r0, r1, lsl 12",
            "movne r0, 0x7f000000",
            "orrne r0, r0, 0xc00000",
            "bxne lr",
            "and r0, r1, 0x80000000",
            "orr r0, r0, 0x7f000000",
            "orr r0, r0, 0x800000",
            "bx lr"
        ]
    },
    "sym.av_solve_lls": {
        "function_address": "0x00008c64",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x44",
            "add r6, r0, 0x108",
            "add r1, r0, 0x110",
            "mov r8, 0",
            "mov fp, r6",
            "strd r2, r3, [sp, 0x28]",
            "movw r3, 0x4308",
            "str r1, [sp, 0x24]",
            "mov r5, r8",
            "ldr r7, [r0, r3]",
            "str r6, [sp, 8]",
            "str r1, [sp, 0x18]",
            "str r0, [sp, 0x38]",
            "b 0x8d74",
            "ldr ip, [sp, 0x1c]",
            "add r1, r4, sb",
            "ldrd r2, r3, [ip, 8]!",
            "str r5, [sp, 0x10]",
            "str r5, [sp, 0x3c]",
            "str ip, [sp, 0x1c]",
            "ldr ip, [sp, 0x34]",
            "strd r2, r3, [sp]",
            "str r1, [sp, 0x20]",
            "mov r5, ip",
            "b 0x8cf4",
            "ldr ip, [sp, 0x20]",
            "ldrd r0, r1, [r5, -8]!",
            "ldrd r2, r3, [ip, -8]!",
            "str ip, [sp, 0x20]",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp]",
            "bl fcn.0000f1a8",
            "strd r0, r1, [sp]",
            "ldr r1, [sp, 0x10]",
            "subs r1, r1, 1",
            "str r1, [sp, 0x10]",
            "bpl 0x8ccc",
            "ldr r5, [sp, 0x3c]",
            "cmp r5, sl",
            "bne 0x8d3c",
            "ldrd r0, r1, [sp]",
            "ldrd r2, r3, [sp, 0x28]",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "ldrne r3, [0x00009074]",
            "movne r2, 0",
            "strdne r2, r3, [sp]",
            "ldrd r0, r1, [sp]",
            "bl sym.imp.sqrt",
            "strd r0, r1, [r6, r8]",
            "b 0x8d4c",
            "ldrd r0, r1, [sp]",
            "ldrd r2, r3, [r6, r8]",
            "bl fcn.0000f7c4",
            "strd r0, r1, [r4, sb]",
            "add sl, sl, 1",
            "add r4, r4, 0x108",
            "cmp sl, r7",
            "blt 0x8ca0",
            "ldr r3, [sp, 0x18]",
            "add r5, r5, 1",
            "add r8, r8, 0x110",
            "add fp, fp, 0x108",
            "add r3, r3, 0x108",
            "str r3, [sp, 0x18]",
            "cmp r5, r7",
            "blt 0x8d98",
            "ldr r4, [sp, 0x38]",
            "mov r8, 0",
            "mov r5, r8",
            "add ip, r4, 0x2200",
            "str r4, [sp, 0x18]",
            "str ip, [sp, 0x10]",
            "b 0x8e44",
            "ldr r1, [sp, 0x18]",
            "sub r3, r5, 1",
            "lsl sb, r5, 3",
            "mov r4, fp",
            "mov sl, r5",
            "add r2, fp, sb",
            "add r3, r1, r3, lsl 3",
            "str r2, [sp, 0x34]",
            "str r3, [sp, 0x1c]",
            "b 0x8ca0",
            "ldr ip, [sp, 0x18]",
            "add fp, r5, 0x440",
            "ldr r1, [sp, 8]",
            "add fp, fp, 1",
            "add fp, r4, fp, lsl 3",
            "mov sl, 0",
            "ldrd r2, r3, [ip, 8]!",
            "add sb, r1, r5, lsl 3",
            "str ip, [sp, 0x18]",
            "strd r2, r3, [sp]",
            "b 0x8e10",
            "ldrd r2, r3, [fp, -8]!",
            "add sl, sl, 1",
            "ldrd r0, r1, [sb, -8]!",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp]",
            "bl fcn.0000f1a8",
            "strd r0, r1, [sp]",
            "cmp sl, r5",
            "bne 0x8dec",
            "ldrd r2, r3, [r6, r8]",
            "add r5, r5, 1",
            "ldrd r0, r1, [sp]",
            "add r8, r8, 0x110",
            "bl fcn.0000f7c4",
            "ldr r3, [sp, 8]",
            "ldr r2, [sp, 0x10]",
            "add r3, r3, 0x108",
            "strd r0, r1, [r2, 8]!",
            "str r3, [sp, 8]",
            "str r2, [sp, 0x10]",
            "cmp r5, r7",
            "blt 0x8dc0",
            "add r3, r7, 0x840",
            "sub r5, r7, 1",
            "add r3, r4, r3, lsl 3",
            "str r3, [sp]",
            "mov r3, 0x108",
            "mla fp, r3, r7, r6",
            "b 0x901c",
            "ldr ip, [sp, 0x18]",
            "mov r7, r6",
            "ldr r1, [sp, 0x1c]",
            "add r8, sb, r6, lsl 3",
            "ldrd r2, r3, [ip, -8]!",
            "str r6, [sp, 0x20]",
            "str ip, [sp, 0x18]",
            "add ip, r6, r1",
            "add ip, ip, 0x440",
            "mov r6, r4",
            "add ip, ip, 1",
            "strd r2, r3, [sp, 8]",
            "add ip, r4, ip, lsl 3",
            "mov r4, ip",
            "b 0x8ec8",
            "ldrd r2, r3, [r8]",
            "add r8, r8, 0x108",
            "ldrd r0, r1, [r4, 8]!",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 8]",
            "bl fcn.0000f1a8",
            "strd r0, r1, [sp, 8]",
            "add r7, r7, 1",
            "cmp r7, r5",
            "ble 0x8ea4",
            "mov r4, r6",
            "ldr r6, [sp, 0x20]",
            "ldrd r2, r3, [sl]",
            "sub sb, sb, 0x108",
            "ldrd r0, r1, [sp, 8]",
            "sub sl, sl, 0x110",
            "bl fcn.0000f7c4",
            "ldr r2, [sp, 0x10]",
            "sub r6, r6, 1",
            "strd r0, r1, [r2, -8]!",
            "str r2, [sp, 0x10]",
            "cmp r6, 0",
            "bge 0x8e68",
            "ldrd r2, r3, [r4]",
            "mov r6, 0",
            "ldr ip, [sp]",
            "ldr sl, [sp, 0x24]",
            "strd r2, r3, [ip], -8",
            "add r3, r5, 0x22",
            "add r3, r4, r3, lsl 8",
            "str ip, [sp]",
            "str r4, [sp, 0x20]",
            "str r3, [sp, 0x1c]",
            "str r3, [sp, 0x18]",
            "b 0x900c",
            "ldr ip, [sp, 0x18]",
            "add r7, r4, r6, lsl 3",
            "ldr r1, [sp, 0x20]",
            "ldrd r2, r3, [ip, 8]!",
            "ldrd r8, sb, [r1, 8]!",
            "strd r2, r3, [sp, 0x10]",
            "mov r0, r2",
            "str r1, [sp, 0x20]",
            "mov r1, r3",
            "ldrd r2, r3, [sl]",
            "str ip, [sp, 0x18]",
            "bl fcn.0000f558",
            "mov r2, r8",
            "strd r0, r1, [sp, 8]",
            "mov r3, sb",
            "mov r0, r8",
            "mov r1, sb",
            "mov r8, 0",
            "bl fcn.0000f1ac",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 8]",
            "bl fcn.0000f1a8",
            "ldr sb, [sp, 0x1c]",
            "strd r0, r1, [sp, 8]",
            "b 0x8fd0",
            "ldrd r0, r1, [sb, 8]!",
            "add r8, r8, 1",
            "mov r2, r0",
            "mov r3, r1",
            "bl fcn.0000f1ac",
            "ldrd r2, r3, [r7, 8]",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 8]",
            "bl fcn.0000f1ac",
            "strd r0, r1, [sp, 8]",
            "cmp r8, r6",
            "add r7, r7, 0x108",
            "blt 0x8fa0",
            "ldrd r2, r3, [sp, 8]",
            "add r6, r6, 1",
            "ldrd r0, r1, [sp, 0x10]",
            "add sl, sl, 0x110",
            "bl fcn.0000f558",
            "ldr ip, [sp]",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [ip, 8]",
            "bl fcn.0000f1ac",
            "ldr r2, [sp]",
            "strd r0, r1, [r2, 8]",
            "cmp r6, r5",
            "ble 0x8f38",
            "sub r5, r5, 1",
            "sub fp, fp, 0x108",
            "ldr r3, [sp, 0x68]",
            "cmp r5, r3",
            "blt 0x906c",
            "mov ip, 0x108",
            "lsl r1, r5, 5",
            "mul r3, ip, r5",
            "sub sl, fp, 0x108",
            "add sl, sl, r5, lsl 3",
            "mov sb, fp",
            "str r1, [sp, 0x1c]",
            "mov r6, r5",
            "add r3, r3, 0x2200",
            "add r3, r4, r3",
            "add r3, r3, 0x10",
            "str r3, [sp, 0x10]",
            "add r3, r5, 0x440",
            "add r3, r4, r3, lsl 3",
            "add r3, r3, 0x10",
            "str r3, [sp, 0x18]",
            "b 0x8f00",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_log_default_callback": {
        "function_address": "0x0000921c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x410",
            "ldr r4, [0x0000948c]",
            "sub sp, sp, 4",
            "mov r5, r1",
            "ldr ip, [0x00009490]",
            "add r4, pc, r4",
            "add r6, r4, ip",
            "ldr ip, [r4, ip]",
            "cmp r1, ip",
            "bgt 0x9480",
            "add r6, r6, 4",
            "add ip, sp, 0x10",
            "str r6, [sp, 8]",
            "ldr r6, [0x00009494]",
            "str ip, [sp]",
            "mov ip, 0x400",
            "str ip, [sp, 4]",
            "bl sym.av_log_format_line",
            "ldr r3, [r4, r6]",
            "cmp r3, 0",
            "bne 0x928c",
            "mov r0, 2",
            "bl sym.imp.isatty",
            "cmp r0, 0",
            "mvneq r3, 0",
            "movne r3, 1",
            "str r3, [r4, r6]",
            "ldr r3, [0x00009490]",
            "add r3, r4, r3",
            "ldr r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0x92fc",
            "ldr r6, [0x00009494]",
            "add r6, r4, r6",
            "ldr r3, [r6, 4]",
            "tst r3, 1",
            "beq 0x92fc",
            "add r0, sp, 0x10",
            "add r1, r6, 8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x92fc",
            "ldr r3, [r6]",
            "ldr r2, [r6, 0x408]",
            "cmp r3, 1",
            "add r2, r2, 1",
            "str r2, [r6, 0x408]",
            "bne 0x9480",
            "ldr r3, [0x00009498]",
            "ldr r1, [0x0000949c]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9480",
            "ldr r6, [0x00009494]",
            "add r6, r4, r6",
            "ldr r2, [r6, 0x408]",
            "cmp r2, 0",
            "ble 0x9330",
            "ldr r3, [0x00009498]",
            "ldr r1, [0x000094a0]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r3, 0",
            "str r3, [r6, 0x408]",
            "ldr r0, [0x00009494]",
            "add r6, sp, 0x10",
            "mov r1, r6",
            "add r0, r4, r0",
            "add r0, r0, 8",
            "bl sym.imp.strcpy",
            "mov r3, 0x3f",
            "b 0x9364",
            "sub r2, r7, 0xe",
            "uxtb r2, r2",
            "cmp r7, 7",
            "cmphi r2, 0x11",
            "strbls r3, [r6, -1]",
            "ldrb r7, [r6], 1",
            "cmp r7, 0",
            "bne 0x9350",
            "ldr r3, [0x00009490]",
            "add r3, r4, r3",
            "ldr r3, [r3, 8]",
            "cmp r3, 0",
            "bge 0x93f8",
            "ldr r0, [0x000094a4]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r6, r0, 0",
            "bne 0x93ec",
            "ldr r0, [0x000094a8]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "movne r7, r6",
            "bne 0x93ec",
            "ldr r0, [0x000094ac]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0x93d8",
            "mov r0, 2",
            "bl sym.imp.isatty",
            "cmp r0, 0",
            "movne r7, 1",
            "bne 0x93ec",
            "ldr r0, [0x000094b0]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r7, r0, 0",
            "movne r7, 1",
            "ldr r3, [0x00009490]",
            "add r3, r4, r3",
            "str r7, [r3, 8]",
            "ldr r3, [0x00009490]",
            "add r3, r4, r3",
            "ldr r3, [r3, 8]",
            "cmp r3, 0",
            "beq 0x9448",
            "asr r5, r5, 3",
            "ldr r3, [0x000094b4]",
            "ldr r2, [0x00009498]",
            "cmp r5, 6",
            "movge r5, 6",
            "ldr r1, [0x000094b8]",
            "add r3, r4, r3",
            "bic r5, r5, r5, asr 31",
            "ldrb r3, [r3, r5]",
            "ldr r2, [r4, r2]",
            "add r1, r4, r1",
            "ldr r0, [r2]",
            "lsr r2, r3, 4",
            "and r3, r3, 0xf",
            "bl sym.imp.fprintf",
            "ldr r3, [0x00009498]",
            "add r0, sp, 0x10",
            "ldr r5, [r4, r3]",
            "ldr r1, [r5]",
            "bl sym.imp.fputs",
            "ldr r3, [0x00009490]",
            "add r3, r4, r3",
            "ldr r3, [r3, 8]",
            "cmp r3, 0",
            "beq 0x9480",
            "ldr r0, [0x000094bc]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "add sp, sp, 0x14",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_log_format_line": {
        "function_address": "0x000090e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr sl, [sp, 0x40]",
            "subs r6, r0, 0",
            "mov fp, r3",
            "mov r3, 0",
            "ldr r4, [sp, 0x38]",
            "moveq r7, r6",
            "ldrne r7, [r6]",
            "mov sb, r2",
            "ldr r8, [sp, 0x3c]",
            "strb r3, [r4]",
            "ldr r3, [sl]",
            "ldr r5, [0x00009214]",
            "cmp r7, 0",
            "cmpne r3, 0",
            "add r5, pc, r5",
            "beq 0x91c0",
            "ldr r3, [r7, 0x14]",
            "cmp r3, 0",
            "beq 0x9184",
            "ldr r2, [r6, r3]",
            "cmp r2, 0",
            "beq 0x9184",
            "ldr r3, [r2]",
            "cmp r3, 0",
            "beq 0x9184",
            "ldr r3, [r3, 4]",
            "mov r0, r2",
            "str r2, [sp, 0xc]",
            "blx r3",
            "ldr r2, [sp, 0xc]",
            "mov r3, r0",
            "mov r1, r8",
            "mov r0, r4",
            "str r2, [sp]",
            "ldr r2, [0x00009218]",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r1, r0",
            "ldr r3, [r7, 4]",
            "mov r0, r6",
            "str r1, [sp, 0xc]",
            "blx r3",
            "ldr r1, [sp, 0xc]",
            "mov r3, r0",
            "ldr r2, [0x00009218]",
            "str r6, [sp]",
            "add r0, r4, r1",
            "rsb r1, r1, r8",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r1, r0",
            "mov r3, fp",
            "add r0, r4, r0",
            "rsb r1, r1, r8",
            "mov r2, sb",
            "bl sym.imp.vsnprintf",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "beq 0x9208",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "add r0, r4, r0",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0xa",
            "movne r3, 0",
            "moveq r3, 1",
            "str r3, [sl]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.isatty": {
        "function_address": "0x000039b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x314]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00003a20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2cc]!"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00003ae0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x24c]!"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x00003864",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3f4]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x000039f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2ec]!"
        ]
    },
    "sym.av_des_crypt": {
        "function_address": "0x00005988",
        "instructions": [
            "push {r0, r1, r2, r3, r4, lr}",
            "ldr ip, [sp, 0x18]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x1c]",
            "str ip, [sp, 4]",
            "mov ip, 0",
            "str ip, [sp, 8]",
            "bl fcn.00005718",
            "add sp, sp, 0x14",
            "ldm sp!, {pc}"
        ]
    },
    "fcn.00005718": {
        "function_address": "0x00005718",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr r4, [sp, 0x38]",
            "mov r5, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov sl, r3",
            "cmp r4, 0",
            "moveq r8, 0",
            "moveq sb, 0",
            "beq 0x5760",
            "ldr r2, [r4]",
            "ldr r3, [r4, 4]",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.00005378",
            "mov r8, r0",
            "mov sb, r1",
            "add r3, r5, 0x80",
            "str sl, [sp, 4]",
            "str r3, [sp, 8]",
            "add r3, r5, 0x100",
            "str r3, [sp, 0xc]",
            "b 0x58a0",
            "cmp r6, 0",
            "moveq sl, 0",
            "moveq fp, 0",
            "beq 0x57a4",
            "ldr r2, [r6]",
            "ldr r3, [r6, 4]",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.00005378",
            "mov sl, r0",
            "mov fp, r1",
            "ldr r3, [sp, 0x3c]",
            "ldr ip, [r5, 0x180]",
            "cmp r3, 0",
            "beq 0x580c",
            "cmp ip, 0",
            "moveq r0, sl",
            "moveq r1, fp",
            "beq 0x57e4",
            "ldr r2, [sp, 0xc]",
            "mov r3, 1",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.00005538",
            "ldr r2, [sp, 8]",
            "mov r3, 0",
            "bl fcn.00005538",
            "mov r2, r5",
            "mov r3, 1",
            "bl fcn.00005538",
            "cmp r4, 0",
            "eor r2, r0, r8",
            "eor r3, r1, sb",
            "movne r8, sl",
            "movne sb, fp",
            "bne 0x5870",
            "b 0x5868",
            "mov r2, r5",
            "ldr r3, [sp, 0x3c]",
            "eor r0, sl, r8",
            "eor r1, fp, sb",
            "str ip, [sp]",
            "bl fcn.00005538",
            "ldr ip, [sp]",
            "mov r2, r0",
            "mov r3, r1",
            "cmp ip, 0",
            "beq 0x5858",
            "ldr r2, [sp, 8]",
            "mov r3, 1",
            "bl fcn.00005538",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [sp, 0x3c]",
            "bl fcn.00005538",
            "mov r2, r0",
            "mov r3, r1",
            "cmp r4, 0",
            "movne r8, r2",
            "movne sb, r3",
            "bne 0x5870",
            "mov r8, 0",
            "mov sb, 0",
            "mov r1, r3",
            "mov r0, r2",
            "bl fcn.00005378",
            "ldr r3, [sp, 0x40]",
            "add r6, r6, 8",
            "str r0, [r7]",
            "str r1, [r7, 4]",
            "cmp r3, 0",
            "ldr r3, [sp, 4]",
            "addeq r7, r7, 8",
            "sub r3, r3, 1",
            "str r3, [sp, 4]",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bgt 0x5778",
            "cmp r4, 0",
            "beq 0x58c8",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.00005378",
            "str r0, [r4]",
            "str r1, [r4, 4]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00005538": {
        "function_address": "0x00005538",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "ldr r6, [0x00005710]",
            "cmp r3, 0",
            "mov fp, r2",
            "mov r4, 0",
            "ldr r8, [0x00005714]",
            "mov r5, 0",
            "add r6, pc, r6",
            "strd r0, r1, [sp, 8]",
            "movne r3, 0xf",
            "moveq r3, 0",
            "add r8, r6, r8",
            "str r3, [sp, 0x20]",
            "add r0, r8, 0x68",
            "add r8, r8, 0xa8",
            "mov r7, r0",
            "mov sl, r8",
            "str r0, [sp, 0x1c]",
            "ldrb r2, [r7], 1",
            "mov r8, 1",
            "ldrd r0, r1, [sp, 8]",
            "mov sb, 0",
            "bl fcn.0000f168",
            "adds r4, r4, r4",
            "and r2, r0, r8",
            "adc r5, r5, r5",
            "and r3, r1, sb",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "cmp r7, sl",
            "bne 0x5584",
            "ldr sb, [0x00005714]",
            "mov r7, 0",
            "add sb, r6, sb",
            "add ip, sb, 0xc8",
            "add r0, sb, 0xa8",
            "mov r3, ip",
            "mov ip, r6",
            "mov r6, r3",
            "str r0, [sp, 0x24]",
            "ldr r1, [sp, 0x20]",
            "mov r8, 0",
            "eor r2, r7, r1",
            "add r3, fp, r2, lsl 3",
            "ldr r0, [fp, r2, lsl 3]",
            "ror r2, r4, 0x1f",
            "ldr r1, [r3, 4]",
            "mov r3, 7",
            "add lr, sb, r3, lsl 5",
            "eor sl, r0, r2",
            "and sl, sl, 0x3f",
            "add lr, lr, sl, lsr 1",
            "tst sl, 1",
            "ldrb lr, [lr, 0xc8]",
            "lsrne lr, lr, 4",
            "subs r3, r3, 1",
            "lsl lr, lr, 0x1c",
            "orr r8, lr, r8, lsr 4",
            "lsrhs r0, r0, 6",
            "rorhs r2, r2, 4",
            "orrhs r0, r0, r1, lsl 26",
            "lsrhs r1, r1, 6",
            "bhs 0x55fc",
            "ldr sl, [sp, 0x24]",
            "mov r2, 0",
            "mov r3, 0",
            "strd r4, r5, [sp, 0x28]",
            "adds r4, r2, r2",
            "mov r0, r8",
            "adc r5, r3, r3",
            "mov r1, 0",
            "strd r4, r5, [sp, 8]",
            "mov r4, 1",
            "ldrb r2, [sl], 1",
            "mov r5, 0",
            "str ip, [sp, 4]",
            "bl fcn.0000f168",
            "and r2, r0, r4",
            "and r3, r1, r5",
            "ldrd r0, r1, [sp, 8]",
            "ldr ip, [sp, 4]",
            "adds r2, r2, r0",
            "adc r3, r3, r1",
            "cmp sl, r6",
            "bne 0x5648",
            "ldrd r4, r5, [sp, 0x28]",
            "add r7, r7, 1",
            "cmp r7, 0x10",
            "str r5, [sp, 0x10]",
            "str r4, [sp, 0x14]",
            "ldrd r4, r5, [sp, 0x10]",
            "eor r4, r4, r2",
            "bne 0x55dc",
            "ldr r3, [0x00005714]",
            "mov sb, r4",
            "mov r8, r5",
            "mov r4, 0",
            "mov r5, 0",
            "mov sl, 1",
            "add r6, ip, r3",
            "mov fp, 0",
            "add r6, r6, 0xa8",
            "and r0, r8, sl",
            "and r1, sb, fp",
            "ldrb r2, [r6, -1]!",
            "lsrs sb, sb, 1",
            "rrx r8, r8",
            "bl fcn.0000f184",
            "orr r4, r4, r0",
            "ldr r0, [sp, 0x1c]",
            "orr r5, r5, r1",
            "cmp r6, r0",
            "bne 0x56d4",
            "mov r0, r4",
            "mov r1, r5",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_opt_free": {
        "function_address": "0x0000acec",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r4, r0",
            "mov r5, 0",
            "b 0xad18",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 5",
            "cmpne r3, 7",
            "bne 0xad18",
            "ldr r0, [r5, 8]",
            "add r0, r4, r0",
            "bl sym.av_freep",
            "mov r1, r5",
            "mov r0, r4",
            "bl sym.av_opt_next",
            "subs r5, r0, 0",
            "bne 0xacfc",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.av_tree_enumerate": {
        "function_address": "0x0000ee3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "mov r8, r3",
            "cmp r4, 0",
            "popeq {r4, r5, r6, r7, r8, pc}",
            "cmp r5, 0",
            "beq 0xee78",
            "mov r0, r6",
            "ldr r1, [r4, 8]",
            "blx r5",
            "subs r7, r0, 0",
            "blt 0xeea4",
            "b 0xee7c",
            "mov r7, r5",
            "ldr r0, [r4]",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, r8",
            "bl sym.av_tree_enumerate",
            "cmp r7, 0",
            "popne {r4, r5, r6, r7, r8, pc}",
            "mov r0, r6",
            "ldr r1, [r4, 8]",
            "blx r8",
            "ldr r4, [r4, 4]",
            "b 0xee50"
        ]
    },
    "sym.av_lzo1x_decode": {
        "function_address": "0x00009798",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sl, r3",
            "ldr r3, [r1]",
            "sub sp, sp, 0x18",
            "mov r4, r1",
            "cmp r3, 0",
            "ble 0x97c8",
            "ldr r1, [sl]",
            "cmp r1, 0",
            "movle r0, 0",
            "bgt 0x97dc",
            "b 0x97cc",
            "mov r0, 2",
            "ldr r3, [sl]",
            "cmp r3, 0",
            "orrle r0, r0, 1",
            "b 0x9a60",
            "add r1, r2, r1",
            "str r0, [sp, 8]",
            "str r0, [sp, 0xc]",
            "add r0, r0, r3",
            "mov r3, 0",
            "str r1, [sp, 4]",
            "str r0, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "ldrb r5, [r2], 1",
            "cmp r5, 0x11",
            "str r2, [sp]",
            "ble 0x9834",
            "sub r1, r5, 0x11",
            "mov r0, sp",
            "bl fcn.00009700",
            "ldr r3, [sp]",
            "ldrb r5, [r3], 1",
            "cmp r5, 0xf",
            "str r3, [sp]",
            "ldrle r3, [sp, 0x14]",
            "orrle r3, r3, 8",
            "strle r3, [sp, 0x14]",
            "ldr r3, [sp, 4]",
            "mov sb, 0",
            "ldr r2, [sp]",
            "mov r6, sp",
            "cmp r2, r3",
            "ldrhi r3, [sp, 0x14]",
            "orrhi r3, r3, 1",
            "strhi r3, [sp, 0x14]",
            "b 0x9a28",
            "cmp r5, 0xf",
            "ble 0x9928",
            "cmp r5, 0x3f",
            "ble 0x988c",
            "ldr r3, [sp]",
            "asr r0, r5, 5",
            "ubfx r2, r5, 2, 3",
            "sub r0, r0, 1",
            "ldrb r1, [r3], 1",
            "lsl r1, r1, 3",
            "add r1, r1, 1",
            "add r1, r1, r2",
            "b 0x999c",
            "cmp r5, 0x1f",
            "ble 0x98cc",
            "mov r1, r5",
            "mov r2, 0x1f",
            "mov r0, sp",
            "bl fcn.000095bc",
            "ldr r2, [sp]",
            "mov r3, r2",
            "ldrb r5, [r3], 1",
            "str r3, [sp]",
            "add r3, r3, 1",
            "ldrb r2, [r2, 1]",
            "asr r1, r5, 2",
            "add r1, r1, 1",
            "add r1, r1, r2, lsl 6",
            "b 0x999c",
            "mov r1, r5",
            "mov r2, 7",
            "mov r0, sp",
            "bl fcn.000095bc",
            "ldr r2, [sp]",
            "and ip, r5, 8",
            "mov r3, r2",
            "ldrb r5, [r3], 1",
            "str r3, [sp]",
            "add r3, r3, 1",
            "ldrb r2, [r2, 1]",
            "asr r1, r5, 2",
            "str r3, [sp]",
            "add r1, r1, 0x4000",
            "add r1, r1, r2, lsl 6",
            "add r1, r1, ip, lsl 11",
            "cmp r1, 0x4000",
            "bne 0x99a0",
            "cmp r0, 1",
            "ldrne r3, [sp, 0x14]",
            "orrne r3, r3, 8",
            "strne r3, [sp, 0x14]",
            "b 0x9a34",
            "cmp sb, 0",
            "bne 0x9988",
            "mov r1, r5",
            "mov r2, 0xf",
            "mov r0, sp",
            "bl fcn.000095bc",
            "add r1, r0, 3",
            "mov r0, sp",
            "bl fcn.00009700",
            "ldr r2, [sp]",
            "mov r3, r2",
            "ldrb r5, [r3], 1",
            "cmp r5, 0xf",
            "str r3, [sp]",
            "bgt 0x9a28",
            "ldrb r2, [r2, 1]",
            "asr r1, r5, 2",
            "add r3, r3, 1",
            "add r1, r1, 0x800",
            "str r3, [sp]",
            "add r1, r1, 1",
            "mov r0, 1",
            "add r1, r1, r2, lsl 2",
            "b 0x99a0",
            "ldr r3, [sp]",
            "ldrb r1, [r3], 1",
            "lsl r1, r1, 2",
            "add r1, r1, 1",
            "add r1, r1, r5, lsr 2",
            "str r3, [sp]",
            "ldr r7, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "rsb r3, r1, r7",
            "cmp r3, r2",
            "movhs r2, 0",
            "movlo r2, 1",
            "cmp r3, r7",
            "movls r3, r2",
            "orrhi r3, r2, 1",
            "cmp r3, 0",
            "ldrne r3, [sp, 0x14]",
            "orrne r3, r3, 4",
            "strne r3, [sp, 0x14]",
            "bne 0x9a0c",
            "ldr r3, [sp, 0x10]",
            "add r8, r0, 2",
            "mov r0, r7",
            "rsb r3, r7, r3",
            "cmp r8, r3",
            "bicgt r8, r3, r3, asr 31",
            "ldrgt r3, [sp, 0x14]",
            "mov r2, r8",
            "add r7, r7, r8",
            "orrgt r3, r3, 2",
            "strgt r3, [sp, 0x14]",
            "bl fcn.00009614",
            "str r7, [sp, 0xc]",
            "and sb, r5, 3",
            "mov r0, sp",
            "mov r1, sb",
            "bl fcn.00009700",
            "ldr r3, [sp]",
            "ldrb r5, [r3], 1",
            "str r3, [sp]",
            "ldr r0, [sp, 0x14]",
            "cmp r0, 0",
            "beq 0x9858",
            "ldr r3, [sp]",
            "ldr r2, [sp, 4]",
            "ldr r0, [sp, 0x14]",
            "cmp r3, r2",
            "rsbls r3, r3, r2",
            "movhi r3, 0",
            "str r3, [sl]",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [sp, 0xc]",
            "rsb r3, r3, r2",
            "str r3, [r4]",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "fcn.00009700": {
        "function_address": "0x00009700",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "ldr r7, [r0]",
            "mov r4, r0",
            "mov r2, 4",
            "ldr r3, [r0, 4]",
            "ldr r6, [r0, 0xc]",
            "rsb r3, r7, r3",
            "cmp r1, r3",
            "mov r1, r7",
            "bicgt r5, r3, r3, asr 31",
            "ldrgt r3, [r0, 0x14]",
            "add r7, r7, 4",
            "orrgt r3, r3, 1",
            "strgt r3, [r0, 0x14]",
            "ldr r3, [r0, 0x10]",
            "rsb r3, r6, r3",
            "cmp r5, r3",
            "bicgt r5, r3, r3, asr 31",
            "ldrgt r3, [r0, 0x14]",
            "sub r5, r5, 4",
            "orrgt r3, r3, 2",
            "strgt r3, [r0, 0x14]",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "cmp r5, 0",
            "add r6, r6, 4",
            "ble 0x9780",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "add r7, r7, r5",
            "add r5, r6, r5",
            "str r7, [r4]",
            "str r5, [r4, 0xc]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.000095bc": {
        "function_address": "0x000095bc",
        "instructions": [
            "mov r3, r0",
            "ands r0, r2, r1",
            "push {r4, lr}",
            "ldreq r4, [r3, 4]",
            "beq 0x95d8",
            "pop {r4, pc}",
            "add r0, r0, 0xff",
            "ldr ip, [r3]",
            "cmp ip, r4",
            "bhs 0x95f8",
            "ldrb r1, [ip], 1",
            "cmp r1, 0",
            "str ip, [r3]",
            "beq 0x95d4",
            "b 0x9608",
            "ldr r1, [r3, 0x14]",
            "orr r1, r1, 1",
            "str r1, [r3, 0x14]",
            "mov r1, 1",
            "add r0, r0, r1",
            "add r0, r0, r2",
            "pop {r4, pc}"
        ]
    },
    "fcn.00009614": {
        "function_address": "0x00009614",
        "instructions": [
            "cmp r1, 1",
            "rsb r3, r1, 0",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r7, r2",
            "add r6, r0, r3",
            "bgt 0x9640",
            "ldrb r1, [r0, r3]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b sym.imp.memset",
            "mov r1, r6",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "add r0, r4, 2",
            "add r1, r6, 2",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "sub r3, r7, 4",
            "cmp r3, 0",
            "pople {r4, r5, r6, r7, r8, sb, sl, pc}",
            "add r8, r6, 4",
            "add sl, r4, 4",
            "mov r1, r8",
            "mov r2, 2",
            "mov r0, sl",
            "sub r7, r7, 0xc",
            "bl sym.imp.memcpy",
            "add r1, r6, 6",
            "add r0, r4, 6",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "add r1, r8, 4",
            "mov r2, 2",
            "add r0, sl, 4",
            "bl sym.imp.memcpy",
            "add r0, r4, 0xa",
            "add r1, r6, 0xa",
            "mov r2, 2",
            "add r6, r6, 0xc",
            "bl sym.imp.memcpy",
            "cmp r7, 0",
            "addgt r4, r4, 0xc",
            "bgt 0x96e4",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, r4",
            "mov r2, r5",
            "add r4, r4, r5",
            "rsb r7, r5, r7",
            "lsl r5, r5, 1",
            "mov r1, r6",
            "bl sym.imp.memcpy",
            "cmp r7, r5",
            "bgt 0x96c8",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b sym.imp.memcpy"
        ]
    },
    "sym.av_set_int": {
        "function_address": "0x0000bf3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, lr}",
            "mov r4, 0",
            "sub sp, sp, 0x1c",
            "mov r8, r2",
            "mov sb, r3",
            "mov r2, r4",
            "mov r3, r4",
            "mov r7, r0",
            "mov r6, r1",
            "str r4, [sp]",
            "bl sym.av_opt_find",
            "mov r3, 1",
            "mov r5, r0",
            "str r3, [sp]",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r3, [0x0000bfa4]",
            "strd r8, sb, [sp, 8]",
            "str r4, [sp, 0x10]",
            "bl fcn.0000be08",
            "cmp r0, r4",
            "movge r0, r5",
            "movlt r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "fcn.0000be08": {
        "function_address": "0x0000be08",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x20",
            "mov r5, r3",
            "ldr r3, [sp, 0x40]",
            "mov r4, r2",
            "mov r2, 0",
            "mov r6, r0",
            "str r3, [sp]",
            "add r3, sp, 0x1c",
            "str r3, [sp, 4]",
            "mov r3, r2",
            "bl sym.av_opt_find2",
            "subs r1, r0, 0",
            "beq 0xbe74",
            "ldr r3, [sp, 0x1c]",
            "cmp r3, 0",
            "beq 0xbe74",
            "ldr r2, [r1, 8]",
            "ldr r0, [sp, 0x30]",
            "strd r4, r5, [sp]",
            "ldrd r4, r5, [sp, 0x38]",
            "add r2, r3, r2",
            "str r0, [sp, 8]",
            "mov r0, r6",
            "strd r4, r5, [sp, 0x10]",
            "bl fcn.0000a690",
            "b 0xbe78",
            "ldr r0, [0x0000be80]",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000a690": {
        "function_address": "0x0000a690",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r6, r2",
            "ldr r8, [sp, 0x58]",
            "mov r7, r1",
            "ldr r2, [sp, 0x5c]",
            "str r0, [sp, 0x14]",
            "ldr r0, [sp, 0x50]",
            "str r2, [sp, 0x10]",
            "bl fcn.0000f47c",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, r8",
            "ldr r1, [sp, 0x10]",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp, 0x48]",
            "bl fcn.0000f558",
            "ldrd r2, r3, [r7, 0x20]",
            "mov sl, r0",
            "mov fp, r1",
            "mov r0, r4",
            "mov r1, r5",
            "ldr sb, [0x0000a8b0]",
            "bl fcn.0000f558",
            "mov r2, sl",
            "mov r3, fp",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "add sb, pc, sb",
            "bne 0xa734",
            "ldrd r2, r3, [r7, 0x18]",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f558",
            "mov r2, sl",
            "mov r3, fp",
            "bl fcn.0000fae0",
            "cmp r0, 0",
            "beq 0xa774",
            "ldr r3, [0x0000a8b4]",
            "mov r2, r4",
            "mov r0, sl",
            "mov r1, fp",
            "add sb, sb, r3",
            "mov r3, r5",
            "bl fcn.0000f7c4",
            "strd r0, r1, [sp]",
            "mov r2, sb",
            "ldr r3, [r7]",
            "mov r1, 0x10",
            "ldr r0, [sp, 0x14]",
            "str r3, [sp, 8]",
            "bl sym.av_log",
            "mvn r0, 0x21",
            "b 0xa8a8",
            "ldr r3, [r7, 0xc]",
            "cmp r3, 6",
            "addls pc, pc, r3, lsl 2",
            "b 0xa8a4",
            "b 0xa7a0",
            "b 0xa7a0",
            "b 0xa7c0",
            "b 0xa810",
            "b 0xa7f0",
            "b 0xa8a4",
            "b 0xa82c",
            "mov r2, r4",
            "mov r3, r5",
            "ldrd r0, r1, [sp, 0x48]",
            "bl fcn.0000f7c4",
            "bl sym.imp.llrint",
            "mul r0, r8, r0",
            "str r0, [r6]",
            "b 0xa85c",
            "mov r2, r4",
            "mov r3, r5",
            "ldrd r0, r1, [sp, 0x48]",
            "bl fcn.0000f7c4",
            "bl sym.imp.llrint",
            "ldr r2, [sp, 0x10]",
            "mul r3, r0, r2",
            "mla r3, r8, r1, r3",
            "umull r8, sb, r0, r8",
            "add sb, r3, sb",
            "strd r8, sb, [r6]",
            "b 0xa85c",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000f7c4",
            "bl fcn.0000fba4",
            "str r0, [r6]",
            "b 0xa85c",
            "mov r0, sl",
            "mov r1, fp",
            "mov r2, r4",
            "mov r3, r5",
            "bl fcn.0000f7c4",
            "strd r0, r1, [r6]",
            "b 0xa85c",
            "ldrd r0, r1, [sp, 0x48]",
            "bl fcn.0000faf4",
            "bl fcn.0000f47c",
            "ldrd r2, r3, [sp, 0x48]",
            "bl fcn.0000fa90",
            "subs r8, r0, 0",
            "beq 0xa864",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000faf4",
            "ldr r3, [sp, 0x50]",
            "stm r6, {r0, r3}",
            "mov r0, 0",
            "b 0xa8a8",
            "add r7, sp, 0x18",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000f7c4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r7",
            "mov r1, 0x1000000",
            "str r1, [sp]",
            "bl sym.av_d2q",
            "ldm r7, {r0, r1}",
            "stm r6, {r0, r1}",
            "mov r0, r8",
            "b 0xa8a8",
            "mvn r0, 0x15",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_get_bytes_per_sample": {
        "function_address": "0x0000e350",
        "instructions": [
            "ldr r3, sym.av_sha_init",
            "cmp r0, 9",
            "add r3, pc, r3",
            "bhi 0xe37c",
            "ldr r2, [0x0000e388]",
            "add r3, r3, r2",
            "mov r2, 0x14",
            "mla r0, r2, r0, r3",
            "ldr r0, [r0, 8]",
            "asr r0, r0, 3",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.av_samples_alloc": {
        "function_address": "0x0000e54c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr r6, [sp, 0x38]",
            "mov sl, r0",
            "mov sb, r1",
            "mov r5, r2",
            "ldr r8, [sp, 0x3c]",
            "mov r1, r2",
            "mov r7, r3",
            "mov r2, r3",
            "mov r0, 0",
            "mov r3, r6",
            "str r8, [sp]",
            "bl sym.av_samples_get_buffer_size",
            "subs fp, r0, 0",
            "blt 0xe5cc",
            "bl sym.av_mallocz",
            "subs r4, r0, 0",
            "mvneq fp, 0xb",
            "beq 0xe5cc",
            "mov r0, sl",
            "mov r1, sb",
            "mov r2, r4",
            "mov r3, r5",
            "str r7, [sp]",
            "stmib sp, {r6, r8}",
            "bl sym.av_samples_fill_arrays",
            "subs fp, r0, 0",
            "movge fp, 0",
            "bge 0xe5cc",
            "mov r0, r4",
            "bl sym.av_free",
            "mov r0, fp",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_find_nearest_q_idx": {
        "function_address": "0x0000e094",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "add r3, sp, 8",
            "mov r4, 0",
            "mov r7, r2",
            "mov r5, r2",
            "stm r3, {r0, r1}",
            "mov r6, r4",
            "b 0xe0e8",
            "add r3, r7, r4, lsl 3",
            "ldm r3, {r0, r1}",
            "mov r3, sp",
            "stm r3, {r0, r1}",
            "add r3, sp, 8",
            "ldm r3, {r0, r1}",
            "ldm r5, {r2, r3}",
            "add r5, r5, 8",
            "bl sym.av_nearer_q",
            "cmp r0, 0",
            "movgt r4, r6",
            "add r6, r6, 1",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "bne 0xe0b8",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_nearer_q": {
        "function_address": "0x0000ded8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "ldr r4, [sp, 0x7c]",
            "add ip, sp, 0x48",
            "mov r6, r2",
            "stm ip, {r0, r1}",
            "add r1, sp, 0x40",
            "stm r1, {r2, r3}",
            "asr r3, r2, 0x1f",
            "mul r3, r4, r3",
            "mov r0, r4",
            "asr r1, r0, 0x1f",
            "ldr r5, [sp, 0x44]",
            "ldr r7, [sp, 0x78]",
            "umull r8, sb, r5, r7",
            "strd r0, r1, [sp, 0x18]",
            "mla r3, r6, r1, r3",
            "umull r0, r1, r4, r6",
            "strd r0, r1, [sp, 0x10]",
            "ldr ip, [sp, 0x4c]",
            "add r1, r3, r1",
            "mov r2, r5",
            "asr r3, r2, 0x1f",
            "strd r2, r3, [sp, 0x20]",
            "mov r2, r7",
            "asr r3, r2, 0x1f",
            "ldr r0, [sp, 0x24]",
            "mul r3, r5, r3",
            "str r1, [sp, 0x14]",
            "mla r3, r7, r0, r3",
            "mul r1, r4, r0",
            "ldr r0, [sp, 0x1c]",
            "add sb, r3, sb",
            "ldrd r2, r3, [sp, 0x10]",
            "mla r1, r5, r0, r1",
            "adds r2, r2, r8",
            "adc r3, r3, sb",
            "strd r2, r3, [sp, 0x28]",
            "umull r2, r3, r4, r5",
            "adds r2, r2, r2",
            "add r3, r1, r3",
            "adc r3, r3, r3",
            "mov r0, ip",
            "asr r1, r0, 0x1f",
            "mov fp, r3",
            "strd r0, r1, [sp, 0x30]",
            "str r3, [sp, 4]",
            "mov r3, 3",
            "mov sl, r2",
            "str r2, [sp]",
            "str r3, [sp, 8]",
            "ldrd r0, r1, [sp, 0x28]",
            "ldrd r2, r3, [sp, 0x30]",
            "bl sym.av_rescale_rnd",
            "mov r3, 2",
            "str r0, [sp, 0x38]",
            "str r1, [sp, 0x3c]",
            "stm sp, {sl, fp}",
            "str r3, [sp, 8]",
            "ldrd r0, r1, [sp, 0x28]",
            "ldrd r2, r3, [sp, 0x30]",
            "bl sym.av_rescale_rnd",
            "ldr r3, [sp, 0x48]",
            "mov ip, 1",
            "ldr r2, [sp, 0x3c]",
            "mov sl, r3",
            "asr fp, sl, 0x1f",
            "cmp r2, fp",
            "bgt 0xe000",
            "bne 0xdffc",
            "ldr r2, [sp, 0x38]",
            "cmp r2, r3",
            "bhi 0xe000",
            "mov ip, 0",
            "cmp fp, r1",
            "mov r2, 1",
            "bgt 0xe01c",
            "bne 0xe018",
            "cmp r3, r0",
            "bhi 0xe01c",
            "mov r2, 0",
            "ldrd r0, r1, [sp, 0x10]",
            "rsb r2, r2, ip",
            "subs r8, r8, r0",
            "sbc sb, sb, r1",
            "orrs r3, r8, sb",
            "beq 0xe058",
            "ldrd r0, r1, [sp, 0x20]",
            "ldrd r4, r5, [sp, 0x18]",
            "eor r1, r1, r5",
            "eor r0, r0, r4",
            "eor sb, sb, r1",
            "eor r8, r8, r0",
            "asr r6, sb, 0x1f",
            "orr r6, r6, 1",
            "b 0xe088",
            "cmp r5, 0",
            "beq 0xe06c",
            "cmp r4, 0",
            "movne r6, r3",
            "bne 0xe088",
            "cmp r7, 0",
            "beq 0xe084",
            "cmp r6, 0",
            "asrne r7, r7, 0x1f",
            "addne r6, r7, r6, lsr 31",
            "bne 0xe088",
            "mov r6, 0x80000000",
            "mul r0, r2, r6",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_rescale": {
        "function_address": "0x00009dd0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "ldrd r4, r5, [sp, 0x20]",
            "mov ip, 5",
            "str ip, [sp, 8]",
            "strd r4, r5, [sp]",
            "bl sym.av_rescale_rnd",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_rescale_rnd": {
        "function_address": "0x00009a90",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r2",
            "mvn r2, 0",
            "mov r7, r1",
            "adds r2, r2, r0",
            "mov r5, r3",
            "mvn r3, 0x80000000",
            "sub sp, sp, 0x24",
            "adc r3, r3, r7",
            "mov r6, r0",
            "cmn r3, 0x80000001",
            "ldrd r8, sb, [sp, 0x48]",
            "ldr r1, [sp, 0x50]",
            "bhi 0x9b04",
            "bne 0x9ad4",
            "cmn r2, 2",
            "bhi 0x9b04",
            "ubfx r3, r1, 1, 1",
            "mov r2, r4",
            "eor r1, r3, r1",
            "strd r8, sb, [sp]",
            "str r1, [sp, 8]",
            "mov r3, r5",
            "rsbs r0, r6, 0",
            "rsc r1, r7, 0",
            "bl sym.av_rescale_rnd",
            "rsbs r4, r0, 0",
            "rsc r5, r1, 0",
            "b 0x9dc0",
            "cmp r1, 5",
            "bne 0x9b24",
            "lsr r1, sb, 0x1f",
            "adds r2, r8, r1",
            "adc r3, sb, 0",
            "asrs r1, r3, 1",
            "rrx r0, r2",
            "b 0x9b4c",
            "tst r1, 1",
            "moveq r0, 0",
            "moveq r1, 0",
            "beq 0x9b4c",
            "mvn r2, 0",
            "mvn r3, 0",
            "adds r2, r2, r8",
            "adc r3, r3, sb",
            "strd r2, r3, [sp, 0x10]",
            "b 0x9b50",
            "strd r0, r1, [sp, 0x10]",
            "cmp sb, 0",
            "mov r0, 1",
            "bgt 0x9b68",
            "bne 0x9b6c",
            "cmn r8, 0x80000001",
            "bls 0x9b6c",
            "mov r0, 0",
            "cmp r5, 0",
            "mov r3, 1",
            "bgt 0x9b84",
            "bne 0x9b88",
            "cmn r4, 0x80000001",
            "bls 0x9b88",
            "mov r3, 0",
            "and r0, r0, r3",
            "uxtb r0, r0",
            "cmp r0, 0",
            "beq 0x9c54",
            "cmp r7, 0",
            "bgt 0x9be0",
            "bne 0x9bac",
            "cmn r6, 0x80000001",
            "bhi 0x9be0",
            "mul r3, r4, r7",
            "umull r0, r1, r4, r6",
            "mla r3, r6, r5, r3",
            "add r1, r3, r1",
            "ldrd r2, r3, [sp, 0x10]",
            "adds r0, r0, r2",
            "mov r2, r8",
            "adc r1, r1, r3",
            "mov r3, sb",
            "bl fcn.0000ff90",
            "mov r4, r0",
            "mov r5, r1",
            "b 0x9dc0",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.0000ff90",
            "mul r1, r2, r5",
            "mla r3, r3, r4, r1",
            "umull r0, r1, r2, r4",
            "add r1, r3, r1",
            "ldrd r2, r3, [sp, 0x10]",
            "adds r0, r0, r2",
            "mov r2, r8",
            "adc r1, r1, r3",
            "mov r3, sb",
            "bl fcn.0000ff90",
            "mov r3, sb",
            "mov sl, r0",
            "mov fp, r1",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, r8",
            "bl fcn.0000ff90",
            "mul r3, r0, r5",
            "mla r3, r1, r4, r3",
            "umull r4, r5, r0, r4",
            "adds r4, r4, sl",
            "add r5, r3, r5",
            "adc r5, r5, fp",
            "b 0x9dc0",
            "asr ip, r7, 0x1f",
            "mvn r2, 0",
            "and sl, r6, r2",
            "asr lr, r5, 0x1f",
            "str ip, [sp, 0x18]",
            "and r2, r2, r4",
            "ldr r4, [sp, 0x18]",
            "mov r3, 0",
            "str lr, [sp, 0x1c]",
            "and fp, r7, r3",
            "and r3, r3, r5",
            "mov r1, r7",
            "mov ip, r5",
            "mul lr, r2, r4",
            "ldr r4, [sp, 0x1c]",
            "mla lr, r7, r3, lr",
            "umull r6, r7, r2, r7",
            "add r7, lr, r7",
            "mul lr, r5, fp",
            "mla lr, r4, sl, lr",
            "umull r4, r5, r5, sl",
            "adds r4, r4, r6",
            "mov r6, r0",
            "add r5, lr, r5",
            "mul lr, r2, fp",
            "adc r5, r5, r7",
            "mov r7, r4",
            "mla lr, sl, r3, lr",
            "umull r2, r3, r2, sl",
            "adds sl, r0, r2",
            "ldr r0, [sp, 0x18]",
            "add r3, lr, r3",
            "adc fp, r4, r3",
            "mul lr, ip, r0",
            "ldr r0, [sp, 0x1c]",
            "mla lr, r1, r0, lr",
            "umull r0, r1, ip, r1",
            "ldr ip, [sp, 0x14]",
            "adds r2, r5, r0",
            "add r1, lr, r1",
            "adc r3, r6, r1",
            "cmp r4, fp",
            "movls r1, 0",
            "movhi r1, 1",
            "adds r2, r2, r1",
            "ldrd r0, r1, [sp, 0x10]",
            "adc r3, r3, 0",
            "adds sl, sl, r0",
            "mov r0, 1",
            "adc fp, fp, r1",
            "mov r1, 0",
            "cmp ip, fp",
            "bhi 0x9d40",
            "bne 0x9d38",
            "ldr lr, [sp, 0x10]",
            "cmp lr, sl",
            "bhi 0x9d40",
            "mov r0, 0",
            "mov r1, 0",
            "adds r0, r0, r2",
            "mov r6, 0x3f",
            "adc r1, r1, r3",
            "adds r2, r0, r0",
            "mov r0, sl",
            "adc r3, r1, r1",
            "mov r1, fp",
            "strd r2, r3, [sp, 0x10]",
            "mov r2, r6",
            "bl fcn.0000f168",
            "mov r2, 1",
            "mov r3, 0",
            "and r0, r0, r2",
            "and r1, r1, r3",
            "ldrd r2, r3, [sp, 0x10]",
            "adds r0, r0, r2",
            "adc r1, r1, r3",
            "adds r4, r4, r4",
            "adc r5, r5, r5",
            "cmp sb, r1",
            "bhi 0x9db8",
            "bne 0x9da0",
            "cmp r8, r0",
            "bhi 0x9db8",
            "mov r2, 1",
            "subs r0, r0, r8",
            "sbc r1, r1, sb",
            "mov r3, 0",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "subs r6, r6, 1",
            "bhs 0x9d4c",
            "mov r0, r4",
            "mov r1, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_opt_set_int": {
        "function_address": "0x0000bf0c",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "mov ip, 1",
            "strd r2, r3, [sp, 8]",
            "mov r2, 0",
            "ldr r3, [sp, 0x20]",
            "str ip, [sp]",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x0000bf38]",
            "bl fcn.0000be08",
            "add sp, sp, 0x1c",
            "ldm sp!, {pc}"
        ]
    },
    "sym.av_set_q": {
        "function_address": "0x0000bfa8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x24",
            "mov r4, 0",
            "add ip, sp, 0x18",
            "mov r5, r1",
            "mov r6, r0",
            "stm ip, {r2, r3}",
            "mov r2, r4",
            "mov r3, r4",
            "str r4, [sp]",
            "bl sym.av_opt_find",
            "mov r7, r0",
            "ldr r0, [sp, 0x18]",
            "bl fcn.0000f47c",
            "mov r3, r1",
            "ldr r1, [sp, 0x1c]",
            "mov r2, r0",
            "mov r0, 1",
            "str r4, [sp, 0x10]",
            "str r1, [sp]",
            "mov r1, 0",
            "strd r0, r1, [sp, 8]",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.0000be08",
            "cmp r0, r4",
            "movge r0, r7",
            "movlt r0, r4",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_get_channel_layout": {
        "function_address": "0x000047d4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr r5, [0x000049bc]",
            "sub sp, sp, 0x1c",
            "add fp, sp, 0x14",
            "ldr r7, [0x000049c0]",
            "bl sym.imp.strlen",
            "add r5, pc, r5",
            "add sb, r4, r0",
            "mov r1, 0",
            "mov r0, 0",
            "strd r0, r1, [sp, 8]",
            "add r7, r5, r7",
            "b 0x4990",
            "cmp r3, sb",
            "mov r8, r3",
            "bhs 0x4830",
            "mov r8, r3",
            "ldrb r2, [r3], 1",
            "cmp r2, 0x2b",
            "beq 0x4830",
            "cmp r2, 0x7c",
            "bne 0x480c",
            "rsb r5, r4, r8",
            "mov r6, 0",
            "ldr r3, [r7, r6, lsl 4]",
            "lsl sl, r6, 4",
            "mov r0, r3",
            "str r3, [sp, 4]",
            "bl sym.imp.strlen",
            "cmp r0, r5",
            "ldr r3, [sp, 4]",
            "bne 0x4878",
            "mov r0, r3",
            "mov r1, r4",
            "mov r2, r5",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "addeq sl, r7, sl",
            "ldrdeq r2, r3, [sl, 8]",
            "beq 0x4974",
            "add r6, r6, 1",
            "cmp r6, 0xc",
            "bne 0x4838",
            "add sl, r7, 0xcc",
            "mov r6, 0",
            "ldr r3, [sl, 4]!",
            "cmp r3, 0",
            "beq 0x48dc",
            "mov r0, r3",
            "str r3, [sp, 4]",
            "bl sym.imp.strlen",
            "cmp r0, r5",
            "ldr r3, [sp, 4]",
            "bne 0x48dc",
            "mov r0, r3",
            "mov r1, r4",
            "mov r2, r5",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x48dc",
            "mov r2, r6",
            "mov r0, 1",
            "mov r1, 0",
            "bl fcn.0000f184",
            "b 0x4928",
            "add r6, r6, 1",
            "cmp r6, 0x1f",
            "bne 0x488c",
            "mov r2, 0xa",
            "mov r0, r4",
            "mov r1, fp",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 0x14]",
            "rsb r2, r4, r3",
            "cmp r2, r5",
            "beq 0x4924",
            "add r2, r3, 1",
            "rsb r2, r4, r2",
            "cmp r2, r5",
            "bne 0x4938",
            "ldrb r3, [r3]",
            "cmp r3, 0x63",
            "bne 0x4938",
            "bl sym.av_get_default_channel_layout",
            "mov r4, r0",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x4974",
            "mov r0, r4",
            "mov r1, fp",
            "mov r2, 0",
            "bl sym.imp.strtoll",
            "ldr r3, [sp, 0x14]",
            "rsb r4, r4, r3",
            "cmp r4, r5",
            "bne 0x496c",
            "cmp r1, 0",
            "mov r4, r0",
            "mov r2, r0",
            "mov r3, r1",
            "bge 0x4974",
            "mov r2, 0",
            "mov r3, 0",
            "orrs r1, r2, r3",
            "beq 0x49a4",
            "ldrd r0, r1, [sp, 8]",
            "add r4, r8, 1",
            "orr r0, r0, r2",
            "orr r1, r1, r3",
            "strd r0, r1, [sp, 8]",
            "cmp r4, sb",
            "movlo r3, r4",
            "blo 0x4818",
            "ldrd r2, r3, [sp, 8]",
            "b 0x49ac",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, r2",
            "mov r1, r3",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00003a38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2bc]!"
        ]
    },
    "sym.av_get_default_channel_layout": {
        "function_address": "0x00004770",
        "instructions": [
            "ldr r3, [0x000047cc]",
            "mov r2, 0",
            "ldr ip, [0x000047d0]",
            "mov r1, r2",
            "add r3, pc, r3",
            "add r3, r3, ip",
            "b 0x47ac",
            "add ip, r3, r2",
            "add r2, r2, 0x10",
            "ldr ip, [ip, 4]",
            "cmp r0, ip",
            "addeq r3, r3, r1, lsl 4",
            "ldrdeq r2, r3, [r3, 8]",
            "beq 0x47c0",
            "add r1, r1, 1",
            "ldr ip, [r3, r2]",
            "cmp ip, 0",
            "bne 0x478c",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, r2",
            "mov r1, r3",
            "bx lr"
        ]
    },
    "sym.imp.strtoll": {
        "function_address": "0x00003aa4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x274]!"
        ]
    },
    "sym.av_tree_destroy": {
        "function_address": "0x0000ee14",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "ldr r0, [r4]",
            "bl sym.av_tree_destroy",
            "ldr r0, [r4, 4]",
            "bl sym.av_tree_destroy",
            "mov r0, r4",
            "pop {r4, lr}",
            "b sym.av_free"
        ]
    },
    "sym.av_fifo_space": {
        "function_address": "0x00007860",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "ldr r4, [r0, 0xc]",
            "rsb r4, r3, r4",
            "bl sym.av_fifo_size",
            "rsb r0, r0, r4",
            "pop {r4, pc}"
        ]
    },
    "sym.av_fifo_size": {
        "function_address": "0x00007850",
        "instructions": [
            "ldr r2, [r0, 0x14]",
            "ldr r3, [r0, 0x10]",
            "rsb r0, r3, r2",
            "bx lr"
        ]
    },
    "sym.av_image_copy_plane": {
        "function_address": "0x0000834c",
        "instructions": [
            "cmp r0, 0",
            "cmpne r2, 0",
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "ldr r8, [sp, 0x20]",
            "mov r4, r1",
            "mov sl, r3",
            "mov r6, r2",
            "ldr r7, [sp, 0x24]",
            "mov r5, r0",
            "bne 0x8394",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r0, r5",
            "mov r1, r6",
            "add r5, r5, r4",
            "add r6, r6, sl",
            "sub r7, r7, 1",
            "mov r2, r8",
            "bl sym.imp.memcpy",
            "cmp r7, 0",
            "bgt 0x8378",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_evaluate_lls": {
        "function_address": "0x00009078",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, lr}",
            "add r5, r2, 0x22",
            "mov r6, r2",
            "mov r7, r1",
            "add r5, r0, r5, lsl 8",
            "mov r8, 0",
            "mov sb, 0",
            "mov r4, 0",
            "b 0x90c8",
            "ldrd r2, r3, [r5, 8]!",
            "add r4, r4, 1",
            "ldrd r0, r1, [r7], 8",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f1ac",
            "mov r8, r0",
            "mov sb, r1",
            "cmp r4, r6",
            "ble 0x909c",
            "mov r0, r8",
            "mov r1, sb",
            "pop {r3, r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "sym.av_opt_set_double": {
        "function_address": "0x0000bedc",
        "instructions": [
            "push {r4, r5, lr}",
            "mov ip, 1",
            "sub sp, sp, 0x1c",
            "mov r4, 1",
            "mov r5, 0",
            "str ip, [sp]",
            "ldr ip, [sp, 0x28]",
            "strd r4, r5, [sp, 8]",
            "str ip, [sp, 0x10]",
            "bl fcn.0000be08",
            "add sp, sp, 0x1c",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_opt_get_q": {
        "function_address": "0x0000b62c",
        "instructions": [
            "push {r4, r5, r6, r8, sb, lr}",
            "mov r4, 1",
            "sub sp, sp, 0x30",
            "mov r5, 0",
            "mov r6, r3",
            "mov r3, 1",
            "strd r4, r5, [sp, 0x20]",
            "mov r4, 0",
            "str r3, [sp, 0x2c]",
            "add r3, sp, 0x2c",
            "ldr r5, [0x0000b734]",
            "str r3, [sp]",
            "add r3, sp, 0x20",
            "str r3, [sp, 4]",
            "add r3, sp, 0x18",
            "str r2, [sp, 8]",
            "mov r2, 0",
            "strd r4, r5, [sp, 0x18]",
            "bl fcn.0000b5a0",
            "cmp r0, 0",
            "blt 0xb72c",
            "ldrd r8, sb, [sp, 0x18]",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "beq 0xb6c4",
            "ldr r1, [sp, 0x20]",
            "ldr r0, [sp, 0x24]",
            "mov r2, r1",
            "asr r3, r2, 0x1f",
            "cmp r3, r0",
            "ldreq r3, [sp, 0x2c]",
            "streq r1, [r6]",
            "streq r3, [r6, 4]",
            "beq 0xb728",
            "ldrd r0, r1, [sp, 0x20]",
            "add r4, sp, 0x10",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f558",
            "mov r8, r0",
            "mov sb, r1",
            "ldr r0, [sp, 0x2c]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f7c4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, 0x1000000",
            "str r1, [sp]",
            "bl sym.av_d2q",
            "ldm r4, {r0, r1}",
            "stm r6, {r0, r1}",
            "mov r0, 0",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r8, sb, pc}"
        ]
    },
    "sym.av_strtod": {
        "function_address": "0x000067a8",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov sl, r0",
            "ldrb r3, [r0]",
            "mov r7, r1",
            "ldr r8, [0x0000691c]",
            "cmp r3, 0x30",
            "add r8, pc, r8",
            "bne 0x67ec",
            "ldrb r3, [r0, 1]",
            "orr r3, r3, 0x20",
            "cmp r3, 0x78",
            "bne 0x67ec",
            "add r1, sp, 4",
            "mov r2, 0x10",
            "bl sym.imp.strtoul",
            "bl fcn.0000f458",
            "b 0x67f8",
            "mov r0, sl",
            "add r1, sp, 4",
            "bl sym.imp.strtod",
            "ldr r6, [sp, 4]",
            "mov r4, r0",
            "mov r5, r1",
            "cmp r6, sl",
            "beq 0x6900",
            "ldrb r3, [r6]",
            "sub r2, r3, 0x45",
            "uxtb r2, r2",
            "cmp r2, 0x35",
            "bhi 0x68cc",
            "ldr r2, [0x00006920]",
            "add r8, r8, r2",
            "add r3, r8, r3",
            "ldrsb r0, [r3, -0x45]",
            "cmp r0, 0",
            "beq 0x68cc",
            "ldrb r3, [r6, 1]",
            "add r8, r6, 1",
            "cmp r3, 0x69",
            "bne 0x6894",
            "bl fcn.0000f47c",
            "ldr r2, [0x00006924]",
            "add r6, r6, 2",
            "ldr r3, [0x00006928]",
            "bl fcn.0000f7c4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, 0",
            "mov r1, 0x40000000",
            "bl sym.imp.pow",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f558",
            "str r6, [sp, 4]",
            "mov r4, r0",
            "mov r5, r1",
            "b 0x68cc",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, 0",
            "ldr r1, [0x0000692c]",
            "bl sym.imp.pow",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "str r8, [sp, 4]",
            "ldr r6, [sp, 4]",
            "ldrb r3, [r6]",
            "cmp r3, 0x42",
            "bne 0x6900",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r3, [0x00006930]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "add r6, r6, 1",
            "str r6, [sp, 4]",
            "cmp r7, 0",
            "mov r0, r4",
            "ldrne r3, [sp, 4]",
            "mov r1, r5",
            "strne r3, [r7]",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.0000f458": {
        "function_address": "0x0000f458",
        "instructions": [
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "mov r5, 0",
            "mov r1, 0",
            "b 0xf2f4"
        ]
    },
    "sym.av_stristart": {
        "function_address": "0x00004a10",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r2",
            "mov r7, r1",
            "mov r6, r0",
            "mov r8, r7",
            "ldrb r5, [r7], 1",
            "mov sl, r6",
            "cmp r5, 0",
            "beq 0x4a50",
            "mov r0, r5",
            "bl sym.imp.toupper",
            "mov sb, r0",
            "ldrb r0, [r6], 1",
            "bl sym.imp.toupper",
            "cmp sb, r0",
            "beq 0x4a20",
            "rsbs r5, r5, 1",
            "movlo r5, 0",
            "cmp r4, 0",
            "moveq r5, 0",
            "cmp r5, 0",
            "strne sl, [r4]",
            "ldrb r0, [r8]",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.imp.toupper": {
        "function_address": "0x0000387c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3e4]!"
        ]
    },
    "sym.av_opt_ptr": {
        "function_address": "0x0000c660",
        "instructions": [
            "push {r0, r1, r2, r3, r4, lr}",
            "mov ip, 0",
            "add r3, sp, 0x10",
            "mov r4, r1",
            "mov r1, 2",
            "str r0, [r3, -4]!",
            "mov r0, r3",
            "str r1, [sp]",
            "mov r3, ip",
            "mov r1, r2",
            "mov r2, ip",
            "str ip, [sp, 4]",
            "bl sym.av_opt_find2",
            "cmp r0, 0",
            "ldrne r0, [r0, 8]",
            "addne r0, r4, r0",
            "add sp, sp, 0x10",
            "pop {r4, pc}"
        ]
    },
    "sym.av_image_check_size": {
        "function_address": "0x000081b4",
        "instructions": [
            "ldr ip, [0x0000822c]",
            "cmp r1, 0",
            "cmpgt r0, 0",
            "push {r4, r5, lr}",
            "sub sp, sp, 0x1c",
            "ldr r4, [0x00008230]",
            "add ip, pc, ip",
            "str r3, [sp, 0x14]",
            "mov r3, r0",
            "add r4, ip, r4",
            "str r2, [sp, 0x10]",
            "str r4, [sp, 0xc]",
            "ble 0x8208",
            "add r4, r1, 0x80",
            "add r2, r0, 0x80",
            "umull r4, r5, r4, r2",
            "cmp r5, 0",
            "bne 0x8208",
            "cmn r4, 0xf0000002",
            "movls r0, r5",
            "bls 0x8224",
            "ldr r2, [0x00008234]",
            "add r0, sp, 0xc",
            "str r1, [sp]",
            "mov r1, 0x10",
            "add r2, ip, r2",
            "bl sym.av_log",
            "mvn r0, 0x15",
            "add sp, sp, 0x1c",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_opt_set_q": {
        "function_address": "0x0000be84",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x24",
            "mov r4, r1",
            "add r1, sp, 0x18",
            "mov r5, r0",
            "mov r0, r2",
            "stm r1, {r2, r3}",
            "bl fcn.0000f47c",
            "mov r3, r1",
            "ldr r1, [sp, 0x1c]",
            "mov r2, r0",
            "mov r0, 1",
            "str r1, [sp]",
            "mov r1, 0",
            "strd r0, r1, [sp, 8]",
            "mov r0, r5",
            "ldr r1, [sp, 0x30]",
            "str r1, [sp, 0x10]",
            "mov r1, r4",
            "bl fcn.0000be08",
            "add sp, sp, 0x24",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_get_string": {
        "function_address": "0x0000af00",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, r3",
            "mov r8, r2",
            "mov r3, 1",
            "mov r2, 0",
            "mov r6, r0",
            "str r3, [sp]",
            "mov r3, r2",
            "ldr r5, [0x0000b0c8]",
            "ldr r7, [sp, 0x28]",
            "bl sym.av_opt_find",
            "cmp r0, 0",
            "add r5, pc, r5",
            "moveq r4, r0",
            "beq 0xb0c0",
            "ldr r2, [r0, 0xc]",
            "cmp r2, 5",
            "beq 0xaf54",
            "cmp r4, 0",
            "cmpne r7, 0",
            "beq 0xb0bc",
            "ldr r3, [r0, 8]",
            "cmp r8, 0",
            "strne r0, [r8]",
            "cmp r2, 4",
            "add r1, r6, r3",
            "beq 0xaff8",
            "bhi 0xaf90",
            "cmp r2, 1",
            "beq 0xafc4",
            "blo 0xafb4",
            "cmp r2, 2",
            "beq 0xafe0",
            "cmp r2, 3",
            "bne 0xb0bc",
            "b 0xb01c",
            "cmp r2, 6",
            "beq 0xb024",
            "ldrlo r4, [r6, r3]",
            "blo 0xb0c0",
            "cmp r2, 7",
            "beq 0xb068",
            "cmp r2, 0x80",
            "bne 0xb0bc",
            "b 0xb048",
            "mov r0, r4",
            "mov r1, r7",
            "ldr r2, [0x0000b0cc]",
            "b 0xafd0",
            "ldr r2, [0x0000b0d0]",
            "mov r0, r4",
            "mov r1, r7",
            "add r2, r5, r2",
            "ldr r3, [r6, r3]",
            "bl sym.imp.snprintf",
            "b 0xb0c0",
            "ldrd r2, r3, [r3, r6]",
            "mov r0, r4",
            "mov r1, r7",
            "strd r2, r3, [sp]",
            "ldr r2, [0x0000b0d4]",
            "b 0xb05c",
            "ldr r2, [0x0000b0d8]",
            "ldr r0, [r6, r3]",
            "add r5, r5, r2",
            "bl fcn.0000f4a4",
            "mov r2, r5",
            "strd r0, r1, [sp]",
            "mov r0, r4",
            "mov r1, r7",
            "b 0xb060",
            "ldrd r2, r3, [r3, r6]",
            "b 0xb04c",
            "ldr r2, [r1, 4]",
            "mov r0, r4",
            "mov r1, r7",
            "str r2, [sp]",
            "ldr r2, [0x0000b0dc]",
            "ldr r3, [r6, r3]",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "b 0xb0c0",
            "ldrd r2, r3, [r0, 0x10]",
            "strd r2, r3, [sp]",
            "mov r0, r4",
            "ldr r2, [0x0000b0d8]",
            "mov r1, r7",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "b 0xb0c0",
            "ldr r8, [r1, 4]",
            "add r7, r7, 1",
            "add r7, r7, r7, lsr 31",
            "cmp r8, r7, asr 1",
            "bge 0xb0bc",
            "ldr sl, [r6, r3]",
            "mov r7, r4",
            "ldr r3, [0x0000b0e0]",
            "mov r6, 0",
            "add r5, r5, r3",
            "b 0xb0b0",
            "mov r0, r7",
            "ldrb r3, [sl, r6]",
            "add r7, r7, 2",
            "add r6, r6, 1",
            "mov r1, 3",
            "mov r2, r5",
            "bl sym.imp.snprintf",
            "cmp r6, r8",
            "blt 0xb094",
            "b 0xb0c0",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_set_options_string": {
        "function_address": "0x0000c2ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r5, r1, 0",
            "ldr r6, [0x0000c458]",
            "sub sp, sp, 0x1c",
            "mov r7, r0",
            "mov sb, r2",
            "str r1, [sp, 0x14]",
            "add r6, pc, r6",
            "str r3, [sp, 8]",
            "beq 0xc44c",
            "ldr r3, [0x0000c45c]",
            "mov sl, 0",
            "add fp, sp, 0x14",
            "mov r8, r6",
            "add r3, r6, r3",
            "str r3, [sp, 0xc]",
            "ldr r3, [0x0000c460]",
            "add r3, r6, r3",
            "str r3, [sp, 0x10]",
            "b 0xc438",
            "mov r0, fp",
            "mov r1, sb",
            "bl sym.av_get_token",
            "ldrb r3, [r0]",
            "mov r4, r0",
            "cmp r3, 0",
            "beq 0xc3c8",
            "ldr r5, [sp, 0x14]",
            "mov r1, sb",
            "mov r0, r5",
            "bl sym.imp.strspn",
            "cmp r0, 0",
            "beq 0xc3c8",
            "add r5, r5, 1",
            "ldr r1, [sp, 8]",
            "mov r0, fp",
            "str r5, [sp, 0x14]",
            "bl sym.av_get_token",
            "mov r6, r0",
            "mov r1, 0x30",
            "mov r0, r7",
            "ldr r2, [sp, 0xc]",
            "mov r3, r6",
            "str r4, [sp]",
            "bl sym.av_log",
            "mov r3, 0",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, r6",
            "bl sym.av_opt_set",
            "ldr r3, [0x0000c464]",
            "mov r5, r0",
            "cmp r0, r3",
            "bne 0xc408",
            "b 0xc3f4",
            "ldr r2, [0x0000c468]",
            "mov r0, r7",
            "mov r1, 0x10",
            "mov r3, r4",
            "mov r6, r8",
            "mvn r5, 0x15",
            "add r2, r8, r2",
            "bl sym.av_log",
            "mov r0, r4",
            "bl sym.av_free",
            "b 0xc44c",
            "mov r0, r7",
            "mov r1, 0x10",
            "ldr r2, [sp, 0x10]",
            "mov r3, r4",
            "bl sym.av_log",
            "mov r0, r4",
            "bl sym.av_free",
            "mov r0, r6",
            "bl sym.av_free",
            "cmp r5, 0",
            "blt 0xc44c",
            "ldr r3, [sp, 0x14]",
            "add sl, sl, 1",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "addne r3, r3, 1",
            "strne r3, [sp, 0x14]",
            "ldr r3, [sp, 0x14]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0xc33c",
            "mov r5, sl",
            "mov r0, r5",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_dbl2ext": {
        "function_address": "0x000088e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "add sl, sp, 8",
            "strd r2, r3, [sp]",
            "mov r1, 0",
            "mov r2, 0xa",
            "mov r8, r0",
            "mov r0, sl",
            "bl sym.imp.memset",
            "add r2, sp, 0x14",
            "ldrd r0, r1, [sp]",
            "bl sym.imp.frexp",
            "bic r6, r1, 0x80000000",
            "mov r2, 0",
            "mov r1, r6",
            "ldr r3, [0x00008a48]",
            "mov r7, r0",
            "bl fcn.0000facc",
            "cmp r0, 0",
            "beq 0x89b4",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r3, [0x00008a4c]",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "beq 0x89b4",
            "ldr r5, [sp, 0x14]",
            "mov r1, r6",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl sym.imp.ldexp",
            "add r5, r5, 0x3fc0",
            "mov r6, 0",
            "add r5, r5, 0x3e",
            "ubfx r4, r5, 8, 8",
            "uxtb r5, r5",
            "bl sym.imp.__aeabi_d2ulz",
            "mov sb, r0",
            "mov fp, r1",
            "lsl r2, r6, 3",
            "add r7, sl, r6",
            "mov r0, sb",
            "mov r1, fp",
            "rsb r2, r2, 0x38",
            "add r6, r6, 1",
            "bl fcn.0000f168",
            "cmp r6, 8",
            "strb r0, [r7, 2]",
            "bne 0x8988",
            "b 0x8a0c",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "movne r5, 0",
            "movne r4, r5",
            "bne 0x8a0c",
            "ldr r3, [0x00008a50]",
            "mov r0, r7",
            "mov r1, r6",
            "mvn r2, 0",
            "bl fcn.0000fae0",
            "cmp r0, 0",
            "mov r4, 1",
            "moveq r4, r0",
            "mov r5, 0xff",
            "tst r4, 0xff",
            "mov r4, 0x7f",
            "mvneq r3, 0",
            "strbeq r3, [sp, 0xa]",
            "ldrd r0, r1, [sp]",
            "mov r3, 0",
            "mov r2, 0",
            "bl fcn.0000faa4",
            "cmp r0, 0",
            "add r1, sp, 8",
            "orrne r4, r4, 0x80",
            "mov r0, r8",
            "mov r2, 0xa",
            "bl sym.imp.memcpy",
            "strb r4, [r8]",
            "mov r0, r8",
            "strb r5, [r8, 1]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_base64_decode": {
        "function_address": "0x00004ebc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r0",
            "ldr r4, [0x00005048]",
            "add r6, r0, r2",
            "mov r7, r1",
            "mov r8, r0",
            "ldr sl, [0x0000504c]",
            "add r4, pc, r4",
            "add sl, r4, sl",
            "b 0x4f40",
            "ldrb r3, [r7]",
            "ldrb r3, [sl, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "ldrb r2, [r7, 1]",
            "ldrb r2, [sl, r2]",
            "tst r2, 0x80",
            "bne 0x5034",
            "add r2, r2, r3, lsl 6",
            "ldrb r3, [r7, 2]",
            "ldrb r3, [sl, r3]",
            "tst r3, 0x80",
            "bne 0x5028",
            "add r2, r3, r2, lsl 6",
            "ldrb r3, [r7, 3]",
            "ldrb r3, [sl, r3]",
            "tst r3, 0x80",
            "bne 0x501c",
            "add r2, r3, r2, lsl 6",
            "add r7, r7, 4",
            "lsl r0, r2, 8",
            "bl fcn.00004eb4",
            "str r0, [r8], 3",
            "rsb r3, r8, r6",
            "cmp r3, 3",
            "bgt 0x4ee4",
            "cmp r6, r8",
            "beq 0x4fcc",
            "ldr r1, [0x0000504c]",
            "ldrb r3, [r7]",
            "add r1, r4, r1",
            "ldrb r3, [r1, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "ldrb r2, [r7, 1]",
            "ldrb r2, [r1, r2]",
            "tst r2, 0x80",
            "bne 0x5034",
            "add r2, r2, r3, lsl 6",
            "ldrb r3, [r7, 2]",
            "ldrb r3, [r1, r3]",
            "tst r3, 0x80",
            "bne 0x5028",
            "add r2, r3, r2, lsl 6",
            "ldrb r3, [r7, 3]",
            "ldrb r3, [r1, r3]",
            "tst r3, 0x80",
            "bne 0x501c",
            "add r2, r3, r2, lsl 6",
            "lsr r3, r2, 0x10",
            "strb r3, [r8], 1",
            "cmp r6, r8",
            "beq 0x4fc8",
            "lsr r3, r2, 8",
            "strb r3, [r8], 1",
            "cmp r6, r8",
            "strbne r2, [r8], 1",
            "add r7, r7, 4",
            "ldr r3, [0x0000504c]",
            "add r4, r4, r3",
            "ldrb r3, [r7]",
            "ldrb r3, [r4, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "ldrb r3, [r7, 1]",
            "ldrb r3, [r4, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "ldrb r3, [r7, 2]",
            "ldrb r3, [r4, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "ldrb r3, [r7, 3]",
            "ldrb r3, [r4, r3]",
            "tst r3, 0x80",
            "bne 0x5038",
            "add r7, r7, 4",
            "b 0x4fd4",
            "lsr r1, r2, 0xa",
            "lsl r2, r2, 2",
            "strb r1, [r8], 1",
            "lsr r2, r2, 4",
            "strb r2, [r8], 1",
            "b 0x5038",
            "mov r3, r2",
            "tst r3, 1",
            "rsbeq r0, r5, r8",
            "mvnne r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00004eb4": {
        "function_address": "0x00004eb4",
        "instructions": [
            "rev r0, r0",
            "bx lr"
        ]
    },
    "sym.av_dict_free": {
        "function_address": "0x00005c84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r4, [r0]",
            "cmp r4, 0",
            "bne 0x5cb8",
            "b 0x5cd4",
            "ldr r3, [r4, 4]",
            "ldr r0, [r3, r2, lsl 3]",
            "bl sym.av_free",
            "ldm r4, {r2, r3}",
            "add r3, r3, r2, lsl 3",
            "ldr r0, [r3, 4]",
            "bl sym.av_free",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "sub r2, r3, 1",
            "str r2, [r4]",
            "bne 0x5c9c",
            "ldr r0, [r4, 4]",
            "bl sym.av_free",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b sym.av_freep"
        ]
    },
    "sym.av_get_pix_fmt_string": {
        "function_address": "0x0000d664",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r7, r8, lr}",
            "cmp r2, 0",
            "ldr r5, [0x0000d6d0]",
            "mov r4, r0",
            "mov r7, r1",
            "add r5, pc, r5",
            "bge 0xd690",
            "ldr r2, [0x0000d6d4]",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "b 0xd6c8",
            "ldr r3, [0x0000d6d8]",
            "ldr r0, [r5, r3]",
            "ldr r6, [r0, r2, lsl 4]",
            "add r0, r0, r2, lsl 4",
            "ldrb r8, [r0, 4]",
            "bl sym.av_get_bits_per_pixel",
            "ldr r2, [0x0000d6dc]",
            "mov r1, r7",
            "str r0, [sp, 4]",
            "mov r3, r6",
            "mov r0, r4",
            "str r8, [sp]",
            "add r2, r5, r2",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "pop {r2, r3, r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_get_bits_per_pixel": {
        "function_address": "0x0000d60c",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r2, 0",
            "ldrb r3, [r0, 5]",
            "ldrb r1, [r0, 6]",
            "ldrb ip, [r0, 4]",
            "add r1, r1, r3",
            "mov r3, r2",
            "b 0xd654",
            "add r5, r0, r3, lsl 1",
            "sub r4, r3, 1",
            "cmp r4, 1",
            "ldrb r5, [r5, 9]",
            "movhi r4, r1",
            "movls r4, 0",
            "add r3, r3, 1",
            "ubfx r5, r5, 3, 4",
            "add r5, r5, 1",
            "add r2, r2, r5, lsl r4",
            "cmp r3, ip",
            "blt 0xd62c",
            "asr r0, r2, r1",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_opt_flag_is_set": {
        "function_address": "0x0000b874",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}",
            "mov r4, r2",
            "mov r2, 0",
            "mov r6, 0",
            "mov r3, r2",
            "mov r7, r0",
            "str r2, [sp]",
            "mov r8, r1",
            "bl sym.av_opt_find",
            "subs r5, r0, 0",
            "mov r1, r4",
            "ldrne r2, [r5, 0x2c]",
            "moveq r2, r5",
            "mov r0, r7",
            "mov r3, r6",
            "str r6, [sp]",
            "bl sym.av_opt_find",
            "cmp r5, r6",
            "cmpne r0, r6",
            "mov r4, r0",
            "movne r5, 0",
            "moveq r5, 1",
            "moveq r5, r6",
            "beq 0xb90c",
            "ldr r3, [r0, 0xc]",
            "cmp r3, 0x80",
            "bne 0xb90c",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, r5",
            "add r3, sp, 8",
            "bl sym.av_opt_get_int",
            "cmp r0, r6",
            "blt 0xb90c",
            "ldrd r0, r1, [r4, 0x10]",
            "bl fcn.0000faf4",
            "ldr r5, [sp, 8]",
            "and r5, r0, r5",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_opt_get_int": {
        "function_address": "0x0000b7d4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, 1",
            "sub sp, sp, 0x28",
            "mov r5, 0",
            "mov r6, r3",
            "mov r3, 1",
            "strd r4, r5, [sp, 0x18]",
            "mov r4, 0",
            "str r3, [sp, 0x24]",
            "add r3, sp, 0x24",
            "ldr r5, [0x0000b870]",
            "str r3, [sp]",
            "add r3, sp, 0x18",
            "str r3, [sp, 4]",
            "add r3, sp, 0x10",
            "str r2, [sp, 8]",
            "mov r2, 0",
            "strd r4, r5, [sp, 0x10]",
            "bl fcn.0000b5a0",
            "cmp r0, 0",
            "blt 0xb868",
            "ldrd r0, r1, [sp, 0x18]",
            "bl fcn.0000f4f8",
            "ldrd r2, r3, [sp, 0x10]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x24]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "bl sym.imp.__aeabi_d2lz",
            "strd r0, r1, [r6]",
            "mov r0, 0",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_asprintf": {
        "function_address": "0x00004bb4",
        "instructions": [
            "push {r0, r1, r2, r3}",
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r0, 0",
            "add r4, sp, 0x1c",
            "mov r1, r0",
            "mov r3, r4",
            "ldr r5, [sp, 0x18]",
            "str r0, [sp, 4]",
            "str r4, [sp]",
            "mov r2, r5",
            "bl sym.imp.vsnprintf",
            "cmp r0, 0",
            "blt 0x4c24",
            "add r6, r0, 1",
            "mov r0, r6",
            "bl sym.av_malloc",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "beq 0x4c24",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, r4",
            "str r4, [sp]",
            "bl sym.imp.vsnprintf",
            "cmp r0, 0",
            "bge 0x4c24",
            "add r0, sp, 4",
            "bl sym.av_freep",
            "ldr r0, [sp, 4]",
            "pop {r2, r3, r4, r5, r6, lr}",
            "add sp, sp, 0x10",
            "bx lr"
        ]
    },
    "sym.av_init_lls": {
        "function_address": "0x00008bb4",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "movw r2, 0x4310",
            "mov r5, r1",
            "mov r1, 0",
            "mov r4, r0",
            "bl sym.imp.memset",
            "movw r3, 0x4308",
            "str r5, [r4, r3]",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.av_stristr": {
        "function_address": "0x00004a78",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldrb r3, [r1]",
            "mov r6, r1",
            "cmp r3, 0",
            "beq 0x4ac4",
            "mov r5, r0",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, 0",
            "mov r4, r5",
            "bl sym.av_stristart",
            "cmp r0, 0",
            "bne 0x4ac4",
            "ldrb r3, [r5]",
            "add r5, r5, 1",
            "cmp r3, 0",
            "bne 0x4a94",
            "mov r4, r3",
            "mov r0, r4",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_get_int": {
        "function_address": "0x0000b918",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r3, 1",
            "sub sp, sp, 0x2c",
            "mov r4, 1",
            "mov r5, 0",
            "str r3, [sp, 0x24]",
            "add r3, sp, 0x24",
            "strd r4, r5, [sp, 0x18]",
            "mov r4, 0",
            "str r3, [sp]",
            "add r3, sp, 0x18",
            "ldr r5, [0x0000b9c0]",
            "str r3, [sp, 4]",
            "mov r3, 0",
            "str r3, [sp, 8]",
            "add r3, sp, 0x10",
            "strd r4, r5, [sp, 0x10]",
            "bl fcn.0000b5a0",
            "cmp r0, 0",
            "mvnlt r2, 0",
            "mvnlt r3, 0",
            "blt 0xb9b0",
            "ldrd r0, r1, [sp, 0x18]",
            "bl fcn.0000f4f8",
            "ldrd r2, r3, [sp, 0x10]",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x24]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "bl sym.imp.__aeabi_d2lz",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r2",
            "mov r1, r3",
            "add sp, sp, 0x2c",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.imp.__ctype_toupper_loc": {
        "function_address": "0x0000390c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x384]!"
        ]
    },
    "sym.av_compare_ts": {
        "function_address": "0x00009e30",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r5, r1",
            "add r1, sp, 0x18",
            "mov r4, r0",
            "stm r1, {r2, r3}",
            "ldr r8, [sp, 0x54]",
            "smull r8, sb, r8, r2",
            "ldr r3, [sp, 0x50]",
            "ldr sl, [sp, 0x1c]",
            "smull sl, fp, sl, r3",
            "orr r2, sl, r8",
            "orr r3, fp, sb",
            "strd r2, r3, [sp, 0x10]",
            "asr r2, r5, 0x1f",
            "ldrd r6, r7, [sp, 0x48]",
            "mov r3, r2",
            "eor r0, r2, r0",
            "eor r1, r2, r5",
            "subs r0, r0, r2",
            "sbc r1, r1, r3",
            "ldrd r2, r3, [sp, 0x10]",
            "orr r2, r2, r0",
            "orr r3, r3, r1",
            "strd r2, r3, [sp, 0x10]",
            "asr r2, r7, 0x1f",
            "mov r3, r2",
            "eor r0, r2, r6",
            "eor r1, r2, r7",
            "subs r0, r0, r2",
            "sbc r1, r1, r3",
            "ldrd r2, r3, [sp, 0x10]",
            "orr r1, r1, r3",
            "orr r0, r0, r2",
            "cmp r1, 0",
            "bgt 0x9f2c",
            "bne 0x9ecc",
            "cmn r0, 0x80000001",
            "bhi 0x9f2c",
            "mul r3, r4, sb",
            "mov r0, 1",
            "mla r3, r8, r5, r3",
            "umull r4, r5, r4, r8",
            "add r5, r3, r5",
            "mul r3, r6, fp",
            "mla r3, sl, r7, r3",
            "umull r6, r7, r6, sl",
            "add r7, r3, r7",
            "cmp r5, r7",
            "bgt 0x9f08",
            "bne 0x9f04",
            "cmp r4, r6",
            "bhi 0x9f08",
            "mov r0, 0",
            "cmp r7, r5",
            "mov r3, 1",
            "bgt 0x9f24",
            "bne 0x9f20",
            "cmp r6, r4",
            "bhi 0x9f24",
            "mov r3, 0",
            "rsb r0, r3, r0",
            "b 0x9fa8",
            "mov r3, 2",
            "strd sl, fp, [sp]",
            "str r3, [sp, 8]",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "mov r3, sb",
            "bl sym.av_rescale_rnd",
            "cmp r7, r1",
            "bgt 0x9fa4",
            "bne 0x9f60",
            "cmp r6, r0",
            "bhi 0x9fa4",
            "mov r3, 2",
            "strd r8, sb, [sp]",
            "str r3, [sp, 8]",
            "mov r0, r6",
            "mov r3, fp",
            "mov r1, r7",
            "mov r2, sl",
            "bl sym.av_rescale_rnd",
            "cmp r5, r1",
            "mov r3, r0",
            "mov r0, 1",
            "bgt 0x9fa8",
            "bne 0x9f9c",
            "cmp r4, r3",
            "bhi 0x9fa8",
            "mov r0, 0",
            "b 0x9fa8",
            "mvn r0, 0",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_flt2int": {
        "function_address": "0x000087f8",
        "instructions": [
            "push {r0, r1, r2, r4, r5, lr}",
            "mov r1, 0",
            "mov r5, r0",
            "mov r4, 1",
            "bl fcn.0000ff2c",
            "cmp r0, 0",
            "movne r4, 0",
            "uxtb r0, r4",
            "cmp r0, 0",
            "beq 0x88d4",
            "mov r1, r5",
            "mov r0, r5",
            "bl fcn.0000fc4c",
            "mov r1, 0",
            "bl fcn.0000ff2c",
            "cmp r0, 0",
            "bne 0x8874",
            "mov r1, 0",
            "mov r0, r5",
            "bl fcn.0000ff40",
            "ldr r3, [0x000088d8]",
            "cmp r0, 0",
            "ldr r4, [0x000088dc]",
            "mov r0, r5",
            "mov r1, r5",
            "moveq r4, r3",
            "bl fcn.0000ff2c",
            "cmp r0, 0",
            "movne r0, r4",
            "addeq r0, r4, 1",
            "b 0x88d4",
            "mov r0, r5",
            "bl fcn.0000f4a4",
            "add r2, sp, 4",
            "bl sym.imp.frexp",
            "bl fcn.0000fba4",
            "mov r1, 0",
            "mov r5, r0",
            "bl fcn.0000ff40",
            "cmp r0, 0",
            "bic r0, r5, 0x80000000",
            "movne r4, 0x80000000",
            "moveq r4, 0",
            "bl fcn.0000f4a4",
            "mov r2, 0",
            "ldr r3, [0x000088e0]",
            "bl fcn.0000f1a8",
            "ldr r3, [0x000088e4]",
            "mov r2, 0",
            "bl fcn.0000f558",
            "bl sym.imp.__aeabi_d2lz",
            "ldr r3, [sp, 4]",
            "add r3, r3, 0x7e",
            "orr r0, r0, r3, lsl 23",
            "orr r0, r0, r4",
            "pop {r1, r2, r3, r4, r5, pc}"
        ]
    },
    "fcn.0000ff2c": {
        "function_address": "0x0000ff2c",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000ff18",
            "moveq r0, 1",
            "movne r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "fcn.0000fc4c": {
        "function_address": "0x0000fc4c",
        "instructions": [
            "eor r1, r1, 0x80000000"
        ]
    },
    "fcn.0000ff40": {
        "function_address": "0x0000ff40",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.0000ff18",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr pc, [sp], 8"
        ]
    },
    "sym.av_get_channel_layout_string": {
        "function_address": "0x000045ec",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r3, r2, 0",
            "ldr r4, [0x00004758]",
            "mov r6, r0",
            "mov r5, r1",
            "ldr fp, [sp, 0x30]",
            "add r4, pc, r4",
            "ldr sb, [sp, 0x34]",
            "bgt 0x4620",
            "mov r0, fp",
            "mov r1, sb",
            "bl sym.av_get_channel_layout_nb_channels",
            "mov r3, r0",
            "ldr r2, [0x0000475c]",
            "add r2, r4, r2",
            "add r2, r2, 8",
            "b 0x4670",
            "ldr r1, [r2, -4]",
            "cmp r3, r1",
            "bne 0x466c",
            "ldr r1, [r2]",
            "cmp r1, fp",
            "bne 0x466c",
            "ldr r1, [r2, 4]",
            "cmp r1, sb",
            "bne 0x466c",
            "mov r0, r6",
            "mov r1, r8",
            "mov r2, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b sym.av_strlcpy",
            "add r2, r2, 0x10",
            "ldr r8, [r2, -8]",
            "cmp r8, 0",
            "bne 0x4630",
            "ldr r2, [0x00004760]",
            "mov r0, r6",
            "mov r1, r5",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "orrs r2, fp, sb",
            "beq 0x4750",
            "ldr r1, [0x00004764]",
            "mov r0, r6",
            "mov r2, r5",
            "mov r7, r8",
            "add r1, r4, r1",
            "bl sym.av_strlcat",
            "ldr r3, [0x0000475c]",
            "add r3, r4, r3",
            "str r3, [sp]",
            "ldr r3, [0x00004768]",
            "add r3, r4, r3",
            "str r3, [sp, 4]",
            "mov r0, fp",
            "mov r1, sb",
            "mov r2, r7",
            "bl fcn.0000f168",
            "tst r0, 1",
            "beq 0x4728",
            "cmp r7, 0x1e",
            "bhi 0x4724",
            "ldr r2, [sp]",
            "add r3, r2, 0xd0",
            "ldr sl, [r3, r7, lsl 2]",
            "cmp sl, 0",
            "beq 0x4724",
            "cmp r8, 0",
            "beq 0x4714",
            "mov r0, r6",
            "ldr r1, [sp, 4]",
            "mov r2, r5",
            "bl sym.av_strlcat",
            "mov r0, r6",
            "mov r1, sl",
            "mov r2, r5",
            "bl sym.av_strlcat",
            "add r8, r8, 1",
            "add r7, r7, 1",
            "cmp r7, 0x40",
            "bne 0x46c8",
            "ldr r1, [0x0000476c]",
            "mov r0, r6",
            "mov r2, r5",
            "add r1, r4, r1",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b sym.av_strlcat",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_get_channel_layout_nb_channels": {
        "function_address": "0x000045b0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, 0",
            "mvn r4, 0",
            "mvn r5, 0",
            "b 0x45e0",
            "adds r6, r2, r4",
            "add r0, r0, 1",
            "adc r7, r3, r5",
            "and r2, r2, r6",
            "and r3, r3, r7",
            "orrs r1, r2, r3",
            "bne 0x45cc",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_strlcat": {
        "function_address": "0x00004b1c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r6, r2",
            "mov r5, r0",
            "mov r7, r1",
            "bl sym.imp.strlen",
            "add r3, r0, 1",
            "mov r4, r0",
            "cmp r6, r3",
            "bhi 0x4b50",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add r0, r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}",
            "add r0, r5, r0",
            "mov r1, r7",
            "rsb r2, r4, r6",
            "bl sym.av_strlcpy",
            "add r0, r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_get_q": {
        "function_address": "0x0000b9c4",
        "instructions": [
            "push {r4, r5, r6, r8, sb, lr}",
            "mov r6, r0",
            "sub sp, sp, 0x28",
            "mov r4, 1",
            "mov r5, 0",
            "mov r0, 1",
            "strd r4, r5, [sp, 0x18]",
            "mov r8, 0",
            "str r0, [sp, 0x24]",
            "add r0, sp, 0x24",
            "ldr r5, [0x0000bad4]",
            "mov r4, 0",
            "str r0, [sp]",
            "add r0, sp, 0x18",
            "str r0, [sp, 4]",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, r3",
            "add r3, sp, 0x10",
            "strd r4, r5, [sp, 0x10]",
            "str r8, [sp, 8]",
            "bl fcn.0000b5a0",
            "cmp r0, r8",
            "strlt r8, [r6]",
            "strlt r8, [r6, 4]",
            "blt 0xbac8",
            "ldrd r8, sb, [sp, 0x10]",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "beq 0xba70",
            "ldr r1, [sp, 0x18]",
            "ldr r0, [sp, 0x1c]",
            "mov r2, r1",
            "asr r3, r2, 0x1f",
            "cmp r3, r0",
            "ldreq r3, [sp, 0x24]",
            "streq r1, [r6]",
            "streq r3, [r6, 4]",
            "beq 0xbac8",
            "ldrd r0, r1, [sp, 0x18]",
            "bl fcn.0000f4f8",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f558",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [sp, 0x24]",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.0000f7c4",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r6",
            "mov r1, 0x1000000",
            "str r1, [sp]",
            "bl sym.av_d2q",
            "mov r0, r6",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, r8, sb, pc}"
        ]
    },
    "sym.av_find_info_tag": {
        "function_address": "0x0000d150",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r2",
            "ldrb r2, [r3]",
            "sub sp, sp, 0x80",
            "mov r4, r0",
            "mov r7, sp",
            "mov r8, 0",
            "sub sb, r1, 1",
            "cmp r2, 0x3f",
            "mov sl, 0x20",
            "addeq r6, r3, 1",
            "movne r6, r3",
            "mov r3, sp",
            "b 0xd198",
            "rsb r1, r7, r3",
            "add r6, r6, 1",
            "cmp r1, 0x7e",
            "strbls r2, [r3], 1",
            "ldrb r2, [r6]",
            "cmp r2, 0x3d",
            "cmpne r2, 0",
            "beq 0xd1b0",
            "cmp r2, 0x26",
            "bne 0xd188",
            "cmp r2, 0x3d",
            "strb r8, [r3]",
            "addeq r1, r6, 1",
            "moveq r3, r4",
            "bne 0xd200",
            "b 0xd1e8",
            "rsb r0, r4, r3",
            "cmp r0, sb",
            "bge 0xd1e8",
            "cmp r2, 0x2b",
            "add r0, r3, 1",
            "strbeq sl, [r3]",
            "strbne r2, [r3]",
            "mov r3, r0",
            "mov r6, r1",
            "ldrb r2, [r1], 1",
            "cmp r2, 0",
            "cmpne r2, 0x26",
            "bne 0xd1c8",
            "b 0xd204",
            "mov r3, r4",
            "strb r8, [r3]",
            "mov r0, sp",
            "mov r1, r5",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xd234",
            "ldrb r3, [r6]",
            "cmp r3, 0x26",
            "bne 0xd23c",
            "add r6, r6, 1",
            "mov r3, sp",
            "b 0xd198",
            "mov r0, 1",
            "b 0xd240",
            "mov r0, 0",
            "add sp, sp, 0x80",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.av_dynarray_add": {
        "function_address": "0x0000a548",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r5, r0",
            "ldr r6, [r1]",
            "mov r4, r1",
            "mov r7, r2",
            "ldr r0, [r0]",
            "sub r3, r6, 1",
            "tst r3, r6",
            "bne 0xa584",
            "cmp r6, 0",
            "lslne r1, r6, 1",
            "moveq r1, 1",
            "lsl r1, r1, 2",
            "bl sym.av_realloc",
            "str r0, [r5]",
            "str r7, [r0, r6, lsl 2]",
            "add r6, r6, 1",
            "str r6, [r4]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_realloc": {
        "function_address": "0x0000a3d0",
        "instructions": [
            "ldr r3, [0x0000a400]",
            "ldr r2, [0x0000a404]",
            "add r3, pc, r3",
            "ldr r3, [r3, r2]",
            "sub r3, r3, 0x20",
            "cmp r1, r3",
            "bhi 0xa3f8",
            "cmp r1, 0",
            "addeq r1, r1, 1",
            "b sym.imp.realloc",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "sym.av_opt_set_dict": {
        "function_address": "0x0000c210",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr r5, [0x0000c2dc]",
            "mov r4, 0",
            "add r7, sp, 0x10",
            "mov sl, r0",
            "ldr sb, [0x0000c2e0]",
            "mov r8, r1",
            "add r5, pc, r5",
            "str r4, [r7, -4]!",
            "ldr fp, [0x0000c2e4]",
            "add sb, r5, sb",
            "b 0xc2a0",
            "mov r0, sl",
            "ldm r4, {r1, r2}",
            "mov r3, 0",
            "bl sym.av_opt_set",
            "cmp r0, fp",
            "mov r6, r0",
            "bne 0xc274",
            "mov r0, r7",
            "ldm r4, {r1, r2}",
            "mov r3, 0",
            "bl sym.av_dict_set",
            "b 0xc2a0",
            "cmp r0, 0",
            "bge 0xc2a0",
            "ldr r3, [r4, 4]",
            "mov r0, sl",
            "ldr r2, [0x0000c2e8]",
            "mov r1, 0x10",
            "str r3, [sp]",
            "add r2, r5, r2",
            "ldr r3, [r4]",
            "bl sym.av_log",
            "b 0xc2c0",
            "mov r2, r4",
            "ldr r0, [r8]",
            "mov r1, sb",
            "mov r3, 2",
            "bl sym.av_dict_get",
            "subs r4, r0, 0",
            "bne 0xc244",
            "mov r6, r4",
            "mov r0, r8",
            "bl sym.av_dict_free",
            "ldr r3, [sp, 0xc]",
            "mov r0, r6",
            "str r3, [r8]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_get_sample_fmt": {
        "function_address": "0x0000e220",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "ldr r3, [0x0000e270]",
            "mov r4, 0",
            "mov r5, 0x14",
            "ldr r6, [0x0000e274]",
            "add r3, pc, r3",
            "add r6, r3, r6",
            "mla r0, r5, r4, r6",
            "mov r1, r7",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0xe268",
            "add r4, r4, 1",
            "cmp r4, 0xa",
            "bne 0xe240",
            "mvn r0, 0",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_file_map": {
        "function_address": "0x00007a54",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov sl, r2",
            "ldr r4, [0x00007bd8]",
            "sub sp, sp, 0x10c",
            "mov r8, r1",
            "mov r1, 0",
            "ldr r2, [0x00007bdc]",
            "mov r7, r0",
            "str r3, [sp, 0x100]",
            "add r4, pc, r4",
            "ldr r3, [sp, 0x128]",
            "mov r6, 0",
            "add r2, r4, r2",
            "str r2, [sp, 0xfc]",
            "str r3, [sp, 0x104]",
            "bl sym.imp.open64",
            "subs r5, r0, 0",
            "str r6, [r8]",
            "bge 0x7ae0",
            "bl sym.imp.__errno_location",
            "ldr r6, [r0]",
            "add r5, sp, 0x10",
            "mov r1, r5",
            "mov r2, 0x80",
            "rsb r6, r6, 0",
            "mov r0, r6",
            "bl sym.av_strerror",
            "ldr r2, [0x00007be0]",
            "add r0, sp, 0xfc",
            "mov r1, 0x10",
            "mov r3, r7",
            "str r5, [sp]",
            "add r2, r4, r2",
            "bl sym.av_log",
            "b 0x7bcc",
            "add r1, sp, 0x90",
            "bl sym.imp.fstat64",
            "cmp r0, 0",
            "bge 0x7b20",
            "bl sym.imp.__errno_location",
            "ldr r6, [r0]",
            "add r7, sp, 0x10",
            "mov r1, r7",
            "mov r2, 0x80",
            "rsb r6, r6, 0",
            "mov r0, r6",
            "bl sym.av_strerror",
            "add r0, sp, 0xfc",
            "mov r1, 0x10",
            "ldr r2, [0x00007be4]",
            "b 0x7bb8",
            "ldr r3, [sp, 0xc4]",
            "ldr r1, [sp, 0xc0]",
            "cmp r3, 0",
            "bgt 0x7b64",
            "mov r2, 0",
            "mov r3, 0",
            "strd r2, r3, [sp, 8]",
            "mov r0, r6",
            "str r1, [sl]",
            "mov r2, 3",
            "mov r3, 2",
            "str r5, [sp]",
            "bl sym.imp.mmap64",
            "cmn r0, 1",
            "strne r0, [r8]",
            "bne 0x7bc4",
            "b 0x7b8c",
            "ldr r2, [0x00007be8]",
            "add r0, sp, 0xfc",
            "mov r1, 0x10",
            "mov r3, r7",
            "mvn r6, 0x15",
            "add r2, r4, r2",
            "bl sym.av_log",
            "mov r0, r5",
            "bl sym.imp.close",
            "b 0x7bcc",
            "bl sym.imp.__errno_location",
            "ldr r6, [r0]",
            "add r7, sp, 0x10",
            "mov r1, r7",
            "mov r2, 0x80",
            "rsb r6, r6, 0",
            "mov r0, r6",
            "bl sym.av_strerror",
            "ldr r2, [0x00007bec]",
            "add r0, sp, 0xfc",
            "mov r1, 0x10",
            "add r2, r4, r2",
            "mov r3, r7",
            "bl sym.av_log",
            "mov r0, r5",
            "bl sym.imp.close",
            "mov r0, r6",
            "add sp, sp, 0x10c",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00003a74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x294]!"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00003858",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3fc]!"
        ]
    },
    "sym.imp.fstat64": {
        "function_address": "0x000038c4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3b4]!"
        ]
    },
    "sym.imp.mmap64": {
        "function_address": "0x000039e4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2f4]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x000039d8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2fc]!"
        ]
    },
    "sym.av_image_copy": {
        "function_address": "0x000083a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldr r5, [0x00008500]",
            "mov sl, r2",
            "mov sb, r0",
            "ldr ip, [0x00008504]",
            "add r5, pc, r5",
            "str r3, [sp, 0xc]",
            "ldr r8, [sp, 0x48]",
            "ldr r3, [r5, ip]",
            "ldr r2, [sp, 0x4c]",
            "str r1, [sp, 8]",
            "ldr fp, [sp, 0x50]",
            "add r3, r3, r8, lsl 4",
            "str r2, [sp, 0x10]",
            "ldrb r7, [r3, 7]",
            "tst r7, 8",
            "bne 0x84f8",
            "ands r7, r7, 2",
            "ldrbeq r0, [r3, 4]",
            "lsleq r4, r8, 3",
            "moveq r3, r7",
            "beq 0x845c",
            "ldr r3, [sp, 0x10]",
            "ldr ip, [sp, 8]",
            "stm sp, {r3, fp}",
            "ldr r1, [ip]",
            "ldr ip, [sp, 0xc]",
            "ldr r0, [sb]",
            "ldr r2, [sl]",
            "ldr r3, [ip]",
            "bl sym.av_image_copy_plane",
            "ldr r0, [sb, 4]",
            "mov r2, 0x400",
            "ldr r1, [sl, 4]",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b sym.imp.memcpy",
            "ldr r2, [r5, ip]",
            "add r1, r4, r3",
            "add r1, r1, 4",
            "add r3, r3, 1",
            "ldrb r2, [r2, r1, lsl 1]",
            "and r2, r2, 3",
            "add r2, r2, 1",
            "cmp r7, r2",
            "movlt r7, r2",
            "cmp r3, r0",
            "blt 0x8438",
            "ldr r3, [0x00008504]",
            "lsl ip, r8, 4",
            "mov r4, 0",
            "rsb r2, fp, 0",
            "mov r6, r4",
            "str r2, [sp, 0x14]",
            "str r3, [sp, 0x18]",
            "str ip, [sp, 0x1c]",
            "b 0x84f0",
            "mov r2, r6",
            "ldr r1, [sp, 0x10]",
            "mov r0, r8",
            "bl sym.av_image_get_linesize",
            "sub r3, r6, 1",
            "str r0, [sp]",
            "cmp r3, 1",
            "ldr r0, [sb, r4]",
            "ldrls r2, [sp, 0x18]",
            "movhi r3, fp",
            "ldrls ip, [sp, 0x1c]",
            "add r6, r6, 1",
            "ldrls r3, [r5, r2]",
            "ldrls r2, [sp, 0x14]",
            "addls r3, r3, ip",
            "ldr ip, [sp, 0xc]",
            "ldrbls r3, [r3, 6]",
            "asrls r3, r2, r3",
            "ldr r2, [sl, r4]",
            "rsbls r3, r3, 0",
            "str r3, [sp, 4]",
            "ldr r3, [sp, 8]",
            "ldr r1, [r3, r4]",
            "ldr r3, [ip, r4]",
            "add r4, r4, 4",
            "bl sym.av_image_copy_plane",
            "cmp r6, r7",
            "blt 0x8488",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_image_get_linesize": {
        "function_address": "0x00007da4",
        "instructions": [
            "ldr ip, [0x00007e1c]",
            "movw r3, 0x12a",
            "cmp r0, r3",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x20",
            "add ip, pc, ip",
            "mov r6, r2",
            "bhi 0x7e10",
            "ldr r3, [0x00007e20]",
            "ldr r4, [ip, r3]",
            "add r4, r4, r0, lsl 4",
            "ldrb r3, [r4, 7]",
            "tst r3, 8",
            "bne 0x7e10",
            "add r0, sp, 0x10",
            "mov r1, sp",
            "mov r2, r4",
            "bl sym.av_image_fill_max_pixsteps",
            "add r3, sp, 0x20",
            "mov r0, r5",
            "add r6, r3, r6, lsl 2",
            "mov r3, r4",
            "ldr r1, [r6, -0x10]",
            "ldr r2, [r6, -0x20]",
            "bl fcn.00007cc0",
            "b 0x7e14",
            "mvn r0, 0x15",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.00007cc0": {
        "function_address": "0x00007cc0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r6, r0, 0",
            "mov r4, r1",
            "mov r5, r3",
            "mvnlt r0, 0x15",
            "poplt {r4, r5, r6, pc}",
            "sub r2, r2, 1",
            "sub r6, r6, 1",
            "cmp r2, 1",
            "mov r2, 1",
            "ldrbls r3, [r3, 5]",
            "movhi r3, 0",
            "add r6, r6, r2, lsl r3",
            "asrs r6, r6, r3",
            "beq 0x7d10",
            "mvn r0, 0x80000000",
            "mov r1, r6",
            "bl fcn.0000f06c",
            "cmp r4, r0",
            "bgt 0x7d28",
            "mul r0, r4, r6",
            "ldrb r3, [r5, 7]",
            "tst r3, 4",
            "addne r0, r0, 7",
            "asrne r0, r0, 3",
            "pop {r4, r5, r6, pc}",
            "mvn r0, 0x15",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_calloc": {
        "function_address": "0x0000a4d4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r1, 0",
            "mov r5, r0",
            "moveq r0, r4",
            "popeq {r4, r5, r6, pc}",
            "mvn r0, 0x80000000",
            "bl fcn.0000efa4",
            "cmp r5, r0",
            "bhs 0xa504",
            "mul r0, r5, r4",
            "pop {r4, r5, r6, lr}",
            "b sym.av_mallocz",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.0000efa4": {
        "function_address": "0x0000efa4",
        "instructions": [
            "subs r2, r1, 1",
            "bxeq lr",
            "blo 0xf040",
            "cmp r0, r1",
            "bls 0xf024",
            "tst r1, r2",
            "beq 0xf030",
            "clz r3, r1",
            "clz r2, r0",
            "sub r2, r3, r2",
            "mov r3, 1",
            "lsl r1, r1, r2",
            "lsl r3, r3, r2",
            "mov r2, 0",
            "cmp r0, r1",
            "subhs r0, r0, r1",
            "orrhs r2, r2, r3",
            "cmp r0, r1, lsr 1",
            "subhs r0, r0, r1, lsr 1",
            "orrhs r2, r2, r3, lsr 1",
            "cmp r0, r1, lsr 2",
            "subhs r0, r0, r1, lsr 2",
            "orrhs r2, r2, r3, lsr 2",
            "cmp r0, r1, lsr 3",
            "subhs r0, r0, r1, lsr 3",
            "orrhs r2, r2, r3, lsr 3",
            "cmp r0, 0",
            "lsrsne r3, r3, 4",
            "lsrne r1, r1, 4",
            "bne 0xefdc",
            "mov r0, r2",
            "bx lr",
            "moveq r0, 1",
            "movne r0, 0",
            "bx lr",
            "clz r2, r1",
            "rsb r2, r2, 0x1f",
            "lsr r0, r0, r2",
            "bx lr",
            "cmp r0, 0",
            "mvnne r0, 0",
            "b fcn.0000ffd4"
        ]
    },
    "sym.av_fifo_generic_read": {
        "function_address": "0x00007948",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r5, r1",
            "mov r4, r2",
            "mov r8, r3",
            "ldr r1, [r6, 4]",
            "ldr r7, [r6, 0xc]",
            "rsb r7, r1, r7",
            "cmp r4, r7",
            "movlt r7, r4",
            "movge r7, r7",
            "cmp r8, 0",
            "beq 0x798c",
            "mov r0, r5",
            "mov r2, r7",
            "blx r8",
            "b 0x799c",
            "mov r0, r5",
            "add r5, r5, r7",
            "mov r2, r7",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "mov r1, r7",
            "rsb r4, r7, r4",
            "bl sym.av_fifo_drain",
            "cmp r4, 0",
            "bgt 0x795c",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_fifo_drain": {
        "function_address": "0x00007914",
        "instructions": [
            "ldr r3, [r0, 4]",
            "ldr r2, [r0, 0xc]",
            "add r3, r3, r1",
            "cmp r3, r2",
            "str r3, [r0, 4]",
            "ldrhs ip, [r0]",
            "rsbhs r2, r2, ip",
            "addhs r3, r3, r2",
            "strhs r3, [r0, 4]",
            "ldr r3, [r0, 0x10]",
            "add r1, r3, r1",
            "str r1, [r0, 0x10]",
            "bx lr"
        ]
    },
    "sym.av_crc_get_table": {
        "function_address": "0x000052c8",
        "instructions": [
            "push {r0, r1, r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r5, [0x00005338]",
            "add r3, r4, r4, lsl 8",
            "ldr r0, [0x0000533c]",
            "add r5, pc, r5",
            "add r0, r5, r0",
            "add r0, r0, r3, lsl 2",
            "ldr r6, [r0, 0x400]",
            "cmp r6, 0",
            "bne 0x5324",
            "ldr r3, [0x00005340]",
            "movw ip, 0x404",
            "str ip, [sp]",
            "add r3, r5, r3",
            "ldrb r1, [r3, r4, lsl 3]",
            "add r3, r3, r4, lsl 3",
            "ldrb r2, [r3, 1]",
            "ldr r3, [r3, 4]",
            "bl sym.av_crc_init",
            "cmp r0, 0",
            "movlt r0, r6",
            "blt 0x5334",
            "ldr r0, [0x0000533c]",
            "add r4, r4, r4, lsl 8",
            "add r5, r5, r0",
            "add r0, r5, r4, lsl 2",
            "pop {r2, r3, r4, r5, r6, pc}"
        ]
    },
    "sym.av_set_double": {
        "function_address": "0x0000c020",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, lr}",
            "mov r4, 0",
            "sub sp, sp, 0x1c",
            "mov r8, r2",
            "mov sb, r3",
            "mov r2, r4",
            "mov r3, r4",
            "mov r7, r0",
            "mov r6, r1",
            "str r4, [sp]",
            "bl sym.av_opt_find",
            "mov r3, 1",
            "mov r2, 1",
            "str r3, [sp]",
            "mov r3, 0",
            "strd r2, r3, [sp, 8]",
            "mov r5, r0",
            "mov r1, r6",
            "mov r0, r7",
            "mov r2, r8",
            "mov r3, sb",
            "str r4, [sp, 0x10]",
            "bl fcn.0000be08",
            "cmp r0, r4",
            "movge r0, r5",
            "movlt r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, pc}"
        ]
    },
    "fcn.0000d6e0": {
        "function_address": "0x0000d6e0",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r1, 0",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "mov r4, r0",
            "moveq r5, r0",
            "beq 0xd71c",
            "mov r1, r5",
            "mov r2, 4",
            "bl sym.imp.read",
            "mov r5, r0",
            "mov r0, r4",
            "bl sym.imp.close",
            "mov r0, r5",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "sym.imp.clock": {
        "function_address": "0x00003834",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x414]!"
        ]
    },
    "fcn.0000fc50": {
        "function_address": "0x0000fc50",
        "instructions": [
            "lsls r2, r0, 1",
            "lslsne r3, r1, 1",
            "teqne r2, r3",
            "mvnsne ip, r2, asr 24",
            "mvnsne ip, r3, asr 24",
            "beq 0xfd5c",
            "lsr r2, r2, 0x18",
            "rsbs r3, r2, r3, lsr 24",
            "addgt r2, r2, r3",
            "eorgt r1, r0, r1",
            "eorgt r0, r1, r0",
            "eorgt r1, r0, r1",
            "rsblt r3, r3, 0",
            "cmp r3, 0x19",
            "bxhi lr",
            "tst r0, 0x80000000",
            "orr r0, r0, 0x800000",
            "bic r0, r0, 0xff000000",
            "rsbne r0, r0, 0",
            "tst r1, 0x80000000",
            "orr r1, r1, 0x800000",
            "bic r1, r1, 0xff000000",
            "rsbne r1, r1, 0",
            "teq r2, r3",
            "beq 0xfd44",
            "sub r2, r2, 1",
            "adds r0, r0, r1, asr r3",
            "rsb r3, r3, 0x20",
            "lsl r1, r1, r3",
            "and r3, r0, 0x80000000",
            "bpl 0xfcd4",
            "rsbs r1, r1, 0",
            "rsc r0, r0, 0",
            "cmp r0, 0x800000",
            "blo 0xfd0c",
            "cmp r0, 0x1000000",
            "blo 0xfcf8",
            "lsrs r0, r0, 1",
            "rrx r1, r1",
            "add r2, r2, 1",
            "cmp r2, 0xfe",
            "bhs 0xfdb0",
            "cmp r1, 0x80000000",
            "adc r0, r0, r2, lsl 23",
            "biceq r0, r0, 1",
            "orr r0, r0, r3",
            "bx lr",
            "lsls r1, r1, 1",
            "adc r0, r0, r0",
            "tst r0, 0x800000",
            "sub r2, r2, 1",
            "bne 0xfcf8",
            "clz ip, r0",
            "sub ip, ip, 8",
            "subs r2, r2, ip",
            "lsl r0, r0, ip",
            "addge r0, r0, r2, lsl 23",
            "rsblt r2, r2, 0",
            "orrge r0, r0, r3",
            "orrlt r0, r3, r0, lsr r2",
            "bx lr",
            "teq r2, 0",
            "eor r1, r1, 0x800000",
            "eoreq r0, r0, 0x800000",
            "addeq r2, r2, 1",
            "subne r3, r3, 1",
            "b 0xfcb4",
            "lsl r3, r1, 1",
            "mvns ip, r2, asr 24",
            "mvnsne ip, r3, asr 24",
            "beq 0xfdbc",
            "teq r2, r3",
            "beq 0xfd80",
            "teq r2, 0",
            "moveq r0, r1",
            "bx lr",
            "teq r0, r1",
            "movne r0, 0",
            "bxne lr",
            "tst r2, 0xff000000",
            "bne 0xfda0",
            "lsls r0, r0, 1",
            "orrhs r0, r0, 0x80000000",
            "bx lr",
            "adds r2, r2, 0x2000000",
            "addlo r0, r0, 0x800000",
            "bxlo lr",
            "and r3, r0, 0x80000000",
            "orr r0, r3, 0x7f000000",
            "orr r0, r0, 0x800000",
            "bx lr",
            "mvns r2, r2, asr 24",
            "movne r0, r1",
            "mvnseq r3, r3, asr 24",
            "movne r1, r0",
            "lsls r2, r0, 9",
            "lslseq r3, r1, 9",
            "teqeq r0, r1",
            "orrne r0, r0, 0x400000",
            "bx lr"
        ]
    },
    "sym.av_tree_insert": {
        "function_address": "0x0000ec28",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r0",
            "ldr r4, [r0]",
            "mov r6, r1",
            "mov sl, r2",
            "mov r7, r3",
            "cmp r4, 0",
            "beq 0xedf0",
            "ldr r0, [r4, 8]",
            "blx r2",
            "subs r8, r0, 0",
            "bne 0xecbc",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "ldrne r6, [r4, 8]",
            "bne 0xee0c",
            "ldr r8, [r4]",
            "cmp r8, 0",
            "bne 0xec8c",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "streq r4, [r7]",
            "moveq r6, r3",
            "streq r3, [r5]",
            "beq 0xee0c",
            "rsbs r8, r8, 1",
            "movlo r8, 0",
            "mov r1, r6",
            "ldr r0, [r4, r8, lsl 2]",
            "mov r2, sl",
            "mov r3, sp",
            "bl sym.av_tree_find",
            "add r2, sp, 8",
            "add r3, r2, r8, lsl 2",
            "rsb r8, r8, 0",
            "ldr r6, [r3, -8]",
            "str r6, [r4, 8]",
            "lsr r8, r8, 0x1f",
            "mov r1, r6",
            "mov r2, sl",
            "add r0, r4, r8, lsl 2",
            "mov r3, r7",
            "bl sym.av_tree_insert",
            "cmp r0, 0",
            "movne r6, r0",
            "bne 0xee0c",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "eorne r8, r8, 1",
            "ldr r3, [r4, 0xc]",
            "sub r3, r3, 1",
            "add r3, r3, r8, lsl 1",
            "ands r0, r3, 1",
            "str r3, [r4, 0xc]",
            "bne 0xedc8",
            "cmp r3, 0",
            "beq 0xedc8",
            "ldr r1, [r4, r8, lsl 2]",
            "rsb r2, r3, 0",
            "ldr ip, [r1, 0xc]",
            "cmp r2, ip, lsl 1",
            "eor r2, r8, 1",
            "bne 0xed8c",
            "ldr r3, [r1, r2, lsl 2]",
            "str r3, [r5]",
            "ldr r1, [r4, r8, lsl 2]",
            "ldr r3, [r3, r8, lsl 2]",
            "str r3, [r1, r2, lsl 2]",
            "ldr r3, [r5]",
            "ldr r1, [r4, r8, lsl 2]",
            "str r1, [r3, r8, lsl 2]",
            "ldr r3, [r5]",
            "ldr r3, [r3, r2, lsl 2]",
            "str r3, [r4, r8, lsl 2]",
            "ldr r3, [r5]",
            "str r4, [r3, r2, lsl 2]",
            "ldr r3, [r5]",
            "ldr r1, [r3, 0xc]",
            "ldr r2, [r3]",
            "cmp r1, 0",
            "movle r1, 0",
            "mvngt r1, 0",
            "str r1, [r2, 0xc]",
            "ldr r1, [r3, 0xc]",
            "ldr r2, [r3, 4]",
            "lsr r1, r1, 0x1f",
            "str r1, [r2, 0xc]",
            "str r0, [r3, 0xc]",
            "b 0xedc8",
            "str r1, [r5]",
            "ldr r1, [r4, r8, lsl 2]",
            "ldr r1, [r1, r2, lsl 2]",
            "str r1, [r4, r8, lsl 2]",
            "ldr r1, [r5]",
            "str r4, [r1, r2, lsl 2]",
            "ldr r2, [r5]",
            "ldr r1, [r2, 0xc]",
            "cmp r1, 0",
            "asreq r3, r3, 1",
            "strne r0, [r4, 0xc]",
            "streq r3, [r4, 0xc]",
            "ldr r3, [r4, 0xc]",
            "rsb r3, r3, 0",
            "str r3, [r2, 0xc]",
            "ldr r3, [r5]",
            "ldr r2, [r7]",
            "ldr r3, [r3, 0xc]",
            "rsbs r3, r3, 1",
            "movlo r3, 0",
            "cmp r2, 0",
            "eorne r3, r3, 1",
            "cmp r3, 0",
            "moveq r6, 0",
            "b 0xee0c",
            "ldr r3, [r3]",
            "str r3, [r0]",
            "str r4, [r7]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "movne r6, r4",
            "strne r1, [r3, 8]",
            "mov r0, r6",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_tree_find": {
        "function_address": "0x0000eb98",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov r5, r3",
            "cmp r4, 0",
            "beq 0xec20",
            "mov r0, r7",
            "ldr r1, [r4, 8]",
            "blx r6",
            "cmp r0, 0",
            "beq 0xebe8",
            "cmp r5, 0",
            "ldrne r2, [r4, 8]",
            "lsrne r3, r0, 0x1f",
            "strne r2, [r5, r3, lsl 2]",
            "mvn r0, r0",
            "lsr r0, r0, 0x1f",
            "ldr r4, [r4, r0, lsl 2]",
            "b 0xebac",
            "cmp r5, 0",
            "beq 0xec18",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r5",
            "ldr r0, [r4]",
            "bl sym.av_tree_find",
            "ldr r0, [r4, 4]",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r5",
            "bl sym.av_tree_find",
            "ldr r0, [r4, 8]",
            "pop {r3, r4, r5, r6, r7, pc}",
            "mov r0, r4",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_tempfile": {
        "function_address": "0x00007bf4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r6, r1",
            "ldr r4, [0x00007cac]",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "ldr r1, [0x00007cb0]",
            "add r4, pc, r4",
            "str r2, [sp, 8]",
            "str r3, [sp, 0xc]",
            "add r1, r4, r1",
            "str r1, [sp, 4]",
            "bl sym.imp.strlen",
            "add r7, r0, 0xc",
            "mov r0, r7",
            "bl sym.av_malloc",
            "cmp r0, 0",
            "str r0, [r6]",
            "bne 0x7c58",
            "ldr r2, [0x00007cb4]",
            "add r0, sp, 4",
            "mov r1, 0x10",
            "mvn r5, 0xb",
            "add r2, r4, r2",
            "bl sym.av_log",
            "b 0x7ca0",
            "ldr r2, [0x00007cb8]",
            "mov r3, r5",
            "mov r1, r7",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "ldr r0, [r6]",
            "bl sym.imp.mkstemp64",
            "subs r5, r0, 0",
            "bge 0x7ca0",
            "bl sym.imp.__errno_location",
            "ldr r2, [0x00007cbc]",
            "mov r1, 0x10",
            "ldr r5, [r0]",
            "add r0, sp, 4",
            "ldr r3, [r6]",
            "add r2, r4, r2",
            "rsb r5, r5, 0",
            "bl sym.av_log",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.imp.mkstemp64": {
        "function_address": "0x00003ac8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x25c]!"
        ]
    },
    "sym.av_div_q": {
        "function_address": "0x0000dc50",
        "instructions": [
            "sub sp, sp, 8",
            "push {r4, lr}",
            "sub sp, sp, 0x18",
            "add ip, sp, 8",
            "str r3, [sp, 0x24]",
            "mov r4, r0",
            "stm ip, {r1, r2}",
            "mov r2, r3",
            "ldr r3, [sp, 0x28]",
            "str r2, [sp, 0x14]",
            "str r2, [sp]",
            "ldm ip, {r1, r2}",
            "str r3, [sp, 0x10]",
            "bl sym.av_mul_q",
            "mov r0, r4",
            "add sp, sp, 0x18",
            "pop {r4, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.av_mul_q": {
        "function_address": "0x0000dbe8",
        "instructions": [
            "sub sp, sp, 8",
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x1c",
            "add r6, sp, 0x10",
            "mov r7, r0",
            "mvn r4, 0x80000000",
            "mov r5, 0",
            "stm r6, {r1, r2}",
            "str r3, [sp, 0x34]",
            "ldr r2, [sp, 0x14]",
            "ldr r0, [sp, 0x38]",
            "smull r0, r1, r0, r2",
            "ldr r2, [sp, 0x10]",
            "smull r2, r3, r3, r2",
            "strd r0, r1, [sp]",
            "add r1, r6, 4",
            "mov r0, r6",
            "strd r4, r5, [sp, 8]",
            "bl sym.av_reduce",
            "ldm r6, {r0, r1}",
            "stm r7, {r0, r1}",
            "mov r0, r7",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.av_parse_video_rate": {
        "function_address": "0x0000c9a4",
        "instructions": [
            "ldr r3, [0x0000ca88]",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, 0",
            "ldr r8, [0x0000ca8c]",
            "sub sp, sp, 0x30",
            "add r3, pc, r3",
            "mov r4, r0",
            "mov r7, r1",
            "mov r5, r6",
            "add r8, r3, r8",
            "add r3, r8, 0x1bc",
            "mov r1, r7",
            "ldr r0, [r3, r6]",
            "bl sym.imp.strcmp",
            "subs r3, r0, 0",
            "bne 0xca00",
            "mov r2, 0xc",
            "mla r5, r2, r5, r8",
            "add r5, r5, 0x1c0",
            "ldm r5, {r0, r1}",
            "stm r4, {r0, r1}",
            "mov r0, r3",
            "b 0xca80",
            "add r5, r5, 1",
            "add r6, r6, 0xc",
            "cmp r5, 8",
            "bne 0xc9cc",
            "mov r2, 0",
            "add r0, sp, 0x28",
            "mov r1, r7",
            "mov r3, r2",
            "str r2, [sp]",
            "str r2, [sp, 4]",
            "str r2, [sp, 8]",
            "str r2, [sp, 0xc]",
            "str r2, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "str r2, [sp, 0x18]",
            "bl sym.av_expr_parse_and_eval",
            "cmp r0, 0",
            "blt 0xca80",
            "ldr r3, [0x0000ca90]",
            "add r5, sp, 0x20",
            "mov r0, r5",
            "str r3, [sp]",
            "ldrd r2, r3, [sp, 0x28]",
            "bl sym.av_d2q",
            "ldm r5, {r0, r1}",
            "cmp r0, 0",
            "stm r4, {r0, r1}",
            "mvnle r0, 0x15",
            "ble 0xca80",
            "cmp r1, 0",
            "movgt r0, 0",
            "mvnle r0, 0x15",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.av_ext2dbl": {
        "function_address": "0x000085f0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "add r3, sp, 4",
            "stm r3, {r0, r1, r2}",
            "add r2, r3, 1",
            "ldrb ip, [sp, 4]",
            "add r3, r3, 9",
            "mov r0, 0",
            "mov r1, 0",
            "lsl r5, r1, 8",
            "lsl r4, r0, 8",
            "orr r5, r5, r0, lsr 24",
            "ldrb r0, [r2, 1]!",
            "mov r1, 0",
            "adds r0, r0, r4",
            "adc r1, r1, r5",
            "cmp r2, r3",
            "bne 0x8614",
            "ldrb r3, [sp, 5]",
            "and r4, ip, 0x7f",
            "movw r2, 0x7fff",
            "orr r4, r3, r4, lsl 8",
            "orrs r3, r0, r1",
            "moveq r3, 0",
            "movne r3, 1",
            "cmp r4, r2",
            "movne r3, 0",
            "andeq r3, r3, 1",
            "cmp r3, 0",
            "movne r0, 0",
            "ldrne r1, [0x0000869c]",
            "bne 0x8694",
            "tst ip, 0x80",
            "sub r4, r4, 0x4000",
            "sub r4, r4, 0x3e",
            "beq 0x8688",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "bl fcn.0000f4e4",
            "mov r2, r4",
            "bl sym.imp.ldexp",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}"
        ]
    },
    "sym.av_update_lls": {
        "function_address": "0x00008bd8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "strd r2, r3, [sp, 8]",
            "movw r3, 0x4308",
            "mov sl, r0",
            "sub r5, r1, 8",
            "ldr sb, [r0, r3]",
            "mov r4, 0",
            "mov fp, 0x110",
            "b 0x8c48",
            "ldrd r2, r3, [sp, 8]",
            "add r7, r7, 1",
            "ldrd r0, r1, [r6]",
            "bl fcn.0000f558",
            "strd r0, r1, [sp]",
            "strd r0, r1, [r6], 8",
            "ldrd r2, r3, [r8, 8]!",
            "ldrd r0, r1, [r5, 8]",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp]",
            "bl fcn.0000f1ac",
            "cmp r7, sb",
            "strd r0, r1, [r6, -8]",
            "ble 0x8c00",
            "add r4, r4, 1",
            "add r5, r5, 8",
            "cmp r4, sb",
            "mlale r6, fp, r4, sl",
            "movle r8, r5",
            "movle r7, r4",
            "ble 0x8c00",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_bmg_get": {
        "function_address": "0x00008a54",
        "instructions": [
            "push {r0, r1, r4, r5, r6, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "ldr r4, [r0, 0x100]",
            "mov r6, r1",
            "sub r2, r4, 0x37",
            "sub r3, r4, 0x18",
            "and r2, r2, 0x3f",
            "and r3, r3, 0x3f",
            "ldr r0, [r5, r2, lsl 2]",
            "ldr r3, [r5, r3, lsl 2]",
            "add r0, r0, r3",
            "and r3, r4, 0x3f",
            "str r0, [r5, r3, lsl 2]",
            "bl fcn.0000f458",
            "mov r2, 0x100000",
            "mov r3, 0x3e000000",
            "bl fcn.0000f558",
            "mov r2, 0",
            "ldr r3, [0x00008bb0]",
            "bl fcn.0000f1a8",
            "sub r2, r4, 0x36",
            "sub r3, r4, 0x17",
            "and r2, r2, 0x3f",
            "and r3, r3, 0x3f",
            "ldr r3, [r5, r3, lsl 2]",
            "mov r8, r0",
            "ldr r0, [r5, r2, lsl 2]",
            "mov sb, r1",
            "add r0, r0, r3",
            "add r3, r4, 1",
            "and r3, r3, 0x3f",
            "add r4, r4, 2",
            "str r0, [r5, r3, lsl 2]",
            "bl fcn.0000f458",
            "mov r2, 0x100000",
            "mov r3, 0x3e000000",
            "bl fcn.0000f558",
            "mov r2, 0",
            "ldr r3, [0x00008bb0]",
            "bl fcn.0000f1a8",
            "mov r2, r8",
            "mov sl, r0",
            "mov fp, r1",
            "mov r3, sb",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f558",
            "mov r2, sl",
            "strd r0, r1, [sp]",
            "mov r3, fp",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000f558",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [sp]",
            "bl fcn.0000f1ac",
            "mov r2, 0",
            "ldr r3, [0x00008bb0]",
            "strd r0, r1, [sp]",
            "bl fcn.0000facc",
            "cmp r0, 0",
            "bne 0x8a64",
            "str r4, [r5, 0x100]",
            "ldrd r0, r1, [sp]",
            "bl sym.imp.log",
            "mov r2, 0",
            "mov r3, 0xc0000000",
            "bl fcn.0000f558",
            "ldrd r2, r3, [sp]",
            "bl fcn.0000f7c4",
            "bl sym.imp.sqrt",
            "mov r4, r0",
            "mov r5, r1",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.0000f558",
            "mov r2, r4",
            "strd r0, r1, [r6]",
            "mov r3, r5",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.0000f558",
            "strd r0, r1, [r6, 8]",
            "pop {r2, r3, r4, r5, r6, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.0000fa60": {
        "function_address": "0x0000fa60",
        "instructions": [
            "mov ip, r0",
            "mov r0, r2",
            "mov r2, ip",
            "mov ip, r1",
            "mov r1, r3",
            "mov r3, ip",
            "b fcn.0000fa7c"
        ]
    },
    "sym.av_image_fill_linesizes": {
        "function_address": "0x00007e24",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x24",
            "mov r7, r2",
            "mov r1, 0",
            "mov r2, 0x10",
            "ldr r4, [0x00007ec4]",
            "mov r6, r0",
            "bl sym.imp.memset",
            "movw r3, 0x12a",
            "cmp r5, r3",
            "add r4, pc, r4",
            "bhi 0x7eb8",
            "ldr r3, [0x00007ec8]",
            "ldr r3, [r4, r3]",
            "add r5, r3, r5, lsl 4",
            "ldrb r4, [r5, 7]",
            "ands r4, r4, 8",
            "bne 0x7eb8",
            "add r0, sp, 0x10",
            "mov r1, sp",
            "mov r2, r5",
            "bl sym.av_image_fill_max_pixsteps",
            "add r3, sp, 0x10",
            "mov r0, r7",
            "ldr r1, [r3, r4]",
            "mov r3, r5",
            "ldr r2, [sp, r4]",
            "bl fcn.00007cc0",
            "cmp r0, 0",
            "blt 0x7ebc",
            "str r0, [r6, r4]",
            "add r4, r4, 4",
            "cmp r4, 0x10",
            "bne 0x7e80",
            "mov r0, 0",
            "b 0x7ebc",
            "mvn r0, 0x15",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_realloc_f": {
        "function_address": "0x0000a40c",
        "instructions": [
            "orr r3, r2, r1",
            "push {r4, r5, r6, lr}",
            "cmp r3, 0x10000",
            "movlo r3, 0",
            "movhs r3, 1",
            "cmp r2, 0",
            "moveq r3, 0",
            "mov r4, r0",
            "cmp r3, 0",
            "mov r5, r1",
            "mul r6, r1, r2",
            "beq 0xa478",
            "mov r0, r6",
            "mov r1, r2",
            "bl fcn.0000efa4",
            "cmp r0, r5",
            "beq 0xa478",
            "mov r0, r4",
            "mov r5, 0",
            "bl sym.av_free",
            "b 0xa470",
            "cmp r6, 0",
            "beq 0xa470",
            "mov r0, r4",
            "bl sym.av_free",
            "mov r0, r5",
            "pop {r4, r5, r6, pc}",
            "mov r0, r4",
            "mov r1, r6",
            "bl sym.av_realloc",
            "subs r5, r0, 0",
            "bne 0xa470",
            "b 0xa460"
        ]
    },
    "sym.av_rescale_q": {
        "function_address": "0x00009df4",
        "instructions": [
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "add ip, sp, 0x10",
            "stm ip, {r2, r3}",
            "ldr r3, [sp, 0x20]",
            "ldr r2, [sp, 0x14]",
            "smull r2, r3, r2, r3",
            "strd r2, r3, [sp]",
            "mov r3, 5",
            "str r3, [sp, 8]",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [sp, 0x10]",
            "smull r2, r3, r2, r3",
            "bl sym.av_rescale_rnd",
            "add sp, sp, 0x1c",
            "ldm sp!, {pc}"
        ]
    },
    "sym.av_opt_set_defaults2": {
        "function_address": "0x0000c46c",
        "instructions": [
            "ldr r3, [0x0000c5f8]",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sl, r2",
            "ldr r2, [0x0000c5fc]",
            "sub sp, sp, 0x1c",
            "add r3, pc, r3",
            "mov r4, 0",
            "ldr fp, [0x0000c600]",
            "mov r5, r0",
            "add r2, r3, r2",
            "mov r8, r1",
            "add r7, sp, 0x10",
            "mvn sb, 0x80000000",
            "mov r6, r4",
            "str r2, [sp, 0xc]",
            "add fp, r3, fp",
            "b 0xc5dc",
            "ldr r3, [r4, 0x28]",
            "and r3, r8, r3",
            "cmp r3, sl",
            "bne 0xc5dc",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 4",
            "bhi 0xc4e0",
            "cmp r3, 3",
            "bhs 0xc56c",
            "cmp r3, 1",
            "bls 0xc500",
            "b 0xc514",
            "cmp r3, 6",
            "beq 0xc584",
            "blo 0xc5ac",
            "cmp r3, 7",
            "beq 0xc5dc",
            "cmp r3, 0x80",
            "bne 0xc5c4",
            "b 0xc5dc",
            "ldrd r0, r1, [r4, 0x10]",
            "bl fcn.0000faf4",
            "mov r2, r0",
            "asr r3, r2, 0x1f",
            "b 0xc558",
            "ldr r2, [0x0000c604]",
            "ldr r3, [0x0000c608]",
            "ldrd r0, r1, [r4, 0x10]",
            "bl fcn.0000f1ac",
            "ldrd r2, r3, [r4, 0x10]",
            "bl fcn.0000fa90",
            "cmp r0, 0",
            "beq 0xc548",
            "mov r0, r5",
            "mov r1, 0x30",
            "mov r2, fp",
            "ldr r3, [r4]",
            "bl sym.av_log",
            "ldrd r0, r1, [r4, 0x10]",
            "bl sym.imp.__aeabi_d2lz",
            "mov r2, r0",
            "mov r3, r1",
            "str r6, [sp]",
            "mov r0, r5",
            "ldr r1, [r4]",
            "bl sym.av_opt_set_int",
            "b 0xc5dc",
            "ldrd r2, r3, [r4, 0x10]",
            "mov r0, r5",
            "str r6, [sp]",
            "ldr r1, [r4]",
            "bl sym.av_opt_set_double",
            "b 0xc5dc",
            "ldrd r2, r3, [r4, 0x10]",
            "mov r0, r7",
            "str sb, [sp]",
            "bl sym.av_d2q",
            "str r6, [sp]",
            "mov r0, r5",
            "ldr r1, [r4]",
            "ldm r7, {r2, r3}",
            "bl sym.av_opt_set_q",
            "b 0xc5dc",
            "mov r0, r5",
            "ldr r1, [r4]",
            "ldr r2, [r4, 0x10]",
            "mov r3, 0",
            "bl sym.av_opt_set",
            "b 0xc5dc",
            "ldr r2, [r4]",
            "mov r0, r5",
            "mov r1, 0x30",
            "str r2, [sp]",
            "ldr r2, [sp, 0xc]",
            "bl sym.av_log",
            "mov r1, r4",
            "mov r0, r5",
            "bl sym.av_opt_next",
            "subs r4, r0, 0",
            "bne 0xc4b0",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_base64_encode": {
        "function_address": "0x00005050",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sl, lr}",
            "cmn r3, 0xc0000002",
            "ldr r4, [0x00005178]",
            "mov r5, r0",
            "mov r6, r1",
            "mov r7, r2",
            "mov r8, r3",
            "movhi r0, 0",
            "add r4, pc, r4",
            "pophi {r3, r4, r5, r6, r7, r8, sl, pc}",
            "add r0, r3, 2",
            "mov r1, 3",
            "bl fcn.0000f06c",
            "cmp r6, r0, lsl 2",
            "ble 0x5170",
            "ldr sl, [0x0000517c]",
            "mov r6, r5",
            "add sl, r4, sl",
            "b 0x50e4",
            "ldr r0, [r7], 3",
            "bl fcn.00004eb4",
            "add r3, sl, r0, lsr 26",
            "sub r8, r8, 3",
            "ldrb r3, [r3, 0x100]",
            "strb r3, [r6, -4]",
            "ubfx r3, r0, 0x14, 6",
            "add r3, sl, r3",
            "ldrb r3, [r3, 0x100]",
            "strb r3, [r6, -3]",
            "ubfx r3, r0, 0xe, 6",
            "add r3, sl, r3",
            "ubfx r0, r0, 8, 6",
            "ldrb r3, [r3, 0x100]",
            "add r0, sl, r0",
            "strb r3, [r6, -2]",
            "ldrb r3, [r0, 0x100]",
            "strb r3, [r6, -1]",
            "cmp r8, 3",
            "mov r3, r6",
            "add r6, r6, 4",
            "bgt 0x509c",
            "mov r2, r8",
            "mov r1, 0",
            "b 0x510c",
            "ldrb r0, [r7], 1",
            "sub r8, r8, 1",
            "add r1, r0, r1, lsl 8",
            "cmp r8, 0",
            "bne 0x5100",
            "ldr r0, [0x0000517c]",
            "lsl r2, r2, 3",
            "lsl r1, r1, 6",
            "add r4, r4, r0",
            "b 0x5140",
            "lsr r0, r1, r2",
            "sub r2, r2, 6",
            "and r0, r0, 0x3f",
            "add r0, r4, r0",
            "ldrb r0, [r0, 0x100]",
            "strb r0, [r3], 1",
            "cmp r2, 0",
            "bgt 0x5128",
            "b 0x5154",
            "strb r1, [r3], 1",
            "b 0x5158",
            "mov r1, 0x3d",
            "rsb r2, r5, r3",
            "ands r2, r2, 3",
            "bne 0x514c",
            "strb r2, [r3]",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.av_image_alloc": {
        "function_address": "0x00008238",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r8, r0",
            "mov sl, r2",
            "mov r0, r2",
            "mov r2, 0",
            "mov r5, r1",
            "ldr r6, [0x00008344]",
            "mov r1, r3",
            "mov r7, r3",
            "mov r3, r2",
            "ldr r4, [sp, 0x30]",
            "ldr fp, [sp, 0x34]",
            "add r6, pc, r6",
            "bl sym.av_image_check_size",
            "subs sb, r0, 0",
            "blt 0x833c",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, sl",
            "bl sym.av_image_fill_linesizes",
            "subs sb, r0, 0",
            "blt 0x833c",
            "mov r3, r5",
            "add r1, r5, 0x10",
            "rsb r2, fp, 0",
            "ldr r0, [r3]",
            "sub r0, r0, 1",
            "add r0, r0, fp",
            "and r0, r0, r2",
            "str r0, [r3], 4",
            "cmp r3, r1",
            "bne 0x829c",
            "mov r0, r8",
            "mov r1, r4",
            "mov r2, r7",
            "mov r3, 0",
            "str r5, [sp]",
            "bl sym.av_image_fill_pointers",
            "subs sb, r0, 0",
            "blt 0x833c",
            "add r0, sb, fp",
            "bl sym.av_malloc",
            "subs sl, r0, 0",
            "mvneq sb, 0xb",
            "beq 0x833c",
            "mov r0, r8",
            "mov r1, r4",
            "mov r2, r7",
            "mov r3, sl",
            "str r5, [sp]",
            "bl sym.av_image_fill_pointers",
            "subs sb, r0, 0",
            "bge 0x8318",
            "mov r0, sl",
            "bl sym.av_free",
            "b 0x833c",
            "ldr r3, [0x00008348]",
            "ldr r3, [r6, r3]",
            "add r3, r3, r4, lsl 4",
            "ldrb r3, [r3, 7]",
            "tst r3, 2",
            "beq 0x833c",
            "ldr r0, [r8, 4]",
            "mov r1, r4",
            "bl sym.ff_set_systematic_pal2",
            "mov r0, sb",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.ff_set_systematic_pal2": {
        "function_address": "0x000080c4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r3, 0",
            "mov r7, 0xff",
            "mov r6, 0x55",
            "mov r5, 0x24",
            "cmp r1, 0x15",
            "beq 0x8160",
            "bgt 0x80f8",
            "cmp r1, 8",
            "beq 0x817c",
            "cmp r1, 0x13",
            "bne 0x81ac",
            "b 0x8128",
            "cmp r1, 0x16",
            "beq 0x810c",
            "cmp r1, 0x18",
            "bne 0x81ac",
            "b 0x8144",
            "asr r2, r3, 5",
            "ubfx ip, r3, 2, 3",
            "and r4, r3, 3",
            "mul ip, r5, ip",
            "mul r2, r5, r2",
            "mul r4, r6, r4",
            "b 0x8188",
            "asr r4, r3, 6",
            "ubfx ip, r3, 3, 3",
            "and r2, r3, 7",
            "mul ip, r5, ip",
            "mul r4, r6, r4",
            "mul r2, r5, r2",
            "b 0x8188",
            "asr r2, r3, 3",
            "ubfx ip, r3, 1, 2",
            "and r4, r3, 1",
            "mul ip, r6, ip",
            "mul r2, r7, r2",
            "mul r4, r7, r4",
            "b 0x8188",
            "asr r4, r3, 3",
            "ubfx ip, r3, 1, 2",
            "and r2, r3, 1",
            "mul ip, r6, ip",
            "mul r4, r7, r4",
            "mul r2, r7, r2",
            "b 0x8188",
            "mov r4, r3",
            "mov ip, r3",
            "mov r2, r3",
            "add r4, r4, 0xff000000",
            "add r3, r3, 1",
            "add ip, r4, ip, lsl 8",
            "cmp r3, 0x100",
            "add r2, ip, r2, lsl 16",
            "str r2, [r0], 4",
            "bne 0x80d8",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, pc}",
            "mvn r0, 0x15",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_fifo_realloc2": {
        "function_address": "0x000079bc",
        "instructions": [
            "ldr r2, [r0, 0xc]",
            "ldr r3, [r0]",
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "rsb r3, r3, r2",
            "cmp r3, r1",
            "bhs 0x7a44",
            "bl sym.av_fifo_size",
            "mov r6, r0",
            "mov r0, r4",
            "bl sym.av_fifo_alloc",
            "subs r4, r0, 0",
            "beq 0x7a4c",
            "mov r2, r6",
            "ldr r1, [r4]",
            "mov r0, r5",
            "mov r3, 0",
            "bl sym.av_fifo_generic_read",
            "ldr r3, [r4, 8]",
            "ldr r0, [r5]",
            "add r3, r3, r6",
            "str r3, [r4, 8]",
            "ldr r3, [r4, 0x14]",
            "add r6, r3, r6",
            "str r6, [r4, 0x14]",
            "bl sym.av_free",
            "mov ip, r4",
            "ldm ip!, {r0, r1, r2, r3}",
            "stm r5!, {r0, r1, r2, r3}",
            "ldm ip, {r0, r1}",
            "stm r5, {r0, r1}",
            "mov r0, r4",
            "bl sym.av_free",
            "mov r0, 0",
            "pop {r4, r5, r6, pc}",
            "mvn r0, 0xb",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.av_strtok": {
        "function_address": "0x00004d94",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r5, r0, 0",
            "mov r4, r1",
            "mov r6, r2",
            "bne 0x4db4",
            "ldr r5, [r2]",
            "cmp r5, 0",
            "beq 0x4e04",
            "mov r0, r5",
            "mov r1, r4",
            "bl sym.imp.strspn",
            "add r8, r5, r0",
            "ldrb r5, [r5, r0]",
            "cmp r5, 0",
            "streq r5, [r6]",
            "beq 0x4e04",
            "add r7, r8, 1",
            "mov r1, r4",
            "mov r0, r7",
            "bl sym.imp.strcspn",
            "ldrb r3, [r7, r0]",
            "add r2, r7, r0",
            "cmp r3, 0",
            "movne r3, 0",
            "strbne r3, [r7, r0]",
            "addne r3, r2, 1",
            "str r3, [r6]",
            "b 0x4e08",
            "mov r8, r5",
            "mov r0, r8",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.strcspn": {
        "function_address": "0x00003a2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2c4]!"
        ]
    },
    "fcn.0000ffd4": {
        "function_address": "0x0000ffd4",
        "instructions": [
            "push {r1, lr}",
            "mov r0, 8",
            "bl sym.imp.raise",
            "pop {r1, pc}"
        ]
    },
    "sym.imp.raise": {
        "function_address": "0x00003a5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x2a4]!"
        ]
    },
    "sym.av_opt_show2": {
        "function_address": "0x0000ac84",
        "instructions": [
            "ldr ip, [0x0000ace4]",
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "subs r5, r0, 0",
            "mov r4, r1",
            "mov r7, r2",
            "add ip, pc, ip",
            "mov r6, r3",
            "mvneq r0, 0",
            "beq 0xace0",
            "ldr r3, [r5]",
            "mov r0, r1",
            "ldr r2, [0x0000ace8]",
            "mov r1, 0x20",
            "ldr r3, [r3]",
            "add r2, ip, r2",
            "bl sym.av_log",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, 0",
            "mov r3, r7",
            "str r6, [sp]",
            "bl fcn.0000a8ec",
            "mov r0, 0",
            "pop {r1, r2, r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0000a8ec": {
        "function_address": "0x0000a8ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov fp, r3",
            "ldr r5, str.rgb565le",
            "sub sp, sp, 0x1c",
            "mov sb, r2",
            "mov sl, r0",
            "ldr r3, [0x0000abc0]",
            "mov r4, r1",
            "add r5, pc, r5",
            "ldr r8, [0x0000abc4]",
            "ldr r7, [0x0000abc8]",
            "mov r6, 0",
            "add r3, r5, r3",
            "ldr r2, [0x0000abcc]",
            "str r3, [sp, 0xc]",
            "add r8, r5, r8",
            "ldr r3, [0x0000abd0]",
            "add r7, r5, r7",
            "str r2, [sp, 0x14]",
            "add r3, r5, r3",
            "str r3, [sp, 0x10]",
            "b 0xaba0",
            "ldr r3, [r6, 0x28]",
            "tst fp, r3",
            "beq 0xaba0",
            "ldr ip, [sp, 0x40]",
            "tst ip, r3",
            "bne 0xaba0",
            "cmp sb, 0",
            "ldr r3, [r6, 0xc]",
            "bne 0xa974",
            "cmp r3, 0x80",
            "bne 0xa9a0",
            "b 0xaba0",
            "cmp r3, 0x80",
            "bne 0xaba0",
            "mov r0, sb",
            "ldr r1, [r6, 0x2c]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xaba0",
            "mov r0, r4",
            "mov r1, 0x20",
            "ldr r2, [0x0000abd4]",
            "b 0xa9ac",
            "ldr r2, [0x0000abd8]",
            "mov r0, r4",
            "mov r1, 0x20",
            "ldr r3, [r6]",
            "add r2, r5, r2",
            "bl sym.av_log",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 7",
            "addls pc, pc, r3, lsl 2",
            "b 0xaa8c",
            "b 0xa9e8",
            "b 0xa9fc",
            "b 0xaa10",
            "b 0xaa24",
            "b 0xaa38",
            "b 0xaa4c",
            "b 0xaa60",
            "b 0xaa74",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abdc]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abe0]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abe4]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abe8]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abec]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abf0]",
            "b 0xaa84",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "ldr r3, [0x0000abf4]",
            "b 0xaa84",
            "ldr r3, [0x0000abf8]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "add r3, r5, r3",
            "b 0xaaa0",
            "ldr ip, [sp, 0x14]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r7",
            "add r3, r5, ip",
            "bl sym.av_log",
            "ldr r3, [r6, 0x28]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r8",
            "tst r3, 1",
            "moveq r3, 0x2e",
            "movne r3, 0x45",
            "bl sym.av_log",
            "ldr r3, [r6, 0x28]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r8",
            "tst r3, 2",
            "moveq r3, 0x2e",
            "movne r3, 0x44",
            "bl sym.av_log",
            "ldr r3, [r6, 0x28]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r8",
            "tst r3, 0x10",
            "moveq r3, 0x2e",
            "movne r3, 0x56",
            "bl sym.av_log",
            "ldr r3, [r6, 0x28]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r8",
            "tst r3, 8",
            "moveq r3, 0x2e",
            "movne r3, 0x41",
            "bl sym.av_log",
            "ldr r3, [r6, 0x28]",
            "mov r0, r4",
            "mov r1, 0x20",
            "mov r2, r8",
            "tst r3, 0x20",
            "moveq r3, 0x2e",
            "movne r3, 0x53",
            "bl sym.av_log",
            "ldr r3, [r6, 4]",
            "cmp r3, 0",
            "beq 0xab60",
            "mov r0, r4",
            "mov r1, 0x20",
            "ldr r2, [sp, 0x10]",
            "bl sym.av_log",
            "ldr r2, [sp, 0xc]",
            "mov r0, r4",
            "mov r1, 0x20",
            "bl sym.av_log",
            "ldr r2, [r6, 0x2c]",
            "cmp r2, 0",
            "beq 0xaba0",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 0x80",
            "beq 0xaba0",
            "ldr r3, [sp, 0x40]",
            "mov r0, sl",
            "mov r1, r4",
            "str r3, [sp]",
            "mov r3, fp",
            "bl fcn.0000a8ec",
            "mov r1, r6",
            "mov r0, sl",
            "bl sym.av_opt_next",
            "subs r6, r0, 0",
            "bne 0xa944",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.av_fifo_free": {
        "function_address": "0x000077b4",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "popeq {r4, pc}",
            "bl sym.av_freep",
            "mov r0, r4",
            "pop {r4, lr}",
            "b sym.av_free"
        ]
    },
    "sym.av_d2str": {
        "function_address": "0x00004c34",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldr r7, [0x00004c74]",
            "mov r0, 0x10",
            "mov r5, r1",
            "bl sym.av_malloc",
            "subs r6, r0, 0",
            "add r7, pc, r7",
            "beq 0x4c6c",
            "ldr r2, [0x00004c78]",
            "mov r1, 0x10",
            "strd r4, r5, [sp]",
            "add r2, r7, r2",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "pop {r1, r2, r3, r4, r5, r6, r7, pc}"
        ]
    },
    "sym.av_des_mac": {
        "function_address": "0x000059b0",
        "instructions": [
            "mov ip, 0",
            "push {r0, r1, r2, r3, r4, r5, r6, lr}",
            "str ip, [sp, 0x10]",
            "add lr, sp, 0x10",
            "str ip, [sp, 0x14]",
            "str ip, [sp, 4]",
            "add ip, ip, 1",
            "str lr, [sp]",
            "str ip, [sp, 8]",
            "bl fcn.00005718",
            "add sp, sp, 0x1c",
            "ldm sp!, {pc}"
        ]
    },
    "entry.init0": {
        "function_address": "0x00003bf0",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00003c4c]",
            "ldr r3, [0x00003c50]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x3c20",
            "ldr r0, [0x00003c54]",
            "ldr r1, [0x00003c58]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl loc.imp.__register_frame_info",
            "ldr r3, [0x00003c5c]",
            "add r0, r4, r3",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "popeq {r4, pc}",
            "ldr r3, [0x00003c60]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "popeq {r4, pc}",
            "blx r3",
            "pop {r4, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00003840",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x40c]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00003b74",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00003bd8]",
            "ldr r3, [0x00003bdc]",
            "add r4, pc, r4",
            "ldrb r3, [r4, r3]",
            "cmp r3, 0",
            "popne {r4, pc}",
            "ldr r3, [0x00003be0]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x3bac",
            "ldr r3, [0x00003be4]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.__cxa_finalize",
            "ldr r3, [0x00003be8]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "beq 0x3bc8",
            "ldr r0, [0x00003bec]",
            "add r0, r4, r0",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, [0x00003bdc]",
            "mov r2, 1",
            "strb r2, [r4, r3]",
            "pop {r4, pc}"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x000038dc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x3a4]!"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00003aec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x244]!"
        ]
    },
    "fcn.0000fa7c": {
        "function_address": "0x0000fa7c",
        "instructions": [
            "push {r0, lr}",
            "bl fcn.0000f9d8",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, pc}"
        ]
    },
    "fcn.0000f9d8": {
        "function_address": "0x0000f9d8",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "lsl ip, r3, 1",
            "mvnsne ip, ip, asr 21",
            "beq 0xfa30",
            "add sp, sp, 4",
            "orrs ip, r0, r1, lsl 1",
            "orrseq ip, r2, r3, lsl 1",
            "teqne r1, r3",
            "teqeq r0, r2",
            "moveq r0, 0",
            "bxeq lr",
            "cmn r0, 0",
            "teq r1, r3",
            "cmppl r1, r3",
            "cmpeq r0, r2",
            "asrhs r0, r3, 0x1f",
            "mvnlo r0, r3, asr 31",
            "orr r0, r0, 1",
            "bx lr",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "bne 0xfa44",
            "orrs ip, r0, r1, lsl 12",
            "bne 0xfa58",
            "lsl ip, r3, 1",
            "mvns ip, ip, asr 21",
            "bne 0xf9f4",
            "orrs ip, r2, r3, lsl 12",
            "beq 0xf9f4",
            "pop {r0}",
            "bx lr"
        ]
    },
    "fcn.000073d8": {
        "function_address": "0x000073d8",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}",
            "mov r6, r0",
            "add r0, sp, 4",
            "mov r5, r1",
            "bl fcn.00007294",
            "subs sl, r0, 0",
            "movge r7, sp",
            "bge 0x7460",
            "b 0x7490",
            "add r3, r3, 1",
            "mov r0, sp",
            "str r3, [r5, 8]",
            "mov r1, r5",
            "bl fcn.00007294",
            "subs sl, r0, 0",
            "bge 0x7424",
            "mov r0, r4",
            "bl sym.av_expr_free",
            "b 0x7490",
            "cmp r8, 0",
            "mov r1, r4",
            "moveq r0, 0x11",
            "movne r0, 0x10",
            "ldr r2, [sp]",
            "bl fcn.00006768",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "bne 0x7460",
            "mov r0, r4",
            "mvn sl, 0xb",
            "bl sym.av_expr_free",
            "ldr r0, [sp]",
            "bl sym.av_expr_free",
            "b 0x7490",
            "ldr r3, [r5, 8]",
            "ldr r4, [sp, 4]",
            "ldrb sl, [r3]",
            "cmp sl, 0x2a",
            "movne r8, 0",
            "moveq r8, 1",
            "cmp sl, 0x2f",
            "movne sl, r8",
            "orreq sl, r8, 1",
            "cmp sl, 0",
            "bne 0x73fc",
            "str r4, [r6]",
            "mov r0, sl",
            "pop {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00006a3c": {
        "function_address": "0x00006a3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r1",
            "sub sp, sp, 0x1c",
            "mov sl, r0",
            "mov r0, 0x20",
            "bl sym.av_mallocz",
            "ldr r6, [0x000071b4]",
            "cmp r0, 0",
            "ldr r5, [r4, 8]",
            "mov r7, r0",
            "str r0, [sp, 0x14]",
            "mvneq r7, 0xb",
            "add r6, pc, r6",
            "str r5, [sp, 0x10]",
            "beq 0x71a8",
            "mov r0, r5",
            "add r1, sp, 0x10",
            "bl sym.av_strtod",
            "ldr r8, [sp, 0x10]",
            "ldr r3, [r4, 8]",
            "strd r0, r1, [r7, 8]",
            "ldr r7, [sp, 0x14]",
            "cmp r8, r3",
            "beq 0x6ab4",
            "mov r3, 0",
            "str r3, [r7]",
            "str r8, [r4, 8]",
            "str r7, [sl]",
            "mov r7, r3",
            "b 0x71a8",
            "ldr r3, [0x000071b8]",
            "mov r2, 0",
            "mov fp, 0",
            "strd r2, r3, [r7, 8]",
            "b 0x6b00",
            "mov r0, r8",
            "mov r1, sb",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "beq 0x6afc",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "mov r3, 1",
            "add r0, r8, r0",
            "str r0, [r4, 8]",
            "str r3, [r7]",
            "str fp, [r7, 0x10]",
            "b 0x7114",
            "add fp, fp, 1",
            "ldr sb, [r4, 0x10]",
            "cmp sb, 0",
            "beq 0x6b18",
            "ldr sb, [sb, fp, lsl 2]",
            "cmp sb, 0",
            "bne 0x6ac8",
            "ldr r3, [0x000071bc]",
            "add r3, r6, r3",
            "str r3, [sp, 4]",
            "ldr r2, [sp, 4]",
            "lsl r0, sb, 4",
            "str r0, [sp, 0xc]",
            "mov r0, r8",
            "ldr fp, [r2, sb, lsl 4]",
            "mov r1, fp",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0x6b84",
            "mov r0, fp",
            "bl sym.imp.strlen",
            "add r0, r8, r0",
            "ldr r2, [sp, 0xc]",
            "str r0, [r4, 8]",
            "mov r1, 0",
            "ldr r0, [sp, 4]",
            "str r1, [r7]",
            "add r3, r0, r2",
            "ldrd r2, r3, [r3, 8]",
            "strd r2, r3, [r7, 8]",
            "str r7, [sl]",
            "mov r7, r1",
            "b 0x71a8",
            "add sb, sb, 1",
            "cmp sb, 3",
            "bne 0x6b24",
            "mov r0, r8",
            "mov r1, 0x28",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "str r0, [r4, 8]",
            "bne 0x6bcc",
            "ldr r2, [0x000071c0]",
            "mov r3, r5",
            "mov r0, r4",
            "mov r1, 0x10",
            "add r2, r6, r2",
            "bl sym.av_log",
            "ldr r3, [sp, 0x10]",
            "str r3, [r4, 8]",
            "b 0x719c",
            "add r0, r0, 1",
            "str r0, [r4, 8]",
            "ldrb r3, [r8]",
            "cmp r3, 0x28",
            "bne 0x6c34",
            "add r7, sp, 0x14",
            "mov r0, r7",
            "bl sym.av_freep",
            "mov r0, r7",
            "mov r1, r4",
            "bl fcn.00006974",
            "subs r7, r0, 0",
            "blt 0x71a8",
            "ldr r3, [r4, 8]",
            "ldrb r2, [r3]",
            "cmp r2, 0x29",
            "movne r0, r4",
            "movne r1, 0x10",
            "ldrne r2, [0x000071c4]",
            "bne 0x7190",
            "add r3, r3, 1",
            "ldr r7, [sp, 8]",
            "str r3, [r4, 8]",
            "ldr r3, [sp, 0x14]",
            "str r3, [sl]",
            "b 0x71a8",
            "add r0, r7, 0x14",
            "mov r1, r4",
            "bl fcn.00006974",
            "subs r7, r0, 0",
            "bge 0x6c54",
            "ldr r0, [sp, 0x14]",
            "bl sym.av_expr_free",
            "b 0x71a8",
            "ldr r3, [r4, 8]",
            "ldrb r2, [r3]",
            "cmp r2, 0x2c",
            "bne 0x6c7c",
            "ldr r0, [sp, 0x14]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "mov r1, r4",
            "add r0, r0, 0x18",
            "bl fcn.00006974",
            "ldr r3, [r4, 8]",
            "ldrb r2, [r3]",
            "cmp r2, 0x29",
            "movne r0, r4",
            "movne r1, 0x10",
            "ldrne r2, [0x000071c8]",
            "bne 0x7190",
            "ldr r7, [sp, 0x14]",
            "add r3, r3, 1",
            "ldr r8, [sp, 0x10]",
            "ldr r1, [0x000071cc]",
            "str r3, [r4, 8]",
            "mov r3, 2",
            "str r3, [r7]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x000071d0]",
            "bne 0x6ce8",
            "ldr r1, [0x000071d4]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "beq 0x6cf4",
            "ldr r3, [0x000071d8]",
            "ldr r3, [r6, r3]",
            "str r3, [r7, 0x10]",
            "b 0x7114",
            "ldr r1, [0x000071dc]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x000071e0]",
            "bne 0x6ce8",
            "ldr r1, [0x000071e4]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x000071e8]",
            "bne 0x6ce8",
            "ldr r1, [0x000071ec]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x000071f0]",
            "bne 0x6ce8",
            "ldr r1, [0x000071f4]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x000071f8]",
            "bne 0x6ce8",
            "ldr r1, [0x000071fc]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007200]",
            "bne 0x6ce8",
            "ldr r1, [0x00007204]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007208]",
            "bne 0x6ce8",
            "ldr r1, [0x0000720c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007210]",
            "bne 0x6ce8",
            "ldr r1, [0x00007214]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007218]",
            "bne 0x6ce8",
            "ldr r1, [0x0000721c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007220]",
            "bne 0x6ce8",
            "ldr r1, [0x00007224]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "ldr r3, [0x00007228]",
            "bne 0x6ce8",
            "ldr r1, [0x0000722c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 5",
            "bne 0x7110",
            "ldr r1, [0x00007230]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 6",
            "bne 0x7110",
            "ldr r1, [0x00007234]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 9",
            "bne 0x7110",
            "ldr r1, [0x00007238]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0xa",
            "bne 0x7110",
            "ldr r1, [0x0000723c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0xb",
            "bne 0x7110",
            "ldr r1, [0x00007240]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0xc",
            "bne 0x7110",
            "ldr r1, [0x00007244]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "bne 0x6f3c",
            "ldr r1, [0x00007248]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "bne 0x6f0c",
            "ldr r1, [0x0000724c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "beq 0x6f14",
            "ldr r3, [r7, 0x18]",
            "ldr r2, [r7, 0x14]",
            "str r3, [r7, 0x14]",
            "str r2, [r7, 0x18]",
            "mov r3, 0xd",
            "b 0x7110",
            "ldr r1, [0x00007250]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "beq 0x6f44",
            "ldr r3, [r7, 0x18]",
            "ldr r2, [r7, 0x14]",
            "str r3, [r7, 0x14]",
            "str r2, [r7, 0x18]",
            "mov r3, 0xe",
            "b 0x7110",
            "ldr r1, [0x00007254]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 7",
            "bne 0x7110",
            "ldr r1, [0x00007258]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 8",
            "bne 0x7110",
            "ldr r1, [0x0000725c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x14",
            "bne 0x7110",
            "ldr r1, [0x00007260]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x15",
            "bne 0x7110",
            "ldr r1, [0x00007264]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x16",
            "bne 0x7110",
            "ldr r1, [0x00007268]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x17",
            "bne 0x7110",
            "ldr r1, [0x0000726c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x18",
            "bne 0x7110",
            "ldr r1, [0x00007270]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x19",
            "bne 0x7110",
            "ldr r1, [0x00007274]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x1a",
            "bne 0x7110",
            "ldr r1, [0x00007278]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0xf",
            "bne 0x7110",
            "ldr r1, [0x0000727c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x1b",
            "bne 0x7110",
            "ldr r1, [0x00007280]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x1c",
            "bne 0x7110",
            "ldr r1, [0x00007284]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x1d",
            "bne 0x7110",
            "ldr r1, [0x00007288]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "movne r3, 0x1e",
            "bne 0x7110",
            "ldr r1, [0x0000728c]",
            "mov r0, r8",
            "add r1, r6, r1",
            "bl fcn.00005f84",
            "subs fp, r0, 0",
            "movne r3, 0x1f",
            "bne 0x7110",
            "b 0x7124",
            "mov r0, r8",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "add r3, fp, 4",
            "beq 0x7120",
            "ldr r3, [r4, 0x14]",
            "ldr r3, [r3, fp]",
            "str r3, [r7, 0x10]",
            "mov r3, 3",
            "str r3, [r7]",
            "str r7, [sl]",
            "mov r7, 0",
            "b 0x71a8",
            "mov fp, r3",
            "ldr sb, [r4, 0x18]",
            "cmp sb, 0",
            "beq 0x716c",
            "ldr r1, [sb, fp]",
            "cmp r1, 0",
            "bne 0x70ec",
            "mov sb, r1",
            "b 0x716c",
            "mov r0, r8",
            "bl fcn.00005f84",
            "cmp r0, 0",
            "add r3, sb, 4",
            "ldrne r3, [r4, 0x1c]",
            "ldrne r3, [r3, sb]",
            "strne r3, [r7, 0x10]",
            "movne r3, 4",
            "bne 0x7110",
            "mov sb, r3",
            "ldr r3, [r4, 0x20]",
            "cmp r3, 0",
            "beq 0x7184",
            "ldr r1, [r3, sb]",
            "cmp r1, 0",
            "bne 0x7144",
            "ldr r2, [0x00007290]",
            "mov r0, r4",
            "mov r1, 0x10",
            "add r2, r6, r2",
            "mov r3, r5",
            "bl sym.av_log",
            "mvn r7, 0x15",
            "ldr r0, [sp, 0x14]",
            "bl sym.av_expr_free",
            "mov r0, r7",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00005f84": {
        "function_address": "0x00005f84",
        "instructions": [
            "mov r2, 0",
            "b 0x5f98",
            "cmp r3, ip",
            "bne 0x5fe4",
            "add r2, r2, 1",
            "ldrb ip, [r1, r2]",
            "ldrb r3, [r0, r2]",
            "cmp ip, 0",
            "bne 0x5f8c",
            "sub r0, r3, 0x61",
            "sub r2, r3, 0x30",
            "uxtb r0, r0",
            "uxtb r2, r2",
            "cmp r0, 0x19",
            "cmphi r2, 9",
            "movls r0, 0",
            "movhi r0, 1",
            "bxls lr",
            "sub r2, r3, 0x41",
            "cmp r2, 0x19",
            "bls 0x5fec",
            "subs r0, r3, 0x5f",
            "movne r0, 1",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "mov r0, ip",
            "bx lr"
        ]
    },
    "fcn.00007294": {
        "function_address": "0x00007294",
        "instructions": [
            "ldr r3, [r1, 8]",
            "push {r0, r1, r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sl, r0",
            "add r0, sp, 4",
            "mov r4, r1",
            "ldrb r2, [r3]",
            "cmp r2, 0x2d",
            "movne r6, 0",
            "moveq r6, 1",
            "cmp r2, 0x2b",
            "rsbne r6, r6, 0",
            "rsbeq r6, r6, 1",
            "and r2, r6, 1",
            "add r3, r3, r2",
            "str r3, [r1, 8]",
            "bl fcn.00006a3c",
            "subs sb, r0, 0",
            "movge r7, sp",
            "bge 0x7390",
            "b 0x73d0",
            "add r2, r3, 1",
            "mov r0, sp",
            "str r2, [r4, 8]",
            "mov r1, r4",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0x2d",
            "movne r8, 0",
            "moveq r8, 1",
            "cmp r3, 0x2b",
            "rsbne r8, r8, 0",
            "rsbeq r8, r8, 1",
            "and r3, r8, 1",
            "add r2, r2, r3",
            "str r2, [r4, 8]",
            "bl fcn.00006a3c",
            "subs sb, r0, 0",
            "bge 0x7334",
            "mov r0, r5",
            "bl sym.av_expr_free",
            "b 0x73d0",
            "mov r0, 0xf",
            "mov r1, r5",
            "ldr r2, [sp]",
            "bl fcn.00006768",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "bne 0x7368",
            "mov r0, r5",
            "mvn sb, 0xb",
            "bl sym.av_expr_free",
            "ldr r0, [sp]",
            "bl sym.av_expr_free",
            "b 0x73d0",
            "ldr r5, [r0, 0x18]",
            "cmp r5, 0",
            "beq 0x7390",
            "orr r0, r8, 1",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [r5, 8]",
            "bl fcn.0000f558",
            "strd r0, r1, [r5, 8]",
            "ldr r3, [r4, 8]",
            "ldr r5, [sp, 4]",
            "ldrb r2, [r3]",
            "cmp r2, 0x5e",
            "beq 0x72e4",
            "cmp r5, 0",
            "beq 0x73c8",
            "orr r0, r6, 1",
            "bl fcn.0000f47c",
            "mov r2, r0",
            "mov r3, r1",
            "ldrd r0, r1, [r5, 8]",
            "bl fcn.0000f558",
            "strd r0, r1, [r5, 8]",
            "mov sb, 0",
            "str r5, [sl]",
            "mov r0, sb",
            "pop {r2, r3, r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "fcn.0000ff18": {
        "function_address": "0x0000ff18",
        "instructions": [
            "push {r0, r1, r2, r3, lr}",
            "bl fcn.0000fea4",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, r1, r2, r3, pc}"
        ]
    },
    "fcn.0000fea4": {
        "function_address": "0x0000fea4",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl r2, r0, 1",
            "lsl r3, r1, 1",
            "mvns ip, r2, asr 24",
            "mvnsne ip, r3, asr 24",
            "beq 0xfee0",
            "add sp, sp, 4",
            "orrs ip, r2, r3, lsr 1",
            "teqne r0, r1",
            "subspl r0, r2, r3",
            "asrhi r0, r1, 0x1f",
            "mvnlo r0, r1, asr 31",
            "orrne r0, r0, 1",
            "bx lr",
            "mvns ip, r2, asr 24",
            "bne 0xfef0",
            "lsls ip, r0, 9",
            "bne 0xff00",
            "mvns ip, r3, asr 24",
            "bne 0xfec0",
            "lsls ip, r1, 9",
            "beq 0xfec0",
            "pop {r0}",
            "bx lr"
        ]
    },
    "fcn.0000ffe4": {
        "function_address": "0x0000ffe4",
        "instructions": [
            "push {r3, r4, r5, r6, r7, lr}",
            "mov r7, r3",
            "mov r6, r2",
            "mov r4, r0",
            "mov r5, r1",
            "bl fcn.0001005c",
            "umull r2, r3, r0, r6",
            "mul r7, r0, r7",
            "ldr ip, [sp, 0x18]",
            "mla r7, r6, r1, r7",
            "add r3, r7, r3",
            "subs r2, r4, r2",
            "sbc r3, r5, r3",
            "strd r2, r3, [ip]",
            "pop {r3, r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.0001005c": {
        "function_address": "0x0001005c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "subs r8, r1, 0",
            "mov r4, r0",
            "mov r7, r2",
            "mov ip, r3",
            "movge r1, 0",
            "bge 0x10090",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "mov r8, r1",
            "mov r4, r0",
            "mvn r1, 0",
            "cmp ip, 0",
            "str r1, [sp, 0xc]",
            "bge 0x100b8",
            "ldr r1, [sp, 0xc]",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "mov r7, r2",
            "mov ip, r3",
            "mvn r1, r1",
            "str r1, [sp, 0xc]",
            "cmp ip, 0",
            "mov sb, r7",
            "mov fp, r4",
            "mov r5, r8",
            "bne 0x10324",
            "cmp r7, r8",
            "bls 0x10194",
            "clz r3, r7",
            "cmp r3, 0",
            "rsbne r2, r3, 0x20",
            "lslne sb, r7, r3",
            "lsrne r2, r4, r2",
            "lslne fp, r4, r3",
            "lsr r6, sb, 0x10",
            "orrne r5, r2, r8, lsl r3",
            "uxth r8, sb",
            "mov r0, r5",
            "mov r1, r6",
            "bl fcn.0000f04c",
            "mov r0, r5",
            "mov r7, r1",
            "mov r1, r6",
            "bl fcn.0000efa4",
            "lsr r3, fp, 0x10",
            "mul r5, r8, r0",
            "mov r4, r0",
            "orr r7, r3, r7, lsl 16",
            "cmp r7, r5",
            "bhs 0x10144",
            "adds r7, r7, sb",
            "sub r4, r0, 1",
            "bhs 0x10144",
            "cmp r7, r5",
            "sublo r4, r4, 1",
            "addlo r7, r7, sb",
            "rsb r5, r5, r7",
            "mov r1, r6",
            "mov r0, r5",
            "uxth fp, fp",
            "bl fcn.0000f04c",
            "mov r0, r5",
            "mov sl, r1",
            "mov r1, r6",
            "orr sl, fp, sl, lsl 16",
            "bl fcn.0000efa4",
            "mul r8, r8, r0",
            "cmp sl, r8",
            "bhs 0x1018c",
            "adds sl, sl, sb",
            "sub r0, r0, 1",
            "bhs 0x1018c",
            "cmp sl, r8",
            "sublo r0, r0, 1",
            "orr r7, r0, r4, lsl 16",
            "b 0x10484",
            "cmp r7, 0",
            "bne 0x101ac",
            "mov r0, 1",
            "mov r1, ip",
            "bl fcn.0000efa4",
            "mov sb, r0",
            "clz r3, sb",
            "cmp r3, 0",
            "rsbeq r8, sb, r8",
            "moveq r6, 1",
            "beq 0x10280",
            "lsl sb, sb, r3",
            "rsb sl, r3, 0x20",
            "lsr r6, r8, sl",
            "lsr sl, r4, sl",
            "lsr r5, sb, 0x10",
            "lsl fp, r4, r3",
            "orr sl, sl, r8, lsl r3",
            "uxth r8, sb",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.0000f04c",
            "mov r0, r6",
            "mov r4, r1",
            "mov r1, r5",
            "bl fcn.0000efa4",
            "lsr r2, sl, 0x10",
            "mul r3, r8, r0",
            "mov r7, r0",
            "orr r4, r2, r4, lsl 16",
            "cmp r4, r3",
            "bhs 0x1022c",
            "adds r4, r4, sb",
            "sub r7, r0, 1",
            "bhs 0x1022c",
            "cmp r4, r3",
            "sublo r7, r7, 1",
            "addlo r4, r4, sb",
            "rsb r4, r3, r4",
            "mov r1, r5",
            "mov r0, r4",
            "uxth sl, sl",
            "bl fcn.0000f04c",
            "mov r0, r4",
            "mov r6, r1",
            "mov r1, r5",
            "orr sl, sl, r6, lsl 16",
            "bl fcn.0000efa4",
            "mul r8, r8, r0",
            "cmp sl, r8",
            "bhs 0x10278",
            "adds sl, sl, sb",
            "sub r0, r0, 1",
            "bhs 0x10278",
            "cmp sl, r8",
            "sublo r0, r0, 1",
            "addlo sl, sl, sb",
            "orr r6, r0, r7, lsl 16",
            "rsb r8, r8, sl",
            "lsr r7, sb, 0x10",
            "mov r0, r8",
            "uxth r5, sb",
            "mov r1, r7",
            "bl fcn.0000f04c",
            "mov r0, r8",
            "mov sl, r1",
            "mov r1, r7",
            "bl fcn.0000efa4",
            "lsr r3, fp, 0x10",
            "mul r8, r5, r0",
            "mov r4, r0",
            "orr sl, r3, sl, lsl 16",
            "cmp sl, r8",
            "bhs 0x102d4",
            "adds sl, sl, sb",
            "sub r4, r0, 1",
            "bhs 0x102d4",
            "cmp sl, r8",
            "sublo r4, r4, 1",
            "addlo sl, sl, sb",
            "rsb r8, r8, sl",
            "mov r1, r7",
            "mov r0, r8",
            "uxth fp, fp",
            "bl fcn.0000f04c",
            "mov r0, r8",
            "mov sl, r1",
            "mov r1, r7",
            "orr sl, fp, sl, lsl 16",
            "bl fcn.0000efa4",
            "mul r5, r5, r0",
            "cmp sl, r5",
            "bhs 0x1031c",
            "adds sl, sl, sb",
            "sub r0, r0, 1",
            "bhs 0x1031c",
            "cmp sl, r5",
            "sublo r0, r0, 1",
            "orr r7, r0, r4, lsl 16",
            "b 0x10494",
            "cmp ip, r8",
            "movhi r6, 0",
            "bhi 0x10490",
            "clz r6, ip",
            "cmp r6, 0",
            "bne 0x10358",
            "cmp r8, ip",
            "cmpls r4, r7",
            "movlo r4, 0",
            "movhs r4, 1",
            "movhs r7, 1",
            "bhs 0x10494",
            "b 0x1048c",
            "rsb sl, r6, 0x20",
            "lsr r5, r7, sl",
            "lsl r7, r7, r6",
            "orr r5, r5, ip, lsl r6",
            "str r7, [sp, 8]",
            "lsr r7, r8, sl",
            "lsr sl, r4, sl",
            "uxth sb, r5",
            "orr sl, sl, r8, lsl r6",
            "lsr r8, r5, 0x10",
            "mov r0, r7",
            "mov r1, r8",
            "bl fcn.0000f04c",
            "mov r0, r7",
            "mov fp, r1",
            "mov r1, r8",
            "bl fcn.0000efa4",
            "lsr r2, sl, 0x10",
            "mul r3, sb, r0",
            "mov r7, r0",
            "orr fp, r2, fp, lsl 16",
            "cmp fp, r3",
            "bhs 0x103cc",
            "adds fp, fp, r5",
            "sub r7, r0, 1",
            "bhs 0x103cc",
            "cmp fp, r3",
            "sublo r7, r7, 1",
            "addlo fp, fp, r5",
            "rsb fp, r3, fp",
            "mov r1, r8",
            "mov r0, fp",
            "uxth sl, sl",
            "bl fcn.0000f04c",
            "mov r0, fp",
            "mov r3, r1",
            "mov r1, r8",
            "str r3, [sp, 4]",
            "bl fcn.0000efa4",
            "ldr r3, [sp, 4]",
            "mul sb, sb, r0",
            "orr r3, sl, r3, lsl 16",
            "cmp r3, sb",
            "bhs 0x10420",
            "adds r3, r3, r5",
            "sub r0, r0, 1",
            "bhs 0x10420",
            "cmp r3, sb",
            "sublo r0, r0, 1",
            "addlo r3, r3, r5",
            "rsb r3, sb, r3",
            "orr r7, r0, r7, lsl 16",
            "ldr r8, [sp, 8]",
            "lsr r0, r7, 0x10",
            "lsr r1, r8, 0x10",
            "bic r5, r7, r0, lsl 16",
            "bic ip, r8, r1, lsl 16",
            "mul r2, r5, ip",
            "mul ip, r0, ip",
            "mul r5, r1, r5",
            "mul r1, r0, r1",
            "adds r5, ip, r5",
            "addhs r1, r1, 0x10000",
            "adds r2, r2, r5, lsl 16",
            "adc r1, r1, r5, lsr 16",
            "cmp r1, r3",
            "bhi 0x10480",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r2, r4, lsl r6",
            "movls r6, 0",
            "andhi r6, r3, 1",
            "cmp r6, 0",
            "beq 0x10494",
            "sub r7, r7, 1",
            "mov r6, 0",
            "b 0x10494",
            "mov r6, r4",
            "mov r7, r6",
            "ldr r1, [sp, 0xc]",
            "mov r2, r7",
            "mov r3, r6",
            "cmp r1, 0",
            "beq 0x104b0",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "mov r0, r2",
            "mov r1, r3",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.llrint": {
        "function_address": "0x00003900",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x38c]!"
        ]
    },
    "fcn.0000c6a8": {
        "function_address": "0x0000c6a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, 0",
            "ldr sb, [r0]",
            "mov r5, r2",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "mov ip, r1",
            "mov r7, r6",
            "mov r8, sb",
            "mov r2, 0xa",
            "b 0xc708",
            "ldrb fp, [r8], 1",
            "stmib sp, {r2, r3, ip}",
            "bl sym.imp.__ctype_b_loc",
            "ldr r0, [r0]",
            "lsl r1, fp, 1",
            "ldmib sp, {r2, r3}",
            "ldrh r1, [r0, r1]",
            "ldr ip, [sp, 0xc]",
            "tst r1, 8",
            "beq 0xc714",
            "sub fp, fp, 0x30",
            "add r7, r7, 1",
            "mla r6, r2, r6, fp",
            "cmp r7, r3",
            "mov sl, r8",
            "blt 0xc6d4",
            "cmp sl, sb",
            "beq 0xc740",
            "cmp r6, ip",
            "movge ip, 0",
            "movlt ip, 1",
            "cmp r6, r5",
            "movle r5, ip",
            "orrgt r5, ip, 1",
            "cmp r5, 0",
            "streq sl, [r4]",
            "beq 0xc744",
            "mvn r6, 0",
            "mov r0, r6",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00003954",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x19000",
            "ldr pc, [ip, 0x354]!"
        ]
    },
    "fcn.000104c0": {
        "function_address": "0x000104c0",
        "instructions": [
            "push {r0, r1, r2, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r3, 0",
            "mov r5, r0",
            "mov r4, r1",
            "mov r8, r2",
            "mov sl, r0",
            "mov sb, r1",
            "bne 0x10738",
            "cmp r2, r1",
            "bls 0x105a8",
            "clz r3, r2",
            "cmp r3, 0",
            "lslne r8, r2, r3",
            "rsbne r2, r3, 0x20",
            "lsrne r2, r0, r2",
            "lslne sl, r0, r3",
            "lsr r5, r8, 0x10",
            "uxth r6, r8",
            "orrne sb, r2, r1, lsl r3",
            "mov r1, r5",
            "mov r0, sb",
            "bl fcn.0000f04c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r5",
            "bl fcn.0000efa4",
            "lsr r3, sl, 0x10",
            "mul r7, r6, r0",
            "mov r4, r0",
            "orr fp, r3, fp, lsl 16",
            "cmp fp, r7",
            "bhs 0x10558",
            "adds fp, fp, r8",
            "sub r4, r0, 1",
            "bhs 0x10558",
            "cmp fp, r7",
            "sublo r4, r4, 1",
            "addlo fp, fp, r8",
            "rsb r7, r7, fp",
            "mov r1, r5",
            "mov r0, r7",
            "uxth sl, sl",
            "bl fcn.0000f04c",
            "mov r0, r7",
            "mov fp, r1",
            "mov r1, r5",
            "orr fp, sl, fp, lsl 16",
            "bl fcn.0000efa4",
            "mul r6, r6, r0",
            "cmp fp, r6",
            "bhs 0x105a0",
            "adds fp, fp, r8",
            "sub r0, r0, 1",
            "bhs 0x105a0",
            "cmp fp, r6",
            "sublo r0, r0, 1",
            "orr r4, r0, r4, lsl 16",
            "b 0x10894",
            "cmp r2, 0",
            "bne 0x105c0",
            "mov r0, 1",
            "mov r1, r2",
            "bl fcn.0000efa4",
            "mov r8, r0",
            "clz r3, r8",
            "cmp r3, 0",
            "rsbeq r4, r8, r4",
            "moveq r7, 1",
            "beq 0x10694",
            "lsl r8, r8, r3",
            "rsb sb, r3, 0x20",
            "lsr r7, r4, sb",
            "lsr sb, r5, sb",
            "lsr r6, r8, 0x10",
            "uxth fp, r8",
            "orr sb, sb, r4, lsl r3",
            "lsl sl, r5, r3",
            "mov r0, r7",
            "mov r1, r6",
            "bl fcn.0000f04c",
            "mov r0, r7",
            "mov r4, r1",
            "mov r1, r6",
            "bl fcn.0000efa4",
            "lsr r3, sb, 0x10",
            "mul r7, fp, r0",
            "mov r5, r0",
            "orr r4, r3, r4, lsl 16",
            "cmp r4, r7",
            "bhs 0x10640",
            "adds r4, r4, r8",
            "sub r5, r0, 1",
            "bhs 0x10640",
            "cmp r4, r7",
            "sublo r5, r5, 1",
            "addlo r4, r4, r8",
            "rsb r7, r7, r4",
            "mov r1, r6",
            "mov r0, r7",
            "uxth sb, sb",
            "bl fcn.0000f04c",
            "mov r0, r7",
            "mov r4, r1",
            "mov r1, r6",
            "orr r4, sb, r4, lsl 16",
            "bl fcn.0000efa4",
            "mul fp, fp, r0",
            "cmp r4, fp",
            "bhs 0x1068c",
            "adds r4, r4, r8",
            "sub r0, r0, 1",
            "bhs 0x1068c",
            "cmp r4, fp",
            "sublo r0, r0, 1",
            "addlo r4, r4, r8",
            "orr r7, r0, r5, lsl 16",
            "rsb r4, fp, r4",
            "lsr r5, r8, 0x10",
            "mov r0, r4",
            "uxth r6, r8",
            "mov r1, r5",
            "bl fcn.0000f04c",
            "mov r0, r4",
            "mov fp, r1",
            "mov r1, r5",
            "bl fcn.0000efa4",
            "lsr r3, sl, 0x10",
            "mul sb, r6, r0",
            "mov r4, r0",
            "orr fp, r3, fp, lsl 16",
            "cmp fp, sb",
            "bhs 0x106e8",
            "adds fp, fp, r8",
            "sub r4, r0, 1",
            "bhs 0x106e8",
            "cmp fp, sb",
            "sublo r4, r4, 1",
            "addlo fp, fp, r8",
            "rsb sb, sb, fp",
            "mov r1, r5",
            "mov r0, sb",
            "uxth sl, sl",
            "bl fcn.0000f04c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r5",
            "orr fp, sl, fp, lsl 16",
            "bl fcn.0000efa4",
            "mul r6, r6, r0",
            "cmp fp, r6",
            "bhs 0x10730",
            "adds fp, fp, r8",
            "sub r0, r0, 1",
            "bhs 0x10730",
            "cmp fp, r6",
            "sublo r0, r0, 1",
            "orr r4, r0, r4, lsl 16",
            "b 0x108ac",
            "cmp r3, r1",
            "bhi 0x1089c",
            "clz r7, r3",
            "cmp r7, 0",
            "bne 0x10768",
            "cmp r1, r3",
            "cmpls r0, r2",
            "movlo r4, 0",
            "movhs r4, 1",
            "movhs r4, 1",
            "bhs 0x108ac",
            "b 0x108a4",
            "rsb r1, r7, 0x20",
            "lsr r6, r2, r1",
            "lsr sb, r4, r1",
            "lsr r1, r0, r1",
            "lsl r2, r2, r7",
            "orr r6, r6, r3, lsl r7",
            "orr r4, r1, r4, lsl r7",
            "mov r0, sb",
            "lsr r8, r6, 0x10",
            "uxth sl, r6",
            "str r2, [sp, 4]",
            "mov r1, r8",
            "bl fcn.0000f04c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r8",
            "bl fcn.0000efa4",
            "lsr r2, r4, 0x10",
            "mul r3, sl, r0",
            "mov sb, r0",
            "orr fp, r2, fp, lsl 16",
            "cmp fp, r3",
            "bhs 0x107dc",
            "adds fp, fp, r6",
            "sub sb, r0, 1",
            "bhs 0x107dc",
            "cmp fp, r3",
            "sublo sb, sb, 1",
            "addlo fp, fp, r6",
            "rsb fp, r3, fp",
            "mov r1, r8",
            "mov r0, fp",
            "uxth r4, r4",
            "bl fcn.0000f04c",
            "mov r0, fp",
            "mov r3, r1",
            "mov r1, r8",
            "str r3, [sp]",
            "bl fcn.0000efa4",
            "ldr r3, [sp]",
            "mul sl, sl, r0",
            "orr r3, r4, r3, lsl 16",
            "cmp r3, sl",
            "bhs 0x10830",
            "adds r3, r3, r6",
            "sub r0, r0, 1",
            "bhs 0x10830",
            "cmp r3, sl",
            "sublo r0, r0, 1",
            "addlo r3, r3, r6",
            "rsb r3, sl, r3",
            "orr r4, r0, sb, lsl 16",
            "ldr r8, [sp, 4]",
            "lsr r0, r4, 0x10",
            "lsr r1, r8, 0x10",
            "bic ip, r4, r0, lsl 16",
            "bic r6, r8, r1, lsl 16",
            "mul r2, ip, r6",
            "mul r6, r0, r6",
            "mul ip, r1, ip",
            "mul r1, r0, r1",
            "adds ip, r6, ip",
            "addhs r1, r1, 0x10000",
            "adds r2, r2, ip, lsl 16",
            "adc r1, r1, ip, lsr 16",
            "cmp r1, r3",
            "bhi 0x10890",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r2, r5, lsl r7",
            "movls r7, 0",
            "andhi r7, r3, 1",
            "cmp r7, 0",
            "beq 0x108ac",
            "sub r4, r4, 1",
            "mov r7, 0",
            "b 0x108ac",
            "mov r7, 0",
            "b 0x108a8",
            "mov r7, r4",
            "mov r4, r7",
            "mov r0, r4",
            "mov r1, r7",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    }
}