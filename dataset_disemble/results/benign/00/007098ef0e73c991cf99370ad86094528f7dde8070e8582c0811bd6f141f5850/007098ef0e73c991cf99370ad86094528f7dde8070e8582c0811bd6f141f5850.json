{
    "sym._init": {
        "function_address": "0x00000b78",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [0x00201fb8]",
            "test rax, rax",
            "je 0xb8d",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00000c00",
        "instructions": [
            "jmp qword [reloc.__gmon_start__]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00000d40",
        "instructions": [
            "cmp byte [loc._edata], 0",
            "jne 0xd70",
            "cmp qword [0x00201fd0], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0xd63",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc._edata], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00000c70",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x00000cb0",
        "instructions": [
            "lea rdi, [loc._edata]",
            "lea rax, [0x0020216f]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0xce0",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0xce0",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.000010c0": {
        "function_address": "0x000010c0",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdi",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov rbp, rdx",
            "sub rsp, 0x20d8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x20c8], rax",
            "xor eax, eax",
            "lea rax, [rsi - 1]",
            "mov qword [rsp + 0x18], rcx",
            "mov qword [rsp + 0x20], rax",
            "movzx eax, byte [rsi]",
            "test al, al",
            "je 0x15fa",
            "mov edx, 1",
            "nop dword [rax + rax]",
            "cmp edx, 0x12",
            "jg 0x1124",
            "cmp al, 0x2e",
            "jne 0x1124",
            "movsxd rax, edx",
            "add edx, 1",
            "mov qword [rsp + rax*8 + 0x20], r12",
            "add r12, 1",
            "movzx eax, byte [r12]",
            "test al, al",
            "jne 0x1110",
            "mov dword [rsp + 0x14], edx",
            "movsxd rax, dword [rsp + 0x14]",
            "lea r14, [rsp + 0xc0]",
            "mov qword [r15 + 0x168], 0",
            "xor edx, edx",
            "mov r13, r14",
            "mov qword [rsp + rax*8 + 0x20], r12",
            "lea rax, [r14 + 0x2000]",
            "mov qword [rsp], rax",
            "nop word [rax + rax]",
            "movzx eax, byte [rbp]",
            "test al, al",
            "je 0x11ca",
            "cmp al, 0x25",
            "je 0x1238",
            "lea rcx, [r13 + 1]",
            "cmp rcx, qword [rsp]",
            "jbe 0x1320",
            "mov rsi, qword [r15 + 0x168]",
            "mov byte [r13], 0",
            "test rsi, rsi",
            "je 0x1578",
            "mov rdi, qword [r15]",
            "mov rdx, r14",
            "xor ecx, ecx",
            "xor eax, eax",
            "lea r13, [r14 + 1]",
            "call loc.imp.apr_pstrcat",
            "mov qword [r15 + 0x168], rax",
            "movzx edx, byte [rbp]",
            "mov rax, r14",
            "add rbp, 1",
            "mov byte [rax], dl",
            "movzx eax, byte [rbp]",
            "test al, al",
            "jne 0x1170",
            "mov rsi, qword [r15 + 0x168]",
            "xor eax, eax",
            "cmp dl, 0x2f",
            "sete al",
            "add qword [rsp + 0x18], rax",
            "mov byte [r13], 0",
            "mov rdi, qword [rsp + 0x18]",
            "test rsi, rsi",
            "je 0x15da",
            "mov rcx, rdi",
            "mov rdi, qword [r15]",
            "xor r8d, r8d",
            "mov rdx, r14",
            "xor eax, eax",
            "call loc.imp.apr_pstrcat",
            "mov qword [r15 + 0x168], rax",
            "mov rax, qword [rsp + 0x20c8]",
            "xor rax, qword fs:[0x28]",
            "jne 0x163f",
            "add rsp, 0x20d8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "movsx eax, byte [rbp + 1]",
            "cmp al, 0x25",
            "je 0x1460",
            "cmp al, 0x70",
            "je 0x14b0",
            "cmp al, 0x2d",
            "je 0x1448",
            "lea rsi, [rbp + 1]",
            "xor edi, edi",
            "movzx edx, byte [rsi + 1]",
            "lea ecx, [rax - 0x30]",
            "cmp dl, 0x2b",
            "je 0x1430",
            "lea rbp, [rsi + 1]",
            "xor r10d, r10d",
            "cmp dl, 0x2e",
            "je 0x1398",
            "mov rbx, qword [rsp + 0x20]",
            "test ecx, ecx",
            "lea r9, [rbx + 1]",
            "jne 0x1330",
            "mov rax, r12",
            "mov rbx, r12",
            "sub rax, r9",
            "cdqe",
            "add rax, r13",
            "cmp qword [rsp], rax",
            "jae 0x12d7",
            "mov rsi, qword [r15 + 0x168]",
            "mov byte [r13], 0",
            "mov qword [rsp + 8], r9",
            "test rsi, rsi",
            "je 0x159a",
            "mov rdi, qword [r15]",
            "xor ecx, ecx",
            "mov rdx, r14",
            "xor eax, eax",
            "mov r13, r14",
            "call loc.imp.apr_pstrcat",
            "mov r9, qword [rsp + 8]",
            "mov qword [r15 + 0x168], rax",
            "cmp r9, rbx",
            "jae 0x1314",
            "mov qword [rsp + 8], r9",
            "call sym.imp.__ctype_tolower_loc",
            "mov r9, qword [rsp + 8]",
            "mov rsi, qword [rax]",
            "mov rcx, r13",
            "mov rax, r9",
            "nop dword [rax]",
            "movzx edx, byte [rax]",
            "add rax, 1",
            "add rcx, 1",
            "cmp rax, rbx",
            "mov edx, dword [rsi + rdx*4]",
            "mov byte [rcx - 1], dl",
            "jne 0x12f8",
            "sub rax, r9",
            "add r13, rax",
            "xor edx, edx",
            "jmp 0x1168",
            "mov edx, eax",
            "mov rax, r13",
            "mov r13, rcx",
            "jmp 0x11bc",
            "cmp ecx, dword [rsp + 0x14]",
            "jg 0x1370",
            "xor edx, edx",
            "xor esi, esi",
            "xor r8d, r8d",
            "test edi, edi",
            "je 0x1540",
            "mov eax, dword [rsp + 0x14]",
            "sub eax, ecx",
            "test r10d, r10d",
            "jne 0x135c",
            "movsxd rcx, eax",
            "mov r9, qword [rsp + rcx*8 + 0x20]",
            "add r9, 1",
            "add eax, 1",
            "cdqe",
            "mov rbx, qword [rsp + rax*8 + 0x20]",
            "jmp 0x13e7",
            "lea rax, [r13 + 1]",
            "cmp qword [rsp], rax",
            "lea rbx, [0x00001894]",
            "lea r9, [0x00001893]",
            "jb 0x129f",
            "jmp 0x12dc",
            "movsx edx, byte [rbp + 1]",
            "cmp dl, 0x2d",
            "je 0x15c7",
            "lea rsi, [rbp + 1]",
            "xor r8d, r8d",
            "sub edx, 0x30",
            "cmp byte [rsi + 1], 0x2b",
            "je 0x15b9",
            "lea rbp, [rsi + 1]",
            "xor esi, esi",
            "mov rbx, qword [rsp + 0x20]",
            "test ecx, ecx",
            "lea r9, [rbx + 1]",
            "mov rbx, r12",
            "je 0x13e7",
            "cmp ecx, dword [rsp + 0x14]",
            "jle 0x133d",
            "lea rbx, [0x00001894]",
            "lea r9, [0x00001893]",
            "test edx, edx",
            "mov rax, rbx",
            "je 0x1291",
            "mov rcx, rbx",
            "movsxd rdx, edx",
            "sub rcx, r9",
            "cmp rdx, rcx",
            "jg 0x1370",
            "test r8d, r8d",
            "jne 0x1520",
            "test esi, esi",
            "lea r9, [r9 + rdx - 1]",
            "jne 0x1291",
            "lea rbx, [r9 + 1]",
            "mov rax, rbx",
            "jmp 0x1291",
            "lea rbp, [rsi + 2]",
            "movzx edx, byte [rsi + 2]",
            "mov r10d, 1",
            "jmp 0x1271",
            "lea rsi, [rbp + 2]",
            "movsx eax, byte [rbp + 2]",
            "mov edi, 1",
            "jmp 0x125a",
            "add rbp, 2",
            "lea rax, [r13 + 1]",
            "cmp rax, qword [rsp]",
            "jbe 0x1567",
            "mov rsi, qword [r15 + 0x168]",
            "mov byte [r13], 0",
            "test rsi, rsi",
            "je 0x1607",
            "mov rdi, qword [r15]",
            "mov rdx, r14",
            "xor ecx, ecx",
            "xor eax, eax",
            "lea r13, [r14 + 1]",
            "call loc.imp.apr_pstrcat",
            "mov rdx, r14",
            "mov qword [r15 + 0x168], rax",
            "mov byte [rdx], 0x25",
            "xor edx, edx",
            "jmp 0x1168",
            "add rbp, 2",
            "lea rax, [r13 + 7]",
            "cmp qword [rsp], rax",
            "jae 0x14ec",
            "mov rsi, qword [r15 + 0x168]",
            "mov byte [r13], 0",
            "test rsi, rsi",
            "je 0x1625",
            "mov rdi, qword [r15]",
            "xor ecx, ecx",
            "mov rdx, r14",
            "xor eax, eax",
            "mov r13, r14",
            "call loc.imp.apr_pstrcat",
            "mov qword [r15 + 0x168], rax",
            "mov rdi, r15",
            "call loc.imp.ap_get_server_port",
            "lea rdx, [0x00001895]",
            "movzx ecx, ax",
            "mov rdi, r13",
            "mov esi, 7",
            "xor eax, eax",
            "call loc.imp.apr_snprintf",
            "cdqe",
            "xor edx, edx",
            "add r13, rax",
            "jmp 0x1168",
            "mov rax, rbx",
            "sub rax, rdx",
            "test esi, esi",
            "cmove r9, rax",
            "mov eax, 1",
            "sub rax, rdx",
            "add rbx, rax",
            "mov rax, rbx",
            "jmp 0x1291",
            "sub eax, 0x31",
            "mov rbx, r12",
            "cdqe",
            "mov r9, qword [rsp + rax*8 + 0x20]",
            "add r9, 1",
            "test r10d, r10d",
            "jne 0x13e7",
            "movsxd rcx, ecx",
            "mov rbx, qword [rsp + rcx*8 + 0x20]",
            "jmp 0x13e7",
            "mov rdx, r13",
            "mov r13, rax",
            "jmp 0x14a4",
            "mov rdi, qword [r15]",
            "mov rsi, r14",
            "lea r13, [r14 + 1]",
            "call loc.imp.apr_pstrdup",
            "mov qword [r15 + 0x168], rax",
            "mov rax, r14",
            "movzx edx, byte [rbp]",
            "jmp 0x11bc",
            "mov rdi, qword [r15]",
            "mov rsi, r14",
            "mov r13, r14",
            "call loc.imp.apr_pstrdup",
            "mov r9, qword [rsp + 8]",
            "mov qword [r15 + 0x168], rax",
            "jmp 0x12d7",
            "lea rbp, [rsi + 2]",
            "mov esi, 1",
            "jmp 0x13bf",
            "lea rsi, [rbp + 2]",
            "movsx edx, byte [rbp + 2]",
            "mov r8d, 1",
            "jmp 0x13ac",
            "mov rdx, qword [rsp + 0x18]",
            "mov rdi, qword [r15]",
            "xor ecx, ecx",
            "mov rsi, r14",
            "xor eax, eax",
            "call loc.imp.apr_pstrcat",
            "mov qword [r15 + 0x168], rax",
            "jmp 0x120b",
            "mov dword [rsp + 0x14], 1",
            "jmp 0x1135",
            "mov rdi, qword [r15]",
            "mov rsi, r14",
            "lea r13, [r14 + 1]",
            "call loc.imp.apr_pstrdup",
            "mov rdx, r14",
            "mov qword [r15 + 0x168], rax",
            "jmp 0x14a4",
            "mov rdi, qword [r15]",
            "mov rsi, r14",
            "mov r13, r14",
            "call loc.imp.apr_pstrdup",
            "mov qword [r15 + 0x168], rax",
            "jmp 0x14ec",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "loc.imp.apr_pstrcat": {
        "function_address": "0x00000c50",
        "instructions": [
            "jmp qword [reloc.apr_pstrcat]"
        ]
    },
    "sym.imp.__ctype_tolower_loc": {
        "function_address": "0x00000c90",
        "instructions": [
            "jmp qword [reloc.__ctype_tolower_loc]"
        ]
    },
    "loc.imp.ap_get_server_port": {
        "function_address": "0x00000c40",
        "instructions": [
            "jmp qword [reloc.ap_get_server_port]"
        ]
    },
    "loc.imp.apr_snprintf": {
        "function_address": "0x00000c30",
        "instructions": [
            "jmp qword [reloc.apr_snprintf]"
        ]
    },
    "loc.imp.apr_pstrdup": {
        "function_address": "0x00000c20",
        "instructions": [
            "jmp qword [reloc.apr_pstrdup]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00000be0",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    }
}