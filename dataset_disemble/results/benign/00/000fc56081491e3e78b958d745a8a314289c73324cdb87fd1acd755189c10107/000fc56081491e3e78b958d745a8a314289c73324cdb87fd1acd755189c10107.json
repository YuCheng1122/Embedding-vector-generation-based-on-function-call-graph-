{
    "entry0": {
        "function_address": "0x00401a60",
        "instructions": [
            "xor ebp, ebp",
            "mov r9, rdx",
            "pop rsi",
            "mov rdx, rsp",
            "and rsp, 0xfffffffffffffff0",
            "push rax",
            "push rsp",
            "mov r8, 0x4048e0",
            "mov rcx, 0x4048f0",
            "mov rdi, main",
            "call sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x004015b0",
        "instructions": [
            "jmp qword [reloc.__libc_start_main]"
        ]
    },
    "sym._init": {
        "function_address": "0x00401498",
        "instructions": [
            "sub rsp, 8",
            "call fcn.00401a8c",
            "add rsp, 8",
            "ret"
        ]
    },
    "fcn.00401a8c": {
        "function_address": "0x00401a8c",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x401a9e",
            "call rax",
            "add rsp, 8",
            "ret"
        ]
    },
    "main": {
        "function_address": "0x00401880",
        "instructions": [
            "push r14",
            "xor eax, eax",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x10",
            "call fcn.004031a0",
            "test eax, eax",
            "jne 0x401a0a",
            "xor eax, eax",
            "mov esi, 0x201",
            "mov edi, str._var_readydrop_cursor0",
            "call sym.imp.open",
            "cmp eax, 0xffffffff",
            "mov ebx, eax",
            "je 0x4019ca",
            "xor edx, edx",
            "mov esi, 1",
            "mov edi, eax",
            "call sym.imp.lockf",
            "mov edi, str._var_readydrop_rd.db",
            "call fcn.004024e0",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4019a0",
            "mov rdi, rax",
            "mov esi, str.DELETE_FROM_atoms",
            "xor eax, eax",
            "call fcn.004026c0",
            "mov rdi, qword [0x00606458]",
            "lea r13, [rsp + 8]",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov r12, rax",
            "je 0x401920",
            "mov rdi, rax",
            "lea r13, [rsp + 8]",
            "call fcn.004037f0",
            "test eax, eax",
            "jne 0x4019d8",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rsi, qword [0x006064c8]",
            "xor eax, eax",
            "mov edi, str.INFO:start:_Add__lld_entries_in_database.",
            "call fcn.00402ee0",
            "mov rdx, qword [0x006064c8]",
            "mov esi, str._lld_n",
            "xor eax, eax",
            "mov rdi, r13",
            "mov qword [rsp + 8], 0",
            "call sym.imp.asprintf",
            "mov rsi, qword [rsp + 8]",
            "test rsi, rsi",
            "je 0x40198e",
            "or r12, 0xffffffffffffffff",
            "xor eax, eax",
            "mov rdi, rsi",
            "mov rcx, r12",
            "repne scasb al, byte [rdi]",
            "mov edi, ebx",
            "not rcx",
            "lea r13, [rcx + r12]",
            "mov rdx, r13",
            "call sym.imp.write",
            "add eax, 1",
            "je 0x401a30",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.free",
            "mov rdi, rbp",
            "xor esi, esi",
            "call fcn.00401d40",
            "mov rdi, rbp",
            "call fcn.00402830",
            "mov edi, ebx",
            "xor edx, edx",
            "xor esi, esi",
            "call sym.imp.lockf",
            "mov edi, ebx",
            "xor eax, eax",
            "call sym.imp.close",
            "xor eax, eax",
            "call fcn.00402c00",
            "xor eax, eax",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov edi, str.ERROR:START:_faild_open_cursor0",
            "xor eax, eax",
            "call fcn.00402ee0",
            "jmp 0x4019b4",
            "mov rdi, r12",
            "mov rsi, r13",
            "mov qword [rsp + 8], 0",
            "call fcn.004034e0",
            "mov rdi, qword [rsp + 8]",
            "test rdi, rdi",
            "je 0x401918",
            "cmp rax, 2",
            "jg 0x401a1b",
            "call fcn.004035f0",
            "jmp 0x401918",
            "xor eax, eax",
            "mov edi, str.ERROR:_CONFIGURE_FAIL",
            "call fcn.00402ee0",
            "or eax, 0xffffffff",
            "jmp 0x4019bd",
            "mov rdx, rdi",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00401ee0",
            "mov rdi, qword [rsp + 8]",
            "jmp 0x401a00",
            "call sym.imp.__errno_location",
            "mov r14d, dword [rax]",
            "mov edi, r14d",
            "call sym.imp.strerror",
            "mov r8, r13",
            "mov rsi, rax",
            "mov rcx, r12",
            "mov edx, r14d",
            "mov edi, str.ERROR:_WRITE:_strerror_s_errno_d_n_lld_cache_size_lld",
            "xor eax, eax",
            "call fcn.00402ee0",
            "jmp 0x401984"
        ]
    },
    "fcn.004031a0": {
        "function_address": "0x004031a0",
        "instructions": [
            "push r13",
            "mov edi, str._etc_readydrop_readydropd.conf",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x18",
            "call fcn.00402c90",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4034d4",
            "mov edi, 0xa",
            "mov rdx, rsp",
            "mov rsi, rax",
            "mov qword [rsp], 0",
            "mov r12d, 0xffffffff",
            "call fcn.00403080",
            "mov rdi, qword [rsp]",
            "test rdi, rdi",
            "mov rcx, rdi",
            "je 0x403311",
            "mov rdx, qword [rdi]",
            "test rdx, rdx",
            "je 0x40330c",
            "mov ebx, 8",
            "nop",
            "cmp byte [rdx], 0x23",
            "je 0x4032f8",
            "mov qword [rsp + 8], 0",
            "mov rdi, qword [rcx]",
            "call fcn.00402b50",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov r13, rax",
            "je 0x4032f4",
            "lea rdx, [rsp + 8]",
            "mov rsi, rax",
            "mov edi, 0x3d",
            "call fcn.00403080",
            "mov rax, qword [rsp + 8]",
            "test rax, rax",
            "je 0x4032ec",
            "mov rdi, qword [rax]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x4032ec",
            "mov rax, qword [rsp + 8]",
            "mov edi, str.home_dir",
            "mov ecx, 9",
            "mov rdx, qword [rax]",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x4033f0",
            "mov edi, str.home_dir_user",
            "mov ecx, 0xe",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x4033c8",
            "mov edi, str.home_dir_group",
            "mov ecx, 0xf",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x4033a0",
            "mov edi, str.httpd_user",
            "mov ecx, 0xb",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x403378",
            "mov edi, str.httpd_group",
            "mov ecx, 0xc",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x403350",
            "mov edi, str.log_level",
            "mov ecx, 0xa",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x403330",
            "mov rdi, rax",
            "xor r12d, r12d",
            "call sym.imp.free",
            "mov rdi, r13",
            "call sym.imp.free",
            "mov rdi, qword [rsp]",
            "lea rcx, [rdi + rbx]",
            "add rbx, 8",
            "mov rdx, qword [rcx]",
            "test rdx, rdx",
            "jne 0x403200",
            "call sym.imp.free",
            "mov rdi, rbp",
            "call sym.imp.free",
            "add rsp, 0x18",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x403347",
            "cmp byte [rax], 0",
            "jne 0x403418",
            "mov rax, qword [rsp + 8]",
            "jmp 0x4032e1",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x403367",
            "cmp byte [rax], 0",
            "jne 0x403438",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032d0",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x40338f",
            "cmp byte [rax], 0",
            "jne 0x403458",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032bb",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x4033b7",
            "cmp byte [rax], 0",
            "jne 0x403478",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032a6",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x4033df",
            "cmp byte [rax], 0",
            "jne 0x403498",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x403291",
            "mov rdi, qword [rax + 8]",
            "call fcn.00402b50",
            "test rax, rax",
            "je 0x403407",
            "cmp byte [rax], 0",
            "jne 0x4034b8",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x40327c",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606430], rax",
            "mov rax, qword [rsp + 8]",
            "jmp 0x4032e1",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606438], rax",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032d0",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606440], rax",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032bb",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606448], rax",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x4032a6",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606450], rax",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x403291",
            "mov rdi, rax",
            "call sym.imp.__strdup",
            "mov qword [0x00606458], rax",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax]",
            "jmp 0x40327c",
            "mov r12d, 0xffffffff",
            "jmp 0x403319"
        ]
    },
    "sym.imp.open": {
        "function_address": "0x00401850",
        "instructions": [
            "jmp qword [reloc.open]"
        ]
    },
    "sym.imp.lockf": {
        "function_address": "0x004015d0",
        "instructions": [
            "jmp qword [reloc.lockf]"
        ]
    },
    "fcn.004024e0": {
        "function_address": "0x004024e0",
        "instructions": [
            "mov qword [rsp - 0x10], rbx",
            "mov qword [rsp - 8], rbp",
            "sub rsp, 0x28",
            "mov rbp, rdi",
            "mov edi, 0x10",
            "call sym.imp.malloc",
            "lea rsi, [rsp + 8]",
            "mov qword [rax], 0",
            "mov qword [rax + 8], 0",
            "mov rdi, rbp",
            "mov rbx, rax",
            "mov qword [rsp + 8], 0",
            "call sym.imp.sqlite3_open",
            "test eax, eax",
            "jne 0x402548",
            "mov rax, qword [rsp + 8]",
            "mov qword [rbx], rax",
            "mov rax, rbx",
            "mov rbp, qword [rsp + 0x20]",
            "mov rbx, qword [rsp + 0x18]",
            "add rsp, 0x28",
            "ret",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.sqlite3_errmsg",
            "mov edi, str.ERROR:SQL3:SQL3_SELECT:SQLITE3_OPEN:_errmsg_s",
            "mov rsi, rax",
            "xor eax, eax",
            "call fcn.00402ee0",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call sym.imp.free",
            "jmp 0x40252f"
        ]
    },
    "fcn.004026c0": {
        "function_address": "0x004026c0",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0xe8",
            "test al, al",
            "mov qword [rsp + 0x40], rdx",
            "mov qword [rsp + 0x48], rcx",
            "mov qword [rsp + 0x50], r8",
            "mov qword [rsp + 0x58], r9",
            "je 0x40271e",
            "movaps xmmword [rsp + 0x60], xmm0",
            "movaps xmmword [rsp + 0x70], xmm1",
            "movaps xmmword [rsp + 0x80], xmm2",
            "movaps xmmword [rsp + 0x90], xmm3",
            "movaps xmmword [rsp + 0xa0], xmm4",
            "movaps xmmword [rsp + 0xb0], xmm5",
            "movaps xmmword [rsp + 0xc0], xmm6",
            "movaps xmmword [rsp + 0xd0], xmm7",
            "lea rax, [rsp + 0x100]",
            "lea rdx, [rsp + 0x18]",
            "lea rdi, [rsp + 8]",
            "mov qword [rsp + 8], 0",
            "mov dword [rsp + 0x18], 0x10",
            "xor ebx, ebx",
            "mov qword [rsp + 0x20], rax",
            "lea rax, [rsp + 0x30]",
            "mov dword [rsp + 0x1c], 0x30",
            "mov qword [rsp + 0x28], rax",
            "xor eax, eax",
            "call sym.imp.vasprintf",
            "mov rsi, qword [rsp + 8]",
            "test rsi, rsi",
            "je 0x4027b5",
            "mov rdi, qword [rbp]",
            "lea r8, [rsp + 0x10]",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov qword [rsp + 0x10], 0",
            "call sym.imp.sqlite3_exec",
            "mov rsi, qword [rsp + 0x10]",
            "test rsi, rsi",
            "je 0x4027ab",
            "mov edi, str.ERROR:SQL3:SQL3_UPDATE:_errmsg_s",
            "xor eax, eax",
            "mov ebx, 0xffffffff",
            "call fcn.00402ee0",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.sqlite3_free",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.free",
            "add rsp, 0xe8",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.__strdup": {
        "function_address": "0x00401610",
        "instructions": [
            "jmp qword [reloc.__strdup]"
        ]
    },
    "fcn.004037f0": {
        "function_address": "0x004037f0",
        "instructions": [
            "sub rsp, 0x98",
            "mov rsi, rdi",
            "mov edi, 1",
            "mov rdx, rsp",
            "call sym.imp.__xstat",
            "xor edx, edx",
            "test eax, eax",
            "jne 0x403820",
            "mov eax, dword [rsp + 0x18]",
            "xor edx, edx",
            "and eax, 0xf000",
            "cmp eax, 0x4000",
            "sete dl",
            "mov eax, edx",
            "add rsp, 0x98",
            "ret"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00401630",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "fcn.00402ee0": {
        "function_address": "0x00402ee0",
        "instructions": [
            "push rbx",
            "sub rsp, 0xd0",
            "test al, al",
            "mov qword [rsp + 0x28], rsi",
            "mov qword [rsp + 0x30], rdx",
            "mov qword [rsp + 0x38], rcx",
            "mov qword [rsp + 0x40], r8",
            "mov qword [rsp + 0x48], r9",
            "je 0x402f3c",
            "movaps xmmword [rsp + 0x50], xmm0",
            "movaps xmmword [rsp + 0x60], xmm1",
            "movaps xmmword [rsp + 0x70], xmm2",
            "movaps xmmword [rsp + 0x80], xmm3",
            "movaps xmmword [rsp + 0x90], xmm4",
            "movaps xmmword [rsp + 0xa0], xmm5",
            "movaps xmmword [rsp + 0xb0], xmm6",
            "movaps xmmword [rsp + 0xc0], xmm7",
            "mov rdx, qword [0x00606430]",
            "mov rcx, rdi",
            "mov rbx, rdi",
            "mov esi, str.RD_LOG_LEVEL_s_format_s",
            "mov rdi, rsp",
            "xor eax, eax",
            "mov qword [rsp], 0",
            "call sym.imp.asprintf",
            "mov rdi, qword [rsp]",
            "call sym.imp.free",
            "lea rax, [rsp + 0xe0]",
            "lea rdx, [rsp + 8]",
            "mov rsi, rbx",
            "mov rdi, rsp",
            "mov qword [rsp], 0",
            "mov dword [rsp + 8], 8",
            "mov qword [rsp + 0x10], rax",
            "lea rax, [rsp + 0x20]",
            "mov dword [rsp + 0xc], 0x30",
            "mov qword [rsp + 0x18], rax",
            "xor eax, eax",
            "call sym.imp.vasprintf",
            "mov rbx, qword [rsp]",
            "test rbx, rbx",
            "je 0x402fed",
            "mov rax, qword [0x00606430]",
            "movzx eax, byte [rax]",
            "cmp al, 0x30",
            "je 0x403038",
            "cmp al, 0x31",
            "je 0x403000",
            "mov edi, str.REMOTE_ADDR",
            "call sym.imp.getenv",
            "mov rdx, rbx",
            "mov rsi, rax",
            "mov edi, str.ip:_s__s_n",
            "xor eax, eax",
            "call fcn.00402a80",
            "mov rbx, qword [rsp]",
            "mov rdi, rbx",
            "call sym.imp.free",
            "add rsp, 0xd0",
            "pop rbx",
            "ret",
            "mov esi, str.ERROR:",
            "mov rdi, rbx",
            "call sym.imp.strstr",
            "cmp rbx, rax",
            "je 0x403050",
            "mov esi, str.INFO:",
            "mov rdi, rbx",
            "call sym.imp.strstr",
            "cmp rax, rbx",
            "jne 0x402fe5",
            "mov edi, str.REMOTE_ADDR",
            "call sym.imp.getenv",
            "lea rdx, [rbx + 5]",
            "jmp 0x402fd2",
            "mov esi, str.ERROR:",
            "mov rdi, rbx",
            "call sym.imp.strstr",
            "cmp rbx, rax",
            "jne 0x402fe5",
            "jmp 0x402fc5",
            "mov edi, str.REMOTE_ADDR",
            "call sym.imp.getenv",
            "mov rdx, rbx",
            "mov rsi, rax",
            "mov edi, str.ip:_s__s_n",
            "xor eax, eax",
            "call fcn.00402a80",
            "mov rbx, qword [rsp]",
            "jmp 0x403012"
        ]
    },
    "sym.imp.asprintf": {
        "function_address": "0x00401770",
        "instructions": [
            "jmp qword [reloc.asprintf]"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00401830",
        "instructions": [
            "jmp qword [reloc.write]"
        ]
    },
    "fcn.00401d40": {
        "function_address": "0x00401d40",
        "instructions": [
            "mov qword [rsp - 0x20], r12",
            "mov qword [rsp - 8], r15",
            "mov r12, rsi",
            "mov qword [rsp - 0x30], rbx",
            "mov qword [rsp - 0x28], rbp",
            "mov r15, rdi",
            "mov qword [rsp - 0x18], r13",
            "mov qword [rsp - 0x10], r14",
            "sub rsp, 0x48",
            "test rsi, rsi",
            "je 0x401e40",
            "mov rbp, qword [0x006064d0]",
            "test rbp, rbp",
            "je 0x401eb0",
            "mov rdi, rbp",
            "call sym.imp.strlen",
            "mov r13, rax",
            "mov rdi, r12",
            "call sym.imp.strlen",
            "lea rdx, [r13 + rax + 1]",
            "mov r14, rax",
            "mov rdi, rdx",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov rdx, qword [rsp + 8]",
            "je 0x401e07",
            "xor esi, esi",
            "mov rdi, rax",
            "call sym.imp.memset",
            "test rbp, rbp",
            "je 0x401ddb",
            "mov rdi, rbx",
            "mov rdx, r13",
            "mov rsi, rbp",
            "call sym.imp.memcpy",
            "mov rdi, rbp",
            "call sym.imp.free",
            "lea rdi, [rbx + r13]",
            "mov rdx, r14",
            "mov rsi, r12",
            "call sym.imp.memcpy",
            "mov eax, dword [0x006064d8]",
            "mov qword [0x006064d0], rbx",
            "add eax, 1",
            "cmp eax, 0x600",
            "mov dword [0x006064d8], eax",
            "je 0x401e30",
            "xor eax, eax",
            "mov rbx, qword [rsp + 0x18]",
            "mov rbp, qword [rsp + 0x20]",
            "mov r12, qword [rsp + 0x28]",
            "mov r13, qword [rsp + 0x30]",
            "mov r14, qword [rsp + 0x38]",
            "mov r15, qword [rsp + 0x40]",
            "add rsp, 0x48",
            "ret",
            "xor esi, esi",
            "mov rdi, r15",
            "call fcn.00401d40",
            "jmp 0x401e07",
            "cmp qword [0x006064d0], 0",
            "mov dword [0x006064d8], 0",
            "je 0x401e07",
            "mov esi, str.BEGIN_TRANSACTION",
            "call fcn.004027d0",
            "test eax, eax",
            "jne 0x401e75",
            "mov rsi, qword [0x006064d0]",
            "mov rdi, r15",
            "call fcn.004027d0",
            "test eax, eax",
            "je 0x401ec0",
            "xor eax, eax",
            "mov edi, str.ERROR:SQL3:SQL_OPTIMIZATOR:_sql3v2_exec__",
            "call fcn.00402ee0",
            "mov eax, 0xffffffff",
            "mov rdi, qword [0x006064d0]",
            "mov dword [rsp + 8], eax",
            "call sym.imp.free",
            "mov qword [0x006064d0], 0",
            "mov eax, dword [rsp + 8]",
            "jmp 0x401e09",
            "xor r13d, r13d",
            "jmp 0x401d8c",
            "mov esi, str.COMMIT_TRANSACTION",
            "mov rdi, r15",
            "call fcn.004027d0",
            "test eax, eax",
            "jne 0x401e75",
            "jmp 0x401e86"
        ]
    },
    "fcn.00402830": {
        "function_address": "0x00402830",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi]",
            "test rdi, rdi",
            "je 0x402841",
            "call sym.imp.sqlite3_close",
            "mov rdi, qword [rbx + 8]",
            "test rdi, rdi",
            "je 0x40284f",
            "call sym.imp.sqlite3_free_table",
            "mov rdi, rbx",
            "pop rbx",
            "jmp sym.imp.free"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00401500",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "fcn.00402c00": {
        "function_address": "0x00402c00",
        "instructions": [
            "sub rsp, 8",
            "mov rdi, qword [0x00606458]",
            "test rdi, rdi",
            "je 0x402c15",
            "cmp byte [rdi], 0",
            "jne 0x402c80",
            "mov rdi, qword [0x00606450]",
            "test rdi, rdi",
            "je 0x402c26",
            "cmp byte [rdi], 0",
            "jne 0x402c70",
            "mov rdi, qword [0x00606448]",
            "test rdi, rdi",
            "je 0x402c37",
            "cmp byte [rdi], 0",
            "jne 0x402c60",
            "mov rdi, qword [0x00606430]",
            "test rdi, rdi",
            "je 0x402c48",
            "cmp byte [rdi], 0",
            "jne 0x402c50",
            "add rsp, 8",
            "ret",
            "add rsp, 8",
            "jmp sym.imp.free",
            "call sym.imp.free",
            "jmp 0x402c37",
            "call sym.imp.free",
            "jmp 0x402c26",
            "call sym.imp.free",
            "jmp 0x402c15"
        ]
    },
    "fcn.004034e0": {
        "function_address": "0x004034e0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 8",
            "call sym.imp.opendir",
            "test rax, rax",
            "mov r14, rax",
            "je 0x4035c0",
            "mov rdi, rax",
            "call sym.imp.readdir",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4035dc",
            "xor r12d, r12d",
            "xor ebx, ebx",
            "jmp 0x403548",
            "lea r15, [rax + r12]",
            "lea rdi, [rbp + 0x13]",
            "mov qword [r13], rax",
            "add r12, 8",
            "call sym.imp.__strdup",
            "mov rdi, r14",
            "mov qword [r15], rax",
            "call sym.imp.readdir",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4035b0",
            "add rbx, 1",
            "mov rdi, qword [r13]",
            "lea rsi, [rbx*8]",
            "call sym.imp.realloc",
            "test rax, rax",
            "jne 0x403520",
            "mov qword [r13], 0",
            "mov ebp, 8",
            "xor ebx, ebx",
            "mov rdi, r14",
            "call sym.imp.closedir",
            "mov rdi, qword [r13]",
            "mov rsi, rbp",
            "call sym.imp.realloc",
            "test rax, rax",
            "je 0x4035d0",
            "mov qword [r13], rax",
            "mov qword [rax + rbx*8], 0",
            "add rsp, 8",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rbp, [rbx*8 + 8]",
            "jmp 0x403571",
            "mov ebp, 8",
            "xor ebx, ebx",
            "jmp 0x403579",
            "mov qword [r13], 0",
            "xor ebx, ebx",
            "jmp 0x403596",
            "mov ebp, 8",
            "xor ebx, ebx",
            "jmp 0x403571"
        ]
    },
    "fcn.004035f0": {
        "function_address": "0x004035f0",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "lea rbx, [rbp + 8]",
            "sub rsp, 8",
            "mov rdi, qword [rdi]",
            "test rdi, rdi",
            "je 0x40361a",
            "nop dword [rax]",
            "add rbx, 8",
            "call sym.imp.free",
            "mov rdi, qword [rbx - 8]",
            "test rdi, rdi",
            "jne 0x403608",
            "add rsp, 8",
            "mov rdi, rbp",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.free"
        ]
    },
    "fcn.00401ee0": {
        "function_address": "0x00401ee0",
        "instructions": [
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "lea rbx, [rdx + 8]",
            "sub rsp, 0xc8",
            "mov rdi, qword [rdx]",
            "test rdi, rdi",
            "je 0x402044",
            "nop word cs:[rax + rax]",
            "call fcn.004036a0",
            "test eax, eax",
            "jle 0x402030",
            "mov rcx, qword [rbp]",
            "cmp byte [rcx], 0x2e",
            "je 0x402030",
            "lea rdi, [rsp + 0x18]",
            "xor eax, eax",
            "mov rdx, r12",
            "mov esi, str._s__s",
            "mov qword [rsp + 0x18], 0",
            "call sym.imp.asprintf",
            "mov rdi, qword [rsp + 0x18]",
            "test rdi, rdi",
            "je 0x402030",
            "call fcn.004037f0",
            "test eax, eax",
            "je 0x402058",
            "mov rdi, qword [rsp + 0x18]",
            "lea rsi, [rsp + 0x20]",
            "mov qword [rsp + 0x20], 0",
            "call fcn.004034e0",
            "mov rdi, qword [rsp + 0x20]",
            "test rdi, rdi",
            "je 0x401f93",
            "cmp rax, 2",
            "jg 0x402090",
            "call fcn.004035f0",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdx, [rsp + 0x30]",
            "mov edi, 1",
            "call sym.imp.__xstat",
            "test eax, eax",
            "jne 0x402070",
            "mov rdi, qword [0x00606458]",
            "call sym.imp.strlen",
            "add rax, qword [rsp + 0x18]",
            "mov rdi, rax",
            "call fcn.00401b70",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x40201e",
            "mov r8, qword [rsp + 0x78]",
            "mov rcx, qword [rsp + 0x88]",
            "lea rdi, [rsp + 0x28]",
            "mov rdx, rax",
            "mov esi, str.INSERT_INTO_atoms_VALUES__NULL___s__add__0__1___ld___ld__0__",
            "xor eax, eax",
            "mov qword [rsp + 0x28], 0",
            "call sym.imp.asprintf",
            "mov rsi, qword [rsp + 0x28]",
            "test rsi, rsi",
            "je 0x402016",
            "mov rdi, r13",
            "call fcn.00401d40",
            "mov rdi, qword [rsp + 0x28]",
            "call sym.imp.free",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x18]",
            "add qword [0x006064c8], 1",
            "call sym.imp.free",
            "mov rbp, rbx",
            "add rbx, 8",
            "mov rdi, qword [rbx - 8]",
            "test rdi, rdi",
            "jne 0x401f10",
            "add rsp, 0xc8",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdx, [rsp + 0x30]",
            "mov edi, 1",
            "call sym.imp.__xstat",
            "test eax, eax",
            "je 0x4020aa",
            "mov rdi, qword [rsp + 0x18]",
            "mov rbp, rbx",
            "add rbx, 8",
            "call sym.imp.free",
            "mov rdi, qword [rbx - 8]",
            "test rdi, rdi",
            "jne 0x401f10",
            "jmp 0x402044",
            "mov rsi, qword [rsp + 0x18]",
            "mov rdx, rdi",
            "mov rdi, r13",
            "call fcn.00401ee0",
            "mov rdi, qword [rsp + 0x20]",
            "jmp 0x401f8e",
            "mov rdi, qword [rsp + 0x18]",
            "lea rsi, [rsp + 0x28]",
            "mov qword [rsp + 0x20], 0",
            "mov qword [rsp + 0x28], 0",
            "call fcn.00403830",
            "cmp qword [rsp + 0x28], 0",
            "je 0x40201e",
            "mov rdi, qword [0x00606458]",
            "call sym.imp.strlen",
            "add rax, qword [rsp + 0x18]",
            "mov rdi, rax",
            "call fcn.00401b70",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x40214b",
            "mov rax, qword [rsp + 0x28]",
            "mov r9, qword [rsp + 0x78]",
            "lea rdi, [rsp + 0x20]",
            "mov r8, qword [rsp + 0x88]",
            "mov rcx, qword [rsp + 0x60]",
            "mov esi, str.INSERT_INTO_atoms_VALUES__NULL___s__add___lld__0___ld___ld___s__",
            "mov rdx, rbp",
            "mov qword [rsp], rax",
            "xor eax, eax",
            "call sym.imp.asprintf",
            "mov rsi, qword [rsp + 0x20]",
            "test rsi, rsi",
            "je 0x402143",
            "mov rdi, r13",
            "call fcn.00401d40",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.free",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x28]",
            "call sym.imp.free",
            "jmp 0x40201e"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00401750",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x004016c0",
        "instructions": [
            "jmp qword [reloc.strerror]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00401b20",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0x401b3a",
            "push rbp",
            "mov rbp, rsp",
            "call fcn.00401ab0",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "fcn.00401ab0": {
        "function_address": "0x00401ab0",
        "instructions": [
            "mov eax, 0x6064af",
            "push rbp",
            "sub rax, loc._edata",
            "cmp rax, 0xe",
            "mov rbp, rsp",
            "ja 0x401ac7",
            "pop rbp",
            "ret",
            "mov eax, 0",
            "test rax, rax",
            "je 0x401ac5",
            "pop rbp",
            "mov edi, loc._edata",
            "jmp rax"
        ]
    },
    "fcn.00402c90": {
        "function_address": "0x00402c90",
        "instructions": [
            "push r15",
            "mov esi, 0x404cfb",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x128",
            "call sym.imp.fopen",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x402e05",
            "lea rbp, [rsp + 0x20]",
            "xor eax, eax",
            "mov ecx, 0x20",
            "xor r12d, r12d",
            "mov rdi, rbp",
            "rep stosq qword [rdi], rax",
            "mov rdi, rbx",
            "call sym.imp.fileno",
            "xor edx, edx",
            "mov esi, 1",
            "mov edi, eax",
            "mov dword [rsp + 0x1c], eax",
            "call sym.imp.lockf",
            "mov qword [rsp + 8], 0",
            "nop",
            "xor r14d, r14d",
            "jmp 0x402d0a",
            "mov byte [rbp + r14], al",
            "add r14, 1",
            "cmp r14, 0x100",
            "je 0x402d88",
            "mov rdi, rbx",
            "movsxd r15, r14d",
            "call sym.imp._IO_getc",
            "cmp eax, 0xffffffff",
            "mov r13d, eax",
            "jne 0x402cf8",
            "mov rax, qword [rsp + 8]",
            "add rax, r15",
            "mov rdi, rax",
            "mov qword [rsp + 0x10], rax",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r14, rax",
            "je 0x402d6d",
            "test r12, r12",
            "je 0x402d57",
            "mov rdx, qword [rsp + 8]",
            "mov rdi, rax",
            "mov rsi, r12",
            "call sym.imp.memcpy",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r15",
            "mov rsi, rbp",
            "mov r12, r14",
            "add rdi, r14",
            "call sym.imp.memcpy",
            "cmp r13d, 0xffffffff",
            "je 0x402d90",
            "mov rax, qword [rsp + 0x10]",
            "mov qword [rsp + 8], rax",
            "jmp 0x402cf0",
            "mov r15d, 0x100",
            "jmp 0x402d1d",
            "mov edi, dword [rsp + 0x1c]",
            "xor edx, edx",
            "xor esi, esi",
            "call sym.imp.lockf",
            "mov r13, qword [rsp + 0x10]",
            "add r13, 1",
            "mov rdi, r13",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x402de3",
            "xor esi, esi",
            "mov rdx, r13",
            "mov rdi, rax",
            "call sym.imp.memset",
            "test r12, r12",
            "je 0x402e00",
            "mov rdx, qword [rsp + 0x10]",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call sym.imp.memcpy",
            "mov rdi, r12",
            "mov r12, rbp",
            "call sym.imp.free",
            "mov rdi, rbx",
            "call sym.imp.fclose",
            "add rsp, 0x128",
            "mov rax, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r12, rbp",
            "jmp 0x402de3",
            "xor r12d, r12d",
            "jmp 0x402deb"
        ]
    },
    "fcn.00403080": {
        "function_address": "0x00403080",
        "instructions": [
            "push r14",
            "test rsi, rsi",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "je 0x40316e",
            "xor eax, eax",
            "cmp byte [rsi], dil",
            "mov ebp, edi",
            "mov edi, 8",
            "mov r13, rdx",
            "sete al",
            "add rbx, rax",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov qword [r13], rax",
            "je 0x40316e",
            "mov qword [rax], rbx",
            "movzx ecx, byte [rbx]",
            "add rbx, 1",
            "mov r12d, 1",
            "mov rdi, rax",
            "mov esi, 0x10",
            "test cl, cl",
            "je 0x403103",
            "cmp bpl, cl",
            "je 0x4030ec",
            "movzx ecx, byte [rbx]",
            "add rbx, 1",
            "test cl, cl",
            "je 0x4030f7",
            "cmp bpl, cl",
            "jne 0x4030dc",
            "movzx ecx, byte [rbx]",
            "mov byte [rbx - 1], 0",
            "test cl, cl",
            "jne 0x403128",
            "mov rdi, qword [r13]",
            "lea rsi, [r12*8 + 8]",
            "call sym.imp.realloc",
            "test rax, rax",
            "je 0x403166",
            "mov qword [r13], rax",
            "mov qword [rax + r12*8], 0",
            "mov rax, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "cmp bpl, cl",
            "jne 0x403138",
            "add rbx, 1",
            "mov ecx, ebp",
            "jmp 0x4030d7",
            "lea r14, [r12 + 1]",
            "mov rdi, qword [r13]",
            "lea rsi, [r14*8]",
            "call sym.imp.realloc",
            "test rax, rax",
            "je 0x40317d",
            "mov qword [r13], rax",
            "mov qword [rax + r12*8], rbx",
            "mov r12, r14",
            "movzx ecx, byte [rbx]",
            "jmp 0x4030df",
            "mov qword [r13], 0",
            "pop rbx",
            "pop rbp",
            "xor r12d, r12d",
            "mov rax, r12",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov qword [r13], 0",
            "xor edi, edi",
            "mov esi, 8",
            "xor r12d, r12d",
            "jmp 0x403103"
        ]
    },
    "fcn.00402b50": {
        "function_address": "0x00402b50",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 8",
            "test rdi, rdi",
            "je 0x402be7",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov r13, rax",
            "je 0x402be7",
            "movzx edx, byte [rax]",
            "mov rbx, rax",
            "test dl, dl",
            "jne 0x402b8e",
            "jmp 0x402b9a",
            "mov byte [rbx], 0",
            "add rbx, 1",
            "movzx edx, byte [rbx]",
            "test dl, dl",
            "je 0x402b9a",
            "movsx edi, dl",
            "call sym.imp.isspace",
            "test eax, eax",
            "jne 0x402b80",
            "mov rdi, rbx",
            "call sym.imp.strlen",
            "lea rbp, [rbx + rax - 1]",
            "movzx edx, byte [rbp]",
            "test dl, dl",
            "jne 0x402bc8",
            "jmp 0x402bd4",
            "mov byte [rbp], 0",
            "sub rbp, 1",
            "movzx edx, byte [rbp]",
            "test dl, dl",
            "je 0x402bd4",
            "movsx edi, dl",
            "call sym.imp.isspace",
            "test eax, eax",
            "jne 0x402bb8",
            "mov rdi, r12",
            "mov rsi, rbx",
            "call sym.imp.strcpy",
            "mov rdi, r13",
            "call sym.imp.free",
            "add rsp, 8",
            "mov rax, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00401590",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "sym.imp.sqlite3_open": {
        "function_address": "0x00401840",
        "instructions": [
            "jmp qword [reloc.sqlite3_open]"
        ]
    },
    "sym.imp.sqlite3_errmsg": {
        "function_address": "0x00401790",
        "instructions": [
            "jmp qword [reloc.sqlite3_errmsg]"
        ]
    },
    "sym.imp.vasprintf": {
        "function_address": "0x00401540",
        "instructions": [
            "jmp qword [reloc.vasprintf]"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x00401740",
        "instructions": [
            "jmp qword [reloc.getenv]"
        ]
    },
    "fcn.00402a80": {
        "function_address": "0x00402a80",
        "instructions": [
            "sub rsp, 0xd8",
            "test al, al",
            "mov qword [rsp + 0x28], rsi",
            "mov qword [rsp + 0x30], rdx",
            "mov qword [rsp + 0x38], rcx",
            "mov qword [rsp + 0x40], r8",
            "mov qword [rsp + 0x48], r9",
            "je 0x402adb",
            "movaps xmmword [rsp + 0x50], xmm0",
            "movaps xmmword [rsp + 0x60], xmm1",
            "movaps xmmword [rsp + 0x70], xmm2",
            "movaps xmmword [rsp + 0x80], xmm3",
            "movaps xmmword [rsp + 0x90], xmm4",
            "movaps xmmword [rsp + 0xa0], xmm5",
            "movaps xmmword [rsp + 0xb0], xmm6",
            "movaps xmmword [rsp + 0xc0], xmm7",
            "lea rax, [rsp + 0xe0]",
            "lea rdx, [rsp + 8]",
            "mov esi, str.ip:_s__s_n",
            "mov rdi, rsp",
            "mov dword [rsp + 8], 8",
            "mov dword [rsp + 0xc], 0x30",
            "mov qword [rsp + 0x10], rax",
            "lea rax, [rsp + 0x20]",
            "mov qword [rsp], 0",
            "mov qword [rsp + 0x18], rax",
            "xor eax, eax",
            "call sym.imp.vasprintf",
            "cmp eax, 0xffffffff",
            "je 0x402b3c",
            "mov rsi, qword [rsp]",
            "mov edi, str._var_log_readydropd.log",
            "xor eax, eax",
            "call fcn.00402910",
            "mov rdi, qword [rsp]",
            "call sym.imp.free",
            "add rsp, 0xd8",
            "ret"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x004016d0",
        "instructions": [
            "jmp qword [reloc.strstr]"
        ]
    },
    "sym.imp.sqlite3_exec": {
        "function_address": "0x00401560",
        "instructions": [
            "jmp qword [reloc.sqlite3_exec]"
        ]
    },
    "sym.imp.sqlite3_free": {
        "function_address": "0x004015e0",
        "instructions": [
            "jmp qword [reloc.sqlite3_free]"
        ]
    },
    "sym.imp.__xstat": {
        "function_address": "0x00401670",
        "instructions": [
            "jmp qword [reloc.__xstat]"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00401650",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x004014f0",
        "instructions": [
            "jmp qword [reloc.memset]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00401710",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "fcn.004027d0": {
        "function_address": "0x004027d0",
        "instructions": [
            "push rbx",
            "xor ebx, ebx",
            "sub rsp, 0x10",
            "test rsi, rsi",
            "je 0x40281b",
            "mov rdi, qword [rdi]",
            "lea r8, [rsp + 8]",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov qword [rsp + 8], 0",
            "call sym.imp.sqlite3_exec",
            "mov rsi, qword [rsp + 8]",
            "test rsi, rsi",
            "je 0x40281b",
            "mov edi, str.ERROR:SQL3:SQL3_UPDATE:_errmsg_s",
            "xor eax, eax",
            "mov ebx, 0xffffffff",
            "call fcn.00402ee0",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.sqlite3_free",
            "add rsp, 0x10",
            "mov eax, ebx",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.sqlite3_close": {
        "function_address": "0x004014d0",
        "instructions": [
            "jmp qword [reloc.sqlite3_close]"
        ]
    },
    "sym.imp.sqlite3_free_table": {
        "function_address": "0x00401680",
        "instructions": [
            "jmp qword [reloc.sqlite3_free_table]"
        ]
    },
    "sym.imp.opendir": {
        "function_address": "0x00401660",
        "instructions": [
            "jmp qword [reloc.opendir]"
        ]
    },
    "sym.imp.readdir": {
        "function_address": "0x00401690",
        "instructions": [
            "jmp qword [reloc.readdir]"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00401820",
        "instructions": [
            "jmp qword [reloc.realloc]"
        ]
    },
    "sym.imp.closedir": {
        "function_address": "0x00401800",
        "instructions": [
            "jmp qword [reloc.closedir]"
        ]
    },
    "fcn.004036a0": {
        "function_address": "0x004036a0",
        "instructions": [
            "movsx esi, byte [rdi]",
            "test sil, sil",
            "je 0x4036d4",
            "push rbx",
            "mov rbx, rdi",
            "jmp 0x4036bc",
            "add rbx, 1",
            "movsx esi, byte [rbx]",
            "test sil, sil",
            "je 0x4036d0",
            "mov edi, 0x404d13",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x4036b0",
            "xor eax, eax",
            "pop rbx",
            "ret",
            "mov al, 1",
            "pop rbx",
            "ret",
            "mov eax, 1",
            "ret"
        ]
    },
    "fcn.00401b70": {
        "function_address": "0x00401b70",
        "instructions": [
            "push r14",
            "test rdi, rdi",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "je 0x401d08",
            "call sym.imp.__strdup",
            "test rax, rax",
            "mov r12, rax",
            "je 0x401d2f",
            "mov esi, 1",
            "mov edi, 1",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r13, rax",
            "je 0x401d28",
            "mov rbp, r12",
            "mov esi, 0x27",
            "mov rdi, rbp",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov r14, rax",
            "je 0x401ca0",
            "mov byte [r14], 0",
            "mov rbx, r13",
            "mov ecx, dword [rbx]",
            "add rbx, 4",
            "lea edx, [rcx - 0x1010101]",
            "not ecx",
            "and edx, ecx",
            "and edx, 0x80808080",
            "je 0x401bd0",
            "mov eax, edx",
            "mov rdi, rbp",
            "shr eax, 0x10",
            "test edx, 0x8080",
            "cmove edx, eax",
            "lea rax, [rbx + 2]",
            "cmove rbx, rax",
            "add dl, dl",
            "sbb rbx, 3",
            "sub rbx, r13",
            "call sym.imp.strlen",
            "lea rsi, [rbx + rax + 3]",
            "mov rdi, r13",
            "call sym.imp.realloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x401c80",
            "mov rcx, rax",
            "mov esi, dword [rcx]",
            "add rcx, 4",
            "lea edx, [rsi - 0x1010101]",
            "not esi",
            "and edx, esi",
            "and edx, 0x80808080",
            "je 0x401c27",
            "mov eax, edx",
            "lea rdi, [rcx + 2]",
            "mov rsi, rbp",
            "shr eax, 0x10",
            "test edx, 0x8080",
            "lea rbp, [r14 + 1]",
            "cmove edx, eax",
            "cmovne rdi, rcx",
            "mov r13, rbx",
            "add dl, dl",
            "sbb rdi, 3",
            "call sym.imp.stpcpy",
            "mov word [rax], 0x2727",
            "mov byte [rax + 2], 0",
            "jmp 0x401bb0",
            "mov rdi, r13",
            "xor ebx, ebx",
            "call sym.imp.free",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov rbx, r13",
            "mov edx, dword [rbx]",
            "add rbx, 4",
            "lea eax, [rdx - 0x1010101]",
            "not edx",
            "and eax, edx",
            "and eax, 0x80808080",
            "je 0x401ca3",
            "mov edx, eax",
            "mov rdi, rbp",
            "shr edx, 0x10",
            "test eax, 0x8080",
            "cmove eax, edx",
            "lea rdx, [rbx + 2]",
            "cmove rbx, rdx",
            "add al, al",
            "sbb rbx, 3",
            "sub rbx, r13",
            "call sym.imp.strlen",
            "lea rsi, [rbx + rax + 1]",
            "mov rdi, r13",
            "call sym.imp.realloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x401c80",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call sym.imp.strcat",
            "jmp 0x401c8a",
            "xor ebx, ebx",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "xor ebx, ebx",
            "jmp 0x401c8a",
            "xor ebx, ebx",
            "jmp 0x401c92"
        ]
    },
    "fcn.00403830": {
        "function_address": "0x00403830",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "mov r14, rdi",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x4d8",
            "call fcn.004037f0",
            "test eax, eax",
            "jne 0x4039c0",
            "lea r13, [rsp + 0x70]",
            "xor eax, eax",
            "mov ecx, 0xb",
            "mov qword [rsp + 0x60], 0",
            "mov qword [rsp + 0x68], 0",
            "xor r12d, r12d",
            "mov rdi, r13",
            "rep stosq qword [rdi], rax",
            "mov dword [rdi], 0",
            "mov rdi, r13",
            "call sym.imp.MD5_Init",
            "mov esi, 0x404cfb",
            "mov rdi, r14",
            "call sym.imp.fopen",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4039e7",
            "nop word [rax + rax]",
            "mov rdi, rbp",
            "call sym.imp.feof",
            "test eax, eax",
            "jne 0x403900",
            "lea rdi, [rsp + 0xd0]",
            "mov rcx, rbp",
            "mov edx, 0x400",
            "mov esi, 1",
            "call sym.imp.fread",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x4038a8",
            "lea rsi, [rsp + 0xd0]",
            "mov rdx, rax",
            "mov rdi, r13",
            "add r12, rbx",
            "call sym.imp.MD5_Update",
            "mov rdi, rbp",
            "call sym.imp.feof",
            "test eax, eax",
            "je 0x4038b4",
            "nop dword [rax + rax]",
            "lea rdi, [rsp + 0x60]",
            "mov rsi, r13",
            "call sym.imp.MD5_Final",
            "movzx eax, byte [rsp + 0x6f]",
            "movzx r9d, byte [rsp + 0x63]",
            "mov rdi, r15",
            "movzx r8d, byte [rsp + 0x62]",
            "movzx ecx, byte [rsp + 0x61]",
            "mov esi, str._02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x_02x",
            "movzx edx, byte [rsp + 0x60]",
            "mov dword [rsp + 0x58], eax",
            "movzx eax, byte [rsp + 0x6e]",
            "mov dword [rsp + 0x50], eax",
            "movzx eax, byte [rsp + 0x6d]",
            "mov dword [rsp + 0x48], eax",
            "movzx eax, byte [rsp + 0x6c]",
            "mov dword [rsp + 0x40], eax",
            "movzx eax, byte [rsp + 0x6b]",
            "mov dword [rsp + 0x38], eax",
            "movzx eax, byte [rsp + 0x6a]",
            "mov dword [rsp + 0x30], eax",
            "movzx eax, byte [rsp + 0x69]",
            "mov dword [rsp + 0x28], eax",
            "movzx eax, byte [rsp + 0x68]",
            "mov dword [rsp + 0x20], eax",
            "movzx eax, byte [rsp + 0x67]",
            "mov dword [rsp + 0x18], eax",
            "movzx eax, byte [rsp + 0x66]",
            "mov dword [rsp + 0x10], eax",
            "movzx eax, byte [rsp + 0x65]",
            "mov dword [rsp + 8], eax",
            "movzx eax, byte [rsp + 0x64]",
            "mov dword [rsp], eax",
            "xor eax, eax",
            "call sym.imp.asprintf",
            "mov rdx, qword [r15]",
            "mov rsi, r14",
            "mov edi, str.DEBUG:CALCULATE_MD5:__s__s",
            "xor eax, eax",
            "call fcn.00402ee0",
            "mov rdi, rbp",
            "call sym.imp.fclose",
            "jmp 0x4039d2",
            "mov esi, 0x404a10",
            "mov rdi, r15",
            "xor eax, eax",
            "xor r12d, r12d",
            "call sym.imp.asprintf",
            "add rsp, 0x4d8",
            "mov rax, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rsi, r14",
            "mov edi, str.ERROR:CALCULATE_MD5:MD5:_can_not_open_file:__s",
            "xor eax, eax",
            "call fcn.00402ee0",
            "jmp 0x4039d2"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00401720",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x004017b0",
        "instructions": [
            "jmp qword [reloc.calloc]"
        ]
    },
    "sym.imp.stpcpy": {
        "function_address": "0x00401530",
        "instructions": [
            "jmp qword [reloc.stpcpy]"
        ]
    },
    "sym.imp.strcat": {
        "function_address": "0x004016e0",
        "instructions": [
            "jmp qword [reloc.strcat]"
        ]
    },
    "sym.imp.MD5_Init": {
        "function_address": "0x004014c0",
        "instructions": [
            "jmp qword [reloc.MD5_Init]"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x004015a0",
        "instructions": [
            "jmp qword [reloc.fopen]"
        ]
    },
    "sym.imp.feof": {
        "function_address": "0x004017c0",
        "instructions": [
            "jmp qword [reloc.feof]"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x00401730",
        "instructions": [
            "jmp qword [reloc.fread]"
        ]
    },
    "sym.imp.MD5_Update": {
        "function_address": "0x00401510",
        "instructions": [
            "jmp qword [reloc.MD5_Update]"
        ]
    },
    "sym.imp.MD5_Final": {
        "function_address": "0x004016a0",
        "instructions": [
            "jmp qword [reloc.MD5_Final]"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x004017d0",
        "instructions": [
            "jmp qword [reloc.fclose]"
        ]
    },
    "fcn.00403e90": {
        "function_address": "0x00403e90",
        "instructions": [
            "mov eax, dword [0x00606460]",
            "test eax, eax",
            "jne 0x403f72",
            "mov qword [rsp - 0x18], rbx",
            "mov qword [rsp - 0x10], rbp",
            "mov eax, 0x26",
            "mov qword [rsp - 8], r12",
            "sub rsp, 0x18",
            "test edi, edi",
            "cmovne eax, edi",
            "mov rdi, qword [0x00606910]",
            "mov r12d, esi",
            "mov rbx, rdx",
            "mov rbp, rcx",
            "mov dword [0x00606460], eax",
            "test rdi, rdi",
            "je 0x403edb",
            "call sym.imp.free",
            "mov rdi, qword [0x00606918]",
            "test rdi, rdi",
            "je 0x403eec",
            "call sym.imp.free",
            "test rbp, rbp",
            "je 0x403f90",
            "mov rdi, rbp",
            "call sym.imp.__strdup",
            "mov qword [0x00606910], rax",
            "test rbx, rbx",
            "je 0x403f78",
            "mov rdi, rbx",
            "call sym.imp.__strdup",
            "mov qword [0x00606918], rax",
            "mov r8, qword [0x00606908]",
            "mov dword [0x00606920], r12d",
            "test r8, r8",
            "je 0x403f60",
            "mov rcx, qword [0x00606910]",
            "mov edx, r12d",
            "mov rsi, qword [0x00606918]",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov edi, str.ERROR:error_in__s_line:_d__s",
            "mov r12, qword [rsp + 0x10]",
            "xor eax, eax",
            "add rsp, 0x18",
            "jmp r8",
            "mov rbx, qword [rsp]",
            "mov rbp, qword [rsp + 8]",
            "mov r12, qword [rsp + 0x10]",
            "add rsp, 0x18",
            "repz ret",
            "mov esi, 1",
            "mov edi, 1",
            "call sym.imp.calloc",
            "mov qword [0x00606918], rax",
            "jmp 0x403f18",
            "mov esi, 1",
            "mov edi, 1",
            "call sym.imp.calloc",
            "mov qword [0x00606910], rax",
            "jmp 0x403f04"
        ]
    },
    "fcn.00402910": {
        "function_address": "0x00402910",
        "instructions": [
            "mov qword [rsp - 0x20], rbx",
            "mov qword [rsp - 0x18], rbp",
            "mov qword [rsp - 0x10], r12",
            "mov qword [rsp - 8], r13",
            "sub rsp, 0xf8",
            "test al, al",
            "mov qword [rsp + 0x30], rdx",
            "mov qword [rsp + 0x38], rcx",
            "mov qword [rsp + 0x40], r8",
            "mov qword [rsp + 0x48], r9",
            "je 0x40297a",
            "movaps xmmword [rsp + 0x50], xmm0",
            "movaps xmmword [rsp + 0x60], xmm1",
            "movaps xmmword [rsp + 0x70], xmm2",
            "movaps xmmword [rsp + 0x80], xmm3",
            "movaps xmmword [rsp + 0x90], xmm4",
            "movaps xmmword [rsp + 0xa0], xmm5",
            "movaps xmmword [rsp + 0xb0], xmm6",
            "movaps xmmword [rsp + 0xc0], xmm7",
            "test rsi, rsi",
            "mov r12, rsi",
            "je 0x402a60",
            "test rdi, rdi",
            "je 0x402a60",
            "lea rax, [rsp + 0x100]",
            "mov esi, 0x404c75",
            "mov dword [rsp + 8], 0x10",
            "mov dword [rsp + 0xc], 0x30",
            "mov ebx, 0xffffffff",
            "mov qword [rsp + 0x10], rax",
            "lea rax, [rsp + 0x20]",
            "mov qword [rsp + 0x18], rax",
            "call sym.imp.fopen",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x402a2d",
            "mov rdi, rax",
            "call sym.imp.fileno",
            "cmp eax, ebx",
            "mov r13d, eax",
            "je 0x402a20",
            "xor edx, edx",
            "mov esi, 1",
            "mov edi, eax",
            "call sym.imp.lockf",
            "cmp eax, 0xffffffff",
            "je 0x402a20",
            "lea rdx, [rsp + 8]",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call sym.imp.vfprintf",
            "xor edx, edx",
            "mov ebx, eax",
            "xor esi, esi",
            "mov edi, r13d",
            "sar ebx, 0x1f",
            "call sym.imp.lockf",
            "cmp eax, 0xffffffff",
            "mov eax, 0xffffffff",
            "cmove ebx, eax",
            "jmp 0x402a25",
            "mov ebx, 0xffffffff",
            "mov rdi, rbp",
            "call sym.imp.fclose",
            "mov eax, ebx",
            "mov rbp, qword [rsp + 0xe0]",
            "mov rbx, qword [rsp + 0xd8]",
            "mov r12, qword [rsp + 0xe8]",
            "mov r13, qword [rsp + 0xf0]",
            "add rsp, 0xf8",
            "ret",
            "call sym.imp.__errno_location",
            "mov ebx, 0xffffffff",
            "mov dword [rax], 0x16",
            "jmp 0x402a2d"
        ]
    },
    "sym.imp.fileno": {
        "function_address": "0x004014e0",
        "instructions": [
            "jmp qword [reloc.fileno]"
        ]
    },
    "sym.imp.vfprintf": {
        "function_address": "0x004015f0",
        "instructions": [
            "jmp qword [reloc.vfprintf]"
        ]
    },
    "sym.imp._IO_getc": {
        "function_address": "0x00401640",
        "instructions": [
            "jmp qword [reloc._IO_getc]"
        ]
    },
    "sym.imp.isspace": {
        "function_address": "0x004017f0",
        "instructions": [
            "jmp qword [reloc.isspace]"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00401780",
        "instructions": [
            "jmp qword [reloc.strcpy]"
        ]
    },
    "fcn.004028a0": {
        "function_address": "0x004028a0",
        "instructions": [
            "mov qword [rsp - 0x10], rbp",
            "mov qword [rsp - 8], r12",
            "xor eax, eax",
            "mov qword [rsp - 0x18], rbx",
            "sub rsp, 0x58",
            "mov r12, rdi",
            "mov ecx, 8",
            "mov rdi, rsp",
            "xor edx, edx",
            "rep stosq qword [rdi], rax",
            "mov esi, str.__:_____",
            "mov rdi, rsp",
            "mov ebp, 0xffffffff",
            "call sym.imp.regcomp",
            "test eax, eax",
            "jne 0x4028fa",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rdi, rsp",
            "mov rsi, r12",
            "call sym.imp.regexec",
            "mov rdi, rsp",
            "cmp eax, 1",
            "sbb ebp, ebp",
            "call sym.imp.regfree",
            "mov eax, ebp",
            "mov rbx, qword [rsp + 0x40]",
            "mov rbp, qword [rsp + 0x48]",
            "mov r12, qword [rsp + 0x50]",
            "add rsp, 0x58",
            "ret"
        ]
    },
    "sym.imp.regcomp": {
        "function_address": "0x00401700",
        "instructions": [
            "jmp qword [reloc.regcomp]"
        ]
    },
    "sym.imp.regexec": {
        "function_address": "0x004015c0",
        "instructions": [
            "jmp qword [reloc.regexec]"
        ]
    },
    "sym.imp.regfree": {
        "function_address": "0x004017a0",
        "instructions": [
            "jmp qword [reloc.regfree]"
        ]
    },
    "fcn.00402860": {
        "function_address": "0x00402860",
        "instructions": [
            "test rdi, rdi",
            "je 0x40289c",
            "mov rdi, qword [rdi]",
            "test rdi, rdi",
            "je 0x40289c",
            "push rbx",
            "xor ebx, ebx",
            "jmp 0x402884",
            "mov rdi, rax",
            "mov rbx, rax",
            "add rdi, 1",
            "je 0x402898",
            "mov esi, 0x2f",
            "call sym.imp.strchr",
            "test rax, rax",
            "jne 0x402878",
            "test rbx, rbx",
            "je 0x40289b",
            "mov byte [rbx], 0",
            "pop rbx",
            "repz ret"
        ]
    },
    "fcn.00403a00": {
        "function_address": "0x00403a00",
        "instructions": [
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x10",
            "test rdi, rdi",
            "mov qword [rsp], 0",
            "mov qword [rsp + 8], 0",
            "je 0x403b41",
            "cmp byte [rdi], 0",
            "je 0x403b41",
            "cmp qword [rsi], 0",
            "mov r12, rsi",
            "je 0x403b41",
            "mov r13, rdx",
            "call sym.imp.__strdup",
            "mov rdi, qword [r12]",
            "mov qword [rsp], rax",
            "test rdi, rdi",
            "je 0x403b43",
            "lea rbx, [r12 + 8]",
            "xor ebp, ebp",
            "jmp 0x403adc",
            "call fcn.004028a0",
            "test eax, eax",
            "jne 0x403b9d",
            "mov rcx, qword [r12]",
            "mov rdx, qword [rsp]",
            "lea rdi, [rsp + 8]",
            "mov esi, str._s__s",
            "call sym.imp.asprintf",
            "cmp eax, 0xffffffff",
            "je 0x403ac4",
            "cmp rbp, r13",
            "je 0x403aa3",
            "mov r12, qword [rsp + 8]",
            "mov rdi, r12",
            "call fcn.004037f0",
            "test eax, eax",
            "je 0x403b50",
            "mov rdi, qword [rsp]",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.__strdup",
            "mov rdi, qword [rsp + 8]",
            "mov qword [rsp], rax",
            "call sym.imp.free",
            "mov r12, rbx",
            "add rbx, 8",
            "add rbp, 1",
            "mov rdi, qword [rbx - 8]",
            "test rdi, rdi",
            "je 0x403b80",
            "cmp byte [rdi], 0x2e",
            "jne 0x403a60",
            "movzx eax, byte [rdi + 1]",
            "test al, al",
            "je 0x403ac4",
            "cmp al, 0x2e",
            "jne 0x403a60",
            "cmp byte [rdi + 2], 0",
            "jne 0x403a60",
            "mov rdi, rsp",
            "call fcn.00402860",
            "jmp 0x403ac4",
            "mov edi, dword [r14]",
            "cmp edi, 0x11",
            "je 0x403b91",
            "mov esi, 0x229",
            "xor ecx, ecx",
            "mov edx, str.rdlib.c",
            "call fcn.00403e90",
            "mov rsi, r12",
            "mov edi, str.ERROR:_MKDIR:Fail_to_create_directory:__s",
            "xor eax, eax",
            "call fcn.00402ee0",
            "mov rdi, qword [rsp]",
            "call sym.imp.free",
            "xor eax, eax",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "call sym.imp.__errno_location",
            "mov esi, 0x1ff",
            "mov dword [rax], 0",
            "mov rdi, r12",
            "mov r14, rax",
            "call sym.imp.mkdir",
            "cmp eax, 0xffffffff",
            "je 0x403b10",
            "test eax, eax",
            "je 0x403aa3",
            "jmp 0x403b38",
            "mov rax, qword [rsp]",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov dword [r14], 0",
            "jmp 0x403aa3",
            "xor ecx, ecx",
            "mov edx, str.rdlib.c",
            "mov esi, 0x271",
            "mov edi, 0xe",
            "call fcn.00403e90",
            "mov edi, str.ERROR:MAKE_SAFE_PATH:path_contains_wrong_symbols",
            "xor eax, eax",
            "call fcn.00402ee0",
            "mov rdi, qword [rsp]",
            "call sym.imp.free",
            "jmp 0x403b41"
        ]
    },
    "sym.imp.mkdir": {
        "function_address": "0x00401860",
        "instructions": [
            "jmp qword [reloc.mkdir]"
        ]
    },
    "fcn.00404176": {
        "function_address": "0x00404176",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0x10",
            "mov dword [rbp - 4], edi",
            "cmp dword [rbp - 4], 0xffffffff",
            "jne 0x40418e",
            "mov eax, str.Out_of_the_scope",
            "jmp 0x4041c7",
            "cmp dword [rbp - 4], 0x1f3",
            "jg 0x4041a3",
            "mov eax, dword [rbp - 4]",
            "mov edi, eax",
            "call sym.imp.strerror",
            "jmp 0x4041c7",
            "cmp dword [rbp - 4], 0x1f7",
            "jle 0x4041b5",
            "mov rax, qword [str.Error_of_top_level]",
            "jmp 0x4041c7",
            "mov eax, dword [rbp - 4]",
            "sub eax, 0x1f4",
            "cdqe",
            "mov rax, qword [rax*8 + 0x606480]",
            "leave",
            "ret"
        ]
    },
    "fcn.0040407c": {
        "function_address": "0x0040407c",
        "instructions": [
            "push rbp",
            "mov rbp, rsp",
            "sub rsp, 0xe0",
            "mov qword [rbp - 0xa8], rsi",
            "mov qword [rbp - 0xa0], rdx",
            "mov qword [rbp - 0x98], rcx",
            "mov qword [rbp - 0x90], r8",
            "mov qword [rbp - 0x88], r9",
            "test al, al",
            "je 0x4040ce",
            "movaps xmmword [rbp - 0x80], xmm0",
            "movaps xmmword [rbp - 0x70], xmm1",
            "movaps xmmword [rbp - 0x60], xmm2",
            "movaps xmmword [rbp - 0x50], xmm3",
            "movaps xmmword [rbp - 0x40], xmm4",
            "movaps xmmword [rbp - 0x30], xmm5",
            "movaps xmmword [rbp - 0x20], xmm6",
            "movaps xmmword [rbp - 0x10], xmm7",
            "mov qword [rbp - 0xd8], rdi",
            "mov qword [rbp - 0xd0], 0",
            "mov dword [rbp - 0xc8], 8",
            "mov dword [rbp - 0xc4], 0x30",
            "lea rax, [rbp + 0x10]",
            "mov qword [rbp - 0xc0], rax",
            "lea rax, [rbp - 0xb0]",
            "mov qword [rbp - 0xb8], rax",
            "lea rdx, [rbp - 0xc8]",
            "mov rcx, qword [rbp - 0xd8]",
            "lea rax, [rbp - 0xd0]",
            "mov rsi, rcx",
            "mov rdi, rax",
            "mov eax, 0",
            "call sym.imp.vasprintf",
            "cmp eax, 0xffffffff",
            "je 0x40415f",
            "mov rax, qword [rbp - 0xd0]",
            "mov rsi, rax",
            "mov edi, 5",
            "mov eax, 0",
            "call sym.imp.syslog",
            "mov rax, qword [rbp - 0xd0]",
            "mov rdi, rax",
            "call sym.imp.free",
            "leave",
            "ret"
        ]
    },
    "sym.imp.syslog": {
        "function_address": "0x00401520",
        "instructions": [
            "jmp qword [reloc.syslog]"
        ]
    }
}