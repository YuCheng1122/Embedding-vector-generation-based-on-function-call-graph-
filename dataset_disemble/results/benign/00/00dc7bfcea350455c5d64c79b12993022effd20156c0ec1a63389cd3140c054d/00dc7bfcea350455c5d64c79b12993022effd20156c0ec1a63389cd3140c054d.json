{
    "entry0": {
        "function_address": "0x00040a2c",
        "instructions": [
            "ldr r3, [0x00040a50]",
            "ldr r2, [0x00040a54]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "cmp r2, 0",
            "blne loc.imp.__gmon_start__",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x0003d378",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd54]!"
        ]
    },
    "sym.strdup_root": {
        "function_address": "0x0004c200",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b rsym.strmake_root"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x0003e710",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x44]!"
        ]
    },
    "sym.yaSSL::Certificate::get_buffer___const": {
        "function_address": "0x0008d13c",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 8]",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL4x50910get_bufferEv": {
        "function_address": "0x0003e944",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xecc]!"
        ]
    },
    "sym.yaSSL::HMAC_MD5::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007ccd8",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3MD5EE6UpdateEPKhj": {
        "function_address": "0x0003dd20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6e4]!"
        ]
    },
    "method.TaoCrypt::RSA_BlockType2.Pad_unsigned_char_const__unsigned_int__unsigned_char__unsigned_int__TaoCrypt::RandomNumberGenerator__const": {
        "function_address": "0x000b2b74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r8, [sp, 0x18]",
            "mov r6, r3",
            "tst r8, 7",
            "movne r3, 0",
            "strbne r3, [r6], 1",
            "rsb r8, r2, r8, lsr 3",
            "mov r3, 2",
            "mov r5, r1",
            "mov r1, r6",
            "strb r3, [r1], 1",
            "sub r7, r8, 1",
            "mov r4, r2",
            "ldr r0, [sp, 0x1c]",
            "mov r2, r7",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "cmp r7, 1",
            "bls 0xb2bdc",
            "mov r3, 1",
            "mov r1, r3",
            "ldrb r2, [r6, r3]",
            "cmp r2, 0",
            "strbeq r1, [r6, r3]",
            "add r3, r3, 1",
            "cmp r7, r3",
            "bhi 0xb2bc4",
            "add r0, r6, r8",
            "mov r3, 0",
            "strb r3, [r0, -1]",
            "mov r1, r5",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj": {
        "function_address": "0x0003e3d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x26c]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x0003e878",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf54]!"
        ]
    },
    "fcn.00092220": {
        "function_address": "0x00092220",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_": {
        "function_address": "0x0003dbe8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7b4]!"
        ]
    },
    "fcn.000893dc": {
        "function_address": "0x000893dc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x893f8",
            "b 0x89408",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x893f4",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_": {
        "function_address": "0x0003cf58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x14]!"
        ]
    },
    "method.TaoCrypt::FileSource.FileSource__": {
        "function_address": "0x000a1dd4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "blne sym.imp.fclose",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x0003d5f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbac]!"
        ]
    },
    "sym.TaoCrypt::Block_unsigned_char__TaoCrypt::AllocatorWithCleanup_unsigned_char___::Block_unsigned_int_": {
        "function_address": "0x000810f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "cmp r1, 0",
            "sub sp, sp, 8",
            "mov r4, r0",
            "str r1, [r0]",
            "moveq r3, r1",
            "bne 0x81158",
            "mov r0, r4",
            "ldr r5, [r0], 8",
            "str r3, [r4, 4]",
            "mov r1, r3",
            "mov r6, 0",
            "mov r2, r5",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r6",
            "mov r2, r5",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x81110"
        ]
    },
    "rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b": {
        "function_address": "0x0003e788",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xff4]!"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x0003da14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8ec]!"
        ]
    },
    "rsym._ZnajN8TaoCrypt5new_tE": {
        "function_address": "0x0003dd5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6bc]!"
        ]
    },
    "sym.TaoCrypt::Integer::operator____": {
        "function_address": "0x000a97b0",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r2, [r0, 0xc]",
            "ldr r5, [0x000a9984]",
            "cmp r2, 1",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "add r5, pc, r5",
            "beq 0xa987c",
            "ldr r0, [r0]",
            "ldr r3, [r4, 4]",
            "cmp r0, 0",
            "beq 0xa9914",
            "ldr r1, [r3]",
            "sub r2, r1, 1",
            "cmp r1, r2",
            "str r2, [r3]",
            "bhs 0xa986c",
            "cmp r0, 1",
            "bls 0xa983c",
            "ldr r2, [r3, 4]",
            "cmp r2, 0",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xa9830",
            "b 0xa986c",
            "ldr r1, [r3, 8]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa986c",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bhi 0xa9818",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "mov r1, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7IntegerngEv",
            "mov r1, sp",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "mov r5, sp",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr",
            "ldr r0, [r0]",
            "ldr r3, [r4, 4]",
            "cmp r0, 0",
            "beq 0xa9960",
            "ldr ip, [r3]",
            "add r1, ip, 1",
            "cmp ip, r1",
            "str r1, [r3]",
            "bls 0xa986c",
            "cmp r0, 1",
            "bls 0xa98e4",
            "ldr r1, [r3, 4]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 4]",
            "beq 0xa98d8",
            "b 0xa986c",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa986c",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bhi 0xa98c0",
            "ldr r1, [r4]",
            "mov r0, r4",
            "lsl r1, r1, 1",
            "bl rsym._ZN8TaoCrypt5BlockIjNS_20AllocatorWithCleanupIjEEE9CleanGrowEj",
            "ldr r3, [r4]",
            "lsr r2, r3, 1",
            "cmp r2, r3",
            "bhs 0xa993c",
            "ldr r3, [r4, 4]",
            "mov r1, 1",
            "str r1, [r3, r2, lsl 2]",
            "b 0xa986c",
            "ldr r3, [0x000a9988]",
            "ldr r1, [0x000a998c]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9990]",
            "add r3, r3, 0x6f0",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000a9994]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a9988]",
            "ldr r1, [0x000a9998]",
            "ldr r0, [0x000a999c]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a9988]",
            "ldr r1, [0x000a998c]",
            "ldr r0, [0x000a9990]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x8c0",
            "mov r2, 0x1ec",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer3OneEv": {
        "function_address": "0x0003f700",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5a4]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7IntegerngEv": {
        "function_address": "0x0003fafc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2fc]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegeraSERKS0_": {
        "function_address": "0x0003f358",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x814]!"
        ]
    },
    "rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj": {
        "function_address": "0x0003f160",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x964]!"
        ]
    },
    "rsym._ZN8TaoCrypt5BlockIjNS_20AllocatorWithCleanupIjEEE9CleanGrowEj": {
        "function_address": "0x00040564",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc0c]!"
        ]
    },
    "sym.imp.__assert_fail": {
        "function_address": "0x0003dd08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6f4]!"
        ]
    },
    "sym.vio_ssl_write": {
        "function_address": "0x0007a5a4",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 0x98]",
            "bl rsym.yaSSL_write",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_write": {
        "function_address": "0x00040180",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xea4]!"
        ]
    },
    "sym.vio_read": {
        "function_address": "0x0007a2d4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "bl sym.imp.__errno_location",
            "mov r3, 0",
            "str r3, [r0]",
            "ldr r0, [r4]",
            "mov r1, r6",
            "mov r2, r5",
            "bl sym.imp.read",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x000407b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa84]!"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x0003e080",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4a4]!"
        ]
    },
    "sym.free_rows": {
        "function_address": "0x00075470",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x75490",
            "add r0, r4, 8",
            "mov r1, 0",
            "bl rsym.free_root",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.free_root": {
        "function_address": "0x00040708",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xaf4]!"
        ]
    },
    "rsym.my_no_flags_free": {
        "function_address": "0x0003f838",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4d4]!"
        ]
    },
    "sym.delete_dynamic": {
        "function_address": "0x0005037c",
        "instructions": [
            "push {r4, lr}",
            "mov r3, r0",
            "mov r4, r0",
            "ldr r0, [r3], 0x14",
            "cmp r0, r3",
            "moveq r3, 0",
            "streq r3, [r4, 4]",
            "beq 0x503b8",
            "cmp r0, 0",
            "beq 0x503b8",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "str r3, [r4]",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_mySTL::destroy_mySTL::vector_TaoCrypt::Integer___mySTL::vector_TaoCrypt::Integer___mySTL::vector_TaoCrypt::Integer__": {
        "function_address": "0x000bb4bc",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "beq 0xbb4e8",
            "ldm r4, {r0, r1}",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "ldr r0, [r4], 0xc",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_",
            "cmp r5, r4",
            "bne 0xbb4d0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_": {
        "function_address": "0x00040438",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcd4]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_": {
        "function_address": "0x0003d9e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x90c]!"
        ]
    },
    "fcn.000811c0": {
        "function_address": "0x000811c0",
        "instructions": [
            "ldr ip, [0x00081200]",
            "ldr r3, [0x00081204]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00081208]",
            "add r2, r3, 8",
            "ldr r3, [0x0008120c]",
            "str r2, [r0]",
            "ldr r0, [0x00081210]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.00090b94": {
        "function_address": "0x00090b94",
        "instructions": [
            "ldr ip, [0x00090bd0]",
            "ldr r3, [0x00090bd4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090bd8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090bdc]",
            "ldr r0, [0x00090be0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt::Integer.Integer_TaoCrypt::Source_": {
        "function_address": "0x000aa1bc",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r3, 2",
            "str r3, [r0]",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r7, r1",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "str r0, [r4, 4]",
            "mov r6, 0",
            "mov r1, r0",
            "mov r2, r5",
            "mov r0, r3",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "str r0, [r4, 4]",
            "str r5, [r4]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "str r6, [r4, 0xc]",
            "mov r1, r7",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeERNS_6SourceE",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b": {
        "function_address": "0x0003d4f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc54]!"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6DecodeERNS_6SourceE": {
        "function_address": "0x0003e410",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x244]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::SHA::SHAImpl__yaSSL::SHA::SHAImpl_": {
        "function_address": "0x00080e44",
        "instructions": [
            "ldr r3, [0x00080e74]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080e78]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZdlPvN5yaSSL5new_tE": {
        "function_address": "0x0003ea58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe14]!"
        ]
    },
    "sym.mysql_add_slave": {
        "function_address": "0x000450b8",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "ldr ip, [sp, 0x10]",
            "mov r4, r0",
            "str ip, [sp]",
            "bl fcn.00044fa0",
            "subs r3, r0, 0",
            "ldrne r2, [r4, 0x3a0]",
            "moveq r0, 1",
            "strne r2, [r3, 0x3a0]",
            "movne r0, 0",
            "strne r3, [r4, 0x3a0]",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00044fa0": {
        "function_address": "0x00044fa0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r0",
            "mov r0, 0",
            "mov r4, r1",
            "mov r6, r2",
            "mov sl, r3",
            "ldr r8, [sp, 0x20]",
            "bl rsym.mysql_init",
            "subs r7, r0, 0",
            "beq 0x45038",
            "cmp sl, 0",
            "beq 0x4505c",
            "mov r0, sl",
            "mov r1, 0",
            "bl rsym.my_strdup",
            "cmp r8, 0",
            "str r0, [r7, 0x314]",
            "beq 0x45080",
            "mov r0, r8",
            "mov r1, 0",
            "bl rsym.my_strdup",
            "cmp r4, 0",
            "str r0, [r7, 0x318]",
            "str r6, [r7, 0x304]",
            "beq 0x450a8",
            "mov r1, 0",
            "mov r0, r4",
            "bl rsym.my_strdup",
            "str r0, [r7, 0x310]",
            "ldr r1, [r5, 0x28c]",
            "cmp r1, 0",
            "beq 0x45044",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym.my_strdup",
            "str r0, [r7, 0x320]",
            "mov r3, 0",
            "strb r3, [r7, 0x39b]",
            "mov r0, r7",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r0, [r5, 0x320]",
            "cmp r0, 0",
            "beq 0x45030",
            "bl rsym.my_strdup",
            "str r0, [r7, 0x320]",
            "b 0x45030",
            "ldr sl, [r5, 0x274]",
            "mov r1, 0",
            "cmp sl, 0",
            "ldreq sl, [r5, 0x314]",
            "mov r0, sl",
            "bl rsym.my_strdup",
            "cmp r8, 0",
            "str r0, [r7, 0x314]",
            "bne 0x44fe8",
            "ldr r8, [r5, 0x278]",
            "mov r1, 0",
            "cmp r8, 0",
            "ldreq r8, [r5, 0x318]",
            "mov r0, r8",
            "bl rsym.my_strdup",
            "cmp r4, 0",
            "str r0, [r7, 0x318]",
            "str r6, [r7, 0x304]",
            "bne 0x45004",
            "ldr r4, [r5, 0x270]",
            "cmp r4, 0",
            "ldreq r4, [r5, 0x310]",
            "b 0x45004"
        ]
    },
    "rsym.mysql_init": {
        "function_address": "0x0003d7d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa6c]!"
        ]
    },
    "rsym.my_strdup": {
        "function_address": "0x0003dba0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7e4]!"
        ]
    },
    "sym.my_chsize": {
        "function_address": "0x00059c4c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, fp, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0x18",
            "mov r1, 2",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "str r1, [sp]",
            "mov r2, 0",
            "mov r1, 0x18",
            "mov r3, 0",
            "str r1, [sp, 4]",
            "mov r8, r0",
            "bl rsym.my_seek",
            "ldr r2, [sp, 0x10]",
            "mov r6, r0",
            "cmp r0, r2",
            "mov r7, r1",
            "beq 0x59dbc",
            "ldr r2, [sp, 0x14]",
            "cmp r7, r2",
            "bls 0x59cf0",
            "mov r0, r8",
            "add r3, sp, 0x10",
            "ldm r3, {r2, r3}",
            "bl sym.imp.ftruncate64",
            "cmp r0, 0",
            "beq 0x59d9c",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "str r3, [r4]",
            "add r2, sp, 0x1000",
            "ldr r3, [r2, 0x3c]",
            "tst r3, 0x10",
            "bne 0x59da4",
            "mov r0, 1",
            "add sp, sp, 0x18",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sl, fp, lr}",
            "bx lr",
            "bne 0x59d00",
            "ldr r3, [sp, 0x10]",
            "cmp r6, r3",
            "bhi 0x59ca0",
            "add r2, sp, 0x1000",
            "add sl, sp, 0x18",
            "ldr r1, [r2, 0x38]",
            "add r5, sp, 0x10",
            "ldm r5, {r4, r5}",
            "mov r0, sl",
            "subs r4, r4, r6",
            "sbc r5, r5, r7",
            "mov r2, 0x1000",
            "bl sym.imp.memset",
            "cmp r5, 0",
            "beq 0x59dd0",
            "mov fp, 0x1000",
            "mov ip, 0",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, 0x1000",
            "mov r3, 4",
            "str ip, [sp, 0xc]",
            "bl rsym.my_write",
            "cmp r0, 0",
            "ldr ip, [sp, 0xc]",
            "bne 0x59ccc",
            "subs r4, r4, fp",
            "sbc r5, r5, ip",
            "adds r6, r6, fp",
            "adc r7, r7, ip",
            "cmp r5, 0",
            "bne 0x59d38",
            "cmp r4, 0x1000",
            "bhi 0x59d38",
            "ldr r3, [sp, 0x10]",
            "mov r0, r8",
            "rsb r2, r6, r3",
            "mov r1, sl",
            "mov r3, 4",
            "bl rsym.my_write",
            "cmp r0, 0",
            "bne 0x59ccc",
            "mov r0, 0",
            "b 0x59ce0",
            "bl rsym._my_thread_var",
            "mov r1, 0x24",
            "ldr r2, [r0]",
            "mov r0, 0xe",
            "bl rsym.my_error",
            "b 0x59cdc",
            "ldr r3, [sp, 0x14]",
            "cmp r1, r3",
            "bne 0x59c94",
            "mov r0, 0",
            "b 0x59ce0",
            "cmp r4, 0x1000",
            "bhi 0x59d30",
            "b 0x59d7c"
        ]
    },
    "rsym.my_seek": {
        "function_address": "0x0003eb00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xda4]!"
        ]
    },
    "sym.imp.ftruncate64": {
        "function_address": "0x000404ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc5c]!"
        ]
    },
    "rsym._my_thread_var": {
        "function_address": "0x000400e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf0c]!"
        ]
    },
    "rsym.my_write": {
        "function_address": "0x0003ec14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcec]!"
        ]
    },
    "rsym.my_error": {
        "function_address": "0x0003ee9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb3c]!"
        ]
    },
    "sym.my_micro_time_and_time": {
        "function_address": "0x00059f54",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r5, r0",
            "sub sp, sp, 0xc",
            "mov r0, sp",
            "mov r1, 0",
            "bl sym.imp.gettimeofday",
            "cmp r0, 0",
            "bne 0x59f60",
            "ldm sp, {r2, r3}",
            "ldr r1, [0x00059f9c]",
            "asr r4, r3, 0x1f",
            "smlal r3, r4, r2, r1",
            "str r2, [r5]",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.imp.gettimeofday": {
        "function_address": "0x0003e20c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x39c]!"
        ]
    },
    "fcn.00092ea8": {
        "function_address": "0x00092ea8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "mov r1, 0x30",
            "ldr r2, [r4, 0x5c]",
            "add r0, r0, 0x20",
            "bl rsym._ZN5yaSSL5cleanEPVhjRNS_10RandomPoolE",
            "ldr r0, [r4, 0x60]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL5cleanEPVhjRNS_10RandomPoolE": {
        "function_address": "0x00040930",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x984]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_": {
        "function_address": "0x0003f0c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9cc]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::Final_unsigned_char_": {
        "function_address": "0x000bade8",
        "instructions": [
            "ldrb r3, [r0, 0xc]",
            "push {r4, r5, r6, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "mov r6, r1",
            "bleq rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE12KeyInnerHashEv",
            "add r5, r4, 0x10",
            "ldr r1, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r0, r5",
            "ldr r1, [r4, 4]",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r2, 0x14",
            "ldr r1, [r4, 8]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE12KeyInnerHashEv": {
        "function_address": "0x0003eaac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xddc]!"
        ]
    },
    "rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh": {
        "function_address": "0x0003dc9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x73c]!"
        ]
    },
    "rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj": {
        "function_address": "0x0003d8e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9b4]!"
        ]
    },
    "fcn.0007e01c": {
        "function_address": "0x0007e01c",
        "instructions": [
            "ldr r3, [0x0007e068]",
            "ldr r2, [0x0007e06c]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt3MD5C1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZnwjN5yaSSL5new_tE": {
        "function_address": "0x0003d600",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xba4]!"
        ]
    },
    "rsym._ZN8TaoCrypt3MD5C1ERKS0_": {
        "function_address": "0x0003cd48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x174]!"
        ]
    },
    "fcn.0007d78c": {
        "function_address": "0x0007d78c",
        "instructions": [
            "ldr r3, [0x0007d7c8]",
            "ldr r2, [0x0007d7cc]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x204",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007dbe0": {
        "function_address": "0x0007dbe0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x10c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt21RandomNumberGeneratorC1Ev",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt21RandomNumberGeneratorC1Ev": {
        "function_address": "0x0003cef8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x54]!"
        ]
    },
    "sym.TaoCrypt::a_exp_b_mod_c_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a96a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr ip, [0x000a9764]",
            "ldr lr, [0x000a9768]",
            "ldr r6, [0x000a976c]",
            "add ip, pc, ip",
            "sub sp, sp, 0x44",
            "ldr r6, [ip, r6]",
            "ldr lr, [ip, lr]",
            "add r4, sp, 4",
            "add lr, lr, 8",
            "mov r7, r3",
            "mov r5, r0",
            "add r6, r6, 8",
            "mov sl, r1",
            "add r0, r4, 0xc",
            "mov r1, r3",
            "str lr, [sp, 8]",
            "mov r8, r2",
            "str r4, [sp, 0xc]",
            "str r6, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [r7]",
            "mov r1, 0",
            "add r0, r4, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, r8",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, sl",
            "bl rsym._ZNK8TaoCrypt12AbstractRing12ExponentiateERKNS_7IntegerES3_",
            "add r0, r4, 0x34",
            "ldr r1, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "str r6, [sp, 4]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x24",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x14",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r5",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1ERKS0_": {
        "function_address": "0x0003dfc0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x524]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1Ejj": {
        "function_address": "0x0003efd4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa6c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1Ev": {
        "function_address": "0x0003de28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x634]!"
        ]
    },
    "rsym._ZNK8TaoCrypt12AbstractRing12ExponentiateERKNS_7IntegerES3_": {
        "function_address": "0x0003d6d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb14]!"
        ]
    },
    "fcn.000b0878": {
        "function_address": "0x000b0878",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl sym.imp.close",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x0003f100",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9a4]!"
        ]
    },
    "fcn.000a9048": {
        "function_address": "0x000a9048",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [0x000a91ac]",
            "cmp r2, 8",
            "add r7, pc, r7",
            "sub sp, sp, 8",
            "mov r4, r0",
            "mov r8, r1",
            "bls 0xa9124",
            "cmp r2, 0x10",
            "movls r3, 0x10",
            "bls 0xa908c",
            "cmp r2, 0x20",
            "movls r3, 0x20",
            "bls 0xa908c",
            "cmp r2, 0x40",
            "movls r3, 0x40",
            "bhi 0xa914c",
            "str r3, [r4]",
            "mov r1, 0",
            "lsl r0, r3, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "mov r0, r4",
            "ldr r5, [r0], 8",
            "mov r6, 0",
            "mov r1, r3",
            "str r3, [r4, 4]",
            "mov r2, r5",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r6, [r4, 0xc]",
            "cmp r3, r6",
            "beq 0xa9160",
            "ldr r1, [r4, 4]",
            "str r8, [r1]",
            "ldr r0, [r4]",
            "subs r0, r0, 1",
            "beq 0xa9114",
            "mov r3, 1",
            "str r6, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "sub r2, r3, 1",
            "cmp r0, r2",
            "bhi 0xa9100",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a91b0]",
            "add r3, r7, r3",
            "add r2, r3, r2, lsl 2",
            "ldr r3, [r2, 0x5ec]",
            "cmn r3, 0xc0000001",
            "str r3, [r4]",
            "bhi 0xa9184",
            "cmp r3, 0",
            "beq 0xa90a0",
            "b 0xa9090",
            "sub r0, r2, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r3, 1",
            "lsl r3, r3, r0",
            "b 0xa9134",
            "ldr r3, [0x000a91b0]",
            "ldr r1, [0x000a91b4]",
            "ldr r0, [0x000a91b8]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a91b0]",
            "ldr r1, [0x000a91b4]",
            "add r3, r7, r3",
            "ldr r0, [0x000a91bc]",
            "add r3, r3, 0xc80",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt12BitPrecisionEj": {
        "function_address": "0x0003ff04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4c]!"
        ]
    },
    "sym.set_mysql_error": {
        "function_address": "0x0007409c",
        "instructions": [
            "ldr r3, [0x0007411c]",
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "add r3, pc, r3",
            "mov ip, r1",
            "mov r5, r2",
            "beq 0x740ec",
            "ldr r2, [0x00074120]",
            "str r1, [r4, 0x58]",
            "ldr r3, [r3, r2]",
            "sub ip, r1, 0x7d0",
            "ldr r1, [r3, ip, lsl 2]",
            "add r0, r4, 0x5f",
            "bl sym.imp.strcpy",
            "add r0, r4, 0x25c",
            "mov r1, r5",
            "add r0, r0, 3",
            "bl sym.imp.strcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [0x00074124]",
            "ldr r2, [0x00074120]",
            "ldr lr, [r3, r1]",
            "ldr r2, [r3, r2]",
            "ldr r0, [0x00074128]",
            "sub r1, ip, 0x7d0",
            "ldr r1, [r2, r1, lsl 2]",
            "ldr r0, [r3, r0]",
            "mov r2, 0x200",
            "str ip, [lr]",
            "bl sym.imp.__strcpy_chk",
            "b 0x740e4"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x0003eb90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd44]!"
        ]
    },
    "sym.imp.__strcpy_chk": {
        "function_address": "0x000404e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc64]!"
        ]
    },
    "sym.my_error_unregister": {
        "function_address": "0x00049960",
        "instructions": [
            "push {r4, lr}",
            "ldr r2, [0x000499d8]",
            "ldr ip, [0x000499dc]",
            "add r2, pc, r2",
            "ldr r3, [r2, ip]",
            "add r2, r2, ip",
            "cmp r3, 0",
            "bne 0x49998",
            "b 0x499c8",
            "ldr ip, [r3]",
            "mov r2, r3",
            "cmp ip, 0",
            "beq 0x499c8",
            "mov r3, ip",
            "ldr ip, [r3, 8]",
            "cmp ip, r0",
            "bne 0x49984",
            "ldr ip, [r3, 0xc]",
            "cmp ip, r1",
            "bne 0x49984",
            "ldr r1, [r3]",
            "mov r0, r3",
            "str r1, [r2]",
            "ldr r4, [r3, 4]",
            "bl rsym.my_no_flags_free",
            "b 0x499cc",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000af1a0": {
        "function_address": "0x000af1a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 4",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add r7, r5, 0x30",
            "add ip, r5, 0x10",
            "add r3, r6, 0x10",
            "ldm r3, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, r7",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r8, [0x000af220]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000af224]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj": {
        "function_address": "0x0003f670",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x604]!"
        ]
    },
    "fcn.000a0adc": {
        "function_address": "0x000a0adc",
        "instructions": [
            "ldr ip, [0x000a0b18]",
            "ldr r3, [0x000a0b1c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000a0b20]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000a0b24]",
            "ldr r0, [0x000a0b28]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CreateHelloRequest__": {
        "function_address": "0x0008b378",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, fcn.0011ca88",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b3ac]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000a10e8": {
        "function_address": "0x000a10e8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x10",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x20",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x30",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::yassl_int_cpp_local2::GetSelf__": {
        "function_address": "0x00092d58",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.pthread_self",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_self": {
        "function_address": "0x000407ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa5c]!"
        ]
    },
    "sym.mysql_stmt_fetch_column": {
        "function_address": "0x000463ec",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r5, [r0, 0xac]",
            "ldr ip, [0x000464e0]",
            "cmp r5, 3",
            "add ip, pc, ip",
            "mov r5, r1",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "ldr r6, [r0, 0x34]",
            "ldrle r1, [0x000464e4]",
            "ble 0x464ac",
            "ldr r1, [r0, 0xa8]",
            "cmp r2, r1",
            "bhs 0x464a8",
            "ldr r1, [r5, 0xc]",
            "mov ip, 0",
            "cmp r1, 0",
            "addeq r1, r5, 0x38",
            "streq r1, [r5, 0xc]",
            "add r7, r6, r2, lsl 6",
            "strb ip, [r1]",
            "ldr r0, [r7, 0x10]",
            "cmp r0, ip",
            "beq 0x464c8",
            "ldr lr, [r5, 4]",
            "str r0, [sp, 4]",
            "cmp lr, ip",
            "ldr r0, [r4, 0x38]",
            "str r3, [r5, 0x24]",
            "strbne ip, [lr]",
            "ldr r3, [r5]",
            "cmp r3, 0",
            "ldrne r1, [r6, r2, lsl 6]",
            "addeq r7, r7, 0x28",
            "ldrne r1, [r1]",
            "streq r7, [r5]",
            "strne r1, [r3]",
            "add r3, r2, r2, lsl 2",
            "add r2, r2, r3, lsl 2",
            "add r1, r0, r2, lsl 2",
            "mov r0, r5",
            "add r2, sp, 4",
            "bl fcn.00045f68",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r1, [0x000464e8]",
            "ldr r3, [0x000464ec]",
            "ldr r2, [ip, r3]",
            "mov r3, 0",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x4649c",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "movne r2, 1",
            "moveq r0, r3",
            "strbne r2, [r3]",
            "b 0x4649c"
        ]
    },
    "fcn.00045f68": {
        "function_address": "0x00045f68",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r1, 0x4c]",
            "ldr ip, [r1, 0x40]",
            "sub r3, r3, 1",
            "sub sp, sp, 0x38",
            "mov r5, r1",
            "mov r6, r0",
            "mov r4, r2",
            "and ip, ip, 0x20",
            "cmp r3, 0xc",
            "addls pc, pc, r3, lsl 2",
            "b 0x460a0",
            "b 0x460cc",
            "b 0x46108",
            "b 0x46150",
            "b 0x461a4",
            "b 0x461e8",
            "b 0x460a0",
            "b 0x46224",
            "b 0x462d4",
            "b 0x46150",
            "b 0x4634c",
            "b 0x45fcc",
            "b 0x46224",
            "b 0x46108",
            "mov r0, r2",
            "bl rsym.net_field_length",
            "cmp r0, 0",
            "beq 0x463d8",
            "ldr r3, [r4]",
            "cmp r0, 8",
            "ldrb r2, [r3]",
            "movls lr, 0",
            "strb r2, [sp, 0x28]",
            "ldrb r2, [r3, 3]",
            "ldrb r1, [r3, 2]",
            "ldrb ip, [r3, 1]",
            "lsl r2, r2, 0x10",
            "add r2, r2, r1, lsl 8",
            "ldrb r1, [r3, 4]",
            "add r2, r2, ip",
            "add r2, r2, r1, lsl 24",
            "str r2, [sp, 0x14]",
            "ldrb ip, [r3, 5]",
            "str ip, [sp, 0x18]",
            "ldrb r1, [r3, 6]",
            "str r1, [sp, 0x1c]",
            "ldrb r1, [r3, 7]",
            "str r1, [sp, 0x20]",
            "ldrbhi r1, [r3, 0xa]",
            "ldrbhi lr, [r3, 9]",
            "ldrbhi r7, [r3, 8]",
            "lslhi r1, r1, 0x10",
            "addhi r1, r1, lr, lsl 8",
            "ldrbhi lr, [r3, 0xb]",
            "addhi r1, r1, r7",
            "addhi lr, r1, lr, lsl 24",
            "cmp r2, 0",
            "addne r2, r2, r2, lsl 1",
            "mov r1, 0",
            "add r3, r3, r0",
            "addne ip, ip, r2, lsl 3",
            "str lr, [sp, 0x24]",
            "str r1, [sp, 0x10]",
            "str r1, [sp, 0xc]",
            "strne ip, [sp, 0x18]",
            "strne r1, [sp, 0x14]",
            "str r3, [r4]",
            "mov r3, 2",
            "str r3, [sp, 0x2c]",
            "add r7, sp, 0xc",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r7",
            "bl fcn.000443f4",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r2",
            "bl rsym.net_field_length",
            "mov r5, r0",
            "mov r2, r5",
            "mov r0, r6",
            "ldr r1, [r4]",
            "bl fcn.0004376c",
            "ldr r3, [r4]",
            "add r5, r3, r5",
            "str r5, [r4]",
            "b 0x46094",
            "ldr r3, [r2]",
            "cmp ip, 0",
            "ldrb r2, [r3]",
            "mov ip, 0",
            "lsleq r2, r2, 0x18",
            "asreq r2, r2, 0x18",
            "andne r2, r2, 0xff",
            "movne r3, 0",
            "asreq r3, r2, 0x1f",
            "str ip, [sp]",
            "bl fcn.00043ba4",
            "ldr r3, [r4]",
            "add r3, r3, 1",
            "str r3, [r4]",
            "b 0x46094",
            "ldr r3, [r2]",
            "cmp ip, 0",
            "ldrb r2, [r3]",
            "ldrb r3, [r3, 1]",
            "mov ip, 0",
            "add r2, r2, r3, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "lsleq r2, r2, 0x10",
            "asreq r2, r2, 0x10",
            "movne r3, 0",
            "asreq r3, r2, 0x1f",
            "str ip, [sp]",
            "bl fcn.00043ba4",
            "ldr r3, [r4]",
            "add r3, r3, 2",
            "str r3, [r4]",
            "b 0x46094",
            "ldr r3, [r2]",
            "cmp ip, 0",
            "ldrb r2, [r3, 2]",
            "ldrb r0, [r3, 1]",
            "ldrb r1, [r3]",
            "lsl r2, r2, 0x10",
            "ldrb r3, [r3, 3]",
            "add r2, r2, r0, lsl 8",
            "add r2, r2, r1",
            "add r2, r2, r3, lsl 24",
            "movne r3, 0",
            "asreq r3, r2, 0x1f",
            "mov ip, 0",
            "mov r0, r6",
            "mov r1, r5",
            "str ip, [sp]",
            "bl fcn.00043ba4",
            "ldr r3, [r4]",
            "add r3, r3, 4",
            "str r3, [r4]",
            "b 0x46094",
            "mov r2, 4",
            "ldr r1, [r4]",
            "add r0, sp, 0x30",
            "bl sym.imp.memcpy",
            "ldr r0, [sp, 0x30]",
            "bl fcn.000bf2e0",
            "mov ip, 6",
            "mov r3, r1",
            "mov r2, r0",
            "mov r1, r5",
            "mov r0, r6",
            "str ip, [sp]",
            "bl fcn.00043fa8",
            "ldr r3, [r4]",
            "add r3, r3, 4",
            "str r3, [r4]",
            "b 0x46094",
            "ldr r1, [r2]",
            "add r0, sp, 0x30",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "add r3, sp, 0x30",
            "ldm r3, {r2, r3}",
            "mov ip, 0xf",
            "mov r0, r6",
            "mov r1, r5",
            "str ip, [sp]",
            "bl fcn.00043fa8",
            "ldr r3, [r4]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "b 0x46094",
            "mov r0, r2",
            "bl rsym.net_field_length",
            "cmp r0, 0",
            "beq 0x463c4",
            "ldr r3, [r4]",
            "mov r2, 0",
            "strb r2, [sp, 0x28]",
            "ldrb ip, [r3, 1]",
            "ldrb r1, [r3]",
            "cmp r0, 4",
            "add r1, r1, ip, lsl 8",
            "lsl r1, r1, 0x10",
            "asr r1, r1, 0x10",
            "str r1, [sp, 0xc]",
            "ldrb r1, [r3, 2]",
            "str r1, [sp, 0x10]",
            "ldrb r1, [r3, 3]",
            "strls r2, [sp, 0x20]",
            "str r1, [sp, 0x14]",
            "strls r2, [sp, 0x1c]",
            "strls r2, [sp, 0x18]",
            "bls 0x462b8",
            "ldrb r1, [r3, 4]",
            "cmp r0, 7",
            "str r1, [sp, 0x18]",
            "ldrb r1, [r3, 5]",
            "str r1, [sp, 0x1c]",
            "ldrb r1, [r3, 6]",
            "str r1, [sp, 0x20]",
            "ldrbhi r2, [r3, 9]",
            "ldrbhi r1, [r3, 8]",
            "lslhi r2, r2, 0x10",
            "ldrbhi ip, [r3, 7]",
            "addhi r2, r2, r1, lsl 8",
            "ldrbhi r1, [r3, 0xa]",
            "addhi r2, r2, ip",
            "addhi r2, r2, r1, lsl 24",
            "add r3, r3, r0",
            "str r3, [r4]",
            "mov r3, 1",
            "str r2, [sp, 0x24]",
            "str r3, [sp, 0x2c]",
            "add r7, sp, 0xc",
            "b 0x46084",
            "ldr r3, [r2]",
            "mov r1, 0",
            "ldrb sb, [r3, 6]",
            "ldrb lr, [r3, 5]",
            "ldrb r7, [r3, 2]",
            "ldrb r0, [r3, 1]",
            "lsl sb, sb, 0x10",
            "add sb, sb, lr, lsl 8",
            "lsl r7, r7, 0x10",
            "ldrb lr, [r3]",
            "ldrb r8, [r3, 4]",
            "add r7, r7, r0, lsl 8",
            "ldrb r0, [r3, 3]",
            "ldrb sl, [r3, 7]",
            "add r3, r7, lr",
            "add r3, r3, r0, lsl 24",
            "add r8, sb, r8",
            "adds r7, r1, r3",
            "add r2, r8, sl, lsl 24",
            "adc r8, r2, 0",
            "mov r3, r8",
            "mov r2, r7",
            "mov r0, r6",
            "mov r1, r5",
            "str ip, [sp]",
            "bl fcn.00043ba4",
            "ldr r3, [r4]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "b 0x46094",
            "mov r0, r2",
            "bl rsym.net_field_length",
            "subs r1, r0, 0",
            "beq 0x463b4",
            "ldr r2, [r4]",
            "mov r3, 0",
            "ldrb ip, [r2, 1]",
            "ldrb r0, [r2]",
            "add r1, r2, r1",
            "add r0, r0, ip, lsl 8",
            "lsl r0, r0, 0x10",
            "asr r0, r0, 0x10",
            "str r0, [sp, 0xc]",
            "ldrb r0, [r2, 2]",
            "add r7, sp, 0xc",
            "str r0, [sp, 0x10]",
            "ldrb r2, [r2, 3]",
            "str r1, [r4]",
            "str r2, [sp, 0x14]",
            "str r3, [sp, 0x2c]",
            "str r3, [sp, 0x20]",
            "str r3, [sp, 0x1c]",
            "str r3, [sp, 0x18]",
            "str r3, [sp, 0x24]",
            "strb r3, [sp, 0x28]",
            "b 0x46084",
            "add r7, sp, 0xc",
            "mov r0, r7",
            "bl rsym.set_zero_time",
            "b 0x46084",
            "add r7, sp, 0xc",
            "mov r0, r7",
            "mov r1, 1",
            "bl rsym.set_zero_time",
            "b 0x46084",
            "add r7, sp, 0xc",
            "mov r0, r7",
            "mov r1, 2",
            "bl rsym.set_zero_time",
            "b 0x46084"
        ]
    },
    "rsym.set_stmt_error": {
        "function_address": "0x0003dabc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x87c]!"
        ]
    },
    "rsym.net_field_length": {
        "function_address": "0x000402d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdc4]!"
        ]
    },
    "fcn.000443f4": {
        "function_address": "0x000443f4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0, 0x34]",
            "sub sp, sp, 0x2c",
            "sub r3, r3, 1",
            "mov r4, r0",
            "mov r5, r1",
            "mov ip, r2",
            "cmp r3, 0xc",
            "addls pc, pc, r3, lsl 2",
            "b 0x44450",
            "b 0x444a4",
            "b 0x444a4",
            "b 0x444a4",
            "b 0x444cc",
            "b 0x444cc",
            "b 0x44470",
            "b 0x444f8",
            "b 0x444a4",
            "b 0x444a4",
            "b 0x4451c",
            "b 0x44558",
            "b 0x444f8",
            "b 0x4447c",
            "add r5, sp, 8",
            "mov r0, r2",
            "mov r1, r5",
            "bl rsym.my_TIME_to_str",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl fcn.0004376c",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [r2]",
            "ldr r1, [r0, 8]",
            "lsr r2, r3, 8",
            "strb r3, [r1]",
            "ldr r3, [r0, 8]",
            "strb r2, [r3, 1]",
            "ldr r3, [r0, 0xc]",
            "mov r2, 1",
            "strb r2, [r3]",
            "b 0x44470",
            "mov r0, r2",
            "bl rsym.TIME_to_ulonglong",
            "mov ip, 1",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "str ip, [sp]",
            "bl fcn.00043ba4",
            "b 0x44470",
            "mov r0, r2",
            "bl rsym.TIME_to_ulonglong",
            "bl fcn.000bf320",
            "mov ip, 0xf",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "str ip, [sp]",
            "bl fcn.00043fa8",
            "b 0x44470",
            "ldr r5, [r0, 8]",
            "ldm ip!, {r0, r1, r2, r3}",
            "mov r4, r5",
            "stm r4!, {r0, r1, r2, r3}",
            "ldm ip!, {r0, r1, r2, r3}",
            "stm r4!, {r0, r1, r2, r3}",
            "ldr r3, [ip]",
            "str r3, [r4]",
            "b 0x44470",
            "ldr r7, [r0, 8]",
            "mov r6, r2",
            "mov r5, r7",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm r5!, {r0, r1, r2, r3}",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm r5!, {r0, r1, r2, r3}",
            "ldr r3, [r6]",
            "str r3, [r5]",
            "ldr r2, [ip, 0x20]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 0",
            "movne r2, 1",
            "strb r2, [r3]",
            "b 0x44470",
            "ldr r7, [r0, 8]",
            "mov r6, r2",
            "mov r5, r7",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm r5!, {r0, r1, r2, r3}",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm r5!, {r0, r1, r2, r3}",
            "ldr r3, [r6]",
            "str r3, [r5]",
            "ldr r2, [ip, 0x20]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 2",
            "movne r2, 1",
            "strb r2, [r3]",
            "b 0x44470"
        ]
    },
    "fcn.0004376c": {
        "function_address": "0x0004376c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r6, r2",
            "ldr r3, [r0, 0x34]",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "ldr r2, [0x00043b9c]",
            "add r7, r1, r6",
            "mov r0, 0",
            "str r0, [sp, 0x14]",
            "str r7, [sp, 0x10]",
            "sub r3, r3, 1",
            "add r2, pc, r2",
            "ldr r5, [r4, 8]",
            "cmp r3, 0xb",
            "addls pc, pc, r3, lsl 2",
            "b 0x4384c",
            "b 0x43890",
            "b 0x438c8",
            "b 0x43988",
            "b 0x43900",
            "b 0x43a74",
            "b 0x43814",
            "b 0x439e4",
            "b 0x43a28",
            "b 0x4384c",
            "b 0x439e4",
            "b 0x43820",
            "b 0x439e4",
            "mov r3, 0x80",
            "adds r3, r3, r0",
            "mov r4, 0",
            "adc r4, r4, r1",
            "cmp r4, 0",
            "bne 0x438c0",
            "cmp r3, 0xff",
            "bhi 0x438c0",
            "ldr r3, [sp, 0x14]",
            "cmp r3, 0",
            "movle r3, 0",
            "movgt r3, 1",
            "strb r3, [r2]",
            "strb r0, [r5]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r1",
            "mov r2, r5",
            "add r3, sp, 0x14",
            "mov r1, r6",
            "bl rsym.str_to_time",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 0",
            "movne r2, 1",
            "strb r2, [r3]",
            "b 0x43814",
            "ldr r3, [r4, 0x24]",
            "add r1, r1, r3",
            "cmp r7, r1",
            "movls r7, 0",
            "bls 0x43ae4",
            "ldr r3, [r4, 0x20]",
            "rsb r7, r1, r7",
            "cmp r3, 0",
            "bne 0x43ad0",
            "ldr r2, [r4, 0xc]",
            "cmp r3, r7",
            "movhs r7, 0",
            "movlo r7, 1",
            "strb r7, [r2]",
            "ldr r3, [r4]",
            "str r6, [r3]",
            "b 0x43814",
            "mov r0, r1",
            "add r2, sp, 0x14",
            "add r1, sp, 0x10",
            "bl rsym.my_strtoll10",
            "ldrb r3, [r4, 0x39]",
            "ldr r2, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x437dc",
            "cmp r1, 0",
            "bne 0x438c0",
            "cmp r0, 0xff",
            "bls 0x437fc",
            "mov r3, 1",
            "b 0x4380c",
            "mov r0, r1",
            "add r2, sp, 0x14",
            "add r1, sp, 0x10",
            "bl rsym.my_strtoll10",
            "ldrb r3, [r4, 0x39]",
            "ldr r2, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x43b1c",
            "cmp r1, 0",
            "bne 0x438f8",
            "cmp r0, 0x10000",
            "blo 0x43b3c",
            "mov ip, 1",
            "b 0x43b4c",
            "ldr r3, [0x00043ba0]",
            "ldr ip, [r2, r3]",
            "add r3, sp, 0x14",
            "str r3, [sp]",
            "mov r2, r6",
            "add r3, sp, 0x10",
            "mov r0, ip",
            "ldr ip, [ip, 0x64]",
            "ldr ip, [ip, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "mov r7, r1",
            "mov r6, r0",
            "bl fcn.000bfa24",
            "str r0, [sp, 8]",
            "bl fcn.000bf2e0",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.000bf8fc",
            "ldr r1, [sp, 0x14]",
            "cmp r0, 0",
            "ldr r2, [r4, 0xc]",
            "mov r3, 0",
            "moveq r3, 1",
            "cmp r1, 0",
            "orrne r3, r3, 1",
            "strb r3, [r2]",
            "mov r0, r5",
            "add r1, sp, 8",
            "mov r2, 4",
            "bl sym.imp.memcpy",
            "b 0x43814",
            "mov r0, r1",
            "add r2, sp, 0x14",
            "add r1, sp, 0x10",
            "bl rsym.my_strtoll10",
            "ldrb r3, [r4, 0x39]",
            "ldr r4, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x43afc",
            "cmp r1, 0",
            "bne 0x43b14",
            "ldr r6, [sp, 0x14]",
            "cmp r6, 0",
            "movle r6, 0",
            "movgt r6, 1",
            "asr ip, r0, 0x18",
            "asr r2, r0, 8",
            "asr r3, r0, 0x10",
            "strb r6, [r4]",
            "strb ip, [r5, 3]",
            "strb r2, [r5, 1]",
            "strb r3, [r5, 2]",
            "strb r0, [r5]",
            "b 0x43814",
            "mov r0, r1",
            "mov r2, r5",
            "mov r3, 1",
            "add ip, sp, 0x14",
            "mov r1, r6",
            "str ip, [sp]",
            "bl rsym.str_to_datetime",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [r4, 0xc]",
            "cmp r2, 0",
            "beq 0x43a1c",
            "ldr r2, [r4, 0x34]",
            "cmp r2, 0xa",
            "beq 0x43b88",
            "mov r2, 0",
            "strb r2, [r3]",
            "b 0x43814",
            "mov r0, r1",
            "add r2, sp, 0x14",
            "add r1, sp, 0x10",
            "bl rsym.my_strtoll10",
            "ldrb r3, [r4, 0x39]",
            "str r0, [sp, 8]",
            "cmp r3, 0",
            "str r1, [sp, 0xc]",
            "ldr r3, [r4, 0xc]",
            "beq 0x43b68",
            "ldr r1, [sp, 0x14]",
            "subs r1, r1, 0",
            "movne r1, 1",
            "strb r1, [r3]",
            "mov r0, r5",
            "add r1, sp, 8",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "b 0x43814",
            "ldr r3, [0x00043ba0]",
            "ldr r3, [r2, r3]",
            "add r2, sp, 0x14",
            "str r2, [sp]",
            "ldr ip, [r3, 0x64]",
            "mov r2, r6",
            "mov r0, r3",
            "add r3, sp, 0x10",
            "ldr ip, [ip, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 0",
            "movne r2, 1",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "strb r2, [r3]",
            "mov r0, r5",
            "add r1, sp, 8",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "b 0x43814",
            "cmp r7, r3",
            "movlo r2, r7",
            "movhs r2, r3",
            "mov r0, r5",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x20]",
            "cmp r7, r3",
            "movlo r3, 0",
            "strblo r3, [r5, r7]",
            "ldrlo r3, [r4, 0x20]",
            "b 0x43870",
            "mov r2, 0x80000000",
            "adds r2, r2, r0",
            "mov r3, 0",
            "adc r3, r3, r1",
            "cmp r3, 0",
            "beq 0x439b0",
            "mov r6, 1",
            "b 0x439c0",
            "mov r3, 0x8000",
            "adds r3, r3, r0",
            "mov r4, 0",
            "adc r4, r4, r1",
            "cmp r4, 0",
            "bne 0x438f8",
            "cmp r3, 0x10000",
            "bhs 0x438f8",
            "ldr ip, [sp, 0x14]",
            "cmp ip, 0",
            "movle ip, 0",
            "movgt ip, 1",
            "lsl r0, r0, 0x10",
            "asr r0, r0, 0x10",
            "lsr r3, r0, 8",
            "strb ip, [r2]",
            "strb r3, [r5, 1]",
            "strb r0, [r5]",
            "b 0x43814",
            "ldr r2, [sp, 0x14]",
            "cmp r2, 0",
            "movgt r1, 1",
            "bgt 0x43a5c",
            "rsbs r2, r2, 1",
            "movlo r2, 0",
            "and r1, r2, r1, lsr 31",
            "b 0x43a5c",
            "ldr r2, [r5, 0x20]",
            "subs r2, r2, 0",
            "movne r2, 1",
            "strb r2, [r3]",
            "b 0x43814"
        ]
    },
    "fcn.00043ba4": {
        "function_address": "0x00043ba4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x30",
            "mov r4, r0",
            "ldr r0, [r0, 0x34]",
            "str r2, [sp, 8]",
            "str r3, [sp, 0xc]",
            "mov r5, r1",
            "sub r1, r0, 1",
            "ldrb r6, [sp, 0x48]",
            "ldr r7, [r4, 8]",
            "cmp r1, 0xb",
            "addls pc, pc, r1, lsl 2",
            "b 0x43c8c",
            "b 0x43d10",
            "b 0x43d48",
            "b 0x43c08",
            "b 0x43d84",
            "b 0x43de0",
            "b 0x43c4c",
            "b 0x43e40",
            "b 0x43c58",
            "b 0x43c8c",
            "b 0x43e40",
            "b 0x43e40",
            "b 0x43e40",
            "ldrb r3, [r4, 0x39]",
            "ldr r2, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x43ea0",
            "ldr r3, [sp, 0xc]",
            "subs r3, r3, 0",
            "movne r3, 1",
            "strb r3, [r2]",
            "ldr r3, [sp, 8]",
            "strb r3, [r7]",
            "ldr r3, [sp, 8]",
            "asr r3, r3, 8",
            "strb r3, [r7, 1]",
            "ldrsh r3, [sp, 0xa]",
            "strb r3, [r7, 2]",
            "ldrsb r3, [sp, 0xb]",
            "strb r3, [r7, 3]",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r2, 8",
            "mov r0, r7",
            "add r1, sp, 8",
            "bl sym.imp.memcpy",
            "ldrb r2, [r4, 0x39]",
            "ldr r3, [r4, 0xc]",
            "cmp r2, r6",
            "moveq r2, 0",
            "beq 0x43c84",
            "ldr r2, [sp, 0xc]",
            "lsr r2, r2, 0x1f",
            "strb r2, [r3]",
            "b 0x43c4c",
            "cmp r6, 0",
            "add r6, sp, 0x10",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, r6",
            "movne r3, 0xa",
            "mvneq r3, 9",
            "bl rsym.longlong10_to_str",
            "ldr r3, [r5, 0x40]",
            "rsb r7, r6, r0",
            "tst r3, 0x40",
            "beq 0x43cfc",
            "ldr r0, [r5, 0x1c]",
            "cmp r7, r0",
            "bhs 0x43cfc",
            "cmp r0, 0x14",
            "bhi 0x43cfc",
            "add r1, r6, r7",
            "mov r2, r7",
            "add r0, r6, r0",
            "bl rsym.bmove_upp",
            "ldr r2, [r5, 0x1c]",
            "mov r0, r6",
            "rsb r2, r7, r2",
            "mov r1, 0x30",
            "mov r3, 0x16",
            "bl sym.imp.__memset_chk",
            "ldr r7, [r5, 0x1c]",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl fcn.0004376c",
            "b 0x43c4c",
            "ldrb r3, [r4, 0x39]",
            "ldr r0, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x43ec4",
            "ldr r2, [sp, 0xc]",
            "mov r3, 0",
            "cmp r2, r3",
            "beq 0x43f80",
            "mov r3, 1",
            "strb r3, [r0]",
            "ldr r3, [r4, 8]",
            "ldr r2, [sp, 8]",
            "strb r2, [r3]",
            "b 0x43c4c",
            "ldrb r3, [r4, 0x39]",
            "ldr r0, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x43e74",
            "ldr r2, [sp, 0xc]",
            "mov r3, 0",
            "cmp r2, r3",
            "beq 0x43f70",
            "mov r3, 1",
            "strb r3, [r0]",
            "ldrsh r3, [sp, 8]",
            "lsr r2, r3, 8",
            "strb r2, [r7, 1]",
            "strb r3, [r7]",
            "b 0x43c4c",
            "cmp r6, 0",
            "beq 0x43f34",
            "ldr r5, [sp, 8]",
            "ldr r6, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, r6",
            "bl fcn.000bf320",
            "bl fcn.000bfa24",
            "str r0, [sp, 0x28]",
            "ldr r4, [r4, 0xc]",
            "mov r3, 0",
            "ldr r0, [sp, 0x28]",
            "strb r3, [r4]",
            "bl rsym.__aeabi_f2ulz",
            "cmp r5, r0",
            "beq 0x43f9c",
            "mov r3, 1",
            "strb r3, [r4]",
            "mov r0, r7",
            "add r1, sp, 0x28",
            "mov r2, 4",
            "bl sym.imp.memcpy",
            "b 0x43c4c",
            "cmp r6, 0",
            "beq 0x43ef0",
            "ldr r5, [sp, 8]",
            "ldr r6, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, r6",
            "bl fcn.000bf320",
            "ldr r4, [r4, 0xc]",
            "mov r3, 0",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "strb r3, [r4]",
            "bl rsym.__aeabi_d2ulz",
            "cmp r5, r0",
            "beq 0x43f90",
            "mov r3, 1",
            "strb r3, [r4]",
            "mov r0, r7",
            "add r1, sp, 0x28",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "b 0x43c4c",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, r7",
            "mov r3, 1",
            "add ip, sp, 0x28",
            "str ip, [sp]",
            "bl rsym.number_to_datetime",
            "ldr r2, [sp, 0x28]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 0",
            "movne r2, 1",
            "strb r2, [r3]",
            "b 0x43c4c",
            "mov r4, 0x8000",
            "add r2, sp, 8",
            "ldm r2, {r1, r2}",
            "mov r5, 0",
            "adds r1, r1, r4",
            "adc r2, r2, r5",
            "cmp r2, 0",
            "bne 0x43d68",
            "cmp r1, 0x10000",
            "blo 0x43d6c",
            "b 0x43d68",
            "mov r4, 0x80000000",
            "add r1, sp, 8",
            "ldm r1, {r0, r1}",
            "mov r5, 0",
            "adds r0, r0, r4",
            "adc r1, r1, r5",
            "cmp r1, 0",
            "movne r3, 1",
            "b 0x43c24",
            "mov r5, 0x80",
            "add r2, sp, 8",
            "ldm r2, {r1, r2}",
            "mov r6, 0",
            "adds r1, r1, r5",
            "adc r2, r2, r6",
            "cmp r2, 0",
            "bne 0x43d30",
            "cmp r1, 0xff",
            "bls 0x43d34",
            "b 0x43d30",
            "ldr r5, [sp, 8]",
            "ldr r8, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, r8",
            "bl fcn.000bf334",
            "ldr r4, [r4, 0xc]",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "strb r6, [r4]",
            "bl rsym.__aeabi_d2lz",
            "cmp r5, r0",
            "bne 0x43e24",
            "cmp r8, r1",
            "bne 0x43e24",
            "b 0x43e2c",
            "ldr r5, [sp, 8]",
            "ldr r8, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, r8",
            "bl fcn.000bfcc4",
            "str r0, [sp, 0x28]",
            "ldr r4, [r4, 0xc]",
            "ldr r0, [sp, 0x28]",
            "strb r6, [r4]",
            "bl rsym.__aeabi_f2lz",
            "cmp r5, r0",
            "bne 0x43dc4",
            "cmp r8, r1",
            "bne 0x43dc4",
            "b 0x43dcc",
            "ldr r2, [sp, 8]",
            "cmp r2, 0x10000",
            "blo 0x43d6c",
            "b 0x43d68",
            "ldr r2, [sp, 8]",
            "cmp r2, 0xff",
            "bls 0x43d34",
            "b 0x43d30",
            "cmp r6, r1",
            "bne 0x43e24",
            "b 0x43e2c",
            "cmp r6, r1",
            "bne 0x43dc4",
            "b 0x43dcc"
        ]
    },
    "fcn.000bf2e0": {
        "function_address": "0x000bf2e0",
        "instructions": [
            "lsls r2, r0, 1",
            "asr r1, r2, 3",
            "rrx r1, r1",
            "lsl r0, r2, 0x1c",
            "andsne r3, r2, 0xff000000",
            "teqne r3, 0xff000000",
            "eorne r1, r1, 0x38000000",
            "bxne lr",
            "teq r2, 0",
            "teqne r3, 0xff000000",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x380",
            "and r5, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "b 0xbf0d4"
        ]
    },
    "fcn.00043fa8": {
        "function_address": "0x00043fa8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x174",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "ldr r6, [sp, 0x10]",
            "ldr r5, [sp, 0x14]",
            "mov r4, r0",
            "mov sb, r1",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.000bf914",
            "ldr fp, [0x000443dc]",
            "cmp r0, 0",
            "add fp, pc, fp",
            "ldr r7, [r4, 8]",
            "beq 0x440b4",
            "mov r0, r6",
            "add r1, r5, 0x80000000",
            "bl sym.imp.floor",
            "mov sl, r0",
            "add r8, r1, 0x80000000",
            "ldr r3, [r4, 0x34]",
            "sub r3, r3, 1",
            "cmp r3, 7",
            "addls pc, pc, r3, lsl 2",
            "b 0x440cc",
            "b 0x441a4",
            "b 0x441ec",
            "b 0x44234",
            "b 0x4428c",
            "b 0x442d8",
            "b 0x440a8",
            "b 0x440cc",
            "b 0x44038",
            "ldrb r3, [r4, 0x39]",
            "cmp r3, 0",
            "beq 0x44354",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym.__aeabi_d2ulz",
            "add r3, sp, 0x170",
            "stmdb r3!, {r0, r1}",
            "mov r2, 8",
            "mov r1, r3",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "ldrb r3, [r4, 0x39]",
            "ldr r4, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x44340",
            "ldm r7, {r0, r1}",
            "bl fcn.000bf320",
            "mov r2, r0",
            "mov r3, r1",
            "mov ip, 0",
            "mov r0, sl",
            "mov r1, r8",
            "strb ip, [r4]",
            "bl fcn.000bf8fc",
            "cmp r0, 0",
            "moveq r3, 1",
            "strbeq r3, [r4]",
            "add sp, sp, 0x174",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "mov r1, r5",
            "bl sym.imp.floor",
            "mov sl, r0",
            "mov r8, r1",
            "b 0x44004",
            "ldr ip, [sb, 0x44]",
            "cmp ip, 0x1e",
            "bls 0x44304",
            "ldr ip, [sp, 0x198]",
            "ldr r3, [0x000443e0]",
            "ldr r8, [r4, 0x20]",
            "mov r2, r5",
            "ldr lr, [0x000443e4]",
            "add r5, sp, 0x1c",
            "add r3, fp, r3",
            "cmp ip, 0xf",
            "movge ip, 0xf",
            "mov r7, r2",
            "mov r1, 1",
            "ldr r2, [0x000443e8]",
            "mov r0, r5",
            "cmp lr, r8",
            "strls lr, [sp]",
            "strhi r8, [sp]",
            "str ip, [sp, 4]",
            "str r6, [sp, 8]",
            "str r7, [sp, 0xc]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, r5",
            "mov r1, 0x20",
            "bl rsym.strcend",
            "mov r3, 0",
            "strb r3, [r0]",
            "ldr r3, [sb, 0x40]",
            "rsb r6, r5, r0",
            "tst r3, 0x40",
            "beq 0x44190",
            "ldr r0, [sb, 0x1c]",
            "cmp r6, r0",
            "bhs 0x44190",
            "ldr r3, [0x000443ec]",
            "cmp r0, r3",
            "bhi 0x44190",
            "add r1, r5, r6",
            "mov r2, r6",
            "add r0, r5, r0",
            "bl rsym.bmove_upp",
            "ldr r2, [sb, 0x1c]",
            "mov r0, r5",
            "rsb r2, r6, r2",
            "mov r1, 0x30",
            "ldr r3, [0x000443e8]",
            "bl sym.imp.__memset_chk",
            "ldr r6, [sb, 0x1c]",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r6",
            "bl fcn.0004376c",
            "b 0x440a8",
            "ldrb r3, [r4, 0x39]",
            "cmp r3, 0",
            "beq 0x442ec",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.000bf9d0",
            "and r0, r0, 0xff",
            "strb r0, [r7]",
            "ldrb r3, [r4, 0x39]",
            "ldr r4, [r4, 0xc]",
            "cmp r3, 0",
            "bne 0x44224",
            "lsl r0, r0, 0x18",
            "asr r0, r0, 0x18",
            "bl fcn.000bf2b8",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "ldrb r3, [r4, 0x39]",
            "cmp r3, 0",
            "beq 0x44378",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.000bf9d0",
            "lsr r3, r0, 8",
            "strb r3, [r7, 1]",
            "strb r0, [r7]",
            "ldrb r3, [r4, 0x39]",
            "ldr r4, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x44364",
            "ldrh r0, [r7]",
            "bl fcn.000bf294",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "ldrb r3, [r4, 0x39]",
            "cmp r3, 0",
            "beq 0x443b0",
            "mov r1, r5",
            "mov r0, r6",
            "bl fcn.000bf9d0",
            "lsr r3, r0, 0x18",
            "lsr r1, r0, 8",
            "lsr r2, r0, 0x10",
            "strb r1, [r7, 1]",
            "strb r2, [r7, 2]",
            "strb r3, [r7, 3]",
            "strb r0, [r7]",
            "ldrb r3, [r4, 0x39]",
            "ldr r4, [r4, 0xc]",
            "cmp r3, 0",
            "beq 0x4439c",
            "ldr r0, [r7]",
            "bl fcn.000bf294",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "mov r1, r5",
            "mov r0, r6",
            "bl fcn.000bfa24",
            "add r1, sp, 0x170",
            "str r0, [r1, -8]!",
            "mov r2, 4",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "ldr r0, [r7]",
            "bl fcn.000bf2e0",
            "add r3, sp, 0x10",
            "ldm r3, {r2, r3}",
            "bl fcn.000bf8fc",
            "ldr r2, [r4, 0xc]",
            "cmp r0, 0",
            "mov r3, 0",
            "moveq r3, 1",
            "strb r3, [r2]",
            "b 0x440a8",
            "mov r0, r7",
            "add r1, sp, 0x10",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "b 0x440a8",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.000bf974",
            "and r0, r0, 0xff",
            "strb r0, [r7]",
            "b 0x441c4",
            "ldr r3, [0x000443f0]",
            "mov r2, r5",
            "add r5, sp, 0x1c",
            "mov r7, r2",
            "add r3, fp, r3",
            "mov r1, 1",
            "ldr r2, [0x000443e8]",
            "mov r0, r5",
            "str ip, [sp]",
            "str r6, [sp, 8]",
            "str r7, [sp, 0xc]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, r5",
            "bl rsym.strend",
            "b 0x4413c",
            "ldm r7, {r0, r1}",
            "bl fcn.000bf334",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym.__aeabi_d2lz",
            "b 0x44050",
            "ldrsh r0, [r7]",
            "bl fcn.000bf2b8",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "mov r0, r6",
            "mov r1, r5",
            "bl fcn.000bf974",
            "lsl r3, r0, 0x10",
            "asr r3, r3, 0x10",
            "lsr r2, r3, 8",
            "strb r2, [r7, 1]",
            "strb r3, [r7]",
            "b 0x44210",
            "ldr r0, [r7]",
            "bl fcn.000bf2b8",
            "mov r2, r0",
            "mov r3, r1",
            "b 0x44088",
            "mov r1, r5",
            "mov r0, r6",
            "bl fcn.000bf974",
            "asr r3, r0, 0x18",
            "asr r1, r0, 8",
            "asr r2, r0, 0x10",
            "strb r1, [r7, 1]",
            "strb r2, [r7, 2]",
            "strb r3, [r7, 3]",
            "strb r0, [r7]",
            "b 0x44268"
        ]
    },
    "rsym.set_zero_time": {
        "function_address": "0x0003eef0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb04]!"
        ]
    },
    "method.yaSSL::output_buffer.eof__": {
        "function_address": "0x0007ba20",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [r0]",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "cmp r4, r0",
            "movlo r0, 0",
            "movhs r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL13output_buffer12get_capacityEv": {
        "function_address": "0x0003f958",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x414]!"
        ]
    },
    "sym.yaDES_set_key": {
        "function_address": "0x000854f4",
        "instructions": [
            "mov r3, r0",
            "push {r4, lr}",
            "mov r0, r1",
            "mov r2, 8",
            "mov r1, r3",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d4d0": {
        "function_address": "0x0007d4d0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d514]",
            "ldr r3, [0x0007d518]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3SHA7SHAImplEEEvPT_",
            "ldr r3, [0x0007d51c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3SHA7SHAImplEEEvPT_": {
        "function_address": "0x0003e8b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf2c]!"
        ]
    },
    "sym.yaSSL::Integer::operator_yaSSL::Integer_const_": {
        "function_address": "0x0007db6c",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r1]",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer.DividedBy_unsigned_int__const": {
        "function_address": "0x000acc5c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "sub sp, sp, 8",
            "mov r5, r2",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, sp, 4",
            "mov r2, r6",
            "mov r3, r5",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt7Integer6DivideERjRS0_RKS0_j",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6DivideERjRS0_RKS0_j": {
        "function_address": "0x0003ed34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc2c]!"
        ]
    },
    "sym.my_sync_dir": {
        "function_address": "0x00059e8c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldrb r2, [r0]",
            "ldr r3, [0x00059ef8]",
            "cmp r2, 0",
            "add r3, pc, r3",
            "mov r4, r1",
            "ldreq r0, [0x00059efc]",
            "addeq r0, r3, r0",
            "mov r1, 0",
            "mov r2, r4",
            "bl rsym.my_open",
            "subs r6, r0, 0",
            "movlt r5, 1",
            "blt 0x59eec",
            "orr r1, r4, 0x20",
            "bl rsym.my_sync",
            "mov r1, r4",
            "cmp r0, 0",
            "mov r0, r6",
            "movne r5, 2",
            "moveq r5, 0",
            "bl rsym.my_close",
            "cmp r0, 0",
            "movne r5, 3",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.my_open": {
        "function_address": "0x0003e3e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x264]!"
        ]
    },
    "rsym.my_sync": {
        "function_address": "0x00040084",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf4c]!"
        ]
    },
    "rsym.my_close": {
        "function_address": "0x0003f28c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x89c]!"
        ]
    },
    "sym.TaoCrypt::HASHwithTransform::Final_unsigned_char_": {
        "function_address": "0x000a2654",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0]",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov fp, r1",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov sb, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov r8, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov r6, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [r4, 4]",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform9AddLengthEj",
            "ldr r2, [r4, 8]",
            "ldr r3, [r4, 4]",
            "ldr ip, [r4, 0xc]",
            "add r0, r3, 1",
            "lsr r1, r2, 0x1d",
            "ldr r7, [0x000a291c]",
            "add r1, r1, ip, lsl 3",
            "cmp r6, r0",
            "lsl r2, r2, 3",
            "add r5, r4, 0x30",
            "mvn ip, 0x7f",
            "strb ip, [r5, r3]",
            "add r7, pc, r7",
            "stm sp, {r1, r2}",
            "str r0, [r4, 4]",
            "blo 0xa278c",
            "rsb r2, r0, r6",
            "mov r1, 0",
            "add r0, r5, r0",
            "bl sym.imp.memset",
            "cmp sl, 0",
            "bne 0xa27dc",
            "add r1, sp, 4",
            "mov r2, 4",
            "add r0, r5, r6",
            "bl sym.imp.memcpy",
            "add r0, r6, 4",
            "mov r1, sp",
            "mov r2, 4",
            "add r0, r5, r0",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "add r1, r4, 0x10",
            "mov r0, fp",
            "mov r2, r8",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "rsb r2, r0, sb",
            "mov r1, 0",
            "add r0, r5, r0",
            "bl sym.imp.memset",
            "cmp sl, 0",
            "str sb, [r4, 4]",
            "bne 0xa28ac",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 0",
            "str r0, [r4, 4]",
            "rsb r2, r0, r6",
            "mov r1, 0",
            "add r0, r5, r0",
            "bl sym.imp.memset",
            "cmp sl, 0",
            "beq 0xa2724",
            "ands r3, sb, 3",
            "bne 0xa28f8",
            "lsrs sb, sb, 2",
            "beq 0xa2824",
            "mov r0, r3",
            "ldr r2, [r5, r3]",
            "add r0, r0, 1",
            "bic r1, r2, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r1, r1, 8",
            "orr r2, r1, r2, lsl 8",
            "ror r2, r2, 0x10",
            "cmp sb, r0",
            "str r2, [r5, r3]",
            "add r3, r3, 4",
            "bhi 0xa27f0",
            "mov r1, sp",
            "mov r2, 4",
            "add r0, r5, r6",
            "bl sym.imp.memcpy",
            "add r0, r6, 4",
            "add r1, sp, 4",
            "mov r2, 4",
            "add r0, r5, r0",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ands r3, r8, 3",
            "add r1, r4, 0x10",
            "bne 0xa28f8",
            "lsrs lr, r8, 2",
            "beq 0xa2760",
            "mov ip, r3",
            "ldr r2, [r1, r3]",
            "add ip, ip, 1",
            "bic r0, r2, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r0, r0, 8",
            "orr r2, r0, r2, lsl 8",
            "ror r2, r2, 0x10",
            "cmp lr, ip",
            "str r2, [r1, r3]",
            "add r3, r3, 4",
            "bhi 0xa2874",
            "b 0xa2760",
            "ands r3, sb, 3",
            "bne 0xa28f8",
            "lsrs ip, sb, 2",
            "beq 0xa27a8",
            "mov r0, r3",
            "ldr r2, [r5, r3]",
            "add r0, r0, 1",
            "bic r1, r2, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r1, r1, 8",
            "orr r2, r1, r2, lsl 8",
            "ror r2, r2, 0x10",
            "cmp ip, r0",
            "str r2, [r5, r3]",
            "add r3, r3, 4",
            "bhi 0xa28c0",
            "b 0xa27a8",
            "ldr r3, [0x000a2920]",
            "ldr r1, [0x000a2924]",
            "ldr r0, [0x000a2928]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x104",
            "ldr r2, [0x000a292c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt17HASHwithTransform9AddLengthEj": {
        "function_address": "0x0003d84c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa1c]!"
        ]
    },
    "sym.yaSSL::HMAC_RMD::get_digest_unsigned_char_": {
        "function_address": "0x0007cd9c",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE5FinalEPh": {
        "function_address": "0x00040828",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa34]!"
        ]
    },
    "sym.mysql_master_query": {
        "function_address": "0x00045cb4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.mysql_master_send_query",
            "cmp r0, 0",
            "movne r0, 1",
            "moveq r0, r4",
            "ldreq r3, [r4, 0x3b0]",
            "ldreq ip, [r3]",
            "moveq lr, pc",
            "bxeq ip"
        ]
    },
    "rsym.mysql_master_send_query": {
        "function_address": "0x000402b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdd4]!"
        ]
    },
    "sym.net_clear_error": {
        "function_address": "0x0007405c",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x00074094]",
            "ldr r2, [0x00074098]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "mov r1, 0",
            "strb r1, [r0, 0x5f]",
            "str r1, [r0, 0x58]",
            "add r0, r0, 0x25c",
            "ldr r1, [r2]",
            "add r0, r0, 3",
            "bl sym.imp.strcpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000a9790": {
        "function_address": "0x000a9790",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7Integer6NegateEv",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6NegateEv": {
        "function_address": "0x0003dbac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7dc]!"
        ]
    },
    "fcn.0008a9f8": {
        "function_address": "0x0008a9f8",
        "instructions": [
            "ldr r3, [0x0008aa2c]",
            "ldr r2, [0x0008aa30]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "mov r1, 0x24",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL13HandShakeBase10set_lengthEi": {
        "function_address": "0x0003f49c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x73c]!"
        ]
    },
    "sym.yaSSL_CTX_sess_accept": {
        "function_address": "0x00085bf0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv": {
        "function_address": "0x00040624",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb8c]!"
        ]
    },
    "sym.yaSSL::MD5::get_digest_unsigned_char_": {
        "function_address": "0x0007ddd4",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::RSA_Encryptor_TaoCrypt::RSA_BlockType1_.Encrypt_unsigned_char_const__unsigned_int__unsigned_char__TaoCrypt::RandomNumberGenerator_": {
        "function_address": "0x000bbee0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [r0]",
            "sub sp, sp, 0x3c",
            "mov r7, r0",
            "mov r0, r5",
            "mov r8, r2",
            "mov sb, r1",
            "mov fp, r3",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub r0, r0, 1",
            "lsr r0, r0, 3",
            "cmp r0, 0xa",
            "ldr r2, [0x000bc09c]",
            "movls r0, 0",
            "subhi r0, r0, 0xa",
            "cmp r8, r0",
            "add r2, pc, r2",
            "bhi 0xbc078",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "add ip, r0, 6",
            "lsr ip, ip, 3",
            "cmp ip, 0",
            "str ip, [sp, 0x2c]",
            "bne 0xbc064",
            "add r0, sp, 0x38",
            "ldr r6, [r0, -0xc]!",
            "mov r4, 0",
            "mov r1, ip",
            "mov r3, r6",
            "mov r2, r6",
            "add r0, r0, 8",
            "str ip, [sp, 0x30]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r6",
            "mov r1, r4",
            "mov sl, r0",
            "str r6, [sp, 0x2c]",
            "str r0, [sp, 0x30]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub ip, r0, 1",
            "str ip, [sp]",
            "ldr ip, [sp, 0x60]",
            "mov r3, sl",
            "mov r1, sb",
            "mov r2, r8",
            "add r0, r7, 4",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt14RSA_BlockType13PadEPKhjPhjRNS_21RandomNumberGeneratorE",
            "ldr r8, [r7]",
            "add r7, sp, 0x1c",
            "mov r3, r4",
            "ldr r1, [sp, 0x30]",
            "ldr r2, [sp, 0x2c]",
            "add r6, sp, 0xc",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, r8",
            "mov r2, r7",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt13RSA_PublicKey13ApplyFunctionERKNS_7IntegerE",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r3, r4",
            "mov r2, r0",
            "mov r1, fp",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr r5, [sp, 0x10]",
            "ldr r2, [sp, 0xc]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x20]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x30]",
            "mov r1, r4",
            "mov r0, r5",
            "ldr r2, [sp, 0x2c]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, ip",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "b 0xbbf44",
            "ldr r3, [0x000bc0a0]",
            "ldr r1, [0x000bc0a4]",
            "ldr r0, [0x000bc0a8]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x2f4",
            "mov r2, 0xb5",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer8BitCountEv": {
        "function_address": "0x0003d474",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcac]!"
        ]
    },
    "rsym._ZNK8TaoCrypt14RSA_BlockType13PadEPKhjPhjRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003fe74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xac]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE": {
        "function_address": "0x0003d330",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd84]!"
        ]
    },
    "rsym._ZNK8TaoCrypt13RSA_PublicKey13ApplyFunctionERKNS_7IntegerE": {
        "function_address": "0x0003e02c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4dc]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer9ByteCountEv": {
        "function_address": "0x0003d1e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe64]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE": {
        "function_address": "0x0003d93c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x97c]!"
        ]
    },
    "rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_": {
        "function_address": "0x0004054c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc1c]!"
        ]
    },
    "rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_": {
        "function_address": "0x00040954",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x96c]!"
        ]
    },
    "sym.net_real_write": {
        "function_address": "0x0007aae0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0]",
            "sub sp, sp, 0x14",
            "mov r6, r0",
            "str r2, [sp, 4]",
            "mov r0, r3",
            "mov r8, r1",
            "ldr ip, [r3, 0x74]",
            "mov lr, pc",
            "bx ip",
            "ldrb r3, [r6, 0x5c]",
            "mov fp, r0",
            "cmp r3, 2",
            "mvneq r4, 0",
            "beq 0x7ac24",
            "ldrb r3, [r6, 0x50]",
            "mov r5, 2",
            "cmp r3, 0",
            "strb r5, [r6, 0x4c]",
            "ldreq r5, [sp, 4]",
            "bne 0x7ace0",
            "add r5, r8, r5",
            "cmp r8, r5",
            "moveq r4, 0",
            "moveq r7, r4",
            "beq 0x7ac08",
            "mov r7, 0",
            "mov r4, r8",
            "mov sl, r7",
            "add sb, sp, 0xc",
            "b 0x7ab64",
            "cmp r5, r4",
            "beq 0x7ac04",
            "ldr r3, [r6]",
            "mov r1, r4",
            "mov r0, r3",
            "rsb r2, r4, r5",
            "ldr ip, [r3, 0x6c]",
            "mov lr, pc",
            "bx ip",
            "subs r3, r0, 0",
            "addgt r4, r4, r3",
            "bgt 0x7ab5c",
            "ldr r2, [r6]",
            "str r3, [sp]",
            "mov r0, r2",
            "ldr ip, [r2, 0x88]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp]",
            "subs r1, r0, 0",
            "movne r1, 1",
            "cmp r3, 0",
            "movne r3, r1",
            "orreq r3, r1, 1",
            "cmp r3, 0",
            "mov r2, r0",
            "beq 0x7ac34",
            "cmp r7, 0",
            "bne 0x7ac34",
            "ldr r3, [r6]",
            "mov r1, 1",
            "mov r2, sb",
            "mov r0, r3",
            "ldr ip, [r3, 0x70]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "blt 0x7ada0",
            "cmp r5, r4",
            "mov r7, 1",
            "mov sl, 0",
            "bne 0x7ab64",
            "mov r4, 0",
            "ldrb r3, [r6, 0x50]",
            "cmp r3, 0",
            "bne 0x7acb0",
            "cmp r7, 0",
            "bne 0x7acc0",
            "mov r3, 0",
            "strb r3, [r6, 0x4c]",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "tst r1, r7",
            "beq 0x7ac58",
            "ldr r1, [r6, 0x40]",
            "add r3, sl, 1",
            "cmp r1, sl",
            "movhi sl, r3",
            "movhi r7, 1",
            "bhi 0x7ab5c",
            "mov sl, r3",
            "ldr r3, [r6]",
            "str r2, [sp]",
            "mov r0, r3",
            "ldr ip, [r3, 0x64]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 4",
            "ldr r2, [sp]",
            "beq 0x7ab5c",
            "ldr r3, [0x0007adec]",
            "cmp r2, 0",
            "moveq r2, r3",
            "mov r3, 2",
            "ldr r1, [0x0007adf0]",
            "strb r3, [r6, 0x5c]",
            "ldrb r3, [r6, 0x50]",
            "movne r2, r1",
            "subs r4, r5, r4",
            "movne r4, 1",
            "cmp r3, 0",
            "str r2, [r6, 0x58]",
            "beq 0x7ac14",
            "mov r0, r8",
            "bl rsym.my_no_flags_free",
            "cmp r7, 0",
            "beq 0x7ac1c",
            "ldr r3, [r6]",
            "mov r1, fp",
            "mov r0, r3",
            "add r2, sp, 0xc",
            "ldr ip, [r3, 0x70]",
            "mov lr, pc",
            "bx ip",
            "b 0x7ac1c",
            "ldr r0, [sp, 4]",
            "mov r1, 0x10",
            "add r0, r0, 7",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "beq 0x7ad88",
            "add r5, sp, 0x10",
            "ldr r2, [r5, -0xc]!",
            "add r7, r4, 7",
            "mov r1, r8",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "mov r1, r5",
            "mov r0, r7",
            "add r2, sp, 0xc",
            "bl rsym.my_compress",
            "cmp r0, 0",
            "ldrbeq r3, [sp, 0xc]",
            "movne r3, 0",
            "strne r3, [sp, 0xc]",
            "strb r3, [r4, 4]",
            "ldr r3, [sp, 0xc]",
            "mov r8, r4",
            "lsr r3, r3, 8",
            "strb r3, [r4, 5]",
            "ldrh r3, [sp, 0xe]",
            "strb r3, [r4, 6]",
            "ldr r3, [sp, 4]",
            "strb r3, [r4]",
            "ldr r3, [sp, 4]",
            "lsr r3, r3, 8",
            "strb r3, [r4, 1]",
            "ldrh r3, [sp, 6]",
            "strb r3, [r4, 2]",
            "ldr r3, [r6, 0x34]",
            "strb r3, [r4, 3]",
            "ldr r5, [sp, 4]",
            "add r3, r3, 1",
            "add r5, r5, 7",
            "str r3, [r6, 0x34]",
            "str r5, [sp, 4]",
            "b 0x7ab34",
            "ldr r3, [0x0007adf4]",
            "strb r4, [r6, 0x4c]",
            "strb r5, [r6, 0x5c]",
            "str r3, [r6, 0x58]",
            "mov r4, 1",
            "b 0x7ac24",
            "ldr r3, [r6]",
            "mov r0, r3",
            "ldr ip, [r3, 0x88]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x7adcc",
            "ldr r3, [r6, 0x40]",
            "cmp sl, r3",
            "addlo sl, sl, 1",
            "blo 0x7abd0",
            "mov r3, 2",
            "strb r3, [r6, 0x5c]",
            "ldr r3, [0x0007adf8]",
            "subs r4, r5, r4",
            "movne r4, 1",
            "str r3, [r6, 0x58]",
            "mov r7, 1",
            "b 0x7ac08"
        ]
    },
    "rsym.my_malloc": {
        "function_address": "0x0003fe38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd4]!"
        ]
    },
    "rsym.my_compress": {
        "function_address": "0x0003fe5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbc]!"
        ]
    },
    "sym.yaSSL::SHA::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dda4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::output_buffer.output_buffer_unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007be40",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "str r0, [r4]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "stmib r4, {r0, r5}",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZnajN5yaSSL5new_tE": {
        "function_address": "0x0003dc0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x79c]!"
        ]
    },
    "rsym._ZN5yaSSL13output_buffer5writeEPKhj": {
        "function_address": "0x0003d504",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc4c]!"
        ]
    },
    "sym.TERMINATE": {
        "function_address": "0x0004b470",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x0004b5f4]",
            "ldr sb, [0x0004b5f8]",
            "add r6, pc, r6",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "ldr r0, [r6, sb]",
            "mov fp, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x0004b5fc]",
            "ldr r3, [r6, r3]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x4b4cc",
            "cmp r5, 0",
            "beq 0x4b4cc",
            "ldr r2, [0x0004b600]",
            "mov r0, r5",
            "add r2, r6, r2",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "mov r0, r5",
            "bl sym.imp.fflush",
            "ldr r3, [0x0004b604]",
            "ldr r3, [r6, r3]",
            "ldr r4, [r3]",
            "cmp r4, 0",
            "beq 0x4b580",
            "cmp r5, 0",
            "beq 0x4b5d8",
            "ldr r3, [0x0004b608]",
            "ldr r2, [0x0004b60c]",
            "ldr r3, [r6, r3]",
            "add r2, r6, r2",
            "ldr r3, [r3]",
            "mov r1, 1",
            "mov r0, r5",
            "bl sym.imp.__fprintf_chk",
            "mov r0, r5",
            "bl sym.imp.fflush",
            "ldr r3, [0x0004b610]",
            "ldr r8, [0x0004b614]",
            "ldr sl, [0x0004b618]",
            "ldr r7, [r6, r3]",
            "add r8, r6, r8",
            "add sl, r6, sl",
            "ldr r2, [r7]",
            "ldr r3, [r4, 0xc]",
            "add r2, r2, 0x18",
            "add r2, r4, r2",
            "str r2, [sp]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 1",
            "str r2, [sp, 4]",
            "ldr ip, [r4, 8]",
            "mov r2, r8",
            "mov r0, r5",
            "str ip, [sp, 8]",
            "bl sym.imp.__fprintf_chk",
            "mov r1, 1",
            "mov r2, sl",
            "mov r0, r5",
            "bl sym.imp.__fprintf_chk",
            "mov r0, r5",
            "bl sym.imp.fflush",
            "ldr r4, [r4]",
            "cmp r4, 0",
            "bne 0x4b528",
            "cmp fp, 0",
            "cmpne r5, 0",
            "beq 0x4b5c4",
            "ldr r3, [0x0004b61c]",
            "ldr r2, [0x0004b620]",
            "ldr r3, [r6, r3]",
            "add r2, r6, r2",
            "ldr r3, [r3]",
            "mov r0, r5",
            "add ip, r3, 0x3fc",
            "add ip, ip, 3",
            "lsr ip, ip, 0xa",
            "mov r1, 1",
            "str ip, [sp]",
            "bl sym.imp.__fprintf_chk",
            "mov r0, r5",
            "bl sym.imp.fflush",
            "ldr r0, [r6, sb]",
            "bl sym.imp.pthread_mutex_unlock",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r4, [r4]",
            "cmp r4, 0",
            "beq 0x4b5c4",
            "ldr r4, [r4]",
            "cmp r4, 0",
            "bne 0x4b5d8",
            "b 0x4b5c4"
        ]
    },
    "rsym.my_pthread_fastmutex_lock": {
        "function_address": "0x000405a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbe4]!"
        ]
    },
    "sym.imp.__fprintf_chk": {
        "function_address": "0x0003f6c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5cc]!"
        ]
    },
    "sym.imp.fflush": {
        "function_address": "0x0003e44c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x21c]!"
        ]
    },
    "sym.imp.pthread_mutex_unlock": {
        "function_address": "0x0003e338",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2d4]!"
        ]
    },
    "sym.yaSSL::GetSessions__": {
        "function_address": "0x00093a64",
        "instructions": [
            "ldr r3, [0x00093acc]",
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00093ad0]",
            "add r3, pc, r3",
            "add r4, r3, r4",
            "ldr r5, [r4, 4]",
            "cmp r5, 0",
            "beq 0x93a90",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x2c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r6, 0",
            "mov r5, r0",
            "str r6, [r0]",
            "str r6, [r0, 4]",
            "str r6, [r0, 8]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolC1Ev",
            "add r0, r5, 0x10",
            "bl rsym._ZN5yaSSL5MutexC1Ev",
            "str r6, [r5, 0x28]",
            "str r5, [r4, 4]",
            "b 0x93a84"
        ]
    },
    "rsym._ZN5yaSSL10RandomPoolC1Ev": {
        "function_address": "0x0003fba4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x28c]!"
        ]
    },
    "rsym._ZN5yaSSL5MutexC1Ev": {
        "function_address": "0x0003db70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x804]!"
        ]
    },
    "sym.resolve_collation": {
        "function_address": "0x00051de0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r1, 0",
            "mov r5, r2",
            "bl rsym.get_charset_by_name",
            "subs r3, r0, 0",
            "moveq r3, r4",
            "movne r0, 0",
            "moveq r0, 1",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.get_charset_by_name": {
        "function_address": "0x0003d21c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe3c]!"
        ]
    },
    "sym.mysql_manager_close": {
        "function_address": "0x00048190",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x26c]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "bl rsym.net_end",
            "ldrb r3, [r4, 0x294]",
            "cmp r3, 0",
            "movne r0, r4",
            "blne rsym.my_no_flags_free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.net_end": {
        "function_address": "0x000401ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe5c]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Subtract_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad3cc",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer5MinusERKS0_": {
        "function_address": "0x0003fff4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfac]!"
        ]
    },
    "sym.cli_read_prepare_result": {
        "function_address": "0x00044a24",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r0, 0x3a8]",
            "sub sp, sp, 8",
            "mov r0, r7",
            "mov r4, r1",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "beq 0x44b70",
            "ldr r3, [r7, 0x10]",
            "mov r2, 0",
            "str r2, [r7, 0x2f4]",
            "ldrb r2, [r3, 3]",
            "ldrb r1, [r3, 2]",
            "ldrb ip, [r3, 1]",
            "lsl r2, r2, 0x10",
            "add r2, r2, r1, lsl 8",
            "ldrb r1, [r3, 4]",
            "add r2, r2, ip",
            "add r2, r2, r1, lsl 24",
            "str r2, [r4, 0x90]",
            "ldrb r5, [r3, 8]",
            "ldrb r2, [r3, 7]",
            "cmp r0, 0xb",
            "add r5, r2, r5, lsl 8",
            "lsl r5, r5, 0x10",
            "lsr r5, r5, 0x10",
            "ldrb r6, [r3, 5]",
            "ldrb r8, [r3, 6]",
            "bhi 0x44b20",
            "cmp r5, 0",
            "bne 0x44b44",
            "add r6, r6, r8, lsl 8",
            "lsl r6, r6, 0x10",
            "lsrs r6, r6, 0x10",
            "beq 0x44b08",
            "ldr r3, [r7, 0x2ec]",
            "mov r0, r7",
            "tst r3, 2",
            "orreq r3, r3, 1",
            "streq r3, [r7, 0x2ec]",
            "mov r1, 0",
            "ldr r3, [r7, 0x3b0]",
            "mov r2, 7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x44b70",
            "ldr ip, [r7, 0x2e0]",
            "mov r1, r4",
            "mov r2, r6",
            "mov r3, 0",
            "str ip, [sp]",
            "bl rsym.unpack_fields",
            "cmp r0, 0",
            "str r0, [r4, 0x38]",
            "beq 0x44b70",
            "str r5, [r4, 0xa4]",
            "str r6, [r4, 0xa8]",
            "mov r0, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r3, r3, 9",
            "ldrb r2, [r3, 1]",
            "ldrb r3, [r3, 2]",
            "cmp r5, 0",
            "add r3, r2, r3, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "str r3, [r7, 0x2f4]",
            "beq 0x44aa0",
            "ldr r3, [r7, 0x3b0]",
            "mov r0, r7",
            "mov r1, 0",
            "mov r2, 7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x44b70",
            "bl rsym.free_rows",
            "b 0x44aa0",
            "mov r0, 1",
            "b 0x44b14"
        ]
    },
    "rsym.cli_safe_read": {
        "function_address": "0x0003cbec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x25c]!"
        ]
    },
    "rsym.unpack_fields": {
        "function_address": "0x0004075c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xabc]!"
        ]
    },
    "rsym.free_rows": {
        "function_address": "0x0003ebe4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd0c]!"
        ]
    },
    "method.mySTL::list_yaSSL::SSL_SESSION_::iterator_mySTL::find_if_mySTL::list_yaSSL::SSL_SESSION_::iterator__yaSSL::yassl_int_cpp_local2.sess_match__mySTL::list_yaSSL::SSL_SESSION_::iterator__mySTL::list_yaSSL::SSL_SESSION_::iterator__yaSSL::yassl_int_c": {
        "function_address": "0x00095dd4",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "mov r5, r2",
            "beq 0x95e20",
            "mov r4, r0",
            "ldr r0, [r4, 8]",
            "bl rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv",
            "mov r1, r5",
            "mov r2, 0x20",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x95e14",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r4, [r4, 4]",
            "cmp r4, r6",
            "bne 0x95dec",
            "mov r4, r6",
            "b 0x95e08"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv": {
        "function_address": "0x0003ee84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb4c]!"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x0003cfe8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfb4]!"
        ]
    },
    "sym.mysql_sha1_input": {
        "function_address": "0x000573e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r5, r2, 0",
            "mov r4, r0",
            "mov r7, r1",
            "beq 0x57464",
            "mov r6, 0",
            "mov r8, 8",
            "mov sb, 0",
            "b 0x57414",
            "cmp r6, r5",
            "beq 0x57464",
            "ldrh r3, [r4, 0x24]",
            "ldrb r2, [r7, r6]",
            "add r1, r3, 1",
            "lsl r3, r3, 0x10",
            "add r3, r4, r3, asr 16",
            "strb r2, [r3, 0x26]",
            "lsl r1, r1, 0x10",
            "ldm r4, {r2, r3}",
            "lsr r1, r1, 0x10",
            "adds r2, r2, r8",
            "adc r3, r3, sb",
            "cmp r1, 0x40",
            "add r6, r6, 1",
            "stm r4, {r2, r3}",
            "strh r1, [r4, 0x24]",
            "bne 0x5740c",
            "mov r0, r4",
            "bl fcn.00056e50",
            "cmp r6, r5",
            "bne 0x57414",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "fcn.00056e50": {
        "function_address": "0x00056e50",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp}",
            "ldrb r3, [r0, 0x3a]",
            "sub sp, sp, 0x188",
            "ldrb sb, [r0, 0x26]",
            "ldrb r8, [r0, 0x2a]",
            "ldrb r6, [r0, 0x2e]",
            "ldrb r5, [r0, 0x31]",
            "ldrb r4, [r0, 0x32]",
            "ldrb ip, [r0, 0x35]",
            "ldrb r1, [r0, 0x36]",
            "ldrb sl, [r0, 0x29]",
            "ldrb r7, [r0, 0x2d]",
            "ldrb r2, [r0, 0x39]",
            "str r3, [sp, 0xc]",
            "ldrb r3, [r0, 0x3e]",
            "ldrb fp, [r0, 0x3d]",
            "str r3, [sp, 0x1c]",
            "ldrb r3, [r0, 0x41]",
            "orr sl, sl, sb, lsl 24",
            "str r3, [sp, 0x28]",
            "ldrb r3, [r0, 0x27]",
            "orr r7, r7, r8, lsl 24",
            "str r3, [sp, 0x14]",
            "ldrb r3, [r0, 0x2b]",
            "orr r2, r2, r1, lsl 24",
            "str r3, [sp, 0x20]",
            "ldrb r3, [r0, 0x2f]",
            "str r3, [sp, 0x30]",
            "ldrb r3, [r0, 0x33]",
            "str r3, [sp, 0x38]",
            "ldrb r3, [r0, 0x37]",
            "str r3, [sp, 0x24]",
            "ldrb r3, [r0, 0x3b]",
            "str r3, [sp, 0x40]",
            "ldrb r3, [r0, 0x3f]",
            "str sl, [sp, 0x10]",
            "str r3, [sp, 0x44]",
            "str r7, [sp, 0x18]",
            "orr r7, ip, r4, lsl 24",
            "ldr r4, [sp, 0xc]",
            "str r2, [sp, 0x3c]",
            "orr fp, fp, r4, lsl 24",
            "str fp, [sp, 8]",
            "ldrb sl, [r0, 0x28]",
            "orr r3, r5, r6, lsl 24",
            "str sl, [sp, 4]",
            "ldrb fp, [r0, 0x2c]",
            "ldr r5, [sp, 0x28]",
            "str fp, [sp, 0xc]",
            "ldrb r1, [r0, 0x3c]",
            "ldr r6, [sp, 0x1c]",
            "ldrb ip, [r0, 0x34]",
            "ldrb r2, [r0, 0x38]",
            "orr sb, r5, r6, lsl 24",
            "ldr sl, [sp, 0x14]",
            "ldrb r5, [r0, 0x30]",
            "ldr r6, [sp, 0x10]",
            "str r1, [sp, 0x1c]",
            "ldr fp, [sp, 0x18]",
            "ldr r1, [sp, 0x20]",
            "ldrb r4, [r0, 0x40]",
            "orr r8, r6, sl, lsl 16",
            "orr r6, fp, r1, lsl 16",
            "ldr sl, [sp, 0x30]",
            "ldr fp, [sp, 0x38]",
            "str r4, [sp, 0x28]",
            "orr r1, r7, fp, lsl 16",
            "orr r4, r3, sl, lsl 16",
            "ldr r7, [sp, 0x24]",
            "ldr r3, [sp, 0x3c]",
            "ldr sl, [sp, 8]",
            "orr fp, r3, r7, lsl 16",
            "ldr r7, [sp, 0x40]",
            "orr r1, r1, ip, lsl 8",
            "orr r3, sl, r7, lsl 16",
            "ldr sl, [sp, 0x44]",
            "ldr r7, [sp, 4]",
            "orr r2, fp, r2, lsl 8",
            "ldr ip, [sp, 0x28]",
            "ldr fp, [sp, 0x1c]",
            "orr sb, sb, sl, lsl 16",
            "ldr sl, [sp, 0xc]",
            "orr r8, r8, r7, lsl 8",
            "orr r6, r6, sl, lsl 8",
            "orr r4, r4, r5, lsl 8",
            "orr r3, r3, fp, lsl 8",
            "orr sb, sb, ip, lsl 8",
            "str r8, [sp, 0x48]",
            "str r6, [sp, 0x4c]",
            "str r4, [sp, 0x50]",
            "str r1, [sp, 0x54]",
            "str r2, [sp, 0x58]",
            "str r3, [sp, 0x5c]",
            "str sb, [sp, 0x60]",
            "ldrb r3, [r0, 0x56]",
            "ldrb sb, [r0, 0x42]",
            "ldrb r8, [r0, 0x46]",
            "ldrb r7, [r0, 0x49]",
            "ldrb r6, [r0, 0x4a]",
            "ldrb r5, [r0, 0x4d]",
            "ldrb r4, [r0, 0x4e]",
            "ldrb r1, [r0, 0x52]",
            "ldrb sl, [r0, 0x45]",
            "ldrb ip, [r0, 0x51]",
            "ldrb r2, [r0, 0x55]",
            "str r3, [sp, 0x44]",
            "ldrb r3, [r0, 0x5a]",
            "ldrb fp, [r0, 0x59]",
            "str r3, [sp, 0x24]",
            "ldrb r3, [r0, 0x5d]",
            "orr ip, ip, r4, lsl 24",
            "str r3, [sp, 0x1c]",
            "ldrb r3, [r0, 0x43]",
            "orr sl, sl, sb, lsl 24",
            "str r3, [sp, 0x14]",
            "ldrb r3, [r0, 0x47]",
            "orr r2, r2, r1, lsl 24",
            "str r3, [sp, 0x20]",
            "ldrb r3, [r0, 0x4b]",
            "str r3, [sp, 0x30]",
            "ldrb r3, [r0, 0x4f]",
            "str r3, [sp, 0x38]",
            "ldrb r3, [r0, 0x53]",
            "str r3, [sp, 0x3c]",
            "ldrb r3, [r0, 0x57]",
            "str r3, [sp, 0x40]",
            "ldrb r3, [r0, 0x5b]",
            "str r3, [sp, 0x28]",
            "ldr r4, [sp, 0x44]",
            "str sl, [sp, 0x10]",
            "orr fp, fp, r4, lsl 24",
            "str ip, [sp, 0x34]",
            "str fp, [sp, 0xc]",
            "orr sl, r7, r8, lsl 24",
            "ldrb r7, [r0, 0x44]",
            "orr r3, r5, r6, lsl 24",
            "str r7, [sp, 0x44]",
            "ldr r5, [sp, 0x1c]",
            "ldr r6, [sp, 0x24]",
            "ldrb fp, [r0, 0x48]",
            "orr sb, r5, r6, lsl 24",
            "ldr r7, [sp, 0x14]",
            "ldr r6, [sp, 0x10]",
            "str fp, [sp, 8]",
            "ldrb ip, [r0, 0x54]",
            "orr r8, r6, r7, lsl 16",
            "ldr fp, [sp, 0x20]",
            "ldr r7, [sp, 0x30]",
            "ldrb r5, [r0, 0x4c]",
            "ldrb r1, [r0, 0x50]",
            "orr r6, sl, fp, lsl 16",
            "str ip, [sp, 0x24]",
            "ldr sl, [sp, 0x34]",
            "orr ip, r3, r7, lsl 16",
            "ldr r3, [sp, 0x38]",
            "ldr r7, [sp, 0x3c]",
            "orr fp, sl, r3, lsl 16",
            "orr r2, r2, r7, lsl 16",
            "ldr sl, [sp, 0xc]",
            "ldr r7, [sp, 0x40]",
            "ldrb r4, [r0, 0x58]",
            "orr r3, sl, r7, lsl 16",
            "ldr sl, [sp, 0x28]",
            "str r4, [sp, 0x1c]",
            "ldrb r4, [r0, 0x5c]",
            "orr sb, sb, sl, lsl 16",
            "orr ip, ip, r5, lsl 8",
            "ldr sl, [sp, 8]",
            "orr r1, fp, r1, lsl 8",
            "ldr r5, [sp, 0x1c]",
            "ldr r7, [sp, 0x44]",
            "ldr fp, [sp, 0x24]",
            "orr r6, r6, sl, lsl 8",
            "orr r3, r3, r5, lsl 8",
            "orr r4, sb, r4, lsl 8",
            "orr r2, r2, fp, lsl 8",
            "orr r8, r8, r7, lsl 8",
            "str r6, [sp, 0x68]",
            "str r8, [sp, 0x64]",
            "str ip, [sp, 0x6c]",
            "str r1, [sp, 0x70]",
            "str r2, [sp, 0x74]",
            "str r3, [sp, 0x78]",
            "str r4, [sp, 0x7c]",
            "ldrb ip, [r0, 0x5e]",
            "ldrb r1, [r0, 0x62]",
            "ldrb r2, [r0, 0x61]",
            "ldrb r3, [r0, 0x65]",
            "ldrb r6, [r0, 0x5f]",
            "ldrb r5, [r0, 0x63]",
            "orr r2, r2, ip, lsl 24",
            "orr r3, r3, r1, lsl 24",
            "ldrb ip, [r0, 0x60]",
            "ldrb r1, [r0, 0x64]",
            "orr r3, r3, r5, lsl 16",
            "orr r2, r2, r6, lsl 16",
            "add sl, sp, 0x48",
            "orr r1, r3, r1, lsl 8",
            "orr ip, r2, ip, lsl 8",
            "str ip, [sp, 0x80]",
            "str r1, [sp, 0x84]",
            "add r3, sl, 0x20",
            "add sb, sl, 0x11c",
            "str sl, [sp, 0x10]",
            "str r0, [sp, 0x14]",
            "str sl, [sp, 0x18]",
            "ldr r2, [r3, -0x18]",
            "ldr r5, [r3]",
            "ldr sl, [r3, -0x14]",
            "ldr r8, [r3, 4]",
            "ldr r7, [r3, -0x10]",
            "ldr r6, [r3, 8]",
            "ldr r0, [r3, -0x20]",
            "ldr fp, [r3, -0x1c]",
            "eor r8, sl, r8",
            "eor r6, r7, r6",
            "eor r5, r2, r5",
            "eor r5, r5, r0",
            "eor r8, r8, fp",
            "eor r6, r6, r2",
            "eor r4, r5, r4",
            "eor ip, ip, r8",
            "eor r1, r1, r6",
            "ror r4, r4, 0x1f",
            "ror ip, ip, 0x1f",
            "ror r1, r1, 0x1f",
            "str r4, [r3, 0x20]",
            "str ip, [r3, 0x24]",
            "str r1, [r3, 0x28]",
            "add r3, r3, 0xc",
            "cmp r3, sb",
            "bne 0x57188",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [sp, 0x178]",
            "ldr r6, [r0, 0xc]",
            "ldr fp, [r0, 8]",
            "str r6, [sp, 0x20]",
            "ldr r7, [r0, 0x10]",
            "ldr r1, [sp, 0x164]",
            "ldr r2, [sp, 0x10]",
            "eor r1, r1, r3",
            "str r7, [sp, 0x10]",
            "ldr r3, [sp, 0x14c]",
            "ldr ip, [r0, 0x14]",
            "eor r1, r1, r3",
            "ldr r3, [sp, 0x144]",
            "str ip, [sp, 0x14]",
            "eor r3, r1, r3",
            "ldr r1, [r0, 0x18]",
            "ror r3, r3, 0x1f",
            "ldr sl, [sp, 0x18]",
            "str r3, [sp, 0x184]",
            "str r1, [sp, 0x18]",
            "mov ip, r6",
            "mov r8, r7",
            "ldr sb, [sp, 0x14]",
            "mov r4, r1",
            "mov r5, fp",
            "mov r3, 0",
            "b 0x5726c",
            "mov sb, r8",
            "mov r5, r6",
            "mov r8, r1",
            "ldr r6, [sl, r3]",
            "ldr r1, [0x000573d8]",
            "add r3, r3, 4",
            "add r1, r6, r1",
            "add r1, r1, r4",
            "bic r6, sb, ip",
            "and r4, r8, ip",
            "orr r6, r6, r4",
            "add r1, r1, r5, ror 27",
            "cmp r3, 0x50",
            "add r6, r1, r6",
            "mov r4, sb",
            "ror r1, ip, 2",
            "mov ip, r5",
            "bne 0x57260",
            "add r4, sl, 0x50",
            "mov ip, sl",
            "b 0x572c0",
            "mov r8, r1",
            "mov r6, r7",
            "mov r1, r3",
            "ldr r7, [ip, 0x50]",
            "ldr r3, [0x000573dc]",
            "add ip, ip, 4",
            "add r3, r7, r3",
            "add r3, r3, sb",
            "eor r7, r1, r5",
            "add r3, r3, r6, ror 27",
            "eor r7, r7, r8",
            "cmp ip, r4",
            "add r7, r3, r7",
            "mov sb, r8",
            "ror r3, r5, 2",
            "mov r5, r6",
            "bne 0x572b4",
            "b 0x57308",
            "mov r1, r3",
            "mov r7, ip",
            "mov r3, sb",
            "ldr sb, [sl, 0xa0]",
            "ldr ip, [0x000573e0]",
            "orr r5, r1, r3",
            "add ip, sb, ip",
            "add ip, ip, r8",
            "and r5, r5, r6",
            "and r8, r1, r3",
            "add sl, sl, 4",
            "orr r5, r5, r8",
            "add ip, ip, r7, ror 27",
            "cmp sl, r4",
            "ror sb, r6, 2",
            "add ip, ip, r5",
            "mov r8, r1",
            "mov r6, r7",
            "bne 0x572fc",
            "b 0x57358",
            "mov r3, sb",
            "mov ip, r6",
            "mov sb, r5",
            "ldr r6, [r2, 0xf0]",
            "ldr r5, [0x000573e4]",
            "add r2, r2, 4",
            "add r5, r6, r5",
            "add r1, r5, r1",
            "eor r6, sb, r7",
            "add r1, r1, ip, ror 27",
            "eor r6, r6, r3",
            "cmp r4, r2",
            "add r6, r1, r6",
            "ror r5, r7, 2",
            "mov r1, r3",
            "mov r7, ip",
            "bne 0x5734c",
            "ldr r2, [sp, 0x20]",
            "add r4, sp, 0x10",
            "ldm r4, {r4, r7, sl}",
            "add r6, r6, fp",
            "add ip, r2, ip",
            "add r5, r4, r5",
            "add sb, r7, sb",
            "add r3, sl, r3",
            "mov fp, 0",
            "str r6, [r0, 8]",
            "str ip, [r0, 0xc]",
            "str r5, [r0, 0x10]",
            "str sb, [r0, 0x14]",
            "str r3, [r0, 0x18]",
            "strh fp, [r0, 0x24]",
            "add sp, sp, 0x188",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp}",
            "bx lr"
        ]
    },
    "sym.unpack_fields": {
        "function_address": "0x00075498",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r8, r2, r2, lsl 2",
            "add r2, r2, r8, lsl 2",
            "sub sp, sp, 0x3c",
            "lsl r8, r2, 2",
            "mov r4, r1",
            "str r0, [sp, 0xc]",
            "mov r1, r8",
            "mov r0, r4",
            "mov r5, r3",
            "ldr r7, [sp, 0x60]",
            "bl rsym.alloc_root",
            "ldr r6, [0x00075950]",
            "subs r2, r0, 0",
            "str r2, [sp, 8]",
            "add r6, pc, r6",
            "beq 0x75708",
            "mov r2, r8",
            "mov r1, 0",
            "bl sym.imp.memset",
            "ands sl, r7, 0x200",
            "beq 0x75720",
            "ldr r3, [sp, 0xc]",
            "ldr r8, [r3]",
            "cmp r8, 0",
            "beq 0x75708",
            "ldr r6, [sp, 8]",
            "mov sl, 0",
            "add r7, sp, 0x14",
            "cmp r5, 0",
            "ldr r1, [r8, 4]",
            "movne sb, 0x24",
            "moveq sb, 0x20",
            "add sb, r1, sb",
            "cmp r1, sb",
            "beq 0x75584",
            "mov r3, 0",
            "mov lr, r3",
            "mov r0, r3",
            "b 0x75540",
            "mov lr, ip",
            "mov r0, r2",
            "ldr r2, [r1, r3]",
            "add ip, r7, r3",
            "cmp r2, 0",
            "streq r2, [r7, r3]",
            "moveq ip, lr",
            "moveq r2, r0",
            "beq 0x75570",
            "cmp r0, 0",
            "subne r2, r2, 1",
            "rsbne r2, r0, r2",
            "strne r2, [lr]",
            "ldrne r2, [r1, r3]",
            "add r3, r3, 4",
            "add r0, r1, r3",
            "cmp sb, r0",
            "bne 0x75538",
            "ldr sb, [r8, 4]",
            "ldr r1, [sb]",
            "ldr r2, [sp, 0x14]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6, 0x14]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 0x18]",
            "ldr r1, [r3, 4]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6, 0x10]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [r3, 8]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6, 8]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [r3, 0xc]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6, 0xc]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 0x24]",
            "ldr r1, [r3, 0x10]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 0x28]",
            "ldr r1, [r3, 0x14]",
            "mov r0, r4",
            "bl rsym.strmake_root",
            "str r0, [r6, 4]",
            "ldr r3, [sp, 0x14]",
            "str r3, [r6, 0x38]",
            "ldr r3, [sp, 0x18]",
            "str r3, [r6, 0x34]",
            "ldr r3, [sp, 0x1c]",
            "str r3, [r6, 0x2c]",
            "ldr r3, [sp, 0x20]",
            "str r3, [r6, 0x30]",
            "ldr r3, [sp, 0x24]",
            "str r3, [r6, 0x24]",
            "ldr r3, [sp, 0x28]",
            "str r3, [r6, 0x28]",
            "ldr r3, [r8, 4]",
            "ldr r3, [r3, 0x18]",
            "ldrb r1, [r3, 1]",
            "ldrb r2, [r3]",
            "add r2, r2, r1, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "str r2, [r6, 0x48]",
            "ldrb r0, [r3, 4]",
            "ldrb r2, [r3, 3]",
            "ldrb r1, [r3, 2]",
            "lsl r0, r0, 0x10",
            "add r0, r0, r2, lsl 8",
            "ldrb r2, [r3, 5]",
            "add r0, r0, r1",
            "add r0, r0, r2, lsl 24",
            "str r0, [r6, 0x1c]",
            "ldrb r2, [r3, 6]",
            "str r2, [r6, 0x4c]",
            "ldrb ip, [r3, 8]",
            "ldrb r1, [r3, 7]",
            "cmp r2, 9",
            "add r1, r1, ip, lsl 8",
            "lsl r1, r1, 0x10",
            "lsr r1, r1, 0x10",
            "str r1, [r6, 0x40]",
            "ldrb r3, [r3, 9]",
            "str r3, [r6, 0x44]",
            "bhi 0x7591c",
            "cmp r2, 7",
            "beq 0x7593c",
            "orr r1, r1, 0x8000",
            "str r1, [r6, 0x40]",
            "cmp r5, 0",
            "beq 0x758e0",
            "ldr r3, [r8, 4]",
            "ldr r1, [r3, 0x1c]",
            "cmp r1, 0",
            "beq 0x758e0",
            "mov r0, r4",
            "ldr r2, [sp, 0x30]",
            "bl rsym.strmake_root",
            "str r0, [r6, 0x18]",
            "ldr r3, [sp, 0x30]",
            "str r3, [r6, 0x3c]",
            "str sl, [r6, 0x20]",
            "ldr r8, [r8]",
            "cmp r8, 0",
            "addne r6, r6, 0x54",
            "bne 0x7550c",
            "ldr r0, [sp, 0xc]",
            "bl rsym.free_rows",
            "ldr r0, [sp, 8]",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 0xc]",
            "ldr r8, [r2]",
            "cmp r8, 0",
            "beq 0x75708",
            "ldr sb, [0x00075954]",
            "and r7, r7, 4",
            "add sb, r6, sb",
            "ldr r6, [sp, 8]",
            "str r7, [sp, 4]",
            "add r7, sp, 0x14",
            "cmp r5, 0",
            "ldr r1, [r8, 4]",
            "movne fp, 0x1c",
            "moveq fp, 0x18",
            "add fp, r1, fp",
            "cmp r1, fp",
            "beq 0x757c0",
            "mov r3, 0",
            "mov lr, r3",
            "mov r0, r3",
            "b 0x7577c",
            "mov lr, ip",
            "mov r0, r2",
            "ldr r2, [r1, r3]",
            "add ip, r7, r3",
            "cmp r2, 0",
            "streq r2, [r7, r3]",
            "moveq ip, lr",
            "moveq r2, r0",
            "beq 0x757ac",
            "cmp r0, 0",
            "subne r2, r2, 1",
            "rsbne r2, r0, r2",
            "strne r2, [lr]",
            "ldrne r2, [r1, r3]",
            "add r3, r3, 4",
            "add r0, r1, r3",
            "cmp fp, r0",
            "bne 0x75774",
            "ldr fp, [r8, 4]",
            "ldr r1, [fp]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r6, 0xc]",
            "str r0, [r6, 8]",
            "ldr r3, [r8, 4]",
            "mov r0, r4",
            "ldr r1, [r3, 4]",
            "bl rsym.strdup_root",
            "str r0, [r6]",
            "ldr r3, [r8, 4]",
            "ldr r2, [sp, 4]",
            "ldr r3, [r3, 8]",
            "cmp r2, 0",
            "ldrb r1, [r3, 2]",
            "ldrb r2, [r3, 1]",
            "lsl r1, r1, 0x10",
            "ldrb r3, [r3]",
            "add r1, r1, r2, lsl 8",
            "add r1, r1, r3",
            "str r1, [r6, 0x1c]",
            "ldr r3, [r8, 4]",
            "ldr r3, [r3, 0xc]",
            "ldrb r3, [r3]",
            "str sb, [r6, 0x14]",
            "str r3, [r6, 0x4c]",
            "str sb, [r6, 0x10]",
            "str sl, [r6, 0x38]",
            "str sl, [r6, 0x34]",
            "ldr r2, [sp, 0x14]",
            "str r2, [r6, 0x30]",
            "str r2, [r6, 0x2c]",
            "ldr r2, [sp, 0x18]",
            "str r2, [r6, 0x24]",
            "beq 0x758e8",
            "ldr r2, [r8, 4]",
            "cmp r3, 9",
            "ldr r2, [r2, 0x10]",
            "ldrb r0, [r2]",
            "ldrb r2, [r2, 1]",
            "add r2, r0, r2, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "str r2, [r6, 0x40]",
            "ldr r0, [r8, 4]",
            "ldr r0, [r0, 0x10]",
            "ldrb r0, [r0, 2]",
            "str r0, [r6, 0x44]",
            "bhi 0x75910",
            "cmp r3, 7",
            "beq 0x75928",
            "orr r2, r2, 0x8000",
            "str r2, [r6, 0x40]",
            "cmp r5, 0",
            "beq 0x758d8",
            "ldr r3, [r8, 4]",
            "ldr r1, [r3, 0x14]",
            "cmp r1, 0",
            "beq 0x758d8",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r6, 0x18]",
            "ldr r3, [sp, 0x28]",
            "str r3, [r6, 0x3c]",
            "str sl, [r6, 0x20]",
            "ldr r8, [r8]",
            "cmp r8, 0",
            "beq 0x75708",
            "add r6, r6, 0x54",
            "b 0x75748",
            "str sl, [r6, 0x18]",
            "b 0x758c0",
            "str sl, [r6, 0x18]",
            "b 0x756f4",
            "ldr r2, [r8, 4]",
            "cmp r3, 9",
            "ldr r2, [r2, 0x10]",
            "ldrb r2, [r2]",
            "str r2, [r6, 0x40]",
            "ldr r0, [r8, 4]",
            "ldr r0, [r0, 0x10]",
            "ldrb r0, [r0, 1]",
            "str r0, [r6, 0x44]",
            "bls 0x75884",
            "cmp r3, 0xd",
            "bne 0x75894",
            "b 0x7588c",
            "cmp r2, 0xd",
            "bne 0x756c4",
            "b 0x756bc",
            "cmp r1, 0xe",
            "beq 0x7588c",
            "cmp r1, 8",
            "bne 0x75894",
            "b 0x7588c",
            "cmp r0, 0xe",
            "beq 0x756bc",
            "cmp r0, 8",
            "bne 0x756c4",
            "b 0x756bc"
        ]
    },
    "rsym.alloc_root": {
        "function_address": "0x0003f64c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x61c]!"
        ]
    },
    "rsym.strmake_root": {
        "function_address": "0x0003e848",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf74]!"
        ]
    },
    "rsym.strdup_root": {
        "function_address": "0x0003fc58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x214]!"
        ]
    },
    "sym.yaSSL::Socket::get_lastError__": {
        "function_address": "0x00084d8c",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.sf_malloc_report_allocated": {
        "function_address": "0x0004b6f8",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r1, [0x0004b784]",
            "ldr r3, [0x0004b788]",
            "add r1, pc, r1",
            "ldr r3, [r1, r3]",
            "sub sp, sp, 0xc",
            "ldr ip, [r3]",
            "cmp ip, 0",
            "beq 0x4b754",
            "ldr r3, [0x0004b78c]",
            "ldr r3, [r1, r3]",
            "ldr r4, [r3]",
            "add r4, r4, 0x18",
            "add r3, ip, r4",
            "cmp r3, r0",
            "bhi 0x4b748",
            "ldr r2, [ip, 0xc]",
            "add r5, r3, r2",
            "cmp r0, r5",
            "bls 0x4b760",
            "ldr ip, [ip]",
            "cmp ip, 0",
            "bne 0x4b72c",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr",
            "ldr r0, [ip, 0x10]",
            "str r0, [sp]",
            "ldr r0, [0x0004b790]",
            "ldr ip, [ip, 8]",
            "add r1, r1, r0",
            "mov r0, 1",
            "str ip, [sp, 4]",
            "bl sym.imp.__printf_chk",
            "b 0x4b754"
        ]
    },
    "sym.imp.__printf_chk": {
        "function_address": "0x0003d6c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb24]!"
        ]
    },
    "sym.my_parse_charset_xml": {
        "function_address": "0x0005ca28",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0xc20",
            "add r4, sp, 0xaf0",
            "add r4, r4, 8",
            "mov r6, r0",
            "ldr r5, [0x0005cac4]",
            "mov r0, r4",
            "mov r8, r2",
            "mov r7, r1",
            "bl rsym.my_xml_parser_create",
            "ldr r1, [0x0005cac8]",
            "add r5, pc, r5",
            "add r1, r5, r1",
            "mov r0, r4",
            "bl rsym.my_xml_set_enter_handler",
            "ldr r1, [0x0005cacc]",
            "mov r0, r4",
            "add r1, r5, r1",
            "bl rsym.my_xml_set_value_handler",
            "ldr r1, [0x0005cad0]",
            "mov r0, r4",
            "add r1, r5, r1",
            "bl rsym.my_xml_set_leave_handler",
            "mov r0, r4",
            "mov r1, sp",
            "str r8, [sp, 0xaf4]",
            "bl rsym.my_xml_set_user_data",
            "mov r1, r6",
            "mov r2, r7",
            "mov r0, r4",
            "bl rsym.my_xml_parse",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym.my_xml_parser_free",
            "subs r0, r5, 0",
            "movne r0, 1",
            "add sp, sp, 0xc20",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.my_xml_parser_create": {
        "function_address": "0x0003cdfc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xfc]!"
        ]
    },
    "rsym.my_xml_set_enter_handler": {
        "function_address": "0x0003e530",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x184]!"
        ]
    },
    "rsym.my_xml_set_value_handler": {
        "function_address": "0x0003fd84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x14c]!"
        ]
    },
    "rsym.my_xml_set_leave_handler": {
        "function_address": "0x0003cea4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x8c]!"
        ]
    },
    "rsym.my_xml_set_user_data": {
        "function_address": "0x0003d0e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf0c]!"
        ]
    },
    "rsym.my_xml_parse": {
        "function_address": "0x0003ccac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1dc]!"
        ]
    },
    "rsym.my_xml_parser_free": {
        "function_address": "0x0003e608",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf4]!"
        ]
    },
    "sym.yaSSL_get_version": {
        "function_address": "0x00085dac",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr r3, [0x00085de8]",
            "cmp r0, 0",
            "add r3, pc, r3",
            "bne 0x85dd8",
            "ldr r2, [0x00085dec]",
            "add r3, r3, r2",
            "ldr r0, [r3, 0x18]",
            "pop {r4, lr}",
            "bx lr",
            "ldr r2, [0x00085dec]",
            "add r3, r3, r2",
            "ldr r0, [r3, 0x14]",
            "b 0x85dd0"
        ]
    },
    "rsym._ZNK5yaSSL3SSL5isTLSEv": {
        "function_address": "0x0003e9f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe54]!"
        ]
    },
    "fcn.000870c0": {
        "function_address": "0x000870c0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x870dc",
            "b 0x870ec",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x870d8",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SetErrorString_unsigned_long__char_": {
        "function_address": "0x00090d10",
        "instructions": [
            "ldr r2, [0x000913dc]",
            "ldr r3, [0x000913e0]",
            "cmp r0, r2",
            "push {r4, lr}",
            "add r3, pc, r3",
            "beq 0x90f48",
            "bls 0x90d8c",
            "ldr r2, [0x000913e4]",
            "cmp r0, r2",
            "beq 0x91128",
            "bls 0x90ddc",
            "ldr r2, [0x000913e8]",
            "cmp r0, r2",
            "beq 0x910e0",
            "bls 0x90ed0",
            "ldr r2, [0x000913ec]",
            "cmp r0, r2",
            "beq 0x91020",
            "bhi 0x91290",
            "sub r2, r2, 2",
            "cmp r0, r2",
            "beq 0x90fa8",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000913f0]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x6e",
            "beq 0x90f78",
            "bls 0x90e28",
            "cmp r0, 0x74",
            "beq 0x90f90",
            "bhi 0x90e68",
            "cmp r0, 0x71",
            "beq 0x91080",
            "bhi 0x911f8",
            "cmp r0, 0x6f",
            "beq 0x91068",
            "cmp r0, 0x70",
            "beq 0x91050",
            "mov r0, r1",
            "ldr r1, [0x000913f4]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "pop {r4, lr}",
            "bx lr",
            "sub r2, r2, 7",
            "cmp r0, r2",
            "beq 0x90f60",
            "bls 0x90f10",
            "ldr r2, [0x000913f8]",
            "cmp r0, r2",
            "beq 0x910c8",
            "bhi 0x91238",
            "cmp r0, 0x400",
            "beq 0x910b0",
            "sub r2, r2, 1",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000913fc]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x68",
            "beq 0x90fd8",
            "bls 0x90e9c",
            "cmp r0, 0x6b",
            "beq 0x91158",
            "bhi 0x911b8",
            "cmp r0, 0x69",
            "beq 0x91140",
            "cmp r0, 0x6a",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091400]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x77",
            "beq 0x90fc0",
            "bhi 0x9133c",
            "cmp r0, 0x75",
            "beq 0x91098",
            "cmp r0, 0x76",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091404]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x65",
            "beq 0x91008",
            "bhi 0x9139c",
            "cmp r0, 0",
            "beq 0x90ff0",
            "cmp r0, 0x50",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091408]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "sub r2, r2, 3",
            "cmp r0, r2",
            "beq 0x91110",
            "bhi 0x91170",
            "sub r2, r2, 2",
            "cmp r0, r2",
            "beq 0x910f8",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x0009140c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x3fc",
            "beq 0x91038",
            "bhi 0x912f4",
            "cmp r0, 0x3ec",
            "beq 0x90f48",
            "sub r2, r2, 0xd",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091410]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091414]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091418]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009141c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091420]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091424]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091428]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009142c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091430]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091434]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091438]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009143c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091440]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091444]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091448]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009144c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091450]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091454]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091458]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009145c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091460]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091464]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091468]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x0009146c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "ldr r2, [0x00091470]",
            "cmp r0, r2",
            "beq 0x911a0",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091474]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091478]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x6c",
            "beq 0x911e0",
            "cmp r0, 0x6d",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x0009147c]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091480]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x72",
            "beq 0x91220",
            "cmp r0, 0x73",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x00091484]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091488]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "ldr r2, [0x0009148c]",
            "cmp r0, r2",
            "beq 0x91260",
            "bls 0x91278",
            "mov r0, r1",
            "ldr r1, [0x00091490]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091494]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x00091498]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "ldr r2, [0x0009149c]",
            "cmp r0, r2",
            "beq 0x912c4",
            "blo 0x912dc",
            "ldr r2, [0x000914a0]",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000914a4]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914a8]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914ac]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "ldr r2, [0x000914b0]",
            "cmp r0, r2",
            "beq 0x91324",
            "add r2, r2, 1",
            "cmp r0, r2",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000914b4]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914b8]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "ldr r2, [0x000914bc]",
            "cmp r0, r2",
            "beq 0x9136c",
            "bhi 0x91384",
            "cmp r0, 0x78",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000914c0]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914c4]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914c8]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "cmp r0, 0x66",
            "beq 0x913c4",
            "cmp r0, 0x67",
            "bne 0x90dc0",
            "mov r0, r1",
            "ldr r1, [0x000914cc]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4",
            "mov r0, r1",
            "ldr r1, [0x000914d0]",
            "mov r2, 0x50",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "b 0x90dd4"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x0003d5e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbb4]!"
        ]
    },
    "sym.yaSSL::sendAlert_yaSSL::SSL__yaSSL::Alert_const_": {
        "function_address": "0x00083694",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x1c",
            "add r4, sp, 4",
            "mov r6, r0",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x837a4",
            "add r7, sp, 0x10",
            "mov r1, 3",
            "mov r2, 0",
            "add r0, r7, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [r5]",
            "mov r2, r0",
            "mov r0, r5",
            "ldrb sl, [r2, 0x12e]",
            "ldrb r8, [r2, 0x12f]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "strb sl, [sp, 0x14]",
            "strb r8, [sp, 0x15]",
            "str r0, [sp, 0x10]",
            "ldr r3, [r5]",
            "mov r0, r5",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r3, r0",
            "add r1, r0, 5",
            "mov r0, r4",
            "strh r3, [sp, 0x16]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_7MessageE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "ldr r3, [r5]",
            "mov r0, r5",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r5",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r5",
            "bl fcn.000830c4",
            "b 0x83750"
        ]
    },
    "rsym._ZN5yaSSL13output_bufferC1Ev": {
        "function_address": "0x0003eda0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbe4]!"
        ]
    },
    "rsym._ZNK5yaSSL3SSL11getSecurityEv": {
        "function_address": "0x0003f1f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x904]!"
        ]
    },
    "rsym._ZNK5yaSSL8Security9get_parmsEv": {
        "function_address": "0x0003ed88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbf4]!"
        ]
    },
    "rsym._ZN5yaSSL15ProtocolVersionC1Ehh": {
        "function_address": "0x0003e0b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x484]!"
        ]
    },
    "rsym._ZNK5yaSSL8Security14get_connectionEv": {
        "function_address": "0x0004057c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbfc]!"
        ]
    },
    "rsym._ZN5yaSSL13output_buffer8allocateEj": {
        "function_address": "0x000400f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf04]!"
        ]
    },
    "rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE": {
        "function_address": "0x0003cc64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x20c]!"
        ]
    },
    "rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_7MessageE": {
        "function_address": "0x0003ecd4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc6c]!"
        ]
    },
    "rsym._ZNK5yaSSL13output_buffer10get_bufferEv": {
        "function_address": "0x000402ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xddc]!"
        ]
    },
    "rsym._ZNK5yaSSL13output_buffer8get_sizeEv": {
        "function_address": "0x0003f328",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x834]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL4SendEPKhj": {
        "function_address": "0x0003f148",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x974]!"
        ]
    },
    "rsym._ZN5yaSSL13output_bufferD1Ev": {
        "function_address": "0x0003d894",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9ec]!"
        ]
    },
    "fcn.000830c4": {
        "function_address": "0x000830c4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "mov r8, r2",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_digestEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r8]",
            "mov fp, r0",
            "mov r0, r8",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add sl, fp, 5",
            "add sl, sl, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sp, 0xc]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "movne r7, 0",
            "beq 0x83458",
            "add sb, sp, 0x48",
            "mov r1, 3",
            "mov r2, 0",
            "add r0, sb, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r1, r0",
            "ldrb r3, [r1, 0x12e]",
            "ldrb r6, [r1, 0x12f]",
            "ldr r2, [r8]",
            "str r3, [sp, 8]",
            "mov r0, r8",
            "ldr ip, [r2, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 8]",
            "strb r6, [sp, 0x4d]",
            "strb r3, [sp, 0x4c]",
            "str r0, [sp, 0x48]",
            "ldr r3, [r8]",
            "mov r0, r8",
            "add r6, sp, 0x38",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "sub r3, sl, 5",
            "mov r0, r6",
            "strh r3, [sp, 0x4e]",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "bne 0x833f4",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r1, sl",
            "str r0, [sp, 0xc]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sb",
            "mov r0, r4",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r1, sb",
            "mov r2, r0",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, sl",
            "mov r1, r8",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_7MessageE",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "subs sl, r0, 0",
            "beq 0x83374",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r3, [r8]",
            "mov sl, r0",
            "mov r0, r8",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp, 0xc]",
            "mvn r3, 4",
            "rsb r3, r1, r3",
            "add r2, r1, 5",
            "add r8, sp, 0x14",
            "str r0, [sp]",
            "mov ip, 0",
            "add r2, sb, r2",
            "add r3, r3, sl",
            "mov r0, r5",
            "mov r1, r8",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "mov r1, r8",
            "mov r2, fp",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "beq 0x833cc",
            "add r7, sp, 0x28",
            "ldrh r1, [sp, 0x4e]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "ldr r3, [r0]",
            "mov r5, r0",
            "mov r0, r7",
            "ldr r8, [r3]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "add r2, sb, 5",
            "sub r3, r0, 5",
            "mov r1, sl",
            "mov r0, r5",
            "mov lr, pc",
            "bx r8",
            "mov r1, 5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r5, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer12get_capacityEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r4",
            "str r2, [sp, 8]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r3, [r8]",
            "mov sb, r0",
            "mov r0, r8",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 8]",
            "add r8, sp, 0x14",
            "str r0, [sp]",
            "add r2, r2, 5",
            "sub r3, sb, 5",
            "mov r0, r5",
            "mov r1, r8",
            "str sl, [sp, 4]",
            "bl rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "b 0x832a0",
            "and sl, r7, 0xff",
            "mov r8, 0",
            "mov r0, r4",
            "ldr r1, [0x0008348c]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "add r8, r8, 1",
            "cmp r7, r8",
            "strb sl, [r0]",
            "bhs 0x833d4",
            "b 0x832c8",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "bne 0x831d8",
            "ldr r1, [sp, 0xc]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer8allocateEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r3, r0",
            "mov r0, r6",
            "str r3, [sp, 8]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "ldr r3, [sp, 8]",
            "mov r1, r0",
            "ldr r2, [sp, 0xc]",
            "mov r0, r3",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r6",
            "ldr r1, [sp, 0xc]",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "b 0x831d8",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "ldrne r1, [sp, 0xc]",
            "addne sl, sl, r1",
            "sub r0, sl, 4",
            "ldr r1, [sp, 0xc]",
            "bl fcn.000bee1c",
            "ldr r2, [sp, 0xc]",
            "add sl, sl, 1",
            "rsb r7, r1, r2",
            "add sl, r7, sl",
            "b 0x8314c"
        ]
    },
    "rsym._ZNK5yaSSL3SSL9getCryptoEv": {
        "function_address": "0x0003f424",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x78c]!"
        ]
    },
    "rsym._ZNK5yaSSL6Crypto10get_digestEv": {
        "function_address": "0x00040858",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa14]!"
        ]
    },
    "rsym._ZNK5yaSSL6Crypto10get_cipherEv": {
        "function_address": "0x0003e1a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3e4]!"
        ]
    },
    "rsym._ZN5yaSSL12input_bufferC1Ev": {
        "function_address": "0x000407f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa54]!"
        ]
    },
    "rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev": {
        "function_address": "0x0003fd30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x184]!"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer8get_sizeEv": {
        "function_address": "0x0004039c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd3c]!"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer10get_bufferEv": {
        "function_address": "0x0003f4d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x714]!"
        ]
    },
    "rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb": {
        "function_address": "0x0003dab0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x884]!"
        ]
    },
    "rsym._ZN5yaSSL12input_bufferC1Ej": {
        "function_address": "0x0003cca0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1e4]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL9useCryptoEv": {
        "function_address": "0x0003e4c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1cc]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto10use_cipherEv": {
        "function_address": "0x0003e074",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4ac]!"
        ]
    },
    "rsym._ZN5yaSSL13output_buffer11set_currentEj": {
        "function_address": "0x0003e92c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xedc]!"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer12get_capacityEv": {
        "function_address": "0x0003db88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7f4]!"
        ]
    },
    "rsym._ZN5yaSSL12input_bufferD1Ev": {
        "function_address": "0x0003d3d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd14]!"
        ]
    },
    "rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb": {
        "function_address": "0x0003fc4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x21c]!"
        ]
    },
    "rsym._ZN5yaSSL13output_bufferixEj": {
        "function_address": "0x0004051c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc3c]!"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer8allocateEj": {
        "function_address": "0x0003d750",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xac4]!"
        ]
    },
    "rsym._ZNK5yaSSL6Crypto10get_randomEv": {
        "function_address": "0x00040168",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xeb4]!"
        ]
    },
    "rsym._ZNK5yaSSL10RandomPool4FillEPhj": {
        "function_address": "0x000403d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd14]!"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer8add_sizeEj": {
        "function_address": "0x0003f154",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x96c]!"
        ]
    },
    "fcn.000bee1c": {
        "function_address": "0x000bee1c",
        "instructions": [
            "push {r0, r1, lr}",
            "bl fcn.000bed20",
            "pop {r1, r2, lr}",
            "mul r3, r2, r0",
            "sub r1, r1, r3",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Signature_Encoder::SetDigest_unsigned_char_const__unsigned_int__unsigned_char_": {
        "function_address": "0x0009a24c",
        "instructions": [
            "mov r0, 4",
            "push {r4, lr}",
            "strb r0, [r3]",
            "mov r4, r2",
            "strb r2, [r3, 1]",
            "add r0, r3, 2",
            "bl sym.imp.memcpy",
            "add r0, r4, 2",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::CopyCaCert_yaSSL::x509_const_": {
        "function_address": "0x0007c684",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x490",
            "mov r0, r1",
            "mov r6, r1",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov r4, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [sp, 0x47c]",
            "bne 0x7c788",
            "mov r1, r4",
            "mov r0, r3",
            "ldr r2, [sp, 0x47c]",
            "add r4, sp, 0x10",
            "sub r4, r4, 8",
            "str r3, [sp, 0x480]",
            "bl sym.imp.memcpy",
            "ldrb lr, [r5, 0x51]",
            "add r1, sp, 0x470",
            "add r5, r5, 0x44",
            "mov ip, 0",
            "add r1, r1, 0xc",
            "mov r2, 1",
            "mov r3, r5",
            "mov r0, r4",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "str ip, [sp, 0x488]",
            "str ip, [sp, 0x48c]",
            "bl rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder8GetErrorEv",
            "cmp r0, 0",
            "bne 0x7c754",
            "mov r1, 0",
            "mov r0, 0x21c",
            "ldr r8, [sp, 0x10]",
            "ldr r7, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r6, r0",
            "add ip, r4, 0x24",
            "mov r2, r7",
            "add r3, r4, 0x250",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt6SignerC1EPKhjPKcS2_",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9push_backES3_",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x480]",
            "mov r1, 0",
            "ldr r2, [sp, 0x47c]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, 0",
            "add sp, sp, 0x490",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7c6b8"
        ]
    },
    "rsym._ZNK5yaSSL4x50910get_lengthEv": {
        "function_address": "0x0003fd78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x154]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE": {
        "function_address": "0x0003d954",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x96c]!"
        ]
    },
    "rsym._ZN8TaoCrypt11BER_Decoder8GetErrorEv": {
        "function_address": "0x0003cdc0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x124]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SignerC1EPKhjPKcS2_": {
        "function_address": "0x00040030",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf84]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9push_backES3_": {
        "function_address": "0x0003e038",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4d4]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoderD1Ev": {
        "function_address": "0x00040324",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd8c]!"
        ]
    },
    "sym.my_net_read": {
        "function_address": "0x0007b624",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldrb r5, [r0, 0x50]",
            "sub sp, sp, 0xc",
            "cmp r5, 0",
            "mov r4, r0",
            "beq 0x7b79c",
            "ldr r6, [r0, 0x18]",
            "mov sb, 0",
            "cmp r6, 0",
            "ldrne r5, [r0, 0x20]",
            "ldrbne r2, [r0, 0x4d]",
            "ldrne r3, [r0, 4]",
            "rsbne r7, r6, r5",
            "moveq r7, r6",
            "moveq r5, r6",
            "strbne r2, [r3, r7]",
            "rsb r2, r7, r5",
            "movne r6, r7",
            "cmp r2, 3",
            "add r8, sp, 4",
            "mvn fp, 0xff000000",
            "bhi 0x7b6d4",
            "cmp r6, 0",
            "bne 0x7b764",
            "mov r1, r8",
            "str r5, [r4, 0x24]",
            "mov r0, r4",
            "bl fcn.0007b328",
            "cmn r0, 1",
            "mov r1, r0",
            "beq 0x7b758",
            "ldr r0, [r4, 4]",
            "ldr r3, [r4, 0x24]",
            "mov r2, r8",
            "add r0, r0, r3",
            "bl rsym.my_uncompress",
            "cmp r0, 0",
            "bne 0x7b828",
            "ldr r3, [sp, 4]",
            "add r5, r5, r3",
            "mov r6, 0",
            "rsb r2, r7, r5",
            "cmp r2, 3",
            "bls 0x7b67c",
            "ldr r3, [r4, 4]",
            "add r1, r3, r7",
            "ldrb sl, [r1, 2]",
            "ldrb r0, [r1, 1]",
            "lsl sl, sl, 0x10",
            "ldrb r1, [r3, r7]",
            "add sl, sl, r0, lsl 8",
            "adds sl, sl, r1",
            "beq 0x7b88c",
            "add r1, sl, 4",
            "cmp r2, r1",
            "blo 0x7b67c",
            "cmp sb, 0",
            "addeq r7, r7, 4",
            "addeq r7, r7, sl",
            "bne 0x7b7d4",
            "cmp sl, fp",
            "beq 0x7b7f8",
            "ldr r3, [r4, 4]",
            "mov sb, 0",
            "rsb r0, r6, r7",
            "add r6, r6, 4",
            "add r3, r3, r6",
            "rsb sb, sb, r0",
            "rsb r7, r7, r5",
            "str r7, [r4, 0x18]",
            "str r3, [r4, 0x10]",
            "str r5, [r4, 0x20]",
            "sub r0, sb, 4",
            "ldrb r2, [r3, r0]",
            "strb r2, [r4, 0x4d]",
            "mov r2, 0",
            "strb r2, [r3, r0]",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [r4, 4]",
            "rsb r5, r6, r5",
            "add r1, r0, r6",
            "mov r2, r5",
            "bl sym.imp.memmove",
            "mov r1, r8",
            "str r5, [r4, 0x24]",
            "mov r0, r4",
            "bl fcn.0007b328",
            "cmn r0, 1",
            "rsb r7, r6, r7",
            "mov r1, r0",
            "bne 0x7b6a0",
            "b 0x7b758",
            "add r6, sp, 4",
            "mov r1, r6",
            "bl fcn.0007b328",
            "mvn r3, 0xff000000",
            "cmp r0, r3",
            "ldrne r7, [r4, 0x24]",
            "beq 0x7b840",
            "ldr r3, [r4, 4]",
            "cmn r0, 1",
            "add r7, r3, r7",
            "movne r3, 0",
            "str r7, [r4, 0x10]",
            "strbne r3, [r7, r0]",
            "b 0x7b758",
            "add r0, r6, r7",
            "add r1, r0, 4",
            "add r1, r3, r1",
            "add r0, r3, r0",
            "bl sym.imp.memmove",
            "cmp sl, fp",
            "add r7, r7, sl",
            "sub r5, r5, 4",
            "bne 0x7b71c",
            "cmp r6, 0",
            "moveq sb, 4",
            "beq 0x7b6c4",
            "ldr r0, [r4, 4]",
            "rsb r5, r6, r5",
            "add r1, r0, r6",
            "mov r2, r5",
            "rsb r7, r6, r7",
            "bl sym.imp.memmove",
            "mov sb, 4",
            "mov r6, 0",
            "b 0x7b6c8",
            "ldr r3, [0x0007b894]",
            "mvn r0, 0",
            "str r3, [r4, 0x58]",
            "mov r3, 2",
            "strb r3, [r4, 0x5c]",
            "b 0x7b758",
            "ldr r7, [r4, 0x24]",
            "mov r8, r0",
            "mov r3, r7",
            "b 0x7b854",
            "ldr r3, [r4, 0x24]",
            "add r3, r3, 0x1000000",
            "sub r3, r3, 1",
            "str r3, [r4, 0x24]",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.0007b328",
            "add r5, r5, 0x1000000",
            "cmp r0, r8",
            "sub r5, r5, 1",
            "beq 0x7b850",
            "cmn r0, 1",
            "addne r0, r0, r5",
            "str r7, [r4, 0x24]",
            "b 0x7b7b8",
            "add r7, r7, 4",
            "b 0x7b724"
        ]
    },
    "fcn.0007b328": {
        "function_address": "0x0007b328",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0]",
            "mov r6, r0",
            "sub sp, sp, 0x1c",
            "mov r0, r3",
            "mov sb, r1",
            "ldr ip, [r3, 0x74]",
            "mov lr, pc",
            "bx ip",
            "mov r7, 0",
            "str r0, [sp, 8]",
            "ldrb r4, [r6, 0x50]",
            "str r7, [sb]",
            "ldr r5, [r6, 4]",
            "ldr r2, [r6, 0x24]",
            "mov r3, 1",
            "cmp r4, r7",
            "strb r3, [r6, 0x4c]",
            "movne r4, 7",
            "moveq r4, 4",
            "add r5, r5, r2",
            "str r3, [sp, 0xc]",
            "mvn sl, 0",
            "mov r8, r7",
            "add fp, sp, 0x17",
            "cmp r4, 0",
            "beq 0x7b4f4",
            "ldr r3, [r6]",
            "mov r1, r5",
            "mov r0, r3",
            "mov r2, r4",
            "ldr ip, [r3, 0x68]",
            "mov lr, pc",
            "bx ip",
            "subs r3, r0, 0",
            "addgt r5, r5, r3",
            "rsbgt r4, r3, r4",
            "bgt 0x7b38c",
            "ldr r2, [r6]",
            "str r3, [sp, 4]",
            "mov r0, r2",
            "ldr ip, [r2, 0x88]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 4]",
            "subs r0, r0, 0",
            "movne r0, 1",
            "cmp r3, 0",
            "movne r3, r0",
            "orreq r3, r0, 1",
            "cmp r3, 0",
            "beq 0x7b404",
            "cmp r7, 0",
            "moveq r7, fp",
            "beq 0x7b4c0",
            "tst r0, r7",
            "beq 0x7b424",
            "ldr r2, [r6, 0x40]",
            "add r3, r8, 1",
            "cmp r8, r2",
            "movlo r8, r3",
            "blo 0x7b38c",
            "mov r8, r3",
            "ldr r3, [r6]",
            "mov r0, r3",
            "ldr ip, [r3, 0x64]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 4",
            "beq 0x7b38c",
            "ldr r3, [r6]",
            "mov r2, 2",
            "strb r2, [r6, 0x5c]",
            "mov r0, r3",
            "ldr ip, [r3, 0x8c]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [0x0007b618]",
            "ldr r3, [0x0007b61c]",
            "cmp r0, 0",
            "movne r3, r2",
            "mvn sl, 0",
            "str r3, [r6, 0x58]",
            "cmp r7, 0",
            "bne 0x7b5ac",
            "mov r3, 0",
            "strb r3, [r6, 0x4c]",
            "mov r0, sl",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r6]",
            "mov r0, r3",
            "ldr ip, [r3, 0x88]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x7b600",
            "ldr r3, [r6, 0x40]",
            "cmp r8, r3",
            "bhs 0x7b600",
            "add r8, r8, 1",
            "ldr r3, [r6]",
            "mov r1, 1",
            "mov r2, fp",
            "mov r0, r3",
            "ldr ip, [r3, 0x70]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "blt 0x7b494",
            "cmp r4, 0",
            "mov r7, 1",
            "mov r8, 0",
            "bne 0x7b394",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 1",
            "bne 0x7b5d0",
            "ldr r2, [r6, 4]",
            "ldr r3, [r6, 0x24]",
            "ldr r0, [r6, 0x30]",
            "add r1, r2, r3",
            "ldrb r4, [r1, 3]",
            "and ip, r0, 0xff",
            "cmp r4, ip",
            "bne 0x7b5f8",
            "ldrb ip, [r6, 0x50]",
            "add r0, r0, 1",
            "cmp ip, 0",
            "str r0, [r6, 0x34]",
            "str r0, [r6, 0x30]",
            "beq 0x7b55c",
            "ldrb r2, [r1, 6]",
            "ldrb r0, [r1, 5]",
            "ldrb r3, [r1, 4]",
            "lsl r2, r2, 0x10",
            "add r2, r2, r0, lsl 8",
            "add r3, r2, r3",
            "str r3, [sb]",
            "ldr r2, [r6, 4]",
            "ldr r3, [r6, 0x24]",
            "add r5, r2, r3",
            "ldrb r1, [r5, 2]",
            "ldrb r0, [r5, 1]",
            "lsl r1, r1, 0x10",
            "ldrb r2, [r2, r3]",
            "add r1, r1, r0, lsl 8",
            "adds sl, r1, r2",
            "beq 0x7b474",
            "ldr r1, [sb]",
            "ldr r2, [r6, 0x28]",
            "cmp sl, r1",
            "addhs r1, r3, sl",
            "addlo r1, r3, r1",
            "cmp r1, r2",
            "bhs 0x7b5dc",
            "mov r4, sl",
            "ldr r3, [sp, 0xc]",
            "add r3, r3, 1",
            "str r3, [sp, 0xc]",
            "b 0x7b38c",
            "add r7, sp, 0x17",
            "ldr r3, [r6]",
            "ldr r1, [sp, 8]",
            "mov r2, r7",
            "mov r0, r3",
            "ldr ip, [r3, 0x70]",
            "mov lr, pc",
            "bx ip",
            "b 0x7b47c",
            "bhi 0x7b474",
            "mov r4, 0",
            "b 0x7b59c",
            "mov r0, r6",
            "bl rsym.net_realloc",
            "cmp r0, 0",
            "ldreq r5, [r6, 4]",
            "ldreq r3, [r6, 0x24]",
            "addeq r5, r5, r3",
            "beq 0x7b598",
            "mvn sl, 0",
            "b 0x7b474",
            "mov r3, 2",
            "strb r3, [r6, 0x5c]",
            "ldr r3, [0x0007b620]",
            "mvn sl, 0",
            "str r3, [r6, 0x58]",
            "b 0x7b5b0"
        ]
    },
    "rsym.my_uncompress": {
        "function_address": "0x0003e740",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x24]!"
        ]
    },
    "sym.imp.memmove": {
        "function_address": "0x0003fac0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x324]!"
        ]
    },
    "sym.yaSSL::SSL::set_session_yaSSL::SSL_SESSION_": {
        "function_address": "0x00094fbc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "cmp r0, 0",
            "bne 0x95048",
            "cmp r4, 0",
            "beq 0x95048",
            "bl rsym._ZN5yaSSL11GetSessionsEv",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv",
            "add r6, r5, 0x68",
            "mov r7, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8Security10use_resumeEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL8Sessions6lookupEPKhPNS_11SSL_SESSIONE",
            "cmp r0, 0",
            "beq 0x95048",
            "mov r1, 1",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8Security12set_resumingEb",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Crypto15use_certManagerEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL11SSL_SESSION11GetPeerX509Ev",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11CertManager11setPeerX509EPNS_4X509E",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL8Security10GetContextEv": {
        "function_address": "0x0003fa78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x354]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv": {
        "function_address": "0x000409f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x904]!"
        ]
    },
    "rsym._ZN5yaSSL11GetSessionsEv": {
        "function_address": "0x0003d5a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbe4]!"
        ]
    },
    "rsym._ZN5yaSSL8Security10use_resumeEv": {
        "function_address": "0x0003d210",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe44]!"
        ]
    },
    "rsym._ZN5yaSSL8Sessions6lookupEPKhPNS_11SSL_SESSIONE": {
        "function_address": "0x0003d264",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe0c]!"
        ]
    },
    "rsym._ZN5yaSSL8Security12set_resumingEb": {
        "function_address": "0x0003e5fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfc]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto15use_certManagerEv": {
        "function_address": "0x000400cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf1c]!"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION11GetPeerX509Ev": {
        "function_address": "0x0003ec2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcdc]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager11setPeerX509EPNS_4X509E": {
        "function_address": "0x0003e968",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xeb4]!"
        ]
    },
    "sym.void_yaSSL::ysArrayDelete_unsigned_char__unsigned_char_": {
        "function_address": "0x00089a14",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdaPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZdaPvN5yaSSL5new_tE": {
        "function_address": "0x00040420",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xce4]!"
        ]
    },
    "sym.yaSSL_get_verify_mode": {
        "function_address": "0x00085ad0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x34]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0008bb1c": {
        "function_address": "0x0008bb1c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL10Connection11CleanMasterEv",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL10Connection14CleanPreMasterEv",
            "ldr r0, [r4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL10Connection11CleanMasterEv": {
        "function_address": "0x0003d144",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xecc]!"
        ]
    },
    "rsym._ZN5yaSSL10Connection14CleanPreMasterEv": {
        "function_address": "0x0003eba8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd34]!"
        ]
    },
    "sym.yaSSL::SSL::verfiyHandShakeComplete__": {
        "function_address": "0x00091700",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x9171c",
            "pop {r4, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States12getHandShakeEv",
            "ldr r3, [r0]",
            "cmp r3, 3",
            "beq 0x91714",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN5yaSSL3SSL11order_errorEv"
        ]
    },
    "rsym._ZNK5yaSSL3SSL8GetErrorEv": {
        "function_address": "0x0003f868",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4b4]!"
        ]
    },
    "rsym._ZNK5yaSSL6States12getHandShakeEv": {
        "function_address": "0x0003d288",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdf4]!"
        ]
    },
    "sym.yaSSL::sendCertificateVerify_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x00083f00",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "mov sl, r1",
            "mov r7, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x00084094]",
            "subs r8, r0, 0",
            "add r4, pc, r4",
            "beq 0x83f30",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r5, sp, 0xc",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL17CertificateVerifyC1Ev",
            "add r3, sp, 0x48",
            "mov r0, r5",
            "mov r1, r7",
            "str r3, [sp, 4]",
            "bl rsym._ZN5yaSSL17CertificateVerify5BuildERNS_3SSLE",
            "ldr r3, [sp, 4]",
            "mov r1, 3",
            "add r0, r3, 4",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00084098]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x3c]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0xc]",
            "mov fp, r0",
            "mov r0, r5",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 0x3c",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add fp, fp, 4",
            "lsl fp, fp, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb ip, [r0, 0x12f]",
            "lsr fp, fp, 0x10",
            "mov r3, 0x16",
            "add r1, fp, 5",
            "mov r0, r6",
            "str r3, [sp, 0x48]",
            "strb r2, [sp, 0x4c]",
            "strb ip, [sp, 0x4d]",
            "strh fp, [sp, 0x4e]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "ldr r1, [sp, 4]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r8",
            "bl fcn.00081648",
            "cmp sl, 0",
            "beq 0x84080",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "ldr r3, [0x0008409c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x3c]",
            "bl rsym._ZN5yaSSL17CertificateVerifyD1Ev",
            "b 0x83f24",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r6, sl",
            "b 0x8405c"
        ]
    },
    "rsym._ZN5yaSSL17CertificateVerifyC1Ev": {
        "function_address": "0x0003d2e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdb4]!"
        ]
    },
    "rsym._ZN5yaSSL17CertificateVerify5BuildERNS_3SSLE": {
        "function_address": "0x0003f5f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x654]!"
        ]
    },
    "rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv": {
        "function_address": "0x0003dbc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7cc]!"
        ]
    },
    "rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE": {
        "function_address": "0x0003e344",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2cc]!"
        ]
    },
    "rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj": {
        "function_address": "0x0003d114",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xeec]!"
        ]
    },
    "rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE": {
        "function_address": "0x0003ff88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xff4]!"
        ]
    },
    "rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE": {
        "function_address": "0x0003fe80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa4]!"
        ]
    },
    "fcn.00081648": {
        "function_address": "0x00081648",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r0, r1",
            "mov r5, r1",
            "mov r7, r2",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "sub r4, r0, 5",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "cmp r7, 0",
            "add r5, r0, 5",
            "beq 0x8169c",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r5, r5, r0",
            "rsb r4, r0, r4",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r0]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r0]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_": {
        "function_address": "0x00040024",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf8c]!"
        ]
    },
    "rsym._ZN5yaSSL17CertificateVerifyD1Ev": {
        "function_address": "0x0003f7b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x52c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE": {
        "function_address": "0x0003f4b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x72c]!"
        ]
    },
    "sym.yaSSL_CTX_set_cipher_list": {
        "function_address": "0x00085df0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL7SSL_CTX13SetCipherListEPKc",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX13SetCipherListEPKc": {
        "function_address": "0x0003d780",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xaa4]!"
        ]
    },
    "method.TaoCrypt::WindowSlider_mySTL::uninit_copy_TaoCrypt::WindowSlider__TaoCrypt.WindowSlider__TaoCrypt::WindowSlider__TaoCrypt::WindowSlider__TaoCrypt::WindowSlider_": {
        "function_address": "0x00099d84",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0x99dfc",
            "mov r1, r4",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r4, 0x10",
            "add r0, r6, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r8, [r4, 0x20]",
            "ldr r7, [r4, 0x24]",
            "ldr ip, [r4, 0x28]",
            "ldrb r0, [r4, 0x2c]",
            "ldrb r1, [r4, 0x2d]",
            "ldrb r2, [r4, 0x2e]",
            "ldrb r3, [r4, 0x2f]",
            "add r4, r4, 0x30",
            "cmp r5, r4",
            "str r8, [r6, 0x20]",
            "str r7, [r6, 0x24]",
            "str ip, [r6, 0x28]",
            "strb r0, [r6, 0x2c]",
            "strb r1, [r6, 0x2d]",
            "strb r2, [r6, 0x2e]",
            "strb r3, [r6, 0x2f]",
            "add r6, r6, 0x30",
            "bne 0x99d9c",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DH::GeneratePublic_unsigned_char_const__unsigned_char_": {
        "function_address": "0x000a0d74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x20",
            "mov r8, r2",
            "mov r6, r0",
            "mov r5, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "add r7, sp, 0x10",
            "mov r4, r0",
            "mov r1, r5",
            "mov r2, r0",
            "mov r3, 0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r3, r6",
            "mov r2, r7",
            "mov r0, sp",
            "add r1, r6, 0x10",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "mov r3, 0",
            "mov r1, r8",
            "mov r2, r4",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldm sp, {r2, r4}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r5, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_": {
        "function_address": "0x0004003c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf7c]!"
        ]
    },
    "sym.TaoCrypt::SHA512::Swap_TaoCrypt::SHA512_": {
        "function_address": "0x000b361c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r6, r0, 0x10",
            "mov ip, r6",
            "add lr, r1, 0x10",
            "mov r5, r0",
            "mov r4, r1",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [r4, 8]",
            "ldr r1, [r5, 8]",
            "ldr r2, [r5, 0xc]",
            "ldr r3, [r5, 4]",
            "ldr r0, [r4, 4]",
            "ldr r6, [r4, 0xc]",
            "stmib r5, {r0, r7}",
            "str r6, [r5, 0xc]",
            "str r1, [r4, 8]",
            "str r2, [r4, 0xc]",
            "str r3, [r4, 4]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r0, r5, 0x50",
            "add r1, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.00092c1c": {
        "function_address": "0x00092c1c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "stm r0, {r1, r5}",
            "str r5, [r0, 8]",
            "str r5, [r0, 0xc]",
            "str r5, [r0, 0x10]",
            "str r5, [r0, 0x14]",
            "strb r5, [r0, 0x18]",
            "str r5, [r0, 0x9c]",
            "add r0, r0, 0xa0",
            "bl rsym._ZN5yaSSL7IntegerC1Ev",
            "add r0, r4, 0xa4",
            "bl rsym._ZN5yaSSL7IntegerC1Ev",
            "strb r5, [r4, 0xa8]",
            "str r5, [r4, 0xac]",
            "str r5, [r4, 0xb0]",
            "strb r5, [r4, 0xb4]",
            "strb r5, [r4, 0xb5]",
            "str r5, [r4, 0xb8]",
            "str r5, [r4, 0xbc]",
            "str r5, [r4, 0xc0]",
            "str r5, [r4, 0xc4]",
            "str r5, [r4, 0xc8]",
            "str r5, [r4, 0xcc]",
            "str r5, [r4, 0xd0]",
            "str r5, [r4, 0xd4]",
            "str r5, [r4, 0xd8]",
            "str r5, [r4, 0xdc]",
            "str r5, [r4, 0xe0]",
            "str r5, [r4, 0xe4]",
            "str r5, [r4, 0xe8]",
            "str r5, [r4, 0xec]",
            "str r5, [r4, 0xf0]",
            "add r0, r4, 0xf4",
            "bl rsym._ZN5yaSSL5MutexC1Ev",
            "str r5, [r4, 0x10c]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7IntegerC1Ev": {
        "function_address": "0x00040864",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa0c]!"
        ]
    },
    "sym.TaoCrypt::DH::GenerateKeyPair_TaoCrypt::RandomNumberGenerator__unsigned_char__unsigned_char_": {
        "function_address": "0x000a0fe8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r2",
            "mov r4, r3",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt2DH15GeneratePrivateERNS_21RandomNumberGeneratorEPh",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN8TaoCrypt2DH14GeneratePublicEPKhPh"
        ]
    },
    "rsym._ZN8TaoCrypt2DH15GeneratePrivateERNS_21RandomNumberGeneratorEPh": {
        "function_address": "0x0003ef08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xaf4]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Mod_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad580",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r1, [sp, 4]",
            "mov r5, r0",
            "ldr r2, [sp]",
            "add r0, sp, 8",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r4, sp",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_": {
        "function_address": "0x0003f85c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4bc]!"
        ]
    },
    "sym._myfree": {
        "function_address": "0x0004b794",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r4, [0x0004b914]",
            "ldr r8, [0x0004b918]",
            "add r4, pc, r4",
            "ldr ip, [r4, r8]",
            "mov r5, r0",
            "ldr r0, [ip]",
            "sub sp, sp, 0xc",
            "cmp r0, 0",
            "mov r6, r1",
            "mov r7, r2",
            "mov sl, r3",
            "beq 0x4b8f0",
            "cmp r5, 0",
            "beq 0x4b8e4",
            "ldr r0, [0x0004b91c]",
            "mov r1, r5",
            "add r0, r4, r0",
            "mov r2, r6",
            "mov r3, r7",
            "bl fcn.0004b624",
            "cmp r0, 0",
            "bne 0x4b838",
            "ldr r3, [0x0004b920]",
            "ldr r1, [r5, -4]",
            "ldr r2, [0x0004b924]",
            "ldr r3, [r4, r3]",
            "cmp r1, r2",
            "ldr r3, [r3]",
            "beq 0x4b844",
            "ldr r3, [0x0004b928]",
            "ldr r2, [0x0004b92c]",
            "ldr r5, [r4, r3]",
            "add r2, r4, r2",
            "ldr r0, [r5]",
            "mov r3, r7",
            "mov r1, 1",
            "str r6, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r5]",
            "bl sym.imp.fflush",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mvn r7, 0x17",
            "ldr sl, [0x0004b930]",
            "rsb r7, r3, r7",
            "add r6, r5, r7",
            "ldr r0, [r4, sl]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [r6, 4]",
            "cmp r3, 0",
            "beq 0x4b900",
            "ldr r2, [r5, r7]",
            "str r2, [r3]",
            "ldr r3, [r5, r7]",
            "cmp r3, 0",
            "ldrne r2, [r6, 4]",
            "strne r2, [r3, 4]",
            "ldr r3, [0x0004b934]",
            "ldr r0, [r6, 0xc]",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x0004b938]",
            "ldr ip, [r2]",
            "ldr r3, [r4, r3]",
            "rsb ip, r0, ip",
            "ldr r1, [r3]",
            "ldr r0, [r4, sl]",
            "sub r1, r1, 1",
            "str r1, [r3]",
            "str ip, [r2]",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r3, [r4, r8]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "moveq r0, r5",
            "moveq r1, 0x8f",
            "ldreq r2, [r6, 0xc]",
            "bleq sym.imp.memset",
            "ldr r3, [0x0004b93c]",
            "mov r0, r6",
            "str r3, [r5, -4]",
            "bl sym.imp.free",
            "b 0x4b838",
            "tst sl, 0x40",
            "beq 0x4b7d0",
            "b 0x4b838",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym._sanity",
            "b 0x4b7c8",
            "ldr r3, [0x0004b940]",
            "ldr r2, [r5, r7]",
            "ldr r3, [r4, r3]",
            "str r2, [r3]",
            "b 0x4b870"
        ]
    },
    "fcn.0004b624": {
        "function_address": "0x0004b624",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr ip, [0x0004b6dc]",
            "cmp r1, 0",
            "add ip, pc, ip",
            "sub sp, sp, 8",
            "mov r4, r2",
            "mov r5, r3",
            "beq 0x4b6cc",
            "ands r2, r1, 7",
            "bne 0x4b6bc",
            "ldr r3, [0x0004b6e0]",
            "ldr r3, [ip, r3]",
            "ldr r3, [r3]",
            "cmp r1, r3",
            "blo 0x4b678",
            "ldr r3, [0x0004b6e4]",
            "ldr r3, [ip, r3]",
            "ldr r3, [r3]",
            "cmp r1, r3",
            "movls r0, r2",
            "bls 0x4b6b0",
            "ldr r3, [0x0004b6e8]",
            "ldr r2, [0x0004b6ec]",
            "ldr r6, [ip, r3]",
            "ldr r1, [r6]",
            "mov r3, r0",
            "add r2, ip, r2",
            "mov r0, r1",
            "mov r1, 1",
            "str r5, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r6]",
            "bl sym.imp.fflush",
            "mov r0, 1",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x0004b6e8]",
            "ldr r2, [0x0004b6f0]",
            "ldr r6, [ip, r3]",
            "b 0x4b684",
            "ldr r3, [0x0004b6e8]",
            "ldr r2, [0x0004b6f4]",
            "ldr r6, [ip, r3]",
            "b 0x4b684"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x0003e068",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4b4]!"
        ]
    },
    "rsym._sanity": {
        "function_address": "0x0003d594",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbec]!"
        ]
    },
    "sym.yaSSL::SSL_CTX::AddCA_yaSSL::x509_": {
        "function_address": "0x00092150",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0xc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE9push_backES3_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL4x509EE9push_backES3_": {
        "function_address": "0x0003f274",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8ac]!"
        ]
    },
    "sym.my_rnd": {
        "function_address": "0x00047074",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "ldr r6, [r4, 4]",
            "add r0, r0, r0, lsl 1",
            "add r0, r0, r6",
            "ldr r1, [r4, 8]",
            "bl fcn.000bee1c",
            "add r0, r6, 0x21",
            "mov r5, r1",
            "str r1, [r4]",
            "add r0, r0, r1",
            "ldr r1, [r4, 8]",
            "bl fcn.000bee1c",
            "mov r0, r5",
            "str r1, [r4, 4]",
            "bl fcn.000bf294",
            "add r3, r4, 0x10",
            "ldm r3, {r2, r3}",
            "bl fcn.000bf624",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000bf294": {
        "function_address": "0x000bf294",
        "instructions": [
            "teq r1, 0",
            "movne r3, 0x14",
            "moveq r3, 0x34",
            "moveq r1, r0",
            "moveq r0, 0",
            "mov r2, r1",
            "cmp r2, 0x10000",
            "lsrhs r2, r2, 0x10",
            "subhs r3, r3, 0x10",
            "cmp r2, 0x100",
            "lsrhs r2, r2, 8",
            "subhs r3, r3, 8",
            "cmp r2, 0x10",
            "lsrhs r2, r2, 4",
            "subhs r3, r3, 4",
            "cmp r2, 4",
            "subhs r3, r3, 2",
            "sublo r3, r3, r2, lsr 1",
            "sub r3, r3, r2, lsr 3",
            "subs r2, r3, 0x20",
            "bge 0xbf148",
            "adds r2, r2, 0xc",
            "ble 0xbf144",
            "add ip, r2, 0x14",
            "rsb r2, r2, 0xc",
            "lsl r0, r1, ip",
            "lsr r1, r1, r2",
            "b 0xbf158",
            "add r2, r2, 0x14",
            "rsble ip, r2, 0x20",
            "lsl r1, r1, r2",
            "orrle r1, r1, r0, lsr ip",
            "lslle r0, r0, r2",
            "subs r4, r4, r3",
            "addge r1, r1, r4, lsl 20",
            "orrge r1, r1, r5",
            "popge {r4, r5, lr}",
            "bxge lr",
            "mvn r4, r4",
            "subs r4, r4, 0x1f",
            "bge 0xbf1b8",
            "adds r4, r4, 0xc",
            "bgt 0xbf19c",
            "add r4, r4, 0x14",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r2",
            "orr r1, r5, r1, lsr r4",
            "pop {r4, r5, lr}",
            "bx lr",
            "rsb r4, r4, 0xc",
            "rsb r2, r4, 0x20",
            "lsr r0, r0, r2",
            "orr r0, r0, r1, lsl r4",
            "mov r1, r5",
            "pop {r4, r5, lr}",
            "bx lr",
            "lsr r0, r1, r4",
            "mov r1, r5",
            "pop {r4, r5, lr}",
            "bx lr",
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "mov r5, 0",
            "mov r1, 0",
            "b 0xbf0d4"
        ]
    },
    "fcn.000bf624": {
        "function_address": "0x000bf624",
        "instructions": [
            "bgt 0xbf5fc",
            "cmn r4, 0x36",
            "movle r0, 0",
            "andle r1, r1, 0x80000000",
            "pople {r4, r5, r6, lr}",
            "bxle lr",
            "rsb r4, r4, 0",
            "subs r4, r4, 0x20",
            "bge 0xbf510",
            "adds r4, r4, 0xc",
            "bgt 0xbf4e0",
            "add r4, r4, 0x14",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r5",
            "lsr r0, r0, r4",
            "orr r0, r0, r1, lsl r5",
            "and r2, r1, 0x80000000",
            "bic r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r2, r1, lsr r4",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "rsb r4, r4, 0xc",
            "rsb r5, r4, 0x20",
            "lsl r3, r0, r4",
            "lsr r0, r0, r5",
            "orr r0, r0, r1, lsl r4",
            "and r1, r1, 0x80000000",
            "adds r0, r0, r3, lsr 31",
            "adc r1, r1, 0",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "rsb r5, r4, 0x20",
            "orr lr, lr, r0, lsl r5",
            "lsr r3, r0, r4",
            "orr r3, r3, r1, lsl r5",
            "lsr r0, r1, r4",
            "and r1, r1, 0x80000000",
            "bic r0, r0, r1, lsr r4",
            "add r0, r0, r3, lsr 31",
            "orrs lr, lr, r3, lsl 1",
            "biceq r0, r0, r3, lsr 31",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "and r1, r1, 0x80000000",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.000bf7c0",
            "sub r4, r4, r5",
            "eor lr, r1, r3",
            "orrs r5, r2, r3, lsl 12",
            "lsl r1, r1, 0xc",
            "beq 0xbf78c",
            "lsl r3, r3, 0xc",
            "mov r5, 0x10000000",
            "orr r3, r5, r3, lsr 4",
            "orr r3, r3, r2, lsr 24",
            "lsl r2, r2, 8",
            "orr r5, r5, r1, lsr 4",
            "orr r5, r5, r0, lsr 24",
            "lsl r6, r0, 8",
            "and r1, lr, 0x80000000",
            "cmp r5, r3",
            "cmpeq r6, r2",
            "adc r4, r4, 0xfd",
            "add r4, r4, 0x300",
            "bhs 0xbf698",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs r6, r6, r2",
            "sbc r5, r5, r3",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "mov r0, 0x100000",
            "mov ip, 0x80000",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 1",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 2",
            "lsrs r3, r3, 1",
            "rrx r2, r2",
            "subs lr, r6, r2",
            "sbcs lr, r5, r3",
            "subhs r6, r6, r2",
            "movhs r5, lr",
            "orrhs r0, r0, ip, lsr 3",
            "orrs lr, r5, r6",
            "beq 0xbf758",
            "lsl r5, r5, 4",
            "orr r5, r5, r6, lsr 28",
            "lsl r6, r6, 4",
            "lsl r3, r3, 3",
            "orr r3, r3, r2, lsr 29",
            "lsl r2, r2, 3",
            "lsrs ip, ip, 4",
            "bne 0xbf6b0",
            "tst r1, 0x100000",
            "bne 0xbf764",
            "orr r1, r1, r0",
            "mov r0, 0",
            "mov ip, 0x80000000",
            "b 0xbf6b0",
            "tst r1, 0x100000",
            "orreq r1, r1, r0",
            "moveq r0, 0",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xbf480",
            "subs ip, r5, r3",
            "subseq ip, r6, r2",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "and lr, lr, 0x80000000",
            "orr r1, lr, r1, lsr 12",
            "adds r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, lr}",
            "bxgt lr",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1",
            "b 0xbf480"
        ]
    },
    "fcn.000bed20": {
        "function_address": "0x000bed20",
        "instructions": [
            "subs r2, r1, 1",
            "bxeq lr",
            "blo 0xbee08",
            "cmp r0, r1",
            "bls 0xbedc0",
            "tst r1, r2",
            "beq 0xbedcc",
            "tst r1, 0xe0000000",
            "lsleq r1, r1, 3",
            "moveq r3, 8",
            "movne r3, 1",
            "cmp r1, 0x10000000",
            "cmplo r1, r0",
            "lsllo r1, r1, 4",
            "lsllo r3, r3, 4",
            "blo 0xbed4c",
            "cmp r1, 0x80000000",
            "cmplo r1, r0",
            "lsllo r1, r1, 1",
            "lsllo r3, r3, 1",
            "blo 0xbed60",
            "mov r2, 0",
            "cmp r0, r1",
            "subhs r0, r0, r1",
            "orrhs r2, r2, r3",
            "cmp r0, r1, lsr 1",
            "subhs r0, r0, r1, lsr 1",
            "orrhs r2, r2, r3, lsr 1",
            "cmp r0, r1, lsr 2",
            "subhs r0, r0, r1, lsr 2",
            "orrhs r2, r2, r3, lsr 2",
            "cmp r0, r1, lsr 3",
            "subhs r0, r0, r1, lsr 3",
            "orrhs r2, r2, r3, lsr 3",
            "cmp r0, 0",
            "lsrsne r3, r3, 4",
            "lsrne r1, r1, 4",
            "bne 0xbed78",
            "mov r0, r2",
            "bx lr",
            "moveq r0, 1",
            "movne r0, 0",
            "bx lr",
            "cmp r1, 0x10000",
            "lsrhs r1, r1, 0x10",
            "movhs r2, 0x10",
            "movlo r2, 0",
            "cmp r1, 0x100",
            "lsrhs r1, r1, 8",
            "addhs r2, r2, 8",
            "cmp r1, 0x10",
            "lsrhs r1, r1, 4",
            "addhs r2, r2, 4",
            "cmp r1, 4",
            "addhi r2, r2, 3",
            "addls r2, r2, r1, lsr 1",
            "lsr r0, r0, r2",
            "bx lr",
            "str lr, [sp, -8]!",
            "bl fcn.000bfda8",
            "mov r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "fcn.000bfda8": {
        "function_address": "0x000bfda8",
        "instructions": [
            "push {r1, lr}",
            "mov r0, 8",
            "bl sym.imp.raise",
            "pop {r1, lr}",
            "bx lr"
        ]
    },
    "sym.imp.raise": {
        "function_address": "0x0003ed04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc4c]!"
        ]
    },
    "fcn.000bf7c0": {
        "function_address": "0x000bf7c0",
        "instructions": [
            "and r5, ip, r3, lsr 20",
            "teq r4, ip",
            "teqeq r5, ip",
            "beq 0xbf614",
            "teq r4, ip",
            "bne 0xbf7f4",
            "orrs r4, r0, r1, lsl 12",
            "bne 0xbf614",
            "teq r5, ip",
            "bne 0xbf5f8",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xbf614",
            "teq r5, ip",
            "bne 0xbf810",
            "orrs r5, r2, r3, lsl 12",
            "beq 0xbf5a8",
            "mov r0, r2",
            "mov r1, r3",
            "b 0xbf614",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xbf540",
            "orrs r4, r0, r1, lsl 1",
            "bne 0xbf5f8",
            "orrs r5, r2, r3, lsl 1",
            "bne 0xbf5a8",
            "b 0xbf614"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::HandShakeHeader_": {
        "function_address": "0x0008bcbc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [0x0008bd24]",
            "mov r4, r1",
            "mov r1, r6",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r6",
            "str r3, [r4, 4]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r6",
            "strb r3, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r6",
            "strb r3, [r4, 9]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r0, r5",
            "strb r3, [r4, 0xa]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL12input_bufferixEj": {
        "function_address": "0x0003f454",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x76c]!"
        ]
    },
    "sym.handle_local_infile": {
        "function_address": "0x00045304",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, [r0, 0x28]",
            "ldr r3, [r0, 0x368]",
            "add r6, r6, 0xfe0",
            "add r6, r6, 0xf",
            "ldr r8, [0x000454d8]",
            "bic r6, r6, 0xff0",
            "cmp r3, 0",
            "add r8, pc, r8",
            "sub sp, sp, 8",
            "mov r4, r0",
            "mov r7, r1",
            "bic r6, r6, 0xf",
            "beq 0x45410",
            "ldr r3, [r0, 0x36c]",
            "cmp r3, 0",
            "beq 0x45410",
            "ldr r3, [r0, 0x370]",
            "cmp r3, 0",
            "beq 0x45410",
            "ldr r3, [r0, 0x374]",
            "cmp r3, 0",
            "beq 0x45410",
            "mov r0, r6",
            "mov r1, 0",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "beq 0x4542c",
            "mov r1, r7",
            "add r0, sp, 4",
            "ldr r2, [r4, 0x378]",
            "ldr ip, [r4, 0x368]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x4544c",
            "mov r1, r5",
            "mov r2, r6",
            "ldr r0, [sp, 4]",
            "ldr ip, [r4, 0x36c]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "mov r1, r5",
            "mov r2, r7",
            "mov r0, r4",
            "ble 0x454a4",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "beq 0x45394",
            "ldr r3, [0x000454dc]",
            "mov r0, r4",
            "ldr r3, [r8, r3]",
            "ldr r1, [0x000454e0]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r7, 1",
            "ldr r0, [sp, 4]",
            "ldr ip, [r4, 0x370]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "mov r0, r7",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym.mysql_set_local_infile_default",
            "mov r0, r6",
            "mov r1, 0",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "bne 0x45374",
            "ldr r3, [0x000454dc]",
            "mov r0, r4",
            "ldr r3, [r8, r3]",
            "ldr r1, [0x000454e4]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r7, 1",
            "b 0x45400",
            "ldr r1, [0x000454e8]",
            "mov r2, 0",
            "add r1, r8, r1",
            "mov r0, r4",
            "bl rsym.my_net_write",
            "mov r0, r4",
            "bl rsym.net_flush",
            "ldr r3, [0x000454dc]",
            "add r0, r4, 0x25c",
            "ldr r3, [r8, r3]",
            "add r0, r0, 3",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r0, [sp, 4]",
            "add r1, r4, 0x5f",
            "ldr r2, [0x000454ec]",
            "ldr ip, [r4, 0x374]",
            "mov lr, pc",
            "bx ip",
            "mov r7, 1",
            "str r0, [r4, 0x58]",
            "b 0x453e8",
            "ldr r1, [0x000454e8]",
            "mov r2, 0",
            "add r1, r8, r1",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x453cc",
            "mov r0, r4",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "bne 0x453cc",
            "cmp r7, 0",
            "beq 0x453e8",
            "b 0x45480"
        ]
    },
    "rsym.my_net_write": {
        "function_address": "0x000401b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe84]!"
        ]
    },
    "rsym.set_mysql_error": {
        "function_address": "0x0003cebc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x7c]!"
        ]
    },
    "rsym.mysql_set_local_infile_default": {
        "function_address": "0x0003dd80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6a4]!"
        ]
    },
    "rsym.net_flush": {
        "function_address": "0x0003dc60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x764]!"
        ]
    },
    "sym.free_vio_ssl_acceptor_fd": {
        "function_address": "0x0007a5ec",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym.yaSSL_CTX_free",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_CTX_free": {
        "function_address": "0x0003f0f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9ac]!"
        ]
    },
    "sym.check_date": {
        "function_address": "0x00077c80",
        "instructions": [
            "push {r4, lr}",
            "cmp r1, 0",
            "ldr ip, [0x00077d4c]",
            "lsreq r2, r2, 0x18",
            "add ip, pc, ip",
            "mov r4, r0",
            "sub sp, sp, 8",
            "andeq r0, r2, 1",
            "beq 0x77d38",
            "ldr r1, [0x00077d50]",
            "and r1, r2, r1",
            "cmp r1, 1",
            "beq 0x77ccc",
            "ldr r1, [r4, 4]",
            "cmp r1, 0",
            "beq 0x77d2c",
            "ldr r1, [r4, 8]",
            "cmp r1, 0",
            "beq 0x77d2c",
            "tst r2, 0x2000000",
            "bne 0x77d44",
            "ldr r2, [r4, 4]",
            "cmp r2, 0",
            "beq 0x77d44",
            "ldr r1, [0x00077d54]",
            "ldr r0, [r4, 8]",
            "ldr r1, [ip, r1]",
            "add r1, r1, r2",
            "ldrb r1, [r1, -1]",
            "cmp r0, r1",
            "bls 0x77d44",
            "cmp r2, 2",
            "bne 0x77d2c",
            "ldr r0, [r4]",
            "str r3, [sp, 4]",
            "bl rsym.calc_days_in_year",
            "ldr r2, [0x00077d58]",
            "ldr r3, [sp, 4]",
            "cmp r0, r2",
            "bne 0x77d2c",
            "ldr r2, [r4, 8]",
            "cmp r2, 0x1d",
            "beq 0x77d44",
            "mov r2, 2",
            "str r2, [r3]",
            "mov r0, 1",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x77d38"
        ]
    },
    "rsym.calc_days_in_year": {
        "function_address": "0x0003f8a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x48c]!"
        ]
    },
    "sym.yaSSL::CertManager::SetPrivateKey_yaSSL::x509_const_": {
        "function_address": "0x0007c798",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r5, r0, 0xc",
            "sub sp, sp, 0x490",
            "mov r6, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer8allocateEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer6assignEPKhj",
            "mov r0, r6",
            "bl rsym._ZNK5mySTL4listIPN5yaSSL4x509EE5frontEv",
            "subs r8, r0, 0",
            "beq 0x7c8b0",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov r5, r0",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [sp, 0x47c]",
            "bne 0x7c8c0",
            "mov r1, r5",
            "mov r0, r3",
            "ldr r2, [sp, 0x47c]",
            "add r4, sp, 0x10",
            "mov r5, 0",
            "sub r4, r4, 8",
            "str r3, [sp, 0x480]",
            "bl sym.imp.memcpy",
            "add r1, sp, 0x470",
            "add r1, r1, 0xc",
            "mov r2, r5",
            "mov r3, r5",
            "mov r7, 1",
            "mov r0, r4",
            "str r5, [sp, 0x488]",
            "str r5, [sp, 0x48c]",
            "stm sp, {r5, r7}",
            "bl rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder11DecodeToKeyEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder8GetErrorEv",
            "subs r8, r0, 0",
            "bne 0x7c8d0",
            "ldr r3, [0x0007c8e4]",
            "ldr r2, [sp, 0x28]",
            "mov r0, r4",
            "cmp r2, r3",
            "movne r3, 2",
            "streq r7, [r6, 0x3c]",
            "strne r3, [r6, 0x3c]",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x480]",
            "mov r1, 0",
            "mov r0, r4",
            "ldr r2, [sp, 0x47c]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r8",
            "add sp, sp, 0x490",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7c814",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x480]",
            "mov r1, r5",
            "b 0x7c89c"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer6assignEPKhj": {
        "function_address": "0x0003d6f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb04]!"
        ]
    },
    "rsym._ZNK5mySTL4listIPN5yaSSL4x509EE5frontEv": {
        "function_address": "0x0003e158",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x414]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder11DecodeToKeyEv": {
        "function_address": "0x0003da5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8bc]!"
        ]
    },
    "fcn.0007d18c": {
        "function_address": "0x0007d18c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d1e8]",
            "ldr r3, [0x0007d1ec]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_RMD12HMAC_RMDImplEEEvPT_",
            "ldr r3, [0x0007d1f0]",
            "ldr r1, [0x0007d1f4]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007d1f8]",
            "add r2, r3, 8",
            "ldr r3, [0x0007d1fc]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_8HMAC_RMD12HMAC_RMDImplEEEvPT_": {
        "function_address": "0x0004096c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x95c]!"
        ]
    },
    "fcn.0007d0ec": {
        "function_address": "0x0007d0ec",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d130]",
            "ldr r3, [0x0007d134]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DES7DESImplEEEvPT_",
            "ldr r3, [0x0007d138]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3DES7DESImplEEEvPT_": {
        "function_address": "0x0003f9c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3cc]!"
        ]
    },
    "sym.vio_end": {
        "function_address": "0x0007999c",
        "instructions": [
            "push {r4, lr}",
            "bl rsym.yayaSSL_CleanUp",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.yayaSSL_CleanUp": {
        "function_address": "0x0003ea88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdf4]!"
        ]
    },
    "sym.yaSSL::TLS_hmac_yaSSL::SSL__unsigned_char__unsigned_char_const__unsigned_int__yaSSL::ContentType__bool_": {
        "function_address": "0x00081b10",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldrb r4, [sp, 0x4c]",
            "mov r7, r3",
            "add r8, sp, 0x1c",
            "lsl r3, r3, 0x10",
            "mov r5, r0",
            "mov r6, 0",
            "lsr r0, r3, 0x10",
            "mov sb, r1",
            "mov r1, r8",
            "mov fp, r2",
            "str r6, [sp, 0xc]",
            "str r6, [sp, 0x10]",
            "add sl, sp, 0xc",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL16get_SEQIncrementEb",
            "add r1, sl, 4",
            "bl rsym._ZN5yaSSL6c32toaEjPh",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 0x10]",
            "cmp r3, 2",
            "beq 0x81cb8",
            "cmp r3, 3",
            "beq 0x81c78",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13get_macSecretEb",
            "mov r1, 0",
            "mov r3, r0",
            "mov r0, 8",
            "str r3, [sp, 4]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [sp, 4]",
            "mov r4, r0",
            "mov r1, r3",
            "mov r2, 0x10",
            "bl rsym._ZN5yaSSL8HMAC_MD5C1EPKhj",
            "cmp r4, 0",
            "beq 0x81bc8",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "mov r1, sl",
            "mov r2, 8",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 0x48]",
            "mov r0, r5",
            "strb r3, [sp, 0x14]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r3, [r0, 0x12e]",
            "mov r0, r5",
            "strb r3, [sp, 0x15]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r5, sp, 0x14",
            "ldrb r3, [r0, 0x12f]",
            "mov r1, r8",
            "mov r2, 2",
            "add r0, r5, 3",
            "strb r3, [sp, 0x16]",
            "bl sym.imp.memcpy",
            "mov r1, r5",
            "mov r0, r4",
            "ldr r3, [r4]",
            "mov r2, 5",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "mov r1, sb",
            "mov r2, fp",
            "mov r3, r7",
            "ldr ip, [r4]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13get_macSecretEb",
            "mov r1, 0",
            "mov r3, r0",
            "mov r0, 8",
            "str r3, [sp, 4]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [sp, 4]",
            "mov r4, r0",
            "mov r1, r3",
            "mov r2, 0x14",
            "bl rsym._ZN5yaSSL8HMAC_RMDC1EPKhj",
            "cmp r4, 0",
            "bne 0x81bc0",
            "b 0x81bc8",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13get_macSecretEb",
            "mov r1, 0",
            "mov r3, r0",
            "mov r0, 8",
            "str r3, [sp, 4]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [sp, 4]",
            "mov r4, r0",
            "mov r1, r3",
            "mov r2, 0x14",
            "bl rsym._ZN5yaSSL8HMAC_SHAC1EPKhj",
            "cmp r4, 0",
            "bne 0x81bc0",
            "b 0x81bc8"
        ]
    },
    "rsym._ZN5yaSSL6c16toaEtPh": {
        "function_address": "0x0003dbd0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7c4]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL16get_SEQIncrementEb": {
        "function_address": "0x0003f19c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x93c]!"
        ]
    },
    "rsym._ZN5yaSSL6c32toaEjPh": {
        "function_address": "0x0003e5c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x124]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL13get_macSecretEb": {
        "function_address": "0x0003f784",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x54c]!"
        ]
    },
    "rsym._ZN5yaSSL8HMAC_MD5C1EPKhj": {
        "function_address": "0x0003ef68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xab4]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_": {
        "function_address": "0x0003dae0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x864]!"
        ]
    },
    "rsym._ZN5yaSSL8HMAC_RMDC1EPKhj": {
        "function_address": "0x0003f364",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x80c]!"
        ]
    },
    "rsym._ZN5yaSSL8HMAC_SHAC1EPKhj": {
        "function_address": "0x0003eb24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd8c]!"
        ]
    },
    "sym.intern_filename": {
        "function_address": "0x00049ee0",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r1, r0",
            "sub sp, sp, 0x20c",
            "mov r4, r0",
            "mov r5, r1",
            "beq 0x49f28",
            "mov r1, r5",
            "add r2, sp, 0x204",
            "mov r0, r4",
            "bl rsym.dirname_part",
            "add r1, r5, r0",
            "ldr r0, [sp, 0x204]",
            "add r0, r4, r0",
            "bl sym.imp.strcpy",
            "mov r0, r4",
            "add sp, sp, 0x20c",
            "pop {r4, r5, lr}",
            "bx lr",
            "add r5, sp, 4",
            "mov r0, r5",
            "mov r2, 0x200",
            "bl sym.imp.__strcpy_chk",
            "b 0x49ef8"
        ]
    },
    "rsym.dirname_part": {
        "function_address": "0x0003d9fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8fc]!"
        ]
    },
    "sym.dynstr_append": {
        "function_address": "0x0004dfb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b rsym.dynstr_append_mem"
        ]
    },
    "sym.my_path": {
        "function_address": "0x0004c6e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r8, [0x0004c8d8]",
            "sub sp, sp, 0x24",
            "subs sb, r1, 0",
            "add r8, pc, r8",
            "str r2, [sp, 0x10]",
            "mov r5, r0",
            "beq 0x4c870",
            "add r3, sp, 0x18",
            "mov r2, r3",
            "str r3, [sp, 0xc]",
            "bl rsym.dirname_part",
            "subs r7, r0, 0",
            "bne 0x4c7c8",
            "ldr r0, [0x0004c8dc]",
            "add r0, r8, r0",
            "bl sym.imp.getenv",
            "subs sl, r0, 0",
            "beq 0x4c848",
            "mov r3, 0x2f",
            "strb r3, [sp, 0x1c]",
            "ldr r3, [0x0004c8e0]",
            "str r8, [sp, 0x14]",
            "add r3, r8, r3",
            "strb r7, [sp, 0x1d]",
            "add fp, sp, 0x1c",
            "mov r8, r3",
            "mov r1, 0x3a",
            "mov r0, sl",
            "bl sym.imp.strchr",
            "subs r4, r0, 0",
            "rsb r6, sl, r4",
            "mov r1, sl",
            "mov r2, r6",
            "mov r0, r5",
            "beq 0x4c844",
            "cmp sl, r4",
            "beq 0x4c7ac",
            "bl rsym.strnmov",
            "mov r2, sb",
            "mov r3, r8",
            "mov r1, fp",
            "str r7, [sp]",
            "bl rsym.strxmov",
            "mov r0, r5",
            "mov r1, r7",
            "bl sym.imp.access",
            "cmp r0, 0",
            "beq 0x4c7b4",
            "add sl, r4, 1",
            "b 0x4c754",
            "add r6, r5, r6",
            "cmp r5, 0",
            "ldr r8, [sp, 0x14]",
            "strb r7, [r6, 1]",
            "beq 0x4c848",
            "mov r1, r5",
            "mov r0, r5",
            "bl rsym.intern_filename",
            "mov r0, r5",
            "bl rsym.test_if_hard_path",
            "subs r2, r0, 0",
            "beq 0x4c7f4",
            "mov r0, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x0004c8e4]",
            "mov r1, 0x200",
            "ldr r4, [r8, r3]",
            "mov r0, r4",
            "bl rsym.my_getwd",
            "subs r7, r0, 0",
            "bne 0x4c7e4",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r6, r0",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "mov r1, r7",
            "add ip, r0, 1",
            "mov r2, r4",
            "mov r3, r6",
            "mov r0, r5",
            "str ip, [sp]",
            "bl rsym.bchange",
            "b 0x4c7e4",
            "ldr r8, [sp, 0x14]",
            "ldr r0, [0x0004c8e8]",
            "add r0, r8, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "beq 0x4c870",
            "ldr r2, [sp, 0xc]",
            "mov r0, r5",
            "bl rsym.dirname_part",
            "cmp r0, 0",
            "bne 0x4c7c8",
            "ldr r0, [0x0004c8ec]",
            "add r0, r8, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "beq 0x4c8bc",
            "mov r0, r5",
            "bl rsym.intern_filename",
            "mov r0, r5",
            "bl rsym.strend",
            "cmp r5, r0",
            "moveq r0, r5",
            "beq 0x4c8b0",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0x2f",
            "movne r3, 0x2f",
            "strbne r3, [r0], 1",
            "ldr r1, [sp, 0x10]",
            "bl sym.imp.strcpy",
            "b 0x4c7e4",
            "ldr r0, [0x0004c8f0]",
            "add r0, r8, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "ldreq r1, [0x0004c8f4]",
            "addeq r1, r8, r1",
            "b 0x4c884"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x0003d678",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb54]!"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x0003d720",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xae4]!"
        ]
    },
    "rsym.strnmov": {
        "function_address": "0x0003f4c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x724]!"
        ]
    },
    "rsym.strxmov": {
        "function_address": "0x0003ce68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xb4]!"
        ]
    },
    "sym.imp.access": {
        "function_address": "0x0003e1ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3dc]!"
        ]
    },
    "rsym.intern_filename": {
        "function_address": "0x0003f9ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3dc]!"
        ]
    },
    "rsym.test_if_hard_path": {
        "function_address": "0x0003fa60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x364]!"
        ]
    },
    "rsym.my_getwd": {
        "function_address": "0x00040018",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf94]!"
        ]
    },
    "rsym.bchange": {
        "function_address": "0x0003ebcc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd1c]!"
        ]
    },
    "rsym.strend": {
        "function_address": "0x0003d138",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xed4]!"
        ]
    },
    "fcn.0008acd8": {
        "function_address": "0x0008acd8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ad1c]",
            "ldr r3, [0x0008ad20]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008ad24]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000a2d08": {
        "function_address": "0x000a2d08",
        "instructions": [
            "ldr ip, [0x000a2d44]",
            "ldr r3, [0x000a2d48]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000a2d4c]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000a2d50]",
            "ldr r0, [0x000a2d54]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_CTX_sess_number": {
        "function_address": "0x00085b14",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x2c]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.free_defaults": {
        "function_address": "0x0004e7cc",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 0x20",
            "sub r1, r0, 0x20",
            "mov r2, 0x20",
            "mov r0, sp",
            "bl sym.imp.memcpy",
            "mov r0, sp",
            "mov r1, 0",
            "mov r4, sp",
            "bl rsym.free_root",
            "add sp, sp, 0x20",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_TaoCrypt::Signer_.push_front_TaoCrypt::Signer_": {
        "function_address": "0x000877fc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j": {
        "function_address": "0x0003f088",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9f4]!"
        ]
    },
    "fcn.00094c18": {
        "function_address": "0x00094c18",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, 0",
            "mov r4, r0",
            "cmp r2, 0",
            "mov r5, r2",
            "str r3, [r0]",
            "mov r6, r1",
            "str r2, [r4, 4]",
            "bne 0x94c50",
            "mov r3, 0",
            "str r3, [r4, 0x10]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r1, r6",
            "str r0, [r4]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "b 0x94c3c"
        ]
    },
    "sym.yaSSL::ServerKeyExchange::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008ef0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r2",
            "mov r5, r1",
            "mov r1, r2",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL17ServerKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x8ef68",
            "ldr r3, [r6, 8]",
            "mov r2, r5",
            "mov r0, r3",
            "mov r1, r4",
            "ldr r3, [r3]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 3",
            "str r3, [r0]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL17ServerKeyExchange9createKeyERNS_3SSLE": {
        "function_address": "0x0003f124",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x98c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL9useStatesEv": {
        "function_address": "0x0003f55c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6bc]!"
        ]
    },
    "rsym._ZN5yaSSL6States9useClientEv": {
        "function_address": "0x0003e620",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe4]!"
        ]
    },
    "fcn.000ad4bc": {
        "function_address": "0x000ad4bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000ad54c]",
            "ldr r3, [0x000ad550]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x20]",
            "ldr r2, [r0, 0x1c]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000ad554]",
            "ldr r6, [r4, 0x10]",
            "ldr r3, [r5, r3]",
            "ldr r2, [r4, 0xc]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000ad558]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.00099e6c": {
        "function_address": "0x00099e6c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00099ecc]",
            "ldr r3, [0x00099ed0]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x10]",
            "ldr r2, [r0, 0xc]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x00099ed4]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateCipherSpec__": {
        "function_address": "0x0008b444",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL16ChangeCipherSpecC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL16ChangeCipherSpecC1Ev": {
        "function_address": "0x0003d3a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd34]!"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_TaoCrypt::Source_": {
        "function_address": "0x000aa23c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r3, 2",
            "str r3, [r0]",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r7, r1",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "str r0, [r4, 4]",
            "mov r6, 0",
            "mov r1, r0",
            "mov r2, r5",
            "mov r0, r3",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "str r0, [r4, 4]",
            "str r5, [r4]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "str r6, [r4, 0xc]",
            "mov r1, r7",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeERNS_6SourceE",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.my_tell": {
        "function_address": "0x00055a28",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r1, 1",
            "sub sp, sp, 0x14",
            "mov r2, 0",
            "mov r3, 0",
            "str r1, [sp]",
            "bl sym.imp.lseek64",
            "cmn r0, 1",
            "mov r4, r0",
            "beq 0x55a60",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr",
            "cmn r1, 1",
            "bne 0x55a50",
            "str r1, [sp, 0xc]",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "str r3, [r5]",
            "ldr r1, [sp, 0xc]",
            "b 0x55a50"
        ]
    },
    "sym.imp.lseek64": {
        "function_address": "0x0003f514",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6ec]!"
        ]
    },
    "method.TaoCrypt::RSA_Decryptor_TaoCrypt::RSA_BlockType2_.Decrypt_unsigned_char_const__unsigned_int__unsigned_char__TaoCrypt::RandomNumberGenerator_": {
        "function_address": "0x000bb6e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r4, [r0]",
            "sub sp, sp, 0x38",
            "mov r5, r0",
            "mov r0, r4",
            "mov r8, r2",
            "mov r7, r1",
            "mov r6, r3",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r2, [0x000bb8c8]",
            "cmp r8, r0",
            "add r2, pc, r2",
            "bne 0xbb8a4",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "cmp r8, r0",
            "movne r4, 0",
            "beq 0xbb73c",
            "mov r0, r4",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "add ip, r0, 6",
            "lsr ip, ip, 3",
            "cmp ip, 0",
            "str ip, [sp, 0x2c]",
            "bne 0xbb878",
            "add r0, sp, 0x38",
            "ldr r8, [r0, -0xc]!",
            "mov r1, ip",
            "mov r3, r8",
            "mov sl, 0",
            "mov r2, r8",
            "add r0, r0, 8",
            "str ip, [sp, 0x30]",
            "str sl, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r8",
            "mov r1, sl",
            "str r8, [sp, 0x2c]",
            "str r0, [sp, 0x30]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "ldr sb, [r5]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "add r8, sp, 0xc",
            "mov r2, r0",
            "mov r1, r7",
            "mov r3, sl",
            "add r7, sp, 0x1c",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r3, r8",
            "mov r1, sb",
            "ldr r2, [sp, 0x58]",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt14RSA_PrivateKey16CalculateInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE",
            "ldr r8, [sp, 0x10]",
            "ldr r2, [sp, 0xc]",
            "mov r1, sl",
            "lsl r2, r2, 2",
            "mov r0, r8",
            "bl sym.imp.memset",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r2, [sp, 0x2c]",
            "cmp r0, r2",
            "bhi 0xbb88c",
            "ldr r1, [sp, 0x30]",
            "mov r3, 0",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "mov r0, r4",
            "ldr r4, [sp, 0x30]",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "mov r3, r6",
            "sub r2, r0, 1",
            "mov r1, r4",
            "add r0, r5, 4",
            "bl rsym._ZNK8TaoCrypt14RSA_BlockType25UnPadEPKhjPh",
            "ldr r5, [sp, 0x20]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r4, r0",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x30]",
            "mov r1, 0",
            "mov r0, r5",
            "ldr r2, [sp, 0x2c]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0xbb72c",
            "mov r1, 0",
            "mov r0, ip",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "b 0xbb758",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r2, [sp, 0x2c]",
            "b 0xbb804",
            "ldr r3, [0x000bb8cc]",
            "ldr r1, [0x000bb8d0]",
            "ldr r0, [0x000bb8d4]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xac",
            "mov r2, 0xc6",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt14RSA_PrivateKey16CalculateInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE": {
        "function_address": "0x0003d4ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc5c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt14RSA_BlockType25UnPadEPKhjPh": {
        "function_address": "0x0003f910",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x444]!"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer4ZeroEv": {
        "function_address": "0x0003f754",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x56c]!"
        ]
    },
    "sym.make_password_from_salt_323": {
        "function_address": "0x000477f0",
        "instructions": [
            "push {r4, lr}",
            "ldr ip, [0x00047828]",
            "ldr r3, [0x0004782c]",
            "ldm r1, {r4, lr}",
            "add ip, pc, ip",
            "sub sp, sp, 8",
            "add r3, ip, r3",
            "mov r1, 1",
            "mvn r2, 0",
            "stm sp, {r4, lr}",
            "bl sym.imp.__sprintf_chk",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__sprintf_chk": {
        "function_address": "0x00040318",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd94]!"
        ]
    },
    "sym.yaSSL_get_shared_ciphers": {
        "function_address": "0x00085c04",
        "instructions": [
            "ldr r3, [0x00085c28]",
            "mov r0, r1",
            "ldr r1, [0x00085c2c]",
            "add r3, pc, r3",
            "push {r4, lr}",
            "add r1, r3, r1",
            "bl sym.imp.strncpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007fadc": {
        "function_address": "0x0007fadc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fb38]",
            "ldr r3, [0x0007fb3c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DSS7DSSImplEEEvPT_",
            "ldr r3, [0x0007fb40]",
            "ldr r1, [0x0007fb44]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007fb48]",
            "add r2, r3, 8",
            "ldr r3, [0x0007fb4c]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3DSS7DSSImplEEEvPT_": {
        "function_address": "0x0003ede8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbb4]!"
        ]
    },
    "sym.my_datetime_to_str": {
        "function_address": "0x00078dac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, str.i_K",
            "ldr r3, [0x00078e14]",
            "ldr lr, [r0, 0x14]",
            "ldr r7, [r0]",
            "ldr r6, [r0, 4]",
            "ldr r5, [r0, 8]",
            "ldr r4, [r0, 0xc]",
            "ldr r8, [r0, 0x10]",
            "add ip, pc, ip",
            "sub sp, sp, 0x18",
            "add r3, ip, r3",
            "mov r0, r1",
            "mvn r2, 0",
            "mov r1, 1",
            "str r7, [sp]",
            "str r6, [sp, 4]",
            "str r5, [sp, 8]",
            "str r4, [sp, 0xc]",
            "str r8, [sp, 0x10]",
            "str lr, [sp, 0x14]",
            "bl sym.imp.__sprintf_chk",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.ullstr": {
        "function_address": "0x0005c4c4",
        "instructions": [
            "push {r4, lr}",
            "mov r3, 0xa",
            "mov r4, r2",
            "bl rsym.longlong10_to_str",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.longlong10_to_str": {
        "function_address": "0x00040678",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb54]!"
        ]
    },
    "sym.yaSSL::SSL::bufferedData__": {
        "function_address": "0x000923a4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r5, r0, 0x9c0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "ldr r4, [r0]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "mov r1, 0",
            "mov r0, r4",
            "mov r2, r1",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL12input_bufferEE8iteratorENS2_20yassl_int_cpp_local17SumDataEEET0_T_SA_S9_",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL7Buffers7getDataEv": {
        "function_address": "0x0003ec98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc94]!"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL12input_bufferEE8iteratorENS2_20yassl_int_cpp_local17SumDataEEET0_T_SA_S9_": {
        "function_address": "0x0003f6ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5dc]!"
        ]
    },
    "sym.array_append_string_unique": {
        "function_address": "0x0004d24c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r1]",
            "mov r5, r1",
            "cmp r3, 0",
            "mov r4, r0",
            "mov r7, r2",
            "moveq r6, r1",
            "beq 0x4d294",
            "mov r6, r1",
            "b 0x4d280",
            "ldr r3, [r6, 4]!",
            "cmp r3, 0",
            "beq 0x4d294",
            "mov r0, r3",
            "mov r1, r4",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x4d274",
            "sub r7, r7, 1",
            "add r5, r5, r7, lsl 2",
            "cmp r6, r5",
            "movhs r0, 1",
            "bhs 0x4d2d8",
            "ldr r3, [r6, 4]",
            "add r2, r6, 4",
            "cmp r3, 0",
            "beq 0x4d2d0",
            "str r3, [r6]",
            "mov r1, r2",
            "ldr r3, [r2, 4]!",
            "mov r6, r1",
            "cmp r3, 0",
            "bne 0x4d2b8",
            "str r4, [r6]",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00040744",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xacc]!"
        ]
    },
    "sym._my_b_read_r": {
        "function_address": "0x000541fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x10]",
            "ldr sb, [r0, 0x14]",
            "sub sp, sp, 0x1c",
            "subs sb, sb, r3",
            "mov r4, r0",
            "mov r8, r1",
            "mov r5, r2",
            "ldr r7, [r0, 0x58]",
            "bne 0x54480",
            "cmp r5, 0",
            "beq 0x54478",
            "ldr r0, [r4, 0x14]",
            "ldr r1, [r4, 0x18]",
            "ldm r4, {r2, r3}",
            "rsb r1, r1, r0",
            "adds sl, r2, r1",
            "lsl r2, sl, 0x14",
            "lsr r2, r2, 0x14",
            "add r6, r2, 0xff0",
            "add r6, r6, 0xf",
            "add r6, r6, r5",
            "bic r6, r6, 0xff0",
            "bic r6, r6, 0xf",
            "adc fp, r3, r1, asr 31",
            "ldr r1, [r4, 0x98]",
            "rsb r2, r2, r6",
            "cmp r2, r1",
            "rsbhi r1, r1, 0xff0",
            "addhi r1, r1, 0xf",
            "rsbls r6, r2, r1",
            "addhi r6, r1, r2",
            "bicls r6, r6, 0xff0",
            "bichi r6, r6, 0xff0",
            "bicls r6, r6, 0xf",
            "bichi r6, r6, 0xf",
            "addls r6, r6, r2",
            "rsbhi r6, r6, r2",
            "ldr r2, [r4, 0x64]",
            "cmp r2, 4",
            "beq 0x542d8",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "str r0, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "mov r2, r1",
            "mov r1, r0",
            "subs r1, r1, sl",
            "sbc r2, r2, fp",
            "mov r0, 0",
            "cmp r0, r2",
            "bne 0x542d8",
            "cmp r6, r1",
            "ldrhi r1, [sp, 0x10]",
            "rsbhi r6, sl, r1",
            "cmp r6, 0",
            "beq 0x5444c",
            "mov r0, r4",
            "mov r2, sl",
            "mov r3, fp",
            "bl fcn.000535f0",
            "cmp r0, 0",
            "beq 0x54410",
            "ldr r0, [r4, 0x88]",
            "cmp r0, 0",
            "blt 0x54460",
            "ldr r3, [r4, 0x8c]",
            "cmp r3, 0",
            "beq 0x54334",
            "mov r1, 0",
            "mov r2, sl",
            "mov r3, fp",
            "str r1, [sp]",
            "str r1, [sp, 4]",
            "bl rsym.my_seek",
            "cmn r0, 1",
            "beq 0x5449c",
            "ldr r0, [r4, 0x88]",
            "ldr r3, [r4, 0x9c]",
            "mov r2, r6",
            "ldr r1, [r4, 0x18]",
            "bl rsym.my_read",
            "ldr r1, [r4, 0x18]",
            "cmn r0, 1",
            "moveq r3, r0",
            "movne r3, r0",
            "moveq r0, 0",
            "subne r2, r0, 1",
            "mvneq r2, 1",
            "add r0, r1, r0",
            "cmp r3, r6",
            "str r0, [r4, 0x14]",
            "moveq r1, 0",
            "movne r1, r3",
            "subne r2, r3, 1",
            "str r1, [r4, 0x90]",
            "stm r4, {sl, fp}",
            "str r1, [r7, 0x9c]",
            "ldr r1, [r4, 0x14]",
            "str sl, [r7, 0x80]",
            "str fp, [r7, 0x84]",
            "str r1, [r7, 0x90]",
            "ldr r6, [r4, 0x58]",
            "ldr r1, [r6, 0x98]",
            "add r0, r6, 0x20",
            "str r1, [r6, 0x94]",
            "str r2, [sp, 8]",
            "str r3, [sp, 0xc]",
            "bl sym.imp.pthread_cond_broadcast",
            "mov r0, r6",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r1, [r4, 0x18]",
            "ldr r2, [sp, 8]",
            "ldr r3, [sp, 0xc]",
            "cmn r2, 3",
            "mov r2, 0",
            "str r1, [r4, 0x10]",
            "str r2, [r4, 0x8c]",
            "bhi 0x5444c",
            "cmp r3, r5",
            "movlo r6, r3",
            "movhs r6, r5",
            "mov r0, r8",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x10]",
            "subs r5, r5, r6",
            "add r3, r3, r6",
            "str r3, [r4, 0x10]",
            "beq 0x54478",
            "add sb, sb, r6",
            "add r8, r8, r6",
            "b 0x5422c",
            "ldr r2, [r7, 0x9c]",
            "str r2, [r4, 0x90]",
            "ldr r3, [r7, 0x90]",
            "cmn r2, 1",
            "str r3, [r4, 0x14]",
            "add r2, r7, 0x80",
            "ldm r2, {r1, r2}",
            "stm r4, {r1, r2}",
            "ldrne r1, [r4, 0x18]",
            "rsbne r3, r1, r3",
            "subne r2, r3, 1",
            "bne 0x543c4",
            "ldr r3, [r4, 0x18]",
            "str r0, [r4, 0x8c]",
            "str r3, [r4, 0x10]",
            "str sb, [r4, 0x90]",
            "mov r0, 1",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r4, 0x18]",
            "mov r1, 0",
            "str r3, [r4, 0x14]",
            "mvn r2, 0",
            "mov r3, r1",
            "b 0x54378",
            "mov r0, 0",
            "b 0x54454",
            "mov r0, r8",
            "mov r1, r3",
            "mov r2, sb",
            "bl sym.imp.memcpy",
            "add r8, r8, sb",
            "rsb r5, sb, r5",
            "b 0x54224",
            "cmn r1, 1",
            "bne 0x54330",
            "ldr r5, [r4, 0x58]",
            "str r1, [r4, 0x90]",
            "ldr r3, [r5, 0x98]",
            "add r0, r5, 0x20",
            "str r3, [r5, 0x94]",
            "bl sym.imp.pthread_cond_broadcast",
            "mov r0, r5",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 1",
            "b 0x54454"
        ]
    },
    "fcn.000535f0": {
        "function_address": "0x000535f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [r0, 0x58]",
            "mov r5, r0",
            "mov r0, r4",
            "mov r6, r2",
            "mov r7, r3",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [r4, 0x94]",
            "ldr r2, [r4, 0x88]",
            "sub r3, r3, 1",
            "cmp r2, 0",
            "str r3, [r4, 0x94]",
            "beq 0x536c4",
            "cmp r5, r2",
            "beq 0x53730",
            "cmp r3, 0",
            "beq 0x536a4",
            "add r5, r4, 0x20",
            "b 0x53640",
            "bl sym.imp.pthread_cond_wait",
            "ldr r3, [r4, 0x90]",
            "mov r0, r5",
            "cmp r3, 0",
            "mov r1, r4",
            "beq 0x53660",
            "ldr r2, [r4, 0x84]",
            "cmp r2, r7",
            "bhs 0x536b0",
            "ldr r2, [r4, 0x88]",
            "cmp r2, 0",
            "bne 0x5363c",
            "cmp r3, 0",
            "beq 0x53680",
            "ldr r3, [r4, 0x84]",
            "cmp r3, r7",
            "bhs 0x53770",
            "ldr r3, [r4, 0x8c]",
            "str r3, [r4, 0x90]",
            "mov r3, 0",
            "str r3, [r4, 0x9c]",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r0, r4, 0x50",
            "bl sym.imp.pthread_cond_signal",
            "b 0x53634",
            "bne 0x53690",
            "ldr r2, [r4, 0x80]",
            "cmp r2, r6",
            "blo 0x53660",
            "b 0x53690",
            "cmp r3, 0",
            "addne r5, r4, 0x20",
            "bne 0x536d8",
            "b 0x53728",
            "bl sym.imp.pthread_cond_wait",
            "ldr r3, [r4, 0x90]",
            "mov r0, r5",
            "cmp r3, 0",
            "mov r1, r4",
            "beq 0x536f8",
            "ldr r2, [r4, 0x84]",
            "cmp r2, r7",
            "bhs 0x5375c",
            "ldr r2, [r4, 0x94]",
            "cmp r2, 0",
            "bne 0x536d4",
            "cmp r3, 0",
            "beq 0x53728",
            "ldr r3, [r4, 0x84]",
            "cmp r3, r7",
            "blo 0x53728",
            "bne 0x53690",
            "ldr r3, [r4, 0x80]",
            "cmp r3, r6",
            "bhs 0x53690",
            "mov r0, 1",
            "b 0x5369c",
            "cmp r3, 0",
            "beq 0x53728",
            "add r5, r4, 0x50",
            "mov r0, r5",
            "mov r1, r4",
            "bl sym.imp.pthread_cond_wait",
            "ldr r3, [r4, 0x94]",
            "cmp r3, 0",
            "bne 0x5373c",
            "mov r0, 1",
            "b 0x5369c",
            "bne 0x53690",
            "ldr r2, [r4, 0x80]",
            "cmp r2, r6",
            "blo 0x536f8",
            "b 0x53690",
            "bne 0x53690",
            "ldr r3, [r4, 0x80]",
            "cmp r3, r6",
            "blo 0x53680",
            "b 0x53690"
        ]
    },
    "rsym.my_read": {
        "function_address": "0x0003e2c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x324]!"
        ]
    },
    "sym.imp.pthread_cond_broadcast": {
        "function_address": "0x0003dd98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x694]!"
        ]
    },
    "sym.yaSSL::SSL::CompressionOn___const": {
        "function_address": "0x00091bcc",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r0, [r0, 0x12d]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt.ModularRoot_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000acd7c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "ldr r5, [sp, 0x70]",
            "add r4, sp, 0x28",
            "mov sl, r0",
            "mov r6, r2",
            "mov r0, r4",
            "mov r2, r5",
            "add r7, sp, 0x38",
            "ldr r8, [sp, 0x74]",
            "mov fp, r3",
            "mov sb, r1",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r3, r5",
            "mov r2, r6",
            "mov r0, r7",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "add r6, sp, 8",
            "add r0, r4, 8",
            "ldr r1, [sp, 0x2c]",
            "ldr r2, [sp, 0x28]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r4, sp, 0x18",
            "mov r1, sb",
            "mov r0, r6",
            "mov r2, r8",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r3, r8",
            "mov r2, fp",
            "mov r0, r4",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr ip, [sp, 0x78]",
            "mov r3, r4",
            "mov r1, r7",
            "mov r2, r5",
            "mov r0, sl",
            "stm sp, {r8, ip}",
            "bl rsym._ZN8TaoCrypt3CRTERKNS_7IntegerES2_S2_S2_S2_",
            "add r0, r4, 8",
            "ldr r1, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r4, [sp, 0x3c]",
            "ldr r2, [sp, 0x38]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sl",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3CRTERKNS_7IntegerES2_S2_S2_S2_": {
        "function_address": "0x0003f8b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x484]!"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::operator_TaoCrypt::DSA_PublicKey_const_": {
        "function_address": "0x000a146c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x44",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKeyC1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey4SwapERS0_",
            "ldr r5, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldm sp, {r2, r5}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "add sp, sp, 0x44",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKeyC1ERKS0_": {
        "function_address": "0x0003da74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8ac]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey4SwapERS0_": {
        "function_address": "0x0003df48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x574]!"
        ]
    },
    "sym.yaSSL_get_error": {
        "function_address": "0x00085d98",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States4WhatEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL3SSL9getStatesEv": {
        "function_address": "0x0003cd78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x154]!"
        ]
    },
    "rsym._ZNK5yaSSL6States4WhatEv": {
        "function_address": "0x0003eb78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd54]!"
        ]
    },
    "fcn.000ab0cc": {
        "function_address": "0x000ab0cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "sub sp, sp, 8",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "mov r7, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, r5",
            "mov r2, r5",
            "mov r3, r5",
            "add r0, r0, 8",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "mov r0, r4",
            "mov r2, r6",
            "mov r3, r8",
            "bl rsym._ZN8TaoCrypt7Integer9RandomizeERNS_21RandomNumberGeneratorERKS0_S4_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer9RandomizeERNS_21RandomNumberGeneratorERKS0_S4_": {
        "function_address": "0x0003d318",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd94]!"
        ]
    },
    "fcn.0007d9b0": {
        "function_address": "0x0007d9b0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007da44]",
            "ldr r3, [0x0007da48]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x170",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007da4c]",
            "mov r1, 8",
            "ldr r2, [r4, r2]",
            "add r6, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, r1",
            "add r7, r0, 0x10",
            "add r4, r0, 0xc8",
            "add ip, r0, 0xd8",
            "str r6, [r0, 0xc]",
            "mov r6, 0",
            "str r7, [r0, 8]",
            "str r6, [r0, 0x30]",
            "str r1, [r0, 0xbc]",
            "str r4, [r0, 0xc0]",
            "str ip, [r0, 0xc4]",
            "str r3, [r0, 0xec]",
            "str r2, [r0, 0xb8]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0xe8]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.00092b64": {
        "function_address": "0x00092b64",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10SSL_METHODEEEvPT_",
            "ldr r0, [r4, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "mov r1, 0",
            "mov r2, 0",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "add r0, r4, 0xf4",
            "bl rsym._ZN5yaSSL5MutexD1Ev",
            "add r0, r4, 0xa4",
            "bl rsym._ZN5yaSSL7IntegerD1Ev",
            "add r0, r4, 0xa0",
            "bl rsym._ZN5yaSSL7IntegerD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_10SSL_METHODEEEvPT_": {
        "function_address": "0x0003fb74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2ac]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_": {
        "function_address": "0x0003ff7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xffc]!"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_": {
        "function_address": "0x0003d048",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf74]!"
        ]
    },
    "rsym._ZN5yaSSL5MutexD1Ev": {
        "function_address": "0x0003f4cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x71c]!"
        ]
    },
    "rsym._ZN5yaSSL7IntegerD1Ev": {
        "function_address": "0x0003d72c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xadc]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev": {
        "function_address": "0x0003e11c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x43c]!"
        ]
    },
    "sym.vio_ssl_close": {
        "function_address": "0x0007a524",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 0x98]",
            "mov r5, r0",
            "cmp r4, 0",
            "beq 0x7a54c",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym.yaSSL_set_quiet_shutdown",
            "mov r0, r4",
            "bl rsym.yaSSL_shutdown",
            "mov r0, r5",
            "bl rsym.vio_close",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_set_quiet_shutdown": {
        "function_address": "0x0003e17c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3fc]!"
        ]
    },
    "rsym.yaSSL_shutdown": {
        "function_address": "0x0003d3e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd0c]!"
        ]
    },
    "rsym.vio_close": {
        "function_address": "0x0003eed8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb14]!"
        ]
    },
    "fcn.00094c70": {
        "function_address": "0x00094c70",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r3",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL9X509_NAMEC1EPKcj",
            "mov r1, r5",
            "ldr r2, [sp, 0x10]",
            "add r0, r4, 0x14",
            "bl rsym._ZN5yaSSL9X509_NAMEC1EPKcj",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x18]",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12StringHolderC1EPKci",
            "ldr r1, [sp, 0x1c]",
            "ldr r2, [sp, 0x20]",
            "add r0, r4, 0x34",
            "bl rsym._ZN5yaSSL12StringHolderC1EPKci",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL9X509_NAMEC1EPKcj": {
        "function_address": "0x0003e4e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1b4]!"
        ]
    },
    "rsym._ZN5yaSSL12StringHolderC1EPKci": {
        "function_address": "0x0003efe0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa64]!"
        ]
    },
    "sym.yaSSL::CreateFortezzaClient__": {
        "function_address": "0x0008b18c",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0008b1bc]",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 0x1bc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b1c0]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetAlgoId__": {
        "function_address": "0x0009b200",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "ldr r5, [r3, 0x10]",
            "ldr r4, [0x0009b34c]",
            "cmp r5, 0",
            "add r4, pc, r4",
            "mov r6, r0",
            "movne r5, 0",
            "beq 0x9b230",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r0, [r6, 4]",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9b328",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 6",
            "ldrne r3, [0x0009b350]",
            "strne r3, [r0, 0x10]",
            "bne 0x9b224",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "subs r2, r0, 0",
            "beq 0x9b2fc",
            "ldr r0, [r6, 4]",
            "ldr r3, [r0, 0xc]",
            "ldr ip, [r0]",
            "add r1, r3, 1",
            "cmp r3, ip",
            "str r1, [r0, 0xc]",
            "sublo r2, r2, 1",
            "blo 0x9b2b4",
            "b 0x9b328",
            "ldr r3, [r0, 0xc]",
            "ldr ip, [r0]",
            "add r1, r3, 1",
            "cmp r3, ip",
            "str r1, [r0, 0xc]",
            "sub r2, r2, 1",
            "bhs 0x9b328",
            "ldr r1, [r0, 4]",
            "cmp r2, 0",
            "ldrb r3, [r1, r3]",
            "add r5, r5, r3",
            "bne 0x9b298",
            "ldr r3, [0x0009b354]",
            "ldr r2, [0x0009b358]",
            "cmp r5, r2",
            "cmpne r5, r3",
            "beq 0x9b224",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 5",
            "beq 0x9b308",
            "ldr r3, [r6, 4]",
            "ldr r2, [0x0009b35c]",
            "mov r5, 0",
            "str r2, [r3, 0x10]",
            "b 0x9b224",
            "mov r5, r2",
            "ldr r0, [r6, 4]",
            "b 0x9b2dc",
            "ldr r0, [r6, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 0",
            "ldrne r3, [r6, 4]",
            "ldrne r2, [0x0009b360]",
            "movne r5, 0",
            "strne r2, [r3, 0x10]",
            "b 0x9b224",
            "ldr r3, [0x0009b364]",
            "ldr r1, [0x0009b368]",
            "ldr r0, [0x0009b36c]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv": {
        "function_address": "0x0003f970",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x404]!"
        ]
    },
    "rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE": {
        "function_address": "0x0003d354",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd6c]!"
        ]
    },
    "rsym._ZN8TaoCrypt6Source4nextEv": {
        "function_address": "0x0003ce20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xe4]!"
        ]
    },
    "sym.TaoCrypt::DER_Encoder::SetAlgoID_TaoCrypt::HashType__unsigned_char_": {
        "function_address": "0x0009a6fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr ip, [0x0009a800]",
            "ldr r3, [0x0009a804]",
            "cmp r1, ip",
            "add r3, pc, r3",
            "sub sp, sp, 0x10",
            "mov r4, r2",
            "beq 0x9a7e8",
            "ldr r2, [0x0009a808]",
            "cmp r1, r2",
            "beq 0x9a7d0",
            "cmp r1, 0x58",
            "beq 0x9a74c",
            "ldr r3, [0x0009a80c]",
            "mov r5, 0",
            "str r3, [r0, 4]",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr sb, [0x0009a810]",
            "mov r5, 7",
            "add sb, r3, sb",
            "add sb, sb, 0xf4",
            "mov r0, 5",
            "add sl, sp, 8",
            "mov r1, sl",
            "bl rsym._ZN8TaoCrypt9SetLengthEjPh",
            "mov r7, r0",
            "add r0, r0, r5",
            "mov r1, sp",
            "add r0, r0, 1",
            "bl rsym._ZN8TaoCrypt11SetSequenceEjPh",
            "add r2, sp, 0x10",
            "add r3, r2, r0",
            "add r6, r0, 1",
            "mov ip, 6",
            "strb ip, [r3, -0x10]",
            "mov r1, sp",
            "mov r2, r6",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "add r8, r6, r7",
            "mov r1, sl",
            "mov r2, r7",
            "add r0, r4, r6",
            "bl sym.imp.memcpy",
            "mov r2, r5",
            "add r0, r4, r8",
            "mov r1, sb",
            "bl sym.imp.memcpy",
            "add r5, r8, r5",
            "b 0x9a73c",
            "ldr sb, [0x0009a810]",
            "mov r5, 0xa",
            "add sb, r3, sb",
            "add sb, sb, 0xe8",
            "mov r0, 8",
            "b 0x9a760",
            "ldr sb, [0x0009a810]",
            "mov r5, 0xa",
            "add sb, r3, sb",
            "add sb, sb, 0xdc",
            "mov r0, 8",
            "b 0x9a760"
        ]
    },
    "rsym._ZN8TaoCrypt9SetLengthEjPh": {
        "function_address": "0x0003d36c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd5c]!"
        ]
    },
    "rsym._ZN8TaoCrypt11SetSequenceEjPh": {
        "function_address": "0x0003d960",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x964]!"
        ]
    },
    "sym.my_snprintf": {
        "function_address": "0x0005c8b0",
        "instructions": [
            "push {r2, r3}",
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add ip, sp, 0x14",
            "mov r3, ip",
            "ldr r2, [sp, 0x10]",
            "str ip, [sp, 4]",
            "bl rsym.my_vsnprintf",
            "add sp, sp, 0xc",
            "pop {lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "rsym.my_vsnprintf": {
        "function_address": "0x0003ee24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb8c]!"
        ]
    },
    "fcn.00084bcc": {
        "function_address": "0x00084bcc",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_sha1_result": {
        "function_address": "0x00057470",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, [r0, 0x1c]",
            "mov r4, r0",
            "cmp r6, 0",
            "mov r5, r1",
            "beq 0x574c4",
            "mov r3, 0",
            "asr r1, r3, 2",
            "mvn r2, r3",
            "add r1, r1, 2",
            "ldr r1, [r4, r1, lsl 2]",
            "and r2, r2, 3",
            "lsl r2, r2, 3",
            "lsr r2, r1, r2",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "bne 0x5748c",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldrsh r3, [r0, 0x24]",
            "cmp r3, 0x37",
            "bgt 0x5756c",
            "add r0, r3, 1",
            "mvn r2, 0x7f",
            "add r3, r4, r3",
            "add r7, r4, 0x26",
            "strb r2, [r3, 0x26]",
            "mov r1, r6",
            "rsb r2, r0, 0x38",
            "add r0, r7, r0",
            "bl sym.imp.memset",
            "mov r3, 0x38",
            "strh r3, [r4, 0x24]",
            "ldr r3, [r4]",
            "ldr r2, [r4, 4]",
            "lsr r0, r3, 0x10",
            "lsr r1, r3, 8",
            "lsr lr, r2, 8",
            "lsr ip, r3, 0x18",
            "lsr r8, r2, 0x18",
            "lsr r6, r2, 0x10",
            "strb r3, [r4, 0x65]",
            "strb lr, [r4, 0x60]",
            "strb r2, [r4, 0x61]",
            "strb ip, [r4, 0x62]",
            "strb r0, [r4, 0x63]",
            "strb r1, [r4, 0x64]",
            "mov r0, r4",
            "strb r8, [r4, 0x5e]",
            "strb r6, [r4, 0x5f]",
            "bl fcn.00056e50",
            "mov r2, 0x40",
            "mov r0, r7",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r3, 0",
            "mov r2, 0",
            "stm r4, {r2, r3}",
            "mov r3, 1",
            "str r3, [r4, 0x1c]",
            "b 0x57488",
            "add r0, r3, 1",
            "add r7, r4, 0x26",
            "add r3, r4, r3",
            "mvn r2, 0x7f",
            "strb r2, [r3, 0x26]",
            "mov r1, r6",
            "rsb r2, r0, 0x40",
            "add r0, r7, r0",
            "bl sym.imp.memset",
            "mov r3, 0x40",
            "strh r3, [r4, 0x24]",
            "mov r0, r4",
            "bl fcn.00056e50",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, 0x38",
            "bl sym.imp.memset",
            "mov r3, 0x38",
            "strh r3, [r4, 0x24]",
            "b 0x574fc"
        ]
    },
    "sym.yaSSL::Connection::CleanMaster__": {
        "function_address": "0x0008bae8",
        "instructions": [
            "ldrb r3, [r0, 0x129]",
            "push {r4, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "bne 0x8bb14",
            "add r0, r0, 4",
            "mov r1, 0x30",
            "ldr r2, [r4, 0x134]",
            "bl rsym._ZN5yaSSL5cleanEPVhjRNS_10RandomPoolE",
            "mov r3, 1",
            "strb r3, [r4, 0x129]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::addBuffer_yaSSL::output_buffer_": {
        "function_address": "0x00092130",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x9c0",
            "mov r4, r1",
            "bl rsym._ZN5yaSSL7Buffers12useHandShakeEv",
            "mov r1, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9push_backES3_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7Buffers12useHandShakeEv": {
        "function_address": "0x0003d15c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xebc]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9push_backES3_": {
        "function_address": "0x0003f988",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3f4]!"
        ]
    },
    "fcn.000afa80": {
        "function_address": "0x000afa80",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 4",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add r7, r5, 0x30",
            "add ip, r5, 0x10",
            "add r3, r6, 0x10",
            "ldm r3, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, r7",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r8, [0x000afb00]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000afb04]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "method.unsigned_int_TaoCrypt::DivideThreeWordsByTwo_unsigned_int__TaoCrypt.DWord__unsigned_int__unsigned_int__unsigned_int__TaoCrypt::DWord_": {
        "function_address": "0x000acff4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "str r2, [sp, 0xc]",
            "mov r5, r0",
            "ldr r2, [0x000ad1b8]",
            "ldr r0, [r0, 8]",
            "ldr r3, [sp, 0xc]",
            "add r2, pc, r2",
            "cmp r0, r3",
            "str r2, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "add r6, r5, 8",
            "addlo r4, r5, 4",
            "blo 0xad040",
            "bne 0xad190",
            "ldr r3, [r5, 4]",
            "add r4, r5, 4",
            "cmp r3, r1",
            "bhs 0xad190",
            "ldr sl, [sp, 0xc]",
            "cmn sl, 1",
            "beq 0xad064",
            "mov r1, r0",
            "add r2, sl, 1",
            "ldr r0, [r4]",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "ldr sl, [sp, 0xc]",
            "ldr fp, [sp, 0x14]",
            "mov sb, sl",
            "mov sl, 0",
            "stm sp, {sb, sl}",
            "mov r7, fp",
            "mov r8, 0",
            "umull fp, ip, r0, r7",
            "ldr r1, [sp]",
            "ldr r2, [r5]",
            "umull sb, sl, r0, r1",
            "subs r2, r2, fp",
            "sbc r3, r2, r2",
            "str r2, [r5]",
            "str sb, [sp, 0x20]",
            "str sl, [sp, 0x24]",
            "ldr sb, [r4]",
            "rsb r1, r3, 0",
            "ldr r3, [sp, 0x20]",
            "subs fp, sb, ip",
            "sbc ip, sb, sb",
            "str r3, [sp, 0x18]",
            "str sl, [sp, 0x1c]",
            "subs r2, fp, r1",
            "sbc r3, ip, 0",
            "add sl, sp, 0x18",
            "ldm sl, {sb, sl}",
            "subs r2, r2, sb",
            "sbc r3, r3, sl",
            "str r2, [r4]",
            "ldr r1, [r5, 8]",
            "mov r2, r4",
            "add r1, r1, r3",
            "str r1, [r5, 8]",
            "ldm sp, {fp, ip}",
            "cmp r1, 0",
            "bne 0xad114",
            "ldr r3, [r2]",
            "ldr r1, [sp, 0xc]",
            "cmp r1, r3",
            "blo 0xad114",
            "beq 0xad17c",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r5]",
            "rsbs sb, r7, r3",
            "rsc sl, r8, 0",
            "str sb, [r5]",
            "ldr r3, [r2]",
            "rsb r1, sl, 0",
            "rsbs sb, fp, r3",
            "rsc sl, ip, 0",
            "subs r3, sb, r1",
            "sbc r4, sl, 0",
            "str r3, [r2]",
            "ldr r1, [r6]",
            "adds r0, r0, 1",
            "add r1, r1, r4",
            "str r1, [r6]",
            "bne 0xad0ec",
            "ldr sl, [sp, 0x10]",
            "ldr r3, [0x000ad1bc]",
            "ldr r1, [0x000ad1c0]",
            "ldr r0, [0x000ad1c4]",
            "add r3, sl, r3",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x1c",
            "ldr r2, [0x000ad1c8]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [r5]",
            "ldr sb, [sp, 0x14]",
            "cmp sb, r3",
            "bls 0xad118",
            "b 0xad108",
            "ldr sb, [sp, 0x10]",
            "ldr r3, [0x000ad1bc]",
            "ldr r1, [0x000ad1c0]",
            "ldr r0, [0x000ad1cc]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x1c",
            "ldr r2, [0x000ad1d0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.000bfd8c": {
        "function_address": "0x000bfd8c",
        "instructions": [
            "sub sp, sp, 8",
            "push {sp, lr}",
            "bl fcn.000bff38",
            "ldr lr, [sp, 4]",
            "add sp, sp, 8",
            "pop {r2, r3}",
            "bx lr"
        ]
    },
    "sym.mysql_detach_stmt_list": {
        "function_address": "0x00074b1c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r5, [0x00074ba4]",
            "ldr r3, [0x00074ba8]",
            "add r5, pc, r5",
            "ldr r2, [r5, r3]",
            "sub sp, sp, 0x204",
            "ldr r4, [r0]",
            "mov r3, r1",
            "mov sl, r0",
            "ldr r2, [r2, 0xe0]",
            "mov r0, sp",
            "ldr r1, [0x00074bac]",
            "bl rsym.my_snprintf",
            "cmp r4, 0",
            "mov r6, sp",
            "beq 0x74b90",
            "ldr r3, [0x00074bb0]",
            "mov r7, 0",
            "ldr r8, [r5, r3]",
            "ldr r5, [r4, 8]",
            "ldr r1, [0x00074bb4]",
            "mov r0, r5",
            "ldr r2, [r8]",
            "mov r3, r6",
            "bl rsym.set_stmt_error",
            "str r7, [r5, 0x2c]",
            "ldr r4, [r4, 4]",
            "cmp r4, 0",
            "bne 0x74b68",
            "mov r3, 0",
            "str r3, [sl]",
            "add sp, sp, 0x204",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym.my_snprintf": {
        "function_address": "0x0003ed10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc44]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::RC4::RC4Impl__yaSSL::RC4::RC4Impl_": {
        "function_address": "0x00080cd0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007fa3c": {
        "function_address": "0x0007fa3c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fa80]",
            "ldr r3, [0x0007fa84]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RSA7RSAImplEEEvPT_",
            "ldr r3, [0x0007fa88]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3RSA7RSAImplEEEvPT_": {
        "function_address": "0x0003f490",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x744]!"
        ]
    },
    "fcn.0008aa80": {
        "function_address": "0x0008aa80",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008aac4]",
            "ldr r3, [0x0008aac8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x2c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008aacc]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007c05c": {
        "function_address": "0x0007c05c",
        "instructions": [
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "mov r4, r0",
            "mov r5, r1",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "str r0, [r4, 8]",
            "str r5, [r4, 0xc]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007bed8": {
        "function_address": "0x0007bed8",
        "instructions": [
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0]",
            "mov r4, r0",
            "mov r5, r1",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "stmib r4, {r0, r5}",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_strntol_8bit": {
        "function_address": "0x0005d524",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r5, r1, r2",
            "mov r4, r1",
            "cmp r1, r5",
            "ldr r1, [sp, 0x2c]",
            "mov r2, 0",
            "str r2, [r1]",
            "mov r8, r3",
            "bhs 0x5d714",
            "ldr r2, [r0, 0x20]",
            "ldrb r3, [r4]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5d714",
            "mov r6, r4",
            "b 0x5d57c",
            "ldrb r3, [r6]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5d588",
            "add r6, r6, 1",
            "cmp r5, r6",
            "bhi 0x5d568",
            "cmp r6, r5",
            "beq 0x5d6d8",
            "ldrb r7, [r6]",
            "cmp r7, 0x2d",
            "addeq r6, r6, 1",
            "moveq fp, 1",
            "beq 0x5d690",
            "cmp r7, 0x2b",
            "beq 0x5d688",
            "mov r1, r8",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r8",
            "mov sl, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "mov fp, 0",
            "mov sb, 0",
            "mov r2, r6",
            "mov r0, sb",
            "sub r3, r7, 0x30",
            "and r3, r3, 0xff",
            "cmp r3, 9",
            "mov ip, r2",
            "bls 0x5d614",
            "sub r3, r7, 0x41",
            "cmp r3, 0x19",
            "subls r3, r7, 0x37",
            "andls r3, r3, 0xff",
            "bls 0x5d614",
            "sub r3, r7, 0x61",
            "cmp r3, 0x19",
            "bhi 0x5d63c",
            "sub r3, r7, 0x57",
            "and r3, r3, 0xff",
            "cmp r8, r3",
            "ble 0x5d63c",
            "cmp r0, sl",
            "bhi 0x5d680",
            "beq 0x5d678",
            "mla r0, r8, r0, r3",
            "ldrb r7, [r2, 1]!",
            "cmp r5, r2",
            "bne 0x5d5d8",
            "mov ip, r5",
            "cmp ip, r6",
            "beq 0x5d6d8",
            "ldr r2, [sp, 0x28]",
            "cmp r2, 0",
            "strne ip, [r2]",
            "cmp fp, 0",
            "beq 0x5d6bc",
            "cmp r0, 0x80000000",
            "bhi 0x5d700",
            "cmp sb, 0",
            "bne 0x5d71c",
            "cmp fp, 0",
            "rsbne r0, r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r3, r1",
            "bls 0x5d628",
            "mov sb, 1",
            "b 0x5d62c",
            "add r6, r6, 1",
            "mov fp, 0",
            "cmp r6, r5",
            "ldrb r7, [r6]",
            "beq 0x5d6d8",
            "mov r1, r8",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r8",
            "mov sl, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "b 0x5d5cc",
            "cmp r0, 0",
            "bge 0x5d660",
            "ldr r2, [sp, 0x2c]",
            "mov r3, 0x22",
            "str r3, [r2]",
            "mvn r0, 0x80000000",
            "b 0x5d670",
            "ldr r2, [sp, 0x28]",
            "ldr r1, [sp, 0x2c]",
            "mov r3, 0x21",
            "cmp r2, 0",
            "str r3, [r1]",
            "ldrne r2, [sp, 0x28]",
            "ldreq r0, [sp, 0x28]",
            "strne r4, [r2]",
            "movne r0, 0",
            "b 0x5d670",
            "ldr r1, [sp, 0x2c]",
            "mov r3, 0x22",
            "str r3, [r1]",
            "mov r0, 0x80000000",
            "b 0x5d670",
            "mov r6, r4",
            "b 0x5d588",
            "ldr r1, [sp, 0x2c]",
            "cmp fp, 0",
            "mov r3, 0x22",
            "str r3, [r1]",
            "mvneq r0, 0x80000000",
            "movne r0, 0x80000000",
            "b 0x5d670"
        ]
    },
    "sym.yaSSL::c24to32_unsigned_char_const_": {
        "function_address": "0x00091510",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add r1, sp, 4",
            "bl rsym._ZN5yaSSL7c24to32EPKhRj",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7c24to32EPKhRj": {
        "function_address": "0x0003f688",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5f4]!"
        ]
    },
    "fcn.000936c8": {
        "function_address": "0x000936c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x20",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL6CryptoC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10getVersionEv",
            "lsl r3, r0, 0x10",
            "asr r3, r3, 0x10",
            "lsr r2, r3, 8",
            "strb r2, [sp, 0x11]",
            "strb r3, [sp, 0x10]",
            "ldrh r3, [sp, 0x10]",
            "mov r0, r4",
            "strh r3, [sp, 0x1c]",
            "bl rsym._ZN5yaSSL6Crypto10use_randomEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD7getSideEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX10GetCiphersEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX11GetDH_ParmsEv",
            "str r7, [sp]",
            "str r5, [sp, 4]",
            "ldrb ip, [r0, 8]",
            "add r7, r4, 0x68",
            "mov r2, r8",
            "mov r3, r6",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r7",
            "str ip, [sp, 8]",
            "bl rsym._ZN5yaSSL8SecurityC1ENS_15ProtocolVersionERNS_10RandomPoolENS_13ConnectionEndERKNS_7CiphersEPNS_7SSL_CTXEb",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL6StatesC1Ev",
            "add r0, r4, 0x950",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "add r0, r4, 0x960",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "add r0, r4, 0x960",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL8FinishedC1Ev",
            "add r0, r4, 0x9b0",
            "mvn r1, 0",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL6SocketC1Ei",
            "ldr r6, [0x000939a4]",
            "add r0, r4, 0x9c0",
            "bl rsym._ZN5yaSSL7BuffersC1Ev",
            "ldr r1, [0x000939a8]",
            "add r6, pc, r6",
            "add r0, r4, 0x9d0",
            "add r1, r6, r1",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL3LogC1EPKc",
            "mov r3, 0",
            "strb r3, [r4, 0x9de]",
            "strb r3, [r4, 0x9dd]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "bl rsym._ZNK5yaSSL10RandomPool8GetErrorEv",
            "subs r1, r0, 0",
            "bne 0x938d8",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL6Crypto15use_certManagerEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX7getCertEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager12CopySelfCertEPKNS_4x509E",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldr r8, [r0]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX6getKeyEv",
            "rsbs r8, r8, 1",
            "movlo r8, 0",
            "cmp r0, 0",
            "beq 0x938f0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX6getKeyEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13SetPrivateKeyERKNS_4x509E",
            "subs r1, r0, 0",
            "bne 0x938d8",
            "cmp r8, 0",
            "bne 0x93944",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10verifyPeerEv",
            "cmp r0, 0",
            "bne 0x93938",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10verifyNoneEv",
            "cmp r0, 0",
            "bne 0x9392c",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10failNoCertEv",
            "cmp r0, 0",
            "bne 0x93920",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX17getVerifyCallbackEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager17setVerifyCallbackEPFiiPNS_14X509_STORE_CTXEE",
            "cmp r8, 0",
            "bne 0x93908",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX10GetCA_ListEv",
            "ldr r5, [r0]",
            "cmp r5, 0",
            "bne 0x938c0",
            "b 0x938e0",
            "ldr r5, [r5, 4]",
            "cmp r5, 0",
            "beq 0x938e0",
            "ldr r1, [r5, 8]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager10CopyCaCertEPKNS_4x509E",
            "cmp r0, 0",
            "beq 0x938b4",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "cmp r8, 0",
            "beq 0x93844",
            "mov r0, r4",
            "mov r1, 0x6f",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x938e0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX11GetDH_ParmsEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL6Crypto5SetDHERKNS_8DH_ParmsE",
            "b 0x9389c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setFailNoCertEv",
            "b 0x93880",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setVerifyNoneEv",
            "b 0x9386c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setVerifyPeerEv",
            "b 0x93858",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [0x000939ac]",
            "ldrh r3, [r0, r3]",
            "mov r0, r7",
            "strh r3, [sp, 0x18]",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldrb sb, [r0, 0x6df]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 1",
            "mov r3, r0",
            "moveq sl, 0",
            "movne sl, 1",
            "mov r0, r7",
            "moveq r7, r3",
            "movne r7, 0",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r2, sb",
            "mov r3, sl",
            "ldr r1, [sp, 0x18]",
            "str r7, [sp]",
            "bl rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb",
            "b 0x93844"
        ]
    },
    "rsym._ZN5yaSSL6CryptoC1Ev": {
        "function_address": "0x0003ce08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xf4]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX9getMethodEv": {
        "function_address": "0x0003e488",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1f4]!"
        ]
    },
    "rsym._ZNK5yaSSL10SSL_METHOD10getVersionEv": {
        "function_address": "0x0003fda8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x134]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto10use_randomEv": {
        "function_address": "0x0003deac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5dc]!"
        ]
    },
    "rsym._ZNK5yaSSL10SSL_METHOD7getSideEv": {
        "function_address": "0x0003cff4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfac]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX10GetCiphersEv": {
        "function_address": "0x0003d9b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x92c]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX11GetDH_ParmsEv": {
        "function_address": "0x0003d9f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x904]!"
        ]
    },
    "rsym._ZN5yaSSL8SecurityC1ENS_15ProtocolVersionERNS_10RandomPoolENS_13ConnectionEndERKNS_7CiphersEPNS_7SSL_CTXEb": {
        "function_address": "0x0003d4e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc64]!"
        ]
    },
    "rsym._ZN5yaSSL6StatesC1Ev": {
        "function_address": "0x0003d2d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdc4]!"
        ]
    },
    "rsym._ZN5yaSSL3MD5C1Ev": {
        "function_address": "0x0003fa90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x344]!"
        ]
    },
    "rsym._ZN5yaSSL3SHAC1Ev": {
        "function_address": "0x0003d30c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd9c]!"
        ]
    },
    "rsym._ZN5yaSSL8FinishedC1Ev": {
        "function_address": "0x0003fd24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x18c]!"
        ]
    },
    "rsym._ZN5yaSSL6SocketC1Ei": {
        "function_address": "0x0003cdd8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x114]!"
        ]
    },
    "rsym._ZN5yaSSL7BuffersC1Ev": {
        "function_address": "0x0003e4a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1e4]!"
        ]
    },
    "rsym._ZN5yaSSL3LogC1EPKc": {
        "function_address": "0x0003ffc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfcc]!"
        ]
    },
    "rsym._ZNK5yaSSL10RandomPool8GetErrorEv": {
        "function_address": "0x0003f058",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa14]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX7getCertEv": {
        "function_address": "0x0003dc84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x74c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager12CopySelfCertEPKNS_4x509E": {
        "function_address": "0x0003e668",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb4]!"
        ]
    },
    "rsym._ZN5yaSSL8Security9use_parmsEv": {
        "function_address": "0x0003eea8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb34]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX6getKeyEv": {
        "function_address": "0x000404bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc7c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager13SetPrivateKeyERKNS_4x509E": {
        "function_address": "0x0003f6f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5ac]!"
        ]
    },
    "rsym._ZNK5yaSSL10SSL_METHOD10verifyPeerEv": {
        "function_address": "0x0003de1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x63c]!"
        ]
    },
    "rsym._ZNK5yaSSL10SSL_METHOD10verifyNoneEv": {
        "function_address": "0x0003e728",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x34]!"
        ]
    },
    "rsym._ZNK5yaSSL10SSL_METHOD10failNoCertEv": {
        "function_address": "0x0003f67c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5fc]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX17getVerifyCallbackEv": {
        "function_address": "0x0003f16c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x95c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager17setVerifyCallbackEPFiiPNS_14X509_STORE_CTXEE": {
        "function_address": "0x0003f628",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x634]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX10GetCA_ListEv": {
        "function_address": "0x0003cf34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager10CopyCaCertEPKNS_4x509E": {
        "function_address": "0x0003d4bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc7c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE": {
        "function_address": "0x0003eb30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd84]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto5SetDHERKNS_8DH_ParmsE": {
        "function_address": "0x0003d7bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa7c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager13setFailNoCertEv": {
        "function_address": "0x00040a08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x8f4]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager13setVerifyNoneEv": {
        "function_address": "0x0003e500",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1a4]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager13setVerifyPeerEv": {
        "function_address": "0x00040444",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xccc]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager11get_keyTypeEv": {
        "function_address": "0x0003cce8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1b4]!"
        ]
    },
    "rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb": {
        "function_address": "0x0003d270",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe04]!"
        ]
    },
    "sym.str_to_datetime": {
        "function_address": "0x000783a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r4, r0, r1",
            "sub sp, sp, 0x8c",
            "ldr r1, [0x00078d8c]",
            "ldr r5, [sp, 0xb0]",
            "str r1, [sp]",
            "mov r1, 0",
            "str r1, [r5]",
            "ldr r6, [sp]",
            "cmp r0, r4",
            "add r6, pc, r6",
            "str r6, [sp]",
            "str r2, [sp, 0x14]",
            "str r3, [sp, 0x38]",
            "beq 0x78424",
            "ldr r7, [0x00078d90]",
            "ldr r3, [r6, r7]",
            "str r7, [sp, 0x24]",
            "ldrb r2, [r0]",
            "ldr r1, [r3, 0x20]",
            "add r3, r1, r2",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x78418",
            "b 0x78440",
            "ldrb r2, [r0]",
            "add r3, r1, r2",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x78440",
            "add r0, r0, 1",
            "cmp r4, r0",
            "bne 0x78404",
            "ldr r8, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [r8]",
            "mvn r0, 1",
            "add sp, sp, 0x8c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "tst r3, 4",
            "movne r3, r0",
            "beq 0x78424",
            "add r3, r3, 1",
            "cmp r4, r3",
            "beq 0x78b18",
            "ldrb ip, [r3]",
            "add r5, r1, ip",
            "ldrb r5, [r5, 1]",
            "ands r6, r5, 4",
            "bne 0x7844c",
            "cmp ip, 0x54",
            "beq 0x7844c",
            "ldr sb, [0x00078d94]",
            "ldr sl, [sp]",
            "cmp ip, 0x2e",
            "ldrb ip, [sl, sb]",
            "str sb, [sp, 0x20]",
            "lsl r8, ip, 2",
            "add sb, sp, 0x88",
            "str r8, [sp, 0x30]",
            "add r8, sb, r8",
            "rsb r7, r0, r3",
            "str r6, [r8, -0x40]",
            "beq 0x78b44",
            "cmp ip, 2",
            "bls 0x78b98",
            "cmp r4, r3",
            "bls 0x784e0",
            "tst r5, 8",
            "beq 0x784d4",
            "b 0x78704",
            "ldrb r5, [r3]",
            "add r5, r1, r5",
            "ldrb r5, [r5, 1]",
            "tst r5, 8",
            "bne 0x7871c",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bhi 0x784c0",
            "cmp r3, r4",
            "movne r6, 0",
            "strne r6, [sp, 0x2c]",
            "beq 0x78cb8",
            "mov r7, 0",
            "str r7, [sp, 8]",
            "mov sl, 2",
            "ldr r5, [sp]",
            "ldr r6, [sp, 0x20]",
            "add r3, r5, r6",
            "ldrb r7, [r3, 6]",
            "mov r5, 1",
            "lsl r6, r5, r7",
            "str r7, [sp, 4]",
            "ldrb r7, [r3, 1]",
            "ldrb fp, [r3, 2]",
            "cmp ip, r7",
            "movlo ip, r7",
            "cmp ip, fp",
            "movlo ip, fp",
            "orr ip, r6, r5, lsl ip",
            "ldrb r8, [r3, 5]",
            "ldrb sb, [r3, 7]",
            "and ip, ip, 0xf",
            "mov r6, 0",
            "str ip, [sp, 0x18]",
            "str r3, [sp, 0x10]",
            "add ip, r8, r5",
            "add r3, fp, 1",
            "ldr r5, [sp, 0x2c]",
            "str r8, [sp, 0xc]",
            "str sb, [sp, 0x34]",
            "str ip, [sp, 0x28]",
            "str r6, [sp, 0x1c]",
            "mov r7, r6",
            "str r6, [sp, 0x40]",
            "str r3, [sp, 0x3c]",
            "ldr r8, [sp, 8]",
            "sub r2, r2, 0x30",
            "cmp r8, 0",
            "and r2, r2, 0xff",
            "add r3, r0, 1",
            "movne r8, 0",
            "bne 0x7859c",
            "ldr sb, [sp, 4]",
            "subs r8, sb, r5",
            "movne r8, 1",
            "cmp r4, r3",
            "beq 0x78610",
            "ldrb ip, [r3]",
            "add sb, r1, ip",
            "ldrb sb, [sb, 1]",
            "tst sb, 4",
            "beq 0x78610",
            "cmp r8, 0",
            "bne 0x7873c",
            "sub sl, sl, 1",
            "b 0x785f0",
            "add r3, r3, 1",
            "cmp r4, r3",
            "add r2, ip, r8, lsl 1",
            "beq 0x78604",
            "ldrb ip, [r3]",
            "sub sl, sl, 1",
            "add r8, r1, ip",
            "ldrb r8, [r8, 1]",
            "tst r8, 4",
            "beq 0x78604",
            "sub ip, ip, 0x30",
            "cmp sl, 0",
            "add r8, r2, r2, lsl 2",
            "and ip, ip, 0xff",
            "bne 0x785c8",
            "ldr sl, [0x00078d98]",
            "cmp r2, sl",
            "bhi 0x78764",
            "ldr r8, [sp, 0x10]",
            "add ip, r5, 1",
            "ldrb sl, [r8, ip]",
            "add sb, sp, 0x88",
            "cmp sl, 0",
            "add r8, sb, r5, lsl 2",
            "rsb r0, r0, r3",
            "moveq sl, 4",
            "movne sl, 2",
            "cmp r3, r4",
            "str r0, [r8, -0x40]",
            "orr r7, r7, r2",
            "str r2, [r8, -0x20]",
            "beq 0x78c6c",
            "cmp r5, fp",
            "ldrbne r2, [r3]",
            "beq 0x78778",
            "ldr r0, [sp, 0xc]",
            "cmp r0, r5",
            "beq 0x78794",
            "add r2, r1, r2",
            "ldrb r0, [r2, 1]",
            "tst r0, 0x18",
            "moveq r2, r3",
            "beq 0x786bc",
            "ldr r2, [sp, 0x18]",
            "mov r8, 1",
            "ands r2, r2, r8, lsl r5",
            "beq 0x78c74",
            "mov r2, r3",
            "b 0x786a0",
            "ldrb r0, [r2]",
            "add r0, r1, r0",
            "ldrb r0, [r0, 1]",
            "tst r0, 0x18",
            "beq 0x786b4",
            "tst r0, 8",
            "add r2, r2, 1",
            "movne r6, 1",
            "cmp r4, r2",
            "bne 0x7868c",
            "mov r0, 1",
            "str r0, [sp, 0x1c]",
            "ldr r8, [sp, 4]",
            "cmp r8, r5",
            "movne r5, r2",
            "movne r0, r5",
            "beq 0x787b8",
            "subs r3, r0, r4",
            "movne r3, 1",
            "cmp ip, 6",
            "movhi r3, 0",
            "cmp r3, 0",
            "beq 0x7884c",
            "ldrb r2, [r0]",
            "add r3, r1, r2",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x7884c",
            "mov r5, ip",
            "b 0x78574",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bls 0x784e0",
            "ldrb r5, [r3]",
            "add r5, r1, r5",
            "ldrb r5, [r5, 1]",
            "tst r5, 4",
            "beq 0x78704",
            "b 0x784e0",
            "ldrb ip, [r3]",
            "add r8, r1, ip",
            "ldrb r8, [r8, 1]",
            "tst r8, 4",
            "beq 0x78604",
            "sub ip, ip, 0x30",
            "add r3, r3, 1",
            "add r2, r2, r2, lsl 2",
            "and ip, ip, 0xff",
            "cmp r4, r3",
            "add r2, ip, r2, lsl 1",
            "bne 0x78728",
            "ldr sl, [0x00078d98]",
            "cmp r2, sl",
            "bls 0x78610",
            "ldr ip, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [ip]",
            "mvn r0, 1",
            "b 0x78434",
            "ldrb r2, [r3]",
            "cmp r2, 0x54",
            "bne 0x78654",
            "mov r5, r3",
            "add r0, r3, 1",
            "ldr ip, [sp, 0x3c]",
            "b 0x786d0",
            "cmp r2, 0x2e",
            "movne r5, r3",
            "ldrne ip, [sp, 0x28]",
            "movne r0, r5",
            "moveq r5, r3",
            "addeq r0, r3, 1",
            "ldreq ip, [sp, 0x28]",
            "moveq sl, 6",
            "b 0x786d0",
            "ldr sb, [sp, 0x34]",
            "cmp sb, 0xff",
            "beq 0x78b08",
            "add r0, r2, 2",
            "cmp r4, r0",
            "blo 0x78b08",
            "ldrb r5, [r2, 1]",
            "cmp r5, 0x4d",
            "cmpne r5, 0x6d",
            "bne 0x78b08",
            "ldrb r5, [r2]",
            "cmp r5, 0x70",
            "cmpne r5, 0x50",
            "addne ip, ip, 1",
            "movne r5, r3",
            "movne r0, r2",
            "bne 0x786d0",
            "cmp r4, r0",
            "beq 0x7883c",
            "ldrb r3, [r0]",
            "add r3, r1, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x78830",
            "b 0x78d64",
            "ldrb r3, [r0]",
            "add r3, r1, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x78d3c",
            "add r0, r0, 1",
            "cmp r4, r0",
            "bne 0x7881c",
            "mov r8, 0xc",
            "add ip, ip, 1",
            "mov r5, r4",
            "str r8, [sp, 0x40]",
            "ldr r8, [sp, 0x1c]",
            "cmp r6, 0",
            "movne r8, 0",
            "andeq r8, r8, 1",
            "cmp r8, 0",
            "mov r6, r8",
            "beq 0x78bb8",
            "ldr sl, [sp, 0x38]",
            "tst sl, 2",
            "bne 0x78d50",
            "ldr r0, [sp, 0x2c]",
            "rsb r8, r0, ip",
            "cmp ip, 7",
            "bhi 0x788b0",
            "lsl ip, ip, 2",
            "add r3, sp, 0x48",
            "add r1, sp, 0x68",
            "add r0, r3, 0x20",
            "add r1, r1, ip",
            "add r3, r3, ip",
            "mov r2, 0",
            "str r2, [r3], 4",
            "cmp r3, r0",
            "str r2, [r1], 4",
            "bne 0x788a0",
            "ldr r2, [sp, 8]",
            "cmp r2, 0",
            "bne 0x78bc4",
            "ldr r6, [sp, 0x30]",
            "add sb, sp, 0x88",
            "add r3, sb, r6",
            "ldr sl, [r3, -0x40]",
            "cmp sl, 0",
            "str sl, [sp, 0x44]",
            "beq 0x78764",
            "ldr r2, [r3, -0x20]",
            "ldr r1, [sp, 0x20]",
            "ldr r0, [sp]",
            "ldr r6, [sp, 0x14]",
            "add r3, r0, r1",
            "str r2, [r6]",
            "ldrb r2, [r3, 1]",
            "add sb, sp, 0x88",
            "add r2, sb, r2, lsl 2",
            "ldr r2, [r2, -0x20]",
            "str r2, [r6, 4]",
            "ldrb r2, [r3, 2]",
            "add r2, sb, r2, lsl 2",
            "ldr r2, [r2, -0x20]",
            "str r2, [r6, 8]",
            "ldrb r2, [r3, 3]",
            "add r2, sb, r2, lsl 2",
            "ldr r2, [r2, -0x20]",
            "str r2, [r6, 0xc]",
            "ldrb r1, [r3, 4]",
            "add r1, sb, r1, lsl 2",
            "ldr r1, [r1, -0x20]",
            "str r1, [r6, 0x10]",
            "ldrb r1, [r3, 5]",
            "add r1, sb, r1, lsl 2",
            "ldr r1, [r1, -0x20]",
            "str r1, [r6, 0x14]",
            "ldrb r3, [r3, 6]",
            "add r3, sb, r3, lsl 2",
            "ldr r1, [r3, -0x40]",
            "cmp r1, 5",
            "ldrhi r3, [r3, -0x20]",
            "bhi 0x78978",
            "rsb r0, r1, 6",
            "ldr sl, [sp]",
            "ldr r1, [0x00078d9c]",
            "ldr ip, [r3, -0x20]",
            "ldr r1, [sl, r1]",
            "ldr r1, [r1, r0, lsl 3]",
            "mul r3, ip, r1",
            "ldr ip, [sp, 0x14]",
            "str r3, [ip, 0x18]",
            "ldr r0, [sp]",
            "ldr r1, [sp, 0x20]",
            "add r3, r0, r1",
            "ldrb r3, [r3, 7]",
            "cmp r3, 0xff",
            "beq 0x789d0",
            "cmp r2, 0xc",
            "ldrhi r2, [sp, 0xb0]",
            "movhi r3, 1",
            "strhi r3, [r2]",
            "bhi 0x78c30",
            "ldr r1, [0x00078da0]",
            "ldr sb, [sp, 0x40]",
            "umull r6, r3, r1, r2",
            "lsr r3, r3, 3",
            "add r3, r3, r3, lsl 1",
            "sub r3, r2, r3, lsl 2",
            "ldr sl, [sp, 0x14]",
            "add r3, sb, r3",
            "str r3, [sl, 0xc]",
            "ldr r0, [sp, 0x44]",
            "ldr r1, [sp, 0x14]",
            "cmp r0, 2",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r7, 0",
            "moveq r3, 0",
            "cmp r3, 0",
            "mov r3, 0",
            "strb r3, [r1, 0x1c]",
            "beq 0x78a14",
            "ldr r3, [r1]",
            "ldr r2, [0x00078da4]",
            "cmp r3, 0x45",
            "movls r2, 0x7d0",
            "add r3, r2, r3",
            "str r3, [r1]",
            "cmp r8, 2",
            "bls 0x78c1c",
            "ldr r3, [sp, 0x14]",
            "ldr r2, [r3]",
            "ldr r3, [0x00078da8]",
            "cmp r2, r3",
            "bhi 0x78c1c",
            "ldr r6, [sp, 0x14]",
            "ldr r3, [r6, 4]",
            "cmp r3, 0xc",
            "bhi 0x78c1c",
            "ldr r3, [r6, 8]",
            "cmp r3, 0x1f",
            "bhi 0x78c1c",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 0x17",
            "bhi 0x78c1c",
            "ldr r3, [r6, 0x10]",
            "cmp r3, 0x3b",
            "bhi 0x78c1c",
            "ldr r3, [r6, 0x14]",
            "cmp r3, 0x3b",
            "bhi 0x78c1c",
            "subs r1, r7, 0",
            "movne r1, 1",
            "ldr r2, [sp, 0x38]",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [sp, 0xb0]",
            "bl rsym.check_date",
            "cmp r0, 0",
            "bne 0x78c30",
            "ldr sl, [sp, 0x14]",
            "cmp r8, 3",
            "movls r0, 0",
            "movhi r0, 1",
            "cmp r5, r4",
            "str r0, [sl, 0x20]",
            "beq 0x78434",
            "ldr r1, [sp]",
            "ldr ip, [sp, 0x24]",
            "ldrb r3, [r5]",
            "ldr r2, [r1, ip]",
            "ldr r2, [r2, 0x20]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x78af0",
            "add r5, r5, 1",
            "cmp r4, r5",
            "beq 0x78434",
            "ldrb r3, [r5]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x78ad0",
            "ldr r2, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [r2]",
            "ldr r3, [sp, 0x14]",
            "ldr r0, [r3, 0x20]",
            "b 0x78434",
            "mov r5, r2",
            "add ip, ip, 1",
            "mov r0, r2",
            "b 0x786d0",
            "ldr r8, [0x00078d94]",
            "ldr sb, [sp]",
            "add r5, sp, 0x88",
            "ldrb ip, [sb, r8]",
            "str r8, [sp, 0x20]",
            "lsl sl, ip, 2",
            "add r3, r5, sl",
            "mov r5, 0",
            "rsb r7, r0, r4",
            "str sl, [sp, 0x30]",
            "str r5, [r3, -0x40]",
            "cmp r7, 4",
            "cmpne r7, 8",
            "movne r3, 0",
            "moveq r3, 1",
            "beq 0x78b78",
            "cmp r7, 0xd",
            "bhi 0x78b78",
            "mov sl, 2",
            "str r3, [sp, 0x2c]",
            "mov r3, 1",
            "str sl, [sp, 0x44]",
            "str r3, [sp, 8]",
            "b 0x784fc",
            "mov r8, 4",
            "mov sl, 0",
            "mov sb, 1",
            "str sl, [sp, 0x2c]",
            "str r8, [sp, 0x44]",
            "str sb, [sp, 8]",
            "mov sl, r8",
            "b 0x784fc",
            "cmp ip, 0",
            "strne r6, [sp, 8]",
            "strne r6, [sp, 0x2c]",
            "movne sl, 2",
            "streq ip, [sp, 8]",
            "streq ip, [sp, 0x2c]",
            "moveq sl, 4",
            "b 0x784fc",
            "ldr sb, [sp, 0x2c]",
            "rsb r8, sb, ip",
            "b 0x7887c",
            "ldr r3, [sp, 0x60]",
            "add r0, sp, 0x6c",
            "ldm r0, {r0, r1, r2, ip}",
            "ldr r6, [sp, 0x7c]",
            "ldr sl, [sp, 0x68]",
            "ldr sb, [sp, 0x14]",
            "cmp r3, 5",
            "str sl, [sb]",
            "stmib sb, {r0, r1, r2, ip}",
            "str r6, [sb, 0x14]",
            "ldrhi r3, [sp, 0x80]",
            "bhi 0x78c10",
            "ldr r2, [0x00078d9c]",
            "ldr sl, [sp]",
            "rsb r3, r3, 6",
            "ldr r2, [sl, r2]",
            "ldr r1, [sp, 0x80]",
            "ldr r2, [r2, r3, lsl 3]",
            "mul r3, r1, r2",
            "ldr ip, [sp, 0x14]",
            "str r3, [ip, 0x18]",
            "b 0x789d0",
            "cmp r7, 0",
            "beq 0x78ce4",
            "mov r3, 1",
            "ldr sb, [sp, 0xb0]",
            "str r3, [sb]",
            "ldr r3, [sp, 0x14]",
            "mov r2, 0",
            "str r2, [r3], 4",
            "ldr r5, [sp, 0x14]",
            "add r3, r3, 4",
            "str r2, [r5, 4]",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "mvn r0, 0",
            "b 0x78434",
            "mov r5, r4",
            "b 0x7884c",
            "mov r2, r3",
            "tst r0, 8",
            "add r2, r2, 1",
            "beq 0x78c98",
            "ldr sb, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [sb]",
            "mvn r0, 1",
            "b 0x78434",
            "cmp r4, r2",
            "beq 0x786b4",
            "ldrb r0, [r2]",
            "add r0, r1, r0",
            "ldrb r0, [r0, 1]",
            "tst r0, 0x18",
            "bne 0x78c78",
            "b 0x786b4",
            "ldr r5, [sp, 0x38]",
            "ands r3, r5, 2",
            "bne 0x78d78",
            "mov r7, 5",
            "str r3, [sp, 0x68]",
            "str r3, [sp, 0x78]",
            "str r3, [sp, 0x74]",
            "str r3, [sp, 0x70]",
            "str r3, [sp, 0x6c]",
            "str r7, [sp, 0x2c]",
            "b 0x784f0",
            "cmp r5, r4",
            "beq 0x78d34",
            "ldr r8, [sp]",
            "ldr r7, [sp, 0x24]",
            "ldrb r3, [r5]",
            "ldr r2, [r8, r7]",
            "ldr r2, [r2, 0x20]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x78d28",
            "b 0x78c24",
            "ldrb r3, [r5]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x78c24",
            "add r5, r5, 1",
            "cmp r4, r5",
            "bne 0x78d14",
            "mov r3, 0",
            "b 0x78c28",
            "mov r3, 0xc",
            "add ip, ip, 1",
            "mov r5, r0",
            "str r3, [sp, 0x40]",
            "b 0x786d0",
            "ldr r1, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [r1]",
            "mvn r0, 1",
            "b 0x78434",
            "mov r2, 0xc",
            "add ip, ip, 1",
            "mov r5, r0",
            "str r2, [sp, 0x40]",
            "b 0x786d0",
            "ldr r6, [sp, 0xb0]",
            "mov r3, 1",
            "str r3, [r6]",
            "mvn r0, 1",
            "b 0x78434"
        ]
    },
    "rsym.check_date": {
        "function_address": "0x000406e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb0c]!"
        ]
    },
    "sym.TaoCrypt::SHA224::Transform__": {
        "function_address": "0x000b937c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x84",
            "str r0, [sp, 0x18]",
            "add r0, sp, 0x60",
            "str r0, [sp, 0x1c]",
            "ldr lr, [sp, 0x18]",
            "ldr ip, [sp, 0x1c]",
            "str r1, [sp, 0x10]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r4, [0x000b9374]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r3, [0x000b9378]",
            "add r4, pc, r4",
            "add r3, r4, r3",
            "add r3, r3, 0x2d8",
            "str r3, [sp, 8]",
            "ldr r6, [sp, 0x70]",
            "ldr lr, [sp, 0x74]",
            "ldr sl, [sp, 0x78]",
            "mov r2, 0",
            "ldr r4, [sp, 8]",
            "cmp r2, 0",
            "ldr ip, [sp, 0x7c]",
            "mov r3, r6",
            "mov r1, lr",
            "mov r0, sl",
            "ldr fp, [r4]",
            "bne 0xb8d90",
            "ldr sb, [sp, 0x10]",
            "ldr r8, [sb]",
            "str r8, [sp, 0x20]",
            "ldr r5, [sp, 0x60]",
            "ldr r4, [sp, 0x64]",
            "ror sb, r3, 6",
            "eor sb, sb, r3, ror 11",
            "eor r1, r0, r1",
            "ldr r7, [sp, 0x68]",
            "and r1, r1, r3",
            "add ip, ip, fp",
            "eor r3, sb, r3, ror 25",
            "orr fp, r4, r5",
            "ror sb, r5, 2",
            "add ip, ip, r3",
            "eor r0, r1, r0",
            "and fp, fp, r7",
            "and r1, r4, r5",
            "eor sb, sb, r5, ror 13",
            "orr fp, fp, r1",
            "eor sb, sb, r5, ror 22",
            "ldr r3, [sp, 0x6c]",
            "add r0, ip, r0",
            "add r1, fp, sb",
            "add r0, r0, r8",
            "add r1, r1, r0",
            "ldr fp, [sp, 8]",
            "add r0, r0, r3",
            "str r0, [sp, 0x6c]",
            "str r1, [sp, 0x7c]",
            "cmp r2, 0",
            "ldr sb, [fp, 4]",
            "bne 0xb9274",
            "ldr fp, [sp, 0x10]",
            "ldr ip, [fp, 4]",
            "str ip, [sp, 0x24]",
            "eor r3, lr, r6",
            "and r3, r0, r3",
            "ror r8, r0, 6",
            "add sl, sb, sl",
            "eor r3, r3, lr",
            "eor r8, r8, r0, ror 11",
            "orr fp, r1, r5",
            "ror sb, r1, 2",
            "add sl, sl, r3",
            "eor r8, r8, r0, ror 25",
            "and fp, fp, r4",
            "eor sb, sb, r1, ror 13",
            "and r3, r1, r5",
            "add r8, sl, r8",
            "orr r3, fp, r3",
            "eor sb, sb, r1, ror 22",
            "add r8, r8, ip",
            "add r3, r3, sb",
            "add r3, r3, r8",
            "ldr ip, [sp, 8]",
            "add r8, r8, r7",
            "str r8, [sp, 0x68]",
            "str r3, [sp, 0x78]",
            "cmp r2, 0",
            "ldr sl, [ip, 8]",
            "bne 0xb9220",
            "ldr sb, [sp, 0x10]",
            "ldr ip, [sb, 8]",
            "str ip, [sp, 0x28]",
            "eor sb, r0, r6",
            "and sb, r8, sb",
            "ror r7, r8, 6",
            "add lr, sl, lr",
            "eor sb, sb, r6",
            "eor r7, r7, r8, ror 11",
            "orr fp, r3, r1",
            "ror sl, r3, 2",
            "add lr, lr, sb",
            "eor r7, r7, r8, ror 25",
            "and fp, fp, r5",
            "eor sl, sl, r3, ror 13",
            "and sb, r3, r1",
            "add r7, lr, r7",
            "eor sl, sl, r3, ror 22",
            "orr sb, fp, sb",
            "add sb, sb, sl",
            "add r7, r7, ip",
            "add lr, sb, r7",
            "ldr sl, [sp, 8]",
            "add r7, r7, r4",
            "str r7, [sp, 0x64]",
            "str lr, [sp, 0x74]",
            "cmp r2, 0",
            "ldr sb, [sl, 0xc]",
            "bne 0xb91cc",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0xc]",
            "str sl, [sp, 0x2c]",
            "eor ip, r8, r0",
            "and ip, r7, ip",
            "ror r4, r7, 6",
            "add r6, sb, r6",
            "eor ip, ip, r0",
            "eor r4, r4, r7, ror 11",
            "orr fp, lr, r3",
            "ror sb, lr, 2",
            "add r6, r6, ip",
            "eor r4, r4, r7, ror 25",
            "and fp, fp, r1",
            "eor sb, sb, lr, ror 13",
            "and ip, lr, r3",
            "add r4, r6, r4",
            "orr ip, fp, ip",
            "eor sb, sb, lr, ror 22",
            "add r4, r4, sl",
            "add ip, ip, sb",
            "add ip, ip, r4",
            "add r4, r4, r5",
            "ldr r5, [sp, 8]",
            "str r4, [sp, 0x60]",
            "str ip, [sp, 0x70]",
            "cmp r2, 0",
            "ldr sl, [r5, 0x10]",
            "bne 0xb9178",
            "ldr sb, [sp, 0x10]",
            "ldr r5, [sb, 0x10]",
            "str r5, [sp, 0x30]",
            "eor sb, r7, r8",
            "and sb, r4, sb",
            "ror r6, r4, 6",
            "add r0, r0, sl",
            "eor sb, sb, r8",
            "eor r6, r6, r4, ror 11",
            "orr fp, ip, lr",
            "ror sl, ip, 2",
            "add r0, r0, sb",
            "eor r6, r6, r4, ror 25",
            "and fp, fp, r3",
            "eor sl, sl, ip, ror 13",
            "and sb, ip, lr",
            "add r6, r0, r6",
            "eor sl, sl, ip, ror 22",
            "orr sb, fp, sb",
            "add sb, sb, sl",
            "add r6, r6, r5",
            "add r0, sb, r6",
            "ldr sl, [sp, 8]",
            "add r6, r6, r1",
            "str r6, [sp, 0x7c]",
            "str r0, [sp, 0x6c]",
            "cmp r2, 0",
            "ldr sb, [sl, 0x14]",
            "bne 0xb9124",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x14]",
            "str sl, [sp, 0x34]",
            "eor r1, r4, r7",
            "and r1, r6, r1",
            "ror r5, r6, 6",
            "add r8, r8, sb",
            "eor r1, r1, r7",
            "eor r5, r5, r6, ror 11",
            "orr fp, r0, ip",
            "ror sb, r0, 2",
            "add r8, r8, r1",
            "eor r5, r5, r6, ror 25",
            "and fp, fp, lr",
            "eor sb, sb, r0, ror 13",
            "and r1, r0, ip",
            "eor sb, sb, r0, ror 22",
            "add r5, r8, r5",
            "orr r1, fp, r1",
            "add r5, r5, sl",
            "add r1, r1, sb",
            "add r1, r1, r5",
            "add r5, r5, r3",
            "ldr r3, [sp, 8]",
            "str r5, [sp, 0x78]",
            "str r1, [sp, 0x68]",
            "cmp r2, 0",
            "ldr sb, [r3, 0x18]",
            "bne 0xb90d0",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x18]",
            "str sl, [sp, 0x38]",
            "eor r3, r6, r4",
            "and r3, r5, r3",
            "ror r8, r5, 6",
            "add r7, r7, sb",
            "eor r3, r3, r4",
            "eor r8, r8, r5, ror 11",
            "orr fp, r1, r0",
            "ror sb, r1, 2",
            "add r7, r7, r3",
            "eor r8, r8, r5, ror 25",
            "and fp, fp, ip",
            "eor sb, sb, r1, ror 13",
            "and r3, r1, r0",
            "eor sb, sb, r1, ror 22",
            "add r8, r7, r8",
            "orr r3, fp, r3",
            "add r8, r8, sl",
            "add r3, r3, sb",
            "add r3, r3, r8",
            "add r8, r8, lr",
            "ldr lr, [sp, 8]",
            "str r8, [sp, 0x74]",
            "str r3, [sp, 0x64]",
            "cmp r2, 0",
            "ldr sb, [lr, 0x1c]",
            "bne 0xb907c",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x1c]",
            "str sl, [sp, 0x3c]",
            "eor lr, r5, r6",
            "and lr, r8, lr",
            "ror r7, r8, 6",
            "add r4, r4, sb",
            "eor lr, lr, r6",
            "eor r7, r7, r8, ror 11",
            "orr fp, r3, r1",
            "ror sb, r3, 2",
            "add r4, r4, lr",
            "eor r7, r7, r8, ror 25",
            "and fp, fp, r0",
            "eor sb, sb, r3, ror 13",
            "and lr, r3, r1",
            "eor sb, sb, r3, ror 22",
            "add r7, r4, r7",
            "orr lr, fp, lr",
            "add r7, r7, sl",
            "add lr, lr, sb",
            "add lr, lr, r7",
            "add r7, r7, ip",
            "ldr ip, [sp, 8]",
            "str r7, [sp, 0x70]",
            "str lr, [sp, 0x60]",
            "cmp r2, 0",
            "ldr sb, [ip, 0x20]",
            "bne 0xb9028",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x20]",
            "str sl, [sp, 0x40]",
            "eor ip, r8, r5",
            "and ip, r7, ip",
            "ror r4, r7, 6",
            "add r6, r6, sb",
            "eor ip, ip, r5",
            "eor r4, r4, r7, ror 11",
            "orr fp, lr, r3",
            "ror sb, lr, 2",
            "add r6, r6, ip",
            "eor r4, r4, r7, ror 25",
            "and fp, fp, r1",
            "eor sb, sb, lr, ror 13",
            "and ip, lr, r3",
            "eor sb, sb, lr, ror 22",
            "add r4, r6, r4",
            "orr ip, fp, ip",
            "add r4, r4, sl",
            "add ip, ip, sb",
            "add ip, ip, r4",
            "add r4, r4, r0",
            "ldr r0, [sp, 8]",
            "str r4, [sp, 0x6c]",
            "str ip, [sp, 0x7c]",
            "cmp r2, 0",
            "ldr sb, [r0, 0x24]",
            "bne 0xb8fd4",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x24]",
            "str sl, [sp, 0x44]",
            "eor r0, r7, r8",
            "and r0, r4, r0",
            "ror r6, r4, 6",
            "add r5, r5, sb",
            "eor r0, r0, r8",
            "eor r6, r6, r4, ror 11",
            "orr fp, ip, lr",
            "ror sb, ip, 2",
            "add r5, r5, r0",
            "eor r6, r6, r4, ror 25",
            "and fp, fp, r3",
            "eor sb, sb, ip, ror 13",
            "and r0, ip, lr",
            "eor sb, sb, ip, ror 22",
            "add r6, r5, r6",
            "orr r0, fp, r0",
            "add r6, r6, sl",
            "add r0, r0, sb",
            "add r0, r0, r6",
            "add r6, r6, r1",
            "ldr r1, [sp, 8]",
            "str r6, [sp, 0x68]",
            "str r0, [sp, 0x78]",
            "cmp r2, 0",
            "ldr sb, [r1, 0x28]",
            "bne 0xb8f80",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [fp, 0x28]",
            "str sl, [sp, 0x48]",
            "eor r1, r4, r7",
            "and r1, r6, r1",
            "ror r5, r6, 6",
            "add r8, r8, sb",
            "eor r1, r1, r7",
            "eor r5, r5, r6, ror 11",
            "orr fp, r0, ip",
            "ror sb, r0, 2",
            "add r8, r8, r1",
            "eor r5, r5, r6, ror 25",
            "and fp, fp, lr",
            "eor sb, sb, r0, ror 13",
            "and r1, r0, ip",
            "add r5, r8, r5",
            "orr r1, fp, r1",
            "eor sb, sb, r0, ror 22",
            "add r5, r5, sl",
            "add r1, r1, sb",
            "add r1, r1, r5",
            "add r5, r5, r3",
            "ldr r3, [sp, 8]",
            "str r5, [sp, 0x64]",
            "str r1, [sp, 0x74]",
            "cmp r2, 0",
            "ldr sl, [r3, 0x2c]",
            "bne 0xb8f2c",
            "ldr r3, [sp, 0x10]",
            "ldr r8, [r3, 0x2c]",
            "str r8, [sp, 0x4c]",
            "eor r3, r6, r4",
            "and r3, r5, r3",
            "ror fp, r5, 6",
            "add r7, r7, sl",
            "eor r3, r3, r4",
            "eor fp, fp, r5, ror 11",
            "orr sb, r1, r0",
            "ror sl, r1, 2",
            "add r7, r7, r3",
            "eor fp, fp, r5, ror 25",
            "and sb, sb, ip",
            "eor sl, sl, r1, ror 13",
            "and r3, r1, r0",
            "add r7, r7, fp",
            "orr r3, sb, r3",
            "eor sl, sl, r1, ror 22",
            "add r7, r7, r8",
            "add r3, r3, sl",
            "add r3, r3, r7",
            "add lr, r7, lr",
            "ldr r7, [sp, 8]",
            "str lr, [sp, 0x60]",
            "str r3, [sp, 0x70]",
            "cmp r2, 0",
            "ldr r8, [r7, 0x30]",
            "bne 0xb8ed8",
            "ldr sb, [sp, 0x10]",
            "ldr r7, [sb, 0x30]",
            "str r7, [sp, 0x50]",
            "eor sl, r5, r6",
            "and sl, lr, sl",
            "ror fp, lr, 6",
            "add r4, r4, r8",
            "eor sl, sl, r6",
            "eor fp, fp, lr, ror 11",
            "orr sb, r3, r1",
            "ror r8, r3, 2",
            "add r4, r4, sl",
            "eor fp, fp, lr, ror 25",
            "and sb, sb, r0",
            "eor r8, r8, r3, ror 13",
            "and sl, r3, r1",
            "add fp, r4, fp",
            "orr sl, sb, sl",
            "eor r8, r8, r3, ror 22",
            "add fp, fp, r7",
            "add sl, sl, r8",
            "add r4, sl, fp",
            "add ip, fp, ip",
            "ldr fp, [sp, 8]",
            "str ip, [sp, 0x7c]",
            "str r4, [sp, 0x6c]",
            "cmp r2, 0",
            "ldr sl, [fp, 0x34]",
            "bne 0xb8e84",
            "ldr r7, [sp, 0x10]",
            "ldr r8, [r7, 0x34]",
            "str r8, [sp, 0x54]",
            "eor r7, lr, r5",
            "and r7, ip, r7",
            "ror fp, ip, 6",
            "add r6, r6, sl",
            "eor r7, r7, r5",
            "eor fp, fp, ip, ror 11",
            "orr sb, r4, r3",
            "ror sl, r4, 2",
            "add r6, r6, r7",
            "eor fp, fp, ip, ror 25",
            "and sb, sb, r1",
            "eor sl, sl, r4, ror 13",
            "and r7, r4, r3",
            "eor sl, sl, r4, ror 22",
            "add r6, r6, fp",
            "orr r7, sb, r7",
            "add r6, r6, r8",
            "add r7, r7, sl",
            "add r7, r7, r6",
            "add r0, r6, r0",
            "ldr r8, [sp, 8]",
            "str r0, [sp, 0x78]",
            "str r7, [sp, 0x68]",
            "cmp r2, 0",
            "ldr sl, [r8, 0x38]",
            "bne 0xb8e30",
            "ldr r6, [sp, 0x10]",
            "ldr r8, [r6, 0x38]",
            "str r8, [sp, 0x58]",
            "eor r6, ip, lr",
            "and r6, r0, r6",
            "ror fp, r0, 6",
            "add r5, r5, sl",
            "eor r6, r6, lr",
            "eor fp, fp, r0, ror 11",
            "orr sb, r7, r4",
            "ror sl, r7, 2",
            "add r5, r5, r6",
            "and sb, sb, r3",
            "eor fp, fp, r0, ror 25",
            "eor sl, sl, r7, ror 13",
            "and r6, r7, r4",
            "orr r6, sb, r6",
            "add r5, r5, fp",
            "eor sl, sl, r7, ror 22",
            "add r5, r5, r8",
            "add r6, r6, sl",
            "add r6, r6, r5",
            "add r1, r5, r1",
            "ldr sb, [sp, 8]",
            "str r1, [sp, 0x74]",
            "str r6, [sp, 0x64]",
            "cmp r2, 0",
            "ldr r8, [sb, 0x3c]",
            "bne 0xb8ddc",
            "ldr sb, [sp, 0x10]",
            "ldr r5, [sb, 0x3c]",
            "str r5, [sp, 0x5c]",
            "eor fp, r0, ip",
            "and fp, r1, fp",
            "ror sl, r1, 6",
            "add lr, lr, r8",
            "orr sb, r6, r7",
            "eor fp, fp, ip",
            "eor sl, sl, r1, ror 11",
            "ror r8, r6, 2",
            "eor sl, sl, r1, ror 25",
            "add lr, lr, fp",
            "and r4, sb, r4",
            "and r7, r6, r7",
            "eor r8, r8, r6, ror 13",
            "add lr, lr, sl",
            "orr r4, r4, r7",
            "ldr sl, [sp, 8]",
            "eor r8, r8, r6, ror 22",
            "add lr, lr, r5",
            "add r4, r4, r8",
            "add r2, r2, 0x10",
            "add r4, r4, lr",
            "add r3, lr, r3",
            "add sl, sl, 0x40",
            "cmp r2, 0x40",
            "str r3, [sp, 0x70]",
            "str r4, [sp, 0x60]",
            "str sl, [sp, 8]",
            "beq 0xb92c8",
            "ldr r4, [sp, 8]",
            "cmp r2, 0",
            "mov r6, r3",
            "ldr lr, [sp, 0x74]",
            "ldr sl, [sp, 0x78]",
            "ldr fp, [r4]",
            "beq 0xb861c",
            "ldr r5, [sp, 0x58]",
            "ldr r7, [sp, 0x44]",
            "lsr r8, r5, 0xa",
            "eor r8, r8, r5, ror 17",
            "str r8, [sp, 0x14]",
            "ldr r8, [sp, 0x20]",
            "ldr r4, [sp, 0x24]",
            "add r7, r7, r8",
            "str r7, [sp, 0xc]",
            "ldr r7, [sp, 0x14]",
            "ldr r8, [sp, 0xc]",
            "lsr sb, r4, 3",
            "eor r5, r7, r5, ror 19",
            "eor sb, sb, r4, ror 7",
            "add r5, r8, r5",
            "eor sb, sb, r4, ror 18",
            "add r8, r5, sb",
            "str r8, [sp, 0x20]",
            "b 0xb8628",
            "ldr r5, [sp, 0x54]",
            "ldr sl, [sp, 0x20]",
            "lsr fp, r5, 0xa",
            "eor fp, fp, r5, ror 17",
            "str fp, [sp, 4]",
            "lsr fp, sl, 3",
            "str fp, [sp, 0x14]",
            "ldr sb, [sp, 0x40]",
            "ldr fp, [sp, 0x5c]",
            "add sb, sb, fp",
            "str sb, [sp, 0xc]",
            "ldr fp, [sp, 0x14]",
            "ldr sb, [sp, 4]",
            "eor r5, sb, r5, ror 19",
            "eor sb, fp, sl, ror 7",
            "ldr fp, [sp, 0xc]",
            "eor sl, sb, sl, ror 18",
            "add r5, fp, r5",
            "add r5, r5, sl",
            "str r5, [sp, 0x5c]",
            "b 0xb8d04",
            "ldr r8, [sp, 0x50]",
            "ldr r6, [sp, 0x5c]",
            "lsr fp, r8, 0xa",
            "eor fp, fp, r8, ror 17",
            "lsr sb, r6, 3",
            "str fp, [sp, 4]",
            "str sb, [sp, 0x14]",
            "ldr fp, [sp, 0x3c]",
            "ldr sb, [sp, 0x58]",
            "add fp, fp, sb",
            "str fp, [sp, 0xc]",
            "ldr fp, [sp, 4]",
            "eor r8, fp, r8, ror 19",
            "ldr fp, [sp, 0x14]",
            "eor sb, fp, r6, ror 7",
            "ldr fp, [sp, 0xc]",
            "eor r6, sb, r6, ror 18",
            "add r8, fp, r8",
            "add r8, r8, r6",
            "str r8, [sp, 0x58]",
            "b 0xb8c90",
            "ldr r8, [sp, 0x4c]",
            "ldr r7, [sp, 0x58]",
            "lsr fp, r8, 0xa",
            "eor fp, fp, r8, ror 17",
            "lsr sb, r7, 3",
            "str fp, [sp, 4]",
            "str sb, [sp, 0x14]",
            "ldr fp, [sp, 0x38]",
            "ldr sb, [sp, 0x54]",
            "add fp, fp, sb",
            "str fp, [sp, 0xc]",
            "ldr fp, [sp, 4]",
            "eor r8, fp, r8, ror 19",
            "ldr fp, [sp, 0x14]",
            "eor sb, fp, r7, ror 7",
            "ldr fp, [sp, 0xc]",
            "eor r7, sb, r7, ror 18",
            "add r8, fp, r8",
            "add r8, r8, r7",
            "str r8, [sp, 0x54]",
            "b 0xb8c1c",
            "ldr r7, [sp, 0x48]",
            "ldr sl, [sp, 0x54]",
            "lsr fp, r7, 0xa",
            "eor fp, fp, r7, ror 17",
            "lsr sb, sl, 3",
            "str fp, [sp, 4]",
            "str sb, [sp, 0x14]",
            "ldr fp, [sp, 0x34]",
            "ldr sb, [sp, 0x50]",
            "add fp, fp, sb",
            "str fp, [sp, 0xc]",
            "ldr fp, [sp, 4]",
            "eor r7, fp, r7, ror 19",
            "ldr fp, [sp, 0x14]",
            "eor sb, fp, sl, ror 7",
            "ldr fp, [sp, 0xc]",
            "eor sl, sb, sl, ror 18",
            "add r7, fp, r7",
            "add r7, r7, sl",
            "str r7, [sp, 0x50]",
            "b 0xb8ba8",
            "ldr r8, [sp, 0x44]",
            "ldr r3, [sp, 0x50]",
            "lsr fp, r8, 0xa",
            "eor fp, fp, r8, ror 17",
            "lsr sb, r3, 3",
            "str fp, [sp, 4]",
            "str sb, [sp, 0x14]",
            "ldr fp, [sp, 0x30]",
            "ldr sb, [sp, 0x4c]",
            "add fp, fp, sb",
            "str fp, [sp, 0xc]",
            "ldr fp, [sp, 4]",
            "eor r8, fp, r8, ror 19",
            "ldr fp, [sp, 0x14]",
            "eor sb, fp, r3, ror 7",
            "ldr fp, [sp, 0xc]",
            "eor r3, sb, r3, ror 18",
            "add r8, fp, r8",
            "add r8, r8, r3",
            "str r8, [sp, 0x4c]",
            "b 0xb8b34",
            "ldr r5, [sp, 0x40]",
            "ldr r1, [sp, 0x4c]",
            "lsr fp, r5, 0xa",
            "eor fp, fp, r5, ror 17",
            "lsr sl, r1, 3",
            "str fp, [sp, 4]",
            "str sl, [sp, 0x14]",
            "ldr fp, [sp, 0x2c]",
            "ldr sl, [sp, 0x48]",
            "add fp, fp, sl",
            "str fp, [sp, 0xc]",
            "ldr sl, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r5, fp, r5, ror 19",
            "eor fp, sl, r1, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r5, sl, r5",
            "eor sl, fp, r1, ror 18",
            "add sl, r5, sl",
            "str sl, [sp, 0x48]",
            "b 0xb8ac0",
            "ldr r6, [sp, 0x3c]",
            "ldr r0, [sp, 0x48]",
            "lsr fp, r6, 0xa",
            "eor fp, fp, r6, ror 17",
            "lsr sl, r0, 3",
            "str fp, [sp, 4]",
            "str sl, [sp, 0x14]",
            "ldr fp, [sp, 0x28]",
            "ldr sl, [sp, 0x44]",
            "add fp, fp, sl",
            "str fp, [sp, 0xc]",
            "ldr sl, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r6, fp, r6, ror 19",
            "eor fp, sl, r0, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r6, sl, r6",
            "eor sl, fp, r0, ror 18",
            "add sl, r6, sl",
            "str sl, [sp, 0x44]",
            "b 0xb8a4c",
            "ldr r4, [sp, 0x38]",
            "ldr ip, [sp, 0x44]",
            "lsr fp, r4, 0xa",
            "eor fp, fp, r4, ror 17",
            "lsr sl, ip, 3",
            "str fp, [sp, 4]",
            "str sl, [sp, 0x14]",
            "ldr fp, [sp, 0x24]",
            "ldr sl, [sp, 0x40]",
            "add fp, fp, sl",
            "str fp, [sp, 0xc]",
            "ldr sl, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r4, fp, r4, ror 19",
            "eor fp, sl, ip, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r4, sl, r4",
            "eor sl, fp, ip, ror 18",
            "add sl, r4, sl",
            "str sl, [sp, 0x40]",
            "b 0xb89d8",
            "ldr r7, [sp, 0x34]",
            "ldr lr, [sp, 0x40]",
            "lsr fp, r7, 0xa",
            "eor fp, fp, r7, ror 17",
            "lsr sl, lr, 3",
            "str fp, [sp, 4]",
            "str sl, [sp, 0x14]",
            "ldr fp, [sp, 0x20]",
            "ldr sl, [sp, 0x3c]",
            "add fp, fp, sl",
            "str fp, [sp, 0xc]",
            "ldr sl, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r7, fp, r7, ror 19",
            "eor fp, sl, lr, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r7, sl, r7",
            "eor sl, fp, lr, ror 18",
            "add sl, r7, sl",
            "str sl, [sp, 0x3c]",
            "b 0xb8964",
            "ldr r8, [sp, 0x30]",
            "ldr r3, [sp, 0x3c]",
            "lsr fp, r8, 0xa",
            "eor fp, fp, r8, ror 17",
            "lsr sl, r3, 3",
            "str fp, [sp, 4]",
            "str sl, [sp, 0x14]",
            "ldr fp, [sp, 0x5c]",
            "ldr sl, [sp, 0x38]",
            "add fp, fp, sl",
            "str fp, [sp, 0xc]",
            "ldr sl, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r8, fp, r8, ror 19",
            "eor fp, sl, r3, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r8, sl, r8",
            "eor sl, fp, r3, ror 18",
            "add sl, r8, sl",
            "str sl, [sp, 0x38]",
            "b 0xb88f0",
            "ldr r5, [sp, 0x2c]",
            "ldr r1, [sp, 0x38]",
            "lsr fp, r5, 0xa",
            "eor fp, fp, r5, ror 17",
            "str fp, [sp, 4]",
            "lsr fp, r1, 3",
            "str fp, [sp, 0x14]",
            "ldr sl, [sp, 0x58]",
            "ldr fp, [sp, 0x34]",
            "add sl, sl, fp",
            "str sl, [sp, 0xc]",
            "ldr sl, [sp, 4]",
            "eor r5, sl, r5, ror 19",
            "ldr sl, [sp, 0x14]",
            "eor fp, sl, r1, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r5, sl, r5",
            "eor sl, fp, r1, ror 18",
            "add sl, r5, sl",
            "str sl, [sp, 0x34]",
            "b 0xb887c",
            "ldr r5, [sp, 0x28]",
            "ldr sb, [sp, 0x34]",
            "lsr fp, r5, 0xa",
            "eor fp, fp, r5, ror 17",
            "lsr r6, sb, 3",
            "str fp, [sp, 4]",
            "str r6, [sp, 0x14]",
            "ldr fp, [sp, 0x54]",
            "ldr r6, [sp, 0x30]",
            "add fp, fp, r6",
            "str fp, [sp, 0xc]",
            "ldr r6, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor r5, fp, r5, ror 19",
            "eor fp, r6, sb, ror 7",
            "ldr r6, [sp, 0xc]",
            "eor sb, fp, sb, ror 18",
            "add r5, r6, r5",
            "add r5, r5, sb",
            "str r5, [sp, 0x30]",
            "b 0xb8808",
            "ldr r4, [sp, 0x24]",
            "ldr ip, [sp, 0x30]",
            "lsr fp, r4, 0xa",
            "eor fp, fp, r4, ror 17",
            "str fp, [sp, 4]",
            "lsr fp, ip, 3",
            "str fp, [sp, 0x14]",
            "ldr sl, [sp, 0x50]",
            "ldr fp, [sp, 0x2c]",
            "add sl, sl, fp",
            "str sl, [sp, 0xc]",
            "ldr sl, [sp, 4]",
            "eor r4, sl, r4, ror 19",
            "ldr sl, [sp, 0x14]",
            "eor fp, sl, ip, ror 7",
            "ldr sl, [sp, 0xc]",
            "add r4, sl, r4",
            "eor sl, fp, ip, ror 18",
            "add sl, r4, sl",
            "str sl, [sp, 0x2c]",
            "b 0xb8794",
            "ldr ip, [sp, 0x20]",
            "ldr sb, [sp, 0x2c]",
            "lsr fp, ip, 0xa",
            "eor fp, fp, ip, ror 17",
            "lsr r7, sb, 3",
            "str fp, [sp, 4]",
            "str r7, [sp, 0x14]",
            "ldr fp, [sp, 0x4c]",
            "ldr r7, [sp, 0x28]",
            "add fp, fp, r7",
            "str fp, [sp, 0xc]",
            "ldr r7, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor ip, fp, ip, ror 19",
            "eor fp, r7, sb, ror 7",
            "ldr r7, [sp, 0xc]",
            "eor sb, fp, sb, ror 18",
            "add ip, r7, ip",
            "add ip, ip, sb",
            "str ip, [sp, 0x28]",
            "b 0xb8720",
            "ldr ip, [sp, 0x5c]",
            "ldr r3, [sp, 0x28]",
            "lsr fp, ip, 0xa",
            "eor fp, fp, ip, ror 17",
            "lsr r8, r3, 3",
            "str fp, [sp, 4]",
            "str r8, [sp, 0x14]",
            "ldr fp, [sp, 0x48]",
            "ldr r8, [sp, 0x24]",
            "add fp, fp, r8",
            "str fp, [sp, 0xc]",
            "ldr r8, [sp, 0x14]",
            "ldr fp, [sp, 4]",
            "eor ip, fp, ip, ror 19",
            "eor fp, r8, r3, ror 7",
            "ldr r8, [sp, 0xc]",
            "eor r3, fp, r3, ror 18",
            "add ip, r8, ip",
            "add ip, ip, r3",
            "str ip, [sp, 0x24]",
            "b 0xb86ac",
            "ldr fp, [sp, 0x18]",
            "ldr ip, [fp]",
            "ldr r1, [fp, 0x10]",
            "ldr r5, [fp, 4]",
            "add r3, r1, r3",
            "ldr r0, [fp, 0x14]",
            "ldr r1, [sp, 0x74]",
            "add r4, ip, r4",
            "ldr ip, [sp, 0x64]",
            "ldr r6, [fp, 0x18]",
            "ldr lr, [fp, 8]",
            "add r0, r0, r1",
            "add r5, r5, ip",
            "ldr r1, [sp, 0x78]",
            "ldr ip, [sp, 0x68]",
            "ldr r8, [fp, 0xc]",
            "ldr r7, [fp, 0x1c]",
            "add lr, lr, ip",
            "add r1, r6, r1",
            "ldr ip, [sp, 0x6c]",
            "ldr r6, [sp, 0x7c]",
            "add ip, r8, ip",
            "add r6, r7, r6",
            "str ip, [fp, 0xc]",
            "str r3, [fp, 0x10]",
            "str r0, [fp, 0x14]",
            "str r1, [fp, 0x18]",
            "str r6, [fp, 0x1c]",
            "stm fp, {r4, r5, lr}",
            "add r0, sp, 0x20",
            "mov r1, 0",
            "bl sym.imp.memset",
            "ldr ip, [sp, 0x1c]",
            "mov r2, 0",
            "add r3, ip, 0xc",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r1, r0, 0x30",
            "add r0, r0, 0x10",
            "b 0xb85a4"
        ]
    },
    "sym.mySTL::list_yaSSL::ThreadError_::pop_back__": {
        "function_address": "0x00089904",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x8994c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::CopySelfCert_yaSSL::x509_const_": {
        "function_address": "0x0007c370",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "beq 0x7c3a4",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r5",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL4x509C1ERKS0_",
            "mov r0, r4",
            "mov r1, r6",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE9push_backES3_",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL4x509C1ERKS0_": {
        "function_address": "0x0003dc54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x76c]!"
        ]
    },
    "method.TaoCrypt::Integer.operator__": {
        "function_address": "0x000ac5f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0xc]",
            "ldr r5, [0x000ac81c]",
            "cmp r3, 1",
            "sub sp, sp, 8",
            "mov r4, r0",
            "add r5, pc, r5",
            "beq 0xac6c0",
            "ldr ip, [r0]",
            "ldr r1, [r0, 4]",
            "cmp ip, 0",
            "beq 0xac7ac",
            "ldr r2, [r1]",
            "add r3, r2, 1",
            "cmp r2, r3",
            "str r3, [r1]",
            "bls 0xac6b0",
            "cmp ip, 1",
            "bls 0xac684",
            "ldr r3, [r1, 4]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r1, 4]",
            "moveq r2, 1",
            "moveq r3, r1",
            "beq 0xac678",
            "b 0xac6b0",
            "ldr r0, [r3, 8]",
            "add r0, r0, 1",
            "cmp r0, 0",
            "str r0, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xac6b0",
            "add r2, r2, 1",
            "cmp ip, r2",
            "bhi 0xac660",
            "ldr r2, [r4]",
            "lsl r6, r2, 1",
            "cmp r6, r2",
            "movls r6, r2",
            "bhi 0xac774",
            "lsr r3, r6, 1",
            "cmp r3, r6",
            "bhs 0xac7d0",
            "ldr r2, [r4, 4]",
            "mov r1, 1",
            "str r1, [r2, r3, lsl 2]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, [r0]",
            "ldr r2, [r4, 4]",
            "cmp r0, 0",
            "beq 0xac7f4",
            "ldr ip, [r2]",
            "sub r1, ip, 1",
            "cmp ip, r1",
            "str r1, [r2]",
            "bhs 0xac750",
            "cmp r0, 1",
            "bls 0xac728",
            "ldr r1, [r2, 4]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r2, 4]",
            "beq 0xac71c",
            "b 0xac750",
            "ldr r1, [r2, 8]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r2, 8]",
            "add r2, r2, 4",
            "bne 0xac750",
            "add r3, r3, 1",
            "cmp r0, r3",
            "bhi 0xac704",
            "ldr r3, [0x000ac820]",
            "ldr r1, [0x000ac824]",
            "add r3, r5, r3",
            "ldr r0, [0x000ac828]",
            "add r3, r3, 0xf10",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000ac82c]",
            "bl sym.imp.__assert_fail",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 0",
            "bne 0xac6b0",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "b 0xac6b0",
            "mov ip, 1",
            "mov r3, r6",
            "add r0, r4, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r6",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r6, [r4]",
            "b 0xac698",
            "ldr r3, [0x000ac820]",
            "ldr r1, [0x000ac824]",
            "ldr r0, [0x000ac830]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x8c0",
            "mov r2, 0x1ec",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000ac820]",
            "ldr r1, [0x000ac834]",
            "ldr r0, [0x000ac838]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000ac820]",
            "ldr r1, [0x000ac824]",
            "add r3, r5, r3",
            "ldr r0, [0x000ac830]",
            "add r3, r3, 0x6f0",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000ac83c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer9WordCountEv": {
        "function_address": "0x0003e350",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2c4]!"
        ]
    },
    "sym.TaoCrypt::AbstractGroup::ScalarMultiply_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000986cc",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "mov r5, r1",
            "mov r6, r3",
            "mov r4, r0",
            "mov r7, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, 1",
            "str r3, [sp]",
            "mov r0, r5",
            "mov r2, r7",
            "mov r3, r6",
            "ldr ip, [r5]",
            "mov r1, r4",
            "ldr ip, [ip, 0x34]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateDHClient__": {
        "function_address": "0x0008b1c4",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL25ClientDiffieHellmanPublicC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL25ClientDiffieHellmanPublicC1Ev": {
        "function_address": "0x0003e8cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf1c]!"
        ]
    },
    "sym.operator_delete_void__TaoCrypt::new_t_": {
        "function_address": "0x000b0764",
        "instructions": [
            "cmp r0, 0",
            "push {r4, lr}",
            "blne sym.imp.free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::ServerHello_": {
        "function_address": "0x0008bb6c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "ldr r1, [0x0008bc18]",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008bc18]",
            "strb r3, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r2, 0x20",
            "add r1, r4, 0xa",
            "strb r3, [r4, 9]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "ldr r1, [0x0008bc18]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r2, [r0]",
            "cmp r2, 0",
            "strb r2, [r4, 0x2a]",
            "movne r0, r5",
            "addne r1, r4, 0x2b",
            "blne rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldr r1, [0x0008bc18]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008bc18]",
            "strb r3, [r4, 0x4b]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008bc18]",
            "strb r3, [r4, 0x4c]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r0, r5",
            "str r3, [r4, 0x50]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer4readEPhj": {
        "function_address": "0x0003ea04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe4c]!"
        ]
    },
    "fcn.000adab4": {
        "function_address": "0x000adab4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000adb8c]",
            "ldr r3, [0x000adb90]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x50]",
            "ldr r2, [r0, 0x4c]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x40]",
            "ldr r2, [r4, 0x3c]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000adb94]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [r4, 0x30]",
            "add r3, r3, 8",
            "str r3, [r0], 0x34",
            "ldr r2, [r4, 0x2c]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x24",
            "ldr r1, [r4, 0x20]",
            "ldr r2, [r4, 0x1c]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x14",
            "ldr r1, [r4, 0x10]",
            "ldr r2, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r2, [0x000adb98]",
            "ldr r3, [0x000adb9c]",
            "ldr r2, [r5, r2]",
            "ldr r1, [0x000adba0]",
            "ldr r0, [0x000adba4]",
            "add r2, r2, 8",
            "add r3, r5, r3",
            "str r2, [r4]",
            "str r2, [r4, 4]",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x208",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::MultiplicativeInverse_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a7ed8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr ip, [r1]",
            "ldr r5, [r0, 0xc]",
            "ldr r2, [0x000a8014]",
            "cmp r5, ip",
            "add r2, pc, r2",
            "sub sp, sp, 0xc",
            "mov r6, r0",
            "ldr r4, [r0, 0x50]",
            "ldr r7, [r0, 0x20]",
            "blo 0xa7fec",
            "cmp ip, 0",
            "ldr lr, [r1, 4]",
            "beq 0xa7f34",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r0, [lr, r3]",
            "add r2, r2, 1",
            "cmp ip, r2",
            "str r0, [r4, r3]",
            "add r3, r3, 4",
            "bhi 0xa7f18",
            "ldr ip, [r1]",
            "rsbs r2, ip, r5, lsl 1",
            "add ip, r4, ip, lsl 2",
            "beq 0xa7f58",
            "mov r3, 0",
            "mov r1, r3",
            "str r1, [ip, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r2, r3",
            "bhi 0xa7f48",
            "ldr ip, [r6, 0x40]",
            "ldr r3, [r6, 0x10]",
            "mov r0, r7",
            "add r1, r4, r5, lsl 3",
            "mov r2, r4",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt16MontgomeryReduceEPjS0_PKjS2_S2_j",
            "ldr ip, [r6, 0x10]",
            "mov r1, r4",
            "mov r2, r7",
            "mov r0, r7",
            "mov r3, r5",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt13AlmostInverseEPjS0_PKjjS2_j",
            "lsl r1, r5, 5",
            "cmp r0, r1",
            "mov r2, r0",
            "bhi 0xa7fd0",
            "ldr r3, [r6, 0x10]",
            "rsb r2, r2, r1",
            "mov r0, r7",
            "mov r1, r7",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt19MultiplyByPower2ModEPjPKjjS2_j",
            "add r0, r6, 0x1c",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [r6, 0x10]",
            "rsb r2, r1, r2",
            "mov r0, r7",
            "mov r1, r7",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt17DivideByPower2ModEPjPKjjS2_j",
            "b 0xa7fc0",
            "ldr r3, [0x000a8018]",
            "ldr r1, [0x000a801c]",
            "add r3, r2, r3",
            "ldr r0, [0x000a8020]",
            "add r3, r3, 0xad0",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a8024]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt16MontgomeryReduceEPjS0_PKjS2_S2_j": {
        "function_address": "0x0003e7b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfd4]!"
        ]
    },
    "rsym._ZN8TaoCrypt13AlmostInverseEPjS0_PKjjS2_j": {
        "function_address": "0x0003ea40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe24]!"
        ]
    },
    "rsym._ZN8TaoCrypt19MultiplyByPower2ModEPjPKjjS2_j": {
        "function_address": "0x00040480",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xca4]!"
        ]
    },
    "rsym._ZN8TaoCrypt17DivideByPower2ModEPjPKjjS2_j": {
        "function_address": "0x0003f2bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x87c]!"
        ]
    },
    "sym.TaoCrypt::Multiply_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000aa144",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r2",
            "mov r5, r1",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt16PositiveMultiplyERNS_7IntegerERKS0_S3_",
            "ldr r2, [r5, 0xc]",
            "ldr r3, [r4, 0xc]",
            "subs r2, r2, 1",
            "movne r2, 1",
            "subs r3, r3, 1",
            "movne r3, 1",
            "cmp r2, r3",
            "beq 0xaa184",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN8TaoCrypt7Integer6NegateEv",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt16PositiveMultiplyERNS_7IntegerERKS0_S3_": {
        "function_address": "0x0003cee0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x64]!"
        ]
    },
    "fcn.00099c0c": {
        "function_address": "0x00099c0c",
        "instructions": [
            "ldr ip, [0x00099c48]",
            "ldr r3, [0x00099c4c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00099c50]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00099c54]",
            "ldr r0, [0x00099c58]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CreateServerKeyExchange__": {
        "function_address": "0x0008b330",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL17ServerKeyExchangeC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL17ServerKeyExchangeC1Ev": {
        "function_address": "0x0004015c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xebc]!"
        ]
    },
    "method.TaoCrypt::HMAC_TaoCrypt::MD5_.HMAC__": {
        "function_address": "0x000bb240",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 4",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb2a8]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb2ac]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD54InitEv": {
        "function_address": "0x0003d444",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xccc]!"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv": {
        "function_address": "0x0003feec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5c]!"
        ]
    },
    "sym.TaoCrypt::Integer::Zero__": {
        "function_address": "0x000a8d5c",
        "instructions": [
            "ldr r3, [0x000a8da4]",
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000a8da8]",
            "add r3, pc, r3",
            "add r4, r3, r4",
            "ldr r5, [r4, 4]",
            "cmp r5, 0",
            "beq 0xa8d88",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN8TaoCrypt5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "str r5, [r4, 4]",
            "b 0xa8d7c"
        ]
    },
    "rsym._ZnwjN8TaoCrypt5new_tE": {
        "function_address": "0x0003fb80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2a4]!"
        ]
    },
    "sym.vio_was_interrupted": {
        "function_address": "0x0007a1fc",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "cmp r0, 0xb",
            "cmpne r0, 4",
            "movne r0, 0",
            "moveq r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_list_fields": {
        "function_address": "0x00044d5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x11c",
            "add r6, sp, 0x14",
            "mov r7, r2",
            "mov r4, r0",
            "ldr r5, [0x00044e70]",
            "mov r0, r6",
            "mov r2, 0x80",
            "bl rsym.strmake",
            "cmp r7, 0",
            "add r5, pc, r5",
            "beq 0x44dfc",
            "mov r1, r7",
            "mov r2, 0x80",
            "add r0, r0, 1",
            "bl rsym.strmake",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym.free_old_query",
            "mov r3, 0",
            "rsb r1, r6, r5",
            "mov r5, 1",
            "str r1, [sp, 4]",
            "str r6, [sp]",
            "str r5, [sp, 8]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "ldr ip, [r4, 0x3b0]",
            "mov r0, r4",
            "mov r1, 4",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "beq 0x44e08",
            "mov ip, 0",
            "mov r0, ip",
            "add sp, sp, 0x11c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r7, [0x00044e74]",
            "add r7, r5, r7",
            "b 0x44d8c",
            "ldr r3, [r4, 0x3b0]",
            "mov r0, r4",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "subs r8, r0, 0",
            "beq 0x44de8",
            "mov r0, 0x58",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "subs ip, r0, 0",
            "beq 0x44dec",
            "ldr r3, [r4, 0x3b0]",
            "add sl, ip, 0x28",
            "str r3, [ip, 0x1c]",
            "add r6, r4, 0x298",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm sl!, {r0, r1, r2, r3}",
            "ldm r6, {r0, r1, r2, r3}",
            "stm sl, {r0, r1, r2, r3}",
            "ldr r3, [r4, 0x2e8]",
            "str r7, [r4, 0x294]",
            "str r3, [ip, 0x48]",
            "str r8, [ip, 8]",
            "strb r5, [ip, 0x50]",
            "b 0x44dec"
        ]
    },
    "rsym.strmake": {
        "function_address": "0x0003dd8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x69c]!"
        ]
    },
    "rsym.free_old_query": {
        "function_address": "0x0003d75c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xabc]!"
        ]
    },
    "sym.yaSSL::CreateClientKeyExchange__": {
        "function_address": "0x0008b2c4",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL17ClientKeyExchangeC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL17ClientKeyExchangeC1Ev": {
        "function_address": "0x0003d3f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd04]!"
        ]
    },
    "method.mySTL::list_yaSSL::Digest_.push_back_yaSSL::Digest_": {
        "function_address": "0x00089000",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.dynstr_realloc": {
        "function_address": "0x0004ddbc",
        "instructions": [
            "cmp r1, 0",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "beq 0x4dddc",
            "ldmib r0, {r2, r3}",
            "add r1, r1, r2",
            "cmp r1, r3",
            "bhi 0x4dde8",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r5, [r0, 0xc]",
            "sub r0, r5, 1",
            "add r0, r0, r1",
            "mov r1, r5",
            "bl fcn.000bed20",
            "mul r1, r5, r0",
            "mov r2, 0x10",
            "str r1, [r4, 8]",
            "ldr r0, [r4]",
            "bl rsym.my_realloc",
            "str r0, [r4]",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "b 0x4dde0"
        ]
    },
    "rsym.my_realloc": {
        "function_address": "0x0003ead0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdc4]!"
        ]
    },
    "sym.system_filename": {
        "function_address": "0x00049f3c",
        "instructions": [
            "push {r4, lr}",
            "ldr r2, [0x00049f58]",
            "mov r4, r0",
            "bl rsym.strmake",
            "rsb r0, r4, r0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym._my_thread_var": {
        "function_address": "0x0004d4ac",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0004d4d0]",
            "ldr r2, [0x0004d4d4]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "ldr r0, [r2]",
            "bl sym.imp.pthread_getspecific",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_getspecific": {
        "function_address": "0x0003e194",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3ec]!"
        ]
    },
    "method.mySTL::list_yaSSL::Digest_.remove_yaSSL::Digest_": {
        "function_address": "0x0008919c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL6DigestEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x891f4",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x8920c",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x891fc",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL6DigestEE8pop_backEv",
            "mov r0, 1",
            "b 0x891f4",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL6DigestEE9pop_frontEv",
            "mov r0, 1",
            "b 0x891f4"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL6DigestEE7look_upES3_": {
        "function_address": "0x0003e470",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x204]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL6DigestEE8pop_backEv": {
        "function_address": "0x0003e314",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2ec]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL6DigestEE9pop_frontEv": {
        "function_address": "0x0003d7c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa74]!"
        ]
    },
    "sym.my_time_possible_from_micro": {
        "function_address": "0x00059f38",
        "instructions": [
            "push {r4, lr}",
            "ldr r2, [0x00059f50]",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000bff38": {
        "function_address": "0x000bff38",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r2",
            "mov r7, r3",
            "mov r5, r0",
            "mov r6, r1",
            "bl fcn.000c0588",
            "mul r8, r0, r7",
            "umull r2, r3, r0, r4",
            "mla ip, r4, r1, r8",
            "mov r7, r5",
            "add r3, ip, r3",
            "mov r8, r6",
            "subs r7, r7, r2",
            "sbc r8, r8, r3",
            "ldr r3, [sp, 0x18]",
            "stm r3, {r7, r8}",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.000c0588": {
        "function_address": "0x000c0588",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "cmp r3, 0",
            "mov r7, r3",
            "mov fp, r1",
            "mov r5, r0",
            "mov r4, r2",
            "mov r6, r1",
            "bne 0xc0684",
            "cmp r2, r1",
            "bls 0xc07c8",
            "mov r0, r2",
            "bl fcn.000c09d0",
            "cmp r0, 0",
            "rsbne r3, r0, 0x20",
            "lsrne r3, r5, r3",
            "lslne r4, r4, r0",
            "orrne r6, r3, fp, lsl r0",
            "lsr r7, r4, 0x10",
            "lslne r5, r5, r0",
            "mov r1, r7",
            "mov r0, r6",
            "bl fcn.000bee1c",
            "mov r0, r6",
            "mov sb, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "lsl r6, r4, 0x10",
            "lsr r6, r6, 0x10",
            "mul sl, r6, r0",
            "lsr r3, r5, 0x10",
            "orr sb, r3, sb, lsl 16",
            "cmp sl, sb",
            "mov r8, r0",
            "bls 0xc062c",
            "adds sb, sb, r4",
            "sub r8, r0, 1",
            "bhs 0xc062c",
            "cmp sl, sb",
            "subhi r8, r8, 1",
            "addhi sb, sb, r4",
            "rsb sl, sl, sb",
            "mov r0, sl",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sl",
            "mov fp, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "mul r3, r6, r0",
            "lsl r5, r5, 0x10",
            "lsr r5, r5, 0x10",
            "orr r5, r5, fp, lsl 16",
            "cmp r3, r5",
            "bls 0xc0678",
            "adds r5, r5, r4",
            "sub r0, r0, 1",
            "bhs 0xc0678",
            "cmp r3, r5",
            "subhi r0, r0, 1",
            "orr sl, r0, r8, lsl 16",
            "mov r1, 0",
            "b 0xc08c4",
            "cmp r3, r1",
            "bhi 0xc08bc",
            "mov r0, r3",
            "bl fcn.000c09d0",
            "subs r6, r0, 0",
            "beq 0xc08a8",
            "rsb r8, r6, 0x20",
            "lsr r2, r4, r8",
            "orr r7, r2, r7, lsl r6",
            "lsr r3, r5, r8",
            "lsr r8, fp, r8",
            "lsr sl, r7, 0x10",
            "mov r0, r8",
            "mov r1, sl",
            "orr fp, r3, fp, lsl r6",
            "bl fcn.000bee1c",
            "mov r0, r8",
            "mov r3, r1",
            "mov r1, sl",
            "str r3, [sp]",
            "bl fcn.000bed20",
            "lsl r8, r7, 0x10",
            "lsr r8, r8, 0x10",
            "mul r1, r8, r0",
            "ldr r3, [sp]",
            "lsr r2, fp, 0x10",
            "orr r3, r2, r3, lsl 16",
            "cmp r1, r3",
            "mov sb, r0",
            "lsl r2, r4, r6",
            "bls 0xc070c",
            "adds r3, r3, r7",
            "sub sb, r0, 1",
            "blo 0xc09b0",
            "rsb r4, r1, r3",
            "mov r0, r4",
            "mov r1, sl",
            "str r2, [sp, 4]",
            "bl fcn.000bee1c",
            "mov r0, r4",
            "mov r3, r1",
            "mov r1, sl",
            "str r3, [sp]",
            "bl fcn.000bed20",
            "mul r1, r8, r0",
            "lsl fp, fp, 0x10",
            "ldr r3, [sp]",
            "lsr fp, fp, 0x10",
            "orr r3, fp, r3, lsl 16",
            "cmp r1, r3",
            "ldr r2, [sp, 4]",
            "bls 0xc0760",
            "adds r3, r3, r7",
            "sub r0, r0, 1",
            "blo 0xc09a0",
            "rsb r3, r1, r3",
            "orr sl, r0, sb, lsl 16",
            "lsr r1, sl, 0x10",
            "lsr r0, r2, 0x10",
            "bic ip, sl, r1, lsl 16",
            "bic r4, r2, r0, lsl 16",
            "mul r2, ip, r4",
            "mul r4, r1, r4",
            "mul ip, r0, ip",
            "mul r0, r1, r0",
            "adds ip, r4, ip",
            "addhs r0, r0, 0x10000",
            "adds r2, r2, ip, lsl 16",
            "adc r0, r0, ip, lsr 16",
            "cmp r3, r0",
            "blo 0xc07bc",
            "movne r1, 0",
            "moveq r1, 1",
            "cmp r2, r5, lsl r6",
            "movls r1, 0",
            "andhi r1, r1, 1",
            "cmp r1, 0",
            "beq 0xc08c4",
            "sub sl, sl, 1",
            "mov r1, 0",
            "b 0xc08c4",
            "cmp r2, 0",
            "bne 0xc07e0",
            "mov r1, r2",
            "mov r0, 1",
            "bl fcn.000bed20",
            "mov r4, r0",
            "mov r0, r4",
            "bl fcn.000c09d0",
            "subs sl, r0, 0",
            "bne 0xc08d8",
            "lsl r8, r4, 0x10",
            "rsb fp, r4, fp",
            "lsr r8, r8, 0x10",
            "lsr r7, r4, 0x10",
            "mov r6, 1",
            "mov r0, fp",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, fp",
            "mov sb, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "mul r3, r8, r0",
            "lsr r2, r5, 0x10",
            "orr sb, r2, sb, lsl 16",
            "cmp r3, sb",
            "mov sl, r0",
            "bls 0xc0850",
            "adds sb, sb, r4",
            "sub sl, r0, 1",
            "bhs 0xc0850",
            "cmp r3, sb",
            "subhi sl, sl, 1",
            "addhi sb, sb, r4",
            "rsb sb, r3, sb",
            "mov r0, sb",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "mul r3, r8, r0",
            "lsl r5, r5, 0x10",
            "lsr r5, r5, 0x10",
            "orr r5, r5, fp, lsl 16",
            "cmp r3, r5",
            "bls 0xc089c",
            "adds r5, r5, r4",
            "sub r0, r0, 1",
            "bhs 0xc089c",
            "cmp r3, r5",
            "subhi r0, r0, 1",
            "orr sl, r0, sl, lsl 16",
            "mov r1, r6",
            "b 0xc08c4",
            "cmp r7, fp",
            "cmphs r4, r5",
            "movls r1, r6",
            "movls sl, 1",
            "bls 0xc08c4",
            "mov r1, 0",
            "mov sl, r1",
            "mov r4, r1",
            "mov r0, sl",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "rsb r6, sl, 0x20",
            "lsl r4, r4, sl",
            "lsr r3, r5, r6",
            "lsr r6, fp, r6",
            "lsr r7, r4, 0x10",
            "mov r0, r6",
            "mov r1, r7",
            "orr fp, r3, fp, lsl sl",
            "bl fcn.000bee1c",
            "mov r0, r6",
            "mov sb, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "lsl r8, r4, 0x10",
            "lsr r8, r8, 0x10",
            "mul r3, r8, r0",
            "lsr r2, fp, 0x10",
            "orr sb, r2, sb, lsl 16",
            "cmp r3, sb",
            "mov r6, r0",
            "bls 0xc0938",
            "adds sb, sb, r4",
            "sub r6, r0, 1",
            "blo 0xc09c0",
            "rsb sb, r3, sb",
            "mov r0, sb",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sb",
            "mov r3, r1",
            "mov r1, r7",
            "str r3, [sp]",
            "bl fcn.000bed20",
            "mul r2, r8, r0",
            "lsl fp, fp, 0x10",
            "ldr r3, [sp]",
            "lsr fp, fp, 0x10",
            "orr r3, fp, r3, lsl 16",
            "cmp r2, r3",
            "bls 0xc0990",
            "adds r3, r3, r4",
            "sub r0, r0, 1",
            "bhs 0xc0990",
            "cmp r2, r3",
            "subhi r0, r0, 1",
            "addhi r3, r3, r4",
            "lsl r5, r5, sl",
            "rsb fp, r2, r3",
            "orr r6, r0, r6, lsl 16",
            "b 0xc0804",
            "cmp r1, r3",
            "addhi r3, r3, r7",
            "subhi r0, r0, 1",
            "b 0xc0760",
            "cmp r1, r3",
            "subhi sb, sb, 1",
            "addhi r3, r3, r7",
            "b 0xc070c",
            "cmp r3, sb",
            "subhi r6, r6, 1",
            "addhi sb, sb, r4",
            "b 0xc0938"
        ]
    },
    "fcn.000c09d0": {
        "function_address": "0x000c09d0",
        "instructions": [
            "mov r1, 0x1c",
            "cmp r0, 0x10000",
            "lsrhs r0, r0, 0x10",
            "subhs r1, r1, 0x10",
            "cmp r0, 0x100",
            "lsrhs r0, r0, 8",
            "subhs r1, r1, 8",
            "cmp r0, 0x10",
            "lsrhs r0, r0, 4",
            "subhs r1, r1, 4",
            "add r2, pc, 8",
            "ldrb r0, [r2, r0]",
            "add r0, r0, r1",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Inverse_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad5c8",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7IntegerngEv",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "fcn.0008116c": {
        "function_address": "0x0008116c",
        "instructions": [
            "ldr ip, [0x000811ac]",
            "ldr r3, [0x000811b0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000811b4]",
            "add r2, r3, 8",
            "ldr r3, [0x000811b8]",
            "str r2, [r0]",
            "ldr r0, [0x000811bc]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1c",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_yaSSL::SSL_SESSION_::push_back_yaSSL::SSL_SESSION_": {
        "function_address": "0x00087ce0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::output_buffer::set_current_unsigned_int_": {
        "function_address": "0x0007bb3c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "str r5, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL5Check5checkEjj": {
        "function_address": "0x0003f0a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9e4]!"
        ]
    },
    "fcn.0007d250": {
        "function_address": "0x0007d250",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d294]",
            "ldr r3, [0x0007d298]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_RMD12HMAC_RMDImplEEEvPT_",
            "ldr r3, [0x0007d29c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateClientHello__": {
        "function_address": "0x0008b7e4",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0xd4",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL11ClientHelloC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11ClientHelloC1Ev": {
        "function_address": "0x0003d654",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb6c]!"
        ]
    },
    "sym.yaDES_ecb_encrypt": {
        "function_address": "0x000855ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 8",
            "mov r5, r3",
            "mov r6, r0",
            "mov r0, sp",
            "mov r7, r1",
            "mov r8, r2",
            "bl rsym._ZN5yaSSL3DESC1Ev",
            "cmp r5, 0",
            "mov r4, sp",
            "bne 0x85650",
            "mov r1, r8",
            "mov r2, r5",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL3DES14set_decryptKeyEPKhS2_",
            "mov r0, sp",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, 8",
            "bl rsym._ZN5yaSSL3DES7decryptEPhPKhj",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL3DESD1Ev",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, r8",
            "mov r0, sp",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL3DES14set_encryptKeyEPKhS2_",
            "mov r0, sp",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, 8",
            "bl rsym._ZN5yaSSL3DES7encryptEPhPKhj",
            "b 0x8563c"
        ]
    },
    "rsym._ZN5yaSSL3DESC1Ev": {
        "function_address": "0x0003d9d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x914]!"
        ]
    },
    "rsym._ZN5yaSSL3DES14set_decryptKeyEPKhS2_": {
        "function_address": "0x0003f6b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5d4]!"
        ]
    },
    "rsym._ZN5yaSSL3DES7decryptEPhPKhj": {
        "function_address": "0x0003f814",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4ec]!"
        ]
    },
    "rsym._ZN5yaSSL3DESD1Ev": {
        "function_address": "0x0003ed58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc14]!"
        ]
    },
    "rsym._ZN5yaSSL3DES14set_encryptKeyEPKhS2_": {
        "function_address": "0x0003ee00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xba4]!"
        ]
    },
    "rsym._ZN5yaSSL3DES7encryptEPhPKhj": {
        "function_address": "0x0003e86c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf5c]!"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Add_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab350",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r1]",
            "mov r5, r1",
            "ldr r1, [r0, 0xc]",
            "sub sp, sp, 0x14",
            "cmp r3, r1",
            "mov r4, r0",
            "beq 0xab3d0",
            "mov r1, r5",
            "mov r0, sp",
            "add r5, r4, 0x2c",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, sp",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r4, r4, 0xc",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "mov r6, sp",
            "movge r1, r4",
            "movge r0, r5",
            "blge rsym._ZN8TaoCrypt7IntegermIERKS0_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bne 0xab370",
            "ldr r2, [r2, 4]",
            "ldr r0, [r0, 0x20]",
            "ldr r1, [r5, 4]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r0, 0",
            "bne 0xab444",
            "ldr r3, [r5]",
            "ldr r0, [r4, 0x20]",
            "ldr r2, [r4, 0x10]",
            "sub ip, r3, 0xc0000001",
            "lsl ip, ip, 2",
            "add r5, r2, ip",
            "mov r1, r3",
            "add ip, r0, ip",
            "cmp r1, 0",
            "beq 0xab450",
            "ldr r7, [ip]",
            "ldr r6, [r5]",
            "sub r1, r1, 1",
            "cmp r7, r6",
            "bhi 0xab450",
            "sub ip, ip, 4",
            "sub r5, r5, 4",
            "bhs 0xab414",
            "add r5, r4, 0x1c",
            "b 0xab3c0",
            "ldr r3, [r5]",
            "ldr r0, [r4, 0x20]",
            "ldr r2, [r4, 0x10]",
            "mov r1, r0",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "add r5, r4, 0x1c",
            "b 0xab3c0"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer4PlusERKS0_": {
        "function_address": "0x0003e6b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x84]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer7CompareERKS0_": {
        "function_address": "0x0003df54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x56c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegermIERKS0_": {
        "function_address": "0x0003f190",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x944]!"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j": {
        "function_address": "0x0003d96c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x95c]!"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j": {
        "function_address": "0x0003ddd4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x66c]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::SSL__yaSSL::SSL_": {
        "function_address": "0x00089f64",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00089fe8]",
            "subs r4, r0, 0",
            "add r5, pc, r5",
            "beq 0x89fd4",
            "add r0, r4, 0x9d0",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL3LogD1Ev",
            "add r0, r4, 0x9c0",
            "bl rsym._ZN5yaSSL7BuffersD1Ev",
            "add r0, r4, 0x9b0",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL6SocketD1Ev",
            "ldr r3, [0x00089fec]",
            "add r0, r4, 0x960",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x968]",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "add r0, r4, 0x950",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "add r0, r4, 0x880",
            "bl rsym._ZN5yaSSL11SSL_SESSIOND1Ev",
            "add r0, r4, 0x68",
            "bl rsym._ZN5yaSSL10ConnectionD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL6CryptoD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3LogD1Ev": {
        "function_address": "0x0003da20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8e4]!"
        ]
    },
    "rsym._ZN5yaSSL7BuffersD1Ev": {
        "function_address": "0x0003cdb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x12c]!"
        ]
    },
    "rsym._ZN5yaSSL6SocketD1Ev": {
        "function_address": "0x0003f2d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x86c]!"
        ]
    },
    "rsym._ZN5yaSSL3SHAD1Ev": {
        "function_address": "0x0003e518",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x194]!"
        ]
    },
    "rsym._ZN5yaSSL3MD5D1Ev": {
        "function_address": "0x0003e2e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x30c]!"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSIOND1Ev": {
        "function_address": "0x0003d2ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xddc]!"
        ]
    },
    "rsym._ZN5yaSSL10ConnectionD1Ev": {
        "function_address": "0x0003ebb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd2c]!"
        ]
    },
    "rsym._ZN5yaSSL6CryptoD1Ev": {
        "function_address": "0x0003cd9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x13c]!"
        ]
    },
    "sym.cli_advanced_command": {
        "function_address": "0x00077a30",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "ldr sl, [sp, 0x44]",
            "ldr r5, [0x00077bfc]",
            "cmp sl, 0",
            "add r5, pc, r5",
            "mov r4, r0",
            "mov r6, r1",
            "mov r7, r2",
            "mov r8, r3",
            "ldr fp, [sp, 0x38]",
            "ldrb sb, [sp, 0x40]",
            "beq 0x77a70",
            "ldr sl, [sl, 0xac]",
            "subs sl, sl, 1",
            "movne sl, 1",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0x77b78",
            "ldr r3, [r4, 0x380]",
            "cmp r3, 0",
            "bne 0x77a94",
            "ldr r3, [r4, 0x2ec]",
            "ands r3, r3, 8",
            "beq 0x77abc",
            "ldr r3, [0x00077c00]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00077c04]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "str r3, [sp, 0xc]",
            "bl rsym.net_clear_error",
            "ldr r3, [sp, 0xc]",
            "mvn r2, 0",
            "str r3, [r4, 0x288]",
            "mvn r3, 0",
            "subs r1, r6, 1",
            "movne r1, 1",
            "str r2, [r4, 0x2b8]",
            "str r3, [r4, 0x2bc]",
            "mov r0, r4",
            "bl rsym.net_clear",
            "and r6, r6, 0xff",
            "ldr ip, [sp, 0x3c]",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "mov r3, r8",
            "stm sp, {fp, ip}",
            "bl rsym.net_write_command",
            "cmp r0, 0",
            "beq 0x77b50",
            "ldr r2, [r4, 0x58]",
            "ldr r3, [0x00077c08]",
            "cmp r2, r3",
            "beq 0x77bdc",
            "mov r0, r4",
            "bl rsym.end_server",
            "mov r0, r4",
            "bl rsym.mysql_reconnect",
            "cmp r0, 0",
            "bne 0x77b48",
            "cmp sl, 0",
            "beq 0x77b98",
            "mov r0, 1",
            "b 0x77ab0",
            "cmp sb, 0",
            "movne r0, 0",
            "bne 0x77ab0",
            "mov r0, r4",
            "bl rsym.cli_safe_read",
            "str r0, [r4, 0x2d4]",
            "cmn r0, 1",
            "movne r0, 0",
            "moveq r0, 1",
            "b 0x77ab0",
            "mov r0, r4",
            "bl rsym.mysql_reconnect",
            "cmp r0, 0",
            "bne 0x77b48",
            "cmp sl, 0",
            "beq 0x77a7c",
            "mov r0, 1",
            "b 0x77ab0",
            "ldr ip, [sp, 0x3c]",
            "mov r1, r6",
            "mov r2, r7",
            "mov r3, r8",
            "mov r0, r4",
            "stm sp, {fp, ip}",
            "bl rsym.net_write_command",
            "cmp r0, 0",
            "beq 0x77b50",
            "ldr r3, [0x00077c00]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00077c0c]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "b 0x77ab0",
            "ldr r3, [0x00077c00]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00077c10]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "b 0x77ab0"
        ]
    },
    "rsym.net_clear_error": {
        "function_address": "0x0003e77c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xffc]!"
        ]
    },
    "rsym.net_clear": {
        "function_address": "0x0003f4a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x734]!"
        ]
    },
    "rsym.net_write_command": {
        "function_address": "0x0003e284",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x34c]!"
        ]
    },
    "rsym.end_server": {
        "function_address": "0x0003d684",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb4c]!"
        ]
    },
    "rsym.mysql_reconnect": {
        "function_address": "0x0003e5b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x12c]!"
        ]
    },
    "sym.mysql_list_dbs": {
        "function_address": "0x000464f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr ip, [0x000465dc]",
            "ldr r3, [0x000465e0]",
            "sub sp, sp, 0x100",
            "add ip, pc, ip",
            "add r3, ip, r3",
            "mov lr, sp",
            "mov r5, r1",
            "mov r6, r0",
            "ldm r3, {r0, r1, r2, r3}",
            "stm lr!, {r0, r1, r2}",
            "lsr r2, r3, 0x10",
            "cmp r5, 0",
            "mov r4, sp",
            "strh r3, [lr]",
            "strb r2, [sp, 0xe]",
            "add r0, sp, 0xe",
            "beq 0x46544",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "bne 0x4656c",
            "mov r1, sp",
            "mov r0, r6",
            "bl rsym.mysql_query",
            "cmp r0, 0",
            "movne r0, 0",
            "moveq r0, r6",
            "bleq rsym.mysql_store_result",
            "add sp, sp, 0x100",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [0x000465e4]",
            "mov r2, 8",
            "add r1, ip, r1",
            "bl sym.imp.memcpy",
            "ldrb r3, [r5]",
            "add r0, r0, 7",
            "add r2, sp, 0xfa",
            "cmp r3, 0",
            "cmpne r2, r0",
            "bls 0x465bc",
            "mov r1, 0x5c",
            "cmp r3, 0x5c",
            "cmpne r3, 0x27",
            "strbeq r1, [r0], 1",
            "ldrbeq r3, [r5]",
            "strb r3, [r0], 1",
            "ldrb r3, [r5, 1]!",
            "cmp r3, 0",
            "cmpne r2, r0",
            "bhi 0x46598",
            "cmp r3, 0",
            "movne r3, 0x25",
            "strbne r3, [r0], 1",
            "mov r3, 0",
            "strb r3, [r0, 1]",
            "mov r3, 0x27",
            "strb r3, [r0]",
            "b 0x46544"
        ]
    },
    "rsym.mysql_query": {
        "function_address": "0x0003cfb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfd4]!"
        ]
    },
    "rsym.mysql_store_result": {
        "function_address": "0x0003f460",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x764]!"
        ]
    },
    "sym.yaSSL::ClientKeyExchange::createKey_yaSSL::SSL_": {
        "function_address": "0x0008ef70",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl rsym._ZNK5yaSSL3SSL10getFactoryEv",
            "bl rsym._ZNK5yaSSL10sslFactory12getClientKeyEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r2, [r5, 4]",
            "ldr r3, [r5]",
            "ldr r0, [r0, 0x1c]",
            "cmp r3, r2",
            "bne 0x8efbc",
            "b 0x8efe4",
            "add r3, r3, 8",
            "cmp r2, r3",
            "beq 0x8efe4",
            "ldr r1, [r3]",
            "cmp r0, r1",
            "bne 0x8efb0",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "str r0, [r6, 8]",
            "bne 0x8eff8",
            "b 0x8efec",
            "mov r3, 0",
            "str r3, [r6, 8]",
            "mov r0, r4",
            "mov r1, 0x67",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL3SSL10getFactoryEv": {
        "function_address": "0x0003f634",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x62c]!"
        ]
    },
    "rsym._ZNK5yaSSL10sslFactory12getClientKeyEv": {
        "function_address": "0x00040540",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc24]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Multiply_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad46c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer5TimesERKS0_": {
        "function_address": "0x0003e578",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x154]!"
        ]
    },
    "sym.vio_ssl_delete": {
        "function_address": "0x0007a55c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x7a594",
            "ldr r3, [r4, 0x30]",
            "cmp r3, 4",
            "beq 0x7a59c",
            "ldr r0, [r4, 0x98]",
            "cmp r0, 0",
            "beq 0x7a58c",
            "bl rsym.yaSSL_free",
            "mov r3, 0",
            "str r3, [r4, 0x98]",
            "mov r0, r4",
            "bl rsym.vio_delete",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym.vio_ssl_close",
            "b 0x7a574"
        ]
    },
    "rsym.yaSSL_free": {
        "function_address": "0x00040198",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe94]!"
        ]
    },
    "rsym.vio_delete": {
        "function_address": "0x0003e9b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe84]!"
        ]
    },
    "rsym.vio_ssl_close": {
        "function_address": "0x0003f6dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5bc]!"
        ]
    },
    "sym.my_create": {
        "function_address": "0x00048ce8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [0x00048dc8]",
            "subs lr, r1, 0",
            "add ip, pc, ip",
            "sub sp, sp, 8",
            "mov r5, r0",
            "mov r4, r3",
            "ldreq r3, [0x00048dcc]",
            "ldreq r3, [ip, r3]",
            "ldreq lr, [r3]",
            "orr r1, r2, 0x40",
            "mov r0, r5",
            "mov r2, lr",
            "bl sym.imp.open64",
            "mvn r6, r0",
            "lsr r6, r6, 0x1f",
            "ands r3, r6, r4, lsr 10",
            "mov r7, r0",
            "bne 0x48d68",
            "mov r0, r7",
            "mov r1, r5",
            "mov r2, 2",
            "mov r3, 1",
            "str r4, [sp]",
            "bl rsym.my_register_filename",
            "ands r6, r6, r0, lsr 31",
            "mov r7, r0",
            "bne 0x48da8",
            "mov r0, r7",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym.my_sync_dir_by_file",
            "cmp r0, 0",
            "beq 0x48d34",
            "mov r0, r7",
            "mov r1, r4",
            "bl rsym.my_close",
            "mov r1, r5",
            "mvn r0, 0",
            "mov r2, 2",
            "mov r3, 1",
            "str r4, [sp]",
            "bl rsym.my_register_filename",
            "mov r7, r0",
            "b 0x48d58",
            "bl rsym._my_thread_var",
            "ldr r8, [r0]",
            "mov r6, r0",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym.my_delete",
            "str r8, [r6]",
            "b 0x48d58"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x0003eca4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc8c]!"
        ]
    },
    "rsym.my_register_filename": {
        "function_address": "0x0003f040",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa24]!"
        ]
    },
    "rsym.my_sync_dir_by_file": {
        "function_address": "0x0003e770",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 4]!"
        ]
    },
    "rsym.my_delete": {
        "function_address": "0x0003d03c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf7c]!"
        ]
    },
    "sym.allocate_dynamic": {
        "function_address": "0x00050408",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 8]",
            "mov r4, r0",
            "cmp r3, r1",
            "bhi 0x50474",
            "ldr r6, [r0, 0xc]",
            "add r0, r1, r6",
            "mov r1, r6",
            "bl fcn.000bed20",
            "mov r3, r4",
            "ldr r2, [r3], 0x14",
            "mul r5, r6, r0",
            "cmp r2, r3",
            "beq 0x5047c",
            "ldr r1, [r4, 0x10]",
            "mov r0, r2",
            "mul r1, r5, r1",
            "mov r2, 0x50",
            "bl rsym.my_realloc",
            "subs r6, r0, 0",
            "moveq r0, 1",
            "beq 0x5046c",
            "str r5, [r4, 8]",
            "str r6, [r4]",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x5046c",
            "ldr r0, [r4, 0x10]",
            "mov r1, 0x10",
            "mul r0, r5, r0",
            "bl rsym.my_malloc",
            "subs r6, r0, 0",
            "beq 0x50474",
            "ldr r3, [r4, 0x10]",
            "ldm r4, {r1, r2}",
            "mul r2, r3, r2",
            "bl sym.imp.memcpy",
            "b 0x50460"
        ]
    },
    "sym.yaSSL::MD5::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dd38",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL_SESSION::CopyX509_yaSSL::X509_": {
        "function_address": "0x00094d60",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x60]",
            "ldr r2, [0x00094e64]",
            "cmp r3, 0",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "add r2, pc, r2",
            "mov r5, r1",
            "bne 0x94e40",
            "cmp r1, 0",
            "beq 0x94e34",
            "mov r0, r1",
            "bl rsym._ZN5yaSSL4X5099GetIssuerEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X50910GetSubjectEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X5099GetBeforeEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X5098GetAfterEv",
            "mov r5, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "mov sb, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL9X509_NAME9GetLengthEv",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "mov r7, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME9GetLengthEv",
            "mov r1, 0",
            "mov fp, r0",
            "mov r0, 0x40",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "str fp, [sp]",
            "ldr r3, [r8, 8]",
            "mov r6, r0",
            "str r3, [sp, 4]",
            "ldr r3, [r8, 4]",
            "mov r1, sb",
            "str r3, [sp, 8]",
            "ldr ip, [r5, 8]",
            "mov r2, sl",
            "str ip, [sp, 0xc]",
            "ldr ip, [r5, 4]",
            "mov r3, r7",
            "str ip, [sp, 0x10]",
            "bl rsym._ZN5yaSSL4X509C1EPKcjS2_jS2_iS2_i",
            "str r6, [r4, 0x60]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x00094e68]",
            "ldr r1, [0x00094e6c]",
            "ldr r0, [0x00094e70]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xe4",
            "ldr r2, [0x00094e74]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL4X5099GetIssuerEv": {
        "function_address": "0x0003ce38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xd4]!"
        ]
    },
    "rsym._ZN5yaSSL4X50910GetSubjectEv": {
        "function_address": "0x0003f604",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x64c]!"
        ]
    },
    "rsym._ZN5yaSSL4X5099GetBeforeEv": {
        "function_address": "0x0003e290",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x344]!"
        ]
    },
    "rsym._ZN5yaSSL4X5098GetAfterEv": {
        "function_address": "0x0003fb08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2f4]!"
        ]
    },
    "rsym._ZNK5yaSSL9X509_NAME7GetNameEv": {
        "function_address": "0x0003cde4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x10c]!"
        ]
    },
    "rsym._ZNK5yaSSL9X509_NAME9GetLengthEv": {
        "function_address": "0x00040654",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb6c]!"
        ]
    },
    "rsym._ZN5yaSSL4X509C1EPKcjS2_jS2_iS2_i": {
        "function_address": "0x0003d39c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd3c]!"
        ]
    },
    "sym.yaSSL::ServerHelloDone::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008bd38",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r2",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 4",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::ValidateSignature_mySTL::list_TaoCrypt::Signer__": {
        "function_address": "0x0009cf3c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r2, [0x0009d044]",
            "cmp r1, 0",
            "sub sp, sp, 0x1c",
            "add r2, pc, r2",
            "mov r7, r0",
            "beq 0x9d020",
            "ldr r4, [r1]",
            "cmp r4, 0",
            "beq 0x9cff8",
            "add r6, r0, 0x38",
            "b 0x9cf78",
            "ldr r4, [r4, 4]",
            "cmp r4, 0",
            "beq 0x9cff8",
            "ldr r5, [r4, 8]",
            "mov r0, r6",
            "add r1, r5, 0x208",
            "mov r2, 0x14",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x9cf6c",
            "ldr r3, [r5, 4]",
            "ldr r4, [r5]",
            "cmp r3, 0",
            "str r3, [sp, 4]",
            "bne 0x9d00c",
            "mov r0, r3",
            "ldr r2, [sp, 4]",
            "mov r1, r4",
            "str r3, [sp, 8]",
            "mov r6, 0",
            "bl sym.imp.memcpy",
            "add r1, sp, 4",
            "mov r0, r7",
            "str r6, [sp, 0x10]",
            "str r6, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt11CertDecoder16ConfirmSignatureERNS_6SourceE",
            "ldr r5, [sp, 8]",
            "mov r4, r0",
            "mov r1, r6",
            "mov r0, r5",
            "ldr r2, [sp, 4]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x9cffc",
            "mov r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r3",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x9cfa8",
            "ldr r3, [0x0009d048]",
            "ldr r1, [0x0009d04c]",
            "ldr r0, [0x0009d050]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x1fc",
            "ldr r2, [0x0009d054]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder16ConfirmSignatureERNS_6SourceE": {
        "function_address": "0x00040588",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbf4]!"
        ]
    },
    "sym.TaoCrypt::RSA_PublicKey::ApplyFunction_TaoCrypt::Integer_const__const": {
        "function_address": "0x000b2db4",
        "instructions": [
            "mov ip, r1",
            "push {r4, lr}",
            "mov r3, r1",
            "mov r4, r0",
            "mov r1, r2",
            "add r2, ip, 0x10",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateFortezzaServerKEA__": {
        "function_address": "0x0008b20c",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0008b23c]",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 0x84",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b240]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::EncryptedPreMasterSecret::build_yaSSL::SSL_": {
        "function_address": "0x0008f10c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x4c",
            "add r6, sp, 0xc",
            "add r3, r6, 8",
            "mov r2, 0",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "mov r7, r0",
            "mov r0, r1",
            "mov r4, r1",
            "str r2, [sp, 0xc]",
            "str r2, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, r6",
            "mov r2, 0x30",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb ip, [r0, 0x130]",
            "ldrb r3, [r0, 0x131]",
            "mov r1, r6",
            "mov r2, 0x30",
            "mov r0, r4",
            "strb ip, [sp, 0xc]",
            "strb r3, [sp, 0xd]",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL11CertManager11get_peerKeyEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv",
            "add r5, sp, 0x3c",
            "mov r2, r0",
            "mov r1, r8",
            "mov r3, 1",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3RSA16get_cipherLengthEv",
            "cmp r8, 0",
            "beq 0x8f268",
            "add r1, r0, 2",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL24EncryptedPreMasterSecret5allocEi",
            "mov r0, r5",
            "ldr r8, [r7, 4]",
            "bl rsym._ZNK5yaSSL3RSA16get_cipherLengthEv",
            "add sl, sp, 0x44",
            "lsl r0, r0, 0x10",
            "lsr r0, r0, 0x10",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "ldr r0, [r7, 4]",
            "mov r1, sl",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "add r8, r8, 2",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, r8",
            "str r0, [sp]",
            "mov r2, r6",
            "mov r0, r5",
            "mov r3, 0x30",
            "bl rsym._ZN5yaSSL3RSA7encryptEPhPKhjRKNS_10RandomPoolE",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL24EncryptedPreMasterSecret5allocEi",
            "ldr r8, [r7, 4]",
            "b 0x8f230"
        ]
    },
    "rsym._ZN5yaSSL3SSL13set_preMasterEPKhj": {
        "function_address": "0x0003d7a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa8c]!"
        ]
    },
    "rsym._ZNK5yaSSL6Crypto15get_certManagerEv": {
        "function_address": "0x0003ec08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcf4]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager11get_peerKeyEv": {
        "function_address": "0x0003d1ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe5c]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv": {
        "function_address": "0x0004060c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb9c]!"
        ]
    },
    "rsym._ZN5yaSSL3RSAC1EPKhjb": {
        "function_address": "0x0003e800",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfa4]!"
        ]
    },
    "rsym._ZNK5yaSSL3RSA16get_cipherLengthEv": {
        "function_address": "0x0003fde4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x10c]!"
        ]
    },
    "rsym._ZN5yaSSL24EncryptedPreMasterSecret5allocEi": {
        "function_address": "0x0003ffac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfdc]!"
        ]
    },
    "rsym._ZN5yaSSL3RSA7encryptEPhPKhjRKNS_10RandomPoolE": {
        "function_address": "0x0003ddf8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x654]!"
        ]
    },
    "rsym._ZN5yaSSL3RSAD1Ev": {
        "function_address": "0x0003f10c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x99c]!"
        ]
    },
    "sym.vio_poll_read": {
        "function_address": "0x0007a074",
        "instructions": [
            "str lr, [sp, -4]!",
            "add r1, r1, r1, lsl 2",
            "ldr r3, [r0]",
            "sub sp, sp, 0xc",
            "add r1, r1, r1, lsl 2",
            "add r1, r1, r1, lsl 2",
            "str r3, [sp]",
            "mov r3, 1",
            "lsl r2, r1, 3",
            "strh r3, [sp, 4]",
            "mov r0, sp",
            "mov r3, 0",
            "mov r1, 1",
            "strh r3, [sp, 6]",
            "bl sym.imp.poll",
            "cmp r0, 0",
            "ble 0x7a0d0",
            "ldrh r0, [sp, 6]",
            "eor r0, r0, 1",
            "and r0, r0, 1",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr",
            "mvn r0, r0",
            "lsr r0, r0, 0x1f",
            "b 0x7a0c4"
        ]
    },
    "sym.imp.poll": {
        "function_address": "0x0003f724",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x58c]!"
        ]
    },
    "sym.mysql_manager_command": {
        "function_address": "0x00048104",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00048188]",
            "cmp r2, 0",
            "add r4, pc, r4",
            "mov r5, r0",
            "mov r6, r1",
            "bne 0x4812c",
            "mov r0, r1",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x4815c",
            "mov r0, r5",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "strbeq r0, [r5, 0x295]",
            "bne 0x4815c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl sym.imp.__errno_location",
            "ldr r1, [0x0004818c]",
            "ldr r3, [r0]",
            "add r0, r5, 0x294",
            "str r3, [r5, 0x28c]",
            "add r1, r4, r1",
            "add r0, r0, 2",
            "mov r2, 0x16",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x48154"
        ]
    },
    "sym.my_b_seek": {
        "function_address": "0x0005580c",
        "instructions": [
            "push {r4, r5, r6, r7, fp, lr}",
            "ldr r1, [r0, 0x64]",
            "mov r4, r0",
            "cmp r1, 3",
            "mov r5, r2",
            "mov r6, r3",
            "beq 0x558c0",
            "mov r2, r5",
            "mov r3, r6",
            "ldm r4, {fp, ip}",
            "subs r2, r2, fp",
            "sbc r3, r3, ip",
            "cmp r1, 1",
            "cmpne r1, 3",
            "bne 0x55880",
            "ldr r1, [r4, 0x18]",
            "ldr fp, [r4, 0x14]",
            "rsb fp, r1, fp",
            "asr ip, fp, 0x1f",
            "cmp ip, r3",
            "bhi 0x558b4",
            "beq 0x558ac",
            "str r1, [r4, 0x10]",
            "str r1, [r4, 0x14]",
            "stm r4, {r5, r6}",
            "mov r3, 1",
            "str r3, [r4, 0x8c]",
            "pop {r4, r5, r6, r7, fp, lr}",
            "bx lr",
            "cmp r1, 2",
            "bne 0x5586c",
            "ldr r1, [r4, 0x20]",
            "ldr fp, [r4, 0x2c]",
            "rsb fp, r1, fp",
            "asr ip, fp, 0x1f",
            "cmp ip, r3",
            "bls 0x558d0",
            "add r2, r1, r2",
            "str r2, [r4, 0x28]",
            "b 0x55878",
            "cmp fp, r2",
            "bls 0x55864",
            "add r2, r1, r2",
            "str r2, [r4, 0x10]",
            "b 0x55878",
            "mov r1, 1",
            "bl rsym.my_b_flush_io_cache",
            "ldr r1, [r4, 0x64]",
            "b 0x55828",
            "bne 0x558dc",
            "cmp fp, r2",
            "bhi 0x558a0",
            "mov r1, 1",
            "mov r0, r4",
            "bl rsym.my_b_flush_io_cache",
            "lsl r3, r5, 0x14",
            "ldr r1, [r4, 0x94]",
            "lsr r3, r3, 0x14",
            "ldr r2, [r4, 0x20]",
            "rsb r3, r3, r1",
            "add r3, r2, r3",
            "str r3, [r4, 0x2c]",
            "b 0x5586c"
        ]
    },
    "rsym.my_b_flush_io_cache": {
        "function_address": "0x000405b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbd4]!"
        ]
    },
    "sym.dynstr_append_mem": {
        "function_address": "0x0004de20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0, 4]",
            "mov r5, r2",
            "ldr r2, [r0, 8]",
            "mov r4, r0",
            "add r0, r5, r3",
            "cmp r0, r2",
            "mov r6, r1",
            "ldrlo r0, [r4]",
            "blo 0x4de84",
            "ldr r8, [r4, 0xc]",
            "mov r1, r8",
            "add r0, r0, r8",
            "bl fcn.000bed20",
            "mul r7, r8, r0",
            "mov r2, 0x10",
            "ldr r0, [r4]",
            "mov r1, r7",
            "bl rsym.my_realloc",
            "cmp r0, 0",
            "moveq r0, 1",
            "beq 0x4deac",
            "ldr r3, [r4, 4]",
            "str r7, [r4, 8]",
            "str r0, [r4]",
            "mov r2, r5",
            "add r0, r0, r3",
            "mov r1, r6",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r3, [r4]",
            "add r5, r5, r2",
            "mov r0, 0",
            "str r5, [r4, 4]",
            "strb r0, [r3, r5]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::ServerKeyExchange_const_": {
        "function_address": "0x0008c0a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL17ServerKeyExchange6getKeyEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL17ServerKeyExchange12getKeyLengthEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL17ServerKeyExchange6getKeyEv": {
        "function_address": "0x0004000c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf9c]!"
        ]
    },
    "rsym._ZNK5yaSSL17ServerKeyExchange12getKeyLengthEv": {
        "function_address": "0x0003dfd8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x514]!"
        ]
    },
    "sym.yaSSL::DSS::verify_unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007f848",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r2, [r0, 4]",
            "sub sp, sp, 0x28",
            "add r4, sp, 4",
            "mov r5, r3",
            "mov r6, r1",
            "mov r0, r4",
            "mov r1, r2",
            "bl rsym._ZN8TaoCrypt12DSA_VerifierC1ERKNS_13DSA_PublicKeyE",
            "mov r1, r6",
            "mov r2, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt12DSA_Verifier6VerifyEPKhS2_",
            "ldr r4, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt12DSA_VerifierC1ERKNS_13DSA_PublicKeyE": {
        "function_address": "0x0003d900",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9a4]!"
        ]
    },
    "rsym._ZN8TaoCrypt12DSA_Verifier6VerifyEPKhS2_": {
        "function_address": "0x0003e23c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x37c]!"
        ]
    },
    "fcn.000a9cfc": {
        "function_address": "0x000a9cfc",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "sub sp, sp, 0xc",
            "mov r0, r1",
            "mov r6, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r5, [0x000a9e40]",
            "cmp r0, 8",
            "add r5, pc, r5",
            "bls 0xa9ddc",
            "cmp r0, 0x10",
            "movls r3, 0x10",
            "bls 0xa9d48",
            "cmp r0, 0x20",
            "movls r3, 0x20",
            "bls 0xa9d48",
            "cmp r0, 0x40",
            "movls r3, 0x40",
            "bhi 0xa9e04",
            "str r3, [r4]",
            "mov r1, 0",
            "lsl r0, r3, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "mov r0, r4",
            "ldr r5, [r0], 8",
            "mov r1, r3",
            "str r3, [r4, 4]",
            "mov r7, 0",
            "mov r3, r5",
            "mov r2, r5",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r1, r7",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "bl sym.imp.memset",
            "ldr r1, [r4]",
            "ldr r3, [r6, 0xc]",
            "cmp r1, r7",
            "str r3, [r4, 0xc]",
            "ldr r0, [r6, 4]",
            "ldr ip, [r4, 4]",
            "beq 0xa9dcc",
            "mov r3, r7",
            "ldr r2, [r0, r7]",
            "add r3, r3, 1",
            "cmp r1, r3",
            "str r2, [ip, r7]",
            "add r7, r7, 4",
            "bhi 0xa9db4",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [0x000a9e44]",
            "add r3, r5, r3",
            "add r0, r3, r0, lsl 2",
            "ldr r3, [r0, 0x5ec]",
            "cmn r3, 0xc0000001",
            "str r3, [r4]",
            "bhi 0xa9e18",
            "cmp r3, 0",
            "beq 0xa9d5c",
            "b 0xa9d4c",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r3, 1",
            "lsl r3, r3, r0",
            "b 0xa9dec",
            "ldr r3, [0x000a9e44]",
            "ldr r1, [0x000a9e48]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9e4c]",
            "add r3, r3, 0xc80",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym._sanity": {
        "function_address": "0x0004b1e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x0004b43c]",
            "ldr r2, [0x0004b440]",
            "add r6, pc, r6",
            "ldr r3, [0x0004b444]",
            "sub sp, sp, 0x2c",
            "mov sb, r0",
            "ldr r0, [r6, r2]",
            "str r2, [sp, 0x20]",
            "str r3, [sp, 0x24]",
            "mov fp, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [r6, r2]",
            "ldr r4, [r3]",
            "ldr r3, [0x0004b448]",
            "cmp r4, 0",
            "ldr r3, [r6, r3]",
            "ldr sl, [r3]",
            "moveq r7, sl",
            "moveq sl, r4",
            "beq 0x4b3b0",
            "cmp sl, 0",
            "sub r7, sl, 1",
            "beq 0x4b3b0",
            "ldr r3, [0x0004b44c]",
            "ldr r2, [0x0004b450]",
            "str r3, [sp, 0xc]",
            "ldr r3, [0x0004b454]",
            "str r2, [sp, 8]",
            "add r3, r6, r3",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x0004b458]",
            "mov sl, 0",
            "add r3, r6, r3",
            "str r3, [sp, 0x1c]",
            "ldr r3, [0x0004b45c]",
            "mov r8, r6",
            "add r3, r6, r3",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x0004b460]",
            "add r3, r6, r3",
            "str r3, [sp, 0x18]",
            "b 0x4b2f4",
            "ldr r2, [sp, 8]",
            "ldr ip, [r4, 0x10]",
            "ldr r5, [r8, r2]",
            "ldr r3, [r4, 8]",
            "ldr r0, [r5]",
            "ldr r2, [sp, 0x14]",
            "str ip, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r2, [sp, 0x18]",
            "ldr r0, [r5]",
            "mov r1, 1",
            "mov r3, sb",
            "str fp, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r5]",
            "bl sym.imp.fflush",
            "mov r2, 1",
            "ldr r4, [r4]",
            "add sl, sl, r2",
            "cmp r4, 0",
            "beq 0x4b3ac",
            "subs r7, r7, 1",
            "blo 0x4b3ac",
            "ldr r2, [sp, 0xc]",
            "mov r1, 1",
            "ldr r3, [r8, r2]",
            "ldr r2, [sp, 0x10]",
            "ldr r5, [r3]",
            "ldr r3, [0x0004b464]",
            "add r5, r5, 0x18",
            "add r5, r4, r5",
            "ldr r0, [r5, -4]",
            "cmp r0, r3",
            "moveq r2, 0",
            "beq 0x4b364",
            "ldr r3, [sp, 8]",
            "ldr ip, [r4, 0x10]",
            "ldr r6, [r8, r3]",
            "ldr r3, [r4, 8]",
            "ldr r0, [r6]",
            "str ip, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r2, [sp, 0x1c]",
            "ldr r0, [r6]",
            "mov r1, 1",
            "mov r3, sb",
            "str fp, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r6]",
            "bl sym.imp.fflush",
            "mov r2, 1",
            "ldr r3, [r4, 0xc]",
            "mov r1, 1",
            "ldrb r0, [r5, r3]",
            "add r5, r5, r3",
            "cmp r0, 0x68",
            "bne 0x4b298",
            "ldrb r0, [r5, 1]",
            "add r5, r5, r1",
            "cmp r0, 0x34",
            "bne 0x4b298",
            "ldrb r3, [r5, 1]",
            "add r5, r5, r1",
            "cmp r3, 0x7a",
            "bne 0x4b298",
            "ldrb r3, [r5, 1]",
            "cmp r3, 0x15",
            "bne 0x4b298",
            "b 0x4b2dc",
            "mov r6, r8",
            "ldr r3, [sp, 0x20]",
            "ldr r0, [r6, r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "cmp r7, 0",
            "cmpeq r4, 0",
            "beq 0x4b42c",
            "ldr r3, [0x0004b450]",
            "ldr r2, [0x0004b468]",
            "ldr r5, [r6, r3]",
            "add r2, r6, r2",
            "mov r3, sb",
            "ldr r0, [r5]",
            "mov r1, 1",
            "str fp, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r1, [r5]",
            "mov r0, 0xa",
            "bl sym.imp.fputc",
            "ldr r2, [sp, 0x24]",
            "ldr r0, [r5]",
            "ldr r3, [r6, r2]",
            "ldr r2, [0x0004b46c]",
            "ldr r3, [r3]",
            "add r2, r6, r2",
            "mov r1, 1",
            "str r7, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r5]",
            "bl sym.imp.fflush",
            "mov sl, 1",
            "mov r0, sl",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fputc": {
        "function_address": "0x0003f7fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4fc]!"
        ]
    },
    "fcn.0007fba0": {
        "function_address": "0x0007fba0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fbe4]",
            "ldr r3, [0x0007fbe8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DSS7DSSImplEEEvPT_",
            "ldr r3, [0x0007fbec]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_thread_end": {
        "function_address": "0x00045ce4",
        "instructions": [
            "push {r4, lr}",
            "bl rsym.my_thread_end",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.my_thread_end": {
        "function_address": "0x00040834",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa2c]!"
        ]
    },
    "fcn.0007ba5c": {
        "function_address": "0x0007ba5c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007ba94": {
        "function_address": "0x0007ba94",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.reset_root_defaults": {
        "function_address": "0x0004c2e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub r1, r1, 0x1c",
            "subs r7, r2, 0",
            "mov r4, r0",
            "str r1, [r0, 0x10]",
            "streq r7, [r0, 8]",
            "beq 0x4c390",
            "ldr r3, [r0, 8]",
            "add r6, r7, 0x10",
            "cmp r3, 0",
            "beq 0x4c31c",
            "ldr r3, [r3, 8]",
            "cmp r3, r6",
            "beq 0x4c390",
            "mov r5, r4",
            "ldr r0, [r5]",
            "cmp r0, 0",
            "beq 0x4c364",
            "ldr r3, [r0, 8]",
            "cmp r3, r6",
            "beq 0x4c398",
            "ldr r2, [r0, 4]",
            "add r2, r2, 0x10",
            "cmp r3, r2",
            "movne r5, r0",
            "bne 0x4c320",
            "ldr r3, [r0]",
            "str r3, [r5]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5]",
            "cmp r0, 0",
            "bne 0x4c32c",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "beq 0x4c398",
            "str r6, [r0, 8]",
            "str r7, [r0, 4]",
            "ldr r3, [r5]",
            "str r3, [r0]",
            "str r0, [r4, 8]",
            "str r0, [r5]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "str r0, [r4, 8]",
            "b 0x4c390"
        ]
    },
    "fcn.0009d118": {
        "function_address": "0x0009d118",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [0x0009d198]",
            "ldr lr, [0x0009d19c]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str r1, [r4, 4]",
            "ldrb r5, [sp, 0x18]",
            "mov r1, 0",
            "mov r6, r2",
            "str lr, [r0], 8",
            "mov r2, r1",
            "mov r7, r3",
            "eor r5, r5, 1",
            "bl rsym._ZN8TaoCrypt9PublicKeyC1EPKhj",
            "mov r3, 0",
            "cmp r6, 0",
            "strb r5, [r4, 0x470]",
            "strb r3, [r4, 0x250]",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0x14]",
            "str r3, [r4, 0x18]",
            "str r3, [r4, 0x4c]",
            "strb r3, [r4, 0x50]",
            "movne r1, r7",
            "ldrne r2, [sp, 0x1c]",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt11CertDecoder6DecodeEPN5mySTL4listIPNS_6SignerEEENS0_8CertTypeE",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9PublicKeyC1EPKhj": {
        "function_address": "0x0003dea0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5e4]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder6DecodeEPN5mySTL4listIPNS_6SignerEEENS0_8CertTypeE": {
        "function_address": "0x0003d5c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbcc]!"
        ]
    },
    "fcn.0009a11c": {
        "function_address": "0x0009a11c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DES_EDE::encrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00080664",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r4, 0x34]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "bne 0x806d8",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x806cc",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x80698",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x806cc",
            "ldr r2, [r4, 0x30]",
            "cmp r2, 0",
            "bne 0x80758",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x806cc",
            "ldr r2, [r4, 4]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r7, r7, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80704",
            "b 0x806cc",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x806cc",
            "ldr r2, [r4, 4]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80774",
            "b 0x806cc"
        ]
    },
    "rsym._ZN8TaoCrypt6xorbufEPhPKhj": {
        "function_address": "0x0003d618",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb94]!"
        ]
    },
    "sym.imp.__memcpy_chk": {
        "function_address": "0x0003e2fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2fc]!"
        ]
    },
    "fcn.0007e428": {
        "function_address": "0x0007e428",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e484]",
            "ldr r3, [0x0007e488]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3MD57MD5ImplEEEvPT_",
            "ldr r3, [0x0007e48c]",
            "ldr r1, [0x0007e490]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e494]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e498]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3MD57MD5ImplEEEvPT_": {
        "function_address": "0x0003f9d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3c4]!"
        ]
    },
    "fcn.0007cf0c": {
        "function_address": "0x0007cf0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007cf50]",
            "ldr r3, [0x0007cf54]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3AES7AESImplEEEvPT_",
            "ldr r3, [0x0007cf58]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3AES7AESImplEEEvPT_": {
        "function_address": "0x0003e62c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdc]!"
        ]
    },
    "sym.TaoCrypt::CertDecoder::ConfirmSignature_TaoCrypt::Source_": {
        "function_address": "0x0009cb8c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr sb, [r0, 0x1c]",
            "ldr r6, [0x0009cf18]",
            "cmp sb, 0x288",
            "sub sp, sp, 0xdc",
            "mov r4, r0",
            "add r6, pc, r6",
            "mov r8, r1",
            "beq 0x9cda8",
            "ldr r3, [0x0009cf1c]",
            "cmp sb, r3",
            "beq 0x9cef0",
            "ldr r5, [0x0009cf20]",
            "ldr r3, [0x0009cf24]",
            "cmp sb, r3",
            "cmpne sb, r5",
            "movne r5, 0",
            "moveq r5, 1",
            "beq 0x9cc00",
            "ldr r3, [r0, 4]",
            "ldr r2, [0x0009cf28]",
            "mov r4, r5",
            "str r2, [r3, 0x10]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_4HASHEEEvPT_",
            "mov r0, r4",
            "add sp, sp, 0xdc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN8TaoCrypt5new_tE",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r7, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0009cf2c]",
            "mov r0, r7",
            "ldr r3, [r6, r3]",
            "mov r5, r7",
            "add r3, r3, 8",
            "str r3, [r7]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, 0",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_4HASHEEEvPT_",
            "mov sb, 0x58",
            "ldr r2, [r4, 4]",
            "ldr r3, [r4, 0x10]",
            "ldr r1, [r2, 4]",
            "ldr r2, [r4, 0x14]",
            "add r1, r1, r3",
            "rsb r2, r3, r2",
            "mov r0, r5",
            "ldr r3, [r5]",
            "add sl, sp, 0xbc",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5]",
            "mov r0, r5",
            "mov r1, sl",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [r4, 0x20]",
            "ldr r3, [0x0009cf30]",
            "cmp r2, r3",
            "beq 0x9cdf0",
            "add r6, sp, 0x48",
            "ldr r2, [r4, 0x18]",
            "ldr r1, [r4, 0x4c]",
            "mov r0, r6",
            "add r4, sp, 8",
            "bl rsym._ZN8TaoCrypt19DecodeDSA_SignatureEPhPKhj",
            "add r7, sp, 0x70",
            "mov r1, r8",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKeyC1ERNS_6SourceE",
            "mov r1, r4",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt12DSA_VerifierC1ERKNS_13DSA_PublicKeyE",
            "mov r1, sl",
            "mov r2, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt12DSA_Verifier6VerifyEPKhS2_",
            "ldr r6, [sp, 0x88]",
            "ldr r2, [sp, 0x84]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r4, r0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x78]",
            "ldr r2, [sp, 0x74]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x3c]",
            "ldr r2, [sp, 0x38]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x2c]",
            "ldr r2, [sp, 0x28]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r0, r6",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "b 0x9cbe8",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN8TaoCrypt5new_tE",
            "mov r1, 4",
            "mov r2, 0x40",
            "mov r7, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0009cf34]",
            "mov r0, r7",
            "ldr r3, [r6, r3]",
            "mov r5, r7",
            "add r3, r3, 8",
            "str r3, [r7]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r0, 0",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_4HASHEEEvPT_",
            "add sb, sb, 1",
            "b 0x9cc44",
            "mov r7, 0",
            "add fp, sp, 0xa8",
            "mov r1, r7",
            "mov r2, r7",
            "mov r3, r7",
            "add r0, fp, 8",
            "str r7, [sp, 0xa8]",
            "str r7, [sp, 0xac]",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r5]",
            "str r0, [sp, 0xac]",
            "str r7, [sp, 0xa8]",
            "ldr r3, [r3, 0x18]",
            "str r7, [sp, 0xb4]",
            "str r7, [sp, 0xb8]",
            "mov r0, r5",
            "mov lr, pc",
            "bx r3",
            "mov r3, sb",
            "mov r2, r0",
            "mov r1, sl",
            "add r0, sp, 0x94",
            "str fp, [sp]",
            "bl rsym._ZN8TaoCrypt17Signature_EncoderC1EPKhjNS_8HashTypeERNS_6SourceE",
            "ldr r3, [0x0009cf38]",
            "add sl, sp, 0x48",
            "ldr r3, [r6, r3]",
            "mov r1, r8",
            "add r3, r3, 8",
            "mov r0, sl",
            "str r3, [sp, 0x94]",
            "bl rsym._ZN8TaoCrypt13RSA_PublicKeyC1ERNS_6SourceE",
            "add r0, sp, 0xd8",
            "ldr r3, [r4, 0x4c]",
            "ldr r1, [sp, 0xac]",
            "ldr r2, [sp, 0xa8]",
            "str sl, [r0, -8]!",
            "bl rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType2EE10SSL_VerifyEPKhjS4_",
            "ldr r6, [sp, 0x5c]",
            "ldr r2, [sp, 0x58]",
            "mov r1, r7",
            "lsl r2, r2, 2",
            "mov r4, r0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x4c]",
            "ldr r2, [sp, 0x48]",
            "mov r1, r7",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0xac]",
            "mov r1, r7",
            "mov r0, r6",
            "ldr r2, [sp, 0xa8]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x9cbe8",
            "mov r1, 0",
            "mov r0, 0x2c",
            "bl rsym._ZnwjN8TaoCrypt5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt3MD2C1Ev",
            "cmp r5, 0",
            "beq 0x9cc44",
            "mov r0, 0",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_4HASHEEEvPT_",
            "b 0x9cc44"
        ]
    },
    "rsym._ZN8TaoCrypt8tcDeleteINS_4HASHEEEvPT_": {
        "function_address": "0x0003ff1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3c]!"
        ]
    },
    "rsym._ZN8TaoCrypt3SHA4InitEv": {
        "function_address": "0x0003cb80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2a4]!"
        ]
    },
    "rsym._ZN8TaoCrypt19DecodeDSA_SignatureEPhPKhj": {
        "function_address": "0x0004069c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb3c]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKeyC1ERNS_6SourceE": {
        "function_address": "0x0003e68c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9c]!"
        ]
    },
    "rsym._ZN8TaoCrypt17Signature_EncoderC1EPKhjNS_8HashTypeERNS_6SourceE": {
        "function_address": "0x0003f994",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3ec]!"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_PublicKeyC1ERNS_6SourceE": {
        "function_address": "0x000409a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x934]!"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType2EE10SSL_VerifyEPKhjS4_": {
        "function_address": "0x0003fab4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x32c]!"
        ]
    },
    "rsym._ZN8TaoCrypt3MD2C1Ev": {
        "function_address": "0x0003eaf4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdac]!"
        ]
    },
    "sym.yaSSL::X509_NAME::GetEntry_int_": {
        "function_address": "0x00094b7c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "bge 0x94b98",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r0, 4]",
            "cmp r5, r3",
            "bge 0x94b8c",
            "ldr r0, [r0, 0x10]",
            "cmp r0, 0",
            "blne rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r1, 0",
            "ldr r0, [r4, 4]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldm r4, {r1, r2}",
            "rsb r2, r5, r2",
            "add r1, r1, r5",
            "str r0, [r4, 0x10]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 4]",
            "ldr r1, [r4, 0x10]",
            "rsb r2, r5, r3",
            "add r0, r1, r2",
            "ldrb r0, [r0, -1]",
            "cmp r0, 0",
            "movne r3, 0",
            "strbne r3, [r1, r2]",
            "ldrne r3, [r4, 4]",
            "subeq r3, r3, 1",
            "rsbne r5, r5, r3",
            "rsbeq r5, r5, r3",
            "mov r0, r4",
            "mov r3, 0",
            "strne r5, [r4, 0xc]",
            "streq r5, [r4, 0xc]",
            "str r3, [r0, 8]!",
            "b 0x94b90"
        ]
    },
    "sym.TaoCrypt::RSA_Private_Decoder::Decode_TaoCrypt::RSA_PrivateKey_": {
        "function_address": "0x0009c934",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "sub sp, sp, 0x84",
            "mov r6, r1",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "ldr r5, [r3, 0x10]",
            "cmp r5, 0",
            "bne 0x9cb80",
            "add r7, sp, 0x70",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x74]",
            "ldr r2, [sp, 0x70]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x60",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x64]",
            "ldr r2, [sp, 0x60]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x50",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x54]",
            "ldr r2, [sp, 0x50]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x40",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x44]",
            "ldr r2, [sp, 0x40]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x30",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x20",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x10",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE": {
        "function_address": "0x0003d99c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x93c]!"
        ]
    },
    "method.TaoCrypt::Base64Encoder.Encode__": {
        "function_address": "0x0009eb94",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [r3]",
            "ldr r3, [0x0009ef70]",
            "add r2, r5, 2",
            "mov r4, r0",
            "ldr r1, [r0, 4]",
            "umull r0, r6, r3, r2",
            "lsr r6, r6, 1",
            "lsl r6, r6, 2",
            "add r3, r6, 0x3f",
            "add r6, r6, r3, lsr 6",
            "ldr r2, [r4]",
            "sub sp, sp, 0x14",
            "mov r7, 0",
            "add r0, r4, 8",
            "mov r3, r6",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r2, [0x0009ef74]",
            "cmp r5, 2",
            "str r0, [r4, 4]",
            "add r2, pc, r2",
            "str r6, [r4]",
            "movls r0, r7",
            "bls 0x9ee38",
            "ldr r1, [r4, 0xc]",
            "ldr ip, [r1, 0xc]",
            "ldr r0, [r1]",
            "add r3, ip, 1",
            "cmp r0, ip",
            "str r3, [r1, 0xc]",
            "bls 0x9ee04",
            "ldr sl, [r1, 4]",
            "add lr, r3, 1",
            "cmp r3, r0",
            "ldrb r8, [sl, ip]",
            "str lr, [r1, 0xc]",
            "bhs 0x9ee18",
            "cmp lr, r0",
            "add r0, lr, 1",
            "ldrb ip, [sl, r3]",
            "str r0, [r1, 0xc]",
            "bhs 0x9ef40",
            "ldr r0, [0x0009ef78]",
            "mov sb, 0xa",
            "str r0, [sp, 0xc]",
            "ldr sl, [sp, 0xc]",
            "mov r0, r7",
            "add r3, r2, sl",
            "ldr sl, [r4]",
            "ldr r1, [r1, 4]",
            "cmp sl, r0",
            "ldrb lr, [r1, lr]",
            "bls 0x9ee0c",
            "add r1, r3, r8, lsr 2",
            "ldrb fp, [r1, 0xec]",
            "ldr sl, [r4, 4]",
            "add r1, r0, 1",
            "strb fp, [sl, r0]",
            "ldr r0, [r4]",
            "cmp r1, r0",
            "bhs 0x9ede8",
            "asr r0, ip, 4",
            "and r8, r8, 3",
            "orr r8, r0, r8, lsl 4",
            "add r8, r3, r8",
            "ldrb sl, [r8, 0xec]",
            "ldr r8, [r4, 4]",
            "add r0, r1, 1",
            "strb sl, [r8, r1]",
            "ldr r1, [r4]",
            "cmp r0, r1",
            "bhs 0x9ede8",
            "and ip, ip, 0xf",
            "lsl ip, ip, 2",
            "orr ip, ip, lr, lsr 6",
            "add ip, r3, ip",
            "ldrb r8, [ip, 0xec]",
            "ldr ip, [r4, 4]",
            "add r1, r0, 1",
            "strb r8, [ip, r0]",
            "ldr r0, [r4]",
            "cmp r1, r0",
            "bhs 0x9ede8",
            "and lr, lr, 0x3f",
            "add lr, r3, lr",
            "ldr r0, [r4, 4]",
            "ldrb ip, [lr, 0xec]",
            "add r7, r7, 1",
            "strb ip, [r0, r1]",
            "tst r7, 0xf",
            "add r1, r1, 1",
            "sub r5, r5, 3",
            "movne r0, r1",
            "bne 0x9ed74",
            "cmp r5, 0",
            "bne 0x9ed5c",
            "mov r0, r1",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "bhs 0x9ee2c",
            "add r1, r0, 1",
            "ldr r3, [r4, 4]",
            "cmp r1, r6",
            "mov r1, 0xa",
            "strb r1, [r3, r0]",
            "bne 0x9ef4c",
            "mov r1, r4",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt6Source5resetERNS_5BlockIhNS_20AllocatorWithCleanupIhEEEE",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [r4]",
            "cmp r1, r0",
            "bhs 0x9ede8",
            "ldr ip, [r4, 4]",
            "add r0, r1, 1",
            "strb sb, [ip, r1]",
            "cmp r5, 2",
            "bls 0x9ee38",
            "ldr r1, [r4, 0xc]",
            "ldr r8, [r1, 0xc]",
            "ldr sl, [r1]",
            "add ip, r8, 1",
            "cmp r8, sl",
            "str ip, [r1, 0xc]",
            "bhs 0x9ee0c",
            "ldr fp, [r1, 4]",
            "add lr, ip, 1",
            "cmp ip, sl",
            "ldrb r8, [fp, r8]",
            "str lr, [r1, 0xc]",
            "bhs 0x9ee20",
            "cmp lr, sl",
            "add sl, lr, 1",
            "ldrb ip, [fp, ip]",
            "str sl, [r1, 0xc]",
            "blo 0x9ec5c",
            "ldr sl, [sp, 0xc]",
            "add r3, r2, sl",
            "ldr r1, [0x0009ef7c]",
            "ldr r0, [0x0009ef80]",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r0, [0x0009ef80]",
            "ldr r1, [0x0009ef7c]",
            "add r0, r2, r0",
            "add r1, r2, r1",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r1, [0x0009ef78]",
            "str r1, [sp, 0xc]",
            "ldr r0, [sp, 0xc]",
            "add r3, r2, r0",
            "b 0x9edcc",
            "ldr r3, [0x0009ef78]",
            "str r3, [sp, 0xc]",
            "ldr r1, [sp, 0xc]",
            "add r3, r2, r1",
            "b 0x9edcc",
            "ldr r3, [0x0009ef78]",
            "add r3, r2, r3",
            "b 0x9edcc",
            "cmp r5, 0",
            "beq 0x9ed20",
            "ldr r3, [r4, 0xc]",
            "ldr r1, [r3, 0xc]",
            "ldr r8, [r3]",
            "add lr, r1, 1",
            "cmp r1, r8",
            "str lr, [r3, 0xc]",
            "bhs 0x9ee2c",
            "cmp r5, 2",
            "movne r5, 0",
            "moveq r5, 1",
            "ldr r7, [r3, 4]",
            "cmp r5, 0",
            "ldrb ip, [r7, r1]",
            "moveq lr, r5",
            "moveq r8, r5",
            "bne 0x9ef1c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "bhs 0x9ee2c",
            "ldr r1, [0x0009ef78]",
            "ldr r7, [r4, 4]",
            "add r3, r2, r1",
            "str r1, [sp, 0xc]",
            "add r1, r3, ip, lsr 2",
            "ldrb sl, [r1, 0xec]",
            "add r1, r0, 1",
            "strb sl, [r7, r0]",
            "ldr r7, [r4]",
            "cmp r1, r7",
            "bhs 0x9ede8",
            "and ip, ip, 3",
            "orr r0, r8, ip, lsl 4",
            "add r0, r3, r0",
            "ldrb r7, [r0, 0xec]",
            "ldr ip, [r4, 4]",
            "add r0, r1, 1",
            "strb r7, [ip, r1]",
            "ldr r1, [r4]",
            "cmp r0, r1",
            "bhs 0x9ede8",
            "cmp r5, 0",
            "addne r3, r3, lr",
            "ldrbne r3, [r3, 0xec]",
            "ldr r1, [r4, 4]",
            "moveq r3, 0x3d",
            "strb r3, [r1, r0]",
            "ldr r3, [r4]",
            "add r0, r0, 1",
            "cmp r0, r3",
            "bhs 0x9edc4",
            "ldr r3, [r4, 4]",
            "mov r1, 0x3d",
            "strb r1, [r3, r0]",
            "add r0, r0, 1",
            "b 0x9ed20",
            "add r1, lr, 1",
            "cmp lr, r8",
            "str r1, [r3, 0xc]",
            "bhs 0x9ee2c",
            "ldrb r8, [r7, lr]",
            "and lr, r8, 0xf",
            "lsl lr, lr, 2",
            "lsr r8, r8, 4",
            "b 0x9ee80",
            "ldr sl, [0x0009ef78]",
            "str sl, [sp, 0xc]",
            "b 0x9edc4",
            "ldr r3, [0x0009ef78]",
            "ldr r1, [0x0009ef84]",
            "ldr r0, [0x0009ef88]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x12c",
            "mov r2, 0xb1",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt6Source5resetERNS_5BlockIhNS_20AllocatorWithCleanupIhEEEE": {
        "function_address": "0x000408f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9ac]!"
        ]
    },
    "sym.yaSSL::Compress_unsigned_char_const__int__yaSSL::input_buffer_": {
        "function_address": "0x00092304",
        "instructions": [
            "ldr ip, [0x00092334]",
            "ldr r3, [0x00092338]",
            "add ip, pc, ip",
            "ldr r1, [0x0009233c]",
            "ldr r0, [0x00092340]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x64",
            "ldr r2, [0x00092344]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_thread_global_end": {
        "function_address": "0x0004d684",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x10",
            "mov r1, 0",
            "ldr r4, [0x0004d824]",
            "mov r0, sp",
            "bl sym.imp.gettimeofday",
            "ldr r2, [0x0004d828]",
            "add r4, pc, r4",
            "ldr r3, [sp, 4]",
            "ldr r2, [r4, r2]",
            "add r3, r3, r3, lsl 2",
            "ldr r1, [r2]",
            "add r3, r3, r3, lsl 2",
            "ldr r2, [sp]",
            "ldr r5, [0x0004d82c]",
            "add r3, r3, r3, lsl 2",
            "lsl r3, r3, 3",
            "add r2, r1, r2",
            "ldr r0, [r4, r5]",
            "str r3, [sp, 0xc]",
            "str r2, [sp, 8]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x0004d830]",
            "ldr r8, [0x0004d834]",
            "ldr r6, [r4, r3]",
            "add r7, sp, 8",
            "ldr r3, [r6]",
            "mov r2, r7",
            "cmp r3, 0",
            "beq 0x4d7f8",
            "ldr r0, [r4, r8]",
            "ldr r1, [r4, r5]",
            "bl sym.imp.pthread_cond_timedwait",
            "cmp r0, 0x6e",
            "cmpne r0, 0x3e",
            "bne 0x4d6ec",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "moveq r6, r3",
            "bne 0x4d800",
            "ldr r5, [r4, r5]",
            "mov r0, r5",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r3, [0x0004d838]",
            "ldr r3, [r4, r3]",
            "ldr r0, [r3]",
            "bl sym.imp.pthread_key_delete",
            "ldr r3, [0x0004d83c]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutexattr_destroy",
            "ldr r3, [0x0004d840]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutexattr_destroy",
            "ldr r3, [0x0004d844]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d848]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d84c]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d850]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d854]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d858]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d85c]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d860]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d864]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d868]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_mutex_destroy",
            "cmp r6, 0",
            "beq 0x4d7ec",
            "mov r0, r5",
            "bl sym.imp.pthread_mutex_destroy",
            "ldr r3, [0x0004d834]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_cond_destroy",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r6, 1",
            "b 0x4d724",
            "ldr r2, [0x0004d86c]",
            "mov r6, 0",
            "ldr r1, [r4, r2]",
            "ldr r2, [0x0004d870]",
            "ldr r0, [r1]",
            "add r2, r4, r2",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "b 0x4d724"
        ]
    },
    "sym.imp.pthread_cond_timedwait": {
        "function_address": "0x0003da68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8b4]!"
        ]
    },
    "sym.imp.pthread_key_delete": {
        "function_address": "0x0003e5e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x10c]!"
        ]
    },
    "sym.imp.pthread_mutexattr_destroy": {
        "function_address": "0x0003e698",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x94]!"
        ]
    },
    "sym.imp.pthread_mutex_destroy": {
        "function_address": "0x0003ec68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcb4]!"
        ]
    },
    "sym.imp.pthread_cond_destroy": {
        "function_address": "0x0003ebf0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd04]!"
        ]
    },
    "sym.my_sync_dir_by_file": {
        "function_address": "0x00059f00",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x20c",
            "add r4, sp, 4",
            "mov r5, r1",
            "add r2, sp, 0x204",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym.dirname_part",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym.my_sync_dir",
            "add sp, sp, 0x20c",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.my_sync_dir": {
        "function_address": "0x000405c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbcc]!"
        ]
    },
    "method.TaoCrypt.GetCert_TaoCrypt::Source_": {
        "function_address": "0x0009a424",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x0009a53c]",
            "ldr r6, [0x0009a540]",
            "sub sp, sp, 0x38",
            "add r5, pc, r5",
            "add r6, r5, r6",
            "mov lr, sp",
            "mov r4, r0",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm lr!, {r0, r1, r2, r3}",
            "ldm r6, {r0, r1, r2}",
            "stm lr, {r0, r1, r2}",
            "ldr r3, [0x0009a544]",
            "add ip, sp, 0x1c",
            "add r5, r5, r3",
            "ldm r5!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r5, {r0, r1, r2}",
            "ldr r6, [r4, 4]",
            "stm ip!, {r0, r1}",
            "mov r1, sp",
            "mov r0, r6",
            "strh r2, [ip]",
            "bl sym.imp.strstr",
            "add r5, sp, 0x1c",
            "mov r7, r0",
            "mov r1, r5",
            "mov r0, r6",
            "bl sym.imp.strstr",
            "cmp r7, 0",
            "cmpne r0, 0",
            "mov r6, r0",
            "bne 0x9a4b8",
            "mvn r0, 0",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r7, r0",
            "bhs 0x9a4a8",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "ldrb r3, [r6, r0]",
            "add r6, r6, r0",
            "cmp r3, 0xd",
            "addeq r6, r6, 1",
            "rsb r3, r7, 1",
            "adds r6, r6, r3",
            "moveq r8, r6",
            "bne 0x9a528",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r8",
            "bl sym.imp.memcpy",
            "ldr r7, [r4, 4]",
            "mov r5, 0",
            "ldr r2, [r4]",
            "mov r1, r5",
            "stm r4, {r6, r8}",
            "str r5, [r4, 0xc]",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "b 0x9a4ac",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r8, r0",
            "b 0x9a4e8"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x0003f094",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9ec]!"
        ]
    },
    "fcn.000a8fe0": {
        "function_address": "0x000a8fe0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "sub sp, sp, 8",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "mov r7, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, r5",
            "mov r2, r5",
            "mov r3, r5",
            "add r0, r0, 8",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "mov r0, r4",
            "mov r2, r6",
            "mov r3, r8",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE": {
        "function_address": "0x000404f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc54]!"
        ]
    },
    "fcn.00087190": {
        "function_address": "0x00087190",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x871ac",
            "b 0x871bc",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x871a8",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_yaSSL::x509_.erase_mySTL::list_yaSSL::x509_::iterator_": {
        "function_address": "0x00088c04",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x88c5c",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x88c70",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x88c64",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE8pop_backEv",
            "mov r0, 1",
            "b 0x88c5c",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE9pop_frontEv",
            "mov r0, 1",
            "b 0x88c5c"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL4x509EE8pop_backEv": {
        "function_address": "0x0003e734",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2c]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL4x509EE9pop_frontEv": {
        "function_address": "0x0003ed94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbec]!"
        ]
    },
    "sym.net_flush": {
        "function_address": "0x0007adfc",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r0, 4]",
            "ldr r2, [r0, 0xc]",
            "mov r4, r0",
            "cmp r1, r2",
            "moveq r0, 0",
            "beq 0x7ae30",
            "rsb r2, r1, r2",
            "bl rsym.net_real_write",
            "ldr r3, [r4, 4]",
            "subs r0, r0, 0",
            "movne r0, 1",
            "str r3, [r4, 0xc]",
            "ldrb r3, [r4, 0x50]",
            "cmp r3, 0",
            "ldrne r3, [r4, 0x34]",
            "strne r3, [r4, 0x30]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.net_real_write": {
        "function_address": "0x0003f97c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3fc]!"
        ]
    },
    "fcn.0009d580": {
        "function_address": "0x0009d580",
        "instructions": [
            "ldr ip, [0x0009d5bc]",
            "ldr r3, [0x0009d5c0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d5c4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d5c8]",
            "ldr r0, [0x0009d5cc]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_yaSSL::BulkCipher_::pop_front__": {
        "function_address": "0x00089468",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x894b0",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_get_peer_certificate": {
        "function_address": "0x00085d70",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager12get_peerX509Ev",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager12get_peerX509Ev": {
        "function_address": "0x0003f3a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7e4]!"
        ]
    },
    "sym.yaSSL_session_reused": {
        "function_address": "0x00085ec0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL8Security12get_resumingEv": {
        "function_address": "0x0003fa00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3a4]!"
        ]
    },
    "sym.net_realloc": {
        "function_address": "0x0007b2a4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x2c]",
            "mov r4, r0",
            "cmp r3, r1",
            "bhi 0x7b2d0",
            "ldr r3, [0x0007b320]",
            "mov r0, 1",
            "str r3, [r4, 0x58]",
            "strb r0, [r4, 0x5c]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r5, r1, 0xff0",
            "add r5, r5, 0xf",
            "bic r5, r5, 0xff0",
            "bic r5, r5, 0xf",
            "ldr r0, [r0, 4]",
            "add r1, r5, 8",
            "mov r2, 0x10",
            "bl rsym.my_realloc",
            "cmp r0, 0",
            "ldreq r3, [0x0007b324]",
            "addne r3, r0, r5",
            "moveq r0, 1",
            "strne r0, [r4, 0xc]",
            "strne r0, [r4, 4]",
            "streq r3, [r4, 0x58]",
            "strbeq r0, [r4, 0x5c]",
            "strne r3, [r4, 8]",
            "strne r5, [r4, 0x28]",
            "movne r0, 0",
            "b 0x7b2c8"
        ]
    },
    "sym.my_system_gmt_sec": {
        "function_address": "0x00078f2c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sb, 0",
            "sub sp, sp, 0x6c",
            "str sb, [sp, 0x64]",
            "str r2, [sp, 0xc]",
            "add ip, sp, 0x40",
            "mov r5, r0",
            "mov r4, r1",
            "ldm r5!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r5!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r0, [sp, 0x40]",
            "ldr r2, [r5]",
            "sub r3, r0, 0x7b0",
            "sub r3, r3, 1",
            "ldr r7, [0x00079288]",
            "cmp r3, 0x45",
            "str r2, [ip]",
            "add r7, pc, r7",
            "bls 0x78f90",
            "mov r0, 0",
            "add sp, sp, 0x6c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x0007928c]",
            "cmp r0, r3",
            "beq 0x791ec",
            "ldr r3, [0x00079290]",
            "cmp r0, r3",
            "beq 0x79250",
            "ldr r1, [sp, 0x44]",
            "ldr r5, [sp, 0x48]",
            "str sb, [sp, 8]",
            "mov r2, r5",
            "bl rsym.calc_daynr",
            "ldr sl, [sp, 0x50]",
            "ldr r3, [0x00079294]",
            "ldr r2, fcn.00045d00",
            "add r3, r0, r3",
            "lsl r0, sl, 6",
            "ldr r6, [sp, 0x4c]",
            "sub r0, r0, sl, lsl 2",
            "ldr r7, [r7, r2]",
            "str r0, [sp, 4]",
            "ldr sb, [sp, 0x54]",
            "add r1, r3, r3, lsl 2",
            "ldr ip, [sp, 4]",
            "rsb r2, r6, r6, lsl 3",
            "add r1, r3, r1, lsl 2",
            "sub r0, r7, 0xe10",
            "add r2, r6, r2, lsl 5",
            "add r2, r0, r2, lsl 4",
            "add r1, r3, r1, lsl 4",
            "add r0, ip, sb",
            "add r2, r2, r0",
            "add r3, r3, r1, lsl 1",
            "add r3, r2, r3, lsl 7",
            "add r8, sp, 0x68",
            "str r3, [r8, -4]!",
            "add fp, sp, 0x14",
            "mov r1, fp",
            "mov r0, r8",
            "bl sym.imp.localtime_r",
            "ldr r2, [sp, 0x1c]",
            "cmp r6, r2",
            "ldrne r1, [sp, 0x18]",
            "beq 0x791cc",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [sp, 0x20]",
            "rsb ip, ip, r5",
            "cmn ip, 1",
            "movlt ip, 0x18",
            "blt 0x79064",
            "cmp ip, 1",
            "addle ip, ip, ip, lsl 1",
            "mvngt ip, 0x17",
            "lslle ip, ip, 3",
            "rsb r1, r1, sl",
            "rsb r2, r2, r6",
            "add ip, r2, ip",
            "lsl r3, r1, 6",
            "sub r1, r3, r1, lsl 2",
            "rsb r0, r0, sb",
            "rsb r2, ip, ip, lsl 3",
            "add r1, r0, r1",
            "add ip, ip, r2, lsl 5",
            "ldr r2, [sp, 0x64]",
            "add r3, r1, ip, lsl 4",
            "add r2, r2, r3",
            "add r7, r7, 0xe10",
            "mov r0, r8",
            "mov r1, fp",
            "str r2, [sp, 0x64]",
            "add r7, r7, r3",
            "bl sym.imp.localtime_r",
            "ldr r2, [sp, 0x1c]",
            "cmp r6, r2",
            "beq 0x79230",
            "ldr r1, [sp, 0x18]",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [sp, 0x20]",
            "rsb ip, ip, r5",
            "cmn ip, 1",
            "movlt ip, 0x18",
            "blt 0x790e4",
            "cmp ip, 1",
            "addle ip, ip, ip, lsl 1",
            "mvngt ip, 0x17",
            "lslle ip, ip, 3",
            "rsb r1, r1, sl",
            "rsb r2, r2, r6",
            "add ip, r2, ip",
            "lsl r3, r1, 6",
            "sub r1, r3, r1, lsl 2",
            "rsb r0, r0, sb",
            "rsb r2, ip, ip, lsl 3",
            "add r1, r0, r1",
            "add ip, ip, r2, lsl 5",
            "ldr r2, [sp, 0x64]",
            "add r3, r1, ip, lsl 4",
            "add r2, r2, r3",
            "add r7, r7, 0xe10",
            "mov r0, r8",
            "mov r1, fp",
            "add r7, r7, r3",
            "str r2, [sp, 0x64]",
            "bl sym.imp.localtime_r",
            "ldr r3, [sp, 0x1c]",
            "cmp r6, r3",
            "beq 0x791e4",
            "ldr r2, [sp, 0x20]",
            "rsb r5, r2, r5",
            "cmn r5, 1",
            "movlt r2, 0x18",
            "blt 0x7915c",
            "cmp r5, 1",
            "addle r5, r5, r5, lsl 1",
            "mvngt r2, 0x17",
            "lslle r2, r5, 3",
            "ldr r1, [sp, 0x18]",
            "rsb r3, r3, r6",
            "rsb sl, r1, sl",
            "ldr r1, [sp, 0x14]",
            "add r3, r3, r2",
            "lsl r2, sl, 6",
            "sub sl, r2, sl, lsl 2",
            "rsb r1, r1, sb",
            "rsb r2, r3, r3, lsl 3",
            "add sl, r1, sl",
            "add r3, r3, r2, lsl 5",
            "add r3, sl, r3, lsl 4",
            "cmp r3, 0xe10",
            "beq 0x79270",
            "cmn r3, 0xe10",
            "ldreq r0, [sp, 0x64]",
            "ldreq r3, [sp, 4]",
            "rsbeq r0, sb, r0",
            "ldrne r0, [sp, 0x64]",
            "rsbeq r0, r3, r0",
            "ldr ip, [sp, 0xc]",
            "mov r3, 1",
            "strb r3, [ip]",
            "ldr r2, [sp, 8]",
            "str r7, [r4]",
            "add r0, r2, r0",
            "bic r0, r0, r0, asr 31",
            "b 0x78f84",
            "ldr r1, [sp, 0x18]",
            "cmp sl, r1",
            "bne 0x7903c",
            "ldr r0, [sp, 0x14]",
            "cmp sb, r0",
            "bne 0x79040",
            "ldr r0, [sp, 0x64]",
            "b 0x791b8",
            "ldr r1, [sp, 0x44]",
            "cmp r1, 1",
            "bhi 0x78f80",
            "ldr r5, [sp, 0x48]",
            "cmp r5, 0x13",
            "bhi 0x78f80",
            "cmp r1, 1",
            "strne sb, [sp, 8]",
            "movne r1, sb",
            "bne 0x78fb4",
            "cmp r5, 4",
            "bls 0x79268",
            "ldr r2, [0x0007929c]",
            "sub r5, r5, 2",
            "str r2, [sp, 8]",
            "str r5, [sp, 0x48]",
            "b 0x78fb4",
            "ldr r1, [sp, 0x18]",
            "cmp sl, r1",
            "bne 0x790bc",
            "ldr r0, [sp, 0x14]",
            "cmp sb, r0",
            "bne 0x790c0",
            "ldr r0, [sp, 0x64]",
            "b 0x791b8",
            "ldr r1, [sp, 0x44]",
            "cmp r1, 0xb",
            "bls 0x78f80",
            "ldr r5, [sp, 0x48]",
            "cmp r5, 0x1e",
            "bls 0x78f80",
            "str sb, [sp, 8]",
            "b 0x78fb4",
            "ldr r0, [sp, 0x64]",
            "ldr r2, [sp, 4]",
            "rsb r0, sb, r0",
            "add r0, r0, 0xe10",
            "rsb r0, r2, r0",
            "b 0x791ac"
        ]
    },
    "rsym.calc_daynr": {
        "function_address": "0x0003e05c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4bc]!"
        ]
    },
    "sym.imp.localtime_r": {
        "function_address": "0x0003ce14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xec]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::RSA::RSAImpl__yaSSL::RSA::RSAImpl_": {
        "function_address": "0x0008136c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x814b8",
            "ldr r5, [r4, 0x94]",
            "ldr r2, [r4, 0x90]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x84]",
            "ldr r2, [r4, 0x80]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x74]",
            "ldr r2, [r4, 0x70]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x64]",
            "ldr r2, [r4, 0x60]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x54]",
            "ldr r2, [r4, 0x50]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x44]",
            "ldr r2, [r4, 0x40]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "add r5, r4, 0x20",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r5, 0x14]",
            "ldr r2, [r5, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r5, 4]",
            "ldr r2, [r4, 0x20]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldm r4, {r2, r5}",
            "mov r0, r5",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_SHA::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007cd30",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj": {
        "function_address": "0x0003ec8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc9c]!"
        ]
    },
    "sym.my_rename": {
        "function_address": "0x00059b60",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x410",
            "mov r4, r2",
            "mov r8, r0",
            "mov r7, r1",
            "bl sym.imp.rename",
            "cmp r0, 0",
            "bne 0x59c10",
            "tst r4, 0x400",
            "bne 0x59b98",
            "mov r0, 0",
            "add sp, sp, 0x410",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r6, sp, 0x208",
            "add r2, sp, 0x400",
            "mov r1, r8",
            "add r2, r2, 0xc",
            "add r5, sp, 0x10",
            "mov r0, r6",
            "bl rsym.dirname_part",
            "sub r5, r5, 8",
            "add r2, sp, 0x400",
            "mov r1, r7",
            "add r2, r2, 8",
            "mov r0, r5",
            "bl rsym.dirname_part",
            "mov r0, r6",
            "mov r1, r4",
            "bl rsym.my_sync_dir",
            "cmp r0, 0",
            "bne 0x59c08",
            "mov r0, r6",
            "mov r1, r5",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x59b88",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym.my_sync_dir",
            "cmp r0, 0",
            "beq 0x59b88",
            "mvn r0, 0",
            "b 0x59b8c",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr ip, [r0]",
            "tst r4, 0x18",
            "str ip, [r5]",
            "beq 0x59c08",
            "mov r2, r8",
            "mov r3, r7",
            "mov r0, 7",
            "mov r1, 0x24",
            "str ip, [sp]",
            "bl rsym.my_error",
            "mvn r0, 0",
            "b 0x59b8c"
        ]
    },
    "sym.imp.rename": {
        "function_address": "0x0003d5d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbc4]!"
        ]
    },
    "sym.my_end": {
        "function_address": "0x00048714",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x000488d8]",
            "ldr r5, [0x000488dc]",
            "add r4, pc, r4",
            "ldr r3, [r4, r5]",
            "sub sp, sp, 0x240",
            "ldrb r2, [r3]",
            "ldr r3, [0x000488e0]",
            "cmp r2, 0",
            "ldr r3, [r4, r3]",
            "mov r6, r0",
            "ldr r7, [r3]",
            "beq 0x48798",
            "tst r0, 1",
            "beq 0x48770",
            "ldr r3, [0x000488e4]",
            "ldr r2, [0x000488e8]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r4, r2]",
            "ldr r3, [r3]",
            "ldr ip, [r2]",
            "orrs r0, ip, r3",
            "bne 0x488a4",
            "bl rsym.free_charsets",
            "bl rsym.my_error_unregister_all",
            "bl rsym.my_once_free",
            "tst r6, 2",
            "bne 0x487a4",
            "bl rsym.my_thread_end",
            "bl rsym.my_thread_global_end",
            "ldr r3, [r4, r5]",
            "mov r2, 0",
            "strb r2, [r3]",
            "add sp, sp, 0x240",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 0",
            "add r1, sp, 0x40",
            "bl sym.imp.getrusage",
            "cmp r0, 0",
            "bne 0x48784",
            "ldr r2, [sp, 0x44]",
            "ldr r6, [0x000488ec]",
            "ldr r3, [sp, 0x40]",
            "smull lr, r1, r6, r2",
            "add r3, r3, r3, lsl 2",
            "asr r2, r2, 0x1f",
            "rsb r2, r2, r1, asr 12",
            "add r3, r3, r3, lsl 2",
            "add r0, r2, r3, lsl 2",
            "bl fcn.000bf2b8",
            "mov r2, 0",
            "ldr r3, [0x000488f0]",
            "bl fcn.000bf624",
            "ldr r2, [sp, 0x4c]",
            "ldr r3, [sp, 0x48]",
            "smull lr, ip, r6, r2",
            "add r3, r3, r3, lsl 2",
            "asr r2, r2, 0x1f",
            "rsb r2, r2, ip, asr 12",
            "add r3, r3, r3, lsl 2",
            "stm sp, {r0, r1}",
            "add r0, r2, r3, lsl 2",
            "bl fcn.000bf2b8",
            "mov r2, 0",
            "ldr r3, [0x000488f0]",
            "bl fcn.000bf624",
            "ldr r3, [sp, 0x50]",
            "ldr r8, [0x000488f4]",
            "str r3, [sp, 0x10]",
            "ldr r3, [sp, 0x58]",
            "add r8, r4, r8",
            "str r3, [sp, 0x14]",
            "ldr r3, [sp, 0x60]",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "str r3, [sp, 0x18]",
            "ldr r3, [sp, 0x64]",
            "mov r2, r8",
            "str r3, [sp, 0x1c]",
            "ldr r3, [sp, 0x68]",
            "mov r0, r7",
            "str r3, [sp, 0x20]",
            "ldr r3, [sp, 0x6c]",
            "mov r1, 1",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x70]",
            "str r3, [sp, 0x28]",
            "ldr r3, [sp, 0x74]",
            "str r3, [sp, 0x2c]",
            "ldr r3, [sp, 0x78]",
            "str r3, [sp, 0x30]",
            "ldr r3, [sp, 0x7c]",
            "str r3, [sp, 0x34]",
            "ldr r3, [sp, 0x80]",
            "str r3, [sp, 0x38]",
            "ldr r3, [sp, 0x84]",
            "str r3, [sp, 0x3c]",
            "bl sym.imp.__fprintf_chk",
            "b 0x48784",
            "ldr r2, [0x000488f8]",
            "add r8, sp, 0x40",
            "ldr r2, [r4, r2]",
            "mov r1, 0x200",
            "ldr r2, [r2, 0x48]",
            "mov r0, r8",
            "str ip, [sp]",
            "bl rsym.my_snprintf",
            "mov r1, r8",
            "mov r2, 4",
            "mov r0, 0x13",
            "bl rsym.my_message_no_curses",
            "b 0x48770"
        ]
    },
    "rsym.free_charsets": {
        "function_address": "0x0003f550",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6c4]!"
        ]
    },
    "rsym.my_error_unregister_all": {
        "function_address": "0x0003dc48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x774]!"
        ]
    },
    "rsym.my_once_free": {
        "function_address": "0x0003eb9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd3c]!"
        ]
    },
    "rsym.my_thread_global_end": {
        "function_address": "0x0003dfcc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x51c]!"
        ]
    },
    "sym.imp.getrusage": {
        "function_address": "0x0003d8c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9cc]!"
        ]
    },
    "fcn.000bf2b8": {
        "function_address": "0x000bf2b8",
        "instructions": [
            "teq r0, 0",
            "moveq r1, 0",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "ands r5, r0, 0x80000000",
            "rsbmi r0, r0, 0",
            "mov r1, 0",
            "b 0xbf0d4"
        ]
    },
    "rsym.my_message_no_curses": {
        "function_address": "0x0003e1f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3ac]!"
        ]
    },
    "sym.yaSSL::Crypto::SetDH_yaSSL::DH_Parms_const_": {
        "function_address": "0x00093684",
        "instructions": [
            "ldrb r3, [r1, 8]",
            "push {r4, r5, r6, lr}",
            "cmp r3, 0",
            "mov r6, r1",
            "mov r4, r0",
            "beq 0x936c0",
            "mov r1, 0",
            "mov r0, 4",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r6",
            "mov r5, r0",
            "add r2, r6, 4",
            "add r3, r4, 0xc",
            "bl rsym._ZN5yaSSL13DiffieHellmanC1ERKNS_7IntegerES3_RKNS_10RandomPoolE",
            "str r5, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL13DiffieHellmanC1ERKNS_7IntegerES3_RKNS_10RandomPoolE": {
        "function_address": "0x0003f9f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3ac]!"
        ]
    },
    "sym.yaSSL::SSL::deriveKeys__": {
        "function_address": "0x00095454",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r6, r0, 0x68",
            "sub sp, sp, 0x10c",
            "str r0, [sp, 0x14]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r4, [r0, 0x14]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0xc]",
            "mov r0, r6",
            "add r4, r3, r4",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0xd]",
            "add sb, sp, 0xe8",
            "add r4, r4, r3",
            "lsl r4, r4, 1",
            "add r4, r4, 0xf",
            "asr r4, r4, 4",
            "lsl r1, r4, 4",
            "add r3, sp, 0x100",
            "mov r0, sb",
            "str r3, [sp, 0xc]",
            "str r4, [sp, 4]",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "add r3, sp, 0xf8",
            "ldr r0, [sp, 0xc]",
            "str r3, [sp, 8]",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add fp, sp, 0x90",
            "add lr, r0, 4",
            "mov ip, fp",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "beq 0x955f0",
            "mov r7, 0",
            "add r3, fp, 0x30",
            "mov r4, r7",
            "add r5, sp, 0x18",
            "add sl, sp, 0xd4",
            "str r3, [sp, 0x10]",
            "b 0x955c4",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x30",
            "add r1, r0, 4",
            "add r0, r5, r8",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r3, r4, 0x31",
            "add r1, r0, 0x54",
            "mov r2, 0x20",
            "add r0, r5, r3",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r1, r0, 0x34",
            "add r0, r4, 0x51",
            "mov r2, 0x20",
            "add r0, r5, r0",
            "bl sym.imp.memcpy",
            "add r3, r4, 0x71",
            "ldr r0, [sp, 8]",
            "mov r1, sl",
            "mov r2, r5",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPhPKhj",
            "mov r1, sl",
            "mov r2, 0x14",
            "ldr r0, [sp, 0x10]",
            "bl sym.imp.memcpy",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r3, 0x44",
            "add r1, r0, r7",
            "mov r2, fp",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD510get_digestEPhPKhj",
            "ldr r3, [sp, 4]",
            "mov r4, r8",
            "cmp r3, r8",
            "add r7, r7, 0x10",
            "ble 0x955f0",
            "mov r1, r4",
            "mov r0, r5",
            "bl fcn.00092508",
            "cmp r0, 0",
            "add r8, r4, 1",
            "mov r0, r6",
            "bne 0x95524",
            "ldr r0, [sp, 0x14]",
            "mov r1, 0x69",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x95604",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r1, r0",
            "ldr r0, [sp, 0x14]",
            "bl rsym._ZN5yaSSL3SSL9storeKeysEPKh",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add sp, sp, 0x10c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3SHA10get_digestEPhPKhj": {
        "function_address": "0x0003f01c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa3c]!"
        ]
    },
    "rsym._ZN5yaSSL3MD510get_digestEPhPKhj": {
        "function_address": "0x0003ef5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xabc]!"
        ]
    },
    "fcn.00092508": {
        "function_address": "0x00092508",
        "instructions": [
            "ldr r3, [0x000925e8]",
            "push {r4, lr}",
            "add r3, pc, r3",
            "cmp r1, 6",
            "addls pc, pc, r1, lsl 2",
            "b 0x92558",
            "b 0x92560",
            "b 0x92570",
            "b 0x92588",
            "b 0x925a0",
            "b 0x925b8",
            "b 0x925d0",
            "b 0x9253c",
            "ldr r1, [0x000925ec]",
            "mov r2, 7",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x92550",
            "mov r3, 0x41",
            "strb r3, [r0]",
            "mov r0, 1",
            "b 0x92550",
            "ldr r1, [0x000925f0]",
            "mov r2, 2",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x92550",
            "ldr r1, [0x000925f4]",
            "mov r2, 3",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x92550",
            "ldr r1, [0x000925f8]",
            "mov r2, 4",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x92550",
            "ldr r1, [0x000925fc]",
            "mov r2, 5",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x92550",
            "ldr r1, [0x00092600]",
            "mov r2, 6",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x92550"
        ]
    },
    "rsym._ZN5yaSSL3SSL9storeKeysEPKh": {
        "function_address": "0x00040960",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x964]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::ServerHello_const_": {
        "function_address": "0x0008c8d8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [0x0008c988]",
            "mov r5, r1",
            "mov r1, r6",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r5, 8]",
            "mov r1, r6",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r5, 9]",
            "mov r2, 0x20",
            "strb r3, [r0]",
            "add r1, r5, 0xa",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r5, 0x2a]",
            "mov r2, 0x20",
            "strb r3, [r0]",
            "add r1, r5, 0x2b",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r5, 0x4b]",
            "mov r1, r6",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r5, 0x4c]",
            "mov r1, r6",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r5, 0x50]",
            "strb r3, [r0]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0008f4bc": {
        "function_address": "0x0008f4bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f514]",
            "ldr r3, [0x0008f518]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ClientKeyBaseEEEvPT_",
            "ldr r3, [0x0008f51c]",
            "ldr r0, [0x0008f520]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f524]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f528]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13ClientKeyBaseEEEvPT_": {
        "function_address": "0x0003cc70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x204]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::AES::AESImpl__yaSSL::AES::AESImpl_": {
        "function_address": "0x00080c90",
        "instructions": [
            "ldr r3, [0x00080cc8]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "beq 0x80cb8",
            "ldr r2, [0x00080ccc]",
            "ldr r2, [r3, r2]",
            "add r2, r2, 8",
            "str r2, [r0]",
            "str r2, [r0, 0x12c]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateHandShake__": {
        "function_address": "0x0008b3d4",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0008b404]",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b408]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_compress": {
        "function_address": "0x0005014c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r1]",
            "mov r6, r0",
            "cmp r3, 0x31",
            "movls r0, 0",
            "mov r4, r1",
            "mov r5, r2",
            "strls r0, [r2]",
            "bhi 0x50178",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym.my_compress_alloc",
            "subs r7, r0, 0",
            "beq 0x501a4",
            "ldr r2, [r4]",
            "mov r1, r7",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "mov r0, 0",
            "b 0x50170",
            "ldr r0, [r5]",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "b 0x50170"
        ]
    },
    "rsym.my_compress_alloc": {
        "function_address": "0x0003cc04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x24c]!"
        ]
    },
    "fcn.0007d6a0": {
        "function_address": "0x0007d6a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007d73c]",
            "ldr r3, [0x0007d740]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x25c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007d744]",
            "mov r1, 0x10",
            "ldr r2, [r4, r2]",
            "add r7, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, 8",
            "add r8, r0, r1",
            "add r4, r0, 0x13c",
            "add ip, r0, 0x14c",
            "str r7, [r0, 0xc]",
            "mov r7, 0",
            "str r8, [r0, 8]",
            "str r7, [r0, 0x30]",
            "str r1, [r0, 0x130]",
            "str r4, [r0, 0x134]",
            "str ip, [r0, 0x138]",
            "str r3, [r0, 0x160]",
            "str r2, [r0, 0x12c]",
            "str r6, [r0, 0x258]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0x15c]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::lowResTimer__": {
        "function_address": "0x0008a0ac",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "mov r0, sp",
            "mov r1, 0",
            "bl sym.imp.gettimeofday",
            "ldr r0, [sp]",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::InverseMod_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab638",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r2, 0xc]",
            "ldr r7, [0x000ab948]",
            "cmp r3, 1",
            "add r7, pc, r7",
            "sub sp, sp, 0x88",
            "mov r4, r2",
            "mov r6, r0",
            "mov r5, r1",
            "beq 0xab8f8",
            "ldr r3, [r1, 0xc]",
            "cmp r3, 1",
            "beq 0xab680",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "blt 0xab6c4",
            "add r7, sp, 0x6c",
            "mov r1, r5",
            "mov r0, r7",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r0, r6",
            "mov r1, r7",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_",
            "add r0, r7, 8",
            "ldr r1, [sp, 0x70]",
            "ldr r2, [sp, 0x6c]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r6",
            "add sp, sp, 0x88",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "bne 0xab6fc",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "subs r1, r0, 0",
            "beq 0xab7f4",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "b 0xab6b4",
            "ldr r0, [r4]",
            "lsl ip, r0, 2",
            "cmn ip, 0xc0000001",
            "str ip, [sp, 0x7c]",
            "bhi 0xab920",
            "cmp ip, 0",
            "beq 0xab728",
            "mov r1, 0",
            "lsl r0, r0, 4",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "add r0, sp, 0x88",
            "ldr r7, [r0, -0xc]!",
            "mov r1, ip",
            "mov r8, 0",
            "mov r3, r7",
            "mov r2, r7",
            "add r0, r0, 8",
            "str ip, [sp, 0x80]",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "add sl, sp, 0xc",
            "lsl r2, r7, 2",
            "mov r1, r8",
            "str r0, [sp, 0x80]",
            "str r7, [sp, 0x7c]",
            "bl sym.imp.memset",
            "mov r1, r8",
            "ldr r2, [r4]",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldm r4, {ip, lr}",
            "ldr r3, [r5]",
            "ldr r2, [r5, 4]",
            "ldr r1, [sp, 0x80]",
            "ldr r0, [sp, 0x10]",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl rsym._ZN8TaoCrypt13AlmostInverseEPjS0_PKjjS2_j",
            "mov r2, r0",
            "ldr r0, [sp, 0x10]",
            "ldr ip, [r4]",
            "ldr r3, [r4, 4]",
            "mov r1, r0",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt17DivideByPower2ModEPjPKjjS2_j",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, sl, 8",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r4, [sp, 0x80]",
            "ldr r2, [sp, 0x7c]",
            "mov r1, r8",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "b 0xab6b4",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "beq 0xab6e8",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "beq 0xab864",
            "add r7, sp, 0x5c",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "cmp r0, 0",
            "beq 0xab878",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r7, 8",
            "ldr r1, [sp, 0x60]",
            "ldr r2, [sp, 0x5c]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xab6b4",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "b 0xab6b4",
            "add sb, sp, 0x4c",
            "add r8, sp, 0x3c",
            "mov r0, sb",
            "mov r1, r5",
            "mov r2, r7",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r2, sb",
            "mov r1, r4",
            "mov r0, r8",
            "add r4, sp, 0x2c",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "add sl, sp, 0x1c",
            "mov r1, 1",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "mov r0, sl",
            "mov r1, r8",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, sl",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9DividedByERKS0_",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "b 0xab850",
            "ldr r3, [0x000ab94c]",
            "ldr r1, [0x000ab950]",
            "add r3, r7, r3",
            "ldr r0, [0x000ab954]",
            "add r3, r3, 0xe90",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000ab958]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000ab94c]",
            "ldr r1, [0x000ab95c]",
            "add r3, r7, r3",
            "ldr r0, [0x000ab960]",
            "add r3, r3, 0xc80",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_": {
        "function_address": "0x0003e884",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf4c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer6GetBitEj": {
        "function_address": "0x00040210",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe44]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7IntegerntEv": {
        "function_address": "0x0003d648",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb74]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1El": {
        "function_address": "0x0003faa8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x334]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer9DividedByERKS0_": {
        "function_address": "0x00040804",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa4c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerD1Ev": {
        "function_address": "0x0003d060",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf64]!"
        ]
    },
    "sym.yaSSL::processReply_yaSSL::SSL_": {
        "function_address": "0x00082584",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x825a0",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL14DoProcessReplyERNS_3SSLE",
            "cmp r0, 0",
            "beq 0x82598",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket13IsNonBlockingEv",
            "cmp r0, 0",
            "bne 0x825e8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "mov r0, r4",
            "bne 0x82598",
            "bl rsym._ZN5yaSSL14DoProcessReplyERNS_3SSLE",
            "cmp r0, 0",
            "bne 0x825c4",
            "b 0x82598",
            "mov r0, r4",
            "mov r1, 0x50",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x82598"
        ]
    },
    "rsym._ZN5yaSSL14DoProcessReplyERNS_3SSLE": {
        "function_address": "0x000408a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9e4]!"
        ]
    },
    "rsym._ZNK5yaSSL3SSL9getSocketEv": {
        "function_address": "0x0003ed1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc3c]!"
        ]
    },
    "rsym._ZNK5yaSSL6Socket13IsNonBlockingEv": {
        "function_address": "0x0003d108",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xef4]!"
        ]
    },
    "sym.my_hash_free": {
        "function_address": "0x00052640",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x2c]",
            "mov r5, r0",
            "cmp r3, 0",
            "beq 0x52688",
            "ldr r4, [r0, 0x14]",
            "ldr r6, [r0, 0xc]",
            "add r6, r4, r6, lsl 3",
            "cmp r4, r6",
            "blo 0x52670",
            "b 0x52688",
            "ldr r3, [r5, 0x2c]",
            "ldr r0, [r4, 4]",
            "add r4, r4, 8",
            "mov lr, pc",
            "bx r3",
            "cmp r6, r4",
            "bhi 0x5266c",
            "mov r4, 0",
            "str r4, [r5, 0xc]",
            "str r4, [r5, 0x2c]",
            "add r0, r5, 0x14",
            "bl rsym.delete_dynamic",
            "str r4, [r5, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.delete_dynamic": {
        "function_address": "0x0003f3dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7bc]!"
        ]
    },
    "sym.vio_fastsend": {
        "function_address": "0x00079ffc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x10",
            "add r4, sp, 0x10",
            "mov r3, 8",
            "mov r6, r0",
            "ldr r0, [r0]",
            "str r3, [r4, -4]!",
            "mov r5, 4",
            "mov r1, 0",
            "mov r2, 1",
            "mov r3, r4",
            "str r5, [sp]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "beq 0x7a048",
            "mvn r0, 0",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov ip, 1",
            "ldr r0, [r6]",
            "mov r2, ip",
            "mov r3, r4",
            "mov r1, 6",
            "str r5, [sp]",
            "str ip, [sp, 0xc]",
            "bl sym.imp.setsockopt",
            "cmp r0, 0",
            "beq 0x7a03c",
            "b 0x7a038"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x000405e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbb4]!"
        ]
    },
    "fcn.0007ebb4": {
        "function_address": "0x0007ebb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007ec18]",
            "ldr r3, [0x0007ec1c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 4",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ec20]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0009a2cc": {
        "function_address": "0x0009a2cc",
        "instructions": [
            "mov r3, 0",
            "cmp r2, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0, 4]",
            "mov r4, r0",
            "mov r5, r1",
            "str r3, [r0]",
            "beq 0x9a300",
            "mov r1, r2",
            "bl rsym._ZN8TaoCrypt9PublicKey7SetSizeEj",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt9PublicKey6SetKeyEPKh",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9PublicKey7SetSizeEj": {
        "function_address": "0x0003f850",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4c4]!"
        ]
    },
    "rsym._ZN8TaoCrypt9PublicKey6SetKeyEPKh": {
        "function_address": "0x0003df78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x554]!"
        ]
    },
    "sym.TaoCrypt::WindowSlider_mySTL::GetArrayMemory_TaoCrypt::WindowSlider__unsigned_int_": {
        "function_address": "0x00099cc4",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, r0, lsl 1",
            "mov r1, 0",
            "lsl r0, r0, 4",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DES_EDE2::ProcessAndXorBlock_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000a0740",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x000a09fc]",
            "tst r1, 3",
            "add r5, pc, r5",
            "sub sp, sp, 8",
            "mov sb, r0",
            "mov r4, r2",
            "mov r8, r3",
            "bne 0xa09b4",
            "mov r0, r1",
            "ldr r3, [r0], 4",
            "bic r2, r3, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r2, r2, 8",
            "orr r2, r2, r3, lsl 8",
            "ror r2, r2, 0x10",
            "tst r0, 3",
            "str r2, [sp, 4]",
            "bne 0xa09b4",
            "ldr r1, [r1, 4]",
            "ldr r3, [0x000a0a00]",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "lsr r0, r0, 8",
            "bic r1, r1, 0xff00",
            "orr r1, r0, r1, lsl 8",
            "ror ip, r1, 0xc",
            "eor r1, ip, r2",
            "and r3, r1, r3",
            "eor ip, r3, ip",
            "eor r2, r3, r2",
            "ror ip, ip, 0x14",
            "eor r3, ip, r2",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor ip, r3, ip",
            "eor r2, r3, r2",
            "ror ip, ip, 0x12",
            "ldr r3, [0x000a0a04]",
            "eor r1, ip, r2",
            "and r3, r1, r3",
            "eor ip, r3, ip",
            "eor r2, r3, r2",
            "ror ip, ip, 6",
            "eor r3, ip, r2",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "eor ip, r3, ip",
            "ror ip, ip, 0x17",
            "eor r3, r3, r2",
            "ldr r2, [0x000a0a08]",
            "eor r1, ip, r3",
            "and r2, r1, r2",
            "add r7, sp, 4",
            "eor r3, r2, r3",
            "add sl, sb, 0x38",
            "eor ip, r2, ip",
            "ror r3, r3, 0x1f",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, sp",
            "str r3, [sp, 4]",
            "str ip, [sp]",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "add r0, sb, 0xb8",
            "mov r1, sp",
            "mov r2, r7",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, sp",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "ldm sp, {r1, r2}",
            "ror r1, r1, 1",
            "ldr r3, [0x000a0a08]",
            "eor r0, r1, r2",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 9",
            "eor r3, r2, r1",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0x1a",
            "ldr r3, [0x000a0a04]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xe",
            "eor r3, r2, r1",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xc",
            "ldr r3, [0x000a0a00]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "ror r2, r2, 4",
            "eor r3, r3, r1",
            "tst r8, 3",
            "mov r6, sp",
            "str r3, [sp]",
            "str r2, [sp, 4]",
            "bne 0xa09d8",
            "cmp r4, 0",
            "beq 0xa096c",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "ldr r0, [r4], 4",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "eor r3, r0, r3, ror 16",
            "str r3, [r8], 4",
            "tst r8, 3",
            "bne 0xa09d8",
            "cmp r4, 0",
            "beq 0xa0990",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "ldr r1, [r4]",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "eor r2, r1, r2, ror 16",
            "str r2, [r8]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "ror r3, r3, 0x10",
            "str r3, [r8], 4",
            "b 0xa092c",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "ror r2, r2, 0x10",
            "str r2, [r8]",
            "b 0xa0960",
            "ldr r3, [0x000a0a0c]",
            "ldr r1, [0x000a0a10]",
            "ldr r0, [0x000a0a14]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x8f0",
            "ldr r2, [0x000a0a18]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a0a0c]",
            "ldr r1, [0x000a0a10]",
            "ldr r0, [0x000a0a14]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x950",
            "ldr r2, [0x000a0a1c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_": {
        "function_address": "0x0003e41c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x23c]!"
        ]
    },
    "sym.yaSSL::CreateDHServerKEA__": {
        "function_address": "0x0008b244",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x28",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL9DH_ServerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL9DH_ServerC1Ev": {
        "function_address": "0x00040798",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa94]!"
        ]
    },
    "sym.yaSSL::SSL::fillData_yaSSL::Data_": {
        "function_address": "0x0009324c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "mov r4, r1",
            "str r0, [sp, 4]",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r6, r0, 0",
            "beq 0x93274",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 4]",
            "ldr r3, [r4]",
            "mov r0, r4",
            "add sb, r2, 0x9c0",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r5, r0",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "mov r1, r6",
            "ldr fp, [r0, 8]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL4Data10set_lengthEt",
            "ldr r0, [sp, 4]",
            "bl rsym._ZN5yaSSL3SSL12bufferedDataEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "cmp fp, 0",
            "mov sl, r0",
            "bne 0x932f4",
            "b 0x933cc",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "cmp sl, r0",
            "beq 0x933cc",
            "cmp r6, fp",
            "bhs 0x933cc",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "bl rsym._ZNK5mySTL4listIPN5yaSSL12input_bufferEE5frontEv",
            "mov r8, r0",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "ldr r3, [r4]",
            "mov r7, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r7",
            "rsb r0, r0, sl",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL4Data10set_bufferEv",
            "mov r1, r0",
            "ldr r3, [r4]",
            "str r1, [sp]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp]",
            "mov r2, r5",
            "add r1, r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r1, r0, r5",
            "lsl r1, r1, 0x10",
            "lsr r1, r1, 0x10",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL4Data10set_lengthEt",
            "cmp r7, r5",
            "add r6, r6, 1",
            "bne 0x932d0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL7Buffers7useDataEv",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9pop_frontEv",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "cmp sl, r0",
            "bne 0x932ec",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 0",
            "ldreq r2, [sp, 4]",
            "strbeq r3, [r2, 0x9de]",
            "b 0x93268"
        ]
    },
    "rsym._ZN5yaSSL4Data10set_lengthEt": {
        "function_address": "0x0003d360",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd64]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL12bufferedDataEv": {
        "function_address": "0x0003e278",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x354]!"
        ]
    },
    "rsym._ZN5yaSSL3minIjEET_S1_S1_": {
        "function_address": "0x000409d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x914]!"
        ]
    },
    "rsym._ZNK5mySTL4listIPN5yaSSL12input_bufferEE5frontEv": {
        "function_address": "0x0004066c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb5c]!"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer13get_remainingEv": {
        "function_address": "0x0003f8e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x464]!"
        ]
    },
    "rsym._ZN5yaSSL4Data10set_bufferEv": {
        "function_address": "0x0003fcdc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1bc]!"
        ]
    },
    "rsym._ZN5yaSSL7Buffers7useDataEv": {
        "function_address": "0x0003ed4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc1c]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9pop_frontEv": {
        "function_address": "0x00040144",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xecc]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_": {
        "function_address": "0x000402a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xde4]!"
        ]
    },
    "sym.net_write_command": {
        "function_address": "0x0007af8c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "ldr r6, [sp, 0x34]",
            "add r4, r3, 1",
            "mov sl, r3",
            "ldr r3, [0x0007b0f4]",
            "add r4, r4, r6",
            "cmp r4, r3",
            "mov fp, r2",
            "strb r1, [sp, 4]",
            "mov r5, r0",
            "ldr r7, [sp, 0x30]",
            "movls r2, 5",
            "movls sb, sp",
            "bls 0x7b060",
            "ldr r6, [0x0007b0f4]",
            "mov r2, 5",
            "rsb r6, sl, r6",
            "mov sb, sp",
            "mvn r8, 0",
            "ldr r3, [r5, 0x30]",
            "mov r0, r5",
            "add r1, r3, 1",
            "str r1, [r5, 0x30]",
            "mov r1, sp",
            "strb r8, [sp]",
            "strb r8, [sp, 1]",
            "strb r8, [sp, 2]",
            "strb r3, [sp, 3]",
            "bl fcn.0007ae48",
            "add r4, r4, 0xff000000",
            "cmp r0, 0",
            "mov r2, sl",
            "mov r1, fp",
            "add r4, r4, 1",
            "mov r0, r5",
            "bne 0x7b098",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r5",
            "bne 0x7b098",
            "bl fcn.0007ae48",
            "subs sl, r0, 0",
            "bne 0x7b098",
            "ldr r3, [0x0007b0f4]",
            "add r7, r7, r6",
            "cmp r4, r3",
            "mvn r6, 0xff000000",
            "mov r2, 4",
            "bhi 0x7afdc",
            "mov r6, r4",
            "ldr r3, [r5, 0x30]",
            "lsr lr, r4, 0x10",
            "add r1, r3, 1",
            "str r1, [r5, 0x30]",
            "lsr ip, r4, 8",
            "mov r1, sp",
            "mov r0, r5",
            "strb ip, [sp, 1]",
            "strb lr, [sp, 2]",
            "strb r4, [sp]",
            "strb r3, [sp, 3]",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "beq 0x7b0a8",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp sl, 0",
            "beq 0x7b0c8",
            "mov r1, fp",
            "mov r2, sl",
            "mov r0, r5",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "bne 0x7b098",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r5",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "bne 0x7b098",
            "mov r0, r5",
            "bl rsym.net_flush",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x7b09c"
        ]
    },
    "fcn.0007ae48": {
        "function_address": "0x0007ae48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldrb r3, [r0, 0x50]",
            "mov r6, r0",
            "cmp r3, 0",
            "mov r5, r1",
            "mov r4, r2",
            "beq 0x7ae70",
            "ldr r2, [r0, 0x28]",
            "cmp r2, 0x1000000",
            "bhs 0x7af58",
            "ldr r0, [r6, 0xc]",
            "ldr r7, [r6, 8]",
            "rsb r7, r0, r7",
            "cmp r7, r4",
            "bhs 0x7af34",
            "ldr r2, [r6, 4]",
            "cmp r2, r0",
            "beq 0x7aed4",
            "mov r1, r5",
            "mov r2, r7",
            "bl sym.imp.memcpy",
            "ldr r3, [r6, 4]",
            "ldr r2, [r6, 0xc]",
            "mov r1, r3",
            "rsb r3, r3, r2",
            "add r2, r7, r3",
            "mov r0, r6",
            "bl rsym.net_real_write",
            "cmp r0, 0",
            "bne 0x7af1c",
            "ldr r2, [r6, 4]",
            "ldrb r3, [r6, 0x50]",
            "str r2, [r6, 0xc]",
            "rsb r4, r7, r4",
            "add r5, r5, r7",
            "cmp r3, 0",
            "beq 0x7af24",
            "mvn r7, 0xff000000",
            "cmp r4, r7",
            "bhi 0x7aef8",
            "b 0x7af24",
            "cmp r4, r7",
            "sub r5, r5, 1",
            "bls 0x7af24",
            "mov r1, r5",
            "mov r0, r6",
            "mvn r2, 0xff000000",
            "bl rsym.net_real_write",
            "add r4, r4, 0xff000000",
            "cmp r0, 0",
            "add r4, r4, 1",
            "add r5, r5, 0x1000000",
            "beq 0x7aeec",
            "mov r0, 1",
            "b 0x7af50",
            "ldr r3, [r6, 0x28]",
            "cmp r4, r3",
            "ldrls r0, [r6, 0xc]",
            "bhi 0x7af70",
            "mov r2, r4",
            "mov r1, r5",
            "bl sym.imp.memcpy",
            "ldr r3, [r6, 0xc]",
            "mov r0, 0",
            "add r4, r3, r4",
            "str r4, [r6, 0xc]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r7, [r0, 4]",
            "ldr r0, [r0, 0xc]",
            "add r7, r7, 0x1000000",
            "sub r7, r7, 1",
            "rsb r7, r0, r7",
            "b 0x7ae7c",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "bl rsym.net_real_write",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x7af50"
        ]
    },
    "method.mySTL::list_yaSSL::x509_.remove_yaSSL::x509_": {
        "function_address": "0x00088cd4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x88d2c",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x88d44",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x88d34",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE8pop_backEv",
            "mov r0, 1",
            "b 0x88d2c",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE9pop_frontEv",
            "mov r0, 1",
            "b 0x88d2c"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL4x509EE7look_upES3_": {
        "function_address": "0x0004027c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdfc]!"
        ]
    },
    "sym.vio_peer_addr": {
        "function_address": "0x0007a0f8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "ldrb r0, [r0, 8]",
            "ldr r3, [0x0007a1a0]",
            "cmp r0, 0",
            "add r3, pc, r3",
            "sub sp, sp, 0xc",
            "mov r6, r1",
            "mov r5, r2",
            "bne 0x7a17c",
            "mov r1, r4",
            "add r2, sp, 8",
            "mov r3, 0x10",
            "ldr r0, [r1], 0x20",
            "str r3, [r2, -4]!",
            "bl sym.imp.getpeername",
            "subs r7, r0, 0",
            "movne r0, 1",
            "beq 0x7a150",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r0, [r4, 0x24]",
            "mov r1, r6",
            "bl rsym.my_inet_ntoa",
            "ldrh r2, [r4, 0x22]",
            "mov r0, r7",
            "lsl r3, r2, 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "orr r3, r3, r2, lsr 8",
            "strh r3, [r5]",
            "b 0x7a144",
            "mov r0, r1",
            "ldr r1, [0x0007a1a4]",
            "mov r2, 0xa",
            "add r1, r3, r1",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "strh r3, [r5]",
            "mov r0, 0",
            "b 0x7a144"
        ]
    },
    "sym.imp.getpeername": {
        "function_address": "0x00040474",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcac]!"
        ]
    },
    "rsym.my_inet_ntoa": {
        "function_address": "0x0003eb48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd74]!"
        ]
    },
    "method.mySTL::list_yaSSL::input_buffer_.remove_yaSSL::input_buffer_": {
        "function_address": "0x00088344",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x8839c",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x883b4",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x883a4",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE8pop_backEv",
            "mov r0, 1",
            "b 0x8839c",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9pop_frontEv",
            "mov r0, 1",
            "b 0x8839c"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE7look_upES3_": {
        "function_address": "0x0003ee60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb64]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE8pop_backEv": {
        "function_address": "0x0003d4d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc6c]!"
        ]
    },
    "sym.scramble": {
        "function_address": "0x00047650",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x90",
            "mov r7, r2",
            "mov r4, r0",
            "mov r0, sp",
            "mov r8, r1",
            "bl rsym.mysql_sha1_reset",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add r6, sp, 0x7c",
            "mov r2, r0",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "mov r0, sp",
            "bl rsym.mysql_sha1_reset",
            "add r7, sp, 0x68",
            "mov r2, 0x14",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "mov r0, sp",
            "bl rsym.mysql_sha1_reset",
            "mov r1, r8",
            "mov r2, 0x14",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r2, 0x14",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r4",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "tst r4, 3",
            "add r2, r4, 4",
            "movne r0, 0",
            "moveq r0, 1",
            "add r1, r6, 4",
            "cmp r2, r6",
            "movhs r3, 0",
            "movlo r3, 1",
            "cmp r4, r1",
            "orrhi r3, r3, 1",
            "ands r3, r0, r3",
            "mov r5, sp",
            "beq 0x4778c",
            "ldr r0, [r4]",
            "ldr r3, [sp, 0x7c]",
            "ldr ip, [r4, 4]",
            "eor r3, r0, r3",
            "ldr r0, [sp, 0x80]",
            "str r3, [r4]",
            "eor r0, ip, r0",
            "str r0, [r4, 4]",
            "ldr ip, [r2, 4]",
            "ldr r0, [r1, 4]",
            "add r3, r2, 4",
            "eor r0, ip, r0",
            "str r0, [r2, 4]",
            "add r1, r1, 4",
            "ldr ip, [r3, 4]",
            "ldr r0, [r1, 4]",
            "add r2, r3, 4",
            "eor r0, ip, r0",
            "str r0, [r3, 4]",
            "ldr r3, [r1, 8]",
            "ldr r1, [r2, 4]",
            "eor r3, r1, r3",
            "str r3, [r2, 4]",
            "add sp, sp, 0x90",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r6, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "beq 0x47780",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r6, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "bne 0x4778c",
            "b 0x47780"
        ]
    },
    "rsym.mysql_sha1_reset": {
        "function_address": "0x0003e764",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc]!"
        ]
    },
    "rsym.mysql_sha1_input": {
        "function_address": "0x0003d45c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcbc]!"
        ]
    },
    "rsym.mysql_sha1_result": {
        "function_address": "0x0003d180",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xea4]!"
        ]
    },
    "sym.TaoCrypt::AbstractGroup::Subtract_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000988bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x10",
            "mov r4, r0",
            "mov r0, sp",
            "mov r6, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r3, [r4]",
            "mov r1, r6",
            "mov r0, r4",
            "ldr r6, [r3, 0x10]",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "mov r1, sp",
            "mov r2, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx r6",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::Alert_": {
        "function_address": "0x0008bc2c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [0x0008bc6c]",
            "mov r4, r1",
            "mov r1, r6",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r6",
            "str r3, [r4, 4]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r0, r5",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DiffieHellman::DHImpl__yaSSL::DiffieHellman::DHImpl_": {
        "function_address": "0x000812f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x81358",
            "ldr r0, [r4, 0x2c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x28]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x24]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r5, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldm r4, {r2, r5}",
            "mov r0, r5",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_BlockType1::UnPad_unsigned_char_const__unsigned_int__unsigned_char__const": {
        "function_address": "0x000b2908",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "lsr r4, r2, 3",
            "cmp r4, 0xa",
            "ldr ip, [0x000b2a00]",
            "movls r6, 0",
            "subhi r6, r4, 0xa",
            "ands r2, r2, 7",
            "add ip, pc, ip",
            "beq 0xb2938",
            "ldrb r2, [r1], 1",
            "subs r2, r2, 0",
            "movne r2, 1",
            "ldrb r0, [r1]",
            "cmp r0, 1",
            "movne r2, 1",
            "cmp r4, 1",
            "movls r0, 1",
            "bls 0xb2964",
            "ldrb r0, [r1, 1]",
            "cmp r0, 0",
            "moveq r0, 2",
            "movne r0, 2",
            "bne 0xb299c",
            "cmp r4, r0",
            "moveq r4, 0",
            "beq 0xb29c0",
            "add r5, r1, r0",
            "ldrb r5, [r5, -1]",
            "cmp r5, 0",
            "bne 0xb29dc",
            "rsb r4, r0, r4",
            "cmp r4, r6",
            "bls 0xb29c0",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "cmp r0, r4",
            "bhs 0xb2964",
            "ldrb r5, [r1, r0]",
            "add r0, r0, 1",
            "cmp r5, 0",
            "bne 0xb299c",
            "cmp r4, r0",
            "moveq r4, 0",
            "bne 0xb2970",
            "cmp r2, 0",
            "bne 0xb298c",
            "add r1, r1, r0",
            "mov r2, r4",
            "mov r0, r3",
            "bl sym.imp.memcpy",
            "b 0xb2990",
            "ldr r3, [0x000b2a04]",
            "ldr r1, [0x000b2a08]",
            "ldr r0, [0x000b2a0c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0xb6",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.00090b44": {
        "function_address": "0x00090b44",
        "instructions": [
            "ldr ip, [0x00090b80]",
            "ldr r3, [0x00090b84]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090b88]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090b8c]",
            "ldr r0, [0x00090b90]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::DiffieHellman::get_agreedKeyLength___const": {
        "function_address": "0x0007dab8",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateFinished__": {
        "function_address": "0x0008b2a0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x2c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL8FinishedC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Sessions::add_yaSSL::SSL_const_": {
        "function_address": "0x000951b0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "sub sp, sp, 0xc",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r3, [r0, 0x12c]",
            "cmp r3, 0",
            "bne 0x95214",
            "ldr r3, [r4, 0x28]",
            "cmp r3, 0x100",
            "bgt 0x951f0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX23GetSessionCacheFlushOffEv",
            "cmp r0, 0",
            "bne 0x951e4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Sessions5FlushEv",
            "b 0x951e4",
            "add r6, sp, 4",
            "mov r0, r6",
            "add r1, r4, 0x10",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "mov r1, 0",
            "mov r0, 0x64",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r5",
            "mov r7, r0",
            "add r2, r4, 0xc",
            "bl rsym._ZN5yaSSL11SSL_SESSIONC1ERKNS_3SSLERNS_10RandomPoolE",
            "mov r0, r4",
            "mov r1, r7",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE9push_backES3_",
            "ldr r3, [r4, 0x28]",
            "mov r0, r6",
            "add r3, r3, 1",
            "str r3, [r4, 0x28]",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "b 0x951d8"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX23GetSessionCacheFlushOffEv": {
        "function_address": "0x0003e224",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x38c]!"
        ]
    },
    "rsym._ZN5yaSSL8Sessions5FlushEv": {
        "function_address": "0x0003ff34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2c]!"
        ]
    },
    "rsym._ZN5yaSSL5Mutex4LockC1ERS0_": {
        "function_address": "0x0003e428",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x234]!"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSIONC1ERKNS_3SSLERNS_10RandomPoolE": {
        "function_address": "0x00040498",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc94]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE9push_backES3_": {
        "function_address": "0x0004012c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xedc]!"
        ]
    },
    "rsym._ZN5yaSSL5Mutex4LockD1Ev": {
        "function_address": "0x0003ec44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xccc]!"
        ]
    },
    "fcn.0009a93c": {
        "function_address": "0x0009a93c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [0x0009aa6c]",
            "ldr lr, [0x0009aa70]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "sub sp, sp, 0x4c",
            "add lr, lr, 8",
            "add r4, sp, 0x14",
            "mov r6, r3",
            "mov r3, 0",
            "str lr, [r0]",
            "str r3, [r0, 4]",
            "mov r3, r4",
            "mov r5, r0",
            "str r4, [sp, 0xc]",
            "ldr r4, [sp, 0x70]",
            "bl rsym._ZN8TaoCrypt17Signature_Encoder9SetDigestEPKhjPh",
            "add fp, sp, 0x30",
            "mov r1, r6",
            "mov r2, fp",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11DER_Encoder9SetAlgoIDENS_8HashTypeEPh",
            "add sb, sp, 0x40",
            "add sl, r0, r8",
            "mov r6, r0",
            "mov r1, sb",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt11SetSequenceEjPh",
            "ldr r2, [r4]",
            "add sl, sl, r0",
            "cmp sl, r2",
            "mov r7, r0",
            "bls 0x9a9f8",
            "ldr r1, [r4, 4]",
            "mov ip, 1",
            "mov r3, sl",
            "add r0, r4, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r2, [r4]",
            "str r0, [r4, 4]",
            "mov r1, 0",
            "add r0, r0, r2",
            "rsb r2, r2, sl",
            "bl sym.imp.memset",
            "str sl, [r4]",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "mov r1, sb",
            "mov r2, r7",
            "add r0, r0, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "add r7, r7, r3",
            "mov r1, fp",
            "mov r2, r6",
            "add r0, r0, r7",
            "str r7, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "add r6, r6, r3",
            "mov r2, r8",
            "add r0, r0, r6",
            "str r6, [r4, 0xc]",
            "ldr r1, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "mov r0, r5",
            "add r8, r3, r8",
            "str r8, [r4, 0xc]",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt17Signature_Encoder9SetDigestEPKhjPh": {
        "function_address": "0x0003cf40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x24]!"
        ]
    },
    "rsym._ZN8TaoCrypt11DER_Encoder9SetAlgoIDENS_8HashTypeEPh": {
        "function_address": "0x0003e704",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4c]!"
        ]
    },
    "sym.void_mySTL::FreeArrayMemory_TaoCrypt::WindowSlider__TaoCrypt::WindowSlider_": {
        "function_address": "0x00099bfc",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_set_fd": {
        "function_address": "0x000865f8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r1",
            "bl rsym._ZN5yaSSL3SSL9useSocketEv",
            "mov r1, r4",
            "bl rsym._ZN5yaSSL6Socket6set_fdEi",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3SSL9useSocketEv": {
        "function_address": "0x0003cf70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 4]!"
        ]
    },
    "rsym._ZN5yaSSL6Socket6set_fdEi": {
        "function_address": "0x0003ff64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc]!"
        ]
    },
    "sym.__aeabi_f2ulz": {
        "function_address": "0x000bfe64",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "bl fcn.000bf2e0",
            "mov r2, 0",
            "ldr r3, [0x000bfec8]",
            "mov r5, r0",
            "mov r6, r1",
            "bl fcn.000bf394",
            "bl fcn.000bf9d0",
            "mov r4, r0",
            "bl fcn.000bf294",
            "mov r2, 0",
            "ldr r3, [0x000bfecc]",
            "bl fcn.000bf394",
            "mov r2, r5",
            "mov r3, r6",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "mov r2, 0",
            "mov r3, r4",
            "orr r4, r2, r0",
            "mov r5, r3",
            "mov r1, r3",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000bf394": {
        "function_address": "0x000bf394",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov ip, 0xff",
            "orr ip, ip, 0x700",
            "ands r4, ip, r1, lsr 20",
            "andsne r5, ip, r3, lsr 20",
            "teqne r4, ip",
            "teqne r5, ip",
            "bleq fcn.000bf58c",
            "add r4, r4, r5",
            "eor r6, r1, r3",
            "bic r1, r1, ip, lsl 21",
            "bic r3, r3, ip, lsl 21",
            "orrs r5, r0, r1, lsl 12",
            "orrsne r5, r2, r3, lsl 12",
            "orr r1, r1, 0x100000",
            "orr r3, r3, 0x100000",
            "beq 0xbf450",
            "umull ip, lr, r0, r2",
            "mov r5, 0",
            "umlal lr, r5, r1, r2",
            "and r2, r6, 0x80000000",
            "umlal lr, r5, r0, r3",
            "mov r6, 0",
            "umlal r5, r6, r1, r3",
            "teq ip, 0",
            "orrne lr, lr, 1",
            "sub r4, r4, 0xff",
            "cmp r6, 0x200",
            "sbc r4, r4, 0x300",
            "bhs 0xbf418",
            "lsls lr, lr, 1",
            "adcs r5, r5, r5",
            "adc r6, r6, r6",
            "orr r1, r2, r6, lsl 11",
            "orr r1, r1, r5, lsr 21",
            "lsl r0, r5, 0xb",
            "orr r0, r0, lr, lsr 21",
            "lsl lr, lr, 0xb",
            "subs ip, r4, 0xfd",
            "cmphi ip, 0x700",
            "bhi 0xbf480",
            "cmp lr, 0x80000000",
            "lsrseq lr, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "and r6, r6, 0x80000000",
            "orr r1, r6, r1",
            "orr r0, r0, r2",
            "eor r1, r1, r3",
            "subs r4, r4, ip, lsr 1",
            "rsbsgt r5, r4, ip",
            "orrgt r1, r1, r4, lsl 20",
            "popgt {r4, r5, r6, lr}",
            "bxgt lr",
            "orr r1, r1, 0x100000",
            "mov lr, 0",
            "subs r4, r4, 1"
        ]
    },
    "fcn.000bf9d0": {
        "function_address": "0x000bf9d0",
        "instructions": [
            "lsls r2, r1, 1",
            "bhs 0xbfa04",
            "adds r2, r2, 0x200000",
            "bhs 0xbfa0c",
            "bpl 0xbfa04",
            "mvn r3, 0x3e0",
            "subs r2, r3, r2, asr 21",
            "bmi 0xbfa14",
            "lsl r3, r1, 0xb",
            "orr r3, r3, 0x80000000",
            "orr r3, r3, r0, lsr 21",
            "lsr r0, r3, r2",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "orrs r0, r0, r1, lsl 12",
            "bne 0xbfa1c",
            "mvn r0, 0",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "fcn.000bef84": {
        "function_address": "0x000bef84",
        "instructions": [
            "push {r4, r5, lr}",
            "lsl r4, r1, 1",
            "lsl r5, r3, 1",
            "teq r4, r5",
            "teqeq r0, r2",
            "orrsne ip, r4, r0",
            "orrsne ip, r5, r2",
            "mvnsne ip, r4, asr 21",
            "mvnsne ip, r5, asr 21",
            "beq 0xbf1e0",
            "lsr r4, r4, 0x15",
            "rsbs r5, r4, r5, lsr 21",
            "rsblt r5, r5, 0",
            "ble 0xbefd8",
            "add r4, r4, r5",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "eor r0, r2, r0",
            "eor r1, r3, r1",
            "eor r2, r0, r2",
            "eor r3, r1, r3",
            "cmp r5, 0x36",
            "pophi {r4, r5, lr}",
            "bxhi lr",
            "tst r1, 0x80000000",
            "lsl r1, r1, 0xc",
            "mov ip, 0x100000",
            "orr r1, ip, r1, lsr 12",
            "beq 0xbf000",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "tst r3, 0x80000000",
            "lsl r3, r3, 0xc",
            "orr r3, ip, r3, lsr 12",
            "beq 0xbf018",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "teq r4, r5",
            "beq 0xbf1c8",
            "sub r4, r4, 1",
            "rsbs lr, r5, 0x20",
            "blt 0xbf044",
            "lsl ip, r2, lr",
            "adds r0, r0, r2, lsr r5",
            "adc r1, r1, 0",
            "adds r0, r0, r3, lsl lr",
            "adcs r1, r1, r3, asr r5",
            "b 0xbf060",
            "sub r5, r5, 0x20",
            "add lr, lr, 0x20",
            "cmp r2, 1",
            "lsl ip, r3, lr",
            "orrhs ip, ip, 2",
            "adds r0, r0, r3, asr r5",
            "adcs r1, r1, r3, asr 31",
            "and r5, r1, 0x80000000",
            "bpl 0xbf074",
            "rsbs ip, ip, 0",
            "rscs r0, r0, 0",
            "rsc r1, r1, 0",
            "cmp r1, 0x100000",
            "blo 0xbf0bc",
            "cmp r1, 0x200000",
            "blo 0xbf0a0",
            "lsrs r1, r1, 1",
            "rrxs r0, r0",
            "rrx ip, ip",
            "add r4, r4, 1",
            "lsl r2, r4, 0x15",
            "cmn r2, 0x400000",
            "bhs 0xbf250",
            "cmp ip, 0x80000000",
            "lsrseq ip, r0, 1",
            "adcs r0, r0, 0",
            "adc r1, r1, r4, lsl 20",
            "orr r1, r1, r5",
            "pop {r4, r5, lr}",
            "bx lr",
            "lsls ip, ip, 1",
            "adcs r0, r0, r0",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "sub r4, r4, 1",
            "bne 0xbf0a0",
            "teq r4, 0",
            "eor r3, r3, 0x100000",
            "eoreq r1, r1, 0x100000",
            "addeq r4, r4, 1",
            "subne r5, r5, 1",
            "b 0xbf020",
            "mvns ip, r4, asr 21",
            "mvnsne ip, r5, asr 21",
            "beq 0xbf264",
            "teq r4, r5",
            "teqeq r0, r2",
            "beq 0xbf20c",
            "orrs ip, r4, r0",
            "moveq r1, r3",
            "moveq r0, r2",
            "pop {r4, r5, lr}",
            "bx lr",
            "teq r1, r3",
            "movne r1, 0",
            "movne r0, 0",
            "popne {r4, r5, lr}",
            "bxne lr",
            "lsrs ip, r4, 0x15",
            "bne 0xbf23c",
            "lsls r0, r0, 1",
            "adcs r1, r1, r1",
            "orrhs r1, r1, 0x80000000",
            "pop {r4, r5, lr}",
            "bx lr",
            "adds r4, r4, 0x400000",
            "addlo r1, r1, 0x100000",
            "poplo {r4, r5, lr}",
            "bxlo lr",
            "and r5, r1, 0x80000000",
            "orr r1, r5, 0x7f000000",
            "orr r1, r1, 0xf00000",
            "mov r0, 0",
            "pop {r4, r5, lr}",
            "bx lr",
            "mvns ip, r4, asr 21",
            "movne r1, r3",
            "movne r0, r2",
            "mvnseq ip, r5, asr 21",
            "movne r3, r1",
            "movne r2, r0",
            "orrs r4, r0, r1, lsl 12",
            "orrseq r5, r2, r3, lsl 12",
            "teqeq r1, r3",
            "orrne r1, r1, 0x80000",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "fcn.000bf58c": {
        "function_address": "0x000bf58c",
        "instructions": [
            "teq r4, 0",
            "bne 0xbf56c",
            "and r6, r1, 0x80000000",
            "lsls r0, r0, 1",
            "adc r1, r1, r1",
            "tst r1, 0x100000",
            "subeq r4, r4, 1",
            "beq 0xbf54c",
            "orr r1, r1, r6",
            "teq r5, 0",
            "bxne lr",
            "and r6, r3, 0x80000000",
            "lsls r2, r2, 1",
            "adc r3, r3, r3",
            "tst r3, 0x100000",
            "subeq r5, r5, 1",
            "beq 0xbf570",
            "orr r3, r3, r6",
            "bx lr",
            "teq r4, ip",
            "and r5, ip, r3, lsr 20",
            "teqne r5, ip",
            "beq 0xbf5bc",
            "orrs r6, r0, r1, lsl 1",
            "orrsne r6, r2, r3, lsl 1",
            "bne 0xbf540",
            "eor r1, r1, r3",
            "and r1, r1, 0x80000000",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "orrs r6, r0, r1, lsl 1",
            "moveq r0, r2",
            "moveq r1, r3",
            "orrsne r6, r2, r3, lsl 1",
            "beq 0xbf614",
            "teq r4, ip",
            "bne 0xbf5e0",
            "orrs r6, r0, r1, lsl 12",
            "bne 0xbf614",
            "teq r5, ip",
            "bne 0xbf5f8",
            "orrs r6, r2, r3, lsl 12",
            "movne r0, r2",
            "movne r1, r3",
            "bne 0xbf614",
            "eor r1, r1, r3",
            "orr r1, r1, 0x7f000000",
            "orr r1, r1, 0xf80000",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer.GetBits_unsigned_int__unsigned_int__const": {
        "function_address": "0x000a6628",
        "instructions": [
            "ldr ip, [0x000a66ac]",
            "cmp r2, 0x20",
            "push {r4, r5, r6, r7, r8, lr}",
            "add ip, pc, ip",
            "mov r6, r2",
            "mov r7, r0",
            "mov r8, r1",
            "bhi 0xa6684",
            "cmp r2, 0",
            "moveq r5, r2",
            "beq 0xa6678",
            "mov r4, 0",
            "mov r5, r4",
            "add r1, r4, r8",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "orr r5, r5, r0, lsl r4",
            "add r4, r4, 1",
            "cmp r6, r4",
            "bhi 0xa665c",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a66b0]",
            "ldr r1, [0x000a66b4]",
            "add r3, ip, r3",
            "ldr r0, [0x000a66b8]",
            "add r3, r3, 0x510",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a66bc]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::ClientKeyExchange::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008f070",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r2",
            "mov r5, r1",
            "mov r1, r2",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL17ClientKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x8f0a0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r6, 8]",
            "mov r2, r5",
            "mov r1, r4",
            "mov r0, r3",
            "ldr r3, [r3]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager10verifyPeerEv",
            "cmp r0, 0",
            "bne 0x8f0f0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useServerEv",
            "mov r3, 2",
            "str r3, [r0]",
            "b 0x8f098",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes14use_certVerifyEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL16build_certHashesERNS_3SSLERNS_6HashesE",
            "b 0x8f0d8"
        ]
    },
    "rsym._ZN5yaSSL17ClientKeyExchange9createKeyERNS_3SSLE": {
        "function_address": "0x0003f3c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7cc]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager10verifyPeerEv": {
        "function_address": "0x0003e554",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x16c]!"
        ]
    },
    "rsym._ZN5yaSSL6States9useServerEv": {
        "function_address": "0x0003df18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x594]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL9useHashesEv": {
        "function_address": "0x0003cfac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfdc]!"
        ]
    },
    "rsym._ZN5yaSSL9sslHashes14use_certVerifyEv": {
        "function_address": "0x00040450",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcc4]!"
        ]
    },
    "rsym._ZN5yaSSL16build_certHashesERNS_3SSLERNS_6HashesE": {
        "function_address": "0x000403fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcfc]!"
        ]
    },
    "fcn.000b3bfc": {
        "function_address": "0x000b3bfc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r0",
            "mov r6, r1",
            "add r4, r5, 0x10",
            "mov r1, 8",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add sl, r6, 0x10",
            "mov ip, r4",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "ldm sl, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, sb",
            "ldr r8, [0x000b3c88]",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3c8c]",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_free_result": {
        "function_address": "0x00075958",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x759c0",
            "ldr r5, [r4, 0x18]",
            "cmp r5, 0",
            "beq 0x75990",
            "ldr r2, [r5, 0x3b8]",
            "add r3, r4, 0x51",
            "cmp r2, r3",
            "moveq r3, 0",
            "streq r3, [r5, 0x3b8]",
            "ldr r3, [r5, 0x380]",
            "cmp r3, 2",
            "beq 0x759c8",
            "ldr r0, [r4, 0xc]",
            "bl rsym.free_rows",
            "ldr r3, [r4, 8]",
            "cmp r3, 0",
            "addne r0, r4, 0x28",
            "movne r1, 0",
            "blne rsym.free_root",
            "ldr r0, [r4, 0x20]",
            "cmp r0, 0",
            "blne rsym.my_no_flags_free",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r5, 0x3b0]",
            "mov r0, r5",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x3b8]",
            "mov r2, 0",
            "cmp r3, 0",
            "str r2, [r5, 0x380]",
            "movne r2, 1",
            "strbne r2, [r3]",
            "b 0x75990"
        ]
    },
    "fcn.0008b8d8": {
        "function_address": "0x0008b8d8",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0008b950]",
            "ldr ip, [0x0008b954]",
            "sub sp, sp, 8",
            "add r3, pc, r3",
            "strh r1, [sp, 4]",
            "ldr ip, [r3, ip]",
            "ldrb r1, [sp, 4]",
            "ldrb lr, [sp, 5]",
            "cmp r2, 0",
            "movne r2, 0xdd",
            "moveq r2, 0",
            "add ip, ip, 8",
            "mov r4, r0",
            "str ip, [r0]",
            "strb lr, [r0, 9]",
            "strb r1, [r0, 8]",
            "str r2, [r0, 0x50]",
            "mov r1, 0",
            "mov r2, 0x20",
            "add r0, r0, 0xa",
            "bl sym.imp.memset",
            "add r0, r4, 0x2b",
            "mov r1, 0",
            "mov r2, 0x20",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::EncryptedPreMasterSecret::read_yaSSL::SSL__yaSSL::input_buffer_": {
        "function_address": "0x0008e714",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x48",
            "mov r0, r1",
            "mov r4, r1",
            "mov r7, r2",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv",
            "add r6, sp, 0x3c",
            "mov r2, r0",
            "mov r1, r8",
            "mov r3, 0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3RSA16get_cipherLengthEv",
            "strh r0, [sp, 0x46]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "bne 0x8e82c",
            "mov r0, r5",
            "ldrh r1, [sp, 0x46]",
            "bl rsym._ZN5yaSSL24EncryptedPreMasterSecret5allocEi",
            "ldmib r5, {r1, r2}",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r4",
            "ldr r7, [r5, 8]",
            "ldr r8, [r5, 4]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "add r5, sp, 0xc",
            "mov r2, r8",
            "mov r3, r7",
            "mov r1, r5",
            "str r0, [sp]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSA7decryptEPhPKhjRKNS_10RandomPoolE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r2, [sp, 0xc]",
            "ldrb r3, [r0, 0x130]",
            "ldrb r1, [r0, 0x131]",
            "cmp r2, r3",
            "beq 0x8e81c",
            "mov r0, r4",
            "mov r1, 0x78",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r1, r5",
            "mov r2, 0x30",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL16makeMasterSecretEv",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldrb r3, [sp, 0xd]",
            "cmp r3, r1",
            "bne 0x8e7e4",
            "b 0x8e7f0",
            "add r8, sp, 0x44",
            "mov r1, r8",
            "mov r0, r7",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r8",
            "add r1, sp, 0x46",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "b 0x8e77c"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager14get_privateKeyEv": {
        "function_address": "0x00040768",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xab4]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv": {
        "function_address": "0x0003ee90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb44]!"
        ]
    },
    "rsym._ZN5yaSSL3RSA7decryptEPhPKhjRKNS_10RandomPoolE": {
        "function_address": "0x0003f280",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8a4]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL16makeMasterSecretEv": {
        "function_address": "0x0003f37c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7fc]!"
        ]
    },
    "rsym._ZN5yaSSL5ato16EPKhRt": {
        "function_address": "0x0004042c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcdc]!"
        ]
    },
    "fcn.000ad904": {
        "function_address": "0x000ad904",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000ad9bc]",
            "ldr r3, [0x000ad9c0]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x30]",
            "ldr r2, [r0, 0x2c]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r4, r0",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x20]",
            "ldr r2, [r4, 0x1c]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x10]",
            "ldr r2, [r4, 0xc]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r2, [0x000ad9c4]",
            "ldr r3, [0x000ad9c8]",
            "ldr r2, [r5, r2]",
            "ldr r1, [0x000ad9cc]",
            "ldr r0, [0x000ad9d0]",
            "add r2, r2, 8",
            "add r3, r5, r3",
            "str r2, [r4]",
            "str r2, [r4, 4]",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x208",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.yaSSL::Socket.closeSocket__": {
        "function_address": "0x00084ed8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmn r0, 1",
            "beq 0x84ef8",
            "bl sym.imp.close",
            "mvn r3, 0",
            "str r3, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_yaSSL::SSL_SESSION_.remove_yaSSL::SSL_SESSION_": {
        "function_address": "0x00087e7c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x87ed4",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x87eec",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x87edc",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE8pop_backEv",
            "mov r0, 1",
            "b 0x87ed4",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE9pop_frontEv",
            "mov r0, 1",
            "b 0x87ed4"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE7look_upES3_": {
        "function_address": "0x0003ed28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc34]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE8pop_backEv": {
        "function_address": "0x0004063c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb7c]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE9pop_frontEv": {
        "function_address": "0x0003f0b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9d4]!"
        ]
    },
    "sym.TaoCrypt::Portable::Add_unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a4d74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, lr}",
            "ldr ip, [0x000a4e38]",
            "ands r4, r3, 1",
            "sub sp, sp, 0xc",
            "add ip, pc, ip",
            "bne 0xa4e14",
            "cmp r3, 0",
            "moveq r0, r3",
            "beq 0xa4e08",
            "mov ip, r4",
            "b 0xa4da4",
            "mov r4, r5",
            "ldr r5, [r1]",
            "ldr r7, [r2]",
            "mov r6, 0",
            "adds r8, r5, r7",
            "adc sb, r6, 0",
            "adds r5, r8, r4",
            "adc r6, sb, 0",
            "stm sp, {r5, r6}",
            "str r5, [r0]",
            "ldr r4, [r1, 4]",
            "ldr r8, [r2, 4]",
            "mov r5, 0",
            "adds r6, r4, r8",
            "ldr r8, [sp, 4]",
            "adc r7, r5, 0",
            "add ip, ip, 2",
            "adds r4, r6, r8",
            "adc r5, r7, 0",
            "cmp r3, ip",
            "str r4, [r0, 4]",
            "add r1, r1, 8",
            "add r0, r0, 8",
            "add r2, r2, 8",
            "bhi 0xa4da0",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, lr}",
            "bx lr",
            "ldr r3, [0x000a4e3c]",
            "ldr r1, [0x000a4e40]",
            "ldr r0, [0x000a4e44]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x18c",
            "ldr r2, [0x000a4e48]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007efb4": {
        "function_address": "0x0007efb4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007f058]",
            "ldr r3, [0x0007f05c]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x114",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007f060]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9RIPEMD1604InitEv": {
        "function_address": "0x0003d7b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa84]!"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv": {
        "function_address": "0x0003df6c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x55c]!"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6SetKeyEPKhj": {
        "function_address": "0x0003f8f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x454]!"
        ]
    },
    "sym.yaSSL::sendFinished_yaSSL::SSL__yaSSL::ConnectionEnd__yaSSL::BufferOutput_": {
        "function_address": "0x0008395c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xa4",
            "mov fp, r1",
            "str r2, [sp, 0x14]",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r6, [0x00083eec]",
            "cmp r0, 0",
            "add r6, pc, r6",
            "beq 0x83990",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add sl, sp, 0x2c",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL8FinishedC1Ev",
            "cmp fp, 1",
            "beq 0x83e58",
            "ldr r1, [0x00083ef0]",
            "add r2, r6, r1",
            "str r1, [sp, 0x24]",
            "add r2, r2, 0xd8",
            "mov r0, r4",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_digestEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sp, 0x1c]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr r1, [sp, 0x1c]",
            "cmp r0, 0",
            "movne r3, 0xc",
            "moveq r3, 0x24",
            "add r2, r1, 9",
            "add r2, r2, r3",
            "mov r0, r4",
            "str r2, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sp, 0x18]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "movne r8, 0",
            "beq 0x83e94",
            "add r2, sp, 0x98",
            "str r2, [sp, 0x20]",
            "ldr r3, [sp, 0x20]",
            "mov r2, 0",
            "mov r1, 3",
            "add r0, r3, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00083ef4]",
            "mov r0, sl",
            "ldr r3, [r6, r3]",
            "add sb, sp, 0x8c",
            "add r3, r3, 8",
            "str r3, [sp, 0x8c]",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0x2c]",
            "mov r7, r0",
            "mov r0, sl",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, r7",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r2, [sp, 0x10]",
            "ldrb r3, [r0, 0x12e]",
            "ldrb r1, [r0, 0x12f]",
            "add r7, sp, 0x7c",
            "sub ip, r2, 5",
            "mov r0, r7",
            "mov r2, 0x16",
            "str r2, [sp, 0x98]",
            "strb r3, [sp, 0x9c]",
            "strb r1, [sp, 0x9d]",
            "strh ip, [sp, 0x9e]",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "bne 0x83df4",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "ldr r1, [sp, 0x10]",
            "str r0, [sp, 0x18]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "ldr r1, [sp, 0x20]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "str r0, [sp, 0x10]",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r1, r0",
            "mov r0, r7",
            "str r1, [sp, 0xc]",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "ldr r1, [sp, 0xc]",
            "mov r2, r0",
            "ldr r0, [sp, 0x10]",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r1, sb",
            "ldr r0, [sp, 0x10]",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, sl",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_8FinishedE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl fcn.00081648",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "subs sb, r0, 0",
            "bne 0x83d0c",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r5",
            "str r2, [sp, 0xc]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r2, [sp, 0xc]",
            "add sl, sp, 0x58",
            "sub r3, r0, 5",
            "mov ip, 0x16",
            "add r2, r2, 5",
            "mov r0, r4",
            "mov r1, sl",
            "str ip, [sp]",
            "str sb, [sp, 4]",
            "bl rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "mov r1, sl",
            "ldr r2, [sp, 0x1c]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "beq 0x83d84",
            "add r8, sp, 0x6c",
            "ldrh r1, [sp, 0x9e]",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "ldr r3, [r0]",
            "mov sl, r0",
            "ldr ip, [r3]",
            "mov r0, r8",
            "str ip, [sp, 8]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r1, r0",
            "mov r0, r5",
            "str r1, [sp, 0xc]",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr ip, [sp, 8]",
            "sub r3, r0, 5",
            "add r2, sb, 5",
            "mov r0, sl",
            "ldr r1, [sp, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r1, 5",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL12input_buffer12get_capacityEv",
            "mov r1, sl",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "ldr r3, [0x00083ef8]",
            "mov r0, r4",
            "ldr r3, [r6, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x8c]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "beq 0x83dac",
            "cmp fp, 0",
            "beq 0x83e6c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection11CleanMasterEv",
            "ldr r1, [sp, 0x14]",
            "cmp r1, 0",
            "bne 0x83d5c",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "ldr r5, [sp, 0x14]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "b 0x83984",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp, 0x18]",
            "mvn r3, 4",
            "rsb r3, r1, r3",
            "add sl, sp, 0x58",
            "add r2, r1, 5",
            "mov ip, 0x16",
            "add r3, r3, r0",
            "str ip, [sp]",
            "add r2, sb, r2",
            "mov ip, 0",
            "mov r0, r4",
            "mov r1, sl",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "b 0x83bd4",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "b 0x83d00",
            "and sb, r8, 0xff",
            "mov sl, 0",
            "mov r0, r5",
            "ldr r1, [0x00083efc]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "add sl, sl, 1",
            "cmp r8, sl",
            "strb sb, [r0]",
            "bhs 0x83d8c",
            "b 0x83bfc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "cmp r0, 0",
            "beq 0x83edc",
            "cmp fp, 1",
            "bne 0x83cd4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes10use_verifyEv",
            "ldr r3, [sp, 0x24]",
            "mov r1, r0",
            "add r2, r6, r3",
            "add r2, r2, 0xd8",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh",
            "b 0x83cd4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "bne 0x83b08",
            "ldr r1, [sp, 0x18]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_buffer8allocateEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r3, r0",
            "mov r0, r7",
            "str r3, [sp, 0xc]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "ldr r3, [sp, 0xc]",
            "mov r1, r0",
            "ldr r2, [sp, 0x18]",
            "mov r0, r3",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r7",
            "ldr r1, [sp, 0x18]",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "b 0x83b08",
            "ldr r2, [0x00083ef0]",
            "str r2, [sp, 0x24]",
            "add r2, r6, r2",
            "add r2, r2, 0xb4",
            "b 0x839b4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes10use_verifyEv",
            "ldr r3, [sp, 0x24]",
            "mov r1, r0",
            "add r2, r6, r3",
            "add r2, r2, 0xb4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh",
            "b 0x83cd4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "ldrne r2, [sp, 0x10]",
            "ldrne r3, [sp, 0x18]",
            "addne r2, r2, r3",
            "strne r2, [sp, 0x10]",
            "ldr r1, [sp, 0x10]",
            "sub r0, r1, 4",
            "ldr r1, [sp, 0x18]",
            "bl fcn.000bee1c",
            "ldr r2, [sp, 0x18]",
            "rsb r8, r1, r2",
            "ldr r1, [sp, 0x10]",
            "add r3, r1, 1",
            "add r3, r8, r3",
            "str r3, [sp, 0x10]",
            "b 0x83a54",
            "bl rsym._ZN5yaSSL11GetSessionsEv",
            "mov r1, r4",
            "bl rsym._ZN5yaSSL8Sessions3addERKNS_3SSLE",
            "b 0x83dc4"
        ]
    },
    "rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh": {
        "function_address": "0x000402dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdbc]!"
        ]
    },
    "rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_8FinishedE": {
        "function_address": "0x0003db94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7ec]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL11useSecurityEv": {
        "function_address": "0x000407d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa6c]!"
        ]
    },
    "rsym._ZN5yaSSL8Security14use_connectionEv": {
        "function_address": "0x0003ce44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xcc]!"
        ]
    },
    "rsym._ZN5yaSSL9sslHashes10use_verifyEv": {
        "function_address": "0x0003e95c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xebc]!"
        ]
    },
    "rsym._ZN5yaSSL8Sessions3addERKNS_3SSLE": {
        "function_address": "0x0003e260",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x364]!"
        ]
    },
    "sym.yaSSL_flush_sessions": {
        "function_address": "0x00085e80",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "cmp r0, 0",
            "bne 0x85e98",
            "bl rsym._ZN5yaSSL11GetSessionsEv",
            "bl rsym._ZN5yaSSL8Sessions5FlushEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym._my_strndup": {
        "function_address": "0x0004bc40",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "mov r1, r2",
            "add r0, r4, 1",
            "mov r2, r3",
            "ldr r3, [sp, 0x10]",
            "bl rsym._mymalloc",
            "subs r6, r0, 0",
            "beq 0x4bc7c",
            "mov r1, r5",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "strb r3, [r6, r4]",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._mymalloc": {
        "function_address": "0x0003d4b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc84]!"
        ]
    },
    "sym.operator_delete_void__yaSSL::new_t_": {
        "function_address": "0x00093644",
        "instructions": [
            "cmp r0, 0",
            "push {r4, lr}",
            "blne sym.imp.free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_TaoCrypt::Signer_::iterator__yaSSL.del_ptr_zero__mySTL::list_TaoCrypt::Signer_::iterator__mySTL::list_TaoCrypt::Signer_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089f08",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89f38",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteIN8TaoCrypt6SignerEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89f20",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteIN8TaoCrypt6SignerEEEvPT_": {
        "function_address": "0x0003e200",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3a4]!"
        ]
    },
    "sym.yaSSL::PemToDer__IO_FILE__yaSSL::CertType__yaSSL::EncryptedInfo_": {
        "function_address": "0x0007e070",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr sl, [0x0007e408]",
            "cmp r1, 0",
            "add sl, pc, sl",
            "sub sp, sp, 0x130",
            "mov r5, r0",
            "mov r7, r2",
            "bne 0x7e1c4",
            "ldr r1, [0x0007e40c]",
            "add r8, sp, 0xa0",
            "add r1, sl, r1",
            "mov r2, 0x50",
            "mov r0, r8",
            "bl sym.imp.strncpy",
            "ldr r1, [0x0007e410]",
            "add r6, sp, 0x50",
            "add r1, sl, r1",
            "mov r0, r6",
            "mov r2, 0x50",
            "bl sym.imp.strncpy",
            "mov r4, sp",
            "mov r1, 0x50",
            "mov r2, r5",
            "mov r0, r4",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "mov r0, r8",
            "beq 0x7e288",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r8",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x7e0c4",
            "mov r0, r5",
            "bl sym.imp.ftell",
            "mov r8, r0",
            "mov r0, r4",
            "mov r1, 0x50",
            "mov r2, r5",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x7e15c",
            "ldr r2, [0x0007e414]",
            "add r3, sp, 0x124",
            "add r2, sl, r2",
            "ldm r2, {r0, r1, r2}",
            "stm r3!, {r0, r1}",
            "add sb, sp, 0x124",
            "strh r2, [r3]",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, sb",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x7e1f8",
            "mov r7, 0",
            "b 0x7e18c",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r6",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x7e278",
            "mov r0, r5",
            "bl sym.imp.ftell",
            "mov r7, r0",
            "mov r1, 0x50",
            "mov r2, r5",
            "mov r0, r4",
            "bl sym.imp.fgets",
            "subs r3, r0, 0",
            "mov r0, r6",
            "bne 0x7e164",
            "cmn r8, 1",
            "bne 0x7e290",
            "mov r5, 0",
            "mov r0, r5",
            "add sp, sp, 0x130",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r1, [0x0007e418]",
            "add r8, sp, 0xa0",
            "add r1, sl, r1",
            "mov r0, r8",
            "mov r2, 0x50",
            "bl sym.imp.strncpy",
            "ldr r1, [0x0007e41c]",
            "add r6, sp, 0x50",
            "add r1, sl, r1",
            "mov r0, r6",
            "mov r2, 0x50",
            "bl sym.imp.strncpy",
            "b 0x7e0c0",
            "mov r0, r4",
            "mov r1, 0x50",
            "mov r2, r5",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x7e15c",
            "ldr r1, [0x0007e420]",
            "mov r0, r4",
            "add r1, sl, r1",
            "bl sym.imp.strstr",
            "mov r1, 0x2c",
            "mov sb, r0",
            "mov r0, r4",
            "bl sym.imp.strchr",
            "cmp sb, 0",
            "mov r8, r0",
            "beq 0x7e2ec",
            "cmp r7, 0",
            "beq 0x7e1b0",
            "cmp sb, 0",
            "cmpne r8, 0",
            "beq 0x7e258",
            "cmp sb, r8",
            "blo 0x7e304",
            "mov r1, 0x50",
            "mov r2, r5",
            "mov r0, r4",
            "bl sym.imp.fgets",
            "mov r0, r5",
            "bl sym.imp.ftell",
            "mov r8, r0",
            "b 0x7e15c",
            "cmn r8, 1",
            "mov r3, 1",
            "beq 0x7e1b0",
            "b 0x7e290",
            "mvn r8, 0",
            "b 0x7e108",
            "cmp r3, 0",
            "beq 0x7e1b0",
            "rsb r6, r8, r7",
            "add r4, sp, 0x114",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r1, r8",
            "mov r2, 0",
            "mov r0, r5",
            "bl sym.imp.fseek",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r3, r5",
            "mov r1, r6",
            "mov r2, 1",
            "bl sym.imp.fread",
            "cmp r0, 1",
            "movne r5, 0",
            "beq 0x7e364",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "b 0x7e1b4",
            "ldr r1, [0x0007e424]",
            "mov r0, r4",
            "add r1, sl, r1",
            "bl sym.imp.strstr",
            "mov sb, r0",
            "b 0x7e23c",
            "rsb sl, sb, r8",
            "mov r1, sb",
            "mov r2, sl",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "add sb, r8, 1",
            "mov r3, 0",
            "strb r3, [r7, sl]",
            "mov r1, sb",
            "mov r2, 0x20",
            "add r0, r7, 0x50",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "mov r1, 0xd",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0x7e3f8",
            "cmp r0, 0",
            "cmpne r0, r8",
            "rsbhi r0, sb, r0",
            "movhi r3, 1",
            "strbhi r3, [r7, 0x74]",
            "strhi r0, [r7, 0x70]",
            "b 0x7e258",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "add r7, sp, 0xf0",
            "mov r2, r6",
            "mov r1, r0",
            "add r6, sp, 0x104",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt6SourceC1EPKhj",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt5BlockIhNS_20AllocatorWithCleanupIhEEEC1Ej",
            "mov r0, r6",
            "str r7, [sp, 0x110]",
            "bl rsym._ZN8TaoCrypt13Base64Decoder6DecodeEv",
            "ldr r8, [sp, 0xf0]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL4x509C1Ej",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4x50910use_bufferEv",
            "mov r2, r8",
            "ldr r1, [sp, 0xf4]",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0x108]",
            "ldr r2, [sp, 0x104]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "add r0, r7, 8",
            "ldr r1, [sp, 0xf4]",
            "ldr r2, [sp, 0xf0]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "b 0x7e2e0",
            "mov r0, sp",
            "mov r1, 0xa",
            "bl sym.imp.strchr",
            "b 0x7e348"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x0003d630",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb84]!"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x000403c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd24]!"
        ]
    },
    "sym.imp.ftell": {
        "function_address": "0x0003eab8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdd4]!"
        ]
    },
    "sym.imp.fseek": {
        "function_address": "0x0003e254",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x36c]!"
        ]
    },
    "sym.imp.fread": {
        "function_address": "0x00040330",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd84]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SourceC1EPKhj": {
        "function_address": "0x0003f7c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x524]!"
        ]
    },
    "rsym._ZN8TaoCrypt5BlockIhNS_20AllocatorWithCleanupIhEEEC1Ej": {
        "function_address": "0x0003f5d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x66c]!"
        ]
    },
    "rsym._ZN8TaoCrypt13Base64Decoder6DecodeEv": {
        "function_address": "0x00040174",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xeac]!"
        ]
    },
    "rsym._ZN5yaSSL4x509C1Ej": {
        "function_address": "0x0003f250",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8c4]!"
        ]
    },
    "rsym._ZN5yaSSL4x50910use_bufferEv": {
        "function_address": "0x0003f304",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x84c]!"
        ]
    },
    "rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj": {
        "function_address": "0x0003d0f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf04]!"
        ]
    },
    "fcn.000a99dc": {
        "function_address": "0x000a99dc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x000a9b44]",
            "ldr r2, [0x000a9b48]",
            "add r5, pc, r5",
            "ldr r3, [0x000a9b4c]",
            "ldr r2, [r5, r2]",
            "ldr r3, [r5, r3]",
            "add r2, r2, 8",
            "mov r6, r0",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r2, [r6], 0xc",
            "str r3, [r0, 4]",
            "sub sp, sp, 8",
            "mov r7, r1",
            "str r0, [r4, 8]",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [r7]",
            "mov r1, 0",
            "add r0, r4, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r3, [0x000a9b50]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "mov r1, 0",
            "add r3, r3, 8",
            "str r3, [r0], 0x3c",
            "ldr r2, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldr r0, [r4, 0xc]",
            "add r0, r0, r0, lsl 2",
            "cmn r0, 0xc0000001",
            "str r0, [r4, 0x4c]",
            "bhi 0xa9af4",
            "cmp r0, 0",
            "beq 0xa9a84",
            "mov r1, 0",
            "lsl r0, r0, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r7, [r4, 0x4c]",
            "mov r8, 0",
            "mov r1, r0",
            "str r0, [r4, 0x50]",
            "mov r3, r7",
            "mov r2, r7",
            "add r0, r4, 0x54",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r7, 2",
            "mov r1, r8",
            "str r0, [r4, 0x50]",
            "str r7, [r4, 0x4c]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, r8",
            "beq 0xa9b1c",
            "ldr r0, [r4, 0x40]",
            "ldr r1, [r4, 0x50]",
            "ldr r2, [r4, 0x10]",
            "ldr r3, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt25RecursiveInverseModPower2EPjS0_PKjj",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a9b54]",
            "ldr r1, [0x000a9b58]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9b5c]",
            "add r3, r3, 0xc80",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a9b54]",
            "ldr r1, [0x000a9b60]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9b64]",
            "add r3, r3, 0xd40",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a9b68]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt25RecursiveInverseModPower2EPjS0_PKjj": {
        "function_address": "0x0004078c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa9c]!"
        ]
    },
    "sym.TaoCrypt::Integer::Compare_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a4b1c",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "push {r4, lr}",
            "cmp r3, 1",
            "beq 0xa4b44",
            "ldr r3, [r1, 0xc]",
            "cmp r3, 1",
            "moveq r0, r3",
            "beq 0xa4b5c",
            "pop {r4, lr}",
            "b rsym._ZNK8TaoCrypt7Integer15PositiveCompareERKS0_",
            "ldr r3, [r1, 0xc]",
            "cmp r3, 1",
            "mvnne r0, 0",
            "bne 0xa4b5c",
            "bl rsym._ZNK8TaoCrypt7Integer15PositiveCompareERKS0_",
            "rsb r0, r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer15PositiveCompareERKS0_": {
        "function_address": "0x0003f8bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x47c]!"
        ]
    },
    "fcn.00092734": {
        "function_address": "0x00092734",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r0",
            "ldr r0, [r5], 0x10",
            "mov r1, 0",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5MutexD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_": {
        "function_address": "0x0003fa84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x34c]!"
        ]
    },
    "rsym._ZN5yaSSL10RandomPoolD1Ev": {
        "function_address": "0x0003d078",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf54]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEED1Ev": {
        "function_address": "0x0003f298",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x894]!"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetDate_TaoCrypt::CertDecoder::DateType_": {
        "function_address": "0x0009b544",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "ldr r0, [r0, 4]",
            "ldr r4, [0x0009ba18]",
            "ldr r5, [r0, 0x10]",
            "add r4, pc, r4",
            "cmp r5, 0",
            "sub sp, sp, 0x5c",
            "mov r7, r1",
            "beq 0x9b578",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9b9ac",
            "ldr r2, [r0, 4]",
            "ldrb r8, [r2, r3]",
            "sub r3, r8, 0x17",
            "cmp r3, 1",
            "ldrhi r3, [0x0009ba1c]",
            "strhi r3, [r0, 0x10]",
            "bhi 0x9b56c",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "sub r3, r0, 0xd",
            "cmp r3, 3",
            "mov sb, r0",
            "ldrhi r3, [r6, 4]",
            "ldrhi r2, [0x0009ba20]",
            "strhi r2, [r3, 0x10]",
            "bhi 0x9b56c",
            "ldr r3, [r6, 4]",
            "ldr r2, [r3, 0xc]",
            "ldr r1, [r3]",
            "cmp r2, r1",
            "bhs 0x9b9d0",
            "ldr r1, [r3, 4]",
            "add sl, sp, 0x44",
            "add r1, r1, r2",
            "mov r3, 0x10",
            "mov r2, sb",
            "mov r0, sl",
            "bl sym.imp.__memcpy_chk",
            "ldr r2, [r6, 4]",
            "add r3, sp, 0x20",
            "ldr r1, [r2, 0xc]",
            "cmp r8, 0x17",
            "add r1, r1, sb",
            "str r1, [r2, 0xc]",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3], 4",
            "str r5, [r3]",
            "str r5, [sp, 0x18]",
            "str r5, [sp, 0x1c]",
            "beq 0x9b8b0",
            "ldrb r3, [sp, 0x44]",
            "ldrb r2, [sp, 0x45]",
            "sub r3, r3, 0x30",
            "sub r2, r2, 0x30",
            "add r3, r3, r3, lsl 2",
            "add r2, r2, r2, lsl 2",
            "add r3, r3, r3, lsl 2",
            "add r2, r2, r2, lsl 2",
            "add r3, r3, r3, lsl 2",
            "lsl r2, r2, 2",
            "add fp, r2, r3, lsl 3",
            "ldr r2, [sp, 0x2c]",
            "add r3, sl, 0xd",
            "add fp, fp, r2",
            "add r2, sl, 0xe",
            "add r1, sl, 0xc",
            "stmib sp, {r2, r3}",
            "add r2, sl, 0xb",
            "add r3, sl, 0xa",
            "str r1, [sp, 0xc]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x14]",
            "str fp, [sp, 0x2c]",
            "add r1, sl, 9",
            "add r0, sl, 8",
            "add ip, sl, 7",
            "add lr, sl, 6",
            "add r5, sl, 5",
            "add r8, sl, 4",
            "add r2, sl, 3",
            "add r3, sl, 2",
            "ldrb r3, [r3]",
            "ldrb r2, [r2]",
            "sub r3, r3, 0x30",
            "add r3, r3, r3, lsl 2",
            "add r3, fp, r3, lsl 1",
            "add r3, r3, r2",
            "sub r3, r3, 0x790",
            "sub r3, r3, 0xc",
            "str r3, [sp, 0x2c]",
            "ldrb r3, [r8]",
            "ldrb r2, [r5]",
            "sub r3, r3, 0x30",
            "ldr r5, [sp, 0x28]",
            "add r3, r3, r3, lsl 2",
            "add r3, r5, r3, lsl 1",
            "add r3, r3, r2",
            "sub r3, r3, 0x31",
            "str r3, [sp, 0x28]",
            "ldrb r2, [lr]",
            "ldrb r3, [ip]",
            "sub ip, r2, 0x30",
            "ldr r2, [sp, 0x24]",
            "add ip, ip, ip, lsl 2",
            "add r2, r2, ip, lsl 1",
            "sub r3, r3, 0x30",
            "add r3, r2, r3",
            "str r3, [sp, 0x24]",
            "ldrb r3, [r0]",
            "ldrb r2, [r1]",
            "sub r3, r3, 0x30",
            "ldr r1, [sp, 0x20]",
            "add r3, r3, r3, lsl 2",
            "add r3, r1, r3, lsl 1",
            "sub r2, r2, 0x30",
            "add r3, r3, r2",
            "ldr r1, [sp, 0x14]",
            "str r3, [sp, 0x20]",
            "ldrb r3, [r1]",
            "ldr r1, [sp, 0x10]",
            "sub r3, r3, 0x30",
            "ldrb r2, [r1]",
            "ldr r1, [sp, 0x1c]",
            "add r3, r3, r3, lsl 2",
            "add r3, r1, r3, lsl 1",
            "sub r2, r2, 0x30",
            "add r3, r3, r2",
            "ldr r2, [sp, 0xc]",
            "str r3, [sp, 0x1c]",
            "ldrb r3, [r2]",
            "ldr r1, [sp, 8]",
            "sub r3, r3, 0x30",
            "ldrb r2, [r1]",
            "ldr r1, [sp, 0x18]",
            "add r3, r3, r3, lsl 2",
            "sub r2, r2, 0x30",
            "add r3, r1, r3, lsl 1",
            "add r3, r3, r2",
            "ldr r2, [sp, 4]",
            "str r3, [sp, 0x18]",
            "ldrb r3, [r2]",
            "cmp r3, 0x5a",
            "bne 0x9b9f4",
            "mov r0, 0",
            "bl sym.imp.time",
            "add r3, sp, 0x58",
            "str r0, [r3, -4]!",
            "mov r0, r3",
            "bl sym.imp.gmtime",
            "cmp r7, 0",
            "bne 0x9b84c",
            "ldr r2, [r0, 0x14]",
            "ldr r3, [sp, 0x2c]",
            "cmp r2, r3",
            "bgt 0x9b800",
            "beq 0x9b95c",
            "ldrb r3, [r6, 0x470]",
            "cmp r3, 0",
            "bne 0x9b910",
            "cmp r7, 0",
            "bne 0x9b82c",
            "add r0, r6, 0x450",
            "mov r1, sl",
            "mov r2, sb",
            "bl sym.imp.memcpy",
            "add r6, r6, sb",
            "mov r3, 0",
            "strb r3, [r6, 0x450]",
            "b 0x9b56c",
            "ldr r3, [r6, 4]",
            "ldr r2, [0x0009ba24]",
            "str r2, [r3, 0x10]",
            "add r0, r6, 0x460",
            "mov r1, sl",
            "mov r2, sb",
            "bl sym.imp.memcpy",
            "add r6, r6, sb",
            "mov r3, 0",
            "strb r3, [r6, 0x460]",
            "b 0x9b56c",
            "ldr r2, [r0, 0x14]",
            "ldr r3, [sp, 0x2c]",
            "cmp r2, r3",
            "bgt 0x9b7ec",
            "bne 0x9b82c",
            "ldr r2, [r0, 0x10]",
            "ldr r3, [sp, 0x28]",
            "cmp r2, r3",
            "bgt 0x9b7ec",
            "bne 0x9b82c",
            "ldr r2, [r0, 0xc]",
            "ldr r3, [sp, 0x24]",
            "cmp r2, r3",
            "bgt 0x9b7ec",
            "bne 0x9b82c",
            "ldr r2, [r0, 8]",
            "ldr r3, [sp, 0x20]",
            "cmp r2, r3",
            "bgt 0x9b7ec",
            "bne 0x9b82c",
            "ldr r2, [r0, 4]",
            "ldr r3, [sp, 0x1c]",
            "cmp r2, r3",
            "ble 0x9b82c",
            "b 0x9b7ec",
            "ldrb r3, [sp, 0x44]",
            "sub r3, r3, 0x30",
            "cmp r3, 4",
            "bls 0x9b928",
            "add r1, sl, 0xc",
            "add r2, sl, 0xb",
            "ldr fp, [0x0009ba28]",
            "stmib sp, {r1, r2}",
            "add r3, sl, 0xa",
            "add r1, sl, 9",
            "add r2, sl, 8",
            "str fp, [sp, 0x2c]",
            "str r3, [sp, 0xc]",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "add r1, sl, 7",
            "add r0, sl, 6",
            "add ip, sl, 5",
            "add lr, sl, 4",
            "add r5, sl, 3",
            "add r8, sl, 2",
            "add r2, sl, 1",
            "mov r3, sl",
            "b 0x9b6c0",
            "cmp r7, 0",
            "bne 0x9b820",
            "ldr r3, [r6, 4]",
            "ldr r2, [0x0009ba2c]",
            "str r2, [r3, 0x10]",
            "b 0x9b800",
            "add r3, sl, 0xc",
            "add r1, sl, 0xb",
            "mov fp, 0x7d0",
            "str r3, [sp, 4]",
            "str r1, [sp, 8]",
            "add r2, sl, 0xa",
            "add r3, sl, 9",
            "add r1, sl, 8",
            "str fp, [sp, 0x2c]",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "b 0x9b8ec",
            "ldr r2, [r0, 0x10]",
            "ldr r3, [sp, 0x28]",
            "cmp r2, r3",
            "bgt 0x9b800",
            "bne 0x9b7ec",
            "ldr r2, [r0, 0xc]",
            "ldr r3, [sp, 0x24]",
            "cmp r2, r3",
            "bgt 0x9b800",
            "bne 0x9b7ec",
            "ldr r2, [r0, 8]",
            "ldr r3, [sp, 0x20]",
            "cmp r2, r3",
            "bgt 0x9b800",
            "bne 0x9b7ec",
            "ldr r2, [r0, 4]",
            "ldr r3, [sp, 0x1c]",
            "cmp r2, r3",
            "ble 0x9b7ec",
            "b 0x9b800",
            "ldr r3, [0x0009ba30]",
            "ldr r1, [0x0009ba34]",
            "ldr r0, [0x0009ba38]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009ba30]",
            "ldr r1, [0x0009ba34]",
            "ldr r0, [0x0009ba38]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009ba30]",
            "ldr r1, [0x0009ba3c]",
            "ldr r0, [0x0009ba40]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x18c",
            "mov r2, 0x71",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.imp.time": {
        "function_address": "0x0003f310",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x844]!"
        ]
    },
    "sym.imp.gmtime": {
        "function_address": "0x000403e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd0c]!"
        ]
    },
    "method.TaoCrypt::RandomNumberGenerator.GenerateByte__": {
        "function_address": "0x000b09b4",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add r1, sp, 7",
            "mov r2, 1",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "ldrb r0, [sp, 7]",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "fcn.0007e49c": {
        "function_address": "0x0007e49c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e4f8]",
            "ldr r3, [0x0007e4fc]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_SHA12HMAC_SHAImplEEEvPT_",
            "ldr r3, [0x0007e500]",
            "ldr r1, [0x0007e504]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e508]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e50c]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_8HMAC_SHA12HMAC_SHAImplEEEvPT_": {
        "function_address": "0x0003e5f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x104]!"
        ]
    },
    "fcn.0007ea38": {
        "function_address": "0x0007ea38",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007eadc]",
            "ldr r3, [0x0007eae0]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x114",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007eae4]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv": {
        "function_address": "0x000409b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x92c]!"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3SHAEE6SetKeyEPKhj": {
        "function_address": "0x0003ecf8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc54]!"
        ]
    },
    "method.TaoCrypt::Integer.SetByte_unsigned_int__unsigned_char_": {
        "function_address": "0x000aa444",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r3, r1, 4",
            "lsr r3, r3, 2",
            "ldr r6, [0x000aa570]",
            "cmp r3, 8",
            "add r6, pc, r6",
            "sub sp, sp, 8",
            "mov r7, r1",
            "mov r4, r0",
            "mov r8, r2",
            "bls 0xaa524",
            "cmp r3, 0x10",
            "movls r5, 0x10",
            "bls 0xaa494",
            "cmp r3, 0x20",
            "movls r5, 0x20",
            "bls 0xaa494",
            "cmp r3, 0x40",
            "movls r5, 0x40",
            "bhi 0xaa538",
            "ldr r2, [r4]",
            "cmp r5, r2",
            "movls r5, r2",
            "bls 0xaa4dc",
            "ldr r1, [r4, 4]",
            "mov ip, 1",
            "mov r3, r5",
            "add r0, r4, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r5",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r5, [r4]",
            "lsr r3, r7, 2",
            "cmp r3, r5",
            "bhs 0xaa54c",
            "ldr r2, [r4, 4]",
            "and r7, r7, 3",
            "ldr r0, [r2, r3, lsl 2]",
            "lsl r7, r7, 3",
            "mov r1, 0xff",
            "bic r1, r0, r1, lsl r7",
            "str r1, [r2, r3, lsl 2]",
            "ldr r0, [r4]",
            "cmp r3, r0",
            "bhs 0xaa54c",
            "orr r8, r1, r8, lsl r7",
            "str r8, [r2, r3, lsl 2]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r2, [0x000aa574]",
            "add r2, r6, r2",
            "add r3, r2, r3, lsl 2",
            "ldr r5, [r3, 0x5ec]",
            "b 0xaa494",
            "sub r0, r3, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r5, 1",
            "lsl r5, r5, r0",
            "b 0xaa494",
            "ldr r3, [0x000aa574]",
            "ldr r1, [0x000aa578]",
            "ldr r0, [0x000aa57c]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.new_VioSSLConnectorFd": {
        "function_address": "0x0007a9e4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x1c",
            "mov r6, r0",
            "mov r7, r1",
            "mov r4, r2",
            "mov r5, r3",
            "bl rsym.yaTLSv1_client_method",
            "ldr ip, [sp, 0x30]",
            "str r0, [sp, 4]",
            "str ip, [sp]",
            "mov r0, r6",
            "add ip, sp, 0x14",
            "mov r1, r7",
            "mov r2, r4",
            "mov r3, r5",
            "str ip, [sp, 8]",
            "bl fcn.0007a64c",
            "subs r6, r0, 0",
            "beq 0x7aa50",
            "cmp r5, 0",
            "cmpeq r4, 0",
            "movne r4, 0",
            "moveq r4, 1",
            "eor r1, r4, 1",
            "ldr r0, [r6]",
            "mov r2, 0",
            "bl rsym.yaSSL_CTX_set_verify",
            "mov r0, r6",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.yaTLSv1_client_method": {
        "function_address": "0x0003d54c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc1c]!"
        ]
    },
    "fcn.0007a64c": {
        "function_address": "0x0007a64c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x0007a944]",
            "ldr r5, sym.mysql_server_end",
            "add r4, pc, r4",
            "ldrb ip, [r4, r5]",
            "sub sp, sp, 0x14",
            "cmp ip, 0",
            "mov r6, r0",
            "mov r7, r1",
            "mov r8, r2",
            "mov sb, r3",
            "ldr sl, [sp, 0x38]",
            "ldr fp, [sp, 0x40]",
            "beq 0x7a800",
            "add r5, r4, r5",
            "ldrb r3, [r5, 1]",
            "cmp r3, 0",
            "beq 0x7a7f0",
            "mov r0, 4",
            "mov r1, 0",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "beq 0x7a7ac",
            "ldr r0, [sp, 0x3c]",
            "bl rsym.yaSSL_CTX_new",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [r5]",
            "beq 0x7a920",
            "cmp sl, 0",
            "beq 0x7a6dc",
            "mov r1, sl",
            "bl rsym.yaSSL_CTX_set_cipher_list",
            "subs sl, r0, 0",
            "ldrne r3, [r5]",
            "beq 0x7a8fc",
            "mov r0, r3",
            "mov r1, r8",
            "mov r2, sb",
            "bl rsym.yaSSL_CTX_load_verify_locations",
            "cmp r0, 0",
            "beq 0x7a7bc",
            "cmp r7, 0",
            "ldr r8, [r5]",
            "beq 0x7a748",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, 0xb",
            "bl rsym.yaSSL_CTX_use_certificate_file",
            "cmp r0, 0",
            "ble 0x7a8b8",
            "cmp r6, 0",
            "moveq r6, r7",
            "mov r0, r8",
            "mov r1, r6",
            "mov r2, 0xb",
            "bl rsym.yaSSL_CTX_use_PrivateKey_file",
            "cmp r0, 0",
            "ble 0x7a814",
            "mov r0, r8",
            "bl rsym.yaSSL_CTX_check_private_key",
            "cmp r0, 0",
            "beq 0x7a86c",
            "bl rsym.yaDH_new",
            "subs r6, r0, 0",
            "beq 0x7a798",
            "ldr r3, [0x0007a94c]",
            "mov r1, 0x40",
            "add r4, r4, r3",
            "mov r2, 0",
            "mov r0, r4",
            "bl rsym.yaBN_bin2bn",
            "mov r1, 1",
            "str r0, [r6]",
            "mov r2, 0",
            "add r0, r4, 0x40",
            "bl rsym.yaBN_bin2bn",
            "ldr r3, [r6]",
            "str r0, [r6, 4]",
            "cmp r3, 0",
            "beq 0x7a8a8",
            "cmp r0, 0",
            "beq 0x7a8a8",
            "ldr r0, [r5]",
            "mov r1, r6",
            "bl rsym.yaSSL_CTX_set_tmp_dh",
            "mov r0, r6",
            "bl rsym.yaDH_free",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [r5]",
            "bl rsym.yaSSL_CTX_set_default_verify_paths",
            "subs r8, r0, 0",
            "bne 0x7a6f4",
            "mov r3, 4",
            "str r3, [fp]",
            "bl fcn.0007a60c",
            "ldr r0, [r5]",
            "bl rsym.yaSSL_CTX_free",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "mov r5, r8",
            "b 0x7a7ac",
            "mov r3, 1",
            "strb r3, [r5, 1]",
            "bl rsym.yaSSL_load_error_strings",
            "b 0x7a694",
            "mov r3, 1",
            "strb r3, [r4, r5]",
            "bl rsym.yaSSL_library_init",
            "bl rsym.yaOpenSSL_add_all_algorithms",
            "b 0x7a684",
            "ldr r3, [0x0007a950]",
            "mov r0, 2",
            "ldr r7, [r4, r3]",
            "str r0, [fp]",
            "ldr r8, [r7]",
            "bl rsym.sslGetErrString",
            "ldr r2, [0x0007a954]",
            "mov r3, r0",
            "add r2, r4, r2",
            "mov r0, r8",
            "mov r1, 1",
            "str r6, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r7]",
            "bl sym.imp.fflush",
            "bl fcn.0007a60c",
            "ldr r0, [r5]",
            "bl rsym.yaSSL_CTX_free",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "mov r5, 0",
            "b 0x7a7ac",
            "ldr r3, [0x0007a950]",
            "mov r0, 3",
            "ldr r6, [r4, r3]",
            "str r0, [fp]",
            "ldr r7, [r6]",
            "bl rsym.sslGetErrString",
            "ldr r2, [0x0007a958]",
            "mov r3, r0",
            "add r2, r4, r2",
            "mov r0, r7",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r6]",
            "bl sym.imp.fflush",
            "b 0x7a850",
            "mov r0, r6",
            "bl rsym.yaDH_free",
            "mov r6, 0",
            "b 0x7a798",
            "ldr r3, [0x0007a950]",
            "mov r8, 1",
            "ldr r6, [r4, r3]",
            "str r8, [fp]",
            "mov r0, r8",
            "ldr sl, [r6]",
            "bl rsym.sslGetErrString",
            "ldr r2, [0x0007a954]",
            "mov r3, r0",
            "add r2, r4, r2",
            "mov r0, sl",
            "mov r1, r8",
            "str r7, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r6]",
            "bl sym.imp.fflush",
            "b 0x7a850",
            "mov r3, 5",
            "str r3, [fp]",
            "bl fcn.0007a60c",
            "ldr r0, [r5]",
            "bl rsym.yaSSL_CTX_free",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "mov r5, sl",
            "b 0x7a7ac",
            "mov r2, 6",
            "str r2, [fp]",
            "str r0, [sp, 0xc]",
            "bl fcn.0007a60c",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "ldr r3, [sp, 0xc]",
            "mov r5, r3",
            "b 0x7a7ac"
        ]
    },
    "rsym.yaSSL_CTX_set_verify": {
        "function_address": "0x0003dde0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x664]!"
        ]
    },
    "rsym.yaSSL_CTX_new": {
        "function_address": "0x0003deb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5d4]!"
        ]
    },
    "rsym.yaSSL_CTX_set_cipher_list": {
        "function_address": "0x0003f9b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3d4]!"
        ]
    },
    "rsym.yaSSL_CTX_load_verify_locations": {
        "function_address": "0x0003f718",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x594]!"
        ]
    },
    "rsym.yaSSL_CTX_use_certificate_file": {
        "function_address": "0x000401a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe8c]!"
        ]
    },
    "rsym.yaSSL_CTX_use_PrivateKey_file": {
        "function_address": "0x0004093c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x97c]!"
        ]
    },
    "rsym.yaSSL_CTX_check_private_key": {
        "function_address": "0x0003f7e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x50c]!"
        ]
    },
    "rsym.yaDH_new": {
        "function_address": "0x0003fb38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2d4]!"
        ]
    },
    "rsym.yaBN_bin2bn": {
        "function_address": "0x0003e65c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbc]!"
        ]
    },
    "rsym.yaSSL_CTX_set_tmp_dh": {
        "function_address": "0x0003d000",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfa4]!"
        ]
    },
    "rsym.yaDH_free": {
        "function_address": "0x0003e6a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8c]!"
        ]
    },
    "rsym.yaSSL_CTX_set_default_verify_paths": {
        "function_address": "0x0003e3b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x284]!"
        ]
    },
    "fcn.0007a60c": {
        "function_address": "0x0007a60c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "add r7, sp, 0xc",
            "add r6, sp, 4",
            "add r5, sp, 8",
            "mov r4, sp",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, sp",
            "bl rsym.yaERR_get_error_line_data",
            "cmp r0, 0",
            "bne 0x7a624",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_load_error_strings": {
        "function_address": "0x0003cb5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2bc]!"
        ]
    },
    "rsym.yaSSL_library_init": {
        "function_address": "0x0003f1d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x914]!"
        ]
    },
    "rsym.yaOpenSSL_add_all_algorithms": {
        "function_address": "0x0003db1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x83c]!"
        ]
    },
    "rsym.sslGetErrString": {
        "function_address": "0x0003fe98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x94]!"
        ]
    },
    "sym.yaMD5_Init": {
        "function_address": "0x00085418",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00085454]",
            "mov r5, r0",
            "add r4, pc, r4",
            "mov r1, 4",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x00085458]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::GetExplicitVersion__": {
        "function_address": "0x0009b164",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "ldr r2, [0x0009b1f0]",
            "ldr r3, [r0, 0x10]",
            "add r2, pc, r2",
            "cmp r3, 0",
            "beq 0x9b190",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr ip, [r0]",
            "add r1, r3, 1",
            "cmp r3, ip",
            "str r1, [r0, 0xc]",
            "bhs 0x9b1cc",
            "ldr r2, [r0, 4]",
            "ldrb r2, [r2, r3]",
            "cmp r2, 0xa0",
            "strne r3, [r0, 0xc]",
            "bne 0x9b184",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt11BER_Decoder10GetVersionEv",
            "ldr r3, [0x0009b1f4]",
            "ldr r1, [0x0009b1f8]",
            "ldr r0, [0x0009b1fc]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Integer::operator__TaoCrypt::Integer_const_": {
        "function_address": "0x000aab58",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r2, [r0]",
            "ldr r6, [r1]",
            "sub sp, sp, 8",
            "cmp r6, r2",
            "mov r4, r0",
            "mov r5, r1",
            "bls 0xaabb0",
            "ldr r1, [r0, 4]",
            "mov ip, 1",
            "mov r3, r6",
            "add r0, r0, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r6",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r6, [r4]",
            "ldr r6, [r4, 0xc]",
            "cmp r6, 1",
            "beq 0xaabe8",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xaac0c",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xaac20",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "str r6, [r4, 0xc]",
            "b 0xaabd8",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "b 0xaabd8",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, r4",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xaabd8"
        ]
    },
    "rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_": {
        "function_address": "0x0003d9cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x91c]!"
        ]
    },
    "rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_": {
        "function_address": "0x0003ea28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe34]!"
        ]
    },
    "fcn.000a6b74": {
        "function_address": "0x000a6b74",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000a6c80]",
            "cmp r0, r1",
            "sub sp, sp, 8",
            "mov r5, r0",
            "mov r6, r1",
            "add r4, pc, r4",
            "beq 0xa6c18",
            "mov r0, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 8",
            "bls 0xa6c28",
            "cmp r0, 0x10",
            "movls r4, 0x10",
            "bls 0xa6bc8",
            "cmp r0, 0x20",
            "movls r4, 0x20",
            "bls 0xa6bc8",
            "cmp r0, 0x40",
            "movls r4, 0x40",
            "bhi 0xa6c6c",
            "mov ip, 0",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "add r0, r5, 8",
            "mov r3, r4",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r0, [r5, 4]",
            "ldr ip, [r6, 4]",
            "str r4, [r5]",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [ip, r3]",
            "add r2, r2, 1",
            "cmp r2, r4",
            "str r1, [r0, r3]",
            "add r3, r3, 4",
            "blo 0xa6bf8",
            "ldr r3, [r6, 0xc]",
            "str r3, [r5, 0xc]",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x000a6c84]",
            "add r4, r4, r3",
            "add r0, r4, r0, lsl 2",
            "ldr r4, [r0, 0x5ec]",
            "mov ip, 0",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "add r0, r5, 8",
            "mov r3, r4",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "cmp r4, 0",
            "str r0, [r5, 4]",
            "str r4, [r5]",
            "ldr ip, [r6, 4]",
            "bne 0xa6bf0",
            "b 0xa6c10",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r4, 1",
            "lsl r4, r4, r0",
            "b 0xa6c38"
        ]
    },
    "fcn.000baa60": {
        "function_address": "0x000baa60",
        "instructions": [
            "ldr ip, [0x000baa9c]",
            "ldr r3, [0x000baaa0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000baaa4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000baaa8]",
            "ldr r0, [0x000baaac]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_pwrite": {
        "function_address": "0x00055b44",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "mov r3, 0",
            "ldr r6, [sp, 0x40]",
            "str r3, [sp, 0xc]",
            "mov r8, r0",
            "mov r5, r1",
            "mov r4, r2",
            "mov r7, r3",
            "add fp, sp, 0x38",
            "ldm fp, {sl, fp}",
            "mov r2, r4",
            "mov r1, r5",
            "mov r0, r8",
            "stm sp, {sl, fp}",
            "bl sym.imp.pwrite64",
            "cmp r0, r4",
            "beq 0x55c70",
            "str r0, [sp, 8]",
            "bl rsym._my_thread_var",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [sp, 8]",
            "ldr r2, [r0]",
            "cmn r3, 1",
            "sub r0, r3, 1",
            "str r2, [sb]",
            "beq 0x55bc8",
            "adds sl, sl, r3",
            "adc fp, fp, 0",
            "add r7, r7, r3",
            "add r5, r5, r3",
            "rsb r4, r3, r4",
            "ldr r1, [sb, 0x6c]",
            "cmp r1, 0",
            "bicne r6, r6, 0x20",
            "cmp r2, 0x1c",
            "cmpne r2, 0x7a",
            "bne 0x55be8",
            "tst r6, 0x20",
            "bne 0x55c38",
            "cmn r0, 3",
            "bls 0x55b70",
            "cmp r2, 4",
            "beq 0x55b70",
            "tst r6, 6",
            "beq 0x55c80",
            "tst r6, 0x1a",
            "bne 0x55c18",
            "mvn r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r8",
            "bl rsym.my_filename",
            "ldr r3, [sb]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 3",
            "bl rsym.my_error",
            "b 0x55c08",
            "mov r0, r8",
            "bl rsym.my_filename",
            "ldr r1, [sp, 0xc]",
            "bl rsym.wait_for_free_space",
            "ldr r3, [sp, 0xc]",
            "mov r2, r4",
            "add r3, r3, 1",
            "mov r1, r5",
            "mov r0, r8",
            "str r3, [sp, 0xc]",
            "stm sp, {sl, fp}",
            "bl sym.imp.pwrite64",
            "cmp r0, r4",
            "bne 0x55b8c",
            "tst r6, 6",
            "movne r0, 0",
            "bne 0x55c0c",
            "mov r3, r4",
            "add r0, r3, r7",
            "b 0x55c0c"
        ]
    },
    "sym.imp.pwrite64": {
        "function_address": "0x0003edd0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbc4]!"
        ]
    },
    "rsym.my_filename": {
        "function_address": "0x0004018c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe9c]!"
        ]
    },
    "rsym.wait_for_free_space": {
        "function_address": "0x0003e9ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe5c]!"
        ]
    },
    "sym.set_stmt_error": {
        "function_address": "0x00042314",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [0x00042358]",
            "ldr ip, [0x0004235c]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "str r1, [r0, 0xa0]",
            "sub r1, r1, 0x7d0",
            "mov r4, r0",
            "ldr r1, [ip, r1, lsl 2]",
            "mov r5, r2",
            "add r0, r0, 0xb0",
            "bl sym.imp.strcpy",
            "add r0, r4, 0x2b0",
            "mov r1, r5",
            "bl sym.imp.strcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::FileSource.FileSource_char_const__TaoCrypt::Source_": {
        "function_address": "0x000a1fd8",
        "instructions": [
            "ldr r3, [0x000a201c]",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r1, [0x000a2020]",
            "add r3, pc, r3",
            "add r1, r3, r1",
            "mov r5, r2",
            "bl sym.imp.fopen64",
            "cmp r0, 0",
            "str r0, [r4]",
            "movne r1, r5",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt10FileSource3getERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.fopen64": {
        "function_address": "0x0003e8a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf34]!"
        ]
    },
    "rsym._ZN8TaoCrypt10FileSource3getERNS_6SourceE": {
        "function_address": "0x000407bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa7c]!"
        ]
    },
    "fcn.0007d570": {
        "function_address": "0x0007d570",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d5b4]",
            "ldr r3, [0x0007d5b8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3MD57MD5ImplEEEvPT_",
            "ldr r3, [0x0007d5bc]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Plus_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab2a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r1]",
            "mov r4, r2",
            "ldr r2, [r2]",
            "mov r5, r1",
            "cmp r2, r3",
            "movlo r2, r3",
            "mov r1, 0",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xab304",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xab324",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r7, [r4, 0xc]",
            "cmp r7, 1",
            "beq 0xab338",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xab2f8",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xab2f8",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "str r7, [r6, 0xc]",
            "b 0xab2f8"
        ]
    },
    "fcn.0008ae18": {
        "function_address": "0x0008ae18",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ae70]",
            "ldr r3, [0x0008ae74]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "mov r5, r0",
            "str r3, [r0]",
            "ldr r0, [r6, 0x28]!",
            "mov r1, 0",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPhE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_S8_S7_",
            "mov r0, r6",
            "bl rsym._ZN5mySTL4listIPhED1Ev",
            "ldr r3, [0x0008ae78]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPhE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_S8_S7_": {
        "function_address": "0x0003cf04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x4c]!"
        ]
    },
    "rsym._ZN5mySTL4listIPhED1Ev": {
        "function_address": "0x0003e230",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x384]!"
        ]
    },
    "fcn.0009223c": {
        "function_address": "0x0009223c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIcEEvPT_",
            "ldr r0, [r4, 0x10]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL13ysArrayDeleteIcEEvPT_": {
        "function_address": "0x00040348",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd74]!"
        ]
    },
    "sym.my_sync": {
        "function_address": "0x00059ddc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "mov r8, r1",
            "mov r0, r5",
            "bl sym.imp.fdatasync",
            "cmn r0, 1",
            "mov r4, r0",
            "bne 0x59e78",
            "bl sym.imp.__errno_location",
            "ldr r7, [r0]",
            "cmp r7, 4",
            "beq 0x59de8",
            "bl rsym._my_thread_var",
            "cmp r7, 0",
            "mvneq r3, 0",
            "str r7, [r0]",
            "streq r3, [r0]",
            "tst r8, 0x20",
            "mov r6, r0",
            "bne 0x59e5c",
            "tst r8, 0x10",
            "beq 0x59e50",
            "mov r0, r5",
            "bl rsym.my_filename",
            "ldr r3, [r6]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 0x1b",
            "bl rsym.my_error",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r7, 9",
            "cmpne r7, 0x16",
            "beq 0x59e70",
            "cmp r7, 0x1e",
            "bne 0x59e2c",
            "mov r4, 0",
            "b 0x59e50",
            "cmp r4, 0",
            "beq 0x59e50",
            "bl sym.imp.__errno_location",
            "ldr r7, [r0]",
            "b 0x59e0c"
        ]
    },
    "sym.imp.fdatasync": {
        "function_address": "0x0003e860",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf64]!"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_unsigned_char_::iterator__yaSSL.del_ptr_zero__mySTL::list_unsigned_char_::iterator__mySTL::list_unsigned_char_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089c8c",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89cbc",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteIhEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89ca4",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteIhEEvPT_": {
        "function_address": "0x0003d228",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe34]!"
        ]
    },
    "sym.yaSSL::buildServerHello_yaSSL::SSL__yaSSL::ServerHello_": {
        "function_address": "0x000827f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "bne 0x82898",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "add r1, r4, 0xa",
            "mov r2, 0x20",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "add r6, r4, 0x2b",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, r6",
            "mov r2, 0x20",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r3, 0x20",
            "mov r1, r6",
            "strb r3, [r4, 0x2a]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13set_sessionIDEPKh",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x2c]",
            "mov r0, r5",
            "strb r3, [r4, 0x4b]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x2d]",
            "mov r1, 0x46",
            "mov r0, r4",
            "strb r3, [r4, 0x4c]",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x54",
            "add r0, r4, 0xa",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10get_resumeEv",
            "bl rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv",
            "add r6, r4, 0x2b",
            "mov r1, r0",
            "mov r2, 0x20",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "b 0x82848"
        ]
    },
    "rsym._ZN5yaSSL3SSL13set_sessionIDEPKh": {
        "function_address": "0x0003cd18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x194]!"
        ]
    },
    "rsym._ZNK5yaSSL8Security10get_resumeEv": {
        "function_address": "0x00040780",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xaa4]!"
        ]
    },
    "sym.my_time": {
        "function_address": "0x0005a028",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0005a098]",
            "tst r0, 0x10",
            "add r4, pc, r4",
            "bne 0x5a054",
            "mov r0, 0",
            "bl sym.imp.time",
            "cmn r0, 1",
            "beq 0x5a03c",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r5, [0x0005a09c]",
            "ldr r7, [0x0005a0a0]",
            "ldr r6, [0x0005a0a4]",
            "add r5, r4, r5",
            "b 0x5a084",
            "ldr r2, [r4, r7]",
            "ldr r3, [r4, r6]",
            "ldr r0, [r2]",
            "ldr r3, [r3]",
            "mov r1, 1",
            "mov r2, r5",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 0",
            "bl sym.imp.time",
            "cmn r0, 1",
            "beq 0x5a068",
            "b 0x5a04c"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000bad40",
        "instructions": [
            "push {r4, lr}",
            "ldrb r3, [r0, 0xc]",
            "sub sp, sp, 8",
            "cmp r3, 0",
            "mov r4, r0",
            "bne 0xbad6c",
            "str r1, [sp, 4]",
            "str r2, [sp]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE12KeyInnerHashEv",
            "ldr r2, [sp]",
            "ldr r1, [sp, 4]",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3SHAEE12KeyInnerHashEv": {
        "function_address": "0x0003f220",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8e4]!"
        ]
    },
    "sym.my_strntoll_ucs2": {
        "function_address": "0x0006a1c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov r5, r0",
            "ldr r0, [sp, 0x54]",
            "mov ip, 0",
            "str ip, [r0]",
            "mov sb, r3",
            "add sl, r1, r2",
            "mov r4, r1",
            "str ip, [sp, 0x14]",
            "add r8, sp, 0x24",
            "mov r2, r4",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a4c4",
            "ldr r3, [sp, 0x24]",
            "sub r3, r3, 9",
            "cmp r3, 0x24",
            "addls pc, pc, r3, lsl 2",
            "b 0x6a2d8",
            "b 0x6a2d0",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d0",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d8",
            "b 0x6a2d0",
            "b 0x6a2d8",
            "b 0x6a2c4",
            "ldr r2, [sp, 0x14]",
            "eor r2, r2, 1",
            "str r2, [sp, 0x14]",
            "add r4, r4, r0",
            "b 0x6a1f4",
            "mov r2, sb",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, sb",
            "str r0, [sp, 0xc]",
            "mov fp, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "str r2, [sp, 0x18]",
            "mov r2, sb",
            "asr r3, r2, 0x1f",
            "stm sp, {r2, r3}",
            "mov lr, 0",
            "str r4, [sp, 0x1c]",
            "mov r6, 0",
            "mov r7, 0",
            "str lr, [sp, 0x10]",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, r4",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a40c",
            "ldr r2, [sp, 0x24]",
            "add r4, r4, r0",
            "sub r3, r2, 0x30",
            "cmp r3, 9",
            "bls 0x6a38c",
            "sub r3, r2, 0x41",
            "cmp r3, 0x19",
            "subls r3, r2, 0x37",
            "strls r3, [sp, 0x24]",
            "bls 0x6a390",
            "sub r3, r2, 0x61",
            "cmp r3, 0x19",
            "bhi 0x6a410",
            "sub r3, r2, 0x57",
            "str r3, [sp, 0x24]",
            "cmp sb, r3",
            "ble 0x6a410",
            "cmp r7, fp",
            "bhi 0x6a3b0",
            "bne 0x6a3bc",
            "ldr ip, [sp, 0xc]",
            "cmp r6, ip",
            "bls 0x6a3bc",
            "mov lr, 1",
            "str lr, [sp, 0x10]",
            "b 0x6a32c",
            "ldr r0, [sp, 0xc]",
            "cmp r6, r0",
            "beq 0x6a3ec",
            "ldr ip, [sp, 4]",
            "ldr lr, [sp]",
            "mul ip, r6, ip",
            "umull r1, r2, r6, lr",
            "mla r0, lr, r7, ip",
            "adds r6, r1, r3",
            "add r2, r0, r2",
            "adc r7, r2, 0",
            "b 0x6a32c",
            "cmp r7, fp",
            "bne 0x6a3c8",
            "ldr r2, [sp, 0x18]",
            "cmp r2, r3",
            "bhs 0x6a3c8",
            "mov r3, 1",
            "str r3, [sp, 0x10]",
            "b 0x6a32c",
            "beq 0x6a490",
            "ldr r3, [sp, 0x50]",
            "cmp r3, 0",
            "strne r4, [r3]",
            "ldr ip, [sp, 0x1c]",
            "cmp ip, r4",
            "beq 0x6a524",
            "ldr r2, [sp, 0x14]",
            "cmp r2, 0",
            "bne 0x6a470",
            "cmp r7, 0",
            "blt 0x6a4f0",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "bne 0x6a508",
            "ldr r2, [sp, 0x14]",
            "cmp r2, 0",
            "beq 0x6a45c",
            "rsbs r6, r6, 0",
            "rsc r7, r7, 0",
            "mov r1, r7",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r7, 0x80000000",
            "bls 0x6a4b4",
            "ldr r0, [sp, 0x54]",
            "mov r3, 0x22",
            "str r3, [r0]",
            "mov r6, 0",
            "mov r7, 0x80000000",
            "b 0x6a45c",
            "ldr r0, [sp, 0x50]",
            "mov r3, 0x54",
            "cmp r0, 0",
            "strne r4, [r0]",
            "ldr r2, [sp, 0x54]",
            "mov r6, 0",
            "str r3, [r2]",
            "mov r7, 0",
            "b 0x6a45c",
            "bne 0x6a43c",
            "cmp r6, 0",
            "bne 0x6a478",
            "b 0x6a43c",
            "ldr r3, [sp, 0x50]",
            "mov r6, 0",
            "cmp r3, 0",
            "strne r4, [r3]",
            "ldr ip, [sp, 0x54]",
            "cmp r0, 0",
            "moveq r0, 0x54",
            "movne r0, 0x21",
            "str r0, [ip]",
            "mov r7, 0",
            "b 0x6a45c",
            "ldr ip, [sp, 0x54]",
            "mov r3, 0x22",
            "str r3, [ip]",
            "mvn r6, 0",
            "mvn r7, 0x80000000",
            "b 0x6a45c",
            "ldr ip, [sp, 0x14]",
            "ldr r0, [sp, 0x54]",
            "mov r3, 0x22",
            "cmp ip, 0",
            "str r3, [r0]",
            "beq 0x6a4fc",
            "b 0x6a484",
            "ldr r0, [sp, 0x54]",
            "mov r3, 0x21",
            "str r3, [r0]",
            "mov r6, 0",
            "mov r7, 0",
            "b 0x6a45c"
        ]
    },
    "sym.yaSSL::RC4::encrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dc5c",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4ARC47ProcessEPhPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4ARC47ProcessEPhPKhj": {
        "function_address": "0x0003f574",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6ac]!"
        ]
    },
    "sym.yaSSL::InitMessageFactory_yaSSL::Factory_yaSSL::Message__int__yaSSL::Message_______": {
        "function_address": "0x0008fac4",
        "instructions": [
            "ldr r2, [r0, 8]",
            "ldr r3, [r0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "rsb r3, r3, r2",
            "ldr r5, [0x0008fe28]",
            "asr r3, r3, 3",
            "cmp r3, 3",
            "mov r4, r0",
            "add r5, pc, r5",
            "bls 0x8fb94",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "beq 0x8fbf4",
            "ldr r2, [0x0008fe2c]",
            "mov r1, 0x15",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldmib r4, {r2, r3}",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x8fc78",
            "ldr r1, [0x0008fe30]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0x14",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x8fd00",
            "ldr r2, [0x0008fe34]",
            "mov r1, 0x16",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x8fd88",
            "ldr r2, [0x0008fe38]",
            "ldr r1, [r4, 4]",
            "ldr r2, [r5, r2]",
            "add r1, r1, 8",
            "mov r0, 0x17",
            "str r0, [r3]",
            "str r1, [r4, 4]",
            "str r2, [r3, 4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 4",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "asr r3, r3, 3",
            "cmp r3, 3",
            "bhi 0x8fe04",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_",
            "ldr r7, [r4]",
            "add r3, r6, 0x20",
            "ldr r1, [r4, 4]",
            "stmib r4, {r0, r3}",
            "str r6, [r4]",
            "mov r0, r7",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "mov r0, r7",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "ldr r2, [r4, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "bne 0x8faf8",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fe04",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fe2c]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x15",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8fb1c",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fe04",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fe30]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8fb44",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fe04",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fe34]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x16",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8fb6c",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fe04",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fe38]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x17",
            "str r2, [r3], 8",
            "ldr r5, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r5",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "b 0x8fb8c",
            "ldr r3, [0x0008fe3c]",
            "ldr r1, [0x0008fe40]",
            "ldr r0, [0x0008fe44]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x184",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEPT_j": {
        "function_address": "0x00040384",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd4c]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL7MessageEvEEES8_EET0_T_SA_S9_": {
        "function_address": "0x0003f580",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6a4]!"
        ]
    },
    "rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_": {
        "function_address": "0x0003ffd0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfc4]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_": {
        "function_address": "0x0003fb20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2e4]!"
        ]
    },
    "sym.yaSSL::MD5::MD5_yaSSL::MD5_const_": {
        "function_address": "0x0007dfc8",
        "instructions": [
            "ldr r3, [0x0007e014]",
            "ldr r2, [0x0007e018]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt3MD5C1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.set_dynamic": {
        "function_address": "0x000504a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 4]",
            "mov r4, r0",
            "cmp r3, r2",
            "mov r5, r2",
            "mov r6, r1",
            "bhi 0x504f4",
            "ldr r2, [r0, 8]",
            "cmp r5, r2",
            "bhs 0x50514",
            "ldr r2, [r4, 0x10]",
            "ldr r0, [r4]",
            "rsb r1, r3, r5",
            "mla r0, r2, r3, r0",
            "mul r2, r1, r2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "add r3, r5, 1",
            "str r3, [r4, 4]",
            "ldr r0, [r4]",
            "ldr r2, [r4, 0x10]",
            "mov r1, r6",
            "mla r0, r2, r5, r0",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, r5",
            "bl rsym.allocate_dynamic",
            "cmp r0, 0",
            "movne r0, 1",
            "bne 0x5050c",
            "ldr r3, [r4, 4]",
            "b 0x504d0"
        ]
    },
    "rsym.allocate_dynamic": {
        "function_address": "0x0003fdb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x12c]!"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_unsigned_char_const__unsigned_int__TaoCrypt::Integer::Signedness_": {
        "function_address": "0x000a8f78",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "sub sp, sp, 8",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "mov r7, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, r5",
            "mov r2, r5",
            "mov r3, r5",
            "add r0, r0, 8",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "mov r0, r4",
            "mov r2, r6",
            "mov r3, r8",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::hashHandShake_yaSSL::SSL__yaSSL::input_buffer_const__unsigned_int_": {
        "function_address": "0x000816ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "mov r0, r1",
            "mov r7, r1",
            "mov r4, r2",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r5, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "sub r3, r0, 4",
            "mov r0, r6",
            "add r5, r5, r3",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "add r4, r4, 4",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r0]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r0]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer11get_currentEv": {
        "function_address": "0x0003f214",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8ec]!"
        ]
    },
    "rsym._ZN5yaSSL9sslHashes7use_MD5Ev": {
        "function_address": "0x0003dd14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6ec]!"
        ]
    },
    "rsym._ZN5yaSSL9sslHashes7use_SHAEv": {
        "function_address": "0x0003f610",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x644]!"
        ]
    },
    "sym.TaoCrypt::EncodeDSA_Signature_unsigned_char_const__unsigned_char_": {
        "function_address": "0x0009c3b0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x24",
            "add r5, sp, 0x10",
            "mov r6, r0",
            "mov r7, r1",
            "mov r2, 0x14",
            "mov r1, r0",
            "mov r3, 0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r3, 0",
            "add r1, r6, 0x14",
            "mov r0, sp",
            "mov r2, 0x14",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, sp",
            "mov r2, r7",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt19EncodeDSA_SignatureERKNS_7IntegerES2_Ph",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt19EncodeDSA_SignatureERKNS_7IntegerES2_Ph": {
        "function_address": "0x0003ef14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xaec]!"
        ]
    },
    "sym.mysql_next_result": {
        "function_address": "0x00041e3c",
        "instructions": [
            "push {r4, lr}",
            "ldr r2, [r0, 0x380]",
            "ldr r3, [0x00041eb8]",
            "cmp r2, 0",
            "mov r4, r0",
            "add r3, pc, r3",
            "beq 0x41e78",
            "ldr r2, [0x00041ebc]",
            "ldr r1, [0x00041ec0]",
            "ldr r3, [r3, r2]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym.net_clear_error",
            "mvn r3, 0",
            "mvn r2, 0",
            "str r2, [r4, 0x2b8]",
            "str r3, [r4, 0x2bc]",
            "ldr r3, [r4, 0x3a8]",
            "ldr r3, [r3, 0x2ec]",
            "tst r3, 8",
            "mvneq r0, 0",
            "beq 0x41e70",
            "mov r0, r4",
            "ldr r3, [r4, 0x3b0]",
            "ldr ip, [r3, 0x34]",
            "mov lr, pc",
            "bx ip",
            "b 0x41e70"
        ]
    },
    "fcn.0007c4c4": {
        "function_address": "0x0007c4c4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r0, 0x38]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r0, [r4, 0x44]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN8TaoCrypt6SignerEE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_SA_S9_",
            "mov r5, r4",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r0, [r4, 0x1c]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "ldr r0, [r5], 0x44",
            "mov r1, r6",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEED1Ev",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add r0, r4, 0x1c",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN8TaoCrypt6SignerEE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_SA_S9_": {
        "function_address": "0x0003e494",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1ec]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEED1Ev": {
        "function_address": "0x0003eeb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb2c]!"
        ]
    },
    "sym.TaoCrypt::Integer::IsConvertableToLong___const": {
        "function_address": "0x000a6488",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r2, [0x000a6510]",
            "cmp r0, 4",
            "add r2, pc, r2",
            "movhi r0, 0",
            "bls 0xa64b0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0xa64ec",
            "ldr r1, [r4, 4]",
            "cmp r3, 1",
            "ldr r0, [r1]",
            "bls 0xa64ec",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 0",
            "rsbne r0, r0, 0",
            "lsrne r0, r0, 0x1f",
            "bne 0xa64a8",
            "mvn r0, r0",
            "lsr r0, r0, 0x1f",
            "b 0xa64a8",
            "ldr r3, [0x000a6514]",
            "ldr r1, [0x000a6518]",
            "ldr r0, [0x000a651c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_CTX_sess_get_cache_size": {
        "function_address": "0x00085b00",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x30]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.check_scramble": {
        "function_address": "0x00047500",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x94",
            "mov r4, r1",
            "mov r5, r0",
            "mov r0, sp",
            "mov r7, r2",
            "bl rsym.mysql_sha1_reset",
            "mov r1, r4",
            "mov r2, 0x14",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "add r4, sp, 0x7c",
            "mov r1, r7",
            "mov r2, 0x14",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r0, sp",
            "mov r1, r4",
            "bl rsym.mysql_sha1_result",
            "add r3, sp, 0x90",
            "cmp r4, r3",
            "mov r6, sp",
            "bhs 0x475e4",
            "tst r5, 3",
            "add r3, r4, 4",
            "movne r1, 0",
            "moveq r1, 1",
            "add ip, r5, 4",
            "cmp r5, r3",
            "movls r2, 0",
            "movhi r2, 1",
            "cmp ip, r4",
            "orrlo r2, r2, 1",
            "ands r2, r1, r2",
            "beq 0x4762c",
            "ldr sb, [r5, 4]",
            "ldr sl, [r4, 4]",
            "ldr r8, [ip, 4]",
            "add r2, r3, 4",
            "eor sl, sb, sl",
            "ldr sb, [r3, 4]",
            "add r0, ip, 4",
            "add r1, r2, 4",
            "ldr ip, [r0, 8]",
            "ldr r5, [r5]",
            "ldr r0, [r0, 4]",
            "ldr fp, [r4]",
            "eor lr, r8, sb",
            "ldr r8, [r2, 4]",
            "ldr sb, [r1, 4]",
            "eor r5, r5, fp",
            "eor r0, r0, r8",
            "eor ip, ip, sb",
            "str lr, [r3, 4]",
            "str r0, [r2, 4]",
            "str ip, [r1, 4]",
            "stm r4, {r5, sl}",
            "mov r0, sp",
            "bl rsym.mysql_sha1_reset",
            "mov r1, r4",
            "mov r2, 0x14",
            "add r4, sp, 0x68",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r4",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, 0x14",
            "bl sym.imp.memcmp",
            "and r0, r0, 0xff",
            "add sp, sp, 0x94",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r3, r2",
            "ldrb r2, [r4, r3]",
            "ldrb r1, [r5, r3]",
            "eor r2, r1, r2",
            "strb r2, [r4, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x14",
            "bne 0x47630",
            "b 0x475e4"
        ]
    },
    "sym.print_defaults": {
        "function_address": "0x0004e448",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0004e51c]",
            "ldr r7, [0x0004e520]",
            "add r4, pc, r4",
            "mov r5, r1",
            "bl rsym.my_print_default_files",
            "ldr r6, [r4, r7]",
            "ldr r0, [0x0004e524]",
            "ldr r3, [r6]",
            "mov r1, 1",
            "add r0, r4, r0",
            "mov r2, 0x1e",
            "bl sym.imp.fwrite",
            "ldr r3, [r5]",
            "cmp r3, 0",
            "beq 0x4e4b0",
            "mov r8, r5",
            "ldr r1, [r6]",
            "mov r0, 0x20",
            "bl sym.imp.fputc",
            "ldr r0, [r8]",
            "ldr r1, [r6]",
            "bl sym.imp.fputs",
            "ldr r3, [r8, 4]!",
            "cmp r3, 0",
            "bne 0x4e48c",
            "ldr r8, [0x0004e528]",
            "ldr r3, [r4, r8]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x4e508",
            "ldr r3, [r5]",
            "cmp r3, 0",
            "beq 0x4e508",
            "ldr r6, [r4, r7]",
            "ldr r1, [r6]",
            "mov r0, 0x20",
            "bl sym.imp.fputc",
            "ldr r0, [r5]",
            "ldr r1, [r6]",
            "bl sym.imp.fputs",
            "ldr r3, [r4, r8]",
            "ldr r1, [r6]",
            "ldr r0, [r3]",
            "bl sym.imp.fputs",
            "ldr r3, [r5, 4]!",
            "cmp r3, 0",
            "bne 0x4e4d4",
            "ldr r0, [0x0004e52c]",
            "add r0, r4, r0",
            "bl sym.imp.puts",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.my_print_default_files": {
        "function_address": "0x0003e53c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x17c]!"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x0003f178",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x954]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x000409cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x91c]!"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x0003fce8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1b4]!"
        ]
    },
    "fcn.0007df54": {
        "function_address": "0x0007df54",
        "instructions": [
            "ldr r3, [0x0007dfa0]",
            "ldr r2, [0x0007dfa4]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt3SHAC1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3SHAC1ERKS0_": {
        "function_address": "0x0003f064",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa0c]!"
        ]
    },
    "sym.TaoCrypt::MD4::MD4_TaoCrypt::MD4_const_": {
        "function_address": "0x000af0e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 4",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add r7, r5, 0x30",
            "add ip, r5, 0x10",
            "add r3, r6, 0x10",
            "ldm r3, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, r7",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r8, [0x000af164]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000af168]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::DSA_PublicKey_TaoCrypt::DSA_PublicKey_const_": {
        "function_address": "0x000a10a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x10",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x20",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r5, 0x30",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateCertificateRequest__": {
        "function_address": "0x0008b63c",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x34",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL18CertificateRequestC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL18CertificateRequestC1Ev": {
        "function_address": "0x0003d570",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc04]!"
        ]
    },
    "fcn.0007e8d8": {
        "function_address": "0x0007e8d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007e97c]",
            "ldr r3, [0x0007e980]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x110",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 4",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007e984]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3MD5EE6SetKeyEPKhj": {
        "function_address": "0x0003fd90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x144]!"
        ]
    },
    "sym.yaSSL::clean_unsigned_char_volatile__unsigned_int__yaSSL::RandomPool_": {
        "function_address": "0x0008ba44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r1, 0",
            "mov r5, r0",
            "beq 0x8ba9c",
            "mov r3, 0",
            "mov r1, r3",
            "strb r1, [r5, r3]",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bhi 0x8ba5c",
            "mov r0, r2",
            "mov r1, r5",
            "mov r2, r4",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r3, 0",
            "mov r2, r3",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bhi 0x8ba84",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r2",
            "mov r1, r5",
            "mov r2, r4",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "b 0x8ba94"
        ]
    },
    "fcn.0008af30": {
        "function_address": "0x0008af30",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008af74]",
            "ldr r3, [0x0008af78]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ClientKeyBaseEEEvPT_",
            "ldr r3, [0x0008af7c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSLv3_server_method": {
        "function_address": "0x0008686c",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 0",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, r1",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb": {
        "function_address": "0x0003e374",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2ac]!"
        ]
    },
    "sym.yaSSL_CTX_free": {
        "function_address": "0x000851e8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7SSL_CTXEEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_7SSL_CTXEEEvPT_": {
        "function_address": "0x0003f658",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x614]!"
        ]
    },
    "sym.my_strntod_ucs2": {
        "function_address": "0x0006bad0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x10c",
            "ldr ip, [sp, 0x130]",
            "mov fp, r1",
            "add sb, sp, 4",
            "mov r1, 0",
            "str r1, [ip]",
            "cmp r2, 0xff",
            "addls r7, fp, r2",
            "addhi r7, fp, 0xff",
            "mov r6, r0",
            "mov sl, r3",
            "mov r4, sb",
            "mov r5, fp",
            "add r8, sp, 0x104",
            "b 0x6bb2c",
            "ldr r3, [sp, 0x104]",
            "add r4, r4, 1",
            "sub r2, r3, 1",
            "cmp r2, 0x64",
            "bhi 0x6bb58",
            "add r5, r5, r0",
            "strb r3, [r4, -1]",
            "mov r1, r8",
            "mov r2, r5",
            "ldr ip, [r6, 0x64]",
            "mov r0, r6",
            "mov r3, r7",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "mov r1, r4",
            "bgt 0x6bb10",
            "str r1, [sl]",
            "ldr r2, [sp, 0x130]",
            "mov r0, sb",
            "mov r1, sl",
            "bl rsym.my_strtod",
            "ldr r3, [sl]",
            "rsb sb, sb, r3",
            "add fp, fp, sb",
            "str fp, [sl]",
            "add sp, sp, 0x10c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym.my_strtod": {
        "function_address": "0x0003f598",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x694]!"
        ]
    },
    "sym.TaoCrypt::AbstractEuclideanDomain::Gcd_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x00098720",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x14",
            "mov r0, 3",
            "mov r7, r1",
            "mov r8, r2",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt7IntegerEEEPT_j",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r2, sp",
            "mov r1, 3",
            "mov r0, r5",
            "bl rsym._ZN5mySTL13uninit_fill_nIPN8TaoCrypt7IntegerEjS2_EET_S4_T0_RKT1_",
            "ldm sp, {r2, r6}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov fp, r0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, r8",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r7",
            "add r0, r5, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov sl, 2",
            "mov r7, 1",
            "mov r6, 0",
            "b 0x987d8",
            "add r1, r5, r6, lsl 4",
            "ldr r3, [r4]",
            "mov r2, r8",
            "mov r0, r4",
            "ldr ip, [r3, 0x64]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "add r0, r5, sl, lsl 4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r3, r7",
            "mov r7, sl",
            "mov sl, r6",
            "mov r6, r3",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr sb, [r3, 8]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "add r8, r5, r7, lsl 4",
            "mov r2, r0",
            "mov r1, r8",
            "mov r0, r4",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "beq 0x987a0",
            "add r1, r5, r6, lsl 4",
            "add r0, r4, 0xc",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, fp",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt7IntegerEEEPT_j": {
        "function_address": "0x0003e0a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x48c]!"
        ]
    },
    "rsym._ZN5mySTL13uninit_fill_nIPN8TaoCrypt7IntegerEjS2_EET_S4_T0_RKT1_": {
        "function_address": "0x0003de04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x64c]!"
        ]
    },
    "sym.unpack_filename": {
        "function_address": "0x0004a490",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x208",
            "add r4, sp, 4",
            "add r2, sp, 0x204",
            "mov r6, r0",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym.dirname_part",
            "mov r1, r4",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym.unpack_dirname",
            "add r7, r5, r7",
            "mov r8, r0",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add r0, r0, r8",
            "cmp r0, 0x200",
            "blo 0x4a4f4",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym.system_filename",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, r7",
            "add r0, r4, r8",
            "bl sym.imp.strcpy",
            "mov r0, r6",
            "mov r1, r4",
            "bl rsym.system_filename",
            "b 0x4a4e8"
        ]
    },
    "rsym.unpack_dirname": {
        "function_address": "0x0003e248",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x374]!"
        ]
    },
    "rsym.system_filename": {
        "function_address": "0x0003f2e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x864]!"
        ]
    },
    "sym.number_to_datetime": {
        "function_address": "0x0007801c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "ldr fp, [sp, 0x30]",
            "mov r6, r2",
            "mov ip, r6",
            "mov r2, 0",
            "str r2, [fp]",
            "str r2, [ip], 4",
            "add ip, ip, 4",
            "str r2, [r6, 4]",
            "str r2, [ip], 4",
            "str r2, [ip], 4",
            "str r2, [ip], 4",
            "str r2, [ip], 4",
            "mov r5, r1",
            "ldr r1, [0x00078320]",
            "str r2, [ip], 4",
            "str r2, [ip], 4",
            "cmp r5, r1",
            "str r2, [ip]",
            "mov r4, r0",
            "str r3, [sp, 4]",
            "str r2, [r6, 0x20]",
            "bgt 0x7822c",
            "beq 0x78220",
            "orrs r0, r4, r5",
            "mov r3, 0",
            "moveq r3, 1",
            "orr r2, r2, r3",
            "tst r2, 1",
            "movne r3, 1",
            "strne r3, [r6, 0x20]",
            "bne 0x780e8",
            "cmp r5, 0",
            "ble 0x78268",
            "mov r3, 1",
            "cmp r5, 0xa0",
            "str r3, [r6, 0x20]",
            "ble 0x78244",
            "cmp r5, 0xa3",
            "ble 0x7830c",
            "cmp r5, 0xe6",
            "bgt 0x780e8",
            "bne 0x780d8",
            "ldr r3, [0x00078324]",
            "cmp r4, r3",
            "bhi 0x780e8",
            "ldr r2, [0x00078328]",
            "ldr r3, [0x0007832c]",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "mov r3, 0",
            "ldr r2, [0x00078330]",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.000bfd70",
            "rsb ip, r0, r0, lsl 5",
            "rsb ip, ip, ip, lsl 6",
            "ldr r2, [0x00078334]",
            "add ip, r0, ip, lsl 3",
            "sub ip, r4, ip, lsl 6",
            "smull r3, r1, r2, ip",
            "smull r8, r7, r2, r0",
            "asr r3, r0, 0x1f",
            "asr r2, ip, 0x1f",
            "rsb r3, r3, r7, asr 12",
            "rsb r1, r2, r1, asr 12",
            "add r7, r3, r3, lsl 2",
            "add r8, r1, r1, lsl 2",
            "add r7, r7, r7, lsl 2",
            "add r8, r8, r8, lsl 2",
            "add r7, r7, r7, lsl 2",
            "add r8, r8, r8, lsl 2",
            "ldr r2, [0x00078338]",
            "add r8, r8, r8, lsl 2",
            "add r7, r7, r7, lsl 2",
            "sub r7, r0, r7, lsl 4",
            "sub r0, ip, r8, lsl 4",
            "smull ip, r8, r2, r0",
            "smull ip, sl, r2, r7",
            "asr r2, r7, 0x1f",
            "asr ip, r0, 0x1f",
            "rsb r2, r2, sl, asr 5",
            "rsb ip, ip, r8, asr 5",
            "add sl, r2, r2, lsl 2",
            "add r8, ip, ip, lsl 2",
            "ldr sb, [0x0007833c]",
            "add sl, sl, sl, lsl 2",
            "add r8, r8, r8, lsl 2",
            "sub r7, r7, sl, lsl 2",
            "sub r0, r0, r8, lsl 2",
            "cmp r3, sb",
            "str r3, [r6]",
            "stmib r6, {r2, r7}",
            "str r1, [r6, 0xc]",
            "str ip, [r6, 0x10]",
            "str r0, [r6, 0x14]",
            "bhi 0x781f4",
            "cmp r2, 0xc",
            "bhi 0x781f4",
            "cmp r7, 0x1f",
            "bhi 0x781f4",
            "cmp r1, 0x17",
            "bhi 0x781f4",
            "cmp ip, 0x3b",
            "bhi 0x781f4",
            "cmp r0, 0x3b",
            "bhi 0x781f4",
            "orrs r0, r4, r5",
            "mov r1, 0",
            "movne r1, 1",
            "mov r0, r6",
            "and r1, r1, 1",
            "ldr r2, [sp, 4]",
            "mov r3, fp",
            "bl rsym.check_date",
            "cmp r0, 0",
            "beq 0x7820c",
            "orrs r1, r4, r5",
            "beq 0x78234",
            "mov r3, 1",
            "str r3, [fp]",
            "mvn r4, 0",
            "mvn r5, 0",
            "mov r1, r5",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x00078340]",
            "cmp r0, r3",
            "bls 0x78080",
            "mov r2, 1",
            "b 0x78080",
            "ldr r3, [sp, 4]",
            "tst r3, 0x1000000",
            "bne 0x78204",
            "b 0x781fc",
            "bne 0x78254",
            "ldr r3, [0x00078344]",
            "cmp r4, r3",
            "bhi 0x780b8",
            "ldr r2, [0x00078348]",
            "ldr r3, [0x0007834c]",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "b 0x780e8",
            "bne 0x781fc",
            "cmp r4, 0x64",
            "bls 0x781fc",
            "ldr r3, [0x00078350]",
            "cmp r4, r3",
            "bls 0x782c4",
            "ldr r3, [0x00078354]",
            "cmp r4, r3",
            "bls 0x781fc",
            "cmp r4, 0xf2000",
            "blo 0x782e8",
            "ldr r3, [0x00078358]",
            "cmp r4, r3",
            "bls 0x781fc",
            "ldr r3, [0x0007835c]",
            "cmp r4, r3",
            "bls 0x782f4",
            "cmp r5, 0",
            "bne 0x781fc",
            "ldr r3, [0x00078360]",
            "cmp r4, r3",
            "bhi 0x780a8",
            "b 0x781fc",
            "ldr r2, [0x00078348]",
            "ldr r3, [0x0007834c]",
            "ldr r1, [0x00078330]",
            "mov r7, r2",
            "mov r8, r3",
            "umlal r7, r8, r4, r1",
            "mov r4, r7",
            "mov r5, r8",
            "b 0x780e8",
            "ldr r2, [0x00078328]",
            "ldr r3, [0x0007832c]",
            "b 0x782cc",
            "ldr r3, [0x00078330]",
            "umull r0, r1, r3, r4",
            "mul r2, r5, r3",
            "mov r4, r0",
            "add r5, r2, r1",
            "b 0x780e8",
            "bne 0x781fc",
            "ldr r3, [0x00078364]",
            "cmp r4, r3",
            "bhi 0x780c0",
            "b 0x781fc"
        ]
    },
    "fcn.000bfd70": {
        "function_address": "0x000bfd70",
        "instructions": [
            "sub sp, sp, 8",
            "push {sp, lr}",
            "bl fcn.000bff80",
            "ldr lr, [sp, 4]",
            "add sp, sp, 8",
            "pop {r2, r3}",
            "bx lr"
        ]
    },
    "fcn.0008ab4c": {
        "function_address": "0x0008ab4c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x14]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x10]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.cli_safe_read": {
        "function_address": "0x00075c54",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0]",
            "ldr r8, [0x00075d9c]",
            "cmp r3, 0",
            "mov r4, r0",
            "add r8, pc, r8",
            "beq 0x75d24",
            "bl rsym.my_net_read",
            "sub r3, r0, 1",
            "cmn r3, 3",
            "mov r5, r0",
            "bhi 0x75d24",
            "ldr r6, [r4, 0x10]",
            "ldrb r3, [r6]",
            "cmp r3, 0xff",
            "beq 0x75ca0",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r0, 3",
            "bls 0x75d64",
            "ldrb r1, [r6, 2]",
            "ldrb r3, [r6, 1]",
            "ldr r2, [r4, 0x2e0]",
            "add r3, r3, r1, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "tst r2, 0x200",
            "str r3, [r4, 0x58]",
            "add r7, r6, 3",
            "beq 0x75cdc",
            "ldrb r3, [r6, 3]",
            "cmp r3, 0x23",
            "beq 0x75d80",
            "ldr r3, [0x00075da0]",
            "add r0, r4, 0x25c",
            "ldr r3, [r8, r3]",
            "add r0, r0, 3",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r3, [0x00075da4]",
            "sub r2, r5, 2",
            "cmp r2, r3",
            "movhs r2, r3",
            "mov r1, r7",
            "add r0, r4, 0x5f",
            "bl rsym.strmake",
            "ldr r3, [r4, 0x2ec]",
            "mvn r5, 0",
            "bic r3, r3, 8",
            "str r3, [r4, 0x2ec]",
            "b 0x75c94",
            "mov r0, r4",
            "bl rsym.end_server",
            "ldr r3, [0x00075da0]",
            "ldr r1, [0x00075da8]",
            "ldr lr, [r4, 0x58]",
            "ldr r3, [r8, r3]",
            "ldr r2, [0x00075dac]",
            "ldr ip, [0x00075db0]",
            "cmp lr, r1",
            "movne r1, r2",
            "mov r0, r4",
            "moveq r1, ip",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mvn r5, 0",
            "b 0x75c94",
            "ldr r3, [0x00075da0]",
            "mov r0, r4",
            "ldr r3, [r8, r3]",
            "mov r1, 0x7d0",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x75d10",
            "add r0, r4, 0x25c",
            "add r0, r0, 3",
            "add r1, r6, 4",
            "mov r2, 5",
            "bl rsym.strmake",
            "add r7, r6, 9",
            "b 0x75cf4"
        ]
    },
    "rsym.my_net_read": {
        "function_address": "0x0003e5d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x114]!"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::SetPublicPart_TaoCrypt::Integer_const_": {
        "function_address": "0x000a11cc",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::EncodeDSA_Signature_TaoCrypt::Integer_const__TaoCrypt::Integer_const__unsigned_char_": {
        "function_address": "0x0009a604",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov r4, r2",
            "str r1, [sp, 0xc]",
            "str r0, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r6, r0",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "add sb, sp, 0x18",
            "mov r5, r0",
            "mov r2, 2",
            "add r1, sb, 1",
            "mov r0, r6",
            "strb r2, [sp, 0x10]",
            "strb r2, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt9SetLengthEjPh",
            "add ip, sp, 0x10",
            "add r1, ip, 1",
            "add sl, r0, 1",
            "mov r0, r5",
            "str ip, [sp, 8]",
            "bl rsym._ZN8TaoCrypt9SetLengthEjPh",
            "add r2, r5, r6",
            "add r7, r0, 1",
            "add r2, r2, sl",
            "add fp, sp, 0x20",
            "add r0, r2, r7",
            "mov r1, fp",
            "bl rsym._ZN8TaoCrypt11SetSequenceEjPh",
            "mov r8, r0",
            "mov r1, fp",
            "mov r2, r8",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "mov r1, sb",
            "mov r2, sl",
            "add r0, r4, r8",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 4]",
            "add fp, sl, r8",
            "add r1, r4, fp",
            "mov r2, r6",
            "mov r0, r3",
            "mov r3, 0",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr ip, [sp, 8]",
            "add r8, fp, r6",
            "mov r1, ip",
            "add r6, r8, r7",
            "mov r2, r7",
            "add r0, r4, r8",
            "bl sym.imp.memcpy",
            "ldr r0, [sp, 0xc]",
            "add r1, r4, r6",
            "mov r2, r5",
            "mov r3, 0",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "add r0, r6, r5",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_CTX_sess_accept_good": {
        "function_address": "0x00085bc8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_strdup": {
        "function_address": "0x00048bd4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r0",
            "bl sym.imp.strlen",
            "add r5, r0, 1",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "movne r1, r6",
            "movne r2, r5",
            "blne sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.get_index_dynamic": {
        "function_address": "0x000502b0",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "cmp r3, r1",
            "bls 0x502d0",
            "mvn r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "rsb r0, r3, r1",
            "ldr r1, [r4, 0x10]",
            "bl fcn.000bed20",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "bls 0x502c8",
            "b 0x502c4"
        ]
    },
    "sym.yaSSL_CTX_get_verify_depth": {
        "function_address": "0x00085abc",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x38]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::ByteCount___const": {
        "function_address": "0x000a6404",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r2, [0x000a6478]",
            "subs r4, r0, 0",
            "add r2, pc, r2",
            "moveq r0, r4",
            "bne 0xa642c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r5]",
            "sub r3, r4, 1",
            "cmp r3, r1",
            "bhs 0xa6454",
            "ldr r2, [r5, 4]",
            "sub r4, r4, 0xc0000001",
            "ldr r0, [r2, r3, lsl 2]",
            "bl rsym._ZN8TaoCrypt13BytePrecisionEj",
            "add r0, r0, r4, lsl 2",
            "b 0xa6424",
            "ldr r3, [0x000a647c]",
            "ldr r1, [0x000a6480]",
            "ldr r0, [0x000a6484]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt13BytePrecisionEj": {
        "function_address": "0x0003d8ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9dc]!"
        ]
    },
    "fcn.00087088": {
        "function_address": "0x00087088",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x870a4",
            "b 0x870b4",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x870a0",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007f064": {
        "function_address": "0x0007f064",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r6, [r6]",
            "mov r5, r0",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r6, 0x10",
            "add r0, r5, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [r6, 0x20]",
            "mov r3, 0",
            "str r2, [r5, 0x20]",
            "str r3, [r5, 0x2c]",
            "str r3, [r5, 0x24]",
            "str r3, [r5, 0x28]",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r6, r0",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x24]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x28]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r5, [r4]",
            "str r0, [r5, 0x2c]",
            "ldr r1, [r5, 0x20]",
            "mov r0, r5",
            "ldr r2, [r5, 0x28]",
            "ldr r3, [r5, 0x24]",
            "bl rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_": {
        "function_address": "0x0004036c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd5c]!"
        ]
    },
    "fcn.000af86c": {
        "function_address": "0x000af86c",
        "instructions": [
            "ldr ip, [0x000af8a8]",
            "ldr r3, [0x000af8ac]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000af8b0]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000af8b4]",
            "ldr r0, [0x000af8b8]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt::AbstractGroup.SimultaneousMultiply_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const__unsigned_int__const": {
        "function_address": "0x000989ac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x84",
            "mov r4, r0",
            "ldr r0, [sp, 0xa8]",
            "mov r7, r3",
            "str r1, [sp, 0x24]",
            "str r2, [sp, 0x2c]",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_6vectorIN8TaoCrypt7IntegerEEEEEPT_j",
            "mov r6, 0",
            "add r2, sp, 0x74",
            "ldr r1, [sp, 0xa8]",
            "str r0, [sp, 0xc]",
            "str r6, [sp, 0x74]",
            "str r6, [sp, 0x78]",
            "str r6, [sp, 0x7c]",
            "bl rsym._ZN5mySTL13uninit_fill_nIPNS_6vectorIN8TaoCrypt7IntegerEEEjS4_EET_S6_T0_RKT1_",
            "ldr r1, [sp, 0x78]",
            "str r0, [sp, 0x28]",
            "ldr r0, [sp, 0x74]",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "ldr r1, [0x000992e0]",
            "ldr r0, [sp, 0x74]",
            "str r1, [sp, 0x20]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_",
            "ldr r2, [sp, 0xa8]",
            "ldr r3, [sp, 0x20]",
            "cmp r2, r6",
            "add r3, pc, r3",
            "str r3, [sp, 0x20]",
            "moveq sb, r2",
            "streq r2, [sp, 0x14]",
            "bne 0x98de4",
            "add r1, sp, 0x64",
            "str r1, [sp, 8]",
            "ldr r0, [sp, 8]",
            "ldr r1, [sp, 0x2c]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [sp, 0xa8]",
            "cmp r2, 0",
            "beq 0x98d90",
            "mov r3, 0",
            "str r3, [sp, 4]",
            "mov r6, 0",
            "mov r7, r6",
            "mov r8, r6",
            "b 0x98a84",
            "cmp r8, 0",
            "ldrbeq r8, [r5, 0x2f]",
            "ldr r1, [sp, 0xa8]",
            "add r7, r7, 1",
            "eoreq r8, r8, 1",
            "cmp r1, r7",
            "add r6, r6, 0xc",
            "bls 0x98ba0",
            "add r5, sb, r6, lsl 2",
            "ldrb r3, [r5, 0x2f]",
            "cmp r3, 0",
            "bne 0x98a64",
            "ldr r3, [r5, 0x24]",
            "ldr ip, [sp, 4]",
            "cmp r3, ip",
            "bne 0x98a64",
            "ldr r1, [sp, 0xc]",
            "ldr sl, [r5, 0x28]",
            "ldrb r2, [r5, 0x2d]",
            "ldr r3, [r1, r6]",
            "lsr sl, sl, 1",
            "cmp r2, 0",
            "add sl, r3, sl, lsl 4",
            "beq 0x98cec",
            "ldr r3, [r4]",
            "ldr r1, [sp, 8]",
            "mov r0, r4",
            "ldr fp, [r3, 0x24]",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "mov r1, sl",
            "mov r2, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx fp",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldrb r3, [r5, 0x2e]",
            "mov r2, 0",
            "cmp r3, 0",
            "lsl fp, r0, 5",
            "movne sl, 0",
            "ldreq sl, [r5, 0x20]",
            "strb r2, [r5, 0x2e]",
            "b 0x98b28",
            "cmp fp, sl",
            "bls 0x98d0c",
            "add sl, sl, 1",
            "mov r0, r5",
            "mov r1, sl",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "beq 0x98b1c",
            "mov r1, sl",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "ldr r3, [r5, 0x24]",
            "ldr r1, [r5, 0x20]",
            "add r3, r3, sl",
            "mov ip, 1",
            "str r3, [r5, 0x24]",
            "lsl r1, ip, r1",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloEj",
            "ldrb r3, [r5, 0x2c]",
            "str r0, [r5, 0x28]",
            "cmp r3, 0",
            "bne 0x98d18",
            "cmp r8, 0",
            "ldrbeq r8, [r5, 0x2f]",
            "ldr r1, [sp, 0xa8]",
            "add r7, r7, 1",
            "mov ip, 0",
            "eoreq r8, r8, 1",
            "cmp r1, r7",
            "strb ip, [r5, 0x2d]",
            "add r6, r6, 0xc",
            "bhi 0x98a84",
            "cmp r8, 0",
            "bne 0x98d58",
            "ldr sl, [sp, 0x24]",
            "str sb, [sp, 8]",
            "mov fp, r8",
            "mov sb, r8",
            "ldr r3, [sp, 0xc]",
            "mov r0, sl",
            "add r8, r3, sb",
            "ldr r1, [r8, 4]",
            "ldr r3, [r3, sb]",
            "rsb r1, r3, r1",
            "bic r1, r1, 0xf",
            "sub r1, r1, 0x10",
            "add r1, r3, r1",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr ip, [sp, 0xc]",
            "ldr r3, [r8, 4]",
            "ldr r1, [ip, sb]",
            "add r2, sl, 0x10",
            "rsb r3, r1, r3",
            "asr r3, r3, 4",
            "cmp r3, 1",
            "str r2, [sp, 4]",
            "bls 0x98cd0",
            "sub r6, r3, 2",
            "cmp r6, 0",
            "ble 0x98c7c",
            "sub r7, r3, 1",
            "sub r3, r3, 0xf0000002",
            "lsl r5, r3, 4",
            "lsl r7, r7, 4",
            "b 0x98c28",
            "ldr r1, [r8]",
            "add r2, r1, r7",
            "ldr r3, [r4]",
            "add r1, r1, r5",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [r8]",
            "sub r6, r6, 1",
            "add r2, r2, r5",
            "ldr r3, [r4]",
            "mov r0, r4",
            "mov r1, sl",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "cmp r6, 0",
            "sub r5, r5, 0x10",
            "sub r7, r7, 0x10",
            "bgt 0x98c24",
            "ldr r1, [r8]",
            "add r2, r1, 0x10",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov r1, sl",
            "mov r0, r4",
            "ldr r5, [r3, 0x10]",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [r8]",
            "mov r1, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx r5",
            "mov r1, r0",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r3, [sp, 0xa8]",
            "add fp, fp, 1",
            "cmp r3, fp",
            "add sb, sb, 0xc",
            "bls 0x98d8c",
            "ldr sl, [sp, 4]",
            "b 0x98bb8",
            "mov r1, sl",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr r2, [sp, 8]",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x98af4",
            "mov r3, 1",
            "strb r3, [r5, 0x2f]",
            "b 0x98a64",
            "mov r0, r5",
            "ldr r1, [r5, 0x20]",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "beq 0x98b78",
            "ldr r3, [r5, 0x28]",
            "ldr r2, [r5, 0x20]",
            "mov ip, 1",
            "rsb r3, r3, ip, lsl r2",
            "mov r1, 1",
            "strb r1, [r5, 0x2d]",
            "str r3, [r5, 0x28]",
            "mov r0, r5",
            "add r1, r5, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "b 0x98a64",
            "ldr r3, [r4]",
            "ldr r1, [sp, 8]",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r2, [sp, 4]",
            "add r2, r2, 1",
            "str r2, [sp, 4]",
            "b 0x98a54",
            "ldr sb, [sp, 8]",
            "ldr r4, [sp, 0x68]",
            "ldr r2, [sp, 0x64]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r1, [sp, 0x14]",
            "mov r0, sb",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt12WindowSliderEEEvT_S4_",
            "mov r0, sb",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt12WindowSliderEEEvPT_",
            "ldr r0, [sp, 0xc]",
            "ldr r1, [sp, 0x28]",
            "bl rsym._ZN5mySTL7destroyIPNS_6vectorIN8TaoCrypt7IntegerEEEEEvT_S6_",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_6vectorIN8TaoCrypt7IntegerEEEEEvPT_",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [sp, 0xa8]",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt12WindowSliderEEEPT_j",
            "mov sl, r0",
            "mov r2, sl",
            "mov r1, r6",
            "mov r0, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt12WindowSliderES3_EET0_T_S5_S4_",
            "mov r1, r6",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt12WindowSliderEEEvT_S4_",
            "mov r0, r6",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt12WindowSliderEEEvPT_",
            "ldr r3, [r7, 0xc]",
            "cmp r3, 1",
            "beq 0x99264",
            "ldr r1, [sp, 0xa8]",
            "mov r3, 0x30",
            "mla r1, r3, r1, sl",
            "add r2, sp, 0x34",
            "add r3, r2, 0x10",
            "str r1, [sp, 0x1c]",
            "str r2, [sp, 0x10]",
            "str r6, [sp, 4]",
            "str r3, [sp, 8]",
            "mov r8, r6",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r7",
            "mov sb, r0",
            "ldr r0, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "mov r1, r0",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov ip, 1",
            "mov r0, r7",
            "strb sb, [sp, 0x60]",
            "str r8, [sp, 0x54]",
            "str r8, [sp, 0x58]",
            "strb ip, [sp, 0x62]",
            "strb r8, [sp, 0x63]",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "cmp r0, 0x11",
            "movls r3, 1",
            "bls 0x98ef0",
            "cmp r0, 0x18",
            "movls r3, 2",
            "bls 0x98ef0",
            "cmp r0, 0x46",
            "movls r3, 3",
            "bls 0x98ef0",
            "cmp r0, 0xc5",
            "movls r3, 4",
            "bls 0x98ef0",
            "ldr r1, [0x000992e4]",
            "cmp r0, r1",
            "movls r3, 5",
            "bls 0x98ef0",
            "ldr r2, [0x000992e8]",
            "cmp r0, r2",
            "movls r3, 6",
            "movhi r3, 7",
            "mov r1, r3",
            "ldr r0, [sp, 8]",
            "str r3, [sp, 0x54]",
            "bl rsym._ZN8TaoCrypt7IntegerlSEj",
            "ldr r3, [sp, 0x1c]",
            "cmp r5, r3",
            "beq 0x99190",
            "ldr r1, [sp, 0x10]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r5, 0x10",
            "ldr r1, [sp, 8]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr ip, [sp, 0x54]",
            "ldrb r0, [sp, 0x60]",
            "str ip, [r5, 0x20]",
            "ldr ip, [sp, 0x58]",
            "ldrb r1, [sp, 0x61]",
            "str ip, [r5, 0x24]",
            "ldrb r2, [sp, 0x62]",
            "ldrb r3, [sp, 0x63]",
            "ldr ip, [sp, 0x5c]",
            "strb r0, [r5, 0x2c]",
            "str ip, [r5, 0x28]",
            "strb r1, [r5, 0x2d]",
            "strb r2, [r5, 0x2e]",
            "strb r3, [r5, 0x2f]",
            "add r5, r5, 0x30",
            "str r5, [sp, 0x14]",
            "mov sb, sl",
            "ldr r5, [sp, 0x48]",
            "ldr r2, [sp, 0x44]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x38]",
            "ldr r2, [sp, 0x34]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "add sl, sb, r6, lsl 2",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sl",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldrb r3, [sl, 0x2e]",
            "lsl fp, r0, 5",
            "cmp r3, 0",
            "movne r5, 0",
            "ldreq r5, [sl, 0x20]",
            "strb r8, [sl, 0x2e]",
            "b 0x98fdc",
            "cmp fp, r5",
            "bls 0x99114",
            "add r5, r5, 1",
            "mov r0, sl",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "beq 0x98fd0",
            "mov r1, r5",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "ldr r3, [sl, 0x24]",
            "ldr r1, [sl, 0x20]",
            "add r3, r3, r5",
            "mov r2, 1",
            "str r3, [sl, 0x24]",
            "lsl r1, r2, r1",
            "mov r0, sl",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloEj",
            "ldrb r3, [sl, 0x2c]",
            "str r0, [sl, 0x28]",
            "cmp r3, 0",
            "bne 0x990d4",
            "strb r8, [sl, 0x2d]",
            "ldr sl, [sl, 0x20]",
            "ldr r2, [sp, 0xc]",
            "mov r3, 1",
            "sub sl, sl, 1",
            "lsl sl, r3, sl",
            "mov r0, r4",
            "ldr r3, [r4]",
            "add r5, r2, r6",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr ip, [sp, 0xc]",
            "ldr r1, [r5, 4]",
            "ldr r3, [ip, r6]",
            "str r0, [sp, 0x18]",
            "rsb r2, r3, r1",
            "cmp sl, r2, asr 4",
            "beq 0x9909c",
            "bhs 0x99120",
            "add sl, r3, sl, lsl 4",
            "mov r0, sl",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "ldr r3, [r5, 4]",
            "rsb sl, sl, r3",
            "bic sl, sl, 0xf",
            "rsb r3, sl, r3",
            "str r3, [r5, 4]",
            "ldr r3, [sp, 4]",
            "ldr ip, [sp, 0xa8]",
            "add r3, r3, 1",
            "cmp ip, r3",
            "str r3, [sp, 4]",
            "bls 0x98a2c",
            "add r7, r7, 0x10",
            "ldr r3, [r7, 0xc]",
            "add r6, r6, 0xc",
            "cmp r3, 1",
            "beq 0x99264",
            "mov sl, sb",
            "ldr r5, [sp, 0x14]",
            "b 0x98e4c",
            "mov r0, sl",
            "ldr r1, [sl, 0x20]",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, 0",
            "beq 0x9902c",
            "ldr r2, [sl, 0x28]",
            "ldr r3, [sl, 0x20]",
            "mov r1, 1",
            "rsb r3, r2, r1, lsl r3",
            "mov ip, 1",
            "strb ip, [sl, 0x2d]",
            "str r3, [sl, 0x28]",
            "mov r0, sl",
            "add r1, sl, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "b 0x99030",
            "mov r1, 1",
            "strb r1, [sl, 0x2f]",
            "b 0x99030",
            "mov r0, sl",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt7IntegerEEEPT_j",
            "ldr r1, [r5, 4]",
            "mov fp, r0",
            "ldr r0, [r5]",
            "rsb r3, r0, r1",
            "cmp sl, r3, asr 4",
            "bls 0x992b4",
            "mov r2, fp",
            "bl rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt7IntegerES3_EET0_T_S5_S4_",
            "ldr r1, [r5, 4]",
            "ldr r3, [r5]",
            "ldr r2, [sp, 0x18]",
            "rsb r3, r3, r1",
            "sub r1, sl, r3, asr 4",
            "bl rsym._ZN5mySTL13uninit_fill_nIPN8TaoCrypt7IntegerEjS2_EET_S4_T0_RKT1_",
            "ldr r3, [r5]",
            "add sl, fp, sl, lsl 4",
            "ldr r1, [r5, 4]",
            "stmib r5, {r0, sl}",
            "str fp, [r5]",
            "mov r0, r3",
            "str r3, [sp]",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "ldr r3, [sp]",
            "mov r0, r3",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_",
            "b 0x9909c",
            "rsb r3, sl, r5",
            "asr r3, r3, 4",
            "add fp, r3, r3, lsl 2",
            "add fp, fp, fp, lsl 4",
            "add fp, fp, fp, lsl 8",
            "add fp, fp, fp, lsl 16",
            "add fp, r3, fp, lsl 1",
            "lsl r3, fp, 1",
            "add r3, r3, 1",
            "mov r0, r3",
            "str r3, [sp]",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt12WindowSliderEEEPT_j",
            "ldr r3, [sp]",
            "mov sb, r0",
            "cmp fp, r3",
            "bhs 0x9928c",
            "ldr r1, [sp, 0x1c]",
            "mov r0, sl",
            "mov r2, sb",
            "str r3, [sp]",
            "bl rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt12WindowSliderES3_EET0_T_S5_S4_",
            "ldr r3, [sp]",
            "mov fp, r0",
            "add r3, r3, r3, lsl 1",
            "add r3, sb, r3, lsl 4",
            "str r3, [sp, 0x1c]",
            "ldr r1, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r1, [sp, 8]",
            "add r0, fp, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr ip, [sp, 0x54]",
            "ldrb r1, [sp, 0x62]",
            "str ip, [fp, 0x20]",
            "ldr ip, [sp, 0x58]",
            "ldrb r0, [sp, 0x63]",
            "ldrb r2, [sp, 0x60]",
            "ldrb r3, [sp, 0x61]",
            "str ip, [fp, 0x24]",
            "ldr ip, [sp, 0x5c]",
            "strb r2, [fp, 0x2c]",
            "str ip, [fp, 0x28]",
            "strb r3, [fp, 0x2d]",
            "strb r1, [fp, 0x2e]",
            "strb r0, [fp, 0x2f]",
            "mov r1, r5",
            "mov r0, sl",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt12WindowSliderEEEvT_S4_",
            "add fp, fp, 0x30",
            "mov r0, sl",
            "str fp, [sp, 0x14]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt12WindowSliderEEEvPT_",
            "b 0x98f68",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [0x000992ec]",
            "ldr r1, [0x000992f0]",
            "ldr r0, [0x000992f4]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0xfa",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [0x000992ec]",
            "ldr r1, [0x000992f8]",
            "ldr r0, [0x000992fc]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xf0",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [0x000992ec]",
            "ldr r2, [sp, 0x20]",
            "add r3, r1, r3",
            "ldr r0, [0x000992fc]",
            "ldr r1, [0x000992f8]",
            "add r0, r2, r0",
            "add r1, r2, r1",
            "add r3, r3, 0x14c",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryINS_6vectorIN8TaoCrypt7IntegerEEEEEPT_j": {
        "function_address": "0x0003f2ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x85c]!"
        ]
    },
    "rsym._ZN5mySTL13uninit_fill_nIPNS_6vectorIN8TaoCrypt7IntegerEEEjS4_EET_S6_T0_RKT1_": {
        "function_address": "0x0003d6fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xafc]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerrSEj": {
        "function_address": "0x0003eb0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd9c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer6ModuloEj": {
        "function_address": "0x0003fc40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x224]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerpLERKS0_": {
        "function_address": "0x0003ed64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc0c]!"
        ]
    },
    "rsym._ZN5mySTL7destroyIPN8TaoCrypt12WindowSliderEEEvT_S4_": {
        "function_address": "0x0003cc7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1fc]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt12WindowSliderEEEvPT_": {
        "function_address": "0x0003e5cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x11c]!"
        ]
    },
    "rsym._ZN5mySTL7destroyIPNS_6vectorIN8TaoCrypt7IntegerEEEEEvT_S6_": {
        "function_address": "0x0003eefc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xafc]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryINS_6vectorIN8TaoCrypt7IntegerEEEEEvPT_": {
        "function_address": "0x0003ea4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe1c]!"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt12WindowSliderEEEPT_j": {
        "function_address": "0x0003e0ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x45c]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt12WindowSliderES3_EET0_T_S5_S4_": {
        "function_address": "0x0003d804",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa4c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerlSEj": {
        "function_address": "0x0003ce50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xc4]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt7IntegerES3_EET0_T_S5_S4_": {
        "function_address": "0x0003f4f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x704]!"
        ]
    },
    "sym.my_thread_end": {
        "function_address": "0x0004d4ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0004d590]",
            "ldr r5, [0x0004d594]",
            "add r4, pc, r4",
            "ldr r3, [r4, r5]",
            "ldr r0, [r3]",
            "bl sym.imp.pthread_getspecific",
            "subs r6, r0, 0",
            "beq 0x4d51c",
            "ldrb r3, [r6, 0x70]",
            "cmp r3, 0",
            "bne 0x4d534",
            "ldr r3, [r4, r5]",
            "mov r1, 0",
            "ldr r0, [r3]",
            "bl sym.imp.pthread_setspecific",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r0, r6, 8",
            "bl sym.imp.pthread_cond_destroy",
            "ldr r7, [0x0004d598]",
            "add r0, r6, 0x38",
            "bl sym.imp.pthread_mutex_destroy",
            "mov r0, r6",
            "bl sym.imp.free",
            "ldr r0, [r4, r7]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x0004d59c]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "sub r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3]",
            "beq 0x4d580",
            "ldr r0, [r4, r7]",
            "bl sym.imp.pthread_mutex_unlock",
            "b 0x4d51c",
            "ldr r3, [0x0004d5a0]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_cond_signal",
            "b 0x4d574"
        ]
    },
    "sym.imp.pthread_setspecific": {
        "function_address": "0x0003f0ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9dc]!"
        ]
    },
    "sym.imp.pthread_cond_signal": {
        "function_address": "0x0003e950",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xec4]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::CertificateRequest_const_": {
        "function_address": "0x0008c6e0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "sub sp, sp, 0xc",
            "ldr r1, [0x0008c7c4]",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r4, 0x24]",
            "strb r3, [r0]",
            "ldr r3, [r4, 0x24]",
            "cmp r3, 0",
            "ble 0x8c73c",
            "mov r7, r4",
            "mov r6, 0",
            "mov r0, r5",
            "ldr r1, [0x0008c7c4]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r7, 8]",
            "add r6, r6, 1",
            "strb r3, [r0]",
            "ldr r3, [r4, 0x24]",
            "add r7, r7, 4",
            "cmp r3, r6",
            "bgt 0x8c714",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r2, [r4, 0x24]",
            "mvn r3, 2",
            "rsb r3, r2, r3",
            "add r0, r3, r0",
            "add r6, sp, 4",
            "lsl r0, r0, 0x10",
            "lsr r0, r0, 0x10",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "ldr r4, [r4, 0x28]",
            "cmp r4, 0",
            "beq 0x8c7b4",
            "add r6, sp, 2",
            "ldr r0, [r4, 8]",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh r2, [sp, 2]",
            "ldr r1, [r4, 8]",
            "add r2, r2, 2",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "ldr r4, [r4, 4]",
            "cmp r4, 0",
            "bne 0x8c788",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "fcn.00084c58": {
        "function_address": "0x00084c58",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r4, r0",
            "bl sym.imp.pthread_mutex_init",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_mutex_init": {
        "function_address": "0x0003ef80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xaa4]!"
        ]
    },
    "fcn.00094b38": {
        "function_address": "0x00094b38",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "str r2, [r4, 4]",
            "mov r5, r2",
            "mov r6, r1",
            "mov r1, 0",
            "add r0, r2, 1",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r1, r6",
            "str r0, [r4, 8]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "str r3, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000926b4": {
        "function_address": "0x000926b4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellmanEEEvPT_",
            "mov r5, r4",
            "ldr r0, [r4, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "ldr r0, [r5], 0x10",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11CertManagerD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolD1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellmanEEEvPT_": {
        "function_address": "0x0003d1b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe84]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_": {
        "function_address": "0x0003e4d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1c4]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManagerD1Ev": {
        "function_address": "0x0003cfa0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfe4]!"
        ]
    },
    "sym.init_alloc_root": {
        "function_address": "0x0004c3a0",
        "instructions": [
            "mov r3, 0x20",
            "push {r4, r5, r6, r7, r8, lr}",
            "sub r1, r1, 0x1c",
            "mov r5, 0",
            "str r3, [r0, 0xc]",
            "subs r6, r2, 0",
            "mov r3, 4",
            "mov r4, r0",
            "str r1, [r0, 0x10]",
            "str r3, [r0, 0x14]",
            "str r5, [r0, 8]",
            "str r5, [r0, 4]",
            "str r5, [r0]",
            "str r5, [r0, 0x1c]",
            "str r5, [r0, 0x18]",
            "beq 0x4c410",
            "add r7, r6, 0x10",
            "mov r0, r7",
            "mov r1, r5",
            "bl rsym.my_malloc",
            "cmp r0, r5",
            "str r0, [r4]",
            "str r0, [r4, 8]",
            "strne r7, [r0, 8]",
            "ldrne r3, [r4]",
            "strne r6, [r3, 4]",
            "ldrne r3, [r4]",
            "strne r5, [r3]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d04c": {
        "function_address": "0x0007d04c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d090]",
            "ldr r3, [0x0007d094]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7DES_EDE11DES_EDEImplEEEvPT_",
            "ldr r3, [0x0007d098]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_7DES_EDE11DES_EDEImplEEEvPT_": {
        "function_address": "0x000409e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x90c]!"
        ]
    },
    "fcn.00081268": {
        "function_address": "0x00081268",
        "instructions": [
            "ldr ip, [0x000812a8]",
            "ldr r3, [0x000812ac]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000812b0]",
            "add r2, r3, 8",
            "ldr r3, [0x000812b4]",
            "str r2, [r0]",
            "ldr r0, [0x000812b8]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.000a21e4": {
        "function_address": "0x000a21e4",
        "instructions": [
            "ldr ip, [0x000a2260]",
            "ldr r3, [0x000a2264]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "cmp r1, 8",
            "add r3, r3, 8",
            "push {r4, lr}",
            "str r3, [r0]",
            "bhi 0xa2218",
            "cmp r2, 0x40",
            "bhi 0xa223c",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x000a2268]",
            "ldr r1, [0x000a226c]",
            "ldr r0, [0x000a2270]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x22",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a2268]",
            "ldr r1, [0x000a226c]",
            "ldr r0, [0x000a2274]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x23",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007c620": {
        "function_address": "0x0007c620",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "str r5, [r0, 8]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "str r5, [r4, 0x1c]",
            "str r5, [r4, 0x20]",
            "str r5, [r4, 0x24]",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "str r5, [r4, 0x54]",
            "str r5, [r4, 0x38]",
            "str r5, [r4, 0x44]",
            "str r5, [r4, 0x48]",
            "str r5, [r4, 0x4c]",
            "strb r5, [r4, 0x50]",
            "strb r5, [r4, 0x51]",
            "strb r5, [r4, 0x52]",
            "strb r5, [r4, 0x53]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_manager_connect": {
        "function_address": "0x00048240",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [0x00048634]",
            "sub sp, sp, 0x940",
            "subs fp, r1, 0",
            "add r5, pc, r5",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r7, r2",
            "mov r6, r3",
            "beq 0x48514",
            "cmp r7, 0",
            "beq 0x48524",
            "cmp r6, 0",
            "beq 0x48534",
            "mov r0, 2",
            "mov r1, 1",
            "mov r2, 0",
            "bl sym.imp.socket",
            "cmn r0, 1",
            "mov r8, r0",
            "beq 0x48598",
            "mov r1, 1",
            "mov r2, 0",
            "bl rsym.vio_new",
            "subs sl, r0, 0",
            "beq 0x485c0",
            "add r2, sp, 0x940",
            "add r2, r2, 7",
            "mov r1, 1",
            "add sb, sp, 0x930",
            "ldr ip, [sl, 0x70]",
            "mov lr, pc",
            "bx ip",
            "mov r1, sl",
            "add r2, sb, 4",
            "mov r0, r4",
            "str r2, [sp, 0x14]",
            "bl rsym.my_net_init",
            "ldr lr, [sp, 0x14]",
            "mov r3, 0",
            "add r2, lr, 4",
            "str r3, [r2], 4",
            "str r3, [r2]",
            "mov r1, 2",
            "add r2, sp, 0x900",
            "str r3, [sp, 0x930]",
            "mov r0, fp",
            "strh r1, [r2, 0x30]",
            "str r3, [sp, 0x934]",
            "bl sym.imp.inet_addr",
            "cmn r0, 1",
            "mov sl, r0",
            "strne r0, [sp, 0x934]",
            "beq 0x48470",
            "ldr ip, [sp, 0x970]",
            "add lr, sp, 0x900",
            "lsl ip, ip, 0x10",
            "lsr r3, ip, 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "orr ip, r3, ip, lsr 24",
            "mov r0, r8",
            "mov r1, sb",
            "mov r2, 0x10",
            "mov r3, 0",
            "strh ip, [lr, 0x32]",
            "bl rsym.my_connect",
            "cmp r0, 0",
            "bne 0x48540",
            "mov r0, r4",
            "bl rsym.my_net_read",
            "cmn r0, 1",
            "beq 0x48570",
            "add r8, sp, 0x810",
            "ldr r3, [0x00048638]",
            "add r8, r8, 0xc",
            "add r3, r5, r3",
            "mov r1, 1",
            "mov r2, 0x100",
            "mov r0, r8",
            "str r7, [sp]",
            "str r6, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, r8",
            "bl sym.imp.strlen",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x484b8",
            "mov r0, r4",
            "bl rsym.net_flush",
            "subs r8, r0, 0",
            "bne 0x484b8",
            "mov r0, r4",
            "bl rsym.my_net_read",
            "cmn r0, 1",
            "beq 0x48570",
            "ldr r0, [r4, 0x10]",
            "mov r1, r8",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "cmp r0, 0xc8",
            "str r0, [r4, 0x288]",
            "bne 0x484f8",
            "mov r0, fp",
            "bl sym.imp.strlen",
            "mov sb, r0",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "mov sl, r0",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "add sl, sl, 1",
            "add lr, r0, 1",
            "add ip, r4, 0x274",
            "add r2, sb, 1",
            "mov r0, r8",
            "add r1, r4, 0x26c",
            "add r3, r4, 0x270",
            "stm sp, {sl, ip, lr}",
            "str r8, [sp, 0xc]",
            "bl rsym.my_multi_malloc",
            "cmp r0, 0",
            "beq 0x485e4",
            "mov r1, fp",
            "ldr r0, [r4, 0x26c]",
            "bl sym.imp.strcpy",
            "mov r1, r7",
            "ldr r0, [r4, 0x270]",
            "bl sym.imp.strcpy",
            "mov r1, r6",
            "ldr r0, [r4, 0x274]",
            "bl sym.imp.strcpy",
            "mov r0, r4",
            "add sp, sp, 0x14c",
            "add sp, sp, 0x800",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r2, sp, 0x28",
            "add r1, sp, 0x910",
            "mov r3, 0x800",
            "add ip, sp, 0x940",
            "sub r2, r2, 0xc",
            "mov r0, fp",
            "add r1, r1, 0xc",
            "str ip, [sp]",
            "bl rsym.my_gethostbyname_r",
            "subs r3, r0, 0",
            "beq 0x48608",
            "ldr r2, [r3, 0x10]",
            "ldr r0, [sp, 0x14]",
            "ldr r1, [r2]",
            "ldr r2, [r3, 0xc]",
            "mov r3, 0xc",
            "bl sym.imp.__memcpy_chk",
            "b 0x48318",
            "ldr r3, [r4, 0x58]",
            "ldr r1, [0x0004863c]",
            "add r0, r4, 0x294",
            "str r3, [r4, 0x28c]",
            "add r1, r5, r1",
            "add r0, r0, 2",
            "mov r2, 0x16",
            "bl sym.imp.memcpy",
            "ldrb r6, [r4, 0x294]",
            "mov r5, 0",
            "strb r5, [r4, 0x294]",
            "mov r0, r4",
            "bl rsym.mysql_manager_close",
            "strb r6, [r4, 0x294]",
            "mov r4, r5",
            "b 0x4845c",
            "ldr r1, [0x00048640]",
            "add r0, r4, 0x294",
            "add r1, r5, r1",
            "mov r2, 0xe",
            "add r0, r0, 2",
            "bl sym.imp.memcpy",
            "b 0x484d8",
            "ldr fp, [0x00048644]",
            "cmp r7, 0",
            "add fp, r5, fp",
            "bne 0x48270",
            "ldr r7, [0x00048648]",
            "cmp r6, 0",
            "add r7, r5, r7",
            "bne 0x48278",
            "ldr r6, [0x0004864c]",
            "add r6, r5, r6",
            "b 0x48278",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "add r0, r4, 0x294",
            "str r3, [r4, 0x28c]",
            "ldr r3, [0x00048650]",
            "mov r1, 1",
            "add r3, r5, r3",
            "mvn r2, 0",
            "add r0, r0, 2",
            "str fp, [sp]",
            "bl sym.imp.__sprintf_chk",
            "b 0x484d8",
            "bl sym.imp.__errno_location",
            "ldr r1, [0x00048654]",
            "ldr r3, [r0]",
            "add r0, r4, 0x294",
            "str r3, [r4, 0x28c]",
            "add r1, r5, r1",
            "mov r2, 0x15",
            "add r0, r0, 2",
            "bl sym.imp.memcpy",
            "b 0x484d8",
            "bl sym.imp.__errno_location",
            "ldr r1, [0x00048658]",
            "ldr r3, [r0]",
            "add r0, r4, 0x294",
            "str r3, [r4, 0x28c]",
            "add r1, r5, r1",
            "mov r2, 0x15",
            "add r0, r0, 2",
            "bl sym.imp.memcpy",
            "b 0x484d8",
            "ldr r1, [0x0004865c]",
            "add r0, r4, 0x294",
            "mov r3, 0xc",
            "str r3, [r4, 0x28c]",
            "add r1, r5, r1",
            "mov r2, 0x21",
            "add r0, r0, 2",
            "bl sym.imp.memcpy",
            "b 0x484d8",
            "ldr r1, [0x00048660]",
            "add r0, r4, 0x294",
            "mov r3, 0xc",
            "str r3, [r4, 0x28c]",
            "add r1, r5, r1",
            "mov r2, 0xe",
            "add r0, r0, 2",
            "bl sym.imp.memcpy",
            "b 0x484d8",
            "ldr r3, [sp, 0x940]",
            "add r0, r4, 0x294",
            "str r3, [r4, 0x28c]",
            "ldr r3, [0x00048664]",
            "mov r2, sl",
            "add r3, r5, r3",
            "mov r1, 1",
            "add r0, r0, 2",
            "str fp, [sp]",
            "bl sym.imp.__sprintf_chk",
            "b 0x484d8"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x0003e3c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x274]!"
        ]
    },
    "rsym.vio_new": {
        "function_address": "0x0003ef8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa9c]!"
        ]
    },
    "rsym.my_net_init": {
        "function_address": "0x0003fbd4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x26c]!"
        ]
    },
    "sym.imp.inet_addr": {
        "function_address": "0x0003d528",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc34]!"
        ]
    },
    "rsym.my_connect": {
        "function_address": "0x0004084c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa1c]!"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x0003eb6c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd5c]!"
        ]
    },
    "rsym.my_multi_malloc": {
        "function_address": "0x000400fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xefc]!"
        ]
    },
    "rsym.my_gethostbyname_r": {
        "function_address": "0x0003eecc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb1c]!"
        ]
    },
    "rsym.mysql_manager_close": {
        "function_address": "0x0003e8e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf0c]!"
        ]
    },
    "fcn.00090af4": {
        "function_address": "0x00090af4",
        "instructions": [
            "ldr ip, [0x00090b30]",
            "ldr r3, [0x00090b34]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090b38]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090b3c]",
            "ldr r0, [0x00090b40]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_CTX_sess_hits": {
        "function_address": "0x00085b78",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x18]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.alloc_dynamic": {
        "function_address": "0x00050530",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 4]",
            "ldr r2, [r0, 8]",
            "mov r4, r0",
            "cmp r3, r2",
            "ldrne r5, [r0]",
            "beq 0x50564",
            "ldr r2, [r4, 0x10]",
            "add r1, r3, 1",
            "mla r0, r2, r3, r5",
            "str r1, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r2, r0",
            "ldr r0, [r2], 0x14",
            "cmp r0, r2",
            "beq 0x505b0",
            "ldr r2, [r4, 0xc]",
            "ldr r1, [r4, 0x10]",
            "add r3, r3, r2",
            "mul r1, r3, r1",
            "mov r2, 0x50",
            "bl rsym.my_realloc",
            "subs r5, r0, 0",
            "beq 0x505e4",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 0xc]",
            "ldr r3, [r4, 4]",
            "add r2, r1, r2",
            "str r2, [r4, 8]",
            "str r5, [r4]",
            "b 0x5054c",
            "ldr r2, [r4, 0xc]",
            "ldr r0, [r4, 0x10]",
            "add r3, r3, r2",
            "mul r0, r3, r0",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "beq 0x505e4",
            "ldr r3, [r4, 0x10]",
            "ldm r4, {r1, r2}",
            "mul r2, r3, r2",
            "bl sym.imp.memcpy",
            "b 0x50594",
            "mov r0, 0",
            "b 0x5055c"
        ]
    },
    "sym.TaoCrypt::Base64Decoder::Decode__": {
        "function_address": "0x0009ef8c",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [r3]",
            "sub sp, sp, 0x1c",
            "add r3, r4, 0x3f",
            "add r7, r4, 1",
            "sub r7, r7, r3, lsr 6",
            "add r7, r7, r7, lsl 1",
            "add r3, r0, 8",
            "lsr r7, r7, 2",
            "mov r6, r0",
            "ldr r1, [r0, 4]",
            "ldr r2, [r0]",
            "str r3, [sp, 0x14]",
            "mov r0, r3",
            "mov r5, 0",
            "mov r3, r7",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr ip, [0x0009f368]",
            "cmp r4, 3",
            "add ip, pc, ip",
            "str r0, [r6, 4]",
            "str ip, [sp, 0x10]",
            "str r7, [r6]",
            "bls 0x9f19c",
            "ldr r3, [r6, 0xc]",
            "ldr ip, [r3, 0xc]",
            "ldr r0, [r3]",
            "add r1, ip, 1",
            "cmp ip, r0",
            "str r1, [r3, 0xc]",
            "bhs 0x9f338",
            "ldr r7, [r3, 4]",
            "add r2, r1, 1",
            "cmp r0, r1",
            "ldrb r8, [r7, ip]",
            "str r2, [r3, 0xc]",
            "bls 0x9f304",
            "cmp r2, r0",
            "add r0, r2, 1",
            "ldrb sl, [r7, r1]",
            "str r0, [r3, 0xc]",
            "bhs 0x9f2f0",
            "ldr r7, [0x0009f36c]",
            "ldr ip, [sp, 0x10]",
            "str r7, [sp, 8]",
            "mov r0, r5",
            "add r1, ip, r7",
            "b 0x9f0d8",
            "cmp r3, 0x3d",
            "beq 0x9f198",
            "ldr r3, [r6]",
            "cmp r5, r3",
            "bhs 0x9f29c",
            "add r0, r0, 1",
            "ldr r3, [r6, 4]",
            "orr r7, sb, r7",
            "tst r0, 0xf",
            "strb r7, [r3, r5]",
            "sub r4, r4, 4",
            "beq 0x9f1e0",
            "cmp r4, 3",
            "add r5, r5, 1",
            "bls 0x9f198",
            "ldr r3, [r6, 0xc]",
            "ldr r8, [r3, 0xc]",
            "ldr r7, [r3]",
            "add ip, r8, 1",
            "cmp r8, r7",
            "str ip, [r3, 0xc]",
            "bhs 0x9f340",
            "ldr sl, [r3, 4]",
            "add r2, ip, 1",
            "cmp ip, r7",
            "ldrb r8, [sl, r8]",
            "str r2, [r3, 0xc]",
            "bhs 0x9f30c",
            "cmp r2, r7",
            "add r7, r2, 1",
            "ldrb sl, [sl, ip]",
            "str r7, [r3, 0xc]",
            "bhs 0x9f2f8",
            "ldr ip, [r3, 0xc]",
            "ldr sb, [r3]",
            "ldr r7, [r3, 4]",
            "cmp ip, sb",
            "add sb, ip, 1",
            "ldrb r2, [r7, r2]",
            "str sb, [r3, 0xc]",
            "bhs 0x9f2c4",
            "cmp r8, 0",
            "ldrb r3, [r7, ip]",
            "beq 0x9f198",
            "ldr r7, [sp, 8]",
            "cmp r2, 0x3d",
            "str r7, [sp, 0xc]",
            "addne r7, r1, r2",
            "ldrbne fp, [r7, 0x129]",
            "moveq r7, 0",
            "lslne r7, fp, 6",
            "add sl, r1, sl",
            "moveq fp, r7",
            "andne r7, r7, 0xff",
            "lsrne fp, fp, 2",
            "cmp r3, 0x3d",
            "ldrb ip, [sl, 0x129]",
            "addne sl, r1, r3",
            "ldrbne sb, [sl, 0x129]",
            "ldr sl, [r6]",
            "add r8, r1, r8",
            "moveq sb, 0",
            "cmp sl, r5",
            "ldrb r8, [r8, 0x129]",
            "bls 0x9f29c",
            "lsl r8, r8, 2",
            "ldr sl, [r6, 4]",
            "orr r8, r8, ip, lsr 4",
            "cmp r2, 0x3d",
            "strb r8, [sl, r5]",
            "add r5, r5, 1",
            "beq 0x9f054",
            "ldr r2, [r6]",
            "cmp r5, r2",
            "bhs 0x9f354",
            "ldr r2, [r6, 4]",
            "orr ip, fp, ip, lsl 4",
            "cmp r3, 0x3d",
            "strb ip, [r2, r5]",
            "add r5, r5, 1",
            "bne 0x9f05c",
            "ldr r7, [r6]",
            "cmp r5, r7",
            "beq 0x9f1c8",
            "ldr r1, [r6, 4]",
            "mov ip, 1",
            "ldr r0, [sp, 0x14]",
            "mov r2, r7",
            "mov r3, r5",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r6]",
            "str r0, [r6, 4]",
            "mov r1, r6",
            "ldr r0, [r6, 0xc]",
            "bl rsym._ZN8TaoCrypt6Source5resetERNS_5BlockIhNS_20AllocatorWithCleanupIhEEEE",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r6, 0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r7, r2, 1",
            "cmp r2, ip",
            "str r7, [r3, 0xc]",
            "bhs 0x9f354",
            "ldr r8, [r3, 4]",
            "sub r4, r4, 1",
            "ldrb r2, [r8, r2]",
            "cmp r2, 0x20",
            "bne 0x9f258",
            "add r2, r7, 1",
            "cmp r7, ip",
            "str r2, [r3, 0xc]",
            "mov r2, r3",
            "blo 0x9f244",
            "b 0x9f29c",
            "ldr r7, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r2, r7, 1",
            "cmp r7, ip",
            "str r2, [r3, 0xc]",
            "mov r2, r3",
            "bhs 0x9f29c",
            "ldr r2, [r2, 4]",
            "sub r4, r4, 1",
            "ldrb r2, [r2, r7]",
            "cmp r2, 0x20",
            "beq 0x9f228",
            "cmp r2, 0xd",
            "beq 0x9f274",
            "cmp r2, 0xa",
            "beq 0x9f084",
            "ldr r2, [0x0009f370]",
            "str r2, [r3, 0x10]",
            "b 0x9f1d4",
            "ldr r2, [r3, 0xc]",
            "ldr r7, [r3]",
            "add ip, r2, 1",
            "cmp r2, r7",
            "str ip, [r3, 0xc]",
            "bhs 0x9f354",
            "ldr ip, [r3, 4]",
            "sub r4, r4, 1",
            "ldrb r2, [ip, r2]",
            "b 0x9f260",
            "ldr ip, [sp, 0x10]",
            "ldr r1, [sp, 8]",
            "add r3, ip, r1",
            "ldr r0, [0x0009f374]",
            "ldr r1, [0x0009f378]",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r1, [sp, 0x10]",
            "ldr r3, [0x0009f36c]",
            "ldr r2, [sp, 0x10]",
            "add r3, r1, r3",
            "ldr r1, [0x0009f378]",
            "ldr r0, [0x0009f374]",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009f36c]",
            "str r3, [sp, 0xc]",
            "ldr ip, [sp, 0x10]",
            "ldr r1, [sp, 0xc]",
            "b 0x9f2a4",
            "ldr r2, [0x0009f36c]",
            "str r2, [sp, 0xc]",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0xc]",
            "ldr r7, [sp, 0x10]",
            "add r3, r1, r2",
            "ldr r1, [0x0009f378]",
            "ldr r0, [0x0009f374]",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r1, [0x0009f36c]",
            "str r1, [sp, 0xc]",
            "ldr r7, [sp, 0x10]",
            "ldr ip, [sp, 0xc]",
            "ldr r1, [0x0009f378]",
            "add r3, r7, ip",
            "b 0x9f320",
            "ldr r2, [sp, 0x10]",
            "ldr r7, [sp, 8]",
            "ldr r1, [0x0009f378]",
            "add r3, r2, r7",
            "b 0x9f2d8"
        ]
    },
    "sym.mySTL::list_yaSSL::SSL_SESSION_::pop_front__": {
        "function_address": "0x00087c80",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x87cc8",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::input_buffer::add_size_unsigned_int_": {
        "function_address": "0x0007bb8c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [r0]",
            "mov r4, r0",
            "sub r6, r6, 1",
            "mov r5, r1",
            "add r6, r6, r1",
            "bl rsym._ZNK5yaSSL12input_buffer12get_capacityEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "ldr r3, [r4]",
            "add r5, r3, r5",
            "str r5, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::vector_TaoCrypt::Integer__mySTL::uninit_fill_n_mySTL::vector_TaoCrypt::Integer___unsigned_int__mySTL::vector_TaoCrypt.Integer____mySTL::vector_TaoCrypt::Integer___unsigned_int__mySTL::vector_TaoCrypt::Integer__const_": {
        "function_address": "0x000bac40",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r8, r1, 0",
            "mov r7, r0",
            "mov r5, r2",
            "beq 0xbaca4",
            "add r4, r0, 0xc",
            "mov r6, r8",
            "ldm r5, {r3, sl}",
            "rsb sl, r3, sl",
            "asr sl, sl, 4",
            "mov r0, sl",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt7IntegerEEEPT_j",
            "str r0, [r4, -8]",
            "str r0, [r4, -0xc]",
            "add sl, r0, sl, lsl 4",
            "mov r2, r0",
            "str sl, [r4, -4]",
            "ldm r5, {r0, r1}",
            "bl rsym._ZN5mySTL11uninit_copyIPN8TaoCrypt7IntegerES3_EET0_T_S5_S4_",
            "subs r6, r6, 1",
            "str r0, [r4, -8]",
            "add r4, r4, 0xc",
            "bne 0xbac5c",
            "add r8, r8, r8, lsl 1",
            "add r7, r7, r8, lsl 2",
            "mov r0, r7",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_real_escape_string": {
        "function_address": "0x00044b78",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [r0, 0x2ec]",
            "mov lr, r2",
            "ands r2, ip, 0x200",
            "sub sp, sp, 0xc",
            "mov ip, r3",
            "bne 0x44bb0",
            "ldr r0, [r0, 0x290]",
            "mov r3, lr",
            "str ip, [sp]",
            "bl rsym.escape_string_for_mysql",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr",
            "ldr r0, [r0, 0x290]",
            "mov r3, lr",
            "mov r2, 0",
            "str ip, [sp]",
            "bl rsym.escape_quotes_for_mysql",
            "b 0x44ba4"
        ]
    },
    "rsym.escape_string_for_mysql": {
        "function_address": "0x0003f508",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6f4]!"
        ]
    },
    "rsym.escape_quotes_for_mysql": {
        "function_address": "0x0003f844",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4cc]!"
        ]
    },
    "sym.TaoCrypt::RSA_BlockType2::UnPad_unsigned_char_const__unsigned_int__unsigned_char__const": {
        "function_address": "0x000b2a10",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "lsr r4, r2, 3",
            "cmp r4, 0xa",
            "ldr ip, [0x000b2b08]",
            "movls r6, 0",
            "subhi r6, r4, 0xa",
            "ands r2, r2, 7",
            "add ip, pc, ip",
            "beq 0xb2a40",
            "ldrb r2, [r1], 1",
            "subs r2, r2, 0",
            "movne r2, 1",
            "ldrb r0, [r1]",
            "cmp r0, 2",
            "movne r2, 1",
            "cmp r4, 1",
            "movls r0, 1",
            "bls 0xb2a6c",
            "ldrb r0, [r1, 1]",
            "cmp r0, 0",
            "moveq r0, 2",
            "movne r0, 2",
            "bne 0xb2aa4",
            "cmp r4, r0",
            "moveq r4, 0",
            "beq 0xb2ac8",
            "add r5, r1, r0",
            "ldrb r5, [r5, -1]",
            "cmp r5, 0",
            "bne 0xb2ae4",
            "rsb r4, r0, r4",
            "cmp r4, r6",
            "bls 0xb2ac8",
            "mov r4, 0",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "cmp r0, r4",
            "bhs 0xb2a6c",
            "ldrb r5, [r1, r0]",
            "add r0, r0, 1",
            "cmp r5, 0",
            "bne 0xb2aa4",
            "cmp r4, r0",
            "moveq r4, 0",
            "bne 0xb2a78",
            "cmp r2, 0",
            "bne 0xb2a94",
            "add r1, r1, r0",
            "mov r2, r4",
            "mov r0, r3",
            "bl sym.imp.memcpy",
            "b 0xb2a98",
            "ldr r3, [0x000b2b0c]",
            "ldr r1, [0x000b2b10]",
            "ldr r0, [0x000b2b14]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xcc",
            "mov r2, 0x7f",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::SSL::PeekData_yaSSL::Data_": {
        "function_address": "0x000933e8",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r6, r0, 0",
            "beq 0x93408",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r7, r5, 0x9c0",
            "mov r8, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL7Buffers7getDataEv",
            "mov r1, r6",
            "ldr r6, [r0, 8]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL4Data10set_lengthEt",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL12bufferedDataEv",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "mov r8, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL7Buffers7useDataEv",
            "cmp r6, 0",
            "ldr r5, [r0]",
            "bne 0x93478",
            "b 0x93400",
            "subs r6, r6, 1",
            "ldr r5, [r5, 4]",
            "beq 0x93400",
            "ldr r0, [r5, 8]",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "ldr r3, [r4]",
            "mov r7, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r7",
            "rsb r0, r0, r8",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "mov r7, r0",
            "ldr r0, [r5, 8]",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "mov sl, r0",
            "mov r0, r4",
            "ldr sb, [r5, 8]",
            "bl rsym._ZN5yaSSL4Data10set_bufferEv",
            "ldr r3, [r4]",
            "mov fp, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r2, r7",
            "add r1, fp, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r7, r0, r7",
            "lsl r1, r7, 0x10",
            "lsr r1, r1, 0x10",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL4Data10set_lengthEt",
            "mov r1, sl",
            "ldr r0, [r5, 8]",
            "bl rsym._ZN5yaSSL12input_buffer11set_currentEj",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "cmp r8, r0",
            "bne 0x9346c",
            "b 0x93400"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer11set_currentEj": {
        "function_address": "0x0003fb68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2b4]!"
        ]
    },
    "fcn.0009d620": {
        "function_address": "0x0009d620",
        "instructions": [
            "ldr ip, [0x0009d65c]",
            "ldr r3, [0x0009d660]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d664]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d668]",
            "ldr r0, [0x0009d66c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_init": {
        "function_address": "0x00048984",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x00048aa0]",
            "ldr r3, [0x00048aa4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "beq 0x489b0",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r2, [0x00048aa8]",
            "ldr r6, [0x00048aac]",
            "ldr r2, [r4, r2]",
            "ldr r5, [0x00048ab0]",
            "ldr ip, [r2]",
            "ldr r0, [r4, r6]",
            "add ip, ip, 1",
            "ldr r1, [r4, r5]",
            "str ip, [r2]",
            "mov r2, 0x1b0",
            "str r2, [r0]",
            "mov r7, 1",
            "mov r2, 0x1c0",
            "str r2, [r1]",
            "strb r7, [r3]",
            "bl rsym.init_glob_errs",
            "bl rsym.my_thread_global_init",
            "cmp r0, 0",
            "movne r0, r7",
            "bne 0x489a8",
            "bl rsym.fastmutex_global_init",
            "ldr r3, [0x00048ab4]",
            "ldr r0, [r4, r3]",
            "bl sym.imp.sigfillset",
            "ldr r3, [0x00048ab8]",
            "ldr r7, [r4, r3]",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "bne 0x489a4",
            "ldr r0, [0x00048abc]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "str r0, [r7]",
            "beq 0x48a50",
            "ldr r3, [0x00048ac0]",
            "mov r1, r0",
            "ldr r0, [r4, r3]",
            "bl rsym.intern_filename",
            "str r0, [r7]",
            "ldr r0, [0x00048ac4]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0x48a74",
            "bl fcn.000488fc",
            "ldr r3, [r4, r6]",
            "orr r0, r0, 0x180",
            "str r0, [r3]",
            "ldr r0, [0x00048ac8]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0x489a4",
            "bl fcn.000488fc",
            "ldr r3, [r4, r5]",
            "orr r0, r0, 0x1c0",
            "str r0, [r3]",
            "mov r0, 0",
            "b 0x489a8"
        ]
    },
    "rsym.init_glob_errs": {
        "function_address": "0x0003e8f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf04]!"
        ]
    },
    "rsym.my_thread_global_init": {
        "function_address": "0x0003fe2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdc]!"
        ]
    },
    "rsym.fastmutex_global_init": {
        "function_address": "0x0003fd0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x19c]!"
        ]
    },
    "sym.imp.sigfillset": {
        "function_address": "0x0003fbbc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x27c]!"
        ]
    },
    "fcn.000488fc": {
        "function_address": "0x000488fc",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldrb r3, [r0]",
            "ldr r2, [0x0004897c]",
            "cmp r3, 0",
            "sub sp, sp, 0x14",
            "add r2, pc, r2",
            "beq 0x48954",
            "ldr r1, [0x00048980]",
            "ldr r2, [r2, r1]",
            "ldr r1, [r2, 0x20]",
            "add r2, r1, r3",
            "b 0x4893c",
            "ldrb r3, [r0, 1]!",
            "cmp r3, 0",
            "add r2, r1, r3",
            "beq 0x48954",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "bne 0x4892c",
            "cmp r3, 0x30",
            "moveq r1, 8",
            "beq 0x48958",
            "mov r1, 0xa",
            "add ip, sp, 0xc",
            "mov r2, 0",
            "mvn r3, 0x80000000",
            "str ip, [sp]",
            "bl rsym.str2int",
            "ldr r0, [sp, 0xc]",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.fn_format": {
        "function_address": "0x0004c46c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x410",
            "sub sp, sp, 0xc",
            "add r5, sp, 0x214",
            "mov r8, r2",
            "add r2, sp, 0x410",
            "mov r6, r0",
            "add r2, r2, 4",
            "mov r0, r5",
            "mov sb, r1",
            "mov fp, r3",
            "ldr r4, [sp, 0x440]",
            "bl rsym.dirname_part",
            "ldr r7, [0x0004c6dc]",
            "cmp r0, 0",
            "add r7, pc, r7",
            "add sl, sb, r0",
            "beq 0x4c4bc",
            "tst r4, 1",
            "beq 0x4c58c",
            "mov r1, r8",
            "mov r0, r5",
            "mov r2, 0",
            "bl rsym.convert_dirname",
            "tst r4, 8",
            "bne 0x4c640",
            "tst r4, 4",
            "bne 0x4c654",
            "tst r4, 0x100",
            "bne 0x4c624",
            "mov r0, sl",
            "mov r1, 0x2e",
            "bl sym.imp.strchr",
            "subs r8, r0, 0",
            "beq 0x4c624",
            "ands r3, r4, 2",
            "beq 0x4c664",
            "mov r0, fp",
            "bl sym.imp.strlen",
            "rsb r8, sl, r8",
            "str r0, [sp, 0xc]",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "ldr r3, [sp, 0xc]",
            "add r0, r0, r8",
            "ldr r7, [0x0004c6e0]",
            "add r0, r0, r3",
            "cmp r8, 0xff",
            "cmpls r0, r7",
            "bhi 0x4c688",
            "cmp sb, r6",
            "beq 0x4c6b8",
            "mov r1, r5",
            "mov r0, r6",
            "bl sym.imp.stpcpy",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym.strmake",
            "mov r1, fp",
            "bl sym.imp.strcpy",
            "ands r5, r4, 0x20",
            "beq 0x4c5f0",
            "ands r2, r4, 0x10",
            "movne r2, 0x80",
            "mov r0, r6",
            "mov r1, r6",
            "bl rsym.my_realpath",
            "mov r0, r6",
            "add sp, sp, 0x1c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "tst r4, 0x80",
            "beq 0x4c4cc",
            "mov r0, r5",
            "bl rsym.test_if_hard_path",
            "subs ip, r0, 0",
            "bne 0x4c4cc",
            "add r3, sp, 0x18",
            "sub r3, r3, 4",
            "mov r0, r3",
            "mov r1, r5",
            "ldr r2, [0x0004c6e0]",
            "stmib sp, {r3, ip}",
            "bl rsym.strmake",
            "ldr ip, [sp, 8]",
            "mov r1, r8",
            "mov r2, ip",
            "mov r0, r5",
            "bl rsym.convert_dirname",
            "ldr r3, [sp, 4]",
            "rsb r2, r0, r5",
            "add r2, r2, 0x1fc",
            "mov r1, r3",
            "add r2, r2, 3",
            "bl rsym.strmake",
            "b 0x4c4cc",
            "tst r4, 0x10",
            "beq 0x4c578",
            "add r4, sp, 0x18",
            "sub r4, r4, 4",
            "mov r1, r6",
            "mov r0, r4",
            "mov r2, 0x200",
            "bl sym.imp.__strcpy_chk",
            "mov r0, r6",
            "mov r1, r4",
            "mov r2, r5",
            "bl rsym.my_readlink",
            "b 0x4c578",
            "mov r0, sl",
            "bl rsym.strlength",
            "mov r8, r0",
            "mov r0, fp",
            "bl sym.imp.strlen",
            "str r0, [sp, 0xc]",
            "b 0x4c510",
            "mov r0, r5",
            "mov r1, r5",
            "bl rsym.pack_dirname",
            "tst r4, 4",
            "beq 0x4c4dc",
            "mov r0, r5",
            "mov r1, r5",
            "bl rsym.unpack_dirname",
            "b 0x4c4dc",
            "mov r0, sl",
            "str r3, [sp, 4]",
            "bl rsym.strlength",
            "ldr fp, [0x0004c6e4]",
            "ldr r3, [sp, 4]",
            "mov r8, r0",
            "str r3, [sp, 0xc]",
            "add fp, r7, fp",
            "b 0x4c510",
            "tst r4, 0x40",
            "movne r6, 0",
            "bne 0x4c578",
            "mov r0, sb",
            "bl rsym.strlength",
            "mov r1, sb",
            "cmp r0, r7",
            "movlo r2, r0",
            "movhs r2, r7",
            "mov r0, r6",
            "bl rsym.strmake",
            "b 0x4c55c",
            "add r7, sp, 0x18",
            "sub r7, r7, 4",
            "mov r1, sl",
            "mov r0, r7",
            "mov r2, r8",
            "mov r3, 0x200",
            "bl sym.imp.__memmove_chk",
            "mov sl, r7",
            "b 0x4c53c"
        ]
    },
    "rsym.convert_dirname": {
        "function_address": "0x0003e9c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe74]!"
        ]
    },
    "sym.imp.stpcpy": {
        "function_address": "0x0003d90c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x99c]!"
        ]
    },
    "rsym.my_realpath": {
        "function_address": "0x0003d870",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa04]!"
        ]
    },
    "rsym.my_readlink": {
        "function_address": "0x0003d69c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb3c]!"
        ]
    },
    "rsym.strlength": {
        "function_address": "0x0003d0d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf14]!"
        ]
    },
    "rsym.pack_dirname": {
        "function_address": "0x0003e434",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x22c]!"
        ]
    },
    "sym.imp.__memmove_chk": {
        "function_address": "0x0004048c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc9c]!"
        ]
    },
    "method.mySTL::list_yaSSL::BulkCipher_.push_front_yaSSL::BulkCipher_": {
        "function_address": "0x00089414",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0008eed4": {
        "function_address": "0x0008eed4",
        "instructions": [
            "ldr r3, [0x0008ef04]",
            "ldr r2, [0x0008ef08]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "bl rsym._ZN5yaSSL17ServerKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_ll10tostr_ucs2": {
        "function_address": "0x0006a968",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x48",
            "ldr ip, [sp, 0x6c]",
            "cmp r3, 0",
            "ldr r4, [sp, 0x68]",
            "mov r5, ip",
            "mov r6, r0",
            "mov r8, r1",
            "mov sb, r2",
            "blt 0x6aa9c",
            "mov sl, 0",
            "orrs r3, r4, r5",
            "mov r3, 0",
            "strb r3, [sp, 0x44]",
            "beq 0x6aa18",
            "cmp r5, r3",
            "beq 0x6aabc",
            "add r7, sp, 0x44",
            "mov r0, r4",
            "mov r1, r5",
            "mov r3, 0",
            "mov r2, 0xa",
            "bl fcn.000bfd8c",
            "add r3, r0, r0, lsl 2",
            "sub r3, r4, r3, lsl 1",
            "add r3, r3, 0x30",
            "cmp r1, 0",
            "mov r4, r0",
            "mov r5, r1",
            "strb r3, [r7, -1]!",
            "bne 0x6a9b0",
            "cmn r0, 0x80000001",
            "bhi 0x6a9b0",
            "ldr r1, [0x0006aacc]",
            "smull r3, r2, r1, r4",
            "asr r3, r4, 0x1f",
            "rsb r3, r3, r2, asr 2",
            "add r4, r4, 0x30",
            "add r2, r3, r3, lsl 2",
            "sub r2, r4, r2, lsl 1",
            "subs r4, r3, 0",
            "strb r2, [r7, -1]!",
            "bne 0x6a9f0",
            "b 0x6aa24",
            "mov r3, 0x30",
            "strb r3, [sp, 0x43]",
            "add r7, sp, 0x43",
            "cmp sl, 0",
            "movne r3, 0x2d",
            "add r5, r8, sb",
            "strbne r3, [r7, -1]!",
            "cmp r8, r5",
            "bhs 0x6aab4",
            "ldrb r1, [r7]",
            "cmp r1, 0",
            "beq 0x6aab4",
            "mov r4, r8",
            "b 0x6aa68",
            "add r4, r4, r0",
            "cmp r5, r4",
            "bls 0x6aa8c",
            "ldrb r1, [r7, 1]!",
            "cmp r1, 0",
            "beq 0x6aa8c",
            "mov r2, r4",
            "ldr ip, [r6, 0x64]",
            "mov r0, r6",
            "mov r3, r5",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bgt 0x6aa50",
            "rsb r0, r8, r4",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "cmp ip, 0",
            "bge 0x6a990",
            "rsbs r4, r4, 0",
            "rsc r5, r5, 0",
            "mov sl, 1",
            "b 0x6a994",
            "mov r0, 0",
            "b 0x6aa90",
            "cmn r4, 0x80000001",
            "addls r7, sp, 0x44",
            "bhi 0x6a9ac",
            "b 0x6a9ec"
        ]
    },
    "sym.get_tty_password": {
        "function_address": "0x00048668",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x000486bc]",
            "cmp r0, 0",
            "sub sp, sp, 0x50",
            "add r3, pc, r3",
            "beq 0x486b0",
            "bl sym.imp.getpass",
            "mov r2, 0x4f",
            "mov r1, r0",
            "mov r0, sp",
            "bl rsym.strnmov",
            "mov r0, sp",
            "mov r1, 8",
            "mov r4, sp",
            "bl rsym.my_strdup",
            "add sp, sp, 0x50",
            "pop {r4, lr}",
            "bx lr",
            "ldr r0, [0x000486c0]",
            "add r0, r3, r0",
            "b 0x48680"
        ]
    },
    "sym.imp.getpass": {
        "function_address": "0x0003d60c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb9c]!"
        ]
    },
    "fcn.00080c3c": {
        "function_address": "0x00080c3c",
        "instructions": [
            "ldr ip, [0x00080c7c]",
            "ldr r3, [0x00080c80]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00080c84]",
            "add r2, r3, 8",
            "ldr r3, [0x00080c88]",
            "str r2, [r0]",
            "ldr r0, [0x00080c8c]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1c",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.00099d30": {
        "function_address": "0x00099d30",
        "instructions": [
            "ldr ip, [0x00099d70]",
            "ldr r3, [0x00099d74]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00099d78]",
            "add r2, r3, 8",
            "str r2, [r0]",
            "str r2, [r0, 4]",
            "ldr r3, [0x00099d7c]",
            "ldr r0, [0x00099d80]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007d2f0": {
        "function_address": "0x0007d2f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d334]",
            "ldr r3, [0x0007d338]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_SHA12HMAC_SHAImplEEEvPT_",
            "ldr r3, [0x0007d33c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::MD5::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dde8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SHA::get_digest_unsigned_char_": {
        "function_address": "0x0007dd90",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ProcessOldClientHello_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x00081ec0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0xe4",
            "mov r6, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "cmp r0, 1",
            "bls 0x820fc",
            "ldr r1, [0x00082140]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldr r1, [0x00082140]",
            "ldrb r7, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "and r5, r7, 0x7f",
            "mov r0, r4",
            "orr r5, r3, r5, lsl 8",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "cmp r5, r0",
            "bhi 0x820fc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "add r7, r7, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "mov r2, r5",
            "ldr r3, [r0]",
            "mov r1, r7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r2, r5",
            "ldr r3, [r0]",
            "mov r1, r7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "add r5, sp, 4",
            "ldr r1, [0x00082140]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11ClientHelloC1Ev",
            "ldr r1, [0x00082140]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x00082140]",
            "mov r0, r4",
            "strb r3, [sp, 0xc]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "add r8, sp, 0xdc",
            "ldrb r3, [r0]",
            "mov r2, 2",
            "mov r1, r8",
            "mov r0, r4",
            "strb r3, [sp, 0xd]",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r8",
            "add r1, r5, 0x4c",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r2, 2",
            "mov r0, r4",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r8",
            "add r1, sp, 0xda",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh r3, [sp, 0xda]",
            "mov r1, r8",
            "mov r2, 2",
            "mov r0, r4",
            "strb r3, [sp, 0x2e]",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r8",
            "add r1, sp, 0xd8",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh sl, [sp, 0x50]",
            "cmp sl, 0x80",
            "bhi 0x820fc",
            "ldrh r3, [sp, 0xda]",
            "cmp r3, 0x20",
            "bhi 0x820fc",
            "ldrh r3, [sp, 0xd8]",
            "cmp r3, 0x20",
            "bhi 0x820fc",
            "cmp sl, 0",
            "movne r7, 0",
            "movne sl, r7",
            "bne 0x8206c",
            "b 0x820bc",
            "mov r1, r8",
            "add r7, r7, 3",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "lsl r7, r7, 0x10",
            "ldrh r3, [sp, 0x50]",
            "lsr r7, r7, 0x10",
            "cmp r3, r7",
            "bls 0x820b4",
            "ldr r1, [0x00082140]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "add r1, r5, sl",
            "cmp r3, 0",
            "add r1, r1, 0x4e",
            "mov r0, r4",
            "mov r2, 2",
            "bne 0x8204c",
            "add r7, r7, 3",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "lsl r7, r7, 0x10",
            "ldrh r3, [sp, 0x50]",
            "lsr r7, r7, 0x10",
            "cmp r3, r7",
            "add sl, sl, 2",
            "bhi 0x8206c",
            "lsl sl, sl, 0x10",
            "lsr sl, sl, 0x10",
            "ldrb r2, [sp, 0x2e]",
            "strh sl, [sp, 0x50]",
            "cmp r2, 0",
            "bne 0x82114",
            "ldrh r2, [sp, 0xd8]",
            "cmp r2, 0x1f",
            "bls 0x82124",
            "rsb r1, r2, r5",
            "mov r0, r4",
            "add r1, r1, 0x2a",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL11ClientHello7ProcessERNS_12input_bufferERNS_3SSLE",
            "b 0x82108",
            "mov r0, r6",
            "mov r1, 0x6d",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "add sp, sp, 0xe4",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "add r1, r5, 0x2b",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "b 0x820cc",
            "rsb r2, r2, 0x20",
            "add r0, r5, 0xa",
            "mov r1, 0",
            "mov r3, 0xca",
            "bl sym.imp.__memset_chk",
            "ldrh r2, [sp, 0xd8]",
            "b 0x820d8"
        ]
    },
    "rsym._ZN5yaSSL11ClientHello7ProcessERNS_12input_bufferERNS_3SSLE": {
        "function_address": "0x0003dd38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6d4]!"
        ]
    },
    "sym.imp.__memset_chk": {
        "function_address": "0x00040870",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa04]!"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetName_TaoCrypt::CertDecoder::NameType_": {
        "function_address": "0x0009ba84",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 4]",
            "ldr r5, [0x0009be80]",
            "ldr r3, [r3, 0x10]",
            "add r5, pc, r5",
            "cmp r3, 0",
            "sub sp, sp, 0x9c",
            "mov r4, r0",
            "mov sl, r1",
            "beq 0x9bab8",
            "add sp, sp, 0x9c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r8, sp, 0x24",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0009be84]",
            "mov r0, r8",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x24]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "cmp r0, 0x200",
            "bhs 0x9bd18",
            "ldr r2, [0x0009be88]",
            "ldr r3, [r4, 4]",
            "str r2, [sp, 0x1c]",
            "ldr r2, [0x0009be8c]",
            "cmp sl, 0",
            "add r2, r5, r2",
            "str r2, [sp, 0xc]",
            "ldr r2, [0x0009be90]",
            "ldr r3, [r3, 0xc]",
            "add r2, r5, r2",
            "str r2, [sp, 0x10]",
            "ldr r2, [0x0009be94]",
            "addeq fp, r4, 0x24c",
            "add r2, r5, r2",
            "str r2, [sp, 0x14]",
            "ldr r2, [0x0009be98]",
            "addne fp, r4, 0x440",
            "add r2, r5, r2",
            "add r6, r0, r3",
            "addeq fp, fp, 3",
            "addeq sb, r4, 0x50",
            "addne fp, fp, 0xf",
            "addne sb, r4, 0x250",
            "str r2, [sp, 0x18]",
            "mov r7, r5",
            "cmp r6, r3",
            "bls 0x9bc1c",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder6GetSetEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r0, [r4, 4]",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9be5c",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 6",
            "bne 0x9bd90",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r2, [r4, 4]",
            "mov r5, r0",
            "ldr r3, [r2, 0xc]",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bhs 0x9be38",
            "ldr r1, [r2, 4]",
            "add r0, sp, 0x94",
            "add r1, r1, r3",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "ldrb r3, [sp, 0x94]",
            "cmp r3, 0x55",
            "beq 0x9bc3c",
            "cmp r3, 0x2a",
            "beq 0x9bcc4",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0xc]",
            "mov r0, r3",
            "add r2, r2, 1",
            "add r5, r2, r5",
            "str r5, [r3, 0xc]",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "mov r5, r0",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0xc]",
            "add r5, r2, r5",
            "str r5, [r3, 0xc]",
            "mov r3, r5",
            "cmp r6, r3",
            "bhi 0x9bb60",
            "cmp sl, 0",
            "mov r3, 0",
            "strb r3, [sb]",
            "addeq r1, r4, 0x38",
            "addne r1, r4, 0x24",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "b 0x9baac",
            "ldrb r3, [sp, 0x95]",
            "cmp r3, 4",
            "bne 0x9bbe0",
            "ldr r0, [r4, 4]",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 2",
            "add ip, r3, 3",
            "cmp r2, r1",
            "str ip, [r0, 0xc]",
            "bhs 0x9be5c",
            "ldr lr, [r0, 4]",
            "cmp ip, r1",
            "add r1, r3, 4",
            "ldrb r3, [lr, r2]",
            "str r1, [r0, 0xc]",
            "bhs 0x9be5c",
            "str r3, [sp, 8]",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [sp, 8]",
            "mov r5, r0",
            "sub r3, r3, 3",
            "cmp r3, 8",
            "addls pc, pc, r3, lsl 2",
            "b 0x9bd50",
            "b 0x9be20",
            "b 0x9be04",
            "b 0x9bd50",
            "b 0x9bde8",
            "b 0x9bdcc",
            "b 0x9bdb4",
            "b 0x9bd50",
            "b 0x9bd9c",
            "b 0x9bd28",
            "ldrb r3, [sp, 0x95]",
            "cmp r3, 0x86",
            "bne 0x9bbe0",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0xc]",
            "mov r0, r3",
            "add r2, r2, 1",
            "add r5, r2, r5",
            "str r5, [r3, 0xc]",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "mov r1, sb",
            "mov r5, r0",
            "mov ip, 0xe",
            "mov r0, r4",
            "mov r2, fp",
            "ldr r3, [sp, 0xc]",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt11CertDecoder6AddTagEPcPKcS3_jj",
            "subs sb, r0, 0",
            "bne 0x9bc00",
            "ldr r3, [r4, 4]",
            "mov r2, 0x410",
            "str r2, [r3, 0x10]",
            "b 0x9baac",
            "ldr r3, [sp, 0x10]",
            "mov r1, sb",
            "mov r0, r4",
            "mov r2, fp",
            "mov ip, 4",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt11CertDecoder6AddTagEPcPKcS3_jj",
            "subs sb, r0, 0",
            "beq 0x9bd18",
            "ldr r2, [r4, 4]",
            "ldr r3, [r2, 0xc]",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bhs 0x9be38",
            "ldr r1, [r2, 4]",
            "mov r0, r8",
            "add r1, r1, r3",
            "mov r2, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0xc]",
            "add r2, r2, r5",
            "str r2, [r3, 0xc]",
            "mov r3, r2",
            "b 0x9bb58",
            "ldr r3, [0x0009be9c]",
            "str r3, [r0, 0x10]",
            "b 0x9baac",
            "mov r1, sb",
            "mov r0, r4",
            "mov r2, fp",
            "ldr r3, [sp, 0x14]",
            "mov ip, 3",
            "b 0x9bd3c",
            "mov r1, sb",
            "mov r0, r4",
            "mov r2, fp",
            "ldr r3, [sp, 0x18]",
            "mov ip, 4",
            "b 0x9bd3c",
            "ldr ip, [sp, 0x1c]",
            "mov r1, sb",
            "add r3, r7, ip",
            "mov r0, r4",
            "mov r2, fp",
            "mov ip, 3",
            "b 0x9bd3c",
            "ldr r3, [0x0009bea0]",
            "mov r1, sb",
            "add r3, r7, r3",
            "mov r0, r4",
            "mov r2, fp",
            "mov ip, 3",
            "b 0x9bd3c",
            "ldr r3, [0x0009bea4]",
            "mov r1, sb",
            "add r3, r7, r3",
            "mov r0, r4",
            "mov r2, fp",
            "mov ip, 4",
            "b 0x9bd3c",
            "ldr r3, [0x0009bea8]",
            "mov r1, sb",
            "add r3, r7, r3",
            "mov r0, r4",
            "mov r2, fp",
            "b 0x9bd38",
            "ldr r3, [0x0009beac]",
            "ldr r1, [0x0009beb0]",
            "ldr r0, [0x0009beb4]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009beac]",
            "ldr r1, [0x0009beb0]",
            "ldr r0, [0x0009beb4]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt11BER_Decoder6GetSetEv": {
        "function_address": "0x0003ff10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x44]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder6AddTagEPcPKcS3_jj": {
        "function_address": "0x0003edb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbd4]!"
        ]
    },
    "sym.yaSSL::input_buffer::assign_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007bd7c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r2",
            "mov r6, r1",
            "ldr r7, [r0, 4]",
            "bl rsym._ZNK5yaSSL12input_buffer12get_capacityEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "ldr r3, [r4, 4]",
            "ldr r0, [r4, 8]",
            "mov r1, r6",
            "add r0, r0, r3",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaX509_get_issuer_name": {
        "function_address": "0x00085cc8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL4X5099GetIssuerEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AbstractRing::Exponentiate_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x00098678",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "mov r5, r1",
            "mov r6, r3",
            "mov r4, r0",
            "mov r7, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, 1",
            "str r3, [sp]",
            "mov r0, r5",
            "mov r2, r7",
            "mov r3, r6",
            "ldr ip, [r5]",
            "mov r1, r4",
            "ldr ip, [ip, 0x58]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::PositiveDivide_TaoCrypt::Integer__TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000aa580",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x2c",
            "mov r0, r2",
            "mov r7, r3",
            "mov sb, r2",
            "mov r5, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "mov sl, r0",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r8, [0x000aa888]",
            "subs r6, r0, 0",
            "add r8, pc, r8",
            "beq 0xaa83c",
            "mov r0, sb",
            "mov r1, r7",
            "bl rsym._ZNK8TaoCrypt7Integer15PositiveCompareERKS0_",
            "cmn r0, 1",
            "beq 0xaa814",
            "and r3, r6, 1",
            "add r6, r3, r6",
            "and r3, sl, 1",
            "add r3, r3, sl",
            "cmp r6, 8",
            "str r3, [sp, 0x10]",
            "bls 0xaa7c0",
            "cmp r6, 0x10",
            "movls lr, 0x40",
            "strls lr, [sp, 0x14]",
            "movls fp, 0x10",
            "bls 0xaa628",
            "cmp r6, 0x20",
            "movls r3, 0x80",
            "strls r3, [sp, 0x14]",
            "movls fp, 0x20",
            "bls 0xaa628",
            "cmp r6, 0x40",
            "movls lr, 0x100",
            "strls lr, [sp, 0x14]",
            "movls fp, 0x40",
            "bhi 0xaa7dc",
            "ldr r1, [r4, 4]",
            "ldr r2, [r4]",
            "mov sl, 0",
            "mov r3, fp",
            "add r0, r4, 8",
            "str sl, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str fp, [r4]",
            "str r0, [r4, 4]",
            "ldr r2, [sp, 0x14]",
            "mov r1, sl",
            "bl sym.imp.memset",
            "ldr lr, [sp, 0x10]",
            "str sl, [r4, 0xc]",
            "add r0, lr, 2",
            "rsb r0, r6, r0",
            "cmp r0, 8",
            "bls 0xaa7a4",
            "cmp r0, 0x10",
            "movls lr, 0x40",
            "strls lr, [sp, 0x14]",
            "movls fp, 0x10",
            "bls 0xaa6ac",
            "cmp r0, 0x20",
            "movls r3, 0x80",
            "strls r3, [sp, 0x14]",
            "movls fp, 0x20",
            "bls 0xaa6ac",
            "cmp r0, 0x40",
            "movls lr, 0x100",
            "strls lr, [sp, 0x14]",
            "movls fp, 0x40",
            "bhi 0xaa7f8",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "mov sl, 0",
            "mov r3, fp",
            "add r0, r5, 8",
            "str sl, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str fp, [r5]",
            "str r0, [r5, 4]",
            "ldr r2, [sp, 0x14]",
            "mov r1, sl",
            "bl sym.imp.memset",
            "ldr lr, [sp, 0x10]",
            "str sl, [r5, 0xc]",
            "add ip, lr, 4",
            "add ip, ip, r6, lsl 1",
            "cmn ip, 0xc0000001",
            "str ip, [sp, 0x1c]",
            "bhi 0xaa860",
            "cmp ip, 0",
            "bne 0xaa790",
            "add r0, sp, 0x28",
            "ldr r8, [r0, -0xc]!",
            "mov r1, ip",
            "mov sl, 0",
            "mov r3, r8",
            "mov r2, r8",
            "add r0, r0, 8",
            "str ip, [sp, 0x20]",
            "str sl, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r8, 2",
            "mov r1, sl",
            "str r0, [sp, 0x20]",
            "str r8, [sp, 0x1c]",
            "bl sym.imp.memset",
            "ldr ip, [r7, 4]",
            "ldr lr, [sp, 0x10]",
            "ldr r0, [r4, 4]",
            "ldr r1, [r5, 4]",
            "ldr r3, [sb, 4]",
            "ldr r2, [sp, 0x20]",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "str r6, [sp, 8]",
            "bl rsym._ZN8TaoCrypt6DivideEPjS0_S0_PKjjS2_j",
            "ldr r4, [sp, 0x20]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, sl",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, 0",
            "lsl r0, ip, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "b 0xaa700",
            "ldr r3, [0x000aa88c]",
            "add r3, r8, r3",
            "add r0, r3, r0, lsl 2",
            "ldr fp, [r0, 0x5ec]",
            "lsl r3, fp, 2",
            "str r3, [sp, 0x14]",
            "b 0xaa6ac",
            "ldr r3, [0x000aa88c]",
            "add r3, r8, r3",
            "add r3, r3, r6, lsl 2",
            "ldr fp, [r3, 0x5ec]",
            "lsl r3, fp, 2",
            "str r3, [sp, 0x14]",
            "b 0xaa628",
            "sub r0, r6, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov fp, 1",
            "lsl fp, fp, r0",
            "lsl r3, fp, 2",
            "str r3, [sp, 0x14]",
            "b 0xaa628",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov fp, 1",
            "lsl fp, fp, r0",
            "lsl r3, fp, 2",
            "str r3, [sp, 0x14]",
            "b 0xaa6ac",
            "mov r1, sb",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r3, 0",
            "str r3, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "b 0xaa784",
            "ldr r3, [0x000aa88c]",
            "ldr r1, [0x000aa890]",
            "ldr r0, [0x000aa894]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0xda0",
            "ldr r2, [0x000aa898]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000aa88c]",
            "ldr r1, [0x000aa89c]",
            "add r3, r8, r3",
            "ldr r0, [0x000aa8a0]",
            "add r3, r3, 0xc80",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt6DivideEPjS0_S0_PKjjS2_j": {
        "function_address": "0x0003e644",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcc]!"
        ]
    },
    "sym.yaSSL_CTX_sess_connect": {
        "function_address": "0x00085bdc",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_stmt_bind_param": {
        "function_address": "0x00043460",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0xa4]",
            "ldr r5, [0x00043728]",
            "cmp r3, 0",
            "sub sp, sp, 0x14",
            "mov r6, r0",
            "add r5, pc, r5",
            "bne 0x4349c",
            "ldr r2, [r0, 0xac]",
            "cmp r2, 1",
            "movgt r0, r3",
            "ble 0x4370c",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "lsl r2, r3, 6",
            "ldr r0, [r0, 0x30]",
            "bl sym.imp.memcpy",
            "ldr r1, [r6, 0x30]",
            "ldr ip, [r6, 0xa4]",
            "add ip, r1, ip, lsl 6",
            "cmp r1, ip",
            "bhs 0x435d0",
            "ldr r2, [0x0004372c]",
            "ldr r8, [0x00043730]",
            "add r2, r5, r2",
            "str r2, [sp, 8]",
            "ldr r2, [0x00043734]",
            "ldr fp, [0x00043738]",
            "mov r3, 0",
            "add r2, r5, r2",
            "ldr sl, [0x0004373c]",
            "add r8, r5, r8",
            "add fp, r5, fp",
            "str r2, [sp, 0xc]",
            "mov r7, r1",
            "mov r4, r3",
            "mov r2, 0",
            "str r4, [r7, 0x2c]",
            "strb r2, [r7, 0x3a]",
            "add r0, r1, r3",
            "ldr r2, [r0, 4]",
            "add r4, r4, 1",
            "cmp r2, 0",
            "streq r8, [r0, 4]",
            "ldr r2, [r7, 0x34]",
            "cmp r2, 7",
            "beq 0x436ec",
            "bhi 0x4355c",
            "cmp r2, 3",
            "beq 0x43700",
            "bhi 0x43598",
            "cmp r2, 1",
            "beq 0x43698",
            "bls 0x43688",
            "ldr sb, [0x00043740]",
            "add r0, r7, 0x20",
            "add sb, r5, sb",
            "mov r2, 2",
            "str r0, [r1, r3]",
            "str r2, [r7, 0x20]",
            "str sb, [r7, 0x14]",
            "b 0x435b4",
            "cmp r2, 0xc",
            "beq 0x436ec",
            "bhi 0x435e4",
            "cmp r2, 0xa",
            "beq 0x43644",
            "bhi 0x436d4",
            "cmp r2, 8",
            "bne 0x435f8",
            "ldr sb, [0x00043744]",
            "add r0, r7, 0x20",
            "add sb, r5, sb",
            "str r0, [r1, r3]",
            "str r2, [r7, 0x20]",
            "str sb, [r7, 0x14]",
            "b 0x435b4",
            "cmp r2, 5",
            "beq 0x4365c",
            "bls 0x436b4",
            "ldr r2, [0x00043748]",
            "add r2, r5, r2",
            "str r2, [r0, 4]",
            "ldr r0, [r1, r3]",
            "cmp r0, 0",
            "addeq r2, r7, 0x20",
            "add r7, r7, 0x40",
            "streq r2, [r1, r3]",
            "cmp ip, r7",
            "add r3, r3, 0x40",
            "bhi 0x434f4",
            "mov r3, 1",
            "strb r3, [r6, 0x2b7]",
            "strb r3, [r6, 0x2b6]",
            "mov r0, 0",
            "b 0x43490",
            "cmp r2, 0xf6",
            "beq 0x43688",
            "bhi 0x4367c",
            "cmp r2, 0xf",
            "beq 0x43688",
            "ldr r3, [0x0004374c]",
            "add r0, r6, 0x2b0",
            "ldr r3, [r5, r3]",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r2, [0x00043750]",
            "ldr r3, [0x00043754]",
            "str r2, [r6, 0xa0]",
            "ldr r3, [r5, r3]",
            "ldr ip, [r7, 0x34]",
            "ldr r3, [r3, 0x90]",
            "add r0, r6, 0xb0",
            "mov r1, 1",
            "mvn r2, 0",
            "str ip, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x43490",
            "mov r2, 5",
            "str r2, [r7, 0x20]",
            "ldr r2, [sp, 0xc]",
            "str r2, [r7, 0x14]",
            "ldr r0, [r1, r3]",
            "b 0x435b4",
            "ldr sb, [0x00043758]",
            "add r0, r7, 0x20",
            "add sb, r5, sb",
            "mov r2, 8",
            "str r0, [r1, r3]",
            "str r2, [r7, 0x20]",
            "str sb, [r7, 0x14]",
            "b 0x435b4",
            "sub r2, r2, 0xf9",
            "cmp r2, 5",
            "bhi 0x435f8",
            "ldr r2, [sp, 8]",
            "str r2, [r7, 0x14]",
            "ldr r0, [r1, r3]",
            "b 0x435b4",
            "ldr sb, [0x0004375c]",
            "add r0, r7, 0x20",
            "add sb, r5, sb",
            "str r0, [r1, r3]",
            "str r2, [r7, 0x20]",
            "str sb, [r7, 0x14]",
            "b 0x435b4",
            "ldr sb, [0x00043760]",
            "add r0, r7, 0x20",
            "add sb, r5, sb",
            "mov r2, 4",
            "str r0, [r1, r3]",
            "str r2, [r7, 0x20]",
            "str sb, [r7, 0x14]",
            "b 0x435b4",
            "add r2, r5, sl",
            "str r2, [r7, 0x14]",
            "mov r2, 0xd",
            "str r2, [r7, 0x20]",
            "ldr r0, [r1, r3]",
            "b 0x435b4",
            "mov r2, 0xc",
            "str r2, [r7, 0x20]",
            "str fp, [r7, 0x14]",
            "ldr r0, [r1, r3]",
            "b 0x435b4",
            "add r0, r7, 0x20",
            "ldr sb, [0x00043764]",
            "b 0x436bc",
            "ldr r2, [0x0004374c]",
            "ldr r1, [0x00043768]",
            "ldr r2, [r5, r2]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x43490"
        ]
    },
    "sym.cli_read_rows": {
        "function_address": "0x00076078",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "str r1, [sp, 0x18]",
            "ldr r1, [0x000763fc]",
            "mov sb, r2",
            "str r1, [sp, 0xc]",
            "str r0, [sp, 0x14]",
            "bl rsym.cli_safe_read",
            "ldr r2, [sp, 0xc]",
            "cmn r0, 1",
            "add r2, pc, r2",
            "str r2, [sp, 0xc]",
            "mov fp, r0",
            "beq 0x762b0",
            "mov r0, 0x38",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0x76390",
            "add r2, r0, 8",
            "mov r0, r2",
            "str r2, [sp, 0x10]",
            "mov r1, 0x2000",
            "mov r2, 0",
            "bl rsym.init_alloc_root",
            "ldr r0, [sp, 8]",
            "mov r2, 0xc",
            "str r2, [r0, 0x14]",
            "mov r1, 0",
            "mov r2, 0",
            "str r1, [r0, 0x28]",
            "str r2, [r0, 0x2c]",
            "str sb, [r0, 0x30]",
            "add r3, sb, 1",
            "lsl r3, r3, 2",
            "add r1, sp, 0x24",
            "ldr r4, [sp, 8]",
            "str r3, [sp, 0x1c]",
            "str r1, [sp, 4]",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [r2, 0x10]",
            "str r3, [sp, 0x24]",
            "ldrb r3, [r3]",
            "cmp r3, 0xfe",
            "bne 0x76138",
            "cmp fp, 7",
            "bls 0x763b0",
            "ldr r0, [sp, 8]",
            "mov r1, 0",
            "add r3, r0, 0x28",
            "ldm r3, {r2, r3}",
            "mov r0, 1",
            "adds r2, r2, r0",
            "adc r3, r3, r1",
            "ldr r1, [sp, 8]",
            "str r2, [r1, 0x28]",
            "str r3, [r1, 0x2c]",
            "ldr r0, [sp, 0x10]",
            "mov r1, 0xc",
            "bl rsym.alloc_root",
            "subs sl, r0, 0",
            "beq 0x76360",
            "ldr r2, [sp, 0x1c]",
            "ldr r0, [sp, 0x10]",
            "add r1, fp, r2",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "str r0, [sl, 4]",
            "beq 0x76360",
            "str sl, [r4]",
            "ldr r3, [sl, 4]",
            "ldr r0, [sp, 0x1c]",
            "sub fp, fp, 1",
            "cmp sb, 0",
            "add r5, r3, r0",
            "add fp, r5, fp",
            "moveq r6, sb",
            "beq 0x7626c",
            "ldr r1, [sp, 0x18]",
            "cmp r1, 0",
            "movne r7, 0",
            "movne r8, r1",
            "movne r6, r7",
            "bne 0x76224",
            "b 0x762c8",
            "ldr r1, [sl, 4]",
            "cmp r4, r3",
            "str r5, [r1, r7]",
            "bhi 0x7628c",
            "ldr r1, [sp, 0x24]",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "strb r0, [r5, r4]",
            "ldr r3, [sp, 0x24]",
            "add r6, r6, 1",
            "add r3, r3, r4",
            "str r3, [sp, 0x24]",
            "ldr r3, [r8, 0x20]",
            "add r2, r4, 1",
            "cmp r4, r3",
            "strhi r4, [r8, 0x20]",
            "cmp sb, r6",
            "add r5, r5, r2",
            "add r7, r7, 4",
            "add r8, r8, 0x54",
            "bls 0x76264",
            "ldr r0, [sp, 4]",
            "bl rsym.net_field_length",
            "mov r4, r0",
            "cmn r4, 1",
            "mov r2, r0",
            "rsb r3, r5, fp",
            "mov r0, r5",
            "bne 0x761d0",
            "ldr r3, [sl, 4]",
            "add r6, r6, 1",
            "mov r1, 0",
            "cmp sb, r6",
            "str r1, [r3, r7]",
            "add r8, r8, 0x54",
            "add r7, r7, 4",
            "bhi 0x76224",
            "ldr r3, [sl, 4]",
            "lsl r6, r6, 2",
            "str r5, [r3, r6]",
            "ldr r0, [sp, 0x14]",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "mov fp, r0",
            "beq 0x7634c",
            "mov r4, sl",
            "b 0x76118",
            "ldr r0, [sp, 8]",
            "bl rsym.free_rows",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [0x00076400]",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [r2, r3]",
            "ldr r1, [0x00076404]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r3, 0",
            "str r3, [sp, 8]",
            "ldr r0, [sp, 8]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r7, r1",
            "mov r6, r1",
            "ldr r8, [sp, 4]",
            "b 0x76324",
            "ldr r2, [sl, 4]",
            "cmp r0, r3",
            "str r5, [r2, r7]",
            "bhi 0x7628c",
            "mov r2, r4",
            "mov r0, r5",
            "ldr r1, [sp, 0x24]",
            "bl sym.imp.memcpy",
            "mov r2, 0",
            "strb r2, [r5, r4]",
            "ldr r2, [sp, 0x24]",
            "add r3, r4, 1",
            "add r4, r2, r4",
            "add r5, r5, r3",
            "str r4, [sp, 0x24]",
            "add r6, r6, 1",
            "cmp sb, r6",
            "add r7, r7, 4",
            "bls 0x76264",
            "mov r0, r8",
            "bl rsym.net_field_length",
            "cmn r0, 1",
            "mov r4, r0",
            "rsb r3, r5, fp",
            "bne 0x762d8",
            "ldr r3, [sl, 4]",
            "mov r0, 0",
            "str r0, [r3, r7]",
            "b 0x76314",
            "ldr r0, [sp, 8]",
            "bl rsym.free_rows",
            "mov r1, 0",
            "str r1, [sp, 8]",
            "b 0x762b8",
            "ldr r0, [sp, 8]",
            "bl rsym.free_rows",
            "ldr r1, [sp, 0xc]",
            "ldr r3, [0x00076400]",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [r1, r3]",
            "ldr r1, [0x00076408]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r2, 0",
            "str r2, [sp, 8]",
            "b 0x762b8",
            "ldr r1, [sp, 0xc]",
            "ldr r3, [0x00076400]",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [r1, r3]",
            "ldr r1, [0x00076408]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x762b8",
            "mov r3, 0",
            "cmp fp, 1",
            "str r3, [r4]",
            "bls 0x762b8",
            "ldr r3, [sp, 0x24]",
            "ldr r0, [sp, 0x14]",
            "ldrb r1, [r3, 2]",
            "ldrb r2, [r3, 1]",
            "add r2, r2, r1, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "str r2, [r0, 0x2f4]",
            "ldrb r2, [r3, 3]",
            "ldrb r3, [r3, 4]",
            "add r3, r2, r3, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "str r3, [r0, 0x2ec]",
            "b 0x762b8"
        ]
    },
    "rsym.init_alloc_root": {
        "function_address": "0x0003d984",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x94c]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DiffieHellman__yaSSL::DiffieHellman_": {
        "function_address": "0x00089d58",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL13DiffieHellmanD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL13DiffieHellmanD1Ev": {
        "function_address": "0x0003f1fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8fc]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::ClientHello_": {
        "function_address": "0x0008cb0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "ldr r1, [0x0008cca4]",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008cca4]",
            "strb r3, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "add r1, r4, 0xa",
            "strb r3, [r4, 9]",
            "mov r2, 0x20",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "ldr r1, [0x0008cca4]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "strb r3, [r4, 0x2a]",
            "bne 0x8cc90",
            "ldr r1, [0x0008cca4]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008cca4]",
            "mov r0, r5",
            "strb r3, [sp, 4]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "add r1, sp, 2",
            "add r0, sp, 4",
            "strb r3, [sp, 5]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r1, 0x80",
            "ldrh r0, [sp, 2]",
            "bl rsym._ZN5yaSSL3minItEET_S1_S1_",
            "add r1, r4, 0x4e",
            "mov r2, r0",
            "strh r0, [r4, 0x4c]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldrh r2, [r4, 0x4c]",
            "ldrh r3, [sp, 2]",
            "cmp r2, r3",
            "blo 0x8cc6c",
            "mov r0, r5",
            "ldr r1, [0x0008cca4]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r2, 0",
            "str r2, [r4, 0xd0]",
            "strb r3, [r4, 0xce]",
            "b 0x8cc10",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "cmp r3, 0xdd",
            "streq r3, [r4, 0xd0]",
            "ldrb r3, [r4, 0xce]",
            "cmp r3, 0",
            "sub r3, r3, 1",
            "mov r0, r5",
            "ldr r1, [0x0008cca4]",
            "strb r3, [r4, 0xce]",
            "bne 0x8cbfc",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "rsb r6, r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "cmp r6, r0",
            "mov r4, r0",
            "bhs 0x8cc5c",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "rsb r6, r6, r4",
            "add r1, r6, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer11set_currentEj",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "ldrh r2, [sp, 2]",
            "ldrh r3, [r4, 0x4c]",
            "rsb r3, r3, r2",
            "add r1, r3, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer11set_currentEj",
            "b 0x8cbdc",
            "mov r0, r5",
            "add r1, r4, 0x2b",
            "mov r2, 0x20",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "b 0x8cb78"
        ]
    },
    "rsym._ZN5yaSSL3minItEET_S1_S1_": {
        "function_address": "0x0003db10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x844]!"
        ]
    },
    "fcn.000927e8": {
        "function_address": "0x000927e8",
        "instructions": [
            "mov r3, 0",
            "push {r4, lr}",
            "str r3, [r0, 8]",
            "mov r4, r0",
            "str r3, [r0]",
            "str r3, [r0, 4]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN5yaSSL11CertManagerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11CertManagerC1Ev": {
        "function_address": "0x0003cc58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x214]!"
        ]
    },
    "fcn.0007d870": {
        "function_address": "0x0007d870",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007d904]",
            "ldr r3, [0x0007d908]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x370",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007d90c]",
            "mov r1, 8",
            "ldr r2, [r4, r2]",
            "add r6, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, r1",
            "add r7, r0, 0x10",
            "add r4, r0, 0x1c8",
            "add ip, r0, 0x1d8",
            "str r6, [r0, 0xc]",
            "mov r6, 0",
            "str r7, [r0, 8]",
            "str r6, [r0, 0x30]",
            "str r1, [r0, 0x1bc]",
            "str r4, [r0, 0x1c0]",
            "str ip, [r0, 0x1c4]",
            "str r3, [r0, 0x1ec]",
            "str r2, [r0, 0x1b8]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0x1e8]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_yaSSL::BulkCipher_.remove_yaSSL::BulkCipher_": {
        "function_address": "0x00089664",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x896bc",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x896d4",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x896c4",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE8pop_backEv",
            "mov r0, 1",
            "b 0x896bc",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE9pop_frontEv",
            "mov r0, 1",
            "b 0x896bc"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE7look_upES3_": {
        "function_address": "0x0003cda8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x134]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE8pop_backEv": {
        "function_address": "0x0003e6f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x54]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE9pop_frontEv": {
        "function_address": "0x0003dc24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x78c]!"
        ]
    },
    "fcn.000a2150": {
        "function_address": "0x000a2150",
        "instructions": [
            "ldr ip, [0x000a21cc]",
            "ldr r3, [0x000a21d0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "cmp r1, 8",
            "add r3, r3, 8",
            "push {r4, lr}",
            "str r3, [r0]",
            "bhi 0xa2184",
            "cmp r2, 0x80",
            "bhi 0xa21a8",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x000a21d4]",
            "ldr r1, [0x000a21d8]",
            "ldr r0, [0x000a21dc]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x74",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a21d4]",
            "ldr r1, [0x000a21d8]",
            "ldr r0, [0x000a21e0]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x75",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0008ab78": {
        "function_address": "0x0008ab78",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0008abcc]",
            "ldr r3, [0x0008abd0]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x24]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x1c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add r0, r4, 4",
            "bl rsym._ZN5yaSSL14ServerDHParamsD1Ev",
            "ldr r3, [0x0008abd4]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL14ServerDHParamsD1Ev": {
        "function_address": "0x0003d4c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc74]!"
        ]
    },
    "sym.mySTL::list_yaSSL::output_buffer_::pop_front__": {
        "function_address": "0x00088610",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x88658",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_uncompress": {
        "function_address": "0x0004ff04",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r2]",
            "mov r5, r0",
            "cmp r7, 0",
            "sub sp, sp, 8",
            "mov r4, r2",
            "mov r8, r1",
            "streq r1, [r2]",
            "moveq r0, r7",
            "bne 0x4ff38",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r7",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "subs r6, r0, 0",
            "beq 0x4ff7c",
            "ldr r3, [r4]",
            "add r1, sp, 8",
            "str r3, [r1, -4]!",
            "mov r2, r5",
            "mov r3, r8",
            "bl sym.imp.uncompress",
            "ldr r2, [sp, 4]",
            "subs r7, r0, 0",
            "str r2, [r4]",
            "beq 0x4ff84",
            "mov r0, r6",
            "bl rsym.my_no_flags_free",
            "mov r0, 1",
            "b 0x4ff2c",
            "mov r1, r6",
            "mov r0, r5",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "bl rsym.my_no_flags_free",
            "mov r0, r7",
            "b 0x4ff2c"
        ]
    },
    "sym.imp.uncompress": {
        "function_address": "0x00040738",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xad4]!"
        ]
    },
    "fcn.0008a6d0": {
        "function_address": "0x0008a6d0",
        "instructions": [
            "ldr r3, [0x0008a704]",
            "ldr r2, [0x0008a708]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000b38e4": {
        "function_address": "0x000b38e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r6, r4, 0x10",
            "mov r1, 8",
            "mov r2, 0x80",
            "bl rsym._ZN8TaoCrypt19HASH64withTransformC2Ejj",
            "add lr, r5, 0x10",
            "mov ip, r6",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r6, [0x000b395c]",
            "ldm lr!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3960]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r6, pc, r6",
            "ldr r7, [r6, r7]",
            "ldmib r5, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r4, {r1, r2, r3}",
            "str r7, [r4]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r1, r5, 0x50",
            "add r0, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt19HASH64withTransformC2Ejj": {
        "function_address": "0x0003f010",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa44]!"
        ]
    },
    "method.TaoCrypt::Integer.DivideByPowerOf2_TaoCrypt::Integer__TaoCrypt::Integer__TaoCrypt::Integer_const__unsigned_int_": {
        "function_address": "0x000ac2d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sl, r1",
            "mov r7, r3",
            "mov r1, r2",
            "sub sp, sp, 0x2c",
            "mov r5, r0",
            "mov r0, sl",
            "mov r6, r2",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r7",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "add r4, r7, 0x1f",
            "lsr r4, r4, 5",
            "ldr r8, [0x000ac5e4]",
            "cmp r0, r4",
            "add r8, pc, r8",
            "blo 0xac3fc",
            "cmp r4, 8",
            "bls 0xac550",
            "cmp r4, 0x10",
            "movls sb, 0x10",
            "bls 0xac35c",
            "cmp r4, 0x20",
            "movls sb, 0x20",
            "bls 0xac35c",
            "cmp r4, 0x40",
            "movls sb, 0x40",
            "bls 0xac35c",
            "sub r0, r4, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov sb, 1",
            "lsl sb, sb, r0",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "mov ip, 1",
            "add r0, r5, 8",
            "mov r3, sb",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r0, [r5, 4]",
            "ldr r1, [r6, 4]",
            "str sb, [r5]",
            "lsl fp, r4, 2",
            "mov r3, 0",
            "mov r2, r3",
            "ldr ip, [r1, r3]",
            "add r2, r2, 1",
            "cmp r4, r2",
            "str ip, [r0, r3]",
            "add r3, r3, 4",
            "bhi 0xac390",
            "ldr r0, [r5, 4]",
            "ldr sb, [r5]",
            "subs sb, sb, r4",
            "add fp, r0, fp",
            "beq 0xac3d4",
            "mov r3, 0",
            "mov r2, r3",
            "str r2, [fp, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp sb, r3",
            "bhi 0xac3c4",
            "ands r3, r7, 0x1f",
            "bne 0xac598",
            "mov r3, 0",
            "str r3, [r5, 0xc]",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 1",
            "beq 0xac4a0",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 8",
            "bls 0xac50c",
            "cmp r0, 0x10",
            "movls r4, 0x10",
            "bls 0xac444",
            "cmp r0, 0x20",
            "movls r4, 0x20",
            "bls 0xac444",
            "cmp r0, 0x40",
            "movls r4, 0x40",
            "bls 0xac444",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r4, 1",
            "lsl r4, r4, r0",
            "b 0xac51c",
            "mov ip, 1",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "add r0, r5, 8",
            "mov r3, r4",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r0, [r5, 4]",
            "ldr ip, [r6, 4]",
            "str r4, [r5]",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [ip, r3]",
            "add r2, r2, 1",
            "cmp r2, r4",
            "str r1, [r0, r3]",
            "add r3, r3, 4",
            "blo 0xac474",
            "mov r3, 0",
            "str r3, [r5, 0xc]",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 1",
            "bne 0xac3f0",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "cmp r0, 0",
            "bne 0xac3f0",
            "add r4, sp, 0x18",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegermmEv",
            "add r6, sp, 8",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r2, r5",
            "mov r0, r6",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 8",
            "ldr r1, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xac3f0",
            "ldr r3, [0x000ac5e8]",
            "add r8, r8, r3",
            "add r0, r8, r0, lsl 2",
            "ldr r4, [r0, 0x5ec]",
            "mov ip, 1",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "add r0, r5, 8",
            "mov r3, r4",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "cmp r4, 0",
            "str r0, [r5, 4]",
            "str r4, [r5]",
            "ldr ip, [r6, 4]",
            "bne 0xac46c",
            "b 0xac3dc",
            "ldr r3, [0x000ac5e8]",
            "lsl fp, r4, 2",
            "add r3, r8, r3",
            "add r3, r3, fp",
            "ldr sb, [r3, 0x5ec]",
            "ldr r1, [r5, 4]",
            "ldr r2, [r5]",
            "mov ip, 1",
            "add r0, r5, 8",
            "mov r3, sb",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "cmp r4, 0",
            "str r0, [r5, 4]",
            "str sb, [r5]",
            "ldr r1, [r6, 4]",
            "bne 0xac388",
            "b 0xac3b0",
            "ldr r2, [r5]",
            "sub r4, r4, 1",
            "cmp r4, r2",
            "bhs 0xac5c0",
            "ldr r2, [r5, 4]",
            "mvn r0, 0",
            "ldr r1, [r2, r4, lsl 2]",
            "bic r3, r1, r0, lsl r3",
            "str r3, [r2, r4, lsl 2]",
            "b 0xac3dc",
            "ldr r3, [0x000ac5e8]",
            "ldr r1, [0x000ac5ec]",
            "ldr r0, [0x000ac5f0]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegermmEv": {
        "function_address": "0x0003e2cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x31c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6Power2Ej": {
        "function_address": "0x0003ecbc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc7c]!"
        ]
    },
    "sym.yaSSL_CTX_sess_timeouts": {
        "function_address": "0x00085b28",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x28]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_no_flags_free": {
        "function_address": "0x00048acc",
        "instructions": [
            "cmp r0, 0",
            "push {r4, lr}",
            "blne sym.imp.free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::Digest_::pop_back__": {
        "function_address": "0x00089054",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x8909c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.open_cached_file": {
        "function_address": "0x00055e78",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "cmp r1, 0",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "mov r5, r2",
            "mov r7, r3",
            "ldr r6, [sp, 0x28]",
            "moveq r0, r1",
            "movne r0, r1",
            "andne r1, r6, 0x10",
            "blne rsym.my_strdup",
            "cmp r5, 0",
            "str r0, [r4, 0x80]",
            "moveq r0, r5",
            "movne r0, r5",
            "andne r1, r6, 0x10",
            "blne rsym.my_strdup",
            "mov ip, 0",
            "str r0, [r4, 0x84]",
            "str ip, [r4, 0x7c]",
            "str ip, [r4, 0x18]",
            "orr lr, r6, 4",
            "mov r2, r7",
            "mov r0, r4",
            "mvn r1, 0",
            "mov r3, 2",
            "mov r5, 0",
            "mov r6, 0",
            "stm sp, {r5, r6}",
            "str ip, [sp, 8]",
            "str lr, [sp, 0xc]",
            "bl rsym.init_io_cache",
            "cmp r0, 0",
            "beq 0x55f14",
            "ldr r0, [r4, 0x80]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x84]",
            "bl rsym.my_no_flags_free",
            "mov r0, 1",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.init_io_cache": {
        "function_address": "0x0003f3ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7dc]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000bada8",
        "instructions": [
            "push {r4, lr}",
            "ldrb r3, [r0, 0xc]",
            "sub sp, sp, 8",
            "cmp r3, 0",
            "mov r4, r0",
            "bne 0xbadd4",
            "str r1, [sp, 4]",
            "str r2, [sp]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE12KeyInnerHashEv",
            "ldr r2, [sp]",
            "ldr r1, [sp, 4]",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3MD5EE12KeyInnerHashEv": {
        "function_address": "0x0003d498",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc94]!"
        ]
    },
    "sym.yaRAND_bytes": {
        "function_address": "0x000853bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "add r4, sp, 4",
            "mov r6, r0",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym._ZN5yaSSL10RandomPoolC1Ev",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL10RandomPool8GetErrorEv",
            "cmp r0, 0",
            "movne r5, 0",
            "bne 0x85400",
            "mov r2, r5",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r5, 1",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL10RandomPoolD1Ev",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.memdup_root": {
        "function_address": "0x0004c194",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "mov r1, r2",
            "mov r5, r2",
            "bl rsym.alloc_root",
            "subs r4, r0, 0",
            "movne r1, r6",
            "movne r2, r5",
            "blne sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_open": {
        "function_address": "0x00049298",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r3, [0x000492e0]",
            "ldr ip, [0x000492e4]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "mov r4, r2",
            "mov r5, r0",
            "ldr r2, [ip]",
            "bl sym.imp.open64",
            "mov r1, r5",
            "mov r2, 1",
            "mov r3, 0x1d",
            "str r4, [sp]",
            "bl rsym.my_register_filename",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::FileSink.FileSink__": {
        "function_address": "0x000a1d74",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "blne sym.imp.fclose",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00084c40": {
        "function_address": "0x00084c40",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.pthread_mutex_destroy",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00092164": {
        "function_address": "0x00092164",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r0, [r0, 0xc]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL13output_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r0, [r4]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL12input_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_",
            "add r0, r4, 0xc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEED1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL13output_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_": {
        "function_address": "0x0003e830",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf84]!"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL12input_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_": {
        "function_address": "0x0003e458",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x214]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEED1Ev": {
        "function_address": "0x0003de94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5ec]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEED1Ev": {
        "function_address": "0x0003fc70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x204]!"
        ]
    },
    "fcn.0009e748": {
        "function_address": "0x0009e748",
        "instructions": [
            "ldr ip, [0x0009e784]",
            "ldr r3, [0x0009e788]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009e78c]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009e790]",
            "ldr r0, [0x0009e794]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::HMAC_SHA::HMAC_SHAImpl__yaSSL::HMAC_SHA::HMAC_SHAImpl_": {
        "function_address": "0x00080d9c",
        "instructions": [
            "ldr r3, [0x00080dcc]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080dd0]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0, 0x10]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_master_send_query": {
        "function_address": "0x00045c14",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r4, [r0, 0x39c]",
            "sub sp, sp, 0x14",
            "ldr ip, [r4]",
            "mov r5, r0",
            "cmp ip, 0",
            "mov r7, r1",
            "mov r6, r2",
            "beq 0x45c80",
            "mov r1, 1",
            "strb r1, [r4, 0x385]",
            "mov r3, 0",
            "str r4, [r5, 0x3a8]",
            "ldr ip, [r4, 0x3b0]",
            "mov r2, r3",
            "str r1, [sp, 8]",
            "mov r0, r4",
            "str r7, [sp]",
            "str r6, [sp, 4]",
            "str r3, [sp, 0xc]",
            "mov r1, 3",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r1, ip",
            "mov r0, r4",
            "mov r2, ip",
            "mov r3, ip",
            "str ip, [sp]",
            "str ip, [sp, 4]",
            "str ip, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl rsym.mysql_real_connect",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x45c38",
            "b 0x45c74"
        ]
    },
    "rsym.mysql_real_connect": {
        "function_address": "0x0003e140",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x424]!"
        ]
    },
    "sym.TaoCrypt::Signature_Encoder::Signature_Encoder_unsigned_char_const__unsigned_int__TaoCrypt::HashType__TaoCrypt::Source_": {
        "function_address": "0x0009aa74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [0x0009aba4]",
            "ldr lr, [0x0009aba8]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "sub sp, sp, 0x4c",
            "add lr, lr, 8",
            "add r4, sp, 0x14",
            "mov r6, r3",
            "mov r3, 0",
            "str lr, [r0]",
            "str r3, [r0, 4]",
            "mov r3, r4",
            "mov r5, r0",
            "str r4, [sp, 0xc]",
            "ldr r4, [sp, 0x70]",
            "bl rsym._ZN8TaoCrypt17Signature_Encoder9SetDigestEPKhjPh",
            "add fp, sp, 0x30",
            "mov r1, r6",
            "mov r2, fp",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11DER_Encoder9SetAlgoIDENS_8HashTypeEPh",
            "add sb, sp, 0x40",
            "add sl, r0, r8",
            "mov r6, r0",
            "mov r1, sb",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt11SetSequenceEjPh",
            "ldr r2, [r4]",
            "add sl, sl, r0",
            "cmp sl, r2",
            "mov r7, r0",
            "bls 0x9ab30",
            "ldr r1, [r4, 4]",
            "mov ip, 1",
            "mov r3, sl",
            "add r0, r4, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r2, [r4]",
            "str r0, [r4, 4]",
            "mov r1, 0",
            "add r0, r0, r2",
            "rsb r2, r2, sl",
            "bl sym.imp.memset",
            "str sl, [r4]",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "mov r1, sb",
            "mov r2, r7",
            "add r0, r0, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "add r7, r7, r3",
            "mov r1, fp",
            "mov r2, r6",
            "add r0, r0, r7",
            "str r7, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "ldr r0, [r4, 4]",
            "add r6, r6, r3",
            "mov r2, r8",
            "add r0, r0, r6",
            "str r6, [r4, 0xc]",
            "ldr r1, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0xc]",
            "mov r0, r5",
            "add r8, r3, r8",
            "str r8, [r4, 0xc]",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "fcn.000baab0": {
        "function_address": "0x000baab0",
        "instructions": [
            "ldr ip, [0x000baaec]",
            "ldr r3, [0x000baaf0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000baaf4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000baaf8]",
            "ldr r0, [0x000baafc]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_fread": {
        "function_address": "0x0004d14c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "mov r6, r3",
            "mov r0, r1",
            "mov r3, r5",
            "mov r1, 1",
            "mov r7, r2",
            "bl sym.imp.fread",
            "cmp r7, r0",
            "mov r4, r0",
            "beq 0x4d240",
            "tst r6, 0x1a",
            "bne 0x4d1c8",
            "bl sym.imp.__errno_location",
            "mov r7, r0",
            "bl rsym._my_thread_var",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "mvneq r3, 0",
            "str r3, [r0]",
            "mov r0, r5",
            "bl sym.imp.ferror",
            "cmp r0, 0",
            "bne 0x4d1c0",
            "tst r6, 6",
            "bne 0x4d1c0",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mvn r4, 0",
            "b 0x4d1b4",
            "mov r0, r5",
            "bl sym.imp.ferror",
            "cmp r0, 0",
            "bne 0x4d210",
            "tst r6, 6",
            "beq 0x4d180",
            "mov r0, r5",
            "bl sym.imp.fileno",
            "bl rsym.my_filename",
            "mov r8, r0",
            "bl sym.imp.__errno_location",
            "mov r7, r0",
            "mov r2, r8",
            "mov r1, 0x24",
            "ldr r3, [r7]",
            "mov r0, 9",
            "bl rsym.my_error",
            "b 0x4d188",
            "mov r0, r5",
            "bl sym.imp.fileno",
            "bl rsym.my_filename",
            "mov r8, r0",
            "bl sym.imp.__errno_location",
            "mov r2, r8",
            "mov r7, r0",
            "ldr r3, [r0]",
            "mov r1, 0x24",
            "mov r0, 2",
            "bl rsym.my_error",
            "b 0x4d188",
            "tst r6, 6",
            "movne r4, 0",
            "b 0x4d1b4"
        ]
    },
    "sym.imp.ferror": {
        "function_address": "0x0004045c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcbc]!"
        ]
    },
    "sym.imp.fileno": {
        "function_address": "0x0003cd60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x164]!"
        ]
    },
    "sym.yaSSL::Certificate::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008cfa0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r0, r2",
            "sub sp, sp, 0x10",
            "mov r8, r2",
            "mov r4, r1",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto15use_certManagerEv",
            "ldr r1, [0x0008d11c]",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008d11c]",
            "mov r0, r4",
            "strb r3, [sp, 0xc]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008d11c]",
            "mov r0, r4",
            "strb r3, [sp, 0xd]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "add r6, sp, 0xc",
            "ldrb r3, [r0]",
            "add r1, sp, 8",
            "mov r0, r6",
            "strb r3, [sp, 0xe]",
            "bl rsym._ZN5yaSSL7c24to32EPKhRj",
            "ldr r3, [sp, 8]",
            "cmp r3, 0",
            "beq 0x8d0c4",
            "add r7, sp, 4",
            "mov r0, r4",
            "ldr r1, [0x0008d11c]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008d11c]",
            "mov r0, r4",
            "strb r3, [sp, 0xc]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008d11c]",
            "mov r0, r4",
            "strb r3, [sp, 0xd]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r7",
            "mov r0, r6",
            "strb r3, [sp, 0xe]",
            "bl rsym._ZN5yaSSL7c24to32EPKhRj",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [sp, 4]",
            "mov sl, r0",
            "bl rsym._ZN5yaSSL4x509C1Ej",
            "mov r1, sl",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11CertManager11AddPeerCertEPNS_4x509E",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL4x50910use_bufferEv",
            "mov sb, r0",
            "mov r0, sl",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "mov r1, sb",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldmib sp, {r2, r3}",
            "sub r3, r3, 3",
            "rsb r3, r2, r3",
            "cmp r3, 0",
            "str r3, [sp, 8]",
            "bne 0x8d01c",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11CertManager8ValidateEv",
            "subs r1, r0, 0",
            "bne 0x8d0f8",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x8d104",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8d0ec",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 2",
            "str r3, [r0]",
            "b 0x8d0ec"
        ]
    },
    "rsym._ZN5yaSSL11CertManager11AddPeerCertEPNS_4x509E": {
        "function_address": "0x0003e6bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7c]!"
        ]
    },
    "rsym._ZN5yaSSL11CertManager8ValidateEv": {
        "function_address": "0x0003f268",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8b4]!"
        ]
    },
    "method.TaoCrypt::DSA_PublicKey.Initialize_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a1218",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r2",
            "mov r4, r0",
            "mov r6, r3",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r5",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r6",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, r4, 0x30",
            "ldr r1, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000b3b6c": {
        "function_address": "0x000b3b6c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 8",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add sl, r6, 0x10",
            "add ip, r5, 0x10",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "ldm sl, {r0, r1, r2}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, sb",
            "ldr r8, [0x000b3bf4]",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3bf8]",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.yaDH_free": {
        "function_address": "0x00085208",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6BIGNUMEEEvPT_",
            "ldr r0, [r4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6BIGNUMEEEvPT_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_2DHEEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_6BIGNUMEEEvPT_": {
        "function_address": "0x0003cba4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x28c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_2DHEEEvPT_": {
        "function_address": "0x0003f61c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x63c]!"
        ]
    },
    "method.TaoCrypt::Integer.Integer_TaoCrypt::Integer::Sign__unsigned_int__unsigned_int_": {
        "function_address": "0x000a8908",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r6, [0x000a89d4]",
            "mov r4, r0",
            "mov r0, 2",
            "str r0, [r4]",
            "add r6, pc, r6",
            "sub sp, sp, 8",
            "mov r8, r1",
            "mov sb, r2",
            "mov sl, r3",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r7, 0",
            "mov r0, r3",
            "mov r2, r5",
            "mov r3, r5",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "lsl r2, r5, 2",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r8, [r4, 0xc]",
            "cmp r3, r7",
            "beq 0xa89b0",
            "ldr r3, [r4, 4]",
            "str sl, [r3]",
            "ldr r2, [r4]",
            "cmp r2, 1",
            "bls 0xa89b0",
            "str sb, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [0x000a89d8]",
            "ldr r1, [0x000a89dc]",
            "ldr r0, [0x000a89e0]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::SHA::operator_yaSSL::SHA_const_": {
        "function_address": "0x0007dee0",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r1, 4]",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt3SHAaSERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3SHAaSERKS0_": {
        "function_address": "0x0003da50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8c4]!"
        ]
    },
    "sym.yaSSL::receiveData_yaSSL::SSL__yaSSL::Data__bool_": {
        "function_address": "0x000825f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r6, r2",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0x50",
            "beq 0x82638",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL23verfiyHandShakeCompleteEv",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x82648",
            "mvn r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x82614",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL7HasDataEv",
            "cmp r0, 0",
            "beq 0x826f0",
            "cmp r6, 0",
            "beq 0x826e0",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL3SSL8PeekDataERNS_4DataE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "ldr r3, [r5]",
            "mov r6, r0",
            "mov r0, r5",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r2, 0",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3Log8ShowDataEjb",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x8262c",
            "ldr r3, [r5]",
            "mov r0, r5",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x826fc",
            "mov r0, r5",
            "ldr r3, [r5]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "b 0x82630",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL3SSL8fillDataERNS_4DataE",
            "b 0x8266c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "b 0x82658",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket10WouldBlockEv",
            "cmp r0, 0",
            "beq 0x826c8",
            "mov r0, r4",
            "mov r1, 0x50",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mvn r0, 7",
            "b 0x82630"
        ]
    },
    "rsym._ZN5yaSSL3SSL23verfiyHandShakeCompleteEv": {
        "function_address": "0x0003f478",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x754]!"
        ]
    },
    "rsym._ZNK5yaSSL3SSL7HasDataEv": {
        "function_address": "0x000400a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf34]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL8PeekDataERNS_4DataE": {
        "function_address": "0x0003ceb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x84]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL6useLogEv": {
        "function_address": "0x0003edf4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbac]!"
        ]
    },
    "rsym._ZN5yaSSL3Log8ShowDataEjb": {
        "function_address": "0x0003dac8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x874]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL8fillDataERNS_4DataE": {
        "function_address": "0x0003fe08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf4]!"
        ]
    },
    "rsym._ZN5yaSSL12processReplyERNS_3SSLE": {
        "function_address": "0x0003e524",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x18c]!"
        ]
    },
    "rsym._ZNK5yaSSL6Socket10WouldBlockEv": {
        "function_address": "0x0003e0e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x464]!"
        ]
    },
    "fcn.0007e584": {
        "function_address": "0x0007e584",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e5e0]",
            "ldr r3, [0x0007e5e4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RMD7RMDImplEEEvPT_",
            "ldr r3, [0x0007e5e8]",
            "ldr r1, [0x0007e5ec]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e5f0]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e5f4]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3RMD7RMDImplEEEvPT_": {
        "function_address": "0x0003ff40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x24]!"
        ]
    },
    "method.mySTL::list_yaSSL::Digest_.push_front_yaSSL::Digest_": {
        "function_address": "0x00088f4c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_net_local_init": {
        "function_address": "0x00044c10",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x00044c74]",
            "ldr r3, [0x00044c78]",
            "add r4, pc, r4",
            "ldr r6, [r4, r3]",
            "ldr r7, [0x00044c7c]",
            "ldr r3, [r6]",
            "mov r5, r0",
            "str r3, [r0, 0x28]",
            "mov r1, r7",
            "bl rsym.my_net_set_read_timeout",
            "mov r0, r5",
            "mov r1, r7",
            "bl rsym.my_net_set_write_timeout",
            "ldr r3, [0x00044c80]",
            "mov r2, 1",
            "ldr r3, [r4, r3]",
            "str r2, [r5, 0x40]",
            "ldr r2, [r6]",
            "ldr r3, [r3]",
            "cmp r2, r3",
            "strhs r2, [r5, 0x2c]",
            "strlo r3, [r5, 0x2c]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.my_net_set_read_timeout": {
        "function_address": "0x0003fc04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x24c]!"
        ]
    },
    "rsym.my_net_set_write_timeout": {
        "function_address": "0x000400d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf14]!"
        ]
    },
    "sym.TaoCrypt::MD2::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000adeb8",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr sl, [0x000aec34]",
            "subs r7, r2, 0",
            "add sl, pc, sl",
            "mov r4, r0",
            "mov r8, r1",
            "beq 0xaec14",
            "ldr sb, [0x000aec38]",
            "add r5, sl, sb",
            "b 0xadee8",
            "subs r7, r7, r6",
            "beq 0xaec14",
            "ldr r3, [r4, 0x28]",
            "ldr r0, [r4, 0x20]",
            "rsb r6, r3, 0x10",
            "cmp r7, r6",
            "movlo r6, r7",
            "mov r1, r8",
            "mov r2, r6",
            "add r0, r0, r3",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 0x28]",
            "add r8, r8, r6",
            "add r2, r6, r2",
            "cmp r2, 0x10",
            "str r2, [r4, 0x28]",
            "bne 0xadee0",
            "ldr r0, [r4, 8]",
            "mov r3, 0",
            "str r3, [r4, 0x28]",
            "add r0, r0, 0x10",
            "ldr r1, [r4, 0x20]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xf",
            "bls 0xaec28",
            "ldr r2, [r4, 4]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 0x20",
            "ldrb r2, [r3, 0xf]",
            "bls 0xaec1c",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0x10]",
            "ldrb r1, [r3]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x20]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0",
            "beq 0xaec1c",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 0",
            "ldrb r1, [r3]",
            "beq 0xaec1c",
            "ldr r0, [r4, 0x20]",
            "mov ip, sb",
            "ldrb r0, [r0]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x21",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 1]",
            "ldrb r1, [r3, 0x11]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x21]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 1",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 1",
            "ldrb r1, [r3, 1]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 1]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 1]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x22",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 2]",
            "ldrb r2, [r3, 0x12]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x22]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 2",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 2",
            "ldrb r2, [r3, 2]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 2]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 2]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x23",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 3]",
            "ldrb r1, [r3, 0x13]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x23]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 3",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 3",
            "ldrb r1, [r3, 3]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 3]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 3]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x24",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 4]",
            "ldrb r2, [r3, 0x14]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x24]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 4",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 4",
            "ldrb r2, [r3, 4]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 4]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 4]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x25",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 5]",
            "ldrb r1, [r3, 0x15]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x25]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 5",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 5",
            "ldrb r1, [r3, 5]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 5]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 5]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x26",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 6]",
            "ldrb r2, [r3, 0x16]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x26]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 6",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 6",
            "ldrb r2, [r3, 6]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 6]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 6]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x27",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 7]",
            "ldrb r1, [r3, 0x17]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x27]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 7",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 7",
            "ldrb r1, [r3, 7]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 7]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 7]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x28",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 8]",
            "ldrb r2, [r3, 0x18]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x28]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 8",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 8",
            "ldrb r2, [r3, 8]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 8]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x29",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 9]",
            "ldrb r1, [r3, 0x19]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x29]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 9",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 9",
            "ldrb r1, [r3, 9]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 9]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 9]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2a",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0xa]",
            "ldrb r2, [r3, 0x1a]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x2a]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xa",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 0xa",
            "ldrb r2, [r3, 0xa]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 0xa]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 0xa]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2b",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0xb]",
            "ldrb r1, [r3, 0x1b]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x2b]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xb",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 0xb",
            "ldrb r1, [r3, 0xb]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 0xb]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r1, r2, r1",
            "strb r1, [r3, 0xb]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2c",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0xc]",
            "ldrb r2, [r3, 0x1c]",
            "eor r2, r0, r2",
            "strb r2, [r3, 0x2c]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xc",
            "bls 0xaec20",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r2, 0xc",
            "ldrb r2, [r3, 0xc]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 0xc]",
            "eor r1, r1, r0",
            "add r1, r5, r1",
            "ldrb r1, [r1, 0xdc]",
            "eor r2, r1, r2",
            "strb r2, [r3, 0xc]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2d",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0xd]",
            "ldrb r1, [r3, 0x1d]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x2d]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xd",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 0xd",
            "ldrb r1, [r3, 0xd]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 0xd]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r2, [r2, 0xdc]",
            "eor r2, r2, r1",
            "strb r2, [r3, 0xd]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2e",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r0, [r3, 0xe]",
            "ldrb r1, [r3, 0x1e]",
            "eor r1, r0, r1",
            "strb r1, [r3, 0x2e]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xe",
            "bls 0xaec20",
            "ldr r1, [r4, 0x1c]",
            "ldr r3, [r4, 0x14]",
            "cmp r1, 0xe",
            "ldrb r1, [r3, 0xe]",
            "bls 0xaec20",
            "ldr r0, [r4, 0x20]",
            "ldrb r0, [r0, 0xe]",
            "eor r2, r2, r0",
            "add r2, r5, r2",
            "ldrb r0, [r2, 0xdc]",
            "eor r0, r0, r1",
            "strb r0, [r3, 0xe]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0x2f",
            "bls 0xaec20",
            "ldr r3, [r4, 8]",
            "ldrb r1, [r3, 0xf]",
            "ldrb r2, [r3, 0x1f]",
            "eor r2, r1, r2",
            "strb r2, [r3, 0x2f]",
            "ldr r3, [r4, 0x10]",
            "cmp r3, 0xf",
            "bls 0xaec20",
            "ldr r3, [r4, 0x1c]",
            "ldr r1, [r4, 0x14]",
            "cmp r3, 0xf",
            "ldrb fp, [r1, 0xf]",
            "bls 0xaec20",
            "ldr r2, [r4, 0x20]",
            "mov r3, 0",
            "ldrb ip, [r2, 0xf]",
            "mov r2, r3",
            "eor r0, r0, ip",
            "add r0, r5, r0",
            "ldrb r0, [r0, 0xdc]",
            "eor fp, r0, fp",
            "strb fp, [r1, 0xf]",
            "b 0xaebe8",
            "ldr r1, [r4, 8]",
            "add r2, r5, r2",
            "ldrb r0, [r2, 0xdc]",
            "ldrb r2, [r1]",
            "eor r2, r0, r2",
            "strb r2, [r1]",
            "ldr r1, [r4, 4]",
            "cmp r1, 1",
            "bls 0xaebf4",
            "ldr r0, [r4, 8]",
            "add r2, r5, r2",
            "ldrb r1, [r2, 0xdc]",
            "ldrb r2, [r0, 1]",
            "eor r1, r1, r2",
            "strb r1, [r0, 1]",
            "ldr r2, [r4, 4]",
            "cmp r2, 2",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 2]",
            "eor r1, r0, r1",
            "strb r1, [r2, 2]",
            "ldr r2, [r4, 4]",
            "cmp r2, 3",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 3]",
            "eor r1, r0, r1",
            "strb r1, [r2, 3]",
            "ldr r2, [r4, 4]",
            "cmp r2, 4",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 4]",
            "eor r1, r0, r1",
            "strb r1, [r2, 4]",
            "ldr r2, [r4, 4]",
            "cmp r2, 5",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 5]",
            "eor r1, r0, r1",
            "strb r1, [r2, 5]",
            "ldr r2, [r4, 4]",
            "cmp r2, 6",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 6]",
            "eor r1, r0, r1",
            "strb r1, [r2, 6]",
            "ldr r2, [r4, 4]",
            "cmp r2, 7",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 7]",
            "eor r1, r0, r1",
            "strb r1, [r2, 7]",
            "ldr r2, [r4, 4]",
            "cmp r2, 8",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 8]",
            "eor r1, r0, r1",
            "strb r1, [r2, 8]",
            "ldr r2, [r4, 4]",
            "cmp r2, 9",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 9]",
            "eor r1, r0, r1",
            "strb r1, [r2, 9]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xa",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xa]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xa]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xb",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xb]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xb]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xc",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xc]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xc]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xd",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xd]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xd]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xe",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xe]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xe]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0xf",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0xf]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0xf]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x10",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x10]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x10]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x11",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x11]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x11]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x12",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x12]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x12]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x13",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x13]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x13]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x14",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x14]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x14]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x15",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x15]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x15]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x16",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x16]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x16]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x17",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x17]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x17]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x18",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x18]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x18]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x19",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x19]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x19]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1a",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1a]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1a]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1b",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1b]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1b]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1c",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1c]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1c]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1d",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1d]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1d]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1e",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1e]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1e]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x1f",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x1f]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x1f]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x20",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x20]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x20]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x21",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x21]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x21]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x22",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x22]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x22]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x23",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x23]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x23]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x24",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x24]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x24]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x25",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x25]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x25]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x26",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x26]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x26]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x27",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x27]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x27]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x28",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x28]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x28]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x29",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x29]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x29]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2a",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2a]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2a]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2b",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2b]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2b]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2c",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2c]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2c]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2d",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2d]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2d]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2e",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2e]",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2e]",
            "ldr r2, [r4, 4]",
            "cmp r2, 0x2f",
            "bls 0xaebf4",
            "ldr r2, [r4, 8]",
            "add r1, r5, r1",
            "ldrb r0, [r1, 0xdc]",
            "ldrb r1, [r2, 0x2f]",
            "cmp r3, 0x11",
            "eor r1, r0, r1",
            "strb r1, [r2, 0x2f]",
            "beq 0xadee0",
            "add r2, r1, r3",
            "and r2, r2, 0xff",
            "add r3, r3, 1",
            "ldr r0, [r4, 4]",
            "cmp r0, 0",
            "bne 0xae520",
            "add r3, sl, sb",
            "ldr r1, [0x000aec3c]",
            "ldr r0, [0x000aec40]",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr ip, [0x000aec38]",
            "add r3, sl, ip",
            "b 0xaebf8",
            "ldr r3, [0x000aec38]",
            "add r3, sl, r3",
            "b 0xaebf8"
        ]
    },
    "sym.TaoCrypt::FileSource::FileSource_char_const__TaoCrypt::Source_": {
        "function_address": "0x000a1f8c",
        "instructions": [
            "ldr r3, [0x000a1fd0]",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r1, [0x000a1fd4]",
            "add r3, pc, r3",
            "add r1, r3, r1",
            "mov r5, r2",
            "bl sym.imp.fopen64",
            "cmp r0, 0",
            "str r0, [r4]",
            "movne r1, r5",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt10FileSource3getERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_multi_malloc": {
        "function_address": "0x0004dcb8",
        "instructions": [
            "push {r0, r1, r2, r3}",
            "push {r4, lr}",
            "sub sp, sp, 8",
            "ldr r0, [sp, 0x14]",
            "add r4, sp, 0x14",
            "add r3, r4, 4",
            "cmp r0, 0",
            "str r3, [sp, 4]",
            "beq 0x4dd08",
            "add r3, r4, 0xc",
            "mov r0, 0",
            "ldr r2, [r3, -8]",
            "ldr r1, [r3, -4]",
            "add r2, r2, 7",
            "bic r2, r2, 7",
            "cmp r1, 0",
            "str r3, [sp, 4]",
            "add r0, r0, r2",
            "add r3, r3, 8",
            "bne 0x4dce4",
            "ldr r1, [sp, 0x10]",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "beq 0x4dd64",
            "ldr r3, [sp, 0x14]",
            "add r4, r4, 4",
            "cmp r3, 0",
            "str r4, [sp, 4]",
            "beq 0x4dd64",
            "mov r2, r0",
            "str r2, [r3]",
            "ldr r3, [sp, 4]",
            "add r1, r3, 4",
            "str r1, [sp, 4]",
            "add ip, r1, 4",
            "ldr r1, [r3]",
            "str ip, [sp, 4]",
            "ldr r3, [r3, 4]",
            "add r1, r1, 7",
            "bic r1, r1, 7",
            "cmp r3, 0",
            "add r2, r2, r1",
            "bne 0x4dd30",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "add sp, sp, 0x10",
            "bx lr"
        ]
    },
    "sym.yaSSL::RSA::encrypt_unsigned_char__unsigned_char_const__unsigned_int__yaSSL::RandomPool_const_": {
        "function_address": "0x0007ce4c",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0x14",
            "ldr ip, [r0, 4]",
            "mov lr, r1",
            "ldr r1, [sp, 0x18]",
            "add r0, sp, 0x10",
            "str ip, [r0, -8]!",
            "ldr ip, [r1]",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, lr",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType2EE7EncryptEPKhjPhRNS_21RandomNumberGeneratorE",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType2EE7EncryptEPKhjPhRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003f418",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x794]!"
        ]
    },
    "fcn.0008a5fc": {
        "function_address": "0x0008a5fc",
        "instructions": [
            "ldr r3, [0x0008a63c]",
            "ldr r2, [0x0008a640]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0], 4",
            "bl rsym._ZN5yaSSL14ServerDHParamsC1Ev",
            "mov r3, 0",
            "str r3, [r4, 0x24]",
            "str r3, [r4, 0x1c]",
            "str r3, [r4, 0x20]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL14ServerDHParamsC1Ev": {
        "function_address": "0x0003fb44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2cc]!"
        ]
    },
    "sym.TaoCrypt::MD5::MD5_TaoCrypt::MD5_const_": {
        "function_address": "0x000af9c4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 4",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add r7, r5, 0x30",
            "add ip, r5, 0x10",
            "add r3, r6, 0x10",
            "ldm r3, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, r7",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r8, [0x000afa44]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000afa48]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Accumulate_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x000aad9c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r1]",
            "mov r5, r0",
            "ldr r0, [r0, 0xc]",
            "mov r4, r1",
            "cmp r3, r0",
            "beq 0xaadf0",
            "mov r1, r2",
            "add r5, r5, 0xc",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "movge r1, r5",
            "movge r0, r4",
            "blge rsym._ZN8TaoCrypt7IntegermIERKS0_",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bne 0xaadb8",
            "ldr r0, [r4, 4]",
            "ldr r2, [r2, 4]",
            "mov r1, r0",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r0, 0",
            "bne 0xaae6c",
            "ldr r3, [r4]",
            "ldr r2, [r5, 0x10]",
            "ldr r0, [r4, 4]",
            "sub ip, r3, 0xc0000001",
            "lsl ip, ip, 2",
            "add r5, r2, ip",
            "mov r1, r3",
            "add ip, r0, ip",
            "b 0xaae58",
            "ldr r7, [ip]",
            "ldr r6, [r5]",
            "sub r1, r1, 1",
            "cmp r7, r6",
            "bhi 0xaae60",
            "sub ip, ip, 4",
            "sub r5, r5, 4",
            "blo 0xaade4",
            "cmp r1, 0",
            "bne 0xaae38",
            "mov r1, r0",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "b 0xaade4",
            "ldr r2, [r5, 0x10]",
            "ldr r0, [r4, 4]",
            "ldr r3, [r4]",
            "b 0xaae60"
        ]
    },
    "sym.yaSSL::AES::encrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00080330",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r4, 0x34]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "bne 0x803a4",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80398",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x80364",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x80398",
            "ldr r2, [r4, 0x30]",
            "cmp r2, 0",
            "bne 0x80424",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80398",
            "ldr r2, [r4, 4]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r7, r7, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x803d0",
            "b 0x80398",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80398",
            "ldr r2, [r4, 4]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80440",
            "b 0x80398"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::ChangeCipherSpec_": {
        "function_address": "0x0008bc80",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "ldr r1, [0x0008bca8]",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r0, r5",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_make_scrambled_password": {
        "function_address": "0x00047478",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x84",
            "mov r5, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov r0, sp",
            "bl rsym.mysql_sha1_reset",
            "mov r2, r6",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r5",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "mov r0, sp",
            "bl rsym.mysql_sha1_reset",
            "add r6, sp, 0x6c",
            "mov r1, r5",
            "mov r2, 0x14",
            "mov r0, sp",
            "bl rsym.mysql_sha1_input",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym.mysql_sha1_result",
            "mov r0, r5",
            "mov r3, 0x2a",
            "strb r3, [r0], 1",
            "mov r1, r6",
            "mov r2, 0x14",
            "mov r4, sp",
            "bl rsym.octet2hex",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.octet2hex": {
        "function_address": "0x00040150",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xec4]!"
        ]
    },
    "sym.TaoCrypt::Block_unsigned_int__TaoCrypt::AllocatorWithCleanup_unsigned_int___::CleanGrow_unsigned_int_": {
        "function_address": "0x000acf94",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r2, [r0]",
            "sub sp, sp, 0xc",
            "cmp r2, r1",
            "mov r4, r0",
            "mov r5, r1",
            "bhs 0xacfe8",
            "ldr r1, [r0, 4]",
            "mov ip, 1",
            "mov r3, r5",
            "add r0, r0, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r5",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r5, [r4]",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_PrivateKey::CalculateInverse_TaoCrypt::RandomNumberGenerator__TaoCrypt::Integer_const__const": {
        "function_address": "0x000b2f58",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x000b3250]",
            "ldr r5, [0x000b3254]",
            "add r6, pc, r6",
            "ldr r5, [r6, r5]",
            "ldr lr, [0x000b3258]",
            "sub sp, sp, 0xcc",
            "add r5, r5, 8",
            "add r4, sp, 0x2c",
            "str r5, [sp, 0x24]",
            "ldr lr, [r6, lr]",
            "add ip, r4, 0xc",
            "str r3, [sp, 0x1c]",
            "ldr r3, [sp, 0x24]",
            "add lr, lr, 8",
            "mov r5, r1",
            "mov r7, r0",
            "mov r0, ip",
            "str lr, [sp, 0x30]",
            "str ip, [sp, 0x14]",
            "mov sl, r2",
            "str r4, [sp, 0x34]",
            "str r3, [sp, 0x2c]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r3, r4, 0x2c",
            "ldr r2, [r5]",
            "mov r1, 0",
            "add r0, r4, 0x1c",
            "str r3, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldr r0, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "mov fp, r0",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "add r8, sp, 0xa8",
            "mov r2, r0",
            "add sb, sp, 0xb8",
            "mov r0, r8",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r3, r8",
            "mov r1, sl",
            "mov r2, fp",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERNS_21RandomNumberGeneratorERKS0_S4_",
            "ldr r8, [sp, 0xac]",
            "ldr r2, [sp, 0xa8]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r8",
            "bl sym.imp.memset",
            "add r3, r5, 0x10",
            "mov r0, r8",
            "add r8, sp, 0x98",
            "add fp, sp, 0x78",
            "str r3, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [sp, 0x18]",
            "mov r1, r4",
            "mov r0, r8",
            "mov r2, sb",
            "bl rsym._ZNK8TaoCrypt12AbstractRing12ExponentiateERKNS_7IntegerES3_",
            "mov r0, fp",
            "mov r1, r8",
            "ldr r2, [sp, 0x1c]",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "ldr ip, [sp, 0x14]",
            "add sl, sp, 0x68",
            "mov r2, ip",
            "mov r1, fp",
            "mov r0, sl",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sl",
            "ldr r0, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr sl, [sp, 0x6c]",
            "ldr r2, [sp, 0x68]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov fp, r0",
            "mov r0, sl",
            "bl sym.imp.memset",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr sl, [sp, 0x7c]",
            "ldr r2, [sp, 0x78]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, sl",
            "bl sym.imp.memset",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, fp",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add ip, r5, 0x40",
            "add lr, r5, 0x30",
            "add r3, r5, 0x50",
            "add r2, r5, 0x60",
            "mov r1, r8",
            "add r5, r5, 0x70",
            "mov r0, r7",
            "stm sp, {ip, lr}",
            "str r5, [sp, 8]",
            "bl rsym._ZN8TaoCrypt11ModularRootERKNS_7IntegerES2_S2_S2_S2_S2_",
            "mov r0, r4",
            "mov r1, sb",
            "bl rsym._ZNK8TaoCrypt17ModularArithmetic21MultiplicativeInverseERKNS_7IntegerE",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt17ModularArithmetic8MultiplyERKNS_7IntegerES3_",
            "add r5, sp, 0x88",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r4",
            "ldr r3, [sp, 0x18]",
            "mov r2, r7",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt12AbstractRing12ExponentiateERKNS_7IntegerES3_",
            "mov r0, r5",
            "ldr r1, [sp, 0x1c]",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "subs r4, r0, 0",
            "bne 0xb322c",
            "ldr r5, [sp, 0x8c]",
            "ldr r2, [sp, 0x88]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x9c]",
            "ldr r2, [sp, 0x98]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0xbc]",
            "ldr r2, [sp, 0xb8]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x5c]",
            "ldr r2, [sp, 0x58]",
            "ldr r3, [sp, 0x24]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "str r3, [sp, 0x2c]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x4c]",
            "ldr r2, [sp, 0x48]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x3c]",
            "ldr r2, [sp, 0x38]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "add sp, sp, 0xcc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000b325c]",
            "ldr r1, [0x000b3260]",
            "ldr r0, [0x000b3264]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x13c",
            "mov r2, 0x40",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt7IntegerC1ERNS_21RandomNumberGeneratorERKS0_S4_": {
        "function_address": "0x0003d00c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf9c]!"
        ]
    },
    "rsym._ZN8TaoCrypt11ModularRootERKNS_7IntegerES2_S2_S2_S2_S2_": {
        "function_address": "0x0003dfe4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x50c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt17ModularArithmetic21MultiplicativeInverseERKNS_7IntegerE": {
        "function_address": "0x0003f808",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4f4]!"
        ]
    },
    "rsym._ZNK8TaoCrypt17ModularArithmetic8MultiplyERKNS_7IntegerES3_": {
        "function_address": "0x000406a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb34]!"
        ]
    },
    "sym.yaSSL_set_quiet_shutdown": {
        "function_address": "0x00085fa0",
        "instructions": [
            "push {r4, lr}",
            "subs r1, r1, 0",
            "movne r1, 1",
            "bl rsym._ZN5yaSSL3SSL16SetQuietShutdownEb",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3SSL16SetQuietShutdownEb": {
        "function_address": "0x0003d798",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa94]!"
        ]
    },
    "method.yaSSL::DiffieHellman.operator_yaSSL::DiffieHellman_const_": {
        "function_address": "0x0007f514",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r8, [r1]",
            "sub sp, sp, 0x20",
            "mov r4, r0",
            "ldr r7, [r4]",
            "mov r1, r8",
            "add r6, sp, 0x10",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r8, 0x10",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r7",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "add r0, r7, 0x10",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "ldr r5, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldm sp, {r2, r5}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r0, [r4]",
            "ldr r1, [r0, 0x20]",
            "ldr r2, [r0, 0x28]",
            "ldr r3, [r0, 0x24]",
            "bl rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer4SwapERS0_": {
        "function_address": "0x0003f118",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x994]!"
        ]
    },
    "sym.my_print_help": {
        "function_address": "0x00057c3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r2, [r0, 4]",
            "ldr r4, [0x00057f28]",
            "cmp r2, 0",
            "sub sp, sp, 0x14",
            "add r4, pc, r4",
            "beq 0x57d20",
            "ldr r3, [0x00057f2c]",
            "ldr r7, [0x00057f30]",
            "add r3, r4, r3",
            "str r3, [sp, 4]",
            "ldr r3, [0x00057f34]",
            "ldr r6, [0x00057f38]",
            "add r3, r4, r3",
            "str r3, [sp, 8]",
            "ldr r3, [0x00057f3c]",
            "mov r5, r0",
            "add r3, r4, r3",
            "add r7, r4, r7",
            "str r3, [sp, 0xc]",
            "cmp r2, 0xff",
            "bgt 0x57dd8",
            "ldr r3, [r5]",
            "mov r0, 1",
            "ldrb r3, [r3]",
            "ldr r1, [sp, 4]",
            "cmp r3, 0",
            "ldr r3, [sp, 8]",
            "mov sl, 8",
            "moveq r3, r7",
            "bl sym.imp.__printf_chk",
            "mov r8, 6",
            "ldr r2, [r5]",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "bne 0x57d2c",
            "ldr sl, [r4, r6]",
            "add r8, r8, 1",
            "mov r0, 0x20",
            "ldr r1, [sl]",
            "bl sym.imp._IO_putc",
            "cmp r8, 0x15",
            "bls 0x57cd0",
            "ldr r3, [r5, 8]",
            "subs sl, r3, 0",
            "beq 0x57d00",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x57df0",
            "ldr r3, [r4, r6]",
            "mov r0, 0xa",
            "ldr r1, [r3]",
            "bl sym.imp._IO_putc",
            "ldr r2, [r5, 0x4c]",
            "add r5, r5, 0x48",
            "cmp r2, 0",
            "bne 0x57c8c",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [0x00057f40]",
            "mov r0, 1",
            "add r1, r4, r1",
            "bl sym.imp.__printf_chk",
            "ldr r0, [r5]",
            "bl sym.imp.strlen",
            "ldr r3, [r5, 0x18]",
            "add r8, r0, sl",
            "and r3, r3, 0x7f",
            "sub r2, r3, 9",
            "cmp r2, 1",
            "bls 0x57eac",
            "sub r3, r3, 1",
            "cmp r3, 1",
            "bls 0x57efc",
            "ldr r3, [r5, 0x1c]",
            "cmp r3, 1",
            "beq 0x57ee8",
            "ldr r2, [sp, 0xc]",
            "mov r3, r2",
            "ldr r1, [0x00057f44]",
            "mov r0, 1",
            "add r1, r4, r1",
            "bl sym.imp.__printf_chk",
            "ldr r3, [r5, 0x1c]",
            "cmp r3, 1",
            "moveq r3, 5",
            "movne r3, 3",
            "add r8, r3, r8",
            "cmp r8, 0x16",
            "bls 0x57ea0",
            "ldr r3, [r5, 8]",
            "cmp r3, 0",
            "beq 0x57cec",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "beq 0x57cec",
            "ldr r3, [r4, r6]",
            "mov r0, 0xa",
            "ldr r1, [r3]",
            "bl sym.imp._IO_putc",
            "mov r8, 0",
            "b 0x57ccc",
            "mov r0, 1",
            "mov r1, r7",
            "bl sym.imp.__printf_chk",
            "mov sl, 4",
            "mov r8, 2",
            "b 0x57cbc",
            "mov r0, sl",
            "bl rsym.strend",
            "mov sb, r0",
            "rsb r3, sl, sb",
            "cmp r3, 0x39",
            "bls 0x57e88",
            "ldrb r3, [sl, 0x39]",
            "add r8, sl, 0x39",
            "cmp r3, 0x20",
            "beq 0x57e24",
            "ldrb r3, [r8, -1]!",
            "cmp r3, 0x20",
            "bne 0x57e18",
            "cmp sl, r8",
            "moveq fp, sl",
            "beq 0x57e4c",
            "ldr fp, [r4, r6]",
            "ldrb r0, [sl], 1",
            "ldr r1, [fp]",
            "bl sym.imp._IO_putc",
            "cmp r8, sl",
            "bne 0x57e34",
            "mov fp, r8",
            "ldr sl, [r4, r6]",
            "mov r0, 0xa",
            "ldr r1, [sl]",
            "bl sym.imp._IO_putc",
            "mov r8, 0",
            "add r8, r8, 1",
            "mov r0, 0x20",
            "ldr r1, [sl]",
            "bl sym.imp._IO_putc",
            "cmp r8, 0x16",
            "bne 0x57e60",
            "add sl, fp, 1",
            "rsb r3, sl, sb",
            "cmp r3, 0x39",
            "bhi 0x57e08",
            "ldr r1, [0x00057f48]",
            "mov r2, sl",
            "add r1, r4, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57d00",
            "cmp r8, 0x15",
            "bls 0x57ccc",
            "b 0x57ce8",
            "ldr r3, [r5, 0x1c]",
            "cmp r3, 1",
            "beq 0x57f14",
            "ldr r2, [sp, 0xc]",
            "mov r3, r2",
            "ldr r1, [0x00057f4c]",
            "mov r0, 1",
            "add r1, r4, r1",
            "bl sym.imp.__printf_chk",
            "ldr r3, [r5, 0x1c]",
            "cmp r3, 1",
            "moveq r3, 8",
            "movne r3, 6",
            "add r8, r3, r8",
            "b 0x57da0",
            "ldr r2, [0x00057f50]",
            "ldr r3, [0x00057f54]",
            "add r2, r4, r2",
            "add r3, r4, r3",
            "b 0x57d7c",
            "ldr r3, [r4, r6]",
            "mov r0, 0x20",
            "ldr r1, [r3]",
            "bl sym.imp._IO_putc",
            "add r8, r8, 1",
            "b 0x57da0",
            "ldr r2, [0x00057f50]",
            "ldr r3, [0x00057f54]",
            "add r2, r4, r2",
            "add r3, r4, r3",
            "b 0x57ec0"
        ]
    },
    "sym.imp._IO_putc": {
        "function_address": "0x00040504",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc4c]!"
        ]
    },
    "method.TaoCrypt::HMAC_TaoCrypt::SHA_.HMAC__": {
        "function_address": "0x000bb10c",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb174]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb178]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Subtract_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000aaf24",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r1]",
            "mov r5, r1",
            "ldr r1, [r0, 0xc]",
            "sub sp, sp, 0x10",
            "cmp r3, r1",
            "mov r4, r0",
            "beq 0xaaf90",
            "mov r1, r5",
            "mov r0, sp",
            "add r5, r4, 0x2c",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r1, sp",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [r4, 0x38]",
            "mov r6, sp",
            "cmp r3, 1",
            "beq 0xaafd4",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bne 0xaaf44",
            "ldr r2, [r2, 4]",
            "ldr r0, [r0, 0x20]",
            "ldr r1, [r5, 4]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "cmp r0, 0",
            "addeq r5, r4, 0x1c",
            "beq 0xaaf80",
            "ldr r0, [r4, 0x20]",
            "ldr r3, [r5]",
            "mov r1, r0",
            "ldr r2, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "add r5, r4, 0x1c",
            "b 0xaaf80",
            "add r1, r4, 0xc",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "b 0xaaf80"
        ]
    },
    "fcn.000b3e20": {
        "function_address": "0x000b3e20",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add ip, r5, 0x10",
            "add sl, r6, 0x10",
            "mov fp, ip",
            "ldm sl!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "stm fp!, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "mov ip, sb",
            "ldr r8, [0x000b3eac]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3eb0]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldr r0, [sl]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "str r0, [fp]",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::get_cert___const": {
        "function_address": "0x0007c1d0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5mySTL4listIPN5yaSSL4x509EE5frontEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0008f000": {
        "function_address": "0x0008f000",
        "instructions": [
            "ldr r3, [0x0008f030]",
            "ldr r2, [0x0008f034]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "bl rsym._ZN5yaSSL17ClientKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_server_end": {
        "function_address": "0x00045d04",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00045d64]",
            "ldr r5, [0x00045d68]",
            "add r4, pc, r4",
            "add r6, r4, r5",
            "ldrb r3, [r6, 1]",
            "cmp r3, 0",
            "bne 0x45d2c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym.finish_client_errs",
            "bl rsym.vio_end",
            "ldrb r0, [r6, 2]",
            "cmp r0, 0",
            "beq 0x45d5c",
            "bl rsym.free_charsets",
            "bl rsym.mysql_thread_end",
            "add r4, r4, r5",
            "mov r3, 0",
            "strb r3, [r4, 1]",
            "strb r3, [r4, 2]",
            "b 0x45d24",
            "bl rsym.my_end",
            "b 0x45d48"
        ]
    },
    "rsym.finish_client_errs": {
        "function_address": "0x0003d5b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbd4]!"
        ]
    },
    "rsym.vio_end": {
        "function_address": "0x0003d51c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc3c]!"
        ]
    },
    "rsym.mysql_thread_end": {
        "function_address": "0x00040114",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xeec]!"
        ]
    },
    "rsym.my_end": {
        "function_address": "0x0003e044",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4cc]!"
        ]
    },
    "sym.dynstr_append_os_quoted": {
        "function_address": "0x0004deb4",
        "instructions": [
            "push {r1, r2, r3}",
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr sb, [0x0004dfa8]",
            "ldr fp, [0x0004dfac]",
            "add sb, pc, sb",
            "add r8, sb, fp",
            "sub sp, sp, 8",
            "mov r1, r8",
            "mov r2, 1",
            "ldr r5, [sp, 0x2c]",
            "mov r6, r0",
            "bl rsym.dynstr_append_mem",
            "add r3, sp, 0x30",
            "cmp r5, 0",
            "str r3, [sp, 4]",
            "and r7, r0, 1",
            "beq 0x4df84",
            "ldr sl, [0x0004dfb0]",
            "add sl, sb, sl",
            "b 0x4df3c",
            "bl rsym.dynstr_append_mem",
            "mov r1, sl",
            "mov r5, r0",
            "mov r2, 1",
            "mov r0, r6",
            "bl rsym.dynstr_append_mem",
            "mov r1, r8",
            "and r5, r5, r0",
            "mov r2, 1",
            "mov r0, r6",
            "bl rsym.dynstr_append_mem",
            "and r7, r5, r7",
            "and r7, r7, r0",
            "add r5, r4, 1",
            "mov r1, 0x27",
            "mov r0, r5",
            "bl rsym.strcend",
            "mov r4, r0",
            "ldrb r3, [r4]",
            "rsb r2, r5, r0",
            "cmp r3, 0",
            "mov r1, r5",
            "mov r0, r6",
            "bne 0x4df04",
            "bl rsym.dynstr_append_mem",
            "ldr r3, [sp, 4]",
            "and r7, r7, r0",
            "add r2, r3, 4",
            "str r2, [sp, 4]",
            "ldr r5, [r3]",
            "cmp r5, 0",
            "bne 0x4df3c",
            "add r1, sb, fp",
            "mov r0, r6",
            "mov r2, 1",
            "bl rsym.dynstr_append_mem",
            "and r0, r7, r0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add sp, sp, 0xc",
            "bx lr"
        ]
    },
    "rsym.dynstr_append_mem": {
        "function_address": "0x0003d09c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf3c]!"
        ]
    },
    "rsym.strcend": {
        "function_address": "0x0003e4f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1ac]!"
        ]
    },
    "sym.yaSSL_get_cipher_list": {
        "function_address": "0x00085e00",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r1, 0x1f",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "bls 0x85e24",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr",
            "str r1, [sp, 4]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r1, [sp, 4]",
            "add r1, r1, r1, lsl 1",
            "lsl r5, r1, 4",
            "add r0, r0, r5",
            "ldrb r3, [r0, 0xdf]",
            "cmp r3, 0",
            "beq 0x85e14",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "add r0, r0, r5",
            "add r0, r0, 0xdf",
            "b 0x85e18"
        ]
    },
    "sym.mysql_init": {
        "function_address": "0x00074db8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "mov r1, r0",
            "mov r2, r0",
            "bl rsym.mysql_server_init",
            "ldr r5, [0x00074e98]",
            "subs r1, r0, 0",
            "add r5, pc, r5",
            "movne r4, 0",
            "bne 0x74e58",
            "cmp r4, 0",
            "beq 0x74e64",
            "mov r0, r4",
            "mov r2, 0x3c8",
            "bl sym.imp.memset",
            "ldr r3, [0x00074e9c]",
            "mov r6, 0",
            "ldr r3, [r5, r3]",
            "str r6, [r4, 0x2f8]",
            "str r4, [r4, 0x39c]",
            "str r4, [r4, 0x3a0]",
            "str r4, [r4, 0x3a8]",
            "ldr r2, [r3]",
            "ldr r3, [0x00074ea0]",
            "str r2, [r4, 0x290]",
            "ldr r3, [r5, r3]",
            "add r0, r4, 0x25c",
            "ldr r1, [r3]",
            "add r0, r0, 3",
            "bl sym.imp.strcpy",
            "ldr r2, [r4, 0x30c]",
            "mov r3, 1",
            "orr r2, r2, 0x80",
            "str r2, [r4, 0x30c]",
            "mov r2, 0x10",
            "str r2, [r4, 0x35c]",
            "strb r3, [r4, 0x365]",
            "strb r6, [r4, 0x385]",
            "strb r3, [r4, 0x39b]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, 0x3c8",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "movne r3, 1",
            "strbne r3, [r4, 0x384]",
            "bne 0x74df8",
            "ldr r3, [0x00074ea4]",
            "ldr r1, [0x00074ea8]",
            "ldr r3, [r5, r3]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x74e58"
        ]
    },
    "rsym.mysql_server_init": {
        "function_address": "0x0003e6ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5c]!"
        ]
    },
    "sym.my_is_symlink": {
        "function_address": "0x0004ce54",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0x6c",
            "mov r1, r0",
            "mov r2, sp",
            "mov r0, 3",
            "bl sym.imp.__lxstat64",
            "cmp r0, 0",
            "movne r0, 0",
            "bne 0x4ce8c",
            "ldr r0, [sp, 0x10]",
            "and r0, r0, 0xf000",
            "cmp r0, 0xa000",
            "movne r0, 0",
            "moveq r0, 1",
            "add sp, sp, 0x6c",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.__lxstat64": {
        "function_address": "0x0004009c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf3c]!"
        ]
    },
    "fcn.000ba9c0": {
        "function_address": "0x000ba9c0",
        "instructions": [
            "ldr ip, [0x000ba9fc]",
            "ldr r3, [0x000baa00]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000baa04]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000baa08]",
            "ldr r0, [0x000baa0c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0009d7b0": {
        "function_address": "0x0009d7b0",
        "instructions": [
            "ldr ip, [0x0009d7ec]",
            "ldr r3, [0x0009d7f0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d7f4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d7f8]",
            "ldr r0, [0x0009d7fc]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.yaSSL::RMD.RMD_yaSSL::RMD_const_": {
        "function_address": "0x0007de38",
        "instructions": [
            "ldr r3, [0x0007de84]",
            "ldr r2, [0x0007de88]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt9RIPEMD160C1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9RIPEMD160C1ERKS0_": {
        "function_address": "0x0003da44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8cc]!"
        ]
    },
    "sym.my_gethostbyname_r": {
        "function_address": "0x00059b2c",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0x14",
            "add ip, sp, 0xc",
            "str ip, [sp]",
            "ldr ip, [sp, 0x18]",
            "str ip, [sp, 4]",
            "bl sym.imp.gethostbyname_r",
            "cmp r0, 0",
            "movne r0, 0",
            "ldreq r0, [sp, 0xc]",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.gethostbyname_r": {
        "function_address": "0x0003e308",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2f4]!"
        ]
    },
    "method.mySTL::list_yaSSL::Digest_.erase_mySTL::list_yaSSL::Digest_::iterator_": {
        "function_address": "0x000890cc",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x89124",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x89138",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x8912c",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL6DigestEE8pop_backEv",
            "mov r0, 1",
            "b 0x89124",
            "bl rsym._ZN5mySTL4listIPN5yaSSL6DigestEE9pop_frontEv",
            "mov r0, 1",
            "b 0x89124"
        ]
    },
    "fcn.00088a14": {
        "function_address": "0x00088a14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x88a30",
            "b 0x88a40",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x88a2c",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientHello::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008dcd0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x2c",
            "mov r0, r2",
            "mov r4, r2",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "ldrh r2, [r5, 8]",
            "mov r3, 0x130",
            "strh r2, [r0, r3]",
            "ldrb r3, [r5, 8]",
            "ldr r6, [0x0008dfe8]",
            "cmp r3, 3",
            "add r6, pc, r6",
            "beq 0x8dd24",
            "mov r0, r4",
            "mov r1, 0x75",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL16GetMultiProtocolEv",
            "cmp r0, 0",
            "bne 0x8de20",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "beq 0x8dd50",
            "ldrb r3, [r5, 9]",
            "cmp r3, 1",
            "bls 0x8dd0c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8dd6c",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "beq 0x8dd0c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8deec",
            "mov r0, r4",
            "add r1, r5, 0xa",
            "mov r2, 1",
            "bl rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE",
            "ldrb r3, [r5, 0x2a]",
            "cmp r3, 0",
            "beq 0x8ddc4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "subs r8, r0, 0",
            "beq 0x8df08",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "ldr r1, [0x0008dfec]",
            "add r1, r6, r1",
            "bl rsym._ZN5yaSSL3Log5TraceEPKc",
            "add r1, r5, 0x4e",
            "ldrh r2, [r5, 0x4c]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10matchSuiteEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x8dd18",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r1, [r0, 0x2d]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11set_pendingEh",
            "ldr r3, [r5, 0xd0]",
            "cmp r3, 0xdd",
            "beq 0x8defc",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useServerEv",
            "mov r3, 1",
            "str r3, [r0]",
            "b 0x8dd18",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8de3c",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "beq 0x8de6c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "beq 0x8dd7c",
            "ldrb r3, [r5, 9]",
            "cmp r3, 1",
            "bne 0x8dd7c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection13TurnOffTLS1_1Ev",
            "b 0x8dd7c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection10TurnOffTLSEv",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [0x0008dff0]",
            "ldrh r3, [r0, r3]",
            "mov r0, r4",
            "strh r3, [sp, 8]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb sl, [r0, 0x6df]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 1",
            "mov r7, r0",
            "mov r0, r4",
            "movne r7, 0",
            "moveq r8, 0",
            "movne r8, 1",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r2, sl",
            "mov r3, r8",
            "ldr r1, [sp, 8]",
            "str r7, [sp]",
            "bl rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb",
            "b 0x8dd7c",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "beq 0x8dd7c",
            "b 0x8dd0c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL14SetCompressionEv",
            "b 0x8de08",
            "bl rsym._ZN5yaSSL11GetSessionsEv",
            "add r1, r5, 0x2b",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL8Sessions6lookupEPKhPNS_11SSL_SESSIONE",
            "subs r7, r0, 0",
            "beq 0x8ddb0",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11set_sessionEPNS_11SSL_SESSIONE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "mov r1, 1",
            "bl rsym._ZN5yaSSL8Security12set_resumingEb",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11SSL_SESSION8GetSuiteEv",
            "mov r2, 2",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10matchSuiteEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r1, [r0, 0x2d]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11set_pendingEh",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11SSL_SESSION9GetSecretEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL16set_masterSecretEPKh",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "add r5, sp, 8",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, r5",
            "mov r2, 0x20",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8dfdc",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL13deriveTLSKeysEv",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useServerEv",
            "mov r3, 2",
            "str r3, [r0]",
            "b 0x8dd18",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10deriveKeysEv",
            "b 0x8dfc4"
        ]
    },
    "rsym._ZNK5yaSSL3SSL16GetMultiProtocolEv": {
        "function_address": "0x0003e404",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x24c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE": {
        "function_address": "0x0003ea70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe04]!"
        ]
    },
    "rsym._ZN5yaSSL3Log5TraceEPKc": {
        "function_address": "0x0003f8d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x46c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL10matchSuiteEPKhj": {
        "function_address": "0x0003ccdc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1bc]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL11set_pendingEh": {
        "function_address": "0x0003d024",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf8c]!"
        ]
    },
    "rsym._ZN5yaSSL10Connection13TurnOffTLS1_1Ev": {
        "function_address": "0x000401f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe54]!"
        ]
    },
    "rsym._ZN5yaSSL10Connection10TurnOffTLSEv": {
        "function_address": "0x000401e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe64]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL14SetCompressionEv": {
        "function_address": "0x0003d204",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe4c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL11set_sessionEPNS_11SSL_SESSIONE": {
        "function_address": "0x0003fdcc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x11c]!"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION8GetSuiteEv": {
        "function_address": "0x0003e6c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x74]!"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION9GetSecretEv": {
        "function_address": "0x0003f430",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x784]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL16set_masterSecretEPKh": {
        "function_address": "0x0003e9a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe8c]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL13deriveTLSKeysEv": {
        "function_address": "0x0003dbb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7d4]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL10deriveKeysEv": {
        "function_address": "0x000403cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd1c]!"
        ]
    },
    "method.TaoCrypt::HexEncoder.Encode__": {
        "function_address": "0x0009e7d4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0, 0xc]",
            "mov r4, r0",
            "ldr r6, [r3]",
            "ldr r1, [r0, 4]",
            "lsl r7, r6, 1",
            "ldr r2, [r0]",
            "sub sp, sp, 0xc",
            "mov ip, 0",
            "add r0, r0, 8",
            "mov r3, r7",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r5, [0x0009e934]",
            "cmp r6, 0",
            "str r7, [r4]",
            "str r0, [r4, 4]",
            "add r5, pc, r5",
            "beq 0x9e8f8",
            "ldr r3, [r4, 0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r1, r2, 1",
            "cmp r2, ip",
            "str r1, [r3, 0xc]",
            "bhs 0x9e910",
            "ldr r1, [r4]",
            "ldr r3, [r3, 4]",
            "cmp r1, 0",
            "ldrb r2, [r3, r2]",
            "beq 0x9e910",
            "ldr r3, [0x0009e938]",
            "add ip, r5, r3",
            "add r1, ip, r2, lsr 4",
            "ldrb r1, [r1, 0x1c]",
            "strb r1, [r0]",
            "ldr r1, [r4]",
            "cmp r1, 1",
            "bls 0x9e914",
            "and r0, r2, 0xf",
            "sub r6, r6, 1",
            "mov r2, 2",
            "mov r1, 1",
            "b 0x9e8e0",
            "ldr r1, [r4, 0xc]",
            "ldr r0, [r1, 0xc]",
            "ldr r7, [r1]",
            "add lr, r0, 1",
            "cmp r0, r7",
            "str lr, [r1, 0xc]",
            "bhs 0x9e914",
            "ldr lr, [r4]",
            "ldr r1, [r1, 4]",
            "cmp lr, r2",
            "ldrb r0, [r1, r0]",
            "bls 0x9e914",
            "add r1, ip, r0, lsr 4",
            "ldrb r7, [r1, 0x1c]",
            "ldr lr, [r4, 4]",
            "add r1, r2, 1",
            "strb r7, [lr, r2]",
            "ldr lr, [r4]",
            "sub r6, r6, 1",
            "cmp r1, lr",
            "bhs 0x9e914",
            "and r0, r0, 0xf",
            "add r2, r2, 2",
            "add r0, ip, r0",
            "ldrb lr, [r0, 0x1c]",
            "ldr r0, [r4, 4]",
            "cmp r6, 0",
            "strb lr, [r0, r1]",
            "bne 0x9e884",
            "mov r1, r4",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt6Source5resetERNS_5BlockIhNS_20AllocatorWithCleanupIhEEEE",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [0x0009e938]",
            "ldr r1, [0x0009e93c]",
            "ldr r0, [0x0009e940]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007eed4": {
        "function_address": "0x0007eed4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007ef38]",
            "ldr r3, [0x0007ef3c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ef40]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaTLSv1_1_client_method": {
        "function_address": "0x00086700",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 2",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 1",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendClientHello_yaSSL::SSL_": {
        "function_address": "0x00084258",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r1, 0",
            "sub sp, sp, 0xf8",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ClientStateE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r5, [0x000843ec]",
            "subs r8, r0, 0",
            "add r5, pc, r5",
            "bne 0x843e0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [0x000843f0]",
            "add r7, sp, 4",
            "ldrh r1, [r6, r3]",
            "ldrb r2, [r0, 0x12d]",
            "add sl, sp, 0xf0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL11ClientHelloC1ENS_15ProtocolVersionEb",
            "mov r2, r8",
            "mov r1, 3",
            "add r0, sl, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x000843f4]",
            "add r6, sp, 0xd8",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [sp, 0xe4]",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL16buildClientHelloERNS_3SSLERNS_11ClientHelloE",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11ClientHello10get_randomEv",
            "mov r2, 1",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 4]",
            "mov sb, r0",
            "mov r0, r7",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add r5, sp, 0xe4",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, sb",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add sb, sb, 4",
            "lsl sb, sb, 0x10",
            "ldrb r3, [r0, 0x12f]",
            "ldrb r2, [r0, 0x12e]",
            "lsr sb, sb, 0x10",
            "mov ip, 0x16",
            "add r1, sb, 5",
            "mov r0, r6",
            "str ip, [sp, 0xf0]",
            "strb r3, [sp, 0xf5]",
            "strb r2, [sp, 0xf4]",
            "strh sb, [sp, 0xf6]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r7",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r1, r6",
            "mov r2, r8",
            "mov r0, r4",
            "bl fcn.00081648",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "add sp, sp, 0xf8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3SSL11verifyStateENS_11ClientStateE": {
        "function_address": "0x0003e614",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xec]!"
        ]
    },
    "rsym._ZN5yaSSL11ClientHelloC1ENS_15ProtocolVersionEb": {
        "function_address": "0x0003df24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x58c]!"
        ]
    },
    "rsym._ZN5yaSSL16buildClientHelloERNS_3SSLERNS_11ClientHelloE": {
        "function_address": "0x0003faf0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x304]!"
        ]
    },
    "rsym._ZNK5yaSSL11ClientHello10get_randomEv": {
        "function_address": "0x0003cd3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x17c]!"
        ]
    },
    "sym.my_vsnprintf": {
        "function_address": "0x0005c4fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r2",
            "ldrb r2, [r2]",
            "ldr fp, [0x0005c8a4]",
            "sub r1, r1, 1",
            "cmp r2, 0",
            "mov ip, r0",
            "add fp, pc, fp",
            "add r8, r0, r1",
            "sub sp, sp, 0x44",
            "mov sb, r3",
            "moveq r0, r2",
            "beq 0x5c664",
            "ldr r3, [0x0005c8a8]",
            "ldr r1, [0x0005c8ac]",
            "add r3, fp, r3",
            "str r1, [sp, 8]",
            "str r3, [sp, 0x18]",
            "sub r1, r8, 1",
            "add r3, sp, 0x20",
            "mov r7, ip",
            "str r3, [sp, 0xc]",
            "str r1, [sp, 0x1c]",
            "str ip, [sp, 0x10]",
            "b 0x5c578",
            "cmp r7, r8",
            "beq 0x5c658",
            "strb r2, [r7], 1",
            "ldrb r2, [r4, 1]!",
            "cmp r2, 0",
            "beq 0x5c658",
            "cmp r2, 0x25",
            "bne 0x5c560",
            "ldrb r2, [r4, 1]!",
            "cmp r2, 0x2d",
            "ldrbeq r2, [r4, 1]!",
            "cmp r2, 0x2a",
            "beq 0x5c780",
            "ldr ip, [sp, 8]",
            "ldr r3, [fp, ip]",
            "ldr r0, [r3, 0x20]",
            "add r3, r0, r2",
            "ldrb r6, [r3, 1]",
            "ands r6, r6, 4",
            "moveq r5, r6",
            "beq 0x5c5e0",
            "mov r6, 0",
            "mov r5, r6",
            "sub r3, r2, 0x30",
            "ldrb r2, [r4, 1]!",
            "add r5, r5, r5, lsl 2",
            "add r1, r0, r2",
            "ldrb r1, [r1, 1]",
            "adds r5, r3, r5, lsl 1",
            "moveq r6, 1",
            "tst r1, 4",
            "bne 0x5c5bc",
            "cmp r2, 0x2e",
            "mvnne sl, 0",
            "beq 0x5c728",
            "cmp r2, 0x6c",
            "ldrbeq r2, [r4, 1]!",
            "movne r1, 0",
            "moveq r1, 1",
            "cmp r2, 0x73",
            "beq 0x5c6e4",
            "cmp r2, 0x62",
            "beq 0x5c7d8",
            "cmp r2, 0x64",
            "movne r0, 0",
            "moveq r0, 1",
            "cmp r2, 0x75",
            "movne r3, 0",
            "moveq r3, 1",
            "orrs ip, r3, r0",
            "bne 0x5c678",
            "cmp r2, 0x78",
            "beq 0x5c678",
            "cmp r2, 0x63",
            "beq 0x5c86c",
            "cmp r7, r8",
            "beq 0x5c658",
            "mov r3, 0x25",
            "strb r3, [r7], 1",
            "ldrb r2, [r4, 1]!",
            "cmp r2, 0",
            "bne 0x5c578",
            "ldr ip, [sp, 0x10]",
            "rsb r0, ip, r7",
            "mov ip, r7",
            "mov r3, 0",
            "strb r3, [ip]",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "rsb ip, r7, r8",
            "cmp ip, 0xf",
            "bhi 0x5c7c4",
            "ldr sl, [sp, 0xc]",
            "str sl, [sp, 0x14]",
            "cmp r1, 0",
            "bne 0x5c794",
            "cmp r0, 0",
            "bne 0x5c884",
            "cmp r3, 0",
            "ldr r0, [sb]",
            "add sb, sb, 4",
            "bne 0x5c7ac",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0x10",
            "str ip, [sp, 4]",
            "bl rsym.int2str",
            "ldr ip, [sp, 4]",
            "rsb sl, sl, r0",
            "cmp ip, sl",
            "blo 0x5c658",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0xc]",
            "cmp r1, r2",
            "beq 0x5c824",
            "add r7, r7, sl",
            "b 0x5c56c",
            "ldr r5, [sb]",
            "ldr ip, [sp, 0x18]",
            "cmp r5, 0",
            "moveq r5, ip",
            "mov r1, sl",
            "mov r0, r5",
            "bl sym.imp.strnlen",
            "rsb r2, r7, r8",
            "add r3, r2, 1",
            "cmp r3, r0",
            "movhi r2, r0",
            "mov r1, r5",
            "mov r0, r7",
            "bl rsym.strnmov",
            "add sb, sb, 4",
            "mov r7, r0",
            "b 0x5c56c",
            "ldrb r2, [r4, 1]!",
            "cmp r2, 0x2a",
            "beq 0x5c814",
            "ldr r3, [sp, 8]",
            "ldr r1, [fp, r3]",
            "mov r3, r2",
            "ldr r0, [r1, 0x20]",
            "add r1, r0, r2",
            "ldrb sl, [r1, 1]",
            "ands sl, sl, 4",
            "movne sl, 0",
            "beq 0x5c5ec",
            "ldrb r2, [r4, 1]!",
            "sub r3, r3, 0x30",
            "add r1, r0, r2",
            "ldrb r1, [r1, 1]",
            "add sl, sl, sl, lsl 2",
            "tst r1, 4",
            "add sl, r3, sl, lsl 1",
            "mov r3, r2",
            "bne 0x5c758",
            "b 0x5c5ec",
            "ldr r5, [sb]",
            "ldrb r2, [r4, 1]!",
            "add sb, sb, 4",
            "mov r6, 0",
            "b 0x5c5e0",
            "cmp r0, 0",
            "ldr r0, [sb]",
            "add sb, sb, 4",
            "bne 0x5c88c",
            "cmp r3, 0",
            "beq 0x5c6ac",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0xa",
            "str ip, [sp, 4]",
            "bl rsym.int10_to_str",
            "ldr ip, [sp, 4]",
            "b 0x5c6c0",
            "cmp r5, 0",
            "moveq sl, r7",
            "streq r7, [sp, 0x14]",
            "beq 0x5c68c",
            "b 0x5c684",
            "eor r2, sl, sl, asr 31",
            "sub r2, r2, sl, asr 31",
            "add r3, r2, 1",
            "add r3, r7, r3",
            "cmp r8, r3",
            "ldr r1, [sb]",
            "ldrlo r2, [sp, 0x1c]",
            "rsblo sl, r7, r2",
            "eorlo r2, sl, sl, asr 31",
            "sublo r2, r2, sl, asr 31",
            "mov r0, r7",
            "bl sym.imp.memmove",
            "add r7, r7, sl",
            "add sb, sb, 4",
            "b 0x5c56c",
            "ldr sl, [sb]",
            "ldrb r2, [r4, 1]!",
            "add sb, sb, 4",
            "b 0x5c5ec",
            "cmp r5, ip",
            "movhs r5, ip",
            "cmp sl, r5",
            "bhs 0x5c854",
            "cmp r6, 0",
            "rsb r5, sl, r5",
            "mov r0, r7",
            "movne r1, 0x30",
            "moveq r1, 0x20",
            "mov r2, r5",
            "bl sym.imp.memset",
            "add r7, r7, r5",
            "mov r0, r7",
            "ldr r1, [sp, 0xc]",
            "mov r2, sl",
            "bl sym.imp.memmove",
            "add r7, r7, sl",
            "b 0x5c56c",
            "cmp r7, r8",
            "beq 0x5c658",
            "ldr r3, [sb]",
            "add sb, sb, 4",
            "strb r3, [r7], 1",
            "b 0x5c56c",
            "ldr r0, [sb]",
            "add sb, sb, 4",
            "ldr r1, [sp, 0x14]",
            "mvn r2, 9",
            "str ip, [sp, 4]",
            "bl rsym.int10_to_str",
            "ldr ip, [sp, 4]",
            "b 0x5c6c0"
        ]
    },
    "rsym.int2str": {
        "function_address": "0x0003e674",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xac]!"
        ]
    },
    "sym.imp.strnlen": {
        "function_address": "0x0003f760",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x564]!"
        ]
    },
    "rsym.int10_to_str": {
        "function_address": "0x0003fb50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2c4]!"
        ]
    },
    "fcn.000b2d84": {
        "function_address": "0x000b2d84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt13RSA_PublicKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_PublicKey10InitializeERNS_6SourceE": {
        "function_address": "0x00040300",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xda4]!"
        ]
    },
    "sym.mysql_get_ssl_cipher": {
        "function_address": "0x00074d88",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x74da4",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r0, [r3, 0x98]",
            "cmp r0, 0",
            "beq 0x74d98",
            "bl rsym.yaSSL_get_cipher_name",
            "b 0x74d9c"
        ]
    },
    "rsym.yaSSL_get_cipher_name": {
        "function_address": "0x0003e104",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x44c]!"
        ]
    },
    "method.mySTL::list_yaSSL::Digest_.list__": {
        "function_address": "0x00088edc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x88ef8",
            "b 0x88f08",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x88ef4",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::ThreadError_::pop_front__": {
        "function_address": "0x000898b4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x898fc",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Mode_BASE::Process_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00080ef8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [r0, 0x34]",
            "sub sp, sp, 0x18",
            "cmp ip, 0",
            "mov r4, r0",
            "mov r5, r1",
            "mov r6, r2",
            "bne 0x80f6c",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80f60",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x80f2c",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp ip, 1",
            "bne 0x80f60",
            "ldr r2, [r0, 0x30]",
            "cmp r2, 0",
            "bne 0x80ff4",
            "ldr r2, [r0, 4]",
            "mov r0, r3",
            "mov r1, r2",
            "str r2, [sp, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "ldr r2, [sp, 4]",
            "beq 0x80f60",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r7, r7, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80fa0",
            "b 0x80f60",
            "ldr r2, [r0, 4]",
            "mov r0, r3",
            "mov r1, r2",
            "str r2, [sp, 4]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "ldr r2, [sp, 4]",
            "beq 0x80f60",
            "add r7, sp, 8",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, r7",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, r7",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x81018",
            "b 0x80f60"
        ]
    },
    "sym.my_b_gets": {
        "function_address": "0x0005574c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [r0, 0x34]",
            "ldr r3, [r0, 0x30]",
            "ldr ip, [ip]",
            "ldr r3, [r3]",
            "mov r4, r0",
            "subs r3, ip, r3",
            "mov r5, r1",
            "mov r7, r2",
            "beq 0x557c8",
            "sub r7, r7, 1",
            "mov r6, r5",
            "ldr r2, [r4, 0x10]",
            "cmp r7, r3",
            "movlo r3, r7",
            "add r0, r2, r3",
            "cmp r2, r0",
            "blo 0x557a0",
            "b 0x557dc",
            "cmp r0, r2",
            "bls 0x557dc",
            "ldrb r1, [r2], 1",
            "cmp r1, 0xa",
            "strb r1, [r6], 1",
            "bne 0x55798",
            "mov r3, 0",
            "str r2, [r4, 0x10]",
            "rsb r0, r5, r6",
            "strb r3, [r6]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym.my_b_fill",
            "subs r3, r0, 0",
            "bne 0x55774",
            "mov r0, 0",
            "b 0x557c0",
            "subs r7, r7, r3",
            "beq 0x557fc",
            "mov r0, r4",
            "bl rsym.my_b_fill",
            "subs r3, r0, 0",
            "bne 0x5577c",
            "mov r0, 0",
            "b 0x557c0",
            "str r2, [r4, 0x10]",
            "rsb r0, r5, r6",
            "strb r7, [r6]",
            "b 0x557c0"
        ]
    },
    "rsym.my_b_fill": {
        "function_address": "0x0003d3c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd24]!"
        ]
    },
    "method.mySTL::list_yaSSL::output_buffer_.push_front_yaSSL::output_buffer_": {
        "function_address": "0x000885bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Errors::Add_int_": {
        "function_address": "0x00092e28",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "str r1, [sp, 8]",
            "bl rsym._ZN5yaSSL20yassl_int_cpp_local27GetSelfEv",
            "add r4, sp, 0xc",
            "str r0, [sp, 4]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Errors6RemoveEv",
            "add r1, r5, 0xc",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "add r3, sp, 4",
            "mov r0, r5",
            "ldm r3, {r1, r2}",
            "bl rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE9push_backES2_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL20yassl_int_cpp_local27GetSelfEv": {
        "function_address": "0x000408ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9dc]!"
        ]
    },
    "rsym._ZN5yaSSL6Errors6RemoveEv": {
        "function_address": "0x0003d1bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe7c]!"
        ]
    },
    "rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE9push_backES2_": {
        "function_address": "0x00040558",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc14]!"
        ]
    },
    "sym.yaASN1_STRING_to_UTF8": {
        "function_address": "0x000854a0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r1, 0",
            "mov r5, r0",
            "moveq r0, r4",
            "beq 0x854ec",
            "ldr r0, [r4, 4]",
            "add r0, r0, 1",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "str r0, [r5]",
            "beq 0x854e8",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl sym.imp.memcpy",
            "ldr r2, [r5]",
            "ldr r3, [r4, 4]",
            "mov r1, 0",
            "strb r1, [r2, r3]",
            "ldr r0, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x0003f52c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6dc]!"
        ]
    },
    "fcn.0007c3e8": {
        "function_address": "0x0007c3e8",
        "instructions": [
            "ldr r3, [r1]",
            "push {r4, r5, r6, lr}",
            "str r3, [r0]",
            "mov r5, r1",
            "mov r4, r0",
            "mov r1, 0",
            "ldr r0, [r0]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "ldr r1, [r5, 4]",
            "ldr r2, [r4]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DH_Decoder::Decode_TaoCrypt::DH_": {
        "function_address": "0x0009c4e0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "sub sp, sp, 0x24",
            "mov r6, r1",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "ldr r5, [r3, 0x10]",
            "cmp r5, 0",
            "bne 0x9c594",
            "add r7, sp, 0x10",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Errors::Remove__": {
        "function_address": "0x00092dd4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "add r5, sp, 4",
            "add r1, r0, 0xc",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "ldr r6, [r4]",
            "bl rsym._ZN5yaSSL20yassl_int_cpp_local27GetSelfEv",
            "mov r1, 0",
            "mov r2, r0",
            "mov r0, r6",
            "bl rsym._ZN5mySTL7find_ifINS_4listIN5yaSSL11ThreadErrorEE8iteratorENS2_20yassl_int_cpp_local29thr_matchEEET_S8_S8_T0_",
            "subs r1, r0, 0",
            "movne r0, r4",
            "blne rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE5eraseENS3_8iteratorE",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL7find_ifINS_4listIN5yaSSL11ThreadErrorEE8iteratorENS2_20yassl_int_cpp_local29thr_matchEEET_S8_S8_T0_": {
        "function_address": "0x0003f448",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x774]!"
        ]
    },
    "rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE5eraseENS3_8iteratorE": {
        "function_address": "0x0003fc64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x20c]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::ClientKeyExchange_const_": {
        "function_address": "0x0008c01c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL17ClientKeyExchange6getKeyEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL17ClientKeyExchange12getKeyLengthEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL17ClientKeyExchange6getKeyEv": {
        "function_address": "0x0003d2f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdac]!"
        ]
    },
    "rsym._ZNK5yaSSL17ClientKeyExchange12getKeyLengthEv": {
        "function_address": "0x0003fcc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1cc]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::CertificateVerify_const_": {
        "function_address": "0x0008c068",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r5, [r1, 0x2c]",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0008f27c": {
        "function_address": "0x0008f27c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f2d4]",
            "ldr r3, [0x0008f2d8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ServerKeyBaseEEEvPT_",
            "ldr r3, [0x0008f2dc]",
            "ldr r0, [0x0008f2e0]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f2e4]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f2e8]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13ServerKeyBaseEEEvPT_": {
        "function_address": "0x0003d0a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf34]!"
        ]
    },
    "sym.mySTL::list_yaSSL::x509_::pop_back__": {
        "function_address": "0x00088b8c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x88bd4",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Decode_unsigned_char_const__unsigned_int__TaoCrypt::Integer::Signedness_": {
        "function_address": "0x000a84c4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r7, r1",
            "ldrb r1, [r1]",
            "cmp r3, 1",
            "movne r3, 0",
            "moveq r3, 1",
            "ldr r8, [0x000a87d0]",
            "subs r5, r2, 0",
            "and r3, r3, r1, lsr 7",
            "add r8, pc, r8",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "str r3, [r0, 0xc]",
            "moveq fp, r5",
            "moveq r6, 1",
            "beq 0xa8530",
            "cmp r3, 0",
            "moveq r6, 1",
            "beq 0xa8608",
            "mov r6, 1",
            "cmp r1, 0xff",
            "bne 0xa8610",
            "subs r5, r5, 1",
            "ldrb r1, [r7, r6]",
            "add r6, r6, 1",
            "bne 0xa8514",
            "sub fp, r6, 1",
            "mov r5, 0",
            "mov r0, r5",
            "ldr r3, [0x000a87d4]",
            "add r3, r8, r3",
            "add r0, r3, r0, lsl 2",
            "ldr sl, [r0, 0x5ec]",
            "lsl r3, sl, 2",
            "str r3, [sp, 0xc]",
            "ldr r1, [r4, 4]",
            "ldr r2, [r4]",
            "mov sb, 0",
            "mov r3, sl",
            "add r0, r4, 8",
            "str sb, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str sl, [r4]",
            "str r0, [r4, 4]",
            "mov r1, sb",
            "ldr r2, [sp, 0xc]",
            "bl sym.imp.memset",
            "cmp r5, sb",
            "beq 0xa85e0",
            "sub r3, r5, 1",
            "ldr r1, [r4]",
            "lsr r2, r3, 2",
            "cmp r2, r1",
            "ldrb sl, [r7, fp]",
            "bhs 0xa877c",
            "ldr r1, [r4, 4]",
            "add r6, r7, r6",
            "b 0xa85c4",
            "sub r3, r3, 1",
            "ldr r0, [r4]",
            "lsr r2, r3, 2",
            "cmp r2, r0",
            "ldrb sl, [r6], 1",
            "bhs 0xa877c",
            "ldr ip, [r1, r2, lsl 2]",
            "and r0, r3, 3",
            "lsl r0, r0, 3",
            "orr r0, ip, sl, lsl r0",
            "cmp r3, 0",
            "str r0, [r1, r2, lsl 2]",
            "bne 0xa85ac",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xa8660",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "subs r5, r5, 1",
            "ldrb r1, [r7, r6]",
            "add r6, r6, 1",
            "beq 0xa852c",
            "cmp r1, 0",
            "beq 0xa85f8",
            "add r0, r5, 3",
            "lsr r0, r0, 2",
            "cmp r0, 8",
            "bls 0xa87c8",
            "cmp r0, 0x10",
            "bls 0xa864c",
            "cmp r0, 0x20",
            "bls 0xa8768",
            "cmp r0, 0x40",
            "bhi 0xa8748",
            "mov r3, 0x100",
            "sub fp, r6, 1",
            "str r3, [sp, 0xc]",
            "mov sl, 0x40",
            "b 0xa8550",
            "mov r3, 0x40",
            "sub fp, r6, 1",
            "str r3, [sp, 0xc]",
            "mov sl, 0x10",
            "b 0xa8550",
            "ldr r3, [r4]",
            "cmp r5, r3, lsl 2",
            "ldrhs r1, [r4, 4]",
            "bhs 0xa86b8",
            "lsr r2, r5, 2",
            "cmp r3, r2",
            "bls 0xa877c",
            "ldr r1, [r4, 4]",
            "mov ip, 0xff",
            "b 0xa8694",
            "lsr r2, r5, 2",
            "cmp r2, r3",
            "bhs 0xa877c",
            "and r3, r5, 3",
            "ldr r0, [r1, r2, lsl 2]",
            "lsl r3, r3, 3",
            "orr r3, r0, ip, lsl r3",
            "str r3, [r1, r2, lsl 2]",
            "ldr r3, [r4]",
            "add r5, r5, 1",
            "cmp r5, r3, lsl 2",
            "blo 0xa8688",
            "cmp r3, 0",
            "beq 0xa87a0",
            "ldr r0, [r1]",
            "sub r2, r0, 1",
            "cmp r0, r2",
            "str r2, [r1]",
            "bhs 0xa8720",
            "cmp r3, 1",
            "bls 0xa8720",
            "ldr r2, [r1, 4]",
            "cmp r2, 0",
            "sub r2, r2, 1",
            "str r2, [r1, 4]",
            "moveq r0, 1",
            "moveq r2, r1",
            "beq 0xa8714",
            "b 0xa8720",
            "ldr ip, [r2, 8]",
            "cmp ip, 0",
            "sub ip, ip, 1",
            "str ip, [r2, 8]",
            "add r2, r2, 4",
            "bne 0xa8720",
            "add r0, r0, 1",
            "cmp r0, r3",
            "blo 0xa86fc",
            "mov r2, 0",
            "mov r0, r2",
            "ldr ip, [r1, r2]",
            "add r0, r0, 1",
            "mvn ip, ip",
            "cmp r0, r3",
            "str ip, [r1, r2]",
            "add r2, r2, 4",
            "blo 0xa8728",
            "b 0xa85ec",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov sl, 1",
            "lsl sl, sl, r0",
            "lsl r3, sl, 2",
            "sub fp, r6, 1",
            "str r3, [sp, 0xc]",
            "b 0xa8550",
            "mov r3, 0x80",
            "sub fp, r6, 1",
            "str r3, [sp, 0xc]",
            "mov sl, 0x20",
            "b 0xa8550",
            "ldr r3, [0x000a87d4]",
            "ldr r1, [0x000a87d8]",
            "ldr r0, [0x000a87dc]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a87d4]",
            "ldr r1, [0x000a87e0]",
            "add r3, r8, r3",
            "ldr r0, [0x000a87e4]",
            "add r3, r3, 0x6f0",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000a87e8]",
            "bl sym.imp.__assert_fail",
            "sub fp, r6, 1",
            "b 0xa8538"
        ]
    },
    "sym.mySTL::list_yaSSL::input_buffer_::pop_back__": {
        "function_address": "0x000881fc",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x88244",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::AddTag_char__char_const__char_const__unsigned_int__unsigned_int_": {
        "function_address": "0x0009a88c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, [sp, 0x18]",
            "ldr r5, [sp, 0x1c]",
            "mov r7, r1",
            "add r1, r5, r6",
            "add r1, r7, r1",
            "ldr r4, [0x0009a92c]",
            "cmp r2, r1",
            "add r4, pc, r4",
            "mov r8, r0",
            "movlo r0, 0",
            "bhs 0x9a8c4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, r3",
            "mov r2, r6",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "ldr r3, [r8, 4]",
            "ldr r2, [r3, 0xc]",
            "ldr r1, [r3]",
            "cmp r2, r1",
            "bhs 0x9a908",
            "ldr r1, [r3, 4]",
            "add r6, r7, r6",
            "add r1, r1, r2",
            "mov r0, r6",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "add r0, r6, r5",
            "b 0x9a8bc",
            "ldr r3, [0x0009a930]",
            "ldr r1, [0x0009a934]",
            "ldr r0, [0x0009a938]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::SetKey_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000baf34",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r2",
            "mov r7, r1",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv",
            "cmp r5, 0x40",
            "bhi 0xbafac",
            "mov r2, r5",
            "mov r1, r7",
            "ldr r0, [r4]",
            "bl sym.imp.memcpy",
            "rsb r2, r5, 0x40",
            "ldr r0, [r4]",
            "mov r1, 0",
            "add r0, r0, r5",
            "bl sym.imp.memset",
            "mov r3, 0",
            "ldm r4, {r1, r2}",
            "ldrb r1, [r1, r3]",
            "eor r1, r1, 0x5c",
            "strb r1, [r2, r3]",
            "ldr r2, [r4]",
            "ldrb r1, [r2, r3]",
            "eor r1, r1, 0x36",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x40",
            "bne 0xbaf78",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r6, r4, 0x10",
            "mov r2, r5",
            "mov r1, r7",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r6",
            "ldr r1, [r4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r5, 0x14",
            "mov r2, 0x2c",
            "b 0xbaf64"
        ]
    },
    "method.TaoCrypt::ModularArithmetic.Half_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab460",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [r1]",
            "ldr r3, [r0, 0xc]",
            "sub sp, sp, 0x48",
            "cmp ip, r3",
            "mov r4, r0",
            "mov r7, r1",
            "beq 0xab56c",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "subs r6, r0, 0",
            "beq 0xab52c",
            "add r5, sp, 0x38",
            "add r2, r4, 0xc",
            "add r6, sp, 8",
            "mov r0, r5",
            "mov r1, r7",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, r5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r6",
            "mov r1, 1",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "add r5, sp, 0x28",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r6, 1",
            "add r0, r4, 0x2c",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r1, [sp, 0x2c]",
            "mov r4, r0",
            "ldr r2, [sp, 0x28]",
            "add r0, r5, 8",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "cmp r6, 0",
            "addne r0, sp, 0x40",
            "ldrne r1, [sp, 0x3c]",
            "ldrne r2, [sp, 0x38]",
            "blne rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r4",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r8, sp, 0x18",
            "mov r1, r7",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r8",
            "mov r1, 1",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "add r5, sp, 0x28",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r8, 8",
            "ldr r1, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xab4e8",
            "ldr r3, [r4, 0x10]",
            "ldr r1, [r1, 4]",
            "ldr r0, [r0, 0x20]",
            "mov r2, 1",
            "str ip, [sp]",
            "add r4, r4, 0x1c",
            "bl rsym._ZN8TaoCrypt17DivideByPower2ModEPjPKjjS2_j",
            "b 0xab51c"
        ]
    },
    "sym.yaSSL::SSL::verifyServerState_yaSSL::HandShakeType_": {
        "function_address": "0x00091c0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x91c9c",
            "sub r5, r5, 1",
            "cmp r5, 0x13",
            "addls pc, pc, r5, lsl 2",
            "b 0x91cbc",
            "b 0x91c84",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91ca4",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cf8",
            "b 0x91ca4",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cbc",
            "b 0x91cc8",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x91cbc",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x91c9c",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL11order_errorEv",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, 2",
            "bne 0x91cbc",
            "add r0, r4, 0x68",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x91c9c",
            "b 0x91cbc",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, 2",
            "bne 0x91cbc",
            "b 0x91c9c"
        ]
    },
    "rsym._ZNK5yaSSL6States9getServerEv": {
        "function_address": "0x00040528",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc34]!"
        ]
    },
    "sym.mysql_real_connect": {
        "function_address": "0x00076720",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x000776dc]",
            "ldr ip, [r0, 0x328]",
            "ldr lr, [0x000776e0]",
            "add r6, pc, r6",
            "sub sp, sp, 0xb10",
            "mov r4, r0",
            "sub sp, sp, 4",
            "mov r0, 0",
            "add lr, r6, lr",
            "cmp ip, 0",
            "str r3, [sp, 0x20]",
            "ldr r8, [sp, 0xb38]",
            "ldr fp, [sp, 0xb44]",
            "mov r7, r1",
            "mov r5, r2",
            "str lr, [r4, 0x3b0]",
            "str r0, [r4, 0x2dc]",
            "str r0, [r4]",
            "beq 0x77014",
            "ldr r2, [r4, 0x32c]",
            "add r0, r4, 0x2f8",
            "mov r1, ip",
            "bl rsym.mysql_read_default_options",
            "ldr r0, [r4, 0x328]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x32c]",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [r4, 0x328]",
            "str r3, [r4, 0x32c]",
            "cmp r7, 0",
            "beq 0x76d38",
            "ldrb r3, [r7]",
            "cmp r3, 0",
            "beq 0x76d38",
            "cmp r5, 0",
            "beq 0x76d24",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "beq 0x76d24",
            "ldr r1, [sp, 0x20]",
            "cmp r1, 0",
            "beq 0x77030",
            "cmp r8, 0",
            "beq 0x76d1c",
            "ldrb r3, [r8]",
            "cmp r3, 0",
            "beq 0x76d1c",
            "ldr r3, [sp, 0xb3c]",
            "ldr r1, [sp, 0xb40]",
            "cmp r3, 0",
            "ldreq ip, [r4, 0x304]",
            "mov r3, 2",
            "streq ip, [sp, 0xb3c]",
            "cmp r1, 0",
            "ldreq r2, [r4, 0x31c]",
            "streq r2, [sp, 0xb40]",
            "ldr r1, [r4]",
            "str r3, [r4, 0x2ec]",
            "cmp r1, 0",
            "movne r3, 0",
            "strne r3, [sp, 0x28]",
            "beq 0x76ee8",
            "mov r0, r4",
            "bl rsym.my_net_init",
            "cmp r0, 0",
            "bne 0x77274",
            "ldr r3, [r4]",
            "mov r1, 1",
            "mov r0, r3",
            "ldr ip, [r3, 0x78]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [r4, 0x2fc]",
            "cmp r1, 0",
            "bne 0x76e70",
            "ldr r1, [r4, 0x300]",
            "cmp r1, 0",
            "bne 0x76e64",
            "ldr r3, [r4, 0x350]",
            "ldr r1, [r4, 0x2f8]",
            "cmp r3, 0",
            "strne r3, [r4, 0x2c]",
            "mov r3, 0xa",
            "cmp r1, 0",
            "str r3, [r4, 0x2e4]",
            "bne 0x76d40",
            "mov r0, r4",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "mov sb, r0",
            "beq 0x77530",
            "ldr r0, [r4, 0x10]",
            "ldrb ip, [r0]",
            "cmp ip, 0xa",
            "str ip, [r4, 0x2e4]",
            "bne 0x76eb4",
            "add r0, r0, 1",
            "bl rsym.strend",
            "ldrb r3, [r0, 3]",
            "ldrb r2, [r0, 2]",
            "ldrb r1, [r0, 1]",
            "lsl r3, r3, 0x10",
            "add r3, r3, r2, lsl 8",
            "ldrb r2, [r0, 4]",
            "add r3, r3, r1",
            "add ip, r4, 0x384",
            "add r3, r3, r2, lsl 24",
            "add ip, ip, 2",
            "mov sl, r0",
            "str ip, [sp, 0x24]",
            "str r3, [r4, 0x2d0]",
            "mov r2, 8",
            "ldr r0, [sp, 0x24]",
            "add r1, sl, 5",
            "bl rsym.strmake",
            "ldr r3, [r4, 0x10]",
            "add r2, sl, 0xf",
            "rsb r2, r3, r2",
            "cmp sb, r2",
            "add r2, sl, 0xe",
            "blo 0x76924",
            "ldrb r0, [sl, 0xe]",
            "ldrb r1, [sl, 0xf]",
            "add r1, r0, r1, lsl 8",
            "lsl r1, r1, 0x10",
            "lsr r1, r1, 0x10",
            "str r1, [r4, 0x2e0]",
            "add sl, r2, 0x12",
            "rsb r1, r3, sl",
            "cmp sb, r1",
            "blo 0x76954",
            "ldrb r1, [r2, 2]",
            "str r1, [r4, 0x2f0]",
            "ldrb r1, [r2, 3]",
            "ldrb r2, [r2, 4]",
            "add r2, r1, r2, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "str r2, [r4, 0x2ec]",
            "add r2, sl, 0xd",
            "rsb r3, r3, r2",
            "cmp sb, r3",
            "bhs 0x76e7c",
            "ldr r3, [r4, 0x2e0]",
            "bic r3, r3, 0x8000",
            "str r3, [r4, 0x2e0]",
            "ldrb r3, [r4, 0x364]",
            "cmp r3, 0",
            "beq 0x76998",
            "ldr r1, [sp, 0x20]",
            "ldrb r3, [r1]",
            "cmp r3, 0",
            "beq 0x76998",
            "ldr r3, [r4, 0x2e0]",
            "tst r3, 0x8000",
            "beq 0x77694",
            "mov r0, r4",
            "bl rsym.mysql_init_character_set",
            "cmp r0, 0",
            "bne 0x76cb4",
            "ldr r0, [sp, 0x28]",
            "bl sym.imp.strlen",
            "str r0, [sp, 0x2c]",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "ldr r2, [sp, 0xb40]",
            "mov sb, r0",
            "cmp r2, 0",
            "moveq r0, 1",
            "beq 0x769dc",
            "mov r0, r2",
            "bl sym.imp.strlen",
            "add r0, r0, 1",
            "add sb, sb, 1",
            "add r2, r4, 0x27c",
            "add r3, r4, 0x280",
            "str sb, [sp]",
            "str r2, [sp, 4]",
            "str r0, [sp, 8]",
            "str r3, [sp, 0xc]",
            "ldr ip, [r4, 0x10]",
            "ldr r3, [sp, 0x2c]",
            "mov sb, 0",
            "rsb ip, ip, sl",
            "add r2, r3, 1",
            "mov r0, sb",
            "add r1, r4, 0x284",
            "add r3, r4, 0x270",
            "str ip, [sp, 0x10]",
            "str sb, [sp, 0x14]",
            "bl rsym.my_multi_malloc",
            "cmp r0, sb",
            "beq 0x773a0",
            "mov r0, r5",
            "mov r1, sb",
            "bl rsym.my_strdup",
            "cmp r0, sb",
            "str r0, [r4, 0x274]",
            "beq 0x773a0",
            "mov r1, sb",
            "ldr r0, [sp, 0x20]",
            "bl rsym.my_strdup",
            "cmp r0, sb",
            "str r0, [r4, 0x278]",
            "beq 0x773a0",
            "ldr r1, [sp, 0x28]",
            "ldr r0, [r4, 0x284]",
            "bl sym.imp.strcpy",
            "mov r1, r7",
            "ldr r0, [r4, 0x270]",
            "bl sym.imp.strcpy",
            "ldr ip, [sp, 0xb40]",
            "cmp ip, 0",
            "moveq r1, ip",
            "streq r1, [r4, 0x27c]",
            "movne r1, ip",
            "ldrne r0, [r4, 0x27c]",
            "blne sym.imp.strcpy",
            "ldr r1, [r4, 0x10]",
            "ldr r0, [r4, 0x280]",
            "add r1, r1, 1",
            "bl sym.imp.strcpy",
            "ldr r3, [r4, 0x30c]",
            "ldr r2, [sp, 0xb3c]",
            "orr r3, r3, 0xa200",
            "orr r3, r3, 5",
            "orr fp, r3, fp",
            "ldr r3, [r4, 0x338]",
            "tst fp, 0x10000",
            "orrne fp, fp, 0x20000",
            "cmp r3, 0",
            "str r2, [r4, 0x2d8]",
            "beq 0x77360",
            "mov r3, 1",
            "strb r3, [r4, 0x354]",
            "orr fp, fp, 0x800",
            "ldr r3, [r4, 0x2e0]",
            "cmp r8, 0",
            "mvn r3, r3",
            "and r3, r3, 0xa20",
            "orrne fp, fp, 8",
            "mvn r3, r3",
            "and fp, fp, r3",
            "tst fp, 0x200",
            "bne 0x77064",
            "lsr r3, fp, 8",
            "strb r3, [sp, 0x839]",
            "strb fp, [sp, 0x838]",
            "ldr r3, [r4, 0x2c]",
            "add sl, sp, 0x830",
            "strb r3, [sp, 0x83a]",
            "ldr r3, [r4, 0x2c]",
            "add sl, sl, 8",
            "lsr r3, r3, 8",
            "strb r3, [sp, 0x83b]",
            "ldrh r3, [r4, 0x2e]",
            "tst fp, 0x800",
            "strb r3, [sp, 0x83c]",
            "add sb, sl, 5",
            "str fp, [r4, 0x2dc]",
            "bne 0x770d8",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "bne 0x77234",
            "mov r0, sb",
            "bl rsym.read_user_name",
            "mov r0, sb",
            "bl rsym.strend",
            "ldr r2, [sp, 0x20]",
            "mov r5, r0",
            "ldrb r3, [r2]",
            "add r0, r0, 1",
            "cmp r3, 0",
            "strbeq r3, [r5, 1]",
            "addeq r5, r0, 1",
            "beq 0x76ba0",
            "ldr r3, [r4, 0x2e0]",
            "tst r3, 0x8000",
            "beq 0x76e94",
            "mov r3, 0x14",
            "strb r3, [r5, 1]",
            "add r0, r0, 1",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "bl rsym.scramble",
            "add r5, r5, 0x16",
            "cmp r8, 0",
            "beq 0x76bb4",
            "ldr r3, [r4, 0x2e0]",
            "tst r3, 8",
            "bne 0x77248",
            "rsb r2, sl, r5",
            "mov r0, r4",
            "mov r1, sl",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x771f4",
            "mov r0, r4",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "bne 0x771f4",
            "mov r0, r4",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "beq 0x77580",
            "cmp r0, 1",
            "beq 0x772ac",
            "tst fp, 0x20",
            "movne r3, 1",
            "strbne r3, [r4, 0x50]",
            "cmp r8, 0",
            "beq 0x76c1c",
            "mov r1, r8",
            "mov r0, r4",
            "bl rsym.mysql_select_db",
            "cmp r0, 0",
            "bne 0x773bc",
            "ldr r3, [r4, 0x324]",
            "cmp r3, 0",
            "beq 0x76e44",
            "ldr sl, [r3]",
            "ldr r2, [r3, 4]",
            "mov r8, 0",
            "add r2, sl, r2, lsl 2",
            "str r2, [sp, 0x1c]",
            "ldrb r3, [r4, 0x385]",
            "cmp sl, r2",
            "str r3, [sp, 0x20]",
            "strb r8, [r4, 0x385]",
            "bhs 0x76e3c",
            "ldr r5, [sl]",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym.mysql_real_query",
            "cmp r0, 0",
            "bne 0x76cb4",
            "ldr r3, [r4, 0x294]",
            "cmp r3, 0",
            "beq 0x76e18",
            "ldr r5, [r4, 0x3a8]",
            "ldr r3, [r5, 0x294]",
            "cmp r3, 0",
            "beq 0x76cb4",
            "ldr r3, [r5, 0x380]",
            "cmp r3, 1",
            "beq 0x76d6c",
            "ldr r3, [0x00077754]",
            "mov r0, r5",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x000776e4]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, r4",
            "bl rsym.end_server",
            "ldr r0, [r4, 0x284]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x274]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x278]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x28c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x3bc]",
            "bl rsym.my_no_flags_free",
            "mov r5, 0",
            "cmp fp, 0",
            "str r5, [r4, 0x3bc]",
            "str r5, [r4, 0x28c]",
            "str r5, [r4, 0x278]",
            "str r5, [r4, 0x274]",
            "str r5, [r4, 0x284]",
            "bge 0x76ea8",
            "mov r4, r5",
            "mov r0, r4",
            "add sp, sp, 0x314",
            "add sp, sp, 0x800",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r8, [r4, 0x320]",
            "b 0x767e4",
            "ldr r5, [r4, 0x314]",
            "cmp r5, 0",
            "ldreq r5, [0x000776e8]",
            "addeq r5, r6, r5",
            "b 0x767c4",
            "ldr r7, [r4, 0x310]",
            "b 0x767b0",
            "ldr r0, [r4]",
            "bl rsym.vio_poll_read",
            "cmp r0, 0",
            "beq 0x76880",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr r1, [0x000776ec]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r3, [r6, r3]",
            "b 0x7720c",
            "ldr r0, [r5, 0x2e8]",
            "mov r1, 0x30",
            "add r0, r0, 0x16",
            "lsl r0, r0, 2",
            "bl rsym.my_malloc",
            "subs r7, r0, 0",
            "mov r1, 0x10",
            "add r3, r7, 0x58",
            "beq 0x76cb4",
            "str r3, [r7, 0x14]",
            "ldr r3, [r5, 0x3b0]",
            "add sb, r7, 0x51",
            "str r3, [r7, 0x1c]",
            "ldr r0, [r5, 0x2e8]",
            "add r0, r0, 1",
            "lsl r0, r0, 2",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "add ip, r7, 0x28",
            "add lr, r5, 0x298",
            "str r0, [r7, 0x20]",
            "beq 0x776d0",
            "ldr r3, [r5, 0x294]",
            "str r3, [r7, 8]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r3, [r5, 0x2e8]",
            "mov ip, 2",
            "str r3, [r7, 0x48]",
            "str r8, [r7, 0x4c]",
            "str r5, [r7, 0x18]",
            "str r8, [r7, 0x24]",
            "mov r0, r7",
            "str sb, [r5, 0x3b8]",
            "str r8, [r5, 0x294]",
            "str r8, [r5, 0x2a0]",
            "str r8, [r5, 0x29c]",
            "str r8, [r5, 0x298]",
            "str r8, [r5, 0x2a4]",
            "str ip, [r5, 0x380]",
            "bl rsym.mysql_free_result",
            "mov r0, r4",
            "bl rsym.mysql_next_result",
            "cmp r0, 0",
            "bgt 0x76cb4",
            "beq 0x76c74",
            "ldr r1, [sp, 0x1c]",
            "add sl, sl, 4",
            "cmp r1, sl",
            "bhi 0x76c50",
            "ldr r2, [sp, 0x20]",
            "strb r2, [r4, 0x385]",
            "ldrb r3, [r4, 0x357]",
            "cmp r3, 0",
            "beq 0x76d08",
            "mov r0, r4",
            "bl rsym.mysql_rpl_probe",
            "cmp r0, 0",
            "beq 0x76d08",
            "b 0x76cb4",
            "mov r0, r4",
            "bl rsym.my_net_set_write_timeout",
            "b 0x76860",
            "mov r0, r4",
            "bl rsym.my_net_set_read_timeout",
            "b 0x76854",
            "add r0, r4, 0x38c",
            "mov r1, sl",
            "mov r2, 0xc",
            "add r0, r0, 2",
            "bl rsym.strmake",
            "b 0x76970",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "bl rsym.scramble_323",
            "add r5, r5, 0xa",
            "b 0x76ba0",
            "mov r0, r4",
            "bl fcn.00074a14",
            "b 0x76d04",
            "ldr r3, [0x00077754]",
            "mov r0, r4",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r2, [r2]",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x000776f4]",
            "ldr r3, [r3, 0x1c]",
            "str ip, [sp]",
            "mov ip, 0xa",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "ldr sl, [r4, 0x308]",
            "cmp sl, 0",
            "cmpne sl, r3",
            "bne 0x76ff0",
            "ldr r3, [sp, 0xb40]",
            "cmp r3, 0",
            "beq 0x76fdc",
            "cmp r7, 0",
            "beq 0x76f24",
            "ldr r1, [0x000776f8]",
            "mov r0, r7",
            "add r1, r6, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x76ff0",
            "ldr ip, [sp, 0xb40]",
            "cmp ip, 0",
            "beq 0x776b0",
            "ldr r3, [0x000776f0]",
            "mov r0, 1",
            "ldr sb, [r6, r3]",
            "mov r1, r0",
            "ldr r3, [sb, 0x28]",
            "mov r2, 0",
            "str r3, [sp, 0x28]",
            "bl sym.imp.socket",
            "cmn r0, 1",
            "mov sl, r0",
            "beq 0x777a4",
            "mov r1, 2",
            "mov r2, 3",
            "bl rsym.vio_new",
            "add r7, sp, 0xa80",
            "add r7, r7, 0xc",
            "str r0, [r4]",
            "mov r1, 0",
            "mov r2, 0x6e",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov ip, 1",
            "add r3, sp, 0xa00",
            "ldr r1, [sp, 0xb40]",
            "mov r2, 0x6b",
            "strh ip, [r3, 0x8c]",
            "add r0, r7, 2",
            "bl rsym.strmake",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, 0x6e",
            "ldr r3, [r4, 0x2f8]",
            "bl rsym.my_connect",
            "cmp r0, 0",
            "bne 0x777dc",
            "ldr r1, [r4]",
            "mov r3, 2",
            "cmp r1, 0",
            "str r3, [r4, 0x308]",
            "beq 0x76ff8",
            "ldr r7, [0x000776f8]",
            "add r7, r6, r7",
            "b 0x76820",
            "ldr r3, [0x000776fc]",
            "ldr r3, [r6, r3]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x76f04",
            "cmp sl, 1",
            "bls 0x77428",
            "ldr r3, [0x00077754]",
            "mov r0, r4",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x00077700]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x76cb4",
            "ldr r2, [r4, 0x32c]",
            "cmp r2, r0",
            "beq 0x7679c",
            "ldr ip, [0x00077704]",
            "add r0, r4, 0x2f8",
            "add ip, r6, ip",
            "b 0x76778",
            "ldr r2, [r4, 0x318]",
            "cmp r2, 0",
            "str r2, [sp, 0x20]",
            "bne 0x767d0",
            "ldr r0, [0x00077708]",
            "add r0, r6, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "str r0, [sp, 0x20]",
            "ldreq r3, [0x000776e8]",
            "addeq r3, r6, r3",
            "streq r3, [sp, 0x20]",
            "b 0x767d0",
            "lsr r1, fp, 8",
            "lsr r2, fp, 0x10",
            "lsr r3, fp, 0x18",
            "strb r1, [sp, 0x839]",
            "strb r2, [sp, 0x83a]",
            "strb r3, [sp, 0x83b]",
            "strb fp, [sp, 0x838]",
            "ldr r3, [r4, 0x2c]",
            "add sl, sp, 0x830",
            "strb r3, [sp, 0x83c]",
            "ldr r3, [r4, 0x2c]",
            "add sl, sl, 8",
            "lsr r3, r3, 8",
            "strb r3, [sp, 0x83d]",
            "ldrh r3, [r4, 0x2e]",
            "add r0, sl, 9",
            "strb r3, [sp, 0x83e]",
            "ldrb r3, [r4, 0x2f]",
            "mov r1, 0",
            "strb r3, [sp, 0x83f]",
            "ldr r3, [r4, 0x290]",
            "mov r2, 0x17",
            "ldr r3, [r3]",
            "add sb, sl, 0x20",
            "strb r3, [sp, 0x840]",
            "bl sym.imp.memset",
            "tst fp, 0x800",
            "str fp, [r4, 0x2dc]",
            "beq 0x76b3c",
            "mov r0, r4",
            "mov r1, sl",
            "rsb r2, sl, sb",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x7740c",
            "mov r0, r4",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "bne 0x7740c",
            "ldr ip, [r4, 0x348]",
            "add r0, r4, 0x338",
            "ldm r0, {r0, r1, r2, r3}",
            "str ip, [sp]",
            "bl rsym.new_VioSSLConnectorFd",
            "subs r3, r0, 0",
            "beq 0x771d8",
            "str r3, [r4, 0x26c]",
            "ldr r1, [r4]",
            "ldr r2, [r4, 0x2f8]",
            "bl rsym.sslconnect",
            "cmp r0, 0",
            "bne 0x771d8",
            "tst fp, 0x40000000",
            "beq 0x76b3c",
            "ldr r1, [r4, 0x270]",
            "ldr r3, [r4]",
            "str r1, [sp, 0x1c]",
            "ldr r0, [r3, 0x98]",
            "cmp r0, 0",
            "beq 0x771d8",
            "cmp r1, 0",
            "beq 0x771d8",
            "bl rsym.yaSSL_get_peer_certificate",
            "subs r3, r0, 0",
            "beq 0x771d8",
            "add r7, sp, 0x980",
            "add r7, r7, 0xc",
            "str r3, [sp, 0x18]",
            "bl rsym.yaX509_get_subject_name",
            "mov r1, r7",
            "mov r2, 0x100",
            "bl rsym.yaX509_NAME_oneline",
            "ldr r3, [sp, 0x18]",
            "mov r0, r3",
            "bl rsym.yaX509_free",
            "ldr r1, [0x0007770c]",
            "mov r0, r7",
            "add r1, r6, r1",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x771d8",
            "add r7, r0, 4",
            "mov r1, 0x2f",
            "mov r0, r7",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "movne r3, 0",
            "strbne r3, [r0]",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r7",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x76b3c",
            "ldr r3, [0x00077754]",
            "mov r0, r4",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x00077710]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr r1, [0x00077714]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r3, [r6, r3]",
            "add r6, r6, r1",
            "str r6, [sp]",
            "ldr ip, [r0]",
            "ldr r2, [r2]",
            "ldr r3, [r3, 0xdc]",
            "mov r0, r4",
            "ldr r1, [0x00077718]",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "mov r1, r5",
            "mov r0, sb",
            "mov r2, 0x30",
            "bl rsym.strmake",
            "b 0x76b50",
            "mov r1, r8",
            "mov r0, r5",
            "mov r2, 0xc0",
            "bl rsym.strmake",
            "mov r1, 0x10",
            "add r5, r0, 1",
            "mov r0, r8",
            "bl rsym.my_strdup",
            "mov r8, 0",
            "str r0, [r4, 0x28c]",
            "b 0x76bb4",
            "ldr r3, [r4]",
            "mov r0, r3",
            "ldr ip, [r3, 0x60]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [0x00077754]",
            "mov r2, 0",
            "ldr r3, [r6, r3]",
            "str r2, [r4]",
            "ldr r2, [r3]",
            "mov r0, r4",
            "ldr r1, [0x0007771c]",
            "bl rsym.set_mysql_error",
            "b 0x76cb4",
            "ldr r3, [r4, 0x10]",
            "ldrb r3, [r3]",
            "cmp r3, 0xfe",
            "bne 0x76bf4",
            "ldr r3, [r4, 0x2e0]",
            "tst r3, 0x8000",
            "beq 0x76bf4",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [sp, 0x24]",
            "mov r0, sl",
            "bl rsym.scramble_323",
            "mov r0, r4",
            "mov r1, sl",
            "mov r2, 9",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x777d0",
            "mov r0, r4",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "bne 0x777d0",
            "mov r0, r4",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "bne 0x76bf4",
            "ldr r2, [r4, 0x58]",
            "ldr r3, [0x00077718]",
            "cmp r2, r3",
            "bne 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077720]",
            "add r3, r6, r3",
            "str r3, [sp]",
            "ldr r3, [0x00077754]",
            "ldr ip, [r0]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r2, [r2]",
            "ldr r3, [r6, r3]",
            "mov r0, r4",
            "ldr r3, [r3, 0xdc]",
            "ldr r1, [0x00077718]",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "ldr r3, [r4, 0x33c]",
            "cmp r3, 0",
            "bne 0x76acc",
            "ldr r3, [r4, 0x340]",
            "cmp r3, 0",
            "bne 0x76acc",
            "ldr r3, [r4, 0x344]",
            "cmp r3, 0",
            "bne 0x76acc",
            "ldr r3, [r4, 0x348]",
            "cmp r3, 0",
            "bne 0x76acc",
            "ldrb r3, [r4, 0x354]",
            "cmp r3, 0",
            "beq 0x76ad8",
            "b 0x76ad4",
            "ldr r3, [0x00077754]",
            "mov r0, r4",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x0007771c]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x76cb4",
            "ldr r5, [r4, 0x58]",
            "ldr r3, [0x00077718]",
            "cmp r5, r3",
            "bne 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077724]",
            "add r3, r6, r3",
            "str r3, [sp]",
            "ldr r3, [0x00077754]",
            "ldr ip, [r0]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r2, [r2]",
            "ldr r3, [r6, r3]",
            "mov r1, r5",
            "ldr r3, [r3, 0xdc]",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr r1, [0x00077728]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r3, [r6, r3]",
            "b 0x7720c",
            "ldr r1, [sp, 0xb3c]",
            "cmp r1, 0",
            "ldreq r3, [0x0007772c]",
            "ldreq r3, [r6, r3]",
            "ldreq r3, [r3]",
            "streq r3, [sp, 0xb3c]",
            "cmp r7, 0",
            "beq 0x776c4",
            "ldr r2, [0x000776f0]",
            "add sl, sp, 0x830",
            "ldr sb, [r6, r2]",
            "add sl, sl, 8",
            "str r2, [sp, 0x28]",
            "ldr r1, [0x00077730]",
            "ldr r2, [sb, 0x2c]",
            "mov r3, r7",
            "mov r0, sl",
            "bl rsym.my_snprintf",
            "mov r0, 2",
            "mov r1, 1",
            "mov r2, 0",
            "bl sym.imp.socket",
            "cmn r0, 1",
            "str r0, [sp, 0x24]",
            "beq 0x77810",
            "mov r1, 1",
            "mov r2, 2",
            "bl rsym.vio_new",
            "ldr r3, [sp, 0xb3c]",
            "add ip, sp, 0xaf0",
            "lsl r1, r3, 0x10",
            "lsr r2, r1, 8",
            "lsl r2, r2, 0x10",
            "add ip, ip, 0xc",
            "lsr r2, r2, 0x10",
            "add r3, ip, 8",
            "orr r2, r2, r1, lsr 24",
            "mov r1, 0",
            "str ip, [sp, 0x1c]",
            "str r0, [r4]",
            "str r1, [r3], 4",
            "str r1, [r3]",
            "mov ip, 2",
            "add r3, sp, 0xa00",
            "mov r0, r7",
            "strh r2, [r3, 0xfe]",
            "strh ip, [r3, 0xfc]",
            "str r1, [sp, 0xb00]",
            "bl sym.imp.inet_addr",
            "cmn r0, 1",
            "beq 0x7759c",
            "str r0, [sp, 0xb00]",
            "ldr r1, [sp, 0x1c]",
            "ldr r0, [sp, 0x24]",
            "mov r2, 0x10",
            "ldr r3, [r4, 0x2f8]",
            "bl rsym.my_connect",
            "cmp r0, 0",
            "bne 0x7765c",
            "ldr r1, [r4]",
            "cmp r1, 0",
            "movne r2, 0",
            "strne sl, [sp, 0x28]",
            "strne r2, [sp, 0xb40]",
            "bne 0x76820",
            "b 0x76ff8",
            "ldr r5, [r4, 0x58]",
            "ldr r3, [0x00077718]",
            "cmp r5, r3",
            "bne 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr r1, [0x00077734]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x000776f0]",
            "ldr r3, [r6, r3]",
            "add r6, r6, r1",
            "str r6, [sp]",
            "ldr ip, [r0]",
            "ldr r2, [r2]",
            "ldr r3, [r3, 0xdc]",
            "mov r1, r5",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "ldr r5, [r4, 0x58]",
            "ldr r3, [0x00077718]",
            "cmp r5, r3",
            "bne 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077738]",
            "b 0x773d4",
            "add r2, sp, 0x40",
            "add r1, sp, 0x980",
            "add ip, sp, 0xb00",
            "add ip, ip, 0xc",
            "sub r2, r2, 8",
            "mov r0, r7",
            "add r1, r1, 0xc",
            "mov r3, 0x800",
            "str ip, [sp]",
            "bl rsym.my_gethostbyname_r",
            "subs sb, r0, 0",
            "beq 0x77774",
            "ldr r3, [sb, 8]",
            "cmp r3, 2",
            "bne 0x77774",
            "ldr r1, [sp, 0x1c]",
            "mov ip, 0",
            "add r3, r1, 4",
            "str r7, [sp, 0x2c]",
            "str r5, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "mov r5, ip",
            "ldr r8, [sp, 0x24]",
            "mov r7, r1",
            "str sl, [sp, 0x24]",
            "mov sl, r6",
            "mov r6, r3",
            "b 0x77638",
            "ldr r2, [sb, 0xc]",
            "cmp r2, 4",
            "movhs r2, 4",
            "bl sym.imp.__memcpy_chk",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, 0x10",
            "ldr r3, [r4, 0x2f8]",
            "bl rsym.my_connect",
            "cmp r0, 0",
            "beq 0x7775c",
            "ldr r2, [sb, 0x10]",
            "mov r3, 0xc",
            "ldr r2, [r2, r5]",
            "mov r0, r6",
            "subs r1, r2, 0",
            "add r5, r5, 4",
            "bne 0x7760c",
            "ldr r7, [sp, 0x2c]",
            "mov r6, sl",
            "bl sym.imp.__errno_location",
            "ldr ip, [sp, 0x28]",
            "ldr r2, [0x00077754]",
            "str r7, [sp]",
            "ldr r3, [r6, ip]",
            "ldr r2, [r6, r2]",
            "ldr ip, [r0]",
            "ldr r2, [r2]",
            "ldr r3, [r3, 0xc]",
            "mov r0, r4",
            "ldr r1, [0x0007773c]",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "ldr r3, [0x00077754]",
            "mov r0, r4",
            "ldr r3, [r6, r3]",
            "ldr r1, [0x00077740]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x76cb4",
            "ldr r3, [0x000776fc]",
            "ldr r3, [r6, r3]",
            "ldr r3, [r3]",
            "str r3, [sp, 0xb40]",
            "b 0x76f30",
            "ldr r7, [0x000776f8]",
            "add r7, r6, r7",
            "b 0x77448",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "b 0x76cb4",
            "mov r6, sl",
            "ldr r7, [sp, 0x2c]",
            "ldr r5, [sp, 0x30]",
            "ldr r8, [sp, 0x34]",
            "ldr sl, [sp, 0x24]",
            "b 0x77514",
            "ldr r2, [sp, 0x28]",
            "ldr ip, [sp, 0xb0c]",
            "ldr r3, [r6, r2]",
            "ldr r2, [0x00077754]",
            "ldr r3, [r3, 0x14]",
            "ldr r2, [r6, r2]",
            "mov r0, r4",
            "ldr r2, [r2]",
            "ldr r1, [0x00077744]",
            "stm sp, {r7, ip}",
            "bl fcn.00074004",
            "b 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr ip, [r0]",
            "ldr r2, [r6, r3]",
            "mov r0, r4",
            "ldr r3, [sb, 4]",
            "ldr r2, [r2]",
            "ldr r1, [0x00077748]",
            "str ip, [sp]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x0007774c]",
            "b 0x77328",
            "bl sym.imp.__errno_location",
            "ldr ip, [sp, 0xb40]",
            "ldr r3, [0x00077754]",
            "str ip, [sp]",
            "ldr r3, [r6, r3]",
            "ldr ip, [r0]",
            "ldr r2, [r3]",
            "mov r0, r4",
            "ldr r3, [sb, 8]",
            "ldr r1, [0x00077750]",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "b 0x76cb4",
            "bl sym.imp.__errno_location",
            "ldr r3, [0x00077754]",
            "ldr ip, [r0]",
            "ldr r2, [r6, r3]",
            "mov r0, r4",
            "ldr r3, [sb, 0x10]",
            "ldr r2, [r2]",
            "ldr r1, [0x00077758]",
            "str ip, [sp]",
            "bl fcn.00074004",
            "b 0x76cb4"
        ]
    },
    "rsym.mysql_read_default_options": {
        "function_address": "0x0003f238",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8d4]!"
        ]
    },
    "rsym.mysql_init_character_set": {
        "function_address": "0x00040600",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xba4]!"
        ]
    },
    "rsym.read_user_name": {
        "function_address": "0x0003def4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5ac]!"
        ]
    },
    "rsym.scramble": {
        "function_address": "0x0003f730",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x584]!"
        ]
    },
    "rsym.mysql_select_db": {
        "function_address": "0x0003ce98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x94]!"
        ]
    },
    "rsym.mysql_real_query": {
        "function_address": "0x0003da08",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8f4]!"
        ]
    },
    "rsym.vio_poll_read": {
        "function_address": "0x0003fe68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb4]!"
        ]
    },
    "rsym.mysql_free_result": {
        "function_address": "0x00040390",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd44]!"
        ]
    },
    "rsym.mysql_next_result": {
        "function_address": "0x0003f538",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6d4]!"
        ]
    },
    "rsym.mysql_rpl_probe": {
        "function_address": "0x0003ee78",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb54]!"
        ]
    },
    "rsym.scramble_323": {
        "function_address": "0x0003daa4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x88c]!"
        ]
    },
    "fcn.00074a14": {
        "function_address": "0x00074a14",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "ldr r0, [r0, 0x314]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x310]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x318]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x31c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x320]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x328]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x32c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x330]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x334]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x360]",
            "bl rsym.my_no_flags_free",
            "ldr r7, [r5, 0x324]",
            "cmp r7, 0",
            "beq 0x74aa8",
            "ldm r7, {r4, r6}",
            "add r6, r4, r6, lsl 2",
            "cmp r4, r6",
            "bhs 0x74a98",
            "ldr r0, [r4], 4",
            "bl rsym.my_no_flags_free",
            "cmp r6, r4",
            "bhi 0x74a88",
            "mov r0, r7",
            "bl rsym.delete_dynamic",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x338]",
            "ldr r4, [r5, 0x26c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x33c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x340]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x344]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r5, 0x348]",
            "bl rsym.my_no_flags_free",
            "cmp r4, 0",
            "ldrne r0, [r4]",
            "blne rsym.yaSSL_CTX_free",
            "ldr r0, [r5, 0x26c]",
            "bl rsym.my_no_flags_free",
            "mov r1, 0",
            "str r1, [r5, 0x338]",
            "str r1, [r5, 0x33c]",
            "str r1, [r5, 0x340]",
            "str r1, [r5, 0x344]",
            "str r1, [r5, 0x348]",
            "strb r1, [r5, 0x354]",
            "str r1, [r5, 0x26c]",
            "add r0, r5, 0x2f8",
            "mov r2, 0x88",
            "bl sym.imp.memset",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.00074004": {
        "function_address": "0x00074004",
        "instructions": [
            "str r3, [sp, -4]!",
            "push {r4, r5, lr}",
            "sub sp, sp, 8",
            "str r1, [r0, 0x58]",
            "add ip, sp, 0x18",
            "mov r4, r0",
            "mov r5, r2",
            "mov r3, ip",
            "ldr r1, [0x00074058]",
            "ldr r2, [sp, 0x14]",
            "add r0, r0, 0x5f",
            "str ip, [sp, 4]",
            "bl rsym.my_vsnprintf",
            "add r0, r4, 0x25c",
            "mov r1, r5",
            "add r0, r0, 3",
            "bl sym.imp.strcpy",
            "add sp, sp, 8",
            "pop {r4, r5, lr}",
            "add sp, sp, 4",
            "bx lr"
        ]
    },
    "rsym.new_VioSSLConnectorFd": {
        "function_address": "0x0003d87c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9fc]!"
        ]
    },
    "rsym.sslconnect": {
        "function_address": "0x0003fbe0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x264]!"
        ]
    },
    "rsym.yaSSL_get_peer_certificate": {
        "function_address": "0x0003ced4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x6c]!"
        ]
    },
    "rsym.yaX509_get_subject_name": {
        "function_address": "0x0003d690",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb44]!"
        ]
    },
    "rsym.yaX509_NAME_oneline": {
        "function_address": "0x0003f13c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x97c]!"
        ]
    },
    "rsym.yaX509_free": {
        "function_address": "0x0003f3d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7c4]!"
        ]
    },
    "sym.yaDES_ede3_cbc_encrypt": {
        "function_address": "0x00086de0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x20",
            "add r4, sp, 0x18",
            "mov sl, r3",
            "mov r7, r0",
            "mov r0, r4",
            "mov r8, r1",
            "mov r6, r2",
            "ldr sb, [sp, 0x48]",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r1, sl",
            "mov r2, 8",
            "mov r0, sp",
            "bl sym.imp.memcpy",
            "mov r2, 8",
            "ldr r1, [sp, 0x40]",
            "add r0, sp, r2",
            "bl sym.imp.memcpy",
            "ldr r1, [sp, 0x44]",
            "add r0, sp, 0x10",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 0x4c]",
            "mov r5, sp",
            "cmp r3, 0",
            "bne 0x86e80",
            "mov r1, sp",
            "mov r2, sb",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL7DES_EDE14set_decryptKeyEPKhS2_",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, r7",
            "mov r3, r6",
            "bl rsym._ZN5yaSSL7DES_EDE7decryptEPhPKhj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL7DES_EDED1Ev",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r1, sp",
            "mov r2, sb",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL7DES_EDE14set_encryptKeyEPKhS2_",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, r7",
            "mov r3, r6",
            "bl rsym._ZN5yaSSL7DES_EDE7encryptEPhPKhj",
            "b 0x86e6c"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDEC1Ev": {
        "function_address": "0x0003edac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbdc]!"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDE14set_decryptKeyEPKhS2_": {
        "function_address": "0x0003e164",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x40c]!"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDE7decryptEPhPKhj": {
        "function_address": "0x000401d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe6c]!"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDED1Ev": {
        "function_address": "0x0004099c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x93c]!"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDE14set_encryptKeyEPKhS2_": {
        "function_address": "0x0003fc34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x22c]!"
        ]
    },
    "rsym._ZN5yaSSL7DES_EDE7encryptEPhPKhj": {
        "function_address": "0x0003df0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x59c]!"
        ]
    },
    "sym.init_dynamic_string": {
        "function_address": "0x0004e078",
        "instructions": [
            "cmp r3, 0",
            "push {r4, r5, r6, r7, r8, lr}",
            "movne r6, r3",
            "moveq r6, 0x80",
            "subs r7, r1, 0",
            "mov r5, r0",
            "mov r4, r2",
            "moveq r8, 1",
            "beq 0x4e0b0",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add r8, r0, 1",
            "cmp r4, r8",
            "bhi 0x4e100",
            "cmp r4, 0",
            "moveq r4, r6",
            "mov r0, r4",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r5]",
            "moveq r0, 1",
            "beq 0x4e0f8",
            "sub r3, r8, 1",
            "cmp r7, 0",
            "str r3, [r5, 4]",
            "movne r1, r7",
            "movne r2, r8",
            "blne sym.imp.memcpy",
            "str r6, [r5, 0xc]",
            "str r4, [r5, 8]",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "sub r0, r6, 1",
            "add r0, r0, r8",
            "mov r1, r6",
            "bl fcn.000bed20",
            "mul r4, r6, r0",
            "b 0x4e0b0"
        ]
    },
    "fcn.0008dff4": {
        "function_address": "0x0008dff4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr ip, [0x0008e0a0]",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov r1, 1",
            "ldrb r7, [sp, 0x28]",
            "strb r1, [r0, 0x28]",
            "ldr r1, [0x0008e0a4]",
            "add ip, pc, ip",
            "str r5, [r0]",
            "mov r4, r0",
            "add r1, ip, r1",
            "mov r6, r2",
            "add r0, r0, 0xaf",
            "mov r2, 5",
            "eor r7, r7, 1",
            "strh r3, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "strb r7, [r4, 0x6df]",
            "ldrb ip, [r6]",
            "cmp ip, 0",
            "bne 0x8e07c",
            "cmp r5, 0",
            "moveq r2, r7",
            "movne r2, 0",
            "mov r3, ip",
            "mov r0, r4",
            "ldr r1, [sp, 0xc]",
            "str ip, [sp]",
            "bl rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [r6, 0x84]",
            "add r0, r4, 0x2f",
            "strb r3, [r4, 0x2e]",
            "ldr r2, [r6, 0x84]",
            "add r1, r6, 1",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL10Parameters14SetCipherNamesEv",
            "b 0x8e06c"
        ]
    },
    "rsym._ZN5yaSSL10Parameters14SetCipherNamesEv": {
        "function_address": "0x00040234",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe2c]!"
        ]
    },
    "sym.operator_new_unsigned_int__yaSSL::new_t_": {
        "function_address": "0x00093660",
        "instructions": [
            "cmp r0, 0",
            "moveq r0, 1",
            "push {r4, lr}",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "beq 0x93680",
            "pop {r4, lr}",
            "bx lr",
            "bl sym.imp.abort"
        ]
    },
    "sym.imp.abort": {
        "function_address": "0x0003ce80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xa4]!"
        ]
    },
    "sym.TaoCrypt::CertDecoder::Decode_mySTL::list_TaoCrypt::Signer___TaoCrypt::CertDecoder::CertType_": {
        "function_address": "0x0009d058",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r3, 0x10]",
            "mov r4, r0",
            "cmp r3, 0",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0x9d080",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym._ZN8TaoCrypt11CertDecoder11DecodeToKeyEv",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0x10]",
            "cmp r2, 0",
            "bne 0x9d078",
            "ldr r2, [r4, 0x14]",
            "ldr r1, [r3, 0xc]",
            "mov r0, r4",
            "cmp r2, r1",
            "strne r2, [r3, 0xc]",
            "bl rsym._ZN8TaoCrypt11CertDecoder9GetAlgoIdEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder12GetSignatureEv",
            "ldr r3, [r4, 4]",
            "ldr r2, [r3, 0x10]",
            "cmp r2, 0",
            "bne 0x9d078",
            "ldr r2, [r4, 0x1c]",
            "cmp r7, r2",
            "ldrne r2, [0x0009d110]",
            "strne r2, [r3, 0x10]",
            "bne 0x9d078",
            "cmp r6, 0",
            "beq 0x9d078",
            "ldrb r3, [r4, 0x470]",
            "cmp r3, 0",
            "beq 0x9d078",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder17ValidateSignatureEPN5mySTL4listIPNS_6SignerEEE",
            "cmp r0, 0",
            "ldreq r3, [r4, 4]",
            "ldreq r2, [0x0009d114]",
            "streq r2, [r3, 0x10]",
            "b 0x9d078"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder9GetAlgoIdEv": {
        "function_address": "0x0003e4b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1d4]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder12GetSignatureEv": {
        "function_address": "0x0003cc10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x244]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder17ValidateSignatureEPN5mySTL4listIPNS_6SignerEEE": {
        "function_address": "0x0003ddbc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x67c]!"
        ]
    },
    "method.mySTL::list_unsigned_char_.push_front_unsigned_char_": {
        "function_address": "0x000871c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::SetKey_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000bb068",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r2",
            "mov r7, r1",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "cmp r5, 0x40",
            "bhi 0xbb0e0",
            "mov r2, r5",
            "mov r1, r7",
            "ldr r0, [r4]",
            "bl sym.imp.memcpy",
            "rsb r2, r5, 0x40",
            "ldr r0, [r4]",
            "mov r1, 0",
            "add r0, r0, r5",
            "bl sym.imp.memset",
            "mov r3, 0",
            "ldm r4, {r1, r2}",
            "ldrb r1, [r1, r3]",
            "eor r1, r1, 0x5c",
            "strb r1, [r2, r3]",
            "ldr r2, [r4]",
            "ldrb r1, [r2, r3]",
            "eor r1, r1, 0x36",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x40",
            "bne 0xbb0ac",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r6, r4, 0x10",
            "mov r2, r5",
            "mov r1, r7",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r6",
            "ldr r1, [r4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r5, 0x14",
            "mov r2, 0x2c",
            "b 0xbb098"
        ]
    },
    "sym.my_b_flush_io_cache": {
        "function_address": "0x000544cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x64]",
            "sub sp, sp, 0x14",
            "cmp r3, 3",
            "movne sl, 0",
            "moveq sl, 1",
            "cmp r3, 2",
            "movne r3, sl",
            "orreq r3, sl, 1",
            "cmp sl, 0",
            "movne sb, r1",
            "moveq sb, 0",
            "cmp r3, 0",
            "mov r4, r0",
            "beq 0x5468c",
            "ldr r5, [r0, 0x88]",
            "cmn r5, 1",
            "beq 0x546e4",
            "cmp sb, 0",
            "bne 0x546fc",
            "ldr r7, [r4, 0x20]",
            "ldr r3, [r4, 0x28]",
            "subs r3, r3, r7",
            "str r3, [sp, 0xc]",
            "beq 0x5468c",
            "ldr r6, [r4, 0x58]",
            "cmp r6, 0",
            "beq 0x545b8",
            "mov r8, r3",
            "mov fp, 0",
            "ldr r5, [r4, 0x94]",
            "ldm r4, {r2, r3}",
            "cmp r8, r5",
            "movlo r5, r8",
            "mov r0, r4",
            "bl fcn.000535f0",
            "mov r1, r7",
            "mov r2, r5",
            "ldr r0, [r6, 0x8c]",
            "bl sym.imp.memcpy",
            "ldr r3, [r6, 0x8c]",
            "str fp, [r6, 0x9c]",
            "add r3, r3, r5",
            "str r3, [r6, 0x90]",
            "ldm r4, {r2, r3}",
            "str r2, [r6, 0x80]",
            "str r3, [r6, 0x84]",
            "ldr r3, [r4, 0x58]",
            "add r7, r7, r5",
            "ldr r2, [r3, 0x98]",
            "add r0, r3, 0x20",
            "str r2, [r3, 0x94]",
            "str r3, [sp, 8]",
            "bl sym.imp.pthread_cond_broadcast",
            "ldr r3, [sp, 8]",
            "mov r0, r3",
            "bl sym.imp.pthread_mutex_unlock",
            "subs r8, r8, r5",
            "bne 0x54544",
            "cmp sl, 0",
            "ldm r4, {r5, r6}",
            "bne 0x545e8",
            "ldr r3, [r4, 0x8c]",
            "cmp r3, 0",
            "moveq r0, r5",
            "moveq r1, r6",
            "bne 0x54708",
            "ldr ip, [sp, 0xc]",
            "adds r2, r0, ip",
            "adc r3, r1, 0",
            "stm r4, {r2, r3}",
            "ldr r0, [sp, 0xc]",
            "ldr r2, [r4, 0x94]",
            "add r3, r0, r5",
            "lsl r3, r3, 0x14",
            "lsr r3, r3, 0x14",
            "ldr r1, [r4, 0x20]",
            "rsb r2, r3, r2",
            "add r2, r1, r2",
            "ldr r3, [r4, 0x9c]",
            "str r2, [r4, 0x2c]",
            "orr r3, r3, 4",
            "ldr r0, [r4, 0x88]",
            "ldr r2, [sp, 0xc]",
            "bl rsym.my_write",
            "cmp r0, 0",
            "mvnne r3, 0",
            "strne r3, [r4, 0x90]",
            "streq r0, [r4, 0x90]",
            "cmp sl, 0",
            "beq 0x546a8",
            "ldr r3, [r4, 0x24]",
            "ldr ip, [r4, 0x28]",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "rsb ip, r3, ip",
            "adds r2, r0, ip",
            "adc r3, r1, ip, asr 31",
            "str r2, [r4, 8]",
            "str r3, [r4, 0xc]",
            "ldr r2, [r4, 0x74]",
            "ldr r3, [r4, 0x20]",
            "add r2, r2, 1",
            "cmp sb, 0",
            "str r3, [r4, 0x24]",
            "str r2, [r4, 0x74]",
            "str r3, [r4, 0x28]",
            "bne 0x546d4",
            "ldr r0, [r4, 0x90]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp sb, 0",
            "moveq r0, sb",
            "beq 0x54680",
            "add r0, r4, 0x38",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 0",
            "b 0x54680",
            "ldr ip, [sp, 0xc]",
            "ldr r1, [r4, 0xc]",
            "adds r2, r5, ip",
            "adc r3, r6, 0",
            "cmp r1, r3",
            "blo 0x54654",
            "bne 0x5465c",
            "ldr r1, [r4, 8]",
            "cmp r1, r2",
            "bhs 0x5465c",
            "b 0x54654",
            "add r0, r4, 0x38",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r0, [r4, 0x90]",
            "b 0x54680",
            "bl rsym.real_open_cached_file",
            "cmp r0, 0",
            "strne r5, [r4, 0x90]",
            "movne r0, r5",
            "beq 0x54514",
            "b 0x54680",
            "add r0, r4, 0x38",
            "bl rsym.my_pthread_fastmutex_lock",
            "b 0x5451c",
            "ldr r0, [r4, 0x88]",
            "mov r2, r5",
            "mov r3, r6",
            "str sl, [sp]",
            "str sl, [sp, 4]",
            "bl rsym.my_seek",
            "cmn r0, 1",
            "beq 0x54738",
            "mov r3, 0",
            "str r3, [r4, 0x8c]",
            "ldm r4, {r0, r1}",
            "b 0x545d8",
            "cmn r1, 1",
            "bne 0x54728",
            "cmp sb, 0",
            "addne r0, r4, 0x38",
            "blne sym.imp.pthread_mutex_unlock",
            "mvn r0, 0",
            "str r0, [r4, 0x90]",
            "b 0x54680"
        ]
    },
    "rsym.real_open_cached_file": {
        "function_address": "0x0003d120",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xee4]!"
        ]
    },
    "fcn.00088084": {
        "function_address": "0x00088084",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x880a0",
            "b 0x880b0",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x8809c",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000ba970": {
        "function_address": "0x000ba970",
        "instructions": [
            "ldr ip, [0x000ba9ac]",
            "ldr r3, [0x000ba9b0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000ba9b4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000ba9b8]",
            "ldr r0, [0x000ba9bc]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007d430": {
        "function_address": "0x0007d430",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d474]",
            "ldr r3, [0x0007d478]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RMD7RMDImplEEEvPT_",
            "ldr r3, [0x0007d47c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::MultiplicativeIdentity___const": {
        "function_address": "0x000ada24",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r7, r0",
            "sub sp, sp, 0x24",
            "ldr r1, [r7, 0xc]!",
            "add r6, sp, 0x10",
            "mov r4, r0",
            "lsl r1, r1, 5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r2, r7",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sp",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "fcn.000b3a20": {
        "function_address": "0x000b3a20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r6, r4, 0x10",
            "mov r1, 8",
            "mov r2, 0x80",
            "bl rsym._ZN8TaoCrypt19HASH64withTransformC2Ejj",
            "add lr, r5, 0x10",
            "mov ip, r6",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r6, [0x000b3aa0]",
            "ldm lr!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3aa4]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r6, pc, r6",
            "ldr r7, [r6, r7]",
            "ldmib r5, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r4, {r1, r2, r3}",
            "str r7, [r4]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r1, r5, 0x50",
            "add r0, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_free": {
        "function_address": "0x000851f8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3SSLEEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3SSLEEEvPT_": {
        "function_address": "0x0003dec4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5cc]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::Init__": {
        "function_address": "0x000baf14",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "add r0, r0, 0x10",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL_SESSION::operator_yaSSL::SSL_SESSION_const_": {
        "function_address": "0x00094e78",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r7, r1",
            "mov ip, r4",
            "mov r5, r1",
            "ldm r7!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "add r6, r4, 0x20",
            "ldm r7, {r0, r1, r2, r3}",
            "add lr, r5, 0x20",
            "stm ip, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "mov ip, r6",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r3, [r5, 0x58]",
            "ldr r0, [r4, 0x60]",
            "ldr r2, [r5, 0x54]",
            "str r3, [r4, 0x58]",
            "ldrh r3, [r5, 0x50]",
            "cmp r0, 0",
            "str r2, [r4, 0x54]",
            "strh r3, [r4, 0x50]",
            "beq 0x94ef0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_",
            "mov r3, 0",
            "str r3, [r4, 0x60]",
            "mov r0, r4",
            "ldr r1, [r5, 0x60]",
            "bl rsym._ZN5yaSSL11SSL_SESSION8CopyX509EPNS_4X509E",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSION8CopyX509EPNS_4X509E": {
        "function_address": "0x0003f2c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x874]!"
        ]
    },
    "sym.mysql_close": {
        "function_address": "0x00075b0c",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r5, [0x00075c4c]",
            "subs r4, r0, 0",
            "sub sp, sp, 0x14",
            "add r5, pc, r5",
            "beq 0x75c14",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0x75b78",
            "bl rsym.free_old_query",
            "mov r3, 0",
            "mov r0, 1",
            "str r3, [r4, 0x380]",
            "strb r3, [r4, 0x385]",
            "ldr ip, [r4, 0x3b0]",
            "mov r1, r0",
            "str r0, [sp, 8]",
            "mov r2, r3",
            "str r3, [sp]",
            "str r3, [sp, 4]",
            "str r3, [sp, 0xc]",
            "mov r0, r4",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym.end_server",
            "mov r0, r4",
            "bl fcn.00074a14",
            "ldr r0, [r4, 0x284]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x274]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x278]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x28c]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x3bc]",
            "bl rsym.my_no_flags_free",
            "ldr r1, [0x00075c50]",
            "mov r3, 0",
            "str r3, [r4, 0x284]",
            "str r3, [r4, 0x3bc]",
            "str r3, [r4, 0x28c]",
            "str r3, [r4, 0x278]",
            "str r3, [r4, 0x274]",
            "add r1, r5, r1",
            "add r0, r4, 0x3ac",
            "bl rsym.mysql_detach_stmt_list",
            "ldrb r3, [r4, 0x39b]",
            "cmp r3, 0",
            "bne 0x75c20",
            "ldr r0, [r4, 0x39c]",
            "cmp r0, r4",
            "blne rsym.mysql_close",
            "ldr r3, [r4, 0x3b4]",
            "cmp r3, 0",
            "ldrne r3, [r4, 0x3b0]",
            "movne r0, r4",
            "ldrne ip, [r3, 0x2c]",
            "movne lr, pc",
            "bxne ip",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr",
            "ldr r0, [r4, 0x3a0]",
            "cmp r4, r0",
            "beq 0x75c40",
            "ldr r5, [r0, 0x3a0]",
            "bl rsym.mysql_close",
            "cmp r4, r5",
            "mov r0, r5",
            "bne 0x75c2c",
            "mov r3, 0",
            "strb r3, [r4, 0x39b]",
            "b 0x75bdc"
        ]
    },
    "rsym.mysql_detach_stmt_list": {
        "function_address": "0x0003d978",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x954]!"
        ]
    },
    "rsym.mysql_close": {
        "function_address": "0x0003de58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x614]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Divide_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad9d4",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer9DividedByERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::SHA224.operator_TaoCrypt::SHA224_const_": {
        "function_address": "0x000b3b38",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt6SHA224C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt6SHA2244SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA224C1ERKS0_": {
        "function_address": "0x000405dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbbc]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA2244SwapERS0_": {
        "function_address": "0x0003cb50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2c4]!"
        ]
    },
    "sym.my_stat": {
        "function_address": "0x0005a0a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "rsbs r5, r1, 1",
            "movlo r5, 0",
            "cmp r5, 0",
            "mov r4, r1",
            "mov r6, r0",
            "mov r7, r2",
            "beq 0x5a0dc",
            "mov r0, 0x68",
            "mov r1, r2",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "beq 0x5a120",
            "mov r0, 3",
            "mov r1, r6",
            "mov r2, r4",
            "bl sym.imp.__xstat64",
            "cmp r0, 0",
            "bne 0x5a100",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym._my_thread_var",
            "mov r8, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "cmp r5, 0",
            "str r3, [r8]",
            "movne r0, r4",
            "blne rsym.my_no_flags_free",
            "ands r4, r7, 0x18",
            "beq 0x5a0f4",
            "bl rsym._my_thread_var",
            "mov r2, r6",
            "ldr r3, [r0]",
            "mov r1, 0x24",
            "mov r0, 0xd",
            "bl rsym.my_error",
            "mov r4, 0",
            "b 0x5a0f4"
        ]
    },
    "sym.imp.__xstat64": {
        "function_address": "0x0003f3e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7b4]!"
        ]
    },
    "fcn.000a1170": {
        "function_address": "0x000a1170",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0], 4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x14",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::Swap_TaoCrypt::DSA_PublicKey_": {
        "function_address": "0x000a13e8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "add r0, r5, 0x10",
            "add r1, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "add r0, r5, 0x20",
            "add r1, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "add r0, r5, 0x30",
            "add r1, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000908c4": {
        "function_address": "0x000908c4",
        "instructions": [
            "ldr ip, [0x00090900]",
            "ldr r3, [0x00090904]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090908]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009090c]",
            "ldr r0, [0x00090910]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CertManager::AddPeerCert_yaSSL::x509_": {
        "function_address": "0x0007c1bc",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x1c",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EE9push_backES3_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::GetLength_TaoCrypt::Source_": {
        "function_address": "0x0009abac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0, 0xc]",
            "ldr r7, [r0]",
            "ldr r2, [0x0009ac60]",
            "cmp r3, r7",
            "add r4, r3, 1",
            "str r4, [r0, 0xc]",
            "mov ip, r0",
            "add r2, pc, r2",
            "bhs 0x9ac3c",
            "ldr r6, [r0, 4]",
            "ldrb r0, [r6, r3]",
            "tst r0, 0x80",
            "bne 0x9abec",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ands r0, r0, 0x7f",
            "beq 0x9abe4",
            "cmp r4, r7",
            "add r3, r4, 1",
            "sublo r1, r0, 1",
            "str r3, [ip, 0xc]",
            "movlo r0, 0",
            "blo 0x9ac18",
            "b 0x9ac3c",
            "mov r4, r3",
            "mov r3, r5",
            "ldrb r4, [r6, r4]",
            "cmp r1, 0",
            "orr r0, r4, r0, lsl 8",
            "beq 0x9abe4",
            "add r5, r3, 1",
            "cmp r3, r7",
            "str r5, [ip, 0xc]",
            "sub r1, r1, 1",
            "blo 0x9ac10",
            "ldr r3, [0x0009ac64]",
            "ldr r1, [0x0009ac68]",
            "ldr r0, [0x0009ac6c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::output_buffer::output_buffer_unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007be8c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "str r0, [r4]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "stmib r4, {r0, r5}",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.close_cached_file": {
        "function_address": "0x00055dd0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x18]",
            "mov r4, r0",
            "cmp r3, 0",
            "beq 0x55e14",
            "ldr r5, [r0, 0x88]",
            "mvn r3, 0",
            "str r3, [r0, 0x88]",
            "bl rsym.end_io_cache",
            "cmp r5, 0",
            "movge r0, r5",
            "movge r1, 0",
            "blge rsym.my_close",
            "ldr r0, [r4, 0x80]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x84]",
            "bl rsym.my_no_flags_free",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.end_io_cache": {
        "function_address": "0x0003f640",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x624]!"
        ]
    },
    "sym.TaoCrypt::PublicKey::AddToEnd_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0009a3b4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r7, r1",
            "mov r5, r2",
            "ldr r0, [r0, 4]",
            "mov r1, 0",
            "add r0, r2, r0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldm r4, {r1, r2}",
            "mov r6, r0",
            "bl sym.imp.memcpy",
            "ldr r0, [r4, 4]",
            "mov r1, r7",
            "mov r2, r5",
            "mov r7, 0",
            "add r0, r6, r0",
            "bl sym.imp.memcpy",
            "ldr r0, [r4]",
            "str r7, [r4]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [r4, 4]",
            "str r6, [r4]",
            "add r5, r3, r5",
            "str r5, [r4, 4]",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_TaoCrypt::Integer::Sign__unsigned_int__unsigned_int_": {
        "function_address": "0x000a89e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r6, [0x000a8ab0]",
            "mov r4, r0",
            "mov r0, 2",
            "str r0, [r4]",
            "add r6, pc, r6",
            "sub sp, sp, 8",
            "mov r8, r1",
            "mov sb, r2",
            "mov sl, r3",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r7, 0",
            "mov r0, r3",
            "mov r2, r5",
            "mov r3, r5",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "lsl r2, r5, 2",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r8, [r4, 0xc]",
            "cmp r3, r7",
            "beq 0xa8a8c",
            "ldr r3, [r4, 4]",
            "str sl, [r3]",
            "ldr r2, [r4]",
            "cmp r2, 1",
            "bls 0xa8a8c",
            "str sb, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [0x000a8ab4]",
            "ldr r1, [0x000a8ab8]",
            "ldr r0, [0x000a8abc]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::SetLength_unsigned_int__unsigned_char_": {
        "function_address": "0x0009a574",
        "instructions": [
            "cmp r0, 0x7f",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "strbls r0, [r1]",
            "mov r5, r1",
            "movls r0, 1",
            "bhi 0x9a598",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN8TaoCrypt13BytePrecisionEj",
            "mvn r0, r0, lsl 25",
            "mvn r0, r0, lsr 25",
            "strb r0, [r5]",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13BytePrecisionEj",
            "cmp r0, 0",
            "moveq r0, 1",
            "beq 0x9a590",
            "sub r3, r0, 1",
            "add r1, r0, 1",
            "lsl r3, r3, 3",
            "mov r0, 1",
            "lsr r2, r4, r3",
            "strb r2, [r5, r0]",
            "add r0, r0, 1",
            "cmp r0, r1",
            "sub r3, r3, 8",
            "bne 0x9a5cc",
            "b 0x9a590"
        ]
    },
    "fcn.0007f9ac": {
        "function_address": "0x0007f9ac",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellman6DHImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellman6DHImplEEEvPT_": {
        "function_address": "0x0003e1e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3b4]!"
        ]
    },
    "sym.yaSSL::input_buffer::read_unsigned_char__unsigned_int_": {
        "function_address": "0x0007bd2c",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "sub r3, r3, 1",
            "mov r4, r0",
            "mov r5, r2",
            "mov r6, r1",
            "add r1, r3, r2",
            "ldr r2, [r0]",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "ldr r3, [r4, 4]",
            "ldr r1, [r4, 8]",
            "mov r2, r5",
            "add r1, r1, r3",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 4]",
            "add r5, r3, r5",
            "str r5, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000a0a8c": {
        "function_address": "0x000a0a8c",
        "instructions": [
            "ldr ip, [0x000a0ac8]",
            "ldr r3, [0x000a0acc]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000a0ad0]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000a0ad4]",
            "ldr r0, [0x000a0ad8]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_write": {
        "function_address": "0x00086334",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL8sendDataERNS_3SSLEPKvi",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8sendDataERNS_3SSLEPKvi": {
        "function_address": "0x0003e0f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x454]!"
        ]
    },
    "sym.TaoCrypt::Integer::Modulo_unsigned_int__const": {
        "function_address": "0x000a60dc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr sl, [0x000a629c]",
            "subs r6, r1, 0",
            "add sl, pc, sl",
            "sub sp, sp, 8",
            "mov r8, r0",
            "beq 0xa6274",
            "sub r3, r6, 1",
            "tst r3, r6",
            "bne 0xa6138",
            "ldr r2, [r0]",
            "cmp r2, 0",
            "beq 0xa6250",
            "ldr r2, [r0, 4]",
            "ldr r2, [r2]",
            "and r2, r3, r2",
            "ldr r3, [r8, 0xc]",
            "cmp r3, 1",
            "beq 0xa61c8",
            "mov r0, r2",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r6, 5",
            "bls 0xa61d4",
            "cmp r0, 0",
            "moveq r2, r0",
            "beq 0xa611c",
            "ldr sb, [r8]",
            "sub r4, r0, 1",
            "cmp sb, r4",
            "bls 0xa61a4",
            "sub r5, r0, 0xc0000001",
            "ldr r7, [r8, 4]",
            "lsl r5, r5, 2",
            "mov r2, 0",
            "ldr r3, [r7, r5]",
            "str r2, [sp, 4]",
            "str r3, [sp]",
            "ldm sp, {r0, r1}",
            "mov r2, r6",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "cmp r4, 0",
            "beq 0xa611c",
            "sub r4, r4, 1",
            "cmp sb, r4",
            "sub r5, r5, 4",
            "bhi 0xa6170",
            "ldr r3, [0x000a62a0]",
            "ldr r1, [0x000a62a4]",
            "ldr r0, [0x000a62a8]",
            "add r3, sl, r3",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail",
            "cmp r2, 0",
            "rsbne r2, r2, r6",
            "b 0xa6128",
            "cmp r0, 0",
            "moveq r3, r0",
            "moveq r4, r3",
            "moveq r5, r0",
            "beq 0xa6238",
            "ldr lr, [r8]",
            "sub r1, r0, 1",
            "cmp r1, lr",
            "bhs 0xa61a4",
            "mov r3, 0",
            "sub r2, r0, 0xc0000001",
            "mov r4, r3",
            "mov r5, r3",
            "ldr ip, [r8, 4]",
            "lsl r2, r2, 2",
            "b 0xa6224",
            "sub r1, r1, 1",
            "cmp r1, lr",
            "sub r2, r2, 4",
            "bhs 0xa61a4",
            "ldr r3, [ip, r2]",
            "adds r4, r4, r3",
            "adc r5, r5, 0",
            "cmp r1, 0",
            "bne 0xa6214",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r6",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "b 0xa611c",
            "ldr r3, [0x000a62a0]",
            "ldr r1, [0x000a62a4]",
            "ldr r0, [0x000a62a8]",
            "add r3, sl, r3",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x7c",
            "add r2, r2, 0x94",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a62a0]",
            "ldr r1, [0x000a62ac]",
            "add r3, sl, r3",
            "ldr r0, [0x000a62b0]",
            "add r3, r3, 0x4a0",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a62b4]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_b_vprintf": {
        "function_address": "0x00054fcc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add fp, sp, 0x20",
            "sub sp, sp, 0x2c",
            "ldrb r4, [r1]",
            "mov r7, r1",
            "ldr r1, [0x0005557c]",
            "cmp r4, 0",
            "add r1, pc, r1",
            "str r1, [fp, -0x40]",
            "mov r5, r0",
            "mov sb, r2",
            "moveq r8, r4",
            "beq 0x552dc",
            "ldr r3, [0x00055580]",
            "sub ip, fp, 0x38",
            "mov sl, r7",
            "mov r8, 0",
            "str r3, [fp, -0x44]",
            "str ip, [fp, -0x48]",
            "cmp r4, 0",
            "cmpne r4, 0x25",
            "moveq r4, 0",
            "movne r4, 1",
            "moveq r3, r7",
            "beq 0x5504c",
            "mov r3, r7",
            "ldrb r2, [r3, 1]!",
            "cmp r2, 0x25",
            "cmpne r2, 0",
            "bne 0x55034",
            "rsb r4, r7, r3",
            "mov sl, r3",
            "ldr r0, [r5, 0x28]",
            "ldr r1, [r5, 0x2c]",
            "add r2, r0, r4",
            "cmp r1, r2",
            "blo 0x552b0",
            "mov r2, r4",
            "mov r1, r7",
            "str r3, [fp, -0x4c]",
            "bl sym.imp.memcpy",
            "ldr r2, [r5, 0x28]",
            "add r2, r2, r4",
            "str r2, [r5, 0x28]",
            "ldr r3, [fp, -0x4c]",
            "ldrb r2, [sl]",
            "add r8, r8, r4",
            "cmp r2, 0",
            "beq 0x552dc",
            "add r1, sl, 2",
            "mov r7, 0",
            "mov lr, 1",
            "ldrb r2, [r1, -1]",
            "sub r4, r1, 1",
            "sub r0, r2, 0x20",
            "cmp r0, 0x10",
            "addls pc, pc, r0, lsl 2",
            "b 0x55110",
            "b 0x550fc",
            "b 0x55110",
            "b 0x55110",
            "b 0x550fc",
            "b 0x55110",
            "b 0x55110",
            "b 0x55110",
            "b 0x55110",
            "b 0x55110",
            "b 0x55110",
            "b 0x55110",
            "b 0x550fc",
            "b 0x55110",
            "b 0x550f8",
            "b 0x55110",
            "b 0x55110",
            "b 0x55104",
            "mvn lr, 0",
            "add r1, r1, 1",
            "b 0x5509c",
            "mov r7, 1",
            "add r1, r1, 1",
            "b 0x5509c",
            "cmp r2, 0x2a",
            "beq 0x5539c",
            "ldr ip, [fp, -0x40]",
            "ldr r0, [fp, -0x44]",
            "ldr r1, [ip, r0]",
            "mov r0, r2",
            "ldr ip, [r1, 0x20]",
            "add r1, ip, r2",
            "ldrb r1, [r1, 1]",
            "ands r1, r1, 4",
            "moveq ip, r1",
            "moveq r6, ip",
            "beq 0x55170",
            "mov r1, 0",
            "ldrb r2, [r4, 1]!",
            "sub r0, r0, 0x30",
            "add r6, ip, r2",
            "ldrb r6, [r6, 1]",
            "add r1, r1, r1, lsl 2",
            "ands r6, r6, 4",
            "add r1, r0, r1, lsl 1",
            "mov r0, r2",
            "bne 0x55148",
            "mul ip, lr, r1",
            "cmp r2, 0x2e",
            "beq 0x55344",
            "cmp r2, 0x73",
            "beq 0x552ec",
            "cmp r2, 0x62",
            "beq 0x553b0",
            "cmp r2, 0x64",
            "movne r1, 0",
            "moveq r1, 1",
            "cmp r2, 0x64",
            "cmpne r2, 0x75",
            "bne 0x553d4",
            "cmp r1, 0",
            "ldr r0, [sb]",
            "add sb, sb, 4",
            "bne 0x55434",
            "ldr r1, [fp, -0x48]",
            "mov r2, 0xa",
            "str ip, [fp, -0x4c]",
            "bl rsym.int10_to_str",
            "ldr lr, [fp, -0x48]",
            "ldr ip, [fp, -0x4c]",
            "rsb r6, lr, r0",
            "cmp r6, ip",
            "blo 0x5521c",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, r6",
            "cmp r2, r3",
            "add r8, r8, r6",
            "blo 0x55288",
            "ldr r1, [fp, -0x48]",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [r5, 0x28]",
            "add r7, r4, 1",
            "add r6, r3, r6",
            "str r6, [r5, 0x28]",
            "ldrb r4, [r7]",
            "cmp r4, 0",
            "beq 0x552dc",
            "mov sl, r7",
            "b 0x55018",
            "rsb sl, r6, ip",
            "add r3, sl, 0xe",
            "bic r3, r3, 7",
            "sub sp, sp, r3",
            "cmp r7, 0",
            "mov r7, sp",
            "bne 0x5547c",
            "mov r2, sl",
            "mov r0, sp",
            "mov r1, 0x20",
            "bl sym.imp.memset",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, sl",
            "cmp r2, r3",
            "blo 0x554a0",
            "mov r2, sl",
            "mov r1, r7",
            "bl sym.imp.memcpy",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r0, r0, sl",
            "add r3, r0, r6",
            "cmp r2, r3",
            "str r0, [r5, 0x28]",
            "add r8, r8, r6",
            "bhs 0x551ec",
            "mov r2, r6",
            "mov r0, r5",
            "ldr r1, [fp, -0x48]",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x552d8",
            "add r7, r4, 1",
            "b 0x55208",
            "str r3, [fp, -0x4c]",
            "mov r1, r7",
            "mov r0, r5",
            "mov r2, r4",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ldr r3, [fp, -0x4c]",
            "beq 0x55080",
            "mvn r8, 0",
            "mov r0, r8",
            "sub sp, fp, 0x20",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r7, [sb]",
            "add sb, sb, 4",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "mov r6, r0",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, r6",
            "cmp r2, r3",
            "add r8, r8, r6",
            "movhs r1, r7",
            "movlo r1, r7",
            "bhs 0x551f0",
            "mov r2, r6",
            "mov r0, r5",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x552d8",
            "add r7, r4, 1",
            "b 0x55208",
            "ldrb r2, [r4, 1]!",
            "cmp r2, 0x2a",
            "beq 0x55424",
            "ldr r1, [fp, -0x40]",
            "ldr lr, [fp, -0x44]",
            "ldr r0, [r1, lr]",
            "mov r1, r2",
            "ldr r0, [r0, 0x20]",
            "add lr, r0, r2",
            "ldrb lr, [lr, 1]",
            "tst lr, 4",
            "beq 0x55178",
            "sub lr, r1, 0x30",
            "ldrb r1, [r4, 1]!",
            "add r6, r6, r6, lsl 2",
            "add r2, r0, r1",
            "ldrb r2, [r2, 1]",
            "add r6, lr, r6, lsl 1",
            "tst r2, 4",
            "mov r2, r1",
            "bne 0x55374",
            "b 0x55178",
            "ldr r6, [sb]",
            "ldrb r2, [r4, 1]!",
            "add sb, sb, 4",
            "mov ip, 0",
            "b 0x55170",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, r6",
            "cmp r2, r3",
            "ldr r1, [sb]",
            "add r8, r8, r6",
            "add sb, sb, 4",
            "blo 0x55320",
            "b 0x551f0",
            "cmp r2, 0x6c",
            "beq 0x554bc",
            "ldrb r2, [r4, 1]",
            "add r7, r4, 1",
            "cmp r2, 0x75",
            "beq 0x55528",
            "ldr r0, [r5, 0x28]",
            "rsb r4, r3, r4",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, r4",
            "cmp r2, r3",
            "blo 0x55454",
            "mov r1, sl",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "ldr r3, [r5, 0x28]",
            "add r8, r8, r4",
            "add r3, r3, r4",
            "str r3, [r5, 0x28]",
            "b 0x55208",
            "ldr r6, [sb]",
            "ldrb r2, [r4, 1]!",
            "add sb, sb, 4",
            "b 0x55178",
            "ldr r1, [fp, -0x48]",
            "mvn r2, 9",
            "str ip, [fp, -0x4c]",
            "bl rsym.int10_to_str",
            "ldr r3, [fp, -0x48]",
            "ldr ip, [fp, -0x4c]",
            "rsb r6, r3, r0",
            "b 0x551cc",
            "mov r1, sl",
            "mov r0, r5",
            "mov r2, r4",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x552d8",
            "add r8, r8, r4",
            "b 0x55208",
            "mov r2, sl",
            "mov r0, sp",
            "mov r1, 0x30",
            "bl sym.imp.memset",
            "ldr r0, [r5, 0x28]",
            "ldr r2, [r5, 0x2c]",
            "add r3, r0, sl",
            "cmp r2, r3",
            "bhs 0x5525c",
            "mov r1, r7",
            "mov r2, sl",
            "mov r0, r5",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "b 0x551d4",
            "ldrb r2, [r4, 1]",
            "add r7, r4, 1",
            "cmp r2, 0x64",
            "bne 0x553e4",
            "ldr r0, [sb]",
            "ldr r1, [fp, -0x48]",
            "mvn r2, 9",
            "bl rsym.int10_to_str",
            "ldr r1, [fp, -0x48]",
            "ldr r2, [r5, 0x2c]",
            "rsb r4, r1, r0",
            "ldr r0, [r5, 0x28]",
            "add sb, sb, 4",
            "add r3, r0, r4",
            "cmp r2, r3",
            "add r8, r8, r4",
            "bhs 0x5555c",
            "mov r2, r4",
            "mov r0, r5",
            "ldr r1, [fp, -0x48]",
            "ldr ip, [r5, 0x60]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x552d8",
            "add r7, r7, 1",
            "b 0x55208",
            "ldr r0, [sb]",
            "mov r2, 0xa",
            "ldr r1, [fp, -0x48]",
            "bl rsym.int10_to_str",
            "ldr r3, [fp, -0x48]",
            "ldr r2, [r5, 0x2c]",
            "rsb r4, r3, r0",
            "ldr r0, [r5, 0x28]",
            "add sb, sb, 4",
            "add r3, r0, r4",
            "cmp r2, r3",
            "add r8, r8, r4",
            "blo 0x55500",
            "mov r2, r4",
            "ldr r1, [fp, -0x48]",
            "bl sym.imp.memcpy",
            "ldr r3, [r5, 0x28]",
            "add r7, r7, 1",
            "add r4, r3, r4",
            "str r4, [r5, 0x28]",
            "b 0x55208"
        ]
    },
    "sym.yaSSL::SSL::isTLSv1_1___const": {
        "function_address": "0x00091b9c",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r0, [r0, 0x12b]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AbstractRing::MultiplicativeGroupT::Accumulate_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x00099c90",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, lr}",
            "mov r0, r3",
            "ldr r3, [r3]",
            "mov r4, r1",
            "ldr ip, [r3, 0x40]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_set_character_set": {
        "function_address": "0x000748f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r4, [0x000749f8]",
            "ldr r7, [0x000749fc]",
            "ldr r2, [r0, 0x330]",
            "add r4, pc, r4",
            "ldr r3, [r4, r7]",
            "cmp r2, 0",
            "ldr r8, [r3]",
            "sub sp, sp, 0x208",
            "strne r2, [r3]",
            "mov r5, r0",
            "mov r0, r1",
            "mov r6, r1",
            "bl sym.imp.strlen",
            "cmp r0, 0x1f",
            "bhi 0x749ac",
            "mov r0, r6",
            "mov r1, 0x20",
            "mov r2, 0",
            "bl rsym.get_charset_by_csname",
            "subs sl, r0, 0",
            "beq 0x749ac",
            "ldr r3, [r4, r7]",
            "mov r0, r5",
            "str r8, [r3]",
            "bl rsym.mysql_get_server_version",
            "ldr r3, [0x00074a00]",
            "cmp r0, r3",
            "movls r0, 0",
            "bls 0x749ec",
            "ldr r3, [0x00074a04]",
            "add sb, sp, 8",
            "add r3, r4, r3",
            "mov r1, 1",
            "mov r2, 0x2a",
            "mov r0, sb",
            "str r6, [sp]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "mov r1, sb",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym.mysql_real_query",
            "cmp r0, 0",
            "streq sl, [r5, 0x290]",
            "b 0x749e0",
            "add sl, sp, 8",
            "mov r0, sl",
            "bl rsym.get_charsets_dir",
            "ldr r3, [0x00074a08]",
            "mov r0, r5",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x00074a0c]",
            "ldr r2, [r2]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x00074a10]",
            "ldr r3, [r3, 0x4c]",
            "stm sp, {r6, sl}",
            "bl fcn.00074004",
            "ldr r3, [r4, r7]",
            "str r8, [r3]",
            "ldr r0, [r5, 0x58]",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "rsym.get_charset_by_csname": {
        "function_address": "0x0003fc28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x234]!"
        ]
    },
    "rsym.mysql_get_server_version": {
        "function_address": "0x0003cd30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x184]!"
        ]
    },
    "rsym.get_charsets_dir": {
        "function_address": "0x0003db04",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x84c]!"
        ]
    },
    "sym.err_helper": {
        "function_address": "0x0008526c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "mov r1, r4",
            "bl rsym._ZN5yaSSL6Errors6LookupEb",
            "ldr r2, [0x0008529c]",
            "ldr r3, [0x000852a0]",
            "cmp r0, r2",
            "moveq r0, r3",
            "movne r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL9GetErrorsEv": {
        "function_address": "0x0003f31c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x83c]!"
        ]
    },
    "rsym._ZN5yaSSL6Errors6LookupEb": {
        "function_address": "0x0003cf1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x3c]!"
        ]
    },
    "sym.my_once_free": {
        "function_address": "0x0005071c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00050768]",
            "ldr r6, [0x0005076c]",
            "add r5, pc, r5",
            "ldr r3, [r5, r6]",
            "ldr r0, [r3]",
            "cmp r0, 0",
            "bne 0x50744",
            "b 0x50754",
            "mov r0, r4",
            "ldr r4, [r0]",
            "bl sym.imp.free",
            "cmp r4, 0",
            "bne 0x50740",
            "ldr r3, [r5, r6]",
            "mov r2, 0",
            "str r2, [r3]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::SSL_CTX.IncrementStats_yaSSL::StatsField_": {
        "function_address": "0x0009281c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "mov r4, r0",
            "add r5, sp, 4",
            "mov r6, r1",
            "mov r0, r5",
            "add r1, r4, 0xf4",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "cmp r6, 0xe",
            "addls pc, pc, r6, lsl 2",
            "b 0x92890",
            "b 0x928a4",
            "b 0x928b4",
            "b 0x928c4",
            "b 0x928d4",
            "b 0x928e4",
            "b 0x928f4",
            "b 0x92904",
            "b 0x92914",
            "b 0x92924",
            "b 0x92934",
            "b 0x92944",
            "b 0x92954",
            "b 0x92964",
            "b 0x92974",
            "b 0x92884",
            "ldr r3, [r4, 0xf0]",
            "add r3, r3, 1",
            "str r3, [r4, 0xf0]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r4, 0xb8]",
            "add r3, r3, 1",
            "str r3, [r4, 0xb8]",
            "b 0x92890",
            "ldr r3, [r4, 0xbc]",
            "add r3, r3, 1",
            "str r3, [r4, 0xbc]",
            "b 0x92890",
            "ldr r3, [r4, 0xc0]",
            "add r3, r3, 1",
            "str r3, [r4, 0xc0]",
            "b 0x92890",
            "ldr r3, [r4, 0xc4]",
            "add r3, r3, 1",
            "str r3, [r4, 0xc4]",
            "b 0x92890",
            "ldr r3, [r4, 0xc8]",
            "add r3, r3, 1",
            "str r3, [r4, 0xc8]",
            "b 0x92890",
            "ldr r3, [r4, 0xcc]",
            "add r3, r3, 1",
            "str r3, [r4, 0xcc]",
            "b 0x92890",
            "ldr r3, [r4, 0xd0]",
            "add r3, r3, 1",
            "str r3, [r4, 0xd0]",
            "b 0x92890",
            "ldr r3, [r4, 0xd4]",
            "add r3, r3, 1",
            "str r3, [r4, 0xd4]",
            "b 0x92890",
            "ldr r3, [r4, 0xd8]",
            "add r3, r3, 1",
            "str r3, [r4, 0xd8]",
            "b 0x92890",
            "ldr r3, [r4, 0xdc]",
            "add r3, r3, 1",
            "str r3, [r4, 0xdc]",
            "b 0x92890",
            "ldr r3, [r4, 0xe0]",
            "add r3, r3, 1",
            "str r3, [r4, 0xe0]",
            "b 0x92890",
            "ldr r3, [r4, 0xe4]",
            "add r3, r3, 1",
            "str r3, [r4, 0xe4]",
            "b 0x92890",
            "ldr r3, [r4, 0xe8]",
            "add r3, r3, 1",
            "str r3, [r4, 0xe8]",
            "b 0x92890",
            "ldr r3, [r4, 0xec]",
            "add r3, r3, 1",
            "str r3, [r4, 0xec]",
            "b 0x92890"
        ]
    },
    "fcn.0008778c": {
        "function_address": "0x0008778c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x877a8",
            "b 0x877b8",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x877a4",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_TaoCrypt::Signer__TaoCrypt::Signer_": {
        "function_address": "0x00089ee8",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN8TaoCrypt6SignerD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt6SignerD1Ev": {
        "function_address": "0x0003db64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x80c]!"
        ]
    },
    "fcn.000935e0": {
        "function_address": "0x000935e0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "str r5, [r0, 8]",
            "bl rsym._ZN5yaSSL18InitMessageFactoryERNS_7FactoryINS_7MessageEiPFPS1_vEEE",
            "add r0, r4, 0xc",
            "str r5, [r4, 0xc]",
            "str r5, [r4, 0x10]",
            "str r5, [r4, 0x14]",
            "bl rsym._ZN5yaSSL20InitHandShakeFactoryERNS_7FactoryINS_13HandShakeBaseEiPFPS1_vEEE",
            "add r0, r4, 0x18",
            "str r5, [r4, 0x18]",
            "str r5, [r4, 0x1c]",
            "str r5, [r4, 0x20]",
            "bl rsym._ZN5yaSSL20InitServerKeyFactoryERNS_7FactoryINS_13ServerKeyBaseEiPFPS1_vEEE",
            "add r0, r4, 0x24",
            "str r5, [r4, 0x2c]",
            "str r5, [r4, 0x24]",
            "str r5, [r4, 0x28]",
            "bl rsym._ZN5yaSSL20InitClientKeyFactoryERNS_7FactoryINS_13ClientKeyBaseEiPFPS1_vEEE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL18InitMessageFactoryERNS_7FactoryINS_7MessageEiPFPS1_vEEE": {
        "function_address": "0x0003e98c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe9c]!"
        ]
    },
    "rsym._ZN5yaSSL20InitHandShakeFactoryERNS_7FactoryINS_13HandShakeBaseEiPFPS1_vEEE": {
        "function_address": "0x0003ded0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5c4]!"
        ]
    },
    "rsym._ZN5yaSSL20InitServerKeyFactoryERNS_7FactoryINS_13ServerKeyBaseEiPFPS1_vEEE": {
        "function_address": "0x0003cbe0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x264]!"
        ]
    },
    "rsym._ZN5yaSSL20InitClientKeyFactoryERNS_7FactoryINS_13ClientKeyBaseEiPFPS1_vEEE": {
        "function_address": "0x0003e368",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2b4]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::HMAC_RMD::HMAC_RMDImpl__yaSSL::HMAC_RMD::HMAC_RMDImpl_": {
        "function_address": "0x00080d64",
        "instructions": [
            "ldr r3, [0x00080d94]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080d98]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0, 0x10]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_TaoCrypt::Signer_.erase_mySTL::list_TaoCrypt::Signer_::iterator_": {
        "function_address": "0x0008797c",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x879d4",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x879e8",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x879dc",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE8pop_backEv",
            "mov r0, 1",
            "b 0x879d4",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9pop_frontEv",
            "mov r0, 1",
            "b 0x879d4"
        ]
    },
    "rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE8pop_backEv": {
        "function_address": "0x000403f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd04]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9pop_frontEv": {
        "function_address": "0x0003d5dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbbc]!"
        ]
    },
    "fcn.000800d0": {
        "function_address": "0x000800d0",
        "instructions": [
            "ldr ip, [0x0008018c]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr lr, [0x00080190]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str lr, [r0]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, 0x90",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x80",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r7, 0",
            "str r8, [r4, 4]",
            "bne 0x80178",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3DSS7DSSImpl10SetPrivateEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3DSS7DSSImpl9SetPublicEPKhj",
            "b 0x8016c"
        ]
    },
    "rsym._ZN5yaSSL3DSS7DSSImpl10SetPrivateEPKhj": {
        "function_address": "0x0003f208",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8f4]!"
        ]
    },
    "rsym._ZN5yaSSL3DSS7DSSImpl9SetPublicEPKhj": {
        "function_address": "0x0003eddc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbbc]!"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::MontgomeryRepresentation_TaoCrypt::Integer_const_": {
        "function_address": "0x000a9b6c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x000a9cd4]",
            "ldr r2, [0x000a9cd8]",
            "add r5, pc, r5",
            "ldr r3, [0x000a9cdc]",
            "ldr r2, [r5, r2]",
            "ldr r3, [r5, r3]",
            "add r2, r2, 8",
            "mov r6, r0",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r2, [r6], 0xc",
            "str r3, [r0, 4]",
            "sub sp, sp, 8",
            "mov r7, r1",
            "str r0, [r4, 8]",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [r7]",
            "mov r1, 0",
            "add r0, r4, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r3, [0x000a9ce0]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "mov r1, 0",
            "add r3, r3, 8",
            "str r3, [r0], 0x3c",
            "ldr r2, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldr r0, [r4, 0xc]",
            "add r0, r0, r0, lsl 2",
            "cmn r0, 0xc0000001",
            "str r0, [r4, 0x4c]",
            "bhi 0xa9c84",
            "cmp r0, 0",
            "beq 0xa9c14",
            "mov r1, 0",
            "lsl r0, r0, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r7, [r4, 0x4c]",
            "mov r8, 0",
            "mov r1, r0",
            "str r0, [r4, 0x50]",
            "mov r3, r7",
            "mov r2, r7",
            "add r0, r4, 0x54",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r7, 2",
            "mov r1, r8",
            "str r0, [r4, 0x50]",
            "str r7, [r4, 0x4c]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "cmp r0, r8",
            "beq 0xa9cac",
            "ldr r0, [r4, 0x40]",
            "ldr r1, [r4, 0x50]",
            "ldr r2, [r4, 0x10]",
            "ldr r3, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt25RecursiveInverseModPower2EPjS0_PKjj",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a9ce4]",
            "ldr r1, [0x000a9ce8]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9cec]",
            "add r3, r3, 0xc80",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a9ce4]",
            "ldr r1, [0x000a9cf0]",
            "add r3, r5, r3",
            "ldr r0, [0x000a9cf4]",
            "add r3, r3, 0xd40",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a9cf8]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DH__yaSSL::DH_": {
        "function_address": "0x00089c64",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::read_file_yaSSL::SSL_CTX__char_const__int__yaSSL::CertType_": {
        "function_address": "0x000868b4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub ip, r2, 0xa",
            "ldr r4, [0x00086db0]",
            "cmp ip, 1",
            "add r4, pc, r4",
            "mov r5, r0",
            "sub sp, sp, 0x14c",
            "mvnhi r0, 4",
            "bls 0x868e4",
            "add sp, sp, 0x14c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r1, 0",
            "bne 0x868f4",
            "mvn r0, 3",
            "b 0x868d8",
            "ldrb r0, [r1]",
            "cmp r0, 0",
            "beq 0x868ec",
            "mov r0, r1",
            "ldr r1, [0x00086db4]",
            "str r2, [sp, 0x18]",
            "add r1, r4, r1",
            "str r3, [sp, 0x14]",
            "bl sym.imp.fopen64",
            "subs r6, r0, 0",
            "ldr r2, [sp, 0x18]",
            "ldr r3, [sp, 0x14]",
            "beq 0x868ec",
            "cmp r3, 2",
            "beq 0x86990",
            "cmp r3, 0",
            "addeq r8, r5, 4",
            "addne r8, r5, 8",
            "cmp r2, 0xa",
            "beq 0x86d4c",
            "add r7, sp, 0x2c",
            "mov sl, 0",
            "mov r1, r3",
            "mov r0, r6",
            "mov r2, r7",
            "str sl, [sp, 0x9c]",
            "strb sl, [sp, 0xa0]",
            "bl rsym._ZN5yaSSL8PemToDerEP8_IO_FILENS_8CertTypeEPNS_13EncryptedInfoE",
            "cmp r0, sl",
            "str r0, [r8]",
            "beq 0x869bc",
            "ldrb r3, [sp, 0xa0]",
            "cmp r3, 0",
            "bne 0x869cc",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "mov r0, 1",
            "b 0x868d8",
            "bl rsym._ZN5yaSSL7SSL_CTX5AddCAEPNS_4x509E",
            "mov r1, 0",
            "mov r2, r1",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8PemToDerEP8_IO_FILENS_8CertTypeEPNS_13EncryptedInfoE",
            "subs r1, r0, 0",
            "mov r0, r5",
            "bne 0x8698c",
            "mov r0, r6",
            "bl sym.imp.feof",
            "cmp r0, 0",
            "bne 0x8697c",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "mvn r0, 3",
            "b 0x868d8",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX13GetPasswordCbEv",
            "subs sb, r0, 0",
            "beq 0x869bc",
            "add r3, sp, 0xa4",
            "mov r0, r5",
            "str r3, [sp, 0x20]",
            "bl rsym._ZNK5yaSSL7SSL_CTX11GetUserDataEv",
            "mov r2, sl",
            "mov r3, r0",
            "mov r1, 0x50",
            "ldr r0, [sp, 0x20]",
            "mov lr, pc",
            "bx sb",
            "str r0, [sp, 0x24]",
            "ldr r0, [sp, 0x9c]",
            "cmp r0, 0",
            "str r0, [sp, 0x114]",
            "beq 0x86a20",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "add sl, r7, 0x50",
            "add sb, sp, 0x128",
            "mov r5, 0",
            "add ip, sb, 8",
            "mov r3, r0",
            "mov r1, sl",
            "ldr r2, [sp, 0x114]",
            "str ip, [sp, 0x1c]",
            "str r3, [sp, 0x118]",
            "bl sym.imp.memcpy",
            "mov r2, r5",
            "mov r3, r5",
            "mov r1, r5",
            "ldr r0, [sp, 0x1c]",
            "str r5, [sp, 0x128]",
            "str r5, [sp, 0x12c]",
            "str r5, [sp, 0x120]",
            "str r5, [sp, 0x124]",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "add fp, sp, 0x114",
            "str r0, [sp, 0x12c]",
            "mov r0, sb",
            "str r5, [sp, 0x128]",
            "str fp, [sp, 0x134]",
            "bl rsym._ZN8TaoCrypt10HexDecoder6DecodeEv",
            "ldr r3, [sp, 0x118]",
            "ldr r1, [sp, 0x114]",
            "mov r0, 0x20",
            "str r3, [sp, 0x14]",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "ldr r3, [sp, 0x14]",
            "mov r2, r0",
            "mov r1, r3",
            "mov r0, sl",
            "mov r3, 0x28",
            "bl sym.imp.__memcpy_chk",
            "ldr ip, [sp, 0x24]",
            "ldr r1, [0x00086db8]",
            "str ip, [sp]",
            "mov ip, 1",
            "mov r2, sl",
            "ldr r3, [sp, 0x20]",
            "add r1, r4, r1",
            "str ip, [sp, 4]",
            "add sl, sp, 0xf4",
            "add ip, sp, 0x138",
            "mov r0, r7",
            "str ip, [sp, 0xc]",
            "str sl, [sp, 8]",
            "bl rsym.yaEVP_BytesToKey",
            "ldr r1, [0x00086dbc]",
            "mov r0, r7",
            "add r1, r4, r1",
            "mov r2, 7",
            "bl sym.imp.strncmp",
            "subs r3, r0, 0",
            "beq 0x86d24",
            "ldr r1, [0x00086dc0]",
            "mov r0, r7",
            "add r1, r4, r1",
            "mov r2, 0xd",
            "bl sym.imp.strncmp",
            "subs r3, r0, 0",
            "beq 0x86cfc",
            "ldr r1, [0x00086dc4]",
            "mov r0, r7",
            "add r1, r4, r1",
            "mov r2, 0xd",
            "bl sym.imp.strncmp",
            "subs r3, r0, 0",
            "beq 0x86cd0",
            "ldr r1, [0x00086dc8]",
            "mov r0, r7",
            "add r1, r4, r1",
            "mov r2, 0xd",
            "bl sym.imp.strncmp",
            "subs r3, r0, 0",
            "beq 0x86ca4",
            "ldr r1, [0x00086dcc]",
            "mov r0, r7",
            "add r1, r4, r1",
            "mov r2, 0xd",
            "bl sym.imp.strncmp",
            "subs r3, r0, 0",
            "bne 0x86c6c",
            "mov r1, 0",
            "add r0, r0, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0x20",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "cmp r4, 0",
            "ldr r3, [sp, 0x14]",
            "beq 0x86ba8",
            "mov r0, r3",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "mov r1, sl",
            "add r2, r7, 0x50",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [r8]",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "mov r1, 0",
            "mov r7, r0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL4x509C1Ej",
            "ldr r3, [r4]",
            "mov r0, r5",
            "ldr sl, [r3, 4]",
            "bl rsym._ZN5yaSSL4x50910use_bufferEv",
            "mov r1, r0",
            "ldr r0, [r8]",
            "str r1, [sp, 0x18]",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov r7, r0",
            "ldr r0, [r8]",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "ldr r1, [sp, 0x18]",
            "mov r3, r0",
            "mov r2, r7",
            "mov r0, r4",
            "mov lr, pc",
            "bx sl",
            "ldr r0, [r8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "str r5, [r8]",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "add r0, sb, 8",
            "ldr r1, [sp, 0x12c]",
            "ldr r2, [sp, 0x128]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "add r0, fp, 8",
            "ldr r1, [sp, 0x118]",
            "ldr r2, [sp, 0x114]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "b 0x8697c",
            "mov r0, r6",
            "bl sym.imp.fclose",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "ldr r0, [sp, 0x1c]",
            "ldr r1, [sp, 0x12c]",
            "ldr r2, [sp, 0x128]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "add r0, fp, 8",
            "ldr r1, [sp, 0x118]",
            "ldr r2, [sp, 0x114]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIhE10deallocateEPvj",
            "mvn r0, 3",
            "b 0x868d8",
            "mov r1, 0",
            "add r0, r0, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0x18",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "cmp r4, 0",
            "ldr r3, [sp, 0x14]",
            "bne 0x86ba0",
            "b 0x86ba8",
            "mov r1, 0",
            "add r0, r0, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0x10",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "cmp r4, 0",
            "ldr r3, [sp, 0x14]",
            "bne 0x86ba0",
            "b 0x86ba8",
            "mov r1, 0",
            "add r0, r0, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "cmp r4, 0",
            "ldr r3, [sp, 0x14]",
            "bne 0x86ba0",
            "b 0x86ba8",
            "mov r1, 0",
            "add r0, r0, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3DESC1Ev",
            "cmp r4, 0",
            "ldr r3, [sp, 0x14]",
            "bne 0x86ba0",
            "b 0x86ba8",
            "mov r1, 0",
            "mov r2, 2",
            "mov r0, r6",
            "bl sym.imp.fseek",
            "mov r0, r6",
            "bl sym.imp.ftell",
            "mov r4, r0",
            "mov r0, r6",
            "bl sym.imp.rewind",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r4",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL4x509C1Ej",
            "str r5, [r8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4x50910use_bufferEv",
            "mov r1, r4",
            "mov r2, 1",
            "mov r3, r6",
            "bl sym.imp.fread",
            "cmp r0, 1",
            "beq 0x8697c",
            "b 0x869bc"
        ]
    },
    "rsym._ZN5yaSSL8PemToDerEP8_IO_FILENS_8CertTypeEPNS_13EncryptedInfoE": {
        "function_address": "0x0003eb18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd94]!"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX5AddCAEPNS_4x509E": {
        "function_address": "0x0003d768",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xab4]!"
        ]
    },
    "sym.imp.feof": {
        "function_address": "0x0003ea64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe0c]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX13GetPasswordCbEv": {
        "function_address": "0x0003e890",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf44]!"
        ]
    },
    "rsym._ZNK5yaSSL7SSL_CTX11GetUserDataEv": {
        "function_address": "0x0003cc1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x23c]!"
        ]
    },
    "rsym._ZN8TaoCrypt10HexDecoder6DecodeEv": {
        "function_address": "0x0003da2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8dc]!"
        ]
    },
    "rsym.yaEVP_BytesToKey": {
        "function_address": "0x0003fdf0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x104]!"
        ]
    },
    "rsym._ZN5yaSSL3AESC1Ej": {
        "function_address": "0x0003d864",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa0c]!"
        ]
    },
    "sym.imp.rewind": {
        "function_address": "0x0003d414",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcec]!"
        ]
    },
    "sym.my_fdopen": {
        "function_address": "0x0004c8fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x0004ca94]",
            "tst r2, 1",
            "add r4, pc, r4",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r7, r1",
            "mov sl, r3",
            "beq 0x4c9d8",
            "tst r2, 0x400",
            "movne r3, 0x61",
            "moveq r3, 0x77",
            "add r1, sp, 0x10",
            "strb r3, [r1, -8]!",
            "add r3, r1, 1",
            "mov r2, 0",
            "mov r0, r5",
            "strb r2, [r3]",
            "bl sym.imp.fdopen",
            "subs r6, r0, 0",
            "beq 0x4ca2c",
            "ldr r8, [0x0004ca98]",
            "ldr r0, [r4, r8]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r2, [0x0004ca9c]",
            "ldr r3, [0x0004caa0]",
            "ldr r1, [r4, r2]",
            "ldr r3, [r4, r3]",
            "ldr r1, [r1]",
            "ldr r2, [r3]",
            "cmp r5, r1",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bhs 0x4c9c0",
            "ldr r2, [0x0004caa4]",
            "lsl r3, r5, 3",
            "ldr sb, [r4, r2]",
            "ldr fp, [sb]",
            "add r2, fp, r3",
            "ldr r1, [r2, 4]",
            "cmp r1, 0",
            "beq 0x4ca70",
            "ldr r3, [0x0004caa8]",
            "ldr r3, [r4, r3]",
            "ldr r1, [r3]",
            "sub r1, r1, 1",
            "str r1, [r3]",
            "mov r3, 4",
            "str r3, [r2, 4]",
            "ldr r0, [r4, r8]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r6",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "tst r2, 2",
            "beq 0x4ca5c",
            "tst r2, 0x240",
            "movne r3, 0x77",
            "strbne r3, [sp, 8]",
            "bne 0x4ca04",
            "tst r2, 0x400",
            "movne r3, 0x61",
            "moveq r3, 0x72",
            "strbne r3, [sp, 8]",
            "strbeq r3, [sp, 8]",
            "add r1, sp, 8",
            "mov r3, 0x2b",
            "strb r3, [sp, 9]",
            "mov r2, 0",
            "add r3, r1, 2",
            "mov r0, r5",
            "strb r2, [r3]",
            "bl sym.imp.fdopen",
            "subs r6, r0, 0",
            "bne 0x4c950",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "tst sl, 0x18",
            "str r3, [r4]",
            "beq 0x4c9c8",
            "ldr r2, [r0]",
            "mov r1, 0x24",
            "mov r0, 0xf",
            "bl rsym.my_error",
            "b 0x4c9c8",
            "add r1, sp, 0x10",
            "mov r3, 0x72",
            "strb r3, [r1, -8]!",
            "add r3, r1, 1",
            "b 0x4c938",
            "mov r0, r7",
            "mov r1, sl",
            "str r3, [sp, 4]",
            "bl rsym.my_strdup",
            "str r0, [fp, r5, lsl 3]",
            "ldr r2, [sb]",
            "ldr r3, [sp, 4]",
            "add r2, r2, r3",
            "b 0x4c9b8"
        ]
    },
    "sym.imp.fdopen": {
        "function_address": "0x0003efc8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa74]!"
        ]
    },
    "fcn.00090a04": {
        "function_address": "0x00090a04",
        "instructions": [
            "ldr ip, [0x00090a40]",
            "ldr r3, [0x00090a44]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090a48]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090a4c]",
            "ldr r0, [0x00090a50]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DES::DESImpl__yaSSL::DES::DESImpl_": {
        "function_address": "0x00080d24",
        "instructions": [
            "ldr r3, [0x00080d5c]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "beq 0x80d4c",
            "ldr r2, [0x00080d60]",
            "ldr r2, [r3, r2]",
            "add r2, r2, 8",
            "str r2, [r0]",
            "str r2, [r0, 0xb8]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.cli_read_statistics": {
        "function_address": "0x00041dd8",
        "instructions": [
            "push {r4, lr}",
            "ldr r2, [r0, 0x10]",
            "ldr r3, [r0, 0x2d4]",
            "mov r1, 0",
            "strb r1, [r2, r3]",
            "ldr r2, [r0, 0x10]",
            "ldr r3, [0x00041e30]",
            "ldrb r1, [r2]",
            "mov r4, r0",
            "cmp r1, 0",
            "add r3, pc, r3",
            "beq 0x41e14",
            "mov r0, r2",
            "pop {r4, lr}",
            "bx lr",
            "ldr r2, [0x00041e34]",
            "ldr r1, [0x00041e38]",
            "ldr r3, [r3, r2]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "add r2, r4, 0x5f",
            "b 0x41e08"
        ]
    },
    "sym.my_snprintf_8bit": {
        "function_address": "0x0005f060",
        "instructions": [
            "str r3, [sp, -4]!",
            "str lr, [sp, -4]!",
            "sub sp, sp, 8",
            "add ip, sp, 0x10",
            "mov r0, r1",
            "mov r3, ip",
            "mov r1, r2",
            "ldr r2, [sp, 0xc]",
            "str ip, [sp, 4]",
            "bl rsym.my_vsnprintf",
            "add sp, sp, 8",
            "pop {lr}",
            "add sp, sp, 4",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_RMD::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007cdb0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6UpdateEPKhj": {
        "function_address": "0x0003ceec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x5c]!"
        ]
    },
    "sym.yaSSL::sendServerHello_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x000843f8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x6c",
            "mov r8, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "ldr r6, [0x000845e8]",
            "cmp r0, 0",
            "add r6, pc, r6",
            "beq 0x84448",
            "mov r0, r4",
            "mov r1, 2",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ServerStateE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r7, r0, 0",
            "beq 0x84464",
            "add sp, sp, 0x6c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ServerStateE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r7, r0, 0",
            "bne 0x8443c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [0x000845ec]",
            "ldrb r2, [r0, 0x12d]",
            "ldrh r1, [sl, r3]",
            "mov r0, sp",
            "add sl, sp, 0x60",
            "bl rsym._ZN5yaSSL11ServerHelloC1ENS_15ProtocolVersionEb",
            "add r0, sl, 4",
            "mov r1, 3",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x000845f0]",
            "mov r5, sp",
            "ldr r3, [r6, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x54]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r1, sp",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL16buildServerHelloERNS_3SSLERNS_11ServerHelloE",
            "mov r0, sp",
            "bl rsym._ZNK5yaSSL11ServerHello10get_randomEv",
            "mov r2, r7",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE",
            "mov r0, sp",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp]",
            "mov fp, r0",
            "mov r0, sp",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 0x54",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r3, fp, 4",
            "lsl r3, r3, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb lr, [r0, 0x12f]",
            "lsr r3, r3, 0x10",
            "add r1, r3, 5",
            "mov ip, 0x16",
            "mov r0, r6",
            "str ip, [sp, 0x60]",
            "strb r2, [sp, 0x64]",
            "strb lr, [sp, 0x65]",
            "strh r3, [sp, 0x66]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, sp",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl fcn.00081648",
            "cmp r8, 0",
            "beq 0x845d4",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "b 0x8443c",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r6, r8",
            "b 0x845c8"
        ]
    },
    "rsym._ZN5yaSSL3SSL11verifyStateENS_11ServerStateE": {
        "function_address": "0x0003d408",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcf4]!"
        ]
    },
    "rsym._ZN5yaSSL11ServerHelloC1ENS_15ProtocolVersionEb": {
        "function_address": "0x0003e59c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x13c]!"
        ]
    },
    "rsym._ZN5yaSSL16buildServerHelloERNS_3SSLERNS_11ServerHelloE": {
        "function_address": "0x0003f58c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x69c]!"
        ]
    },
    "rsym._ZNK5yaSSL11ServerHello10get_randomEv": {
        "function_address": "0x0004024c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe1c]!"
        ]
    },
    "sym.my_dirend": {
        "function_address": "0x0005a1d0",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x5a1f8",
            "add r0, r4, 8",
            "bl rsym.delete_dynamic",
            "add r0, r4, 0x20",
            "mov r1, 0",
            "bl rsym.free_root",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.find_type": {
        "function_address": "0x0004ad64",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "str r1, [sp, 8]",
            "ldr r3, [r1]",
            "ldr r1, [0x0004afa0]",
            "cmp r3, 0",
            "add r1, pc, r1",
            "mov r4, r0",
            "str r2, [sp, 0xc]",
            "beq 0x4ae74",
            "ldr r2, [sp, 8]",
            "ldr sb, [r2, 8]",
            "ldr r3, [sb]",
            "cmp r3, 0",
            "beq 0x4aef8",
            "ldr r2, [0x0004afa4]",
            "ldrb r8, [r0]",
            "ldr r2, [r1, r2]",
            "ldr r1, [sp, 0xc]",
            "mov r7, 0",
            "ldr r0, [r2, 0x28]",
            "and r2, r1, 1",
            "and sl, r1, 8",
            "str r2, [sp, 4]",
            "mov fp, r7",
            "cmp r8, 0",
            "beq 0x4aee8",
            "cmp sl, 0",
            "moveq ip, r8",
            "moveq r5, r8",
            "moveq r1, r4",
            "beq 0x4ae94",
            "mov ip, r8",
            "mov r5, r8",
            "mov r1, r4",
            "b 0x4ae1c",
            "ldrb r2, [r3]",
            "ldrb r6, [r0, r5]",
            "ldrb r5, [r0, r2]",
            "add r3, r3, 1",
            "cmp r6, r5",
            "bne 0x4ae28",
            "ldrb r5, [r1, 1]!",
            "cmp r5, 0",
            "beq 0x4aedc",
            "mov ip, r5",
            "cmp r5, 0x2c",
            "bne 0x4adf4",
            "ldrb r2, [r3]",
            "cmp r2, 0",
            "beq 0x4aeb4",
            "cmp ip, 0",
            "bne 0x4ae54",
            "cmp r2, 0",
            "beq 0x4ae4c",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bne 0x4ae54",
            "add fp, fp, 1",
            "str r7, [sp]",
            "add r7, r7, 1",
            "ldr r3, [sb, r7, lsl 2]",
            "cmp r3, 0",
            "bne 0x4adc8",
            "cmp fp, 0",
            "beq 0x4aef8",
            "cmp r8, 0",
            "bne 0x4af80",
            "mov r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldrb r5, [r1, 1]!",
            "cmp r5, 0",
            "beq 0x4aedc",
            "mov ip, r5",
            "ldrb r2, [r3]",
            "ldrb r6, [r0, r5]",
            "ldrb r5, [r0, r2]",
            "add r3, r3, 1",
            "cmp r6, r5",
            "beq 0x4ae84",
            "b 0x4ae28",
            "ldrb ip, [r1, 1]!",
            "cmp ip, 0x20",
            "beq 0x4aeb0",
            "cmp ip, 0",
            "beq 0x4aed4",
            "cmp sl, 0",
            "beq 0x4ae30",
            "cmp ip, 0x2c",
            "bne 0x4ae30",
            "add r0, r7, 1",
            "b 0x4ae78",
            "ldrb r2, [r3]",
            "mov ip, 0",
            "b 0x4ae28",
            "ldrb r2, [r3]",
            "mov ip, r8",
            "mov r1, r4",
            "b 0x4ae28",
            "ldr r1, [sp, 0xc]",
            "tst r1, 4",
            "beq 0x4ae74",
            "ldrb r3, [r4]",
            "cmp r3, 0x23",
            "bne 0x4ae74",
            "mov r0, r4",
            "bl rsym.strend",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0x23",
            "bne 0x4ae74",
            "add r0, r4, 1",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "subs r0, r0, 1",
            "str r0, [sp]",
            "bmi 0x4ae74",
            "ldr r2, [sp, 8]",
            "ldr r3, [r2]",
            "cmp r0, r3",
            "bhs 0x4ae74",
            "ldr r1, [sp, 0xc]",
            "tst r1, 2",
            "bne 0x4af74",
            "ldr r2, [sp, 8]",
            "mov r0, r4",
            "ldr r3, [r2, 8]",
            "ldr r2, [sp]",
            "ldr r1, [r3, r2, lsl 2]",
            "bl sym.imp.strcpy",
            "ldr r3, [sp]",
            "add r0, r3, 1",
            "b 0x4ae78",
            "cmp fp, 1",
            "mvnne r0, 0",
            "bne 0x4ae78",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "beq 0x4af50",
            "mvn r0, 0",
            "b 0x4ae78"
        ]
    },
    "method.yaSSL::Socket.set_lastError_int_": {
        "function_address": "0x00084d74",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "str r4, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_thread_dbug_id": {
        "function_address": "0x0004d4d8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._my_thread_var",
            "ldr r0, [r0, 0x64]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_CTX_load_verify_locations": {
        "function_address": "0x00086ea8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r1, 0",
            "ldr r4, [0x00086fe0]",
            "moveq r3, 1",
            "add r4, pc, r4",
            "sub sp, sp, 0x174",
            "mov r5, r2",
            "mov r6, r0",
            "moveq fp, r3",
            "beq 0x86eec",
            "mov r3, 2",
            "mov r2, 0xb",
            "bl rsym._ZN5yaSSL9read_fileEPNS_7SSL_CTXEPKciNS_8CertTypeE",
            "mov fp, r0",
            "cmp r0, 1",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r5, 0",
            "moveq r3, 0",
            "andne r3, r3, 1",
            "cmp r3, 0",
            "bne 0x86f10",
            "mov r0, fp",
            "add sp, sp, 0x174",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r5",
            "bl sym.imp.opendir",
            "subs r7, r0, 0",
            "mvneq fp, 5",
            "beq 0x86f00",
            "ldr sb, [0x00086fe4]",
            "mov r8, sp",
            "add sb, r4, sb",
            "add sl, sp, 0x108",
            "mov r0, r7",
            "bl sym.imp.readdir64",
            "subs r4, r0, 0",
            "mov r1, r5",
            "mov r2, 0x83",
            "mov r0, sp",
            "beq 0x86fd0",
            "bl sym.imp.strncpy",
            "mov r1, sb",
            "mov r2, 1",
            "ldr r3, [0x00086fe8]",
            "mov r0, sp",
            "bl sym.imp.__strncat_chk",
            "add r1, r4, 0x13",
            "ldr r3, [0x00086fe8]",
            "mov r2, 0x80",
            "mov r0, sp",
            "bl sym.imp.__strncat_chk",
            "mov r1, sp",
            "mov r2, sl",
            "mov r0, 3",
            "bl sym.imp.__xstat64",
            "cmp r0, 0",
            "blt 0x86fd8",
            "ldr r3, [sp, 0x118]",
            "and r3, r3, 0xf000",
            "cmp r3, 0x8000",
            "bne 0x86f34",
            "mov r0, r6",
            "mov r1, sp",
            "mov r2, 0xb",
            "mov r3, 2",
            "bl rsym._ZN5yaSSL9read_fileEPNS_7SSL_CTXEPKciNS_8CertTypeE",
            "cmp r0, 1",
            "mov fp, r0",
            "beq 0x86f34",
            "mov r0, r7",
            "bl sym.imp.closedir",
            "b 0x86f00",
            "mov fp, 1",
            "b 0x86fc4",
            "mvn fp, 6",
            "b 0x86f00"
        ]
    },
    "rsym._ZN5yaSSL9read_fileEPNS_7SSL_CTXEPKciNS_8CertTypeE": {
        "function_address": "0x0003f934",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x42c]!"
        ]
    },
    "sym.imp.opendir": {
        "function_address": "0x0003cfdc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfbc]!"
        ]
    },
    "sym.imp.readdir64": {
        "function_address": "0x00040120",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xee4]!"
        ]
    },
    "sym.imp.__strncat_chk": {
        "function_address": "0x0003de7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5fc]!"
        ]
    },
    "sym.imp.closedir": {
        "function_address": "0x0003f1e4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x90c]!"
        ]
    },
    "sym.mysql_stmt_init": {
        "function_address": "0x0004495c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r1, 0x30",
            "mov r6, r0",
            "mov r0, 0x2c0",
            "bl rsym.my_malloc",
            "ldr r5, [0x00044a10]",
            "subs r4, r0, 0",
            "add r5, pc, r5",
            "beq 0x449f4",
            "mov r1, 0x800",
            "mov r2, r1",
            "bl rsym.init_alloc_root",
            "mov r1, 0x1000",
            "mov r2, r1",
            "add r0, r4, 0x48",
            "bl rsym.init_alloc_root",
            "mov r3, 0xc",
            "str r3, [r4, 0x54]",
            "add r1, r4, 0x20",
            "ldr r0, [r6, 0x3ac]",
            "bl rsym.list_add",
            "ldr r3, [0x00044a14]",
            "ldr r1, [0x00044a18]",
            "ldr r2, [r5, r3]",
            "add r1, r5, r1",
            "mov r3, 1",
            "str r0, [r6, 0x3ac]",
            "str r6, [r4, 0x2c]",
            "str r1, [r4, 0x7c]",
            "str r3, [r4, 0x98]",
            "str r4, [r4, 0x28]",
            "str r3, [r4, 0xac]",
            "ldr r1, [r2]",
            "add r0, r4, 0x2b0",
            "bl sym.imp.strcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x00044a1c]",
            "mov r0, r6",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00044a20]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x449e8"
        ]
    },
    "rsym.list_add": {
        "function_address": "0x0003da80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8a4]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DES_EDE::DES_EDEImpl__yaSSL::DES_EDE::DES_EDEImpl_": {
        "function_address": "0x00080ce4",
        "instructions": [
            "ldr r3, [0x00080d1c]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "beq 0x80d0c",
            "ldr r2, [0x00080d20]",
            "ldr r2, [r3, r2]",
            "add r2, r2, 8",
            "str r2, [r0]",
            "str r2, [r0, 0x1b8]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.has_path": {
        "function_address": "0x00049c64",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0x2f",
            "bl sym.imp.strchr",
            "subs r0, r0, 0",
            "movne r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::BIGNUM__yaSSL::BIGNUM_": {
        "function_address": "0x00089f44",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL7IntegerD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_PublicKey::Initialize_TaoCrypt::Source_": {
        "function_address": "0x000b2d08",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x000b2d4c]",
            "ldr ip, [0x000b2d50]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "add ip, ip, 8",
            "str ip, [r2, -8]!",
            "mov ip, r0",
            "str r1, [sp, 4]",
            "mov r0, sp",
            "mov r1, ip",
            "bl rsym._ZN8TaoCrypt18RSA_Public_Decoder6DecodeERNS_13RSA_PublicKeyE",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt18RSA_Public_Decoder6DecodeERNS_13RSA_PublicKeyE": {
        "function_address": "0x00040204",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe4c]!"
        ]
    },
    "method.yaSSL::yassl_int_cpp_local1::SumBuffer_mySTL::for_each_mySTL::list_yaSSL::output_buffer_::iterator__yaSSL::yassl_int_cpp_local1.SumBuffer__mySTL::list_yaSSL::output_buffer_::iterator__mySTL::list_yaSSL::output_buffer_::iterator__yaSSL::yassl_int": {
        "function_address": "0x00095e28",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "moveq r6, r2",
            "beq 0x95e5c",
            "mov r6, r2",
            "mov r5, r0",
            "ldr r0, [r5, 8]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r5, [r5, 4]",
            "add r6, r6, r0",
            "cmp r5, r4",
            "bne 0x95e44",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientDiffieHellmanPublic::build_yaSSL::SSL_": {
        "function_address": "0x0008ed1c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r0",
            "sub sp, sp, 8",
            "mov r0, r1",
            "mov r7, r1",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto6use_dhEv",
            "add r4, sp, 4",
            "mov r1, r0",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13DiffieHellmanC1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman19get_agreedKeyLengthEv",
            "mov r5, r0",
            "mov r1, r5",
            "mov r0, r6",
            "mov r2, 1",
            "bl rsym._ZN5yaSSL25ClientDiffieHellmanPublic5allocEib",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_publicKeyEv",
            "mov r2, r5",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13DiffieHellman13makeAgreementEPKhj",
            "lsl r0, r5, 0x10",
            "ldr r1, [r6, 0xc]",
            "lsr r0, r0, 0x10",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r0, r4",
            "ldr r6, [r6, 0xc]",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_publicKeyEv",
            "add r6, r6, 2",
            "mov r1, r0",
            "mov r2, r5",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "beq 0x8edf0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "mov r2, r5",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13DiffieHellmanD1Ev",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "sub r2, r5, 1",
            "add r1, r0, 1",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "b 0x8eddc"
        ]
    },
    "rsym._ZN5yaSSL6Crypto6use_dhEv": {
        "function_address": "0x0003d2b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdd4]!"
        ]
    },
    "rsym._ZN5yaSSL13DiffieHellmanC1ERKS0_": {
        "function_address": "0x000408d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9c4]!"
        ]
    },
    "rsym._ZNK5yaSSL13DiffieHellman19get_agreedKeyLengthEv": {
        "function_address": "0x0003e758",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x14]!"
        ]
    },
    "rsym._ZN5yaSSL25ClientDiffieHellmanPublic5allocEib": {
        "function_address": "0x0003ce2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xdc]!"
        ]
    },
    "rsym._ZNK5yaSSL13DiffieHellman13get_publicKeyEv": {
        "function_address": "0x0003cf64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xc]!"
        ]
    },
    "rsym._ZN5yaSSL13DiffieHellman13makeAgreementEPKhj": {
        "function_address": "0x0003fed4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6c]!"
        ]
    },
    "rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv": {
        "function_address": "0x0003f9dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3bc]!"
        ]
    },
    "sym.yaSSL::SSL_CTX::SSL_CTX_yaSSL::SSL_METHOD_": {
        "function_address": "0x00095a28",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "stm r0, {r1, r5}",
            "str r5, [r0, 8]",
            "str r5, [r0, 0xc]",
            "str r5, [r0, 0x10]",
            "str r5, [r0, 0x14]",
            "strb r5, [r0, 0x18]",
            "str r5, [r0, 0x9c]",
            "add r0, r0, 0xa0",
            "bl rsym._ZN5yaSSL7IntegerC1Ev",
            "add r0, r4, 0xa4",
            "bl rsym._ZN5yaSSL7IntegerC1Ev",
            "strb r5, [r4, 0xa8]",
            "str r5, [r4, 0xac]",
            "str r5, [r4, 0xb0]",
            "strb r5, [r4, 0xb4]",
            "strb r5, [r4, 0xb5]",
            "str r5, [r4, 0xb8]",
            "str r5, [r4, 0xbc]",
            "str r5, [r4, 0xc0]",
            "str r5, [r4, 0xc4]",
            "str r5, [r4, 0xc8]",
            "str r5, [r4, 0xcc]",
            "str r5, [r4, 0xd0]",
            "str r5, [r4, 0xd4]",
            "str r5, [r4, 0xd8]",
            "str r5, [r4, 0xdc]",
            "str r5, [r4, 0xe0]",
            "str r5, [r4, 0xe4]",
            "str r5, [r4, 0xe8]",
            "str r5, [r4, 0xec]",
            "str r5, [r4, 0xf0]",
            "add r0, r4, 0xf4",
            "bl rsym._ZN5yaSSL5MutexC1Ev",
            "str r5, [r4, 0x10c]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0009a138": {
        "function_address": "0x0009a138",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0009a184]",
            "ldr r3, [0x0009a188]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x4c]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [0x0009a18c]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_readlink": {
        "function_address": "0x0004cf2c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r0, r1",
            "mov r6, r2",
            "mov r1, r4",
            "ldr r2, [0x0004cfbc]",
            "bl sym.imp.readlink",
            "subs r3, r0, 0",
            "movge r0, 0",
            "strbge r0, [r4, r3]",
            "blt 0x4cf64",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym._my_thread_var",
            "mov r7, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "cmp r2, 0x16",
            "str r2, [r7]",
            "bne 0x4cf94",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.strcpy",
            "mov r0, 1",
            "b 0x4cf5c",
            "tst r6, 0x10",
            "mvneq r0, 0",
            "beq 0x4cf5c",
            "ldr r3, [r0]",
            "mov r2, r5",
            "mov r0, 0x18",
            "mov r1, 0",
            "bl rsym.my_error",
            "mvn r0, 0",
            "b 0x4cf5c"
        ]
    },
    "sym.imp.readlink": {
        "function_address": "0x0003fef8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x54]!"
        ]
    },
    "sym.yaSSL::Socket::wait__": {
        "function_address": "0x00084e1c",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add r1, sp, 7",
            "mov r2, 1",
            "mov r3, 2",
            "bl rsym._ZN5yaSSL6Socket7receiveEPhji",
            "adds r0, r0, 1",
            "movne r0, 1",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL6Socket7receiveEPhji": {
        "function_address": "0x0003f76c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x55c]!"
        ]
    },
    "fcn.000b0a2c": {
        "function_address": "0x000b0a2c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x124",
            "mov r4, r0",
            "add r5, sp, 0x100",
            "bl rsym._ZN8TaoCrypt7OS_SeedC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, 0x20",
            "bl rsym._ZN8TaoCrypt7OS_Seed12GenerateSeedEPhj",
            "mov r1, r5",
            "add r0, r4, 8",
            "mov r2, 0x20",
            "bl rsym._ZN8TaoCrypt4ARC46SetKeyEPKhj",
            "mov r0, r4",
            "mov r1, sp",
            "mov r2, 0x100",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "mov r0, r4",
            "add sp, sp, 0x124",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7OS_SeedC1Ev": {
        "function_address": "0x0003d324",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd8c]!"
        ]
    },
    "rsym._ZN8TaoCrypt7OS_Seed12GenerateSeedEPhj": {
        "function_address": "0x0003cd0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x19c]!"
        ]
    },
    "rsym._ZN8TaoCrypt4ARC46SetKeyEPKhj": {
        "function_address": "0x0003cb8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x29c]!"
        ]
    },
    "sym.llstr": {
        "function_address": "0x0005c4e0",
        "instructions": [
            "push {r4, lr}",
            "mvn r3, 9",
            "mov r4, r2",
            "bl rsym.longlong10_to_str",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007fd50": {
        "function_address": "0x0007fd50",
        "instructions": [
            "ldr ip, [0x0007fe14]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr lr, [0x0007fe18]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str lr, [r0]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, 0xa0",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x80",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x90",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r7, 0",
            "str r8, [r4, 4]",
            "bne 0x7fe00",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3RSA7RSAImpl10SetPrivateEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3RSA7RSAImpl9SetPublicEPKhj",
            "b 0x7fdf4"
        ]
    },
    "rsym._ZN5yaSSL3RSA7RSAImpl10SetPrivateEPKhj": {
        "function_address": "0x0003f820",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4e4]!"
        ]
    },
    "rsym._ZN5yaSSL3RSA7RSAImpl9SetPublicEPKhj": {
        "function_address": "0x0003f778",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x554]!"
        ]
    },
    "sym.my_like_range_mb": {
        "function_address": "0x000609a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "mov r6, r0",
            "ldr r4, [sp, 0x60]",
            "ldr r0, [r0, 0x30]",
            "str r3, [sp, 0x10]",
            "ldr r3, [sp, 0x64]",
            "add fp, r1, r2",
            "mov r5, r1",
            "ldrb r2, [sp, 0x5c]",
            "ldrb r1, [sp, 0x58]",
            "cmp r0, 0",
            "add r3, r3, r4",
            "addne r0, r0, 0x1000",
            "str r3, [sp, 0xc]",
            "str r1, [sp, 0x14]",
            "str r2, [sp, 0x18]",
            "ldr r1, [r6, 0x58]",
            "ldr ip, [sp, 0x64]",
            "str r0, [sp, 0x1c]",
            "ldr r0, [sp, 0xc]",
            "cmp ip, r0",
            "cmpne r5, fp",
            "beq 0x60f54",
            "ldr r0, [sp, 0x60]",
            "bl fcn.000bed20",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "beq 0x60f54",
            "ldrb r3, [r5]",
            "ldr r1, [sp, 0x10]",
            "ldr r4, [sp, 0x68]",
            "cmp r3, r1",
            "ldr r8, [sp, 0x64]",
            "mov sb, r6",
            "beq 0x60bb0",
            "ldr r2, [sp, 0x14]",
            "cmp r3, r2",
            "beq 0x60de0",
            "ldr ip, [sp, 0x18]",
            "cmp r3, ip",
            "beq 0x60de0",
            "mov r6, r5",
            "ldr r3, [sb, 0x64]",
            "mov r0, sb",
            "mov r1, r6",
            "mov r2, fp",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 1",
            "bls 0x60bf4",
            "add r5, r6, r0",
            "cmp fp, r5",
            "blo 0x60e88",
            "ldr r1, [sp, 0xc]",
            "add sl, r8, r0",
            "cmp r1, sl",
            "blo 0x60ea0",
            "orr r3, r8, r4",
            "orr r3, r6, r3",
            "tst r3, 3",
            "add r1, r6, 4",
            "movne ip, 0",
            "moveq ip, 1",
            "add r2, r4, 4",
            "add r3, r8, 4",
            "cmp r0, 3",
            "movls ip, 0",
            "andhi ip, ip, 1",
            "cmp r6, r2",
            "cmpls r4, r1",
            "movls r7, 0",
            "movhi r7, 1",
            "cmp r6, r3",
            "cmpls r8, r1",
            "movls r1, 0",
            "movhi r1, 1",
            "and ip, ip, r7",
            "cmp r4, r3",
            "cmpls r8, r2",
            "and r1, ip, r1",
            "movls r3, 0",
            "movhi r3, 1",
            "sub ip, r0, 1",
            "ands r3, r1, r3",
            "str ip, [sp, 8]",
            "beq 0x60bc0",
            "lsr ip, r0, 2",
            "lsls r7, ip, 2",
            "moveq r7, r4",
            "beq 0x60b54",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [r6, r3]",
            "add r2, r2, 1",
            "cmp r2, ip",
            "str r1, [r4, r3]",
            "str r1, [r8, r3]",
            "add r3, r3, 4",
            "blo 0x60b18",
            "ldr r1, [sp, 8]",
            "cmp r0, r7",
            "rsb r1, r7, r1",
            "add r6, r6, r7",
            "add r8, r8, r7",
            "str r1, [sp, 8]",
            "add r7, r4, r7",
            "beq 0x60b78",
            "ldr r2, [sp, 8]",
            "mov r3, 0",
            "add r1, r2, 1",
            "ldrb r2, [r6, r3]",
            "strb r2, [r7, r3]",
            "strb r2, [r8, r3]",
            "add r3, r3, 1",
            "cmp r1, r3",
            "bne 0x60b60",
            "ldr r3, [sp, 0xc]",
            "add r4, r4, r0",
            "cmp sl, r3",
            "cmpne r5, fp",
            "beq 0x60c2c",
            "ldr r0, [sp, 4]",
            "subs r0, r0, 1",
            "str r0, [sp, 4]",
            "beq 0x60e70",
            "ldrb r3, [r5]",
            "ldr r1, [sp, 0x10]",
            "mov r8, sl",
            "cmp r3, r1",
            "bne 0x60a30",
            "add r6, r5, 1",
            "cmp r6, fp",
            "bne 0x60a4c",
            "b 0x60a30",
            "ldrb r2, [r6, r3]",
            "strb r2, [r4, r3]",
            "strb r2, [r8, r3]",
            "add r3, r3, 1",
            "cmp r0, r3",
            "beq 0x60b78",
            "ldrb r2, [r6, r3]",
            "strb r2, [r4, r3]",
            "strb r2, [r8, r3]",
            "add r3, r3, 1",
            "cmp r0, r3",
            "bne 0x60bc0",
            "b 0x60b78",
            "ldr r3, [sp, 0x1c]",
            "cmp r3, 0",
            "beq 0x60dd0",
            "add r5, r6, 1",
            "cmp fp, r5",
            "bhi 0x60d30",
            "ldrb r3, [r6]",
            "mov sl, r8",
            "strb r3, [r4], 1",
            "strb r3, [sl], 1",
            "ldr r3, [sp, 0xc]",
            "cmp sl, r3",
            "cmpne r5, fp",
            "bne 0x60b8c",
            "ldr ip, [sp, 0x64]",
            "str r4, [sp, 0x68]",
            "rsb r3, ip, sl",
            "str sl, [sp, 0x64]",
            "mov r4, sl",
            "ldr ip, [sp, 0x70]",
            "ldr r2, [sp, 0xc]",
            "str r3, [ip]",
            "ldr r0, [sp, 0x6c]",
            "cmp r2, r4",
            "str r3, [r0]",
            "beq 0x60e60",
            "ldr r1, [sp, 0x68]",
            "ldr r0, [sp, 0x68]",
            "orr r3, r1, r4",
            "tst r3, 3",
            "ldr r3, [sp, 0xc]",
            "add r1, r1, 4",
            "rsb ip, r4, r3",
            "add r3, r4, 4",
            "movne r2, 0",
            "moveq r2, 1",
            "cmp r0, r3",
            "cmpls r4, r1",
            "movls r3, 0",
            "movhi r3, 1",
            "cmp ip, 3",
            "movls r2, 0",
            "andhi r2, r2, 1",
            "ands r3, r2, r3",
            "beq 0x60eb8",
            "lsr r0, ip, 2",
            "lsls r4, r0, 2",
            "beq 0x60d00",
            "mov r3, 0",
            "ldr r1, [0x00060f6c]",
            "ldr r5, [sp, 0x64]",
            "ldr r6, [sp, 0x68]",
            "mov r2, r3",
            "add r2, r2, 1",
            "cmp r2, r0",
            "str r1, [r6, r3]",
            "str r1, [r5, r3]",
            "add r3, r3, 4",
            "blo 0x60cc8",
            "ldr r1, [sp, 0x64]",
            "ldr r2, [sp, 0x68]",
            "add r1, r1, r4",
            "add r2, r2, r4",
            "cmp ip, r4",
            "str r1, [sp, 0x64]",
            "str r2, [sp, 0x68]",
            "beq 0x60e60",
            "ldr ip, [sp, 0xc]",
            "ldr r1, [sp, 0x64]",
            "ldr r4, [sp, 0x68]",
            "mov r3, 0",
            "mov r2, 0x20",
            "strb r2, [r4, r3]",
            "strb r2, [r1, r3]",
            "add r3, r3, 1",
            "add r0, r1, r3",
            "cmp ip, r0",
            "bne 0x60d14",
            "b 0x60e60",
            "ldrb r3, [r6]",
            "ldr ip, [sp, 0x1c]",
            "ldrb r2, [ip, r3]",
            "cmp r2, 0",
            "beq 0x60dc8",
            "ldrb r2, [r5]",
            "ldr r0, [sp, 0x14]",
            "cmp r2, r0",
            "beq 0x60de0",
            "ldr r1, [sp, 0x18]",
            "cmp r1, r2",
            "beq 0x60de0",
            "ldr ip, [sp, 0x1c]",
            "ldrb r1, [ip, r2]",
            "cmp r1, 0",
            "beq 0x60dc8",
            "sub r1, r3, 0x40",
            "ldr r0, [sb, 0x30]",
            "add r2, r2, r1, lsl 6",
            "add r2, r0, r2, lsl 1",
            "ldrh r2, [r2, -0x80]",
            "cmp r2, 0",
            "beq 0x60dc8",
            "ldr r0, [sp, 4]",
            "cmp r0, 1",
            "beq 0x60de0",
            "ldr r1, [sp, 0xc]",
            "add r2, r8, 1",
            "cmp r1, r2",
            "mov sl, r2",
            "bls 0x60f60",
            "strb r3, [r4], 1",
            "strb r3, [r8]",
            "ldr r2, [sp, 4]",
            "sub r2, r2, 1",
            "str r2, [sp, 4]",
            "ldrb r3, [r5], 1",
            "b 0x60c14",
            "mov sl, r8",
            "b 0x60c14",
            "mov r5, r6",
            "mov sl, r8",
            "ldrb r3, [r5], 1",
            "b 0x60c14",
            "mov r6, sb",
            "add r3, r8, 1",
            "ldr r2, [r6, 0xc]",
            "ldr r1, [sp, 0x6c]",
            "tst r2, 0x10",
            "ldrne r0, [sp, 0x64]",
            "ldreq r2, [sp, 0x60]",
            "rsbne r2, r0, r8",
            "str r2, [r1]",
            "ldr r2, [sp, 0x60]",
            "ldr ip, [sp, 0x70]",
            "str r2, [ip]",
            "ldr r1, [sp, 0xc]",
            "b 0x60e1c",
            "add r3, r3, 1",
            "ldrh r2, [r6, 0x5c]",
            "cmp r3, r1",
            "strb r2, [r8]",
            "mov r8, r3",
            "bne 0x60e18",
            "ldr r0, [sp, 0x60]",
            "ldr r1, [sp, 0x70]",
            "str r0, [r1]",
            "ldr r3, [r6, 0xc]",
            "ldr r2, [sp, 0x68]",
            "tst r3, 0x80",
            "add r5, r2, r0",
            "bne 0x60ee4",
            "mov r0, r4",
            "rsb r2, r4, r5",
            "mov r1, 0xff",
            "bl sym.imp.memset",
            "mov r0, 0",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [sp, 0x64]",
            "str r4, [sp, 0x68]",
            "rsb r3, r1, sl",
            "str sl, [sp, 0x64]",
            "mov r4, sl",
            "b 0x60c40",
            "ldr ip, [sp, 0x64]",
            "str r4, [sp, 0x68]",
            "rsb r3, ip, r8",
            "str r8, [sp, 0x64]",
            "mov r4, r8",
            "b 0x60c40",
            "ldr r2, [sp, 0x64]",
            "str r4, [sp, 0x68]",
            "rsb r3, r2, r8",
            "str r8, [sp, 0x64]",
            "mov r4, r8",
            "b 0x60c40",
            "ldr ip, [sp, 0xc]",
            "ldr r1, [sp, 0x64]",
            "mov r4, r0",
            "mov r2, 0x20",
            "strb r2, [r4, r3]",
            "strb r2, [r1, r3]",
            "add r3, r3, 1",
            "add r0, r1, r3",
            "cmp ip, r0",
            "bne 0x60ec8",
            "b 0x60e60",
            "add r7, sp, 0x24",
            "mov r0, r6",
            "ldr ip, [r6, 0x64]",
            "ldrh r1, [r6, 0x5e]",
            "mov r2, r7",
            "add r3, r7, 0xa",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "and r8, r0, 0xff",
            "mov r0, r4",
            "add r6, r0, r8",
            "cmp r5, r6",
            "mov sl, 0x20",
            "bhi 0x60f40",
            "mov r6, r0",
            "strb sl, [r6], 1",
            "cmp r5, r6",
            "bls 0x60e60",
            "mov r0, r6",
            "add r6, r0, r8",
            "cmp r5, r6",
            "bls 0x60f20",
            "mov r1, r7",
            "mov r2, r8",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "b 0x60f34",
            "mov r3, 0",
            "ldr r4, [sp, 0x64]",
            "b 0x60c40",
            "mov r6, sb",
            "mov r3, r2",
            "b 0x60de8"
        ]
    },
    "sym.yaERR_remove_state": {
        "function_address": "0x000852b4",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "bl rsym._ZN5yaSSL6Errors6RemoveEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00090914": {
        "function_address": "0x00090914",
        "instructions": [
            "ldr ip, [0x00090950]",
            "ldr r3, [0x00090954]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090958]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009095c]",
            "ldr r0, [0x00090960]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_yaSSL::x509_::pop_front__": {
        "function_address": "0x00088ad8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x88b20",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_get_server_version": {
        "function_address": "0x0007412c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "add r4, sp, 4",
            "mov r1, r4",
            "mov r2, 0xa",
            "ldr r0, [r0, 0x280]",
            "bl sym.imp.strtoul",
            "mov r6, r0",
            "ldr r0, [sp, 4]",
            "mov r1, r4",
            "mov r2, 0xa",
            "add r0, r0, 1",
            "bl sym.imp.strtoul",
            "mov r5, r0",
            "ldr r0, [sp, 4]",
            "mov r1, r4",
            "mov r2, 0xa",
            "add r0, r0, 1",
            "bl sym.imp.strtoul",
            "add r6, r6, r6, lsl 2",
            "add r6, r6, r6, lsl 2",
            "add r6, r6, r6, lsl 2",
            "add r5, r5, r5, lsl 2",
            "add r6, r6, r6, lsl 2",
            "lsl r6, r6, 4",
            "add r5, r5, r5, lsl 2",
            "add r5, r6, r5, lsl 2",
            "add r0, r5, r0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.strtoul": {
        "function_address": "0x0003e7e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfb4]!"
        ]
    },
    "sym.fastmutex_global_init": {
        "function_address": "0x0004db30",
        "instructions": [
            "push {r4, lr}",
            "mov r0, 0x53",
            "bl sym.imp.sysconf",
            "ldr r3, [0x0004db54]",
            "ldr r2, [0x0004db58]",
            "add r3, pc, r3",
            "str r0, [r3, r2]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.sysconf": {
        "function_address": "0x0003d054",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf6c]!"
        ]
    },
    "sym.my_strntoull10rnd_8bit": {
        "function_address": "0x0005e688",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r2, r1, r2",
            "ldr ip, [0x0005ed34]",
            "cmp r1, r2",
            "sub sp, sp, 0x1c",
            "add ip, pc, ip",
            "mov r7, r3",
            "blo 0x5e6b8",
            "b 0x5e7a4",
            "add r1, r1, 1",
            "cmp r2, r1",
            "bls 0x5e7a4",
            "ldrb r3, [r1]",
            "cmp r3, 9",
            "cmpne r3, 0x20",
            "beq 0x5e6ac",
            "cmp r3, 0x2d",
            "movne r8, 0",
            "moveq r8, 1",
            "cmp r8, 0",
            "bne 0x5e7d4",
            "cmp r3, 0x2b",
            "beq 0x5e7d4",
            "add r0, r1, 9",
            "cmp r0, r2",
            "movhs r0, r2",
            "cmp r1, r0",
            "bhs 0x5eaac",
            "ldrb r3, [r1]",
            "sub r3, r3, 0x30",
            "and r3, r3, 0xff",
            "cmp r3, 9",
            "bhi 0x5eaac",
            "mov fp, r1",
            "mov r4, 0",
            "b 0x5e72c",
            "ldrb r3, [fp]",
            "sub r3, r3, 0x30",
            "and r3, r3, 0xff",
            "cmp r3, 9",
            "bhi 0x5e740",
            "add fp, fp, 1",
            "add r4, r4, r4, lsl 2",
            "cmp r0, fp",
            "add r4, r3, r4, lsl 1",
            "bhi 0x5e718",
            "cmp r2, fp",
            "bhi 0x5e7e4",
            "ldr r0, [sp, 0x40]",
            "cmp r8, 0",
            "str fp, [r0]",
            "beq 0x5e9f0",
            "cmp r7, 0",
            "beq 0x5ea68",
            "cmp r4, 0",
            "ldr r2, [sp, 0x44]",
            "movne r4, 0x22",
            "str r4, [r2]",
            "mov r5, 0",
            "mov r4, 0",
            "b 0x5e7c0",
            "cmp sl, 0x2e",
            "bne 0x5eccc",
            "ldr r6, [sp, 8]",
            "cmp r6, 0",
            "beq 0x5eb40",
            "mov r6, sb",
            "mov sb, 0",
            "mov r0, sb",
            "cmp fp, 0",
            "bne 0x5e8a8",
            "ldr sl, [sp, 0x40]",
            "mov r3, 0x21",
            "str r1, [sl]",
            "ldr fp, [sp, 0x44]",
            "mov r4, 0",
            "str r3, [fp]",
            "mov r5, 0",
            "mov r1, r5",
            "mov r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r1, r1, 1",
            "cmp r1, r2",
            "bne 0x5e6e4",
            "b 0x5e7a4",
            "mov sl, 0",
            "add r3, fp, 1",
            "mov r5, 0",
            "rsb fp, r1, fp",
            "str sl, [sp, 8]",
            "ldrb sl, [r3, -1]",
            "sub sb, r3, 1",
            "sub r0, sl, 0x30",
            "and r0, r0, 0xff",
            "cmp r0, 9",
            "bhi 0x5e77c",
            "ldr r6, [0x0005ed38]",
            "cmp r5, r6",
            "bls 0x5e998",
            "ldr r6, [0x0005ed3c]",
            "cmp r4, r6",
            "mov r6, 0",
            "strb r6, [sp, 0x14]",
            "beq 0x5eb4c",
            "ldrb r6, [sp, 0x14]",
            "cmp r0, 5",
            "movhi r6, 0",
            "andls r6, r6, 1",
            "cmp r6, 0",
            "bne 0x5e9a8",
            "ldr r3, [0x0005ed3c]",
            "mov r6, sb",
            "cmp r3, r4",
            "mov r0, r5",
            "beq 0x5eb20",
            "cmp sl, 0x34",
            "movls sb, 0",
            "movhi sb, 1",
            "ldr sl, [sp, 8]",
            "cmp sl, 0",
            "beq 0x5ec68",
            "cmp r6, r2",
            "mov r3, sl",
            "rsb r0, r6, sl",
            "blo 0x5e894",
            "b 0x5e79c",
            "add r6, r6, 1",
            "cmp r2, r6",
            "bls 0x5e79c",
            "ldrb r3, [r6]",
            "sub r3, r3, 0x30",
            "cmp r3, 9",
            "bls 0x5e888",
            "b 0x5e79c",
            "cmp r6, r2",
            "bhs 0x5e938",
            "ldrb r3, [r6]",
            "cmp r3, 0x65",
            "cmpne r3, 0x45",
            "bne 0x5e938",
            "add r6, r6, 1",
            "cmp r2, r6",
            "bls 0x5e938",
            "ldrb r3, [r6]",
            "cmp r3, 0x2d",
            "movne sl, 0",
            "moveq sl, 1",
            "cmp sl, 0",
            "bne 0x5ebfc",
            "cmp r3, 0x2b",
            "beq 0x5ebfc",
            "sub r3, r3, 0x30",
            "and r1, r3, 0xff",
            "cmp r1, 9",
            "movls r3, 0",
            "bls 0x5e918",
            "b 0x5ed24",
            "ldrb r1, [r6]",
            "sub r1, r1, 0x30",
            "and r1, r1, 0xff",
            "cmp r1, 9",
            "bhi 0x5e92c",
            "add r6, r6, 1",
            "add r3, r3, r3, lsl 2",
            "cmp r2, r6",
            "add r3, r1, r3, lsl 1",
            "bhi 0x5e904",
            "cmp sl, 0",
            "rsbne r3, r3, 0",
            "add r0, r0, r3",
            "cmp r0, 0",
            "bne 0x5ea00",
            "cmp sb, 0",
            "beq 0x5e960",
            "cmn r4, 1",
            "beq 0x5ec18",
            "mov r2, 1",
            "mov r3, 0",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "ldr fp, [sp, 0x40]",
            "cmp r7, 0",
            "str r6, [fp]",
            "bne 0x5ea7c",
            "cmp r8, 0",
            "beq 0x5eafc",
            "cmp r5, 0x80000000",
            "bls 0x5ec24",
            "ldr r0, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r0]",
            "mov r4, 0",
            "mov r5, 0x80000000",
            "b 0x5e7c0",
            "bne 0x5e9a8",
            "sub r6, r6, 0x80000001",
            "cmp r4, r6",
            "bhi 0x5e81c",
            "mov r6, 0xa",
            "umull sb, sl, r4, r6",
            "mla sl, r6, r5, sl",
            "and r4, r0, 0xff",
            "mov r5, 0",
            "adds r4, r4, sb",
            "adc r5, r5, sl",
            "add fp, fp, 1",
            "mov r6, r3",
            "cmp r2, r6",
            "add r3, r3, 1",
            "bhi 0x5e7f8",
            "ldr sl, [sp, 8]",
            "cmp sl, 0",
            "rsbne r0, r6, sl",
            "movne sb, 0",
            "bne 0x5e79c",
            "b 0x5e794",
            "ldr r6, [sp, 0x44]",
            "mov r5, 0",
            "str r8, [r6]",
            "b 0x5e7c0",
            "blt 0x5eb60",
            "cmp r0, 0x14",
            "bgt 0x5eab8",
            "ldr r3, [0x0005ed38]",
            "cmp r5, r3",
            "bhi 0x5eac0",
            "beq 0x5ed14",
            "mov r3, 0xa",
            "umull sl, fp, r4, r3",
            "mul r2, r3, r5",
            "subs r0, r0, 1",
            "mov r4, sl",
            "add r5, r2, fp",
            "beq 0x5e960",
            "ldr r1, [0x0005ed38]",
            "ldr ip, [0x0005ed3c]",
            "cmp r5, r1",
            "bhi 0x5eac0",
            "beq 0x5ebf0",
            "umull sl, fp, r4, r3",
            "mul r2, r3, r5",
            "subs r0, r0, 1",
            "mov r4, sl",
            "add r5, r2, fp",
            "bne 0x5ea40",
            "b 0x5e960",
            "ldr r3, [sp, 0x44]",
            "rsb r4, r4, 0",
            "str r7, [r3]",
            "asr r5, r4, 0x1f",
            "b 0x5e7c0",
            "orrs sl, r4, r5",
            "mov r3, 0",
            "movne r3, 1",
            "ands r3, r8, r3",
            "ldrne fp, [sp, 0x44]",
            "ldreq r0, [sp, 0x44]",
            "movne r3, 0x22",
            "strne r3, [fp]",
            "movne r4, 0",
            "movne r5, 0",
            "streq r3, [r0]",
            "b 0x5e7c0",
            "mov fp, r1",
            "mov r4, 0",
            "b 0x5e740",
            "orrs fp, r4, r5",
            "beq 0x5e960",
            "ldr r0, [sp, 0x40]",
            "cmp r7, 0",
            "str r6, [r0]",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r2]",
            "mvnne r4, 0",
            "mvnne r5, 0",
            "bne 0x5e7c0",
            "cmp r8, 0",
            "mvneq r4, 0",
            "mvneq r5, 0x80000000",
            "movne r4, 0",
            "movne r5, 0x80000000",
            "b 0x5e7c0",
            "cmp r5, 0",
            "ldrge r3, [sp, 0x44]",
            "ldrlt r6, [sp, 0x44]",
            "movlt r3, 0x22",
            "strge r8, [r3]",
            "strlt r3, [r6]",
            "mvnlt r4, 0",
            "mvnlt r5, 0x80000000",
            "b 0x5e7c0",
            "add r3, r3, 0x80000000",
            "cmp r5, r3",
            "bne 0x5e85c",
            "add r6, sb, 1",
            "mvn r4, 0",
            "mov sb, 1",
            "mvn r5, 0",
            "b 0x5e868",
            "str r3, [sp, 8]",
            "mov r6, r3",
            "b 0x5e9cc",
            "ldr r6, [0x0005ed38]",
            "cmp r5, r6",
            "moveq r6, 1",
            "strbeq r6, [sp, 0x14]",
            "b 0x5e830",
            "rsb r3, r0, 0",
            "cmp r3, 0x13",
            "bgt 0x5ec48",
            "ldr r2, [0x0005ed40]",
            "mov r0, r4",
            "add ip, ip, r2",
            "add r2, ip, r3, lsl 3",
            "ldr sb, [ip, r3, lsl 3]",
            "ldr sl, [r2, 4]",
            "mov r1, r5",
            "mov r2, sb",
            "mov r3, sl",
            "bl fcn.000bfd8c",
            "mov r0, r4",
            "adds r4, r2, r2",
            "mov r1, r5",
            "mov r2, sb",
            "adc r5, r3, r3",
            "mov r3, sl",
            "str r4, [sp, 4]",
            "bl fcn.000bfd8c",
            "cmp sl, r5",
            "mov r2, r0",
            "mov r3, r1",
            "mov r4, r0",
            "mov r5, r1",
            "ldr ip, [sp, 4]",
            "bhi 0x5e960",
            "bne 0x5ebdc",
            "cmp sb, ip",
            "bhi 0x5e960",
            "mov r4, 1",
            "mov r5, 0",
            "adds r4, r4, r2",
            "adc r5, r5, r3",
            "b 0x5e960",
            "cmp r4, ip",
            "bls 0x5ea4c",
            "b 0x5eac0",
            "add r6, r6, 1",
            "cmp r6, r2",
            "beq 0x5e960",
            "cmp r2, r6",
            "bls 0x5ed24",
            "ldrb r3, [r6]",
            "b 0x5e8ec",
            "cmn r5, 1",
            "bne 0x5e950",
            "b 0x5eac0",
            "bne 0x5ec30",
            "cmp r4, 0",
            "bne 0x5e980",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0",
            "str r3, [r2]",
            "rsbs r4, r4, 0",
            "rsc r5, r5, 0",
            "b 0x5e7c0",
            "ldr r2, [sp, 0x40]",
            "mov r3, 0",
            "str r6, [r2]",
            "ldr r6, [sp, 0x44]",
            "mov r4, 0",
            "str r3, [r6]",
            "mov r5, 0",
            "b 0x5e7c0",
            "cmp r6, r2",
            "movhs r0, sl",
            "bhs 0x5e79c",
            "ldrb r0, [r6]",
            "sub r3, r0, 0x30",
            "cmp r3, 9",
            "str r0, [sp, 0x14]",
            "bhi 0x5ed2c",
            "ldr r0, [sp, 8]",
            "mov sl, r6",
            "str r4, [sp, 8]",
            "str r5, [sp, 0xc]",
            "b 0x5ecac",
            "ldrb r3, [r6, r0]",
            "sub r4, r3, 0x30",
            "cmp r4, 9",
            "bhi 0x5ecd4",
            "add sl, sl, 1",
            "cmp r2, sl",
            "add r0, r0, 1",
            "bhi 0x5ec9c",
            "add r5, sp, 8",
            "ldm r5, {r4, r5}",
            "mov r6, sl",
            "b 0x5e79c",
            "mov r6, sb",
            "b 0x5e9d8",
            "str r3, [sp, 0x14]",
            "mov r6, sl",
            "add r5, sp, 8",
            "ldm r5, {r4, r5}",
            "ldr r3, [sp, 0x14]",
            "cmp r3, 0x2e",
            "bne 0x5e79c",
            "b 0x5ed04",
            "ldrb r3, [r6]",
            "sub r3, r3, 0x30",
            "cmp r3, 9",
            "bhi 0x5e79c",
            "add r6, r6, 1",
            "cmp r2, r6",
            "bhi 0x5ecf4",
            "b 0x5e79c",
            "add r3, r3, 0x80000000",
            "cmp r4, r3",
            "bls 0x5ea1c",
            "b 0x5eac0",
            "mov r3, 0",
            "b 0x5e92c",
            "ldr r0, [sp, 8]",
            "b 0x5ece4"
        ]
    },
    "fcn.0008adc8": {
        "function_address": "0x0008adc8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ae0c]",
            "ldr r3, [0x0008ae10]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ServerKeyBaseEEEvPT_",
            "ldr r3, [0x0008ae14]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaDES_set_key_unchecked": {
        "function_address": "0x00085518",
        "instructions": [
            "mov r3, r0",
            "push {r4, lr}",
            "mov r0, r1",
            "mov r2, 8",
            "mov r1, r3",
            "bl sym.imp.memcpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.int2str": {
        "function_address": "0x0005b844",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr ip, str._A__",
            "cmp r3, 0",
            "add ip, pc, ip",
            "sub sp, sp, 0x4c",
            "mov r4, r1",
            "mov r7, r2",
            "bne 0x5b918",
            "ldr r3, [0x0005b95c]",
            "cmp r7, 0",
            "ldr r8, [ip, r3]",
            "mov r6, r0",
            "blt 0x5b92c",
            "sub r3, r7, 2",
            "cmp r3, 0x22",
            "bhi 0x5b950",
            "mov r3, 0",
            "mov r0, r6",
            "mov r1, r7",
            "strb r3, [sp, 0x44]",
            "bl fcn.000bed20",
            "and sl, r7, 0xff",
            "mul r3, r0, sl",
            "rsb r6, r3, r6",
            "and r6, r6, 0xff",
            "ldrb r3, [r8, r6]",
            "cmp r0, 0",
            "strb r3, [sp, 0x43]",
            "addeq r6, sp, 0x43",
            "beq 0x5b8ec",
            "mov r5, r0",
            "add r6, sp, 0x43",
            "mov r0, r5",
            "mov r1, r7",
            "bl fcn.000bee34",
            "mul r3, r0, sl",
            "rsb r5, r3, r5",
            "and r5, r5, 0xff",
            "ldrb r3, [r8, r5]",
            "subs r5, r0, 0",
            "strb r3, [r6, -1]!",
            "bne 0x5b8c4",
            "mov r2, 0",
            "b 0x5b8f8",
            "ldrb r3, [r6, r2]",
            "cmp r3, 0",
            "strb r3, [r4, r2]",
            "add r0, r4, r2",
            "add r2, r2, 1",
            "bne 0x5b8f4",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [0x0005b960]",
            "cmp r7, 0",
            "ldr r8, [ip, r3]",
            "mov r6, r0",
            "bge 0x5b878",
            "add r3, r7, 0x24",
            "cmp r3, 0x22",
            "bhi 0x5b950",
            "cmp r0, 0",
            "movlt r3, 0x2d",
            "strblt r3, [r4], 1",
            "rsblt r6, r0, 0",
            "rsb r7, r7, 0",
            "b 0x5b884",
            "mov r0, 0",
            "b 0x5b90c"
        ]
    },
    "fcn.000bee34": {
        "function_address": "0x000bee34",
        "instructions": [
            "cmp r1, 0",
            "eor ip, r0, r1",
            "beq 0xbef4c",
            "rsbmi r1, r1, 0",
            "subs r2, r1, 1",
            "beq 0xbeeec",
            "movs r3, r0",
            "rsbmi r3, r0, 0",
            "cmp r3, r1",
            "bls 0xbeef8",
            "tst r1, r2",
            "beq 0xbef08",
            "tst r1, 0xe0000000",
            "lsleq r1, r1, 3",
            "moveq r2, 8",
            "movne r2, 1",
            "cmp r1, 0x10000000",
            "cmplo r1, r3",
            "lsllo r1, r1, 4",
            "lsllo r2, r2, 4",
            "blo 0xbee74",
            "cmp r1, 0x80000000",
            "cmplo r1, r3",
            "lsllo r1, r1, 1",
            "lsllo r2, r2, 1",
            "blo 0xbee88",
            "mov r0, 0",
            "cmp r3, r1",
            "subhs r3, r3, r1",
            "orrhs r0, r0, r2",
            "cmp r3, r1, lsr 1",
            "subhs r3, r3, r1, lsr 1",
            "orrhs r0, r0, r2, lsr 1",
            "cmp r3, r1, lsr 2",
            "subhs r3, r3, r1, lsr 2",
            "orrhs r0, r0, r2, lsr 2",
            "cmp r3, r1, lsr 3",
            "subhs r3, r3, r1, lsr 3",
            "orrhs r0, r0, r2, lsr 3",
            "cmp r3, 0",
            "lsrsne r2, r2, 4",
            "lsrne r1, r1, 4",
            "bne 0xbeea0",
            "cmp ip, 0",
            "rsbmi r0, r0, 0",
            "bx lr",
            "teq ip, r0",
            "rsbmi r0, r0, 0",
            "bx lr",
            "movlo r0, 0",
            "asreq r0, ip, 0x1f",
            "orreq r0, r0, 1",
            "bx lr",
            "cmp r1, 0x10000",
            "lsrhs r1, r1, 0x10",
            "movhs r2, 0x10",
            "movlo r2, 0",
            "cmp r1, 0x100",
            "lsrhs r1, r1, 8",
            "addhs r2, r2, 8",
            "cmp r1, 0x10",
            "lsrhs r1, r1, 4",
            "addhs r2, r2, 4",
            "cmp r1, 4",
            "addhi r2, r2, 3",
            "addls r2, r2, r1, lsr 1",
            "cmp ip, 0",
            "lsr r0, r3, r2",
            "rsbmi r0, r0, 0",
            "bx lr",
            "str lr, [sp, -8]!",
            "bl fcn.000bfda8",
            "mov r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::SetSubGroupOrder_TaoCrypt::Integer_const_": {
        "function_address": "0x000a11f4",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00084c08": {
        "function_address": "0x00084c08",
        "instructions": [
            "push {r4, lr}",
            "str r1, [r0]",
            "mov r4, r0",
            "mov r0, r1",
            "bl sym.imp.pthread_mutex_lock",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_mutex_lock": {
        "function_address": "0x0003e6d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6c]!"
        ]
    },
    "fcn.0008b958": {
        "function_address": "0x0008b958",
        "instructions": [
            "ldr r3, [0x0008b9b4]",
            "ldr r2, [0x0008b9b8]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "mov r5, 0x20",
            "str r2, [r0], 8",
            "mov r1, 3",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r2, r5",
            "mov r1, 0",
            "add r0, r4, 0xa",
            "bl sym.imp.memset",
            "mov r2, r5",
            "add r0, r4, 0x2b",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::addData_yaSSL::input_buffer_": {
        "function_address": "0x000920fc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r0, r0, 0x9c0",
            "bl rsym._ZN5yaSSL7Buffers7useDataEv",
            "mov r1, r5",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9push_backES3_",
            "ldrb r3, [r4, 0x9de]",
            "cmp r3, 0",
            "moveq r3, 1",
            "strbeq r3, [r4, 0x9de]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9push_backES3_": {
        "function_address": "0x0003cc94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1ec]!"
        ]
    },
    "sym.TaoCrypt::DH::GeneratePrivate_TaoCrypt::RandomNumberGenerator__unsigned_char_": {
        "function_address": "0x000a0e1c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4c",
            "mov r4, r0",
            "mov sl, r2",
            "mov r7, r1",
            "bl rsym._ZN8TaoCrypt7Integer3OneEv",
            "add r8, sp, 0x28",
            "mov r1, 1",
            "add r5, sp, 0x18",
            "mov r6, r0",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "mov r1, r4",
            "mov r2, r8",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "cmp r0, 4",
            "movls r1, 0",
            "bhi 0xa0f50",
            "add r8, sp, 8",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r1, r8",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "movge r3, r8",
            "add r8, sp, 0x38",
            "movlt r3, r5",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERNS_21RandomNumberGeneratorERKS0_S4_",
            "ldr r5, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x2c]",
            "ldr r2, [sp, 0x28]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r1, sl",
            "mov r2, r0",
            "mov r3, 0",
            "mov r0, r8",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr r4, [sp, 0x3c]",
            "ldr r2, [sp, 0x38]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "bl fcn.000bf294",
            "ldr r2, [0x000a0fd0]",
            "ldr r3, [0x000a0fd4]",
            "mov r8, r0",
            "mov sb, r1",
            "bl sym.imp.pow",
            "mov ip, r1",
            "mov fp, r0",
            "mov r1, sb",
            "mov r0, r8",
            "str ip, [sp, 4]",
            "bl sym.imp.log",
            "ldr r2, [0x000a0fd0]",
            "ldr r3, [0x000a0fd8]",
            "bl sym.imp.pow",
            "ldr ip, [sp, 4]",
            "mov r8, r0",
            "mov sb, r1",
            "ldr r2, [0x000a0fdc]",
            "mov r1, ip",
            "ldr r3, [0x000a0fe0]",
            "mov r0, fp",
            "bl fcn.000bf394",
            "mov r2, r8",
            "mov r3, sb",
            "bl fcn.000bf394",
            "mov r2, 0",
            "ldr r3, [0x000a0fe4]",
            "bl fcn.000bef80",
            "bl fcn.000bf9d0",
            "lsl r1, r0, 1",
            "b 0xa0e70"
        ]
    },
    "sym.imp.pow": {
        "function_address": "0x0003d5ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbdc]!"
        ]
    },
    "sym.imp.log": {
        "function_address": "0x0003fcf4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1ac]!"
        ]
    },
    "fcn.000bef80": {
        "function_address": "0x000bef80",
        "instructions": [
            "eor r3, r3, 0x80000000"
        ]
    },
    "fcn.0007f958": {
        "function_address": "0x0007f958",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7Integer11IntegerImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_7Integer11IntegerImplEEEvPT_": {
        "function_address": "0x0003fa30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x384]!"
        ]
    },
    "method.TaoCrypt::FileSink.FileSink_char_const__TaoCrypt::Source_": {
        "function_address": "0x000a1df4",
        "instructions": [
            "ldr r3, [0x000a1e38]",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r1, [0x000a1e3c]",
            "add r3, pc, r3",
            "add r1, r3, r1",
            "mov r5, r2",
            "bl sym.imp.fopen64",
            "cmp r0, 0",
            "str r0, [r4]",
            "movne r1, r5",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt8FileSink3putERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt8FileSink3putERNS_6SourceE": {
        "function_address": "0x0003eb60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd64]!"
        ]
    },
    "fcn.0008ac38": {
        "function_address": "0x0008ac38",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ac7c]",
            "ldr r3, [0x0008ac80]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0xc]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008ac84]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.init_io_cache_share": {
        "function_address": "0x00053c90",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, [0x00053d2c]",
            "mov r4, r1",
            "ldr r1, [0x00053d30]",
            "add r6, pc, r6",
            "mov r5, r0",
            "ldr r1, [r6, r1]",
            "mov r0, r4",
            "mov r7, r2",
            "mov r8, r3",
            "bl rsym.my_pthread_fastmutex_init",
            "mov r1, 0",
            "add r0, r4, 0x20",
            "bl sym.imp.pthread_cond_init",
            "mov r1, 0",
            "add r0, r4, 0x50",
            "bl sym.imp.pthread_cond_init",
            "mov r3, 0",
            "str r8, [r4, 0x98]",
            "str r8, [r4, 0x94]",
            "str r3, [r4, 0x9c]",
            "ldr r2, [0x00053d34]",
            "ldr r1, [r5, 0x18]",
            "ldr r2, [r6, r2]",
            "str r1, [r4, 0x8c]",
            "cmp r7, r3",
            "mov r0, 0",
            "mov r1, 0",
            "str r0, [r4, 0x80]",
            "str r1, [r4, 0x84]",
            "str r3, [r4, 0x90]",
            "str r7, [r4, 0x88]",
            "str r3, [r5, 0x34]",
            "str r2, [r5, 0x5c]",
            "str r4, [r5, 0x58]",
            "str r3, [r5, 0x30]",
            "strne r4, [r7, 0x58]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.my_pthread_fastmutex_init": {
        "function_address": "0x0003f3b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7d4]!"
        ]
    },
    "sym.imp.pthread_cond_init": {
        "function_address": "0x000403a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd34]!"
        ]
    },
    "sym.yaSSL::SSL::set_sessionID_unsigned_char_const_": {
        "function_address": "0x00092604",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r4, r0, 0x68",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r5",
            "mov r2, 0x20",
            "add r0, r0, 0x74",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r3, 1",
            "strb r3, [r0, 0x12c]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Reduce_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x000aad10",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r1]",
            "mov r5, r0",
            "ldr r0, [r0, 0xc]",
            "mov r4, r1",
            "cmp r3, r0",
            "beq 0xaad50",
            "mov r1, r2",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegermIERKS0_",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xaad8c",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bne 0xaad2c",
            "ldr r0, [r4, 4]",
            "ldr r2, [r2, 4]",
            "mov r1, r0",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "cmp r0, 0",
            "beq 0xaad44",
            "ldr r0, [r4, 4]",
            "ldr r2, [r5, 0x10]",
            "mov r1, r0",
            "ldr r3, [r4]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "b 0xaad44",
            "add r1, r5, 0xc",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "b 0xaad44"
        ]
    },
    "sym.yaSSL::SSL::storeKeys_unsigned_char_const_": {
        "function_address": "0x00092428",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "add r4, r0, 0x68",
            "mov sl, r0",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r7, [r0, 0x14]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r5",
            "mov r2, r7",
            "add r0, r0, 0x94",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "add r1, r5, r7",
            "mov r2, r7",
            "add r0, r0, 0xa8",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r6, [r0, 0xc]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "lsl r7, r7, 1",
            "add r1, r5, r7",
            "mov r2, r6",
            "add r0, r0, 0xbc",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "add r7, r7, r6",
            "add r1, r5, r7",
            "mov r2, r6",
            "add r0, r0, 0xdc",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r8, [r0, 0xd]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "add r6, r7, r6",
            "add r1, r5, r6",
            "mov r2, r8",
            "add r0, r0, 0xfc",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "add r6, r6, r8",
            "add r1, r5, r6",
            "mov r2, r8",
            "add r0, r0, 0x10c",
            "bl sym.imp.memcpy",
            "mov r0, sl",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN5yaSSL3SSL7setKeysEv"
        ]
    },
    "sym.yaSSL::DSS::DSSImpl::SetPublic_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007f308",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r2, 0",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "mov r5, r1",
            "str r2, [sp, 4]",
            "moveq r3, r2",
            "bne 0x7f37c",
            "mov r0, r3",
            "ldr r2, [sp, 4]",
            "mov r1, r5",
            "str r3, [sp, 8]",
            "mov r5, 0",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "add r1, sp, 4",
            "str r5, [sp, 0x10]",
            "str r5, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERNS_6SourceE",
            "ldr r4, [sp, 8]",
            "mov r1, r5",
            "mov r0, r4",
            "ldr r2, [sp, 4]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x1c",
            "pop {r4, r5, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7f328"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERNS_6SourceE": {
        "function_address": "0x0003e38c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x29c]!"
        ]
    },
    "sym.mySTL::list_unsigned_char_::push_back_unsigned_char_": {
        "function_address": "0x0008727c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendServerKeyExchange_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x000837b8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov sl, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x00083950]",
            "subs r8, r0, 0",
            "add r4, pc, r4",
            "beq 0x837e8",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r6, sp, 0x14",
            "mov r1, r5",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL17ServerKeyExchangeC1ERNS_3SSLE",
            "add r3, sp, 0x20",
            "mov r0, r6",
            "mov r1, r5",
            "str r3, [sp, 4]",
            "bl rsym._ZN5yaSSL17ServerKeyExchange5buildERNS_3SSLE",
            "ldr r3, [sp, 4]",
            "mov r1, 3",
            "add r0, r3, 4",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00083954]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 8]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0x14]",
            "mov fp, r0",
            "mov r0, r6",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 8",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add fp, fp, 4",
            "lsl fp, fp, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb ip, [r0, 0x12f]",
            "lsr fp, fp, 0x10",
            "mov r3, 0x16",
            "add r1, fp, 5",
            "mov r0, r7",
            "str r3, [sp, 0x20]",
            "strb r2, [sp, 0x24]",
            "strb ip, [sp, 0x25]",
            "strh fp, [sp, 0x26]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "ldr r1, [sp, 4]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r8",
            "bl fcn.00081648",
            "cmp sl, 0",
            "beq 0x8393c",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "ldr r3, [0x00083958]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 8]",
            "bl rsym._ZN5yaSSL17ServerKeyExchangeD1Ev",
            "b 0x837dc",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r7, sl",
            "b 0x83918"
        ]
    },
    "rsym._ZN5yaSSL17ServerKeyExchangeC1ERNS_3SSLE": {
        "function_address": "0x0003cdf0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x104]!"
        ]
    },
    "rsym._ZN5yaSSL17ServerKeyExchange5buildERNS_3SSLE": {
        "function_address": "0x0003e980",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xea4]!"
        ]
    },
    "rsym._ZN5yaSSL17ServerKeyExchangeD1Ev": {
        "function_address": "0x0003f964",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x40c]!"
        ]
    },
    "method.mySTL::list_yaSSL::BulkCipher_.push_back_yaSSL::BulkCipher_": {
        "function_address": "0x000894c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::SetKey_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000bb19c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r2",
            "mov r7, r1",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv",
            "cmp r5, 0x40",
            "bhi 0xbb214",
            "mov r2, r5",
            "mov r1, r7",
            "ldr r0, [r4]",
            "bl sym.imp.memcpy",
            "rsb r2, r5, 0x40",
            "ldr r0, [r4]",
            "mov r1, 0",
            "add r0, r0, r5",
            "bl sym.imp.memset",
            "mov r3, 0",
            "ldm r4, {r1, r2}",
            "ldrb r1, [r1, r3]",
            "eor r1, r1, 0x5c",
            "strb r1, [r2, r3]",
            "ldr r2, [r4]",
            "ldrb r1, [r2, r3]",
            "eor r1, r1, 0x36",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x40",
            "bne 0xbb1e0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "add r6, r4, 0x10",
            "mov r2, r5",
            "mov r1, r7",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r6",
            "ldr r1, [r4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r5, 0x10",
            "mov r2, 0x30",
            "b 0xbb1cc"
        ]
    },
    "sym.my_net_init": {
        "function_address": "0x0007b898",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "str r1, [r4]",
            "mov r5, r1",
            "bl rsym.my_net_local_init",
            "ldr r0, [r4, 0x28]",
            "mov r1, 0x10",
            "add r0, r0, 7",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r4, 4]",
            "moveq r0, 1",
            "beq 0x7b940",
            "ldr r3, [r4, 0x28]",
            "mov r6, 0",
            "add r3, r0, r3",
            "cmp r5, 0",
            "str r0, [r4, 0xc]",
            "str r0, [r4, 0x10]",
            "str r3, [r4, 8]",
            "strb r6, [r4, 0x5c]",
            "strb r6, [r4, 0x5e]",
            "str r6, [r4, 0x48]",
            "str r6, [r4, 0x34]",
            "str r6, [r4, 0x30]",
            "strb r6, [r4, 0x5f]",
            "strb r6, [r4, 0x50]",
            "strb r6, [r4, 0x4c]",
            "str r6, [r4, 0x18]",
            "str r6, [r4, 0x24]",
            "str r6, [r4, 0x58]",
            "str r6, [r4, 0x54]",
            "moveq r0, r5",
            "beq 0x7b940",
            "mov r0, r5",
            "bl rsym.vio_fd",
            "str r0, [r4, 0x14]",
            "mov r0, r5",
            "ldr ip, [r5, 0x7c]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.my_net_local_init": {
        "function_address": "0x0003e380",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2a4]!"
        ]
    },
    "rsym.vio_fd": {
        "function_address": "0x0003fb8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x29c]!"
        ]
    },
    "sym.my_charset_same": {
        "function_address": "0x00051498",
        "instructions": [
            "cmp r0, r1",
            "push {r4, lr}",
            "moveq r0, 1",
            "beq 0x514bc",
            "ldr r0, [r0, 0x10]",
            "ldr r1, [r1, 0x10]",
            "bl sym.imp.strcmp",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DES_EDE::set_decryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007e870",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "add r0, r4, 0x1b8",
            "mov r2, 0x18",
            "mov r3, 1",
            "bl rsym._ZN8TaoCrypt8DES_EDE36SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0x1c8",
            "mov r1, r5",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt8DES_EDE36SetKeyEPKhjNS_9CipherDirE": {
        "function_address": "0x0003cbf8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x254]!"
        ]
    },
    "sym.yaSSL::RSA::verify_unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007ce24",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [r0, 4]",
            "sub sp, sp, 0xc",
            "add r0, sp, 8",
            "str ip, [r0, -8]!",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType2EE10SSL_VerifyEPKhjS4_",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::get_SEQIncrement_bool_": {
        "function_address": "0x00091ed4",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "bne 0x91f00",
            "add r0, r0, 0x68",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "ldr r3, [r0, 0x11c]",
            "add r2, r3, 1",
            "str r2, [r0, 0x11c]",
            "mov r0, r3",
            "pop {r4, lr}",
            "bx lr",
            "add r0, r0, 0x68",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "ldr r3, [r0, 0x120]",
            "add r2, r3, 1",
            "str r2, [r0, 0x120]",
            "b 0x91ef4"
        ]
    },
    "sym.TaoCrypt::HexDecoder::Decode__": {
        "function_address": "0x0009e944",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0, 0xc]",
            "ldr r6, [0x0009eb70]",
            "ldr r5, [r3]",
            "sub sp, sp, 8",
            "ands r8, r5, 1",
            "mov r4, r0",
            "add r6, pc, r6",
            "bne 0x9eb4c",
            "lsr r7, r5, 1",
            "ldr r1, [r0, 4]",
            "ldr r2, [r0]",
            "mov r3, r7",
            "add r0, r0, 8",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "cmp r5, 0",
            "str r0, [r4, 4]",
            "str r7, [r4]",
            "beq 0x9ea90",
            "ldr r3, [r4, 0xc]",
            "ldr r2, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r1, r2, 1",
            "cmp r2, ip",
            "str r1, [r3, 0xc]",
            "bhs 0x9eaa8",
            "ldr r0, [r3, 4]",
            "cmp r1, ip",
            "add ip, r1, 1",
            "ldrb r2, [r0, r2]",
            "str ip, [r3, 0xc]",
            "bhs 0x9eaa8",
            "sub r2, r2, 0x30",
            "and r2, r2, 0xff",
            "cmp r2, 0x16",
            "ldrb r1, [r0, r1]",
            "bhi 0x9eb28",
            "sub r1, r1, 0x30",
            "and r1, r1, 0xff",
            "cmp r1, 0x16",
            "bhi 0x9eb04",
            "ldr ip, [0x0009eb74]",
            "add r3, r6, ip",
            "b 0x9ea54",
            "ldr r2, [r4, 0xc]",
            "ldr r0, [r2, 0xc]",
            "ldr lr, [r2]",
            "add r1, r0, 1",
            "cmp r0, lr",
            "str r1, [r2, 0xc]",
            "bhs 0x9eaac",
            "ldr r7, [r2, 4]",
            "cmp r1, lr",
            "add lr, r1, 1",
            "ldrb r0, [r7, r0]",
            "str lr, [r2, 0xc]",
            "bhs 0x9eaac",
            "sub r2, r0, 0x30",
            "and r2, r2, 0xff",
            "cmp r2, 0x16",
            "ldrb r1, [r7, r1]",
            "bhi 0x9eb2c",
            "sub r1, r1, 0x30",
            "and r1, r1, 0xff",
            "cmp r1, 0x16",
            "bhi 0x9eb08",
            "add r8, r8, 1",
            "add r2, r3, r2",
            "add r1, r3, r1",
            "ldrb r0, [r2, 0xd4]",
            "ldrb r2, [r1, 0xd4]",
            "cmp r0, 0xff",
            "cmpne r2, 0xff",
            "beq 0x9eae8",
            "ldr r1, [r4]",
            "cmp r1, r8",
            "bls 0x9eacc",
            "ldr r1, [r4, 4]",
            "orr r2, r2, r0, lsl 4",
            "subs r5, r5, 2",
            "strb r2, [r1, r8]",
            "bne 0x9e9f8",
            "mov r1, r4",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN8TaoCrypt6Source5resetERNS_5BlockIhNS_20AllocatorWithCleanupIhEEEE",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr ip, [0x0009eb74]",
            "ldr r1, [0x0009eb78]",
            "ldr r0, [0x0009eb7c]",
            "add r3, r6, ip",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r0, [0x0009eb7c]",
            "ldr r1, [0x0009eb78]",
            "add r0, r6, r0",
            "add r1, r6, r1",
            "add r3, r3, 0x2c",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r0, [0x0009eb80]",
            "ldr r1, [0x0009eb84]",
            "add r0, r6, r0",
            "add r1, r6, r1",
            "add r3, r3, 0xb0",
            "mov r2, 0x72",
            "bl sym.imp.__assert_fail",
            "ldr ip, [0x0009eb74]",
            "ldr r1, [0x0009eb84]",
            "ldr r0, [0x0009eb88]",
            "add r3, r6, ip",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x6d",
            "bl sym.imp.__assert_fail",
            "ldr ip, [0x0009eb74]",
            "ldr r1, [0x0009eb84]",
            "ldr r0, [0x0009eb8c]",
            "add r3, r6, ip",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x6c",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009eb74]",
            "ldr r1, [0x0009eb84]",
            "ldr r0, [0x0009eb90]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x62",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt::Integer.ConvertToLong___const": {
        "function_address": "0x000a6520",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK8TaoCrypt7Integer19IsConvertableToLongEv",
            "ldr r2, [0x000a65b8]",
            "cmp r0, 0",
            "add r2, pc, r2",
            "beq 0xa6590",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0xa656c",
            "ldr r1, [r4, 4]",
            "cmp r3, 1",
            "ldr r0, [r1]",
            "bls 0xa656c",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 0",
            "rsbne r0, r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x000a65bc]",
            "ldr r1, [0x000a65c0]",
            "ldr r0, [0x000a65c4]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a65bc]",
            "ldr r1, [0x000a65c8]",
            "add r3, r2, r3",
            "ldr r0, [0x000a65cc]",
            "add r3, r3, 0x4e0",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a65d0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer19IsConvertableToLongEv": {
        "function_address": "0x000406fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xafc]!"
        ]
    },
    "method.TaoCrypt::RSA_Encryptor_TaoCrypt::RSA_BlockType2_.Encrypt_unsigned_char_const__unsigned_int__unsigned_char__TaoCrypt::RandomNumberGenerator_": {
        "function_address": "0x000bbd14",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [r0]",
            "sub sp, sp, 0x3c",
            "mov r7, r0",
            "mov r0, r5",
            "mov r8, r2",
            "mov sb, r1",
            "mov fp, r3",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub r0, r0, 1",
            "lsr r0, r0, 3",
            "cmp r0, 0xa",
            "ldr r2, [0x000bbed0]",
            "movls r0, 0",
            "subhi r0, r0, 0xa",
            "cmp r8, r0",
            "add r2, pc, r2",
            "bhi 0xbbeac",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "add ip, r0, 6",
            "lsr ip, ip, 3",
            "cmp ip, 0",
            "str ip, [sp, 0x2c]",
            "bne 0xbbe98",
            "add r0, sp, 0x38",
            "ldr r6, [r0, -0xc]!",
            "mov r4, 0",
            "mov r1, ip",
            "mov r3, r6",
            "mov r2, r6",
            "add r0, r0, 8",
            "str ip, [sp, 0x30]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r6",
            "mov r1, r4",
            "mov sl, r0",
            "str r6, [sp, 0x2c]",
            "str r0, [sp, 0x30]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub ip, r0, 1",
            "str ip, [sp]",
            "ldr ip, [sp, 0x60]",
            "mov r3, sl",
            "mov r1, sb",
            "mov r2, r8",
            "add r0, r7, 4",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt14RSA_BlockType23PadEPKhjPhjRNS_21RandomNumberGeneratorE",
            "ldr r8, [r7]",
            "add r7, sp, 0x1c",
            "mov r3, r4",
            "ldr r1, [sp, 0x30]",
            "ldr r2, [sp, 0x2c]",
            "add r6, sp, 0xc",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, r8",
            "mov r2, r7",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt13RSA_PublicKey13ApplyFunctionERKNS_7IntegerE",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r3, r4",
            "mov r2, r0",
            "mov r1, fp",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr r5, [sp, 0x10]",
            "ldr r2, [sp, 0xc]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x20]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x30]",
            "mov r1, r4",
            "mov r0, r5",
            "ldr r2, [sp, 0x2c]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, ip",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "b 0xbbd78",
            "ldr r3, [0x000bbed4]",
            "ldr r1, [0x000bbed8]",
            "ldr r0, [0x000bbedc]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x244",
            "mov r2, 0xb5",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt14RSA_BlockType23PadEPKhjPhjRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003e1c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3cc]!"
        ]
    },
    "sym.yaSSL::RSA::get_cipherLength___const": {
        "function_address": "0x0007dacc",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::Integer.Integer_yaSSL::Integer_const_": {
        "function_address": "0x0007da84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetSignature__": {
        "function_address": "0x0009c26c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "ldr r5, [0x0009c39c]",
            "ldr r6, [r0, 0x10]",
            "add r5, pc, r5",
            "cmp r6, 0",
            "movne r0, 0",
            "beq 0x9c298",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9c354",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 3",
            "movne r3, 0x400",
            "strne r3, [r0, 0x10]",
            "movne r0, r6",
            "bne 0x9c290",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "str r0, [r4, 0x18]",
            "ldr r0, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 0",
            "beq 0x9c2f8",
            "ldr r3, [r4, 4]",
            "ldr r2, [0x0009c3a0]",
            "mov r0, r6",
            "str r2, [r3, 0x10]",
            "b 0x9c290",
            "ldr r3, [r4, 0x18]",
            "sub r3, r3, 1",
            "str r3, [r4, 0x18]",
            "mov r1, 0",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r2, [r4, 4]",
            "str r0, [r4, 0x4c]",
            "ldr r3, [r2, 0xc]",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bhs 0x9c378",
            "ldr r1, [r2, 4]",
            "ldr r2, [r4, 0x18]",
            "add r1, r1, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 0x18]",
            "ldr r1, [r3, 0xc]",
            "add r2, r1, r2",
            "str r2, [r3, 0xc]",
            "ldr r0, [r4, 0x18]",
            "b 0x9c290",
            "ldr r3, [0x0009c3a4]",
            "ldr r1, [0x0009c3a8]",
            "ldr r0, [0x0009c3ac]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009c3a4]",
            "ldr r1, [0x0009c3a8]",
            "ldr r0, [0x0009c3ac]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.000becd0": {
        "function_address": "0x000becd0",
        "instructions": [
            "ldr ip, [0x000bed0c]",
            "ldr r3, [0x000bed10]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000bed14]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000bed18]",
            "ldr r0, [0x000bed1c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::Connection::AllocPreSecret_unsigned_int_": {
        "function_address": "0x0008b0a4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0, 0x124]",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.handle_options": {
        "function_address": "0x00058750",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x274",
            "str r0, [sp, 0x28]",
            "ldr r0, [r0]",
            "mov sb, r1",
            "ldr r1, [sp, 0x28]",
            "sub r0, r0, 1",
            "str r0, [r1]",
            "ldr r4, [sb]",
            "str r2, [sp, 0x2c]",
            "add r4, r4, 4",
            "str r4, [sb]",
            "ldr ip, [sp, 0x2c]",
            "ldr r0, [0x00059700]",
            "ldr r2, [ip]",
            "add r0, pc, r0",
            "cmp r2, 0",
            "str r0, [sp, 0x20]",
            "str r3, [sp, 0x44]",
            "beq 0x58844",
            "ldr r5, [0x00059704]",
            "ldr r6, [0x00059708]",
            "add r5, r0, r5",
            "add r6, r0, r6",
            "mov r4, ip",
            "b 0x587c4",
            "ldr r3, [r4, 0x48]!",
            "cmp r3, 0",
            "beq 0x58840",
            "ldr r1, [r4, 0x10]",
            "mov r0, r4",
            "cmp r1, 0",
            "addne r3, r4, 0x30",
            "ldmne r3, {r2, r3}",
            "blne fcn.0005815c",
            "ldr r1, [r4, 0xc]",
            "mov r0, r4",
            "cmp r1, 0",
            "addne r3, r4, 0x20",
            "ldmne r3, {r2, r3}",
            "blne fcn.0005815c",
            "ldr r3, [r4, 0x18]",
            "tst r3, 0x80",
            "beq 0x587b8",
            "mov r1, 0",
            "mov r3, r1",
            "mov r2, r4",
            "mov r0, r6",
            "ldr ip, [r5]",
            "mov lr, pc",
            "bx ip",
            "subs r1, r0, 0",
            "mov r0, r4",
            "beq 0x587b8",
            "add r3, r4, 0x20",
            "ldm r3, {r2, r3}",
            "bl fcn.0005815c",
            "ldr r3, [r4, 0x48]!",
            "cmp r3, 0",
            "bne 0x587c4",
            "ldr r4, [sb]",
            "ldr r1, [sp, 0x28]",
            "ldr r3, [r1]",
            "add r3, r4, r3, lsl 2",
            "cmp r3, r4",
            "str r3, [sp, 0x18]",
            "beq 0x59590",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [0x0005970c]",
            "mov r2, 0",
            "add r3, ip, r3",
            "str r3, [sp, 0x54]",
            "ldr r3, [0x00059710]",
            "mov r6, r2",
            "add r3, ip, r3",
            "str r3, [sp, 0x58]",
            "ldr r3, [0x00059714]",
            "mov fp, sb",
            "add r3, ip, r3",
            "str r3, [sp, 0x38]",
            "ldr r3, [0x00059718]",
            "add r3, ip, r3",
            "str r3, [sp, 0x3c]",
            "b 0x588c0",
            "ldr r3, [fp]",
            "mov sb, r4",
            "str r7, [r3, r6, lsl 2]",
            "add r6, r6, 1",
            "ldr ip, [sp, 0x18]",
            "add r4, sb, 4",
            "cmp ip, r4",
            "beq 0x58b9c",
            "ldr r7, [r4]",
            "ldrb r3, [r7]",
            "cmp r3, 0x2d",
            "bne 0x588a0",
            "ldrb r3, [r7, 1]",
            "add r5, r7, 1",
            "subs r1, r3, 0",
            "movne r1, 1",
            "cmp r2, 0",
            "movne r1, 0",
            "cmp r1, 0",
            "beq 0x588a0",
            "cmp r3, 0x4f",
            "movne r8, 0",
            "moveq r8, 1",
            "cmp r3, 0x2d",
            "movne r2, r8",
            "orreq r2, r8, 1",
            "cmp r2, 0",
            "moveq sb, r4",
            "moveq r8, r2",
            "moveq r7, r6",
            "bne 0x589c8",
            "ldr r4, [sp, 0x2c]",
            "ldr r0, [r4, 4]",
            "cmp r0, 0",
            "beq 0x596b0",
            "mov r2, 0",
            "add r6, r5, 1",
            "b 0x5894c",
            "ldr r0, [r4, 0x4c]",
            "add r4, r4, 0x48",
            "cmp r0, 0",
            "beq 0x591e4",
            "ldrb r3, [r5]",
            "cmp r0, r3",
            "bne 0x58938",
            "ldr r2, [r4, 0x18]",
            "and r3, r2, 0x7f",
            "cmp r3, 0xb",
            "beq 0x594cc",
            "cmp r3, 2",
            "ldrne r3, [r4, 0x1c]",
            "beq 0x58bb8",
            "sub r1, r3, 1",
            "cmp r1, 1",
            "bhi 0x59568",
            "ldrb r1, [r6]",
            "mov sl, r6",
            "cmp r1, 0",
            "bne 0x59520",
            "cmp r3, 1",
            "bne 0x59570",
            "cmp r2, 2",
            "ldreq r2, [r4, 0xc]",
            "mov r1, r4",
            "strbeq r3, [r2]",
            "ldreq r0, [r4, 4]",
            "mov r2, r8",
            "ldr ip, [sp, 0x44]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x58bf0",
            "mov r2, 1",
            "b 0x58938",
            "cmp r8, 0",
            "bne 0x58c1c",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [0x0005971c]",
            "mov r0, r5",
            "add r1, r2, r1",
            "mov r2, 0xd",
            "bl rsym.getopt_compare_strings",
            "subs sl, r0, 0",
            "beq 0x58c94",
            "ldrb r3, [r5, 1]",
            "add r5, r5, 1",
            "cmp r3, 0",
            "str r5, [sp, 0x34]",
            "beq 0x58c00",
            "ldr r2, [sp, 0x34]",
            "str r8, [sp, 0x48]",
            "mov sb, r4",
            "mov r1, 0x2e",
            "add r0, r2, 1",
            "bl rsym.strcend",
            "mov r1, 0x3d",
            "mov r7, r0",
            "ldr r0, [sp, 0x34]",
            "bl rsym.strcend",
            "rsb r0, r7, r0",
            "cmp r0, 1",
            "ble 0x58e68",
            "ldr r3, [sp, 0x34]",
            "add r0, sp, 0x6c",
            "rsb r2, r3, r7",
            "ldr r3, [0x00059720]",
            "ldr r1, [sp, 0x34]",
            "cmp r2, r3",
            "movhs r2, r3",
            "bl rsym.strmake",
            "add r7, r7, 1",
            "mov r1, 0x3d",
            "mov r0, r7",
            "bl rsym.strcend",
            "ldrb r3, [r0]",
            "rsb sl, r7, r0",
            "cmp r3, 0x3d",
            "addeq r0, r0, 1",
            "movne ip, 0",
            "ldr r1, [sp, 0x2c]",
            "strne ip, [sp, 0x4c]",
            "streq r0, [sp, 0x4c]",
            "ldr r0, [r1]",
            "cmp r0, 0",
            "moveq r5, r1",
            "beq 0x58b34",
            "mov r2, 0",
            "str sb, [sp, 0x1c]",
            "ldr sb, [sp, 0x40]",
            "str r4, [sp, 0x30]",
            "str r6, [sp, 0x24]",
            "mov r8, r1",
            "mov r4, r1",
            "mov r6, r2",
            "mov r1, r7",
            "mov r2, sl",
            "bl rsym.getopt_compare_strings",
            "cmp r0, 0",
            "mov r5, r8",
            "movne r5, r4",
            "bne 0x58b08",
            "ldr r3, [r8]",
            "mov r0, sb",
            "ldrb r2, [r3, sl]",
            "mov r1, r3",
            "cmp r2, 0",
            "beq 0x58d00",
            "cmp r6, 0",
            "moveq sb, r3",
            "moveq r6, 1",
            "beq 0x58b08",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "addne r6, r6, 1",
            "ldr r0, [r8, 0x48]!",
            "mov r4, r5",
            "cmp r0, 0",
            "bne 0x58ab8",
            "mov r2, r6",
            "cmp r2, 0",
            "str sb, [sp, 0x40]",
            "ldr r4, [sp, 0x30]",
            "ldr sb, [sp, 0x1c]",
            "ldr r6, [sp, 0x24]",
            "bne 0x59158",
            "ldr r2, [sp, 0x48]",
            "cmp r2, 0",
            "beq 0x58e78",
            "mov r3, 0",
            "mov ip, 1",
            "str r3, [sp, 0x30]",
            "str ip, [sp, 0x48]",
            "ldr r3, [0x00059724]",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [ip, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x59008",
            "lsl r3, r6, 2",
            "ldr r1, [r4], 4",
            "ldr r2, [fp]",
            "cmp sb, r4",
            "str r1, [r2, r3]",
            "add r6, r6, 1",
            "add r3, r3, 4",
            "bhs 0x58b6c",
            "ldr ip, [sp, 0x18]",
            "add r4, sb, 4",
            "cmp ip, r4",
            "mov r2, 0",
            "bne 0x588c0",
            "ldr sb, [fp]",
            "lsl r6, r6, 2",
            "str sb, [sp, 0x18]",
            "mov r1, sb",
            "mov r0, 0",
            "str r0, [r1, r6]",
            "b 0x58bf4",
            "ldr r3, [r4, 0x1c]",
            "cmp r3, 0",
            "bne 0x58970",
            "ldr r3, [r4, 0xc]",
            "mov r2, 1",
            "strb r2, [r3]",
            "mov r1, r4",
            "ldr r0, [r4, 4]",
            "mov r2, r8",
            "ldr r3, [sp, 0x44]",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "beq 0x589c0",
            "mov r0, 1",
            "add sp, sp, 0x274",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [sp, 0x28]",
            "mov sb, r4",
            "ldr r3, [r0]",
            "mov r2, 1",
            "sub r3, r3, 1",
            "str r3, [r0]",
            "b 0x588b0",
            "ldr lr, [sp, 0x20]",
            "ldr r3, [0x00059790]",
            "ldr r1, [0x00059728]",
            "ldr r7, [lr, r3]",
            "ldr r3, [0x00059794]",
            "add r1, lr, r1",
            "ldr r8, [lr, r3]",
            "mov r0, 1",
            "ldr r2, [r7]",
            "ldr ip, [r8]",
            "mov lr, pc",
            "bx ip",
            "ldrb r3, [r5, 1]",
            "add r5, r5, 1",
            "cmp r3, 0",
            "str r5, [sp, 0x34]",
            "bne 0x58cec",
            "ldr r0, [r4, 4]",
            "add sb, r4, 4",
            "cmp r0, 0",
            "str r0, [sp, 0x34]",
            "bne 0x59128",
            "ldr r3, [0x0005978c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x5944c",
            "mov r0, 5",
            "b 0x58bf4",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [0x00059790]",
            "ldr r1, [0x0005972c]",
            "ldr r8, [ip, r3]",
            "ldr r3, [0x00059794]",
            "ldr r2, [r8]",
            "ldr r3, [ip, r3]",
            "add r1, ip, r1",
            "str r3, [sp, 0x14]",
            "mov r0, 1",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "ldrb r2, [r5, 0xd]",
            "ldr r3, [sp, 0x14]",
            "cmp r2, 0x3d",
            "bne 0x59108",
            "ldrb r0, [r7, 0xf]",
            "add r7, r7, 0xf",
            "cmp r0, 0",
            "str r7, [sp, 0x34]",
            "beq 0x5940c",
            "mov r1, 1",
            "mov sb, r4",
            "str r1, [sp, 0x48]",
            "ldr r2, [sp, 0x34]",
            "b 0x58a10",
            "str sb, [sp, 0x40]",
            "ldr r6, [sp, 0x24]",
            "ldr sb, [sp, 0x1c]",
            "mov r1, 0",
            "str r1, [sp, 0x30]",
            "mov r8, r1",
            "ldr r3, [r5, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 0xb",
            "beq 0x58de0",
            "ldr ip, [sp, 0x48]",
            "cmp ip, 0",
            "bne 0x5906c",
            "mov r3, 0",
            "str r3, [sp, 0x26c]",
            "ldr r3, [r5, 0x18]",
            "tst r3, 0x80",
            "ldreq r7, [r5, 0xc]",
            "bne 0x5918c",
            "ldr r4, [r5, 0x1c]",
            "cmp r4, 0",
            "beq 0x59094",
            "cmp r4, 1",
            "beq 0x5925c",
            "ldr r0, [sp, 0x4c]",
            "cmp r0, 0",
            "cmpeq r4, 2",
            "bne 0x59150",
            "ldr r4, [sb, 4]!",
            "cmp r4, 0",
            "beq 0x598d8",
            "ldr ip, [sp, 0x28]",
            "ldr r3, [ip]",
            "sub r3, r3, 1",
            "str r3, [ip]",
            "mov r1, r7",
            "mov r3, r8",
            "mov r0, r5",
            "mov r2, r4",
            "bl fcn.0005843c",
            "cmp r0, 0",
            "str r0, [sp, 0x26c]",
            "bne 0x5966c",
            "mov r2, r4",
            "mov r1, r5",
            "ldr r0, [r5, 4]",
            "ldr r3, [sp, 0x44]",
            "mov lr, pc",
            "bx r3",
            "subs r2, r0, 0",
            "bne 0x58bf0",
            "ldr r4, [sp, 0x28]",
            "ldr r3, [r4]",
            "sub r3, r3, 1",
            "str r3, [r4]",
            "b 0x588b0",
            "ldr r3, [0x0005978c]",
            "ldr r2, [sp, 0x20]",
            "ldr r3, [r2, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x58e44",
            "ldr r3, [0x00059730]",
            "mov r4, r2",
            "ldr r2, [r2, r3]",
            "ldr r3, [0x00059790]",
            "ldr ip, [sp, 0x30]",
            "ldr r3, [r4, r3]",
            "cmp ip, 0",
            "ldr r0, [r2]",
            "ldr r3, [r3]",
            "bne 0x59220",
            "ldr ip, [0x00059734]",
            "ldr r1, [sp, 0x20]",
            "add ip, r4, ip",
            "ldr r2, [0x00059738]",
            "str ip, [sp]",
            "add r2, r1, r2",
            "mov r1, 1",
            "str r7, [sp, 4]",
            "bl sym.imp.__fprintf_chk",
            "ldr r2, [sp, 0x30]",
            "cmp r2, 0",
            "beq 0x59148",
            "ldr r4, [sp, 0x28]",
            "mov r2, 0",
            "ldr r3, [r4]",
            "sub r3, r3, 1",
            "str r3, [r4]",
            "b 0x588b0",
            "mov r3, 0",
            "strb r3, [sp, 0x6c]",
            "ldr r7, [sp, 0x34]",
            "b 0x58a5c",
            "ldr r0, [sp, 0x4c]",
            "mov lr, 0",
            "ldr r1, [sp, 0x54]",
            "subs r0, r0, lr",
            "movne r0, 1",
            "str sb, [sp, 0x60]",
            "str lr, [sp, 0x1c]",
            "str r0, [sp, 0x48]",
            "str r1, [sp, 0x24]",
            "str lr, [sp, 0x30]",
            "str r1, [sp, 0x5c]",
            "str r4, [sp, 0x64]",
            "mov sb, r6",
            "mov r2, lr",
            "ldr r3, [sp, 0x38]",
            "ldr r0, [sp, 0x24]",
            "ldr r4, [r3, r2, lsl 2]",
            "mov r1, r7",
            "mov r2, r4",
            "bl rsym.getopt_compare_strings",
            "subs r8, r0, 0",
            "bne 0x58fc4",
            "ldrb r3, [r7, r4]",
            "cmp r3, 0x2d",
            "cmpne r3, 0x5f",
            "bne 0x58fc4",
            "ldr lr, [sp, 0x1c]",
            "ldr r0, [r5]",
            "ldr ip, [sp, 0x30]",
            "cmp lr, 4",
            "moveq ip, 1",
            "mvn r3, r4",
            "cmp r0, 0",
            "add r4, r4, 1",
            "str ip, [sp, 0x30]",
            "add r7, r7, r4",
            "add sl, sl, r3",
            "beq 0x58f90",
            "str sb, [sp, 0x50]",
            "ldr sb, [sp, 0x40]",
            "mov r4, r5",
            "mov r6, r5",
            "mov r1, r7",
            "mov r2, sl",
            "bl rsym.getopt_compare_strings",
            "cmp r0, 0",
            "mov r5, r4",
            "movne r5, r6",
            "bne 0x58f70",
            "ldr r3, [r4]",
            "mov r0, sb",
            "ldrb r2, [r3, sl]",
            "mov r1, r3",
            "cmp r2, 0",
            "beq 0x59040",
            "cmp r8, 0",
            "moveq sb, r3",
            "moveq r8, 1",
            "beq 0x58f70",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "addne r8, r8, 1",
            "ldr r0, [r4, 0x48]!",
            "mov r6, r5",
            "cmp r0, 0",
            "bne 0x58f20",
            "cmp r8, 0",
            "str sb, [sp, 0x40]",
            "ldr sb, [sp, 0x50]",
            "bne 0x59948",
            "ldr r3, [sp, 0x5c]",
            "mov r4, 0",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x38]",
            "mov r2, r4",
            "str r4, [sp, 0x1c]",
            "ldr r4, [r3, r2, lsl 2]",
            "ldr r0, [sp, 0x24]",
            "mov r1, r7",
            "mov r2, r4",
            "bl rsym.getopt_compare_strings",
            "subs r8, r0, 0",
            "beq 0x58ed0",
            "ldr r2, [sp, 0x1c]",
            "ldr r3, [sp, 0x3c]",
            "add r2, r2, 1",
            "ldr r3, [r3, r2, lsl 2]",
            "str r2, [sp, 0x1c]",
            "cmp r3, 0",
            "str r3, [sp, 0x24]",
            "bne 0x58eb0",
            "ldr r3, [0x00059724]",
            "ldr ip, [sp, 0x20]",
            "mov r6, sb",
            "ldr r3, [ip, r3]",
            "ldr r4, [sp, 0x64]",
            "ldrb r3, [r3]",
            "ldr sb, [sp, 0x60]",
            "cmp r3, 0",
            "bne 0x58b68",
            "ldr r0, [sp, 0x48]",
            "cmp r0, 0",
            "beq 0x59230",
            "ldr r3, [0x0005978c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x592f0",
            "ldr ip, [sp, 0x30]",
            "cmp ip, 0",
            "bne 0x58e50",
            "mov r0, 7",
            "b 0x58bf4",
            "str sb, [sp, 0x40]",
            "ldr r6, [sp, 0x50]",
            "ldr sb, [sp, 0x60]",
            "ldr r0, [sp, 0x1c]",
            "cmp r0, 3",
            "addls pc, pc, r0, lsl 2",
            "b 0x59330",
            "b 0x59338",
            "b 0x59338",
            "b 0x5936c",
            "b 0x593a0",
            "cmp r3, 1",
            "bne 0x58d34",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x59470",
            "mov r0, 4",
            "b 0x58bf4",
            "ldr ip, [sp, 0x4c]",
            "cmp ip, 0",
            "beq 0x594a8",
            "ldr r3, [r5, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 2",
            "bne 0x5979c",
            "ldr ip, [sp, 0x28]",
            "ldr r3, [ip]",
            "sub r3, r3, 1",
            "str r3, [ip]",
            "ldr lr, [sp, 0x4c]",
            "ldrb r3, [lr]",
            "cmp r3, 0x31",
            "bne 0x5959c",
            "mov r3, 1",
            "strb r3, [r7]",
            "ldr r2, [0x0005973c]",
            "ldr r4, [sp, 0x20]",
            "ldr r0, [r5, 4]",
            "add r2, r4, r2",
            "mov r1, r5",
            "ldr r3, [sp, 0x44]",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "beq 0x58b88",
            "mov r0, 0xd",
            "b 0x58bf4",
            "ldrb r2, [r5, 0xe]",
            "cmp r2, 0",
            "bne 0x591d0",
            "ldr ip, [r4, 4]",
            "add sb, r4, 4",
            "cmp ip, 0",
            "str ip, [sp, 0x34]",
            "beq 0x597ec",
            "ldr ip, [sp, 0x28]",
            "mov lr, 1",
            "ldr r3, [ip]",
            "str lr, [sp, 0x48]",
            "sub r3, r3, 1",
            "str r3, [ip]",
            "ldr r2, [sp, 0x34]",
            "b 0x58a10",
            "mov r0, 0xc",
            "b 0x58bf4",
            "ldr r4, [sp, 0x4c]",
            "b 0x58d8c",
            "cmp r2, 1",
            "bls 0x58d0c",
            "ldr ip, [sp, 0x48]",
            "cmp ip, 0",
            "beq 0x59604",
            "ldr r3, [0x0005978c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x593ac",
            "mov r0, 6",
            "b 0x58bf4",
            "add r4, sp, 0x6c",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r2, r5",
            "mov r1, r0",
            "add r3, sp, 0x26c",
            "mov r0, r4",
            "ldr ip, [0x00059704]",
            "ldr r4, [sp, 0x20]",
            "ldr ip, [r4, ip]",
            "mov lr, pc",
            "bx ip",
            "mov r7, r0",
            "ldr r0, [sp, 0x26c]",
            "cmp r0, 0",
            "beq 0x58d4c",
            "b 0x58bf4",
            "str r5, [sp, 0x34]",
            "str sl, [sp, 0x48]",
            "mov sb, r4",
            "mov r2, r5",
            "b 0x58a10",
            "cmp r2, 0",
            "beq 0x596b0",
            "mov sl, r8",
            "ldrb r3, [r5, 1]!",
            "cmp r3, 0",
            "movne r8, sl",
            "bne 0x5891c",
            "ldr r2, [sp, 0x28]",
            "mov r6, r7",
            "ldr r1, [r2]",
            "mov r2, r3",
            "ldr r3, [sp, 0x28]",
            "sub r1, r1, 1",
            "str r1, [r3]",
            "b 0x588b0",
            "ldr ip, [0x00059740]",
            "mov r1, r4",
            "add ip, r4, ip",
            "b 0x58e2c",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x592b0",
            "ldr r3, [sp, 0x30]",
            "cmp r3, 0",
            "bne 0x58e50",
            "mov r0, 2",
            "b 0x58bf4",
            "ldr r3, [r5, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 2",
            "cmpne r3, 0xc",
            "bne 0x58d60",
            "ldr r3, [0x00059744]",
            "ldr r4, [sp, 0x20]",
            "ldr ip, [sp, 0x4c]",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3]",
            "cmp ip, r3",
            "beq 0x5992c",
            "cmp ip, 0",
            "bne 0x59150",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, 1",
            "mov r3, 0",
            "bl fcn.0005815c",
            "ldr r4, [sp, 0x4c]",
            "b 0x58d8c",
            "ldr r1, [sp, 0x30]",
            "ldr r2, [0x00059794]",
            "ldr r3, [0x00059790]",
            "ldr ip, [r0, r2]",
            "ldr r3, [r0, r3]",
            "ldr r2, [sp, 0x20]",
            "subs r0, r1, 0",
            "movne r0, 1",
            "ldr r1, [0x00059748]",
            "add r1, r2, r1",
            "ldr r2, [r3]",
            "ldr r3, [sp, 0x34]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "b 0x59248",
            "ldr r2, [0x00059794]",
            "ldr r3, [0x00059790]",
            "ldr ip, [r1, r2]",
            "ldr r3, [r1, r3]",
            "ldr r2, [sp, 0x30]",
            "ldr r4, [sp, 0x20]",
            "ldr r1, [0x0005974c]",
            "subs r0, r2, 0",
            "movne r0, 1",
            "add r1, r4, r1",
            "ldr r2, [r3]",
            "ldr r3, [sp, 0x34]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "b 0x5902c",
            "mov r8, 0",
            "b 0x58d18",
            "ldr r1, [sp, 0x4c]",
            "cmp r1, 0",
            "beq 0x59350",
            "ldrb r3, [r1]",
            "cmp r3, 0x30",
            "beq 0x59810",
            "ldr r3, [0x00059744]",
            "ldr r4, [sp, 0x20]",
            "mov r8, 0",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3]",
            "str r3, [sp, 0x4c]",
            "b 0x58d18",
            "ldr ip, [sp, 0x48]",
            "cmp ip, 0",
            "beq 0x59388",
            "ldr r0, [sp, 0x4c]",
            "ldrb r3, [r0]",
            "cmp r3, 0x30",
            "beq 0x593e8",
            "mov r8, 0",
            "ldr r3, [0x0005973c]",
            "ldr r2, [sp, 0x20]",
            "add r3, r2, r3",
            "str r3, [sp, 0x4c]",
            "b 0x58d18",
            "mov r8, 1",
            "str r8, [sp, 0x48]",
            "b 0x58d18",
            "ldr r2, [sp, 0x20]",
            "ldr r3, [0x00059790]",
            "ldr r4, [sp, 0x20]",
            "ldr r3, [r2, r3]",
            "ldr r1, [0x00059750]",
            "ldr r2, [0x00059794]",
            "add r1, r4, r1",
            "ldr ip, [r4, r2]",
            "ldr r2, [r3]",
            "mov r3, r7",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 6",
            "b 0x58bf4",
            "ldrb r8, [r0, 1]",
            "cmp r8, 0",
            "bne 0x59388",
            "ldr r3, [0x00059744]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldr r3, [r3]",
            "str r3, [sp, 0x4c]",
            "b 0x58d18",
            "mov fp, r3",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [0x0005978c]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x58c8c",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [0x00059754]",
            "add r1, r2, r1",
            "ldr r2, [r8]",
            "ldr ip, [fp]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 5",
            "b 0x58bf4",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [0x00059758]",
            "add r1, r2, r1",
            "ldr r2, [r7]",
            "ldr ip, [r8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 5",
            "b 0x58bf4",
            "ldr r3, [0x00059790]",
            "ldr r2, [0x00059794]",
            "ldr r3, [r0, r3]",
            "ldr r1, [0x0005975c]",
            "ldr ip, [r0, r2]",
            "add r1, r0, r1",
            "ldr r2, [r3]",
            "mov r0, 0",
            "ldr r3, [r5]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 4",
            "b 0x58bf4",
            "ldr r3, [r5, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 2",
            "bne 0x59150",
            "ldr r1, [sp, 0x28]",
            "ldr r3, [r1]",
            "sub r3, r3, 1",
            "str r3, [r1]",
            "b 0x590d0",
            "mov ip, r0",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x59148",
            "ldr r3, [0x00059730]",
            "ldr r1, [sp, 0x20]",
            "ldr r2, [r0, r3]",
            "ldr r3, [0x00059790]",
            "ldr r3, [r0, r3]",
            "ldr r0, [r2]",
            "ldr r2, [0x00059760]",
            "ldr r3, [r3]",
            "add r2, r1, r2",
            "mov r1, 1",
            "str ip, [sp]",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 0xc",
            "b 0x58bf4",
            "ldr r5, [sp, 0x58]",
            "mov r0, r4",
            "ldr r1, [r4, 0xc]",
            "mov r2, sl",
            "mov r3, 0",
            "bl fcn.0005843c",
            "cmp r0, 0",
            "str r0, [sp, 0x26c]",
            "bne 0x59894",
            "mov r1, r4",
            "ldr r0, [r4, 4]",
            "mov r2, sl",
            "ldr ip, [sp, 0x44]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x591f0",
            "b 0x58bf0",
            "mov sl, r8",
            "b 0x59524",
            "ldr sl, [sb, 4]!",
            "cmp sl, 0",
            "beq 0x599c0",
            "ldr r1, [sp, 0x28]",
            "ldr r3, [r1]",
            "sub r3, r3, 1",
            "str r3, [r1]",
            "b 0x59524",
            "mov r6, 0",
            "ldr r1, [sp, 0x18]",
            "b 0x58bac",
            "ldr r2, [sp, 0x20]",
            "ldr r3, [0x00059764]",
            "ldr r1, [sp, 0x4c]",
            "ldr r8, [r2, r3]",
            "ldr r3, [sp, 0x20]",
            "ldr r2, [0x00059768]",
            "mov r0, r8",
            "add r2, r3, r2",
            "ldr r3, [r8, 0x68]",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x590d0",
            "ldr ip, [sp, 0x4c]",
            "ldrb r3, [ip]",
            "cmp r3, 0x30",
            "bne 0x59820",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [0x00059744]",
            "mov r2, 0",
            "ldr r3, [r0, r3]",
            "strb r2, [r7]",
            "ldr r2, [r3]",
            "ldr r0, [r5, 4]",
            "b 0x590e8",
            "ldr r3, [0x0005978c]",
            "ldr ip, [sp, 0x20]",
            "ldr r3, [ip, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x59624",
            "mov r0, 3",
            "b 0x58bf4",
            "ldr lr, [sp, 0x40]",
            "ldr r3, [0x00059790]",
            "str lr, [sp]",
            "ldr r2, [r5]",
            "ldr r3, [ip, r3]",
            "str r2, [sp, 4]",
            "ldr r1, [0x0005976c]",
            "ldr r2, [0x00059794]",
            "add r1, ip, r1",
            "ldr r0, [sp, 0x48]",
            "ldr ip, [ip, r2]",
            "ldr r2, [r3]",
            "mov r3, r7",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 3",
            "b 0x58bf4",
            "ldr ip, [sp, 0x20]",
            "ldr r2, [r5]",
            "ldr r3, [0x00059790]",
            "str r2, [sp]",
            "ldr r3, [ip, r3]",
            "ldr r2, [0x00059794]",
            "ldr r1, [0x00059780]",
            "mov r0, 0",
            "add r1, ip, r1",
            "ldr ip, [ip, r2]",
            "ldr r2, [r3]",
            "mov r3, r4",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 0x26c]",
            "b 0x58bf4",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x59254",
            "ldr r3, [0x00059790]",
            "ldr r2, [0x00059794]",
            "ldr r3, [r0, r3]",
            "ldr r1, [0x00059770]",
            "ldr ip, [r0, r2]",
            "add r1, r0, r1",
            "ldr r2, [r3]",
            "mov r0, 0",
            "ldrb r3, [r5]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 2",
            "b 0x58bf4",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x5908c",
            "ldr r3, [0x00059790]",
            "ldr r2, [0x00059794]",
            "ldr r3, [r0, r3]",
            "ldr r1, [0x00059774]",
            "ldr ip, [r0, r2]",
            "add r1, r0, r1",
            "ldr r2, [r3]",
            "mov r0, r4",
            "ldr r3, [r5]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 4",
            "b 0x58bf4",
            "mov fp, r3",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [0x0005978c]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x58c8c",
            "mov r0, ip",
            "b 0x59428",
            "ldrb r8, [r1, 1]",
            "cmp r8, 0",
            "bne 0x59350",
            "b 0x5938c",
            "ldr lr, [sp, 0x20]",
            "ldr r2, [0x00059778]",
            "mov r0, r8",
            "add r2, lr, r2",
            "ldr r3, [r8, 0x68]",
            "mov r1, ip",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x595e4",
            "ldr r2, [sp, 0x4c]",
            "ldr r1, [sp, 0x20]",
            "str r2, [sp]",
            "ldr r3, [0x00059790]",
            "ldr r2, [0x00059794]",
            "ldr r3, [r1, r3]",
            "ldr ip, [r1, r2]",
            "ldr lr, [sp, 0x20]",
            "ldr r1, [0x0005977c]",
            "ldr r2, [r3]",
            "add r1, lr, r1",
            "ldr r3, [r5]",
            "mov r0, 1",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r2, r4",
            "b 0x588b0",
            "ldr r2, [r4]",
            "ldr r3, [0x00059790]",
            "ldr r4, [sp, 0x20]",
            "str r2, [sp]",
            "ldr r3, [r4, r3]",
            "ldr r2, [0x00059794]",
            "ldr r1, [0x00059780]",
            "ldr ip, [r4, r2]",
            "mov r0, 0",
            "ldr r2, [r3]",
            "add r1, r4, r1",
            "mov r3, sl",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 0x26c]",
            "b 0x58bf4",
            "ldr r3, [0x0005978c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x58c8c",
            "ldr r2, [0x00059794]",
            "ldr r3, [0x00059790]",
            "ldr ip, [r1, r2]",
            "ldr r3, [r1, r3]",
            "ldr r2, [sp, 0x20]",
            "ldr r1, [0x00059784]",
            "mov r0, r4",
            "add r1, r2, r1",
            "ldr r2, [r3]",
            "ldr r3, [r5]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 5",
            "b 0x58bf4",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.0005815c",
            "mov r4, 0",
            "b 0x58d8c",
            "cmp r8, 1",
            "mov r6, sb",
            "ldr sb, [sp, 0x60]",
            "beq 0x5904c",
            "ldr r3, [0x0005978c]",
            "ldr r1, [sp, 0x20]",
            "ldr r3, [r1, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x5961c",
            "ldr r2, [sp, 0x34]",
            "ldr r3, [0x00059790]",
            "ldr lr, [sp, 0x24]",
            "ldr r4, [sp, 0x40]",
            "ldr r3, [r1, r3]",
            "str r2, [sp]",
            "ldr ip, [sp, 0x20]",
            "ldr r2, [0x00059794]",
            "ldr r1, [0x00059788]",
            "str r4, [sp, 8]",
            "str lr, [sp, 4]",
            "add r1, ip, r1",
            "ldr ip, [ip, r2]",
            "ldr r2, [r3]",
            "mov r3, lr",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 3",
            "b 0x58bf4",
            "mov ip, r0",
            "ldr r3, [0x0005978c]",
            "ldr r0, [sp, 0x20]",
            "ldr r3, [r0, r3]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x58c8c",
            "ldr r3, [0x00059790]",
            "ldr r2, [0x00059794]",
            "ldr r3, [r0, r3]",
            "ldr r1, [0x00059798]",
            "ldr r4, [r0, r2]",
            "add r1, r0, r1",
            "ldr r2, [r3]",
            "mov r0, sl",
            "mov r3, ip",
            "ldr ip, [r4]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 5",
            "b 0x58bf4"
        ]
    },
    "fcn.0005815c": {
        "function_address": "0x0005815c",
        "instructions": [
            "push {r4, lr}",
            "mov ip, r0",
            "ldr r0, [r0, 0x18]",
            "sub sp, sp, 8",
            "and r0, r0, 0x7f",
            "sub r0, r0, 2",
            "mov r4, r1",
            "cmp r0, 0xc",
            "addls pc, pc, r0, lsl 2",
            "b 0x581e0",
            "b 0x58258",
            "b 0x58208",
            "b 0x581ec",
            "b 0x58208",
            "b 0x581ec",
            "b 0x58234",
            "b 0x58260",
            "b 0x58224",
            "b 0x581b8",
            "b 0x581e0",
            "b 0x5822c",
            "b 0x58250",
            "b 0x5827c",
            "cmp r2, 0",
            "beq 0x581e0",
            "ldr r0, [r1]",
            "str r2, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "ldr r2, [sp, 4]",
            "mov r1, 0x10",
            "mov r0, r2",
            "bl rsym.my_strdup",
            "str r0, [r4]",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "mov r3, r1",
            "mov r2, ip",
            "bl rsym.getopt_ull_limit_value",
            "str r0, [r4]",
            "b 0x581e0",
            "mov r0, r2",
            "asr r1, r0, 0x1f",
            "mov r3, 0",
            "mov r2, ip",
            "bl rsym.getopt_ll_limit_value",
            "str r0, [r4]",
            "b 0x581e0",
            "cmp r2, 0",
            "beq 0x581e0",
            "str r2, [r4]",
            "b 0x581e0",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, ip",
            "mov r3, 0",
            "bl rsym.getopt_ll_limit_value",
            "stm r4, {r0, r1}",
            "b 0x581e0",
            "stm r1, {r2, r3}",
            "b 0x581e0",
            "strb r2, [r1]",
            "b 0x581e0",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, ip",
            "mov r3, 0",
            "bl rsym.getopt_ull_limit_value",
            "stm r4, {r0, r1}",
            "b 0x581e0",
            "mov r0, r2",
            "mov r1, r3",
            "bl fcn.000bf334",
            "stm r4, {r0, r1}",
            "b 0x581e0"
        ]
    },
    "rsym.getopt_compare_strings": {
        "function_address": "0x0003fc10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x244]!"
        ]
    },
    "fcn.0005843c": {
        "function_address": "0x0005843c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, fp, lr}",
            "ldr r4, [0x00058740]",
            "cmp r2, 0",
            "cmpne r1, 0",
            "sub sp, sp, 0x18",
            "mov r7, r2",
            "add r4, pc, r4",
            "mov r5, r0",
            "beq 0x584ec",
            "cmp r3, 0",
            "mov r3, 0",
            "str r3, [sp, 0x14]",
            "ldrne r6, [r0, 0x10]",
            "moveq r6, r1",
            "cmp r6, 0",
            "moveq r0, 0xa",
            "beq 0x584f0",
            "ldr r3, [r5, 0x18]",
            "and r3, r3, 0x7f",
            "sub r3, r3, 2",
            "cmp r3, 0xc",
            "addls pc, pc, r3, lsl 2",
            "b 0x584ec",
            "b 0x58690",
            "b 0x58524",
            "b 0x584fc",
            "b 0x58524",
            "b 0x584fc",
            "b 0x58540",
            "b 0x585c0",
            "b 0x585b4",
            "b 0x58584",
            "b 0x584ec",
            "b 0x5855c",
            "b 0x584cc",
            "b 0x585dc",
            "mov r0, r2",
            "ldr r1, [r5, 0x14]",
            "add r2, sp, 0x14",
            "bl rsym.find_typeset",
            "stm r6, {r0, r1}",
            "ldr r3, [sp, 0x14]",
            "cmp r3, 0",
            "bne 0x586b8",
            "mov r0, 0",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sl, fp, lr}",
            "bx lr",
            "mov r0, r2",
            "mov r1, r5",
            "add r2, sp, 0x14",
            "bl fcn.00058418",
            "str r0, [r6]",
            "ldr r3, [sp, 0x14]",
            "cmp r3, 0",
            "movne r0, 9",
            "beq 0x584ec",
            "b 0x584f0",
            "mov r0, r2",
            "mov r1, r5",
            "add r2, sp, 0x14",
            "bl fcn.000583f4",
            "str r0, [r6]",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "mov r0, r2",
            "mov r1, r5",
            "add r2, sp, 0x14",
            "bl fcn.000583f4",
            "stm r6, {r0, r1}",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "mov r0, r2",
            "ldr r1, [r5, 0x14]",
            "mov r2, 2",
            "bl rsym.find_type",
            "sub r0, r0, 1",
            "cmp r0, 0",
            "str r0, [r6]",
            "blt 0x586c0",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "ldr r0, [r6]",
            "cmp r0, 0",
            "blne rsym.my_no_flags_free",
            "mov r0, r7",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "cmp r0, 0",
            "str r0, [r6]",
            "moveq r0, 8",
            "beq 0x584f0",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "str r2, [r6]",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "mov r0, r2",
            "mov r1, r5",
            "add r2, sp, 0x14",
            "bl fcn.00058418",
            "stm r6, {r0, r1}",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "add r3, r2, 0x3e8",
            "add r1, sp, 0x18",
            "str r3, [r1, -0xc]!",
            "mov r0, r2",
            "add r2, sp, 0x10",
            "bl rsym.my_strtod",
            "ldr r3, [sp, 0xc]",
            "mov sl, r0",
            "ldrb r3, [r3]",
            "mov fp, r1",
            "cmp r3, 0",
            "bne 0x586fc",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "bne 0x586fc",
            "ldr r0, [r5, 0x30]",
            "ldr r1, [r5, 0x34]",
            "orrs r3, r0, r1",
            "beq 0x58650",
            "bl fcn.000bf334",
            "mov r7, r0",
            "mov r8, r1",
            "mov r0, sl",
            "mov r1, fp",
            "mov r2, r7",
            "mov r3, r8",
            "bl fcn.000bf95c",
            "cmp r0, 0",
            "bne 0x58658",
            "mov r7, sl",
            "mov r8, fp",
            "add r1, r5, 0x28",
            "ldm r1, {r0, r1}",
            "bl fcn.000bf334",
            "mov r2, r7",
            "mov r3, r8",
            "mov r4, r0",
            "mov r5, r1",
            "bl fcn.000bf914",
            "cmp r0, 0",
            "moveq r7, r4",
            "moveq r8, r5",
            "stm r6, {r7, r8}",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "mov r0, r2",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "tst r0, 0xff",
            "moveq r3, 0",
            "movne r3, 1",
            "strb r3, [r6]",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "mov r0, 0xd",
            "b 0x584f0",
            "mov r0, r7",
            "add r1, sp, 0x10",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "ldr r3, [sp, 0x10]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x586b8",
            "ldr r3, [r5, 0x14]",
            "ldr r3, [r3]",
            "cmp r0, r3",
            "bhs 0x586b8",
            "str r0, [r6]",
            "ldr r3, [sp, 0x14]",
            "b 0x58514",
            "ldr r3, [0x00058744]",
            "ldr ip, [r5]",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x00058748]",
            "ldr r0, [r2]",
            "ldr r3, [r4, r3]",
            "ldr r2, [0x0005874c]",
            "ldr r3, [r3]",
            "add r2, r4, r2",
            "mov r1, 1",
            "str ip, [sp]",
            "bl sym.imp.__fprintf_chk",
            "mov r3, 0xd",
            "str r3, [sp, 0x14]",
            "mov r7, 0",
            "mov r8, 0",
            "b 0x58684"
        ]
    },
    "fcn.0007db40": {
        "function_address": "0x0007db40",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::DES_EDE2.SetKey_unsigned_char_const__unsigned_int__TaoCrypt::CipherDir_": {
        "function_address": "0x0009f6d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "add r0, r0, 0x38",
            "mov r6, r1",
            "mov r5, r2",
            "mov r7, r3",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "rsbs r3, r7, 1",
            "movlo r3, 0",
            "add r0, r4, 0xb8",
            "add r1, r6, 8",
            "mov r2, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "b rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE"
        ]
    },
    "rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE": {
        "function_address": "0x0003dcc0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x724]!"
        ]
    },
    "sym.mySTL::list_yaSSL::BulkCipher_::pop_back__": {
        "function_address": "0x0008951c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x89564",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.operator_new_unsigned_int__TaoCrypt::new_t_": {
        "function_address": "0x000b0780",
        "instructions": [
            "cmp r0, 0",
            "moveq r0, 1",
            "push {r4, lr}",
            "bl sym.imp.malloc",
            "cmp r0, 0",
            "beq 0xb07a0",
            "pop {r4, lr}",
            "bx lr",
            "bl sym.imp.abort"
        ]
    },
    "sym.yaSSL::SHA::SHA_yaSSL::SHA_const_": {
        "function_address": "0x0007df00",
        "instructions": [
            "ldr r3, [0x0007df4c]",
            "ldr r2, [0x0007df50]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt3SHAC1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.net_clear": {
        "function_address": "0x0007b208",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r1, 0",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "movne r5, sp",
            "beq 0x7b284",
            "ldr r3, [r4]",
            "mov r1, 1",
            "ldr r3, [r3]",
            "mov r2, 0",
            "str r3, [sp]",
            "mov r0, sp",
            "mov r3, 3",
            "strh r3, [sp, 4]",
            "bl sym.imp.poll",
            "cmp r0, 0",
            "ble 0x7b284",
            "ldrh r3, [sp, 6]",
            "tst r3, 3",
            "beq 0x7b284",
            "ldr r3, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r3",
            "ldr r2, [r4, 0x28]",
            "ldr ip, [r3, 0x68]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bgt 0x7b220",
            "mov r3, 2",
            "strb r3, [r4, 0x5c]",
            "ldr r2, [r4, 4]",
            "mov r3, 0",
            "str r2, [r4, 0xc]",
            "str r3, [r4, 0x30]",
            "str r3, [r4, 0x34]",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "fcn.0007c184": {
        "function_address": "0x0007c184",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Source::Source_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000810a0",
        "instructions": [
            "cmp r2, 0",
            "push {r4, r5, r6, lr}",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r5, r1",
            "moveq r0, r2",
            "bne 0x810e4",
            "str r0, [r4, 4]",
            "mov r1, r5",
            "ldr r2, [r4]",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0xc]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "b 0x810bc"
        ]
    },
    "method.TaoCrypt::Blowfish.SetKey_unsigned_char_const__unsigned_int__TaoCrypt::CipherDir_": {
        "function_address": "0x0009ddf8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r2",
            "ldr r7, [0x0009e084]",
            "sub r2, r2, 4",
            "sub sp, sp, 0x14",
            "cmp r2, 0x34",
            "add r7, pc, r7",
            "mov r4, r0",
            "mov r6, r1",
            "str r3, [sp, 4]",
            "bhi 0x9e060",
            "ldr r3, [0x0009e088]",
            "add r8, r0, 0x38",
            "ldr r1, [r7, r3]",
            "mov sl, 0",
            "mov r2, 0x48",
            "mov r0, r8",
            "str sl, [sp, 8]",
            "str sl, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "ldr r3, [0x0009e08c]",
            "add sb, r4, 0x80",
            "ldr r1, [r7, r3]",
            "mov r0, sb",
            "mov r2, 0x1000",
            "bl sym.imp.memcpy",
            "mov r7, r4",
            "add r0, sl, 1",
            "mov r1, r5",
            "bl fcn.000bee1c",
            "mov r0, sl",
            "ldrb fp, [r6, r1]",
            "mov r1, r5",
            "bl fcn.000bee1c",
            "ldrb r3, [r6, r1]",
            "add r0, sl, 2",
            "mov r1, r5",
            "orr fp, fp, r3, lsl 8",
            "bl fcn.000bee1c",
            "ldrb r3, [r6, r1]",
            "add r0, sl, 3",
            "lsl fp, fp, 8",
            "mov r1, r5",
            "orr fp, fp, r3",
            "bl fcn.000bee1c",
            "ldrb r2, [r6, r1]",
            "ldr r3, [r7, 0x38]",
            "lsl fp, fp, 8",
            "orr fp, fp, r2",
            "add sl, sl, 4",
            "eor fp, r3, fp",
            "cmp sl, 0x48",
            "str fp, [r7, 0x38]",
            "add r7, r7, 4",
            "bne 0x9de64",
            "add r6, r4, 0x40",
            "mov r0, r4",
            "add r1, sp, 8",
            "mov r2, r8",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "add r5, r4, 0x48",
            "mov r2, r6",
            "mov r1, r8",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r6",
            "mov r2, r5",
            "add r6, r4, 0x50",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r5",
            "mov r2, r6",
            "add r5, r4, 0x58",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r6",
            "mov r2, r5",
            "add r6, r4, 0x60",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r5",
            "mov r2, r6",
            "add r5, r4, 0x68",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r6",
            "mov r2, r5",
            "add r6, r4, 0x70",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r5",
            "mov r2, r6",
            "add r5, r4, 0x78",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r6",
            "mov r2, r5",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, sb",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "ldr r7, [0x0009e090]",
            "mov r5, 0",
            "mov r6, 0x20",
            "add r5, r5, 2",
            "add r1, r4, r6, lsl 2",
            "add r6, r5, 0x20",
            "mov r0, r4",
            "add r2, r4, r6, lsl 2",
            "bl rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj",
            "cmp r5, r7",
            "bne 0x9dfa0",
            "ldr r0, [sp, 4]",
            "cmp r0, 1",
            "bne 0x9e054",
            "ldr r7, [r4, 0x3c]",
            "ldr r6, [r4, 0x40]",
            "ldr r5, [r4, 0x44]",
            "ldr ip, [r4, 0x48]",
            "ldr fp, [r4, 0x70]",
            "ldr r8, [r4, 0x78]",
            "str r7, [r4, 0x78]",
            "ldr r7, [r4, 0x74]",
            "ldr sl, [r4, 0x38]",
            "ldr sb, [r4, 0x7c]",
            "add r0, r4, 0x4c",
            "ldm r0, {r0, r1, r2, r3}",
            "str r7, [r4, 0x40]",
            "str r6, [r4, 0x74]",
            "ldr r7, [r4, 0x64]",
            "ldr r6, [r4, 0x68]",
            "str fp, [r4, 0x44]",
            "str r5, [r4, 0x70]",
            "ldr fp, [r4, 0x60]",
            "ldr r5, [r4, 0x6c]",
            "str ip, [r4, 0x6c]",
            "ldr ip, [r4, 0x5c]",
            "str sb, [r4, 0x38]",
            "str sl, [r4, 0x7c]",
            "str r8, [r4, 0x3c]",
            "str r5, [r4, 0x48]",
            "str r6, [r4, 0x4c]",
            "str r0, [r4, 0x68]",
            "str r7, [r4, 0x50]",
            "str r1, [r4, 0x64]",
            "str fp, [r4, 0x54]",
            "str r2, [r4, 0x60]",
            "str ip, [r4, 0x58]",
            "str r3, [r4, 0x5c]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x0009e094]",
            "ldr r1, [0x0009e098]",
            "ldr r0, [0x0009e09c]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt8Blowfish11crypt_blockEPKjPj": {
        "function_address": "0x00040948",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x974]!"
        ]
    },
    "sym.TaoCrypt::Integer::Power2_unsigned_int_": {
        "function_address": "0x000abec8",
        "instructions": [
            "add r2, r1, 0x20",
            "push {r4, r5, r6, lr}",
            "lsr r2, r2, 5",
            "mov r4, r0",
            "mov r5, r1",
            "mov r1, 0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, 1",
            "bl rsym._ZN8TaoCrypt7Integer6SetBitEjb",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6SetBitEjb": {
        "function_address": "0x0003e08c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x49c]!"
        ]
    },
    "sym.yaSSL_set_compression": {
        "function_address": "0x00085d88",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL3SSL14SetCompressionEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::get_macSecret_bool_": {
        "function_address": "0x00091e50",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r4, r0, 0x68",
            "mov r0, r4",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x91ea4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0x91e98",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r0, r0, 0xa8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "cmp r5, 0",
            "beq 0x91e84",
            "b 0x91eac",
            "cmp r5, 0",
            "bne 0x91e70",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r0, r0, 0x94",
            "b 0x91e90"
        ]
    },
    "sym.yaSSL::Buffers::SetRawInput_yaSSL::input_buffer_": {
        "function_address": "0x00092348",
        "instructions": [
            "ldr r3, [r0, 0x18]",
            "ldr r2, [0x00092390]",
            "cmp r3, 0",
            "push {r4, lr}",
            "add r2, pc, r2",
            "bne 0x9236c",
            "str r1, [r0, 0x18]",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x00092394]",
            "ldr r1, [0x00092398]",
            "ldr r0, [0x0009239c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xac",
            "ldr r2, [0x000923a0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.vio_timeout": {
        "function_address": "0x00079f64",
        "instructions": [
            "str lr, [sp, -4]!",
            "mov r3, 0",
            "sub sp, sp, 0x14",
            "cmp r1, r3",
            "str r2, [sp, 8]",
            "str r3, [sp, 0xc]",
            "mov ip, 8",
            "ldr r0, [r0]",
            "movne r2, 0x15",
            "moveq r2, 0x14",
            "mov r1, 1",
            "add r3, sp, 8",
            "str ip, [sp]",
            "bl sym.imp.setsockopt",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::KeyInnerHash__": {
        "function_address": "0x000bad80",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r1, [r4]",
            "add r0, r0, 0x10",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r3, 1",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DES::decrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x000807fc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r7, 0xec]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "add r4, r7, 0xb8",
            "bne 0x80874",
            "ldr r1, [r7, 0xbc]",
            "mov r0, r3",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80868",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x80834",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x80868",
            "ldr r2, [r7, 0xe8]",
            "cmp r2, 0",
            "bne 0x808f4",
            "mov r0, r3",
            "ldr r1, [r7, 0xbc]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80868",
            "ldr r2, [r7, 0xbc]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x808a0",
            "b 0x80868",
            "mov r0, r3",
            "ldr r1, [r7, 0xbc]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80868",
            "ldr r2, [r7, 0xbc]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80910",
            "b 0x80868"
        ]
    },
    "sym.yaSSL::DES::set_decryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007e83c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "add r0, r4, 0xf0",
            "mov r2, 8",
            "mov r3, 1",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "mov r1, r5",
            "ldr r2, [r4, 0xbc]",
            "ldr r0, [r4, 0xc0]",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::RecordLayerHeader_": {
        "function_address": "0x0008c2f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0008c388]",
            "sub sp, sp, 8",
            "mov r6, r1",
            "mov r1, r5",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r5",
            "str r3, [r6]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r5",
            "strb r3, [r6, 4]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r5",
            "strb r3, [r6, 5]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r5",
            "mov r0, r4",
            "strb r3, [sp, 4]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "add r1, r6, 6",
            "add r0, sp, 4",
            "strb r3, [sp, 5]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::SetBit_unsigned_int__bool_": {
        "function_address": "0x000abd74",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r4, [0x000abeb8]",
            "cmp r2, 0",
            "add r4, pc, r4",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "mov r6, r1",
            "bne 0xabdcc",
            "ldr r2, [r0]",
            "lsr r3, r1, 5",
            "cmp r3, r2",
            "blo 0xabdb0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r2, [r0, 4]",
            "and r6, r1, 0x1f",
            "ldr r1, [r2, r3, lsl 2]",
            "mov r0, 1",
            "bic r6, r1, r0, lsl r6",
            "str r6, [r2, r3, lsl 2]",
            "b 0xabda4",
            "add r0, r1, 0x20",
            "lsr r0, r0, 5",
            "cmp r0, 8",
            "bls 0xabe14",
            "cmp r0, 0x10",
            "movls r7, 0x10",
            "bls 0xabe24",
            "cmp r0, 0x20",
            "movls r7, 0x20",
            "bls 0xabe24",
            "cmp r0, 0x40",
            "movls r7, 0x40",
            "bls 0xabe24",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r7, 1",
            "lsl r7, r7, r0",
            "b 0xabe24",
            "ldr r3, [0x000abebc]",
            "add r3, r4, r3",
            "add r0, r3, r0, lsl 2",
            "ldr r7, [r0, 0x5ec]",
            "ldr r2, [r5]",
            "cmp r7, r2",
            "movls r7, r2",
            "bls 0xabe6c",
            "ldr r1, [r5, 4]",
            "mov ip, 1",
            "mov r3, r7",
            "add r0, r5, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r5]",
            "str r0, [r5, 4]",
            "rsb r2, r3, r7",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r7, [r5]",
            "lsr r3, r6, 5",
            "cmp r3, r7",
            "bhs 0xabe94",
            "ldr r2, [r5, 4]",
            "and r6, r6, 0x1f",
            "ldr r1, [r2, r3, lsl 2]",
            "mov r0, 1",
            "orr r6, r1, r0, lsl r6",
            "str r6, [r2, r3, lsl 2]",
            "b 0xabda4",
            "ldr r3, [0x000abebc]",
            "ldr r1, [0x000abec0]",
            "ldr r0, [0x000abec4]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::input_buffer_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::input_buffer_::iterator__mySTL::list_yaSSL::input_buffer_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089e50",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89e80",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89e68",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_strntoull_8bit": {
        "function_address": "0x0005dc3c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r6, r1, r2",
            "sub sp, sp, 0x1c",
            "str r1, [sp, 8]",
            "cmp r1, r6",
            "ldr r1, [sp, 0x44]",
            "mov r2, 0",
            "str r2, [r1]",
            "mov r7, r3",
            "bhs 0x5def0",
            "ldr ip, [sp, 8]",
            "ldr r2, [r0, 0x20]",
            "ldrb r3, [ip]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5def0",
            "mov r4, ip",
            "b 0x5dc9c",
            "ldrb r3, [r4]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5dca8",
            "add r4, r4, 1",
            "cmp r6, r4",
            "bhi 0x5dc88",
            "cmp r4, r6",
            "beq 0x5deac",
            "ldrb r5, [r4]",
            "cmp r5, 0x2d",
            "moveq r1, 1",
            "addeq r4, r4, 1",
            "streq r1, [sp, 0x14]",
            "beq 0x5de64",
            "cmp r5, 0x2b",
            "beq 0x5de58",
            "mov r2, r7",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, r7",
            "str r0, [sp]",
            "mov r8, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "mov r1, 0",
            "str r2, [sp, 0xc]",
            "str r4, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "mov r2, 0",
            "mov sb, r7",
            "asr sl, sb, 0x1f",
            "str r2, [sp, 4]",
            "mov fp, sl",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, r6",
            "mov sl, sb",
            "b 0x5dd84",
            "bne 0x5dd48",
            "ldr ip, [sp]",
            "cmp r2, ip",
            "bhi 0x5ddcc",
            "ldr ip, [sp]",
            "cmp ip, r2",
            "beq 0x5de2c",
            "mul sb, r2, fp",
            "umull r5, r6, r2, sl",
            "mla ip, sl, r3, sb",
            "and r2, r1, 0xff",
            "mov r3, 0",
            "adds r2, r2, r5",
            "add r6, ip, r6",
            "add r4, r4, 1",
            "adc r3, r3, r6",
            "cmp r0, r4",
            "beq 0x5dde0",
            "ldrb r5, [r4]",
            "sub r1, r5, 0x30",
            "and r1, r1, 0xff",
            "cmp r1, 9",
            "bls 0x5ddbc",
            "sub r1, r5, 0x41",
            "cmp r1, 0x19",
            "subls r1, r5, 0x37",
            "andls r1, r1, 0xff",
            "bls 0x5ddbc",
            "sub r1, r5, 0x61",
            "cmp r1, 0x19",
            "bhi 0x5dde0",
            "sub r1, r5, 0x57",
            "and r1, r1, 0xff",
            "cmp r7, r1",
            "ble 0x5dde0",
            "cmp r3, r8",
            "bls 0x5dd38",
            "mov r1, 1",
            "str r1, [sp, 4]",
            "add r4, r4, 1",
            "cmp r0, r4",
            "bne 0x5dd80",
            "ldr ip, [sp, 0x10]",
            "cmp r4, ip",
            "beq 0x5deac",
            "ldr r1, [sp, 0x40]",
            "cmp r1, 0",
            "strne r4, [r1]",
            "ldr ip, [sp, 4]",
            "cmp ip, 0",
            "beq 0x5ded8",
            "ldr r1, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r1]",
            "mvn r2, 0",
            "mvn r3, 0",
            "mov r1, r3",
            "mov r0, r2",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r8, r3",
            "bne 0x5dd54",
            "ldr ip, [sp, 0xc]",
            "cmp r1, ip",
            "bls 0x5dd54",
            "ldr ip, [sp]",
            "mov r1, 1",
            "mov r2, ip",
            "mov r3, r8",
            "str r1, [sp, 4]",
            "b 0x5ddd4",
            "mov r2, 0",
            "add r4, r4, 1",
            "str r2, [sp, 0x14]",
            "cmp r4, r6",
            "beq 0x5deac",
            "mov r2, r7",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, r7",
            "str r0, [sp]",
            "mov r8, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "str r2, [sp, 0xc]",
            "ldrb r5, [r4]",
            "str r4, [sp, 0x10]",
            "b 0x5dd10",
            "ldr r1, [sp, 0x40]",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x21",
            "str r3, [r2]",
            "cmp r1, 0",
            "ldrne r3, [sp, 8]",
            "ldrne ip, [sp, 0x40]",
            "mov r2, 0",
            "strne r3, [ip]",
            "mov r3, 0",
            "b 0x5de18",
            "ldr ip, [sp, 0x14]",
            "cmp ip, 0",
            "beq 0x5de18",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "b 0x5de18",
            "ldr r4, [sp, 8]",
            "b 0x5dca8"
        ]
    },
    "sym.end_io_cache": {
        "function_address": "0x00054758",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x70]",
            "mov r4, r0",
            "cmp r3, 0",
            "beq 0x5477c",
            "mov lr, pc",
            "bx r3",
            "mov r3, 0",
            "str r3, [r4, 0x70]",
            "ldrb r5, [r4, 0xa0]",
            "cmp r5, 0",
            "beq 0x547c0",
            "ldr r3, [r4, 0x88]",
            "mov r5, 0",
            "cmn r3, 1",
            "strb r5, [r4, 0xa0]",
            "beq 0x547ac",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym.my_b_flush_io_cache",
            "mov r5, r0",
            "ldr r0, [r4, 0x18]",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [r4, 0x18]",
            "str r3, [r4, 0x10]",
            "ldr r3, [r4, 0x64]",
            "cmp r3, 3",
            "beq 0x547d8",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r3, 0",
            "str r3, [r4, 0x64]",
            "add r0, r4, 0x38",
            "bl sym.imp.pthread_mutex_destroy",
            "b 0x547cc"
        ]
    },
    "sym.yaSSL_CTX_get_verify_mode": {
        "function_address": "0x00085aec",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x34]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::output_buffer::allocate_unsigned_int_": {
        "function_address": "0x0007bdd0",
        "instructions": [
            "ldr r3, [r0, 4]",
            "ldr r2, [0x0007be30]",
            "cmp r3, 0",
            "push {r4, r5, r6, lr}",
            "add r2, pc, r2",
            "mov r4, r0",
            "mov r5, r1",
            "bne 0x7be0c",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "stmib r4, {r0, r5}",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x0007be34]",
            "ldr r1, [0x0007be38]",
            "ldr r0, [0x0007be3c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xd4",
            "mov r2, 0xf0",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::DiffieHellman::DiffieHellman_yaSSL::DiffieHellman_const_": {
        "function_address": "0x0007f1d8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r6, [r6]",
            "mov r5, r0",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r1, r6, 0x10",
            "add r0, r5, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [r6, 0x20]",
            "mov r3, 0",
            "str r2, [r5, 0x20]",
            "str r3, [r5, 0x2c]",
            "str r3, [r5, 0x24]",
            "str r3, [r5, 0x28]",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r6, r0",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x24]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x28]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r5, [r4]",
            "str r0, [r5, 0x2c]",
            "ldr r1, [r5, 0x20]",
            "mov r0, r5",
            "ldr r2, [r5, 0x28]",
            "ldr r3, [r5, 0x24]",
            "bl rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_hash_delete": {
        "function_address": "0x00053138",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0xc]",
            "sub sp, sp, 0x34",
            "cmp r3, 0",
            "mov r5, r0",
            "mov r6, r1",
            "bne 0x53164",
            "mov r0, 1",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r0, 0x28]",
            "ldr r8, [r0, 8]",
            "cmp r3, 0",
            "ldr r4, [r0, 0x14]",
            "beq 0x53414",
            "mov r0, r1",
            "mov r2, 0",
            "add r1, sp, 0x2c",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x2c]",
            "mov r1, r0",
            "mov r0, 1",
            "ldr r3, [r5, 0x30]",
            "str r0, [sp, 0x28]",
            "mov r0, 4",
            "str r0, [sp, 0x24]",
            "add r7, sp, 0x28",
            "add sl, sp, 0x24",
            "ldr ip, [r3, 0x68]",
            "mov r0, r3",
            "str sl, [sp]",
            "mov r3, r7",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 0x28]",
            "ldr ip, [r5, 0xc]",
            "sub sb, r8, 1",
            "and r3, sb, r2",
            "cmp ip, r3",
            "lsrls r3, r8, 1",
            "subls r3, r3, 1",
            "andls r3, r3, r2",
            "add r2, r4, r3, lsl 3",
            "ldr r1, [r2, 4]",
            "cmp r1, r6",
            "moveq r0, 0",
            "bne 0x53218",
            "b 0x53228",
            "mov r0, r2",
            "add r2, r4, r3, lsl 3",
            "ldr r1, [r2, 4]",
            "cmp r1, r6",
            "beq 0x53228",
            "ldr r3, [r4, r3, lsl 3]",
            "cmn r3, 1",
            "bne 0x53204",
            "b 0x53154",
            "ldr r3, [r5, 8]",
            "sub ip, ip, 1",
            "lsr r3, r3, 1",
            "cmp ip, r3",
            "strlo r3, [r5, 8]",
            "str ip, [r5, 0xc]",
            "rsb r3, r4, r2",
            "add ip, r4, ip, lsl 3",
            "cmp r0, 0",
            "str ip, [sp, 0xc]",
            "asr r3, r3, 3",
            "beq 0x53458",
            "ldr r1, [r2]",
            "str r2, [sp, 8]",
            "str r1, [r0]",
            "ldr lr, [sp, 8]",
            "str r3, [sp, 0x14]",
            "ldr r0, [sp, 0xc]",
            "cmp lr, r0",
            "beq 0x533e8",
            "ldr r3, [r5, 0x28]",
            "ldr r0, [r0, 4]",
            "cmp r3, 0",
            "beq 0x53424",
            "mov r1, sl",
            "mov r2, 0",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x24]",
            "mov r1, r0",
            "add ip, sp, 0x30",
            "mov r0, 4",
            "ldr r3, [r5, 0x30]",
            "str r0, [ip, -4]!",
            "str ip, [sp, 0x10]",
            "mov r0, 1",
            "ldr lr, [sp, 0x10]",
            "str r0, [sp, 0x28]",
            "ldr ip, [r3, 0x68]",
            "mov r0, r3",
            "str lr, [sp]",
            "mov r3, r7",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 0x28]",
            "ldr r2, [r5, 8]",
            "str r0, [sp, 0x18]",
            "ldr r1, [r5, 0xc]",
            "sub r3, r2, 1",
            "and r3, r3, r0",
            "cmp r1, r3",
            "lsrls r3, r2, 1",
            "subls r3, r3, 1",
            "andls r3, r3, r0",
            "lsl r3, r3, 3",
            "ldr r1, [sp, 8]",
            "add fp, r4, r3",
            "cmp fp, r1",
            "str r3, [sp, 0x1c]",
            "beq 0x53434",
            "ldr r3, [r5, 0x28]",
            "ldr r0, [fp, 4]",
            "cmp r3, 0",
            "beq 0x53448",
            "ldr r1, [sp, 0x10]",
            "mov r2, 0",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x2c]",
            "mov r1, r0",
            "mov r3, 1",
            "ldr ip, [r5, 0x30]",
            "str r3, [sp, 0x28]",
            "mov r3, 4",
            "str r3, [sp, 0x24]",
            "mov r0, ip",
            "mov r3, r7",
            "ldr ip, [ip, 0x68]",
            "str sl, [sp]",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 8]",
            "ldr r1, [sp, 0x28]",
            "sub r2, r3, 1",
            "ldr r0, [r5, 0xc]",
            "and r2, r2, r1",
            "cmp r0, r2",
            "lsrls r3, r3, 1",
            "subls r2, r3, 1",
            "andls r2, r2, r1",
            "lsl r2, r2, 3",
            "add r3, r4, r2",
            "cmp fp, r3",
            "beq 0x53498",
            "ldr ip, [sp, 8]",
            "ldm fp, {r0, r1}",
            "stm ip, {r0, r1}",
            "ldr lr, [sp, 0xc]",
            "rsb r3, r4, r3",
            "ldm lr, {r0, r1}",
            "stm fp, {r0, r1}",
            "rsb fp, r4, fp",
            "asr fp, fp, 3",
            "asr r3, r3, 3",
            "add r2, r4, r3, lsl 3",
            "ldr r3, [r4, r3, lsl 3]",
            "cmp fp, r3",
            "bne 0x533d0",
            "ldr r0, [sp, 0x14]",
            "str r0, [r2]",
            "add r0, r5, 0x14",
            "bl rsym.pop_dynamic",
            "ldr r3, [r5, 0x2c]",
            "cmp r3, 0",
            "moveq r0, r3",
            "beq 0x53158",
            "mov r0, r6",
            "mov lr, pc",
            "bx r3",
            "mov r0, 0",
            "b 0x53158",
            "ldm r0, {r1, r2}",
            "add r1, r6, r1",
            "str r2, [sp, 0x2c]",
            "b 0x53194",
            "ldm r5, {r1, r2}",
            "add r1, r0, r1",
            "str r2, [sp, 0x24]",
            "b 0x532a0",
            "ldr r2, [sp, 0xc]",
            "mov r3, r1",
            "ldm r2, {r0, r1}",
            "stm r3, {r0, r1}",
            "b 0x533e8",
            "ldm r5, {r1, r2}",
            "add r1, r0, r1",
            "str r2, [sp, 0x2c]",
            "b 0x53344",
            "ldr r0, [r2]",
            "cmn r0, 1",
            "str r0, [sp, 0x14]",
            "streq r2, [sp, 8]",
            "streq r3, [sp, 0x14]",
            "moveq lr, r2",
            "beq 0x5326c",
            "add r1, r4, r0, lsl 3",
            "str r1, [sp, 8]",
            "ldr r3, [r1, 4]",
            "str r3, [r2, 4]",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [r4, ip, lsl 3]",
            "str r3, [r2]",
            "ldr lr, [sp, 8]",
            "b 0x5326c",
            "ldr lr, [sp, 0x18]",
            "add ip, r0, 1",
            "and r3, sb, lr",
            "cmp ip, r3",
            "lsrls r3, r8, 1",
            "subls r3, r3, 1",
            "and sb, sb, r1",
            "andls r3, r3, lr",
            "cmp ip, sb",
            "lsrls r8, r8, 1",
            "subls sb, r8, 1",
            "andls sb, sb, r1",
            "cmp r3, sb",
            "mvnne r3, 0",
            "beq 0x53510",
            "ldr lr, [sp, 0xc]",
            "ldr ip, [sp, 8]",
            "ldm lr, {r0, r1}",
            "stm ip, {r0, r1}",
            "ldr lr, [sp, 0x1c]",
            "ldr r1, [sp, 0x14]",
            "ldr ip, [r4, lr]",
            "add r0, r4, r1, lsl 3",
            "ldr r1, [r4, r1, lsl 3]",
            "cmp r3, r1",
            "bne 0x534f0",
            "str ip, [r0]",
            "ldr r0, [sp, 0x14]",
            "str r0, [r4, r2]",
            "b 0x533e8",
            "cmp r0, r3",
            "beq 0x53554",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [sp, 8]",
            "ldm r2, {r0, r1}",
            "stm r3, {r0, r1}",
            "rsb r1, r4, r2",
            "rsb r3, r4, fp",
            "asr r1, r1, 3",
            "asr r3, r3, 3",
            "add r2, r4, r3, lsl 3",
            "ldr r3, [r4, r3, lsl 3]",
            "cmp r1, r3",
            "bne 0x53538",
            "ldr ip, [sp, 0x14]",
            "str ip, [r2]",
            "b 0x533e8",
            "rsb r3, r4, fp",
            "asr r3, r3, 3",
            "b 0x534d4"
        ]
    },
    "rsym.pop_dynamic": {
        "function_address": "0x0003eec0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb24]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::Init__": {
        "function_address": "0x000bb17c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "add r0, r0, 0x10",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_yaSSL::SSL_SESSION_.push_front_yaSSL::SSL_SESSION_": {
        "function_address": "0x00087c2c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::SSL_SESSION__yaSSL::SSL_SESSION_": {
        "function_address": "0x00089e8c",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL11SSL_SESSIOND1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_read": {
        "function_address": "0x0008536c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x10",
            "mov r6, r1",
            "mov r0, r2",
            "mov r1, 0x4000",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "lsl r1, r0, 0x10",
            "mov r2, r6",
            "lsr r1, r1, 0x10",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL4DataC1EtPh",
            "mov r0, r5",
            "mov r1, sp",
            "mov r2, 0",
            "mov r4, sp",
            "bl rsym._ZN5yaSSL11receiveDataERNS_3SSLERNS_4DataEb",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3minIiEET_S1_S1_": {
        "function_address": "0x0003e440",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x224]!"
        ]
    },
    "rsym._ZN5yaSSL4DataC1EtPh": {
        "function_address": "0x0003eac4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdcc]!"
        ]
    },
    "rsym._ZN5yaSSL11receiveDataERNS_3SSLERNS_4DataEb": {
        "function_address": "0x0003ecc8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc74]!"
        ]
    },
    "sym.yaSSL_get_cipher": {
        "function_address": "0x00085e64",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "add r0, r0, 0xaf",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d340": {
        "function_address": "0x0007d340",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d384]",
            "ldr r3, [0x0007d388]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_MD512HMAC_MD5ImplEEEvPT_",
            "ldr r3, [0x0007d38c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_8HMAC_MD512HMAC_MD5ImplEEEvPT_": {
        "function_address": "0x000406b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb2c]!"
        ]
    },
    "fcn.0007c008": {
        "function_address": "0x0007c008",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "str r0, [r4, 4]",
            "str r0, [r4]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "str r0, [r4, 8]",
            "str r5, [r4, 0xc]",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL12input_buffer6assignEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.0007c44c": {
        "function_address": "0x0007c44c",
        "instructions": [
            "push {r4, lr}",
            "str r1, [r0]",
            "mov r4, r0",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_TaoCrypt::Signer_.remove_TaoCrypt::Signer_": {
        "function_address": "0x00087a4c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x87aa4",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x87abc",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x87aac",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE8pop_backEv",
            "mov r0, 1",
            "b 0x87aa4",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9pop_frontEv",
            "mov r0, 1",
            "b 0x87aa4"
        ]
    },
    "rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE7look_upES3_": {
        "function_address": "0x00040054",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf6c]!"
        ]
    },
    "fcn.0007f5bc": {
        "function_address": "0x0007f5bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "sub sp, sp, 0x2c",
            "mov sb, r1",
            "mov r7, r2",
            "mov fp, r3",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [sp, 0x5c]",
            "add sl, r0, 0x10",
            "ldr r3, [r3]",
            "mov r5, r0",
            "str r3, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r3, [sp, 4]",
            "mov r4, 0",
            "add r8, sp, 0x18",
            "str r3, [r5, 0x20]",
            "mov r1, sb",
            "mov r2, r7",
            "str r4, [r5, 0x24]",
            "str r4, [r5, 0x28]",
            "str r4, [r5, 0x2c]",
            "str r5, [r6]",
            "mov r3, r4",
            "add r7, sp, 8",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r3, r4",
            "ldr r2, [sp, 0x50]",
            "mov r1, fp",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, r8",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r7",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r5, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, 0",
            "ldr r0, [sp, 0x58]",
            "ldr r4, [r6]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldr r3, [r6]",
            "str r0, [r4, 0x24]",
            "ldr r0, [r3, 0x24]",
            "ldr r1, [sp, 0x54]",
            "ldr r2, [sp, 0x58]",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RandomNumberGenerator::GenerateBlock_unsigned_char__unsigned_int_": {
        "function_address": "0x000b097c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "mov r6, r0",
            "mov r1, 0",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r1, r4",
            "add r0, r6, 8",
            "mov r3, r5",
            "mov r2, r4",
            "bl rsym._ZN8TaoCrypt4ARC47ProcessEPhPKhj",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientDiffieHellmanPublic::read_yaSSL::SSL__yaSSL::input_buffer_": {
        "function_address": "0x0008e614",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "sub sp, sp, 0xc",
            "mov r0, r1",
            "mov r7, r2",
            "mov r5, r1",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto6use_dhEv",
            "ldr r1, [0x0008e710]",
            "mov r4, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008e710]",
            "mov r0, r7",
            "strb r3, [sp, 4]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "add r1, sp, 6",
            "add r0, sp, 4",
            "strb r3, [sp, 5]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r0, r6",
            "ldrh r1, [sp, 6]",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL25ClientDiffieHellmanPublic5allocEib",
            "mov r0, r7",
            "ldr r1, [r6, 0xc]",
            "ldrh r2, [sp, 6]",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r4",
            "ldr r1, [r6, 0xc]",
            "ldrh r2, [sp, 6]",
            "bl rsym._ZN5yaSSL13DiffieHellman13makeAgreementEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "beq 0x8e6e8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman19get_agreedKeyLengthEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL16makeMasterSecretEv",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman13get_agreedKeyEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13DiffieHellman19get_agreedKeyLengthEv",
            "add r1, r6, 1",
            "sub r2, r0, 1",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL13set_preMasterEPKhj",
            "b 0x8e6d4"
        ]
    },
    "method.TaoCrypt::AllocatorWithCleanup_unsigned_int_::pointer_TaoCrypt::StdReallocate_unsigned_int__TaoCrypt.AllocatorWithCleanup_unsigned_int____TaoCrypt::AllocatorWithCleanup_unsigned_int___unsigned_int__TaoCrypt::AllocatorWithCleanup_unsigned_int_::si": {
        "function_address": "0x000bb4f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [0x000bb5e4]",
            "cmp r2, r3",
            "add r7, pc, r7",
            "mov r6, r1",
            "mov r4, r2",
            "mov r5, r3",
            "ldrb r1, [sp, 0x18]",
            "beq 0xbb578",
            "cmp r1, 0",
            "beq 0xbb584",
            "cmn r3, 0xc0000001",
            "bhi 0xbb5c0",
            "cmp r3, 0",
            "moveq r7, r3",
            "beq 0xbb540",
            "mov r1, 0",
            "lsl r0, r3, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r7, r0",
            "cmp r5, r4",
            "movlo r2, r5",
            "movhs r2, r4",
            "mov r1, r6",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "lsl r2, r4, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r6, r7",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "cmn r5, 0xc0000001",
            "bhi 0xbb5c0",
            "cmp r5, 0",
            "moveq r6, r5",
            "beq 0xbb578",
            "mov r1, 0",
            "lsl r0, r5, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r6, r0",
            "b 0xbb578",
            "ldr r3, [0x000bb5e8]",
            "ldr r1, [0x000bb5ec]",
            "ldr r0, [0x000bb5f0]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::input_buffer::allocate_unsigned_int_": {
        "function_address": "0x0007bf40",
        "instructions": [
            "ldr r3, [r0, 8]",
            "ldr r2, [0x0007bfa4]",
            "cmp r3, 0",
            "push {r4, r5, r6, lr}",
            "add r2, pc, r2",
            "mov r4, r0",
            "mov r5, r1",
            "bne 0x7bf80",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "str r5, [r4, 0xc]",
            "str r0, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x0007bfa8]",
            "ldr r1, [0x0007bfac]",
            "ldr r0, [0x0007bfb0]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x108",
            "mov r2, 0x55",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::SHA384::Swap_TaoCrypt::SHA384_": {
        "function_address": "0x000b35a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r6, r0, 0x10",
            "mov ip, r6",
            "add lr, r1, 0x10",
            "mov r5, r0",
            "mov r4, r1",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [r4, 8]",
            "ldr r1, [r5, 8]",
            "ldr r2, [r5, 0xc]",
            "ldr r3, [r5, 4]",
            "ldr r0, [r4, 4]",
            "ldr r6, [r4, 0xc]",
            "stmib r5, {r0, r7}",
            "str r6, [r5, 0xc]",
            "str r1, [r4, 8]",
            "str r2, [r4, 0xc]",
            "str r3, [r4, 4]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r0, r5, 0x50",
            "add r1, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yayaSSL_CleanUp": {
        "function_address": "0x000923d8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00092420]",
            "ldr r6, [0x00092424]",
            "add r4, pc, r4",
            "add r5, r4, r6",
            "bl rsym._ZN8TaoCrypt7CleanUpEv",
            "ldr r0, [r4, r6]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10sslFactoryEEEvPT_",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8SessionsEEEvPT_",
            "ldr r0, [r5, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6ErrorsEEEvPT_",
            "mov r3, 0",
            "str r3, [r4, r6]",
            "str r3, [r5, 8]",
            "str r3, [r5, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7CleanUpEv": {
        "function_address": "0x0003e74c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_10sslFactoryEEEvPT_": {
        "function_address": "0x0003e8fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xefc]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_8SessionsEEEvPT_": {
        "function_address": "0x0003f3f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7ac]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_6ErrorsEEEvPT_": {
        "function_address": "0x0003e50c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x19c]!"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::Multiply_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000a8104",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r1]",
            "ldr r5, [r0, 0xc]",
            "mov r4, r0",
            "ldr r0, [0x000a81ec]",
            "cmp r5, r3",
            "add r0, pc, r0",
            "sub sp, sp, 8",
            "mov r7, r1",
            "mov r6, r2",
            "ldr r8, [r4, 0x50]",
            "ldr sb, [r4, 0x20]",
            "blo 0xa81c8",
            "ldr ip, [r2]",
            "cmp r5, ip",
            "blo 0xa81c8",
            "ldr lr, [r6, 4]",
            "add sl, r8, r5, lsl 3",
            "ldr r2, [r1, 4]",
            "mov r0, r8",
            "mov r1, sl",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl rsym._ZN8TaoCrypt18AsymmetricMultiplyEPjS0_PKjjS2_j",
            "ldr r1, [r7]",
            "ldr r3, [r6]",
            "rsb r2, r1, r5, lsl 1",
            "subs r2, r2, r3",
            "add r1, r3, r1",
            "add r1, r8, r1, lsl 2",
            "beq 0xa8198",
            "mov r3, 0",
            "mov r0, r3",
            "str r0, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r2, r3",
            "bhi 0xa8188",
            "ldr ip, [r4, 0x40]",
            "ldr r3, [r4, 0x10]",
            "mov r0, sb",
            "mov r1, sl",
            "mov r2, r8",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt16MontgomeryReduceEPjS0_PKjS2_S2_j",
            "add r0, r4, 0x1c",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [0x000a81f0]",
            "ldr r2, [0x000a81f4]",
            "ldr r1, [0x000a81f8]",
            "add r3, r0, r3",
            "add r1, r0, r1",
            "add r3, r3, 0xbc0",
            "add r0, r0, r2",
            "ldr r2, [0x000a81fc]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt18AsymmetricMultiplyEPjS0_PKjjS2_j": {
        "function_address": "0x0003e35c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2bc]!"
        ]
    },
    "sym.yaSSL::Parameters::Parameters_yaSSL::ConnectionEnd__yaSSL::Ciphers_const__yaSSL::ProtocolVersion__bool_": {
        "function_address": "0x0008e0a8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr ip, [0x0008e154]",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov r1, 1",
            "ldrb r7, [sp, 0x28]",
            "strb r1, [r0, 0x28]",
            "ldr r1, [0x0008e158]",
            "add ip, pc, ip",
            "str r5, [r0]",
            "mov r4, r0",
            "add r1, ip, r1",
            "mov r6, r2",
            "add r0, r0, 0xaf",
            "mov r2, 5",
            "eor r7, r7, 1",
            "strh r3, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "strb r7, [r4, 0x6df]",
            "ldrb ip, [r6]",
            "cmp ip, 0",
            "bne 0x8e130",
            "cmp r5, 0",
            "moveq r2, r7",
            "movne r2, 0",
            "mov r3, ip",
            "mov r0, r4",
            "ldr r1, [sp, 0xc]",
            "str ip, [sp]",
            "bl rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [r6, 0x84]",
            "add r0, r4, 0x2f",
            "strb r3, [r4, 0x2e]",
            "ldr r2, [r6, 0x84]",
            "add r1, r6, 1",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL10Parameters14SetCipherNamesEv",
            "b 0x8e120"
        ]
    },
    "sym.reinit_io_cache": {
        "function_address": "0x00054960",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldrb ip, [sp, 0x2c]",
            "ldr r6, [0x00054ba8]",
            "cmp ip, 0",
            "add r6, pc, r6",
            "mov r4, r0",
            "mov r5, r1",
            "mov r7, r2",
            "mov r8, r3",
            "bne 0x54994",
            "ldm r0, {r2, r3}",
            "cmp r3, r8",
            "bls 0x54aa8",
            "ldr r3, [r4, 0x64]",
            "cmp r5, 1",
            "movne sl, 0",
            "moveq sl, 1",
            "cmp r3, 2",
            "cmpeq r5, 1",
            "beq 0x54a60",
            "cmp ip, 0",
            "beq 0x54a8c",
            "ldr r3, [r4, 0x18]",
            "cmp sl, 0",
            "mov r2, 1",
            "str r8, [r4, 4]",
            "str r2, [r4, 0x8c]",
            "str r7, [r4]",
            "str r3, [r4, 0x28]",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0x1c]",
            "strne r3, [r4, 0x14]",
            "bne 0x54a0c",
            "ldr r2, [r4, 0x94]",
            "lsl r7, r7, 0x14",
            "lsr r7, r7, 0x14",
            "rsb r7, r7, r2",
            "mvn r1, 0",
            "mvn r2, 0",
            "str r1, [r4, 8]",
            "str r2, [r4, 0xc]",
            "add r3, r3, r7",
            "str r3, [r4, 0x2c]",
            "mov r3, 0",
            "cmp r5, 3",
            "str r5, [r4, 0x64]",
            "str r3, [r4, 0x90]",
            "beq 0x54b28",
            "cmp r5, 5",
            "beq 0x54a4c",
            "ldr r3, [r4, 0x58]",
            "cmp r3, 0",
            "beq 0x54b9c",
            "ldr r3, [0x00054bac]",
            "ldr r3, [r6, r3]",
            "str r3, [r4, 0x5c]",
            "ldr r3, [0x00054bb0]",
            "ldr r3, [r6, r3]",
            "str r3, [r4, 0x60]",
            "mov r0, r4",
            "bl rsym.setup_io_cache",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [r4, 0x30]",
            "ldr r3, [r4, 0x1c]",
            "ldr lr, [r2]",
            "ldm r4, {r0, r1}",
            "rsb lr, r3, lr",
            "adds r2, r0, lr",
            "adc r3, r1, 0",
            "cmp ip, 0",
            "str r2, [r4, 8]",
            "str r3, [r4, 0xc]",
            "bne 0x549b8",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym.my_b_flush_io_cache",
            "cmp r0, 0",
            "movne r0, 1",
            "beq 0x549b8",
            "b 0x54a58",
            "beq 0x54b3c",
            "ldr r0, [r4, 0x30]",
            "ldr r1, [r4, 0x1c]",
            "ldr lr, [r0]",
            "rsb lr, r1, lr",
            "adds sl, r2, lr",
            "adc fp, r3, 0",
            "cmp r8, fp",
            "bhi 0x54994",
            "bne 0x54ad8",
            "cmp r7, sl",
            "bhi 0x54994",
            "ldr ip, [r4, 0x64]",
            "cmp r5, 1",
            "cmpeq ip, 2",
            "bne 0x54b48",
            "ldr ip, [r4, 0x28]",
            "ldr lr, [r4, 0x88]",
            "str ip, [r4, 0x14]",
            "ldr ip, [r0]",
            "adds r0, lr, 1",
            "movne r0, 1",
            "rsb ip, r1, ip",
            "adds r8, r2, ip",
            "adc sb, r3, 0",
            "str r8, [r4, 8]",
            "str sb, [r4, 0xc]",
            "str r0, [r4, 0x8c]",
            "rsb r2, r2, r7",
            "add r1, r1, r2",
            "str r1, [r4, 0x10]",
            "b 0x54a0c",
            "str r3, [r4, 0x60]",
            "ldr r3, [0x00054bb4]",
            "ldr r3, [r6, r3]",
            "str r3, [r4, 0x5c]",
            "b 0x54a4c",
            "cmp r2, r7",
            "bhi 0x54994",
            "b 0x54aac",
            "cmp r5, 2",
            "bne 0x54b18",
            "cmp ip, 1",
            "ldreq r3, [r4, 0x94]",
            "ldreq r2, [r4, 0x20]",
            "streq ip, [r4, 0x8c]",
            "addeq r3, r2, r3",
            "streq r3, [r4, 0x2c]",
            "ldr r3, [r4]",
            "mvn r2, 0",
            "rsb r7, r3, r7",
            "mvn r3, 0",
            "str r2, [r4, 8]",
            "str r3, [r4, 0xc]",
            "mov r3, 2",
            "add r1, r1, r7",
            "str r3, [r4, 0x64]",
            "mov r3, 0",
            "str r1, [r4, 0x28]",
            "str r3, [r4, 0x90]",
            "b 0x54a28",
            "ldr r3, [0x00054bb8]",
            "ldr r3, [r6, r3]",
            "b 0x54a3c"
        ]
    },
    "rsym.setup_io_cache": {
        "function_address": "0x0003fe20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe4]!"
        ]
    },
    "fcn.0009d710": {
        "function_address": "0x0009d710",
        "instructions": [
            "ldr ip, [0x0009d74c]",
            "ldr r3, [0x0009d750]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d754]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d758]",
            "ldr r0, [0x0009d75c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007e6e0": {
        "function_address": "0x0007e6e0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e73c]",
            "ldr r3, [0x0007e740]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RC47RC4ImplEEEvPT_",
            "ldr r3, [0x0007e744]",
            "ldr r1, [0x0007e748]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e74c]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e750]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_3RC47RC4ImplEEEvPT_": {
        "function_address": "0x0003ebd8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd14]!"
        ]
    },
    "fcn.00090874": {
        "function_address": "0x00090874",
        "instructions": [
            "ldr ip, [0x000908b0]",
            "ldr r3, [0x000908b4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000908b8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000908bc]",
            "ldr r0, [0x000908c0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt::ModularArithmetic.CascadeExponentiate_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000abb44",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r7, r1, 0xc",
            "sub sp, sp, 0xd4",
            "mov r5, r1",
            "mov r6, r0",
            "mov r1, 0",
            "mov r0, r7",
            "mov r8, r2",
            "mov sl, r3",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "ldr r4, [0x000abd68]",
            "cmp r0, 0",
            "add r4, pc, r4",
            "bne 0xabbb0",
            "ldr ip, [sp, 0xf8]",
            "mov r1, r5",
            "str ip, [sp]",
            "ldr ip, [sp, 0xfc]",
            "mov r2, r8",
            "mov r3, sl",
            "mov r0, r6",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt12AbstractRing19CascadeExponentiateERKNS_7IntegerES3_S3_S3_",
            "mov r0, r6",
            "add sp, sp, 0xd4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r5, sp, 8",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt24MontgomeryRepresentationC1ERKNS_7IntegerE",
            "ldr r7, [sp, 0x14]",
            "add sb, sp, 0x90",
            "mov r1, r8",
            "lsl r7, r7, 5",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, r7",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerlSEj",
            "add r7, sp, 0x80",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add fp, r5, 0xc",
            "add r0, sb, 8",
            "ldr r1, [sp, 0x94]",
            "add sb, sp, 0xc0",
            "ldr r2, [sp, 0x90]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, sb",
            "mov r1, r7",
            "mov r2, fp",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "ldr r2, [sp, 0x80]",
            "add r0, r7, 8",
            "ldr r1, [sp, 0x84]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r7, [sp, 0x14]",
            "add r8, sp, 0x70",
            "ldr r1, [sp, 0xf8]",
            "lsl r7, r7, 5",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, r7",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerlSEj",
            "add r7, sp, 0x60",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r8, 8",
            "ldr r1, [sp, 0x74]",
            "add r8, sp, 0xb0",
            "ldr r2, [sp, 0x70]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r2, fp",
            "mov r0, r8",
            "mov r1, r7",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "add r0, r7, 8",
            "ldr r1, [sp, 0x64]",
            "ldr r2, [sp, 0x60]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r7, sp, 0xa0",
            "ldr ip, [sp, 0xfc]",
            "mov r3, sl",
            "mov r0, r7",
            "mov r1, r5",
            "mov r2, sb",
            "stm sp, {r8, ip}",
            "bl rsym._ZNK8TaoCrypt12AbstractRing19CascadeExponentiateERKNS_7IntegerES3_S3_S3_",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r7",
            "bl rsym._ZNK8TaoCrypt24MontgomeryRepresentation10ConvertOutERKNS_7IntegerE",
            "add r0, r7, 8",
            "ldr r1, [sp, 0xa4]",
            "ldr r2, [sp, 0xa0]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r8, 8",
            "ldr r1, [sp, 0xb4]",
            "ldr r2, [sp, 0xb0]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, sb, 8",
            "ldr r1, [sp, 0xc4]",
            "ldr r2, [sp, 0xc0]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [0x000abd6c]",
            "add r0, r5, 0x54",
            "ldr r3, [r4, r3]",
            "ldr r1, [sp, 0x58]",
            "add r3, r3, 8",
            "ldr r2, [sp, 0x54]",
            "str r3, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r5, 0x44",
            "ldr r1, [sp, 0x48]",
            "ldr r2, [sp, 0x44]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [0x000abd70]",
            "add r0, r5, 0x34",
            "ldr r3, [r4, r3]",
            "ldr r1, [sp, 0x38]",
            "add r3, r3, 8",
            "ldr r2, [sp, 0x34]",
            "str r3, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r5, 0x24",
            "ldr r1, [sp, 0x28]",
            "ldr r2, [sp, 0x24]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r5, 0x14",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xabba0"
        ]
    },
    "rsym._ZNK8TaoCrypt12AbstractRing19CascadeExponentiateERKNS_7IntegerES3_S3_S3_": {
        "function_address": "0x0003f0dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9bc]!"
        ]
    },
    "rsym._ZN8TaoCrypt24MontgomeryRepresentationC1ERKNS_7IntegerE": {
        "function_address": "0x0003cb98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x294]!"
        ]
    },
    "rsym._ZNK8TaoCrypt24MontgomeryRepresentation10ConvertOutERKNS_7IntegerE": {
        "function_address": "0x0003e398",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x294]!"
        ]
    },
    "sym.my_strnxfrm_simple": {
        "function_address": "0x0005ed88",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r2",
            "ldr r2, [sp, 0x10]",
            "ldr r5, [r0, 0x2c]",
            "cmp r2, r4",
            "movhs r2, r4",
            "cmp r1, r3",
            "beq 0x5edfc",
            "add r6, r3, r2",
            "cmp r3, r6",
            "bhs 0x5eddc",
            "mov r0, 0",
            "ldrb ip, [r3, r0]",
            "ldrb ip, [r5, ip]",
            "strb ip, [r1, r0]",
            "add r0, r0, 1",
            "add ip, r3, r0",
            "cmp r6, ip",
            "bhi 0x5edb8",
            "rsb r3, r3, r6",
            "add r1, r1, r3",
            "cmp r4, r2",
            "movhi r0, r1",
            "rsbhi r2, r2, r4",
            "movhi r1, 0x20",
            "blhi sym.imp.memset",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r1, r2",
            "cmp r1, r0",
            "bhs 0x5eddc",
            "ldrb r3, [r1]",
            "ldrb r3, [r5, r3]",
            "strb r3, [r1], 1",
            "cmp r0, r1",
            "bhi 0x5ee08",
            "mov r1, r0",
            "b 0x5eddc"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_TaoCrypt::RandomNumberGenerator__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000ab134",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "sub sp, sp, 8",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "mov r7, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, r5",
            "mov r2, r5",
            "mov r3, r5",
            "add r0, r0, 8",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r7",
            "mov r0, r4",
            "mov r2, r6",
            "mov r3, r8",
            "bl rsym._ZN8TaoCrypt7Integer9RandomizeERNS_21RandomNumberGeneratorERKS0_S4_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetKey__": {
        "function_address": "0x0009c0f4",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "ldr r3, [r3, 0x10]",
            "ldr r4, [0x0009c200]",
            "cmp r3, 0",
            "mov r5, r0",
            "add r4, pc, r4",
            "beq 0x9c11c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoder9GetAlgoIdEv",
            "ldr r3, [0x0009c204]",
            "str r0, [r5, 0x20]",
            "cmp r0, r3",
            "beq 0x9c154",
            "ldr r3, [0x0009c208]",
            "cmp r0, r3",
            "beq 0x9c1a8",
            "ldr r3, [r5, 4]",
            "ldr r2, [0x0009c20c]",
            "str r2, [r3, 0x10]",
            "b 0x9c114",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 3",
            "bne 0x9c1cc",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 0",
            "beq 0x9c1a8",
            "ldr r3, [r5, 4]",
            "ldr r2, [r3, 0xc]",
            "ldr r0, [r3]",
            "add r1, r2, 1",
            "cmp r2, r0",
            "str r1, [r3, 0xc]",
            "bhs 0x9c1dc",
            "ldr r1, [r3, 4]",
            "ldrb r2, [r1, r2]",
            "cmp r2, 0",
            "bne 0x9c180",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoder8StoreKeyEv",
            "ldr r2, [r5, 0x20]",
            "ldr r3, [0x0009c208]",
            "cmp r2, r3",
            "bne 0x9c114",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN8TaoCrypt11CertDecoder6AddDSAEv",
            "ldr r3, [r5, 4]",
            "mov r2, 0x400",
            "str r2, [r3, 0x10]",
            "b 0x9c114",
            "ldr r3, [0x0009c210]",
            "ldr r1, [0x0009c214]",
            "ldr r0, [0x0009c218]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder8StoreKeyEv": {
        "function_address": "0x0003efbc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa7c]!"
        ]
    },
    "sym.make_scrambled_password_323": {
        "function_address": "0x00047888",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b rsym.my_make_scrambled_password_323"
        ]
    },
    "fcn.0008b528": {
        "function_address": "0x0008b528",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "strh r1, [sp, 4]",
            "ldrb r3, [sp, 4]",
            "mov r1, 0",
            "cmp r3, 2",
            "str r1, [r0]",
            "str r1, [r0, 0x11c]",
            "str r1, [r0, 0x120]",
            "str r1, [r0, 0x124]",
            "strb r1, [r0, 0x128]",
            "strb r1, [r0, 0x129]",
            "mov r6, r2",
            "mov r4, r0",
            "ldrb r2, [sp, 5]",
            "strbls r1, [r0, 0x12a]",
            "bls 0x8b584",
            "cmp r2, r1",
            "beq 0x8b5dc",
            "mov r1, 1",
            "cmp r2, 1",
            "strb r1, [r0, 0x12a]",
            "bls 0x8b5e0",
            "mov r5, 0",
            "strb r1, [r4, 0x12b]",
            "strb r2, [r4, 0x12f]",
            "strb r3, [r4, 0x12e]",
            "strb r5, [r4, 0x12d]",
            "add r0, r4, 0x130",
            "mov r1, 3",
            "mov r2, r5",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "str r6, [r4, 0x134]",
            "str r5, [r4, 0x90]",
            "str r5, [r4, 0x74]",
            "str r5, [r4, 0x78]",
            "str r5, [r4, 0x7c]",
            "str r5, [r4, 0x80]",
            "str r5, [r4, 0x84]",
            "str r5, [r4, 0x88]",
            "str r5, [r4, 0x8c]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "strb r2, [r0, 0x12a]",
            "mov r1, 0",
            "b 0x8b584"
        ]
    },
    "sym.mysql_stmt_close": {
        "function_address": "0x00042588",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r1, 0",
            "ldr r5, [r0, 0x2c]",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "add r0, r0, 0x48",
            "bl rsym.free_root",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym.free_root",
            "cmp r5, 0",
            "beq 0x42660",
            "add r1, r4, 0x20",
            "ldr r0, [r5, 0x3ac]",
            "bl rsym.list_delete",
            "str r0, [r5, 0x3ac]",
            "mov r0, r5",
            "bl rsym.net_clear_error",
            "ldr r3, [r4, 0xac]",
            "cmp r3, 1",
            "ble 0x42660",
            "ldr r2, [r5, 0x3b8]",
            "add r3, r4, 0x2b8",
            "add r3, r3, 1",
            "cmp r2, r3",
            "moveq r3, 0",
            "streq r3, [r5, 0x3b8]",
            "ldr r3, [r5, 0x380]",
            "cmp r3, 0",
            "bne 0x4268c",
            "ldr r3, [r4, 0x90]",
            "mov r2, 0",
            "lsr r1, r3, 0x18",
            "lsr ip, r3, 8",
            "lsr r0, r3, 0x10",
            "strb r0, [sp, 0x16]",
            "strb r1, [sp, 0x17]",
            "strb r3, [sp, 0x14]",
            "strb ip, [sp, 0x15]",
            "add r3, sp, 0x14",
            "ldr ip, [r5, 0x3b0]",
            "mov r6, 1",
            "str r3, [sp]",
            "mov r3, 4",
            "stmib sp, {r3, r6}",
            "str r4, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, 0x19",
            "mov r3, r2",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x4267c",
            "mov r6, 0",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "mov r0, r6",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym.set_stmt_errmsg",
            "b 0x42664",
            "ldr r3, [r5, 0x3b0]",
            "mov r0, r5",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 0x3b8]",
            "cmp r3, 0",
            "movne r2, 1",
            "strbne r2, [r3]",
            "mov r3, 0",
            "str r3, [r5, 0x380]",
            "b 0x42600"
        ]
    },
    "rsym.list_delete": {
        "function_address": "0x0003fc94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1ec]!"
        ]
    },
    "rsym.set_stmt_errmsg": {
        "function_address": "0x0003d468",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcb4]!"
        ]
    },
    "sym.str2int": {
        "function_address": "0x0005ba20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [0x0005bc74]",
            "sub sp, sp, 0x8c",
            "ldr lr, [0x0005bc78]",
            "add ip, pc, ip",
            "ldr r5, [sp, 0xb0]",
            "ldr lr, [ip, lr]",
            "mov r4, 0",
            "str r4, [r5]",
            "ldr r6, [lr, 0x20]",
            "ldrb lr, [r0]",
            "mov r4, r1",
            "add r1, r6, lr",
            "ldrb r1, [r1, 1]",
            "mov r5, r2",
            "tst r1, 8",
            "str r3, [sp]",
            "beq 0x5ba7c",
            "ldrb lr, [r0, 1]!",
            "add r3, r6, lr",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x5ba68",
            "cmp lr, 0x2b",
            "beq 0x5bc3c",
            "cmp lr, 0x2d",
            "mvnne r3, 0",
            "moveq r1, 1",
            "ldrbeq lr, [r0, 1]!",
            "strne r3, [sp, 4]",
            "streq r1, [sp, 4]",
            "cmp lr, 0x30",
            "movne r3, r0",
            "bne 0x5bab8",
            "mov r3, r0",
            "ldrb lr, [r3, 1]!",
            "cmp lr, 0x30",
            "beq 0x5baac",
            "mov r7, 0",
            "add r2, sp, 8",
            "b 0x5bacc",
            "add r7, r7, 1",
            "ldrb lr, [r3, r7]",
            "sub ip, lr, 0x41",
            "sub r1, lr, 0x30",
            "and r6, ip, 0xff",
            "and ip, r1, 0xff",
            "cmp ip, 9",
            "add fp, r3, r7",
            "movls lr, r1",
            "bls 0x5bb0c",
            "sub r1, lr, 0x61",
            "cmp r6, 0x19",
            "and r1, r1, 0xff",
            "subls lr, lr, 0x37",
            "bls 0x5bb0c",
            "cmp r1, 0x19",
            "movhi lr, 0x7f",
            "subls lr, lr, 0x57",
            "cmp lr, r4",
            "str lr, [r2, r7, lsl 2]",
            "lsl sl, r7, 2",
            "bge 0x5bb24",
            "cmp r7, 0x14",
            "bne 0x5bac4",
            "cmp r0, fp",
            "beq 0x5bc60",
            "ldr r0, [sp]",
            "eor r3, r5, r5, asr 31",
            "rsb r3, r3, r5, asr 31",
            "cmp r0, 0",
            "rsbgt r0, r0, 0",
            "sub r7, r7, 1",
            "cmp r0, r3",
            "movge r0, r3",
            "cmp r7, 0",
            "movle sb, 0",
            "mvnle r8, 0",
            "ble 0x5bbb8",
            "add lr, sp, 0x88",
            "add r3, lr, r7, lsl 2",
            "ldr r6, [r3, -0x80]",
            "rsb r3, r6, 0",
            "cmp r3, r0",
            "addge sl, r2, sl",
            "movge sb, 0",
            "mvnge r8, 0",
            "bge 0x5bb98",
            "b 0x5bc04",
            "ldr r6, [sl, -8]",
            "sub sl, sl, 4",
            "rsb r3, r6, 0",
            "cmp r3, r0",
            "blt 0x5bc04",
            "add r0, r6, r0",
            "sub r7, r7, 1",
            "mov r1, r4",
            "bl fcn.000bee34",
            "cmp r7, 0",
            "mla sb, r6, r8, sb",
            "mul r8, r4, r8",
            "bgt 0x5bb84",
            "cmp r7, 0",
            "beq 0x5bc24",
            "ldr r1, [sp, 4]",
            "cmn r1, 1",
            "beq 0x5bbec",
            "cmp sb, r5",
            "blt 0x5bc04",
            "ldr r5, [sp, 0xb0]",
            "str sb, [r5]",
            "bl sym.imp.__errno_location",
            "mov r3, 0",
            "str r3, [r0]",
            "b 0x5bc14",
            "cmp sb, 0x80000000",
            "beq 0x5bc04",
            "ldr r3, [sp]",
            "rsb sb, sb, 0",
            "cmp r3, sb",
            "bge 0x5bbd4",
            "bl sym.imp.__errno_location",
            "mov r3, 0x22",
            "str r3, [r0]",
            "mov fp, 0",
            "mov r0, fp",
            "add sp, sp, 0x8c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [sp, 8]",
            "rsb r2, r3, 0",
            "cmp r0, r2",
            "bgt 0x5bc4c",
            "mla sb, r3, r8, sb",
            "b 0x5bbc0",
            "mvn r1, 0",
            "ldrb lr, [r0, 1]!",
            "str r1, [sp, 4]",
            "b 0x5ba9c",
            "bl sym.imp.__errno_location",
            "mov r3, 0x22",
            "str r3, [r0]",
            "mov fp, r7",
            "b 0x5bc14",
            "bl sym.imp.__errno_location",
            "mov r3, 0x21",
            "str r3, [r0]",
            "mov fp, 0",
            "b 0x5bc14"
        ]
    },
    "sym.my_seek": {
        "function_address": "0x00055a88",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xc",
            "ldr r1, [sp, 0x18]",
            "str r1, [sp]",
            "bl sym.imp.lseek64",
            "cmn r0, 1",
            "beq 0x55ac0",
            "mov r3, r0",
            "mov r4, r1",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr",
            "cmn r1, 1",
            "bne 0x55aa4",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "mvn r3, 0",
            "mvn r4, 0",
            "str r2, [r5]",
            "b 0x55aac"
        ]
    },
    "method.TaoCrypt::ModularArithmetic.SimultaneousExponentiate_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const__unsigned_int__const": {
        "function_address": "0x000ab964",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r6, r0, 0xc",
            "sub sp, sp, 0xa4",
            "mov r4, r0",
            "mov r7, r1",
            "mov r0, r6",
            "mov r1, 0",
            "mov r8, r2",
            "mov sl, r3",
            "ldr r5, [sp, 0xc8]",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "ldr sb, [0x000abb38]",
            "cmp r0, 0",
            "add sb, pc, sb",
            "beq 0xabb1c",
            "add r4, sp, 8",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt24MontgomeryRepresentationC1ERKNS_7IntegerE",
            "ldr fp, [sp, 0x14]",
            "add r6, sp, 0x70",
            "mov r1, r8",
            "mov r0, r6",
            "lsl fp, fp, 5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r6",
            "mov r1, fp",
            "bl rsym._ZN8TaoCrypt7IntegerlSEj",
            "add r8, sp, 0x60",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0x74]",
            "add r6, sp, 0x90",
            "ldr r2, [sp, 0x70]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r6",
            "mov r1, r8",
            "add r2, r4, 0xc",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "add r0, r8, 8",
            "ldr r1, [sp, 0x64]",
            "ldr r2, [sp, 0x60]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r3, sl",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r6",
            "str r5, [sp]",
            "bl rsym._ZNK8TaoCrypt12AbstractRing24SimultaneousExponentiateEPNS_7IntegerERKS1_PS3_j",
            "add r0, r6, 8",
            "ldr r1, [sp, 0x94]",
            "ldr r2, [sp, 0x90]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "cmp r5, 0",
            "beq 0xabaa0",
            "mov r6, r7",
            "add sl, sp, 0x80",
            "mov r7, 0",
            "mov r2, r6",
            "mov r0, sl",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt24MontgomeryRepresentation10ConvertOutERKNS_7IntegerE",
            "mov r0, r6",
            "mov r1, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r8, [sp, 0x84]",
            "ldr r2, [sp, 0x80]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r8",
            "bl sym.imp.memset",
            "add r7, r7, 1",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "cmp r5, r7",
            "add r6, r6, 0x10",
            "bhi 0xaba54",
            "ldr r3, [0x000abb3c]",
            "add r0, r4, 0x54",
            "ldr r3, [sb, r3]",
            "ldr r1, [sp, 0x58]",
            "add r3, r3, 8",
            "ldr r2, [sp, 0x54]",
            "str r3, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x44",
            "ldr r1, [sp, 0x48]",
            "ldr r2, [sp, 0x44]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [0x000abb40]",
            "add r0, r4, 0x34",
            "ldr r3, [sb, r3]",
            "ldr r1, [sp, 0x38]",
            "add r3, r3, 8",
            "ldr r2, [sp, 0x34]",
            "str r3, [sp, 8]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x24",
            "ldr r1, [sp, 0x28]",
            "ldr r2, [sp, 0x24]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x14",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r8",
            "mov r3, sl",
            "str r5, [sp]",
            "bl rsym._ZNK8TaoCrypt12AbstractRing24SimultaneousExponentiateEPNS_7IntegerERKS1_PS3_j",
            "b 0xabb10"
        ]
    },
    "rsym._ZNK8TaoCrypt12AbstractRing24SimultaneousExponentiateEPNS_7IntegerERKS1_PS3_j": {
        "function_address": "0x0003d63c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb7c]!"
        ]
    },
    "sym.mysql_options": {
        "function_address": "0x000745b0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "sub sp, sp, 8",
            "cmp r1, 0x15",
            "addls pc, pc, r1, lsl 2",
            "b 0x746dc",
            "b 0x746e4",
            "b 0x746f4",
            "b 0x74620",
            "b 0x74710",
            "b 0x74724",
            "b 0x7474c",
            "b 0x74774",
            "b 0x7479c",
            "b 0x747c4",
            "b 0x747e8",
            "b 0x74628",
            "b 0x74638",
            "b 0x74648",
            "b 0x746dc",
            "b 0x74658",
            "b 0x74658",
            "b 0x74658",
            "b 0x74664",
            "b 0x7467c",
            "b 0x7468c",
            "b 0x746a4",
            "b 0x746b4",
            "mov r3, 3",
            "str r3, [r0, 0x308]",
            "mov r0, 0",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r2]",
            "mov r0, 0",
            "str r3, [r4, 0x2fc]",
            "b 0x7462c",
            "ldr r3, [r2]",
            "mov r0, 0",
            "str r3, [r4, 0x300]",
            "b 0x7462c",
            "str r1, [r0, 0x35c]",
            "mov r0, 0",
            "b 0x7462c",
            "mov r0, r2",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x360]",
            "mov r0, 0",
            "b 0x7462c",
            "ldrb r3, [r2]",
            "mov r0, 0",
            "strb r3, [r4, 0x364]",
            "b 0x7462c",
            "ldrb r3, [r2]",
            "mov r0, 0",
            "subs r3, r3, r0",
            "movne r3, 1",
            "strb r3, [r4, 0x365]",
            "b 0x7462c",
            "ldrb r3, [r2]",
            "mov r0, 0",
            "strb r3, [r4, 0x385]",
            "b 0x7462c",
            "ldrb r0, [r2]",
            "cmp r0, 0",
            "ldrne r3, [r4, 0x30c]",
            "ldreq r3, [r4, 0x30c]",
            "orrne r3, r3, 0x40000000",
            "biceq r3, r3, 0x40000000",
            "movne r0, 0",
            "strne r3, [r4, 0x30c]",
            "streq r3, [r4, 0x30c]",
            "b 0x7462c",
            "mov r0, 1",
            "b 0x7462c",
            "ldr r3, [r2]",
            "mov r0, 0",
            "str r3, [r4, 0x2f8]",
            "b 0x7462c",
            "ldr r3, [r0, 0x30c]",
            "orr r3, r3, 0x20",
            "str r3, [r0, 0x30c]",
            "mov r3, 1",
            "strb r3, [r0, 0x355]",
            "mov r0, 0",
            "b 0x7462c",
            "add r0, r0, 0x2f8",
            "mov r1, r2",
            "bl fcn.0007452c",
            "mov r0, 0",
            "b 0x7462c",
            "ldr r0, [r0, 0x328]",
            "str r2, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "ldr r2, [sp, 4]",
            "mov r1, 0x10",
            "mov r0, r2",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x328]",
            "mov r0, 0",
            "b 0x7462c",
            "ldr r0, [r0, 0x32c]",
            "str r2, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "ldr r2, [sp, 4]",
            "mov r1, 0x10",
            "mov r0, r2",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x32c]",
            "mov r0, 0",
            "b 0x7462c",
            "ldr r0, [r0, 0x330]",
            "str r2, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "ldr r2, [sp, 4]",
            "mov r1, 0x10",
            "mov r0, r2",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x330]",
            "mov r0, 0",
            "b 0x7462c",
            "ldr r0, [r0, 0x334]",
            "str r2, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "ldr r2, [sp, 4]",
            "mov r1, 0x10",
            "mov r0, r2",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x334]",
            "mov r0, 0",
            "b 0x7462c",
            "cmp r2, 0",
            "beq 0x747f8",
            "ldr r0, [r2]",
            "cmp r0, 0",
            "bne 0x747f8",
            "ldr r3, [r4, 0x30c]",
            "bic r3, r3, 0x80",
            "str r3, [r4, 0x30c]",
            "b 0x7462c",
            "ldr r3, [r2]",
            "mov r0, 0",
            "str r3, [r4, 0x308]",
            "b 0x7462c",
            "ldr r3, [r4, 0x30c]",
            "mov r0, 0",
            "orr r3, r3, 0x80",
            "str r3, [r4, 0x30c]",
            "b 0x7462c"
        ]
    },
    "fcn.0007452c": {
        "function_address": "0x0007452c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [r0, 0x2c]",
            "sub sp, sp, 8",
            "cmp r6, 0",
            "mov r4, r0",
            "mov r5, r1",
            "beq 0x7458c",
            "mov r0, r5",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "cmp r0, 0",
            "str r0, [sp, 4]",
            "beq 0x74578",
            "ldr r0, [r4, 0x2c]",
            "add r1, sp, 4",
            "bl rsym.insert_dynamic",
            "cmp r0, 0",
            "beq 0x74580",
            "ldr r0, [sp, 4]",
            "bl rsym.my_no_flags_free",
            "mov r0, 1",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0x10",
            "mov r0, 0x14",
            "bl rsym.my_malloc",
            "mov r2, r6",
            "str r0, [r4, 0x2c]",
            "mov r1, 4",
            "mov r3, 5",
            "bl rsym.init_dynamic_array",
            "b 0x74548"
        ]
    },
    "fcn.000a114c": {
        "function_address": "0x000a114c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0], 4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x14",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.modify_defaults_file": {
        "function_address": "0x0004f9a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x4b0",
            "sub sp, sp, 0xc",
            "str r1, [sp, 0x28]",
            "str r2, [sp, 0x38]",
            "mov r1, 2",
            "mov r2, 0",
            "str r3, [sp, 0x3c]",
            "bl rsym.my_fopen",
            "ldr r1, [0x0004fef4]",
            "subs r2, r0, 0",
            "add r1, pc, r1",
            "str r1, [sp, 0xc]",
            "str r2, [sp, 0x10]",
            "moveq r0, 2",
            "beq 0x4fd74",
            "bl sym.imp.fileno",
            "add r1, sp, 0x450",
            "mov r2, 0",
            "bl rsym.my_fstat",
            "cmp r0, 0",
            "bne 0x4fd64",
            "ldr r3, [sp, 0x28]",
            "ldr r1, [sp, 0x38]",
            "subs r3, r3, 0",
            "movne r3, 1",
            "str r3, [sp, 0x20]",
            "cmp r1, 0",
            "moveq r3, 0",
            "andne r3, r3, 1",
            "cmp r3, 0",
            "bne 0x4fd84",
            "ldr r2, [0x0004fef8]",
            "str r3, [sp, 0x24]",
            "mov r3, 2",
            "str r2, [sp, 0x30]",
            "str r3, [sp, 0x44]",
            "ldr r3, [sp, 0x480]",
            "mov r1, 0x10",
            "add r3, r3, 1",
            "add r0, r2, r3",
            "str r3, [sp, 0x48]",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [sp, 0x40]",
            "beq 0x4fd64",
            "mov sl, r0",
            "ldr r0, [sp, 0x3c]",
            "bl sym.imp.strlen",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0",
            "str r3, [sp, 0x2c]",
            "add r3, r1, r2",
            "add r3, r3, 2",
            "ldr r6, [0x0004fefc]",
            "ldr r1, [sp, 0xc]",
            "str r3, [sp, 0x4c]",
            "ldr r3, [0x0004ff00]",
            "mov r2, 0",
            "add sb, sp, 0x58",
            "str r0, [sp, 0x34]",
            "sub sb, sb, 8",
            "add r6, r1, r6",
            "str r2, [sp, 0x1c]",
            "str r2, [sp, 0x14]",
            "mov r5, r2",
            "str r3, [sp, 0x18]",
            "mov r0, sb",
            "mov r1, 0x400",
            "ldr r2, [sp, 0x10]",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x4fc74",
            "ldr r2, [sp, 0xc]",
            "ldr r1, [sp, 0x18]",
            "ldrb r7, [sp, 0x50]",
            "ldr r3, [r2, r1]",
            "ldr r8, [r3, 0x20]",
            "add r3, r8, r7",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "moveq r4, sb",
            "beq 0x4fb10",
            "mov r4, sb",
            "ldrb r7, [r4, 1]!",
            "add r3, r8, r7",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4fafc",
            "cmp r7, 0",
            "addeq r5, r5, 1",
            "beq 0x4fab8",
            "ldr fp, [sp, 0x14]",
            "ldr r1, [sp, 0x20]",
            "tst fp, r1",
            "beq 0x4fdb8",
            "mov r0, r4",
            "ldr r1, [sp, 0x28]",
            "ldr r2, [sp, 0x24]",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x4fdb8",
            "ldr r2, [sp, 0x24]",
            "ldrb r3, [r4, r2]",
            "add r0, r4, r2",
            "cmp r3, 0x3d",
            "beq 0x4fb70",
            "add r8, r8, r3",
            "ldrb r2, [r8, 1]",
            "tst r2, 8",
            "bne 0x4fb70",
            "cmp r3, 0",
            "bne 0x4fdb8",
            "bl rsym.strend",
            "ldr r1, [sp, 0x2c]",
            "ldr r2, [sp, 0x44]",
            "mov r7, r0",
            "add r3, r1, r2",
            "add r3, r4, r3",
            "ldr r1, [sp, 0x30]",
            "rsb r3, r0, r3",
            "cmp r3, r1",
            "str r3, [sp, 0x2c]",
            "blt 0x4fbc4",
            "add r2, r3, 0x400",
            "ldr r3, [sp, 0x48]",
            "str r2, [sp, 0x30]",
            "add r1, r2, r3",
            "ldr r0, [sp, 0x40]",
            "mov r2, 0x90",
            "bl rsym.my_realloc",
            "cmp r0, 0",
            "str r0, [sp, 0x40]",
            "beq 0x4fd64",
            "mov r0, sl",
            "ldr r1, [sp, 0x38]",
            "ldr r2, [sp, 0x28]",
            "ldr r3, [sp, 0x4e0]",
            "bl fcn.0004f938",
            "mov r1, 1",
            "mov sl, r0",
            "str r1, [sp, 0x1c]",
            "ldrb r3, [r7]",
            "cmp r3, 0x5b",
            "bne 0x4fab8",
            "add r7, r7, 1",
            "mov r0, r7",
            "ldr r1, [sp, 0x3c]",
            "ldr r2, [sp, 0x34]",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x4fc54",
            "ldr r1, [sp, 0xc]",
            "ldr r3, [sp, 0x18]",
            "ldr r2, [r1, r3]",
            "ldr r1, [sp, 0x34]",
            "ldr r2, [r2, 0x20]",
            "ldrb r3, [r7, r1]",
            "add r7, r7, r1",
            "add r1, r2, r3",
            "ldrb r1, [r1, 1]",
            "tst r1, 8",
            "beq 0x4fc4c",
            "ldrb r3, [r7, 1]!",
            "add r1, r2, r3",
            "ldrb r1, [r1, 1]",
            "tst r1, 8",
            "bne 0x4fc38",
            "cmp r3, 0x5d",
            "beq 0x4fec8",
            "mov r2, 0",
            "str r2, [sp, 0x14]",
            "mov r0, sb",
            "mov r1, 0x400",
            "ldr r2, [sp, 0x10]",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "bne 0x4fad0",
            "ldr r3, [sp, 0x14]",
            "ldr r1, [sp, 0x1c]",
            "cmp r1, 0",
            "movne r3, 0",
            "andeq r3, r3, 1",
            "cmp r3, 0",
            "beq 0x4fcf0",
            "ldr r2, [sp, 0x4e0]",
            "cmp r2, 1",
            "streq r0, [sp, 0x1c]",
            "beq 0x4fcf0",
            "cmp r2, 0",
            "bne 0x4fcd0",
            "ldrb r3, [sl, -1]",
            "cmp r3, 0xa",
            "beq 0x4fcd0",
            "ldr r2, [sp, 0xc]",
            "ldr r1, [0x0004fefc]",
            "mov r0, sl",
            "add r1, r2, r1",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "add sl, r0, 1",
            "mov r0, sl",
            "ldr r3, [sp, 0x4e0]",
            "ldr r1, [sp, 0x38]",
            "ldr r2, [sp, 0x28]",
            "bl fcn.0004f938",
            "mov r3, 1",
            "mov sl, r0",
            "str r3, [sp, 0x1c]",
            "cmp r5, 0",
            "beq 0x4fd1c",
            "ldr r4, [0x0004fefc]",
            "ldr r1, [sp, 0xc]",
            "mov r0, sl",
            "add r4, r1, r4",
            "mov r1, r4",
            "bl sym.imp.stpcpy",
            "subs r5, r5, 1",
            "bne 0x4fd08",
            "mov sl, r0",
            "ldr r2, [sp, 0x1c]",
            "cmp r2, 0",
            "beq 0x4fea4",
            "ldr r3, [sp, 0x40]",
            "ldr r0, [sp, 0x10]",
            "rsb sl, r3, sl",
            "bl sym.imp.fileno",
            "mov r1, 0",
            "str r1, [sp]",
            "mov r2, sl",
            "asr r3, r2, 0x1f",
            "mov r1, 0x10",
            "str r1, [sp, 4]",
            "bl rsym.my_chsize",
            "subs r1, r0, 0",
            "beq 0x4fe68",
            "ldr r0, [sp, 0x40]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [sp, 0x10]",
            "mov r1, 0",
            "bl rsym.my_fclose",
            "mov r0, 1",
            "add sp, sp, 0xbc",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [sp, 0x28]",
            "bl sym.imp.strlen",
            "str r0, [sp, 0x24]",
            "ldr r0, [sp, 0x38]",
            "bl sym.imp.strlen",
            "ldr r1, [sp, 0x24]",
            "add r0, r0, r1",
            "add r2, r0, 0x400",
            "add r2, r2, 2",
            "add r0, r0, 2",
            "str r2, [sp, 0x30]",
            "str r0, [sp, 0x44]",
            "b 0x4fa3c",
            "ldr r2, [sp, 0x1c]",
            "cmp r2, 0",
            "movne fp, 0",
            "andeq fp, fp, 1",
            "cmp fp, 0",
            "beq 0x4fde0",
            "cmp r7, 0x5b",
            "movne r3, 0",
            "strne r3, [sp, 0x1c]",
            "beq 0x4fe3c",
            "cmp r5, 0",
            "beq 0x4fe00",
            "mov r0, sl",
            "mov r1, r6",
            "bl sym.imp.stpcpy",
            "subs r5, r5, 1",
            "bne 0x4fdec",
            "mov sl, r0",
            "ldr r3, [sp, 0x14]",
            "ldr r1, [sp, 0x4e0]",
            "eor r5, r3, 1",
            "cmp r1, 2",
            "orrne r5, r5, 1",
            "cmp r5, 0",
            "moveq r7, r4",
            "beq 0x4fbe4",
            "mov r0, sl",
            "mov r1, sb",
            "bl sym.imp.stpcpy",
            "mov r7, r4",
            "mov sl, r0",
            "mov r5, 0",
            "b 0x4fbe4",
            "mov r0, sl",
            "ldr r1, [sp, 0x38]",
            "ldr r2, [sp, 0x28]",
            "ldr r3, [sp, 0x4e0]",
            "bl fcn.0004f938",
            "ldr r1, [sp, 0x4c]",
            "mov r2, 1",
            "mov sl, r0",
            "str r1, [sp, 0x2c]",
            "str r2, [sp, 0x1c]",
            "b 0x4fde0",
            "ldr r0, [sp, 0x10]",
            "mov r2, 0",
            "mov r3, 0",
            "str r1, [sp, 4]",
            "str r1, [sp]",
            "bl rsym.my_fseek",
            "orrs r1, r0, r1",
            "bne 0x4fd5c",
            "mov r2, sl",
            "ldr r0, [sp, 0x10]",
            "ldr r1, [sp, 0x40]",
            "mov r3, 4",
            "bl rsym.my_fwrite",
            "cmp r0, 0",
            "bne 0x4fd5c",
            "ldr r0, [sp, 0x10]",
            "mov r1, 0x10",
            "bl rsym.my_fclose",
            "subs r4, r0, 0",
            "bne 0x4fd70",
            "ldr r0, [sp, 0x40]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "b 0x4fd74",
            "ldr r2, [sp, 0x4e0]",
            "cmp r2, 2",
            "movne r3, 1",
            "strne r3, [sp, 0x14]",
            "bne 0x4fab8",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "mov r1, 1",
            "rsb sl, r0, sl",
            "str r1, [sp, 0x14]",
            "b 0x4fab8"
        ]
    },
    "rsym.my_fopen": {
        "function_address": "0x000406f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb04]!"
        ]
    },
    "rsym.my_fstat": {
        "function_address": "0x0003e1b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3d4]!"
        ]
    },
    "fcn.0004f938": {
        "function_address": "0x0004f938",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0004f9a0]",
            "cmp r3, 0",
            "add r4, pc, r4",
            "mov r5, r1",
            "mov r3, r0",
            "beq 0x4f960",
            "mov r0, r3",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, r2",
            "bl sym.imp.stpcpy",
            "ldrb r3, [r5]",
            "cmp r3, 0",
            "bne 0x4f98c",
            "ldr r1, [0x0004f9a4]",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.memcpy",
            "add r3, r0, 1",
            "b 0x4f954",
            "mov r3, 0x3d",
            "strb r3, [r0], 1",
            "mov r1, r5",
            "bl sym.imp.stpcpy",
            "b 0x4f974"
        ]
    },
    "rsym.my_chsize": {
        "function_address": "0x0003dffc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4fc]!"
        ]
    },
    "rsym.my_fclose": {
        "function_address": "0x0003d480",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xca4]!"
        ]
    },
    "rsym.my_fseek": {
        "function_address": "0x0003e014",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4ec]!"
        ]
    },
    "rsym.my_fwrite": {
        "function_address": "0x00040714",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xaec]!"
        ]
    },
    "fcn.000aef40": {
        "function_address": "0x000aef40",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000aefd0]",
            "ldr r3, [0x000aefd4]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x20]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "ldr r2, [r0, 0x1c]",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r6, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r6, [r4, 8]",
            "mov r1, 0",
            "ldr r2, [r4, 4]",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [0x000aefd8]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Finished::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008bd58",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r7, r0",
            "sub sp, sp, 0x30",
            "mov r0, r2",
            "mov r5, r2",
            "mov r4, r1",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes10get_verifyEv",
            "mov sl, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "movne r6, 0xc",
            "moveq r6, 0x24",
            "add r7, r7, 8",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r4",
            "movne r8, 0x10",
            "moveq r8, 0x28",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r7",
            "add r1, sl, 8",
            "mov r2, r6",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x8bf04",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "bne 0x8bf1c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "add r7, sp, 0x1c",
            "rsb r2, r8, r0",
            "mov ip, 0x16",
            "str ip, [sp]",
            "add r2, sl, r2",
            "mov ip, 1",
            "mov r3, r8",
            "mov r0, r5",
            "mov r1, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_digestEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "add sl, sp, 8",
            "mov r2, r0",
            "mov r1, sl",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "beq 0x8bf60",
            "mov sb, 0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "mvn r3, 3",
            "ldrh r2, [r0, 0x2a]",
            "rsb r3, r6, r3",
            "rsb sb, sb, r2",
            "rsb r3, r8, r3",
            "add sb, r3, sb",
            "cmp sb, 0",
            "ble 0x8beac",
            "mov r6, 0",
            "add r6, r6, 1",
            "mov r0, r4",
            "ldr r1, [0x0008bfac]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "cmp sb, r6",
            "bgt 0x8be94",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, r8",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x8bf04",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States12useHandShakeEv",
            "mov r4, 3",
            "str r4, [r0]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x8bf94",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useServerEv",
            "str r4, [r0]",
            "b 0x8bf10",
            "mov r0, r5",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "add r7, sp, 0x1c",
            "rsb r2, r8, r0",
            "mov ip, 0x16",
            "str ip, [sp]",
            "add r2, sl, r2",
            "mov ip, 1",
            "mov r3, r8",
            "mov r0, r5",
            "mov r1, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "b 0x8be14",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "beq 0x8be60",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov sb, r0",
            "b 0x8be64",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 5",
            "str r3, [r0]",
            "b 0x8bf10"
        ]
    },
    "rsym._ZNK5yaSSL3SSL9getHashesEv": {
        "function_address": "0x00040378",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd54]!"
        ]
    },
    "rsym._ZNK5yaSSL9sslHashes10get_verifyEv": {
        "function_address": "0x00040360",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd64]!"
        ]
    },
    "rsym._ZN5yaSSL6States12useHandShakeEv": {
        "function_address": "0x0003e050",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4c4]!"
        ]
    },
    "fcn.0008b808": {
        "function_address": "0x0008b808",
        "instructions": [
            "ldr r3, [0x0008b850]",
            "ldr r2, [0x0008b854]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "mov r1, 3",
            "str r2, [r0], 8",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "add r0, r4, 0xa",
            "mov r1, 0",
            "mov r2, 0x20",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.real_open_cached_file": {
        "function_address": "0x00055e1c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x20c",
            "add r5, sp, 8",
            "ldr r1, [r0, 0x80]",
            "ldr r2, [r0, 0x84]",
            "mov r4, r0",
            "mov ip, 0x10",
            "mov r0, r5",
            "ldr r3, [0x00055e74]",
            "str ip, [sp]",
            "bl rsym.create_temp_file",
            "cmp r0, 0",
            "str r0, [r4, 0x88]",
            "movlt r0, 1",
            "blt 0x55e68",
            "mov r0, r5",
            "mov r1, 0x90",
            "bl rsym.my_delete",
            "mov r0, 0",
            "add sp, sp, 0x20c",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.create_temp_file": {
        "function_address": "0x0003fe44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcc]!"
        ]
    },
    "sym.yaSSL::StringHolder::StringHolder__": {
        "function_address": "0x00092204",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DSS::sign_unsigned_char__unsigned_char_const__unsigned_int__yaSSL::RandomPool_const_": {
        "function_address": "0x0007f8d0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 4]",
            "sub sp, sp, 0x28",
            "add r4, sp, 4",
            "mov r5, r1",
            "mov r0, r4",
            "add r1, r3, 0x40",
            "mov r6, r2",
            "bl rsym._ZN8TaoCrypt10DSA_SignerC1ERKNS_14DSA_PrivateKeyE",
            "ldr r3, [sp, 0x38]",
            "mov r1, r6",
            "ldr r3, [r3]",
            "mov r2, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt10DSA_Signer4SignEPKhPhRNS_21RandomNumberGeneratorE",
            "ldr r4, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt10DSA_SignerC1ERKNS_14DSA_PrivateKeyE": {
        "function_address": "0x0003fb98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x294]!"
        ]
    },
    "rsym._ZN8TaoCrypt10DSA_Signer4SignEPKhPhRNS_21RandomNumberGeneratorE": {
        "function_address": "0x00040000",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfa4]!"
        ]
    },
    "sym.mysql_stmt_execute": {
        "function_address": "0x000445d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r6, [r0, 0x2c]",
            "ldr r5, [0x000448b4]",
            "cmp r6, 0",
            "mov r4, r0",
            "add r5, pc, r5",
            "beq 0x44604",
            "mov r1, 0xc",
            "bl fcn.00042124",
            "cmp r0, 0",
            "beq 0x44610",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [r6, 0x3b0]",
            "mov r0, r4",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x44604",
            "mov r3, 3",
            "str r3, [r4, 0xac]",
            "ldr r3, [r6, 0x2e8]",
            "cmp r3, 0",
            "beq 0x446ac",
            "ldr sl, [r4, 0xa8]",
            "cmp sl, 0",
            "beq 0x4475c",
            "ldr r2, [r4, 0x2c]",
            "ldrb r3, [r4, 0x2b8]",
            "ldr r7, [r2, 0x294]",
            "ldr r2, [r2, 0x2e8]",
            "cmp r3, 0",
            "ldrne r3, [r4, 0x34]",
            "cmp sl, r2",
            "ldr r8, [r4, 0x38]",
            "beq 0x446bc",
            "ldr r3, [0x000448b8]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x000448bc]",
            "ldr r2, [r3]",
            "mov r3, 0",
            "bl rsym.set_stmt_error",
            "ldr r3, [r4, 0x9c]",
            "tst r3, 0x40",
            "beq 0x4472c",
            "ldr r3, [0x000448c0]",
            "add r5, r5, r3",
            "mov r3, 0",
            "str r3, [r6, 0x380]",
            "str r5, [r4, 0x7c]",
            "ldr r0, [r4, 0xa0]",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x44608",
            "add sb, sl, sl, lsl 2",
            "add sl, sl, sb, lsl 2",
            "add sb, r7, sl, lsl 2",
            "cmp r7, sb",
            "blo 0x446dc",
            "b 0x4468c",
            "add r8, r8, 0x54",
            "mov r3, sl",
            "ldr r2, [r7, 0x48]",
            "cmp r3, 0",
            "str r2, [r8, 0x48]",
            "ldr r2, [r7, 0x1c]",
            "add sl, r3, 0x40",
            "str r2, [r8, 0x1c]",
            "ldr r2, [r7, 0x4c]",
            "mov r0, r3",
            "str r2, [r8, 0x4c]",
            "ldr r2, [r7, 0x40]",
            "mov r1, r8",
            "str r2, [r8, 0x40]",
            "ldr r2, [r7, 0x44]",
            "moveq sl, r3",
            "str r2, [r8, 0x44]",
            "blne fcn.00041690",
            "add r7, r7, 0x54",
            "cmp sb, r7",
            "bhi 0x446d4",
            "b 0x4468c",
            "ldr r3, [r4, 0x94]",
            "ands r3, r3, 1",
            "bne 0x44888",
            "ldr r0, [0x000448c4]",
            "ldr r1, [r4, 0x2c]",
            "add r2, r4, 0x2b8",
            "add r5, r5, r0",
            "add r2, r2, 1",
            "str r2, [r1, 0x3b8]",
            "strb r3, [r4, 0x2b9]",
            "str r5, [r4, 0x7c]",
            "b 0x446ac",
            "ldr r3, [r4, 0x2c]",
            "mov r0, r4",
            "ldr r7, [r3, 0x3a8]",
            "ldr r3, [r7, 0x2e8]",
            "add r1, r3, r3, lsl 2",
            "add r1, r3, r1, lsl 2",
            "str r3, [r4, 0xa8]",
            "lsl r1, r1, 2",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "str r0, [r4, 0x38]",
            "beq 0x44894",
            "ldr r1, [r4, 0xa8]",
            "mov r0, r4",
            "lsl r1, r1, 6",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "str r0, [r4, 0x34]",
            "beq 0x44894",
            "ldr r3, [r4, 0xa8]",
            "ldr r8, [r7, 0x294]",
            "add sb, r3, r3, lsl 2",
            "add r3, r3, sb, lsl 2",
            "ldr r7, [r4, 0x38]",
            "add sb, r8, r3, lsl 2",
            "cmp r7, 0",
            "cmpne r8, sb",
            "bhs 0x4468c",
            "ldr r1, [r8, 0x10]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r7, 0x10]",
            "ldr r1, [r8, 8]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r7, 8]",
            "ldr r1, [r8, 0xc]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r7, 0xc]",
            "ldr r1, [r8]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r7]",
            "ldr r1, [r8, 4]",
            "mov r0, r4",
            "bl rsym.strdup_root",
            "str r0, [r7, 4]",
            "ldr r3, [r8, 0x48]",
            "mov r0, r4",
            "str r3, [r7, 0x48]",
            "ldr r3, [r8, 0x1c]",
            "str r3, [r7, 0x1c]",
            "ldr r3, [r8, 0x4c]",
            "str r3, [r7, 0x4c]",
            "ldr r3, [r8, 0x40]",
            "str r3, [r7, 0x40]",
            "ldr r3, [r8, 0x44]",
            "str r3, [r7, 0x44]",
            "ldr r1, [r8, 0x18]",
            "cmp r1, 0",
            "moveq r0, r1",
            "blne rsym.strdup_root",
            "str r0, [r7, 0x18]",
            "str sl, [r7, 0x20]",
            "adds r7, r7, 0x54",
            "moveq r3, 0",
            "movne r3, 1",
            "add r8, r8, 0x54",
            "cmp sb, r8",
            "movls r3, 0",
            "andhi r3, r3, 1",
            "cmp r3, 0",
            "bne 0x447cc",
            "b 0x4468c",
            "mov r0, r4",
            "bl rsym.mysql_stmt_store_result",
            "b 0x446ac",
            "ldr r3, [0x000448b8]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x000448c8]",
            "ldr r2, [r3]",
            "mov r3, 0",
            "bl rsym.set_stmt_error",
            "b 0x4468c"
        ]
    },
    "fcn.00042124": {
        "function_address": "0x00042124",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0, 0xac]",
            "ldr r5, [0x00042300]",
            "cmp r3, 1",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "add r5, pc, r5",
            "mov r6, r1",
            "ble 0x42224",
            "tst r1, 4",
            "ldr r7, [r0, 0x2c]",
            "bne 0x42234",
            "tst r6, 2",
            "beq 0x42184",
            "ldr r3, [r4, 0x30]",
            "ldr r2, [r4, 0xa4]",
            "add r2, r3, r2, lsl 6",
            "cmp r3, r2",
            "bhs 0x42184",
            "mov r1, 0",
            "strb r1, [r3, 0x3a]",
            "add r3, r3, 0x40",
            "cmp r2, r3",
            "bhi 0x42174",
            "ldr r3, [0x00042304]",
            "cmp r7, 0",
            "add r3, r5, r3",
            "str r3, [r4, 0x7c]",
            "beq 0x42208",
            "ldr r3, [r4, 0xac]",
            "cmp r3, 2",
            "ble 0x42200",
            "ldr r2, [r7, 0x3b8]",
            "add r3, r4, 0x2b8",
            "add r3, r3, 1",
            "cmp r2, r3",
            "moveq r3, 0",
            "streq r3, [r7, 0x3b8]",
            "ldr r3, [r4, 0xa8]",
            "cmp r3, 0",
            "beq 0x42200",
            "ldr r3, [r7, 0x380]",
            "cmp r3, 0",
            "beq 0x42200",
            "ldr r3, [r7, 0x3b0]",
            "mov r0, r7",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r7, 0x3b8]",
            "cmp r3, 0",
            "movne r2, 1",
            "strbne r2, [r3]",
            "mov r3, 0",
            "str r3, [r7, 0x380]",
            "tst r6, 1",
            "bne 0x42260",
            "tst r6, 8",
            "beq 0x4221c",
            "ldr r3, [r4, 0xa0]",
            "cmp r3, 0",
            "bne 0x422d4",
            "mov r3, 2",
            "str r3, [r4, 0xac]",
            "mov r0, 0",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "add r0, r0, 0x48",
            "mov r1, 1",
            "bl rsym.free_root",
            "mov r3, 0",
            "mov r2, 0",
            "str r2, [r4, 0x68]",
            "str r3, [r4, 0x6c]",
            "mov r3, 0",
            "str r3, [r4, 0x78]",
            "str r3, [r4, 0x40]",
            "b 0x42154",
            "ldr r3, [r4, 0x90]",
            "mov r2, 0",
            "lsr r1, r3, 0x18",
            "lsr ip, r3, 8",
            "lsr r0, r3, 0x10",
            "strb r0, [sp, 0x16]",
            "strb r1, [sp, 0x17]",
            "strb r3, [sp, 0x14]",
            "strb ip, [sp, 0x15]",
            "ldr ip, [r7, 0x3b0]",
            "mov r0, r7",
            "str r2, [sp, 8]",
            "str r2, [sp]",
            "str r2, [sp, 4]",
            "str r4, [sp, 0xc]",
            "mov r1, 0x1a",
            "add r2, sp, 0x14",
            "mov r3, 4",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x42208",
            "mov r0, r4",
            "mov r1, r7",
            "bl rsym.set_stmt_errmsg",
            "mov r0, 1",
            "str r0, [r4, 0xac]",
            "b 0x42228",
            "ldr r2, [0x00042308]",
            "mov r3, 0",
            "ldr r2, [r5, r2]",
            "strb r3, [r4, 0xb0]",
            "str r3, [r4, 0xa0]",
            "ldr r1, [r2]",
            "add r0, r4, 0x2b0",
            "bl sym.imp.strcpy",
            "mov r3, 2",
            "str r3, [r4, 0xac]",
            "b 0x42224"
        ]
    },
    "fcn.00041690": {
        "function_address": "0x00041690",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl}",
            "ldr r3, [r0, 0x34]",
            "ldr r2, [0x00041adc]",
            "cmp r3, 0xa",
            "add r2, pc, r2",
            "beq 0x419e4",
            "bls 0x416dc",
            "cmp r3, 0x10",
            "beq 0x41728",
            "bhi 0x41718",
            "cmp r3, 0xc",
            "beq 0x41988",
            "blo 0x41968",
            "cmp r3, 0xd",
            "beq 0x41828",
            "cmp r3, 0xe",
            "beq 0x4199c",
            "mov r3, 1",
            "b 0x417f8",
            "cmp r3, 4",
            "beq 0x419c8",
            "bls 0x41804",
            "cmp r3, 7",
            "beq 0x41988",
            "bhi 0x41a64",
            "cmp r3, 5",
            "beq 0x41848",
            "cmp r3, 6",
            "bne 0x416d4",
            "ldr r3, [r0]",
            "mov ip, 0",
            "str ip, [r3]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "cmp r3, 0xfc",
            "bhi 0x41994",
            "cmp r3, 0xf9",
            "blo 0x41ac4",
            "ldr ip, [0x00041ae0]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "ldr r7, [r1, 0x4c]",
            "cmp r3, r7",
            "beq 0x417b0",
            "ldr ip, [0x00041ae4]",
            "ldr r8, [0x00041ae8]",
            "ldr sl, [r2, ip]",
            "add r8, r2, r8",
            "cmp sl, r8",
            "beq 0x417a4",
            "ldr r6, [r8]",
            "ldr ip, [r6]",
            "cmp ip, 6",
            "beq 0x41798",
            "mov r4, 0",
            "mov r5, r4",
            "cmp r7, ip",
            "orreq r4, r4, 1",
            "cmp r3, ip",
            "orreq r5, r5, 1",
            "ldr ip, [r6, 4]!",
            "cmp ip, 6",
            "bne 0x41770",
            "orr ip, r4, r5",
            "tst ip, 0xff",
            "bne 0x418c4",
            "add r8, r8, 4",
            "cmp r8, sl",
            "bne 0x41758",
            "ldr r3, [0x00041aec]",
            "add r3, r2, r3",
            "str r3, [r0, 0x18]",
            "ldr r3, [0x00041af0]",
            "add r3, r2, r3",
            "str r3, [r0, 0x1c]",
            "ldr r3, [r1, 0x4c]",
            "cmp r3, 8",
            "beq 0x418e8",
            "bhi 0x41868",
            "cmp r3, 3",
            "beq 0x419f0",
            "bhi 0x41924",
            "cmp r3, 1",
            "beq 0x41a08",
            "bls 0x41910",
            "mov r3, 2",
            "str r3, [r0, 0x30]",
            "add r3, r3, 4",
            "str r3, [r1, 0x20]",
            "mov r3, 0",
            "mov r0, r3",
            "pop {r4, r5, r6, r7, r8, sl}",
            "bx lr",
            "cmp r3, 1",
            "beq 0x419ac",
            "blo 0x4199c",
            "cmp r3, 2",
            "beq 0x41828",
            "cmp r3, 3",
            "beq 0x41a74",
            "mov r3, 1",
            "b 0x417f8",
            "ldr ip, [0x00041af4]",
            "ldr r3, [r0]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "mov ip, 2",
            "str ip, [r3]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "ldr ip, [0x00041af8]",
            "ldr r3, [r0]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "mov ip, 8",
            "str ip, [r3]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "cmp r3, 0xd",
            "beq 0x417e4",
            "bhi 0x418fc",
            "cmp r3, 0xa",
            "beq 0x41ad4",
            "blo 0x41a1c",
            "cmp r3, 0xb",
            "beq 0x41898",
            "cmp r3, 0xc",
            "beq 0x4194c",
            "mov r3, 1",
            "b 0x417f8",
            "ldr r3, [0x00041afc]",
            "mov r4, 0xf",
            "add ip, r2, r3",
            "str r4, [r1, 0x20]",
            "str ip, [r0, 0x1c]",
            "add r3, r2, r3",
            "mov r2, 0xa",
            "str r2, [r1, 0x20]",
            "str r3, [r0, 0x1c]",
            "mov r3, 0",
            "b 0x417f8",
            "and r4, r4, r5",
            "tst r4, 0xff",
            "beq 0x417a4",
            "ldr r3, [0x00041af0]",
            "add r3, r2, r3",
            "str r3, [r0, 0x1c]",
            "ldr r3, [r1, 0x4c]",
            "cmp r3, 8",
            "bne 0x417c8",
            "mov r2, 0x15",
            "str r2, [r1, 0x20]",
            "str r3, [r0, 0x30]",
            "mov r3, 0",
            "b 0x417f8",
            "cmp r3, 0x10",
            "beq 0x41910",
            "bhi 0x41ab0",
            "cmp r3, 0xe",
            "bne 0x416d4",
            "ldr r1, [0x00041b00]",
            "mov r3, 0",
            "add r2, r2, r1",
            "str r2, [r0, 0x1c]",
            "b 0x417f8",
            "cmp r3, 5",
            "beq 0x41a4c",
            "blo 0x41a34",
            "cmp r3, 6",
            "moveq r3, 0",
            "streq r3, [r0, 0x30]",
            "streq r3, [r1, 0x20]",
            "beq 0x417f8",
            "cmp r3, 7",
            "bne 0x416d4",
            "ldr r3, [0x00041afc]",
            "add r2, r2, r3",
            "mov r3, 0x1e",
            "str r2, [r0, 0x1c]",
            "str r3, [r1, 0x20]",
            "mov r3, 0",
            "b 0x417f8",
            "ldr r3, [r0]",
            "ldr ip, [0x00041b04]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "mov ip, 0x24",
            "str ip, [r3]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "ldr r3, [r0]",
            "ldr ip, [0x00041b08]",
            "b 0x41970",
            "cmp r3, 0xfe",
            "bhi 0x416d4",
            "ldr ip, [0x00041b0c]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "b 0x41734",
            "ldr r4, [0x00041b10]",
            "ldr ip, [r0]",
            "add r4, r2, r4",
            "str r4, [r0, 0x18]",
            "str r3, [ip]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "ldr r4, [0x00041b14]",
            "ldr ip, [r0]",
            "add r4, r2, r4",
            "str r4, [r0, 0x18]",
            "str r3, [ip]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "ldr r3, [r0]",
            "ldr ip, [0x00041b18]",
            "b 0x41970",
            "mov r3, 0xb",
            "str r3, [r1, 0x20]",
            "mov r3, 4",
            "str r3, [r0, 0x30]",
            "mov r3, 0",
            "b 0x417f8",
            "str r3, [r0, 0x30]",
            "mov r3, 4",
            "str r3, [r1, 0x20]",
            "mov r3, 0",
            "b 0x417f8",
            "mov r3, 9",
            "str r3, [r1, 0x20]",
            "mov r3, 4",
            "str r3, [r0, 0x30]",
            "mov r3, 0",
            "b 0x417f8",
            "mov r3, 4",
            "str r3, [r0, 0x30]",
            "ldr r3, [0x00041b1c]",
            "str r3, [r1, 0x20]",
            "mov r3, 0",
            "b 0x417f8",
            "mov r3, 8",
            "str r3, [r0, 0x30]",
            "ldr r3, [0x00041b1c]",
            "str r3, [r1, 0x20]",
            "mov r3, 0",
            "b 0x417f8",
            "cmp r3, 8",
            "beq 0x41a94",
            "cmp r3, 9",
            "bne 0x416d4",
            "ldr ip, [0x00041b20]",
            "ldr r3, [r0]",
            "add ip, r2, ip",
            "str ip, [r0, 0x18]",
            "mov ip, 4",
            "str ip, [r3]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "ldr r4, [0x00041b24]",
            "ldr ip, [r0]",
            "add r4, r2, r4",
            "str r4, [r0, 0x18]",
            "str r3, [ip]",
            "ldr r3, [r0, 0x34]",
            "b 0x41734",
            "sub r3, r3, 0xf6",
            "cmp r3, 9",
            "bls 0x41910",
            "mov r3, 1",
            "b 0x417f8",
            "cmp r3, 0xf6",
            "beq 0x4199c",
            "mov r3, 1",
            "b 0x417f8",
            "ldr r3, [0x00041afc]",
            "b 0x418ac"
        ]
    },
    "rsym.mysql_stmt_store_result": {
        "function_address": "0x0003de88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5f4]!"
        ]
    },
    "sym.my_error_register": {
        "function_address": "0x000499e0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, 0x10",
            "mov r4, r1",
            "mov r1, r0",
            "mov r6, r2",
            "bl rsym.my_malloc",
            "ldr r3, [0x00049a88]",
            "cmp r0, 0",
            "add r3, pc, r3",
            "beq 0x49a80",
            "ldr r1, [0x00049a8c]",
            "str r5, [r0, 4]",
            "str r4, [r0, 8]",
            "str r6, [r0, 0xc]",
            "ldr r2, [r3, r1]",
            "add r3, r3, r1",
            "cmp r2, 0",
            "beq 0x49a58",
            "ldr ip, [r2, 0xc]",
            "cmp r4, ip",
            "bge 0x49a48",
            "b 0x49a70",
            "ldr r1, [r2, 0xc]",
            "cmp r4, r1",
            "blt 0x49a70",
            "mov r3, r2",
            "ldr r2, [r2]",
            "cmp r2, 0",
            "bne 0x49a3c",
            "mov r2, 0",
            "str r2, [r0]",
            "str r0, [r3]",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r2, 8]",
            "cmp r6, r1",
            "blt 0x49a5c",
            "bl rsym.my_no_flags_free",
            "mov r0, 1",
            "b 0x49a68"
        ]
    },
    "sym.yaSSL::CertificateVerify::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008c124",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x3c",
            "mov r0, r2",
            "mov r5, r2",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes14get_certVerifyEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL11CertManager15get_peerKeyTypeEv",
            "cmp r0, 1",
            "mov r7, r0",
            "beq 0x8c1ec",
            "mov r0, r4",
            "ldr sl, [r4, 0x2c]",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "add r7, sp, 8",
            "mov r2, r0",
            "mov r1, sl",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt19DecodeDSA_SignatureEPhPKhj",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager11get_peerKeyEv",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv",
            "add r6, sp, 0x30",
            "mov r2, r0",
            "mov r1, sl",
            "mov r3, 1",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3DSSC1EPKhjb",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "add r1, r8, 0x10",
            "str r0, [sp]",
            "mov r3, r7",
            "mov r0, r6",
            "mov r2, 0x14",
            "bl rsym._ZN5yaSSL3DSS6verifyEPKhjS2_j",
            "cmp r0, 0",
            "beq 0x8c250",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3DSSD1Ev",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager11get_peerKeyEv",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv",
            "add r6, sp, 8",
            "mov r2, r0",
            "mov r1, sl",
            "mov r3, r7",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "mov r0, r4",
            "ldr r4, [r4, 0x2c]",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "mov r1, r8",
            "str r0, [sp]",
            "mov r3, r4",
            "mov r0, r6",
            "mov r2, 0x24",
            "bl rsym._ZN5yaSSL3RSA6verifyEPKhjS2_j",
            "cmp r0, 0",
            "beq 0x8c260",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "b 0x8c1e0",
            "mov r0, r5",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8c1d8",
            "mov r0, r5",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "b 0x8c1e0"
        ]
    },
    "rsym._ZNK5yaSSL9sslHashes14get_certVerifyEv": {
        "function_address": "0x0003f7a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x534]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager15get_peerKeyTypeEv": {
        "function_address": "0x0003d1c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe74]!"
        ]
    },
    "rsym._ZN5yaSSL3DSSC1EPKhjb": {
        "function_address": "0x0003ccf4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1ac]!"
        ]
    },
    "rsym._ZN5yaSSL3DSS6verifyEPKhjS2_j": {
        "function_address": "0x0003dc3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x77c]!"
        ]
    },
    "rsym._ZN5yaSSL3DSSD1Ev": {
        "function_address": "0x0003fdd8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x114]!"
        ]
    },
    "rsym._ZN5yaSSL3RSA6verifyEPKhjS2_j": {
        "function_address": "0x0003f4fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6fc]!"
        ]
    },
    "sym.mysql_stmt_attr_set": {
        "function_address": "0x000424e8",
        "instructions": [
            "ldr r3, [0x0004257c]",
            "cmp r1, 1",
            "push {r4, lr}",
            "add r3, pc, r3",
            "beq 0x4255c",
            "blo 0x42530",
            "cmp r1, 2",
            "beq 0x42544",
            "ldr r2, [0x00042580]",
            "ldr r1, [0x00042584]",
            "ldr r3, [r3, r2]",
            "ldr r2, [r3]",
            "mov r3, 0",
            "bl rsym.set_stmt_error",
            "mov r3, 1",
            "mov r0, r3",
            "pop {r4, lr}",
            "bx lr",
            "cmp r2, 0",
            "ldrbne r2, [r2]",
            "mov r3, 0",
            "strb r2, [r0, 0x2ba]",
            "b 0x42524",
            "cmp r2, 0",
            "beq 0x42520",
            "ldr r2, [r2]",
            "mov r3, 0",
            "str r2, [r0, 0x98]",
            "b 0x42524",
            "cmp r2, 0",
            "beq 0x42570",
            "ldr r2, [r2]",
            "cmp r2, 1",
            "bhi 0x42508",
            "str r2, [r0, 0x94]",
            "mov r3, 0",
            "b 0x42524"
        ]
    },
    "sym.TaoCrypt::FileSource::FileSource__": {
        "function_address": "0x000a1db4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "blne sym.imp.fclose",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_b_printf": {
        "function_address": "0x00055584",
        "instructions": [
            "push {r1, r2, r3}",
            "str lr, [sp, -4]!",
            "sub sp, sp, 8",
            "add r3, sp, 0x10",
            "mov r2, r3",
            "ldr r1, [sp, 0xc]",
            "str r3, [sp, 4]",
            "bl rsym.my_b_vprintf",
            "add sp, sp, 8",
            "pop {lr}",
            "add sp, sp, 0xc",
            "bx lr"
        ]
    },
    "rsym.my_b_vprintf": {
        "function_address": "0x0003e464",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x20c]!"
        ]
    },
    "sym.yaSSL::SSL_CTX::SetCipherList_char_const_": {
        "function_address": "0x000929ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [0x00092b28]",
            "sub sp, sp, 0x44",
            "subs fp, r1, 0",
            "add r3, pc, r3",
            "mov sl, r0",
            "streq fp, [sp, 4]",
            "beq 0x92b18",
            "ldr r5, [0x00092b2c]",
            "add sb, sp, 0x3c",
            "mov r8, 0",
            "add r5, r3, r5",
            "mov r0, fp",
            "mov r3, 0x3a",
            "mov r1, sb",
            "strh r3, [sp, 0x3c]",
            "str r8, [sp, 4]",
            "bl sym.imp.strstr",
            "subs r7, r0, 0",
            "add r4, sp, 0xc",
            "beq 0x92ae8",
            "mov r0, 0x30",
            "rsb r1, fp, r7",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "mov r6, r0",
            "mov r2, r6",
            "cmp r6, 0x30",
            "mov r3, 0x30",
            "mov r1, fp",
            "mov r0, r4",
            "moveq r6, 0x2f",
            "bl sym.imp.__strncpy_chk",
            "add r3, sp, 0x40",
            "add r6, r3, r6",
            "mov r3, 0",
            "strb r3, [r6, -0x34]",
            "mov r6, 0",
            "b 0x92a90",
            "add r6, r6, 1",
            "cmp r6, 0x80",
            "beq 0x92ac8",
            "ldr r1, [r5, r6, lsl 2]",
            "mov r0, r4",
            "mov r2, 0x30",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x92a84",
            "add r3, r8, 1",
            "add r8, sl, r8",
            "strb r0, [r8, 0x19]",
            "add r2, sl, r3",
            "add r8, r3, 1",
            "mov r3, 1",
            "strb r6, [r2, 0x19]",
            "str r3, [sp, 4]",
            "cmp r7, 0",
            "beq 0x92b04",
            "add fp, r7, 1",
            "mov r0, fp",
            "mov r1, sb",
            "bl sym.imp.strstr",
            "subs r7, r0, 0",
            "bne 0x92a40",
            "mov r0, fp",
            "bl sym.imp.strlen",
            "mov r1, r0",
            "mov r0, 0x30",
            "bl rsym._ZN5yaSSL3minIjEET_S1_S1_",
            "mov r6, r0",
            "b 0x92a50",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "movne r3, 1",
            "strne r8, [sl, 0x9c]",
            "strbne r3, [sl, 0x18]",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__strncpy_chk": {
        "function_address": "0x0003dc18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x794]!"
        ]
    },
    "sym.mysql_reconnect": {
        "function_address": "0x0007783c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldrb r2, [r0, 0x385]",
            "ldr r3, [0x00077a24]",
            "cmp r2, 0",
            "add r3, pc, r3",
            "sub sp, sp, 0x3d8",
            "mov r4, r0",
            "ldreq r2, [r0, 0x2ec]",
            "beq 0x77998",
            "ldr r2, [r0, 0x2ec]",
            "ands r6, r2, 1",
            "bne 0x77998",
            "ldr r1, [r0, 0x284]",
            "cmp r1, 0",
            "beq 0x77998",
            "add r5, sp, 0x10",
            "mov r0, r5",
            "add r7, r4, 0x2f8",
            "bl rsym.mysql_init",
            "mov r1, r7",
            "mov r2, 0x88",
            "add r0, sp, 0x308",
            "bl sym.imp.memcpy",
            "ldr ip, [r4, 0x2dc]",
            "ldrb lr, [r4, 0x39b]",
            "ldr r8, [r4, 0x28c]",
            "ldr sl, [r4, 0x2d8]",
            "add r1, r4, 0x270",
            "ldm r1, {r1, r2, r3, sb}",
            "orr ip, ip, 0x80000000",
            "mov r0, r5",
            "strb lr, [sp, 0x3ab]",
            "stm sp, {r8, sl}",
            "str sb, [sp, 8]",
            "str ip, [sp, 0xc]",
            "str r6, [sp, 0x33c]",
            "str r6, [sp, 0x338]",
            "bl rsym.mysql_real_connect",
            "cmp r0, 0",
            "beq 0x779f4",
            "ldr r3, [r4, 0x290]",
            "mov r0, r5",
            "ldr r1, [r3, 0x10]",
            "bl rsym.mysql_set_character_set",
            "subs r8, r0, 0",
            "bne 0x779dc",
            "ldr r3, [r4, 0x3ac]",
            "ldrb ip, [r4, 0x384]",
            "str r8, [r4, 0x3ac]",
            "mov lr, 1",
            "mov r2, 0x88",
            "mov r1, r8",
            "mov r0, r7",
            "str r3, [sp, 0x3bc]",
            "strb lr, [sp, 0x395]",
            "strb ip, [sp, 0x394]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "strb r8, [r4, 0x384]",
            "bl rsym.mysql_close",
            "mov r2, 0x3c8",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x39c]",
            "ldr r2, [r4, 0x3a0]",
            "cmp r3, r5",
            "ldr r3, [r4, 0x3a8]",
            "streq r4, [r4, 0x39c]",
            "cmp r3, r5",
            "ldr r3, [r4, 0x3a4]",
            "streq r4, [r4, 0x3a8]",
            "cmp r3, r5",
            "streq r4, [r4, 0x3a4]",
            "cmp r2, r5",
            "moveq r2, r4",
            "bne 0x779cc",
            "str r4, [r2, 0x3a0]",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym.net_clear",
            "mvn r2, 0",
            "mvn r3, 0",
            "str r2, [r4, 0x2b8]",
            "str r3, [r4, 0x2bc]",
            "mov r0, 0",
            "b 0x779bc",
            "ldr r1, [0x00077a28]",
            "bic r2, r2, 1",
            "ldr r3, [r3, r1]",
            "str r2, [r4, 0x2ec]",
            "mov r0, r4",
            "ldr r2, [r3]",
            "ldr r1, [0x00077a2c]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "add sp, sp, 0x3d8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r2, r3",
            "ldr r3, [r2, 0x3a0]",
            "cmp r3, r5",
            "bne 0x779c8",
            "b 0x77970",
            "mov r1, r6",
            "mov r2, 0x88",
            "add r0, r5, 0x2f8",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym.mysql_close",
            "ldr r3, [sp, 0x68]",
            "add r1, r5, 0x5f",
            "str r3, [r4, 0x58]",
            "add r0, r4, 0x5f",
            "bl sym.imp.strcpy",
            "add r0, r4, 0x25c",
            "add r1, sp, 0x270",
            "add r0, r0, 3",
            "sub r1, r1, 1",
            "bl sym.imp.strcpy",
            "mov r0, 1",
            "b 0x779bc"
        ]
    },
    "rsym.mysql_set_character_set": {
        "function_address": "0x0003e638",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd4]!"
        ]
    },
    "sym.mysql_set_master": {
        "function_address": "0x000450f4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x39c]",
            "sub sp, sp, 0x18",
            "cmp r0, r4",
            "beq 0x45118",
            "ldrb ip, [r0, 0x39b]",
            "cmp ip, 0",
            "beq 0x45140",
            "ldr ip, [sp, 0x20]",
            "mov r0, r4",
            "str ip, [sp]",
            "bl fcn.00044fa0",
            "str r0, [r4, 0x39c]",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "add sp, sp, 0x18",
            "pop {r4, lr}",
            "bx lr",
            "str r1, [sp, 0x14]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0xc]",
            "bl rsym.mysql_close",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "b 0x45118"
        ]
    },
    "sym.my_ftell": {
        "function_address": "0x0004cfc0",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.ftell",
            "mov r3, r0",
            "asr r4, r3, 0x1f",
            "mov r1, r4",
            "mov r0, r3",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_CTX_set_default_passwd_cb_userdata": {
        "function_address": "0x000855dc",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL7SSL_CTX11SetUserDataEPv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX11SetUserDataEPv": {
        "function_address": "0x0003ffa0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfe4]!"
        ]
    },
    "sym.void_TaoCrypt::tcArrayDelete_unsigned_char__unsigned_char_": {
        "function_address": "0x000bb2d8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdaPvN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZdaPvN8TaoCrypt5new_tE": {
        "function_address": "0x0003f340",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x824]!"
        ]
    },
    "sym.mysql_stmt_prepare": {
        "function_address": "0x000426bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [r0, 0x2c]",
            "ldr r6, [0x0004288c]",
            "cmp r5, 0",
            "add r6, pc, r6",
            "sub sp, sp, 0x18",
            "mov r4, r0",
            "mov r7, r1",
            "mov r8, r2",
            "beq 0x4284c",
            "ldr r2, [r0, 0xac]",
            "mov r3, 0",
            "cmp r2, 1",
            "strb r3, [r0, 0xb0]",
            "str r3, [r0, 0xa0]",
            "ble 0x427a0",
            "mov r1, 6",
            "bl fcn.00042124",
            "subs sb, r0, 0",
            "movne r0, 1",
            "beq 0x4271c",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, 1",
            "strb sb, [r4, 0x2b8]",
            "strb sb, [r4, 0x2b7]",
            "str sb, [r4, 0xa8]",
            "str sb, [r4, 0xa4]",
            "bl rsym.free_root",
            "ldr r3, [r4, 0x90]",
            "mov sl, 1",
            "lsr r2, r3, 0x18",
            "lsr r0, r3, 8",
            "lsr r1, r3, 0x10",
            "strb r0, [sp, 0x15]",
            "strb r1, [sp, 0x16]",
            "strb r2, [sp, 0x17]",
            "strb r3, [sp, 0x14]",
            "str sl, [r4, 0xac]",
            "add r3, sp, 0x14",
            "ldr ip, [r5, 0x3b0]",
            "str r3, [sp]",
            "mov r3, 4",
            "str r3, [sp, 4]",
            "mov r2, sb",
            "str sl, [sp, 8]",
            "str r4, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, 0x19",
            "mov r3, sb",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x42838",
            "mov r2, 0",
            "mov sl, 1",
            "ldr ip, [r5, 0x3b0]",
            "mov r0, r5",
            "stm sp, {r7, r8, sl}",
            "str r4, [sp, 0xc]",
            "mov r1, 0x16",
            "mov r3, r2",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x42838",
            "ldr r3, [r5, 0x3b0]",
            "mov r0, r5",
            "mov r1, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "bne 0x42838",
            "ldr r3, [r4, 0xa4]",
            "ldr r1, [r4, 0xa8]",
            "mov r0, r4",
            "add r1, r1, r3",
            "lsl r1, r1, 6",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [r4, 0x30]",
            "beq 0x4286c",
            "ldr r2, [r4, 0xa4]",
            "add r3, r0, r2, lsl 6",
            "mov r2, 2",
            "str r2, [r4, 0xac]",
            "str r3, [r4, 0x34]",
            "mov r0, r7",
            "b 0x42710",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym.set_stmt_errmsg",
            "mov r0, sl",
            "b 0x42710",
            "ldr r2, [0x00042890]",
            "mov r3, r5",
            "ldr r2, [r6, r2]",
            "ldr r1, [0x00042894]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x42710",
            "ldr r2, [0x00042890]",
            "mov r0, r4",
            "ldr r2, [r6, r2]",
            "ldr r1, [0x00042898]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, sl",
            "b 0x42710"
        ]
    },
    "sym.yaSSL::SSL_SESSION::SSL_SESSION__": {
        "function_address": "0x00092e7c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "mov r1, 0x30",
            "ldr r2, [r4, 0x5c]",
            "add r0, r0, 0x20",
            "bl rsym._ZN5yaSSL5cleanEPVhjRNS_10RandomPoolE",
            "ldr r0, [r4, 0x60]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00092f48": {
        "function_address": "0x00092f48",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "strh r1, [sp, 0xc]",
            "mov r4, r0",
            "mov r7, r3",
            "ldrb r6, [sp, 0x30]",
            "ldr r1, [sp, 0xc]",
            "mov r5, r2",
            "bl rsym._ZN5yaSSL10ConnectionC1ENS_15ProtocolVersionERNS_10RandomPoolE",
            "ldr r3, [sp, 0xc]",
            "mov r1, r7",
            "ldr r2, [sp, 0x28]",
            "add r0, r4, 0x138",
            "str r6, [sp]",
            "bl rsym._ZN5yaSSL10ParametersC1ENS_13ConnectionEndERKNS_7CiphersENS_15ProtocolVersionEb",
            "add r0, r4, 0x810",
            "mov r1, r5",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL11SSL_SESSIONC1ERNS_10RandomPoolE",
            "ldr r3, [sp, 0x2c]",
            "mov r0, r4",
            "str r3, [r4, 0x87c]",
            "mov r3, 0",
            "strb r3, [r4, 0x880]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL10ConnectionC1ENS_15ProtocolVersionERNS_10RandomPoolE": {
        "function_address": "0x0003e1dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3bc]!"
        ]
    },
    "rsym._ZN5yaSSL10ParametersC1ENS_13ConnectionEndERKNS_7CiphersENS_15ProtocolVersionEb": {
        "function_address": "0x0003db40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x824]!"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSIONC1ERNS_10RandomPoolE": {
        "function_address": "0x0003e7c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfcc]!"
        ]
    },
    "sym.yaSSL::GetSSL_Factory__": {
        "function_address": "0x00093a14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00093a58]",
            "ldr r5, [0x00093a5c]",
            "add r4, pc, r4",
            "ldr r6, [r4, r5]",
            "cmp r6, 0",
            "beq 0x93a3c",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL10sslFactoryC1Ev",
            "str r6, [r4, r5]",
            "b 0x93a30"
        ]
    },
    "rsym._ZN5yaSSL10sslFactoryC1Ev": {
        "function_address": "0x0003d2a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xde4]!"
        ]
    },
    "sym.TaoCrypt::SHA384::SHA384_TaoCrypt::SHA384_const_": {
        "function_address": "0x000b3830",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r6, r4, 0x10",
            "mov r1, 8",
            "mov r2, 0x80",
            "bl rsym._ZN8TaoCrypt19HASH64withTransformC2Ejj",
            "add lr, r5, 0x10",
            "mov ip, r6",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r6, [0x000b38a8]",
            "ldm lr!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b38ac]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r6, pc, r6",
            "ldr r7, [r6, r7]",
            "ldmib r5, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r4, {r1, r2, r3}",
            "str r7, [r4]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r1, r5, 0x50",
            "add r0, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::SSL_yaSSL::SSL_CTX_": {
        "function_address": "0x00095ac8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x20",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL6CryptoC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10getVersionEv",
            "lsl r3, r0, 0x10",
            "asr r3, r3, 0x10",
            "lsr r2, r3, 8",
            "strb r2, [sp, 0x11]",
            "strb r3, [sp, 0x10]",
            "ldrh r3, [sp, 0x10]",
            "mov r0, r4",
            "strh r3, [sp, 0x1c]",
            "bl rsym._ZN5yaSSL6Crypto10use_randomEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD7getSideEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX10GetCiphersEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX11GetDH_ParmsEv",
            "str r7, [sp]",
            "str r5, [sp, 4]",
            "ldrb ip, [r0, 8]",
            "add r7, r4, 0x68",
            "mov r2, r8",
            "mov r3, r6",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r7",
            "str ip, [sp, 8]",
            "bl rsym._ZN5yaSSL8SecurityC1ENS_15ProtocolVersionERNS_10RandomPoolENS_13ConnectionEndERKNS_7CiphersEPNS_7SSL_CTXEb",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL6StatesC1Ev",
            "add r0, r4, 0x950",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "add r0, r4, 0x960",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "add r0, r4, 0x960",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL8FinishedC1Ev",
            "add r0, r4, 0x9b0",
            "mvn r1, 0",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL6SocketC1Ei",
            "ldr r6, [0x00095da4]",
            "add r0, r4, 0x9c0",
            "bl rsym._ZN5yaSSL7BuffersC1Ev",
            "ldr r1, [0x00095da8]",
            "add r6, pc, r6",
            "add r0, r4, 0x9d0",
            "add r1, r6, r1",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL3LogC1EPKc",
            "mov r3, 0",
            "strb r3, [r4, 0x9de]",
            "strb r3, [r4, 0x9dd]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "bl rsym._ZNK5yaSSL10RandomPool8GetErrorEv",
            "subs r1, r0, 0",
            "bne 0x95cd8",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL6Crypto15use_certManagerEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX7getCertEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager12CopySelfCertEPKNS_4x509E",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldr r8, [r0]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX6getKeyEv",
            "rsbs r8, r8, 1",
            "movlo r8, 0",
            "cmp r0, 0",
            "beq 0x95cf0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX6getKeyEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13SetPrivateKeyERKNS_4x509E",
            "subs r1, r0, 0",
            "bne 0x95cd8",
            "cmp r8, 0",
            "bne 0x95d44",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10verifyPeerEv",
            "cmp r0, 0",
            "bne 0x95d38",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10verifyNoneEv",
            "cmp r0, 0",
            "bne 0x95d2c",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "bl rsym._ZNK5yaSSL10SSL_METHOD10failNoCertEv",
            "cmp r0, 0",
            "bne 0x95d20",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX17getVerifyCallbackEv",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager17setVerifyCallbackEPFiiPNS_14X509_STORE_CTXEE",
            "cmp r8, 0",
            "bne 0x95d08",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX10GetCA_ListEv",
            "ldr r5, [r0]",
            "cmp r5, 0",
            "bne 0x95cc0",
            "b 0x95ce0",
            "ldr r5, [r5, 4]",
            "cmp r5, 0",
            "beq 0x95ce0",
            "ldr r1, [r5, 8]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager10CopyCaCertEPKNS_4x509E",
            "cmp r0, 0",
            "beq 0x95cb4",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r4",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "cmp r8, 0",
            "beq 0x95c44",
            "mov r0, r4",
            "mov r1, 0x6f",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x95ce0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL7SSL_CTX11GetDH_ParmsEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL6Crypto5SetDHERKNS_8DH_ParmsE",
            "b 0x95c9c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setFailNoCertEv",
            "b 0x95c80",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setVerifyNoneEv",
            "b 0x95c6c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertManager13setVerifyPeerEv",
            "b 0x95c58",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r3, [0x00095dac]",
            "ldrh r3, [r0, r3]",
            "mov r0, r7",
            "strh r3, [sp, 0x18]",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldrb sb, [r0, 0x6df]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 1",
            "mov r3, r0",
            "moveq sl, 0",
            "movne sl, 1",
            "mov r0, r7",
            "moveq r7, r3",
            "movne r7, 0",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r2, sb",
            "mov r3, sl",
            "ldr r1, [sp, 0x18]",
            "str r7, [sp]",
            "bl rsym._ZN5yaSSL10Parameters9SetSuitesENS_15ProtocolVersionEbbb",
            "b 0x95c44"
        ]
    },
    "sym.TaoCrypt::CertDecoder::ReadHeader__": {
        "function_address": "0x0009c44c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 4]",
            "sub sp, sp, 0x10",
            "ldr r5, [r3, 0x10]",
            "mov r4, r0",
            "cmp r5, 0",
            "bne 0x9c4d4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r3, [r4, 4]",
            "mov r0, r4",
            "ldr r3, [r3, 0xc]",
            "mov r6, sp",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r2, [r4, 4]",
            "str r0, [r4, 0x14]",
            "ldr r2, [r2, 0xc]",
            "mov r3, r0",
            "add r3, r3, r2",
            "str r3, [r4, 0x14]",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder18GetExplicitVersionEv",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt11BER_Decoder18GetExplicitVersionEv": {
        "function_address": "0x0003df3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x57c]!"
        ]
    },
    "sym.mysql_init_character_set": {
        "function_address": "0x00074bb8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x334]",
            "ldr r5, [0x00074d64]",
            "cmp r0, 0",
            "movne r8, 0",
            "add r5, pc, r5",
            "sub sp, sp, 0x208",
            "movne sl, r8",
            "beq 0x74cf4",
            "ldr r6, [0x00074d68]",
            "ldr r2, [r4, 0x330]",
            "ldr r3, [r5, r6]",
            "cmp r2, 0",
            "ldr r7, [r3]",
            "strne r2, [r3]",
            "ldrne r0, [r4, 0x334]",
            "mov r1, 0x20",
            "mov r2, 0x10",
            "bl rsym.get_charset_by_csname",
            "cmp r0, 0",
            "moveq r8, 0",
            "andne r8, r8, 1",
            "cmp r8, 0",
            "str r0, [r4, 0x290]",
            "bne 0x74c44",
            "ldr r3, [r5, r6]",
            "str r7, [r3]",
            "ldr r3, [r4, 0x290]",
            "cmp r3, 0",
            "movne r0, 0",
            "beq 0x74c88",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.get_charset_by_name",
            "subs sb, r0, 0",
            "beq 0x74c6c",
            "ldr r0, [r4, 0x290]",
            "mov r1, sb",
            "bl rsym.my_charset_same",
            "subs r8, r0, 0",
            "beq 0x74ccc",
            "ldr r3, [r5, r6]",
            "str sb, [r4, 0x290]",
            "str r7, [r3]",
            "ldr r3, [r4, 0x290]",
            "cmp r3, 0",
            "movne r0, 0",
            "bne 0x74c38",
            "ldr ip, [r4, 0x330]",
            "cmp ip, 0",
            "beq 0x74d20",
            "ldr r3, [0x00074d6c]",
            "ldr lr, [r4, 0x334]",
            "ldr r2, [r5, r3]",
            "ldr r3, [0x00074d70]",
            "ldr r2, [r2]",
            "ldr r3, [r5, r3]",
            "mov r0, r4",
            "ldr r3, [r3, 0x4c]",
            "ldr r1, [0x00074d74]",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl fcn.00074004",
            "mov r0, 1",
            "b 0x74c38",
            "ldr r1, [0x00074d78]",
            "ldr ip, [r4, 0x334]",
            "add r1, r5, r1",
            "mov r3, sl",
            "ldr r0, [0x00074d7c]",
            "mov r2, r8",
            "str ip, [sp]",
            "bl rsym.my_printf_error",
            "str r8, [r4, 0x290]",
            "b 0x74c20",
            "ldr r0, [0x00074d80]",
            "mov r1, 0x10",
            "add r0, r5, r0",
            "bl rsym.my_strdup",
            "cmp r0, 0",
            "str r0, [r4, 0x334]",
            "beq 0x74d5c",
            "ldr sl, [0x00074d84]",
            "mov r8, 1",
            "add sl, r5, sl",
            "b 0x74be0",
            "add r6, sp, 8",
            "mov r0, r6",
            "bl rsym.get_charsets_dir",
            "ldr r3, [0x00074d6c]",
            "ldr ip, [r4, 0x334]",
            "ldr r2, [r5, r3]",
            "ldr r3, [0x00074d70]",
            "ldr r2, [r2]",
            "ldr r3, [r5, r3]",
            "mov r0, r4",
            "ldr r3, [r3, 0x4c]",
            "ldr r1, [0x00074d74]",
            "str ip, [sp]",
            "str r6, [sp, 4]",
            "bl fcn.00074004",
            "mov r0, 1",
            "b 0x74c38"
        ]
    },
    "rsym.my_charset_same": {
        "function_address": "0x00040138",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xed4]!"
        ]
    },
    "rsym.my_printf_error": {
        "function_address": "0x0003f34c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x81c]!"
        ]
    },
    "sym.my_realpath": {
        "function_address": "0x0004cdb4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0xc",
            "mov r4, r1",
            "mov r5, r0",
            "mov r6, r2",
            "mov r0, r1",
            "mov r2, 0x1000",
            "add r1, sp, 8",
            "bl sym.imp.__realpath_chk",
            "subs r1, r0, 0",
            "beq 0x4ce04",
            "mov r0, r5",
            "ldr r2, [0x0004ce50]",
            "bl rsym.strmake",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "str r1, [sp, 4]",
            "bl rsym._my_thread_var",
            "mov r7, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "tst r6, 0x10",
            "str r3, [r7]",
            "ldr r1, [sp, 4]",
            "bne 0x4ce40",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, 0",
            "bl rsym.my_load_path",
            "mvn r0, 0",
            "b 0x4cdf4",
            "mov r2, r4",
            "mov r0, 0x1a",
            "bl rsym.my_error",
            "b 0x4ce28"
        ]
    },
    "sym.imp.__realpath_chk": {
        "function_address": "0x00040090",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf44]!"
        ]
    },
    "rsym.my_load_path": {
        "function_address": "0x0003cf4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1c]!"
        ]
    },
    "fcn.0007d748": {
        "function_address": "0x0007d748",
        "instructions": [
            "ldr r3, [0x0007d784]",
            "ldr r2, [0x0007d788]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x204",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007dbb4": {
        "function_address": "0x0007dbb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x10c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt21RandomNumberGeneratorC1Ev",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.init_compiled_charsets": {
        "function_address": "0x00051fa0",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x00052308]",
            "ldr r3, [0x0005230c]",
            "add r4, pc, r4",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052310]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052314]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052318]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005231c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052320]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052324]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052328]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005232c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052330]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052334]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052338]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005233c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052340]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052344]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052348]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005234c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052350]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052354]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052358]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005235c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052360]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052364]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052368]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005236c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052370]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052374]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052378]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005237c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052380]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052384]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052388]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005238c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052390]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052394]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052398]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005239c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523a0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523a4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523a8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523ac]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523b0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523b4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523b8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523bc]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523c0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523c4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523c8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523cc]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523d0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523d4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523d8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523dc]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523e0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523e4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523e8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523ec]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523f0]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523f4]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523f8]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x000523fc]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052400]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052404]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052408]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x0005240c]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052410]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052414]",
            "ldr r0, [r4, r3]",
            "bl rsym.add_compiled_collation",
            "ldr r3, [0x00052418]",
            "ldr r4, [r4, r3]",
            "ldr r3, [r4, 0x14]",
            "cmp r3, 0",
            "beq 0x522fc",
            "mov r0, r4",
            "add r4, r4, 0x6c",
            "bl rsym.add_compiled_collation",
            "ldr r3, [r4, 0x14]",
            "cmp r3, 0",
            "bne 0x522e4",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.add_compiled_collation": {
        "function_address": "0x0003f43c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x77c]!"
        ]
    },
    "fcn.000b085c": {
        "function_address": "0x000b085c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl sym.imp.close",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RecursiveMultiplyBottom_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a712c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 8",
            "ldr r4, [sp, 0x28]",
            "ldr ip, [0x000a7250]",
            "cmp r4, 1",
            "add ip, pc, ip",
            "mov r7, r0",
            "mov r5, r1",
            "mov sl, r2",
            "mov r6, r3",
            "bls 0xa722c",
            "tst r4, 1",
            "bne 0xa722c",
            "cmp r4, 8",
            "beq 0xa71f0",
            "cmp r4, 4",
            "beq 0xa7204",
            "cmp r4, 2",
            "beq 0xa7218",
            "lsr r4, r4, 1",
            "lsl r8, r4, 2",
            "add sb, r5, r8",
            "add r7, r7, r8",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "mov r0, r5",
            "mov r1, sb",
            "add r2, sl, r8",
            "mov r3, r6",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j",
            "mov r1, r7",
            "mov r2, r5",
            "mov r3, r4",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "add r3, r6, r8",
            "mov r1, sb",
            "mov r2, sl",
            "mov r0, r5",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j",
            "mov r0, r7",
            "mov r1, r7",
            "mov r2, r5",
            "mov r3, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "mov r1, r2",
            "mov r2, r3",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN8TaoCrypt8Portable15Multiply8BottomEPjPKjS3_",
            "mov r1, sl",
            "mov r2, r6",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN8TaoCrypt8Portable15Multiply4BottomEPjPKjS3_",
            "mov r1, sl",
            "mov r2, r6",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN8TaoCrypt8Portable15Multiply2BottomEPjPKjS3_",
            "ldr r3, [0x000a7254]",
            "ldr r1, [0x000a7258]",
            "ldr r0, [0x000a725c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x7d0",
            "mov r2, 0x8b0",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j": {
        "function_address": "0x0003d540",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc24]!"
        ]
    },
    "rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j": {
        "function_address": "0x0003dcb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x72c]!"
        ]
    },
    "sym.TaoCrypt::Portable::Subtract_unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a4c98",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [0x000a4d60]",
            "ands r4, r3, 1",
            "sub sp, sp, 8",
            "add ip, pc, ip",
            "bne 0xa4d3c",
            "cmp r3, 0",
            "moveq r0, r3",
            "beq 0xa4d30",
            "mov ip, r4",
            "b 0xa4cc8",
            "mov r4, r5",
            "ldr r5, [r2]",
            "ldr r7, [r1]",
            "rsb r4, r4, 0",
            "subs r7, r7, r5",
            "sbc r8, r7, r7",
            "subs r5, r7, r4",
            "sbc r6, r8, 0",
            "stm sp, {r5, r6}",
            "str r5, [r0]",
            "ldr r4, [r2, 4]",
            "ldr r7, [r1, 4]",
            "ldr r6, [sp, 4]",
            "subs r7, r7, r4",
            "sbc r8, r7, r7",
            "rsb r6, r6, 0",
            "add ip, ip, 2",
            "subs r4, r7, r6",
            "sbc r5, r8, 0",
            "cmp r3, ip",
            "str r4, [r0, 4]",
            "add r1, r1, 8",
            "add r0, r0, 8",
            "add r2, r2, 8",
            "mov r6, r5",
            "bhi 0xa4cc4",
            "rsb r0, r5, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a4d64]",
            "ldr r1, [0x000a4d68]",
            "ldr r0, [0x000a4d6c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x10c",
            "ldr r2, [0x000a4d70]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.000ad22c": {
        "function_address": "0x000ad22c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldm r0, {r2, r5}",
            "mov r4, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::AES::set_encryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007dc0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "mov r0, r4",
            "ldr r2, [r4, 0x258]",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt3AES6SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0x10",
            "mov r1, r5",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3AES6SetKeyEPKhjNS_9CipherDirE": {
        "function_address": "0x0003d258",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe14]!"
        ]
    },
    "sym.TaoCrypt::AllocatorWithCleanup_unsigned_char_::deallocate_void__unsigned_int_": {
        "function_address": "0x00080eb4",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r1",
            "mov r4, r1",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::CertDecoder.GetCompareHash_unsigned_char_const__unsigned_int__unsigned_char__unsigned_int_": {
        "function_address": "0x0009d1a0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r6, r0",
            "ldr r0, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r0, 0x10]",
            "sub sp, sp, 0x490",
            "cmp r1, 0",
            "sub sp, sp, 4",
            "mov r7, r3",
            "beq 0x9d1d8",
            "add sp, sp, 0x94",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "cmp r2, 0",
            "str r2, [sp, 0x47c]",
            "moveq r3, r2",
            "bne 0x9d2a4",
            "mov r1, r5",
            "mov r0, r3",
            "ldr r2, [sp, 0x47c]",
            "add r4, sp, 0x10",
            "mov r5, 0",
            "sub r4, r4, 8",
            "str r3, [sp, 0x480]",
            "bl sym.imp.memcpy",
            "add r1, sp, 0x470",
            "mov r2, r5",
            "mov r3, r5",
            "mov ip, 1",
            "add r1, r1, 0xc",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "str r5, [sp, 0x488]",
            "str r5, [sp, 0x48c]",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder9GetAlgoIdEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder9GetDigestEv",
            "ldr r2, [sp, 0x20]",
            "ldr r3, [sp, 0x4a8]",
            "cmp r2, r3",
            "bhi 0x9d290",
            "mov r0, r7",
            "ldr r1, [sp, 0x54]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x480]",
            "mov r1, r5",
            "mov r0, r4",
            "ldr r2, [sp, 0x47c]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x9d1c8",
            "ldr r3, [r6, 4]",
            "ldr r2, [0x0009d2b8]",
            "mov r0, r4",
            "str r2, [r3, 0x10]",
            "b 0x9d26c",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x9d1e8"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder9GetDigestEv": {
        "function_address": "0x0003cd24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x18c]!"
        ]
    },
    "sym.vio_ssl_read": {
        "function_address": "0x0007a5b8",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 0x98]",
            "bl rsym.yaSSL_read",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_read": {
        "function_address": "0x0003e590",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x144]!"
        ]
    },
    "sym.yaSSL::SSL::deriveTLSKeys__": {
        "function_address": "0x00095264",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "add r5, r0, 0x68",
            "sub sp, sp, 0x64",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r4, [r0, 0x14]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r7, [r0, 0xc]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0xd]",
            "add r7, r7, r4",
            "add r7, r7, r3",
            "add r6, sp, 0x50",
            "lsl r7, r7, 1",
            "mov r1, r7",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r4, sp, 0x10",
            "mov ip, r4",
            "add lr, r0, 0x54",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add lr, r4, 0x20",
            "mov ip, lr",
            "add sl, r0, 0x34",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm sl, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r5, [0x00095378]",
            "ldr ip, [0x0009537c]",
            "add r5, pc, r5",
            "add ip, r5, ip",
            "add ip, ip, 0x114",
            "str ip, [sp]",
            "mov ip, 0xd",
            "add r2, r0, 4",
            "mov r3, 0x30",
            "mov r1, r7",
            "mov r0, sl",
            "str ip, [sp, 4]",
            "mov ip, 0x40",
            "str ip, [sp, 0xc]",
            "str r4, [sp, 8]",
            "bl rsym._ZN5yaSSL3PRFEPhjPKhjS2_jS2_j",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3SSL9storeKeysEPKh",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add sp, sp, 0x64",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3PRFEPhjPKhjS2_jS2_j": {
        "function_address": "0x0003d834",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa2c]!"
        ]
    },
    "fcn.000aec44": {
        "function_address": "0x000aec44",
        "instructions": [
            "ldr r3, [0x000aed54]",
            "push {r4, r5, r6, r7, lr}",
            "ldr r2, [0x000aed58]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "mov r4, r0",
            "add r2, r2, 8",
            "mov r0, 0x30",
            "str r2, [r4]",
            "str r0, [r4, 4]",
            "sub sp, sp, 0xc",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r6, [r4, 4]",
            "str r0, [r4, 8]",
            "mov r3, r6",
            "mov r1, r0",
            "mov r5, 0",
            "mov r2, r6",
            "add r0, r4, 0xc",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r6, [r4, 4]",
            "mov r2, r6",
            "str r0, [r4, 8]",
            "mov r1, r5",
            "mov r6, 0x10",
            "bl sym.imp.memset",
            "str r6, [r4, 0x10]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r7, [r4, 0x10]",
            "str r0, [r4, 0x14]",
            "mov r1, r0",
            "mov r2, r7",
            "mov r3, r7",
            "add r0, r4, 0x18",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r7, [r4, 0x10]",
            "str r0, [r4, 0x14]",
            "mov r2, r7",
            "mov r1, r5",
            "bl sym.imp.memset",
            "str r6, [r4, 0x1c]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r6, [r4, 0x1c]",
            "str r0, [r4, 0x20]",
            "mov r3, r6",
            "mov r1, r0",
            "mov r2, r6",
            "add r0, r4, 0x24",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r1, r5",
            "mov r2, r6",
            "str r0, [r4, 0x20]",
            "str r6, [r4, 0x1c]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt3MD24InitEv",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD24InitEv": {
        "function_address": "0x0003cbbc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x27c]!"
        ]
    },
    "sym.yaSSL::SSL::makeMasterSecret__": {
        "function_address": "0x00095628",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "mov sb, r0",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "subs fp, r0, 0",
            "beq 0x95664",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3SSL19makeTLSMasterSecretEv",
            "add r5, sb, 0x68",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection14CleanPreMasterEv",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r5, sb, 0x68",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r1, [r0, 0x124]",
            "add r6, sp, 0x30",
            "mov r7, r0",
            "add r1, r1, 0x14",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "ldr r1, [r7, 0x124]",
            "add r4, sp, 0x24",
            "add r1, r1, 0x43",
            "add r3, sp, 0x44",
            "mov r0, r4",
            "str r3, [sp, 0xc]",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "add r3, sp, 0x3c",
            "ldr r0, [sp, 0xc]",
            "str r3, [sp, 8]",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r8, sp, 0x4c",
            "ldr r1, [r0]",
            "ldr r2, [r7, 0x124]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r8",
            "mov r1, fp",
            "bl fcn.00092508",
            "cmp r0, 0",
            "beq 0x959f8",
            "mov r0, r4",
            "mov r1, fp",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r1, r8",
            "mov r2, 1",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r2, [r7, 0x124]",
            "ldr r1, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x34",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x54",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r4",
            "str r2, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "add sl, sp, 0x10",
            "mov r3, r0",
            "ldr r2, [sp, 4]",
            "mov r1, sl",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPhPKhj",
            "mov r0, r6",
            "ldr r1, [r7, 0x124]",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r2, 0x14",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r0",
            "mov r0, r6",
            "str r1, [sp]",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r6",
            "str r2, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp]",
            "mov r3, r0",
            "add r1, r1, 4",
            "ldr r0, [sp, 0xc]",
            "ldr r2, [sp, 4]",
            "bl rsym._ZN5yaSSL3MD510get_digestEPhPKhj",
            "mov r0, r8",
            "mov r1, 1",
            "bl fcn.00092508",
            "cmp r0, 0",
            "beq 0x959f8",
            "mov r0, r4",
            "mov r1, fp",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r1, r8",
            "mov r2, 2",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r2, [r7, 0x124]",
            "ldr r1, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x34",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x54",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r4",
            "str r2, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r2, [sp, 4]",
            "mov r3, r0",
            "mov r1, sl",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPhPKhj",
            "mov r0, r6",
            "ldr r1, [r7, 0x124]",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r2, 0x14",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r0",
            "mov r0, r6",
            "str r1, [sp]",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, r6",
            "str r2, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp]",
            "mov r3, r0",
            "add r1, r1, 0x14",
            "ldr r0, [sp, 0xc]",
            "ldr r2, [sp, 4]",
            "bl rsym._ZN5yaSSL3MD510get_digestEPhPKhj",
            "mov r0, r8",
            "mov r1, 2",
            "bl fcn.00092508",
            "cmp r0, 0",
            "beq 0x959f8",
            "mov r1, fp",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r1, r8",
            "mov r0, r4",
            "mov r2, 3",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r2, [r7, 0x124]",
            "ldr r1, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x34",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, 0x20",
            "add r1, r0, 0x54",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r2, r8",
            "mov r3, r0",
            "mov r1, sl",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPhPKhj",
            "mov r0, r6",
            "ldr r1, [r7, 0x124]",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r1, sl",
            "mov r2, 0x14",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "add r1, r8, 0x24",
            "mov r3, r0",
            "mov r2, r7",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD510get_digestEPhPKhj",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3SSL10deriveKeysEv",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "b 0x9564c",
            "mov r1, 0x69",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "ldr r0, [sp, 8]",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "b 0x95658"
        ]
    },
    "rsym._ZN5yaSSL3SSL19makeTLSMasterSecretEv": {
        "function_address": "0x0003f1c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x924]!"
        ]
    },
    "rsym._ZN5yaSSL13output_bufferC1Ej": {
        "function_address": "0x0003d42c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcdc]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::SSL_METHOD__yaSSL::SSL_METHOD_": {
        "function_address": "0x00089ba0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientDiffieHellmanPublic::alloc_int__bool_": {
        "function_address": "0x0008b134",
        "instructions": [
            "cmp r2, 0",
            "movne r2, 2",
            "moveq r2, 0",
            "add r2, r2, r1",
            "str r2, [r0, 8]",
            "push {r4, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym._my_strdup": {
        "function_address": "0x0004bc88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r3",
            "mov r8, r1",
            "mov r7, r2",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "add r4, r0, 1",
            "mov r3, r6",
            "mov r1, r8",
            "mov r2, r7",
            "mov r0, r4",
            "bl rsym._mymalloc",
            "subs r6, r0, 0",
            "movne r1, r5",
            "movne r2, r4",
            "blne sym.imp.memcpy",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d480": {
        "function_address": "0x0007d480",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d4c4]",
            "ldr r3, [0x0007d4c8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3SHA7SHAImplEEEvPT_",
            "ldr r3, [0x0007d4cc]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_manager_fetch_line": {
        "function_address": "0x00047fd4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x000480f8]",
            "cmp r2, 4",
            "add r4, pc, r4",
            "mov r6, r2",
            "mov r5, r0",
            "mov r7, r1",
            "ldr r8, [r0, 0x10]",
            "ble 0x48098",
            "bl rsym.my_net_read",
            "cmn r0, 1",
            "beq 0x480cc",
            "ldrb r2, [r8, 3]",
            "add r6, r7, r6",
            "cmp r2, 0x20",
            "movne r2, 0",
            "moveq r2, 1",
            "cmp r2, 0",
            "moveq r1, 5",
            "movne r1, 4",
            "add r0, r8, r0",
            "add r3, r8, r1",
            "cmp r0, r3",
            "movls ip, 0",
            "movhi ip, 1",
            "cmp r7, r6",
            "movhs ip, 0",
            "strb r2, [r5, 0x295]",
            "cmp ip, 0",
            "mov r2, 0",
            "strb r2, [r6, -1]",
            "beq 0x4808c",
            "ldrb r2, [r8, r1]",
            "cmp r2, 0xd",
            "strb r2, [r7]",
            "bne 0x48078",
            "b 0x480c0",
            "ldrb r2, [r3]",
            "cmp r2, 0xd",
            "strb r2, [r7]",
            "beq 0x480c0",
            "add r7, r7, 1",
            "add r3, r3, 1",
            "cmp r6, r7",
            "cmphi r0, r3",
            "bhi 0x48068",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r1, [0x000480fc]",
            "mov r3, 0xc",
            "add r0, r0, 0x294",
            "str r3, [r5, 0x28c]",
            "add r1, r4, r1",
            "add r0, r0, 2",
            "mov r2, 0x18",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x48090",
            "mov r0, 0",
            "strb r0, [r7]",
            "b 0x48090",
            "bl sym.imp.__errno_location",
            "ldr r1, [0x00048100]",
            "ldr r3, [r0]",
            "add r0, r5, 0x294",
            "str r3, [r5, 0x28c]",
            "add r1, r4, r1",
            "add r0, r0, 2",
            "mov r2, 0x13",
            "bl sym.imp.memcpy",
            "mov r0, 1",
            "b 0x48090"
        ]
    },
    "sym.my_atof": {
        "function_address": "0x0005b71c",
        "instructions": [
            "str lr, [sp, -4]!",
            "add r3, r0, 0xff00",
            "sub sp, sp, 0xc",
            "add r1, sp, 8",
            "add r3, r3, 0xff",
            "str r3, [r1, -8]!",
            "add r2, sp, 4",
            "mov r1, sp",
            "bl rsym.my_strtod",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::output_buffer__yaSSL::output_buffer_": {
        "function_address": "0x00089dd4",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0008cf54": {
        "function_address": "0x0008cf54",
        "instructions": [
            "ldr r3, [0x0008cf98]",
            "ldr r2, [0x0008cf9c]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "str r1, [r0, 8]",
            "mov r0, r1",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "add r1, r0, 6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_ssl_set": {
        "function_address": "0x00074220",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "cmp r1, 0",
            "mov r4, r0",
            "mov r5, r2",
            "mov r8, r3",
            "ldr r7, [sp, 0x18]",
            "ldr r6, [sp, 0x1c]",
            "moveq r0, r1",
            "movne r0, r1",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "cmp r5, 0",
            "str r0, [r4, 0x338]",
            "moveq r0, r5",
            "movne r0, r5",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "cmp r8, 0",
            "str r0, [r4, 0x33c]",
            "moveq r0, r8",
            "movne r0, r8",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "cmp r7, 0",
            "str r0, [r4, 0x340]",
            "moveq r0, r7",
            "movne r0, r7",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "cmp r6, 0",
            "str r0, [r4, 0x344]",
            "moveq r0, r6",
            "movne r0, r6",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "str r0, [r4, 0x348]",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.00090a54": {
        "function_address": "0x00090a54",
        "instructions": [
            "ldr ip, [0x00090a90]",
            "ldr r3, [0x00090a94]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090a98]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090a9c]",
            "ldr r0, [0x00090aa0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::Check::check_unsigned_int__unsigned_int_": {
        "function_address": "0x0007baec",
        "instructions": [
            "ldr r0, [0x0007bb2c]",
            "cmp r1, r2",
            "push {r4, lr}",
            "add r0, pc, r0",
            "bhs 0x7bb08",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x0007bb30]",
            "ldr r2, [0x0007bb34]",
            "ldr r1, [0x0007bb38]",
            "add r3, r0, r3",
            "add r1, r0, r1",
            "add r3, r3, 0x1c",
            "add r0, r0, r2",
            "mov r2, 0x27",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::RC4::set_encryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007dc90",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "mov r2, 0x10",
            "bl rsym._ZN8TaoCrypt4ARC46SetKeyEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DER_Encoder::DER_Encoder__": {
        "function_address": "0x0009d800",
        "instructions": [
            "ldr ip, [0x0009d83c]",
            "ldr r3, [0x0009d840]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d844]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d848]",
            "ldr r0, [0x0009d84c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mysql_real_query": {
        "function_address": "0x000748c0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.mysql_send_query",
            "cmp r0, 0",
            "movne r0, 1",
            "moveq r0, r4",
            "ldreq r3, [r4, 0x3b0]",
            "ldreq ip, [r3]",
            "moveq lr, pc",
            "bxeq ip"
        ]
    },
    "rsym.mysql_send_query": {
        "function_address": "0x0003d2dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdbc]!"
        ]
    },
    "sym.wait_for_free_space": {
        "function_address": "0x00049840",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r4, [0x000498d0]",
            "cmp r1, 0",
            "sub sp, sp, 0xc",
            "add r4, pc, r4",
            "mov r5, r0",
            "beq 0x4988c",
            "ldr r0, [0x000498d4]",
            "asr r3, r1, 0x1f",
            "smull ip, r2, r0, r1",
            "rsb r3, r3, r2, asr 2",
            "add r3, r3, r3, lsl 2",
            "cmp r1, r3, lsl 1",
            "beq 0x498ac",
            "mov r0, 0x3c",
            "bl sym.imp.sleep",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr",
            "bl rsym._my_thread_var",
            "mov ip, 0x3c",
            "ldr r3, [r0]",
            "mov r2, r5",
            "mov r1, 0x44",
            "mov r0, 0x14",
            "str ip, [sp]",
            "bl rsym.my_error",
            "ldr r1, [0x000498d8]",
            "mov ip, 0x258",
            "add r1, r4, r1",
            "mov r2, 0x44",
            "mov r3, 0x3c",
            "mov r0, 0x14",
            "str ip, [sp]",
            "bl rsym.my_printf_error",
            "b 0x49878"
        ]
    },
    "sym.imp.sleep": {
        "function_address": "0x0003fa3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x37c]!"
        ]
    },
    "sym.my_printf_error": {
        "function_address": "0x00049a90",
        "instructions": [
            "push {r2, r3}",
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x208",
            "add ip, sp, 0x21c",
            "add r5, sp, 4",
            "mov r3, ip",
            "mov r2, r1",
            "mov r6, r0",
            "mov r1, 0x200",
            "mov r0, r5",
            "ldr r4, [0x00049af8]",
            "str ip, [sp, 0x204]",
            "bl rsym.my_vsnprintf",
            "ldr r3, [0x00049afc]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r0, r6",
            "mov r1, r5",
            "ldr r2, [sp, 0x218]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, lr}",
            "add sp, sp, 8",
            "bx lr"
        ]
    },
    "sym.yaSSL::Connection::CleanPreMaster__": {
        "function_address": "0x0008bab0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x8bae0",
            "ldr r1, [r4, 0x124]",
            "ldr r2, [r4, 0x134]",
            "bl rsym._ZN5yaSSL5cleanEPVhjRNS_10RandomPoolE",
            "ldr r0, [r4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r3, 0",
            "str r3, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::MultiplicativeInverse___const": {
        "function_address": "0x000a99a0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK8TaoCrypt7Integer6IsUnitEv",
            "cmp r0, 0",
            "bne 0xa99c4",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r5, r0",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer6IsUnitEv": {
        "function_address": "0x00040918",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x994]!"
        ]
    },
    "sym.my_getsystime": {
        "function_address": "0x00059fe4",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r1, 0",
            "mov r0, sp",
            "bl sym.imp.gettimeofday",
            "ldr r2, [sp]",
            "ldr r1, [0x0005a024]",
            "smull r3, r4, r1, r2",
            "ldr r1, [sp, 4]",
            "mov r2, 0xa",
            "smlal r3, r4, r2, r1",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::AbstractRing.CascadeExponentiate_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000999a4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "sub sp, sp, 8",
            "mov r0, r1",
            "ldr r1, [r1]",
            "mov r6, r2",
            "mov r5, r3",
            "ldr ip, [r1, 0x5c]",
            "mov lr, pc",
            "bx ip",
            "ldr ip, [sp, 0x18]",
            "mov r1, r0",
            "str ip, [sp]",
            "ldr ip, [sp, 0x1c]",
            "mov r0, r4",
            "mov r2, r6",
            "mov r3, r5",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt13AbstractGroup21CascadeScalarMultiplyERKNS_7IntegerES3_S3_S3_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt13AbstractGroup21CascadeScalarMultiplyERKNS_7IntegerES3_S3_S3_": {
        "function_address": "0x0003e548",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x174]!"
        ]
    },
    "method.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_.HMAC__": {
        "function_address": "0x000bafd8",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb040]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb044]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_peek": {
        "function_address": "0x000852f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x10",
            "mov r6, r1",
            "mov r0, r2",
            "mov r1, 0x4000",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "lsl r1, r0, 0x10",
            "mov r2, r6",
            "lsr r1, r1, 0x10",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL4DataC1EtPh",
            "mov r0, r5",
            "mov r1, sp",
            "mov r2, 1",
            "mov r4, sp",
            "bl rsym._ZN5yaSSL11receiveDataERNS_3SSLERNS_4DataEb",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HASH64withTransform::Final_unsigned_char_": {
        "function_address": "0x000a2930",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "str r1, [sp, 0x1c]",
            "ldr r3, [r0]",
            "mov r4, r0",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "str r0, [sp, 0x10]",
            "mov r0, r4",
            "ldr ip, [r3, 0x18]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "str r0, [sp, 0xc]",
            "mov r0, r4",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov sl, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [r4, 4]",
            "mov fp, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt19HASH64withTransform9AddLengthEj",
            "ldr r2, [0x000a2cac]",
            "ldr r3, [r4, 4]",
            "add r2, pc, r2",
            "str r2, [sp, 8]",
            "ldr r2, [r4, 0xc]",
            "add r0, r3, 1",
            "ldr ip, [r4, 8]",
            "str r2, [sp, 0x18]",
            "add sb, r4, 0x50",
            "mvn r2, 0x7f",
            "cmp sl, r0",
            "str ip, [sp, 0x14]",
            "strb r2, [sb, r3]",
            "str r0, [r4, 4]",
            "blo 0xa2bac",
            "ldr ip, [sp, 0x14]",
            "rsb r2, r0, sl",
            "lsr r3, ip, 0x1d",
            "ldr ip, [sp, 0x18]",
            "add r0, sb, r0",
            "add r3, r3, ip, lsl 3",
            "mov r1, 0",
            "str r3, [sp, 4]",
            "bl sym.imp.memset",
            "ldr r2, [sp, 0x14]",
            "cmp fp, 0",
            "lsl ip, r2, 3",
            "ldr r3, [sp, 4]",
            "beq 0xa2b68",
            "ands lr, sl, 7",
            "bne 0xa2c84",
            "lsrs sl, sl, 3",
            "beq 0xa2a84",
            "ldm sb, {r0, r2}",
            "bic fp, r0, 0xff0000",
            "bic r1, r2, 0xff0000",
            "bic fp, fp, 0xff",
            "bic r0, r0, 0xff000000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "lsr r1, r1, 8",
            "bic r0, r0, 0xff00",
            "lsr fp, fp, 8",
            "bic r2, r2, 0xff00",
            "orr r0, fp, r0, lsl 8",
            "orr r2, r1, r2, lsl 8",
            "ror r6, r0, 0x10",
            "ror r2, r2, 0x10",
            "add lr, lr, 1",
            "mov r5, 0",
            "orr r0, r5, r2",
            "mov r1, r6",
            "cmp sl, lr",
            "stm sb!, {r0, r1}",
            "bhi 0xa2a2c",
            "ldr r2, [sp, 0x10]",
            "lsr r0, r2, 3",
            "add r1, r0, 9",
            "add r0, r0, 8",
            "add r5, r4, r0, lsl 3",
            "mov r2, 0",
            "add lr, r4, r1, lsl 3",
            "str r3, [r4, r0, lsl 3]",
            "str r2, [r5, 4]",
            "ldr r3, [r4]",
            "str ip, [r4, r1, lsl 3]",
            "mov r0, r4",
            "str r2, [lr, 4]",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 0xc]",
            "add r1, r4, 0x10",
            "ands r5, r3, 7",
            "bne 0xa2c84",
            "lsrs sl, r3, 3",
            "beq 0xa2b3c",
            "mov r3, r1",
            "ldr ip, [r3]",
            "ldr r2, [r3, 4]",
            "bic lr, ip, 0xff0000",
            "bic r0, r2, 0xff0000",
            "bic lr, lr, 0xff",
            "bic ip, ip, 0xff000000",
            "bic r0, r0, 0xff",
            "bic r2, r2, 0xff000000",
            "bic ip, ip, 0xff00",
            "lsr lr, lr, 8",
            "bic r2, r2, 0xff00",
            "lsr r0, r0, 8",
            "orr ip, lr, ip, lsl 8",
            "orr r2, r0, r2, lsl 8",
            "ror r8, ip, 0x10",
            "ror r2, r2, 0x10",
            "add r5, r5, 1",
            "mov r7, 0",
            "orr fp, r7, r2",
            "mov ip, r8",
            "cmp sl, r5",
            "stm r3!, {fp, ip}",
            "bhi 0xa2ae0",
            "ldr r0, [sp, 0x1c]",
            "ldr r2, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 0x10]",
            "lsr r1, r2, 3",
            "add r2, r1, 9",
            "add r1, r1, 8",
            "add lr, r4, r1, lsl 3",
            "add r0, r4, r2, lsl 3",
            "str ip, [r4, r1, lsl 3]",
            "str fp, [lr, 4]",
            "str r3, [r4, r2, lsl 3]",
            "str fp, [r0, 4]",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "add r1, r4, 0x10",
            "b 0xa2b3c",
            "ldr r3, [sp, 0x10]",
            "mov r1, 0",
            "rsb r2, r0, r3",
            "add r0, sb, r0",
            "bl sym.imp.memset",
            "ldr ip, [sp, 0x10]",
            "cmp fp, 0",
            "str ip, [r4, 4]",
            "beq 0xa2c64",
            "ands ip, ip, 7",
            "bne 0xa2c84",
            "ldr r3, [sp, 0x10]",
            "lsrs r2, r3, 3",
            "beq 0xa2c64",
            "str r5, [sp, 0x28]",
            "str r6, [sp, 0x2c]",
            "str r7, [sp, 0x20]",
            "str r8, [sp, 0x24]",
            "mov r3, sb",
            "mov r7, r2",
            "ldm r3, {r0, r2}",
            "bic lr, r0, 0xff0000",
            "bic r1, r2, 0xff0000",
            "bic lr, lr, 0xff",
            "bic r0, r0, 0xff000000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r0, r0, 0xff00",
            "lsr r1, r1, 8",
            "lsr lr, lr, 8",
            "bic r2, r2, 0xff00",
            "orr lr, lr, r0, lsl 8",
            "orr r2, r1, r2, lsl 8",
            "ror r6, lr, 0x10",
            "ror r2, r2, 0x10",
            "add ip, ip, 1",
            "mov r5, 0",
            "orr r0, r5, r2",
            "mov r1, r6",
            "cmp r7, ip",
            "stm r3!, {r0, r1}",
            "bhi 0xa2bfc",
            "add r6, sp, 0x28",
            "ldm r6, {r5, r6}",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, 0",
            "str r0, [r4, 4]",
            "b 0xa29e4",
            "ldr ip, [sp, 8]",
            "ldr r3, [0x000a2cb0]",
            "ldr r1, [0x000a2cb4]",
            "ldr r0, [0x000a2cb8]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x15c",
            "ldr r2, [0x000a2cbc]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt19HASH64withTransform9AddLengthEj": {
        "function_address": "0x0003cc40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x224]!"
        ]
    },
    "fcn.000a8ba8": {
        "function_address": "0x000a8ba8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r8, [0x000a8c80]",
            "mov r3, 2",
            "str r3, [r0]",
            "add r8, pc, r8",
            "sub sp, sp, 8",
            "mov r4, r0",
            "mov r7, r1",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "mov r6, 0",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r2, r5",
            "mov r0, r3",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "bl sym.imp.memset",
            "cmp r7, r6",
            "movlt r3, 1",
            "strlt r3, [r4, 0xc]",
            "ldr r3, [r4]",
            "strge r6, [r4, 0xc]",
            "rsblt r7, r7, 0",
            "cmp r3, 0",
            "beq 0xa8c5c",
            "ldr r3, [r4, 4]",
            "str r7, [r3]",
            "ldr r2, [r4]",
            "cmp r2, 1",
            "bls 0xa8c5c",
            "mov r2, 0",
            "str r2, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a8c84]",
            "ldr r1, [0x000a8c88]",
            "ldr r0, [0x000a8c8c]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.dirname_part": {
        "function_address": "0x0004a86c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r7, r1",
            "mov r6, r2",
            "bl rsym.dirname_length",
            "mov r4, r0",
            "mov r1, r7",
            "mov r0, r5",
            "add r2, r7, r4",
            "bl rsym.convert_dirname",
            "rsb r0, r5, r0",
            "str r0, [r6]",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.dirname_length": {
        "function_address": "0x0003eb54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd6c]!"
        ]
    },
    "fcn.000b0908": {
        "function_address": "0x000b0908",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, 0",
            "ldr r4, [0x000b096c]",
            "mov r5, r0",
            "str r6, [r0, 4]",
            "ldr r0, [0x000b0970]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "mov r1, r6",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "str r0, [r5]",
            "beq 0xb0948",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, [0x000b0974]",
            "mov r1, r6",
            "add r0, r4, r0",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "ldreq r3, [0x000b0978]",
            "str r0, [r5]",
            "streq r3, [r5, 4]",
            "b 0xb093c"
        ]
    },
    "sym.yaX509_NAME_oneline": {
        "function_address": "0x00085cd8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r1",
            "mov r5, r2",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "cmp r0, 0",
            "beq 0x85d24",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "bl sym.imp.strlen",
            "add r7, r0, 1",
            "mov r1, r5",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "cmp r4, 0",
            "mov r5, r0",
            "beq 0x85d58",
            "cmp r5, 0",
            "bne 0x85d30",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "sub r2, r5, 1",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "add r5, r4, r5",
            "mov r3, 0",
            "strb r3, [r5, -1]",
            "b 0x85d24",
            "mov r0, r7",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "beq 0x85d24",
            "mov r5, r7",
            "b 0x85d1c"
        ]
    },
    "sym.my_strntoul_8bit": {
        "function_address": "0x0005d738",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r5, r1, r2",
            "sub sp, sp, 0xc",
            "mov r4, r1",
            "cmp r1, r5",
            "ldr r1, [sp, 0x34]",
            "mov r2, 0",
            "str r2, [r1]",
            "mov r8, r3",
            "ldr fp, [sp, 0x30]",
            "bhs 0x5d910",
            "ldr r2, [r0, 0x20]",
            "ldrb r3, [r4]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5d910",
            "mov r6, r4",
            "b 0x5d798",
            "ldrb r3, [r6]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5d7a4",
            "add r6, r6, 1",
            "cmp r5, r6",
            "bhi 0x5d784",
            "cmp r6, r5",
            "beq 0x5d8e0",
            "ldrb r7, [r6]",
            "cmp r7, 0x2d",
            "moveq r2, 1",
            "addeq r6, r6, 1",
            "streq r2, [sp, 4]",
            "beq 0x5d8b4",
            "cmp r7, 0x2b",
            "beq 0x5d8a8",
            "mov r1, r8",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r8",
            "mov sl, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "mov r2, 0",
            "str r2, [sp, 4]",
            "mov sb, 0",
            "mov r2, r6",
            "mov r0, sb",
            "sub r3, r7, 0x30",
            "and r3, r3, 0xff",
            "cmp r3, 9",
            "mov ip, r2",
            "bls 0x5d838",
            "sub r3, r7, 0x41",
            "cmp r3, 0x19",
            "subls r3, r7, 0x37",
            "andls r3, r3, 0xff",
            "bls 0x5d838",
            "sub r3, r7, 0x61",
            "cmp r3, 0x19",
            "bhi 0x5d860",
            "sub r3, r7, 0x57",
            "and r3, r3, 0xff",
            "cmp r8, r3",
            "ble 0x5d860",
            "cmp sl, r0",
            "blo 0x5d8a0",
            "beq 0x5d894",
            "mla r0, r8, r0, r3",
            "ldrb r7, [r2, 1]!",
            "cmp r5, r2",
            "bne 0x5d7fc",
            "mov ip, r5",
            "cmp ip, r6",
            "beq 0x5d8e0",
            "cmp fp, 0",
            "strne ip, [fp]",
            "cmp sb, 0",
            "beq 0x5d900",
            "ldr r1, [sp, 0x34]",
            "mov r3, 0x22",
            "str r3, [r1]",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r3, r1",
            "bls 0x5d84c",
            "mov r0, sl",
            "mov sb, 1",
            "b 0x5d850",
            "mov r3, 0",
            "add r6, r6, 1",
            "str r3, [sp, 4]",
            "cmp r6, r5",
            "ldrb r7, [r6]",
            "beq 0x5d8e0",
            "mov r1, r8",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r8",
            "mov sl, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "b 0x5d7f0",
            "ldr r1, [sp, 0x34]",
            "cmp fp, 0",
            "mov r3, 0x21",
            "str r3, [r1]",
            "moveq r0, fp",
            "strne r4, [fp]",
            "movne r0, 0",
            "b 0x5d888",
            "ldr r2, [sp, 4]",
            "cmp r2, 0",
            "rsbne r0, r0, 0",
            "b 0x5d888",
            "mov r6, r4",
            "b 0x5d7a4"
        ]
    },
    "sym.mySTL::list_yaSSL::ThreadError_::list__": {
        "function_address": "0x000870f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x87114",
            "b 0x87124",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x87110",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendCertificate_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x00084790",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r8, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x0008490c]",
            "subs r7, r0, 0",
            "add r4, pc, r4",
            "beq 0x847c0",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager8get_certEv",
            "add r6, sp, 0xc",
            "mov r1, r0",
            "add sl, sp, 0x18",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL11CertificateC1EPKNS_4x509E",
            "add r0, sl, 4",
            "mov r1, 3",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00084910]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0xc]",
            "mov fp, r0",
            "mov r0, r6",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r3, fp, 4",
            "lsl r3, r3, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb lr, [r0, 0x12f]",
            "lsr r3, r3, 0x10",
            "add r1, r3, 5",
            "mov ip, 0x16",
            "mov r0, r4",
            "str ip, [sp, 0x18]",
            "strb r2, [sp, 0x1c]",
            "strb lr, [sp, 0x1d]",
            "strh r3, [sp, 0x1e]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sl",
            "mov r0, r4",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sp",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00081648",
            "cmp r8, 0",
            "mov sb, sp",
            "beq 0x848f8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "b 0x847b4",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r4, r8",
            "b 0x848ec"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager8get_certEv": {
        "function_address": "0x0003e7ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfdc]!"
        ]
    },
    "rsym._ZN5yaSSL11CertificateC1EPKNS_4x509E": {
        "function_address": "0x0003de64",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x60c]!"
        ]
    },
    "sym.TaoCrypt::SHA256::SHA256_TaoCrypt::SHA256_const_": {
        "function_address": "0x000b3cc4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r5, r0",
            "mov r6, r1",
            "add r4, r5, 0x10",
            "mov r1, 8",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add sl, r6, 0x10",
            "mov ip, r4",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "ldm sl, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, sb",
            "ldr r8, [0x000b3d50]",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3d54]",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "fcn.000a8eac": {
        "function_address": "0x000a8eac",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r7, [0x000a8f68]",
            "mov r3, 2",
            "str r3, [r0]",
            "add r7, pc, r7",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r6, [r3], 8",
            "mov r5, 0",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r2, r6",
            "mov r0, r3",
            "mov r3, r6",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r6, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r6, 2",
            "mov r1, r5",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r5, [r4, 0xc]",
            "cmp r3, r5",
            "beq 0xa8f44",
            "cmp r3, 1",
            "ldr r3, [r4, 4]",
            "bls 0xa8f44",
            "str r5, [r3]",
            "str r5, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [0x000a8f6c]",
            "ldr r1, [0x000a8f70]",
            "ldr r0, [0x000a8f74]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::SetSequence_unsigned_int__unsigned_char_": {
        "function_address": "0x0009a5e8",
        "instructions": [
            "mov r3, 0x30",
            "push {r4, lr}",
            "strb r3, [r1], 1",
            "bl rsym._ZN8TaoCrypt9SetLengthEjPh",
            "add r0, r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::SHA::SHA_TaoCrypt::SHA_const_": {
        "function_address": "0x000b3d58",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add ip, r5, 0x10",
            "add sl, r6, 0x10",
            "mov fp, ip",
            "ldm sl!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "stm fp!, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "mov ip, sb",
            "ldr r8, [0x000b3de4]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3de8]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldr r0, [sl]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "str r0, [fp]",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::PositiveMultiply_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a9e50",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x24",
            "mov r0, r1",
            "mov sl, r1",
            "mov r7, r2",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r6, [0x000aa134]",
            "cmp r0, 8",
            "add r6, pc, r6",
            "bls 0xaa0b4",
            "cmp r0, 0x10",
            "movls sb, 0x10",
            "bls 0xa9ea0",
            "cmp r0, 0x20",
            "movls sb, 0x20",
            "bls 0xa9ea0",
            "cmp r0, 0x40",
            "movls sb, 0x40",
            "bhi 0xaa0c8",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 8",
            "bls 0xaa034",
            "cmp r0, 0x10",
            "movls fp, 0x10",
            "bls 0xa9ed4",
            "cmp r0, 0x20",
            "movls fp, 0x20",
            "bls 0xa9ed4",
            "cmp r0, 0x40",
            "movls fp, 0x40",
            "bhi 0xaa0dc",
            "add r5, fp, sb",
            "cmp r5, 8",
            "bls 0xaa050",
            "cmp r5, 0x10",
            "bls 0xa9ff4",
            "cmp r5, 0x20",
            "movls r3, 0x80",
            "strls r3, [sp, 0xc]",
            "movls ip, 0x20",
            "bls 0xa9f10",
            "cmp r5, 0x40",
            "movls r3, 0x100",
            "strls r3, [sp, 0xc]",
            "movls ip, 0x40",
            "bhi 0xaa0f0",
            "ldr r1, [r4, 4]",
            "ldr r2, [r4]",
            "mov r8, 0",
            "mov r3, ip",
            "add r0, r4, 8",
            "str ip, [sp, 8]",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr ip, [sp, 8]",
            "str r0, [r4, 4]",
            "str ip, [r4]",
            "ldr r2, [sp, 0xc]",
            "mov r1, r8",
            "bl sym.imp.memset",
            "cmn r5, 0xc0000001",
            "str r8, [r4, 0xc]",
            "str r5, [sp, 0x14]",
            "bhi 0xaa10c",
            "lsl r8, r5, 2",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r5, r0",
            "add r0, sp, 0x20",
            "ldr r6, [r0, -0xc]!",
            "mov r8, 0",
            "mov r3, r6",
            "mov r1, r5",
            "mov r2, r6",
            "add r0, r0, 8",
            "str r5, [sp, 0x18]",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "lsl r2, r6, 2",
            "mov r1, r8",
            "str r0, [sp, 0x18]",
            "str r6, [sp, 0x14]",
            "bl sym.imp.memset",
            "ldr ip, [r7, 4]",
            "ldr r0, [r4, 4]",
            "ldr r2, [sl, 4]",
            "ldr r1, [sp, 0x18]",
            "mov r3, sb",
            "str ip, [sp]",
            "str fp, [sp, 4]",
            "bl rsym._ZN8TaoCrypt18AsymmetricMultiplyEPjS0_PKjjS2_j",
            "ldr r4, [sp, 0x18]",
            "ldr r2, [sp, 0x14]",
            "mov r1, r8",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [r4, 4]",
            "ldr r2, [r4]",
            "mov r6, 0",
            "mov r3, 0x10",
            "add r0, r4, 8",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r3, 0x10",
            "str r3, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r6",
            "mov r2, 0x40",
            "bl sym.imp.memset",
            "str r6, [r4, 0xc]",
            "str r5, [sp, 0x14]",
            "b 0xa9f58",
            "ldr r3, [0x000aa138]",
            "add r3, r6, r3",
            "add r0, r3, r0, lsl 2",
            "ldr fp, [r0, 0x5ec]",
            "add r5, fp, sb",
            "cmp r5, 8",
            "bhi 0xa9ee0",
            "ldr r3, [0x000aa138]",
            "lsl r8, r5, 2",
            "add r6, r6, r3",
            "add r6, r6, r8",
            "ldr r6, [r6, 0x5ec]",
            "mov ip, 0",
            "ldr r1, [r4, 4]",
            "ldr r2, [r4]",
            "mov r3, r6",
            "add r0, r4, 8",
            "str ip, [sp]",
            "str ip, [sp, 8]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr ip, [sp, 8]",
            "str r6, [r4]",
            "mov r1, ip",
            "str r0, [r4, 4]",
            "lsl r2, r6, 2",
            "bl sym.imp.memset",
            "ldr ip, [sp, 8]",
            "cmp r5, 0",
            "str ip, [r4, 0xc]",
            "str r5, [sp, 0x14]",
            "beq 0xa9f6c",
            "b 0xa9f5c",
            "ldr r3, [0x000aa138]",
            "add r3, r6, r3",
            "add r0, r3, r0, lsl 2",
            "ldr sb, [r0, 0x5ec]",
            "b 0xa9ea0",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov sb, 1",
            "lsl sb, sb, r0",
            "b 0xa9ea0",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov fp, 1",
            "lsl fp, fp, r0",
            "b 0xa9ed4",
            "sub r0, r5, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov ip, 1",
            "lsl ip, ip, r0",
            "lsl r3, ip, 2",
            "str r3, [sp, 0xc]",
            "b 0xa9f10",
            "ldr r3, [0x000aa138]",
            "ldr r1, [0x000aa13c]",
            "add r3, r6, r3",
            "ldr r0, [0x000aa140]",
            "add r3, r3, 0xc80",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0008854c": {
        "function_address": "0x0008854c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x88568",
            "b 0x88578",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x88564",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007cffc": {
        "function_address": "0x0007cffc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d040]",
            "ldr r3, [0x0007d044]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RC47RC4ImplEEEvPT_",
            "ldr r3, [0x0007d048]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d5dc": {
        "function_address": "0x0007d5dc",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10RandomPool10RandomImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_10RandomPool10RandomImplEEEvPT_": {
        "function_address": "0x0003f400",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7a4]!"
        ]
    },
    "fcn.0007edb4": {
        "function_address": "0x0007edb4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007ee18]",
            "ldr r3, [0x0007ee1c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ee20]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaTLSv1_server_method": {
        "function_address": "0x000867d8",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 1",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, r1",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00090824": {
        "function_address": "0x00090824",
        "instructions": [
            "ldr ip, [0x00090860]",
            "ldr r3, [0x00090864]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090868]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009086c]",
            "ldr r0, [0x00090870]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_unsigned_int__unsigned_int_": {
        "function_address": "0x000a9214",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [0x000a9378]",
            "cmp r2, 8",
            "add r7, pc, r7",
            "sub sp, sp, 8",
            "mov r4, r0",
            "mov r8, r1",
            "bls 0xa92f0",
            "cmp r2, 0x10",
            "movls r3, 0x10",
            "bls 0xa9258",
            "cmp r2, 0x20",
            "movls r3, 0x20",
            "bls 0xa9258",
            "cmp r2, 0x40",
            "movls r3, 0x40",
            "bhi 0xa9318",
            "str r3, [r4]",
            "mov r1, 0",
            "lsl r0, r3, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "mov r0, r4",
            "ldr r5, [r0], 8",
            "mov r6, 0",
            "mov r1, r3",
            "str r3, [r4, 4]",
            "mov r2, r5",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r6, [r4, 0xc]",
            "cmp r3, r6",
            "beq 0xa932c",
            "ldr r1, [r4, 4]",
            "str r8, [r1]",
            "ldr r0, [r4]",
            "subs r0, r0, 1",
            "beq 0xa92e0",
            "mov r3, 1",
            "str r6, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "sub r2, r3, 1",
            "cmp r0, r2",
            "bhi 0xa92cc",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a937c]",
            "add r3, r7, r3",
            "add r2, r3, r2, lsl 2",
            "ldr r3, [r2, 0x5ec]",
            "cmn r3, 0xc0000001",
            "str r3, [r4]",
            "bhi 0xa9350",
            "cmp r3, 0",
            "beq 0xa926c",
            "b 0xa925c",
            "sub r0, r2, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r3, 1",
            "lsl r3, r3, r0",
            "b 0xa9300",
            "ldr r3, [0x000a937c]",
            "ldr r1, [0x000a9380]",
            "ldr r0, [0x000a9384]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a937c]",
            "ldr r1, [0x000a9380]",
            "add r3, r7, r3",
            "ldr r0, [0x000a9388]",
            "add r3, r3, 0xc80",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.get_defaults_options": {
        "function_address": "0x0004e694",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "ldr r4, [sp, 0x30]",
            "mov sl, r3",
            "ldr ip, [0x0004e7bc]",
            "mov r3, 0",
            "str r3, [r4]",
            "mov r6, r2",
            "str r3, [sl]",
            "str r3, [r2]",
            "ldr r2, [0x0004e7c0]",
            "add ip, pc, ip",
            "ldr sb, [0x0004e7c4]",
            "ldr fp, [0x0004e7c8]",
            "mov r7, r0",
            "add r2, ip, r2",
            "cmp r7, r3",
            "cmpne r7, 1",
            "mov r5, r0",
            "add sb, ip, sb",
            "mov r8, r1",
            "str r2, [sp, 4]",
            "add fp, ip, fp",
            "ble 0x4e734",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "beq 0x4e76c",
            "ldr r3, [sl]",
            "cmp r3, 0",
            "beq 0x4e794",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0x4e744",
            "mov r2, r7",
            "mov r3, r7",
            "mov r7, r2",
            "cmp r7, r3",
            "cmpne r7, 1",
            "add r8, r8, 4",
            "bgt 0x4e6f4",
            "rsb r0, r7, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [r8, 4]",
            "ldr r1, [sp, 4]",
            "bl rsym.is_prefix",
            "cmp r0, 0",
            "beq 0x4e718",
            "ldr r3, [r8, 4]",
            "sub r2, r7, 1",
            "add r3, r3, 0x18",
            "str r3, [r4]",
            "b 0x4e71c",
            "ldr r0, [r8, 4]",
            "mov r1, sb",
            "bl rsym.is_prefix",
            "cmp r0, 0",
            "beq 0x4e700",
            "ldr r3, [r8, 4]",
            "sub r2, r7, 1",
            "add r3, r3, 0x10",
            "str r3, [r6]",
            "b 0x4e71c",
            "ldr r0, [r8, 4]",
            "mov r1, fp",
            "bl rsym.is_prefix",
            "cmp r0, 0",
            "beq 0x4e70c",
            "ldr r3, [r8, 4]",
            "sub r2, r7, 1",
            "add r3, r3, 0x16",
            "str r3, [sl]",
            "b 0x4e71c"
        ]
    },
    "rsym.is_prefix": {
        "function_address": "0x0003f880",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4a4]!"
        ]
    },
    "sym.my_setwd": {
        "function_address": "0x00049c80",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldrb r3, [r0]",
            "ldr r5, [0x00049d74]",
            "cmp r3, 0",
            "mov r6, r0",
            "add r5, pc, r5",
            "mov r7, r1",
            "beq 0x49ce4",
            "cmp r3, 0x2f",
            "beq 0x49cd8",
            "mov r0, r6",
            "bl sym.imp.chdir",
            "subs r4, r0, 0",
            "bne 0x49cf8",
            "mov r0, r6",
            "bl rsym.test_if_hard_path",
            "cmp r0, 0",
            "bne 0x49d38",
            "ldr r3, [0x00049d78]",
            "ldr r3, [r5, r3]",
            "strb r4, [r3]",
            "b 0x49d14",
            "ldrb r3, [r0, 1]",
            "cmp r3, 0",
            "bne 0x49ca8",
            "ldr r0, [0x00049d7c]",
            "add r0, r5, r0",
            "bl sym.imp.chdir",
            "subs r4, r0, 0",
            "beq 0x49cb8",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "tst r7, 0x10",
            "str r2, [r5]",
            "bne 0x49d20",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r0]",
            "mov r2, r6",
            "mov r1, 0x24",
            "mov r0, 0x11",
            "bl rsym.my_error",
            "b 0x49d14",
            "ldr r3, [0x00049d78]",
            "mov r1, r6",
            "ldr r5, [r5, r3]",
            "ldr r2, [0x00049d80]",
            "mov r0, r5",
            "bl rsym.strmake",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0x2f",
            "beq 0x49d14",
            "mov r3, r5",
            "rsb r0, r5, r0",
            "mov r2, 0x2f",
            "strb r2, [r3, r0]!",
            "strb r4, [r3, 1]",
            "b 0x49d14"
        ]
    },
    "sym.imp.chdir": {
        "function_address": "0x0003f664",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x60c]!"
        ]
    },
    "sym.my_error_unregister_all": {
        "function_address": "0x0004990c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00049954]",
            "ldr r6, [0x00049958]",
            "add r5, pc, r5",
            "ldr r0, [r5, r6]",
            "cmp r0, 0",
            "beq 0x49938",
            "ldr r4, [r0]",
            "bl rsym.my_no_flags_free",
            "subs r0, r4, 0",
            "bne 0x49928",
            "ldr r3, [0x0004995c]",
            "add r2, r5, r6",
            "str r2, [r5, r3]",
            "mov r3, 0",
            "str r3, [r5, r6]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer_mySTL::GetArrayMemory_TaoCrypt::Integer__unsigned_int_": {
        "function_address": "0x000bab90",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "lsl r0, r0, 4",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_hash_insert": {
        "function_address": "0x00052c90",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x10]",
            "sub sp, sp, 0x3c",
            "tst r3, 1",
            "mov r4, r0",
            "str r1, [sp, 8]",
            "beq 0x52d14",
            "ldr r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x52cf4",
            "mov r0, r1",
            "mov r2, 1",
            "add r1, sp, 0x34",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x34]",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym.my_hash_search",
            "cmp r0, 0",
            "beq 0x52d14",
            "mov r0, 1",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldm r0, {r1, r2}",
            "ldr r0, [sp, 8]",
            "str r2, [sp, 0x34]",
            "add r1, r0, r1",
            "mov r0, r4",
            "bl rsym.my_hash_search",
            "cmp r0, 0",
            "bne 0x52ce4",
            "add r0, r4, 0x14",
            "bl rsym.alloc_dynamic",
            "subs fp, r0, 0",
            "beq 0x52ce4",
            "ldr sb, [r4, 8]",
            "ldr r3, [r4, 0xc]",
            "lsr sb, sb, 1",
            "rsb r1, sb, r3",
            "str r1, [sp, 0xc]",
            "str r1, [sp, 0x34]",
            "cmp r1, r3",
            "ldr r5, [r4, 0x14]",
            "beq 0x53108",
            "add r3, sp, 0x30",
            "add r0, sp, 0x28",
            "mov r8, r1",
            "mov r6, 0",
            "str r3, [sp, 0x14]",
            "add sl, sp, 0x2c",
            "str r0, [sp, 0x10]",
            "mov r7, r5",
            "b 0x52dac",
            "tst r6, 1",
            "bne 0x53080",
            "tst r6, 4",
            "strne fp, [sp, 0x1c]",
            "streq r5, [sp, 0x1c]",
            "movne fp, r5",
            "ldreq r5, [r5, 4]",
            "ldrne r5, [r5, 4]",
            "movne r6, 5",
            "strne r5, [sp, 0x24]",
            "streq r5, [sp, 0x24]",
            "moveq r6, 3",
            "ldr r8, [r7, r8]",
            "cmn r8, 1",
            "str r8, [sp, 0x34]",
            "beq 0x52e80",
            "ldr r3, [r4, 0x28]",
            "lsl r8, r8, 3",
            "add r5, r7, r8",
            "cmp r3, 0",
            "ldr r0, [r5, 4]",
            "beq 0x53038",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x30]",
            "mov r1, r0",
            "mov r0, 1",
            "ldr r3, [r4, 0x30]",
            "str r0, [sp, 0x2c]",
            "mov r0, 4",
            "str r0, [sp, 0x28]",
            "ldr ip, [r3, 0x68]",
            "mov r0, r3",
            "ldr r3, [sp, 0x10]",
            "str r3, [sp]",
            "mov r3, sl",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "cmp r6, 0",
            "ldr r3, [sp, 0x2c]",
            "bne 0x52e48",
            "ldr r1, [r4, 8]",
            "ldr r0, [r4, 0xc]",
            "sub r2, r1, 1",
            "and r2, r2, r3",
            "cmp r0, r2",
            "lsrls r2, r1, 1",
            "subls r2, r2, 1",
            "ldr r0, [sp, 0xc]",
            "andls r2, r2, r3",
            "cmp r0, r2",
            "bne 0x53130",
            "tst sb, r3",
            "beq 0x52d6c",
            "tst r6, 4",
            "bne 0x53048",
            "str fp, [sp, 0x18]",
            "mov fp, r5",
            "ldr r5, [r5, 4]",
            "and r6, r6, 1",
            "str r5, [sp, 0x20]",
            "ldr r8, [r7, r8]",
            "orr r6, r6, 4",
            "cmn r8, 1",
            "str r8, [sp, 0x34]",
            "bne 0x52dac",
            "and r3, r6, 3",
            "cmp r3, 1",
            "ldreq r3, [sp, 0x1c]",
            "and r6, r6, 0xc",
            "streq r8, [r3]",
            "ldreq r0, [sp, 0x24]",
            "mov r5, r7",
            "streq r0, [r3, 4]",
            "cmp r6, 4",
            "beq 0x530c8",
            "ldr r3, [r4, 0x28]",
            "cmp r3, 0",
            "beq 0x530e0",
            "add r1, sp, 0x28",
            "mov r2, 0",
            "ldr r0, [sp, 8]",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x28]",
            "mov r1, r0",
            "mov r0, 1",
            "ldr r3, [r4, 0x30]",
            "str r0, [sp, 0x2c]",
            "mov r0, 4",
            "str r0, [sp, 0x30]",
            "ldr ip, [r3, 0x68]",
            "mov r0, r3",
            "ldr r3, [sp, 0x14]",
            "str r3, [sp]",
            "mov r3, sl",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [r4, 8]",
            "ldr r2, [sp, 0x2c]",
            "ldr r0, [r4, 0xc]",
            "sub r3, r1, 1",
            "and r3, r3, r2",
            "add r0, r0, 1",
            "cmp r0, r3",
            "lsrls r3, r1, 1",
            "subls r3, r3, 1",
            "andls r3, r3, r2",
            "lsl r7, r3, 3",
            "add r6, r5, r7",
            "cmp r6, fp",
            "str r3, [sp, 0x34]",
            "beq 0x530f4",
            "ldm r6, {r0, r1}",
            "stm fp, {r0, r1}",
            "ldr r3, [r4, 0x28]",
            "ldr r8, [r4, 8]",
            "cmp r3, 0",
            "ldr sb, [r4, 0xc]",
            "ldr r0, [r6, 4]",
            "beq 0x530b8",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x30]",
            "mov r1, r0",
            "add lr, sp, 0x38",
            "mov r3, 4",
            "ldr ip, [r4, 0x30]",
            "str r3, [lr, -0x10]!",
            "mov r3, 1",
            "str r3, [sp, 0x2c]",
            "mov r0, ip",
            "mov r3, sl",
            "ldr ip, [ip, 0x68]",
            "str lr, [sp]",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 0x2c]",
            "sub r3, r8, 1",
            "and r3, r3, r2",
            "add sb, sb, 1",
            "cmp sb, r3",
            "lsrls r3, r8, 1",
            "subls r3, r3, 1",
            "andls r3, r3, r2",
            "add r3, r5, r3, lsl 3",
            "cmp r6, r3",
            "beq 0x53118",
            "ldr r2, [sp, 8]",
            "rsb r1, r5, r6",
            "str r2, [r6, 4]",
            "rsb r3, r5, r3",
            "mvn r2, 0",
            "str r2, [r5, r7]",
            "asr r1, r1, 3",
            "asr r3, r3, 3",
            "add r2, r5, r3, lsl 3",
            "ldr r3, [r5, r3, lsl 3]",
            "cmp r1, r3",
            "bne 0x52ff8",
            "rsb r5, r5, fp",
            "asr r5, r5, 3",
            "str r5, [r2]",
            "ldr r3, [r4, 0xc]",
            "ldr r2, [r4, 8]",
            "add r3, r3, 1",
            "cmp r3, r2",
            "str r3, [r4, 0xc]",
            "lsleq r3, r3, 1",
            "streq r3, [r4, 8]",
            "mov r0, 0",
            "b 0x52ce8",
            "ldm r4, {r1, r2}",
            "add r1, r0, r1",
            "str r2, [sp, 0x30]",
            "b 0x52ddc",
            "tst r6, 8",
            "bne 0x53070",
            "ldr r0, [sp, 0x18]",
            "rsb r3, r7, r5",
            "asr r3, r3, 3",
            "str r3, [r0]",
            "ldr r1, [sp, 0x20]",
            "and r6, r6, 1",
            "str r1, [r0, 4]",
            "orr r6, r6, 0xc",
            "ldr r2, [r5, 4]",
            "str r5, [sp, 0x18]",
            "str r2, [sp, 0x20]",
            "b 0x52d9c",
            "tst r6, 2",
            "bne 0x530a8",
            "ldr r1, [sp, 0x1c]",
            "rsb r3, r7, r5",
            "asr r3, r3, 3",
            "str r3, [r1]",
            "ldr r2, [sp, 0x24]",
            "and r6, r6, 4",
            "str r2, [r1, 4]",
            "orr r6, r6, 3",
            "str r5, [sp, 0x1c]",
            "ldr r5, [r5, 4]",
            "str r5, [sp, 0x24]",
            "b 0x52d9c",
            "ldm r4, {r1, r2}",
            "add r1, r0, r1",
            "str r2, [sp, 0x30]",
            "b 0x52f78",
            "ldr r1, [sp, 0x18]",
            "mvn r3, 0",
            "str r3, [r1]",
            "ldr r2, [sp, 0x20]",
            "str r2, [r1, 4]",
            "b 0x52ea8",
            "ldm r4, {r1, r2}",
            "ldr r3, [sp, 8]",
            "str r2, [sp, 0x28]",
            "add r1, r3, r1",
            "b 0x52ed0",
            "mvn r3, 0",
            "str r3, [fp]",
            "ldr r0, [sp, 8]",
            "str r0, [fp, 4]",
            "b 0x53014",
            "add r2, sp, 0x30",
            "str r2, [sp, 0x14]",
            "add sl, sp, 0x2c",
            "b 0x52ea8",
            "ldr r1, [sp, 8]",
            "rsb fp, r5, fp",
            "asr fp, fp, 3",
            "str r1, [r6, 4]",
            "str fp, [r5, r7]",
            "b 0x53014",
            "mov r5, r7",
            "b 0x52ea8"
        ]
    },
    "rsym.my_hash_search": {
        "function_address": "0x00040408",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcf4]!"
        ]
    },
    "rsym.alloc_dynamic": {
        "function_address": "0x0003f004",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa4c]!"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::x509_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::x509_::iterator__mySTL::list_yaSSL::x509_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089d98",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89dc8",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89db0",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_Verifier::DSA_Verifier_TaoCrypt::DSA_PublicKey_const_": {
        "function_address": "0x000a1128",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0], 4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x14",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Square_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad7d8",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r2, r1",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::BulkCipher_::list__": {
        "function_address": "0x000893a4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x893c0",
            "b 0x893d0",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x893bc",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_once_strdup": {
        "function_address": "0x000508f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r0",
            "bl sym.imp.strlen",
            "add r5, r0, 1",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym.my_once_alloc",
            "subs r4, r0, 0",
            "movne r1, r6",
            "movne r2, r5",
            "blne sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.my_once_alloc": {
        "function_address": "0x0003d948",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x974]!"
        ]
    },
    "sym.yaSSL_CTX_set_tmp_dh": {
        "function_address": "0x00085c8c",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL7SSL_CTX5SetDHERKNS_2DHE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX5SetDHERKNS_2DHE": {
        "function_address": "0x0003df00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5a4]!"
        ]
    },
    "method.TaoCrypt::Integer.MinEncodedSize_TaoCrypt::Integer::Signedness__const": {
        "function_address": "0x000abf00",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x24",
            "mov r5, r1",
            "mov r6, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "cmp r0, 1",
            "movhs r4, r0",
            "movlo r4, 1",
            "cmp r5, 0",
            "beq 0xabf58",
            "ldr r3, [r6, 0xc]",
            "cmp r3, 1",
            "beq 0xabf68",
            "sub r1, r4, 1",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer7GetByteEj",
            "tst r0, 0x80",
            "ldreq r3, [r6, 0xc]",
            "ldrne r3, [r6, 0xc]",
            "addne r4, r4, 1",
            "cmp r3, 1",
            "beq 0xabf68",
            "mov r0, r4",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "add r5, sp, 0x10",
            "lsl r1, r4, 3",
            "sub r1, r1, 1",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r0, sp",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7IntegerngEv",
            "mov r0, r6",
            "mov r1, sp",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldr r1, [sp, 4]",
            "mov r6, r0",
            "ldr r2, [sp]",
            "add r0, sp, 8",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r5, 8",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "cmp r6, 0",
            "mov r7, sp",
            "addlt r4, r4, 1",
            "b 0xabf58"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer7GetByteEj": {
        "function_address": "0x0003e650",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc4]!"
        ]
    },
    "sym.cli_stmt_execute": {
        "function_address": "0x00046a18",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [r0, 0xa4]",
            "ldr r5, [0x00046ffc]",
            "cmp ip, 0",
            "sub sp, sp, 0x2c",
            "mov r4, r0",
            "add r5, pc, r5",
            "beq 0x46a90",
            "ldrb r3, [r0, 0x2b7]",
            "ldr r6, [r0, 0x2c]",
            "cmp r3, 0",
            "beq 0x46c60",
            "ldr r3, [r6, 0x380]",
            "cmp r3, 0",
            "bne 0x46a60",
            "ldr r3, [r6, 0x2ec]",
            "tst r3, 8",
            "beq 0x46b44",
            "ldr r3, [0x00047000]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00047004]",
            "ldr r2, [r3]",
            "mov r3, 0",
            "bl rsym.set_stmt_error",
            "mov r6, 1",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r5, [r0, 0x2c]",
            "mov r6, 1",
            "str r5, [r5, 0x3a8]",
            "ldr lr, [r0, 0x90]",
            "ldr sb, [r0, 0x94]",
            "lsr sl, lr, 0x18",
            "lsr r8, lr, 8",
            "lsr r7, lr, 0x10",
            "mov r0, r5",
            "mov r1, 0x17",
            "add r2, sp, 0x1c",
            "mov r3, 9",
            "strb r8, [sp, 0x1d]",
            "strb r7, [sp, 0x1e]",
            "strb sl, [sp, 0x1f]",
            "strb sb, [sp, 0x20]",
            "str ip, [sp, 4]",
            "str r6, [sp, 8]",
            "strb lr, [sp, 0x1c]",
            "strb r6, [sp, 0x21]",
            "strb ip, [sp, 0x22]",
            "strb ip, [sp, 0x23]",
            "strb ip, [sp, 0x24]",
            "str ip, [sp]",
            "str r4, [sp, 0xc]",
            "bl rsym.cli_advanced_command",
            "cmp r0, 0",
            "beq 0x46c7c",
            "add r3, r5, 0x2b8",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x80]",
            "str r3, [r4, 0x84]",
            "ldr r2, [r4, 0x2c]",
            "ldr r3, [r5, 0x2ec]",
            "cmp r2, 0",
            "str r3, [r4, 0x9c]",
            "add r3, r5, 0x2c0",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x88]",
            "str r3, [r4, 0x8c]",
            "movne r0, r4",
            "movne r1, r5",
            "blne rsym.set_stmt_errmsg",
            "mov r6, 1",
            "b 0x46a80",
            "mov r0, r6",
            "mov r1, 1",
            "bl rsym.net_clear",
            "ldr r8, [r4, 0xa4]",
            "ldr r0, [r6, 0xc]",
            "add r8, r8, 7",
            "ldr sl, [r6, 4]",
            "lsr r7, r8, 3",
            "rsb sl, sl, r0",
            "add r1, r7, 1",
            "ldr r3, [r6, 0x28]",
            "add r1, r1, sl",
            "cmp r1, r3",
            "bhi 0x46ce4",
            "mov r2, r7",
            "mov r1, 0",
            "bl sym.imp.memset",
            "ldr r3, [r6, 0xc]",
            "add r7, r3, r7",
            "str r7, [r6, 0xc]",
            "ldrb r0, [r4, 0x2b6]",
            "add r2, r7, 1",
            "ldr sl, [r4, 0xa4]",
            "ldr r1, [r4, 0x30]",
            "strb r0, [r3, r8, lsr 3]",
            "str r2, [r6, 0xc]",
            "ldrb r3, [r4, 0x2b6]",
            "add sl, r1, sl, lsl 6",
            "cmp r3, 0",
            "bne 0x46e94",
            "ldr r7, [r4, 0x30]",
            "cmp sl, r7",
            "ldrls r0, [r6, 4]",
            "bls 0x46d10",
            "mov sb, 0",
            "mov fp, 1",
            "str r6, [sp, 0x14]",
            "b 0x46c00",
            "ldr r3, [r7, 0x2c]",
            "ldr r2, [r8, 4]",
            "and r0, r3, 7",
            "ldrb r1, [r2, r3, lsr 3]",
            "orr r1, r1, fp, lsl r0",
            "strb r1, [r2, r3, lsr 3]",
            "add r7, r7, 0x40",
            "cmp sl, r7",
            "bls 0x46d04",
            "ldrb r3, [r7, 0x3a]",
            "cmp r3, 0",
            "strbne sb, [r7, 0x3a]",
            "bne 0x46bf4",
            "ldr r3, [r7, 4]",
            "ldr r8, [r4, 0x2c]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x46bdc",
            "ldr r2, [r7]",
            "ldr r3, [r8, 4]",
            "ldr r6, [r8, 0xc]",
            "ldr r1, [r2]",
            "rsb r6, r3, r6",
            "ldr r3, [r8, 0x28]",
            "add r1, r6, r1",
            "cmp r1, r3",
            "bhi 0x46cc4",
            "mov r0, r8",
            "mov r1, r7",
            "ldr ip, [r7, 0x14]",
            "mov lr, pc",
            "bx ip",
            "b 0x46bf4",
            "ldr r2, [0x00047000]",
            "ldr r1, [0x00047008]",
            "ldr r2, [r5, r2]",
            "mov r6, 1",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "b 0x46a80",
            "ldr r3, [r5, 0x3b0]",
            "mov r0, r5",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "bne 0x46b00",
            "add r3, r5, 0x2b8",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x80]",
            "str r3, [r4, 0x84]",
            "ldr r3, [r5, 0x2ec]",
            "str r3, [r4, 0x9c]",
            "add r3, r5, 0x2c0",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x88]",
            "str r3, [r4, 0x8c]",
            "b 0x46a80",
            "mov r0, r8",
            "bl rsym.net_realloc",
            "cmp r0, 0",
            "bne 0x46f00",
            "ldr r3, [r8, 4]",
            "add r6, r3, r6",
            "str r6, [r8, 0xc]",
            "b 0x46c48",
            "mov r0, r6",
            "bl rsym.net_realloc",
            "cmp r0, 0",
            "bne 0x46df4",
            "ldr r0, [r6, 4]",
            "add r0, r0, sl",
            "str r0, [r6, 0xc]",
            "b 0x46b7c",
            "ldr r6, [sp, 0x14]",
            "ldr r0, [r6, 4]",
            "ldr r2, [r6, 0xc]",
            "rsb r6, r0, r2",
            "mov r1, r6",
            "mov r2, 0",
            "bl rsym.my_memdup",
            "subs r8, r0, 0",
            "beq 0x46f80",
            "ldr r5, [r4, 0x2c]",
            "mov lr, 0",
            "str r5, [r5, 0x3a8]",
            "ldr ip, [r4, 0x90]",
            "ldr r3, [r4, 0x94]",
            "lsr sl, ip, 8",
            "str r3, [sp, 0x14]",
            "strb sl, [sp, 0x1d]",
            "ldr sl, [sp, 0x14]",
            "lsr fp, ip, 0x18",
            "lsr sb, ip, 0x10",
            "mov r7, 1",
            "mov r0, r5",
            "mov r1, 0x17",
            "add r2, sp, 0x1c",
            "mov r3, 9",
            "strb sb, [sp, 0x1e]",
            "strb fp, [sp, 0x1f]",
            "strb sl, [sp, 0x20]",
            "strb lr, [sp, 0x24]",
            "stmib sp, {r6, r7}",
            "strb ip, [sp, 0x1c]",
            "strb r7, [sp, 0x21]",
            "strb lr, [sp, 0x22]",
            "strb lr, [sp, 0x23]",
            "str r8, [sp]",
            "str r4, [sp, 0xc]",
            "bl rsym.cli_advanced_command",
            "cmp r0, 0",
            "beq 0x46e4c",
            "add r3, r5, 0x2b8",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x80]",
            "str r3, [r4, 0x84]",
            "ldr r2, [r4, 0x2c]",
            "ldr r3, [r5, 0x2ec]",
            "cmp r2, 0",
            "str r3, [r4, 0x9c]",
            "add r3, r5, 0x2c0",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x88]",
            "str r3, [r4, 0x8c]",
            "movne r1, r5",
            "movne r0, r4",
            "blne rsym.set_stmt_errmsg",
            "mov r6, 1",
            "mov r3, 0",
            "strb r3, [r4, 0x2b6]",
            "mov r0, r8",
            "bl rsym.my_no_flags_free",
            "b 0x46a80",
            "ldr r3, [0x00047000]",
            "add r0, r6, 0x25c",
            "ldr r3, [r5, r3]",
            "add r0, r0, 3",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r3, [r6, 0x58]",
            "ldr r2, [0x0004700c]",
            "add r3, r3, 0x40000000",
            "ldr r2, [r5, r2]",
            "sub r3, r3, 0x7d0",
            "ldr r1, [r2, r3, lsl 2]",
            "add r0, r6, 0x5f",
            "bl sym.imp.strcpy",
            "ldr r3, [r6, 4]",
            "mov r1, r6",
            "add sl, r3, sl",
            "str sl, [r6, 0xc]",
            "mov r0, r4",
            "bl rsym.set_stmt_errmsg",
            "mov r6, 1",
            "b 0x46a80",
            "ldr r3, [r5, 0x3b0]",
            "mov r0, r5",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "bne 0x46da0",
            "add r3, r5, 0x2b8",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x80]",
            "str r3, [r4, 0x84]",
            "ldr r3, [r5, 0x2ec]",
            "str r3, [r4, 0x9c]",
            "add r3, r5, 0x2c0",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 0x88]",
            "str r3, [r4, 0x8c]",
            "b 0x46de0",
            "ldr r0, [r6, 4]",
            "ldr r1, [r4, 0xa4]",
            "rsb r8, r0, r2",
            "ldr r3, [r6, 0x28]",
            "add r1, r8, r1, lsl 1",
            "cmp r1, r3",
            "bhi 0x46f60",
            "ldr r3, [r4, 0x30]",
            "cmp sl, r3",
            "bls 0x46d10",
            "ldrb r0, [r3, 0x39]",
            "ldr ip, [r3, 0x34]",
            "cmp r0, 0",
            "moveq r1, r0",
            "movne r1, 0x8000",
            "orr r1, r1, ip",
            "strb r1, [r2]",
            "ldr r2, [r6, 0xc]",
            "lsr r1, r1, 8",
            "strb r1, [r2, 1]",
            "ldr r2, [r6, 0xc]",
            "add r3, r3, 0x40",
            "add r2, r2, 2",
            "cmp sl, r3",
            "str r2, [r6, 0xc]",
            "bhi 0x46ebc",
            "b 0x46bbc",
            "ldr r2, [0x00047000]",
            "add r0, r8, 0x25c",
            "ldr r2, [r5, r2]",
            "add r0, r0, 3",
            "ldr r1, [r2]",
            "str r6, [sp, 0x10]",
            "bl sym.imp.strcpy",
            "ldr r2, [r8, 0x58]",
            "ldr r1, [0x0004700c]",
            "add r2, r2, 0x40000000",
            "ldr r1, [r5, r1]",
            "sub r2, r2, 0x7d0",
            "ldr r1, [r1, r2, lsl 2]",
            "add r0, r8, 0x5f",
            "bl sym.imp.strcpy",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [r8, 4]",
            "mov r0, r4",
            "add r3, r2, r3",
            "str r3, [r8, 0xc]",
            "mov r1, r8",
            "bl rsym.set_stmt_errmsg",
            "mov r6, 1",
            "b 0x46a80",
            "mov r0, r6",
            "bl rsym.net_realloc",
            "cmp r0, 0",
            "bne 0x46fa4",
            "ldr r0, [r6, 4]",
            "add r2, r0, r8",
            "str r2, [r6, 0xc]",
            "b 0x46eb0",
            "ldr r3, [0x00047000]",
            "mov r0, r4",
            "ldr r2, [r5, r3]",
            "ldr r1, [0x00047010]",
            "mov r3, r8",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r6, 1",
            "b 0x46a80",
            "ldr r3, [0x00047000]",
            "add r0, r6, 0x25c",
            "ldr r3, [r5, r3]",
            "add r0, r0, 3",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r3, [r6, 0x58]",
            "ldr r2, [0x0004700c]",
            "add r3, r3, 0x40000000",
            "ldr r2, [r5, r2]",
            "sub r3, r3, 0x7d0",
            "ldr r1, [r2, r3, lsl 2]",
            "add r0, r6, 0x5f",
            "bl sym.imp.strcpy",
            "ldr r3, [r6, 4]",
            "mov r1, r6",
            "add r8, r3, r8",
            "str r8, [r6, 0xc]",
            "mov r0, r4",
            "bl rsym.set_stmt_errmsg",
            "mov r6, 1",
            "b 0x46a80"
        ]
    },
    "rsym.cli_advanced_command": {
        "function_address": "0x0003ffb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfd4]!"
        ]
    },
    "rsym.net_realloc": {
        "function_address": "0x00040258",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe14]!"
        ]
    },
    "rsym.my_memdup": {
        "function_address": "0x0003ee18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb94]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::HandShakeHeader_const_": {
        "function_address": "0x0008ca2c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "ldr r1, [0x0008ca64]",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r5, 4]",
            "add r1, r5, 8",
            "strb r3, [r0]",
            "mov r2, 3",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007e7c8": {
        "function_address": "0x0007e7c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e824]",
            "ldr r3, [0x0007e828]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DES7DESImplEEEvPT_",
            "ldr r3, [0x0007e82c]",
            "ldr r1, [0x0007e830]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e834]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e838]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Double_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad378",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r2, r1",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer.IsSquare___const": {
        "function_address": "0x000ac840",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x24",
            "mov r5, r0",
            "add r4, sp, 0x10",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer10SquareRootEv",
            "mov r1, r4",
            "mov r2, r1",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r1, sp",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "rsbs r0, r5, 1",
            "movlo r0, 0",
            "add sp, sp, 0x24",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer10SquareRootEv": {
        "function_address": "0x0003fbb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x284]!"
        ]
    },
    "sym.yaX509_NAME_get_index_by_NID": {
        "function_address": "0x00085548",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "ldr r4, [0x000855a4]",
            "mov r6, r2",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "cmp r5, 0xd",
            "add r4, pc, r4",
            "beq 0x85574",
            "mvn r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r6, r6, 1",
            "ldr r1, [0x000855a8]",
            "add r5, r0, r6",
            "add r1, r4, r1",
            "mov r0, r5",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0x85568",
            "rsb r5, r5, r6",
            "add r0, r0, 4",
            "add r0, r5, r0",
            "b 0x8556c"
        ]
    },
    "fcn.0008f44c": {
        "function_address": "0x0008f44c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f4a4]",
            "ldr r3, [0x0008f4a8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008f4ac]",
            "ldr r0, [0x0008f4b0]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f4b4]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f4b8]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::x509::x509_yaSSL::x509_const_": {
        "function_address": "0x0007c334",
        "instructions": [
            "ldr r3, [r1]",
            "push {r4, r5, r6, lr}",
            "str r3, [r0]",
            "mov r5, r1",
            "mov r4, r0",
            "mov r1, 0",
            "ldr r0, [r0]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "ldr r1, [r5, 4]",
            "ldr r2, [r4]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.init_client_errs": {
        "function_address": "0x000486e0",
        "instructions": [
            "ldr r3, [0x00048708]",
            "ldr r2, [0x0004870c]",
            "add r3, pc, r3",
            "ldr r0, [r3, r2]",
            "push {r4, lr}",
            "mov r1, 0x7d0",
            "ldr r2, [0x00048710]",
            "bl rsym.my_error_register",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.my_error_register": {
        "function_address": "0x00040534",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc2c]!"
        ]
    },
    "sym.check_scramble_323": {
        "function_address": "0x000478b0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x34",
            "mov r4, r2",
            "mov r6, r0",
            "mov r2, 8",
            "add r0, sp, 0x28",
            "bl rsym.hash_password",
            "ldr r3, [sp, 0x28]",
            "ldm r4, {r1, r2}",
            "eor r1, r1, r3",
            "ldr r3, [sp, 0x2c]",
            "mov r0, sp",
            "eor r2, r2, r3",
            "bl rsym.randominit",
            "ldrb r3, [r6]",
            "mov r5, sp",
            "cmp r3, 0",
            "beq 0x47c8c",
            "add r7, sp, 0x18",
            "add r3, r7, 0x10",
            "cmp r7, r3",
            "bhs 0x47c8c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r6, 1]",
            "add r4, r6, 1",
            "cmp r3, 0",
            "strb r0, [sp, 0x18]",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x19]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1a]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1b]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1c]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1d]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1e]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x1f]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x20]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x21]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x22]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x23]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x24]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x25]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x26]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047cf0]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "ldr r3, [0x00047cf4]",
            "mov r2, 0",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "ldrb r3, [r4, 1]!",
            "strb r0, [sp, 0x27]",
            "cmp r3, 0",
            "beq 0x47c9c",
            "mov r0, 1",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "rsb r4, r6, r4",
            "cmp r4, 8",
            "bne 0x47c8c",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "ldr r3, [0x00047cf0]",
            "mov r2, 0",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "bl fcn.000bf9d0",
            "mov r3, 0",
            "and r1, r0, 0xff",
            "ldrb r0, [r6, r3]",
            "cmp r0, 0",
            "beq 0x47c90",
            "ldrb r2, [r7, r3]",
            "add r3, r3, 1",
            "eor r2, r1, r2",
            "cmp r0, r2",
            "beq 0x47ccc",
            "b 0x47c8c"
        ]
    },
    "rsym.hash_password": {
        "function_address": "0x0003ec5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcbc]!"
        ]
    },
    "rsym.randominit": {
        "function_address": "0x000406d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb14]!"
        ]
    },
    "rsym.my_rnd": {
        "function_address": "0x0003d438",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xcd4]!"
        ]
    },
    "sym.imp.floor": {
        "function_address": "0x0003dcd8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x714]!"
        ]
    },
    "sym.TaoCrypt::Integer::IsUnit___const": {
        "function_address": "0x000a4c18",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r2, [0x000a4c88]",
            "cmp r0, 1",
            "add r2, pc, r2",
            "movne r0, 0",
            "beq 0xa4c40",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0xa4c64",
            "ldr r3, [r4, 4]",
            "ldr r0, [r3]",
            "cmp r0, 1",
            "movne r0, 0",
            "moveq r0, 1",
            "b 0xa4c38",
            "ldr r3, [0x000a4c8c]",
            "ldr r1, [0x000a4c90]",
            "ldr r0, [0x000a4c94]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::SSL::makeTLSMasterSecret__": {
        "function_address": "0x00095380",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r5, r0, 0x68",
            "sub sp, sp, 0x50",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r4, sp, 0x10",
            "mov ip, r4",
            "add lr, r0, 0x34",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add ip, r4, 0x20",
            "mov lr, ip",
            "add r7, r0, 0x54",
            "ldm r7!, {r0, r1, r2, r3}",
            "stm lr!, {r0, r1, r2, r3}",
            "ldm r7, {r0, r1, r2, r3}",
            "stm lr, {r0, r1, r2, r3}",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r7, [r0]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr r5, [0x0009544c]",
            "ldr ip, [0x00095450]",
            "add r5, pc, r5",
            "add ip, r5, ip",
            "add ip, ip, 0x124",
            "ldr r3, [r0, 0x124]",
            "str ip, [sp]",
            "mov ip, 0xd",
            "add r0, r8, 4",
            "mov r2, r7",
            "mov r1, 0x30",
            "str ip, [sp, 4]",
            "mov ip, 0x40",
            "str ip, [sp, 0xc]",
            "str r4, [sp, 8]",
            "bl rsym._ZN5yaSSL3PRFEPhjPKhjS2_jS2_j",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL13deriveTLSKeysEv",
            "add sp, sp, 0x50",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::KeyInnerHash__": {
        "function_address": "0x000bad18",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r1, [r4]",
            "add r0, r0, 0x10",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r3, 1",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PrivateKey::Initialize_TaoCrypt::Source_": {
        "function_address": "0x000a1288",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x000a12cc]",
            "ldr ip, [0x000a12d0]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "add ip, ip, 8",
            "str ip, [r2, -8]!",
            "mov ip, r0",
            "str r1, [sp, 4]",
            "mov r0, sp",
            "mov r1, ip",
            "bl rsym._ZN8TaoCrypt19DSA_Private_Decoder6DecodeERNS_14DSA_PrivateKeyE",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt19DSA_Private_Decoder6DecodeERNS_14DSA_PrivateKeyE": {
        "function_address": "0x0003ea10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe44]!"
        ]
    },
    "sym.yaSSL::HandShakeHeader::set_length_unsigned_int_": {
        "function_address": "0x0008d120",
        "instructions": [
            "add r3, r0, 8",
            "push {r4, lr}",
            "mov r0, r1",
            "mov r1, r3",
            "bl rsym._ZN5yaSSL7c32to24EjRA3_h",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7c32to24EjRA3_h": {
        "function_address": "0x0003eee4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb0c]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::EuclideanDomainOf__": {
        "function_address": "0x000ad288",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000ad330]",
            "ldr r3, [0x000ad334]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "ldr r6, [r0, 0x20]",
            "ldr r2, [r0, 0x1c]",
            "add r3, r3, 8",
            "mov r5, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000ad338]",
            "ldr r6, [r5, 0x10]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r5, 0xc]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r2, [0x000ad33c]",
            "ldr r3, [0x000ad340]",
            "ldr r2, [r4, r2]",
            "ldr r1, [0x000ad344]",
            "ldr r0, [0x000ad348]",
            "add r2, r2, 8",
            "add r3, r4, r3",
            "str r2, [r5]",
            "str r2, [r5, 4]",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x208",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_strntol_ucs2": {
        "function_address": "0x00069c78",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "add sl, r1, r2",
            "ldr r2, [sp, 0x44]",
            "mov ip, 0",
            "str ip, [r2]",
            "mov r5, r0",
            "mov r7, r3",
            "mov r4, r1",
            "str ip, [sp, 4]",
            "add r8, sp, 0x14",
            "mov r2, r4",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x69ed8",
            "ldr r3, [sp, 0x14]",
            "sub r3, r3, 9",
            "cmp r3, 0x24",
            "addls pc, pc, r3, lsl 2",
            "b 0x69d88",
            "b 0x69d80",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d80",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d88",
            "b 0x69d80",
            "b 0x69d88",
            "b 0x69d74",
            "ldr r3, [sp, 4]",
            "eor r3, r3, 1",
            "str r3, [sp, 4]",
            "add r4, r4, r0",
            "b 0x69ca4",
            "mov r1, r7",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r7",
            "mov sb, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "mov fp, 0",
            "str r1, [sp, 8]",
            "str r4, [sp, 0xc]",
            "mov r6, fp",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, r4",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x69e48",
            "ldr r2, [sp, 0x14]",
            "add r4, r4, r0",
            "sub r3, r2, 0x30",
            "cmp r3, 9",
            "bls 0x69e14",
            "sub r3, r2, 0x41",
            "cmp r3, 0x19",
            "subls r3, r2, 0x37",
            "strls r3, [sp, 0x14]",
            "bls 0x69e18",
            "sub r3, r2, 0x61",
            "cmp r3, 0x19",
            "bhi 0x69e4c",
            "sub r3, r2, 0x57",
            "str r3, [sp, 0x14]",
            "cmp r7, r3",
            "ble 0x69e4c",
            "cmp r6, sb",
            "bhi 0x69e40",
            "beq 0x69e34",
            "mla r6, r7, r6, r3",
            "b 0x69db4",
            "ldr ip, [sp, 8]",
            "cmp ip, r3",
            "bhs 0x69e2c",
            "mov fp, 1",
            "b 0x69db4",
            "beq 0x69eb8",
            "ldr r2, [sp, 0x40]",
            "cmp r2, 0",
            "strne r4, [r2]",
            "ldr r3, [sp, 0xc]",
            "cmp r3, r4",
            "beq 0x69f34",
            "ldr r2, [sp, 4]",
            "cmp r2, 0",
            "bne 0x69e9c",
            "cmp r6, 0",
            "blt 0x69f00",
            "cmp fp, 0",
            "bne 0x69f14",
            "ldr r2, [sp, 4]",
            "cmp r2, 0",
            "rsbne r0, r6, 0",
            "moveq r0, r6",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r6, 0x80000000",
            "bls 0x69e78",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r2]",
            "mov r0, 0x80000000",
            "b 0x69e90",
            "ldr r2, [sp, 0x40]",
            "mov r3, 0x54",
            "cmp r2, 0",
            "strne r4, [r2]",
            "ldr ip, [sp, 0x44]",
            "mov r0, 0",
            "str r3, [ip]",
            "b 0x69e90",
            "ldr ip, [sp, 0x40]",
            "cmp ip, 0",
            "strne r4, [ip]",
            "ldr r2, [sp, 0x44]",
            "cmp r0, 0",
            "moveq r0, 0x54",
            "movne r0, 0x21",
            "str r0, [r2]",
            "mov r0, 0",
            "b 0x69e90",
            "ldr ip, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [ip]",
            "mvn r0, 0x80000000",
            "b 0x69e90",
            "ldr r3, [sp, 4]",
            "ldr ip, [sp, 0x44]",
            "cmp r3, 0",
            "mov r3, 0x22",
            "str r3, [ip]",
            "mvneq r0, 0x80000000",
            "movne r0, 0x80000000",
            "b 0x69e90",
            "ldr ip, [sp, 0x44]",
            "mov r3, 0x21",
            "str r3, [ip]",
            "mov r0, 0",
            "b 0x69e90"
        ]
    },
    "sym.yaSSL::ServerDHParams::alloc_pub_int_": {
        "function_address": "0x0008b0c8",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0, 8]",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 0x14]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_mySTL::destroy_TaoCrypt::Integer__TaoCrypt::Integer__TaoCrypt::Integer_": {
        "function_address": "0x000bb478",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "beq 0xbb4b4",
            "ldr r5, [r4, 4]",
            "ldr r2, [r4], 0x10",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "cmp r6, r4",
            "bne 0xbb48c",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DiffieHellman::get_parms_unsigned_char__unsigned_char__unsigned_char__const": {
        "function_address": "0x0007f438",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x24",
            "mov r4, r0",
            "add r6, sp, 0x10",
            "mov r7, r1",
            "mov r0, r6",
            "ldr r1, [r4]",
            "mov sl, r3",
            "mov r8, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r1, [r4]",
            "mov r0, sp",
            "add r1, r1, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r3, 0",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r3, 0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr r3, [r4]",
            "mov r5, sp",
            "mov r0, r3",
            "ldr r4, [r3, 0x24]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, sl",
            "bl sym.imp.memcpy",
            "ldm sp, {r2, r4}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AbstractEuclideanDomain::AbstractEuclideanDomain__": {
        "function_address": "0x00099ed8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00099f4c]",
            "ldr r3, [0x00099f50]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "ldr r6, [r0, 0x10]",
            "ldr r2, [r0, 0xc]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r5, r0",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r2, [0x00099f54]",
            "ldr r3, [0x00099f58]",
            "ldr r2, [r4, r2]",
            "ldr r0, [0x00099f5c]",
            "ldr r1, [0x00099f60]",
            "add r2, r2, 8",
            "str r2, [r5]",
            "str r2, [r5, 4]",
            "add r3, r4, r3",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt::DH.DH_TaoCrypt::Source_": {
        "function_address": "0x000a0c04",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt2DH10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt2DH10InitializeERNS_6SourceE": {
        "function_address": "0x0003fe50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc4]!"
        ]
    },
    "sym.dynstr_set": {
        "function_address": "0x0004dfdc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "streq r5, [r0, 4]",
            "moveq r0, r5",
            "beq 0x4e028",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "ldr r3, [r4, 8]",
            "add r6, r0, 1",
            "cmp r6, r3",
            "mov r7, r0",
            "bhi 0x4e030",
            "str r7, [r4, 4]",
            "ldr r0, [r4]",
            "mov r1, r5",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r8, [r4, 0xc]",
            "sub r0, r8, 1",
            "mov r1, r8",
            "add r0, r0, r6",
            "bl fcn.000bed20",
            "mul r1, r8, r0",
            "cmp r1, 0",
            "str r1, [r4, 8]",
            "moveq r1, r8",
            "streq r1, [r4, 8]",
            "ldr r0, [r4]",
            "mov r2, 0x10",
            "bl rsym.my_realloc",
            "cmp r0, 0",
            "str r0, [r4]",
            "moveq r0, 1",
            "bne 0x4e010",
            "b 0x4e028"
        ]
    },
    "sym.void_yaSSL::ysArrayDelete_char__char_": {
        "function_address": "0x00089a00",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdaPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::PKCS12_Decoder::ReadHeader__": {
        "function_address": "0x0009b11c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt11BER_Decoder10GetVersionEv"
        ]
    },
    "sym.yaBN_bin2bn": {
        "function_address": "0x00085a20",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r2, 0",
            "sub sp, sp, 8",
            "mov r6, r0",
            "mov r2, r1",
            "beq 0x85a5c",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL7Integer6assignEPKhj",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6BIGNUMEEEvPT_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 4",
            "str r2, [sp, 4]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL7IntegerC1Ev",
            "cmp r5, 0",
            "ldr r2, [sp, 4]",
            "beq 0x85a8c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6BIGNUMEEEvPT_",
            "ldr r2, [sp, 4]",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL7Integer6assignEPKhj",
            "mov r4, r5",
            "b 0x85a44"
        ]
    },
    "rsym._ZN5yaSSL7Integer6assignEPKhj": {
        "function_address": "0x0003ff70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 4]!"
        ]
    },
    "sym.TaoCrypt::Integer::Minus_TaoCrypt::Integer_const__const": {
        "function_address": "0x000aae7c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r1]",
            "mov r5, r2",
            "ldr r2, [r2]",
            "mov r4, r1",
            "cmp r2, r3",
            "movlo r2, r3",
            "mov r1, 0",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "ldr r7, [r4, 0xc]",
            "cmp r7, 1",
            "beq 0xaaed8",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xaaefc",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xaaf10",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "str r7, [r6, 0xc]",
            "b 0xaaecc",
            "mov r1, r4",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "b 0xaaecc",
            "mov r1, r5",
            "mov r2, r4",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xaaecc"
        ]
    },
    "method.yaSSL::Sessions.remove_unsigned_char_const_": {
        "function_address": "0x00092984",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "add r5, sp, 4",
            "mov r7, r1",
            "mov r0, r5",
            "add r1, r4, 0x10",
            "mov r6, 0",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "mov r2, r7",
            "ldr r0, [r4]",
            "mov r1, r6",
            "bl rsym._ZN5mySTL7find_ifINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_20yassl_int_cpp_local210sess_matchEEET_S9_S9_T0_",
            "subs r7, r0, 0",
            "beq 0x929d8",
            "ldr r0, [r7, 8]",
            "str r6, [r7, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_11SSL_SESSIONEEEvPT_",
            "mov r0, r4",
            "mov r1, r7",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE5eraseENS4_8iteratorE",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL7find_ifINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_20yassl_int_cpp_local210sess_matchEEET_S9_S9_T0_": {
        "function_address": "0x0003f46c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x75c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_11SSL_SESSIONEEEvPT_": {
        "function_address": "0x0003ee48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb74]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE5eraseENS4_8iteratorE": {
        "function_address": "0x0003db58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x814]!"
        ]
    },
    "sym.mysql_thread_init": {
        "function_address": "0x00045cf4",
        "instructions": [
            "push {r4, lr}",
            "bl rsym.my_thread_init",
            "pop {r4, lr}"
        ]
    },
    "rsym.my_thread_init": {
        "function_address": "0x0003ec80",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xca4]!"
        ]
    },
    "sym.TaoCrypt::Integer::Encode_unsigned_char__unsigned_int__TaoCrypt::Integer::Signedness__const": {
        "function_address": "0x000abfc8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "cmp r3, 0",
            "sub sp, sp, 0x20",
            "mov r4, r1",
            "mov r5, r2",
            "mov r8, r0",
            "bne 0xac024",
            "cmp r5, 0",
            "beq 0xac014",
            "mov r6, r5",
            "mov r7, 0",
            "sub r6, r6, 1",
            "mov r0, r8",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt7Integer7GetByteEj",
            "cmp r6, 0",
            "strb r0, [r4, r7]",
            "add r7, r7, 1",
            "bne 0xabff4",
            "mov r0, r5",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "cmp r3, 1",
            "bne 0xabfe4",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "cmp r0, r5",
            "movhs r1, r0",
            "movlo r1, r5",
            "lsl r1, r1, 3",
            "mov r0, sp",
            "add r6, sp, 0x10",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r2, r8",
            "mov r0, r6",
            "mov r1, sp",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "cmp r5, 0",
            "mov r7, sp",
            "subne r8, r5, 1",
            "movne r7, 0",
            "beq 0xac0a4",
            "mov r1, r8",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer7GetByteEj",
            "strb r0, [r4, r7]",
            "add r7, r7, 1",
            "cmp r7, r5",
            "sub r8, r8, 1",
            "blo 0xac084",
            "add r0, r6, 8",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xac014"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Inverse_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a50d8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "subs r3, r0, 0",
            "bne 0xa5140",
            "ldr ip, [r5, 0xc]",
            "ldr r0, [r5, 0x20]",
            "cmp ip, 0",
            "ldr lr, [r5, 0x10]",
            "beq 0xa5124",
            "mov r2, r3",
            "ldr r1, [lr, r3]",
            "add r2, r2, 1",
            "cmp ip, r2",
            "str r1, [r0, r3]",
            "add r3, r3, 4",
            "bhi 0xa510c",
            "mov r1, r0",
            "ldr r2, [r4, 4]",
            "ldr r3, [r4]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "cmp r0, 0",
            "bne 0xa514c",
            "add r4, r5, 0x1c",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r4]",
            "ldr r2, [r5, 0x20]",
            "ldr r1, [r5, 0xc]",
            "ldr r0, [r2, r3, lsl 2]",
            "rsb r1, r3, r1",
            "rsb r1, r1, r0",
            "str r1, [r2, r3, lsl 2]",
            "b 0xa513c"
        ]
    },
    "sym.TaoCrypt::DSA_PrivateKey::SetPrivatePart_TaoCrypt::Integer_const_": {
        "function_address": "0x000a11b8",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::GetErrors__": {
        "function_address": "0x000939b0",
        "instructions": [
            "ldr r3, [0x00093a0c]",
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00093a10]",
            "add r3, pc, r3",
            "add r4, r3, r4",
            "ldr r5, [r4, 8]",
            "cmp r5, 0",
            "beq 0x939dc",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x24",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, 0",
            "mov r5, r0",
            "str r3, [r0, 8]",
            "str r3, [r0]",
            "str r3, [r0, 4]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL5MutexC1Ev",
            "str r5, [r4, 8]",
            "b 0x939d0"
        ]
    },
    "sym.yaSSL::build_certHashes_yaSSL::SSL__yaSSL::Hashes_": {
        "function_address": "0x000828dc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x11c",
            "str r1, [sp, 0x18]",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes7get_MD5Ev",
            "add r7, sp, 0x110",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3MD5C1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes7get_SHAEv",
            "add r6, sp, 0x108",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SHAC1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr r5, [0x00082bac]",
            "cmp r0, 0",
            "add r5, pc, r5",
            "bne 0x82b64",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldr fp, [0x00082bb0]",
            "add r8, sp, 0x94",
            "add r0, r0, 4",
            "mov r1, r0",
            "add fp, r5, fp",
            "str r0, [sp]",
            "mov r2, 0x30",
            "mov r0, r8",
            "bl sym.imp.memcpy",
            "add ip, r8, 0x30",
            "add r3, fp, 0x54",
            "mov sb, ip",
            "mov sl, r3",
            "str r3, [sp, 8]",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm sb!, {r0, r1, r2, r3}",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm sb!, {r0, r1, r2, r3}",
            "ldm sl, {r0, r1, r2, r3}",
            "stm sb, {r0, r1, r2, r3}",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "add ip, sp, 0xf4",
            "str ip, [sp, 0x14]",
            "mov r3, 0x60",
            "ldr ip, [r0]",
            "ldr r1, [sp, 0x14]",
            "mov r2, r8",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add r5, sp, 0x24",
            "mov r2, 0x30",
            "add r3, r5, r2",
            "add fp, fp, 0x84",
            "ldr r1, [sp]",
            "mov r0, r5",
            "str fp, [sp, 0x10]",
            "str r3, [sp, 0xc]",
            "bl sym.imp.memcpy",
            "ldr fp, [sp, 0x10]",
            "ldr ip, [sp, 0xc]",
            "ldm fp!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0x10",
            "add r0, r5, 0x60",
            "str ip, [sp]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "mov r3, 0x70",
            "ldr ip, [r0]",
            "ldr r1, [sp, 0x18]",
            "mov r2, r5",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r0, r0, 4",
            "mov r1, r0",
            "str r0, [sp, 0x1c]",
            "mov r2, 0x30",
            "mov r0, r8",
            "bl sym.imp.memcpy",
            "ldmib sp, {ip, lr}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm sl, {r0, r1}",
            "stm sb, {r0, r1}",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r3, 0x58",
            "ldr ip, [r0]",
            "mov r2, r8",
            "ldr r1, [sp, 0x14]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp, 0x1c]",
            "mov r2, 0x30",
            "mov r0, r5",
            "bl sym.imp.memcpy",
            "ldr lr, [sp, 0x10]",
            "ldr ip, [sp, 0xc]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp, {r0, r1}",
            "ldr r3, [sp]",
            "mov r2, 0x14",
            "stm r3, {r0, r1}",
            "ldr r1, [sp, 0x14]",
            "add r0, r5, 0x58",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "ldr ip, [sp, 0x18]",
            "mov r2, r5",
            "add r1, ip, 0x10",
            "mov r3, 0x6c",
            "ldr ip, [r0]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL3MD5aSERKS0_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL3SHAaSERKS0_",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "add sp, sp, 0x11c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "ldr r1, [sp, 0x18]",
            "ldr r3, [r0]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "ldr r3, [sp, 0x18]",
            "add r1, r3, 0x10",
            "ldr r3, [r0]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "b 0x82b20"
        ]
    },
    "rsym._ZNK5yaSSL9sslHashes7get_MD5Ev": {
        "function_address": "0x0003d48c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc9c]!"
        ]
    },
    "rsym._ZN5yaSSL3MD5C1ERKS0_": {
        "function_address": "0x0003d084",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf4c]!"
        ]
    },
    "rsym._ZNK5yaSSL9sslHashes7get_SHAEv": {
        "function_address": "0x0003f2a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x88c]!"
        ]
    },
    "rsym._ZN5yaSSL3SHAC1ERKS0_": {
        "function_address": "0x0003daf8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x854]!"
        ]
    },
    "rsym._ZN5yaSSL3MD5aSERKS0_": {
        "function_address": "0x0003d0b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf2c]!"
        ]
    },
    "rsym._ZN5yaSSL3SHAaSERKS0_": {
        "function_address": "0x0003e7d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfc4]!"
        ]
    },
    "sym.TaoCrypt::Source::next__": {
        "function_address": "0x0009d518",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "ldr r2, [0x0009d570]",
            "cmp r3, r1",
            "add r1, r3, 1",
            "push {r4, lr}",
            "str r1, [r0, 0xc]",
            "add r2, pc, r2",
            "bhs 0x9d54c",
            "ldr r2, [r0, 4]",
            "ldrb r0, [r2, r3]",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x0009d574]",
            "ldr r1, [0x0009d578]",
            "ldr r0, [0x0009d57c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_qsort": {
        "function_address": "0x0005a4f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r1, 1",
            "add fp, sp, 0x20",
            "sub sp, sp, 0x12c",
            "mov r6, r3",
            "str r2, [fp, -0x12c]",
            "bls 0x5a6a0",
            "add r3, r2, 0xe",
            "bic r3, r3, 7",
            "sub sp, sp, r3",
            "cmp r2, 4",
            "str r0, [fp, -0x128]",
            "str sp, [fp, -0x140]",
            "movne r8, 0",
            "beq 0x5ad94",
            "ldr r2, [fp, -0x12c]",
            "sub r1, r1, 1",
            "mla r2, r1, r2, r0",
            "sub r3, fp, 0x124",
            "str r2, [fp, -0x134]",
            "ldr r2, [fp, -0x12c]",
            "add r1, r3, 8",
            "str r3, [fp, -0x13c]",
            "str r1, [fp, -0x138]",
            "rsb r4, r2, 0",
            "ldr r3, [fp, -0x134]",
            "ldr r1, [fp, -0x128]",
            "rsb r0, r1, r3",
            "ldr r1, [fp, -0x12c]",
            "bl fcn.000bed20",
            "add r0, r0, 1",
            "cmp r0, 9",
            "bhi 0x5a6ac",
            "ldr r2, [fp, -0x128]",
            "ldr r1, [fp, -0x12c]",
            "add r3, r2, r1",
            "ldr r2, [fp, -0x134]",
            "cmp r2, r3",
            "movhs r7, r3",
            "addhs r3, r3, r1",
            "strhs r3, [fp, -0x130]",
            "blo 0x5a678",
            "ldr r2, [fp, -0x128]",
            "cmp r2, r7",
            "bhs 0x5a658",
            "ldr r3, [fp, -0x12c]",
            "add r5, r7, r4",
            "mov sb, r5",
            "add sl, r7, r3",
            "b 0x5a5ec",
            "rsb r3, r4, r5",
            "ldr r2, [r3]",
            "ldr r1, [sb]",
            "str r1, [r3]",
            "str r2, [sb]",
            "add sb, sb, r4",
            "ldr r1, [fp, -0x128]",
            "rsb r3, r4, sb",
            "cmp r1, r3",
            "add sl, sl, r4",
            "mov r7, r5",
            "bhs 0x5a658",
            "add r5, r5, r4",
            "mov r0, r5",
            "mov r1, r7",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ble 0x5a658",
            "cmp r8, 0",
            "moveq r3, r8",
            "rsbeq r0, r4, r5",
            "bne 0x5a5b8",
            "ldrb r2, [r7, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [r7, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, r3, r0",
            "cmp sl, r2",
            "bls 0x5a5cc",
            "ldrb r2, [r7, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [r7, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, r3, r0",
            "cmp sl, r2",
            "bhi 0x5a614",
            "b 0x5a5cc",
            "ldr r7, [fp, -0x130]",
            "ldr r3, [fp, -0x12c]",
            "ldr r1, [fp, -0x134]",
            "add r2, r7, r3",
            "rsb r3, r3, r2",
            "cmp r1, r3",
            "str r2, [fp, -0x130]",
            "bhs 0x5a598",
            "ldr r2, [fp, -0x138]",
            "ldr r1, [r2, -8]!",
            "str r2, [fp, -0x138]",
            "str r1, [fp, -0x128]",
            "ldr r3, [r2, 4]",
            "str r3, [fp, -0x134]",
            "mov r3, r2",
            "ldr r1, [fp, -0x13c]",
            "cmp r3, r1",
            "bhi 0x5a554",
            "sub sp, fp, 0x20",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [fp, -0x12c]",
            "ldr r2, [fp, -0x128]",
            "lsr r3, r0, 1",
            "cmp r0, 0x28",
            "mla sl, r1, r3, r2",
            "bls 0x5a9b0",
            "lsr r0, r0, 3",
            "mul sb, r1, r0",
            "lsl r3, sb, 1",
            "add r7, r2, r3",
            "str r3, [fp, -0x130]",
            "mov r0, r7",
            "mov r1, r2",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ada4",
            "ldr r3, [fp, -0x128]",
            "add r5, r3, sb",
            "mov r0, r5",
            "mov r1, r3",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5aae8",
            "mov r0, r7",
            "mov r1, r5",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ad48",
            "rsb ip, sb, 0",
            "add r3, sl, sb",
            "add r7, sl, ip",
            "mov r0, r3",
            "str r3, [fp, -0x144]",
            "str ip, [fp, -0x148]",
            "mov r1, r7",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ldr r3, [fp, -0x144]",
            "ldr ip, [fp, -0x148]",
            "blt 0x5ae7c",
            "str r3, [fp, -0x144]",
            "str ip, [fp, -0x148]",
            "mov r0, sl",
            "mov r1, r7",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ldr r3, [fp, -0x144]",
            "ldr ip, [fp, -0x148]",
            "blt 0x5ab90",
            "mov r0, r3",
            "str r3, [fp, -0x144]",
            "str ip, [fp, -0x148]",
            "mov r1, sl",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ldr r3, [fp, -0x144]",
            "ldr ip, [fp, -0x148]",
            "blt 0x5acfc",
            "ldr r2, [fp, -0x134]",
            "ldr r3, [fp, -0x130]",
            "str ip, [fp, -0x148]",
            "rsb r7, r3, r2",
            "mov r0, r2",
            "mov r1, r7",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ldr ip, [fp, -0x148]",
            "blt 0x5adf0",
            "ldr r1, [fp, -0x134]",
            "add sb, r1, ip",
            "mov r0, sb",
            "mov r1, r7",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ab24",
            "ldr r0, [fp, -0x134]",
            "mov r1, sb",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5acc0",
            "mov r0, sb",
            "mov r1, r5",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ae10",
            "mov r0, sl",
            "mov r1, r5",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5aa70",
            "mov r0, sb",
            "mov r1, sl",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ac68",
            "ldr r7, [fp, -0x128]",
            "ldr r5, [fp, -0x134]",
            "ldr r2, [fp, -0x12c]",
            "mov r1, sl",
            "ldr r0, [fp, -0x140]",
            "bl sym.imp.memcpy",
            "ldr sb, [fp, -0x12c]",
            "ldr sl, [fp, -0x140]",
            "mov r0, r7",
            "mov r1, sl",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "bge 0x5a898",
            "b 0x5a958",
            "add r5, r5, r4",
            "mov r1, r5",
            "mov r0, sl",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5a894",
            "cmp r7, r5",
            "bhs 0x5a960",
            "cmp r8, 0",
            "addeq r0, r7, sb",
            "moveq r3, r8",
            "beq 0x5a930",
            "ldr r3, [r7]",
            "ldr r2, [r5]",
            "str r2, [r7], sb",
            "str r3, [r5]",
            "add r5, r5, r4",
            "cmp r5, r7",
            "bhs 0x5a878",
            "ldr r2, [fp, -0x128]",
            "rsb r3, r2, r5",
            "cmp r3, 0",
            "ble 0x5a980",
            "ldr r1, [fp, -0x134]",
            "rsb r2, r7, r1",
            "cmp r2, 0",
            "strle r5, [fp, -0x134]",
            "ldrle r3, [fp, -0x138]",
            "ble 0x5a694",
            "cmp r3, r2",
            "ble 0x5aa10",
            "ldr r3, [fp, -0x138]",
            "ldr r2, [fp, -0x128]",
            "stm r3, {r2, r5}",
            "add r3, r3, 8",
            "str r7, [fp, -0x128]",
            "str r3, [fp, -0x138]",
            "b 0x5a694",
            "ldrb r2, [r7, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [r7, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, r7, r3",
            "cmp r0, r2",
            "bhi 0x5a930",
            "mov r7, r0",
            "b 0x5a8d8",
            "add r7, r7, sb",
            "b 0x5a878",
            "mov r3, r7",
            "ldr r2, [fp, -0x128]",
            "ldreq r1, [fp, -0x12c]",
            "addeq r5, r3, r4",
            "rsb r3, r2, r5",
            "addeq r7, r7, r1",
            "cmp r3, 0",
            "bgt 0x5a8f4",
            "ldr r1, [fp, -0x134]",
            "rsb r3, r7, r1",
            "cmp r3, 0",
            "ldrle r3, [fp, -0x138]",
            "strgt r7, [fp, -0x128]",
            "ldrle r2, [r3, -8]!",
            "ldrgt r3, [fp, -0x138]",
            "strle r3, [fp, -0x138]",
            "strle r2, [fp, -0x128]",
            "ldrle r1, [r3, 4]",
            "strle r1, [fp, -0x134]",
            "b 0x5a694",
            "mov r1, r2",
            "ldr r0, [fp, -0x134]",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5adc4",
            "mov r0, sl",
            "ldr r1, [fp, -0x128]",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5aa34",
            "ldr r0, [fp, -0x134]",
            "mov r1, sl",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "blt 0x5ac2c",
            "ldr r1, [fp, -0x128]",
            "ldr r2, [fp, -0x12c]",
            "ldr r3, [fp, -0x134]",
            "add r7, r1, r2",
            "add r5, r3, r4",
            "b 0x5a864",
            "ldr r2, [fp, -0x138]",
            "ldr r1, [fp, -0x134]",
            "str r7, [r2]",
            "str r1, [r2, 4]",
            "add r2, r2, 8",
            "str r5, [fp, -0x134]",
            "str r2, [fp, -0x138]",
            "mov r3, r2",
            "b 0x5a694",
            "cmp r8, 0",
            "bne 0x5ac14",
            "ldr r2, [fp, -0x12c]",
            "mov r3, r8",
            "add r0, sl, r2",
            "ldr r2, [fp, -0x128]",
            "ldrb r1, [sl, r3]",
            "ldrb ip, [r2, r3]",
            "strb ip, [sl, r3]",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "add r1, sl, r3",
            "cmp r0, r1",
            "bhi 0x5aa4c",
            "b 0x5a9f8",
            "cmp r8, 0",
            "ldreq r1, [fp, -0x12c]",
            "moveq r3, r8",
            "addeq r0, sl, r1",
            "beq 0x5aaa4",
            "ldr r2, [r5]",
            "ldr r3, [sl]",
            "ldr r7, [fp, -0x128]",
            "str r2, [sl]",
            "str r3, [r5]",
            "ldr r5, [fp, -0x134]",
            "ldr r2, [fp, -0x12c]",
            "b 0x5a864",
            "ldrb r2, [sl, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [sl, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, sl, r3",
            "cmp r0, r2",
            "bls 0x5a858",
            "ldrb r2, [sl, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [sl, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, sl, r3",
            "cmp r0, r2",
            "bhi 0x5aaa4",
            "b 0x5a858",
            "cmp r8, 0",
            "bne 0x5abfc",
            "ldr r2, [fp, -0x12c]",
            "mov r3, r8",
            "add r0, r5, r2",
            "ldr r2, [fp, -0x128]",
            "ldrb r1, [r5, r3]",
            "ldrb ip, [r2, r3]",
            "strb ip, [r5, r3]",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "add r1, r5, r3",
            "cmp r0, r1",
            "bhi 0x5ab00",
            "b 0x5a728",
            "cmp r8, 0",
            "ldreq r2, [fp, -0x12c]",
            "moveq r3, r8",
            "addeq r0, sb, r2",
            "beq 0x5ab4c",
            "ldr r3, [sb]",
            "ldr r2, [r7]",
            "str r2, [sb]",
            "str r3, [r7]",
            "b 0x5a810",
            "ldrb r2, [sb, r3]",
            "ldrb r1, [r7, r3]",
            "strb r1, [sb, r3]",
            "strb r2, [r7, r3]",
            "add r3, r3, 1",
            "add r2, sb, r3",
            "cmp r0, r2",
            "bls 0x5a810",
            "ldrb r2, [sb, r3]",
            "ldrb r1, [r7, r3]",
            "strb r1, [sb, r3]",
            "strb r2, [r7, r3]",
            "add r3, r3, 1",
            "add r2, sb, r3",
            "cmp r0, r2",
            "bhi 0x5ab4c",
            "b 0x5a810",
            "cmp r8, 0",
            "ldreq r2, [fp, -0x12c]",
            "moveq r3, r8",
            "addeq r0, sl, r2",
            "beq 0x5abb8",
            "ldr r3, [sl]",
            "ldr r2, [sl, ip]",
            "str r2, [sl]",
            "str r3, [sl, ip]",
            "b 0x5a7ac",
            "ldrb r2, [sl, r3]",
            "ldrb r1, [r7, r3]",
            "strb r1, [sl, r3]",
            "strb r2, [r7, r3]",
            "add r3, r3, 1",
            "add r2, sl, r3",
            "cmp r0, r2",
            "bls 0x5a7ac",
            "ldrb r2, [sl, r3]",
            "ldrb r1, [r7, r3]",
            "strb r1, [sl, r3]",
            "strb r2, [r7, r3]",
            "add r3, r3, 1",
            "add r2, sl, r3",
            "cmp r0, r2",
            "bhi 0x5abb8",
            "b 0x5a7ac",
            "ldr r1, [fp, -0x128]",
            "ldr r3, [r5]",
            "ldr r2, [r1]",
            "str r2, [r5]",
            "str r3, [r1]",
            "b 0x5a728",
            "ldr r1, [fp, -0x128]",
            "ldr r3, [sl]",
            "ldr r2, [r1]",
            "str r2, [sl]",
            "str r3, [r1]",
            "b 0x5a9f8",
            "cmp r8, 0",
            "bne 0x5afa4",
            "ldr r3, [fp, -0x12c]",
            "ldr r1, [fp, -0x134]",
            "add r2, sl, r3",
            "mov r3, r8",
            "ldrb r0, [sl, r3]",
            "ldrb ip, [r1, r3]",
            "strb ip, [sl, r3]",
            "strb r0, [r1, r3]",
            "add r3, r3, 1",
            "add r0, sl, r3",
            "cmp r2, r0",
            "bhi 0x5ac44",
            "b 0x5a9f8",
            "cmp r8, 0",
            "ldreq r2, [fp, -0x12c]",
            "moveq r3, r8",
            "addeq r0, sl, r2",
            "beq 0x5ac9c",
            "ldr r2, [sb]",
            "ldr r3, [sl]",
            "ldr r7, [fp, -0x128]",
            "str r2, [sl]",
            "str r3, [sb]",
            "ldr r5, [fp, -0x134]",
            "ldr r2, [fp, -0x12c]",
            "b 0x5a864",
            "ldrb r2, [sl, r3]",
            "ldrb r1, [sb, r3]",
            "strb r1, [sl, r3]",
            "strb r2, [sb, r3]",
            "add r3, r3, 1",
            "add r2, sl, r3",
            "cmp r0, r2",
            "bhi 0x5ac9c",
            "b 0x5a858",
            "cmp r8, 0",
            "bne 0x5af8c",
            "ldr r2, [fp, -0x12c]",
            "mov r3, r8",
            "add r0, sb, r2",
            "ldr r2, [fp, -0x134]",
            "ldrb r1, [sb, r3]",
            "ldrb ip, [r2, r3]",
            "strb ip, [sb, r3]",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "add r1, sb, r3",
            "cmp r0, r1",
            "bhi 0x5acd8",
            "b 0x5a810",
            "cmp r8, 0",
            "ldreq r1, [fp, -0x12c]",
            "moveq r2, r8",
            "addeq lr, sl, r1",
            "beq 0x5ad24",
            "ldr r3, [sl]",
            "ldr r2, [sl, sb]",
            "str r2, [sl]",
            "str r3, [sl, sb]",
            "b 0x5a7ac",
            "ldrb r1, [sl, r2]",
            "ldrb r0, [r3, r2]",
            "strb r0, [sl, r2]",
            "strb r1, [r3, r2]",
            "add r2, r2, 1",
            "add r1, sl, r2",
            "cmp lr, r1",
            "bhi 0x5ad24",
            "b 0x5a7ac",
            "cmp r8, 0",
            "ldreq r3, [fp, -0x12c]",
            "addeq r0, r5, r3",
            "moveq r3, r8",
            "beq 0x5ad70",
            "ldr r3, [r5]",
            "ldr r2, [r7]",
            "str r2, [r5]",
            "str r3, [r7]",
            "b 0x5a728",
            "ldrb r2, [r5, r3]",
            "ldrb r1, [r7, r3]",
            "strb r1, [r5, r3]",
            "strb r2, [r7, r3]",
            "add r3, r3, 1",
            "add r2, r5, r3",
            "cmp r0, r2",
            "bhi 0x5ad70",
            "b 0x5a728",
            "tst r0, 3",
            "movne r8, 0",
            "moveq r8, 1",
            "b 0x5a52c",
            "cmp r8, 0",
            "beq 0x5af24",
            "ldr r1, [fp, -0x128]",
            "ldr r3, [r7]",
            "ldr r2, [r1]",
            "str r2, [r7]",
            "str r3, [r1]",
            "b 0x5a6f0",
            "cmp r8, 0",
            "beq 0x5aee8",
            "ldr r1, [fp, -0x134]",
            "ldr r3, [r1]",
            "ldr r1, [fp, -0x128]",
            "ldr r2, [r1]",
            "ldr r1, [fp, -0x134]",
            "str r2, [r1]",
            "ldr r2, [fp, -0x128]",
            "str r3, [r2]",
            "b 0x5a9c8",
            "cmp r8, 0",
            "beq 0x5af58",
            "ldr r1, [fp, -0x134]",
            "ldr r2, [r7]",
            "ldr r3, [r1]",
            "str r2, [r1]",
            "str r3, [r7]",
            "b 0x5a7d8",
            "cmp r8, 0",
            "ldreq r3, [fp, -0x12c]",
            "addeq r0, sb, r3",
            "moveq r3, r8",
            "beq 0x5ae38",
            "ldr r3, [sb]",
            "ldr r2, [r5]",
            "str r2, [sb]",
            "str r3, [r5]",
            "b 0x5a828",
            "ldrb r2, [sb, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [sb, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, sb, r3",
            "cmp r0, r2",
            "bls 0x5a828",
            "ldrb r2, [sb, r3]",
            "ldrb r1, [r5, r3]",
            "strb r1, [sb, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r2, sb, r3",
            "cmp r0, r2",
            "bhi 0x5ae38",
            "b 0x5a828",
            "cmp r8, 0",
            "ldreq r1, [fp, -0x12c]",
            "addeq lr, r3, r1",
            "moveq r1, r8",
            "beq 0x5aea4",
            "ldr r2, [sl, sb]",
            "ldr r1, [sl, ip]",
            "str r1, [sl, sb]",
            "str r2, [sl, ip]",
            "b 0x5a75c",
            "ldrb r2, [r3, r1]",
            "ldrb r0, [r7, r1]",
            "strb r0, [r3, r1]",
            "strb r2, [r7, r1]",
            "add r1, r1, 1",
            "add r2, r3, r1",
            "cmp lr, r2",
            "bls 0x5a75c",
            "ldrb r2, [r3, r1]",
            "ldrb r0, [r7, r1]",
            "strb r0, [r3, r1]",
            "strb r2, [r7, r1]",
            "add r1, r1, 1",
            "add r2, r3, r1",
            "cmp lr, r2",
            "bhi 0x5aea4",
            "b 0x5a75c",
            "ldr r3, [fp, -0x134]",
            "ldr r1, [fp, -0x12c]",
            "ldr r0, [fp, -0x128]",
            "add r2, r3, r1",
            "ldr r1, [fp, -0x134]",
            "mov r3, r8",
            "ldrb ip, [r1, r3]",
            "ldrb lr, [r0, r3]",
            "strb lr, [r1, r3]",
            "strb ip, [r0, r3]",
            "add r3, r3, 1",
            "add ip, r1, r3",
            "cmp r2, ip",
            "bhi 0x5af00",
            "b 0x5a9c8",
            "ldr r2, [fp, -0x12c]",
            "mov r3, r8",
            "add r0, r7, r2",
            "ldr r2, [fp, -0x128]",
            "ldrb r1, [r7, r3]",
            "ldrb ip, [r2, r3]",
            "strb ip, [r7, r3]",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "add r1, r7, r3",
            "cmp r0, r1",
            "bhi 0x5af34",
            "b 0x5a6f0",
            "ldr r3, [fp, -0x12c]",
            "ldr r2, [fp, -0x134]",
            "add r0, r2, r3",
            "mov r3, r8",
            "ldrb r1, [r2, r3]",
            "ldrb lr, [r7, r3]",
            "strb lr, [r2, r3]",
            "strb r1, [r7, r3]",
            "add r3, r3, 1",
            "add r1, r2, r3",
            "cmp r0, r1",
            "bhi 0x5af68",
            "b 0x5a7d8",
            "ldr r1, [fp, -0x134]",
            "ldr r3, [sb]",
            "ldr r2, [r1]",
            "str r2, [sb]",
            "str r3, [r1]",
            "b 0x5a810",
            "ldr r1, [fp, -0x134]",
            "ldr r3, [sl]",
            "ldr r2, [r1]",
            "str r2, [sl]",
            "str r3, [r1]",
            "b 0x5a9f8"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::Final_unsigned_char_": {
        "function_address": "0x000baeb0",
        "instructions": [
            "ldrb r3, [r0, 0xc]",
            "push {r4, r5, r6, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "mov r6, r1",
            "bleq rsym._ZN8TaoCrypt4HMACINS_3MD5EE12KeyInnerHashEv",
            "add r5, r4, 0x10",
            "ldr r1, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r0, r5",
            "ldr r1, [r4, 4]",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r2, 0x10",
            "ldr r1, [r4, 8]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_pthread_getprio": {
        "function_address": "0x0004d444",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "mov r1, sp",
            "add r2, sp, 4",
            "bl sym.imp.pthread_getschedparam",
            "cmp r0, 0",
            "mvnne r0, 0",
            "ldreq r0, [sp, 4]",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_getschedparam": {
        "function_address": "0x0003f6a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5e4]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_unsigned_char__unsigned_char_": {
        "function_address": "0x00089c78",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007d910": {
        "function_address": "0x0007d910",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007d9a4]",
            "ldr r3, [0x0007d9a8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x170",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007d9ac]",
            "mov r1, 8",
            "ldr r2, [r4, r2]",
            "add r6, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, r1",
            "add r7, r0, 0x10",
            "add r4, r0, 0xc8",
            "add ip, r0, 0xd8",
            "str r6, [r0, 0xc]",
            "mov r6, 0",
            "str r7, [r0, 8]",
            "str r6, [r0, 0x30]",
            "str r1, [r0, 0xbc]",
            "str r4, [r0, 0xc0]",
            "str ip, [r0, 0xc4]",
            "str r3, [r0, 0xec]",
            "str r2, [r0, 0xb8]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0xe8]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::SHA512::SHA512_TaoCrypt::SHA512_const_": {
        "function_address": "0x000b3964",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r6, r4, 0x10",
            "mov r1, 8",
            "mov r2, 0x80",
            "bl rsym._ZN8TaoCrypt19HASH64withTransformC2Ejj",
            "add lr, r5, 0x10",
            "mov ip, r6",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r6, [0x000b39e4]",
            "ldm lr!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b39e8]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r6, pc, r6",
            "ldr r7, [r6, r7]",
            "ldmib r5, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r4, {r1, r2, r3}",
            "str r7, [r4]",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r1, r5, 0x50",
            "add r0, r4, 0x50",
            "mov r2, 0x80",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.my_dir": {
        "function_address": "0x0005a200",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x450",
            "sub sp, sp, 0xc",
            "str r0, [sp, 0x1c]",
            "add fp, sp, 0x248",
            "str r1, [sp, 0xc]",
            "mov r0, fp",
            "ldr r1, [sp, 0x1c]",
            "bl rsym.directory_file_name",
            "bl sym.imp.opendir",
            "ldr r2, [0x0005a4e8]",
            "subs r4, r0, 0",
            "add r2, pc, r2",
            "str r2, [sp, 0x14]",
            "beq 0x5a4bc",
            "mov r0, 0x40",
            "ldr r1, [sp, 0xc]",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [sp, 0x10]",
            "beq 0x5a4d8",
            "add r5, r0, 8",
            "mov ip, 0x2000",
            "mov r0, r5",
            "mov r1, 8",
            "mov r2, 0",
            "mov r3, 0x400",
            "str ip, [sp]",
            "bl rsym.init_dynamic_array2",
            "cmp r0, 0",
            "bne 0x5a484",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0x8000",
            "add r6, r2, 0x20",
            "mov r0, r6",
            "mov r2, r1",
            "bl rsym.init_alloc_root",
            "mov r0, fp",
            "bl rsym.strend",
            "add r7, sp, 0x38",
            "sub r7, r7, 0xc",
            "str r0, [sp, 0x20]",
            "str r7, [sp, 0x454]",
            "bl sym.imp.__errno_location",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [sp, 0x10]",
            "tst r3, 0x400",
            "mov r8, r0",
            "str r2, [sp, 0x18]",
            "bne 0x5a3bc",
            "add sl, sp, 0x450",
            "add sb, sp, 0x440",
            "add sl, sl, 4",
            "add sb, sb, 0xc",
            "mov r2, sl",
            "mov r1, r7",
            "mov r0, r4",
            "bl sym.imp.readdir64_r",
            "mov fp, r0",
            "cmp fp, 0",
            "mov r0, r6",
            "str fp, [r8]",
            "bne 0x5a37c",
            "ldr r3, [sp, 0x454]",
            "cmp r3, 0",
            "add r1, r3, 0x13",
            "beq 0x5a37c",
            "bl rsym.strdup_root",
            "mov r3, r0",
            "cmp r3, 0",
            "mov r1, sb",
            "mov r0, r5",
            "str r3, [sp, 0x44c]",
            "beq 0x5a338",
            "str fp, [sp, 0x450]",
            "bl rsym.insert_dynamic",
            "cmp r0, 0",
            "beq 0x5a2d8",
            "bl rsym._my_thread_var",
            "ldr r3, [r8]",
            "mov r5, r0",
            "str r3, [r5]",
            "mov r0, r4",
            "bl sym.imp.closedir",
            "ldr r0, [sp, 0x18]",
            "bl rsym.my_dirend",
            "ldr r2, [sp, 0xc]",
            "ands r3, r2, 0x18",
            "bne 0x5a4a0",
            "str r3, [sp, 0x18]",
            "ldr r0, [sp, 0x18]",
            "add sp, sp, 0x5c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.closedir",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [sp, 0xc]",
            "ldr r0, [r2, 8]",
            "tst r3, 0x200",
            "str r0, [r2]",
            "ldr r1, [r5, 4]",
            "str r1, [r2, 4]",
            "bne 0x5a368",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [0x0005a4ec]",
            "add r3, r2, r3",
            "mov r2, 8",
            "bl rsym.my_qsort",
            "b 0x5a368",
            "add r3, sp, 0x440",
            "add sl, sp, 0x450",
            "add r3, r3, 0xc",
            "add sl, sl, 4",
            "str r3, [sp, 0x24]",
            "mov r2, sl",
            "mov r1, r7",
            "mov r0, r4",
            "bl sym.imp.readdir64_r",
            "mov sb, r0",
            "cmp sb, 0",
            "mov r0, r6",
            "str sb, [r8]",
            "bne 0x5a37c",
            "ldr r3, [sp, 0x454]",
            "cmp r3, 0",
            "add r1, r3, 0x13",
            "beq 0x5a37c",
            "bl rsym.strdup_root",
            "mov r3, r0",
            "cmp r3, 0",
            "mov r1, 0x68",
            "mov r0, r6",
            "str r3, [sp, 0x44c]",
            "beq 0x5a338",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "mov r1, sb",
            "mov r2, 0x68",
            "str r0, [sp, 0x450]",
            "beq 0x5a338",
            "bl sym.imp.memset",
            "ldr r1, [sp, 0x454]",
            "ldr r0, [sp, 0x20]",
            "add r1, r1, 0x13",
            "bl sym.imp.strcpy",
            "ldr r1, [sp, 0x450]",
            "mov r0, fp",
            "ldr r2, [sp, 0xc]",
            "bl rsym.my_stat",
            "ldr r3, [sp, 0x450]",
            "mov r0, r5",
            "ldr r3, [r3, 0x10]",
            "ldr r1, [sp, 0x24]",
            "tst r3, 0x100",
            "beq 0x5a3d0",
            "bl rsym.insert_dynamic",
            "cmp r0, 0",
            "beq 0x5a3d0",
            "b 0x5a338",
            "ldr r0, [sp, 0x10]",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [sp, 0x18]",
            "bl sym.imp.__errno_location",
            "mov r8, r0",
            "b 0x5a338",
            "ldr r3, [r5]",
            "ldr r2, [sp, 0x1c]",
            "mov r0, 0xc",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mov r3, 0",
            "b 0x5a364",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "str r4, [sp, 0x18]",
            "str r3, [r5]",
            "b 0x5a350",
            "str r0, [sp, 0x18]",
            "bl sym.imp.__errno_location",
            "mov r8, r0",
            "b 0x5a338"
        ]
    },
    "rsym.directory_file_name": {
        "function_address": "0x000402f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdac]!"
        ]
    },
    "rsym.init_dynamic_array2": {
        "function_address": "0x0003eaa0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xde4]!"
        ]
    },
    "sym.imp.readdir64_r": {
        "function_address": "0x0003d33c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd7c]!"
        ]
    },
    "rsym.insert_dynamic": {
        "function_address": "0x0003e824",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf8c]!"
        ]
    },
    "rsym.my_dirend": {
        "function_address": "0x00040264",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe0c]!"
        ]
    },
    "rsym.my_qsort": {
        "function_address": "0x0003eae8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdb4]!"
        ]
    },
    "rsym.my_stat": {
        "function_address": "0x0003d8dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9bc]!"
        ]
    },
    "sym.yaSSL::SSL_CTX::SetDH_yaSSL::DH_const_": {
        "function_address": "0x00092b30",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "add r0, r0, 0xa0",
            "ldr r1, [r1]",
            "bl rsym._ZN5yaSSL7IntegeraSERKS0_",
            "ldr r1, [r5, 4]",
            "add r0, r4, 0xa4",
            "bl rsym._ZN5yaSSL7IntegeraSERKS0_",
            "mov r0, 1",
            "strb r0, [r4, 0xa8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7IntegeraSERKS0_": {
        "function_address": "0x0003fdfc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfc]!"
        ]
    },
    "sym.void_mySTL::destroy_TaoCrypt::WindowSlider__TaoCrypt::WindowSlider__TaoCrypt::WindowSlider_": {
        "function_address": "0x00099e08",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "beq 0x99e64",
            "ldr r5, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 4]",
            "ldr r2, [r4], 0x30",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "cmp r6, r4",
            "bne 0x99e1c",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Mutex::Lock::Lock__": {
        "function_address": "0x00084bb0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::set_random_unsigned_char_const__yaSSL::ConnectionEnd_": {
        "function_address": "0x00092668",
        "instructions": [
            "cmp r2, 1",
            "push {r4, lr}",
            "mov r4, r1",
            "beq 0x92698",
            "add r0, r0, 0x68",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r4",
            "add r0, r0, 0x54",
            "mov r2, 0x20",
            "bl sym.imp.memcpy",
            "pop {r4, lr}",
            "bx lr",
            "add r0, r0, 0x68",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r4",
            "mov r2, 0x20",
            "add r0, r0, 0x34",
            "bl sym.imp.memcpy",
            "b 0x92690"
        ]
    },
    "sym.load_defaults": {
        "function_address": "0x0004f904",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [0x0004f930]",
            "ldr lr, [0x0004f934]",
            "add ip, pc, ip",
            "sub sp, sp, 0xc",
            "add lr, ip, lr",
            "str lr, [sp]",
            "bl rsym.my_load_defaults",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym.my_load_defaults": {
        "function_address": "0x0003fcac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1dc]!"
        ]
    },
    "sym.yaSSL::HandShakeHeader::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008d7d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r7, r0",
            "mov r4, r2",
            "mov r0, r2",
            "mov r5, r1",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL3SSL11verifyStateERKNS_15HandShakeHeaderE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x8d80c",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL10getFactoryEv",
            "bl rsym._ZNK5yaSSL10sslFactory12getHandShakeEv",
            "ldr r1, [r0, 4]",
            "ldr r3, [r0]",
            "ldr r0, [r7, 4]",
            "cmp r3, r1",
            "bne 0x8d83c",
            "b 0x8d888",
            "add r3, r3, 8",
            "cmp r1, r3",
            "beq 0x8d888",
            "ldr r2, [r3]",
            "cmp r0, r2",
            "bne 0x8d830",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x8d88c",
            "add r0, r7, 8",
            "bl rsym._ZN5yaSSL7c24to32EPKh",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "cmp r7, r0",
            "bls 0x8d8a4",
            "mov r0, r4",
            "mov r1, 0x6d",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8d898",
            "mov r6, 0",
            "mov r0, r4",
            "mov r1, 0x67",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13HandShakeBaseEEEvPT_",
            "b 0x8d804",
            "mov r2, r7",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL13hashHandShakeERNS_3SSLERKNS_12input_bufferEj",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym._ZN5yaSSLrsERNS_12input_bufferERNS_13HandShakeBaseE",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r6]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13HandShakeBaseEEEvPT_",
            "b 0x8d804"
        ]
    },
    "rsym._ZN5yaSSL3SSL11verifyStateERKNS_15HandShakeHeaderE": {
        "function_address": "0x0003ea7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdfc]!"
        ]
    },
    "rsym._ZNK5yaSSL10sslFactory12getHandShakeEv": {
        "function_address": "0x0003fbf8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x254]!"
        ]
    },
    "rsym._ZN5yaSSL7c24to32EPKh": {
        "function_address": "0x0003cc4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x21c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_13HandShakeBaseEEEvPT_": {
        "function_address": "0x0003f7f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x504]!"
        ]
    },
    "rsym._ZN5yaSSL13hashHandShakeERNS_3SSLERKNS_12input_bufferEj": {
        "function_address": "0x0003dd74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6ac]!"
        ]
    },
    "rsym._ZN5yaSSLrsERNS_12input_bufferERNS_13HandShakeBaseE": {
        "function_address": "0x0003de70",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x604]!"
        ]
    },
    "sym.yaSSL::Alert::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008d4f4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x34",
            "mov r0, r2",
            "mov r4, r2",
            "mov r6, r1",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x8d538",
            "ldr r3, [r5, 4]",
            "cmp r3, 2",
            "beq 0x8d644",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r5]",
            "mov r0, r5",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r7, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "rsb r3, r7, r0",
            "mov r0, r4",
            "add r8, r8, r3",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "bne 0x8d618",
            "mov ip, 0x15",
            "add sb, sp, 0x1c",
            "str ip, [sp]",
            "mov r2, r8",
            "mov ip, 1",
            "mov r0, r4",
            "mov r1, sb",
            "mov r3, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_digestEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "add sl, sp, 8",
            "mov r2, r0",
            "mov r1, sl",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "beq 0x8d678",
            "mov r0, sl",
            "mov r1, sb",
            "mov r2, r8",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "beq 0x8d520",
            "mov r0, r4",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8d52c",
            "add sb, sp, 0x1c",
            "mov ip, 0x15",
            "str ip, [sp]",
            "mov r2, r8",
            "mov ip, 1",
            "mov r0, r4",
            "mov r1, sb",
            "mov r3, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "b 0x8d5a4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useRecordEv",
            "mov r6, 0",
            "str r6, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States12useHandShakeEv",
            "ldr r1, [r5, 8]",
            "str r6, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8d52c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "subs fp, r0, 0",
            "bne 0x8d6cc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrh r3, [r0, 0x2a]",
            "rsb fp, fp, r3",
            "rsb fp, r7, fp",
            "rsb fp, r8, fp",
            "cmp fp, 0",
            "ble 0x8d5f0",
            "mov r7, 0",
            "add r7, r7, 1",
            "mov r0, r6",
            "ldr r1, [0x0008d6f0]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "cmp fp, r7",
            "bgt 0x8d6b0",
            "b 0x8d5f0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov fp, r0",
            "b 0x8d688"
        ]
    },
    "rsym._ZN5yaSSL6States9useRecordEv": {
        "function_address": "0x0004087c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9fc]!"
        ]
    },
    "sym.yaSSL::Finished::Finished__": {
        "function_address": "0x0008a9bc",
        "instructions": [
            "ldr r3, [0x0008a9f0]",
            "ldr r2, [0x0008a9f4]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "mov r1, 0x24",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_SESSION_set_timeout": {
        "function_address": "0x00085ea0",
        "instructions": [
            "subs r3, r0, 0",
            "push {r4, lr}",
            "moveq r0, r3",
            "beq 0x85eb8",
            "bl rsym._ZN5yaSSL11SSL_SESSION10SetTimeOutEj",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSION10SetTimeOutEj": {
        "function_address": "0x0003df9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x53c]!"
        ]
    },
    "sym.my_connect": {
        "function_address": "0x0007662c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "subs r8, r3, 0",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r7, r1",
            "mov r6, r2",
            "beq 0x76718",
            "mov r1, 3",
            "mov r2, 0",
            "bl sym.imp.fcntl",
            "mov r5, r0",
            "mov r1, 4",
            "orr r2, r5, 0x800",
            "mov r0, r4",
            "bl sym.imp.fcntl",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r4",
            "bl sym.imp.connect",
            "mov r6, r0",
            "bl sym.imp.__errno_location",
            "ldr sl, [r0]",
            "mov r7, r0",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, 4",
            "bl sym.imp.fcntl",
            "cmp sl, 0x73",
            "cmpne r6, 0",
            "strne sl, [r7]",
            "mvnne r0, 0",
            "bne 0x766b8",
            "cmp r6, 0",
            "bne 0x766c4",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "add r8, r8, r8, lsl 2",
            "add r8, r8, r8, lsl 2",
            "add r8, r8, r8, lsl 2",
            "mov r3, 3",
            "lsl r2, r8, 3",
            "mov r0, sp",
            "mov r1, 1",
            "strh r3, [sp, 4]",
            "str r4, [sp]",
            "bl sym.imp.poll",
            "cmp r0, 0",
            "moveq r3, 4",
            "streq r3, [r7]",
            "mvneq r0, 0",
            "beq 0x766b8",
            "blt 0x76710",
            "ldrh r3, [sp, 6]",
            "tst r3, 3",
            "bne 0x766b4",
            "mvn r0, 0",
            "b 0x766b8",
            "bl sym.imp.connect",
            "b 0x766b8"
        ]
    },
    "sym.imp.fcntl": {
        "function_address": "0x0003fec8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x74]!"
        ]
    },
    "sym.imp.connect": {
        "function_address": "0x0003ce8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x9c]!"
        ]
    },
    "sym.my_pthread_attr_setprio": {
        "function_address": "0x0004d470",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "str r1, [sp, 4]",
            "add r1, sp, 4",
            "bl sym.imp.pthread_attr_setschedparam",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.pthread_attr_setschedparam": {
        "function_address": "0x0003dc00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7a4]!"
        ]
    },
    "sym.yaSSL::CertificateRequest::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008c6a4",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r2",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto15use_certManagerEv",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL11CertManager8get_certEv",
            "cmp r0, 0",
            "beq 0x8c6d8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "cmp r0, 0",
            "movne r0, r4",
            "blne rsym._ZN5yaSSL11CertManager13setSendVerifyEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11CertManager13setSendVerifyEv": {
        "function_address": "0x0003f484",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x74c]!"
        ]
    },
    "sym.mysql_stmt_result_metadata": {
        "function_address": "0x000448cc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 0xa8]",
            "ldr r5, [0x00044950]",
            "cmp r4, 0",
            "mov r6, r0",
            "add r5, pc, r5",
            "bne 0x448f4",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, 0x58",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "beq 0x44930",
            "ldr r3, [r6, 0x2c]",
            "mov r2, 1",
            "ldr r3, [r3, 0x3b0]",
            "strb r2, [r4, 0x50]",
            "str r3, [r4, 0x1c]",
            "ldr r3, [r6, 0x38]",
            "str r3, [r4, 8]",
            "ldr r3, [r6, 0xa8]",
            "str r3, [r4, 0x48]",
            "b 0x448e8",
            "ldr r3, [0x00044954]",
            "mov r0, r6",
            "ldr r3, [r5, r3]",
            "ldr r1, [0x00044958]",
            "ldr r2, [r3]",
            "mov r3, r4",
            "bl rsym.set_stmt_error",
            "b 0x448e8"
        ]
    },
    "fcn.0007f10c": {
        "function_address": "0x0007f10c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "add r7, r0, 0x10",
            "mov sl, r0",
            "ldr r8, [r8]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, 0",
            "ldr r6, [r6]",
            "str r3, [sl, 0x2c]",
            "str r3, [sl, 0x24]",
            "str r3, [sl, 0x28]",
            "ldr r1, [r5]",
            "str r8, [sl, 0x20]",
            "str sl, [r4]",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r0, [r4]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r5, [r4]",
            "mov r6, r0",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x24]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x28]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldr r3, [r4]",
            "str r0, [r5, 0x2c]",
            "ldr r1, [r3, 0x20]",
            "mov r0, r3",
            "ldr r2, [r3, 0x28]",
            "ldr r3, [r3, 0x24]",
            "bl rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.delete_dynamic_element": {
        "function_address": "0x00050344",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0, 0x10]",
            "ldr r2, [r0]",
            "mov ip, r0",
            "ldr lr, [ip, 4]",
            "mla r0, r3, r1, r2",
            "sub lr, lr, 1",
            "rsb r2, r1, lr",
            "str lr, [ip, 4]",
            "mul r2, r3, r2",
            "add r1, r0, r3",
            "bl sym.imp.memmove",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::One__": {
        "function_address": "0x000a91c0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000a920c]",
            "ldr r6, [0x000a9210]",
            "add r4, pc, r4",
            "ldr r5, [r4, r6]",
            "cmp r5, 0",
            "beq 0xa91e8",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN8TaoCrypt5new_tE",
            "mov r1, 1",
            "mov r5, r0",
            "mov r2, 2",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "str r5, [r4, r6]",
            "b 0xa91dc"
        ]
    },
    "sym._init": {
        "function_address": "0x0003cb2c",
        "instructions": [
            "push {r4, lr}",
            "bl entry0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "r15": {
        "function_address": "0x00040a2c",
        "instructions": [
            "ldr r3, [0x00040a50]",
            "ldr r2, [0x00040a54]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "cmp r2, 0",
            "blne loc.imp.__gmon_start__",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_CTX_new": {
        "function_address": "0x00086644",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r1, 0",
            "mov r0, 0x110",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r5",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL7SSL_CTXC1EPNS_10SSL_METHODE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTXC1EPNS_10SSL_METHODE": {
        "function_address": "0x0003ef38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xad4]!"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::Digest_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::Digest_::iterator__mySTL::list_yaSSL::Digest_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089afc",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89b2c",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89b14",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007f9c8": {
        "function_address": "0x0007f9c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fa24]",
            "ldr r3, [0x0007fa28]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RSA7RSAImplEEEvPT_",
            "ldr r3, [0x0007fa2c]",
            "ldr r1, [0x0007fa30]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007fa34]",
            "add r2, r3, 8",
            "ldr r3, [0x0007fa38]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0008f2ec": {
        "function_address": "0x0008f2ec",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f344]",
            "ldr r3, [0x0008f348]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x2c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008f34c]",
            "ldr r0, [0x0008f350]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f354]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f358]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mysql_select_db": {
        "function_address": "0x000741a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "sub sp, sp, 0x10",
            "mov r0, r1",
            "mov r5, r1",
            "bl sym.imp.strlen",
            "mov r3, 0",
            "str r0, [sp, 4]",
            "str r5, [sp]",
            "str r3, [sp, 8]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "ldr ip, [r4, 0x3b0]",
            "mov r0, r4",
            "mov r1, 2",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "bne 0x74210",
            "ldr r0, [r4, 0x28c]",
            "bl rsym.my_no_flags_free",
            "mov r0, r5",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "str r0, [r4, 0x28c]",
            "mov r0, r6",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::CertDecoder.ValidateSelfSignature__": {
        "function_address": "0x0009d344",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0xc]",
            "sub sp, sp, 0x18",
            "cmp r3, 0",
            "mov r4, r0",
            "ldr r5, [r0, 8]",
            "str r3, [sp, 4]",
            "bne 0x9d3c0",
            "mov r0, r3",
            "ldr r2, [sp, 4]",
            "mov r1, r5",
            "str r3, [sp, 8]",
            "mov r6, 0",
            "bl sym.imp.memcpy",
            "add r1, sp, 4",
            "mov r0, r4",
            "str r6, [sp, 0x10]",
            "str r6, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt11CertDecoder16ConfirmSignatureERNS_6SourceE",
            "ldr r4, [sp, 8]",
            "mov r5, r0",
            "mov r1, r6",
            "ldr r2, [sp, 4]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r3",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x9d364"
        ]
    },
    "sym.mySTL::list_yaSSL::input_buffer_::push_back_yaSSL::input_buffer_": {
        "function_address": "0x000881a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.00095050": {
        "function_address": "0x00095050",
        "instructions": [
            "mov r3, 0x1f4",
            "str r3, [r0, 0x58]",
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r2, [r0, 0x5c]",
            "mov r4, r0",
            "str r3, [r0, 0x60]",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov ip, r4",
            "add r6, r0, 0x74",
            "mov lr, r0",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r6, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r6, r4, 0x20",
            "mov ip, r6",
            "add lr, lr, 4",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrh r0, [r0, 0x2c]",
            "strh r0, [r4, 0x50]",
            "bl rsym._ZN5yaSSL11lowResTimerEv",
            "str r0, [r4, 0x54]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager12get_peerX509Ev",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL11SSL_SESSION8CopyX509EPNS_4X509E",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11lowResTimerEv": {
        "function_address": "0x0003cf94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfec]!"
        ]
    },
    "sym.yaSSL::DSS::DSS_unsigned_char_const__unsigned_int__bool_": {
        "function_address": "0x0008000c",
        "instructions": [
            "ldr ip, [0x000800c8]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr lr, [0x000800cc]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str lr, [r0]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, 0x90",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x80",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r7, 0",
            "str r8, [r4, 4]",
            "bne 0x800b4",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3DSS7DSSImpl10SetPrivateEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3DSS7DSSImpl9SetPublicEPKhj",
            "b 0x800a8"
        ]
    },
    "fcn.000b0b9c": {
        "function_address": "0x000b0b9c",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add ip, r5, 0x10",
            "add sl, r6, 0x10",
            "mov fp, ip",
            "ldm sl!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "stm fp!, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "mov ip, sb",
            "ldr r8, [0x000b0c28]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b0c2c]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldr r0, [sl]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "str r0, [fp]",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::Certificate_const_": {
        "function_address": "0x0008d150",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "sub sp, sp, 0xc",
            "mov r0, r1",
            "mov r7, r1",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "add r5, sp, 4",
            "mov r1, r5",
            "mov r6, r0",
            "sub r0, r0, 3",
            "bl rsym._ZN5yaSSL7c32to24EjRA3_h",
            "sub r6, r6, 6",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, 3",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL7c32to24EjRA3_h",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, 3",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11Certificate10get_bufferEv",
            "mov r2, r6",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL11Certificate10get_bufferEv": {
        "function_address": "0x0003fe14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xec]!"
        ]
    },
    "method.TaoCrypt::SHA256.operator_TaoCrypt::SHA256_const_": {
        "function_address": "0x000b3c90",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt6SHA256C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt6SHA2564SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA256C1ERKS0_": {
        "function_address": "0x0003f070",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa04]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA2564SwapERS0_": {
        "function_address": "0x0003ffe8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfb4]!"
        ]
    },
    "sym.TaoCrypt::SHA512::Transform__": {
        "function_address": "0x000b8598",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x740",
            "sub sp, sp, 4",
            "str r0, [sp, 0x74]",
            "add r0, sp, 0x700",
            "str r0, [sp, 0x47c]",
            "ldr lr, [sp, 0x74]",
            "ldr ip, [sp, 0x47c]",
            "str r1, [sp, 0x70]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r2, sp, 0x720",
            "ldm r2, {r1, r2}",
            "str r1, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "ldr r2, [sp, 0x728]",
            "ldr r3, [sp, 0x72c]",
            "ldr sb, [sp, 0x738]",
            "ldr sl, [sp, 0x73c]",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "ldr r2, [0x000b3fa8]",
            "ldr r3, [0x000b3fac]",
            "add r2, pc, r2",
            "add r3, r2, r3",
            "add r3, r3, 0x58",
            "str r3, [sp, 0x6c]",
            "mov r5, 0",
            "add r4, sp, 0x730",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "add r1, sp, 0x38",
            "ldm r1, {r0, r1}",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "str sb, [sp, 0x48]",
            "str sl, [sp, 0x4c]",
            "mov sl, r0",
            "mov ip, r5",
            "mov r0, r7",
            "mov r7, r3",
            "ldr r3, [sp, 0x6c]",
            "cmp ip, 0",
            "mov fp, r1",
            "ldm r3, {r2, r3}",
            "mov r1, r8",
            "str r5, [sp, 0x68]",
            "mov r8, r4",
            "str r2, [sp, 0x20]",
            "str r3, [sp, 0x24]",
            "bne 0xb6e18",
            "b 0xb3fb0",
            "ldr r3, [sp, 0x70]",
            "ldm r3, {r2, r3}",
            "str r2, [sp, 0x60]",
            "str r3, [sp, 0x64]",
            "str r2, [sp, 0x680]",
            "str r3, [sp, 0x684]",
            "lsr r2, r7, 0x12",
            "lsr r3, r7, 0xe",
            "add r5, sp, 0x700",
            "ldm r5, {r4, r5}",
            "orr r2, r2, r8, lsl 14",
            "str r4, [sp, 0x28]",
            "str r5, [sp, 0x2c]",
            "orr r3, r3, r8, lsl 18",
            "str r2, [sp, 0x78]",
            "str r3, [sp, 0x80]",
            "ldr r5, [sp, 0x28]",
            "lsr r2, r8, 0xe",
            "lsl r3, r7, 0x17",
            "orr r2, r2, r7, lsl 18",
            "orr r3, r3, r8, lsr 9",
            "str r2, [sp, 0x84]",
            "str r3, [sp, 0x88]",
            "lsl r2, r4, 0x1e",
            "lsr r3, r5, 0x1c",
            "eor r4, sl, r0",
            "eor r5, fp, r1",
            "str r4, [sp, 0x58]",
            "str r5, [sp, 0x5c]",
            "lsr ip, r8, 0x12",
            "ldr r5, [sp, 0x2c]",
            "orr ip, ip, r7, lsl 14",
            "ldr r6, [sp, 0x2c]",
            "str ip, [sp, 0x7c]",
            "orr r5, r2, r5, lsr 2",
            "orr r6, r3, r6, lsl 4",
            "add r1, sp, 0x78",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x80",
            "ldm r3, {r2, r3}",
            "str r5, [sp, 0x90]",
            "eor r1, r1, r3",
            "ldr r5, [sp, 0x28]",
            "ldr r3, [sp, 0x2c]",
            "eor r0, r0, r2",
            "lsl ip, r8, 0x17",
            "str r0, [sp, 0x30]",
            "str r1, [sp, 0x34]",
            "orr ip, ip, r7, lsr 9",
            "lsl r0, r3, 0x1e",
            "lsr r1, r3, 0x1c",
            "lsl r2, r5, 0x19",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "str r6, [sp, 0x98]",
            "add r6, sp, 0x20",
            "ldm r6, {r5, r6}",
            "adds r3, r3, r5",
            "str ip, [sp, 0x8c]",
            "adc r4, r4, r6",
            "add r6, sp, 0x58",
            "ldm r6, {r5, r6}",
            "and r5, r5, r7",
            "and r6, r6, r8",
            "str r5, [sp, 0x20]",
            "str r6, [sp, 0x24]",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "add r6, sp, 0x88",
            "ldm r6, {r5, r6}",
            "ldr sb, [sp, 0x28]",
            "eor r8, r8, r6",
            "ldr r6, [sp, 0x28]",
            "orr sb, r1, sb, lsl 4",
            "orr r6, r0, r6, lsr 2",
            "ldr r0, [sp, 0x708]",
            "ldr r1, [sp, 0x70c]",
            "str r0, [sp, 0x30]",
            "str r1, [sp, 0x34]",
            "ldr r1, [sp, 0x2c]",
            "ldr ip, [sp, 0x2c]",
            "eor r7, r7, r5",
            "lsl r0, r1, 0x19",
            "orr ip, r2, ip, lsr 7",
            "adds r3, r3, r7",
            "add r2, sp, 0x30",
            "ldm r2, {r1, r2}",
            "str r6, [sp, 0x94]",
            "add r6, sp, 0x28",
            "ldm r6, {r5, r6}",
            "orr r1, r1, r5",
            "orr r2, r2, r6",
            "orr r5, r0, r5, lsr 7",
            "adc r4, r4, r8",
            "str sb, [sp, 0x9c]",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "str ip, [sp, 0xa0]",
            "eor r7, r7, sl",
            "str r5, [sp, 0xa4]",
            "eor r8, r8, fp",
            "add sl, sp, 0x710",
            "ldm sl, {sb, sl}",
            "and fp, r1, sb",
            "and ip, r2, sl",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "str fp, [sp, 0x48]",
            "str ip, [sp, 0x4c]",
            "add r6, sp, 0x98",
            "ldm r6, {r5, r6}",
            "str sb, [sp, 0x20]",
            "str sl, [sp, 0x24]",
            "add fp, sp, 0x30",
            "ldm fp, {sl, fp}",
            "and sl, sl, r0",
            "and fp, fp, r1",
            "adds r3, r3, r7",
            "add r2, sp, 0x90",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r5",
            "eor r2, r2, r6",
            "add r7, sp, 0x48",
            "ldm r7, {r6, r7}",
            "orr r7, r7, fp",
            "orr r6, r6, sl",
            "str r6, [sp, 8]",
            "str r7, [sp, 0xc]",
            "adc r4, r4, r8",
            "add r8, sp, 0xa0",
            "ldm r8, {r7, r8}",
            "eor fp, r2, r8",
            "eor sl, r1, r7",
            "add sb, sp, 0x60",
            "ldm sb, {r8, sb}",
            "adds r3, r3, r8",
            "adc r4, r4, sb",
            "add r1, sp, 8",
            "ldm r1, {r0, r1}",
            "adds r0, r0, sl",
            "adc r1, r1, fp",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "ldr r1, [sp, 0x718]",
            "ldr r2, [sp, 0x71c]",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x718]",
            "str r2, [sp, 0x71c]",
            "stm sp, {r1, r2}",
            "add r3, sp, 8",
            "ldm r3, {r2, r3}",
            "str r2, [sp, 0x738]",
            "str r3, [sp, 0x73c]",
            "ldr r3, [sp, 0x68]",
            "ldr r5, [sp, 0x6c]",
            "cmp r3, 0",
            "add r5, r5, 8",
            "ldm r5, {r4, r5}",
            "str r4, [sp, 0x48]",
            "str r5, [sp, 0x4c]",
            "bne 0xb82b8",
            "ldr r6, [sp, 0x70]",
            "add fp, r6, 8",
            "ldm fp, {sl, fp}",
            "str sl, [sp, 0x688]",
            "str fp, [sp, 0x68c]",
            "ldm sp, {r7, sb}",
            "lsr r1, r7, 0x12",
            "ldr ip, [sp, 4]",
            "lsr r2, r7, 0xe",
            "orr sb, r1, sb, lsl 14",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x40",
            "ldm r1, {r0, r1}",
            "eor r4, r4, r1",
            "ldmib sp, {r1, r6}",
            "orr ip, r2, ip, lsl 18",
            "eor r3, r3, r0",
            "mov r5, r7",
            "str sb, [sp, 0xa8]",
            "str ip, [sp, 0xb0]",
            "lsr lr, r1, 0x12",
            "lsr ip, r1, 0xe",
            "ldm sp, {r8, sb}",
            "and r8, r8, r3",
            "and sb, sb, r4",
            "ldr r3, [sp, 4]",
            "ldr r4, [sp, 0xc]",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "lsl r0, r7, 0x17",
            "orr sb, lr, r5, lsl 14",
            "ldr r7, [sp, 0xc]",
            "orr lr, ip, r5, lsl 18",
            "lsl r1, r6, 0x1e",
            "ldr r5, [sp, 0xc]",
            "lsr r2, r6, 0x1c",
            "orr r3, r0, r3, lsr 9",
            "orr r4, r1, r4, lsr 2",
            "ldr r6, [sp, 4]",
            "str sb, [sp, 0xac]",
            "str lr, [sp, 0xb4]",
            "ldr sb, [sp, 8]",
            "orr r5, r2, r5, lsl 4",
            "str r3, [sp, 0xb8]",
            "str r4, [sp, 0xc0]",
            "lsl lr, r7, 0x1e",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "lsr ip, r7, 0x1c",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r3",
            "lsl r2, r6, 0x17",
            "adc r8, r8, r4",
            "str r5, [sp, 0xc8]",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "add r6, sp, 0x58",
            "ldm r6, {r5, r6}",
            "eor r5, r5, r3",
            "eor r6, r6, r4",
            "ldr r4, [sp]",
            "lsl r0, sb, 0x19",
            "str r5, [sp, 0x48]",
            "str r6, [sp, 0x4c]",
            "orr r5, lr, sb, lsr 2",
            "orr r6, ip, sb, lsl 4",
            "ldr sb, [sp, 0xc]",
            "orr r4, r2, r4, lsr 9",
            "str r4, [sp, 0xbc]",
            "add r2, sp, 0xa8",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0xb0",
            "ldm r4, {r3, r4}",
            "str r5, [sp, 0xc4]",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "str r6, [sp, 0xcc]",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "add r6, sp, 8",
            "ldm r6, {r5, r6}",
            "orr sb, r0, sb, lsr 7",
            "orr r5, r5, r3",
            "orr r6, r6, r4",
            "str sb, [sp, 0xd0]",
            "str r5, [sp, 0x38]",
            "str r6, [sp, 0x3c]",
            "add r6, sp, 0x48",
            "ldm r6, {r5, r6}",
            "ldr r4, [sp, 0xc]",
            "adds r7, r7, r5",
            "lsl r0, r4, 0x19",
            "adc r8, r8, r6",
            "add r6, sp, 0xb8",
            "ldm r6, {r5, r6}",
            "eor r3, r1, r5",
            "eor r4, r2, r6",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "add r2, sp, 0x38",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "and r2, r2, r4",
            "ldr r4, [sp, 8]",
            "and r1, r1, r3",
            "orr r4, r0, r4, lsr 7",
            "str r1, [sp, 0x58]",
            "str r2, [sp, 0x5c]",
            "add r6, sp, 0x28",
            "ldm r6, {r5, r6}",
            "add r2, sp, 8",
            "ldm r2, {r1, r2}",
            "str r4, [sp, 0xd4]",
            "and r1, r1, r5",
            "and r2, r2, r6",
            "add r4, sp, 0xc0",
            "ldm r4, {r3, r4}",
            "add r6, sp, 0xc8",
            "ldm r6, {r5, r6}",
            "eor r3, r3, r5",
            "eor r4, r4, r6",
            "str r3, [sp, 0x60]",
            "str r4, [sp, 0x64]",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "add r6, sp, 0x58",
            "ldm r6, {r5, r6}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "orr r5, r5, r1",
            "adds r7, r7, sl",
            "orr r6, r6, r2",
            "add r1, sp, 0x60",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0xd0",
            "ldm r3, {r2, r3}",
            "eor r0, r0, r2",
            "adc r8, r8, fp",
            "eor r1, r1, r3",
            "adds r5, r5, r0",
            "adc r6, r6, r1",
            "adds r5, r5, r7",
            "adc r6, r6, r8",
            "add r4, sp, 0x20",
            "ldm r4, {r3, r4}",
            "adds r3, r3, r7",
            "adc r4, r4, r8",
            "str r3, [sp, 0x710]",
            "str r4, [sp, 0x714]",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "str r5, [sp, 0x730]",
            "str r6, [sp, 0x734]",
            "ldr r4, [sp, 0x68]",
            "ldr r8, [sp, 0x6c]",
            "cmp r4, 0",
            "add r8, r8, 0x10",
            "ldm r8, {r7, r8}",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "bne 0xb8174",
            "ldr ip, [sp, 0x70]",
            "add ip, ip, 0x10",
            "ldm ip, {fp, ip}",
            "str fp, [sp, 0x48]",
            "str ip, [sp, 0x4c]",
            "str fp, [sp, 0x690]",
            "str ip, [sp, 0x694]",
            "ldr lr, [sp, 0x38]",
            "ldr r1, [sp, 0x3c]",
            "lsr r2, lr, 0x12",
            "orr r1, r2, r1, lsl 14",
            "ldr r2, [sp, 0x3c]",
            "lsr r3, lr, 0xe",
            "orr r2, r3, r2, lsl 18",
            "ldm sp, {sl, fp}",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "eor sl, sl, r3",
            "eor fp, fp, r4",
            "str r1, [sp, 0xd8]",
            "ldr r4, [sp, 0x3c]",
            "str r2, [sp, 0xe0]",
            "ldr r8, [sp, 0x38]",
            "add r2, sp, 0x38",
            "ldm r2, {r1, r2}",
            "and r1, r1, sl",
            "and r2, r2, fp",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "ldr r2, [sp, 0x38]",
            "ldr r3, [sp, 0x38]",
            "lsr r0, r4, 0x12",
            "lsr lr, r4, 0xe",
            "lsl r7, r8, 0x17",
            "lsl r8, r5, 0x1e",
            "orr r2, r0, r2, lsl 14",
            "orr r3, lr, r3, lsl 18",
            "orr r4, r7, r4, lsr 9",
            "orr r8, r8, r6, lsr 2",
            "ldr r7, [sp, 0x3c]",
            "lsr ip, r5, 0x1c",
            "str r2, [sp, 0xdc]",
            "str r3, [sp, 0xe4]",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "str r4, [sp, 0xe8]",
            "str r8, [sp, 0xf0]",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "eor r2, r2, r4",
            "adds r8, r8, sl",
            "orr ip, ip, r6, lsl 4",
            "ldr r4, [sp, 0x38]",
            "adc sb, sb, fp",
            "eor r1, r1, r3",
            "str ip, [sp, 0xf8]",
            "lsl r0, r5, 0x19",
            "lsl ip, r7, 0x17",
            "str r8, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "add sl, sp, 0xe0",
            "ldm sl, {sb, sl}",
            "str r1, [sp, 0x50]",
            "str r2, [sp, 0x54]",
            "orr r4, ip, r4, lsr 9",
            "orr r0, r0, r6, lsr 7",
            "lsr r7, r6, 0x1c",
            "str r4, [sp, 0xec]",
            "orr r7, r7, r5, lsl 4",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "str r0, [sp, 0x100]",
            "lsl lr, r6, 0x1e",
            "add r1, sp, 8",
            "ldm r1, {r0, r1}",
            "orr fp, r6, r1",
            "add r2, sp, 0x20",
            "ldm r2, {r1, r2}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r7, [sp, 0xfc]",
            "orr lr, lr, r5, lsr 2",
            "add r8, sp, 0xd8",
            "ldm r8, {r7, r8}",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "str lr, [sp, 0xf4]",
            "orr sl, r5, r0",
            "str r1, [sp, 0x20]",
            "str r2, [sp, 0x24]",
            "add r4, sp, 0xe8",
            "ldm r4, {r3, r4}",
            "lsl r0, r6, 0x19",
            "eor r1, r7, r3",
            "eor r2, r8, r4",
            "str r1, [sp, 0x50]",
            "str r2, [sp, 0x54]",
            "add r2, sp, 0x28",
            "ldm r2, {r1, r2}",
            "orr r0, r0, r5, lsr 7",
            "and r7, sl, r1",
            "and r8, fp, r2",
            "add sl, sp, 0xf8",
            "ldm sl, {sb, sl}",
            "add r3, sp, 8",
            "ldm r3, {r2, r3}",
            "str r7, [sp, 0x60]",
            "str r8, [sp, 0x64]",
            "str r0, [sp, 0x104]",
            "and r7, r5, r2",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "and r8, r6, r3",
            "add r4, sp, 0xf0",
            "ldm r4, {r3, r4}",
            "eor r4, r4, sl",
            "add fp, sp, 0x20",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r0",
            "eor r3, r3, sb",
            "adc fp, fp, r1",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "orr r1, r1, r7",
            "orr r2, r2, r8",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "mov r1, r3",
            "adds sl, sl, r7",
            "mov r2, r4",
            "add r4, sp, 0x100",
            "ldm r4, {r3, r4}",
            "eor r1, r1, r3",
            "adc fp, fp, r8",
            "eor r2, r2, r4",
            "add sb, sp, 0x10",
            "ldm sb, {r8, sb}",
            "adds r8, r8, r1",
            "adc sb, sb, r2",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "add r1, sp, 0x30",
            "ldm r1, {r0, r1}",
            "adds sl, sl, r0",
            "adc fp, fp, r1",
            "str sl, [sp, 0x708]",
            "str fp, [sp, 0x70c]",
            "str r8, [sp, 0x728]",
            "str sb, [sp, 0x72c]",
            "ldr r1, [sp, 0x68]",
            "ldr r3, [sp, 0x6c]",
            "cmp r1, 0",
            "add r3, r3, 0x18",
            "ldm r3, {r2, r3}",
            "str r8, [sp, 0x10]",
            "str sb, [sp, 0x14]",
            "str sl, [sp, 0x48]",
            "str fp, [sp, 0x4c]",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "bne 0xb8030",
            "ldr fp, [sp, 0x70]",
            "add fp, fp, 0x18",
            "ldm fp, {sl, fp}",
            "str sl, [sp, 0x20]",
            "str fp, [sp, 0x24]",
            "str sl, [sp, 0x698]",
            "str fp, [sp, 0x69c]",
            "ldr ip, [sp, 0x48]",
            "ldr r1, [sp, 0x4c]",
            "ldr r2, [sp, 0x4c]",
            "ldr fp, [sp, 0x10]",
            "lsr r0, ip, 0x12",
            "lsr r3, ip, 0xe",
            "orr r1, r0, r1, lsl 14",
            "orr r2, r3, r2, lsl 18",
            "add r8, sp, 0x38",
            "ldm r8, {r7, r8}",
            "ldm sp, {r3, r4}",
            "eor r8, r8, r4",
            "ldr r4, [sp, 0x4c]",
            "eor r7, r7, r3",
            "lsl lr, fp, 0x1e",
            "str r1, [sp, 0x108]",
            "lsr r1, fp, 0x1c",
            "ldr fp, [sp, 0x48]",
            "add sl, sp, 0x48",
            "ldm sl, {sb, sl}",
            "str r2, [sp, 0x110]",
            "and sb, sb, r7",
            "lsr r2, r4, 0xe",
            "and sl, sl, r8",
            "str sb, [sp, 0x58]",
            "str sl, [sp, 0x5c]",
            "orr fp, r2, fp, lsl 18",
            "ldr sl, [sp, 0x48]",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [sp, 0x14]",
            "lsr r0, r4, 0x12",
            "orr sl, r0, sl, lsl 14",
            "orr r2, lr, r2, lsr 2",
            "orr r3, r1, r3, lsl 4",
            "lsl ip, ip, 0x17",
            "orr r0, ip, r4, lsr 9",
            "str sl, [sp, 0x10c]",
            "str fp, [sp, 0x114]",
            "str r2, [sp, 0x120]",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "lsl r2, r4, 0x17",
            "str r3, [sp, 0x128]",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "adds sl, sl, r3",
            "ldr r7, [sp, 0x14]",
            "adc fp, fp, r4",
            "ldr sb, [sp, 0x10]",
            "str sl, [sp, 0x30]",
            "str fp, [sp, 0x34]",
            "ldr fp, [sp, 0x10]",
            "str r0, [sp, 0x118]",
            "lsl r0, r7, 0x1e",
            "lsr ip, r7, 0x1c",
            "orr fp, r0, fp, lsr 2",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "lsl lr, sb, 0x19",
            "ldr r0, [sp, 0x10]",
            "ldm sp, {sb, sl}",
            "eor r8, r8, sl",
            "ldr sl, [sp, 0x48]",
            "eor r7, r7, sb",
            "orr sl, r2, sl, lsr 9",
            "orr r0, ip, r0, lsl 4",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "str sl, [sp, 0x11c]",
            "str fp, [sp, 0x124]",
            "str r0, [sp, 0x12c]",
            "ldr r1, [sp, 0x14]",
            "add ip, sp, 0x40",
            "ldm ip, {fp, ip}",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "orr r1, lr, r1, lsr 7",
            "adds sb, sb, fp",
            "add r3, sp, 0x110",
            "ldm r3, {r2, r3}",
            "adc sl, sl, ip",
            "str r1, [sp, 0x130]",
            "add r8, sp, 0x108",
            "ldm r8, {r7, r8}",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "eor r8, r8, r3",
            "orr r1, r1, r6",
            "ldr r3, [sp, 0x14]",
            "str sb, [sp, 0x30]",
            "str sl, [sp, 0x34]",
            "add sl, sp, 0x118",
            "ldm sl, {sb, sl}",
            "eor r7, r7, r2",
            "eor r4, r8, sl",
            "add fp, sp, 8",
            "ldm fp, {sl, fp}",
            "and r8, r1, fp",
            "ldr fp, [sp, 0x10]",
            "lsl r2, r3, 0x19",
            "orr r0, r0, r5",
            "eor r3, r7, sb",
            "str r3, [sp, 0x40]",
            "str r4, [sp, 0x44]",
            "add r4, sp, 0x120",
            "ldm r4, {r3, r4}",
            "and r7, r0, sl",
            "orr fp, r2, fp, lsr 7",
            "add sl, sp, 0x128",
            "ldm sl, {sb, sl}",
            "eor r3, r3, sb",
            "eor r4, r4, sl",
            "str fp, [sp, 0x134]",
            "str r3, [sp, 0x60]",
            "str r4, [sp, 0x64]",
            "add fp, sp, 0x30",
            "ldm fp, {sl, fp}",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "adds sl, sl, r3",
            "adc fp, fp, r4",
            "add r2, sp, 0x10",
            "ldm r2, {r1, r2}",
            "and r1, r1, r5",
            "and r2, r2, r6",
            "str sl, [sp, 0x30]",
            "str fp, [sp, 0x34]",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "orr sl, r8, r2",
            "orr sb, r7, r1",
            "str sb, [sp, 0x18]",
            "str sl, [sp, 0x1c]",
            "add r1, sp, 0x20",
            "ldm r1, {r0, r1}",
            "add fp, sp, 0x130",
            "ldm fp, {sl, fp}",
            "eor r4, r4, fp",
            "eor r3, r3, sl",
            "add ip, sp, 0x30",
            "ldm ip, {fp, ip}",
            "adds fp, fp, r0",
            "adc ip, ip, r1",
            "add r2, sp, 0x18",
            "ldm r2, {r1, r2}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "adds r1, r1, fp",
            "adc r2, r2, ip",
            "str r1, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "adds fp, fp, r2",
            "adc ip, ip, r3",
            "str fp, [sp, 0x700]",
            "str ip, [sp, 0x704]",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x720]",
            "str r4, [sp, 0x724]",
            "ldr r4, [sp, 0x68]",
            "ldr r8, [sp, 0x6c]",
            "cmp r4, 0",
            "str fp, [sp, 0x20]",
            "str ip, [sp, 0x24]",
            "add r8, r8, 0x20",
            "ldm r8, {r7, r8}",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "bne 0xb7eec",
            "ldr fp, [sp, 0x70]",
            "add fp, fp, 0x20",
            "ldm fp, {sl, fp}",
            "str sl, [sp, 0x28]",
            "str fp, [sp, 0x2c]",
            "str sl, [sp, 0x6a0]",
            "str fp, [sp, 0x6a4]",
            "ldr lr, [sp, 0x20]",
            "ldr r2, [sp, 0x24]",
            "lsr ip, lr, 0x12",
            "ldr r3, [sp, 0x24]",
            "ldr fp, [sp, 0x18]",
            "lsr r0, lr, 0xe",
            "orr r2, ip, r2, lsl 14",
            "add r8, sp, 0x38",
            "ldm r8, {r7, r8}",
            "orr r3, r0, r3, lsl 18",
            "str r2, [sp, 0x138]",
            "add r2, sp, 0x48",
            "ldm r2, {r1, r2}",
            "eor r2, r2, r8",
            "ldr r8, [sp, 0x24]",
            "eor r1, r1, r7",
            "lsl sb, fp, 0x1e",
            "mov r4, fp",
            "str r3, [sp, 0x140]",
            "lsr r3, fp, 0x1c",
            "ldr fp, [sp, 0x24]",
            "lsr ip, r8, 0x12",
            "lsr r0, r8, 0xe",
            "mov sl, lr",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "lsl lr, lr, 0x17",
            "and r7, r7, r1",
            "and r8, r8, r2",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "orr fp, lr, fp, lsr 9",
            "orr r8, ip, sl, lsl 14",
            "ldr lr, [sp, 0x1c]",
            "orr sl, r0, sl, lsl 18",
            "ldr ip, [sp, 0x1c]",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x24]",
            "str r8, [sp, 0x13c]",
            "str sl, [sp, 0x144]",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "str fp, [sp, 0x148]",
            "ldm sp, {sl, fp}",
            "adds r7, r7, sl",
            "adc r8, r8, fp",
            "orr ip, sb, ip, lsr 2",
            "orr lr, r3, lr, lsl 4",
            "lsl r0, r1, 0x17",
            "lsl sb, r4, 0x19",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "str ip, [sp, 0x150]",
            "str lr, [sp, 0x158]",
            "lsl ip, r2, 0x1e",
            "lsr lr, r2, 0x1c",
            "ldr r7, [sp, 0x18]",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "ldr r8, [sp, 0x18]",
            "eor r2, r2, r4",
            "ldr sl, [sp, 0x1c]",
            "ldr r4, [sp, 0x20]",
            "eor r1, r1, r3",
            "orr r4, r0, r4, lsr 9",
            "orr r7, ip, r7, lsr 2",
            "orr r8, lr, r8, lsl 4",
            "orr sl, sb, sl, lsr 7",
            "str r1, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "str r4, [sp, 0x14c]",
            "str r7, [sp, 0x154]",
            "str r8, [sp, 0x15c]",
            "str sl, [sp, 0x160]",
            "add r8, sp, 0x10",
            "ldm r8, {r7, r8}",
            "add ip, sp, 0x140",
            "ldm ip, {fp, ip}",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "add r4, sp, 0x138",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x18",
            "ldm r2, {r1, r2}",
            "eor r3, r3, fp",
            "eor r4, r4, ip",
            "orr r2, r2, r8",
            "add ip, sp, 0x40",
            "ldm ip, {fp, ip}",
            "ldr r8, [sp, 0x1c]",
            "adds sb, sb, fp",
            "orr r1, r1, r7",
            "adc sl, sl, ip",
            "lsl r0, r8, 0x19",
            "and fp, r2, r6",
            "str sb, [sp, 0x30]",
            "str sl, [sp, 0x34]",
            "add sl, sp, 0x148",
            "ldm sl, {sb, sl}",
            "eor r8, r4, sl",
            "and sl, r1, r5",
            "str sl, [sp, 0x58]",
            "str fp, [sp, 0x5c]",
            "ldr fp, [sp, 0x18]",
            "eor r7, r3, sb",
            "orr fp, r0, fp, lsr 7",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "add r8, sp, 0x158",
            "ldm r8, {r7, r8}",
            "str fp, [sp, 0x164]",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "add fp, sp, 0x40",
            "ldm fp, {sl, fp}",
            "and r3, r3, r0",
            "and r4, r4, r1",
            "add r2, sp, 0x150",
            "ldm r2, {r1, r2}",
            "eor r2, r2, r8",
            "eor r1, r1, r7",
            "add sb, sp, 0x30",
            "ldm sb, {r8, sb}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add fp, sp, 0x58",
            "ldm fp, {sl, fp}",
            "orr sl, sl, r3",
            "orr fp, fp, r4",
            "add r4, sp, 0x160",
            "ldm r4, {r3, r4}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "adds r8, r8, r3",
            "adc sb, sb, r4",
            "adds sl, sl, r1",
            "adc fp, fp, r2",
            "adds sl, sl, r8",
            "adc fp, fp, sb",
            "add r1, sp, 8",
            "ldm r1, {r0, r1}",
            "adds r8, r8, r0",
            "adc sb, sb, r1",
            "str r8, [sp, 0x738]",
            "str sb, [sp, 0x73c]",
            "str sl, [sp, 0x718]",
            "str fp, [sp, 0x71c]",
            "ldr r1, [sp, 0x68]",
            "ldr r3, [sp, 0x6c]",
            "cmp r1, 0",
            "add r3, r3, 0x28",
            "ldm r3, {r2, r3}",
            "str r8, [sp, 0x28]",
            "str sb, [sp, 0x2c]",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "bne 0xb7d98",
            "ldr r2, [sp, 0x70]",
            "add r2, r2, 0x28",
            "ldm r2, {r1, r2}",
            "str r1, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "str r1, [sp, 0x6a8]",
            "str r2, [sp, 0x6ac]",
            "ldr r3, [sp, 0x28]",
            "ldr r8, [sp, 0x2c]",
            "lsr r0, r3, 0xe",
            "orr r8, r0, r8, lsl 18",
            "ldr r7, [sp, 0x2c]",
            "lsr ip, r3, 0x12",
            "str r8, [sp, 0x170]",
            "add r3, sp, 0x48",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x20",
            "ldm r1, {r0, r1}",
            "ldr r8, [sp, 0x28]",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "ldr r3, [sp, 0x2c]",
            "str r0, [sp, 0x30]",
            "str r1, [sp, 0x34]",
            "orr r7, ip, r7, lsl 14",
            "str r7, [sp, 0x168]",
            "lsr lr, r3, 0xe",
            "lsr r7, r3, 0x12",
            "lsl ip, r8, 0x17",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "add sb, sp, 0x30",
            "ldm sb, {r8, sb}",
            "ldr r1, [sp, 0x28]",
            "and r4, r4, sb",
            "ldr sb, [sp, 0x28]",
            "and r3, r3, r8",
            "lsr r2, sl, 0x1c",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "orr sb, r7, sb, lsl 14",
            "orr r1, lr, r1, lsl 18",
            "ldr r3, [sp, 0x2c]",
            "orr r2, r2, fp, lsl 4",
            "str sb, [sp, 0x16c]",
            "str r1, [sp, 0x174]",
            "add sb, sp, 0x38",
            "ldm sb, {r8, sb}",
            "str r2, [sp, 0x188]",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "adds r8, r8, r1",
            "adc sb, sb, r2",
            "orr r3, ip, r3, lsr 9",
            "ldr r4, [sp, 0x2c]",
            "lsl r0, sl, 0x1e",
            "str r3, [sp, 0x178]",
            "orr r0, r0, fp, lsr 2",
            "add r3, sp, 0x58",
            "ldm r3, {r2, r3}",
            "str r8, [sp, 0x30]",
            "str sb, [sp, 0x34]",
            "add sb, sp, 0x48",
            "ldm sb, {r8, sb}",
            "lsl r7, sl, 0x19",
            "eor r3, r3, sb",
            "ldr sb, [sp, 0x28]",
            "eor r2, r2, r8",
            "str r0, [sp, 0x180]",
            "lsl ip, r4, 0x17",
            "orr r7, r7, fp, lsr 7",
            "lsl r0, fp, 0x1e",
            "lsr lr, fp, 0x1c",
            "str r2, [sp, 0x38]",
            "str r3, [sp, 0x3c]",
            "add r4, sp, 0x170",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x168",
            "ldm r2, {r1, r2}",
            "orr r0, r0, sl, lsr 2",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "str r7, [sp, 0x190]",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "orr sb, ip, sb, lsr 9",
            "orr r7, sl, r3",
            "orr r8, fp, r4",
            "orr lr, lr, sl, lsl 4",
            "str r0, [sp, 0x184]",
            "str sb, [sp, 0x17c]",
            "str lr, [sp, 0x18c]",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add r4, sp, 0x178",
            "ldm r4, {r3, r4}",
            "eor r7, r1, r3",
            "eor r8, r2, r4",
            "str r7, [sp, 0x38]",
            "str r8, [sp, 0x3c]",
            "add r2, sp, 0x10",
            "ldm r2, {r1, r2}",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "and r7, r7, r1",
            "and r8, r8, r2",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "add r8, sp, 0x180",
            "ldm r8, {r7, r8}",
            "and r1, sl, r3",
            "and r2, fp, r4",
            "lsl r0, fp, 0x19",
            "add r4, sp, 0x188",
            "ldm r4, {r3, r4}",
            "eor r7, r7, r3",
            "eor r8, r8, r4",
            "orr r0, r0, sl, lsr 7",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "str r7, [sp, 0x60]",
            "str r8, [sp, 0x64]",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r0, [sp, 0x194]",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "orr r7, r7, r1",
            "orr r8, r8, r2",
            "add r1, sp, 0x60",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x190",
            "ldm r3, {r2, r3}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "str r0, [sp, 0x38]",
            "str r1, [sp, 0x3c]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x40",
            "ldm r1, {r0, r1}",
            "adds r3, r3, r0",
            "adc r4, r4, r1",
            "add r2, sp, 0x38",
            "ldm r2, {r1, r2}",
            "adds r7, r7, r1",
            "adc r8, r8, r2",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "adds r3, r3, r5",
            "adc r4, r4, r6",
            "str r3, [sp, 0x730]",
            "str r4, [sp, 0x734]",
            "str r7, [sp, 0x710]",
            "str r8, [sp, 0x714]",
            "ldr r2, [sp, 0x68]",
            "str r3, [sp, 0x40]",
            "str r4, [sp, 0x44]",
            "ldr r4, [sp, 0x6c]",
            "cmp r2, 0",
            "add r4, r4, 0x30",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "bne 0xb7c24",
            "ldr r4, [sp, 0x70]",
            "add r4, r4, 0x30",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x30]",
            "str r4, [sp, 0x34]",
            "str r3, [sp, 0x6b0]",
            "str r4, [sp, 0x6b4]",
            "ldr r5, [sp, 0x40]",
            "ldr sb, [sp, 0x44]",
            "lsr ip, r5, 0x12",
            "orr sb, ip, sb, lsl 14",
            "ldr ip, [sp, 0x44]",
            "lsr r0, r5, 0xe",
            "add r3, sp, 0x20",
            "ldm r3, {r2, r3}",
            "orr ip, r0, ip, lsl 18",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "ldr r3, [sp, 0x44]",
            "str r0, [sp, 0x38]",
            "str r1, [sp, 0x3c]",
            "add r2, sp, 0x40",
            "ldm r2, {r1, r2}",
            "mov r6, r5",
            "lsr lr, r3, 0xe",
            "lsr r5, r3, 0x12",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "and r2, r2, r4",
            "ldr r4, [sp, 0x40]",
            "and r1, r1, r3",
            "orr r4, r5, r4, lsl 14",
            "ldr r5, [sp, 0x40]",
            "str r1, [sp, 0x58]",
            "str r2, [sp, 0x5c]",
            "add r2, sp, 0x48",
            "ldm r2, {r1, r2}",
            "str r4, [sp, 0x19c]",
            "lsl r0, r7, 0x1e",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str sb, [sp, 0x198]",
            "orr r5, lr, r5, lsl 18",
            "ldr sb, [sp, 0x44]",
            "ldr lr, [sp, 0x44]",
            "orr r0, r0, r8, lsr 2",
            "add r4, sp, 0x20",
            "ldm r4, {r3, r4}",
            "str ip, [sp, 0x1a0]",
            "str r5, [sp, 0x1a4]",
            "lsl ip, r6, 0x17",
            "str r0, [sp, 0x1b0]",
            "str r1, [sp, 0x38]",
            "str r2, [sp, 0x3c]",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "lsr r6, r7, 0x1c",
            "eor r2, r2, r4",
            "lsl r0, r8, 0x1e",
            "ldr r4, [sp, 0x40]",
            "lsl r5, r7, 0x19",
            "eor r1, r1, r3",
            "orr sb, ip, sb, lsr 9",
            "orr r6, r6, r8, lsl 4",
            "lsl ip, lr, 0x17",
            "orr r0, r0, r7, lsr 2",
            "orr r5, r5, r8, lsr 7",
            "lsr lr, r8, 0x1c",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "str r6, [sp, 0x1b8]",
            "orr r4, ip, r4, lsr 9",
            "str r0, [sp, 0x1b4]",
            "str r5, [sp, 0x1c0]",
            "add r1, sp, 0x1a0",
            "ldm r1, {r0, r1}",
            "add r6, sp, 0x198",
            "ldm r6, {r5, r6}",
            "orr r2, r8, fp",
            "eor r6, r6, r1",
            "orr lr, lr, r7, lsl 4",
            "orr r1, r7, sl",
            "str r4, [sp, 0x1ac]",
            "str sb, [sp, 0x1a8]",
            "str lr, [sp, 0x1bc]",
            "str r1, [sp, 0x50]",
            "str r2, [sp, 0x54]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x48",
            "ldm r2, {r1, r2}",
            "adds r3, r3, r1",
            "adc r4, r4, r2",
            "eor r5, r5, r0",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "add r2, sp, 0x1a8",
            "ldm r2, {r1, r2}",
            "lsl r0, r8, 0x19",
            "eor r3, r5, r1",
            "eor r4, r6, r2",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "add r5, sp, 0x18",
            "ldm r5, {r4, r5}",
            "add r3, sp, 0x50",
            "ldm r3, {r2, r3}",
            "orr r0, r0, r7, lsr 7",
            "and r2, r2, r4",
            "and r3, r3, r5",
            "and r6, r8, fp",
            "and r5, r7, sl",
            "str r2, [sp, 0x58]",
            "str r3, [sp, 0x5c]",
            "add r3, sp, 0x1b8",
            "ldm r3, {r2, r3}",
            "str r0, [sp, 0x1c4]",
            "str r5, [sp, 0x50]",
            "str r6, [sp, 0x54]",
            "add r1, sp, 0x1b0",
            "ldm r1, {r0, r1}",
            "add r6, sp, 0x48",
            "ldm r6, {r5, r6}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "adds r3, r3, r5",
            "adc r4, r4, r6",
            "str r0, [sp, 0x60]",
            "str r1, [sp, 0x64]",
            "add r6, sp, 0x58",
            "ldm r6, {r5, r6}",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "add r4, sp, 0x1c0",
            "ldm r4, {r3, r4}",
            "orr r6, r6, r1",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "add r3, sp, 0x30",
            "ldm r3, {r2, r3}",
            "orr r5, r5, r0",
            "add r1, sp, 0x38",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r2",
            "adc r1, r1, r3",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "adds r5, r5, r3",
            "adc r6, r6, r4",
            "adds r5, r5, r0",
            "adc r6, r6, r1",
            "add r3, sp, 0x10",
            "ldm r3, {r2, r3}",
            "adds r0, r0, r2",
            "adc r1, r1, r3",
            "str r0, [sp, 0x728]",
            "str r1, [sp, 0x72c]",
            "str r5, [sp, 0x708]",
            "str r6, [sp, 0x70c]",
            "ldr r3, [sp, 0x68]",
            "str r0, [sp, 0x30]",
            "str r1, [sp, 0x34]",
            "ldr r1, [sp, 0x6c]",
            "cmp r3, 0",
            "add r1, r1, 0x38",
            "ldm r1, {r0, r1}",
            "str r0, [sp, 0x38]",
            "str r1, [sp, 0x3c]",
            "bne 0xb7ac0",
            "ldr r1, [sp, 0x70]",
            "add r1, r1, 0x38",
            "ldm r1, {r0, r1}",
            "str r0, [sp, 0x48]",
            "str r1, [sp, 0x4c]",
            "str r0, [sp, 0x6b8]",
            "str r1, [sp, 0x6bc]",
            "ldr r2, [sp, 0x30]",
            "ldr r4, [sp, 0x34]",
            "ldr sb, [sp, 0x34]",
            "lsr r1, r2, 0x12",
            "lsr r2, r2, 0xe",
            "orr r4, r1, r4, lsl 14",
            "orr sb, r2, sb, lsl 18",
            "add r1, sp, 0x40",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "ldr r3, [sp, 0x34]",
            "str r0, [sp, 0x50]",
            "str r1, [sp, 0x54]",
            "lsl r1, r5, 0x1e",
            "str r1, [sp, 0x60]",
            "lsr ip, r3, 0x12",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "lsr r0, r3, 0xe",
            "ldr lr, [sp, 0x30]",
            "str r4, [sp, 0x1c8]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "and r3, r3, r1",
            "and r4, r4, r2",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "ldr r2, [sp, 0x30]",
            "ldr r3, [sp, 0x30]",
            "ldr r4, [sp, 0x34]",
            "str sb, [sp, 0x1d0]",
            "lsl sb, lr, 0x17",
            "orr r2, ip, r2, lsl 14",
            "orr r3, r0, r3, lsl 18",
            "orr r4, sb, r4, lsr 9",
            "lsr lr, r5, 0x1c",
            "str r2, [sp, 0x1cc]",
            "str r3, [sp, 0x1d4]",
            "add r2, sp, 0x20",
            "ldm r2, {r1, r2}",
            "str r4, [sp, 0x1d8]",
            "orr lr, lr, r6, lsl 4",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str lr, [sp, 0x1e8]",
            "ldr lr, [sp, 0x34]",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "ldr sb, [sp, 0x60]",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "eor r2, r2, r4",
            "ldr r4, [sp, 0x30]",
            "lsl ip, lr, 0x17",
            "lsl r0, r6, 0x1e",
            "lsr lr, r6, 0x1c",
            "eor r1, r1, r3",
            "orr sb, sb, r6, lsr 2",
            "orr r4, ip, r4, lsr 9",
            "orr r0, r0, r5, lsr 2",
            "orr lr, lr, r5, lsl 4",
            "str r1, [sp, 0x20]",
            "str r2, [sp, 0x24]",
            "str sb, [sp, 0x1e0]",
            "str r4, [sp, 0x1dc]",
            "str r0, [sp, 0x1e4]",
            "orr r4, r6, r8",
            "str lr, [sp, 0x1ec]",
            "add r3, sp, 0x1d0",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x1c8",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "orr r3, r5, r7",
            "str r0, [sp, 0x38]",
            "str r1, [sp, 0x3c]",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "add r4, sp, 0x20",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add r4, sp, 0x1d8",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x38",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "str r1, [sp, 0x20]",
            "str r2, [sp, 0x24]",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "lsl r0, r6, 0x19",
            "and r1, r1, sl",
            "and r2, r2, fp",
            "str r1, [sp, 0x38]",
            "str r2, [sp, 0x3c]",
            "orr r0, r0, r5, lsr 7",
            "and r2, r5, r7",
            "and r3, r6, r8",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "add r4, sp, 0x1e0",
            "ldm r4, {r3, r4}",
            "str r0, [sp, 0x1f4]",
            "add r1, sp, 0x1e8",
            "ldm r1, {r0, r1}",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x20",
            "ldm r4, {r3, r4}",
            "lsl sb, r5, 0x19",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "orr sb, sb, r6, lsr 7",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add r3, sp, 0x50",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x38",
            "ldm r1, {r0, r1}",
            "str sb, [sp, 0x1f0]",
            "orr r0, r0, r2",
            "orr r1, r1, r3",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "add r4, sp, 0x58",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x1f0",
            "ldm r1, {r0, r1}",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "add r2, sp, 0x60",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x60]",
            "str r2, [sp, 0x64]",
            "add r3, sp, 0x38",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x20",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r2",
            "adc r1, r1, r3",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "add r1, sp, 0x18",
            "ldm r1, {r0, r1}",
            "adds r3, r3, r0",
            "adc r4, r4, r1",
            "str r3, [sp, 0x720]",
            "str r4, [sp, 0x724]",
            "add r2, sp, 0x20",
            "ldm r2, {r1, r2}",
            "str r1, [sp, 0x700]",
            "str r2, [sp, 0x704]",
            "ldr r2, [sp, 0x68]",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "ldr r4, [sp, 0x6c]",
            "cmp r2, 0",
            "add r4, r4, 0x40",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "bne 0xb795c",
            "ldr r3, [sp, 0x70]",
            "add r3, r3, 0x40",
            "ldm r3, {r2, r3}",
            "str r2, [sp, 0x48]",
            "str r3, [sp, 0x4c]",
            "str r2, [sp, 0x6c0]",
            "str r3, [sp, 0x6c4]",
            "ldr r4, [sp, 0x38]",
            "ldr ip, [sp, 0x3c]",
            "lsr r2, r4, 0x12",
            "ldr lr, [sp, 0x3c]",
            "lsr r3, r4, 0xe",
            "orr ip, r2, ip, lsl 14",
            "orr lr, r3, lr, lsl 18",
            "add r1, sp, 0x30",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x40",
            "ldm r3, {r2, r3}",
            "str ip, [sp, 0x1f8]",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "ldr ip, [sp, 0x38]",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "ldr r3, [sp, 0x3c]",
            "ldr r1, [sp, 0x20]",
            "lsl ip, ip, 0x17",
            "lsr r0, r3, 0x12",
            "lsr sb, r3, 0xe",
            "str ip, [sp, 0x18]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "lsr ip, r1, 0x1c",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "and r3, r3, r1",
            "and r4, r4, r2",
            "str r3, [sp, 0x60]",
            "str r4, [sp, 0x64]",
            "ldr r2, [sp, 0x38]",
            "ldr r3, [sp, 0x38]",
            "ldr r1, [sp, 0x24]",
            "str lr, [sp, 0x200]",
            "ldr lr, [sp, 0x20]",
            "orr r2, r0, r2, lsl 14",
            "orr r3, sb, r3, lsl 18",
            "ldr r4, [sp, 0x18]",
            "orr r1, ip, r1, lsl 4",
            "ldr sb, [sp, 0x3c]",
            "ldr r0, [sp, 0x24]",
            "lsl lr, lr, 0x1e",
            "str r2, [sp, 0x1fc]",
            "str r3, [sp, 0x204]",
            "ldr r2, [sp, 0x3c]",
            "ldr r3, [sp, 0x24]",
            "str r1, [sp, 0x218]",
            "ldr r1, [sp, 0x20]",
            "orr sb, r4, sb, lsr 9",
            "orr r0, lr, r0, lsr 2",
            "str lr, [sp, 0x10]",
            "str sb, [sp, 0x208]",
            "str r0, [sp, 0x210]",
            "lsl sb, r3, 0x1e",
            "lsr r0, r3, 0x1c",
            "lsl lr, r2, 0x17",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "lsl ip, r1, 0x19",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "adds r3, r3, r1",
            "adc r4, r4, r2",
            "str r3, [sp, 0x18]",
            "str r4, [sp, 0x1c]",
            "add r2, sp, 0x40",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "eor r3, r3, r1",
            "eor r4, r4, r2",
            "str r3, [sp, 0x28]",
            "str r4, [sp, 0x2c]",
            "ldr r2, [sp, 0x38]",
            "ldr r3, [sp, 0x20]",
            "ldr r4, [sp, 0x20]",
            "orr r3, sb, r3, lsr 2",
            "orr r4, r0, r4, lsl 4",
            "orr r2, lr, r2, lsr 9",
            "str r2, [sp, 0x20c]",
            "str r3, [sp, 0x214]",
            "str r4, [sp, 0x21c]",
            "add r3, sp, 0x200",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x1f8",
            "ldm r1, {r0, r1}",
            "eor r1, r1, r3",
            "add r4, sp, 0x20",
            "ldm r4, {r3, r4}",
            "orr r3, r3, r5",
            "orr r4, r4, r6",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "ldr r4, [sp, 0x24]",
            "eor r0, r0, r2",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "add r1, sp, 0x18",
            "ldm r1, {r0, r1}",
            "lsl r2, r4, 0x19",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "str r0, [sp, 0x18]",
            "str r1, [sp, 0x1c]",
            "add r4, sp, 0x208",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x58",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r3",
            "eor r1, r1, r4",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "and r0, r0, r7",
            "and r1, r1, r8",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "ldr r1, [sp, 0x20]",
            "ldr sb, [sp, 0x24]",
            "orr r1, r2, r1, lsr 7",
            "add r3, sp, 0x20",
            "ldm r3, {r2, r3}",
            "and r2, r2, r5",
            "and r3, r3, r6",
            "str r2, [sp, 0x60]",
            "str r3, [sp, 0x64]",
            "add r4, sp, 0x210",
            "ldm r4, {r3, r4}",
            "str r1, [sp, 0x224]",
            "add r1, sp, 0x218",
            "ldm r1, {r0, r1}",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "add r2, sp, 0x18",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "orr sb, ip, sb, lsr 7",
            "str sb, [sp, 0x220]",
            "str r1, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "add r1, sp, 0x58",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x60",
            "ldm r3, {r2, r3}",
            "orr r0, r0, r2",
            "orr r1, r1, r3",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x220",
            "ldm r1, {r0, r1}",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "add r2, sp, 0x18",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "add r3, sp, 0x58",
            "ldm r3, {r2, r3}",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r2",
            "adc r1, r1, r3",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "adds r3, r3, sl",
            "adc r4, r4, fp",
            "str r3, [sp, 0x718]",
            "str r4, [sp, 0x71c]",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "str r0, [sp, 0x738]",
            "str r1, [sp, 0x73c]",
            "ldr r4, [sp, 0x68]",
            "ldr sl, [sp, 0x6c]",
            "cmp r4, 0",
            "add sl, sl, 0x48",
            "ldm sl, {sb, sl}",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "str sb, [sp, 0x58]",
            "str sl, [sp, 0x5c]",
            "bne 0xb7808",
            "ldr ip, [sp, 0x70]",
            "add ip, ip, 0x48",
            "ldm ip, {fp, ip}",
            "str fp, [sp, 0x50]",
            "str ip, [sp, 0x54]",
            "str fp, [sp, 0x6c8]",
            "str ip, [sp, 0x6cc]",
            "ldr lr, [sp, 0x48]",
            "ldr r1, [sp, 0x4c]",
            "lsr r2, lr, 0x12",
            "orr r1, r2, r1, lsl 14",
            "ldr r2, [sp, 0x4c]",
            "lsr r3, lr, 0xe",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "orr r2, r3, r2, lsl 18",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "eor r3, r3, sb",
            "eor r4, r4, sl",
            "ldr sl, [sp, 0x4c]",
            "str r3, [sp, 0x18]",
            "str r4, [sp, 0x1c]",
            "add r4, sp, 0x18",
            "ldm r4, {r3, r4}",
            "lsr r0, sl, 0x12",
            "str r1, [sp, 0x228]",
            "str r2, [sp, 0x230]",
            "lsr r1, sl, 0xe",
            "lsl r2, lr, 0x17",
            "add fp, sp, 0x48",
            "ldm fp, {sl, fp}",
            "ldr lr, [sp, 0x28]",
            "and sl, sl, r3",
            "and fp, fp, r4",
            "ldr r4, [sp, 0x48]",
            "str sl, [sp, 0x60]",
            "str fp, [sp, 0x64]",
            "ldr sl, [sp, 0x48]",
            "ldr fp, [sp, 0x4c]",
            "lsl sb, lr, 0x1e",
            "lsr ip, lr, 0x1c",
            "orr r4, r0, r4, lsl 14",
            "ldr lr, [sp, 0x2c]",
            "ldr r0, [sp, 0x2c]",
            "orr sl, r1, sl, lsl 18",
            "orr fp, r2, fp, lsr 9",
            "ldr r1, [sp, 0x4c]",
            "ldr r2, [sp, 0x2c]",
            "orr lr, sb, lr, lsr 2",
            "orr r0, ip, r0, lsl 4",
            "ldr sb, [sp, 0x28]",
            "str r4, [sp, 0x22c]",
            "str sl, [sp, 0x234]",
            "lsl r4, r2, 0x1e",
            "str fp, [sp, 0x238]",
            "str lr, [sp, 0x240]",
            "add fp, sp, 0x40",
            "ldm fp, {sl, fp}",
            "lsl lr, r1, 0x17",
            "str r0, [sp, 0x248]",
            "lsr r0, r2, 0x1c",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "adds sl, sl, r1",
            "adc fp, fp, r2",
            "lsl ip, sb, 0x19",
            "str sl, [sp, 0x10]",
            "str fp, [sp, 0x14]",
            "add r3, sp, 0x60",
            "ldm r3, {r2, r3}",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "eor r3, r3, sl",
            "ldr sl, [sp, 0x48]",
            "eor r2, r2, sb",
            "orr sl, lr, sl, lsr 9",
            "str r2, [sp, 0x40]",
            "str r3, [sp, 0x44]",
            "str sl, [sp, 0x23c]",
            "ldr lr, [sp, 0x28]",
            "ldr fp, [sp, 0x28]",
            "orr lr, r0, lr, lsl 4",
            "ldr r0, [sp, 0x2c]",
            "orr fp, r4, fp, lsr 2",
            "str fp, [sp, 0x244]",
            "orr r0, ip, r0, lsr 7",
            "add sl, sp, 0x28",
            "ldm sl, {sb, sl}",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "orr sb, sb, fp",
            "orr sl, sl, ip",
            "add r2, sp, 0x230",
            "ldm r2, {r1, r2}",
            "str sb, [sp, 0x60]",
            "str sl, [sp, 0x64]",
            "add r4, sp, 0x228",
            "ldm r4, {r3, r4}",
            "add sl, sp, 0x40",
            "ldm sl, {sb, sl}",
            "str r0, [sp, 0x250]",
            "eor r3, r3, r1",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "adds r0, r0, sb",
            "adc r1, r1, sl",
            "eor r4, r4, r2",
            "str r0, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "add r1, sp, 0x238",
            "ldm r1, {r0, r1}",
            "ldr ip, [sp, 0x2c]",
            "eor sl, r3, r0",
            "eor fp, r4, r1",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "and r3, r3, r5",
            "and r4, r4, r6",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "ldr r4, [sp, 0x28]",
            "lsl r2, ip, 0x19",
            "orr r4, r2, r4, lsr 7",
            "str lr, [sp, 0x24c]",
            "str sl, [sp, 0x40]",
            "str fp, [sp, 0x44]",
            "add r1, sp, 0x248",
            "ldm r1, {r0, r1}",
            "add sl, sp, 0x20",
            "ldm sl, {sb, sl}",
            "str r4, [sp, 0x254]",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "and r4, r4, sl",
            "add fp, sp, 0x240",
            "ldm fp, {sl, fp}",
            "eor fp, fp, r1",
            "eor sl, sl, r0",
            "add r2, sp, 0x10",
            "ldm r2, {r1, r2}",
            "and r3, r3, sb",
            "str sl, [sp, 0x60]",
            "str fp, [sp, 0x64]",
            "add sl, sp, 0x40",
            "ldm sl, {sb, sl}",
            "adds r1, r1, sb",
            "adc r2, r2, sl",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "add fp, sp, 0x60",
            "ldm fp, {sl, fp}",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "orr r1, r1, r3",
            "orr r2, r2, r4",
            "add r4, sp, 0x250",
            "ldm r4, {r3, r4}",
            "eor sl, sl, r3",
            "eor fp, fp, r4",
            "str sl, [sp, 0x40]",
            "str fp, [sp, 0x44]",
            "add sl, sp, 0x10",
            "ldm sl, {sb, sl}",
            "add ip, sp, 0x50",
            "ldm ip, {fp, ip}",
            "adds sb, sb, fp",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "adc sl, sl, ip",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "adds r1, r1, sb",
            "adc r2, r2, sl",
            "adds sb, sb, r7",
            "adc sl, sl, r8",
            "str sb, [sp, 0x18]",
            "str sl, [sp, 0x1c]",
            "str sb, [sp, 0x710]",
            "str sl, [sp, 0x714]",
            "str r1, [sp, 0x730]",
            "str r2, [sp, 0x734]",
            "ldr r4, [sp, 0x68]",
            "ldr r8, [sp, 0x6c]",
            "cmp r4, 0",
            "add r8, r8, 0x50",
            "ldm r8, {r7, r8}",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "bne 0xb76b4",
            "ldr sl, [sp, 0x70]",
            "add sl, sl, 0x50",
            "ldm sl, {sb, sl}",
            "str sb, [sp, 0x50]",
            "str sl, [sp, 0x54]",
            "str sb, [sp, 0x6d0]",
            "str sl, [sp, 0x6d4]",
            "ldr fp, [sp, 0x18]",
            "ldr lr, [sp, 0x1c]",
            "lsr r0, fp, 0x12",
            "orr lr, r0, lr, lsl 14",
            "ldr r0, [sp, 0x1c]",
            "lsr r3, fp, 0xe",
            "ldr r8, [sp, 0x18]",
            "orr r0, r3, r0, lsl 18",
            "add fp, sp, 0x48",
            "ldm fp, {sl, fp}",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "eor sl, sl, r3",
            "eor fp, fp, r4",
            "str r0, [sp, 0x260]",
            "ldr r4, [sp, 0x1c]",
            "lsl r0, r8, 0x17",
            "add r8, sp, 0x18",
            "ldm r8, {r7, r8}",
            "and r7, r7, sl",
            "and r8, r8, fp",
            "str r7, [sp, 0x60]",
            "str r8, [sp, 0x64]",
            "ldr r8, [sp, 0x18]",
            "str lr, [sp, 0x258]",
            "lsr ip, r4, 0xe",
            "lsr lr, r4, 0x12",
            "lsl r3, r1, 0x1e",
            "lsr r4, r1, 0x1c",
            "orr r8, lr, r8, lsl 14",
            "ldr sb, [sp, 0x18]",
            "orr r3, r3, r2, lsr 2",
            "orr r4, r4, r2, lsl 4",
            "str r8, [sp, 0x25c]",
            "ldr sl, [sp, 0x1c]",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "str r3, [sp, 0x270]",
            "str r4, [sp, 0x278]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "adds r3, r3, r7",
            "adc r4, r4, r8",
            "orr sb, ip, sb, lsl 18",
            "ldr fp, [sp, 0x1c]",
            "str sb, [sp, 0x264]",
            "orr sl, r0, sl, lsr 9",
            "add sb, sp, 0x60",
            "ldm sb, {r8, sb}",
            "str r3, [sp, 0x40]",
            "str r4, [sp, 0x44]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "eor sb, sb, r4",
            "ldr r4, [sp, 0x18]",
            "lsl r0, fp, 0x17",
            "str sl, [sp, 0x268]",
            "lsl sl, r2, 0x1e",
            "eor r8, r8, r3",
            "orr r4, r0, r4, lsr 9",
            "orr sl, sl, r1, lsr 2",
            "lsr ip, r2, 0x1c",
            "lsl lr, r1, 0x19",
            "str r8, [sp, 0x30]",
            "str sb, [sp, 0x34]",
            "add r8, sp, 0x260",
            "ldm r8, {r7, r8}",
            "str r4, [sp, 0x26c]",
            "str sl, [sp, 0x274]",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "add fp, sp, 0x258",
            "ldm fp, {sl, fp}",
            "orr sb, r2, r4",
            "eor fp, fp, r8",
            "orr ip, ip, r1, lsl 4",
            "orr r8, r1, r3",
            "orr lr, lr, r2, lsr 7",
            "eor sl, sl, r7",
            "str ip, [sp, 0x27c]",
            "str lr, [sp, 0x280]",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add r4, sp, 0x268",
            "ldm r4, {r3, r4}",
            "eor r7, sl, r3",
            "eor r8, fp, r4",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add sl, sp, 0x20",
            "ldm sl, {sb, sl}",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "and r7, r7, sb",
            "and r8, r8, sl",
            "add r4, sp, 0x28",
            "ldm r4, {r3, r4}",
            "str r7, [sp, 0x60]",
            "str r8, [sp, 0x64]",
            "add r8, sp, 0x270",
            "ldm r8, {r7, r8}",
            "and sl, r1, r3",
            "and fp, r2, r4",
            "lsl r0, r2, 0x19",
            "add r4, sp, 0x278",
            "ldm r4, {r3, r4}",
            "eor r7, r7, r3",
            "eor r8, r8, r4",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "orr r0, r0, r1, lsr 7",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r0, [sp, 0x284]",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "orr r3, r3, sl",
            "add sl, sp, 0x280",
            "ldm sl, {sb, sl}",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "orr r4, r4, fp",
            "add fp, sp, 0x40",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r7",
            "adc fp, fp, r8",
            "add sb, sp, 0x30",
            "ldm sb, {r8, sb}",
            "adds r3, r3, r8",
            "adc r4, r4, sb",
            "adds r3, r3, sl",
            "adc r4, r4, fp",
            "adds sl, sl, r5",
            "adc fp, fp, r6",
            "ldr sb, [sp, 0x68]",
            "str sl, [sp, 0x30]",
            "str fp, [sp, 0x34]",
            "str sl, [sp, 0x708]",
            "str fp, [sp, 0x70c]",
            "ldr fp, [sp, 0x6c]",
            "str r3, [sp, 0x728]",
            "str r4, [sp, 0x72c]",
            "add fp, fp, 0x58",
            "ldm fp, {sl, fp}",
            "cmp sb, 0",
            "str sl, [sp, 0x58]",
            "str fp, [sp, 0x5c]",
            "bne 0xb7550",
            "ldr ip, [sp, 0x70]",
            "add ip, ip, 0x58",
            "ldm ip, {fp, ip}",
            "str fp, [sp, 0x50]",
            "str ip, [sp, 0x54]",
            "str fp, [sp, 0x6d8]",
            "str ip, [sp, 0x6dc]",
            "ldr lr, [sp, 0x30]",
            "ldr r7, [sp, 0x34]",
            "lsr r0, lr, 0xe",
            "orr r7, r0, r7, lsl 18",
            "ldr r6, [sp, 0x34]",
            "add sl, sp, 0x48",
            "ldm sl, {sb, sl}",
            "lsr ip, lr, 0x12",
            "str r7, [sp, 0x290]",
            "add r8, sp, 0x18",
            "ldm r8, {r7, r8}",
            "eor r8, r8, sl",
            "ldr sl, [sp, 0x34]",
            "orr r6, ip, r6, lsl 14",
            "eor r7, r7, sb",
            "ldr r0, [sp, 0x30]",
            "str r6, [sp, 0x288]",
            "lsr r5, sl, 0x12",
            "lsr lr, sl, 0xe",
            "ldr fp, [sp, 0x30]",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "lsr r6, r3, 0x1c",
            "and sb, sb, r7",
            "and sl, sl, r8",
            "str sb, [sp, 0x60]",
            "str sl, [sp, 0x64]",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "lsl ip, r0, 0x17",
            "ldr sl, [sp, 0x30]",
            "orr r6, r6, r4, lsl 4",
            "lsl r0, r3, 0x1e",
            "orr fp, lr, fp, lsl 18",
            "orr r0, r0, r4, lsr 2",
            "ldr lr, [sp, 0x34]",
            "str r6, [sp, 0x2a8]",
            "add r7, sp, 0x38",
            "ldm r7, {r6, r7}",
            "adds r6, r6, r8",
            "adc r7, r7, sb",
            "orr sl, r5, sl, lsl 14",
            "str r0, [sp, 0x2a0]",
            "ldr r0, [sp, 0x34]",
            "str sl, [sp, 0x28c]",
            "orr lr, ip, lr, lsr 9",
            "add sl, sp, 0x60",
            "ldm sl, {sb, sl}",
            "str r6, [sp, 0x40]",
            "str r7, [sp, 0x44]",
            "add r7, sp, 0x48",
            "ldm r7, {r6, r7}",
            "eor sl, sl, r7",
            "ldr r7, [sp, 0x30]",
            "lsl ip, r0, 0x17",
            "eor sb, sb, r6",
            "str fp, [sp, 0x294]",
            "str lr, [sp, 0x298]",
            "lsl r0, r4, 0x1e",
            "lsr lr, r4, 0x1c",
            "lsl r5, r3, 0x19",
            "str sb, [sp, 0x38]",
            "str sl, [sp, 0x3c]",
            "add fp, sp, 0x290",
            "ldm fp, {sl, fp}",
            "add sb, sp, 0x288",
            "ldm sb, {r8, sb}",
            "orr r7, ip, r7, lsr 9",
            "eor r8, r8, sl",
            "eor sb, sb, fp",
            "orr r0, r0, r3, lsr 2",
            "orr r5, r5, r4, lsr 7",
            "orr lr, lr, r3, lsl 4",
            "str r7, [sp, 0x29c]",
            "str r0, [sp, 0x2a4]",
            "str r5, [sp, 0x2b0]",
            "str lr, [sp, 0x2ac]",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "add r6, sp, 0x38",
            "ldm r6, {r5, r6}",
            "add ip, sp, 0x40",
            "ldm ip, {fp, ip}",
            "adds fp, fp, r5",
            "adc ip, ip, r6",
            "str fp, [sp, 0x40]",
            "str ip, [sp, 0x44]",
            "add sl, sp, 0x58",
            "ldm sl, {sb, sl}",
            "add ip, sp, 0x298",
            "ldm ip, {fp, ip}",
            "orr r7, r3, r1",
            "eor sb, sb, fp",
            "eor sl, sl, ip",
            "orr r8, r4, r2",
            "str sb, [sp, 0x38]",
            "str sl, [sp, 0x3c]",
            "add sl, sp, 0x28",
            "ldm sl, {sb, sl}",
            "and r5, r7, sb",
            "and r6, r8, sl",
            "str r5, [sp, 0x58]",
            "str r6, [sp, 0x5c]",
            "add fp, sp, 0x2a0",
            "ldm fp, {sl, fp}",
            "add r6, sp, 0x2a8",
            "ldm r6, {r5, r6}",
            "lsl r0, r4, 0x19",
            "eor sl, sl, r5",
            "eor fp, fp, r6",
            "str sl, [sp, 0x60]",
            "str fp, [sp, 0x64]",
            "add ip, sp, 0x38",
            "ldm ip, {fp, ip}",
            "add sl, sp, 0x40",
            "ldm sl, {sb, sl}",
            "orr r0, r0, r3, lsr 7",
            "adds sb, sb, fp",
            "adc sl, sl, ip",
            "and r7, r3, r1",
            "and r8, r4, r2",
            "str r0, [sp, 0x2b4]",
            "str sb, [sp, 0x40]",
            "str sl, [sp, 0x44]",
            "add r6, sp, 0x58",
            "ldm r6, {r5, r6}",
            "add sl, sp, 0x2b0",
            "ldm sl, {sb, sl}",
            "orr r5, r5, r7",
            "orr r6, r6, r8",
            "add r8, sp, 0x60",
            "ldm r8, {r7, r8}",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "str r7, [sp, 0x38]",
            "str r8, [sp, 0x3c]",
            "add fp, sp, 0x40",
            "ldm fp, {sl, fp}",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "adds sl, sl, r7",
            "adc fp, fp, r8",
            "add sb, sp, 0x38",
            "ldm sb, {r8, sb}",
            "adds r5, r5, r8",
            "adc r6, r6, sb",
            "adds r5, r5, sl",
            "adc r6, r6, fp",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "adds sl, sl, r7",
            "adc fp, fp, r8",
            "str sl, [sp, 0x700]",
            "str fp, [sp, 0x704]",
            "str r5, [sp, 0x720]",
            "str r6, [sp, 0x724]",
            "ldr r8, [sp, 0x68]",
            "str sl, [sp, 0x38]",
            "str fp, [sp, 0x3c]",
            "ldr sl, [sp, 0x6c]",
            "cmp r8, 0",
            "add sl, sl, 0x60",
            "ldm sl, {sb, sl}",
            "str sb, [sp, 0x50]",
            "str sl, [sp, 0x54]",
            "bne 0xb73d8",
            "ldr fp, [sp, 0x70]",
            "add fp, fp, 0x60",
            "ldm fp, {sl, fp}",
            "str sl, [sp, 0x40]",
            "str fp, [sp, 0x44]",
            "str sl, [sp, 0x6e0]",
            "str fp, [sp, 0x6e4]",
            "ldr lr, [sp, 0x38]",
            "ldr r8, [sp, 0x3c]",
            "lsr ip, lr, 0x12",
            "orr r8, ip, r8, lsl 14",
            "add fp, sp, 0x30",
            "ldm fp, {sl, fp}",
            "str r8, [sp, 0x2b8]",
            "ldr sb, [sp, 0x3c]",
            "add r8, sp, 0x18",
            "ldm r8, {r7, r8}",
            "eor sl, sl, r7",
            "eor fp, fp, r8",
            "str sl, [sp, 0x20]",
            "str fp, [sp, 0x24]",
            "ldr r8, [sp, 0x3c]",
            "lsr r0, lr, 0xe",
            "ldr sl, [sp, 0x38]",
            "orr sb, r0, sb, lsl 18",
            "lsr fp, r5, 0x1c",
            "lsr r7, r8, 0x12",
            "lsr lr, r8, 0xe",
            "lsl ip, sl, 0x17",
            "str fp, [sp, 0x60]",
            "str sb, [sp, 0x2c0]",
            "add fp, sp, 0x20",
            "ldm fp, {sl, fp}",
            "add sb, sp, 0x38",
            "ldm sb, {r8, sb}",
            "and r8, r8, sl",
            "and sb, sb, fp",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "ldr fp, [sp, 0x38]",
            "ldr r8, [sp, 0x3c]",
            "ldr sb, [sp, 0x60]",
            "ldr sl, [sp, 0x3c]",
            "orr fp, r7, fp, lsl 14",
            "orr r8, ip, r8, lsr 9",
            "orr sb, sb, r6, lsl 4",
            "lsl ip, sl, 0x17",
            "str fp, [sp, 0x2bc]",
            "ldr r7, [sp, 0x38]",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "str r8, [sp, 0x2c8]",
            "str sb, [sp, 0x2d8]",
            "add sb, sp, 0x48",
            "ldm sb, {r8, sb}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "lsl r0, r5, 0x1e",
            "add fp, sp, 0x18",
            "ldm fp, {sl, fp}",
            "orr r7, lr, r7, lsl 18",
            "orr r0, r0, r6, lsr 2",
            "str r8, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "eor sb, sb, fp",
            "ldr fp, [sp, 0x38]",
            "str r7, [sp, 0x2c4]",
            "str r0, [sp, 0x2d0]",
            "lsr lr, r6, 0x1c",
            "lsl r0, r6, 0x1e",
            "lsl r7, r5, 0x19",
            "eor r8, r8, sl",
            "orr fp, ip, fp, lsr 9",
            "orr r0, r0, r5, lsr 2",
            "orr r7, r7, r6, lsr 7",
            "orr lr, lr, r5, lsl 4",
            "str r8, [sp, 0x48]",
            "str sb, [sp, 0x4c]",
            "str fp, [sp, 0x2cc]",
            "str r0, [sp, 0x2d4]",
            "orr fp, r6, r4",
            "str lr, [sp, 0x2dc]",
            "add sl, sp, 0x2c0",
            "ldm sl, {sb, sl}",
            "str r7, [sp, 0x2e0]",
            "add r8, sp, 0x2b8",
            "ldm r8, {r7, r8}",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "orr sl, r5, r3",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "adds fp, fp, r7",
            "adc ip, ip, r8",
            "str fp, [sp, 0x20]",
            "str ip, [sp, 0x24]",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x2c8",
            "ldm fp, {sl, fp}",
            "eor r8, r8, sl",
            "eor sb, sb, fp",
            "str r8, [sp, 0x48]",
            "str sb, [sp, 0x4c]",
            "add ip, sp, 0x50",
            "ldm ip, {fp, ip}",
            "and r7, r5, r3",
            "and fp, fp, r1",
            "and ip, ip, r2",
            "and r8, r6, r4",
            "str fp, [sp, 0x58]",
            "str ip, [sp, 0x5c]",
            "add fp, sp, 0x2d8",
            "ldm fp, {sl, fp}",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "add sb, sp, 0x2d0",
            "ldm sb, {r8, sb}",
            "eor r8, r8, sl",
            "eor sb, sb, fp",
            "str r8, [sp, 0x60]",
            "str sb, [sp, 0x64]",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "lsl r0, r6, 0x19",
            "adds fp, fp, r7",
            "adc ip, ip, r8",
            "orr r0, r0, r5, lsr 7",
            "str fp, [sp, 0x20]",
            "str ip, [sp, 0x24]",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "str r0, [sp, 0x2e4]",
            "orr r8, r8, sl",
            "orr sb, sb, fp",
            "str r8, [sp, 0x10]",
            "str sb, [sp, 0x14]",
            "add ip, sp, 0x60",
            "ldm ip, {fp, ip}",
            "add r8, sp, 0x2e0",
            "ldm r8, {r7, r8}",
            "eor fp, fp, r7",
            "eor ip, ip, r8",
            "str fp, [sp, 0x48]",
            "str ip, [sp, 0x4c]",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x40",
            "ldm fp, {sl, fp}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r8, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "add ip, sp, 0x10",
            "ldm ip, {fp, ip}",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "adds fp, fp, r7",
            "adc ip, ip, r8",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "adds fp, fp, r8",
            "adc ip, ip, sb",
            "str fp, [sp, 0x10]",
            "str ip, [sp, 0x14]",
            "add fp, sp, 0x28",
            "ldm fp, {sl, fp}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r8, [sp, 0x738]",
            "str sb, [sp, 0x73c]",
            "add ip, sp, 0x10",
            "ldm ip, {fp, ip}",
            "str fp, [sp, 0x718]",
            "str ip, [sp, 0x71c]",
            "ldr ip, [sp, 0x68]",
            "str r8, [sp, 0x48]",
            "str sb, [sp, 0x4c]",
            "ldr r8, [sp, 0x6c]",
            "cmp ip, 0",
            "add r8, r8, 0x68",
            "ldm r8, {r7, r8}",
            "str r7, [sp, 0x28]",
            "str r8, [sp, 0x2c]",
            "bne 0xb7270",
            "ldr sl, [sp, 0x70]",
            "add sl, sl, 0x68",
            "ldm sl, {sb, sl}",
            "str sb, [sp, 0x40]",
            "str sl, [sp, 0x44]",
            "str sb, [sp, 0x6e8]",
            "str sl, [sp, 0x6ec]",
            "ldr fp, [sp, 0x48]",
            "ldr r7, [sp, 0x4c]",
            "lsr ip, fp, 0x12",
            "ldr r8, [sp, 0x4c]",
            "lsr r0, fp, 0xe",
            "orr r7, ip, r7, lsl 14",
            "add sl, sp, 0x38",
            "ldm sl, {sb, sl}",
            "add ip, sp, 0x30",
            "ldm ip, {fp, ip}",
            "eor sb, sb, fp",
            "eor sl, sl, ip",
            "str sb, [sp, 0x20]",
            "str sl, [sp, 0x24]",
            "orr r8, r0, r8, lsl 18",
            "ldr sb, [sp, 0x10]",
            "ldr ip, [sp, 0x4c]",
            "str r8, [sp, 0x2f0]",
            "ldr r8, [sp, 0x48]",
            "lsr sl, sb, 0x1c",
            "lsr lr, ip, 0xe",
            "lsl r0, sb, 0x1e",
            "str sl, [sp, 0x58]",
            "str r7, [sp, 0x2e8]",
            "add fp, sp, 0x20",
            "ldm fp, {sl, fp}",
            "lsr r7, ip, 0x12",
            "lsl ip, r8, 0x17",
            "add sb, sp, 0x48",
            "ldm sb, {r8, sb}",
            "and sb, sb, fp",
            "ldr fp, [sp, 0x48]",
            "and r8, r8, sl",
            "str r8, [sp, 0x50]",
            "str sb, [sp, 0x54]",
            "orr fp, r7, fp, lsl 14",
            "ldr sb, [sp, 0x14]",
            "ldr r7, [sp, 0x48]",
            "orr sb, r0, sb, lsr 2",
            "orr r7, lr, r7, lsl 18",
            "ldr sl, [sp, 0x58]",
            "str fp, [sp, 0x2ec]",
            "ldr r8, [sp, 0x4c]",
            "ldr fp, [sp, 0x14]",
            "ldr lr, [sp, 0x4c]",
            "str r7, [sp, 0x2f4]",
            "str sb, [sp, 0x300]",
            "ldr r7, [sp, 0x14]",
            "ldr sb, [sp, 0x10]",
            "orr r8, ip, r8, lsr 9",
            "orr fp, sl, fp, lsl 4",
            "lsl ip, lr, 0x17",
            "lsl r0, r7, 0x1e",
            "str r8, [sp, 0x2f8]",
            "str fp, [sp, 0x308]",
            "lsr lr, r7, 0x1c",
            "add fp, sp, 0x28",
            "ldm fp, {sl, fp}",
            "lsl r7, sb, 0x19",
            "add sb, sp, 0x18",
            "ldm sb, {r8, sb}",
            "adds sl, sl, r8",
            "adc fp, fp, sb",
            "str sl, [sp, 0x20]",
            "str fp, [sp, 0x24]",
            "add sb, sp, 0x30",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "eor sl, sl, r8",
            "eor fp, fp, sb",
            "str sl, [sp, 0x28]",
            "str fp, [sp, 0x2c]",
            "ldr sb, [sp, 0x48]",
            "ldr sl, [sp, 0x10]",
            "ldr fp, [sp, 0x10]",
            "orr sb, ip, sb, lsr 9",
            "ldr ip, [sp, 0x14]",
            "orr sl, r0, sl, lsr 2",
            "orr fp, lr, fp, lsl 4",
            "str sb, [sp, 0x2fc]",
            "str sl, [sp, 0x304]",
            "str fp, [sp, 0x30c]",
            "add sl, sp, 0x2f0",
            "ldm sl, {sb, sl}",
            "orr ip, r7, ip, lsr 7",
            "add r8, sp, 0x2e8",
            "ldm r8, {r7, r8}",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "add fp, sp, 0x10",
            "ldm fp, {sl, fp}",
            "orr sl, sl, r5",
            "orr fp, fp, r6",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "add sl, sp, 0x28",
            "ldm sl, {sb, sl}",
            "ldr fp, [sp, 0x14]",
            "adds r7, r7, sb",
            "adc r8, r8, sl",
            "str r7, [sp, 0x20]",
            "str r8, [sp, 0x24]",
            "add r8, sp, 0x2f8",
            "ldm r8, {r7, r8}",
            "lsl r0, fp, 0x19",
            "add fp, sp, 0x58",
            "ldm fp, {sl, fp}",
            "eor fp, fp, r8",
            "add sb, sp, 0x50",
            "ldm sb, {r8, sb}",
            "and r8, r8, r3",
            "and sb, sb, r4",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "eor sl, sl, r7",
            "ldr sb, [sp, 0x10]",
            "str sl, [sp, 0x28]",
            "str fp, [sp, 0x2c]",
            "add fp, sp, 0x10",
            "ldm fp, {sl, fp}",
            "add r8, sp, 0x308",
            "ldm r8, {r7, r8}",
            "and sl, sl, r5",
            "and fp, fp, r6",
            "str sl, [sp, 0x60]",
            "str fp, [sp, 0x64]",
            "orr sb, r0, sb, lsr 7",
            "str ip, [sp, 0x310]",
            "add ip, sp, 0x300",
            "ldm ip, {fp, ip}",
            "eor fp, fp, r7",
            "eor ip, ip, r8",
            "str fp, [sp, 0x50]",
            "str ip, [sp, 0x54]",
            "add fp, sp, 0x28",
            "ldm fp, {sl, fp}",
            "str sb, [sp, 0x314]",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r8, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "add ip, sp, 0x58",
            "ldm ip, {fp, ip}",
            "add r8, sp, 0x60",
            "ldm r8, {r7, r8}",
            "orr fp, fp, r7",
            "orr ip, ip, r8",
            "str fp, [sp, 0x28]",
            "str ip, [sp, 0x2c]",
            "add fp, sp, 0x310",
            "ldm fp, {sl, fp}",
            "add sb, sp, 0x50",
            "ldm sb, {r8, sb}",
            "eor r8, r8, sl",
            "eor sb, sb, fp",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "adds fp, fp, r7",
            "adc ip, ip, r8",
            "str fp, [sp, 0x20]",
            "str ip, [sp, 0x24]",
            "add sb, sp, 0x28",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x58",
            "ldm fp, {sl, fp}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "adds r8, r8, fp",
            "mov sl, fp",
            "adc sb, sb, ip",
            "adds sl, sl, r1",
            "adc fp, ip, r2",
            "str sl, [sp, 0x730]",
            "str fp, [sp, 0x734]",
            "str r8, [sp, 0x710]",
            "str sb, [sp, 0x714]",
            "ldr ip, [sp, 0x68]",
            "ldr r1, [sp, 0x6c]",
            "cmp ip, 0",
            "add r1, r1, 0x70",
            "ldm r1, {r0, r1}",
            "str r8, [sp, 0x28]",
            "str sb, [sp, 0x2c]",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "bne 0xb70fc",
            "ldr sb, [sp, 0x70]",
            "add sb, sb, 0x70",
            "ldm sb, {r8, sb}",
            "str r8, [sp, 0x50]",
            "str sb, [sp, 0x54]",
            "str r8, [sp, 0x6f0]",
            "str sb, [sp, 0x6f4]",
            "lsr r1, sl, 0x12",
            "orr r1, r1, fp, lsl 14",
            "add r8, sp, 0x38",
            "ldm r8, {r7, r8}",
            "str r1, [sp, 0x318]",
            "add r1, sp, 0x48",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r7",
            "eor r1, r1, r8",
            "ldr r8, [sp, 0x28]",
            "str r0, [sp, 0x40]",
            "str r1, [sp, 0x44]",
            "lsr r2, sl, 0xe",
            "ldr r1, [sp, 0x28]",
            "orr r2, r2, fp, lsl 18",
            "lsl r8, r8, 0x1e",
            "lsr ip, fp, 0x12",
            "str r8, [sp, 0x60]",
            "lsr lr, r1, 0x1c",
            "str r2, [sp, 0x320]",
            "orr ip, ip, sl, lsl 14",
            "add r2, sp, 0x40",
            "ldm r2, {r1, r2}",
            "and r7, sl, r1",
            "and r8, fp, r2",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "ldr r2, [sp, 0x60]",
            "str ip, [sp, 0x31c]",
            "ldr r7, [sp, 0x2c]",
            "ldr r8, [sp, 0x2c]",
            "ldr ip, [sp, 0x2c]",
            "ldr r1, [sp, 0x28]",
            "orr r7, r2, r7, lsr 2",
            "orr r8, lr, r8, lsl 4",
            "lsl ip, ip, 0x1e",
            "str ip, [sp, 0x60]",
            "str r7, [sp, 0x330]",
            "str r8, [sp, 0x338]",
            "lsl ip, r1, 0x19",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "add r2, sp, 0x20",
            "ldm r2, {r1, r2}",
            "adds r7, r7, r1",
            "adc r8, r8, r2",
            "ldr lr, [sp, 0x2c]",
            "add r2, sp, 0x38",
            "ldm r2, {r1, r2}",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "lsr r0, fp, 0xe",
            "eor r7, r7, r1",
            "eor r8, r8, r2",
            "lsl sb, sl, 0x17",
            "str r7, [sp, 0x20]",
            "str r8, [sp, 0x24]",
            "ldr r2, [sp, 0x60]",
            "orr r0, r0, sl, lsl 18",
            "orr sb, sb, fp, lsr 9",
            "ldr r7, [sp, 0x28]",
            "ldr r8, [sp, 0x28]",
            "str r0, [sp, 0x324]",
            "str sb, [sp, 0x328]",
            "lsr r0, lr, 0x1c",
            "lsl sb, fp, 0x17",
            "orr r7, r2, r7, lsr 2",
            "orr r8, r0, r8, lsl 4",
            "orr sb, sb, sl, lsr 9",
            "str sb, [sp, 0x32c]",
            "str r7, [sp, 0x334]",
            "orr sb, ip, lr, lsr 7",
            "str r8, [sp, 0x33c]",
            "add r8, sp, 0x320",
            "ldm r8, {r7, r8}",
            "add r1, sp, 0x318",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r7",
            "eor r1, r1, r8",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "str sb, [sp, 0x340]",
            "add sb, sp, 0x28",
            "ldm sb, {r8, sb}",
            "orr r8, r8, r0",
            "orr sb, sb, r1",
            "str r8, [sp, 0x30]",
            "str sb, [sp, 0x34]",
            "add r1, sp, 0x20",
            "ldm r1, {r0, r1}",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r0",
            "adc r8, r8, r1",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add r1, sp, 0x328",
            "ldm r1, {r0, r1}",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "eor r7, r7, r0",
            "eor r8, r8, r1",
            "str r7, [sp, 0x20]",
            "str r8, [sp, 0x24]",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "add r1, sp, 0x28",
            "ldm r1, {r0, r1}",
            "and r7, r7, r5",
            "and r8, r8, r6",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "ldr r8, [sp, 0x28]",
            "lsl r2, lr, 0x19",
            "orr r8, r2, r8, lsr 7",
            "str r8, [sp, 0x344]",
            "add r8, sp, 0x10",
            "ldm r8, {r7, r8}",
            "and r0, r0, r7",
            "and r1, r1, r8",
            "str r0, [sp, 0x60]",
            "str r1, [sp, 0x64]",
            "add sb, sp, 0x330",
            "ldm sb, {r8, sb}",
            "add r1, sp, 0x338",
            "ldm r1, {r0, r1}",
            "eor r8, r8, r0",
            "eor sb, sb, r1",
            "str r8, [sp, 0x30]",
            "str sb, [sp, 0x34]",
            "add r2, sp, 0x40",
            "ldm r2, {r1, r2}",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "adds r1, r1, r7",
            "adc r2, r2, r8",
            "str r1, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "add r1, sp, 0x60",
            "ldm r1, {r0, r1}",
            "orr r8, r8, r0",
            "orr sb, sb, r1",
            "str r8, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "add r2, sp, 0x30",
            "ldm r2, {r1, r2}",
            "add r8, sp, 0x340",
            "ldm r8, {r7, r8}",
            "eor r1, r1, r7",
            "eor r2, r2, r8",
            "str r1, [sp, 0x58]",
            "str r2, [sp, 0x5c]",
            "add sb, sp, 0x40",
            "ldm sb, {r8, sb}",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "adds r8, r8, r0",
            "adc sb, sb, r1",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "add r2, sp, 0x20",
            "ldm r2, {r1, r2}",
            "adds r1, r1, r7",
            "adc r2, r2, r8",
            "add sb, sp, 0x40",
            "ldm sb, {r8, sb}",
            "adds r1, r1, r8",
            "adc r2, r2, sb",
            "adds r0, r8, r3",
            "str r1, [sp, 0x20]",
            "str r2, [sp, 0x24]",
            "add r3, sp, 0x20",
            "ldm r3, {r2, r3}",
            "adc r1, sb, r4",
            "str r2, [sp, 0x708]",
            "str r3, [sp, 0x70c]",
            "str r0, [sp, 0x728]",
            "str r1, [sp, 0x72c]",
            "ldr r3, [sp, 0x68]",
            "ldr r8, [sp, 0x6c]",
            "cmp r3, 0",
            "add r8, r8, 0x78",
            "ldm r8, {r7, r8}",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "bne 0xb6f88",
            "ldr sb, [sp, 0x70]",
            "add sb, sb, 0x78",
            "ldm sb, {r8, sb}",
            "str r8, [sp, 0x30]",
            "str sb, [sp, 0x34]",
            "str r8, [sp, 0x6f8]",
            "str sb, [sp, 0x6fc]",
            "lsr r3, r0, 0xe",
            "orr r3, r3, r1, lsl 18",
            "lsr r2, r0, 0x12",
            "add r8, sp, 0x48",
            "ldm r8, {r7, r8}",
            "str r3, [sp, 0x350]",
            "orr r2, r2, r1, lsl 14",
            "eor r3, fp, r8",
            "ldr r8, [sp, 0x20]",
            "str r2, [sp, 0x348]",
            "eor r2, sl, r7",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "lsr r3, r8, 0x1c",
            "str r3, [sp, 0x60]",
            "lsl lr, r8, 0x1e",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "lsr sb, r1, 0xe",
            "and r7, r0, r3",
            "and r8, r1, r4",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "orr sb, sb, r0, lsl 18",
            "ldr r7, [sp, 0x60]",
            "ldr r4, [sp, 0x24]",
            "ldr r8, [sp, 0x24]",
            "str sb, [sp, 0x354]",
            "ldr r3, [sp, 0x20]",
            "ldr sb, [sp, 0x24]",
            "lsr r2, r1, 0x12",
            "orr r4, lr, r4, lsr 2",
            "orr r8, r7, r8, lsl 4",
            "orr r2, r2, r0, lsl 14",
            "str r2, [sp, 0x34c]",
            "lsl r7, r3, 0x19",
            "str r4, [sp, 0x360]",
            "add r3, sp, 0x40",
            "ldm r3, {r2, r3}",
            "lsr r4, sb, 0x1c",
            "str r8, [sp, 0x368]",
            "lsl lr, sb, 0x1e",
            "add sb, sp, 0x38",
            "ldm sb, {r8, sb}",
            "adds r8, r8, r2",
            "adc sb, sb, r3",
            "str r8, [sp, 0x60]",
            "str sb, [sp, 0x64]",
            "add r3, sp, 0x48",
            "ldm r3, {r2, r3}",
            "add sb, sp, 0x58",
            "ldm sb, {r8, sb}",
            "eor r8, r8, r2",
            "eor sb, sb, r3",
            "str r8, [sp, 0x38]",
            "str sb, [sp, 0x3c]",
            "ldr r3, [sp, 0x20]",
            "ldr r8, [sp, 0x20]",
            "lsl ip, r0, 0x17",
            "orr ip, ip, r1, lsr 9",
            "ldr sb, [sp, 0x24]",
            "orr r8, r4, r8, lsl 4",
            "str ip, [sp, 0x358]",
            "orr r3, lr, r3, lsr 2",
            "lsl ip, r1, 0x17",
            "orr sb, r7, sb, lsr 7",
            "orr ip, ip, r0, lsr 9",
            "str r3, [sp, 0x364]",
            "str r8, [sp, 0x36c]",
            "add r3, sp, 0x348",
            "ldm r3, {r2, r3}",
            "add r8, sp, 0x350",
            "ldm r8, {r7, r8}",
            "eor r2, r2, r7",
            "eor r3, r3, r8",
            "str ip, [sp, 0x35c]",
            "str sb, [sp, 0x370]",
            "str r2, [sp, 0x40]",
            "str r3, [sp, 0x44]",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "orr sb, sb, r3",
            "ldr r3, [sp, 0x24]",
            "orr r8, r8, r2",
            "str r8, [sp, 0x50]",
            "str sb, [sp, 0x54]",
            "add r8, sp, 0x60",
            "ldm r8, {r7, r8}",
            "lsl ip, r3, 0x19",
            "add r3, sp, 0x38",
            "ldm r3, {r2, r3}",
            "adds r7, r7, r2",
            "adc r8, r8, r3",
            "str r7, [sp, 0x60]",
            "str r8, [sp, 0x64]",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x10",
            "ldm r8, {r7, r8}",
            "and r4, r4, r8",
            "ldr r8, [sp, 0x20]",
            "and r3, r3, r7",
            "orr r8, ip, r8, lsr 7",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "add r3, sp, 0x40",
            "ldm r3, {r2, r3}",
            "str r8, [sp, 0x374]",
            "add r8, sp, 0x358",
            "ldm r8, {r7, r8}",
            "eor r2, r2, r7",
            "eor r3, r3, r8",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "and r8, r8, r2",
            "and sb, sb, r3",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "add r4, sp, 0x360",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x368",
            "ldm r8, {r7, r8}",
            "eor r3, r3, r7",
            "eor r4, r4, r8",
            "str r3, [sp, 0x20]",
            "str r4, [sp, 0x24]",
            "add sb, sp, 0x60",
            "ldm sb, {r8, sb}",
            "add r3, sp, 0x50",
            "ldm r3, {r2, r3}",
            "adds r8, r8, r2",
            "adc sb, sb, r3",
            "str r8, [sp, 0x60]",
            "str sb, [sp, 0x64]",
            "add r4, sp, 0x38",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "orr r3, r3, r7",
            "orr r4, r4, r8",
            "str r3, [sp, 0x28]",
            "str r4, [sp, 0x2c]",
            "add sb, sp, 0x20",
            "ldm sb, {r8, sb}",
            "add r3, sp, 0x370",
            "ldm r3, {r2, r3}",
            "eor r8, r8, r2",
            "eor sb, sb, r3",
            "str r8, [sp, 0x38]",
            "str sb, [sp, 0x3c]",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "adds r3, r3, r7",
            "adc r4, r4, r8",
            "str r3, [sp, 0x60]",
            "str r4, [sp, 0x64]",
            "add sb, sp, 0x28",
            "ldm sb, {r8, sb}",
            "add r3, sp, 0x38",
            "ldm r3, {r2, r3}",
            "adds r8, r8, r2",
            "adc sb, sb, r3",
            "ldr r3, [sp, 0x68]",
            "add r3, r3, 0x10",
            "str r3, [sp, 0x68]",
            "add r3, sp, 0x60",
            "ldm r3, {r2, r3}",
            "adds r8, r8, r2",
            "adc sb, sb, r3",
            "str r8, [sp, 0x28]",
            "str sb, [sp, 0x2c]",
            "adds r7, r2, r5",
            "adc r8, r3, r6",
            "add r5, sp, 0x28",
            "ldm r5, {r4, r5}",
            "ldr r3, [sp, 0x68]",
            "str r4, [sp, 0x700]",
            "str r5, [sp, 0x704]",
            "ldr r5, [sp, 0x6c]",
            "cmp r3, 0x50",
            "add r5, r5, 0x80",
            "str r7, [sp, 0x720]",
            "str r8, [sp, 0x724]",
            "str r5, [sp, 0x6c]",
            "beq 0xb83d4",
            "ldr ip, [sp, 0x68]",
            "ldr r2, [sp, 0x728]",
            "ldr r3, [sp, 0x72c]",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "add r4, sp, 0x730",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x38]",
            "str r4, [sp, 0x3c]",
            "ldr r3, [sp, 0x6c]",
            "cmp ip, 0",
            "ldm r3, {r2, r3}",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "str r2, [sp, 0x20]",
            "str r3, [sp, 0x24]",
            "beq 0xb3fb0",
            "ldr lr, [sp, 0x6f0]",
            "ldr r2, [sp, 0x6f4]",
            "lsr r5, lr, 6",
            "lsr r4, lr, 0x13",
            "str r5, [sp, 0x378]",
            "orr r4, r4, r2, lsl 13",
            "str r4, [sp, 0x480]",
            "ldr r6, [sp, 0x378]",
            "lsl r4, lr, 3",
            "ldr r3, [sp, 0x68c]",
            "ldr ip, [sp, 0x688]",
            "orr r4, r4, r2, lsr 29",
            "lsr r5, r2, 0x13",
            "orr r6, r6, r2, lsl 26",
            "orr r5, r5, lr, lsl 13",
            "str r4, [sp, 0x488]",
            "lsl r4, r2, 3",
            "lsr r2, r2, 6",
            "str r6, [sp, 0x378]",
            "str r5, [sp, 0x484]",
            "str r2, [sp, 0x37c]",
            "lsr r6, ip, 1",
            "lsr r5, r3, 1",
            "lsr r2, ip, 8",
            "orr r6, r6, r3, lsl 31",
            "orr lr, r4, lr, lsr 29",
            "orr r5, r5, ip, lsl 31",
            "lsr sb, ip, 7",
            "orr r2, r2, r3, lsl 24",
            "str r6, [sp, 0x490]",
            "str lr, [sp, 0x48c]",
            "orr r6, sb, r3, lsl 25",
            "str r5, [sp, 0x494]",
            "str r2, [sp, 0x498]",
            "add r5, sp, 0x378",
            "ldm r5, {r4, r5}",
            "lsr lr, r3, 8",
            "add r3, sp, 0x480",
            "ldm r3, {r2, r3}",
            "eor r3, r3, r5",
            "ldr r5, [sp, 0x68c]",
            "eor r2, r2, r4",
            "lsr r5, r5, 7",
            "str r5, [sp, 0x384]",
            "ldr r4, [sp, 0x488]",
            "ldr r5, [sp, 0x48c]",
            "eor r2, r2, r4",
            "eor r3, r3, r5",
            "str r2, [sp, 0x28]",
            "str r3, [sp, 0x2c]",
            "add r4, sp, 0x680",
            "ldm r4, {r3, r4}",
            "str r6, [sp, 0x380]",
            "ldr r5, [sp, 0x6c8]",
            "ldr r6, [sp, 0x6cc]",
            "adds r5, r5, r3",
            "adc r6, r6, r4",
            "str r5, [sp, 0x60]",
            "str r6, [sp, 0x64]",
            "add r3, sp, 0x490",
            "ldm r3, {r2, r3}",
            "add r5, sp, 0x380",
            "ldm r5, {r4, r5}",
            "eor r2, r2, r4",
            "eor r3, r3, r5",
            "str r2, [sp, 0x30]",
            "str r3, [sp, 0x34]",
            "add r6, sp, 0x60",
            "ldm r6, {r5, r6}",
            "add r3, sp, 0x28",
            "ldm r3, {r2, r3}",
            "orr ip, lr, ip, lsl 24",
            "adds r5, r5, r2",
            "adc r6, r6, r3",
            "str ip, [sp, 0x49c]",
            "str r5, [sp, 0x60]",
            "str r6, [sp, 0x64]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "ldr r5, [sp, 0x498]",
            "ldr r6, [sp, 0x49c]",
            "eor r3, r3, r5",
            "eor r4, r4, r6",
            "add r6, sp, 0x60",
            "ldm r6, {r5, r6}",
            "adds r5, r5, r3",
            "adc r6, r6, r4",
            "str r5, [sp, 0x60]",
            "str r6, [sp, 0x64]",
            "str r5, [sp, 0x680]",
            "str r6, [sp, 0x684]",
            "b 0xb3fc8",
            "ldr lr, [sp, 0x6e8]",
            "ldr r3, [sp, 0x6ec]",
            "lsr sb, lr, 6",
            "orr r7, sb, r3, lsl 26",
            "lsr r2, lr, 0x13",
            "orr r2, r2, r3, lsl 13",
            "str r7, [sp, 0x468]",
            "lsl r7, lr, 3",
            "ldr ip, [sp, 0x684]",
            "ldr r4, [sp, 0x680]",
            "str r2, [sp, 0x660]",
            "orr r7, r7, r3, lsr 29",
            "lsr r2, r3, 0x13",
            "orr r2, r2, lr, lsl 13",
            "str r7, [sp, 0x668]",
            "lsl r7, r3, 3",
            "lsr r3, r3, 6",
            "str r2, [sp, 0x664]",
            "str r3, [sp, 0x46c]",
            "lsr sb, r4, 1",
            "lsr r2, ip, 1",
            "lsr r3, r4, 8",
            "lsr r8, r4, 7",
            "orr sb, sb, ip, lsl 31",
            "orr lr, r7, lr, lsr 29",
            "orr r2, r2, r4, lsl 31",
            "orr r3, r3, ip, lsl 24",
            "str sb, [sp, 0x670]",
            "str lr, [sp, 0x66c]",
            "orr sb, r8, ip, lsl 25",
            "str r2, [sp, 0x674]",
            "ldr r7, [sp, 0x468]",
            "ldr r8, [sp, 0x46c]",
            "str r3, [sp, 0x678]",
            "add r3, sp, 0x660",
            "ldm r3, {r2, r3}",
            "eor r2, r2, r7",
            "eor r3, r3, r8",
            "str sb, [sp, 0x470]",
            "lsr lr, ip, 8",
            "ldr r8, [sp, 0x668]",
            "ldr sb, [sp, 0x66c]",
            "eor r2, r2, r8",
            "eor r3, r3, sb",
            "str r2, [sp, 0x50]",
            "str r3, [sp, 0x54]",
            "add r3, sp, 0x6c0",
            "ldm r3, {r2, r3}",
            "orr r4, lr, r4, lsl 24",
            "str r2, [sp, 0x30]",
            "str r3, [sp, 0x34]",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "str r4, [sp, 0x67c]",
            "lsr ip, ip, 7",
            "ldr r3, [sp, 0x6f8]",
            "ldr r4, [sp, 0x6fc]",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str ip, [sp, 0x474]",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add r3, sp, 0x470",
            "ldm r3, {r2, r3}",
            "add sb, sp, 0x670",
            "ldm sb, {r8, sb}",
            "eor sb, sb, r3",
            "eor r8, r8, r2",
            "str r8, [sp, 0x58]",
            "str sb, [sp, 0x5c]",
            "add r4, sp, 0x30",
            "ldm r4, {r3, r4}",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "adds r3, r3, r7",
            "adc r4, r4, r8",
            "str r3, [sp, 0x30]",
            "str r4, [sp, 0x34]",
            "ldr r8, [sp, 0x678]",
            "ldr sb, [sp, 0x67c]",
            "add r4, sp, 0x58",
            "ldm r4, {r3, r4}",
            "eor r3, r3, r8",
            "eor r4, r4, sb",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "str r7, [sp, 0x6f8]",
            "str r8, [sp, 0x6fc]",
            "b 0xb6ad0",
            "ldr ip, [sp, 0x6e0]",
            "ldr r1, [sp, 0x6e4]",
            "lsr r7, ip, 6",
            "lsr r0, ip, 0x13",
            "orr r8, r7, r1, lsl 26",
            "orr r0, r0, r1, lsl 13",
            "lsl r7, ip, 3",
            "ldr r2, [sp, 0x6fc]",
            "ldr lr, [sp, 0x6f8]",
            "str r0, [sp, 0x640]",
            "orr r7, r7, r1, lsr 29",
            "lsr r0, r1, 0x13",
            "orr r0, r0, ip, lsl 13",
            "str r7, [sp, 0x648]",
            "lsl r7, r1, 3",
            "lsr r1, r1, 6",
            "str r0, [sp, 0x644]",
            "str r1, [sp, 0x45c]",
            "lsr sb, lr, 1",
            "lsr r0, r2, 1",
            "lsr r1, lr, 8",
            "str r8, [sp, 0x458]",
            "orr sb, sb, r2, lsl 31",
            "lsr r8, lr, 7",
            "orr ip, r7, ip, lsr 29",
            "orr r0, r0, lr, lsl 31",
            "orr r1, r1, r2, lsl 24",
            "str sb, [sp, 0x650]",
            "str ip, [sp, 0x64c]",
            "orr sb, r8, r2, lsl 25",
            "str r0, [sp, 0x654]",
            "ldr r7, [sp, 0x458]",
            "ldr r8, [sp, 0x45c]",
            "str r1, [sp, 0x658]",
            "add r1, sp, 0x640",
            "ldm r1, {r0, r1}",
            "eor r0, r0, r7",
            "eor r1, r1, r8",
            "str sb, [sp, 0x460]",
            "ldr r8, [sp, 0x648]",
            "ldr sb, [sp, 0x64c]",
            "eor r0, r0, r8",
            "eor r1, r1, sb",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "ldr r0, [sp, 0x6b8]",
            "ldr r1, [sp, 0x6bc]",
            "lsr ip, r2, 8",
            "str r0, [sp, 0x50]",
            "str r1, [sp, 0x54]",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "lsr r2, r2, 7",
            "str r2, [sp, 0x464]",
            "add r2, sp, 0x6f0",
            "ldm r2, {r1, r2}",
            "adds r7, r7, r1",
            "adc r8, r8, r2",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "add r1, sp, 0x460",
            "ldm r1, {r0, r1}",
            "add sb, sp, 0x650",
            "ldm sb, {r8, sb}",
            "eor sb, sb, r1",
            "eor r8, r8, r0",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "add r2, sp, 0x50",
            "ldm r2, {r1, r2}",
            "add r8, sp, 0x58",
            "ldm r8, {r7, r8}",
            "orr lr, ip, lr, lsl 24",
            "adds r1, r1, r7",
            "adc r2, r2, r8",
            "str lr, [sp, 0x65c]",
            "ldr r8, [sp, 0x658]",
            "ldr sb, [sp, 0x65c]",
            "str r1, [sp, 0x50]",
            "str r2, [sp, 0x54]",
            "add r2, sp, 0x40",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r8",
            "eor r2, r2, sb",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "adds r7, r7, r1",
            "adc r8, r8, r2",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "str r7, [sp, 0x6f0]",
            "str r8, [sp, 0x6f4]",
            "b 0xb67ac",
            "ldr r7, [sp, 0x6d8]",
            "ldr ip, [sp, 0x6dc]",
            "lsr sb, r7, 6",
            "orr sl, sb, ip, lsl 26",
            "lsr lr, r7, 0x13",
            "ldr fp, [sp, 0x6f0]",
            "orr lr, lr, ip, lsl 13",
            "str sl, [sp, 0x448]",
            "lsl sl, r7, 3",
            "ldr r0, [sp, 0x6f4]",
            "str lr, [sp, 0x620]",
            "orr sl, sl, ip, lsr 29",
            "lsr lr, ip, 0x13",
            "orr lr, lr, r7, lsl 13",
            "str sl, [sp, 0x628]",
            "lsr sb, fp, 1",
            "lsl sl, ip, 3",
            "lsr ip, ip, 6",
            "lsr r8, fp, 7",
            "str lr, [sp, 0x624]",
            "orr sb, sb, r0, lsl 31",
            "str ip, [sp, 0x44c]",
            "orr r7, sl, r7, lsr 29",
            "lsr lr, r0, 1",
            "lsr ip, fp, 8",
            "str sb, [sp, 0x630]",
            "str r7, [sp, 0x62c]",
            "orr sb, r8, r0, lsl 25",
            "orr ip, ip, r0, lsl 24",
            "ldr r7, [sp, 0x448]",
            "ldr r8, [sp, 0x44c]",
            "orr lr, lr, fp, lsl 31",
            "add fp, sp, 0x620",
            "ldm fp, {sl, fp}",
            "eor fp, fp, r8",
            "ldr r8, [sp, 0x6f0]",
            "str ip, [sp, 0x638]",
            "eor sl, sl, r7",
            "lsr ip, r0, 8",
            "orr ip, ip, r8, lsl 24",
            "ldr r7, [sp, 0x628]",
            "ldr r8, [sp, 0x62c]",
            "eor sl, sl, r7",
            "eor fp, fp, r8",
            "str sb, [sp, 0x450]",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "add sb, sp, 0x6b0",
            "ldm sb, {r8, sb}",
            "ldr sl, [sp, 0x6e8]",
            "ldr fp, [sp, 0x6ec]",
            "lsr r0, r0, 7",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str lr, [sp, 0x634]",
            "str r0, [sp, 0x454]",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "add r8, sp, 0x450",
            "ldm r8, {r7, r8}",
            "str ip, [sp, 0x63c]",
            "add ip, sp, 0x630",
            "ldm ip, {fp, ip}",
            "eor fp, fp, r7",
            "eor ip, ip, r8",
            "str fp, [sp, 0x20]",
            "str ip, [sp, 0x24]",
            "add sb, sp, 0x40",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "add ip, sp, 0x20",
            "ldm ip, {fp, ip}",
            "ldr r7, [sp, 0x638]",
            "ldr r8, [sp, 0x63c]",
            "eor fp, fp, r7",
            "eor ip, ip, r8",
            "add sb, sp, 0x40",
            "ldm sb, {r8, sb}",
            "adds r8, r8, fp",
            "adc sb, sb, ip",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "str r8, [sp, 0x6e8]",
            "str sb, [sp, 0x6ec]",
            "b 0xb6474",
            "ldr r7, [sp, 0x6d0]",
            "ldr ip, [sp, 0x6d4]",
            "ldr sl, [sp, 0x6e8]",
            "lsr lr, r7, 0x13",
            "lsl sb, r7, 3",
            "ldr r0, [sp, 0x6ec]",
            "lsr fp, r7, 6",
            "orr lr, lr, ip, lsl 13",
            "orr sb, sb, ip, lsr 29",
            "orr r8, fp, ip, lsl 26",
            "str lr, [sp, 0x600]",
            "lsr fp, sl, 7",
            "str sb, [sp, 0x608]",
            "lsr lr, ip, 0x13",
            "lsl sb, ip, 3",
            "lsr ip, ip, 6",
            "str r8, [sp, 0x438]",
            "orr lr, lr, r7, lsl 13",
            "str ip, [sp, 0x43c]",
            "lsr r8, sl, 1",
            "orr ip, fp, r0, lsl 25",
            "str lr, [sp, 0x604]",
            "orr r8, r8, r0, lsl 31",
            "str ip, [sp, 0x440]",
            "orr r7, sb, r7, lsr 29",
            "lsr lr, r0, 1",
            "lsr ip, sl, 8",
            "str r8, [sp, 0x610]",
            "str r7, [sp, 0x60c]",
            "orr ip, ip, r0, lsl 24",
            "add r8, sp, 0x600",
            "ldm r8, {r7, r8}",
            "orr lr, lr, sl, lsl 31",
            "ldr sb, [sp, 0x438]",
            "ldr sl, [sp, 0x43c]",
            "eor r8, r8, sl",
            "ldr sl, [sp, 0x6e8]",
            "str ip, [sp, 0x618]",
            "lsr ip, r0, 8",
            "orr ip, ip, sl, lsl 24",
            "eor r7, r7, sb",
            "str ip, [sp, 0x61c]",
            "ldr fp, [sp, 0x608]",
            "ldr ip, [sp, 0x60c]",
            "eor r7, r7, fp",
            "eor r8, r8, ip",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "ldr r7, [sp, 0x6a8]",
            "ldr r8, [sp, 0x6ac]",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "add sl, sp, 0x40",
            "ldm sl, {sb, sl}",
            "add r8, sp, 0x6e0",
            "ldm r8, {r7, r8}",
            "lsr r0, r0, 7",
            "adds sb, sb, r7",
            "adc sl, sl, r8",
            "str lr, [sp, 0x614]",
            "str r0, [sp, 0x444]",
            "str sb, [sp, 0x40]",
            "str sl, [sp, 0x44]",
            "add r8, sp, 0x440",
            "ldm r8, {r7, r8}",
            "add fp, sp, 0x610",
            "ldm fp, {sl, fp}",
            "eor sl, sl, r7",
            "eor fp, fp, r8",
            "str sl, [sp, 0x20]",
            "str fp, [sp, 0x24]",
            "add sb, sp, 0x40",
            "ldm sb, {r8, sb}",
            "add fp, sp, 0x58",
            "ldm fp, {sl, fp}",
            "adds r8, r8, sl",
            "adc sb, sb, fp",
            "str r8, [sp, 0x40]",
            "str sb, [sp, 0x44]",
            "ldr fp, [sp, 0x618]",
            "ldr ip, [sp, 0x61c]",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "eor r7, r7, fp",
            "add sl, sp, 0x40",
            "ldm sl, {sb, sl}",
            "eor r8, r8, ip",
            "adds sb, sb, r7",
            "adc sl, sl, r8",
            "str sb, [sp, 0x40]",
            "str sl, [sp, 0x44]",
            "str sb, [sp, 0x6e0]",
            "str sl, [sp, 0x6e4]",
            "b 0xb6160",
            "ldr r5, [sp, 0x6c8]",
            "ldr ip, [sp, 0x6cc]",
            "lsr r7, r5, 6",
            "orr r8, r7, ip, lsl 26",
            "lsr lr, r5, 0x13",
            "lsl r7, r5, 3",
            "ldr r6, [sp, 0x6e0]",
            "orr lr, lr, ip, lsl 13",
            "orr r7, r7, ip, lsr 29",
            "ldr r0, [sp, 0x6e4]",
            "str lr, [sp, 0x5e0]",
            "str r7, [sp, 0x5e8]",
            "lsr lr, ip, 0x13",
            "lsl r7, ip, 3",
            "lsr ip, ip, 6",
            "str ip, [sp, 0x42c]",
            "lsr ip, r6, 8",
            "str r8, [sp, 0x428]",
            "lsr sb, r6, 7",
            "orr lr, lr, r5, lsl 13",
            "orr ip, ip, r0, lsl 24",
            "lsr r8, r6, 1",
            "str lr, [sp, 0x5e4]",
            "orr r8, r8, r0, lsl 31",
            "orr sl, sb, r0, lsl 25",
            "orr r5, r7, r5, lsr 29",
            "str ip, [sp, 0x5f8]",
            "lsr lr, r0, 1",
            "lsr ip, r0, 8",
            "str r8, [sp, 0x5f0]",
            "str sl, [sp, 0x430]",
            "add r8, sp, 0x5e0",
            "ldm r8, {r7, r8}",
            "ldr sb, [sp, 0x428]",
            "ldr sl, [sp, 0x42c]",
            "str r5, [sp, 0x5ec]",
            "eor r7, r7, sb",
            "eor r8, r8, sl",
            "orr lr, lr, r6, lsl 31",
            "orr r6, ip, r6, lsl 24",
            "str r6, [sp, 0x5fc]",
            "ldr r5, [sp, 0x5e8]",
            "ldr r6, [sp, 0x5ec]",
            "eor sl, r7, r5",
            "eor fp, r8, r6",
            "add r7, sp, 0x6a0",
            "ldm r7, {r6, r7}",
            "str r6, [sp, 0x50]",
            "str r7, [sp, 0x54]",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "ldr r5, [sp, 0x6d8]",
            "ldr r6, [sp, 0x6dc]",
            "adds r7, r7, r5",
            "adc r8, r8, r6",
            "lsr r0, r0, 7",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "str sl, [sp, 0x40]",
            "str fp, [sp, 0x44]",
            "add r6, sp, 0x40",
            "ldm r6, {r5, r6}",
            "str lr, [sp, 0x5f4]",
            "str r0, [sp, 0x434]",
            "add sl, sp, 0x430",
            "ldm sl, {sb, sl}",
            "add r8, sp, 0x5f0",
            "ldm r8, {r7, r8}",
            "eor r8, r8, sl",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r5",
            "adc fp, fp, r6",
            "eor r7, r7, sb",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "ldr sb, [sp, 0x5f8]",
            "ldr sl, [sp, 0x5fc]",
            "eor r5, r7, sb",
            "eor r6, r8, sl",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r5",
            "adc fp, fp, r6",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "str sl, [sp, 0x6d8]",
            "str fp, [sp, 0x6dc]",
            "b 0xb5eac",
            "ldr lr, [sp, 0x6c0]",
            "ldr r0, [sp, 0x6c4]",
            "ldr fp, [sp, 0x6d8]",
            "lsr ip, lr, 0x13",
            "ldr sl, [sp, 0x6dc]",
            "orr ip, ip, r0, lsl 13",
            "lsl r7, lr, 3",
            "lsr sb, lr, 6",
            "orr r7, r7, r0, lsr 29",
            "str ip, [sp, 0x5c0]",
            "lsr r8, fp, 1",
            "lsr ip, r0, 0x13",
            "orr r3, sb, r0, lsl 26",
            "lsr r4, fp, 7",
            "orr ip, ip, lr, lsl 13",
            "orr r8, r8, sl, lsl 31",
            "str r7, [sp, 0x5c8]",
            "lsl r7, r0, 3",
            "lsr r0, r0, 6",
            "str r3, [sp, 0x418]",
            "str ip, [sp, 0x5c4]",
            "str r8, [sp, 0x5d0]",
            "str r0, [sp, 0x41c]",
            "orr r8, r4, sl, lsl 25",
            "lsr r0, fp, 8",
            "orr lr, r7, lr, lsr 29",
            "orr r0, r0, sl, lsl 24",
            "str r8, [sp, 0x420]",
            "add r4, sp, 0x5c0",
            "ldm r4, {r3, r4}",
            "ldr r7, [sp, 0x418]",
            "ldr r8, [sp, 0x41c]",
            "str lr, [sp, 0x5cc]",
            "eor r3, r3, r7",
            "eor r4, r4, r8",
            "lsr ip, sl, 1",
            "ldr r8, [sp, 0x5c8]",
            "ldr sb, [sp, 0x5cc]",
            "str r0, [sp, 0x5d8]",
            "eor r3, r3, r8",
            "eor r4, r4, sb",
            "lsr r0, sl, 8",
            "lsr sl, sl, 7",
            "str sl, [sp, 0x424]",
            "str r3, [sp, 0x40]",
            "str r4, [sp, 0x44]",
            "ldr sb, [sp, 0x698]",
            "ldr sl, [sp, 0x69c]",
            "add r4, sp, 0x6d0",
            "ldm r4, {r3, r4}",
            "adds sb, sb, r3",
            "adc sl, sl, r4",
            "orr ip, ip, fp, lsl 31",
            "str sb, [sp, 0x50]",
            "str sl, [sp, 0x54]",
            "add r8, sp, 0x50",
            "ldm r8, {r7, r8}",
            "add r4, sp, 0x420",
            "ldm r4, {r3, r4}",
            "orr fp, r0, fp, lsl 24",
            "str ip, [sp, 0x5d4]",
            "str fp, [sp, 0x5dc]",
            "add fp, sp, 0x5d0",
            "ldm fp, {sl, fp}",
            "eor sl, sl, r3",
            "eor fp, fp, r4",
            "add r4, sp, 0x40",
            "ldm r4, {r3, r4}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r7, [sp, 0x50]",
            "str r8, [sp, 0x54]",
            "ldr r7, [sp, 0x5d8]",
            "ldr r8, [sp, 0x5dc]",
            "eor r3, sl, r7",
            "eor r4, fp, r8",
            "add sb, sp, 0x50",
            "ldm sb, {r8, sb}",
            "adds r8, r8, r3",
            "adc sb, sb, r4",
            "str r8, [sp, 0x50]",
            "str sb, [sp, 0x54]",
            "str r8, [sp, 0x6d0]",
            "str sb, [sp, 0x6d4]",
            "b 0xb5bf0",
            "ldr r0, [sp, 0x6b8]",
            "ldr r2, [sp, 0x6bc]",
            "lsr fp, r0, 6",
            "orr lr, fp, r2, lsl 26",
            "lsr r1, r0, 0x13",
            "orr r1, r1, r2, lsl 13",
            "str lr, [sp, 0x408]",
            "lsl lr, r0, 3",
            "ldr r3, [sp, 0x6d4]",
            "ldr ip, [sp, 0x6d0]",
            "orr lr, lr, r2, lsr 29",
            "str r1, [sp, 0x5a0]",
            "lsr r1, r2, 0x13",
            "orr r1, r1, r0, lsl 13",
            "str lr, [sp, 0x5a8]",
            "lsl lr, r2, 3",
            "lsr r2, r2, 6",
            "lsr sb, ip, 7",
            "str r1, [sp, 0x5a4]",
            "str r2, [sp, 0x40c]",
            "lsr r1, r3, 1",
            "lsr r2, ip, 8",
            "orr sl, sb, r3, lsl 25",
            "orr r1, r1, ip, lsl 31",
            "orr r2, r2, r3, lsl 24",
            "lsr r4, ip, 1",
            "orr r0, lr, r0, lsr 29",
            "orr r4, r4, r3, lsl 31",
            "str sl, [sp, 0x410]",
            "str r0, [sp, 0x5ac]",
            "ldr sb, [sp, 0x408]",
            "ldr sl, [sp, 0x40c]",
            "str r1, [sp, 0x5b4]",
            "str r2, [sp, 0x5b8]",
            "add r1, sp, 0x5a0",
            "ldm r1, {r0, r1}",
            "lsr r2, r3, 8",
            "eor r1, r1, sl",
            "lsr r3, r3, 7",
            "eor r0, r0, sb",
            "str r4, [sp, 0x5b0]",
            "str r3, [sp, 0x414]",
            "orr ip, r2, ip, lsl 24",
            "ldr r2, [sp, 0x5a8]",
            "ldr r3, [sp, 0x5ac]",
            "eor fp, r1, r3",
            "add r4, sp, 0x690",
            "ldm r4, {r3, r4}",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "ldr r3, [sp, 0x6c8]",
            "ldr r4, [sp, 0x6cc]",
            "eor sl, r0, r2",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "str r0, [sp, 0x50]",
            "str r1, [sp, 0x54]",
            "add r4, sp, 0x410",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x5b0",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "add r4, sp, 0x50",
            "ldm r4, {r3, r4}",
            "adds r3, r3, sl",
            "adc r4, r4, fp",
            "str ip, [sp, 0x5bc]",
            "str r3, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "ldr sb, [sp, 0x5b8]",
            "ldr sl, [sp, 0x5bc]",
            "eor r3, r1, sb",
            "eor r4, r2, sl",
            "add fp, sp, 0x50",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r3",
            "adc fp, fp, r4",
            "str sl, [sp, 0x50]",
            "str fp, [sp, 0x54]",
            "str sl, [sp, 0x6c8]",
            "str fp, [sp, 0x6cc]",
            "b 0xb58f8",
            "ldr r0, [sp, 0x6b0]",
            "ldr r2, [sp, 0x6b4]",
            "lsr sb, r0, 6",
            "orr lr, sb, r2, lsl 26",
            "lsr r1, r0, 0x13",
            "ldr ip, [sp, 0x6c8]",
            "orr r1, r1, r2, lsl 13",
            "str lr, [sp, 0x3f8]",
            "lsl lr, r0, 3",
            "ldr sb, [sp, 0x6cc]",
            "str r1, [sp, 0x580]",
            "orr lr, lr, r2, lsr 29",
            "lsr r1, r2, 0x13",
            "lsr r3, ip, 7",
            "orr r1, r1, r0, lsl 13",
            "str lr, [sp, 0x588]",
            "lsl lr, r2, 3",
            "lsr r2, r2, 6",
            "str r1, [sp, 0x584]",
            "str r2, [sp, 0x3fc]",
            "lsr r4, ip, 1",
            "orr r2, r3, sb, lsl 25",
            "lsr r1, sb, 1",
            "str r2, [sp, 0x400]",
            "orr r1, r1, ip, lsl 31",
            "orr r4, r4, sb, lsl 31",
            "lsr r2, ip, 8",
            "orr r0, lr, r0, lsr 29",
            "str r4, [sp, 0x590]",
            "str r0, [sp, 0x58c]",
            "str r1, [sp, 0x594]",
            "add r4, sp, 0x580",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x3f8",
            "ldm r1, {r0, r1}",
            "orr r2, r2, sb, lsl 24",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "lsr r1, sb, 7",
            "str r2, [sp, 0x598]",
            "str r1, [sp, 0x404]",
            "lsr r2, sb, 8",
            "ldr r0, [sp, 0x588]",
            "ldr r1, [sp, 0x58c]",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "str r3, [sp, 0x58]",
            "str r4, [sp, 0x5c]",
            "add r4, sp, 0x6c0",
            "ldm r4, {r3, r4}",
            "orr ip, r2, ip, lsl 24",
            "ldr r1, [sp, 0x688]",
            "ldr r2, [sp, 0x68c]",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "add r1, sp, 0x400",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x590",
            "ldm r3, {r2, r3}",
            "eor r2, r2, r0",
            "eor r3, r3, r1",
            "str r2, [sp, 0x60]",
            "str r3, [sp, 0x64]",
            "add r2, sp, 0x48",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x58",
            "ldm r4, {r3, r4}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str ip, [sp, 0x59c]",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "add r4, sp, 0x60",
            "ldm r4, {r3, r4}",
            "ldr r0, [sp, 0x598]",
            "ldr r1, [sp, 0x59c]",
            "eor r3, r3, r0",
            "eor r4, r4, r1",
            "add r2, sp, 0x48",
            "ldm r2, {r1, r2}",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "str r1, [sp, 0x6c0]",
            "str r2, [sp, 0x6c4]",
            "b 0xb55b4",
            "ldr ip, [sp, 0x6a8]",
            "ldr r1, [sp, 0x6ac]",
            "lsr r0, ip, 0x13",
            "ldr lr, [sp, 0x6c0]",
            "lsr r3, ip, 6",
            "orr r0, r0, r1, lsl 13",
            "lsl sb, ip, 3",
            "ldr r2, [sp, 0x6c4]",
            "orr r4, r3, r1, lsl 26",
            "str r0, [sp, 0x560]",
            "orr sb, sb, r1, lsr 29",
            "lsr r0, r1, 0x13",
            "str r4, [sp, 0x3e8]",
            "orr r0, r0, ip, lsl 13",
            "str sb, [sp, 0x568]",
            "lsr r4, lr, 1",
            "lsl sb, r1, 3",
            "lsr r1, r1, 6",
            "lsr r3, lr, 7",
            "str r0, [sp, 0x564]",
            "orr r4, r4, r2, lsl 31",
            "str r1, [sp, 0x3ec]",
            "lsr r0, r2, 1",
            "lsr r1, lr, 8",
            "str r4, [sp, 0x570]",
            "orr r0, r0, lr, lsl 31",
            "orr r4, r3, r2, lsl 25",
            "orr r1, r1, r2, lsl 24",
            "orr ip, sb, ip, lsr 29",
            "str r4, [sp, 0x3f0]",
            "str ip, [sp, 0x56c]",
            "add r4, sp, 0x3e8",
            "ldm r4, {r3, r4}",
            "str r0, [sp, 0x574]",
            "str r1, [sp, 0x578]",
            "lsr ip, r2, 8",
            "add r1, sp, 0x560",
            "ldm r1, {r0, r1}",
            "lsr r2, r2, 7",
            "eor r0, r0, r3",
            "eor r1, r1, r4",
            "str r2, [sp, 0x3f4]",
            "ldr r2, [sp, 0x568]",
            "ldr r3, [sp, 0x56c]",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "str r0, [sp, 0x50]",
            "str r1, [sp, 0x54]",
            "add r4, sp, 0x680",
            "ldm r4, {r3, r4}",
            "ldr r1, [sp, 0x6b8]",
            "ldr r2, [sp, 0x6bc]",
            "adds r3, r3, r1",
            "adc r4, r4, r2",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "add r1, sp, 0x570",
            "ldm r1, {r0, r1}",
            "add r3, sp, 0x3f0",
            "ldm r3, {r2, r3}",
            "eor r0, r0, r2",
            "eor r1, r1, r3",
            "str r0, [sp, 0x58]",
            "str r1, [sp, 0x5c]",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "orr lr, ip, lr, lsl 24",
            "adds r3, r3, r0",
            "adc r4, r4, r1",
            "str lr, [sp, 0x57c]",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "add r2, sp, 0x58",
            "ldm r2, {r1, r2}",
            "ldr r3, [sp, 0x578]",
            "ldr r4, [sp, 0x57c]",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "adds r3, r3, r1",
            "adc r4, r4, r2",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "str r3, [sp, 0x6b8]",
            "str r4, [sp, 0x6bc]",
            "b 0xb52a0",
            "ldr r5, [sp, 0x6a0]",
            "ldr ip, [sp, 0x6a4]",
            "lsr sb, r5, 6",
            "orr r1, sb, ip, lsl 26",
            "lsr lr, r5, 0x13",
            "lsl sb, r5, 3",
            "ldr r6, [sp, 0x6b8]",
            "orr lr, lr, ip, lsl 13",
            "orr sb, sb, ip, lsr 29",
            "ldr r0, [sp, 0x6bc]",
            "str lr, [sp, 0x540]",
            "str sb, [sp, 0x548]",
            "lsr lr, ip, 0x13",
            "lsl sb, ip, 3",
            "lsr ip, ip, 6",
            "str ip, [sp, 0x3dc]",
            "lsr ip, r6, 8",
            "lsr r3, r6, 7",
            "orr lr, lr, r5, lsl 13",
            "orr ip, ip, r0, lsl 24",
            "lsr r2, r6, 1",
            "str r1, [sp, 0x3d8]",
            "str lr, [sp, 0x544]",
            "orr r2, r2, r0, lsl 31",
            "orr r4, r3, r0, lsl 25",
            "str ip, [sp, 0x558]",
            "lsr lr, r0, 1",
            "orr r5, sb, r5, lsr 29",
            "lsr ip, r0, 8",
            "str r2, [sp, 0x550]",
            "str r4, [sp, 0x3e0]",
            "add r2, sp, 0x540",
            "ldm r2, {r1, r2}",
            "add r4, sp, 0x3d8",
            "ldm r4, {r3, r4}",
            "str r5, [sp, 0x54c]",
            "orr lr, lr, r6, lsl 31",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "orr r6, ip, r6, lsl 24",
            "ldr r4, [sp, 0x548]",
            "ldr r5, [sp, 0x54c]",
            "str r6, [sp, 0x55c]",
            "eor r1, r1, r4",
            "eor r2, r2, r5",
            "lsr r0, r0, 7",
            "ldr r5, [sp, 0x6f8]",
            "ldr r6, [sp, 0x6fc]",
            "str r5, [sp, 0x30]",
            "str r6, [sp, 0x34]",
            "add r6, sp, 0x6b0",
            "ldm r6, {r5, r6}",
            "str r1, [sp, 0x58]",
            "str r2, [sp, 0x5c]",
            "str r0, [sp, 0x3e4]",
            "add r1, sp, 0x30",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r5",
            "adc r1, r1, r6",
            "str lr, [sp, 0x554]",
            "str r0, [sp, 0x30]",
            "str r1, [sp, 0x34]",
            "add r4, sp, 0x3e0",
            "ldm r4, {r3, r4}",
            "add r2, sp, 0x550",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "str r1, [sp, 0x38]",
            "str r2, [sp, 0x3c]",
            "add r5, sp, 0x30",
            "ldm r5, {r4, r5}",
            "add r1, sp, 0x58",
            "ldm r1, {r0, r1}",
            "adds r4, r4, r0",
            "adc r5, r5, r1",
            "str r4, [sp, 0x30]",
            "str r5, [sp, 0x34]",
            "ldr r1, [sp, 0x558]",
            "ldr r2, [sp, 0x55c]",
            "add r6, sp, 0x38",
            "ldm r6, {r5, r6}",
            "eor r5, r5, r1",
            "eor r6, r6, r2",
            "add r3, sp, 0x30",
            "ldm r3, {r2, r3}",
            "adds r2, r2, r5",
            "adc r3, r3, r6",
            "str r2, [sp, 0x30]",
            "str r3, [sp, 0x34]",
            "str r2, [sp, 0x6b0]",
            "str r3, [sp, 0x6b4]",
            "b 0xb4fcc",
            "ldr r7, [sp, 0x698]",
            "ldr ip, [sp, 0x69c]",
            "lsr lr, r7, 0x13",
            "lsl sb, r7, 3",
            "ldr r2, [sp, 0x6b0]",
            "lsr r4, r7, 6",
            "orr lr, lr, ip, lsl 13",
            "orr sb, sb, ip, lsr 29",
            "ldr r0, [sp, 0x6b4]",
            "orr r8, r4, ip, lsl 26",
            "str lr, [sp, 0x520]",
            "str sb, [sp, 0x528]",
            "lsr lr, ip, 0x13",
            "lsl sb, ip, 3",
            "lsr ip, ip, 6",
            "lsr r3, r2, 7",
            "orr lr, lr, r7, lsl 13",
            "str ip, [sp, 0x3cc]",
            "lsr ip, r2, 8",
            "orr r4, r3, r0, lsl 25",
            "orr ip, ip, r0, lsl 24",
            "str r8, [sp, 0x3c8]",
            "lsr r1, r2, 1",
            "str lr, [sp, 0x524]",
            "orr r7, sb, r7, lsr 29",
            "orr r1, r1, r0, lsl 31",
            "lsr lr, r0, 1",
            "str r4, [sp, 0x3d0]",
            "str r7, [sp, 0x52c]",
            "add r4, sp, 0x3c8",
            "ldm r4, {r3, r4}",
            "str ip, [sp, 0x538]",
            "add r8, sp, 0x520",
            "ldm r8, {r7, r8}",
            "lsr ip, r0, 8",
            "eor r7, r7, r3",
            "eor r8, r8, r4",
            "lsr r0, r0, 7",
            "str r1, [sp, 0x530]",
            "orr lr, lr, r2, lsl 31",
            "str r0, [sp, 0x3d4]",
            "orr r2, ip, r2, lsl 24",
            "ldr r0, [sp, 0x528]",
            "ldr r1, [sp, 0x52c]",
            "eor r7, r7, r0",
            "eor r8, r8, r1",
            "str r2, [sp, 0x53c]",
            "str r7, [sp, 0x58]",
            "str r8, [sp, 0x5c]",
            "add r2, sp, 0x6f0",
            "ldm r2, {r1, r2}",
            "ldr r7, [sp, 0x6a8]",
            "ldr r8, [sp, 0x6ac]",
            "adds r1, r1, r7",
            "adc r2, r2, r8",
            "str r1, [sp, 0x40]",
            "str r2, [sp, 0x44]",
            "add r8, sp, 0x40",
            "ldm r8, {r7, r8}",
            "add r4, sp, 0x3d0",
            "ldm r4, {r3, r4}",
            "str lr, [sp, 0x534]",
            "add r2, sp, 0x530",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "eor r2, r2, r4",
            "add r4, sp, 0x58",
            "ldm r4, {r3, r4}",
            "adds r7, r7, r3",
            "adc r8, r8, r4",
            "str r7, [sp, 0x40]",
            "str r8, [sp, 0x44]",
            "ldr r3, [sp, 0x538]",
            "ldr r4, [sp, 0x53c]",
            "eor r7, r1, r3",
            "eor r8, r2, r4",
            "add r1, sp, 0x40",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r7",
            "adc r1, r1, r8",
            "str r0, [sp, 0x40]",
            "str r1, [sp, 0x44]",
            "str r0, [sp, 0x6a8]",
            "str r1, [sp, 0x6ac]",
            "b 0xb4d00",
            "ldr sb, [sp, 0x690]",
            "ldr r0, [sp, 0x694]",
            "lsr ip, sb, 0x13",
            "lsl r3, sb, 3",
            "ldr r1, [sp, 0x6a8]",
            "lsr sl, sb, 6",
            "orr ip, ip, r0, lsl 13",
            "orr r3, r3, r0, lsr 29",
            "ldr lr, [sp, 0x6ac]",
            "orr fp, sl, r0, lsl 26",
            "str ip, [sp, 0x500]",
            "str r3, [sp, 0x508]",
            "lsr ip, r0, 0x13",
            "lsl r3, r0, 3",
            "lsr r0, r0, 6",
            "str r0, [sp, 0x3bc]",
            "lsr r0, r1, 8",
            "orr ip, ip, sb, lsl 13",
            "orr r0, r0, lr, lsl 24",
            "lsr r4, r1, 7",
            "orr sb, r3, sb, lsr 29",
            "str fp, [sp, 0x3b8]",
            "str ip, [sp, 0x504]",
            "str r0, [sp, 0x518]",
            "lsr ip, lr, 1",
            "lsr r0, lr, 8",
            "orr r7, r4, lr, lsl 25",
            "orr ip, ip, r1, lsl 31",
            "lsr r2, r1, 1",
            "str sb, [sp, 0x50c]",
            "add r4, sp, 0x500",
            "ldm r4, {r3, r4}",
            "add sb, sp, 0x3b8",
            "ldm sb, {r8, sb}",
            "orr r1, r0, r1, lsl 24",
            "eor r3, r3, r8",
            "eor r4, r4, sb",
            "str ip, [sp, 0x514]",
            "str r1, [sp, 0x51c]",
            "ldr fp, [sp, 0x508]",
            "ldr ip, [sp, 0x50c]",
            "ldr r0, [sp, 0x6e8]",
            "ldr r1, [sp, 0x6ec]",
            "eor sb, r3, fp",
            "eor sl, r4, ip",
            "add r4, sp, 0x6a0",
            "ldm r4, {r3, r4}",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "str r0, [sp, 0x28]",
            "str r1, [sp, 0x2c]",
            "orr r2, r2, lr, lsl 31",
            "lsr lr, lr, 7",
            "str r7, [sp, 0x3c0]",
            "str r2, [sp, 0x510]",
            "add r8, sp, 0x28",
            "ldm r8, {r7, r8}",
            "str lr, [sp, 0x3c4]",
            "adds r7, r7, sb",
            "add r4, sp, 0x3c0",
            "ldm r4, {r3, r4}",
            "adc r8, r8, sl",
            "add r2, sp, 0x510",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "str r7, [sp, 0x28]",
            "str r8, [sp, 0x2c]",
            "ldr r8, [sp, 0x518]",
            "ldr sb, [sp, 0x51c]",
            "eor r2, r2, r4",
            "eor r3, r1, r8",
            "eor r4, r2, sb",
            "add sl, sp, 0x28",
            "ldm sl, {sb, sl}",
            "adds sb, sb, r3",
            "adc sl, sl, r4",
            "str sb, [sp, 0x28]",
            "str sl, [sp, 0x2c]",
            "str sb, [sp, 0x6a0]",
            "str sl, [sp, 0x6a4]",
            "b 0xb4a50",
            "ldr lr, [sp, 0x688]",
            "ldr r3, [sp, 0x68c]",
            "lsr r0, lr, 0x13",
            "ldr r2, [sp, 0x6a0]",
            "orr r0, r0, r3, lsl 13",
            "lsl sb, lr, 3",
            "ldr ip, [sp, 0x6a4]",
            "lsr r4, lr, 6",
            "orr sb, sb, r3, lsr 29",
            "str r0, [sp, 0x4e0]",
            "lsr r0, r3, 0x13",
            "orr r7, r4, r3, lsl 26",
            "orr r0, r0, lr, lsl 13",
            "lsr r1, r2, 1",
            "str sb, [sp, 0x4e8]",
            "lsl sb, r3, 3",
            "lsr r3, r3, 6",
            "orr r1, r1, ip, lsl 31",
            "str r0, [sp, 0x4e4]",
            "str r3, [sp, 0x3ac]",
            "lsr r0, ip, 1",
            "lsr r3, r2, 8",
            "lsr r8, r2, 7",
            "orr r0, r0, r2, lsl 31",
            "orr r3, r3, ip, lsl 24",
            "str r7, [sp, 0x3a8]",
            "str r1, [sp, 0x4f0]",
            "lsr r1, ip, 8",
            "orr sl, r8, ip, lsl 25",
            "orr r2, r1, r2, lsl 24",
            "orr lr, sb, lr, lsr 29",
            "str r0, [sp, 0x4f4]",
            "str r3, [sp, 0x4f8]",
            "add r8, sp, 0x4e0",
            "ldm r8, {r7, r8}",
            "add r4, sp, 0x3a8",
            "ldm r4, {r3, r4}",
            "add r1, sp, 0x6e0",
            "ldm r1, {r0, r1}",
            "eor r7, r7, r3",
            "eor r8, r8, r4",
            "ldr r3, [sp, 0x698]",
            "ldr r4, [sp, 0x69c]",
            "adds r0, r0, r3",
            "adc r1, r1, r4",
            "lsr ip, ip, 7",
            "str lr, [sp, 0x4ec]",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "str ip, [sp, 0x3b4]",
            "ldr fp, [sp, 0x4e8]",
            "ldr ip, [sp, 0x4ec]",
            "eor sb, r7, fp",
            "str sl, [sp, 0x3b0]",
            "eor sl, r8, ip",
            "add r8, sp, 0x20",
            "ldm r8, {r7, r8}",
            "adds r7, r7, sb",
            "add r4, sp, 0x3b0",
            "ldm r4, {r3, r4}",
            "adc r8, r8, sl",
            "str r2, [sp, 0x4fc]",
            "add r2, sp, 0x4f0",
            "ldm r2, {r1, r2}",
            "eor r1, r1, r3",
            "str r7, [sp, 0x20]",
            "str r8, [sp, 0x24]",
            "ldr r8, [sp, 0x4f8]",
            "ldr sb, [sp, 0x4fc]",
            "eor r2, r2, r4",
            "eor r3, r1, r8",
            "eor r4, r2, sb",
            "add sl, sp, 0x20",
            "ldm sl, {sb, sl}",
            "adds sb, sb, r3",
            "adc sl, sl, r4",
            "str sb, [sp, 0x20]",
            "str sl, [sp, 0x24]",
            "str sb, [sp, 0x698]",
            "str sl, [sp, 0x69c]",
            "b 0xb4788",
            "ldr r1, [sp, 0x680]",
            "ldr r2, [sp, 0x684]",
            "ldr ip, [sp, 0x698]",
            "lsr r0, r1, 0x13",
            "lsl lr, r1, 3",
            "ldr r7, [sp, 0x69c]",
            "lsr sb, r1, 6",
            "orr r0, r0, r2, lsl 13",
            "orr lr, lr, r2, lsr 29",
            "orr sl, sb, r2, lsl 26",
            "lsr fp, ip, 7",
            "str r0, [sp, 0x4c0]",
            "str lr, [sp, 0x4c8]",
            "lsr r0, r2, 0x13",
            "lsl lr, r2, 3",
            "lsr r2, r2, 6",
            "str r2, [sp, 0x39c]",
            "orr r2, fp, r7, lsl 25",
            "orr r0, r0, r1, lsl 13",
            "lsr r4, ip, 1",
            "str r2, [sp, 0x3a0]",
            "lsr r2, ip, 8",
            "orr r4, r4, r7, lsl 31",
            "orr r2, r2, r7, lsl 24",
            "str sl, [sp, 0x398]",
            "str r0, [sp, 0x4c4]",
            "orr r1, lr, r1, lsr 29",
            "lsr r0, r7, 1",
            "orr r0, r0, ip, lsl 31",
            "str r4, [sp, 0x4d0]",
            "str r2, [sp, 0x4d8]",
            "add r4, sp, 0x398",
            "ldm r4, {r3, r4}",
            "lsr r2, r7, 8",
            "add sb, sp, 0x4c0",
            "ldm sb, {r8, sb}",
            "str r1, [sp, 0x4cc]",
            "eor sb, sb, r4",
            "eor r8, r8, r3",
            "str r0, [sp, 0x4d4]",
            "add r4, sp, 0x690",
            "ldm r4, {r3, r4}",
            "ldr r0, [sp, 0x4c8]",
            "ldr r1, [sp, 0x4cc]",
            "orr ip, r2, ip, lsl 24",
            "eor fp, sb, r1",
            "ldr r1, [sp, 0x6d8]",
            "ldr r2, [sp, 0x6dc]",
            "adds r1, r1, r3",
            "adc r2, r2, r4",
            "lsr r7, r7, 7",
            "str r1, [sp, 0x48]",
            "str r2, [sp, 0x4c]",
            "eor sl, r8, r0",
            "str r7, [sp, 0x3a4]",
            "add r3, sp, 0x3a0",
            "ldm r3, {r2, r3}",
            "add r8, sp, 0x4d0",
            "ldm r8, {r7, r8}",
            "eor r8, r8, r3",
            "add r4, sp, 0x48",
            "ldm r4, {r3, r4}",
            "adds r3, r3, sl",
            "adc r4, r4, fp",
            "str ip, [sp, 0x4dc]",
            "eor r7, r7, r2",
            "str r3, [sp, 0x48]",
            "str r4, [sp, 0x4c]",
            "ldr sb, [sp, 0x4d8]",
            "ldr sl, [sp, 0x4dc]",
            "eor r3, r7, sb",
            "eor r4, r8, sl",
            "add fp, sp, 0x48",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r3",
            "adc fp, fp, r4",
            "str sl, [sp, 0x48]",
            "str fp, [sp, 0x4c]",
            "str sl, [sp, 0x690]",
            "str fp, [sp, 0x694]",
            "b 0xb44ec",
            "ldr r0, [sp, 0x6f8]",
            "ldr r2, [sp, 0x6fc]",
            "ldr r6, [sp, 0x690]",
            "lsr ip, r0, 0x13",
            "ldr r3, [sp, 0x694]",
            "orr ip, ip, r2, lsl 13",
            "lsl lr, r0, 3",
            "lsr r7, r0, 6",
            "orr lr, lr, r2, lsr 29",
            "str ip, [sp, 0x4a0]",
            "lsr ip, r6, 1",
            "orr r8, r7, r2, lsl 26",
            "orr ip, ip, r3, lsl 31",
            "lsr r4, r2, 0x13",
            "str lr, [sp, 0x4a8]",
            "lsl lr, r2, 3",
            "lsr r2, r2, 6",
            "orr r4, r4, r0, lsl 13",
            "str ip, [sp, 0x4b0]",
            "str r2, [sp, 0x38c]",
            "lsr ip, r3, 1",
            "lsr r2, r6, 8",
            "orr ip, ip, r6, lsl 31",
            "orr r2, r2, r3, lsl 24",
            "lsr sb, r6, 7",
            "orr r0, lr, r0, lsr 29",
            "str r8, [sp, 0x388]",
            "str r4, [sp, 0x4a4]",
            "orr sl, sb, r3, lsl 25",
            "str ip, [sp, 0x4b4]",
            "str r2, [sp, 0x4b8]",
            "add ip, sp, 0x388",
            "ldm ip, {fp, ip}",
            "lsr r2, r3, 8",
            "add r5, sp, 0x4a0",
            "ldm r5, {r4, r5}",
            "lsr r3, r3, 7",
            "eor r5, r5, ip",
            "str r0, [sp, 0x4ac]",
            "eor r4, r4, fp",
            "orr r6, r2, r6, lsl 24",
            "ldr r0, [sp, 0x4a8]",
            "ldr r1, [sp, 0x4ac]",
            "str sl, [sp, 0x390]",
            "eor r7, r5, r1",
            "str r3, [sp, 0x394]",
            "ldr r1, [sp, 0x688]",
            "ldr r2, [sp, 0x68c]",
            "add fp, sp, 0x6d0",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r1",
            "adc fp, fp, r2",
            "str r6, [sp, 0x4bc]",
            "add r2, sp, 0x390",
            "ldm r2, {r1, r2}",
            "eor r6, r4, r0",
            "add r4, sp, 0x4b0",
            "ldm r4, {r3, r4}",
            "eor r3, r3, r1",
            "adds sl, sl, r6",
            "eor r4, r4, r2",
            "ldr r5, [sp, 0x4b8]",
            "ldr r6, [sp, 0x4bc]",
            "eor r1, r3, r5",
            "adc fp, fp, r7",
            "eor r2, r4, r6",
            "adds sl, sl, r1",
            "adc fp, fp, r2",
            "str sl, [sp, 0x688]",
            "str fp, [sp, 0x68c]",
            "b 0xb4254",
            "ldr r6, [sp, 0x74]",
            "ldr fp, [sp, 0x74]",
            "mov r4, r8",
            "ldr r8, [sp, 0x74]",
            "add r2, sp, 0x28",
            "ldm r2, {r1, r2}",
            "ldm r6, {r5, r6}",
            "mov r3, r7",
            "adds r5, r5, r1",
            "ldr sl, [sp, 0x74]",
            "add r1, fp, 0x20",
            "ldm r1, {r0, r1}",
            "adc r6, r6, r2",
            "add r8, r8, 8",
            "ldm r8, {r7, r8}",
            "adds r0, r0, r3",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x34]",
            "add sl, sl, 0x10",
            "ldm sl, {sb, sl}",
            "add r8, fp, 0x38",
            "ldm r8, {r7, r8}",
            "str sb, [sp, 0x38]",
            "str sl, [sp, 0x3c]",
            "add sl, sp, 0x30",
            "ldm sl, {sb, sl}",
            "adc r1, r1, r4",
            "str r7, [sp, 0x48]",
            "str r8, [sp, 0x4c]",
            "ldr r7, [sp, 0x708]",
            "ldr r8, [sp, 0x70c]",
            "add r4, fp, 0x30",
            "ldm r4, {r3, r4}",
            "adds sb, sb, r7",
            "adc sl, sl, r8",
            "str sb, [sp, 0x30]",
            "str sl, [sp, 0x34]",
            "add r8, sp, 0x710",
            "ldm r8, {r7, r8}",
            "str r5, [sp, 0x28]",
            "str r6, [sp, 0x2c]",
            "add r6, fp, 0x18",
            "ldm r6, {r5, r6}",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "add r2, fp, 0x28",
            "ldm r2, {r1, r2}",
            "add fp, sp, 0x38",
            "ldm fp, {sl, fp}",
            "adds sl, sl, r7",
            "adc fp, fp, r8",
            "ldr r7, [sp, 0x718]",
            "ldr r8, [sp, 0x71c]",
            "adds r5, r5, r7",
            "adc r6, r6, r8",
            "ldr r7, [sp, 0x728]",
            "ldr r8, [sp, 0x72c]",
            "adds r1, r1, r7",
            "adc r2, r2, r8",
            "add r8, sp, 0x730",
            "ldm r8, {r7, r8}",
            "adds r3, r3, r7",
            "str sl, [sp, 0x38]",
            "str fp, [sp, 0x3c]",
            "add ip, sp, 0x48",
            "ldm ip, {fp, ip}",
            "add sl, sp, 0x28",
            "ldm sl, {sb, sl}",
            "adc r4, r4, r8",
            "ldr r7, [sp, 0x738]",
            "ldr r8, [sp, 0x73c]",
            "adds fp, fp, r7",
            "adc ip, ip, r8",
            "ldr r8, [sp, 0x74]",
            "add r0, sp, 0x680",
            "str fp, [r8, 0x38]",
            "str ip, [r8, 0x3c]",
            "mov fp, r8",
            "stm r8, {sb, sl}",
            "add r8, sp, 0x30",
            "ldm r8, {r7, r8}",
            "mov sb, fp",
            "str r7, [fp, 8]",
            "str r8, [fp, 0xc]",
            "add fp, sp, 0x38",
            "ldm fp, {sl, fp}",
            "str r1, [sb, 0x28]",
            "str r2, [sb, 0x2c]",
            "str r5, [sb, 0x18]",
            "str r6, [sb, 0x1c]",
            "add r6, sp, 0x20",
            "ldm r6, {r5, r6}",
            "str sl, [sb, 0x10]",
            "str fp, [sb, 0x14]",
            "str r5, [sb, 0x20]",
            "str r6, [sb, 0x24]",
            "str r3, [sb, 0x30]",
            "str r4, [sb, 0x34]",
            "mov r1, 0",
            "mov r2, 0x80",
            "bl sym.imp.memset",
            "ldr r0, [sp, 0x47c]",
            "mov r1, 0",
            "mov r2, 0x40",
            "mov r7, sb",
            "bl sym.imp.memset",
            "add sp, sp, 0x344",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r1, r0, 0x50",
            "add r0, r0, 0x10",
            "b 0xb3eb4"
        ]
    },
    "sym.yaSSL::RSA::sign_unsigned_char__unsigned_char_const__unsigned_int__yaSSL::RandomPool_const_": {
        "function_address": "0x0007cde0",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [r0, 4]",
            "sub sp, sp, 0x14",
            "mov lr, r1",
            "ldr r1, [sp, 0x18]",
            "add ip, ip, 0x20",
            "add r0, sp, 0x10",
            "str ip, [r0, -8]!",
            "ldr ip, [r1]",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, lr",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13RSA_DecryptorINS_14RSA_BlockType2EE8SSL_SignEPKhjPhRNS_21RandomNumberGeneratorE",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_DecryptorINS_14RSA_BlockType2EE8SSL_SignEPKhjPhRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003dfa8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x534]!"
        ]
    },
    "sym.yaSSL::Connection::Connection__": {
        "function_address": "0x0008bb44",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL10Connection11CleanMasterEv",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL10Connection14CleanPreMasterEv",
            "ldr r0, [r4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::MD5_::HMAC__": {
        "function_address": "0x000bb398",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 4",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb400]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb404]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Socket::send_unsigned_char_const__unsigned_int__int__const": {
        "function_address": "0x00084e48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r5, r1, r2",
            "cmp r1, r5",
            "mov r8, r2",
            "mov r6, r0",
            "mov r7, r3",
            "beq 0x84e98",
            "mov r4, r1",
            "b 0x84e74",
            "cmp r5, r4",
            "beq 0x84e98",
            "mov r1, r4",
            "rsb r2, r4, r5",
            "ldr r0, [r6]",
            "mov r3, r7",
            "bl sym.imp.send",
            "cmn r0, 1",
            "add r4, r4, r0",
            "bne 0x84e6c",
            "mov r8, 0",
            "mov r0, r8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.imp.send": {
        "function_address": "0x0003fa6c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x35c]!"
        ]
    },
    "sym.yaSSL::hmac_yaSSL::SSL__unsigned_char__unsigned_char_const__unsigned_int__yaSSL::ContentType__bool_": {
        "function_address": "0x00081cf8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xe4",
            "str r2, [sp, 4]",
            "str r1, [sp, 0x14]",
            "ldrb r6, [sp, 0x10c]",
            "str r3, [sp, 0xc]",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto10use_digestEv",
            "ldr r3, [r0]",
            "mov r4, r0",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov r5, r0",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r6",
            "mov sl, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL13get_macSecretEb",
            "ldr r3, [sp, 0xc]",
            "str r0, [sp, 8]",
            "add fp, sp, 0xdc",
            "lsl r0, r3, 0x10",
            "mov r1, fp",
            "mov r3, 0",
            "lsr r0, r0, 0x10",
            "str r3, [sp, 0xd8]",
            "str r3, [sp, 0xd4]",
            "add sb, sp, 0xd4",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL16get_SEQIncrementEb",
            "add r7, sp, 0x70",
            "add r1, sb, 4",
            "bl rsym._ZN5yaSSL6c32toaEjPh",
            "ldr r8, [0x00081eb8]",
            "ldr r1, [sp, 8]",
            "mov r2, r5",
            "mov r3, 0x4f",
            "mov r0, r7",
            "bl sym.imp.__memcpy_chk",
            "ldr r3, [0x00081ebc]",
            "add r8, pc, r8",
            "add r3, r8, r3",
            "add r6, sl, r5",
            "add r1, r3, 0x54",
            "mov r2, sl",
            "add r0, r7, r5",
            "str r3, [sp, 0x10]",
            "bl sym.imp.memcpy",
            "mov r1, sb",
            "add r0, r7, r6",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "add lr, sp, 0xe0",
            "add r3, lr, r6",
            "ldr lr, [sp, 0x108]",
            "add r0, r6, 9",
            "strb lr, [r3, -0x68]",
            "mov r1, fp",
            "add r0, r7, r0",
            "mov r2, 2",
            "bl sym.imp.memcpy",
            "mov r1, r7",
            "mov r0, r4",
            "add r2, r6, 0xb",
            "ldr r3, [r4]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr ip, [sp, 4]",
            "add r8, sp, 0xc0",
            "add r7, sp, 0x18",
            "mov r2, ip",
            "ldr r3, [sp, 0xc]",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r1, r8",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp, 8]",
            "mov r2, r5",
            "mov r3, 0x58",
            "mov r0, r7",
            "bl sym.imp.__memcpy_chk",
            "ldr r3, [sp, 0x10]",
            "mov r2, sl",
            "add r1, r3, 0x84",
            "add r0, r7, r5",
            "bl sym.imp.memcpy",
            "mov r1, r8",
            "mov r2, r5",
            "add r0, r7, r6",
            "bl sym.imp.memcpy",
            "add r3, r6, r5",
            "mov r0, r4",
            "ldr r1, [sp, 0x14]",
            "mov r2, r7",
            "ldr ip, [r4]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0xe4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL6Crypto10use_digestEv": {
        "function_address": "0x0003e2d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x314]!"
        ]
    },
    "fcn.0008b6b4": {
        "function_address": "0x0008b6b4",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0008b71c]",
            "ldr ip, [0x0008b720]",
            "sub sp, sp, 8",
            "add r3, pc, r3",
            "strh r1, [sp, 4]",
            "ldr ip, [r3, ip]",
            "ldrb r1, [sp, 4]",
            "ldrb lr, [sp, 5]",
            "cmp r2, 0",
            "movne r2, 0xdd",
            "moveq r2, 0",
            "add ip, ip, 8",
            "mov r4, r0",
            "str ip, [r0]",
            "strb lr, [r0, 9]",
            "strb r1, [r0, 8]",
            "str r2, [r0, 0xd0]",
            "mov r1, 0",
            "mov r2, 0x20",
            "add r0, r0, 0xa",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.get_dynamic": {
        "function_address": "0x000503c0",
        "instructions": [
            "push {r4, lr}",
            "mov r3, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, r2",
            "bls 0x503f4",
            "ldr ip, [r3]",
            "ldr r3, [r3, 0x10]",
            "mov r0, r1",
            "mla r1, r3, r2, ip",
            "mov r2, r3",
            "bl sym.imp.memcpy",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r1",
            "ldr r2, [r3, 0x10]",
            "mov r1, 0",
            "bl sym.imp.memset",
            "b 0x503ec"
        ]
    },
    "method.mySTL::list_yaSSL::input_buffer_.erase_mySTL::list_yaSSL::input_buffer_::iterator_": {
        "function_address": "0x00088274",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x882cc",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x882e0",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x882d4",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE8pop_backEv",
            "mov r0, 1",
            "b 0x882cc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEE9pop_frontEv",
            "mov r0, 1",
            "b 0x882cc"
        ]
    },
    "method.mySTL::list_yaSSL::output_buffer_.remove_yaSSL::output_buffer_": {
        "function_address": "0x0008880c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE7look_upES3_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x88864",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x8887c",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x8886c",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE8pop_backEv",
            "mov r0, 1",
            "b 0x88864",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9pop_frontEv",
            "mov r0, 1",
            "b 0x88864"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE7look_upES3_": {
        "function_address": "0x0003f130",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x984]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE8pop_backEv": {
        "function_address": "0x0003e3a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x28c]!"
        ]
    },
    "rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9pop_frontEv": {
        "function_address": "0x0003d150",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xec4]!"
        ]
    },
    "sym.TaoCrypt::DSA_Signer::DSA_Signer_TaoCrypt::DSA_PrivateKey_const_": {
        "function_address": "0x000a1194",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0], 4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x14",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_register_filename": {
        "function_address": "0x0004910c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x00049280]",
            "subs r5, r0, 0",
            "add r4, pc, r4",
            "sub sp, sp, 0xc",
            "mov r6, r1",
            "mov r7, r2",
            "blt 0x491fc",
            "ldr r2, [0x00049284]",
            "ldr r2, [r4, r2]",
            "ldr r2, [r2]",
            "cmp r5, r2",
            "bhs 0x491cc",
            "ldr r2, [0x00049288]",
            "str r3, [sp, 4]",
            "ldr r8, [r4, r2]",
            "lsl fp, r5, 3",
            "mov r0, r8",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r2, [0x0004928c]",
            "mov r0, r6",
            "ldr sl, [r4, r2]",
            "ldr r1, [sp, 0x30]",
            "ldr sb, [sl]",
            "bl rsym.my_strdup",
            "str r0, [sb, r5, lsl 3]",
            "cmp r0, 0",
            "ldr r3, [sp, 4]",
            "beq 0x49250",
            "ldr r3, [0x00049290]",
            "ldr ip, [sl]",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x00049294]",
            "ldr r0, [r2]",
            "ldr r3, [r4, r3]",
            "add r0, r0, 1",
            "ldr r1, [r3]",
            "add fp, ip, fp",
            "add r1, r1, 1",
            "str r0, [r2]",
            "str r1, [r3]",
            "mov r0, r8",
            "str r7, [fp, 4]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x00049288]",
            "ldr r6, [r4, r3]",
            "mov r0, r6",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x00049290]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "b 0x491bc",
            "str r3, [sp, 4]",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "str r2, [r4]",
            "ldr r3, [sp, 4]",
            "ldr r2, [sp, 0x30]",
            "tst r2, 0x19",
            "mvneq r5, 0",
            "beq 0x491bc",
            "ldr r1, [r4]",
            "mov r2, r6",
            "cmp r1, 0x18",
            "movne r0, r3",
            "moveq r0, 0x17",
            "mov r3, r1",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mvn r5, 0",
            "b 0x491bc",
            "mov r0, r8",
            "str r3, [sp, 4]",
            "bl sym.imp.pthread_mutex_unlock",
            "bl rsym._my_thread_var",
            "mov r2, 0xc",
            "str r2, [r0]",
            "mov r4, r0",
            "ldr r1, [sp, 0x30]",
            "mov r0, r5",
            "bl rsym.my_close",
            "ldr r3, [sp, 4]",
            "b 0x49218"
        ]
    },
    "sym.TaoCrypt::AbstractRing::Divide_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x00098844",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x10",
            "mov r4, r0",
            "mov r0, sp",
            "mov r6, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r3, [r4]",
            "mov r1, r6",
            "mov r0, r4",
            "ldr r6, [r3, 0x40]",
            "ldr ip, [r3, 0x44]",
            "mov lr, pc",
            "bx ip",
            "mov r1, sp",
            "mov r2, r0",
            "mov r0, r4",
            "mov lr, pc",
            "bx r6",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Randomize_TaoCrypt::RandomNumberGenerator__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000aafe4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x10",
            "mov r0, r2",
            "mov r8, r1",
            "mov r1, r3",
            "mov r4, r2",
            "mov r7, r3",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldr r2, [0x000ab0b8]",
            "cmp r0, 0",
            "add r2, pc, r2",
            "bgt 0xab090",
            "mov r1, r7",
            "mov r2, r4",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "mov r6, sp",
            "mov r7, r0",
            "mov r2, r7",
            "mov r0, r5",
            "mov r1, r8",
            "bl rsym._ZN8TaoCrypt7Integer9RandomizeERNS_21RandomNumberGeneratorEj",
            "mov r0, r5",
            "mov r1, sp",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "bgt 0xab038",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerpLERKS0_",
            "ldm sp, {r2, r4}",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000ab0bc]",
            "ldr r1, [0x000ab0c0]",
            "add r3, r2, r3",
            "ldr r0, [0x000ab0c4]",
            "add r3, r3, 0xe10",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000ab0c8]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer9RandomizeERNS_21RandomNumberGeneratorEj": {
        "function_address": "0x0003e0bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x47c]!"
        ]
    },
    "sym.yaSSL::DES::DES__": {
        "function_address": "0x0007d13c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d180]",
            "ldr r3, [0x0007d184]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DES7DESImplEEEvPT_",
            "ldr r3, [0x0007d188]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer_mySTL::uninit_copy_TaoCrypt::Integer__TaoCrypt.Integer__TaoCrypt::Integer__TaoCrypt::Integer__TaoCrypt::Integer_": {
        "function_address": "0x000bac00",
        "instructions": [
            "cmp r0, r1",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r6, r2",
            "beq 0xbac34",
            "mov r0, r6",
            "mov r1, r4",
            "add r4, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "cmp r5, r4",
            "add r6, r6, 0x10",
            "bne 0xbac18",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_RMD::HMAC_RMD__": {
        "function_address": "0x0007d200",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d244]",
            "ldr r3, [0x0007d248]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_RMD12HMAC_RMDImplEEEvPT_",
            "ldr r3, [0x0007d24c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::yassl_int_cpp_local1::SumData_mySTL::for_each_mySTL::list_yaSSL::input_buffer_::iterator__yaSSL::yassl_int_cpp_local1.SumData__mySTL::list_yaSSL::input_buffer_::iterator__mySTL::list_yaSSL::input_buffer_::iterator__yaSSL::yassl_int_cpp_lo": {
        "function_address": "0x00095e68",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "moveq r6, r2",
            "beq 0x95e9c",
            "mov r6, r2",
            "mov r5, r0",
            "ldr r0, [r5, 8]",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "ldr r5, [r5, 4]",
            "add r6, r6, r0",
            "cmp r5, r4",
            "bne 0x95e84",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_make_scrambled_password_323": {
        "function_address": "0x00047830",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "add r0, sp, 8",
            "bl rsym.hash_password",
            "ldr r4, [0x00047880]",
            "ldr ip, [sp, 8]",
            "ldr r3, [0x00047884]",
            "str ip, [sp]",
            "add r4, pc, r4",
            "ldr ip, [sp, 0xc]",
            "add r3, r4, r3",
            "mov r0, r5",
            "mov r1, 1",
            "mvn r2, 0",
            "str ip, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::ConvertIn_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad55c",
        "instructions": [
            "add r3, r1, 0xc",
            "push {r4, lr}",
            "mov r1, r2",
            "mov r4, r0",
            "mov r2, r3",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_TaoCrypt::tcArrayDelete_unsigned_int__unsigned_int_": {
        "function_address": "0x000bb2c4",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdaPvN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::SSL_SESSION_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::SSL_SESSION_::iterator__mySTL::list_yaSSL::SSL_SESSION_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089eac",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89edc",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_11SSL_SESSIONEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89ec4",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HelloRequest::HelloRequest__": {
        "function_address": "0x00090964",
        "instructions": [
            "ldr ip, [0x000909a0]",
            "ldr r3, [0x000909a4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000909a8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000909ac]",
            "ldr r0, [0x000909b0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.vio_errno": {
        "function_address": "0x0007a244",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::EncryptedPreMasterSecret::EncryptedPreMasterSecret__": {
        "function_address": "0x0008ad28",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ad6c]",
            "ldr r3, [0x0008ad70]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008ad74]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt.AsymmetricMultiply_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a7424",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [0x000a7828]",
            "sub sp, sp, 0x2c",
            "add ip, pc, ip",
            "ldr sl, [sp, 0x54]",
            "str ip, [sp, 0xc]",
            "ldr ip, [sp, 0x50]",
            "cmp r3, sl",
            "mov r4, r3",
            "str r0, [sp, 0x14]",
            "str r1, [sp, 8]",
            "mov fp, r2",
            "str ip, [sp, 0x10]",
            "beq 0xa7620",
            "bhi 0xa75c4",
            "mov r0, sl",
            "mov r1, r4",
            "bl fcn.000bee1c",
            "cmp r1, 0",
            "bne 0xa77d0",
            "mov r0, sl",
            "mov r1, r4",
            "bl fcn.000bed20",
            "tst r0, 1",
            "bne 0xa77a4",
            "cmp r4, 2",
            "beq 0xa75e0",
            "ldr r1, [sp, 8]",
            "mov r2, fp",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [sp, 0x10]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr r1, [sp, 8]",
            "ldr r2, [sp, 0x14]",
            "add r1, r1, r4, lsl 3",
            "add r2, r2, r4, lsl 2",
            "cmp r4, 0",
            "str r1, [sp, 0x1c]",
            "str r2, [sp, 0x18]",
            "beq 0xa74f0",
            "mov r3, 0",
            "ldr r0, [sp, 0x18]",
            "ldr ip, [sp, 0x1c]",
            "mov r2, r3",
            "ldr r1, [r0, r3]",
            "add r2, r2, 1",
            "cmp r4, r2",
            "str r1, [ip, r3]",
            "add r3, r3, 4",
            "bhi 0xa74d8",
            "lsl r5, r4, 1",
            "cmp r5, sl",
            "bhs 0xa7548",
            "ldr r3, [sp, 8]",
            "ldr ip, [sp, 0x10]",
            "lsl sb, r4, 3",
            "add r7, r5, r4",
            "add r7, r3, r7, lsl 2",
            "lsl r6, r4, 2",
            "add r8, ip, sb",
            "mov r3, r8",
            "mov r0, r7",
            "add r6, r6, r5",
            "ldr r1, [sp, 8]",
            "mov r2, fp",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "rsb r3, r5, r6",
            "cmp sl, r3",
            "add r7, r7, sb",
            "add r8, r8, sb",
            "bhi 0xa7518",
            "cmp r4, sl",
            "bhs 0xa759c",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x14]",
            "lsl r8, r4, 2",
            "add r7, r1, r8",
            "add r6, r5, r4",
            "lsl sb, r5, 2",
            "add r8, r2, r8",
            "mov r3, r7",
            "mov r0, r8",
            "add r6, r6, r5",
            "ldr r1, [sp, 8]",
            "mov r2, fp",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "rsb r3, r5, r6",
            "cmp sl, r3",
            "add r8, r8, sb",
            "add r7, r7, sb",
            "bhi 0xa756c",
            "ldr r0, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, r0",
            "rsb r3, r4, sl",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r0, 0",
            "bne 0xa763c",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r2, r3",
            "mov r3, fp",
            "mov r4, sl",
            "ldr fp, [sp, 0x10]",
            "mov sl, r2",
            "str r3, [sp, 0x10]",
            "b 0xa7460",
            "ldr r3, [fp, 4]",
            "cmp r3, 0",
            "bne 0xa76b0",
            "ldr r6, [fp]",
            "cmp r6, 0",
            "bne 0xa76e4",
            "adds sl, sl, 2",
            "beq 0xa75b8",
            "ldr r1, [sp, 0x14]",
            "mov r3, r6",
            "mov r2, r6",
            "str r2, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp sl, r3",
            "bhi 0xa760c",
            "b 0xa75b8",
            "cmp r2, ip",
            "beq 0xa7798",
            "ldr r3, [sp, 0x10]",
            "str r4, [sp, 0x50]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "cmp r4, 0",
            "beq 0xa7800",
            "ldr r2, [sp, 0x14]",
            "ldr ip, [sp, 0x14]",
            "ldr r1, [r2, sl, lsl 2]",
            "add r3, r2, sl, lsl 2",
            "add r2, r1, 1",
            "cmp r1, r2",
            "str r2, [ip, sl, lsl 2]",
            "bls 0xa75b8",
            "cmp r4, 1",
            "bls 0xa75b8",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xa76a0",
            "b 0xa75b8",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa75b8",
            "add r2, r2, 1",
            "cmp r4, r2",
            "bhi 0xa7688",
            "b 0xa75b8",
            "ldr r1, [sp, 8]",
            "mov r2, fp",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [sp, 0x10]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr r1, [sp, 8]",
            "ldr r2, [sp, 0x14]",
            "add r1, r1, 0x10",
            "add r2, r2, 8",
            "str r1, [sp, 0x1c]",
            "str r2, [sp, 0x18]",
            "b 0xa74c8",
            "cmp r6, 1",
            "beq 0xa7754",
            "cmp sl, 0",
            "moveq ip, sl",
            "beq 0xa7738",
            "ldr r7, [sp, 0x14]",
            "ldr r8, [sp, 0x10]",
            "mov ip, r3",
            "mov r2, r3",
            "ldr r1, [r8, r3]",
            "add r2, r2, 1",
            "umull r4, r5, r6, r1",
            "adds r0, r4, ip",
            "adc r1, r5, 0",
            "str r0, [sp, 0x20]",
            "str r1, [sp, 0x24]",
            "cmp r2, sl",
            "ldr ip, [sp, 0x24]",
            "str r0, [r7, r3]",
            "add r3, r3, 4",
            "blo 0xa7708",
            "ldr r2, [sp, 0x14]",
            "add r3, sl, 1",
            "str ip, [r2, sl, lsl 2]",
            "ldr ip, [sp, 0x14]",
            "mov r2, 0",
            "str r2, [ip, r3, lsl 2]",
            "b 0xa75b8",
            "cmp sl, 0",
            "beq 0xa7780",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [sp, 0x10]",
            "mov r2, r3",
            "ldr r1, [ip, r3]",
            "add r2, r2, 1",
            "cmp r2, sl",
            "str r1, [r0, r3]",
            "add r3, r3, 4",
            "blo 0xa7768",
            "ldr r1, [sp, 0x14]",
            "mov r3, 0",
            "add r2, sl, 1",
            "str r3, [r1, r2, lsl 2]",
            "str r3, [r1, sl, lsl 2]",
            "b 0xa75b8",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt15RecursiveSquareEPjS0_PKjj",
            "ldr ip, [sp, 0xc]",
            "ldr r3, [0x000a782c]",
            "ldr r1, [0x000a7830]",
            "add r3, ip, r3",
            "ldr r0, [0x000a7834]",
            "add r3, r3, 0x910",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a7838]",
            "bl sym.imp.__assert_fail",
            "ldr r1, [sp, 0xc]",
            "ldr r3, [0x000a782c]",
            "ldr r2, [sp, 0xc]",
            "add r3, r1, r3",
            "ldr r0, [0x000a783c]",
            "ldr r1, [0x000a7830]",
            "add r3, r3, 0x910",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a7840]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0xc]",
            "ldr r3, [0x000a782c]",
            "ldr r1, [0x000a7830]",
            "ldr r0, [0x000a7844]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x8c0",
            "mov r2, 0x1ec",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.end_server": {
        "function_address": "0x000759f8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "str r0, [sp, 4]",
            "bl sym.imp.__errno_location",
            "ldr r2, [sp, 4]",
            "str r0, [sp, 8]",
            "ldr r3, [r2]",
            "ldr r6, [0x00075afc]",
            "ldr r2, [r0]",
            "cmp r3, 0",
            "add r6, pc, r6",
            "str r2, [sp, 0xc]",
            "beq 0x75ad4",
            "mov r0, r3",
            "ldr ip, [r3, 0x60]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 4]",
            "mov r7, 0",
            "ldr r5, [r3, 0x3ac]",
            "str r7, [r3]",
            "cmp r5, r7",
            "moveq r7, r5",
            "beq 0x75acc",
            "ldr fp, [0x00075b00]",
            "ldr sb, [0x00075b04]",
            "ldr sl, [0x00075b08]",
            "mov r8, r7",
            "b 0x75a9c",
            "ldr r3, [r6, sb]",
            "str r8, [r4, 0x2c]",
            "str fp, [r4, 0xa0]",
            "ldr r1, [r3, 0x34]",
            "bl sym.imp.strcpy",
            "ldr r3, [r6, sl]",
            "add r0, r4, 0x2b0",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r5, [r5, 4]",
            "cmp r5, 0",
            "beq 0x75acc",
            "ldr r4, [r5, 8]",
            "ldr r3, [r4, 0xac]",
            "add r0, r4, 0xb0",
            "cmp r3, 1",
            "bne 0x75a6c",
            "mov r0, r7",
            "mov r1, r5",
            "bl rsym.list_add",
            "ldr r5, [r5, 4]",
            "mov r7, r0",
            "cmp r5, 0",
            "bne 0x75a9c",
            "ldr r2, [sp, 4]",
            "str r7, [r2, 0x3ac]",
            "ldr r0, [sp, 4]",
            "bl rsym.net_end",
            "ldr r0, [sp, 4]",
            "bl rsym.free_old_query",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "str r3, [r2]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaERR_error_string": {
        "function_address": "0x000859b0",
        "instructions": [
            "ldr r3, [0x000859e4]",
            "push {r4, lr}",
            "subs r4, r1, 0",
            "add r3, pc, r3",
            "beq 0x859d4",
            "bl rsym._ZN5yaSSL14SetErrorStringEmPc",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr",
            "ldr r2, [0x000859e8]",
            "add r3, r3, r2",
            "ldr r4, [r3, 0x10]",
            "b 0x859c8"
        ]
    },
    "rsym._ZN5yaSSL14SetErrorStringEmPc": {
        "function_address": "0x00040984",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x94c]!"
        ]
    },
    "method.TaoCrypt.a_times_b_mod_c_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000ab5ec",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x10",
            "mov r6, r3",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r0, r5",
            "mov r1, sp",
            "mov r2, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r4, sp",
            "mov r0, r5",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.init_dynamic_array": {
        "function_address": "0x000506f8",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "str r3, [sp]",
            "mov r3, r2",
            "mov r2, 0",
            "bl rsym.init_dynamic_array2",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.mysql_read_default_options": {
        "function_address": "0x00074eac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x00075404]",
            "ldr lr, [0x00075408]",
            "sub sp, sp, 0x2c",
            "add r4, pc, r4",
            "add lr, r4, lr",
            "mov ip, 0",
            "str r2, [sp, 0x14]",
            "mov sb, 1",
            "add r3, sp, 0x1c",
            "mov r5, r0",
            "add r2, sp, 0x24",
            "mov r0, r1",
            "add r6, sp, 0x20",
            "add r1, sp, 0x10",
            "str r6, [sp, 0x1c]",
            "str lr, [sp, 0x10]",
            "str ip, [sp]",
            "str sb, [sp, 0x24]",
            "str lr, [sp, 0x20]",
            "str ip, [sp, 0x18]",
            "bl rsym.my_load_defaults",
            "ldr r3, [sp, 0x24]",
            "cmp r3, sb",
            "beq 0x74f58",
            "ldr r3, [0x0007540c]",
            "ldr r6, [sp, 0x1c]",
            "str r3, [sp, 0xc]",
            "ldr r0, [r6, 4]",
            "ldr r8, [0x00075410]",
            "ldr fp, [0x00075414]",
            "cmp r0, 0",
            "add r8, r4, r8",
            "add fp, r4, fp",
            "mov r7, 0x2d",
            "beq 0x74f58",
            "ldrb r3, [r0]",
            "cmp r3, 0x2d",
            "beq 0x74f6c",
            "add r6, r6, 4",
            "ldr r0, [r6, 4]",
            "cmp r0, 0",
            "bne 0x74f3c",
            "ldr r0, [sp, 0x1c]",
            "bl rsym.free_defaults",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldrb r3, [r0, 1]",
            "cmp r3, 0x2d",
            "bne 0x74f48",
            "mov r1, 0x3d",
            "bl rsym.strcend",
            "ldrb sl, [r0]",
            "cmp sl, 0",
            "movne r3, 0",
            "strbne r3, [r0]",
            "addne sl, r0, 1",
            "ldr r0, [r6, 4]",
            "b 0x74fa0",
            "strb r7, [r0]",
            "mov r1, 0x5f",
            "bl rsym.strcend",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "bne 0x74f9c",
            "ldr r0, [r6, 4]",
            "mov r1, r8",
            "add r0, r0, 2",
            "mov r2, 2",
            "bl rsym.find_type",
            "sub r0, r0, 1",
            "cmp r0, 0x21",
            "addls pc, pc, r0, lsl 2",
            "b 0x74f48",
            "b 0x75134",
            "b 0x751a4",
            "b 0x7518c",
            "b 0x7510c",
            "b 0x75060",
            "b 0x75068",
            "b 0x75314",
            "b 0x75300",
            "b 0x7526c",
            "b 0x75244",
            "b 0x752e8",
            "b 0x752d4",
            "b 0x752b4",
            "b 0x75294",
            "b 0x753e4",
            "b 0x753c4",
            "b 0x753a4",
            "b 0x75384",
            "b 0x75370",
            "b 0x75068",
            "b 0x7533c",
            "b 0x7508c",
            "b 0x750a0",
            "b 0x750fc",
            "b 0x750f0",
            "b 0x750d0",
            "b 0x750ac",
            "b 0x751fc",
            "b 0x74f48",
            "b 0x75178",
            "b 0x75164",
            "b 0x75164",
            "b 0x75158",
            "b 0x751cc",
            "mov r3, 3",
            "str r3, [r5, 0x10]",
            "cmp sl, 0",
            "beq 0x74f48",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "add r6, r6, 4",
            "str r0, [r5]",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "bic r3, r3, 0x80",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "strb sb, [r5, 0x5f]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "add r6, r6, 4",
            "str r0, [r5, 0x58]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x50]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x50]",
            "b 0x74f4c",
            "strb sb, [r5, 0x60]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "mov r3, 0",
            "strb r3, [r5, 0x61]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "ldr r0, [r5, 0x20]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x20]",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "add r6, r6, 4",
            "str r0, [r5, 0xc]",
            "b 0x74f4c",
            "strb sb, [r5, 0x6c]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "orr r3, r3, 0x30000",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "orr r3, r3, 0x20000",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "strb sb, [r5, 0x5d]",
            "orr r3, r3, 0x20",
            "str r3, [r5, 0x14]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "ldr r0, [r5, 0x24]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x24]",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x751ec",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "subs r3, r0, 0",
            "beq 0x751f0",
            "mov r3, 1",
            "strb r3, [r5, 0x6d]",
            "add r6, r6, 4",
            "b 0x74f4c",
            "ldr r3, [sp, 0xc]",
            "mov r0, sl",
            "ldr r1, [r4, r3]",
            "mov r2, 0",
            "bl rsym.find_type",
            "cmp r0, 0",
            "str r0, [r5, 0x10]",
            "bne 0x74f48",
            "ldr r3, [0x00075418]",
            "ldr r2, [0x0007541c]",
            "ldr r3, [r4, r3]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "mov r3, sl",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 1",
            "bl sym.imp.exit",
            "cmp sl, 0",
            "beq 0x74f48",
            "ldr r0, [r5, 0x28]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x28]",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "ldr r0, [r5, 0x18]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x18]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x44]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x44]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x40]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x40]",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "orr r3, r3, 2",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "cmp sl, 0",
            "moveq sl, fp",
            "mov r0, sl",
            "bl rsym.mysql_debug",
            "add r6, r6, 4",
            "b 0x74f4c",
            "mov r1, sl",
            "mov r0, r5",
            "bl fcn.0007452c",
            "add r6, r6, 4",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x74f48",
            "ldr r0, [r5, 0x1c]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x1c]",
            "b 0x74f4c",
            "cmp sl, 0",
            "beq 0x7535c",
            "mov r0, sl",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "cmp r0, 0",
            "beq 0x7508c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "orr r3, r3, 0x80",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "ldr r3, [r5, 0x14]",
            "add r6, r6, 4",
            "orr r3, r3, 0x400",
            "str r3, [r5, 0x14]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x3c]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x3c]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x38]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x38]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x4c]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x4c]",
            "b 0x74f4c",
            "ldr r0, [r5, 0x48]",
            "bl rsym.my_no_flags_free",
            "mov r0, sl",
            "mov r1, 0x10",
            "bl rsym.my_strdup",
            "add r6, r6, 4",
            "str r0, [r5, 0x48]",
            "b 0x74f4c"
        ]
    },
    "rsym.free_defaults": {
        "function_address": "0x0003d774",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xaac]!"
        ]
    },
    "rsym.find_type": {
        "function_address": "0x00040888",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9f4]!"
        ]
    },
    "sym.imp.exit": {
        "function_address": "0x00040774",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xaac]!"
        ]
    },
    "rsym.mysql_debug": {
        "function_address": "0x0003cd54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x16c]!"
        ]
    },
    "sym.TaoCrypt::DH::Agree_unsigned_char__unsigned_char_const__unsigned_char_const__unsigned_int_": {
        "function_address": "0x000a0c64",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x30",
            "mov r4, r2",
            "mov sb, r1",
            "mov r7, r3",
            "ldr r8, [sp, 0x50]",
            "mov sl, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "add r6, sp, 0x20",
            "mov r1, r4",
            "mov r2, r0",
            "mov r3, 0",
            "mov r5, r0",
            "add r4, sp, 0x10",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r8, 0",
            "bne 0xa0d5c",
            "mov r1, r7",
            "mov r3, r8",
            "mov r0, r4",
            "mov r2, r5",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "mov r3, sl",
            "mov r1, r4",
            "mov r2, r6",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "mov r3, 0",
            "mov r1, sb",
            "mov r2, r5",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldm sp, {r2, r4}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x30",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r1, r7",
            "mov r2, r8",
            "mov r0, r4",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "b 0xa0cc8"
        ]
    },
    "method.yaSSL.PRF_unsigned_char__unsigned_int__unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00081994",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r4, r3, 1",
            "sub sp, sp, 0x4c",
            "lsr r4, r4, 1",
            "mov r5, r3",
            "add r3, sp, 0x3c",
            "mov r6, r1",
            "add sl, sp, 0x30",
            "mov r1, r4",
            "mov r7, r0",
            "mov r0, r3",
            "mov sb, r2",
            "str r3, [sp, 4]",
            "ldr fp, [sp, 0x74]",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "mov r1, r4",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "ldr r3, [sp, 0x7c]",
            "add r8, sp, 0x24",
            "add r1, r3, fp",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "and r5, r5, 1",
            "mov r2, r4",
            "ldr r0, [sp, 4]",
            "mov r1, sb",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "rsb r1, r5, r4",
            "mov r2, r4",
            "add r1, sb, r1",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r8",
            "ldr r1, [sp, 0x70]",
            "mov r2, fp",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "add r4, sp, 0x18",
            "ldr r2, [sp, 0x7c]",
            "mov r0, r8",
            "ldr r1, [sp, 0x78]",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "add r5, sp, 0xc",
            "mov r1, r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "mov r0, r4",
            "ldr r1, [sp, 4]",
            "mov r2, r8",
            "mov r3, 1",
            "bl fcn.0008176c",
            "mov r2, r8",
            "mov r3, 2",
            "mov r0, r5",
            "mov r1, sl",
            "bl fcn.0008176c",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "mov r0, r5",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL13output_buffer11set_currentEj",
            "cmp r6, 0",
            "beq 0x81ad8",
            "mov sb, 0",
            "ldr r1, [0x00081b0c]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r1, [0x00081b0c]",
            "ldrb fp, [r0]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r0]",
            "eor fp, fp, r3",
            "strb fp, [r7, sb]",
            "add sb, sb, 1",
            "cmp r6, sb",
            "bhi 0x81aa4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "ldr r0, [sp, 4]",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "fcn.0008176c": {
        "function_address": "0x0008176c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r3, 1",
            "sub sp, sp, 0x44",
            "moveq r6, 0x10",
            "movne r6, 0x14",
            "mov r8, r2",
            "mov r4, r3",
            "mov r5, r1",
            "str r0, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "mov r1, r6",
            "bl fcn.000bed20",
            "str r0, [sp, 8]",
            "ldr r0, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "mov r1, r6",
            "bl fcn.000bee1c",
            "cmp r1, 0",
            "ldrne r2, [sp, 8]",
            "str r1, [sp, 0x14]",
            "addne r2, r2, 1",
            "strne r2, [sp, 8]",
            "cmp r4, 1",
            "beq 0x81954",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, 0",
            "mov r5, r0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r4, r0",
            "mov r2, r5",
            "bl rsym._ZN5yaSSL8HMAC_SHAC1EPKhj",
            "cmp r4, 0",
            "beq 0x81810",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "ldr r3, [r4]",
            "mov r0, r8",
            "ldr r5, [r3, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "add fp, sp, 0x2c",
            "mov r3, r0",
            "mov r2, r7",
            "mov r0, r4",
            "mov r1, fp",
            "mov lr, pc",
            "bx r5",
            "ldr r3, [sp, 8]",
            "sub r2, r3, 1",
            "cmp r3, 0",
            "str r2, [sp, 0xc]",
            "beq 0x81940",
            "ldr r3, [sp, 0x14]",
            "mov r5, 0",
            "subs r3, r3, 0",
            "movne r3, 1",
            "str r3, [sp, 0x10]",
            "add r7, sp, 0x18",
            "mov sb, r8",
            "b 0x81894",
            "ldr r2, [sp, 0x14]",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "ldr r3, [sp, 8]",
            "add r5, r5, 1",
            "cmp r3, r5",
            "bls 0x81940",
            "mov r1, fp",
            "mov r2, r6",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "mov r0, sb",
            "ldr r8, [r3, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sl, r0",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r7",
            "mov r3, r0",
            "mov r2, sl",
            "mov r0, r4",
            "mov lr, pc",
            "bx r8",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [sp, 0x10]",
            "ldr r0, [sp, 4]",
            "cmp r5, r2",
            "movne r3, 0",
            "andeq r3, r3, 1",
            "cmp r3, 0",
            "mov r1, r7",
            "mov r2, r6",
            "bne 0x8187c",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r3, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r1, fp",
            "mov r2, fp",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 8]",
            "add r5, r5, 1",
            "cmp r3, r5",
            "bhi 0x81894",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, 0",
            "mov r5, r0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r4, r0",
            "mov r2, r5",
            "bl rsym._ZN5yaSSL8HMAC_MD5C1EPKhj",
            "cmp r4, 0",
            "bne 0x81808",
            "b 0x81810"
        ]
    },
    "sym.my_realloc": {
        "function_address": "0x00048c44",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r4, r0, 0",
            "mov r5, r1",
            "mov r7, r2",
            "beq 0x48c7c",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.realloc",
            "cmp r0, 0",
            "movne r4, r0",
            "beq 0x48c98",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "tst r2, 0x40",
            "beq 0x48c58",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym.my_malloc",
            "mov r4, r0",
            "b 0x48c70",
            "tst r7, 0x80",
            "bne 0x48cdc",
            "ands r6, r7, 0x100",
            "bne 0x48c70",
            "bl rsym._my_thread_var",
            "mov r8, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "ands r4, r7, 0x18",
            "str r3, [r8]",
            "beq 0x48c70",
            "mov r2, r5",
            "mov r0, 5",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mov r4, r6",
            "b 0x48c70",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "b 0x48ca0"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x000404c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc74]!"
        ]
    },
    "sym.mySTL::list_TaoCrypt::Signer_::pop_back__": {
        "function_address": "0x00087904",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x8794c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::ConvertOut_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad26c",
        "instructions": [
            "push {r4, lr}",
            "mov r1, r2",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_hash_search": {
        "function_address": "0x00052918",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add r3, sp, 4",
            "bl rsym.my_hash_first",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym.my_hash_first": {
        "function_address": "0x0003d6b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb2c]!"
        ]
    },
    "sym.yaSSL::DSS::DSSImpl::SetPrivate_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007fee8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "cmp r2, 0",
            "sub sp, sp, 0x5c",
            "mov r5, r0",
            "mov r4, r1",
            "str r2, [sp, 0x44]",
            "moveq r3, r2",
            "bne 0x7fff8",
            "mov r0, r3",
            "ldr r2, [sp, 0x44]",
            "add r6, r5, 0x40",
            "mov r1, r4",
            "str r3, [sp, 0x48]",
            "mov r4, 0",
            "bl sym.imp.memcpy",
            "add r7, sp, 4",
            "mov r0, r6",
            "add r1, sp, 0x44",
            "str r4, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "bl rsym._ZN8TaoCrypt14DSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKeyC1ERKS0_",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKeyaSERKS0_",
            "ldr r5, [sp, 0x38]",
            "ldr r2, [sp, 0x34]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x28]",
            "ldr r2, [sp, 0x24]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x18]",
            "ldr r2, [sp, 0x14]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldmib sp, {r2, r5}",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x48]",
            "mov r1, r4",
            "mov r0, r5",
            "ldr r2, [sp, 0x44]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7ff08"
        ]
    },
    "rsym._ZN8TaoCrypt14DSA_PrivateKey10InitializeERNS_6SourceE": {
        "function_address": "0x0003d090",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf44]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKeyaSERKS0_": {
        "function_address": "0x0003e80c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf9c]!"
        ]
    },
    "sym.yaSSL::MD5::operator_yaSSL::MD5_const_": {
        "function_address": "0x0007dfa8",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r1, 4]",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt3MD5aSERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD5aSERKS0_": {
        "function_address": "0x0003dcfc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6fc]!"
        ]
    },
    "sym.yaSSL::CertManager::get_privateKeyLength___const": {
        "function_address": "0x0007c474",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.list_free": {
        "function_address": "0x00050a68",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x50a90",
            "cmp r1, 0",
            "bne 0x50a98",
            "ldr r5, [r4, 4]",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "subs r4, r5, 0",
            "bne 0x50a7c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, [r4, 8]",
            "ldr r5, [r4, 4]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "subs r4, r5, 0",
            "beq 0x50a90",
            "ldr r0, [r4, 8]",
            "ldr r5, [r4, 4]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "subs r4, r5, 0",
            "bne 0x50a98",
            "b 0x50a90"
        ]
    },
    "method.mySTL::list_yaSSL::x509_.push_front_yaSSL::x509_": {
        "function_address": "0x00088a84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::SetSubGroupGenerator_TaoCrypt::Integer_const_": {
        "function_address": "0x000a11e0",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DSS::DSS__": {
        "function_address": "0x0007fb50",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fb94]",
            "ldr r3, [0x0007fb98]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3DSS7DSSImplEEEvPT_",
            "ldr r3, [0x0007fb9c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::X509_NAME::X509_NAME_char_const__unsigned_int_": {
        "function_address": "0x00094d08",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, 0",
            "mov r4, r0",
            "cmp r2, 0",
            "mov r5, r2",
            "str r3, [r0]",
            "mov r6, r1",
            "str r2, [r4, 4]",
            "bne 0x94d40",
            "mov r3, 0",
            "str r3, [r4, 0x10]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r1, r6",
            "str r0, [r4]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "b 0x94d2c"
        ]
    },
    "sym.mySTL::list_yaSSL::SSL_SESSION_::erase_mySTL::list_yaSSL::SSL_SESSION_::iterator_": {
        "function_address": "0x00087dac",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x87e04",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x87e18",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x87e0c",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE8pop_backEv",
            "mov r0, 1",
            "b 0x87e04",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE9pop_frontEv",
            "mov r0, 1",
            "b 0x87e04"
        ]
    },
    "sym.TaoCrypt::Twofish::decrypt_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000bc9f0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r7, [0x000bd9bc]",
            "sub sp, sp, 0x2c",
            "add r7, pc, r7",
            "tst r1, 3",
            "str r7, [sp, 0x14]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x18]",
            "bne 0xbda08",
            "mov r3, r1",
            "ldr ip, [r3], 4",
            "tst r3, 3",
            "bne 0xbdb1c",
            "add r5, r3, 4",
            "tst r5, 3",
            "ldr r2, [r1, 4]",
            "bne 0xbdaf4",
            "tst r5, 3",
            "ldr fp, [r3, 4]",
            "bne 0xbdacc",
            "ldr r3, [r0, 0x48]",
            "ldr r4, [r0, 0x4c]",
            "eor ip, ip, r3",
            "eor r4, r2, r4",
            "lsr sb, ip, 8",
            "lsr sl, ip, 0x10",
            "lsr r7, r4, 8",
            "and sb, sb, 0xff",
            "and sl, sl, 0xff",
            "and r7, r7, 0xff",
            "lsr r8, r4, 0x18",
            "and r1, r4, 0xff",
            "lsr r3, r4, 0x10",
            "add sb, sb, 0x134",
            "add sl, sl, 0x234",
            "add r7, r7, 0x234",
            "and r6, ip, 0xff",
            "lsr r2, ip, 0x18",
            "add sb, sb, 2",
            "add sl, sl, 2",
            "add r8, r8, 0x36",
            "add r7, r7, 2",
            "add r1, r1, 0x134",
            "and r3, r3, 0xff",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x36",
            "add r2, r2, 0x334",
            "add r1, r1, 2",
            "add r3, r3, 0x334",
            "ldr r6, [r0, r6, lsl 2]",
            "ldr r1, [r0, r1, lsl 2]",
            "add r3, r3, 2",
            "add r2, r2, 2",
            "ldr r2, [r0, r2, lsl 2]",
            "eor sl, sb, sl",
            "eor r7, r8, r7",
            "ldr r8, [r0, r3, lsl 2]",
            "add r3, r0, 0x58",
            "eor r7, r7, r1",
            "ldr sb, [r3, 0x7c]",
            "eor sl, sl, r6",
            "eor r8, r7, r8",
            "ldr r6, [r3, 0x78]",
            "eor sl, sl, r2",
            "ldr r2, [r0, 0x50]",
            "ldr r1, [r5, 4]",
            "add sb, r8, sb",
            "ldr r5, [r0, 0x54]",
            "add r8, r8, sl",
            "eor fp, fp, r2",
            "add r2, r8, r6",
            "eor r2, r2, fp, ror 31",
            "add sb, sb, r8",
            "eor r5, r1, r5",
            "eor r1, r5, sb",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x74]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x70]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x6c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x68]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x64]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x60]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x5c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x58]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x54]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x50]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x4c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x48]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x44]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x40]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x3c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x38]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x34]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x30]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x2c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x28]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x24]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x20]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "lsr sl, r4, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, ip, 8",
            "lsr fp, r4, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, ip, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, ip, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x1c]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x18]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "lsr r7, r2, 0x10",
            "ror r1, r1, 1",
            "and r7, r7, 0xff",
            "lsr r6, r1, 8",
            "add r7, r7, 0x234",
            "lsr r8, r2, 8",
            "lsr fp, r1, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r1, 0x10",
            "and sb, r2, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r1, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r2, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0x14]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 0x10]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor ip, r7, ip, ror 31",
            "eor r4, sb, r4",
            "lsr r7, ip, 0x10",
            "ror r4, r4, 1",
            "and r7, r7, 0xff",
            "lsr r6, r4, 8",
            "add r7, r7, 0x234",
            "lsr sl, r4, 0x10",
            "and sl, sl, 0xff",
            "lsr r8, ip, 8",
            "and r6, r6, 0xff",
            "lsr fp, r4, 0x18",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "and sb, ip, 0xff",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "ldr r8, [r0, r8, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "str r6, [sp, 0x20]",
            "ldr r7, [sp, 0xc]",
            "and r5, r4, 0xff",
            "str sb, [sp, 0xc]",
            "add r5, r5, 0x134",
            "eor sb, r8, fp",
            "lsr sl, ip, 0x18",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "ldr sb, [r3, 0xc]",
            "eor r7, r7, r6",
            "eor r8, r8, sl",
            "add sb, r7, sb",
            "add r7, r7, r8",
            "ldr r8, [r3, 8]",
            "add sb, sb, r7",
            "add r7, r7, r8",
            "eor r2, r7, r2, ror 31",
            "eor r1, sb, r1",
            "ror r1, r1, 1",
            "and fp, r2, 0xff",
            "str fp, [sp, 4]",
            "lsr fp, r1, 0x18",
            "str fp, [sp, 8]",
            "ldr fp, [sp, 4]",
            "lsr sb, r2, 8",
            "add fp, fp, 0x36",
            "str fp, [sp, 4]",
            "ldr fp, [sp, 8]",
            "lsr sl, r2, 0x10",
            "add fp, fp, 0x36",
            "str fp, [sp, 8]",
            "ldr fp, [sp, 0x18]",
            "and sb, sb, 0xff",
            "and sl, sl, 0xff",
            "lsr r8, r2, 0x18",
            "add sb, sb, 0x134",
            "add sl, sl, 0x234",
            "add r8, r8, 0x334",
            "tst fp, 3",
            "ldr fp, [sp, 4]",
            "add sb, sb, 2",
            "add sl, sl, 2",
            "add r8, r8, 2",
            "ldr fp, [r0, fp, lsl 2]",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr r8, [r0, r8, lsl 2]",
            "and r7, r1, 0xff",
            "str fp, [sp, 0x24]",
            "str sl, [sp, 0x1c]",
            "lsr r6, r1, 8",
            "lsr r5, r1, 0x10",
            "add r7, r7, 0x134",
            "str sb, [sp, 0x20]",
            "str r8, [sp, 0xc]",
            "ldr r8, [sp, 8]",
            "and r6, r6, 0xff",
            "and r5, r5, 0xff",
            "add r7, r7, 2",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add r5, r5, 0x334",
            "add r6, r6, 2",
            "add r5, r5, 2",
            "ldr fp, [r0, r6, lsl 2]",
            "str r8, [sp, 8]",
            "ldr r6, [r0, r5, lsl 2]",
            "str r7, [sp, 4]",
            "ldr sl, [r3, 4]",
            "ldr r8, [r0, 0x44]",
            "ldr r5, [r0, 0x58]",
            "ldr r3, [r0, 0x38]",
            "ldr r7, [r0, 0x3c]",
            "ldr r0, [r0, 0x40]",
            "bne 0xbdaa4",
            "ldr sb, [sp, 0x10]",
            "eor r2, r2, r3",
            "cmp sb, 0",
            "movne r3, sb",
            "ldrne sb, [r3], 4",
            "ldreq r3, [sp, 0x18]",
            "strne r3, [sp, 0x10]",
            "ldrne r3, [sp, 0x18]",
            "eorne r2, r2, sb",
            "strne r2, [r3], 4",
            "streq r2, [r3], 4",
            "tst r3, 3",
            "bne 0xbda7c",
            "ldr sb, [sp, 0x10]",
            "eor r1, r1, r7",
            "cmp sb, 0",
            "ldrne r7, [sb], 4",
            "streq r1, [r3], 4",
            "eorne r1, r7, r1",
            "strne r1, [r3], 4",
            "strne sb, [sp, 0x10]",
            "tst r3, 3",
            "bne 0xbda54",
            "ldr r1, [sp, 8]",
            "ldr r7, [sp, 0x20]",
            "ldr sb, [sp, 0x1c]",
            "eor fp, r1, fp",
            "eor r2, r7, sb",
            "ldr r1, [sp, 4]",
            "ldr r7, [sp, 0x24]",
            "ldr sb, [sp, 0xc]",
            "eor fp, fp, r1",
            "eor r2, r2, r7",
            "ldr r1, [sp, 0x10]",
            "eor fp, fp, r6",
            "eor r2, r2, sb",
            "add r2, fp, r2",
            "cmp r1, 0",
            "add r5, r2, r5",
            "eor ip, r0, ip, ror 31",
            "eor ip, ip, r5",
            "ldrne r5, [r1], 4",
            "streq ip, [r3], 4",
            "eorne ip, r5, ip",
            "strne ip, [r3], 4",
            "strne r1, [sp, 0x10]",
            "tst r3, 3",
            "bne 0xbda2c",
            "b 0xbd9d4",
            "ldr r7, [sp, 0x10]",
            "add fp, fp, sl",
            "add r2, fp, r2",
            "cmp r7, 0",
            "eor r4, r2, r4",
            "eor r8, r8, r4, ror 1",
            "ldrne r4, [r7]",
            "streq r8, [r3]",
            "eorne r8, r4, r8",
            "strne r8, [r3]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000bd9d0]",
            "bl sym.imp.__assert_fail",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000bd9c0]",
            "bl sym.imp.__assert_fail",
            "ldr fp, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, fp, r3",
            "add r1, fp, r1",
            "add r0, fp, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000bd9c0]",
            "bl sym.imp.__assert_fail",
            "ldr r7, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000bd9c0]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000bd9c0]",
            "bl sym.imp.__assert_fail",
            "ldr fp, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, fp, r3",
            "add r1, fp, r1",
            "add r0, fp, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000bd9d0]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000bd9d0]",
            "bl sym.imp.__assert_fail",
            "ldr r8, [sp, 0x14]",
            "ldr r3, [0x000bd9c4]",
            "ldr r1, [0x000bd9c8]",
            "ldr r0, [0x000bd9cc]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000bd9d0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.strmake_root": {
        "function_address": "0x0004c1c4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r1",
            "add r1, r2, 1",
            "mov r4, r2",
            "bl rsym.alloc_root",
            "subs r5, r0, 0",
            "beq 0x4c1f4",
            "mov r1, r6",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "strb r3, [r5, r4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0007ba78": {
        "function_address": "0x0007ba78",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007ba40": {
        "function_address": "0x0007ba40",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DeCompress_yaSSL::input_buffer__int__yaSSL::input_buffer_": {
        "function_address": "0x000922c0",
        "instructions": [
            "ldr ip, [0x000922f0]",
            "ldr r3, [0x000922f4]",
            "add ip, pc, ip",
            "ldr r1, [0x000922f8]",
            "ldr r0, [0x000922fc]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1c",
            "ldr r2, [0x00092300]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Signer::Signer__": {
        "function_address": "0x0009a100",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Decode_TaoCrypt::Source_": {
        "function_address": "0x000a66c0",
        "instructions": [
            "ldr r3, [r1, 0xc]",
            "ldr r2, [r1]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x000a6894]",
            "cmp r3, r2",
            "add r2, r3, 1",
            "str r2, [r1, 0xc]",
            "mov r5, r1",
            "add r4, pc, r4",
            "mov r6, r0",
            "bhs 0xa6814",
            "ldr r2, [r1, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 2",
            "ldrne r3, [0x000a6898]",
            "strne r3, [r1, 0x10]",
            "beq 0xa670c",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r1",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [r5, 0xc]",
            "ldr r1, [r5]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "mov r7, r0",
            "str r2, [r5, 0xc]",
            "bhs 0xa6814",
            "ldr r2, [r5, 4]",
            "ldrb r2, [r2, r3]",
            "cmp r2, 0",
            "subeq r7, r0, 1",
            "add r0, r7, 3",
            "lsr r0, r0, 2",
            "strne r3, [r5, 0xc]",
            "cmp r0, 8",
            "bls 0xa683c",
            "cmp r0, 0x10",
            "movls r1, 0x10",
            "bls 0xa6778",
            "cmp r0, 0x20",
            "movls r1, 0x20",
            "bls 0xa6778",
            "cmp r0, 0x40",
            "movls r1, 0x40",
            "bhi 0xa685c",
            "ldr r3, [r6]",
            "cmp r3, r1",
            "blo 0xa6850",
            "cmp r7, 0",
            "ble 0xa6704",
            "ldr r2, [r5, 0xc]",
            "ldr r1, [r5]",
            "add r3, r2, 1",
            "cmp r1, r2",
            "str r3, [r5, 0xc]",
            "bls 0xa6814",
            "ldr r1, [r6]",
            "sub r7, r7, 1",
            "ldr ip, [r5, 4]",
            "lsr r3, r7, 2",
            "cmp r3, r1",
            "ldrb r8, [ip, r2]",
            "ldrlo r1, [r6, 4]",
            "blo 0xa67e0",
            "b 0xa6870",
            "sub r7, r7, 1",
            "ldr r0, [r6]",
            "lsr r3, r7, 2",
            "cmp r3, r0",
            "ldrb r8, [ip, r2]",
            "bhs 0xa6870",
            "ldr r0, [r1, r3, lsl 2]",
            "and r2, r7, 3",
            "lsl r2, r2, 3",
            "orr r2, r0, r8, lsl r2",
            "cmp r7, 0",
            "str r2, [r1, r3, lsl 2]",
            "beq 0xa6704",
            "ldr r2, [r5, 0xc]",
            "ldr r0, [r5]",
            "add r3, r2, 1",
            "cmp r2, r0",
            "str r3, [r5, 0xc]",
            "blo 0xa67c8",
            "ldr r3, [0x000a689c]",
            "ldr r1, [0x000a68a0]",
            "add r3, r4, r3",
            "ldr r0, [0x000a68a4]",
            "add r3, r3, 0x560",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 8",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a689c]",
            "add r3, r4, r3",
            "add r0, r3, r0, lsl 2",
            "ldr r1, [r0, 0x5ec]",
            "b 0xa6778",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt5BlockIjNS_20AllocatorWithCleanupIjEEE8CleanNewEj",
            "b 0xa6784",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r3, 1",
            "lsl r1, r3, r0",
            "b 0xa6778",
            "ldr r3, [0x000a689c]",
            "ldr r1, [0x000a68a0]",
            "ldr r0, [0x000a68a4]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt5BlockIjNS_20AllocatorWithCleanupIjEEE8CleanNewEj": {
        "function_address": "0x0003d348",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd74]!"
        ]
    },
    "sym.yaSSL::DiffieHellman::makeAgreement_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dae4",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r0, [r0]",
            "sub sp, sp, 0xc",
            "ldr ip, [r0, 0x28]",
            "mov r3, r1",
            "ldr r1, [r0, 0x2c]",
            "str r2, [sp]",
            "mov r2, ip",
            "bl rsym._ZN8TaoCrypt2DH5AgreeEPhPKhS3_j",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt2DH5AgreeEPhPKhS3_j": {
        "function_address": "0x0003d300",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xda4]!"
        ]
    },
    "sym.copy_typelib": {
        "function_address": "0x0004ac18",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r6, r1, 0",
            "mov r7, r0",
            "bne 0x4ac38",
            "mov r5, 0",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0x10",
            "bl rsym.alloc_root",
            "subs r5, r0, 0",
            "beq 0x4ac2c",
            "ldr r1, [r6]",
            "mov r0, r7",
            "add r1, r1, 1",
            "lsl r1, r1, 3",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "mov r8, r0",
            "str r0, [r5, 8]",
            "beq 0x4ac28",
            "ldr r3, [r6]",
            "add r3, r3, 1",
            "add r3, r0, r3, lsl 2",
            "str r3, [r5, 0xc]",
            "ldr r3, [r6]",
            "str r3, [r5]",
            "ldr r1, [r6, 4]",
            "cmp r1, 0",
            "streq r1, [r5, 4]",
            "bne 0x4ad14",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "beq 0x4acf8",
            "mov r4, 0",
            "b 0x4accc",
            "ldr r2, [r6, 0xc]",
            "ldr r3, [r5, 0xc]",
            "ldr r2, [r2, r4, lsl 2]",
            "str r2, [r3, r4, lsl 2]",
            "ldr r3, [r6]",
            "add r4, r4, 1",
            "cmp r3, r4",
            "bls 0x4acf4",
            "ldr r8, [r5, 8]",
            "ldr r2, [r6, 8]",
            "ldr r3, [r6, 0xc]",
            "ldr r1, [r2, r4, lsl 2]",
            "mov r0, r7",
            "ldr r2, [r3, r4, lsl 2]",
            "bl rsym.strmake_root",
            "cmp r0, 0",
            "str r0, [r8, r4, lsl 2]",
            "bne 0x4aca8",
            "b 0x4ac28",
            "ldr r8, [r5, 8]",
            "ldr r2, [r5]",
            "mov r3, 0",
            "str r3, [r8, r2, lsl 2]",
            "ldr r1, [r5]",
            "ldr r2, [r5, 0xc]",
            "str r3, [r2, r1, lsl 2]",
            "b 0x4ac2c",
            "mov r0, r7",
            "bl rsym.strdup_root",
            "cmp r0, 0",
            "str r0, [r5, 4]",
            "ldrne r8, [r5, 8]",
            "bne 0x4ac94",
            "b 0x4ac28"
        ]
    },
    "method.TaoCrypt::MD4.operator_TaoCrypt::MD4_const_": {
        "function_address": "0x000af16c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt3MD4C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt3MD44SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD4C1ERKS0_": {
        "function_address": "0x0003fee0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x64]!"
        ]
    },
    "rsym._ZN8TaoCrypt3MD44SwapERS0_": {
        "function_address": "0x0003e6e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x64]!"
        ]
    },
    "sym.mySTL::list_yaSSL::Digest_::pop_front__": {
        "function_address": "0x00088fa0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x88fe8",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::FileSink::put_TaoCrypt::Source_": {
        "function_address": "0x000a1d54",
        "instructions": [
            "ldr r3, [r0]",
            "ldr r2, [r1]",
            "push {r4, lr}",
            "ldr r0, [r1, 4]",
            "mov r1, 1",
            "bl sym.imp.fwrite",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL_CTX::SSL_CTX__": {
        "function_address": "0x00092bc0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10SSL_METHODEEEvPT_",
            "ldr r0, [r4, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4x509EEEvPT_",
            "mov r1, 0",
            "mov r2, 0",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "add r0, r4, 0xf4",
            "bl rsym._ZN5yaSSL5MutexD1Ev",
            "add r0, r4, 0xa4",
            "bl rsym._ZN5yaSSL7IntegerD1Ev",
            "add r0, r4, 0xa0",
            "bl rsym._ZN5yaSSL7IntegerD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.sslconnect": {
        "function_address": "0x0007a4ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov sl, r1",
            "sub sp, sp, 0x24",
            "mov r4, r0",
            "mov r1, 1",
            "mov r5, r2",
            "mov r0, sl",
            "add r2, sp, 0x1e",
            "mov r6, r3",
            "bl rsym.vio_blocking",
            "ldr r0, [r4]",
            "bl rsym.yaSSL_new",
            "subs r8, r0, 0",
            "beq 0x7a4bc",
            "bl rsym.yaSSL_clear",
            "mov r0, r8",
            "bl rsym.yaSSL_get_session",
            "mov r1, r5",
            "bl rsym.yaSSL_SESSION_set_timeout",
            "ldr r1, [sl]",
            "mov r0, r8",
            "bl rsym.yaSSL_set_fd",
            "mov r0, r8",
            "mov lr, pc",
            "bx r6",
            "cmp r0, 0",
            "ble 0x7a470",
            "mov r0, r8",
            "bl rsym.yaSSL_get_fd",
            "mov r4, 0",
            "mov r2, r0",
            "mov r1, 4",
            "mov r0, sl",
            "mov r3, r4",
            "str r4, [sp]",
            "bl rsym.vio_reset",
            "str r8, [sl, 0x98]",
            "mov r0, r4",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "add r7, sp, 0xc",
            "add r6, sp, 0x14",
            "add r5, sp, 0x10",
            "add r4, sp, 0x18",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r6",
            "mov r3, r7",
            "bl rsym.yaERR_get_error_line_data",
            "cmp r0, 0",
            "bne 0x7a480",
            "mov r0, r8",
            "bl rsym.yaSSL_free",
            "mov r0, sl",
            "ldrb r1, [sp, 0x1e]",
            "add r2, sp, 0x1f",
            "bl rsym.vio_blocking",
            "mov r0, 1",
            "b 0x7a464",
            "add r7, sp, 0xc",
            "add r6, sp, 0x14",
            "add r5, sp, 0x10",
            "add r4, sp, 0x18",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r5",
            "mov r3, r4",
            "bl rsym.yaERR_get_error_line_data",
            "cmp r0, 0",
            "bne 0x7a4cc",
            "b 0x7a4a4",
            "ldr ip, [0x0007a500]",
            "ldr r3, [0x0007a504]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "b 0x7a3cc"
        ]
    },
    "rsym.vio_blocking": {
        "function_address": "0x000407e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa64]!"
        ]
    },
    "rsym.yaSSL_new": {
        "function_address": "0x0003f5bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x67c]!"
        ]
    },
    "rsym.yaSSL_clear": {
        "function_address": "0x0003ebc0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd24]!"
        ]
    },
    "rsym.yaSSL_get_session": {
        "function_address": "0x0003fd00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1a4]!"
        ]
    },
    "rsym.yaSSL_SESSION_set_timeout": {
        "function_address": "0x0003f07c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9fc]!"
        ]
    },
    "rsym.yaSSL_set_fd": {
        "function_address": "0x0003d828",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa34]!"
        ]
    },
    "rsym.yaSSL_get_fd": {
        "function_address": "0x0003ddec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x65c]!"
        ]
    },
    "rsym.vio_reset": {
        "function_address": "0x0003eff8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa54]!"
        ]
    },
    "rsym.yaERR_get_error_line_data": {
        "function_address": "0x0003fd48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x174]!"
        ]
    },
    "fcn.0007e66c": {
        "function_address": "0x0007e66c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e6c8]",
            "ldr r3, [0x0007e6cc]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3AES7AESImplEEEvPT_",
            "ldr r3, [0x0007e6d0]",
            "ldr r1, [0x0007e6d4]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e6d8]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e6dc]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.mySTL::list_yaSSL::input_buffer_.push_front_yaSSL::input_buffer_": {
        "function_address": "0x000880f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "strne r3, [r0, 4]",
            "ldrne r3, [r4]",
            "streq r0, [r4, 4]",
            "strne r0, [r3]",
            "ldr r3, [r4, 8]",
            "str r0, [r4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::Init__": {
        "function_address": "0x000bb048",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "add r0, r0, 0x10",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Errors::Lookup_bool_": {
        "function_address": "0x00092d68",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "add r5, sp, 4",
            "mov r6, r1",
            "mov r0, r5",
            "add r1, r4, 0xc",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "ldr r7, [r4]",
            "bl rsym._ZN5yaSSL20yassl_int_cpp_local27GetSelfEv",
            "mov r1, 0",
            "mov r2, r0",
            "mov r0, r7",
            "bl rsym._ZN5mySTL7find_ifINS_4listIN5yaSSL11ThreadErrorEE8iteratorENS2_20yassl_int_cpp_local29thr_matchEEET_S8_S8_T0_",
            "subs r1, r0, 0",
            "moveq r6, r1",
            "beq 0x92dbc",
            "cmp r6, 0",
            "ldr r6, [r1, 0xc]",
            "moveq r0, r4",
            "bleq rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE5eraseENS3_8iteratorE",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "mov r0, r6",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.my_print_variables": {
        "function_address": "0x000578d4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [0x00057bf4]",
            "ldr r1, [0x00057bf8]",
            "add r5, pc, r5",
            "sub sp, sp, 0x11c",
            "mov r4, r0",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "ldr r1, [0x00057bfc]",
            "mov r0, 1",
            "add r1, r5, r1",
            "bl sym.imp.__printf_chk",
            "ldr r1, [0x00057c00]",
            "mov r0, 1",
            "add r1, r5, r1",
            "bl sym.imp.__printf_chk",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "beq 0x57a1c",
            "ldr r3, [0x00057c04]",
            "ldr sb, [0x00057c08]",
            "add r3, r5, r3",
            "str r3, [sp, 4]",
            "ldr r3, [0x00057c0c]",
            "add sb, r5, sb",
            "add r3, r5, r3",
            "str r3, [sp, 8]",
            "ldr r3, [0x00057c10]",
            "add r3, r5, r3",
            "str r3, [sp, 0xc]",
            "ldr r3, [r4, 0x18]",
            "tst r3, 0x80",
            "ldreq r8, [r4, 0xc]",
            "bne 0x57ba4",
            "cmp r8, 0",
            "beq 0x57a0c",
            "mov r1, sb",
            "ldr r2, [r4]",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "ldr r0, [r4]",
            "bl sym.imp.strlen",
            "add r6, r0, 1",
            "cmp r6, 0x21",
            "bhi 0x579ac",
            "ldr r3, [0x00057c14]",
            "ldr sl, [r5, r3]",
            "add r6, r6, 1",
            "mov r0, 0x20",
            "ldr r1, [sl]",
            "bl sym.imp._IO_putc",
            "cmp r6, 0x21",
            "bls 0x57994",
            "ldr r3, [r4, 0x18]",
            "and r3, r3, 0x7f",
            "sub r3, r3, 2",
            "cmp r3, 0xc",
            "addls pc, pc, r3, lsl 2",
            "b 0x57b24",
            "b 0x57b0c",
            "b 0x579f8",
            "b 0x579f8",
            "b 0x57b8c",
            "b 0x57b74",
            "b 0x57b64",
            "b 0x57b38",
            "b 0x57af8",
            "b 0x57af8",
            "b 0x57b24",
            "b 0x57ad4",
            "b 0x57a40",
            "b 0x57a28",
            "ldr r1, [0x00057c18]",
            "ldr r2, [r8]",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "ldr r3, [r4, 0x4c]",
            "add r4, r4, 0x48",
            "cmp r3, 0",
            "bne 0x57950",
            "add sp, sp, 0x11c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [0x00057c1c]",
            "ldm r8, {r2, r3}",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "ldm r8, {r6, r7}",
            "orrs r1, r6, r7",
            "beq 0x57bd8",
            "ldr r3, [0x00057c20]",
            "mov sl, 1",
            "add r3, r5, r3",
            "mov fp, 0",
            "str r3, [sp, 0x10]",
            "mov r8, 0",
            "str r5, [sp, 0x14]",
            "b 0x57a78",
            "adds sl, sl, sl",
            "adc fp, fp, fp",
            "add r8, r8, 1",
            "ldr r0, [r4, 0x14]",
            "and r2, r6, sl",
            "ldr r1, [r0]",
            "and r3, r7, fp",
            "cmp r1, r8",
            "bls 0x57acc",
            "orrs ip, r2, r3",
            "beq 0x57ac4",
            "bic r6, r6, sl",
            "bic r7, r7, fp",
            "orrs r1, r6, r7",
            "mov r1, r8",
            "ldreq r5, [sp, 0x10]",
            "ldrne r5, [sp, 0xc]",
            "bl rsym.get_type",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "orrs r3, r6, r7",
            "bne 0x57a6c",
            "ldr r5, [sp, 0x14]",
            "b 0x57a0c",
            "ldr r1, [r8]",
            "ldr r0, [r4, 0x14]",
            "bl rsym.get_type",
            "mov r2, r0",
            "ldr r1, [0x00057c20]",
            "mov r0, 1",
            "add r1, r5, r1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "ldr r2, [r8]",
            "cmp r2, 0",
            "ldreq r2, [0x00057c24]",
            "addeq r2, r5, r2",
            "b 0x57ae4",
            "ldrb r3, [r8]",
            "cmp r3, 0",
            "beq 0x57bcc",
            "ldr r2, [0x00057c28]",
            "add r2, r5, r2",
            "b 0x57ae4",
            "ldr r1, [0x00057c2c]",
            "mov r0, 1",
            "add r1, r5, r1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "add r6, sp, 0x18",
            "ldm r8, {r0, r1}",
            "mov r2, r6",
            "mov r3, 0xa",
            "bl rsym.longlong2str",
            "ldr r1, [0x00057c20]",
            "mov r2, r6",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "ldm r8, {r0, r1}",
            "add r2, sp, 0x18",
            "bl rsym.llstr",
            "b 0x57ae0",
            "ldr r1, [0x00057c30]",
            "ldr r2, [r8]",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "ldr r1, [0x00057c34]",
            "ldr r2, [r8]",
            "add r1, r5, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c",
            "mov r1, 0",
            "ldr r0, [sp, 8]",
            "mov r2, r4",
            "mov r3, r1",
            "ldr ip, [sp, 4]",
            "ldr ip, [ip]",
            "mov lr, pc",
            "bx ip",
            "mov r8, r0",
            "b 0x57960",
            "ldr r2, [0x00057c38]",
            "add r2, r5, r2",
            "b 0x57ae4",
            "ldr r1, [0x00057c20]",
            "ldr r2, [0x00057c24]",
            "add r1, r5, r1",
            "add r2, r5, r2",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "b 0x57a0c"
        ]
    },
    "rsym.get_type": {
        "function_address": "0x0003e7a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfe4]!"
        ]
    },
    "rsym.longlong2str": {
        "function_address": "0x00040354",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd6c]!"
        ]
    },
    "rsym.llstr": {
        "function_address": "0x0003f88c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x49c]!"
        ]
    },
    "sym.my_strtod": {
        "function_address": "0x0005b168",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "str r1, [sp, 4]",
            "ldr r6, [r1]",
            "ldr sb, [0x0005b6f8]",
            "cmp r6, r0",
            "mov r8, 0",
            "str r2, [sp]",
            "add sb, pc, sb",
            "str r8, [r2]",
            "movls r4, r0",
            "movls sl, r8",
            "movls r7, r8",
            "bls 0x5b1e0",
            "ldr r3, [0x0005b6fc]",
            "ldr r3, [sb, r3]",
            "ldr fp, [r3, 0x20]",
            "b 0x5b1b4",
            "mov r0, r4",
            "ldrb r5, [r0]",
            "add r4, r0, 1",
            "add r3, fp, r5",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5b22c",
            "cmp r4, r6",
            "bne 0x5b1b0",
            "mov r8, 0",
            "mov sl, r8",
            "mov r7, r8",
            "ldr r2, [sp, 4]",
            "mov r0, sl",
            "mov r1, r7",
            "str r4, [r2]",
            "bl sym.imp.__isinf",
            "cmp r0, 0",
            "beq 0x5b210",
            "ldr r0, [sp]",
            "mov r3, 0x4b",
            "ldr r7, [0x0005b700]",
            "str r3, [r0]",
            "mvn sl, 0",
            "cmp r8, 0",
            "addne r7, r7, 0x80000000",
            "mov r0, sl",
            "mov r1, r7",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r5, 0x2d",
            "movne r8, 0",
            "moveq r8, 1",
            "cmp r8, 0",
            "bne 0x5b280",
            "cmp r5, 0x2b",
            "movne r4, r0",
            "beq 0x5b280",
            "str r0, [sp, 8]",
            "mov r3, r0",
            "b 0x5b260",
            "ldrb r5, [r4]",
            "mov r3, 0",
            "cmp r5, 0x30",
            "bne 0x5b294",
            "add r4, r4, 1",
            "cmp r4, r6",
            "bne 0x5b258",
            "mov sl, 0",
            "mov r7, sl",
            "b 0x5b1e0",
            "add r4, r0, 1",
            "cmp r4, r6",
            "ldrbne r5, [r0, 1]",
            "bne 0x5b24c",
            "b 0x5b274",
            "ldr r1, [0x0005b704]",
            "mov sl, 0",
            "mov r0, 0",
            "str r3, [sp, 8]",
            "str r4, [sp, 0x18]",
            "str r0, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "mov r7, sl",
            "mov ip, r3",
            "b 0x5b2c4",
            "ldrb r5, [r4]",
            "mov ip, 0",
            "cmp r5, 0x2f",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, 0",
            "ldr r3, [0x0005b708]",
            "bls 0x5b5b4",
            "cmp r5, 0x39",
            "bhi 0x5b5a0",
            "bl fcn.000bf394",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "sub r0, r5, 0x30",
            "bl fcn.000bf2b8",
            "mov r2, r0",
            "mov r3, r1",
            "add r1, sp, 8",
            "ldm r1, {r0, r1}",
            "bl fcn.000bef84",
            "mov r2, 0",
            "mov sl, r0",
            "mov r7, r1",
            "ldr r3, [0x0005b708]",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "bl fcn.000bf394",
            "add r4, r4, 1",
            "cmp r4, r6",
            "str r0, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "bne 0x5b2bc",
            "mov r2, 0",
            "ldr r1, [sp, 0x18]",
            "mov r5, 0",
            "rsb r1, r1, r4",
            "str r1, [sp, 0x18]",
            "mov r3, r5",
            "cmp r2, 0",
            "beq 0x5b494",
            "ldr r2, [sp, 0x18]",
            "add r3, r2, r3",
            "cmp r3, 0",
            "beq 0x5b494",
            "sub r3, r6, 1",
            "cmp r4, r3",
            "bhs 0x5b494",
            "ldrb r3, [r4, 1]",
            "add r1, r4, 1",
            "cmp r3, 0x2d",
            "movne lr, 0",
            "moveq lr, 1",
            "cmp lr, 0",
            "bne 0x5b6ac",
            "cmp r3, 0x2b",
            "beq 0x5b6ac",
            "cmp r1, r6",
            "beq 0x5b6b4",
            "ldrb r0, [r1]",
            "add r3, fp, r0",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x5b6b4",
            "ldr ip, [0x0005b70c]",
            "mov r3, 0",
            "cmp r3, ip",
            "addle r3, r3, r3, lsl 2",
            "addle r3, r0, r3, lsl 1",
            "add r4, r1, 1",
            "suble r3, r3, 0x30",
            "cmp r6, r4",
            "bls 0x5b3f4",
            "ldrb r0, [r1, 1]",
            "mov r1, r4",
            "add r2, fp, r0",
            "ldrb r2, [r2, 1]",
            "tst r2, 4",
            "bne 0x5b3c0",
            "cmp lr, 0",
            "addne r5, r3, r5",
            "movne r6, 1",
            "beq 0x5b6ec",
            "cmp r5, 0",
            "beq 0x5b1e0",
            "cmp r6, 0",
            "bne 0x5b4a4",
            "ldr r0, [sp, 0x18]",
            "sub r2, r0, 1",
            "add r3, r2, r3",
            "eor fp, r3, r3, asr 31",
            "sub fp, fp, r3, asr 31",
            "cmp fp, 0x134",
            "blt 0x5b4a4",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, 0",
            "mov r3, 0",
            "bl fcn.000bf8fc",
            "cmp r0, 0",
            "bne 0x5b4a4",
            "cmp fp, 0x134",
            "bne 0x5b488",
            "add r3, sp, 0x10",
            "ldm r3, {r2, r3}",
            "mov r0, sl",
            "mov r1, r7",
            "bl fcn.000bf624",
            "mov r2, 0",
            "ldr r3, [0x0005b708]",
            "bl fcn.000bf394",
            "ldr r2, [0x0005b710]",
            "ldr r3, [0x0005b714]",
            "bl fcn.000bf95c",
            "cmp r0, 0",
            "beq 0x5b4a4",
            "ldr r2, [sp, 4]",
            "str r4, [r2]",
            "b 0x5b1fc",
            "rsb r5, r5, 0",
            "mov r3, 0",
            "mov r6, 0",
            "b 0x5b404",
            "cmp r5, 0",
            "rsblt r5, r5, 0",
            "movlt r6, 1",
            "cmp r5, 0x134",
            "ble 0x5b6e4",
            "ldr fp, [0x0005b718]",
            "cmp r6, 0",
            "ldr r3, [sb, fp]",
            "add r3, r3, 0x9a0",
            "ldm r3, {r2, r3}",
            "bne 0x5b568",
            "mov r0, sl",
            "mov r1, r7",
            "mov sl, sb",
            "mov r7, r3",
            "mov sb, r4",
            "mov r4, r6",
            "mov r6, r2",
            "sub r5, r5, 0x134",
            "mov r2, r6",
            "mov r3, r7",
            "bl fcn.000bf394",
            "cmp r5, 0x134",
            "bgt 0x5b4ec",
            "mov r6, r4",
            "mov r7, r1",
            "mov r4, sb",
            "mov sb, sl",
            "mov sl, r0",
            "cmp r6, 0",
            "beq 0x5b544",
            "ldr r3, [sb, fp]",
            "mov r0, sl",
            "add r5, r3, r5, lsl 3",
            "mov r1, r7",
            "ldm r5, {r2, r3}",
            "bl fcn.000bf624",
            "mov sl, r0",
            "mov r7, r1",
            "b 0x5b1e0",
            "ldr r3, [sb, fp]",
            "mov r0, sl",
            "add r5, r3, r5, lsl 3",
            "mov r1, r7",
            "ldm r5, {r2, r3}",
            "bl fcn.000bf394",
            "mov sl, r0",
            "mov r7, r1",
            "b 0x5b1e0",
            "mov r0, sl",
            "mov r1, r7",
            "mov sl, sb",
            "mov r7, r3",
            "mov sb, r4",
            "mov r4, r6",
            "mov r6, r2",
            "sub r5, r5, 0x134",
            "mov r2, r6",
            "mov r3, r7",
            "bl fcn.000bf624",
            "cmp r5, 0x134",
            "bgt 0x5b584",
            "b 0x5b504",
            "cmp r5, 0x65",
            "cmpne r5, 0x45",
            "movne r2, 0",
            "moveq r2, 1",
            "b 0x5b340",
            "ldr r1, [sp, 0x18]",
            "cmp r5, 0x2e",
            "rsb r1, r1, r4",
            "str ip, [sp, 8]",
            "str r1, [sp, 0x18]",
            "movne r5, 0",
            "bne 0x5b494",
            "sub r3, r6, 1",
            "cmp r4, r3",
            "movhs r5, 0",
            "bhs 0x5b498",
            "add r4, r4, 1",
            "mov r5, 0",
            "str r8, [sp, 0x24]",
            "str r4, [sp, 0x1c]",
            "mov r8, r6",
            "str sb, [sp, 0x20]",
            "mov r6, r5",
            "ldrb r5, [r4]",
            "mov r0, sl",
            "add ip, fp, r5",
            "ldrb ip, [ip, 1]",
            "mov r1, r7",
            "tst ip, 4",
            "mov r2, 0",
            "ldr r3, [0x0005b708]",
            "beq 0x5b6bc",
            "bl fcn.000bf394",
            "mov sb, r0",
            "sub r0, r5, 0x30",
            "mov sl, r1",
            "bl fcn.000bf2b8",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, sb",
            "mov r1, sl",
            "bl fcn.000bef84",
            "mov r2, 0",
            "mov sl, r0",
            "mov r7, r1",
            "ldr r3, [0x0005b708]",
            "add r1, sp, 0x10",
            "ldm r1, {r0, r1}",
            "bl fcn.000bf394",
            "add r4, r4, 1",
            "cmp r4, r8",
            "str r0, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "add r6, r6, 1",
            "bne 0x5b5fc",
            "mov r5, r6",
            "ldr sb, [sp, 0x20]",
            "mov r6, r8",
            "ldr r8, [sp, 0x24]",
            "mov r2, 0",
            "ldr r0, [sp, 0x1c]",
            "subs r3, r4, r0",
            "bne 0x5b354",
            "ldr r1, [sp, 8]",
            "cmp r1, 0",
            "movne r4, r1",
            "b 0x5b354",
            "add r1, r1, 1",
            "b 0x5b39c",
            "mov r3, 0",
            "b 0x5b3f4",
            "mov r2, r5",
            "cmp r2, 0x65",
            "cmpne r2, 0x45",
            "mov r5, r6",
            "ldr sb, [sp, 0x20]",
            "mov r6, r8",
            "movne r2, 0",
            "moveq r2, 1",
            "ldr r8, [sp, 0x24]",
            "b 0x5b690",
            "ldr fp, [0x0005b718]",
            "b 0x5b518",
            "rsb r5, r5, r3",
            "mov r6, 0",
            "b 0x5b404"
        ]
    },
    "sym.imp.__isinf": {
        "function_address": "0x0003d2c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdcc]!"
        ]
    },
    "fcn.000bf8fc": {
        "function_address": "0x000bf8fc",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.000bf8e4",
            "moveq r0, 1",
            "movne r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "fcn.000bf95c": {
        "function_address": "0x000bf95c",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.000bf8c8",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "sym.yaSSLv3_client_method": {
        "function_address": "0x00086820",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 0",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 1",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.get_collation_number": {
        "function_address": "0x00051138",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x000511d4]",
            "mov r7, r0",
            "ldr r1, [0x000511d8]",
            "ldr r0, [0x000511dc]",
            "add r5, pc, r5",
            "ldr r6, [0x000511e0]",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "bl sym.imp.pthread_once",
            "ldr r4, [r5, r6]",
            "ldr r8, [0x000511e4]",
            "b 0x51180",
            "ldr r3, [r5, r6]",
            "add r4, r4, 4",
            "add r3, r3, 0x3fc",
            "cmp r4, r3",
            "bhs 0x511cc",
            "ldr r3, [r4]",
            "mov r2, r7",
            "cmp r3, 0",
            "beq 0x5116c",
            "ldr r3, [r3, 0x14]",
            "subs r1, r3, 0",
            "beq 0x5116c",
            "ldr r3, [r5, r8]",
            "mov r0, r3",
            "ldr r3, [r3, 0x68]",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x5116c",
            "ldr r3, [r4]",
            "ldr r0, [r3]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x511c4"
        ]
    },
    "sym.imp.pthread_once": {
        "function_address": "0x00040978",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x954]!"
        ]
    },
    "sym.TaoCrypt::DH::DH_TaoCrypt::Source_": {
        "function_address": "0x000a0c34",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt2DH10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_stmt_reset": {
        "function_address": "0x00042360",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0, 0x2c]",
            "ldr r2, [0x000423a4]",
            "cmp r3, 0",
            "add r2, pc, r2",
            "beq 0x42384",
            "mov r1, 0xb",
            "pop {r4, lr}",
            "b fcn.00042124",
            "ldr r1, [0x000423a8]",
            "ldr r2, [r2, r1]",
            "ldr r1, [0x000423ac]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_Private_Decoder::DSA_Private_Decoder__": {
        "function_address": "0x0009d670",
        "instructions": [
            "ldr ip, [0x0009d6ac]",
            "ldr r3, [0x0009d6b0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d6b4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d6b8]",
            "ldr r0, [0x0009d6bc]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::sendCertificateRequest_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x000845f4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x54",
            "mov sl, r1",
            "mov r7, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x00084784]",
            "subs r8, r0, 0",
            "add r4, pc, r4",
            "beq 0x84624",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r5, sp, 8",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL18CertificateRequestC1Ev",
            "add r3, sp, 0x48",
            "mov r0, r5",
            "str r3, [sp, 4]",
            "bl rsym._ZN5yaSSL18CertificateRequest5BuildEv",
            "ldr r3, [sp, 4]",
            "mov r1, 3",
            "add r0, r3, 4",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00084788]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x3c]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 8]",
            "mov fp, r0",
            "mov r0, r5",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 0x3c",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add fp, fp, 4",
            "lsl fp, fp, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb ip, [r0, 0x12f]",
            "lsr fp, fp, 0x10",
            "mov r3, 0x16",
            "add r1, fp, 5",
            "mov r0, r6",
            "str r3, [sp, 0x48]",
            "strb r2, [sp, 0x4c]",
            "strb ip, [sp, 0x4d]",
            "strh fp, [sp, 0x4e]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "ldr r1, [sp, 4]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r7",
            "mov r1, r6",
            "mov r2, r8",
            "bl fcn.00081648",
            "cmp sl, 0",
            "beq 0x84770",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "ldr r3, [0x0008478c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x3c]",
            "bl rsym._ZN5yaSSL18CertificateRequestD1Ev",
            "b 0x84618",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r6, sl",
            "b 0x8474c"
        ]
    },
    "rsym._ZN5yaSSL18CertificateRequest5BuildEv": {
        "function_address": "0x00040228",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe34]!"
        ]
    },
    "rsym._ZN5yaSSL18CertificateRequestD1Ev": {
        "function_address": "0x0003e020",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4e4]!"
        ]
    },
    "sym.yaSSL::CertManager::Validate__": {
        "function_address": "0x0007c8e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [r0, 0x24]",
            "sub sp, sp, 0x4b0",
            "sub sp, sp, 0xc",
            "cmp r6, 1",
            "str r0, [sp, 0x20]",
            "ldr r4, [r0, 0x20]",
            "bls 0x7ca34",
            "add r5, sp, 0x38",
            "sub r5, r5, 8",
            "add r2, sp, 0x4a0",
            "add r0, r0, 0x44",
            "add r2, r2, 4",
            "add r3, r5, 0x250",
            "add ip, r5, 0x24",
            "str r0, [sp, 0x1c]",
            "str r2, [sp, 0x24]",
            "mov r7, 0",
            "mov r8, 1",
            "str r3, [sp, 0x28]",
            "str ip, [sp, 0x2c]",
            "b 0x7ca00",
            "mov r1, sl",
            "mov r0, r3",
            "ldr r2, [sp, 0x4a4]",
            "str r3, [sp, 0x4a8]",
            "bl sym.imp.memcpy",
            "ldr r0, [sp, 0x20]",
            "ldr r1, [sp, 0x24]",
            "ldrb ip, [r0, 0x51]",
            "mov r2, r8",
            "ldr r3, [sp, 0x1c]",
            "mov r0, r5",
            "str ip, [sp]",
            "str r7, [sp, 0x4b0]",
            "str r7, [sp, 0x4b4]",
            "str r8, [sp, 4]",
            "bl rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11BER_Decoder8GetErrorEv",
            "cmp r0, 0",
            "bne 0x7ca54",
            "mov r1, 0",
            "mov r0, 0x21c",
            "ldr sl, [sp, 0x38]",
            "ldr fp, [sp, 0x3c]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr ip, [sp, 0x2c]",
            "ldr r3, [sp, 0x28]",
            "mov r2, fp",
            "mov r1, sl",
            "mov sb, r0",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt6SignerC1EPKhjPKcS2_",
            "mov r1, sb",
            "ldr r0, [sp, 0x1c]",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEE9push_backES3_",
            "mov r0, r5",
            "ldr r4, [r4]",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr sl, [sp, 0x4a8]",
            "mov r1, r7",
            "ldr r2, [sp, 0x4a4]",
            "mov r0, sl",
            "bl sym.imp.memset",
            "sub r6, r6, 1",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "cmp r6, 1",
            "bls 0x7ca34",
            "ldr r0, [r4, 8]",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov sl, r0",
            "ldr r0, [r4, 8]",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [sp, 0x4a4]",
            "beq 0x7c940",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7c940",
            "cmp r6, 0",
            "moveq sl, r6",
            "bne 0x7ca80",
            "mov r0, sl",
            "add sp, sp, 0xbc",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov sl, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x4a8]",
            "mov r1, r7",
            "mov r0, r4",
            "ldr r2, [sp, 0x4a4]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x7ca40",
            "ldr r0, [r4, 8]",
            "bl rsym._ZNK5yaSSL4x50910get_bufferEv",
            "mov r5, r0",
            "ldr r0, [r4, 8]",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "cmp r0, 0",
            "mov r3, r0",
            "str r0, [sp, 0x4a4]",
            "bne 0x7cc34",
            "mov r1, r5",
            "mov r0, r3",
            "ldr r2, [sp, 0x4a4]",
            "str r3, [sp, 0x4a8]",
            "bl sym.imp.memcpy",
            "ldr r0, [sp, 0x20]",
            "add r5, sp, 0x38",
            "ldrb ip, [r0, 0x51]",
            "sub r5, r5, 8",
            "mov r6, 1",
            "add r1, sp, 0x4a0",
            "add r3, r0, 0x44",
            "mov r4, 0",
            "add r1, r1, 4",
            "mov r2, r6",
            "mov r0, r5",
            "str ip, [sp]",
            "str r4, [sp, 0x4b0]",
            "str r4, [sp, 0x4b4]",
            "str r6, [sp, 4]",
            "bl rsym._ZN8TaoCrypt11CertDecoderC1ERNS_6SourceEbPN5mySTL4listIPNS_6SignerEEEbNS0_8CertTypeE",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11BER_Decoder8GetErrorEv",
            "subs sl, r0, 0",
            "bne 0x7cc0c",
            "ldr r2, [sp, 0x20]",
            "ldr r4, [sp, 0x3c]",
            "add r7, r2, 0x28",
            "mov r1, r4",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_buffer8allocateEj",
            "ldr r1, [sp, 0x38]",
            "mov r0, r7",
            "mov r2, r4",
            "bl rsym._ZN5yaSSL12input_buffer6assignEPKhj",
            "ldr r3, [0x0007cc44]",
            "ldr r2, [sp, 0x50]",
            "add r7, r5, 0x50",
            "cmp r2, r3",
            "ldrne ip, [sp, 0x20]",
            "ldreq r3, [sp, 0x20]",
            "movne r3, 2",
            "streq r6, [r3, 0x40]",
            "strne r3, [ip, 0x40]",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "add sb, r5, 0x250",
            "mov r8, r0",
            "mov r0, sb",
            "bl sym.imp.strlen",
            "add r6, r5, 0x450",
            "mov sl, r0",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "add r4, r5, 0x460",
            "mov fp, r0",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov ip, r0",
            "mov r1, 0",
            "mov r0, 0x40",
            "str ip, [sp, 0x18]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr ip, [sp, 0x18]",
            "add lr, sl, 1",
            "add ip, ip, 1",
            "mov r3, sb",
            "mov r1, r7",
            "add r2, r8, 1",
            "add r7, fp, 1",
            "str lr, [sp]",
            "str ip, [sp, 0x10]",
            "str r4, [sp, 0xc]",
            "str r0, [sp, 0x1c]",
            "stmib sp, {r6, r7}",
            "bl rsym._ZN5yaSSL4X509C1EPKcjS2_jS2_iS2_i",
            "ldr r0, [sp, 0x1c]",
            "ldr r2, [sp, 0x20]",
            "mov sl, 0",
            "str r0, [r2, 0x38]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r4, [sp, 0x4a8]",
            "mov r1, 0",
            "ldr r2, [sp, 0x4a4]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x7ca40",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoderD1Ev",
            "ldr r5, [sp, 0x4a8]",
            "mov r1, r4",
            "ldr r2, [sp, 0x4a4]",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "b 0x7ca40",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7caa4"
        ]
    },
    "sym.my_xml_parser_create": {
        "function_address": "0x00072c70",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r2, 0x128",
            "bl sym.imp.memset",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_free_open_file_info": {
        "function_address": "0x000492e8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00049340]",
            "ldr r3, [0x00049344]",
            "add r4, pc, r4",
            "ldr r5, [r4, r3]",
            "ldr r3, [0x00049348]",
            "ldr r1, [r5]",
            "ldr r6, [r4, r3]",
            "cmp r1, r6",
            "beq 0x49338",
            "mov r2, 0x200",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "ldr r0, [r5]",
            "bl rsym.my_no_flags_free",
            "ldr r3, [0x0004934c]",
            "mov r2, 0x40",
            "ldr r3, [r4, r3]",
            "str r6, [r5]",
            "str r2, [r3]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.vio_read_buff": {
        "function_address": "0x0007a308",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0, 0x58]",
            "ldr r5, [r0, 0x5c]",
            "mov r4, r0",
            "cmp r3, r5",
            "mov r7, r1",
            "mov r6, r2",
            "blo 0x7a38c",
            "cmp r2, 0x800",
            "bhs 0x7a384",
            "ldr r1, [r0, 0x54]",
            "mov r2, 0x4000",
            "bl rsym.vio_read",
            "sub r3, r0, 1",
            "cmn r3, 3",
            "mov r5, r0",
            "bhi 0x7a378",
            "cmp r6, r0",
            "ldrlo r1, [r4, 0x54]",
            "ldrhs r1, [r4, 0x54]",
            "addlo r5, r1, r0",
            "addlo r3, r1, r6",
            "strlo r5, [r4, 0x5c]",
            "movlo r5, r6",
            "strlo r3, [r4, 0x58]",
            "mov r0, r7",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "pop {r4, r5, r6, r7, r8, lr}",
            "b rsym.vio_read",
            "rsb r5, r3, r5",
            "cmp r2, r5",
            "movlo r5, r2",
            "mov r0, r1",
            "mov r2, r5",
            "mov r1, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x58]",
            "add r3, r3, r5",
            "str r3, [r4, 0x58]",
            "b 0x7a378"
        ]
    },
    "rsym.vio_read": {
        "function_address": "0x0003d558",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc14]!"
        ]
    },
    "sym.my_wildcmp_8bit": {
        "function_address": "0x0005def8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "ldr r4, [sp, 0x40]",
            "mov r7, r0",
            "cmp r3, r4",
            "mov r5, r2",
            "ldr sl, [sp, 0x44]",
            "ldr r6, [sp, 0x48]",
            "ldr r8, [sp, 0x4c]",
            "beq 0x5dfec",
            "ldrb r2, [r3]",
            "mvn r0, 0",
            "cmp r2, r8",
            "beq 0x5df88",
            "cmp r2, r6",
            "beq 0x5e000",
            "cmp r2, sl",
            "beq 0x5dfd0",
            "cmp r1, r5",
            "mov r2, r3",
            "beq 0x5dfe4",
            "ldr r3, [r7, 0x2c]",
            "ldrb r0, [r2]",
            "ldrb ip, [r1]",
            "ldrb r0, [r3, r0]",
            "ldrb r3, [r3, ip]",
            "cmp r0, r3",
            "bne 0x5dfe4",
            "add r3, r2, 1",
            "cmp r3, r4",
            "add r1, r1, 1",
            "beq 0x5dfec",
            "ldrb r2, [r2, 1]",
            "mov r0, 1",
            "cmp r2, r8",
            "bne 0x5df30",
            "cmp r8, r6",
            "beq 0x5e000",
            "add r3, r3, 1",
            "cmp r4, r3",
            "beq 0x5dfc8",
            "ldrb r2, [r3]",
            "cmp r2, r8",
            "beq 0x5df90",
            "cmp r6, r2",
            "bne 0x5e058",
            "cmp r1, r5",
            "beq 0x5e0a0",
            "add r3, r3, 1",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bne 0x5df9c",
            "mov r0, 0",
            "b 0x5dff4",
            "add r2, r3, 1",
            "cmp r2, r4",
            "beq 0x5df40",
            "cmp r1, r5",
            "bne 0x5df4c",
            "mov r0, 1",
            "b 0x5dff4",
            "subs r0, r1, r5",
            "movne r0, 1",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r5, r1",
            "beq 0x5dff4",
            "add r3, r3, 1",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bhi 0x5e034",
            "b 0x5e040",
            "cmp r5, r1",
            "add r3, r3, 1",
            "beq 0x5dff4",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bls 0x5e040",
            "ldrb r2, [r3]",
            "cmp r6, r2",
            "beq 0x5e01c",
            "cmp r3, r4",
            "beq 0x5dfec",
            "ldrb r2, [r3]",
            "cmp r2, r8",
            "bne 0x5df28",
            "b 0x5df90",
            "cmp r3, r4",
            "beq 0x5dfc8",
            "cmp r1, r5",
            "beq 0x5e0a0",
            "cmp sl, r2",
            "addne fp, r3, 1",
            "beq 0x5e0f8",
            "ldr r3, [r7, 0x2c]",
            "add sb, r1, 1",
            "ldrb ip, [r3, r2]",
            "ldrb r2, [sb, -1]",
            "mov r1, sb",
            "ldrb r2, [r3, r2]",
            "cmp r2, ip",
            "beq 0x5e0a8",
            "cmp r5, r1",
            "add sb, sb, 1",
            "bne 0x5e080",
            "mvn r0, 0",
            "b 0x5dff4",
            "mov r1, sb",
            "mov r0, r7",
            "mov r2, r5",
            "mov r3, fp",
            "str ip, [sp, 0x14]",
            "stm sp, {r4, sl}",
            "str r6, [sp, 8]",
            "str r8, [sp, 0xc]",
            "bl rsym.my_wildcmp_8bit",
            "cmp r0, 0",
            "ldr ip, [sp, 0x14]",
            "ble 0x5dff4",
            "cmp r5, sb",
            "beq 0x5e0a0",
            "ldrb r3, [fp]",
            "add sb, sb, 1",
            "cmp r3, r8",
            "beq 0x5e0a0",
            "ldr r3, [r7, 0x2c]",
            "b 0x5e080",
            "add fp, r3, 1",
            "cmp fp, r4",
            "moveq fp, r4",
            "ldrbne r2, [r3, 1]",
            "addne fp, fp, 1",
            "b 0x5e074"
        ]
    },
    "rsym.my_wildcmp_8bit": {
        "function_address": "0x000404d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc6c]!"
        ]
    },
    "sym.yaSSL_get_verify_depth": {
        "function_address": "0x00085aa0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x38]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RMD::get_digest_unsigned_char_": {
        "function_address": "0x0007dd4c",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RSA::RSA__": {
        "function_address": "0x0007fa8c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007fad0]",
            "ldr r3, [0x0007fad4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RSA7RSAImplEEEvPT_",
            "ldr r3, [0x0007fad8]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_autocommit": {
        "function_address": "0x00041ec4",
        "instructions": [
            "ldr r3, [0x00041f00]",
            "cmp r1, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "bne 0x41ef4",
            "ldr r1, [0x00041f04]",
            "add r1, r3, r1",
            "mov r2, 0x10",
            "bl rsym.mysql_real_query",
            "and r0, r0, 0xff",
            "pop {r4, lr}",
            "bx lr",
            "ldr r1, [0x00041f08]",
            "add r1, r3, r1",
            "b 0x41ee0"
        ]
    },
    "sym.make_type": {
        "function_address": "0x0004ad30",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "strbeq r1, [r0]",
            "beq 0x4ad5c",
            "sub r1, r1, 1",
            "mov r0, r2",
            "bl rsym.get_type",
            "mov r1, r0",
            "mov r0, r4",
            "bl sym.imp.strcpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertificateVerify::CertificateVerify__": {
        "function_address": "0x0008aad0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008ab14]",
            "ldr r3, [0x0008ab18]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x2c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008ab1c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ServerKeyExchange::createKey_yaSSL::SSL_": {
        "function_address": "0x0008ee0c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl rsym._ZNK5yaSSL3SSL10getFactoryEv",
            "bl rsym._ZNK5yaSSL10sslFactory12getServerKeyEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r2, [r5, 4]",
            "ldr r3, [r5]",
            "ldr r0, [r0, 0x1c]",
            "cmp r3, r2",
            "bne 0x8ee58",
            "b 0x8ee80",
            "add r3, r3, 8",
            "cmp r2, r3",
            "beq 0x8ee80",
            "ldr r1, [r3]",
            "cmp r0, r1",
            "bne 0x8ee4c",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "str r0, [r6, 8]",
            "bne 0x8ee94",
            "b 0x8ee88",
            "mov r3, 0",
            "str r3, [r6, 8]",
            "mov r0, r4",
            "mov r1, 0x67",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL10sslFactory12getServerKeyEv": {
        "function_address": "0x0003f5ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x65c]!"
        ]
    },
    "sym.yaSSL::input_buffer::input_buffer_unsigned_int_": {
        "function_address": "0x0007c098",
        "instructions": [
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "mov r4, r0",
            "mov r5, r1",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "str r0, [r4, 8]",
            "str r5, [r4, 0xc]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::output_buffer::output_buffer_unsigned_int_": {
        "function_address": "0x0007bf0c",
        "instructions": [
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0]",
            "mov r4, r0",
            "mov r5, r1",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "stmib r4, {r0, r5}",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Integer::Integer_yaSSL::Integer_const_": {
        "function_address": "0x0007da50",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_time_to_str": {
        "function_address": "0x00078e68",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r2, r0",
            "ldrb r0, [r0, 0x1c]",
            "ldr r3, [0x00078ed8]",
            "cmp r0, 0",
            "sub sp, sp, 0x14",
            "add r3, pc, r3",
            "bne 0x78ecc",
            "ldr r5, [0x00078edc]",
            "add r5, r3, r5",
            "ldr ip, [r2, 0x14]",
            "ldr r4, [r2, 0xc]",
            "ldr lr, [r2, 0x10]",
            "ldr r2, [0x00078ee0]",
            "mov r0, r1",
            "add r3, r3, r2",
            "mov r1, 1",
            "mvn r2, 0",
            "str r5, [sp]",
            "stmib sp, {r4, lr}",
            "str ip, [sp, 0xc]",
            "bl sym.imp.__sprintf_chk",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr",
            "ldr r5, [0x00078ee4]",
            "add r5, r3, r5",
            "b 0x78e90"
        ]
    },
    "sym.my_hash_update": {
        "function_address": "0x00052934",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "ldr r0, [r0, 0x10]",
            "sub sp, sp, 0x34",
            "tst r0, 1",
            "mov r8, r1",
            "mov sl, r2",
            "mov r5, r3",
            "addeq sb, sp, 0x24",
            "beq 0x529c4",
            "ldr r3, [r6, 0x28]",
            "cmp r3, 0",
            "beq 0x52c04",
            "mov r0, r1",
            "mov r2, 1",
            "add r1, sp, 0x2c",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x2c]",
            "mov r4, r0",
            "add sb, sp, 0x24",
            "mov r0, r6",
            "mov r1, r4",
            "mov r3, sb",
            "bl rsym.my_hash_first",
            "cmp r0, 0",
            "beq 0x529c4",
            "cmp r8, r0",
            "bne 0x52b18",
            "mov r0, r6",
            "mov r1, r4",
            "ldr r2, [sp, 0x2c]",
            "mov r3, sb",
            "bl rsym.my_hash_next",
            "cmp r0, 0",
            "bne 0x529a0",
            "ldr r0, [r6, 8]",
            "ldr r7, [r6, 0x14]",
            "str r0, [sp, 0x18]",
            "ldr r1, [r6, 0xc]",
            "cmp r5, 0",
            "str r1, [sp, 0x14]",
            "add r2, sp, 0x30",
            "ldr r3, [r6, 0x30]",
            "ldreq r5, [r6, 4]",
            "str r2, [sp, 8]",
            "ldr ip, [sp, 8]",
            "mov r2, 4",
            "str r2, [ip, -0x10]!",
            "str ip, [sp, 8]",
            "mov r2, 1",
            "ldr lr, [sp, 8]",
            "str r2, [sp, 0x24]",
            "ldr ip, [r3, 0x68]",
            "mov r0, r3",
            "mov r1, sl",
            "mov r2, r5",
            "mov r3, sb",
            "str lr, [sp]",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r0, [sp, 0x18]",
            "ldr r3, [sp, 0x24]",
            "sub r0, r0, 1",
            "ldr r1, [sp, 0x14]",
            "and r2, r0, r3",
            "cmp r1, r2",
            "ldrls ip, [sp, 0x18]",
            "str r0, [sp, 0x10]",
            "lsrls r2, ip, 1",
            "subls r2, r2, 1",
            "andls r2, r2, r3",
            "ldr r3, [r6, 0x28]",
            "str r2, [sp, 0x2c]",
            "cmp r3, 0",
            "beq 0x52b28",
            "ldr r1, [sp, 8]",
            "mov r2, 0",
            "mov r0, r8",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x20]",
            "mov r1, r0",
            "add lr, sp, 0x30",
            "mov r0, 4",
            "ldr r3, [r6, 0x30]",
            "str r0, [lr, -8]!",
            "mov r0, 1",
            "str r0, [sp, 0x24]",
            "str lr, [sp, 0xc]",
            "mov r0, r3",
            "ldr ip, [r3, 0x68]",
            "mov r3, sb",
            "str lr, [sp]",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp, 0x24]",
            "ldr r0, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "and fp, r0, r3",
            "cmp r1, fp",
            "ldrls r2, [sp, 0x18]",
            "ldr r4, [sp, 0x2c]",
            "lsrls fp, r2, 1",
            "subls fp, fp, 1",
            "andls fp, fp, r3",
            "cmp r4, fp",
            "movne r3, 0",
            "bne 0x52af8",
            "b 0x52bfc",
            "str r4, [sp, 0x2c]",
            "add r5, r7, r4, lsl 3",
            "ldr sl, [r5, 4]",
            "cmp sl, r8",
            "beq 0x52c18",
            "ldr r4, [r7, r4, lsl 3]",
            "mov r3, r5",
            "cmn r4, 1",
            "bne 0x52af4",
            "mov r0, 1",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldm r6, {r1, r2}",
            "add r1, r8, r1",
            "str r2, [sp, 0x20]",
            "b 0x52a84",
            "ldr r3, [r6, 0x28]",
            "lsl r8, fp, 3",
            "add ip, r7, r8",
            "str ip, [sp, 0x1c]",
            "cmp r3, 0",
            "ldr r0, [ip, 4]",
            "beq 0x52c54",
            "ldr r1, [sp, 0xc]",
            "mov r2, 0",
            "mov lr, pc",
            "bx r3",
            "ldr r2, [sp, 0x28]",
            "mov r1, r0",
            "mov r3, 1",
            "ldr ip, [r6, 0x30]",
            "ldr lr, [sp, 8]",
            "str r3, [sp, 0x24]",
            "mov r3, 4",
            "str r3, [sp, 0x20]",
            "mov r0, ip",
            "mov r3, sb",
            "ldr ip, [ip, 0x68]",
            "str lr, [sp]",
            "ldr ip, [ip, 0x24]",
            "mov lr, pc",
            "bx ip",
            "ldr r2, [sp, 0x24]",
            "ldr r0, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "and r3, r0, r2",
            "cmp r1, r3",
            "ldrls ip, [sp, 0x18]",
            "lsrls r3, ip, 1",
            "subls r3, r3, 1",
            "andls r3, r3, r2",
            "cmp fp, r3",
            "beq 0x52c7c",
            "ldr r2, [sp, 0x1c]",
            "ldm r2, {r0, r1}",
            "stm r5, {r0, r1}",
            "add r2, r7, r3, lsl 3",
            "ldr r3, [r7, r3, lsl 3]",
            "cmp fp, r3",
            "bne 0x52bd8",
            "str r4, [r2]",
            "ldr r3, [sp, 0x1c]",
            "str sl, [r3, 4]",
            "mvn r3, 0",
            "str r3, [r7, r8]",
            "mov r0, 0",
            "b 0x52b1c",
            "ldr r4, [r6]",
            "ldr r2, [r6, 4]",
            "add r4, r1, r4",
            "str r2, [sp, 0x2c]",
            "b 0x52984",
            "ldr r2, [r5]",
            "cmp r3, 0",
            "mov ip, r5",
            "strne r2, [r3]",
            "beq 0x52c64",
            "cmp r4, fp",
            "bne 0x52b38",
            "ldr r3, [sp, 0x2c]",
            "mov r0, 0",
            "cmp r4, r3",
            "mvn r3, 0",
            "strne r2, [r5]",
            "strne sl, [r5, 4]",
            "str r3, [r5]",
            "b 0x52b1c",
            "ldm r6, {r1, r2}",
            "add r1, r0, r1",
            "str r2, [sp, 0x28]",
            "b 0x52b6c",
            "cmn r2, 1",
            "addne r5, r7, r2, lsl 3",
            "ldmne r5, {r0, r1}",
            "movne r4, r2",
            "stmne ip, {r0, r1}",
            "b 0x52c2c",
            "ldr r3, [r7, r8]",
            "mov r0, 0",
            "stm r5, {r3, sl}",
            "str r4, [r7, r8]",
            "b 0x52b1c"
        ]
    },
    "rsym.my_hash_next": {
        "function_address": "0x0003e110",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x444]!"
        ]
    },
    "sym._my_b_write": {
        "function_address": "0x00054bbc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x94]",
            "ldm r4, {r8, sb}",
            "ldr r3, [r4, 0xc]",
            "adds r6, r8, r0",
            "adc r7, sb, 0",
            "cmp r3, r7",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov sl, r2",
            "bhs 0x54c1c",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "mov r2, 0x1b",
            "mvn r3, 0",
            "str r2, [r0]",
            "str r2, [r5]",
            "mov r0, r3",
            "str r3, [r4, 0x90]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "bne 0x54c2c",
            "ldr r3, [r4, 8]",
            "cmp r3, r6",
            "blo 0x54bec",
            "ldr r3, [r4, 0x28]",
            "ldr fp, [r4, 0x2c]",
            "mov r0, r3",
            "rsb fp, r3, fp",
            "mov r1, r5",
            "mov r2, fp",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x28]",
            "mov r1, 1",
            "add r3, r3, fp",
            "mov r0, r4",
            "str r3, [r4, 0x28]",
            "bl rsym.my_b_flush_io_cache",
            "subs r1, r0, 0",
            "bne 0x54dac",
            "rsb sl, fp, sl",
            "cmp sl, 0x1000",
            "add fp, r5, fp",
            "blo 0x54d80",
            "ldr r3, [r4, 0x8c]",
            "cmp r3, 0",
            "beq 0x54ca4",
            "ldr r0, [r4, 0x88]",
            "ldm r4, {r2, r3}",
            "str r1, [sp, 4]",
            "str r1, [sp]",
            "bl rsym.my_seek",
            "orrs r1, r0, r1",
            "streq r1, [r4, 0x8c]",
            "bne 0x54da4",
            "ldr r3, [r4, 0x9c]",
            "bic sb, sl, 0xff0",
            "bic sb, sb, 0xf",
            "orr r3, r3, 4",
            "ldr r0, [r4, 0x88]",
            "mov r1, fp",
            "mov r2, sb",
            "bl rsym.my_write",
            "cmp r0, 0",
            "mvnne r0, 0",
            "strne r0, [r4, 0x90]",
            "bne 0x54c10",
            "ldr r6, [r4, 0x58]",
            "cmp r6, 0",
            "beq 0x54d68",
            "cmp sb, 0",
            "beq 0x54d68",
            "mov r7, fp",
            "mov r8, sb",
            "ldr r5, [r4, 0x94]",
            "ldm r4, {r2, r3}",
            "cmp r8, r5",
            "movlo r5, r8",
            "mov r0, r4",
            "bl fcn.000535f0",
            "mov r1, r7",
            "mov r2, r5",
            "ldr r0, [r6, 0x8c]",
            "bl sym.imp.memcpy",
            "ldr r3, [r6, 0x8c]",
            "mov r2, 0",
            "add r3, r3, r5",
            "str r2, [r6, 0x9c]",
            "str r3, [r6, 0x90]",
            "ldm r4, {r2, r3}",
            "str r2, [r6, 0x80]",
            "str r3, [r6, 0x84]",
            "ldr r3, [r4, 0x58]",
            "add r7, r7, r5",
            "ldr r2, [r3, 0x98]",
            "add r0, r3, 0x20",
            "str r2, [r3, 0x94]",
            "str r3, [sp, 0xc]",
            "bl sym.imp.pthread_cond_broadcast",
            "ldr r3, [sp, 0xc]",
            "mov r0, r3",
            "bl sym.imp.pthread_mutex_unlock",
            "subs r8, r8, r5",
            "bne 0x54cf0",
            "ldm r4, {r0, r1}",
            "adds r2, r0, sb",
            "adc r3, r1, 0",
            "stm r4, {r2, r3}",
            "rsb sl, sb, sl",
            "add fp, fp, sb",
            "mov r2, sl",
            "mov r1, fp",
            "ldr r0, [r4, 0x28]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x28]",
            "mov r0, 0",
            "add sl, r3, sl",
            "str sl, [r4, 0x28]",
            "b 0x54c10",
            "mvn r3, 0",
            "str r3, [r4, 0x90]",
            "mov r0, 1",
            "b 0x54c10"
        ]
    },
    "sym.TaoCrypt::Integer::operator_TaoCrypt::Integer_const_": {
        "function_address": "0x000aac34",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r2, [r0]",
            "ldr r6, [r1]",
            "sub sp, sp, 8",
            "cmp r6, r2",
            "mov r4, r0",
            "mov r5, r1",
            "bls 0xaac8c",
            "ldr r1, [r0, 4]",
            "mov ip, 1",
            "mov r3, r6",
            "add r0, r0, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r6",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r6, [r4]",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xaacc4",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xaace4",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r6, [r5, 0xc]",
            "cmp r6, 1",
            "beq 0xaacf8",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, r4",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xaacb4",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt16PositiveSubtractERNS_7IntegerERKS0_S3_",
            "b 0xaacb4",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym._ZN8TaoCrypt11PositiveAddERNS_7IntegerERKS0_S3_",
            "str r6, [r4, 0xc]",
            "b 0xaacb4"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::IsUnit_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad704",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "add r2, r0, 0xc",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7Integer3GcdERKS0_S2_",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6IsUnitEv",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer3GcdERKS0_S2_": {
        "function_address": "0x0003ed40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc24]!"
        ]
    },
    "sym.mysql_send_query": {
        "function_address": "0x0007480c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldrb r3, [r0, 0x358]",
            "sub sp, sp, 0x10",
            "cmp r3, 0",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "beq 0x74838",
            "ldrb r3, [r0, 0x39b]",
            "cmp r3, 0",
            "bne 0x7487c",
            "mov r3, 0",
            "mov r1, 1",
            "str r1, [sp, 8]",
            "str r6, [sp]",
            "str r5, [sp, 4]",
            "str r4, [r4, 0x3a8]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "mov r0, r4",
            "ldr ip, [r4, 0x3b0]",
            "mov r1, 3",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym.mysql_rpl_query_type",
            "cmp r0, 0",
            "bne 0x748a4",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r5",
            "bl rsym.mysql_master_send_query",
            "b 0x74870",
            "cmp r0, 1",
            "bne 0x74838",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r5",
            "bl rsym.mysql_slave_send_query",
            "b 0x74870"
        ]
    },
    "rsym.mysql_rpl_query_type": {
        "function_address": "0x0003f1a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x934]!"
        ]
    },
    "rsym.mysql_slave_send_query": {
        "function_address": "0x0003ef98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa94]!"
        ]
    },
    "sym.alloc_root": {
        "function_address": "0x0004c044",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r8, [r0]",
            "add r1, r1, 7",
            "cmp r8, 0",
            "mov r6, r0",
            "bic r4, r1, 7",
            "mov r5, r0",
            "beq 0x4c0f8",
            "ldr r3, [r8, 4]",
            "cmp r4, r3",
            "bhi 0x4c0b4",
            "rsb r4, r4, r3",
            "str r4, [r8, 4]",
            "ldr r0, [r8, 8]",
            "ldr r2, [r6, 0xc]",
            "rsb r0, r3, r0",
            "cmp r4, r2",
            "add r0, r8, r0",
            "bhs 0x4c0ac",
            "ldr r3, [r8]",
            "str r3, [r5]",
            "ldr r3, [r6, 4]",
            "str r3, [r8]",
            "mov r3, 0",
            "str r3, [r6, 0x18]",
            "str r8, [r6, 4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r0, 0x18]",
            "cmp r3, 9",
            "add r3, r3, 1",
            "str r3, [r0, 0x18]",
            "bls 0x4c0d4",
            "ldr r3, [r8, 4]",
            "cmp r3, 0x1000",
            "blo 0x4c154",
            "cmp r8, 0",
            "beq 0x4c0f8",
            "ldr r3, [r8, 4]",
            "cmp r4, r3",
            "bls 0x4c070",
            "mov r5, r8",
            "ldr r8, [r8]",
            "cmp r8, 0",
            "bne 0x4c0dc",
            "ldr r2, [r6, 0x14]",
            "ldr r1, [r6, 0x10]",
            "lsr r2, r2, 2",
            "mul r3, r1, r2",
            "add r7, r4, 0x10",
            "cmp r7, r3",
            "movlo r7, r3",
            "mov r0, r7",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "subs r8, r0, 0",
            "beq 0x4c178",
            "ldr r3, [r6, 0x14]",
            "sub r2, r7, 0x10",
            "add r3, r3, 1",
            "str r3, [r6, 0x14]",
            "ldr r3, [r5]",
            "str r2, [r8, 4]",
            "str r3, [r8]",
            "str r7, [r8, 8]",
            "str r8, [r5]",
            "ldr r3, [r8, 4]",
            "b 0x4c070",
            "ldr r2, [r8]",
            "ldr r3, [r0, 4]",
            "str r2, [r0]",
            "str r3, [r8]",
            "mov r3, 0",
            "str r8, [r0, 4]",
            "str r3, [r0, 0x18]",
            "ldr r8, [r0]",
            "b 0x4c0d4",
            "ldr r0, [r6, 0x1c]",
            "cmp r0, 0",
            "beq 0x4c0ac",
            "mov lr, pc",
            "bx r0",
            "mov r0, r8",
            "b 0x4c0ac"
        ]
    },
    "sym.TaoCrypt::PublicKey::PublicKey_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0009a28c",
        "instructions": [
            "mov r3, 0",
            "cmp r2, 0",
            "push {r4, r5, r6, lr}",
            "str r3, [r0, 4]",
            "mov r4, r0",
            "mov r5, r1",
            "str r3, [r0]",
            "beq 0x9a2c0",
            "mov r1, r2",
            "bl rsym._ZN8TaoCrypt9PublicKey7SetSizeEj",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt9PublicKey6SetKeyEPKh",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_TaoCrypt::Signer_::pop_front__": {
        "function_address": "0x00087850",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x87898",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaDH_new": {
        "function_address": "0x000859f8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "cmp r0, 0",
            "movne r3, 0",
            "strne r3, [r0]",
            "strne r3, [r0, 4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RMD::RMD_yaSSL::RMD_const_": {
        "function_address": "0x0007de8c",
        "instructions": [
            "ldr r3, [0x0007ded8]",
            "ldr r2, [0x0007dedc]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "str r2, [r0]",
            "mov r4, r0",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r1, [r6, 4]",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt9RIPEMD160C1ERKS0_",
            "str r5, [r4, 4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::AES::AES_unsigned_int_": {
        "function_address": "0x0007d5f8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007d694]",
            "ldr r3, [0x0007d698]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r6, r1",
            "mov r1, 0",
            "mov r0, 0x25c",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007d69c]",
            "mov r1, 0x10",
            "ldr r2, [r4, r2]",
            "add r7, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, 8",
            "add r8, r0, r1",
            "add r4, r0, 0x13c",
            "add ip, r0, 0x14c",
            "str r7, [r0, 0xc]",
            "mov r7, 0",
            "str r8, [r0, 8]",
            "str r7, [r0, 0x30]",
            "str r1, [r0, 0x130]",
            "str r4, [r0, 0x134]",
            "str ip, [r0, 0x138]",
            "str r3, [r0, 0x160]",
            "str r2, [r0, 0x12c]",
            "str r6, [r0, 0x258]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0x15c]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::RMD::RMDImpl__yaSSL::RMD::RMDImpl_": {
        "function_address": "0x00080e0c",
        "instructions": [
            "ldr r3, str._PSSDUW",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080e40]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::CertificateVerify_": {
        "function_address": "0x0008c278",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "add r6, sp, 4",
            "mov r2, 2",
            "mov r5, r1",
            "mov r1, r6",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "add r1, sp, 8",
            "mov r3, 0",
            "strh r3, [r1, -6]!",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r0, r5",
            "ldrh r1, [sp, 2]",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r1, 0",
            "ldrh r0, [sp, 2]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldrh r2, [sp, 2]",
            "mov r1, r0",
            "str r0, [r5, 0x2c]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::MontgomeryRepresentation__": {
        "function_address": "0x000adc54",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000add34]",
            "ldr r3, [0x000add38]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x50]",
            "ldr r2, [r0, 0x4c]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add r0, r4, 0x44",
            "ldr r1, [r4, 0x40]",
            "ldr r2, [r4, 0x3c]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [0x000add3c]",
            "ldr r6, [r4, 0x30]",
            "ldr r3, [r5, r3]",
            "ldr r2, [r4, 0x2c]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x20]",
            "ldr r2, [r4, 0x1c]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x10]",
            "ldr r2, [r4, 0xc]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000add40]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::MontgomeryRepresentation.CascadeExponentiate_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad1fc",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "ldr ip, [sp, 0x10]",
            "mov r4, r0",
            "str ip, [sp]",
            "ldr ip, [sp, 0x14]",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt12AbstractRing19CascadeExponentiateERKNS_7IntegerES3_S3_S3_",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.get_charset_by_csname": {
        "function_address": "0x00051c4c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r4, [0x00051cf0]",
            "mov r5, r0",
            "mov r6, r1",
            "ldr r0, [0x00051cf4]",
            "ldr r1, [0x00051cf8]",
            "add r4, pc, r4",
            "sub sp, sp, 0x214",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "mov r7, r2",
            "bl sym.imp.pthread_once",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym.get_charset_number",
            "cmp r0, 0",
            "bne 0x51ca4",
            "ands r0, r7, 0x10",
            "bne 0x51cb8",
            "add sp, sp, 0x214",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r1, r7",
            "bl fcn.00051b20",
            "cmp r0, 0",
            "bne 0x51c98",
            "b 0x51c90",
            "add r6, sp, 4",
            "mov r0, r6",
            "bl rsym.get_charsets_dir",
            "ldr r1, [0x00051cfc]",
            "mov r2, 0xa",
            "add r1, r4, r1",
            "bl sym.imp.memcpy",
            "mov r2, r5",
            "mov r3, r6",
            "mov r0, 0x16",
            "mov r1, 4",
            "bl rsym.my_error",
            "mov r0, 0",
            "b 0x51c98"
        ]
    },
    "rsym.get_charset_number": {
        "function_address": "0x0003f370",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x804]!"
        ]
    },
    "fcn.00051b20": {
        "function_address": "0x00051b20",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r4, [0x00051c38]",
            "ldr r3, [0x00051c3c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "sub sp, sp, 0x204",
            "ldr r5, [r3, r0, lsl 2]",
            "mov r6, r1",
            "cmp r5, 0",
            "beq 0x51b54",
            "ldr r3, [r5, 0xc]",
            "tst r3, 0x100",
            "beq 0x51b64",
            "mov r0, r5",
            "add sp, sp, 0x204",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r7, [0x00051c40]",
            "ldr r0, [r4, r7]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [r5, 0xc]",
            "ands sl, r3, 9",
            "beq 0x51c04",
            "tst r3, 0x200",
            "beq 0x51bb8",
            "tst r3, 0x100",
            "bne 0x51bbc",
            "ldr r3, [r5, 0x64]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x51bc8",
            "ldr r1, [0x00051c44]",
            "mov r0, r5",
            "add r1, r4, r1",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "beq 0x51bc8",
            "mov r5, 0",
            "ldr r0, [r4, r7]",
            "bl sym.imp.pthread_mutex_unlock",
            "b 0x51b54",
            "ldr r3, [r5, 0x68]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x51bf4",
            "ldr r1, [0x00051c44]",
            "mov r0, r5",
            "add r1, r4, r1",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "bne 0x51bb8",
            "ldr r3, [r5, 0xc]",
            "orr r3, r3, 0x100",
            "str r3, [r5, 0xc]",
            "b 0x51bbc",
            "mov r0, sp",
            "bl rsym.get_charsets_dir",
            "ldr r2, [0x00051c48]",
            "mov r3, sl",
            "add r2, r4, r2",
            "ldr r1, [r5, 0x10]",
            "bl rsym.strxmov",
            "mov r0, sp",
            "mov r1, r6",
            "bl fcn.000511e8",
            "mov r8, sp",
            "ldr r3, [r5, 0xc]",
            "b 0x51b7c"
        ]
    },
    "sym.my_longlong10_to_str_8bit": {
        "function_address": "0x0005ee24",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x48",
            "ldr r0, [sp, 0x6c]",
            "cmp r3, 0",
            "ldr r5, [sp, 0x68]",
            "mov r6, r0",
            "mov r7, r1",
            "mov r8, r2",
            "blt 0x5ef18",
            "mov sl, 1",
            "mov sb, 0",
            "orrs r3, r5, r6",
            "mov r3, 0",
            "strb r3, [sp, 0x44]",
            "beq 0x5ef04",
            "cmp r6, r3",
            "beq 0x5ef40",
            "add sl, sp, 4",
            "add r4, sl, 0x40",
            "mov r0, r5",
            "mov r1, r6",
            "mov r3, 0",
            "mov r2, 0xa",
            "bl fcn.000bfd8c",
            "add r3, r0, r0, lsl 2",
            "sub r3, r5, r3, lsl 1",
            "add r3, r3, 0x30",
            "cmp r1, 0",
            "mov r5, r0",
            "mov r6, r1",
            "strb r3, [r4, -1]!",
            "bne 0x5ee70",
            "cmn r0, 0x80000001",
            "bhi 0x5ee70",
            "ldr r1, [0x0005ef54]",
            "smull r3, r2, r1, r5",
            "asr r3, r5, 0x1f",
            "rsb r3, r3, r2, asr 2",
            "add r5, r5, 0x30",
            "add r2, r3, r3, lsl 2",
            "sub r2, r5, r2, lsl 1",
            "subs r5, r3, 0",
            "strb r2, [r4, -1]!",
            "bne 0x5eeb0",
            "add sl, sl, 0x40",
            "rsb r2, r4, sl",
            "cmp r2, r8",
            "movhs r2, r8",
            "add sl, r2, sb",
            "mov r0, r7",
            "mov r1, r4",
            "bl sym.imp.memcpy",
            "mov r0, sl",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r3, 0x30",
            "strb r3, [sp, 0x43]",
            "add r4, sp, 0x43",
            "mov r2, 1",
            "b 0x5eee8",
            "cmp r0, 0",
            "bge 0x5ee48",
            "mov r3, 0x2d",
            "rsbs r5, r5, 0",
            "rsc r6, r6, 0",
            "strb r3, [r7], 1",
            "sub r8, r2, 1",
            "mov sl, 2",
            "mov sb, 1",
            "b 0x5ee50",
            "cmn r5, 0x80000001",
            "addls sl, sp, 4",
            "addls r4, sl, 0x40",
            "bhi 0x5ee68",
            "b 0x5eeac"
        ]
    },
    "sym.my_search_option_files": {
        "function_address": "0x0004f0e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sb, r3",
            "ldr r3, [0x0004f4ec]",
            "sub sp, sp, 0x34",
            "str r3, [sp, 8]",
            "ldr r4, [0x0004f4f0]",
            "ldr ip, [sp, 8]",
            "ldr r3, [r1]",
            "ldr r5, [sb]",
            "ldr r1, [r2]",
            "add r4, pc, r4",
            "ldr r6, [r4, ip]",
            "mov sl, r0",
            "add r1, r1, r5, lsl 2",
            "rsb r0, r5, r3",
            "add r2, sp, 0x2c",
            "add r3, sp, 0x28",
            "str r6, [sp]",
            "ldr r8, [sp, 0x58]",
            "ldr r7, [sp, 0x5c]",
            "bl rsym.get_defaults_options",
            "add r0, r0, r5",
            "str r0, [sb]",
            "ldr r0, [r6]",
            "cmp r0, 0",
            "beq 0x4f40c",
            "ldr r3, [sp, 0x28]",
            "cmp r3, 0",
            "ldrne r2, [0x0004f4f4]",
            "ldrne r2, [r4, r2]",
            "strne r3, [r2]",
            "ldr sb, [sp, 0x2c]",
            "cmp sb, 0",
            "ldrne r3, [0x0004f4f8]",
            "ldrne r3, [r4, r3]",
            "strne sb, [r3]",
            "cmp r0, 0",
            "beq 0x4f190",
            "ldr r3, [0x0004f4fc]",
            "add r3, r4, r3",
            "cmp r8, r3",
            "beq 0x4f334",
            "cmp sb, 0",
            "beq 0x4f220",
            "ldr r2, [0x0004f500]",
            "mov ip, 0",
            "add r2, r4, r2",
            "mov r0, r8",
            "mov r1, r7",
            "mov r3, r2",
            "stm sp, {sb, ip}",
            "bl fcn.0004e800",
            "cmp r0, 0",
            "blt 0x4f218",
            "beq 0x4f20c",
            "ldr r5, [0x0004f504]",
            "ldr r2, [0x0004f508]",
            "ldr r3, [r4, r5]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "ldr r3, [sp, 0x2c]",
            "bl sym.imp.__fprintf_chk",
            "ldr r3, [r4, r5]",
            "ldr r2, [0x0004f50c]",
            "ldr r0, [r3]",
            "add r2, r4, r2",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 1",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x4f200",
            "ldr r4, [sp, 8]",
            "ldr r5, [0x0004f504]",
            "b 0x4f1e4",
            "mov r0, sl",
            "bl rsym.dirname_length",
            "cmp r0, 0",
            "bne 0x4f450",
            "ldr r1, [sp, 0x60]",
            "ldr r6, [r1]",
            "cmp r6, 0",
            "beq 0x4f20c",
            "ldr r3, [0x0004f500]",
            "ldr r2, [0x0004f4f4]",
            "add r5, r4, r3",
            "ldr r3, [0x0004f510]",
            "mov fp, r1",
            "add r3, r4, r3",
            "str r3, [sp, 0x14]",
            "add r3, sp, 0x20",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "str r4, [sp, 8]",
            "b 0x4f2bc",
            "ldr r2, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "ldr r6, [r2, r1]",
            "ldr ip, [r6]",
            "cmp ip, 0",
            "beq 0x4f2b0",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r5",
            "mov r3, r5",
            "str ip, [sp]",
            "str r4, [sp, 4]",
            "bl fcn.0004e800",
            "cmp r0, 0",
            "blt 0x4f214",
            "bne 0x4f4c4",
            "ldr r6, [fp, 4]!",
            "cmp r6, 0",
            "beq 0x4f20c",
            "ldrb r4, [r6]",
            "cmp r4, 0",
            "beq 0x4f270",
            "mov r0, sl",
            "str r5, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "bl rsym.fn_ext",
            "ldrb r3, [r0]",
            "ldr r4, [sp, 0x10]",
            "ldr ip, [sp, 0x14]",
            "cmp r3, 0",
            "moveq r4, ip",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "bne 0x4f308",
            "b 0x4f2b0",
            "ldr r3, [r4, 4]!",
            "cmp r3, 0",
            "beq 0x4f2b0",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r6",
            "str sl, [sp]",
            "str sb, [sp, 4]",
            "bl fcn.0004e800",
            "cmp r0, 0",
            "bge 0x4f2fc",
            "ldr r4, [sp, 8]",
            "ldr r5, [0x0004f504]",
            "b 0x4f1e4",
            "bl sym.imp.strlen",
            "ldr r6, [r7, 8]",
            "mov sb, r0",
            "ldr r1, [r6]",
            "ldr r0, [r7]",
            "lsl r1, r1, 3",
            "add r1, r1, 4",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "str r0, [sp, 0x14]",
            "beq 0x4f404",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "beq 0x4f430",
            "add sb, sb, 1",
            "mov r5, 0",
            "str sl, [sp, 0x18]",
            "mov fp, r5",
            "mov sl, sb",
            "str r8, [sp, 0x1c]",
            "mov sb, r7",
            "str r4, [sp, 0xc]",
            "mov r7, r0",
            "b 0x4f3d8",
            "ldr r3, [r6]",
            "add r3, fp, r3",
            "str r8, [r7, r3, lsl 2]",
            "ldr r1, [r7, r5]",
            "bl sym.imp.memcpy",
            "ldr r2, [sp, 0xc]",
            "ldr r1, [sp, 8]",
            "add r0, r8, r4",
            "ldr r3, [r2, r1]",
            "mov r2, sl",
            "ldr r1, [r3]",
            "bl sym.imp.memcpy",
            "ldr r3, [r6]",
            "add fp, fp, 1",
            "cmp r3, fp",
            "add r5, r5, 4",
            "bls 0x4f420",
            "ldr r3, [r6, 8]",
            "ldr r0, [r3, r5]",
            "str r0, [r7, r5]",
            "bl sym.imp.strlen",
            "mov r4, r0",
            "add r1, r0, sl",
            "ldr r0, [sb]",
            "bl rsym.alloc_root",
            "subs r8, r0, 0",
            "mov r2, r4",
            "bne 0x4f394",
            "mov r0, 2",
            "b 0x4f200",
            "ldr r0, [0x0004f514]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "str r0, [r6]",
            "b 0x4f150",
            "ldr sl, [sp, 0x18]",
            "ldr r8, [sp, 0x1c]",
            "ldr r4, [sp, 0xc]",
            "mov r7, sb",
            "ldr ip, [sp, 0x14]",
            "lsl r3, r3, 1",
            "mov r2, 0",
            "str ip, [r6, 8]",
            "str r3, [r6]",
            "str r2, [ip, r3, lsl 2]",
            "ldr sb, [sp, 0x2c]",
            "b 0x4f190",
            "ldr r3, [0x0004f500]",
            "mov r0, sl",
            "add r3, r4, r3",
            "str r3, [sp, 0x20]",
            "str sb, [sp, 0x24]",
            "bl rsym.fn_ext",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "addne r6, sp, 0x20",
            "ldreq r6, [0x0004f510]",
            "addeq r6, r4, r6",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "beq 0x4f20c",
            "mov r5, 0",
            "b 0x4f49c",
            "ldr r3, [r6, 4]!",
            "cmp r3, 0",
            "beq 0x4f20c",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r5",
            "str sl, [sp]",
            "str r5, [sp, 4]",
            "bl fcn.0004e800",
            "cmp r0, 0",
            "bge 0x4f490",
            "ldr r5, [0x0004f504]",
            "b 0x4f1e4",
            "ldr r4, [sp, 8]",
            "ldr r5, [0x0004f504]",
            "ldr r2, [0x0004f508]",
            "ldr r3, [r4, r5]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "ldr r3, [r6]",
            "bl sym.imp.__fprintf_chk",
            "b 0x4f1e4"
        ]
    },
    "rsym.get_defaults_options": {
        "function_address": "0x0003cd90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x144]!"
        ]
    },
    "fcn.0004e800": {
        "function_address": "0x0004e800",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34c0",
            "sub sp, sp, 4",
            "ldr r6, [0x0004f0a8]",
            "subs r4, r2, 0",
            "str r1, [sp, 0x14]",
            "add r1, sp, 0x3000",
            "add r6, pc, r6",
            "str r0, [sp, 0x10]",
            "mov r7, r3",
            "ldr r5, [r1, 0x4e8]",
            "moveq r8, r4",
            "beq 0x4e840",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r8, r0",
            "mov r0, r5",
            "bl sym.imp.strlen",
            "add r0, r0, r8",
            "cmp r0, 0x1fc",
            "bhi 0x4ebf0",
            "cmp r4, 0",
            "beq 0x4f04c",
            "add r2, sp, 0x3040",
            "add r2, r2, 0x10",
            "sub r2, r2, 4",
            "str r2, [sp, 0xc]",
            "mov r0, r2",
            "mov r1, r4",
            "mov r2, 0",
            "bl rsym.convert_dirname",
            "ldrb r3, [r4]",
            "mov r1, r5",
            "cmp r3, 0x7e",
            "moveq r3, 0x2e",
            "strbeq r3, [r0], 1",
            "mov r2, r7",
            "mov r3, 0",
            "bl rsym.strxmov",
            "ldr ip, [0x0004f0ac]",
            "ldr r1, [sp, 0xc]",
            "add r2, r6, ip",
            "mov r3, r2",
            "str ip, [sp, 0x28]",
            "mov r0, r1",
            "mov ip, 4",
            "str ip, [sp]",
            "bl rsym.fn_format",
            "add r1, sp, 0x3440",
            "ldr r0, [sp, 0xc]",
            "add r1, r1, 0x18",
            "mov r2, 0",
            "bl rsym.my_stat",
            "cmp r0, 0",
            "beq 0x4ef14",
            "add r1, sp, 0x3000",
            "ldr r2, [r1, 0x468]",
            "ldr r3, [0x0004f0b0]",
            "and r3, r2, r3",
            "ldr r2, [0x0004f0b4]",
            "cmp r3, r2",
            "beq 0x4ebd0",
            "mov r1, 0",
            "ldr r0, [sp, 0xc]",
            "mov r2, r1",
            "bl rsym.my_fopen",
            "cmp r0, 0",
            "str r0, [sp, 8]",
            "beq 0x4ef14",
            "ldr r3, [0x0004f0b8]",
            "mov r2, 0",
            "add r3, r6, r3",
            "str r3, [sp, 0x2c]",
            "ldr r3, [0x0004f0bc]",
            "add r5, sp, 0x2080",
            "add r3, r6, r3",
            "str r3, [sp, 0x20]",
            "ldr r3, [0x0004f0c0]",
            "str r2, [sp, 0x18]",
            "add r3, r6, r3",
            "str r3, [sp, 0x24]",
            "ldr r3, [sp, 0x2c]",
            "sub r5, r5, 0x34",
            "add r3, r3, 0xc",
            "mov r4, r2",
            "str r3, [sp, 0x30]",
            "mov r0, r5",
            "ldr r1, [0x0004f0c4]",
            "ldr r2, [sp, 8]",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x4ed28",
            "ldr sl, [0x0004f0c8]",
            "ldr r3, [0x0004f0cc]",
            "ldr r2, [r6, sl]",
            "add ip, sp, 0x34c0",
            "ldrb r3, [ip, r3]",
            "ldr r8, [r2, 0x20]",
            "add r4, r4, 1",
            "add r2, r8, r3",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "moveq r7, r5",
            "beq 0x4e9b8",
            "mov r7, r5",
            "ldrb r3, [r7, 1]!",
            "add r2, r8, r3",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "bne 0x4e9a4",
            "cmp r3, 0x23",
            "cmpne r3, 0x3b",
            "movne r1, 0",
            "moveq r1, 1",
            "beq 0x4e958",
            "cmp r3, 0",
            "beq 0x4e958",
            "cmp r3, 0x21",
            "beq 0x4eca4",
            "cmp r3, 0x5b",
            "beq 0x4ed40",
            "ldr r2, [sp, 0x18]",
            "cmp r2, 0",
            "beq 0x4f070",
            "ldrb r3, [r7]",
            "cmp r3, 0",
            "moveq fp, r7",
            "beq 0x4ea58",
            "mov fp, r7",
            "mov r2, r1",
            "cmp r3, 0x27",
            "cmpne r3, 0x22",
            "bne 0x4ec60",
            "cmp r2, 0",
            "bne 0x4ec60",
            "cmp r1, 0",
            "moveq r1, r3",
            "beq 0x4ea30",
            "cmp r1, r3",
            "beq 0x4ec68",
            "eor r2, r2, 1",
            "cmp r3, 0x5c",
            "movne r2, 0",
            "andeq r2, r2, 1",
            "cmp r2, 0",
            "movne r2, 1",
            "moveq r2, 0",
            "ldrb r3, [fp, 1]!",
            "cmp r3, 0",
            "bne 0x4ea08",
            "mov r0, r7",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "movne r3, r0",
            "moveq r3, fp",
            "mov fp, r3",
            "ldrb r2, [r3, -1]!",
            "add r2, r8, r2",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "bne 0x4ea70",
            "cmp r0, 0",
            "beq 0x4eec0",
            "ldrb r3, [r0, 1]",
            "add sb, r0, 1",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x4eabc",
            "ldrb r3, [sb, 1]!",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4eaa8",
            "mov r0, sb",
            "bl rsym.strend",
            "ldr r3, [r6, sl]",
            "ldr r1, [r3, 0x20]",
            "mov r2, r0",
            "ldrb r3, [r0, -1]!",
            "add r3, r1, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4eacc",
            "ldrb r3, [sb]",
            "cmp r2, sb",
            "movlo r2, sb",
            "cmp r3, 0x22",
            "cmpne r3, 0x27",
            "bne 0x4eb18",
            "add r8, sb, 1",
            "cmp r8, r2",
            "bhs 0x4eb18",
            "ldrb r1, [r2, -1]",
            "sub sl, r2, 1",
            "cmp r1, r3",
            "beq 0x4eb20",
            "mov sl, r2",
            "mov r8, sb",
            "ldr ip, [sp, 0x20]",
            "add sb, sp, 0x80",
            "ldr r3, [ip]",
            "sub sb, sb, 0x38",
            "mov r0, sb",
            "strh r3, [r0], 2",
            "lsr r3, r3, 0x10",
            "strb r3, [sb, 2]",
            "mov r1, r7",
            "rsb r2, r7, fp",
            "bl rsym.strnmov",
            "mov r3, 0x3d",
            "cmp r8, sl",
            "strb r3, [r0], 1",
            "beq 0x4eb90",
            "sub r2, sl, 1",
            "mov fp, 0xa",
            "mov r7, 0x5c",
            "mov lr, 0x20",
            "mov ip, 9",
            "mov r1, 0xd",
            "ldrb r3, [r8]",
            "cmp r3, 0x5c",
            "beq 0x4ec04",
            "strb r3, [r0], 1",
            "add r8, r8, 1",
            "cmp sl, r8",
            "bne 0x4eb74",
            "mov r3, 0",
            "strb r3, [r0]",
            "add r1, sp, 0x1080",
            "sub r1, r1, 0x34",
            "mov r2, sb",
            "ldr r0, [sp, 0x14]",
            "ldr ip, [sp, 0x10]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x4e958",
            "ldr r0, [sp, 8]",
            "mov r1, 0",
            "bl rsym.my_fclose",
            "mvn r0, 0",
            "b 0x4ebf4",
            "ldr r3, [0x0004f0d0]",
            "ldr r2, [0x0004f0d4]",
            "ldr r3, [r6, r3]",
            "add r2, r6, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "ldr r3, [sp, 0xc]",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 0",
            "add sp, sp, 0xc4",
            "add sp, sp, 0x3400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r8, r2",
            "beq 0x4eb80",
            "ldrb r3, [r8, 1]!",
            "cmp r3, 0x6e",
            "moveq r3, fp",
            "strbeq r3, [r0], 1",
            "beq 0x4eb84",
            "bhi 0x4ec7c",
            "cmp r3, 0x5c",
            "beq 0x4eb80",
            "bhi 0x4edd8",
            "cmp r3, 0x22",
            "beq 0x4eb80",
            "cmp r3, 0x27",
            "beq 0x4eb80",
            "mov r3, r0",
            "strb r7, [r3], 1",
            "str r3, [sp, 0x1c]",
            "ldrb r3, [r8]",
            "strb r3, [r0, 1]",
            "ldr r3, [sp, 0x1c]",
            "add r0, r3, 1",
            "b 0x4eb84",
            "cmp r1, 0",
            "bne 0x4ea30",
            "cmp r3, 0x23",
            "beq 0x4edc4",
            "mov r1, 0",
            "mov r2, 0",
            "b 0x4ea4c",
            "cmp r3, 0x73",
            "strbeq lr, [r0], 1",
            "beq 0x4eb84",
            "cmp r3, 0x74",
            "strbeq ip, [r0], 1",
            "beq 0x4eb84",
            "cmp r3, 0x72",
            "bne 0x4ec40",
            "strb r1, [r0], 1",
            "b 0x4eb84",
            "add r1, sp, 0x3000",
            "ldr r1, [r1, 0x4ec]",
            "cmp r1, 9",
            "ble 0x4edec",
            "mov r0, r7",
            "bl sym.imp.strlen",
            "sub r3, r0, 1",
            "add r3, r7, r3",
            "mov lr, r3",
            "ldrb r2, [r3, -1]!",
            "add r2, r8, r2",
            "ldrb r2, [r2, 1]",
            "ands r2, r2, 8",
            "bne 0x4ecc4",
            "ldr r3, [0x0004f0d0]",
            "mov ip, r2",
            "ldr r3, [r6, r3]",
            "ldr r2, [0x0004f0d8]",
            "ldr r0, [r3]",
            "strb ip, [lr]",
            "ldr ip, [sp, 0xc]",
            "add r2, r6, r2",
            "mov r3, r7",
            "mov r1, 1",
            "str ip, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.__fprintf_chk",
            "mov r0, r5",
            "ldr r1, [0x0004f0c4]",
            "ldr r2, [sp, 8]",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "bne 0x4e970",
            "mov r7, r0",
            "mov r1, r7",
            "ldr r0, [sp, 8]",
            "bl rsym.my_fclose",
            "mov r0, r7",
            "b 0x4ebf4",
            "add r7, r7, 1",
            "mov r0, r7",
            "mov r1, 0x5d",
            "bl sym.imp.strchr",
            "subs r2, r0, 0",
            "beq 0x4f098",
            "mov r3, r2",
            "ldrb r1, [r2, -1]!",
            "add r1, r8, r1",
            "ldrb r1, [r1, 1]",
            "ands r1, r1, 8",
            "bne 0x4ed58",
            "mov sl, r1",
            "add r8, sp, 0x1080",
            "rsb r1, r7, r3",
            "ldr r2, [0x0004f0c4]",
            "sub r8, r8, 0x34",
            "add r1, r1, 1",
            "cmp r1, r2",
            "movlo r2, r1",
            "strb sl, [r3]",
            "mov r1, r7",
            "mov r0, r8",
            "bl rsym.strmake",
            "mov r1, r8",
            "ldr r0, [sp, 0x14]",
            "mov r2, sl",
            "ldr ip, [sp, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, 1",
            "str r1, [sp, 0x18]",
            "b 0x4e958",
            "ldr r3, [r6, sl]",
            "mov r2, 0",
            "strb r2, [fp]",
            "ldr r8, [r3, 0x20]",
            "b 0x4ea58",
            "cmp r3, 0x62",
            "bne 0x4ec40",
            "mov r3, 8",
            "strb r3, [r0], 1",
            "b 0x4eb84",
            "ldrb r3, [r7, 1]",
            "add sl, r7, 1",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x4ee18",
            "ldrb r3, [sl, 1]!",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4ee04",
            "mov r0, sl",
            "ldr r1, [sp, 0x2c]",
            "mov r2, 0xa",
            "bl sym.imp.strncmp",
            "subs r7, r0, 0",
            "bne 0x4ee44",
            "ldrb r3, [sl, 0xa]",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4ef1c",
            "mov r0, sl",
            "ldr r1, [sp, 0x30]",
            "mov r2, 7",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x4e958",
            "ldrb r3, [sl, 7]",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x4e958",
            "mov r2, sl",
            "ldr r0, [sp, 0x30]",
            "mov r1, 8",
            "ldr r3, [sp, 0xc]",
            "str r4, [sp]",
            "bl fcn.0004e530",
            "subs lr, r0, 0",
            "beq 0x4ebbc",
            "ldr r1, [sp, 0x28]",
            "add r3, sp, 0x3000",
            "ldr r3, [r3, 0x4ec]",
            "add r2, r6, r1",
            "add ip, r3, 1",
            "ldr r0, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "mov r3, r2",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl fcn.0004e800",
            "b 0x4e958",
            "ldr ip, [sp, 0x20]",
            "add r8, sp, 0x80",
            "ldr r3, [ip]",
            "sub r8, r8, 0x38",
            "mov r0, r8",
            "strh r3, [r0], 2",
            "lsr r3, r3, 0x10",
            "mov r1, r7",
            "rsb r2, r7, fp",
            "strb r3, [r8, 2]",
            "bl rsym.strmake",
            "add r1, sp, 0x1080",
            "ldr r0, [sp, 0x14]",
            "sub r1, r1, 0x34",
            "mov r2, r8",
            "ldr r3, [sp, 0x10]",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "beq 0x4e958",
            "b 0x4ebbc",
            "mov r0, 1",
            "b 0x4ebf4",
            "mov r1, 0xb",
            "mov r2, sl",
            "ldr r0, [sp, 0x2c]",
            "ldr r3, [sp, 0xc]",
            "str r4, [sp]",
            "bl fcn.0004e530",
            "subs r1, r0, 0",
            "str r1, [sp, 0x34]",
            "beq 0x4ebbc",
            "mov r1, 0x10",
            "bl rsym.my_dir",
            "subs r8, r0, 0",
            "beq 0x4ebbc",
            "ldr r3, [r8, 4]",
            "cmp r3, 0",
            "beq 0x4f040",
            "add r2, sp, 0x3240",
            "add r2, r2, 0x18",
            "str r2, [sp, 0x1c]",
            "add r1, sp, 0x3000",
            "ldr r1, [r1, 0x4ec]",
            "ldr ip, [sp, 0x28]",
            "add r1, r1, 1",
            "add r3, r6, ip",
            "str r4, [sp, 0x3c]",
            "str r1, [sp, 0x38]",
            "str r6, [sp, 0x40]",
            "str r5, [sp, 0x44]",
            "mov r4, r3",
            "ldr sb, [r8]",
            "lsl fp, r7, 3",
            "ldr r0, [sb, r7, lsl 3]",
            "bl rsym.fn_ext",
            "ldr r2, [sp, 0x24]",
            "mov sl, r0",
            "ldr r5, [r2]",
            "cmp r5, 0",
            "beq 0x4f024",
            "mov r6, r2",
            "b 0x4efc8",
            "ldr r5, [r6, 4]!",
            "cmp r5, 0",
            "beq 0x4f024",
            "mov r1, r5",
            "mov r0, sl",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x4efbc",
            "cmp r5, 0",
            "beq 0x4f024",
            "ldr r1, [sb, fp]",
            "mov ip, 0x44",
            "ldr r2, [sp, 0x34]",
            "mov r3, r4",
            "ldr r0, [sp, 0x1c]",
            "str ip, [sp]",
            "bl rsym.fn_format",
            "ldr ip, [sp, 0x1c]",
            "ldr r0, [sp, 0x10]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x38]",
            "ldr r1, [sp, 0x14]",
            "mov r2, r4",
            "mov r3, r4",
            "str ip, [sp, 4]",
            "bl fcn.0004e800",
            "ldr r3, [r8, 4]",
            "add r7, r7, 1",
            "cmp r3, r7",
            "bhi 0x4ef90",
            "ldr r4, [sp, 0x3c]",
            "ldr r6, [sp, 0x40]",
            "ldr r5, [sp, 0x44]",
            "mov r0, r8",
            "bl rsym.my_dirend",
            "b 0x4e958",
            "add r3, sp, 0x3040",
            "add r3, r3, 0x10",
            "sub r3, r3, 4",
            "mov r1, r5",
            "mov r0, r3",
            "ldr r2, [0x0004f0dc]",
            "str r3, [sp, 0xc]",
            "bl sym.imp.__strcpy_chk",
            "b 0x4e89c",
            "ldr r3, [0x0004f0d0]",
            "ldr r2, [0x0004f0e0]",
            "ldr r3, [r6, r3]",
            "ldr r0, [r3]",
            "add r2, r6, r2",
            "ldr r3, [sp, 0xc]",
            "mov r1, 1",
            "str r4, [sp]",
            "bl sym.imp.__fprintf_chk",
            "b 0x4ebbc",
            "ldr r3, [0x0004f0d0]",
            "ldr r2, [0x0004f0e4]",
            "ldr r3, [r6, r3]",
            "b 0x4f07c"
        ]
    },
    "rsym.fn_ext": {
        "function_address": "0x0003e71c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3c]!"
        ]
    },
    "sym.my_b_filelength": {
        "function_address": "0x000555b4",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0, 0x64]",
            "sub sp, sp, 8",
            "cmp r3, 2",
            "beq 0x55610",
            "ldr r3, [r0, 0x88]",
            "mov r2, 1",
            "mov r1, 2",
            "str r2, [r0, 0x8c]",
            "mov r0, r3",
            "str r1, [sp]",
            "mov r3, 0",
            "mov r1, 0",
            "mov r2, 0",
            "str r1, [sp, 4]",
            "bl rsym.my_seek",
            "mov r3, r0",
            "mov r4, r1",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr",
            "ldr r2, [r0, 0x30]",
            "ldr r3, [r0, 0x1c]",
            "ldr ip, [r2]",
            "ldm r0, {r1, r2}",
            "rsb r0, r3, ip",
            "adds r3, r1, r0",
            "adc r4, r2, 0",
            "b 0x555fc"
        ]
    },
    "sym.find_type_or_exit": {
        "function_address": "0x0004b0cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r2",
            "sub sp, sp, 8",
            "mov r2, 2",
            "mov r7, r0",
            "mov r5, r1",
            "bl rsym.find_type",
            "ldr r4, [0x0004b1cc]",
            "cmp r0, 0",
            "add r4, pc, r4",
            "ble 0x4b104",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldrb r3, [r7]",
            "ldr r5, [r5, 8]",
            "cmp r3, 0",
            "bne 0x4b1a4",
            "ldr r6, [0x0004b1d0]",
            "ldr r2, [0x0004b1d4]",
            "ldr r3, [r4, r6]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "mov r3, r8",
            "bl sym.imp.__fprintf_chk",
            "ldr r8, [r4, r6]",
            "ldr r2, [0x0004b1d8]",
            "ldr r3, [r5]",
            "ldr r0, [r8]",
            "add r2, r4, r2",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "beq 0x4b184",
            "ldr r7, [0x0004b1dc]",
            "add r7, r4, r7",
            "ldr r0, [r8]",
            "mov r1, 1",
            "mov r2, r7",
            "bl sym.imp.__fprintf_chk",
            "ldr r3, [r5, 8]",
            "add r5, r5, 4",
            "cmp r3, 0",
            "bne 0x4b164",
            "ldr r3, [r4, r6]",
            "ldr r2, [0x0004b1e0]",
            "ldr r0, [r3]",
            "add r2, r4, r2",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r6, [0x0004b1d0]",
            "ldr r2, [0x0004b1e4]",
            "ldr r3, [r4, r6]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "mov r3, r8",
            "str r7, [sp]",
            "bl sym.imp.__fprintf_chk",
            "b 0x4b134"
        ]
    },
    "sym.my_init_time": {
        "function_address": "0x000792a0",
        "instructions": [
            "str lr, [sp, -4]!",
            "mov r0, 0",
            "sub sp, sp, 0x5c",
            "bl sym.imp.time",
            "add r3, sp, 0x58",
            "str r0, [r3, -8]!",
            "mov r1, sp",
            "mov r0, r3",
            "bl sym.imp.localtime_r",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x00079330]",
            "add ip, ip, 0x760",
            "add ip, ip, 0xc",
            "str ip, [sp, 0x2c]",
            "ldr ip, [sp, 0xc]",
            "ldr lr, [sp, 0x10]",
            "str ip, [sp, 0x34]",
            "ldr ip, [sp, 8]",
            "ldr r1, fcn.00045d00",
            "str ip, [sp, 0x38]",
            "ldr ip, [sp, 4]",
            "add r3, pc, r3",
            "str ip, [sp, 0x3c]",
            "mov r2, 0xe10",
            "ldr ip, [sp]",
            "str r2, [r3, r1]",
            "add lr, lr, 1",
            "add r1, r3, r1",
            "add r0, sp, 0x2c",
            "add r2, sp, 0x57",
            "str lr, [sp, 0x30]",
            "str ip, [sp, 0x40]",
            "bl rsym.my_system_gmt_sec",
            "add sp, sp, 0x5c",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym.my_system_gmt_sec": {
        "function_address": "0x0003d9c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x924]!"
        ]
    },
    "sym.yaSSL::DiffieHellman::set_sizes_int__int__int__const": {
        "function_address": "0x0007f390",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x24",
            "mov r4, r0",
            "add r5, sp, 0x10",
            "mov r6, r1",
            "mov r0, r5",
            "ldr r1, [r4]",
            "mov r7, r3",
            "mov sl, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r1, [r4]",
            "mov r0, sp",
            "add r1, r1, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "str r0, [r6]",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "str r0, [sl]",
            "ldr r0, [r4]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldm sp, {r2, r4}",
            "mov r1, 0",
            "str r0, [r7]",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r8, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_Private_Decoder::Decode_TaoCrypt::DSA_PrivateKey_": {
        "function_address": "0x0009c7a8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "sub sp, sp, 0x54",
            "mov r6, r1",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "ldr r5, [r3, 0x10]",
            "cmp r5, 0",
            "bne 0x9c928",
            "add r7, sp, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10SetModulusERKNS_7IntegerE",
            "ldr r7, [sp, 0x44]",
            "ldr r2, [sp, 0x40]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x30",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey16SetSubGroupOrderERKNS_7IntegerE",
            "ldr r7, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x20",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey20SetSubGroupGeneratorERKNS_7IntegerE",
            "ldr r7, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x10",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey13SetPublicPartERKNS_7IntegerE",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt14DSA_PrivateKey14SetPrivatePartERKNS_7IntegerE",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey10SetModulusERKNS_7IntegerE": {
        "function_address": "0x0003dd50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6c4]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey16SetSubGroupOrderERKNS_7IntegerE": {
        "function_address": "0x0003cc34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x22c]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey20SetSubGroupGeneratorERKNS_7IntegerE": {
        "function_address": "0x0004072c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xadc]!"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey13SetPublicPartERKNS_7IntegerE": {
        "function_address": "0x0003fae4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x30c]!"
        ]
    },
    "rsym._ZN8TaoCrypt14DSA_PrivateKey14SetPrivatePartERKNS_7IntegerE": {
        "function_address": "0x00040270",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe04]!"
        ]
    },
    "sym.mysql_fetch_row": {
        "function_address": "0x00075db4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0xc]",
            "ldr r6, [0x00075ff4]",
            "cmp r0, 0",
            "sub sp, sp, 0x24",
            "add r6, pc, r6",
            "beq 0x75df8",
            "ldr r0, [r4, 0x10]",
            "cmp r0, 0",
            "ldrne r3, [r0]",
            "ldrne r0, [r0, 4]",
            "strne r3, [r4, 0x10]",
            "str r0, [r4, 0x24]",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldrb r3, [r4, 0x50]",
            "cmp r3, 0",
            "bne 0x75dec",
            "ldr r5, [r4, 0x18]",
            "ldr r3, [r5, 0x380]",
            "cmp r3, 2",
            "bne 0x75fa0",
            "ldr r1, [r4, 0x20]",
            "ldr fp, [r4, 0x48]",
            "str r1, [sp, 0xc]",
            "ldr r2, [r4, 0x14]",
            "mov r0, r5",
            "str r2, [sp, 8]",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "beq 0x75f74",
            "cmp r0, 8",
            "ldrhi r3, [r5, 0x10]",
            "bhi 0x75e54",
            "ldr r3, [r5, 0x10]",
            "ldrb r2, [r3]",
            "cmp r2, 0xfe",
            "beq 0x75f3c",
            "cmp fp, 0",
            "add r0, r3, r0",
            "moveq r8, fp",
            "str r3, [sp, 0x1c]",
            "str r0, [sp, 4]",
            "moveq r3, 1",
            "moveq sl, r8",
            "beq 0x75f08",
            "mov r7, 0",
            "add r3, sp, 0x1c",
            "str r6, [sp, 0x14]",
            "ldr r6, [sp, 0xc]",
            "str r5, [sp, 0x10]",
            "mov sl, r7",
            "ldr r5, [sp, 8]",
            "mov r8, r7",
            "str r4, [sp, 8]",
            "mov sb, r7",
            "mov r4, r3",
            "mov r0, r4",
            "bl rsym.net_field_length",
            "cmn r0, 1",
            "streq sb, [r6, r7]",
            "streq sb, [r5, r7]",
            "beq 0x75ee0",
            "ldr r3, [sp, 0x1c]",
            "ldr r1, [sp, 4]",
            "rsb r2, r3, r1",
            "cmp r0, r2",
            "bhi 0x75fcc",
            "str r3, [r6, r7]",
            "ldr r3, [sp, 0x1c]",
            "add r3, r3, r0",
            "str r3, [sp, 0x1c]",
            "str r0, [r5, r7]",
            "cmp sl, 0",
            "add r8, r8, 1",
            "strbne sb, [sl]",
            "cmp fp, r8",
            "add r7, r7, 4",
            "ldr sl, [sp, 0x1c]",
            "bhi 0x75ea0",
            "ldr r4, [sp, 8]",
            "lsl r8, r8, 2",
            "add r3, sl, 1",
            "ldr r2, [sp, 0xc]",
            "mov r5, 1",
            "str r3, [r2, r8]",
            "mov r3, 0",
            "strb r3, [sl]",
            "ldm r4, {r2, r3}",
            "ldr r0, [r4, 0x20]",
            "adds r2, r2, r5",
            "mov r6, 0",
            "adc r3, r3, r6",
            "stm r4, {r2, r3}",
            "str r0, [r4, 0x24]",
            "b 0x75dec",
            "cmp r0, 1",
            "bls 0x75f74",
            "ldrb r1, [r3, 2]",
            "ldrb r2, [r3, 1]",
            "add r2, r2, r1, lsl 8",
            "lsl r2, r2, 0x10",
            "lsr r2, r2, 0x10",
            "str r2, [r5, 0x2f4]",
            "ldrb r2, [r3, 3]",
            "ldrb r3, [r3, 4]",
            "add r3, r2, r3, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "str r3, [r5, 0x2ec]",
            "mov r3, 1",
            "strb r3, [r4, 0x50]",
            "ldr r2, [r5, 0x3b8]",
            "add r3, r4, 0x51",
            "cmp r2, r3",
            "mov r0, 0",
            "mov r3, 0",
            "str r3, [r5, 0x380]",
            "streq r3, [r5, 0x3b8]",
            "str r0, [r4, 0x18]",
            "b 0x75dec",
            "ldr r3, [0x00075ff8]",
            "ldrb r0, [r4, 0x51]",
            "ldr r3, [r6, r3]",
            "cmp r0, 0",
            "ldr r2, [r3]",
            "ldr r3, [0x00075ffc]",
            "ldr r1, [0x00076000]",
            "mov r0, r5",
            "moveq r1, r3",
            "bl rsym.set_mysql_error",
            "b 0x75f74",
            "ldr r6, [sp, 0x14]",
            "ldr r3, [0x00075ff8]",
            "ldr r5, [sp, 0x10]",
            "ldr r3, [r6, r3]",
            "mov r0, r5",
            "mov r1, 0x7d0",
            "ldr r2, [r3]",
            "ldr r4, [sp, 8]",
            "bl rsym.set_mysql_error",
            "b 0x75f74"
        ]
    },
    "fcn.000a1368": {
        "function_address": "0x000a1368",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::MD5::MD5Impl__yaSSL::MD5::MD5Impl_": {
        "function_address": "0x00080e7c",
        "instructions": [
            "ldr r3, [0x00080eac]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080eb0]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AES::decrypt_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x00097b60",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x000984b0]",
            "sub sp, sp, 0x64",
            "add r4, pc, r4",
            "tst r1, 3",
            "str r4, [sp, 0x50]",
            "str r2, [sp, 0x4c]",
            "str r3, [sp, 0x5c]",
            "bne 0x98464",
            "mov r3, r1",
            "ldr r8, [r3], 4",
            "tst r3, 3",
            "bne 0x98374",
            "add ip, r3, 4",
            "tst ip, 3",
            "ldr r2, [r1, 4]",
            "bne 0x983ec",
            "tst ip, 3",
            "ldr r3, [r3, 4]",
            "bne 0x983c4",
            "ldr sl, [sp, 0x50]",
            "ldr r1, [0x000984b4]",
            "ldr sb, [r0, 0x38]",
            "ldr r1, [sl, r1]",
            "bic r6, r8, 0xff0000",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x000984b8]",
            "ldr r7, [ip, 4]",
            "ldr fp, [sl, r1]",
            "ldr r1, [0x000984bc]",
            "bic ip, r7, 0xff0000",
            "ldr r1, [sl, r1]",
            "bic ip, ip, 0xff",
            "str r1, [sp, 0x14]",
            "ldr r1, [0x000984c0]",
            "bic r7, r7, 0xff000000",
            "ldr r1, [sl, r1]",
            "bic r4, r3, 0xff0000",
            "str r1, [sp, 0x2c]",
            "add r1, r0, 0x3c",
            "str r1, [sp, 0x54]",
            "bic r1, r8, 0xff000000",
            "ldr r8, [r0, 0x3c]",
            "ldr r0, [sp, 0x54]",
            "ldr sl, [sp, 0x54]",
            "ldr r0, [r0, 8]",
            "ldr sl, [sl, 4]",
            "str r0, [sp, 4]",
            "ldr r0, [sp, 0x54]",
            "bic r7, r7, 0xff00",
            "bic r6, r6, 0xff",
            "lsr ip, ip, 8",
            "str sl, [sp, 8]",
            "bic r5, r2, 0xff0000",
            "ldr sl, [r0, 0xc]",
            "bic r1, r1, 0xff00",
            "orr ip, ip, r7, lsl 8",
            "lsr sb, sb, 1",
            "ldr r7, [sp, 0x2c]",
            "bic r4, r4, 0xff",
            "bic r3, r3, 0xff000000",
            "lsr r6, r6, 8",
            "str sb, [sp, 0x58]",
            "bic r3, r3, 0xff00",
            "orr r6, r6, r1, lsl 8",
            "bic r5, r5, 0xff",
            "bic r2, r2, 0xff000000",
            "lsr r4, r4, 8",
            "ldr r1, [sp, 0xc]",
            "ldr r7, [r7]",
            "bic r2, r2, 0xff00",
            "orr r4, r4, r3, lsl 8",
            "ldr sb, [sp, 4]",
            "ldr r3, [sp, 0x14]",
            "lsr r5, r5, 8",
            "eor r6, r8, r6, ror 16",
            "eor ip, sl, ip, ror 16",
            "ldr r8, [sp, 8]",
            "ldr sl, [sp, 0x58]",
            "orr r5, r5, r2, lsl 8",
            "ldr r0, [r1]",
            "ldr r2, [r3]",
            "ldr r1, [fp]",
            "str r7, [sp, 0x14]",
            "ldr r3, [sp, 0x54]",
            "eor r5, r8, r5, ror 16",
            "eor r4, sb, r4, ror 16",
            "str sl, [sp, 0x48]",
            "mov fp, r7",
            "b 0x97e6c",
            "ldr fp, [sp, 0x14]",
            "and r8, ip, 0xff",
            "ldr r8, [fp, r8, lsl 2]",
            "and r7, r6, 0xff",
            "and sl, r4, 0xff",
            "ldr sl, [fp, sl, lsl 2]",
            "ldr r7, [fp, r7, lsl 2]",
            "str r8, [sp, 0x38]",
            "lsr r8, r4, 0x10",
            "str r8, [sp, 0x44]",
            "str sl, [sp, 0x1c]",
            "str r7, [sp, 0x40]",
            "and sb, r5, 0xff",
            "lsr r7, ip, 0x18",
            "lsr sl, ip, 0x10",
            "lsr r8, r5, 0x18",
            "ldr sb, [fp, sb, lsl 2]",
            "str r7, [sp, 0x28]",
            "lsr fp, r6, 0x10",
            "ldr r8, [r0, r8, lsl 2]",
            "and sl, sl, 0xff",
            "str fp, [sp, 0x10]",
            "str sl, [sp, 0x18]",
            "lsr fp, r4, 0x18",
            "ldr sl, [sp, 0x28]",
            "str sb, [sp, 0xc]",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sb, r6, 0x18",
            "str r8, [sp, 0x30]",
            "ldr r8, [sp, 0x10]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr sl, [r0, sl, lsl 2]",
            "lsr r7, r5, 0x10",
            "and r8, r8, 0xff",
            "str fp, [sp, 0x3c]",
            "lsr r5, r5, 8",
            "ldr fp, [sp, 0x44]",
            "str sb, [sp, 0x2c]",
            "str r8, [sp, 0x34]",
            "and sb, r7, 0xff",
            "str sl, [sp, 0x28]",
            "ldr r7, [sp, 0x1c]",
            "ldr sl, [r3, 0x24]",
            "str r5, [sp, 0x44]",
            "lsr r8, r4, 8",
            "ldr r5, [r3, 0x20]",
            "ldr r4, [sp, 0xc]",
            "and fp, fp, 0xff",
            "str sb, [sp, 0x24]",
            "str fp, [sp, 0x20]",
            "lsr sb, r6, 8",
            "ldr fp, [sp, 0x38]",
            "eor r6, r4, r5",
            "eor r5, r7, sl",
            "ldr r7, [r3, 0x28]",
            "ldr sl, [sp, 0x40]",
            "eor r4, fp, r7",
            "ldr r7, [r3, 0x2c]",
            "lsr ip, ip, 8",
            "eor fp, sl, r7",
            "ldr sl, [sp, 0x18]",
            "and ip, ip, 0xff",
            "ldr sl, [r1, sl, lsl 2]",
            "and r8, r8, 0xff",
            "str sl, [sp, 0xc]",
            "ldr r7, [sp, 0x34]",
            "str ip, [sp, 0x18]",
            "ldr r7, [r1, r7, lsl 2]",
            "ldr ip, [sp, 0x20]",
            "ldr sl, [sp, 0x24]",
            "str r7, [sp, 0x10]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr ip, [r1, ip, lsl 2]",
            "ldr r7, [sp, 0x44]",
            "str sl, [sp, 0x1c]",
            "str ip, [sp, 0x20]",
            "and sl, r7, 0xff",
            "ldr ip, [sp, 0x2c]",
            "ldr r7, [sp, 0x30]",
            "eor r6, r6, ip",
            "eor r5, r5, r7",
            "ldr ip, [sp, 0x3c]",
            "ldr r7, [sp, 0x28]",
            "eor r4, r4, ip",
            "eor ip, fp, r7",
            "ldr fp, [sp, 0x18]",
            "and sb, sb, 0xff",
            "ldr r7, [r2, fp, lsl 2]",
            "ldr fp, [sp, 0xc]",
            "ldr r8, [r2, r8, lsl 2]",
            "eor r6, r6, fp",
            "ldr fp, [sp, 0x10]",
            "ldr sb, [r2, sb, lsl 2]",
            "eor r5, r5, fp",
            "ldr fp, [sp, 0x1c]",
            "ldr sl, [r2, sl, lsl 2]",
            "eor r4, r4, fp",
            "ldr fp, [sp, 0x20]",
            "eor r6, r6, r8",
            "eor ip, ip, fp",
            "ldr fp, [sp, 0x14]",
            "eor r5, r5, r7",
            "eor r4, r4, sb",
            "eor ip, ip, sl",
            "add r3, r3, 0x20",
            "and r7, r6, 0xff",
            "ldr r7, [fp, r7, lsl 2]",
            "and sb, r5, 0xff",
            "and sl, r4, 0xff",
            "and r8, ip, 0xff",
            "ldr sb, [fp, sb, lsl 2]",
            "ldr sl, [fp, sl, lsl 2]",
            "ldr r8, [fp, r8, lsl 2]",
            "lsr fp, r4, 0x18",
            "str r7, [sp, 0x40]",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr r7, ip, 0x18",
            "str r7, [sp, 0x28]",
            "str sb, [sp, 0xc]",
            "str fp, [sp, 0x3c]",
            "lsr sb, r6, 0x18",
            "ldr fp, [sp, 0x28]",
            "str sl, [sp, 0x1c]",
            "str r8, [sp, 0x38]",
            "lsr sl, ip, 0x10",
            "lsr r8, r4, 0x10",
            "ldr sb, [r0, sb, lsl 2]",
            "lsr r7, r6, 0x10",
            "str r8, [sp, 0x44]",
            "str sl, [sp, 0x10]",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r5, 0x10",
            "and r7, r7, 0xff",
            "lsr r8, r5, 0x18",
            "str sb, [sp, 0x2c]",
            "str r7, [sp, 0x34]",
            "ldr sb, [sp, 0x10]",
            "ldr r7, [sp, 0x44]",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r8, lsl 2]",
            "str sl, [sp, 0x24]",
            "str fp, [sp, 0x28]",
            "ldr sl, [sp, 0xc]",
            "ldr fp, [r3, 0x10]",
            "and sb, sb, 0xff",
            "and r7, r7, 0xff",
            "str sb, [sp, 0x18]",
            "str r8, [sp, 0x30]",
            "str r7, [sp, 0x20]",
            "lsr r8, r4, 8",
            "ldr r7, [r3, 0x14]",
            "ldr r4, [sp, 0x1c]",
            "lsr sb, r6, 8",
            "eor r6, sl, fp",
            "ldr sl, [sp, 0x38]",
            "ldr fp, [r3, 0x18]",
            "lsr r5, r5, 8",
            "str r5, [sp, 0x44]",
            "eor r5, r4, r7",
            "eor r4, sl, fp",
            "ldr r7, [sp, 0x40]",
            "ldr sl, [r3, 0x1c]",
            "lsr ip, ip, 8",
            "eor fp, r7, sl",
            "ldr r7, [sp, 0x18]",
            "and ip, ip, 0xff",
            "ldr r7, [r1, r7, lsl 2]",
            "and r8, r8, 0xff",
            "str r7, [sp, 0xc]",
            "ldr r7, [sp, 0x20]",
            "str ip, [sp, 0x18]",
            "ldr r7, [r1, r7, lsl 2]",
            "ldr ip, [sp, 0x24]",
            "str r7, [sp, 0x20]",
            "ldr ip, [r1, ip, lsl 2]",
            "ldr r7, [sp, 0x2c]",
            "ldr sl, [sp, 0x34]",
            "str ip, [sp, 0x1c]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr ip, [sp, 0x44]",
            "eor r6, r6, r7",
            "ldr r7, [sp, 0x3c]",
            "str sl, [sp, 0x10]",
            "eor r4, r4, r7",
            "and sl, ip, 0xff",
            "ldr r7, [sp, 0x28]",
            "ldr ip, [sp, 0x30]",
            "and sb, sb, 0xff",
            "eor r5, r5, ip",
            "eor ip, fp, r7",
            "ldr fp, [sp, 0x18]",
            "ldr r8, [r2, r8, lsl 2]",
            "ldr r7, [r2, fp, lsl 2]",
            "ldr fp, [sp, 0xc]",
            "ldr sb, [r2, sb, lsl 2]",
            "eor r6, r6, fp",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [r2, sl, lsl 2]",
            "eor r5, r5, fp",
            "ldr fp, [sp, 0x1c]",
            "eor r6, r6, r8",
            "eor r4, r4, fp",
            "ldr fp, [sp, 0x20]",
            "eor r5, r5, r7",
            "eor ip, ip, fp",
            "ldr fp, [sp, 0x48]",
            "eor r4, r4, sb",
            "subs fp, fp, 1",
            "str fp, [sp, 0x48]",
            "eor ip, ip, sl",
            "bne 0x97cc8",
            "ldr r0, [sp, 0x50]",
            "lsr r2, r4, 0x10",
            "lsr sb, ip, 0x10",
            "ldr r3, [0x000984c4]",
            "lsr r8, r6, 0x10",
            "and sb, sb, 0xff",
            "and r2, r2, 0xff",
            "str sb, [sp, 0x48]",
            "ldr r3, [r0, r3]",
            "ldr sb, [sp, 0x54]",
            "lsr r0, r5, 0x10",
            "and r8, r8, 0xff",
            "str r2, [sp, 0x28]",
            "ldr r2, [sp, 0x58]",
            "str r8, [sp, 0x10]",
            "and r0, r0, 0xff",
            "ldr r8, [sp, 0x5c]",
            "ldr r3, [r3]",
            "str r0, [sp, 0x18]",
            "add r0, sb, r2, lsl 5",
            "ldr sb, [sb, r2, lsl 5]",
            "ldr r2, [sp, 0x48]",
            "lsr fp, r5, 8",
            "lsr r7, ip, 8",
            "tst r8, 3",
            "and r8, r5, 0xff",
            "lsr r5, r5, 0x18",
            "ldr r2, [r3, r2, lsl 2]",
            "ldr r5, [r3, r5, lsl 2]",
            "and r7, r7, 0xff",
            "str r7, [sp, 0x2c]",
            "lsr sl, r4, 8",
            "lsr r7, ip, 0x18",
            "and sl, sl, 0xff",
            "str r2, [sp, 0x48]",
            "str r5, [sp, 0x30]",
            "ldr r2, [sp, 0x10]",
            "ldr r5, [sp, 0x2c]",
            "str sl, [sp, 0xc]",
            "str r7, [sp, 0x24]",
            "and sl, r6, 0xff",
            "and r7, r4, 0xff",
            "lsr r4, r4, 0x18",
            "ldr sl, [r3, sl, lsl 2]",
            "ldr r2, [r3, r2, lsl 2]",
            "ldr r5, [r3, r5, lsl 2]",
            "ldr r4, [r3, r4, lsl 2]",
            "str sb, [sp, 0x14]",
            "ldr sb, [sp, 0xc]",
            "lsr r1, r6, 8",
            "lsr r6, r6, 0x18",
            "str sl, [sp, 0x1c]",
            "ldr r8, [r3, r8, lsl 2]",
            "ldr sl, [r3, r6, lsl 2]",
            "str r2, [sp, 0x20]",
            "ldr r6, [r3, sb, lsl 2]",
            "str r5, [sp, 0x2c]",
            "ldr r5, [r3, r7, lsl 2]",
            "str r4, [sp, 0x10]",
            "ldr r7, [sp, 0x18]",
            "and r1, r1, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "ldr r4, [r3, r7, lsl 2]",
            "ldr sb, [sp, 0x24]",
            "ldr r7, [sp, 0x28]",
            "and ip, ip, 0xff",
            "and fp, fp, 0xff",
            "ldr r2, [r3, r7, lsl 2]",
            "str r1, [sp, 0xc]",
            "ldr r7, [r0, 0xc]",
            "ldr r1, [r3, ip, lsl 2]",
            "ldr ip, [r3, sb, lsl 2]",
            "ldr sb, [r0, 4]",
            "ldr r3, [r3, fp, lsl 2]",
            "ldr r0, [r0, 8]",
            "bne 0x98414",
            "ldr fp, [sp, 0x14]",
            "and r8, r8, 0xff",
            "eor r8, r8, fp",
            "ldr fp, [sp, 0x48]",
            "and sl, sl, 0xff000000",
            "eor sl, r8, sl",
            "and r8, fp, 0xff0000",
            "eor sl, sl, r8",
            "ldr r8, [sp, 0x4c]",
            "and r6, r6, 0xff00",
            "cmp r8, 0",
            "eor r6, sl, r6",
            "beq 0x982e0",
            "mov fp, r8",
            "bic sl, r6, 0xff0000",
            "ldr r8, [fp], 4",
            "bic sl, sl, 0xff",
            "bic r6, r6, 0xff000000",
            "bic r6, r6, 0xff00",
            "lsr sl, sl, 8",
            "str fp, [sp, 0x4c]",
            "orr r6, sl, r6, lsl 8",
            "ldr fp, [sp, 0x5c]",
            "eor r8, r8, r6, ror 16",
            "str r8, [fp], 4",
            "tst fp, 3",
            "bne 0x9839c",
            "ldr r6, [sp, 0x30]",
            "and r5, r5, 0xff",
            "ldr r8, [sp, 0x20]",
            "eor r5, r5, sb",
            "ldr sl, [sp, 0x2c]",
            "and sb, r6, 0xff000000",
            "ldr r6, [sp, 0x4c]",
            "eor r5, r5, sb",
            "and sb, r8, 0xff0000",
            "eor r5, r5, sb",
            "cmp r6, 0",
            "and sb, sl, 0xff00",
            "eor r5, r5, sb",
            "beq 0x98308",
            "bic r8, r5, 0xff0000",
            "mov sb, r6",
            "bic r8, r8, 0xff",
            "bic r5, r5, 0xff000000",
            "ldr r6, [sb], 4",
            "bic r5, r5, 0xff00",
            "lsr r8, r8, 8",
            "orr r5, r8, r5, lsl 8",
            "eor r5, r6, r5, ror 16",
            "str sb, [sp, 0x4c]",
            "str r5, [fp], 4",
            "tst fp, 3",
            "bne 0x9843c",
            "ldr r5, [sp, 0x10]",
            "and r1, r1, 0xff",
            "eor r1, r1, r0",
            "ldr r6, [sp, 0xc]",
            "and r0, r5, 0xff000000",
            "ldr r8, [sp, 0x4c]",
            "eor r1, r1, r0",
            "and r4, r4, 0xff0000",
            "eor r1, r1, r4",
            "and r5, r6, 0xff00",
            "cmp r8, 0",
            "eor r1, r1, r5",
            "beq 0x9832c",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "ldr r4, [r8], 4",
            "bic r1, r1, 0xff00",
            "lsr r0, r0, 8",
            "orr r1, r0, r1, lsl 8",
            "eor r1, r4, r1, ror 16",
            "str r8, [sp, 0x4c]",
            "str r1, [fp], 4",
            "tst fp, 3",
            "bne 0x98488",
            "ldr sl, [sp, 0x1c]",
            "and ip, ip, 0xff000000",
            "and r1, sl, 0xff",
            "eor r7, r1, r7",
            "eor ip, r7, ip",
            "and r2, r2, 0xff0000",
            "eor r2, ip, r2",
            "ldr ip, [sp, 0x4c]",
            "and r3, r3, 0xff00",
            "cmp ip, 0",
            "eor r3, r2, r3",
            "beq 0x98350",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "ldr r2, [ip]",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "eor r3, r2, r3, ror 16",
            "str r3, [fp]",
            "add sp, sp, 0x64",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "bic r8, r6, 0xff0000",
            "bic sl, r6, 0xff000000",
            "bic r8, r8, 0xff",
            "bic sl, sl, 0xff00",
            "lsr r6, r8, 8",
            "orr r6, r6, sl, lsl 8",
            "ldr fp, [sp, 0x5c]",
            "ror r6, r6, 0x10",
            "str r6, [fp], 4",
            "b 0x981a8",
            "bic r6, r5, 0xff0000",
            "bic r6, r6, 0xff",
            "bic r5, r5, 0xff000000",
            "bic r5, r5, 0xff00",
            "lsr r6, r6, 8",
            "orr r5, r6, r5, lsl 8",
            "ror r5, r5, 0x10",
            "str r5, [fp], 4",
            "b 0x98214",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "bic r1, r1, 0xff00",
            "lsr r0, r0, 8",
            "orr r1, r0, r1, lsl 8",
            "ror r1, r1, 0x10",
            "str r1, [fp], 4",
            "b 0x98278",
            "bic r2, r3, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r2, r2, 8",
            "orr r3, r2, r3, lsl 8",
            "ror r3, r3, 0x10",
            "str r3, [fp]",
            "b 0x982d4",
            "ldr r5, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x000984d4]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x000984d8]",
            "bl sym.imp.__assert_fail",
            "ldr r7, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x000984d4]",
            "bl sym.imp.__assert_fail",
            "ldr r6, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x000984d4]",
            "bl sym.imp.__assert_fail",
            "ldr r8, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x000984d8]",
            "bl sym.imp.__assert_fail",
            "ldr sl, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, sl, r3",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x000984d8]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x000984d4]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x50]",
            "ldr r3, [0x000984c8]",
            "ldr r1, [0x000984cc]",
            "ldr r0, [0x000984d0]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x000984d8]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.set_stmt_errmsg": {
        "function_address": "0x00041f6c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r1, 0x58]",
            "mov r4, r1",
            "str r3, [r0, 0xa0]",
            "ldrb r3, [r1, 0x5f]",
            "mov r5, r0",
            "cmp r3, 0",
            "addne r0, r0, 0xb0",
            "addne r1, r1, 0x5f",
            "blne sym.imp.strcpy",
            "add r1, r4, 0x25c",
            "add r0, r5, 0x2b0",
            "add r1, r1, 3",
            "bl sym.imp.strcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_micro_time": {
        "function_address": "0x00059fa0",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r0, sp",
            "mov r1, 0",
            "bl sym.imp.gettimeofday",
            "cmp r0, 0",
            "bne 0x59fa8",
            "ldm sp, {r2, r3}",
            "ldr r1, [0x00059fe0]",
            "asr r4, r3, 0x1f",
            "smlal r3, r4, r2, r1",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::MD2::Init__": {
        "function_address": "0x000add44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r1, 0",
            "mov r4, r0",
            "mov r2, 0x30",
            "mov r5, 0x10",
            "ldr r0, [r0, 8]",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, r5",
            "ldr r0, [r4, 0x14]",
            "bl sym.imp.memset",
            "mov r2, r5",
            "ldr r0, [r4, 0x20]",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r3, 0",
            "str r3, [r4, 0x28]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::AddDSA__": {
        "function_address": "0x0009b370",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0, 4]",
            "ldr r4, [0x0009b498]",
            "ldr r3, [r0, 0x10]",
            "add r4, pc, r4",
            "cmp r3, 0",
            "beq 0x9b398",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9b474",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 3",
            "movne r3, 0x400",
            "strne r3, [r0, 0x10]",
            "bne 0x9b390",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 0",
            "ldreq r3, [r5, 4]",
            "beq 0x9b428",
            "ldr r3, [r5, 4]",
            "ldr r2, [r3, 0xc]",
            "ldr r0, [r3]",
            "add r1, r2, 1",
            "cmp r0, r2",
            "str r1, [r3, 0xc]",
            "bhi 0x9b418",
            "b 0x9b474",
            "ldr r2, [r3, 0xc]",
            "ldr r0, [r3]",
            "add r1, r2, 1",
            "cmp r2, r0",
            "str r1, [r3, 0xc]",
            "bhs 0x9b474",
            "ldr r1, [r3, 4]",
            "ldrb r2, [r1, r2]",
            "cmp r2, 0",
            "bne 0x9b400",
            "mov r0, r3",
            "ldr r4, [r3, 0xc]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 2",
            "ldrne r3, [r5, 4]",
            "ldrne r2, [0x0009b49c]",
            "strne r2, [r3, 0x10]",
            "bne 0x9b390",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [r5, 4]",
            "ldr r2, [r3, 0xc]",
            "ldr r1, [r3, 4]",
            "rsb r2, r4, r2",
            "add r2, r2, r0",
            "add r1, r1, r4",
            "add r0, r5, 8",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN8TaoCrypt9PublicKey8AddToEndEPKhj",
            "ldr r3, [0x0009b4a0]",
            "ldr r1, [0x0009b4a4]",
            "ldr r0, [0x0009b4a8]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.cli_unbuffered_fetch": {
        "function_address": "0x0004289c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "moveq r0, 1",
            "beq 0x428d4",
            "ldr r3, [r5, 0x10]",
            "mov r0, 0",
            "ldrb r2, [r3]",
            "cmp r2, 0xfe",
            "moveq r3, 0",
            "addne r3, r3, 1",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL.timer__": {
        "function_address": "0x0008a0d0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xc",
            "mov r1, 0",
            "mov r0, sp",
            "bl sym.imp.gettimeofday",
            "ldr r0, [sp]",
            "bl fcn.000bf2b8",
            "mov r4, r0",
            "ldr r0, [sp, 4]",
            "mov r5, r1",
            "bl fcn.000bf2b8",
            "mov r2, 0",
            "ldr r3, [0x0008a128]",
            "bl fcn.000bf624",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r4",
            "mov r1, r5",
            "bl fcn.000bef84",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_RMD::HMAC_RMD_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007e988",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007ea2c]",
            "ldr r3, [0x0007ea30]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x114",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ea34]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::input_buffer::input_buffer_unsigned_int__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007bfb4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "str r0, [r4, 4]",
            "str r0, [r4]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "add r5, r0, r5",
            "str r0, [r4, 8]",
            "str r5, [r4, 0xc]",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL12input_buffer6assignEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::GetVersion__": {
        "function_address": "0x0009b050",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "ldr r4, [r3, 0x10]",
            "ldr r2, [0x0009b104]",
            "cmp r4, 0",
            "mov r5, r0",
            "add r2, pc, r2",
            "movne r0, 0",
            "beq 0x9b07c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r0, r1, 1",
            "cmp r1, ip",
            "str r0, [r3, 0xc]",
            "bhs 0x9b0e0",
            "ldr r2, [r3, 4]",
            "ldrb r2, [r2, r1]",
            "cmp r2, 2",
            "ldrne r2, [0x0009b108]",
            "movne r0, r4",
            "strne r2, [r3, 0x10]",
            "bne 0x9b074",
            "mov r0, r3",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 1",
            "beq 0x9b0d4",
            "ldr r3, [r5, 4]",
            "ldr r2, [0x0009b10c]",
            "mov r0, r4",
            "str r2, [r3, 0x10]",
            "b 0x9b074",
            "ldr r0, [r5, 4]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "b 0x9b074",
            "ldr r3, [0x0009b110]",
            "ldr r1, [0x0009b114]",
            "ldr r0, [0x0009b118]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.list_cons": {
        "function_address": "0x00050a30",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r1",
            "mov r0, 0xc",
            "mov r1, 8",
            "bl rsym.my_malloc",
            "subs r1, r0, 0",
            "beq 0x50a60",
            "mov r0, r4",
            "str r5, [r1, 8]",
            "pop {r4, r5, r6, lr}",
            "b rsym.list_add",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Sessions::lookup_unsigned_char_const__yaSSL::SSL_SESSION_": {
        "function_address": "0x00094f08",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 8",
            "mov r4, r0",
            "add r5, sp, 4",
            "mov r8, r1",
            "mov r0, r5",
            "add r1, r4, 0x10",
            "mov r7, 0",
            "mov r6, r2",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "mov r2, r8",
            "ldr r0, [r4]",
            "mov r1, r7",
            "bl rsym._ZN5mySTL7find_ifINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_20yassl_int_cpp_local210sess_matchEEET_S9_S9_T0_",
            "subs r8, r0, 0",
            "beq 0x94f84",
            "bl rsym._ZN5yaSSL11lowResTimerEv",
            "mov sl, r0",
            "ldr r0, [r8, 8]",
            "bl rsym._ZNK5yaSSL11SSL_SESSION9GetBornOnEv",
            "mov sb, r0",
            "ldr r0, [r8, 8]",
            "bl rsym._ZNK5yaSSL11SSL_SESSION10GetTimeOutEv",
            "add r0, r0, sb",
            "cmp sl, r0",
            "bhi 0x94f9c",
            "cmp r6, 0",
            "movne r0, r6",
            "ldrne r1, [r8, 8]",
            "blne rsym._ZN5yaSSL11SSL_SESSIONaSERKS0_",
            "ldr r8, [r8, 8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "mov r0, r8",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r0, [r8, 8]",
            "str r7, [r8, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_11SSL_SESSIONEEEvPT_",
            "mov r1, r8",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE5eraseENS4_8iteratorE",
            "mov r8, r7",
            "b 0x94f84"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION9GetBornOnEv": {
        "function_address": "0x0003fbc8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x274]!"
        ]
    },
    "rsym._ZNK5yaSSL11SSL_SESSION10GetTimeOutEv": {
        "function_address": "0x0003cf10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x44]!"
        ]
    },
    "rsym._ZN5yaSSL11SSL_SESSIONaSERKS0_": {
        "function_address": "0x0003cd00",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1a4]!"
        ]
    },
    "sym.test_if_hard_path": {
        "function_address": "0x00049bf8",
        "instructions": [
            "push {r4, lr}",
            "ldrb r2, [r0]",
            "ldr r3, [0x00049c5c]",
            "cmp r2, 0x7e",
            "add r3, pc, r3",
            "beq 0x49c24",
            "cmp r2, 0x2f",
            "movne r0, 0",
            "moveq r0, 1",
            "pop {r4, lr}",
            "bx lr",
            "ldrb r2, [r0, 1]",
            "cmp r2, 0x2f",
            "beq 0x49c38",
            "mov r0, 0",
            "b 0x49c1c",
            "ldr r2, [0x00049c60]",
            "ldr r3, [r3, r2]",
            "ldr r0, [r3]",
            "cmp r0, 0",
            "beq 0x49c30",
            "bl rsym.test_if_hard_path",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x49c1c"
        ]
    },
    "sym.yaSSL::ServerHello::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008ccb8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r0",
            "mov r0, r2",
            "mov r4, r2",
            "bl rsym._ZNK5yaSSL3SSL16GetMultiProtocolEv",
            "ldr r6, [0x0008cf00]",
            "cmp r0, 0",
            "add r6, pc, r6",
            "beq 0x8cdc4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8ce00",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "bne 0x8ce00",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection10TurnOffTLSEv",
            "ldrb r1, [r5, 0x4c]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11set_pendingEh",
            "mov r0, r4",
            "add r1, r5, 0xa",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL3SSL10set_randomEPKhNS_13ConnectionEndE",
            "ldrb r7, [r5, 0x2a]",
            "cmp r7, 0",
            "beq 0x8ced4",
            "mov r0, r4",
            "add r1, r5, 0x2b",
            "bl rsym._ZN5yaSSL3SSL13set_sessionIDEPKh",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "beq 0x8ce9c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10get_resumeEv",
            "bl rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv",
            "mov r2, 0x20",
            "mov r1, r0",
            "add r0, r5, 0x2b",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x8ce78",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10get_resumeEv",
            "bl rsym._ZNK5yaSSL11SSL_SESSION9GetSecretEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL16set_masterSecretEPKh",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8cef4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL13deriveTLSKeysEv",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 4",
            "str r3, [r0]",
            "b 0x8cecc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "bne 0x8ce30",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "beq 0x8ce4c",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "bne 0x8ce4c",
            "mov r0, r4",
            "mov r1, 0x75",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8cecc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "beq 0x8cd08",
            "ldrb r3, [r5, 9]",
            "cmp r3, 1",
            "bne 0x8cd08",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "bl rsym._ZN5yaSSL10Connection13TurnOffTLS1_1Ev",
            "b 0x8cd08",
            "ldrb r3, [r5, 9]",
            "cmp r3, 1",
            "bls 0x8cdf0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "bne 0x8cde4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "cmp r0, 0",
            "bne 0x8cd08",
            "ldrb r3, [r5, 8]",
            "cmp r3, 3",
            "bne 0x8cd08",
            "ldrb r3, [r5, 9]",
            "cmp r3, 0",
            "beq 0x8cd08",
            "b 0x8cdf0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL8Security12set_resumingEb",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "ldr r1, [0x0008cf04]",
            "add r1, r6, r1",
            "bl rsym._ZN5yaSSL3Log5TraceEPKc",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL13CompressionOnEv",
            "cmp r0, 0",
            "beq 0x8ceb8",
            "ldr r3, [r5, 0x50]",
            "cmp r3, 0",
            "beq 0x8cee8",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9useClientEv",
            "mov r3, 1",
            "str r3, [r0]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb r7, [r0, 0x12c]",
            "b 0x8cd3c",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL16UnSetCompressionEv",
            "b 0x8ceb8",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10deriveKeysEv",
            "b 0x8cdac"
        ]
    },
    "rsym._ZNK5yaSSL3SSL13CompressionOnEv": {
        "function_address": "0x0003de10",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x644]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL16UnSetCompressionEv": {
        "function_address": "0x0003fc7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1fc]!"
        ]
    },
    "sym.get_charset_by_name": {
        "function_address": "0x00051d34",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00051dd0]",
            "mov r5, r0",
            "mov r6, r1",
            "ldr r0, [0x00051dd4]",
            "ldr r1, [0x00051dd8]",
            "add r4, pc, r4",
            "sub sp, sp, 0x210",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "bl sym.imp.pthread_once",
            "mov r0, r5",
            "bl rsym.get_collation_number",
            "cmp r0, 0",
            "bne 0x51d84",
            "ands r0, r6, 0x10",
            "bne 0x51d98",
            "add sp, sp, 0x210",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, r6",
            "bl fcn.00051b20",
            "cmp r0, 0",
            "bne 0x51d78",
            "b 0x51d70",
            "add r6, sp, 4",
            "mov r0, r6",
            "bl rsym.get_charsets_dir",
            "ldr r1, [0x00051ddc]",
            "mov r2, 0xa",
            "add r1, r4, r1",
            "bl sym.imp.memcpy",
            "mov r2, r5",
            "mov r3, r6",
            "mov r0, 0x1c",
            "mov r1, 4",
            "bl rsym.my_error",
            "mov r0, 0",
            "b 0x51d78"
        ]
    },
    "rsym.get_collation_number": {
        "function_address": "0x0003d0c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf24]!"
        ]
    },
    "sym.resolve_charset": {
        "function_address": "0x00051d00",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r2",
            "mov r1, 0x20",
            "mov r2, 0",
            "bl rsym.get_charset_by_csname",
            "subs r3, r0, 0",
            "moveq r3, r5",
            "movne r0, 0",
            "moveq r0, 1",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.cli_list_fields": {
        "function_address": "0x00044f48",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0, 0x2e0]",
            "sub sp, sp, 8",
            "tst r3, 0x200",
            "movne r2, 8",
            "moveq r2, 6",
            "mov r1, 0",
            "mov r4, r0",
            "bl rsym.cli_read_rows",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x44f94",
            "ldr r2, [r3, 0x28]",
            "ldr ip, [r4, 0x2e0]",
            "str r2, [r4, 0x2e8]",
            "add r1, r4, 0x298",
            "mov r3, 1",
            "str ip, [sp]",
            "bl rsym.unpack_fields",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.cli_read_rows": {
        "function_address": "0x0003fd9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x13c]!"
        ]
    },
    "sym.yaSSL::HMAC_SHA::get_digest_unsigned_char_": {
        "function_address": "0x0007cd44",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3SHAEE5FinalEPh": {
        "function_address": "0x0003d7ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa5c]!"
        ]
    },
    "sym.yaSSL::ChangeCipherSpec::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008d6f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r0, r2",
            "mov r4, r2",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r3, 0",
            "strb r3, [r0, 0x28]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "ldr r5, [0x0008d7b4]",
            "cmp r0, 0",
            "add r5, pc, r5",
            "beq 0x8d74c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x8d78c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x8d744",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes10use_verifyEv",
            "ldr r3, [0x0008d7b8]",
            "mov r1, r0",
            "add r5, r5, r3",
            "mov r0, r4",
            "add r2, r5, 0x98",
            "bl rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh",
            "b 0x8d744",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes10use_verifyEv",
            "ldr r3, [0x0008d7b8]",
            "mov r1, r0",
            "add r5, r5, r3",
            "mov r0, r4",
            "add r2, r5, 0x94",
            "bl rsym._ZN5yaSSL13buildFinishedERNS_3SSLERNS_8FinishedEPKh",
            "b 0x8d744"
        ]
    },
    "sym.TaoCrypt::DES_EDE3::ProcessAndXorBlock_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000a0468",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r5, [0x000a071c]",
            "tst r1, 3",
            "add r5, pc, r5",
            "sub sp, sp, 0xc",
            "mov r6, r0",
            "mov r4, r2",
            "mov sl, r3",
            "bne 0xa06d4",
            "mov r0, r1",
            "ldr r3, [r0], 4",
            "bic r2, r3, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r2, r2, 8",
            "orr r2, r2, r3, lsl 8",
            "ror r2, r2, 0x10",
            "tst r0, 3",
            "str r2, [sp, 4]",
            "bne 0xa06d4",
            "ldr r1, [r1, 4]",
            "ldr r3, [0x000a0720]",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "lsr r0, r0, 8",
            "bic r1, r1, 0xff00",
            "orr r1, r0, r1, lsl 8",
            "ror r1, r1, 0xc",
            "eor r0, r1, r2",
            "and r3, r0, r3",
            "eor r1, r3, r1",
            "eor ip, r3, r2",
            "ror r1, r1, 0x14",
            "eor r3, r1, ip",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor r1, r3, r1",
            "eor ip, r3, ip",
            "ldr r2, [0x000a0724]",
            "ror r3, r1, 0x12",
            "eor r1, r3, ip",
            "and r2, r1, r2",
            "eor r3, r2, r3",
            "eor ip, r2, ip",
            "ror r3, r3, 6",
            "eor r2, r3, ip",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "eor r3, r2, r3",
            "eor ip, r2, ip",
            "ror r3, r3, 0x17",
            "ldr r2, [0x000a0728]",
            "eor r1, r3, ip",
            "and r2, r1, r2",
            "add r8, sp, 4",
            "eor ip, r2, ip",
            "eor r3, r2, r3",
            "ror ip, ip, 0x1f",
            "add r0, r6, 0x38",
            "mov r1, r8",
            "mov r2, sp",
            "stm sp, {r3, ip}",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "add r0, r6, 0xb8",
            "mov r1, sp",
            "mov r2, r8",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "add r0, r6, 0x138",
            "mov r1, r8",
            "mov r2, sp",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "ldm sp, {r1, r2}",
            "ror r1, r1, 1",
            "ldr r3, [0x000a0728]",
            "eor r0, r1, r2",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 9",
            "eor r3, r2, r1",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0x1a",
            "ldr r3, [0x000a0724]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xe",
            "eor r3, r2, r1",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xc",
            "ldr r3, [0x000a0720]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "ror r2, r2, 4",
            "eor r3, r3, r1",
            "tst sl, 3",
            "mov r7, sp",
            "str r3, [sp]",
            "str r2, [sp, 4]",
            "bne 0xa06f8",
            "cmp r4, 0",
            "beq 0xa068c",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "ldr r0, [r4], 4",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "eor r3, r0, r3, ror 16",
            "str r3, [sl], 4",
            "tst sl, 3",
            "bne 0xa06f8",
            "cmp r4, 0",
            "beq 0xa06b0",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "ldr r1, [r4]",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "eor r2, r1, r2, ror 16",
            "str r2, [sl]",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "ror r3, r3, 0x10",
            "str r3, [sl], 4",
            "b 0xa064c",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "ror r2, r2, 0x10",
            "str r2, [sl]",
            "b 0xa0680",
            "ldr r3, [0x000a072c]",
            "ldr r1, [0x000a0730]",
            "ldr r0, [0x000a0734]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x8f0",
            "ldr r2, [0x000a0738]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a072c]",
            "ldr r1, [0x000a0730]",
            "ldr r0, [0x000a0734]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x950",
            "ldr r2, [0x000a073c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::SHA::Transform__": {
        "function_address": "0x000b9394",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r2, [r0, 0x14]",
            "ldr r7, [r0, 0x18]",
            "ldr r5, [r0, 0x1c]",
            "ldr r1, [r0, 0x30]",
            "ldr r8, [r0, 0x20]",
            "ldr r3, [0x000ba3ac]",
            "ldr r4, [r0, 0x10]",
            "ldr r6, [r0, 0x34]",
            "eor ip, r5, r7",
            "add r8, r1, r8",
            "ror r1, r2, 2",
            "eor lr, r1, r7",
            "add r8, r8, r3",
            "and ip, ip, r2",
            "ldr fp, [r0, 0x38]",
            "add r8, r8, r4, ror 27",
            "and lr, lr, r4",
            "eor ip, ip, r5",
            "ror r4, r4, 2",
            "add r5, r5, r6",
            "add ip, r8, ip",
            "add r6, r5, r3",
            "eor r8, lr, r7",
            "eor r5, r4, r1",
            "ror lr, ip, 2",
            "add r8, r6, r8",
            "add r7, r7, fp",
            "ldr r6, [r0, 0x3c]",
            "and r5, ip, r5",
            "add r8, r8, ip, ror 27",
            "eor sl, lr, r4",
            "eor ip, r5, r1",
            "add r7, r7, r3",
            "ldr r5, [r0, 0x40]",
            "add sb, r6, r3",
            "and sl, sl, r8",
            "add r7, r7, ip",
            "ror ip, r8, 2",
            "add r7, r7, r8, ror 27",
            "add r1, sb, r1",
            "eor r8, ip, lr",
            "eor sb, sl, r4",
            "ldr r2, [r0, 0x44]",
            "add sl, r5, r3",
            "and r8, r8, r7",
            "add sb, r1, sb",
            "ror r1, r7, 2",
            "add sb, sb, r7, ror 27",
            "add r4, sl, r4",
            "eor r7, r1, ip",
            "eor sl, r8, lr",
            "and r7, r7, sb",
            "add r8, r2, r3",
            "add sl, r4, sl",
            "ldr r2, [r0, 0x48]",
            "ror r4, sb, 2",
            "add sl, sl, sb, ror 27",
            "add lr, r8, lr",
            "eor sb, r4, r1",
            "eor r8, r7, ip",
            "and sb, sb, sl",
            "add r7, r2, r3",
            "add r8, lr, r8",
            "ldr r2, [r0, 0x4c]",
            "ror lr, sl, 2",
            "add r8, r8, sl, ror 27",
            "add ip, r7, ip",
            "eor sl, lr, r4",
            "eor r7, sb, r1",
            "and sl, sl, r8",
            "add sb, r2, r3",
            "add r7, ip, r7",
            "ldr r2, [r0, 0x50]",
            "ror ip, r8, 2",
            "add r7, r7, r8, ror 27",
            "add r1, sb, r1",
            "eor r8, ip, lr",
            "eor sb, sl, r4",
            "and r8, r8, r7",
            "add sl, r2, r3",
            "add sb, r1, sb",
            "ldr r2, [r0, 0x54]",
            "ror r1, r7, 2",
            "add sb, sb, r7, ror 27",
            "add r4, sl, r4",
            "eor r7, r1, ip",
            "eor sl, r8, lr",
            "and r7, r7, sb",
            "add r8, r2, r3",
            "add sl, r4, sl",
            "ldr r2, [r0, 0x58]",
            "ror r4, sb, 2",
            "add sl, sl, sb, ror 27",
            "add lr, r8, lr",
            "eor sb, r4, r1",
            "eor r8, r7, ip",
            "and sb, sb, sl",
            "add r7, r2, r3",
            "add r8, lr, r8",
            "ldr r2, [r0, 0x5c]",
            "ror lr, sl, 2",
            "add r8, r8, sl, ror 27",
            "add ip, r7, ip",
            "eor sl, lr, r4",
            "eor r7, sb, r1",
            "and sl, sl, r8",
            "add sb, r2, r3",
            "add r7, ip, r7",
            "ldr r2, [r0, 0x60]",
            "add r7, r7, r8, ror 27",
            "ror ip, r8, 2",
            "add r1, sb, r1",
            "eor sb, sl, r4",
            "eor r8, ip, lr",
            "add sl, r2, r3",
            "add sb, r1, sb",
            "ldr r2, [r0, 0x64]",
            "ror r1, r7, 2",
            "add sb, sb, r7, ror 27",
            "and r8, r8, r7",
            "eor r7, r1, ip",
            "add r4, sl, r4",
            "and r7, r7, sb",
            "eor sl, r8, lr",
            "add r8, r2, r3",
            "add lr, r8, lr",
            "eor r8, r7, ip",
            "sub sp, sp, 0x84",
            "add r8, lr, r8",
            "str r8, [sp, 8]",
            "ldr r7, [r0, 0x30]",
            "ldr r8, [r0, 0x68]",
            "eor r2, fp, r7",
            "add sl, r4, sl",
            "add r7, r8, r3",
            "ror r4, sb, 2",
            "add sl, sl, sb, ror 27",
            "add ip, r7, ip",
            "eor sb, r4, r1",
            "ldr r7, [sp, 8]",
            "and sb, sb, sl",
            "add r8, r7, sl, ror 27",
            "eor r7, sb, r1",
            "add r7, ip, r7",
            "ldr sb, [r0, 0x50]",
            "str r7, [sp, 0xc]",
            "ldr r7, [r0, 0x64]",
            "eor r2, r2, sb",
            "ldr sb, [r0, 0x34]",
            "eor r2, r2, r7",
            "ldr r7, [r0, 0x6c]",
            "eor sb, r6, sb",
            "str sb, [sp, 8]",
            "add sb, r7, r3",
            "add sb, sb, r1",
            "ror lr, sl, 2",
            "str sb, [sp, 0x10]",
            "ldr sb, [sp, 0xc]",
            "eor sl, lr, r4",
            "ror ip, r8, 2",
            "add r7, sb, r8, ror 27",
            "ldr r1, [sp, 8]",
            "and sl, sl, r8",
            "ldr r8, [r0, 0x54]",
            "eor sl, sl, r4",
            "eor sb, r1, r8",
            "ldr r1, [sp, 0x10]",
            "ror r2, r2, 0x1f",
            "add sl, r1, sl",
            "str sl, [sp, 0xc]",
            "eor fp, r5, fp",
            "ldr sl, [r0, 0x68]",
            "str fp, [sp, 8]",
            "add fp, r2, r3",
            "eor r8, ip, lr",
            "add r4, fp, r4",
            "eor sb, sb, sl",
            "ldr fp, [sp, 0xc]",
            "and r8, r8, r7",
            "ror sb, sb, 0x1f",
            "ror r1, r7, 2",
            "str sb, [sp, 0x38]",
            "add sl, fp, r7, ror 27",
            "ldr sb, [sp, 8]",
            "ldr fp, [r0, 0x58]",
            "eor r7, r8, lr",
            "add r7, r4, r7",
            "ldr r4, [r0, 0x6c]",
            "eor r8, sb, fp",
            "str r7, [sp, 0xc]",
            "eor r8, r8, r4",
            "ldr r7, [r0, 0x44]",
            "ldr r4, [sp, 0x38]",
            "eor r6, r7, r6",
            "add r7, r4, r3",
            "eor fp, r1, ip",
            "add lr, r7, lr",
            "ldr r7, [sp, 0xc]",
            "and fp, fp, sl",
            "ror r8, r8, 0x1f",
            "ror sb, sl, 2",
            "str r8, [sp, 8]",
            "add sl, r7, sl, ror 27",
            "ldr r8, [r0, 0x5c]",
            "eor r7, fp, ip",
            "ldr fp, [r0, 0x48]",
            "eor r6, r6, r8",
            "eor r8, fp, r5",
            "ldr r5, [r0, 0x60]",
            "eor r4, sb, r1",
            "eor r8, r8, r5",
            "ldr r5, [sp, 8]",
            "and r4, r4, sl",
            "add fp, r5, r3",
            "add fp, fp, ip",
            "ldr ip, [sp, 0x38]",
            "add r7, lr, r7",
            "add r7, r7, sl, ror 27",
            "ror lr, sl, 2",
            "eor r5, r4, r1",
            "eor sl, r8, ip",
            "ldr r4, [r0, 0x4c]",
            "ldr r8, [r0, 0x44]",
            "eor r6, r6, r2",
            "ror r6, r6, 0x1f",
            "add r5, fp, r5",
            "ldr fp, [r0, 0x64]",
            "eor ip, r4, r8",
            "add r3, r6, r3",
            "eor r8, lr, sb",
            "ror sl, sl, 0x1f",
            "add r5, r5, r7, ror 27",
            "str sl, [sp, 0x20]",
            "add r1, r3, r1",
            "ror sl, r7, 2",
            "ldr r3, [sp, 8]",
            "and r8, r8, r7",
            "eor ip, ip, fp",
            "ldr r7, [r0, 0x50]",
            "ldr fp, [r0, 0x48]",
            "ldr r4, [0x000ba3b0]",
            "eor r8, r8, sb",
            "eor ip, ip, r3",
            "eor r3, r7, fp",
            "ldr r7, [sp, 0x20]",
            "add r8, r1, r8",
            "str r8, [sp, 0x10]",
            "add fp, r7, r4",
            "ldr r8, [r0, 0x68]",
            "eor r7, sl, lr",
            "eor r7, r7, r5",
            "add fp, fp, sb",
            "ldr r1, [r0, 0x54]",
            "ror ip, ip, 0x1f",
            "eor r3, r3, r8",
            "add fp, fp, r7",
            "ldr r8, [r0, 0x4c]",
            "ldr r7, [sp, 0x10]",
            "str ip, [sp, 0xc]",
            "eor ip, r1, r8",
            "add r1, r7, r5, ror 27",
            "ldr r8, [r0, 0x6c]",
            "ldr r7, [sp, 0xc]",
            "ror sb, r5, 2",
            "eor r3, r3, r6",
            "add r5, r7, r4",
            "eor ip, ip, r8",
            "ror r3, r3, 0x1f",
            "eor r8, sb, sl",
            "str r3, [sp, 0x1c]",
            "add fp, fp, r1, ror 27",
            "add r5, r5, lr",
            "eor r8, r8, r1",
            "ror lr, r1, 2",
            "ldr r1, [sp, 0x20]",
            "ldr r7, [r0, 0x58]",
            "eor ip, ip, r1",
            "ldr r1, [r0, 0x50]",
            "add r8, r5, r8",
            "eor r3, r7, r1",
            "ldr r7, [sp, 0x1c]",
            "add r8, r8, fp, ror 27",
            "add r1, r7, r4",
            "eor r7, lr, sb",
            "ror r5, fp, 2",
            "eor r7, r7, fp",
            "ldr fp, [sp, 0xc]",
            "eor r3, r3, r2",
            "add sl, r1, sl",
            "ror ip, ip, 0x1f",
            "ldr r1, [r0, 0x5c]",
            "eor r3, r3, fp",
            "ldr fp, [r0, 0x54]",
            "str ip, [sp, 0x30]",
            "add r7, sl, r7",
            "eor ip, r1, fp",
            "ldr fp, [sp, 0x30]",
            "str r7, [sp, 0x14]",
            "ldr r7, [sp, 0x38]",
            "add r1, fp, r4",
            "eor ip, ip, r7",
            "eor fp, r5, lr",
            "ldr r7, [r0, 0x58]",
            "add r1, r1, sb",
            "ldr sb, [r0, 0x60]",
            "eor fp, fp, r8",
            "eor sl, sb, r7",
            "add r1, r1, fp",
            "ldr sb, [sp, 0x14]",
            "ldr fp, [sp, 0x1c]",
            "ror r3, r3, 0x1f",
            "add r7, sb, r8, ror 27",
            "str r3, [sp, 0x10]",
            "eor sb, ip, fp",
            "ldr ip, [sp, 8]",
            "ror r3, r8, 2",
            "ldr r8, [sp, 0x10]",
            "eor sl, sl, ip",
            "ldr ip, [sp, 0x30]",
            "add fp, r8, r4",
            "ror sb, sb, 0x1f",
            "eor r8, r3, r5",
            "str sb, [sp, 0x24]",
            "add r1, r1, r7, ror 27",
            "add fp, fp, lr",
            "eor sb, sl, ip",
            "ror lr, r7, 2",
            "ldr ip, [r0, 0x5c]",
            "eor r8, r8, r7",
            "ldr r7, [r0, 0x64]",
            "add r8, fp, r8",
            "eor sl, r7, ip",
            "ldr fp, [sp, 0x24]",
            "eor ip, lr, r3",
            "add r8, r8, r1, ror 27",
            "ror r7, r1, 2",
            "ror sb, sb, 0x1f",
            "eor ip, ip, r1",
            "ldr r1, [sp, 0x10]",
            "str sb, [sp, 0x18]",
            "eor sl, sl, r6",
            "add sb, fp, r4",
            "add r5, sb, r5",
            "eor sl, sl, r1",
            "ldr sb, [r0, 0x68]",
            "ldr r1, [r0, 0x60]",
            "add ip, r5, ip",
            "eor fp, sb, r1",
            "ldr sb, [sp, 0x18]",
            "ror sl, sl, 0x1f",
            "add r1, sb, r4",
            "str ip, [sp, 0x14]",
            "str sl, [sp, 0x2c]",
            "ldr ip, [r0, 0x6c]",
            "ldr sl, [sp, 0x20]",
            "eor sb, r7, lr",
            "add r3, r1, r3",
            "ldr r1, [r0, 0x64]",
            "eor sb, sb, r8",
            "eor fp, fp, sl",
            "eor sl, ip, r1",
            "add r1, r3, sb",
            "ldr r3, [sp, 0x14]",
            "ror r5, r8, 2",
            "add ip, r3, r8, ror 27",
            "ldr r8, [sp, 0x24]",
            "ldr sb, [sp, 0xc]",
            "eor fp, fp, r8",
            "ror fp, fp, 0x1f",
            "ldr r3, [sp, 0x2c]",
            "str fp, [sp, 0x14]",
            "ldr fp, [sp, 0x18]",
            "eor sl, sl, sb",
            "eor sl, sl, fp",
            "add r8, r3, r4",
            "ror sl, sl, 0x1f",
            "ldr r3, [r0, 0x68]",
            "str sl, [sp, 0x28]",
            "ldr fp, [sp, 0x14]",
            "ldr sl, [sp, 0x1c]",
            "eor sb, r5, r7",
            "add r1, r1, ip, ror 27",
            "add r8, r8, lr",
            "eor sb, sb, ip",
            "ror lr, ip, 2",
            "eor ip, r2, r3",
            "add sb, r8, sb",
            "eor r3, lr, r5",
            "eor ip, ip, sl",
            "add sl, fp, r4",
            "add sb, sb, r1, ror 27",
            "ror r8, r1, 2",
            "ldr fp, [r0, 0x6c]",
            "add r7, sl, r7",
            "eor r3, r3, r1",
            "ldr sl, [sp, 0x38]",
            "ldr r1, [sp, 0x2c]",
            "add r3, r7, r3",
            "eor ip, ip, r1",
            "eor r1, sl, fp",
            "ldr fp, [sp, 0x28]",
            "add r3, r3, sb, ror 27",
            "add sl, fp, r4",
            "eor fp, r8, lr",
            "eor r7, fp, sb",
            "ldr fp, [sp, 0x30]",
            "add sl, sl, r5",
            "eor r1, r1, fp",
            "ldr fp, [sp, 8]",
            "ror r5, sb, 2",
            "add sl, sl, r7",
            "ldr sb, [sp, 0x10]",
            "ldr r7, [sp, 0x14]",
            "eor r2, fp, r2",
            "ldr fp, [sp, 0x28]",
            "eor r1, r1, r7",
            "eor r7, r2, sb",
            "eor r7, r7, fp",
            "ror ip, ip, 0x1f",
            "ldr fp, [sp, 0x38]",
            "ror r7, r7, 0x1f",
            "str r7, [sp, 0x34]",
            "eor sb, r5, r8",
            "ldr r7, [sp, 0x24]",
            "add r2, ip, r4",
            "ror r1, r1, 0x1f",
            "add sl, sl, r3, ror 27",
            "add r2, r2, lr",
            "ror lr, r3, 2",
            "eor r3, sb, r3",
            "eor sb, r6, fp",
            "add r2, r2, r3",
            "eor r3, sb, r7",
            "add sb, r1, r4",
            "eor r7, lr, r5",
            "ror fp, sl, 2",
            "add r2, r2, sl, ror 27",
            "add r8, sb, r8",
            "eor r7, r7, sl",
            "ldr sb, [sp, 0x20]",
            "ldr sl, [sp, 8]",
            "add r7, r8, r7",
            "eor sb, sb, sl",
            "str sb, [sp, 0x38]",
            "ldr sb, [sp, 0x34]",
            "str r7, [sp, 8]",
            "add sl, sb, r4",
            "add sl, sl, r5",
            "str sl, [sp, 0x3c]",
            "ldr r5, [sp, 0x18]",
            "ldr sl, [sp, 0x38]",
            "eor sb, fp, lr",
            "eor r8, sl, r5",
            "ldr sl, [sp, 0xc]",
            "ldr r5, [sp, 0x3c]",
            "eor sb, sb, r2",
            "eor r3, r3, ip",
            "eor r6, sl, r6",
            "add sl, r5, sb",
            "ldr sb, [sp, 8]",
            "ror r3, r3, 0x1f",
            "ror r7, r2, 2",
            "add r2, sb, r2, ror 27",
            "add sb, r3, r4",
            "eor r5, r8, r1",
            "add sb, sb, lr",
            "ldr r8, [sp, 0x2c]",
            "str sb, [sp, 8]",
            "ldr sb, [sp, 0x34]",
            "eor r6, r6, r8",
            "ror r5, r5, 0x1f",
            "eor r8, r7, fp",
            "add sl, sl, r2, ror 27",
            "ror lr, r2, 2",
            "str r5, [sp, 0x38]",
            "eor r6, r6, sb",
            "eor r5, r8, r2",
            "ldr sb, [sp, 0x20]",
            "ldr r2, [sp, 0x1c]",
            "ror r6, r6, 0x1f",
            "eor r8, r2, sb",
            "ldr r2, [sp, 8]",
            "str r6, [sp, 8]",
            "ldr r6, [sp, 0x14]",
            "add r5, r2, r5",
            "eor r8, r8, r6",
            "ldr r6, [sp, 0x38]",
            "add r5, r5, sl, ror 27",
            "add sb, r6, r4",
            "eor r6, lr, r7",
            "ror r2, sl, 2",
            "add fp, sb, fp",
            "eor sb, r6, sl",
            "ldr r6, [sp, 0xc]",
            "ldr sl, [sp, 0x30]",
            "add sb, fp, sb",
            "eor sl, sl, r6",
            "ldr r6, [sp, 8]",
            "str sl, [sp, 0xc]",
            "add sl, r6, r4",
            "str sb, [sp, 0x3c]",
            "add sl, sl, r7",
            "ldr sb, [sp, 0x28]",
            "ldr r7, [sp, 0xc]",
            "str sl, [sp, 4]",
            "eor fp, r7, sb",
            "ldr sb, [sp, 0x1c]",
            "ldr r7, [sp, 0x10]",
            "eor r6, r2, lr",
            "eor sl, r7, sb",
            "ldr sb, [sp, 4]",
            "eor r6, r6, r5",
            "add r7, sb, r6",
            "eor r8, r8, r3",
            "ldr r6, [sp, 0x3c]",
            "ror r8, r8, 0x1f",
            "add sb, r6, r5, ror 27",
            "str r8, [sp, 0x20]",
            "ror r8, r5, 2",
            "ldr r5, [sp, 0x38]",
            "eor r6, sl, ip",
            "eor fp, fp, r5",
            "ldr r5, [sp, 0x20]",
            "add r7, r7, sb, ror 27",
            "add sl, r5, r4",
            "add sl, sl, lr",
            "eor r5, r8, r2",
            "str sl, [sp, 0x1c]",
            "eor r5, r5, sb",
            "ror sl, sb, 2",
            "ldr sb, [sp, 8]",
            "ror fp, fp, 0x1f",
            "str fp, [sp, 0xc]",
            "ldr lr, [sp, 0x30]",
            "ldr fp, [sp, 0x24]",
            "eor r6, r6, sb",
            "ror r6, r6, 0x1f",
            "eor sb, fp, lr",
            "ldr fp, [sp, 0x1c]",
            "str r6, [sp, 0x1c]",
            "ldr r6, [sp, 0xc]",
            "add lr, fp, r5",
            "add r5, r6, r4",
            "add r2, r5, r2",
            "ldr r5, [sp, 0x20]",
            "eor sb, sb, r1",
            "eor r6, sl, r8",
            "eor sb, sb, r5",
            "ldr r5, [sp, 0x1c]",
            "add lr, lr, r7, ror 27",
            "ror fp, r7, 2",
            "eor r7, r6, r7",
            "add r7, r2, r7",
            "add r6, r5, r4",
            "eor r5, fp, sl",
            "str r7, [sp, 0x3c]",
            "eor r5, r5, lr",
            "ldr r7, [sp, 0x10]",
            "add r8, r6, r8",
            "ror sb, sb, 0x1f",
            "ldr r6, [sp, 0x18]",
            "str sb, [sp, 0x30]",
            "add r8, r8, r5",
            "ldr r5, [sp, 0x3c]",
            "eor sb, r6, r7",
            "ldr r6, [sp, 0x30]",
            "ror r2, lr, 2",
            "add r7, r5, lr, ror 27",
            "ldr lr, [sp, 0x34]",
            "add r4, r6, r4",
            "ldr r6, [sp, 0xc]",
            "eor sb, sb, lr",
            "eor lr, r2, fp",
            "add r8, r8, r7, ror 27",
            "eor r5, sb, r6",
            "add sl, r4, sl",
            "ldr r6, [sp, 0x24]",
            "ror r4, r7, 2",
            "eor r7, lr, r7",
            "ldr lr, [sp, 0x2c]",
            "add sl, sl, r7",
            "ror r5, r5, 0x1f",
            "str r5, [sp, 0x10]",
            "eor sb, lr, r6",
            "add r6, sl, r8, ror 27",
            "ldr sl, [sp, 0x1c]",
            "eor sb, sb, r3",
            "ldr lr, [0x000ba3b4]",
            "orr r5, r8, r4",
            "eor sb, sb, sl",
            "ldr sl, [sp, 0x10]",
            "and r5, r5, r2",
            "str r5, [sp, 0x24]",
            "add r5, sl, lr",
            "add fp, r5, fp",
            "ldr r5, [sp, 0x24]",
            "ror r7, r8, 2",
            "and r8, r8, r4",
            "ldr sl, [sp, 0x14]",
            "orr r8, r5, r8",
            "ldr r5, [sp, 0x18]",
            "ror sb, sb, 0x1f",
            "add fp, fp, r8",
            "ldr r8, [sp, 0x38]",
            "str sb, [sp, 0x24]",
            "eor sb, sl, r5",
            "eor sb, sb, r8",
            "ldr r8, [sp, 0x24]",
            "orr r5, r6, r7",
            "add sl, r8, lr",
            "add sl, sl, r2",
            "and r8, r6, r7",
            "and r5, r5, r4",
            "str sl, [sp, 0x18]",
            "ldr r2, [sp, 0x28]",
            "ldr sl, [sp, 0x30]",
            "orr r5, r5, r8",
            "ldr r8, [sp, 0x2c]",
            "eor sb, sb, sl",
            "eor sl, r2, r8",
            "ldr r8, [sp, 0x18]",
            "add fp, fp, r6, ror 27",
            "ror r6, r6, 2",
            "add r2, r8, r5",
            "ror sb, sb, 0x1f",
            "orr r8, fp, r6",
            "str sb, [sp, 0x18]",
            "and r8, r8, r7",
            "ldr sb, [sp, 8]",
            "str r8, [sp, 0x2c]",
            "ldr r8, [sp, 0x10]",
            "eor sl, sl, sb",
            "eor sl, sl, r8",
            "ldr r8, [sp, 0x18]",
            "add r2, r2, fp, ror 27",
            "add sb, r8, lr",
            "add r4, sb, r4",
            "ldr sb, [sp, 0x2c]",
            "ror r5, fp, 2",
            "ldr r8, [sp, 0x14]",
            "and fp, fp, r6",
            "ror sl, sl, 0x1f",
            "str sl, [sp, 0x2c]",
            "orr fp, sb, fp",
            "eor sl, ip, r8",
            "add r4, r4, fp",
            "ldr r8, [sp, 0x2c]",
            "ldr fp, [sp, 0x20]",
            "orr sb, r2, r5",
            "eor sl, sl, fp",
            "add fp, r8, lr",
            "add r7, fp, r7",
            "ldr fp, [sp, 0x24]",
            "and r8, r2, r5",
            "and sb, sb, r6",
            "orr sb, sb, r8",
            "eor sl, sl, fp",
            "ldr fp, [sp, 0x28]",
            "add r8, r4, r2, ror 27",
            "add sb, r7, sb",
            "ror r2, r2, 2",
            "ldr r7, [sp, 0xc]",
            "ror sl, sl, 0x1f",
            "str sl, [sp, 0x14]",
            "eor r4, r1, fp",
            "orr sl, r8, r2",
            "eor r4, r4, r7",
            "and r7, sl, r5",
            "ldr sl, [sp, 0x18]",
            "add sb, sb, r8, ror 27",
            "eor r4, r4, sl",
            "str r4, [sp, 0x28]",
            "ldr r4, [sp, 0x14]",
            "ror fp, r8, 2",
            "add sl, r4, lr",
            "and r8, r8, r2",
            "add sl, sl, r6",
            "orr r6, r7, r8",
            "ldr r8, [sp, 0x34]",
            "ldr r7, [sp, 0x28]",
            "eor ip, r8, ip",
            "add r6, sl, r6",
            "orr r8, sb, fp",
            "ldr sl, [sp, 0x1c]",
            "ror r4, r7, 0x1f",
            "and r8, r8, r2",
            "and r7, sb, fp",
            "eor ip, ip, sl",
            "orr r8, r8, r7",
            "add sl, r4, lr",
            "ldr r7, [sp, 0x2c]",
            "add r5, sl, r5",
            "ldr sl, [sp, 0x30]",
            "eor ip, ip, r7",
            "eor r1, r3, r1",
            "ldr r7, [sp, 0x14]",
            "add r6, r6, sb, ror 27",
            "eor r1, r1, sl",
            "ror sb, sb, 2",
            "ror ip, ip, 0x1f",
            "add r8, r5, r8",
            "eor r1, r1, r7",
            "orr r5, r6, sb",
            "ror sl, r6, 2",
            "add r8, r8, r6, ror 27",
            "add r7, ip, lr",
            "and r6, r6, sb",
            "and r5, r5, fp",
            "ror r1, r1, 0x1f",
            "str r1, [sp, 0x28]",
            "orr r5, r5, r6",
            "add r2, r7, r2",
            "ldr r6, [sp, 0x38]",
            "ldr r7, [sp, 0x34]",
            "add r2, r2, r5",
            "ldr r5, [sp, 0x10]",
            "eor r1, r6, r7",
            "eor r1, r1, r5",
            "ldr r5, [sp, 0x28]",
            "orr r6, r8, sl",
            "add r7, r5, lr",
            "add fp, r7, fp",
            "and r5, r8, sl",
            "ldr r7, [sp, 8]",
            "and r6, r6, sb",
            "orr r6, r6, r5",
            "add r2, r2, r8, ror 27",
            "eor r5, r7, r3",
            "ror r8, r8, 2",
            "add r3, fp, r6",
            "eor r1, r1, r4",
            "ldr fp, [sp, 0x24]",
            "ror r1, r1, 0x1f",
            "orr r6, r2, r8",
            "add r3, r3, r2, ror 27",
            "add r7, r1, lr",
            "and r6, r6, sl",
            "eor r5, r5, fp",
            "ror fp, r2, 2",
            "and r2, r2, r8",
            "add sb, r7, sb",
            "eor r5, r5, ip",
            "orr r7, r6, r2",
            "ldr r6, [sp, 0x38]",
            "ldr r2, [sp, 0x20]",
            "ror r5, r5, 0x1f",
            "add r7, sb, r7",
            "ldr sb, [sp, 0x18]",
            "str r5, [sp, 0x3c]",
            "eor r5, r2, r6",
            "eor r5, r5, sb",
            "ldr sb, [sp, 0x3c]",
            "orr r6, r3, fp",
            "add r2, sb, lr",
            "add r2, r2, sl",
            "ldr sl, [sp, 0x28]",
            "and sb, r3, fp",
            "and r6, r6, r8",
            "str r2, [sp, 0x34]",
            "orr r6, r6, sb",
            "ldr r2, [sp, 0xc]",
            "ldr sb, [sp, 8]",
            "eor r5, r5, sl",
            "ror r5, r5, 0x1f",
            "eor sl, r2, sb",
            "ldr r2, [sp, 0x34]",
            "str r5, [sp, 0x34]",
            "ldr r5, [sp, 0x2c]",
            "add r7, r7, r3, ror 27",
            "eor sl, sl, r5",
            "eor sl, sl, r1",
            "str sl, [sp, 8]",
            "ldr sl, [sp, 0x34]",
            "ror r3, r3, 2",
            "add r5, sl, lr",
            "orr sb, r7, r3",
            "add r6, r2, r6",
            "add r5, r5, r8",
            "ldr r8, [sp, 8]",
            "ror r2, r7, 2",
            "add r6, r6, r7, ror 27",
            "and sb, sb, fp",
            "and r7, r7, r3",
            "ldr sl, [sp, 0x20]",
            "orr r7, sb, r7",
            "ror r8, r8, 0x1f",
            "ldr sb, [sp, 0x1c]",
            "str r8, [sp, 0x38]",
            "add r5, r5, r7",
            "eor r8, sb, sl",
            "ldr r7, [sp, 0x14]",
            "ldr sl, [sp, 0x38]",
            "eor r8, r8, r7",
            "add r7, sl, lr",
            "add r7, r7, fp",
            "ldr fp, [sp, 0x3c]",
            "str r7, [sp, 8]",
            "orr sb, r6, r2",
            "ldr r7, [sp, 0x30]",
            "eor r8, r8, fp",
            "ldr fp, [sp, 0xc]",
            "and sl, r6, r2",
            "and sb, sb, r3",
            "orr sb, sb, sl",
            "eor sl, r7, fp",
            "ldr fp, [sp, 8]",
            "eor sl, sl, r4",
            "add r7, fp, sb",
            "ldr sb, [sp, 0x34]",
            "ror r8, r8, 0x1f",
            "eor sl, sl, sb",
            "add r5, r5, r6, ror 27",
            "str r8, [sp, 8]",
            "ror r6, r6, 2",
            "str sl, [sp, 0xc]",
            "ldr sl, [sp, 8]",
            "orr fp, r5, r6",
            "ror r8, r5, 2",
            "add r7, r7, r5, ror 27",
            "add sb, sl, lr",
            "and fp, fp, r2",
            "and r5, r5, r6",
            "add r3, sb, r3",
            "orr sb, fp, r5",
            "ldr fp, [sp, 0xc]",
            "ldr sl, [sp, 0x10]",
            "ror fp, fp, 0x1f",
            "str fp, [sp, 0x20]",
            "ldr fp, [sp, 0x1c]",
            "add sb, r3, sb",
            "eor r5, sl, fp",
            "ldr fp, [sp, 0x20]",
            "orr sl, r7, r8",
            "add r3, fp, lr",
            "add r3, r3, r2",
            "and fp, r7, r8",
            "ldr r2, [sp, 0x38]",
            "and sl, sl, r6",
            "str r3, [sp, 0xc]",
            "orr sl, sl, fp",
            "ldr r3, [sp, 0x24]",
            "ldr fp, [sp, 0x30]",
            "eor r5, r5, ip",
            "eor r5, r5, r2",
            "ror r5, r5, 0x1f",
            "eor r2, r3, fp",
            "ldr fp, [sp, 0xc]",
            "str r5, [sp, 0xc]",
            "ldr r5, [sp, 0x28]",
            "add r3, fp, sl",
            "ldr sl, [sp, 8]",
            "eor r2, r2, r5",
            "eor r2, r2, sl",
            "str r2, [sp, 0x1c]",
            "add sb, sb, r7, ror 27",
            "ldr r2, [sp, 0xc]",
            "ror r7, r7, 2",
            "orr fp, sb, r7",
            "add r3, r3, sb, ror 27",
            "ror r5, sb, 2",
            "add sl, r2, lr",
            "and fp, fp, r8",
            "and sb, sb, r7",
            "add r6, sl, r6",
            "orr sl, fp, sb",
            "ldr sb, [sp, 0x1c]",
            "ldr fp, [sp, 0x18]",
            "ror sb, sb, 0x1f",
            "str sb, [sp, 0x1c]",
            "ldr sb, [sp, 0x10]",
            "add sl, r6, sl",
            "eor r2, fp, sb",
            "ldr sb, [sp, 0x1c]",
            "eor r2, r2, r1",
            "add r6, sb, lr",
            "add r6, r6, r8",
            "str r6, [sp, 0x10]",
            "ldr r6, [sp, 0x20]",
            "ldr r8, [sp, 0x2c]",
            "orr fp, r3, r5",
            "eor r2, r2, r6",
            "ldr r6, [sp, 0x24]",
            "and sb, r3, r5",
            "and fp, fp, r7",
            "orr fp, fp, sb",
            "eor sb, r8, r6",
            "ldr r8, [sp, 0x10]",
            "ror r2, r2, 0x1f",
            "add r6, r8, fp",
            "ldr fp, [sp, 0x3c]",
            "str r2, [sp, 0x30]",
            "ldr r2, [sp, 0xc]",
            "eor sb, sb, fp",
            "eor sb, sb, r2",
            "str sb, [sp, 0x10]",
            "add sl, sl, r3, ror 27",
            "ldr sb, [sp, 0x30]",
            "ror r3, r3, 2",
            "orr fp, sl, r3",
            "ror r8, sl, 2",
            "add r6, r6, sl, ror 27",
            "add r2, sb, lr",
            "and fp, fp, r5",
            "and sl, sl, r3",
            "add r7, r2, r7",
            "orr r2, fp, sl",
            "ldr sl, [sp, 0x10]",
            "ldr fp, [sp, 0x14]",
            "ror sl, sl, 0x1f",
            "str sl, [sp, 0x10]",
            "ldr sl, [sp, 0x18]",
            "add r2, r7, r2",
            "eor sb, fp, sl",
            "ldr r7, [sp, 0x34]",
            "ldr sl, [sp, 0x10]",
            "eor sb, sb, r7",
            "add r7, sl, lr",
            "add r5, r7, r5",
            "ldr r7, [sp, 0x1c]",
            "orr fp, r6, r8",
            "eor sb, sb, r7",
            "and sl, r6, r8",
            "ldr r7, [sp, 0x2c]",
            "and fp, fp, r3",
            "ror sb, sb, 0x1f",
            "str sb, [sp, 0x24]",
            "orr fp, fp, sl",
            "ldr sb, [sp, 0x38]",
            "eor sl, r4, r7",
            "add r7, r5, fp",
            "ldr fp, [sp, 0x30]",
            "eor sl, sl, sb",
            "eor sl, sl, fp",
            "str sl, [sp, 0x18]",
            "ldr sl, [sp, 0x14]",
            "add r2, r2, r6, ror 27",
            "eor sl, ip, sl",
            "str sl, [sp, 0x14]",
            "ldr sl, [sp, 0x24]",
            "ror r6, r6, 2",
            "add fp, sl, lr",
            "add r3, fp, r3",
            "ldr fp, [sp, 0x18]",
            "ldr sl, [sp, 0x14]",
            "ror fp, fp, 0x1f",
            "str fp, [sp, 0x18]",
            "orr sb, r2, r6",
            "ldr fp, [sp, 8]",
            "add r7, r7, r2, ror 27",
            "ror r5, r2, 2",
            "and sb, sb, r8",
            "and r2, r2, r6",
            "orr sb, sb, r2",
            "eor r2, sl, fp",
            "ldr fp, [sp, 0x18]",
            "ldr sl, [sp, 0x28]",
            "add lr, fp, lr",
            "ldr fp, [sp, 0x20]",
            "eor r4, sl, r4",
            "add sb, r3, sb",
            "add lr, lr, r8",
            "ldr r3, [sp, 0x10]",
            "ldr r8, [sp, 0x24]",
            "orr sl, r7, r5",
            "eor r4, r4, fp",
            "and sl, sl, r6",
            "and fp, r7, r5",
            "eor r2, r2, r3",
            "eor r4, r4, r8",
            "ldr r3, [0x000ba3b8]",
            "ror r2, r2, 0x1f",
            "add sb, sb, r7, ror 27",
            "orr sl, sl, fp",
            "ror r7, r7, 2",
            "ldr fp, [sp, 0xc]",
            "ror r4, r4, 0x1f",
            "str r4, [sp, 0x2c]",
            "add r8, r2, r3",
            "eor r4, r7, r5",
            "eor ip, r1, ip",
            "add lr, lr, sl",
            "add lr, lr, sb, ror 27",
            "ror sl, sb, 2",
            "add r6, r8, r6",
            "eor ip, ip, fp",
            "ldr r8, [sp, 0x3c]",
            "ldr fp, [sp, 0x28]",
            "eor sb, r4, sb",
            "ldr r4, [sp, 0x18]",
            "add sb, r6, sb",
            "eor ip, ip, r4",
            "eor r4, r8, fp",
            "ldr r8, [sp, 0x2c]",
            "ror ip, ip, 0x1f",
            "add fp, r8, r3",
            "add r5, fp, r5",
            "ldr fp, [sp, 0x1c]",
            "eor r8, sl, r7",
            "str ip, [sp, 0x14]",
            "eor r6, r4, fp",
            "eor r8, r8, lr",
            "ldr r4, [sp, 0x34]",
            "ldr fp, [sp, 0x14]",
            "add r8, r5, r8",
            "ldr r5, [sp, 0x30]",
            "ror ip, lr, 2",
            "eor r1, r4, r1",
            "eor r6, r6, r2",
            "add sb, sb, lr, ror 27",
            "eor r1, r1, r5",
            "add lr, fp, r3",
            "eor r5, ip, sl",
            "ror r6, r6, 0x1f",
            "add r4, r8, sb, ror 27",
            "str r6, [sp, 0x28]",
            "ldr r8, [sp, 0x3c]",
            "ldr r6, [sp, 0x38]",
            "add r7, lr, r7",
            "eor lr, r5, sb",
            "ldr r5, [sp, 0x2c]",
            "ror fp, sb, 2",
            "ldr sb, [sp, 0x10]",
            "eor r1, r1, r5",
            "eor r5, r6, r8",
            "eor r5, r5, sb",
            "ldr r6, [sp, 0x28]",
            "ldr sb, [sp, 0x14]",
            "ror r1, r1, 0x1f",
            "b 0xba3bc",
            "str r1, [sp, 0x3c]",
            "add lr, r7, lr",
            "add r1, r6, r3",
            "eor r7, fp, ip",
            "eor r5, r5, sb",
            "ldr r6, [sp, 0x34]",
            "ldr sb, [sp, 0x3c]",
            "add sl, r1, sl",
            "eor r7, r7, r4",
            "ldr r1, [sp, 8]",
            "ror r5, r5, 0x1f",
            "str r5, [sp, 0x34]",
            "add r7, sl, r7",
            "ldr sl, [sp, 0x24]",
            "ror r8, r4, 2",
            "add lr, lr, r4, ror 27",
            "eor r4, r1, r6",
            "add r6, sb, r3",
            "add r6, r6, ip",
            "ldr sb, [sp, 0x38]",
            "eor ip, r4, sl",
            "ldr r4, [sp, 0x20]",
            "eor r1, r8, fp",
            "eor sl, r4, sb",
            "ldr sb, [sp, 0x34]",
            "eor r1, r1, lr",
            "add r4, sb, r3",
            "add r6, r6, r1",
            "ldr r1, [sp, 0x18]",
            "add r7, r7, lr, ror 27",
            "ror r5, lr, 2",
            "add r4, r4, fp",
            "ldr lr, [sp, 0x28]",
            "ldr fp, [sp, 0x3c]",
            "eor sl, sl, r1",
            "ldr sb, [sp, 0xc]",
            "eor ip, ip, lr",
            "eor sl, sl, fp",
            "eor lr, r5, r8",
            "ldr fp, [sp, 8]",
            "ror r1, r7, 2",
            "eor lr, lr, r7",
            "add r6, r6, r7, ror 27",
            "add r4, r4, lr",
            "eor r7, sb, fp",
            "eor sb, r1, r5",
            "ror ip, ip, 0x1f",
            "ror lr, r6, 2",
            "add r4, r4, r6, ror 27",
            "eor sb, sb, r6",
            "ldr r6, [sp, 0x34]",
            "add fp, ip, r3",
            "eor r7, r7, r2",
            "add fp, fp, r8",
            "ror sl, sl, 0x1f",
            "ldr r8, [sp, 0x1c]",
            "eor r7, r7, r6",
            "ldr r6, [sp, 0x20]",
            "str sl, [sp, 8]",
            "eor sl, r8, r6",
            "ldr r6, [sp, 8]",
            "add sb, fp, sb",
            "add r8, r6, r3",
            "ror r7, r7, 0x1f",
            "str r7, [sp, 0x20]",
            "str sb, [sp, 0x38]",
            "ldr r7, [sp, 0x2c]",
            "ldr sb, [sp, 0xc]",
            "eor r6, lr, r1",
            "add r5, r8, r5",
            "ldr r8, [sp, 0x30]",
            "eor r6, r6, r4",
            "eor sl, sl, r7",
            "eor r7, r8, sb",
            "add r8, r5, r6",
            "ldr r5, [sp, 0x38]",
            "ror fp, r4, 2",
            "ldr r6, [sp, 0x14]",
            "add r4, r5, r4, ror 27",
            "ldr r5, [sp, 0x20]",
            "eor r7, r7, r6",
            "add sb, r5, r3",
            "eor r6, fp, lr",
            "add r1, sb, r1",
            "eor sl, sl, ip",
            "eor sb, r6, r4",
            "ldr r6, [sp, 8]",
            "ror sl, sl, 0x1f",
            "str sl, [sp, 0xc]",
            "eor sl, r7, r6",
            "add r8, r8, r4, ror 27",
            "ror r5, r4, 2",
            "ldr r6, [sp, 0x1c]",
            "ldr r4, [sp, 0x10]",
            "ror sl, sl, 0x1f",
            "str sl, [sp, 0x1c]",
            "ldr sl, [sp, 0x28]",
            "eor r7, r4, r6",
            "eor r7, r7, sl",
            "ldr r4, [sp, 0xc]",
            "eor sl, r5, fp",
            "add sb, r1, sb",
            "ror r6, r8, 2",
            "add sb, sb, r8, ror 27",
            "eor sl, sl, r8",
            "ldr r8, [sp, 0x20]",
            "add r1, r4, r3",
            "add lr, r1, lr",
            "ldr r4, [sp, 0x24]",
            "eor r1, r7, r8",
            "ldr r7, [sp, 0x30]",
            "add sl, lr, sl",
            "eor r8, r4, r7",
            "ldr r7, [sp, 0x1c]",
            "str sl, [sp, 0x30]",
            "ldr sl, [sp, 0x3c]",
            "add r4, r7, r3",
            "add r4, r4, fp",
            "eor r8, r8, sl",
            "ldr fp, [sp, 0x18]",
            "ldr sl, [sp, 0x10]",
            "eor r7, r6, r5",
            "str r4, [sp, 0x38]",
            "eor lr, r7, sb",
            "eor r7, fp, sl",
            "ldr fp, [sp, 0x38]",
            "ror r4, sb, 2",
            "add lr, fp, lr",
            "ldr fp, [sp, 0x30]",
            "ror r1, r1, 0x1f",
            "add sl, fp, sb, ror 27",
            "ldr sb, [sp, 0xc]",
            "ldr fp, [sp, 0x34]",
            "eor r8, r8, sb",
            "add sb, r1, r3",
            "add sb, sb, r5",
            "str sb, [sp, 0x10]",
            "ldr sb, [sp, 0x1c]",
            "eor r7, r7, fp",
            "eor r7, r7, sb",
            "ldr sb, [sp, 0x24]",
            "eor fp, r4, r6",
            "add r5, lr, sl, ror 27",
            "ror lr, sl, 2",
            "eor sl, fp, sl",
            "eor fp, r2, sb",
            "ldr sb, [sp, 0x10]",
            "eor fp, fp, ip",
            "ror r8, r8, 0x1f",
            "str fp, [sp, 0x10]",
            "add sl, sb, sl",
            "add fp, r8, r3",
            "str sl, [sp, 0x30]",
            "add fp, fp, r6",
            "ldr r6, [sp, 0x10]",
            "str fp, [sp, 0x24]",
            "ldr fp, [sp, 0x30]",
            "eor sl, lr, r4",
            "eor r6, r6, r1",
            "add sb, fp, r5, ror 27",
            "ror ip, r5, 2",
            "str r6, [sp, 0x30]",
            "eor r5, sl, r5",
            "ldr r6, [sp, 0x18]",
            "ldr sl, [sp, 0x2c]",
            "ror r7, r7, 0x1f",
            "eor fp, sl, r6",
            "eor r6, ip, lr",
            "str r6, [sp, 0x10]",
            "ldr r6, [sp, 0x24]",
            "add sl, r7, r3",
            "add r5, r6, r5",
            "str r5, [sp, 0x24]",
            "ldr r5, [sp, 8]",
            "ldr r6, [sp, 0x30]",
            "add r4, sl, r4",
            "eor sl, fp, r5",
            "ldr r5, [sp, 0x10]",
            "ror r6, r6, 0x1f",
            "str r6, [sp, 0x18]",
            "eor r6, r5, sb",
            "ldr r5, [sp, 0x14]",
            "add r6, r4, r6",
            "eor r2, r5, r2",
            "ldr r4, [sp, 0x24]",
            "ldr r5, [sp, 0x18]",
            "ror fp, sb, 2",
            "add sb, r4, sb, ror 27",
            "add r4, r5, r3",
            "eor r5, fp, ip",
            "add r6, r6, sb, ror 27",
            "add lr, r4, lr",
            "ror r4, sb, 2",
            "eor sb, r5, sb",
            "eor r8, sl, r8",
            "ldr r5, [sp, 0x2c]",
            "ldr sl, [sp, 0x20]",
            "add lr, lr, sb",
            "ldr sb, [sp, 0x28]",
            "ror r8, r8, 0x1f",
            "eor r2, r2, sl",
            "eor sl, sb, r5",
            "add sb, r8, r3",
            "eor r5, r4, fp",
            "add lr, lr, r6, ror 27",
            "add ip, sb, ip",
            "eor r7, r2, r7",
            "ror r2, r6, 2",
            "eor r6, r5, r6",
            "ldr sb, [sp, 0xc]",
            "add r6, ip, r6",
            "str r6, [sp, 8]",
            "ldr ip, [sp, 0x18]",
            "eor sl, sl, sb",
            "eor sl, sl, ip",
            "str sl, [sp, 0xc]",
            "ldr r6, [sp, 0x3c]",
            "ldr sl, [sp, 0x14]",
            "ror r7, r7, 0x1f",
            "add r5, r7, r3",
            "add fp, r5, fp",
            "eor r5, r6, sl",
            "ldr r6, [sp, 0x1c]",
            "eor sb, r2, r4",
            "eor r5, r5, r6",
            "ldr sl, [sp, 0x34]",
            "ldr r6, [sp, 0x28]",
            "eor sb, sb, lr",
            "add fp, fp, sb",
            "eor sb, sl, r6",
            "ldr sl, [sp, 8]",
            "ror ip, lr, 2",
            "add r6, sl, lr, ror 27",
            "ldr lr, [sp, 0xc]",
            "eor r8, r5, r8",
            "add sl, r3, lr, ror 31",
            "ldr r5, [r0, 0x10]",
            "eor lr, ip, r2",
            "add fp, fp, r6, ror 27",
            "eor r1, sb, r1",
            "add sl, sl, r4",
            "ror r4, r6, 2",
            "eor r6, lr, r6",
            "add r8, r3, r8, ror 31",
            "ror lr, fp, 2",
            "add sl, sl, r6",
            "eor r7, r1, r7",
            "eor r6, r4, ip",
            "add r1, r5, r3",
            "add sl, sl, fp, ror 27",
            "add r2, r8, r2",
            "add r7, r1, r7, ror 31",
            "eor r3, lr, r4",
            "eor fp, r6, fp",
            "ldr sb, [r0, 0x18]",
            "ldr r5, [r0, 0x1c]",
            "ldr r6, [r0, 0x20]",
            "eor r3, r3, sl",
            "add fp, r2, fp",
            "add ip, r7, ip",
            "ldr r7, [r0, 0x14]",
            "add ip, ip, r3",
            "add fp, fp, sl, ror 27",
            "add r3, r7, fp",
            "add sl, sb, sl, ror 2",
            "add lr, r5, lr",
            "add r4, r6, r4",
            "add fp, ip, fp, ror 27",
            "str r4, [r0, 0x20]",
            "str fp, [r0, 0x10]",
            "str r3, [r0, 0x14]",
            "str sl, [r0, 0x18]",
            "str lr, [r0, 0x1c]",
            "mov r1, 0",
            "add r0, sp, 0x40",
            "mov r2, 0x40",
            "bl sym.imp.memset",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_MD5::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007cd00",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt4HMACINS_3MD5EE5FinalEPh": {
        "function_address": "0x0003e9d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe6c]!"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::ConvertOut_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a94e0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r1",
            "ldr r3, [r2]",
            "ldr ip, [r4, 0xc]",
            "ldr lr, [0x000a95c4]",
            "cmp ip, r3",
            "mov r1, r2",
            "add lr, pc, lr",
            "mov r5, r0",
            "sub sp, sp, 8",
            "ldr r2, [r4, 0x50]",
            "ldr r0, [r4, 0x20]",
            "blo 0xa959c",
            "cmp r3, 0",
            "ldr r8, [r1, 4]",
            "beq 0xa9544",
            "mov lr, 0",
            "mov r6, lr",
            "ldr r7, [r8, lr]",
            "add r6, r6, 1",
            "cmp r3, r6",
            "str r7, [r2, lr]",
            "add lr, lr, 4",
            "bhi 0xa9528",
            "ldr r3, [r1]",
            "rsbs lr, r3, ip, lsl 1",
            "add r3, r2, r3, lsl 2",
            "beq 0xa9568",
            "mov r1, 0",
            "mov r6, r1",
            "str r6, [r3, r1, lsl 2]",
            "add r1, r1, 1",
            "cmp lr, r1",
            "bhi 0xa9558",
            "ldr lr, [r4, 0x40]",
            "ldr r3, [r4, 0x10]",
            "add r1, r2, ip, lsl 3",
            "str lr, [sp]",
            "str ip, [sp, 4]",
            "bl rsym._ZN8TaoCrypt16MontgomeryReduceEPjS0_PKjS2_S2_j",
            "mov r0, r5",
            "add r1, r4, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a95c8]",
            "ldr r1, [0x000a95cc]",
            "add r3, lr, r3",
            "ldr r0, [0x000a95d0]",
            "add r3, r3, 0xcd0",
            "add r1, lr, r1",
            "add r0, lr, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000a95d4]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::Message::Message__": {
        "function_address": "0x00084acc",
        "instructions": [
            "ldr ip, [0x00084b0c]",
            "ldr r3, [0x00084b10]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00084b14]",
            "add r2, r3, 8",
            "ldr r3, [0x00084b18]",
            "str r2, [r0]",
            "ldr r0, [0x00084b1c]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1c",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.vio_write": {
        "function_address": "0x0007a2c0",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0]",
            "bl sym.imp.write",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x0003e0d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x46c]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::KeyInnerHash__": {
        "function_address": "0x000bacb0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r1, [r4]",
            "add r0, r0, 0x10",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r3, 1",
            "strb r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::RecordLayerHeader_const_": {
        "function_address": "0x0008ca78",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0008cb08]",
            "sub sp, sp, 8",
            "mov r6, r1",
            "mov r1, r5",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r6]",
            "mov r1, r5",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r6, 4]",
            "mov r1, r5",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r6, 5]",
            "add r1, sp, 4",
            "strb r3, [r0]",
            "ldrh r0, [r6, 6]",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [sp, 4]",
            "mov r1, r5",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [sp, 5]",
            "strb r3, [r0]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaMD4_Init": {
        "function_address": "0x0008545c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00085498]",
            "mov r5, r0",
            "add r4, pc, r4",
            "mov r1, 4",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0008549c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "bl rsym._ZN8TaoCrypt3MD44InitEv",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD44InitEv": {
        "function_address": "0x000401c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe74]!"
        ]
    },
    "sym.yaEVP_BytesToKey": {
        "function_address": "0x00085678",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, str.sYt",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r1, [0x00085988]",
            "sub sp, sp, 0x44",
            "add ip, pc, ip",
            "str r2, [sp, 8]",
            "add r1, ip, r1",
            "mov r2, 3",
            "str ip, [sp, 0x14]",
            "str r3, [sp, 0x10]",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "ldr r8, [sp, 0x6c]",
            "bne 0x858ac",
            "ldr r2, [sp, 0x14]",
            "ldr r1, [0x0008598c]",
            "mov r0, r4",
            "add r1, r2, r1",
            "mov r2, 7",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x85910",
            "ldr r2, [sp, 0x14]",
            "ldr r1, [0x00085990]",
            "mov r0, r4",
            "add r1, r2, r1",
            "mov r2, 0xc",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x858b4",
            "mov r3, 0x20",
            "mov ip, 8",
            "mov r2, 0x18",
            "str r3, [sp, 0xc]",
            "str ip, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "add r5, sp, 0x38",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "ldr r2, [sp, 0x1c]",
            "mov r0, r5",
            "ldr fp, [sp, 0x18]",
            "str r2, [sp, 4]",
            "bl rsym._ZNK5yaSSL3MD514get_digestSizeEv",
            "mov sl, 0",
            "add r6, sp, 0x24",
            "mov r7, r0",
            "cmp sl, 0",
            "mov sb, r7",
            "bne 0x85878",
            "mov r0, r5",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x68]",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "ldr r3, [sp, 8]",
            "cmp r3, 0",
            "movne r0, r5",
            "movne r1, r3",
            "movne r2, 8",
            "blne rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL3MD510get_digestEPh",
            "cmp r8, 1",
            "ble 0x857b0",
            "mov r4, 1",
            "mov r2, r7",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "add r4, r4, 1",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL3MD510get_digestEPh",
            "cmp r8, r4",
            "bgt 0x85788",
            "ldr ip, [sp, 4]",
            "cmp ip, 0",
            "bne 0x85830",
            "cmp sb, 0",
            "cmpne fp, 0",
            "bne 0x857f4",
            "ldr r2, [sp, 0xc]",
            "cmp r2, sl",
            "bgt 0x8573c",
            "cmp sl, r2",
            "bne 0x8595c",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, sl",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, fp",
            "mov r1, sb",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "ldr r3, [sp, 0x18]",
            "ldr ip, [sp, 0x74]",
            "mov r4, r0",
            "rsb r1, sb, r7",
            "rsb r0, fp, r3",
            "add r0, ip, r0",
            "add r1, r6, r1",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "rsb fp, r4, fp",
            "add sl, sl, r4",
            "b 0x857c8",
            "mov r0, ip",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "ldr r2, [sp, 0x1c]",
            "ldr r3, [sp, 4]",
            "ldr ip, [sp, 0x70]",
            "mov sb, r0",
            "rsb r0, r3, r2",
            "add r0, ip, r0",
            "mov r2, sb",
            "mov r1, r6",
            "bl sym.imp.memcpy",
            "ldr r2, [sp, 4]",
            "add sl, sl, sb",
            "rsb r2, sb, r2",
            "str r2, [sp, 4]",
            "rsb sb, sb, r7",
            "b 0x857bc",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "b 0x85748",
            "ldr ip, [sp, 0x14]",
            "ldr r1, [0x00085994]",
            "mov r0, r4",
            "add r1, ip, r1",
            "mov r2, 0xb",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x85940",
            "mov sl, 0",
            "b 0x857e4",
            "ldr r3, [sp, 0x14]",
            "ldr r1, [0x00085998]",
            "mov r0, r4",
            "add r1, r3, r1",
            "mov r2, 0xb",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "beq 0x85928",
            "ldr r3, [sp, 0x14]",
            "ldr r1, [0x0008599c]",
            "mov r0, r4",
            "add r1, r3, r1",
            "mov r2, 0xb",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0x8588c",
            "mov ip, 0x28",
            "mov r2, 0x10",
            "mov r3, 0x18",
            "str ip, [sp, 0xc]",
            "str r2, [sp, 0x18]",
            "str r3, [sp, 0x1c]",
            "b 0x85710",
            "mov r3, 8",
            "mov ip, 0x10",
            "str r3, [sp, 0x18]",
            "str ip, [sp, 0xc]",
            "str r3, [sp, 0x1c]",
            "b 0x85710",
            "mov ip, 0x10",
            "mov r2, 0x20",
            "str ip, [sp, 0x18]",
            "str r2, [sp, 0xc]",
            "str ip, [sp, 0x1c]",
            "b 0x85710",
            "mov r2, 0x30",
            "mov r3, 0x10",
            "mov ip, 0x20",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x18]",
            "str ip, [sp, 0x1c]",
            "b 0x85710",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x000859a0]",
            "ldr r1, [0x000859a4]",
            "ldr r0, [0x000859a8]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x54",
            "ldr r2, [0x000859ac]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK5yaSSL3MD514get_digestSizeEv": {
        "function_address": "0x0003d198",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe94]!"
        ]
    },
    "rsym._ZN5yaSSL3MD56updateEPKhj": {
        "function_address": "0x0003df60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x564]!"
        ]
    },
    "rsym._ZN5yaSSL3MD510get_digestEPh": {
        "function_address": "0x0003f94c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x41c]!"
        ]
    },
    "sym.yaSSL::Sessions::Flush__": {
        "function_address": "0x00092cbc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 8",
            "add r8, sp, 4",
            "add r1, r0, 0x10",
            "mov r6, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL5Mutex4LockC1ERS0_",
            "ldr sl, [r6]",
            "bl rsym._ZN5yaSSL11lowResTimerEv",
            "cmp sl, 0",
            "mov r7, 0",
            "mov r5, r0",
            "beq 0x92d20",
            "ldr r0, [sl, 8]",
            "ldr r4, [sl, 4]",
            "bl rsym._ZNK5yaSSL11SSL_SESSION9GetBornOnEv",
            "mov sb, r0",
            "ldr r0, [sl, 8]",
            "bl rsym._ZNK5yaSSL11SSL_SESSION10GetTimeOutEv",
            "add r0, r0, sb",
            "cmp r5, r0",
            "bhi 0x92d38",
            "mov sl, r4",
            "cmp sl, 0",
            "bne 0x92cf0",
            "str sl, [r6, 0x28]",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL5Mutex4LockD1Ev",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r0, [sl, 8]",
            "str r7, [sl, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_11SSL_SESSIONEEEvPT_",
            "mov r1, sl",
            "mov r0, r6",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEE5eraseENS4_8iteratorE",
            "mov sl, r4",
            "b 0x92d18"
        ]
    },
    "method.mySTL::pair_int__yaSSL.ClientKeyBase_______mySTL::GetArrayMemory_mySTL::pair_int__yaSSL::ClientKeyBase_________unsigned_int_": {
        "function_address": "0x0008a010",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "lsl r0, r0, 3",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_Public_Decoder::Decode_TaoCrypt::RSA_PublicKey_": {
        "function_address": "0x0009c6e8",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "sub sp, sp, 0x24",
            "mov r6, r1",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "ldr r5, [r3, 0x10]",
            "cmp r5, 0",
            "bne 0x9c79c",
            "add r7, sp, 0x10",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "add r0, r6, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.unpack_dirname": {
        "function_address": "0x0004a32c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x20c",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym.normalize_dirname",
            "ldrb r2, [sp]",
            "ldr r3, [0x0004a484]",
            "cmp r2, 0x7e",
            "mov r4, sp",
            "mov r6, r0",
            "add r3, pc, r3",
            "beq 0x4a374",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym.system_filename",
            "add sp, sp, 0x20c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldrb r2, [sp, 1]",
            "cmp r2, 0x2f",
            "beq 0x4a460",
            "add r7, sp, 1",
            "mov r0, r7",
            "mov r1, 0x2f",
            "bl sym.imp.strchr",
            "subs sl, r0, 0",
            "beq 0x4a474",
            "mov r3, 0",
            "ldrb r7, [sl]",
            "add r0, r4, 1",
            "strb r3, [sl]",
            "bl sym.imp.getpwnam",
            "strb r7, [sl]",
            "mov r8, r0",
            "bl sym.imp.endpwent",
            "cmp r8, 0",
            "beq 0x4a35c",
            "ldr r7, [r8, 0x14]",
            "cmp r7, 0",
            "beq 0x4a35c",
            "rsb r3, sl, r4",
            "add r6, r6, 1",
            "mov r0, r7",
            "add r8, r6, r3",
            "bl sym.imp.strlen",
            "add r3, r0, r8",
            "cmp r3, 0x200",
            "mov r6, r0",
            "bhi 0x4a35c",
            "cmp r0, 0",
            "moveq r0, r4",
            "bne 0x4a440",
            "cmp sl, r0",
            "bhi 0x4a430",
            "add r0, r6, r8",
            "add r0, r4, r0",
            "add r1, sl, r8",
            "mov r2, r8",
            "bl rsym.bmove_upp",
            "mov r1, r7",
            "mov r2, r6",
            "mov r0, r4",
            "ldr r3, [0x0004a488]",
            "bl sym.imp.__memmove_chk",
            "b 0x4a35c",
            "mov r1, sl",
            "mov r2, r8",
            "bl sym.imp.memmove",
            "b 0x4a418",
            "add r3, r7, r6",
            "ldrb r3, [r3, -1]",
            "cmp r3, 0x2f",
            "subeq r6, r6, 1",
            "add r0, r4, r6",
            "cmp sl, r0",
            "bls 0x4a404",
            "b 0x4a430",
            "ldr r2, [0x0004a48c]",
            "add sl, sp, 1",
            "ldr r3, [r3, r2]",
            "ldr r7, [r3]",
            "b 0x4a3c4",
            "mov r0, r7",
            "bl rsym.strend",
            "mov sl, r0",
            "b 0x4a398"
        ]
    },
    "rsym.normalize_dirname": {
        "function_address": "0x0003d924",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x98c]!"
        ]
    },
    "sym.imp.getpwnam": {
        "function_address": "0x0004090c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x99c]!"
        ]
    },
    "sym.imp.endpwent": {
        "function_address": "0x0003fd60",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x164]!"
        ]
    },
    "rsym.bmove_upp": {
        "function_address": "0x0003d810",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa44]!"
        ]
    },
    "sym.TaoCrypt::DH::Initialize_TaoCrypt::Source_": {
        "function_address": "0x000a0bb8",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x000a0bfc]",
            "ldr ip, [0x000a0c00]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "add ip, ip, 8",
            "str ip, [r2, -8]!",
            "mov ip, r0",
            "str r1, [sp, 4]",
            "mov r0, sp",
            "mov r1, ip",
            "bl rsym._ZN8TaoCrypt10DH_Decoder6DecodeERNS_2DHE",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt10DH_Decoder6DecodeERNS_2DHE": {
        "function_address": "0x0003f184",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x94c]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000bacd8",
        "instructions": [
            "push {r4, lr}",
            "ldrb r3, [r0, 0xc]",
            "sub sp, sp, 8",
            "cmp r3, 0",
            "mov r4, r0",
            "bne 0xbad04",
            "str r1, [sp, 4]",
            "str r2, [sp]",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE12KeyInnerHashEv",
            "ldr r2, [sp]",
            "ldr r1, [sp, 4]",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_fopen": {
        "function_address": "0x0004cbac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x0004cd9c]",
            "tst r1, 1",
            "add r4, pc, r4",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov r6, r0",
            "mov sb, r2",
            "beq 0x4ccb8",
            "tst r1, 0x400",
            "movne r3, 0x61",
            "moveq r3, 0x77",
            "add r1, sp, 0x10",
            "strb r3, [r1, -8]!",
            "add r3, r1, 1",
            "mov r2, 0",
            "mov r0, r6",
            "strb r2, [r3]",
            "bl sym.imp.fopen64",
            "subs r7, r0, 0",
            "beq 0x4cd3c",
            "bl sym.imp.fileno",
            "ldr r3, [0x0004cda0]",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3]",
            "cmp r0, r3",
            "bhs 0x4cd0c",
            "ldr r3, [0x0004cda4]",
            "ldr r8, [r4, r3]",
            "mov r0, r8",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x0004cda8]",
            "mov r0, r7",
            "ldr sl, [r4, r3]",
            "ldr r3, [sl]",
            "str r3, [sp, 4]",
            "bl sym.imp.fileno",
            "mov r1, sb",
            "mov fp, r0",
            "mov r0, r6",
            "bl rsym.my_strdup",
            "ldr r3, [sp, 4]",
            "cmp r0, 0",
            "str r0, [r3, fp, lsl 3]",
            "beq 0x4cd78",
            "ldr r3, [0x0004cdac]",
            "mov r0, r7",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x0004cdb0]",
            "ldr ip, [r2]",
            "ldr r3, [r4, r3]",
            "add ip, ip, 1",
            "ldr r1, [r3]",
            "str ip, [r2]",
            "add r1, r1, 1",
            "str r1, [r3]",
            "ldr r4, [sl]",
            "bl sym.imp.fileno",
            "mov r3, 3",
            "add r0, r4, r0, lsl 3",
            "str r3, [r0, 4]",
            "mov r0, r8",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r7",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "tst r1, 2",
            "beq 0x4ccf8",
            "tst r1, 0x240",
            "movne r3, 0x77",
            "strbne r3, [sp, 8]",
            "bne 0x4cce4",
            "tst r1, 0x400",
            "movne r3, 0x61",
            "moveq r3, 0x72",
            "strbne r3, [sp, 8]",
            "strbeq r3, [sp, 8]",
            "mov r3, 0x2b",
            "add r1, sp, 8",
            "strb r3, [sp, 9]",
            "add r3, r1, 2",
            "b 0x4cbe8",
            "add r1, sp, 0x10",
            "mov r3, 0x72",
            "strb r3, [r1, -8]!",
            "add r3, r1, 1",
            "b 0x4cbe8",
            "ldr r3, [0x0004cda4]",
            "ldr r5, [r4, r3]",
            "mov r0, r5",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x0004cdac]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "b 0x4cca8",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "str r3, [r4]",
            "ands r7, sb, 0x19",
            "beq 0x4cca8",
            "cmp r5, 0",
            "moveq r0, 0x1d",
            "movne r0, 1",
            "mov r2, r6",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mov r7, 0",
            "b 0x4cca8",
            "mov r0, r8",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r1, sb",
            "mov r0, r7",
            "bl rsym.my_fclose",
            "bl rsym._my_thread_var",
            "mov r3, 0xc",
            "str r3, [r0]",
            "b 0x4cd50"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::X509__yaSSL::X509_": {
        "function_address": "0x00089d18",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x89d44",
            "add r0, r4, 0x34",
            "bl rsym._ZN5yaSSL12StringHolderD1Ev",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12StringHolderD1Ev",
            "add r0, r4, 0x14",
            "bl rsym._ZN5yaSSL9X509_NAMED1Ev",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL9X509_NAMED1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL12StringHolderD1Ev": {
        "function_address": "0x0003fb14",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2ec]!"
        ]
    },
    "rsym._ZN5yaSSL9X509_NAMED1Ev": {
        "function_address": "0x00040240",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe24]!"
        ]
    },
    "fcn.0007d520": {
        "function_address": "0x0007d520",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d564]",
            "ldr r3, [0x0007d568]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3MD57MD5ImplEEEvPT_",
            "ldr r3, [0x0007d56c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0008af80": {
        "function_address": "0x0008af80",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008afec]",
            "ldr r3, [0x0008aff0]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r5, r0",
            "ldr r0, [r6, 0x28]!",
            "mov r1, 0",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPhE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_S8_S7_",
            "mov r0, r6",
            "bl rsym._ZN5mySTL4listIPhED1Ev",
            "ldr r3, [0x0008aff4]",
            "ldr r0, [0x0008aff8]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008affc]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008b000]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::AES::AES__": {
        "function_address": "0x0007cf5c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007cfa0]",
            "ldr r3, [0x0007cfa4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3AES7AESImplEEEvPT_",
            "ldr r3, [0x0007cfa8]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_b_copy_to_file": {
        "function_address": "0x00055998",
        "instructions": [
            "push {r4, r5, lr}",
            "mov ip, 0",
            "sub sp, sp, 0xc",
            "mov r5, r1",
            "mov r2, 0",
            "mov r1, 1",
            "mov r3, 0",
            "str ip, [sp, 4]",
            "str ip, [sp]",
            "mov r4, r0",
            "bl rsym.reinit_io_cache",
            "cmp r0, 0",
            "bne 0x55a18",
            "ldr r2, [r4, 0x34]",
            "ldr r3, [r4, 0x30]",
            "ldr r2, [r2]",
            "ldr r3, [r3]",
            "rsb r2, r3, r2",
            "ldr r1, [r4, 0x10]",
            "mov r3, 0x14",
            "mov r0, r5",
            "bl rsym.my_fwrite",
            "cmn r0, 1",
            "mov r0, r4",
            "beq 0x55a18",
            "ldr r3, [r4, 0x14]",
            "str r3, [r4, 0x10]",
            "bl rsym.my_b_fill",
            "subs r2, r0, 0",
            "bne 0x559e0",
            "mov r0, r2",
            "b 0x55a1c",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.reinit_io_cache": {
        "function_address": "0x0003e56c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x15c]!"
        ]
    },
    "sym.yaSSL::ServerDHParams::alloc_p_int_": {
        "function_address": "0x0008b110",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0]",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_Signer::Sign_unsigned_char_const__unsigned_char__TaoCrypt::RandomNumberGenerator_": {
        "function_address": "0x000a1518",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "sub sp, sp, 0xd4",
            "ldr r0, [r0]",
            "mov fp, r3",
            "mov r8, r2",
            "str r1, [sp, 0xc]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey10GetModulusEv",
            "mov ip, r0",
            "ldr r0, [r5]",
            "str ip, [sp]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey16GetSubGroupOrderEv",
            "mov r6, r0",
            "ldr r0, [r5]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey20GetSubGroupGeneratorEv",
            "mov r4, r5",
            "str r0, [sp, 8]",
            "ldr r0, [r4], 4",
            "bl rsym._ZNK8TaoCrypt14DSA_PrivateKey14GetPrivatePartEv",
            "add sb, sp, 0x90",
            "add sl, sp, 0xb0",
            "str r0, [sp, 4]",
            "mov r1, 1",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "add r7, sp, 0xa0",
            "mov r1, 1",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "mov r2, sl",
            "mov r0, r7",
            "add sl, sp, 0xc0",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r3, r7",
            "mov r1, fp",
            "mov r2, sb",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERNS_21RandomNumberGeneratorERKS0_S4_",
            "ldr r7, [sp, 0xa4]",
            "ldr r2, [sp, 0xa0]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r7, [sp, 0xb4]",
            "ldr r2, [sp, 0xb0]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r7, [sp, 0x94]",
            "ldr r2, [sp, 0x90]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr ip, [sp]",
            "add r7, sp, 0x80",
            "mov r3, ip",
            "mov r2, sl",
            "mov r0, r7",
            "ldr r1, [sp, 8]",
            "bl rsym._ZN8TaoCrypt13a_exp_b_mod_cERKNS_7IntegerES2_S2_",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x84]",
            "ldr r2, [sp, 0x80]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x10",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r2, r6",
            "mov r0, r7",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "add sb, sp, 0x70",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add fp, sp, 0x60",
            "mov r3, 0",
            "ldr r1, [sp, 0xc]",
            "mov r2, 0x14",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "add r7, sp, 0x50",
            "mov r1, sl",
            "mov r2, r6",
            "mov r0, fp",
            "bl rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_",
            "add sl, sp, 0x40",
            "mov r0, r7",
            "ldr r1, [sp, 4]",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r2, r7",
            "mov r0, sl",
            "mov r1, sb",
            "add r7, sp, 0x30",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r2, sl",
            "mov r1, fp",
            "mov r0, r7",
            "add sl, sp, 0x20",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "add r5, r5, 0x14",
            "mov r2, r6",
            "mov r1, r7",
            "mov r0, sl",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sl",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r6, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x44]",
            "ldr r2, [sp, 0x40]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x54]",
            "ldr r2, [sp, 0x50]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "ldr r6, [0x000a18b8]",
            "cmp r0, 0",
            "add r6, pc, r6",
            "bne 0xa1894",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "subs r7, r0, 0",
            "bne 0xa1894",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "cmp r0, 0x13",
            "strbeq r7, [r8], 1",
            "mov r6, r0",
            "mov r1, r8",
            "mov r3, 0",
            "mov r2, r6",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "cmp r0, 0x13",
            "moveq r3, 0",
            "strbeq r3, [r8, r6]",
            "addeq r8, r8, 1",
            "mov r3, 0",
            "mov r2, r0",
            "add r1, r8, r6",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "ldr r4, [sp, 0x64]",
            "ldr r2, [sp, 0x60]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x74]",
            "ldr r2, [sp, 0x70]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0xc4]",
            "ldr r2, [sp, 0xc0]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, 0x28",
            "add sp, sp, 0xd4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000a18bc]",
            "ldr r1, [0x000a18c0]",
            "ldr r0, [0x000a18c4]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x58",
            "mov r2, 0xba",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZNK8TaoCrypt13DSA_PublicKey10GetModulusEv": {
        "function_address": "0x0003db4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x81c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt13DSA_PublicKey16GetSubGroupOrderEv": {
        "function_address": "0x0003da38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x8d4]!"
        ]
    },
    "rsym._ZNK8TaoCrypt13DSA_PublicKey20GetSubGroupGeneratorEv": {
        "function_address": "0x0003ff94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfec]!"
        ]
    },
    "rsym._ZNK8TaoCrypt14DSA_PrivateKey14GetPrivatePartEv": {
        "function_address": "0x0003e170",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x404]!"
        ]
    },
    "sym.TaoCrypt::FileSource::get_TaoCrypt::Source_": {
        "function_address": "0x000a1f04",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "sub sp, sp, 8",
            "mov r1, 0",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt10FileSource4sizeEb",
            "ldr r2, [r5]",
            "mov r4, r0",
            "cmp r0, r2",
            "bls 0xa1f60",
            "ldr r1, [r5, 4]",
            "mov r3, r0",
            "mov ip, 1",
            "add r0, r5, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r2, [r5]",
            "str r0, [r5, 4]",
            "mov r1, 0",
            "add r0, r0, r2",
            "rsb r2, r2, r4",
            "bl sym.imp.memset",
            "str r4, [r5]",
            "ldr r0, [r5, 4]",
            "ldr r3, [r6]",
            "mov r1, 1",
            "mov r2, r4",
            "bl sym.imp.fread",
            "cmp r0, 1",
            "moveq r0, r4",
            "movne r0, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt10FileSource4sizeEb": {
        "function_address": "0x0003f7d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x514]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::Final_unsigned_char_": {
        "function_address": "0x000bae4c",
        "instructions": [
            "ldrb r3, [r0, 0xc]",
            "push {r4, r5, r6, lr}",
            "cmp r3, 0",
            "mov r4, r0",
            "mov r6, r1",
            "bleq rsym._ZN8TaoCrypt4HMACINS_3SHAEE12KeyInnerHashEv",
            "add r5, r4, 0x10",
            "ldr r1, [r4, 8]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r0, r5",
            "ldr r1, [r4, 4]",
            "mov r2, 0x40",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r2, 0x14",
            "ldr r1, [r4, 8]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "mov r3, 0",
            "strb r3, [r4, 0xc]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_rpl_probe": {
        "function_address": "0x00045a2c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [0x00045b2c]",
            "ldr r1, [0x00045b30]",
            "add r3, pc, r3",
            "sub sp, sp, 0xc",
            "add r1, r3, r1",
            "mov r4, r0",
            "bl rsym.mysql_query",
            "subs r6, r0, 0",
            "bne 0x45aac",
            "mov r0, r4",
            "bl rsym.mysql_store_result",
            "subs r5, r0, 0",
            "beq 0x45aac",
            "bl rsym.mysql_fetch_row",
            "subs r7, r0, 0",
            "beq 0x45a88",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "beq 0x45a88",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x45acc",
            "str r4, [r4, 0x39c]",
            "mov r0, r4",
            "bl fcn.0004588c",
            "cmp r0, 0",
            "beq 0x45b24",
            "mov r4, 1",
            "mov r0, r5",
            "bl rsym.mysql_free_result",
            "b 0x45abc",
            "mov r0, r4",
            "ldr r1, [0x00045b34]",
            "bl fcn.00044ecc",
            "mov r4, 1",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym.mysql_num_fields",
            "cmp r0, 2",
            "bls 0x45a9c",
            "ldr r0, [r7, 8]",
            "mov r1, r6",
            "mov r2, 0xa",
            "ldr r7, [r7]",
            "bl sym.imp.strtol",
            "mov r1, r7",
            "mov r2, r0",
            "mov r3, r6",
            "mov r0, r4",
            "str r6, [sp]",
            "bl fcn.00044fa0",
            "cmp r0, 0",
            "beq 0x45a9c",
            "str r0, [r4, 0x39c]",
            "mov r0, r4",
            "bl fcn.0004588c",
            "cmp r0, 0",
            "bne 0x45a9c",
            "mov r4, 0",
            "b 0x45aa0"
        ]
    },
    "rsym.mysql_fetch_row": {
        "function_address": "0x0003dcf0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x704]!"
        ]
    },
    "fcn.0004588c": {
        "function_address": "0x0004588c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [r0]",
            "ldr r5, [0x00045a1c]",
            "cmp ip, 0",
            "sub sp, sp, 0x10",
            "mov r4, r0",
            "add r5, pc, r5",
            "beq 0x459e0",
            "ldr r1, [0x00045a20]",
            "mov r3, 1",
            "strb r3, [r4, 0x385]",
            "add r1, r5, r1",
            "mov r0, r4",
            "bl rsym.mysql_query",
            "cmp r0, 0",
            "bne 0x45900",
            "mov r0, r4",
            "bl rsym.mysql_store_result",
            "subs r5, r0, 0",
            "beq 0x45900",
            "bl rsym.mysql_num_fields",
            "cmp r0, 5",
            "beq 0x45960",
            "cmp r0, 7",
            "beq 0x459c0",
            "mov r4, 1",
            "mov r0, r5",
            "bl rsym.mysql_free_result",
            "b 0x45910",
            "mov r0, r4",
            "ldr r1, [0x00045a24]",
            "bl fcn.00044ecc",
            "mov r4, 1",
            "mov r0, r4",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r0, [r3, 8]",
            "ldr r8, [r3, 4]",
            "ldr r7, [r4, 0x274]",
            "ldr r6, [r4, 0x278]",
            "bl sym.imp.strtol",
            "mov r1, r8",
            "mov r2, r0",
            "mov r3, r7",
            "mov r0, r4",
            "str r6, [sp]",
            "bl fcn.00044fa0",
            "cmp r0, 0",
            "beq 0x458f0",
            "ldr r3, [r4, 0x3a0]",
            "str r3, [r0, 0x3a0]",
            "str r0, [r4, 0x3a0]",
            "mov r0, r5",
            "bl rsym.mysql_fetch_row",
            "subs r3, r0, 0",
            "mov r1, 0",
            "mov r2, 0xa",
            "bne 0x45920",
            "mov r4, 0",
            "b 0x458f4",
            "ldr r0, [r3, 0x10]",
            "ldr r8, [r3, 4]",
            "ldr r6, [r3, 0xc]",
            "ldr r7, [r3, 8]",
            "bl sym.imp.strtol",
            "mov r1, r8",
            "mov r2, r0",
            "mov r3, r7",
            "mov r0, r4",
            "str r6, [sp]",
            "bl fcn.00044fa0",
            "cmp r0, 0",
            "beq 0x458f0",
            "ldr r3, [r4, 0x3a0]",
            "str r3, [r0, 0x3a0]",
            "str r0, [r4, 0x3a0]",
            "mov r0, r5",
            "bl rsym.mysql_fetch_row",
            "subs r3, r0, 0",
            "mov r1, 0",
            "mov r2, 0xa",
            "bne 0x45980",
            "mov r4, 0",
            "b 0x458f4",
            "mov r1, ip",
            "mov r2, ip",
            "mov r3, ip",
            "str ip, [sp]",
            "str ip, [sp, 4]",
            "str ip, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl rsym.mysql_real_connect",
            "cmp r0, 0",
            "bne 0x458ac",
            "mov r0, r4",
            "ldr r1, [0x00045a28]",
            "bl fcn.00044ecc",
            "mov r4, 1",
            "b 0x45910"
        ]
    },
    "fcn.00044ecc": {
        "function_address": "0x00044ecc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r5, [0x00044f3c]",
            "sub sp, sp, 0x204",
            "add r6, r0, 0x5f",
            "mov r8, r1",
            "mov r7, r0",
            "mov r2, r5",
            "mov r1, r6",
            "ldr r4, fcn.00162f0c",
            "mov r0, sp",
            "bl rsym.strmake",
            "ldr r3, [0x00044f44]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "sub r2, r8, 0x7d0",
            "ldr r1, [r3, r2, lsl 2]",
            "mov r0, r6",
            "mov r2, r5",
            "bl rsym.strmake",
            "rsb r2, r6, r0",
            "rsb r2, r2, r5",
            "mov r1, sp",
            "bl rsym.strmake",
            "mov sl, sp",
            "str r8, [r7, 0x58]",
            "add sp, sp, 0x204",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym.mysql_num_fields": {
        "function_address": "0x0003d168",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xeb4]!"
        ]
    },
    "sym.yaSSL::CreateData__": {
        "function_address": "0x0008b3b0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL4DataC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL4DataC1Ev": {
        "function_address": "0x0003f2b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x884]!"
        ]
    },
    "sym.mySTL::list_unsigned_char_::list__": {
        "function_address": "0x00087158",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x87174",
            "b 0x87184",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x87170",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_memdup": {
        "function_address": "0x00048c10",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r0",
            "mov r1, r2",
            "mov r0, r4",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "movne r1, r6",
            "movne r2, r4",
            "blne sym.imp.memcpy",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.new_VioSSLAcceptorFd": {
        "function_address": "0x0007a95c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "mov r7, r1",
            "mov r6, r2",
            "mov r5, r3",
            "bl rsym.yaTLSv1_server_method",
            "ldr ip, [sp, 0x28]",
            "str r0, [sp, 4]",
            "str ip, [sp]",
            "ldr ip, [sp, 0x2c]",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r5",
            "str ip, [sp, 8]",
            "bl fcn.0007a64c",
            "subs r4, r0, 0",
            "beq 0x7a9d4",
            "mov r1, 0x80",
            "ldr r0, [r4]",
            "bl rsym.yaSSL_CTX_sess_set_cache_size",
            "ldr r0, [r4]",
            "mov r1, 5",
            "mov r2, 0",
            "bl rsym.yaSSL_CTX_set_verify",
            "ldr r0, [r4]",
            "mov r1, r4",
            "mov r2, 4",
            "bl rsym.yaSSL_CTX_set_session_id_context",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.yaTLSv1_server_method": {
        "function_address": "0x0003e854",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf6c]!"
        ]
    },
    "rsym.yaSSL_CTX_sess_set_cache_size": {
        "function_address": "0x0003f5b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x684]!"
        ]
    },
    "rsym.yaSSL_CTX_set_session_id_context": {
        "function_address": "0x0003d510",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc44]!"
        ]
    },
    "sym.my_getwd": {
        "function_address": "0x00049d84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00049e64]",
            "subs r3, r1, 0",
            "add r4, pc, r4",
            "sub sp, sp, 8",
            "mov r6, r0",
            "beq 0x49dd4",
            "ldr r5, [0x00049e68]",
            "ldr r1, [r4, r5]",
            "ldrb ip, [r1]",
            "cmp ip, 0",
            "beq 0x49dcc",
            "sub r2, r3, 1",
            "bl rsym.strmake",
            "mov r0, 0",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "cmp r3, 1",
            "bhi 0x49ddc",
            "mvn r0, 0",
            "b 0x49dc0",
            "sub r1, r3, 2",
            "str r2, [sp, 4]",
            "bl sym.imp.getcwd",
            "cmp r0, 0",
            "ldr r2, [sp, 4]",
            "beq 0x49e2c",
            "mov r0, r6",
            "bl rsym.strend",
            "ldrb r3, [r0, -1]",
            "mov r1, r6",
            "cmp r3, 0x2f",
            "movne r3, 0",
            "strbne r3, [r0, 1]",
            "movne r3, 0x2f",
            "strbne r3, [r0]",
            "ldr r2, [0x00049e6c]",
            "ldr r0, [r4, r5]",
            "bl rsym.strmake",
            "mov r0, 0",
            "b 0x49dc0",
            "tst r2, 0x10",
            "beq 0x49df4",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "mov r3, r0",
            "str r2, [r4]",
            "mov r0, 0x10",
            "ldr r2, [r3]",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mvn r0, 0",
            "b 0x49dc0"
        ]
    },
    "sym.imp.getcwd": {
        "function_address": "0x0003f91c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x43c]!"
        ]
    },
    "sym.init_io_cache": {
        "function_address": "0x00053d38",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r1, [r4, 0x88]",
            "sub sp, sp, 0x2c",
            "str r5, [r0, 0x64]",
            "str r5, [r0, 0x6c]",
            "str r5, [r0, 0x68]",
            "str r5, [r0, 0x70]",
            "str r5, [r0, 0x78]",
            "strb r5, [r0, 0xa0]",
            "str r5, [r0, 0x18]",
            "str r5, [r0, 0x8c]",
            "mov sb, r1",
            "cmp r1, 0",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "stm r4, {r0, r1}",
            "ldr sl, [0x000541d0]",
            "mov r8, r2",
            "add sl, pc, sl",
            "mov r7, r3",
            "ldr ip, [sp, 0x5c]",
            "ldrb r6, [sp, 0x58]",
            "blt 0x53dd8",
            "mov r0, sb",
            "mov r1, r5",
            "str ip, [sp, 0xc]",
            "bl rsym.my_tell",
            "cmn r0, 1",
            "mov fp, r0",
            "ldr ip, [sp, 0xc]",
            "beq 0x54128",
            "ldr r2, [sp, 0x50]",
            "mov r3, 0",
            "cmp r2, fp",
            "str r3, [r4, 0x8c]",
            "beq 0x54164",
            "mov r3, 1",
            "str r3, [r4, 0x8c]",
            "mov r3, 0",
            "cmp r8, 0",
            "str r3, [r4, 0x58]",
            "str r3, [r4, 0x74]",
            "bne 0x53e04",
            "ldr r3, [0x000541d4]",
            "ldr r3, [sl, r3]",
            "ldr r8, [r3]",
            "cmp r8, 0",
            "moveq r0, 1",
            "beq 0x53f5c",
            "cmp r6, 0",
            "ldr r3, [0x000541d8]",
            "ldr r6, [0x000541dc]",
            "ldr fp, [0x000541e0]",
            "moveq r6, r3",
            "ldr r3, [0x000541e4]",
            "movne r5, 0x4000",
            "moveq r5, 0x2000",
            "moveq fp, r3",
            "cmp r7, 3",
            "movne r0, 0",
            "moveq r0, 1",
            "cmp r7, 3",
            "cmpne r7, 1",
            "str r0, [sp, 0x20]",
            "beq 0x53f68",
            "mvn r0, 0",
            "mvn r1, 0",
            "str r0, [sp, 0x18]",
            "str r1, [sp, 0x1c]",
            "sub r3, r7, 5",
            "bic r1, ip, 0x80",
            "cmp r3, 1",
            "str r1, [sp, 0x24]",
            "bls 0x54104",
            "ldr r2, [sp, 0x20]",
            "add r8, r8, fp",
            "cmp r2, 0",
            "and r8, r8, r6",
            "bic sb, ip, 0xb0",
            "bne 0x54028",
            "orr fp, sb, 0x10",
            "b 0x53e98",
            "cmp r5, r8",
            "beq 0x540fc",
            "add r8, r8, r8, lsl 1",
            "and r8, r6, r8, lsr 2",
            "cmp r8, r5",
            "movlo r8, r5",
            "cmp r5, r8",
            "moveq r1, fp",
            "movne r1, sb",
            "mov r0, r8",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r4, 0x18]",
            "mov r3, r0",
            "beq 0x53e88",
            "ldr r1, [sp, 0x24]",
            "cmp r7, 2",
            "bic r2, r1, 6",
            "mov r1, 1",
            "strb r1, [r4, 0xa0]",
            "str r2, [r4, 0x9c]",
            "str r0, [r4, 0x20]",
            "str r8, [r4, 0x94]",
            "str r8, [r4, 0x98]",
            "str r0, [r4, 0x28]",
            "str r0, [r4, 0x10]",
            "str r0, [r4, 0x1c]",
            "bne 0x540c8",
            "ldr r1, [sp, 0x50]",
            "lsl r3, r1, 0x14",
            "lsr r3, r3, 0x14",
            "rsb r3, r3, r8",
            "add r0, r0, r3",
            "str r0, [r4, 0x2c]",
            "add r3, sp, 0x18",
            "ldm r3, {r2, r3}",
            "str r2, [r4, 8]",
            "str r3, [r4, 0xc]",
            "mov r3, 0",
            "str r3, [r4, 0x90]",
            "str r7, [r4, 0x64]",
            "ldr r3, [r4, 0x58]",
            "cmp r3, 0",
            "beq 0x541c4",
            "ldr r3, [0x000541e8]",
            "ldr r3, [sl, r3]",
            "str r3, [r4, 0x5c]",
            "ldr r3, [0x000541ec]",
            "ldr r3, [sl, r3]",
            "str r3, [r4, 0x60]",
            "mov r0, r4",
            "bl rsym.setup_io_cache",
            "mov r0, 0",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ands r1, ip, 0x80",
            "str r1, [sp, 0x18]",
            "bne 0x53e44",
            "mov r1, 2",
            "str r1, [sp]",
            "ldr r1, [sp, 0x18]",
            "mov r2, 0",
            "mov r3, 0",
            "mov r0, sb",
            "str ip, [sp, 0xc]",
            "str r1, [sp, 4]",
            "bl rsym.my_seek",
            "ldr r2, [sp, 0x50]",
            "ldr r3, [sp, 0x18]",
            "cmp r2, r0",
            "str r3, [r4, 0x8c]",
            "ldr ip, [sp, 0xc]",
            "beq 0x541b4",
            "mov r3, 1",
            "str r3, [r4, 0x8c]",
            "mov r2, r0",
            "ldr r0, [sp, 0x54]",
            "mov r3, r1",
            "cmp r0, r1",
            "str r2, [sp, 0x18]",
            "str r3, [sp, 0x1c]",
            "bhi 0x541a0",
            "beq 0x54194",
            "ldr r2, [0x000541e4]",
            "mov r3, 0",
            "add r1, sp, 0x50",
            "ldm r1, {r0, r1}",
            "subs r2, r2, r0",
            "sbc r3, r3, r1",
            "add r1, sp, 0x18",
            "ldm r1, {r0, r1}",
            "adds r2, r2, r0",
            "adc r3, r3, r1",
            "cmp r3, 0",
            "bne 0x53e54",
            "cmp r8, r2",
            "bls 0x53e54",
            "ldr r1, [sp, 0x50]",
            "ldr r2, [sp, 0x18]",
            "rsb r8, r1, 0x1fc0",
            "add r8, r8, 0x3f",
            "add r8, r8, r2",
            "b 0x53e54",
            "orr r3, sb, 0x10",
            "str r7, [sp, 0x14]",
            "mov fp, r3",
            "b 0x54048",
            "cmp r5, r8",
            "beq 0x540fc",
            "add r8, r7, r8",
            "and r8, r6, r8, lsr 2",
            "cmp r8, r5",
            "movlo r8, r5",
            "cmp r5, r8",
            "lsl r7, r8, 1",
            "moveq r1, fp",
            "movne r1, sb",
            "mov r0, r7",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r4, 0x18]",
            "beq 0x54038",
            "ldr ip, [sp, 0x24]",
            "add r3, r0, r8",
            "ldr r7, [sp, 0x14]",
            "add r2, r3, r8",
            "str r3, [r4, 0x20]",
            "str r3, [r4, 0x28]",
            "str r3, [r4, 0x24]",
            "ldr r3, [0x000541f0]",
            "bic r1, ip, 6",
            "mov ip, 1",
            "str r1, [r4, 0x9c]",
            "str r0, [r4, 0x1c]",
            "str r0, [r4, 0x10]",
            "ldr r1, [sl, r3]",
            "strb ip, [r4, 0xa0]",
            "str r2, [r4, 0x2c]",
            "str r8, [r4, 0x94]",
            "str r8, [r4, 0x98]",
            "add r0, r4, 0x38",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [r4, 0x18]",
            "mov r2, 0",
            "str r3, [r4, 0x14]",
            "cmp r7, 3",
            "add r1, sp, 0x18",
            "ldm r1, {r0, r1}",
            "str r2, [r4, 0x90]",
            "str r0, [r4, 8]",
            "str r1, [r4, 0xc]",
            "str r7, [r4, 0x64]",
            "beq 0x54174",
            "cmp r7, 5",
            "bne 0x53f2c",
            "b 0x53f50",
            "mov r0, 2",
            "b 0x53f5c",
            "ldr r3, [r4, 0x18]",
            "bic ip, ip, 0x86",
            "str r8, [r4, 0x98]",
            "str ip, [r4, 0x9c]",
            "str r8, [r4, 0x94]",
            "str r3, [r4, 0x28]",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0x1c]",
            "b 0x540c8",
            "cmn r1, 1",
            "bne 0x53dbc",
            "str r1, [sp, 0x10]",
            "bl rsym._my_thread_var",
            "ldr r3, [r0]",
            "ldr r1, [sp, 0x10]",
            "cmp r3, 0x1d",
            "ldr ip, [sp, 0xc]",
            "streq r5, [r4, 0x8c]",
            "beq 0x53dd8",
            "ldr r2, [sp, 0x50]",
            "mov r3, 0",
            "cmp r2, fp",
            "str r3, [r4, 0x8c]",
            "bne 0x53dd0",
            "ldr r3, [sp, 0x54]",
            "cmp r3, r1",
            "bne 0x53dd0",
            "b 0x53dd8",
            "ldr r3, [0x000541f4]",
            "mov r0, r4",
            "ldr r3, [sl, r3]",
            "str r2, [r4, 0x60]",
            "str r3, [r4, 0x5c]",
            "bl rsym.setup_io_cache",
            "mov r0, 0",
            "b 0x53f5c",
            "ldr r1, [sp, 0x50]",
            "cmp r1, r2",
            "bls 0x53fd8",
            "add r3, sp, 0x50",
            "ldm r3, {r2, r3}",
            "str r2, [sp, 0x18]",
            "str r3, [sp, 0x1c]",
            "b 0x53fd8",
            "ldr r2, [sp, 0x54]",
            "cmp r2, r1",
            "bne 0x53fb0",
            "b 0x53fb8",
            "ldr r3, [0x000541f8]",
            "ldr r3, [sl, r3]",
            "b 0x53f40"
        ]
    },
    "rsym.my_tell": {
        "function_address": "0x0004021c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xe3c]!"
        ]
    },
    "sym.mySTL::list_yaSSL::ThreadError_::erase_mySTL::list_yaSSL::ThreadError_::iterator_": {
        "function_address": "0x00089954",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x899ac",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x899c0",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x899b4",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE8pop_backEv",
            "mov r0, 1",
            "b 0x899ac",
            "bl rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE9pop_frontEv",
            "mov r0, 1",
            "b 0x899ac"
        ]
    },
    "rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE8pop_backEv": {
        "function_address": "0x0003f9e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3b4]!"
        ]
    },
    "rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEE9pop_frontEv": {
        "function_address": "0x00040990",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x944]!"
        ]
    },
    "sym.TaoCrypt::MD5::operator_TaoCrypt::MD5_const_": {
        "function_address": "0x000afa4c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt3MD5C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt3MD54SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3MD54SwapERS0_": {
        "function_address": "0x0003cbd4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x26c]!"
        ]
    },
    "method.TaoCrypt::MontgomeryRepresentation.SimultaneousExponentiate_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const__unsigned_int__const": {
        "function_address": "0x000ad1dc",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "ldr ip, [sp, 0x10]",
            "str ip, [sp]",
            "bl rsym._ZNK8TaoCrypt12AbstractRing24SimultaneousExponentiateEPNS_7IntegerERKS1_PS3_j",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.get_charset_number": {
        "function_address": "0x00051078",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x00051124]",
            "mov r8, r0",
            "mov r7, r1",
            "ldr r0, [0x00051128]",
            "ldr r1, [0x0005112c]",
            "add r5, pc, r5",
            "ldr r6, [0x00051130]",
            "add r0, r5, r0",
            "add r1, r5, r1",
            "bl sym.imp.pthread_once",
            "ldr r4, [r5, r6]",
            "ldr sl, [0x00051134]",
            "b 0x510c4",
            "ldr r3, [r5, r6]",
            "add r4, r4, 4",
            "add r3, r3, 0x3fc",
            "cmp r4, r3",
            "bhs 0x51118",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "beq 0x510b0",
            "ldr r1, [r3, 0x10]",
            "cmp r1, 0",
            "beq 0x510b0",
            "ldr r3, [r3, 0xc]",
            "tst r7, r3",
            "beq 0x510b0",
            "ldr r3, [r5, sl]",
            "mov r2, r8",
            "mov r0, r3",
            "ldr r3, [r3, 0x68]",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x510b0",
            "ldr r3, [r4]",
            "ldr r0, [r3]",
            "b 0x5111c",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_Private_Decoder::ReadHeader__": {
        "function_address": "0x0009b134",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt11BER_Decoder10GetVersionEv"
        ]
    },
    "sym.yaSSL::SSL::isTLS___const": {
        "function_address": "0x00091bb4",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r0, [r0, 0x12a]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_cleanup_options": {
        "function_address": "0x00059a14",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r2, [r0]",
            "ldr r3, [0x00059b20]",
            "cmp r2, 0",
            "add r3, pc, r3",
            "beq 0x59b00",
            "ldr r7, [0x00059b24]",
            "ldr r6, [0x00059b28]",
            "mov r4, r0",
            "add r7, r3, r7",
            "add r6, r3, r6",
            "mov r5, 0",
            "b 0x59a9c",
            "ldr r3, [r4, 0x18]",
            "and r2, r3, 0x7f",
            "cmp r2, 0xa",
            "mov r2, r3",
            "beq 0x59b08",
            "ldr r8, [r4, 0xc]",
            "cmp r8, 0",
            "moveq r2, r3",
            "beq 0x59a88",
            "and r3, r3, 0x7f",
            "cmp r3, 0xa",
            "bne 0x59a88",
            "ldr r0, [r8]",
            "bl rsym.my_no_flags_free",
            "str r5, [r8]",
            "ldr r2, [r4, 0x18]",
            "tst r2, 0x80",
            "bne 0x59ab4",
            "ldr r3, [r4, 0x48]!",
            "cmp r3, 0",
            "beq 0x59b00",
            "ldr r8, [r4, 0x10]",
            "cmp r8, 0",
            "bne 0x59a48",
            "ldr r3, [r4, 0x18]",
            "mov r2, r3",
            "b 0x59a5c",
            "mov r1, 0",
            "mov r0, r7",
            "mov r2, r4",
            "mov r3, r1",
            "ldr ip, [r6]",
            "mov lr, pc",
            "bx ip",
            "subs r8, r0, 0",
            "beq 0x59a90",
            "ldr r3, [r4, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 0xa",
            "bne 0x59a90",
            "ldr r0, [r8]",
            "bl rsym.my_no_flags_free",
            "str r5, [r8]",
            "ldr r3, [r4, 0x48]!",
            "cmp r3, 0",
            "bne 0x59a9c",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r0, [r8]",
            "bl rsym.my_no_flags_free",
            "str r5, [r8]",
            "ldr r3, [r4, 0x18]",
            "mov r2, r3",
            "b 0x59a5c"
        ]
    },
    "sym.yaSSL::CreateServerHelloDone__": {
        "function_address": "0x0008b30c",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL15ServerHelloDoneC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL15ServerHelloDoneC1Ev": {
        "function_address": "0x0003dedc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5bc]!"
        ]
    },
    "fcn.0008aee0": {
        "function_address": "0x0008aee0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008af24]",
            "ldr r3, [0x0008af28]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ClientKeyBaseEEEvPT_",
            "ldr r3, [0x0008af2c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_wildcmp_bin": {
        "function_address": "0x0005f4c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "ldr r4, [sp, 0x40]",
            "mov sl, r0",
            "cmp r3, r4",
            "mov r5, r2",
            "ldr r8, [sp, 0x44]",
            "ldr r6, [sp, 0x48]",
            "ldr r7, [sp, 0x4c]",
            "beq 0x5f5b0",
            "ldrb r2, [r3]",
            "mvn r0, 0",
            "cmp r2, r7",
            "beq 0x5f54c",
            "cmp r2, r6",
            "beq 0x5f5c4",
            "cmp r2, r8",
            "beq 0x5f594",
            "cmp r1, r5",
            "mov r2, r3",
            "beq 0x5f5a8",
            "ldrb r0, [r2]",
            "ldrb r3, [r1]",
            "cmp r0, r3",
            "bne 0x5f5a8",
            "add r3, r2, 1",
            "cmp r3, r4",
            "add r1, r1, 1",
            "beq 0x5f5b0",
            "ldrb r2, [r2, 1]",
            "mov r0, 1",
            "cmp r2, r7",
            "bne 0x5f500",
            "cmp r7, r6",
            "beq 0x5f5c4",
            "add r3, r3, 1",
            "cmp r4, r3",
            "beq 0x5f58c",
            "ldrb sb, [r3]",
            "cmp sb, r7",
            "beq 0x5f554",
            "cmp r6, sb",
            "bne 0x5f61c",
            "cmp r1, r5",
            "beq 0x5f66c",
            "add r3, r3, 1",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bne 0x5f560",
            "mov r0, 0",
            "b 0x5f5b8",
            "add r2, r3, 1",
            "cmp r2, r4",
            "beq 0x5f510",
            "cmp r1, r5",
            "bne 0x5f51c",
            "mov r0, 1",
            "b 0x5f5b8",
            "subs r0, r1, r5",
            "movne r0, 1",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r5, r1",
            "beq 0x5f5b8",
            "add r3, r3, 1",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bhi 0x5f5f8",
            "b 0x5f604",
            "cmp r5, r1",
            "add r3, r3, 1",
            "beq 0x5f5b8",
            "cmp r4, r3",
            "add r1, r1, 1",
            "bls 0x5f604",
            "ldrb r2, [r3]",
            "cmp r6, r2",
            "beq 0x5f5e0",
            "cmp r3, r4",
            "beq 0x5f5b0",
            "ldrb r2, [r3]",
            "cmp r2, r7",
            "bne 0x5f4f8",
            "b 0x5f554",
            "cmp r3, r4",
            "beq 0x5f58c",
            "cmp r1, r5",
            "beq 0x5f66c",
            "cmp r8, sb",
            "addne ip, r3, 1",
            "bne 0x5f64c",
            "add ip, r3, 1",
            "cmp ip, r4",
            "ldrbne sb, [r3, 1]",
            "moveq ip, r4",
            "addne ip, ip, 1",
            "add fp, r1, 1",
            "ldrb r3, [fp, -1]",
            "mov r2, fp",
            "cmp r3, sb",
            "beq 0x5f674",
            "cmp r5, r2",
            "add fp, fp, 1",
            "bne 0x5f650",
            "mvn r0, 0",
            "b 0x5f5b8",
            "mov r3, ip",
            "mov r1, fp",
            "mov r0, sl",
            "mov r2, r5",
            "str ip, [sp, 0x14]",
            "stm sp, {r4, r8}",
            "str r6, [sp, 8]",
            "str r7, [sp, 0xc]",
            "bl rsym.my_wildcmp_bin",
            "cmp r0, 0",
            "ldr ip, [sp, 0x14]",
            "ble 0x5f5b8",
            "cmp fp, r5",
            "beq 0x5f66c",
            "ldrb r3, [ip]",
            "add fp, fp, 1",
            "cmp r3, r7",
            "bne 0x5f650",
            "mvn r0, 0",
            "b 0x5f5b8"
        ]
    },
    "rsym.my_wildcmp_bin": {
        "function_address": "0x0003f22c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8dc]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::RandomPool::RandomImpl__yaSSL::RandomPool::RandomImpl_": {
        "function_address": "0x00080ed8",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN8TaoCrypt7OS_SeedD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7OS_SeedD1Ev": {
        "function_address": "0x0003e26c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x35c]!"
        ]
    },
    "sym.yaSSL::buildFinished_yaSSL::SSL__yaSSL::Finished__unsigned_char_const_": {
        "function_address": "0x00082bb4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14c",
            "str r2, [sp, 0x30]",
            "str r1, [sp, 0x38]",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes7get_MD5Ev",
            "add r8, sp, 0x140",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3MD5C1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getHashesEv",
            "bl rsym._ZNK5yaSSL9sslHashes7get_SHAEv",
            "add r7, sp, 0x138",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHAC1ERKS0_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr sl, [0x00082f54]",
            "cmp r0, 0",
            "add sl, pc, sl",
            "bne 0x82e98",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r6, sp, 0xb0",
            "mov r2, 4",
            "add r0, r0, 4",
            "ldr fp, [0x00082f58]",
            "add r3, r6, r2",
            "str r0, [sp, 0x1c]",
            "ldr r1, [sp, 0x30]",
            "mov r0, r6",
            "str r3, [sp, 0x3c]",
            "add fp, sl, fp",
            "bl sym.imp.memcpy",
            "ldr r1, [sp, 0x1c]",
            "mov r2, 0x30",
            "ldr r0, [sp, 0x3c]",
            "bl sym.imp.memcpy",
            "add ip, r6, 0x34",
            "add r3, fp, 0x54",
            "mov sb, ip",
            "mov sl, r3",
            "str r3, [sp, 0x24]",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm sb!, {r0, r1, r2, r3}",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm sb!, {r0, r1, r2, r3}",
            "ldm sl, {r0, r1, r2, r3}",
            "stm sb, {r0, r1, r2, r3}",
            "mov r0, r4",
            "str ip, [sp, 0x20]",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "add ip, sp, 0x114",
            "str ip, [sp, 0x34]",
            "mov r2, r6",
            "ldr ip, [r0]",
            "mov r3, 0x64",
            "ldr r1, [sp, 0x34]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add r5, sp, 0x40",
            "mov r2, 0x30",
            "add r3, r5, r2",
            "add fp, fp, 0x84",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r5",
            "str fp, [sp, 0x2c]",
            "str r3, [sp, 0x28]",
            "bl sym.imp.memcpy",
            "ldr fp, [sp, 0x2c]",
            "ldr ip, [sp, 0x28]",
            "ldm fp!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r1, [sp, 0x34]",
            "mov r2, 0x10",
            "add r0, r5, 0x60",
            "str ip, [sp, 0x1c]",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "ldr r2, [r0]",
            "mov r3, r0",
            "ldr ip, [r2, 4]",
            "ldr r0, [sp, 0x38]",
            "str r3, [sp, 0x18]",
            "str ip, [sp, 0x14]",
            "bl rsym._ZN5yaSSL8Finished7set_md5Ev",
            "ldr r3, [sp, 0x18]",
            "ldr ip, [sp, 0x14]",
            "mov r1, r0",
            "mov r2, r5",
            "mov r0, r3",
            "mov r3, 0x70",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r0, r0, 4",
            "ldr r1, [sp, 0x30]",
            "mov r2, 4",
            "str r0, [sp, 0x30]",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "ldr r1, [sp, 0x30]",
            "mov r2, 0x30",
            "ldr r0, [sp, 0x3c]",
            "bl sym.imp.memcpy",
            "ldr lr, [sp, 0x24]",
            "ldr ip, [sp, 0x20]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm sl, {r0, r1}",
            "stm sb, {r0, r1}",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r2, r6",
            "ldr ip, [r0]",
            "mov r3, 0x5c",
            "ldr r1, [sp, 0x34]",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [sp, 0x30]",
            "mov r2, 0x30",
            "mov r0, r5",
            "bl sym.imp.memcpy",
            "ldr lr, [sp, 0x2c]",
            "ldr ip, [sp, 0x28]",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm fp, {r0, r1}",
            "ldr r3, [sp, 0x1c]",
            "mov r2, 0x14",
            "stm r3, {r0, r1}",
            "ldr r1, [sp, 0x34]",
            "add r0, r5, 0x58",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "ldr r3, [r0]",
            "mov sl, r0",
            "ldr r0, [sp, 0x38]",
            "ldr r6, [r3, 4]",
            "bl rsym._ZN5yaSSL8Finished7set_shaEv",
            "mov r2, r5",
            "mov r1, r0",
            "mov r3, 0x6c",
            "mov r0, sl",
            "mov lr, pc",
            "bx r6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL3MD5aSERKS0_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL3SHAaSERKS0_",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "add sp, sp, 0x14c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_MD5Ev",
            "add r5, sp, 0x114",
            "mov r1, r5",
            "ldr r3, [r0]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useHashesEv",
            "bl rsym._ZN5yaSSL9sslHashes7use_SHAEv",
            "add r1, r5, 0x10",
            "ldr r3, [r0]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [0x00082f58]",
            "mov r2, 4",
            "add sl, sl, r3",
            "add r1, sl, 0xb4",
            "ldr r0, [sp, 0x30]",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "ldr r0, [sp, 0x38]",
            "addne sl, sl, 0xb8",
            "addeq sl, sl, 0xc8",
            "bl rsym._ZN5yaSSL8Finished7set_md5Ev",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov ip, 0xf",
            "add r2, r0, 4",
            "str ip, [sp, 4]",
            "mov r0, r6",
            "mov ip, 0x24",
            "mov r1, 0xc",
            "mov r3, 0x30",
            "str sl, [sp]",
            "str r5, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3PRFEPhjPKhjS2_jS2_j",
            "ldr r0, [sp, 0x38]",
            "mov r1, 0xc",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "b 0x82e54"
        ]
    },
    "rsym._ZN5yaSSL8Finished7set_md5Ev": {
        "function_address": "0x0003f25c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8bc]!"
        ]
    },
    "rsym._ZN5yaSSL8Finished7set_shaEv": {
        "function_address": "0x00040414",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xcec]!"
        ]
    },
    "fcn.0008ab20": {
        "function_address": "0x0008ab20",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x14]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x10]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.__aeabi_d2lz": {
        "function_address": "0x000bfe08",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r2, 0",
            "mov r3, 0",
            "mov r5, r0",
            "mov r4, r1",
            "bl fcn.000bf914",
            "cmp r0, 0",
            "bne 0xbfe4c",
            "mov r1, r4",
            "mov r0, r5",
            "bl sym.__aeabi_d2ulz",
            "mov r3, r0",
            "mov r4, r1",
            "mov r1, r4",
            "mov r0, r3",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r1, r4, 0x80000000",
            "mov r0, r5",
            "bl sym.__aeabi_d2ulz",
            "rsbs r3, r0, 0",
            "rsc r4, r1, 0",
            "b 0xbfe3c"
        ]
    },
    "fcn.000bf914": {
        "function_address": "0x000bf914",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.000bf8e4",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "sym.__aeabi_d2ulz": {
        "function_address": "0x000bfed0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r2, 0",
            "ldr r3, [0x000bff30]",
            "mov r5, r0",
            "mov r6, r1",
            "bl fcn.000bf394",
            "bl fcn.000bf9d0",
            "mov r4, r0",
            "bl fcn.000bf294",
            "mov r2, 0",
            "ldr r3, [0x000bff34]",
            "bl fcn.000bf394",
            "mov r2, r5",
            "mov r3, r6",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "mov r2, 0",
            "mov r3, r4",
            "orr r4, r2, r0",
            "mov r5, r3",
            "mov r1, r3",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000bf8e4": {
        "function_address": "0x000bf8e4",
        "instructions": [
            "push {r0, lr}",
            "bl fcn.000bf840",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, lr}",
            "bx lr"
        ]
    },
    "fcn.000bf840": {
        "function_address": "0x000bf840",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "lsl ip, r3, 1",
            "mvnsne ip, ip, asr 21",
            "beq 0xbf898",
            "add sp, sp, 4",
            "orrs ip, r0, r1, lsl 1",
            "orrseq ip, r2, r3, lsl 1",
            "teqne r1, r3",
            "teqeq r0, r2",
            "moveq r0, 0",
            "bxeq lr",
            "cmn r0, 0",
            "teq r1, r3",
            "cmppl r1, r3",
            "cmpeq r0, r2",
            "asrhs r0, r3, 0x1f",
            "mvnlo r0, r3, asr 31",
            "orr r0, r0, 1",
            "bx lr",
            "lsl ip, r1, 1",
            "mvns ip, ip, asr 21",
            "bne 0xbf8ac",
            "orrs ip, r0, r1, lsl 12",
            "bne 0xbf8c0",
            "lsl ip, r3, 1",
            "mvns ip, ip, asr 21",
            "bne 0xbf85c",
            "orrs ip, r2, r3, lsl 12",
            "beq 0xbf85c",
            "pop {r0}",
            "bx lr"
        ]
    },
    "fcn.000aa2bc": {
        "function_address": "0x000aa2bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 8",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "mov r6, r0",
            "add r0, r4, 0x1f",
            "add r0, r6, r0, lsr 5",
            "ldr r3, [0x000aa43c]",
            "cmp r0, 8",
            "add r3, pc, r3",
            "lsr r7, r4, 5",
            "and r4, r4, 0x1f",
            "bls 0xaa414",
            "cmp r0, 0x10",
            "movls r8, 0x10",
            "bls 0xaa318",
            "cmp r0, 0x20",
            "movls r8, 0x20",
            "bls 0xaa318",
            "cmp r0, 0x40",
            "movls r8, 0x40",
            "bhi 0xaa428",
            "ldr r2, [r5]",
            "cmp r8, r2",
            "bls 0xaa35c",
            "ldr r1, [r5, 4]",
            "mov ip, 1",
            "mov r3, r8",
            "add r0, r5, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r5]",
            "str r0, [r5, 4]",
            "rsb r2, r3, r8",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r8, [r5]",
            "add r1, r6, r7",
            "cmp r1, r7",
            "movlo r2, r1",
            "movhs r2, r7",
            "cmp r2, 0",
            "ldr r8, [r5, 4]",
            "beq 0xaa3c0",
            "sub r3, r1, 1",
            "cmp r3, r2",
            "blo 0xaa3a8",
            "sub r1, r1, 0xc0000001",
            "rsb r0, r2, r1",
            "add r0, r8, r0, lsl 2",
            "add r1, r8, r1, lsl 2",
            "sub r3, r3, 1",
            "ldr ip, [r0], -4",
            "cmp r3, r2",
            "str ip, [r1], -4",
            "bhs 0xaa394",
            "mov r3, 0",
            "mov r1, r3",
            "str r1, [r8, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r3, r2",
            "blo 0xaa3b0",
            "cmp r4, 0",
            "add r7, r8, r7, lsl 2",
            "beq 0xaa404",
            "adds r6, r6, 1",
            "beq 0xaa404",
            "mov r3, 0",
            "rsb ip, r4, 0x20",
            "mov r0, r3",
            "mov r2, r3",
            "ldr r1, [r7, r3]",
            "add r2, r2, 1",
            "orr r0, r0, r1, lsl r4",
            "cmp r6, r2",
            "str r0, [r7, r3]",
            "lsr r0, r1, ip",
            "add r3, r3, 4",
            "bhi 0xaa3e4",
            "mov r0, r5",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r2, [0x000aa440]",
            "add r3, r3, r2",
            "add r0, r3, r0, lsl 2",
            "ldr r8, [r0, 0x5ec]",
            "b 0xaa318",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r8, 1",
            "lsl r8, r8, r0",
            "b 0xaa318"
        ]
    },
    "sym.vio_new": {
        "function_address": "0x000799ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x1c",
            "mov r8, r1",
            "mov r0, 0x9c",
            "mov r1, 0x10",
            "mov r7, r2",
            "bl rsym.my_malloc",
            "ldr r6, [0x00079c78]",
            "subs r4, r0, 0",
            "add r6, pc, r6",
            "beq 0x79b5c",
            "mov r2, 0x9c",
            "mov r1, 0",
            "bl sym.imp.memset",
            "and r3, r7, 1",
            "mov r2, 0",
            "tst r7, 2",
            "str r2, [r4, 4]",
            "strb r3, [r4, 8]",
            "str r8, [r4, 0x30]",
            "str r5, [r4]",
            "bne 0x79b80",
            "cmp r8, 4",
            "beq 0x79ba0",
            "ldr r3, [0x00079c7c]",
            "tst r7, 2",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x00079c80]",
            "str r2, [r4, 0x60]",
            "ldr r3, [r6, r3]",
            "str r3, [r4, 0x64]",
            "bne 0x79b6c",
            "ldr r3, [0x00079c84]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "ldr r3, [0x00079c88]",
            "ldr fp, [r6, r3]",
            "ldr r3, [0x00079c8c]",
            "ldr sb, [r6, r3]",
            "ldr r3, [0x00079c90]",
            "ldr sl, [r6, r3]",
            "ldr r3, [0x00079c94]",
            "ldr r8, [r6, r3]",
            "ldr r3, [0x00079c98]",
            "ldr r7, [r6, r3]",
            "ldr r3, [0x00079c9c]",
            "ldr lr, [r6, r3]",
            "ldr r3, [0x00079ca0]",
            "ldr ip, [r6, r3]",
            "ldr r3, [0x00079ca4]",
            "ldr r0, [r6, r3]",
            "ldr r3, [0x00079ca8]",
            "ldr r1, [r6, r3]",
            "ldr r3, [0x00079cac]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x00079cb0]",
            "str r2, [r4, 0x68]",
            "ldr r3, [r6, r3]",
            "str fp, [r4, 0x6c]",
            "str sb, [r4, 0x7c]",
            "str sl, [r4, 0x78]",
            "str r8, [r4, 0x88]",
            "str r7, [r4, 0x8c]",
            "str lr, [r4, 0x90]",
            "str ip, [r4, 0x80]",
            "str r0, [r4, 0x84]",
            "str r1, [r4, 0x70]",
            "ldr r2, [sp, 0x10]",
            "str r3, [r4, 0x94]",
            "ldr r3, [r4, 0x30]",
            "str r2, [r4, 0x74]",
            "cmp r3, 2",
            "beq 0x79c6c",
            "ldr r3, [0x00079cb4]",
            "add r3, r6, r3",
            "ldr ip, [r4]",
            "mov r1, 1",
            "mvn r2, 0",
            "add r0, r4, 0x34",
            "str ip, [sp]",
            "bl sym.imp.__sprintf_chk",
            "mov r1, 4",
            "mov r2, 0",
            "mov r0, r5",
            "bl sym.imp.fcntl",
            "mov r0, r5",
            "mov r1, 3",
            "bl sym.imp.fcntl",
            "str r0, [r4, 0xc]",
            "mov r0, r4",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x00079cb8]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "b 0x79a80",
            "mov r0, 0x4000",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "biceq r7, r7, 2",
            "cmp r8, 4",
            "str r0, [r4, 0x54]",
            "bne 0x79a50",
            "ldr r3, [0x00079cbc]",
            "ldr fp, [r6, r3]",
            "ldr r3, [0x00079c80]",
            "ldr sb, [r6, r3]",
            "ldr r3, [0x00079cc0]",
            "ldr sl, [r6, r3]",
            "ldr r3, [0x00079cc4]",
            "ldr r8, [r6, r3]",
            "ldr r3, [0x00079c8c]",
            "ldr r7, [r6, r3]",
            "ldr r3, [0x00079c90]",
            "ldr lr, [r6, r3]",
            "ldr r3, [0x00079c94]",
            "ldr ip, [r6, r3]",
            "ldr r3, [0x00079c98]",
            "ldr r0, [r6, r3]",
            "ldr r3, [0x00079cc8]",
            "ldr r1, [r6, r3]",
            "ldr r3, [0x00079ca0]",
            "ldr r2, [r6, r3]",
            "ldr r3, [0x00079ca4]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0xc]",
            "ldr r3, [0x00079ccc]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x00079cac]",
            "ldr r3, [r6, r3]",
            "str r3, [sp, 0x14]",
            "str fp, [r4, 0x60]",
            "str sb, [r4, 0x64]",
            "str sl, [r4, 0x68]",
            "str r8, [r4, 0x6c]",
            "str r7, [r4, 0x7c]",
            "str lr, [r4, 0x78]",
            "str ip, [r4, 0x88]",
            "str r0, [r4, 0x8c]",
            "str r1, [r4, 0x90]",
            "str r2, [r4, 0x80]",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [0x00079cb0]",
            "str r2, [r4, 0x84]",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [r6, r3]",
            "str r2, [r4, 0x70]",
            "ldr r2, [sp, 0x14]",
            "str r2, [r4, 0x74]",
            "str r3, [r4, 0x94]",
            "ldr r3, [r4, 0x30]",
            "cmp r3, 2",
            "bne 0x79b1c",
            "ldr r3, [0x00079cd0]",
            "add r3, r6, r3",
            "b 0x79b24"
        ]
    },
    "sym.TaoCrypt::CertDecoder::StoreKey__": {
        "function_address": "0x0009ad10",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r2, [r3, 0x10]",
            "ldr r4, [0x0009ae0c]",
            "cmp r2, 0",
            "mov r5, r0",
            "add r4, pc, r4",
            "beq 0x9ad38",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r7, [r3, 0xc]",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r2, [r5, 4]",
            "ldr r6, [r2, 0xc]",
            "rsb r7, r7, r6",
            "mov r3, r7",
            "b 0x9ad70",
            "ldr r1, [r2, 0xc]",
            "ldr ip, [r2]",
            "sub r1, r1, 1",
            "cmp r1, ip",
            "str r1, [r2, 0xc]",
            "sub r3, r3, 1",
            "bhs 0x9adc4",
            "cmp r3, 0",
            "bne 0x9ad54",
            "add r6, r0, r7",
            "add r7, r5, 8",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt9PublicKey7SetSizeEj",
            "ldr r2, [r5, 4]",
            "ldr r3, [r2, 0xc]",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bhs 0x9ade8",
            "ldr r1, [r2, 4]",
            "mov r0, r7",
            "add r1, r1, r3",
            "bl rsym._ZN8TaoCrypt9PublicKey6SetKeyEPKh",
            "ldr r3, [r5, 4]",
            "ldr r2, [r3, 0xc]",
            "add r6, r2, r6",
            "str r6, [r3, 0xc]",
            "b 0x9ad30",
            "ldr r3, [0x0009ae10]",
            "ldr r1, [0x0009ae14]",
            "ldr r0, [0x0009ae18]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009ae10]",
            "ldr r1, [0x0009ae14]",
            "ldr r0, [0x0009ae18]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::MD5::MD5__": {
        "function_address": "0x0007ec24",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007ec88]",
            "ldr r3, [0x0007ec8c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 4",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ec90]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Modulo_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab58c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r7, r1",
            "mov r6, r2",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, r6",
            "mov r0, r4",
            "mov r1, sp",
            "mov r2, r7",
            "bl rsym._ZN8TaoCrypt7Integer6DivideERS0_S1_RKS0_S3_",
            "ldm sp, {r2, r5}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt7Integer6DivideERS0_S1_RKS0_S3_": {
        "function_address": "0x0003ef44",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xacc]!"
        ]
    },
    "sym.yaSSL::StringHolder::StringHolder_char_const__int_": {
        "function_address": "0x00094af4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "str r2, [r4, 4]",
            "mov r5, r2",
            "mov r6, r1",
            "mov r1, 0",
            "add r0, r2, 1",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r1, r6",
            "str r0, [r4, 8]",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "str r3, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AbstractRing::MultiplicativeGroupT::Reduce_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x00099c5c",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, lr}",
            "mov r0, r3",
            "ldr r3, [r3]",
            "mov r4, r1",
            "ldr ip, [r3, 0x4c]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::SHA::SHA__": {
        "function_address": "0x000baa10",
        "instructions": [
            "ldr ip, [0x000baa4c]",
            "ldr r3, [0x000baa50]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000baa54]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000baa58]",
            "ldr r0, [0x000baa5c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.yaSSL::RMD.operator_yaSSL::RMD_const_": {
        "function_address": "0x0007de18",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [r1, 4]",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt9RIPEMD160aSERKS0_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9RIPEMD160aSERKS0_": {
        "function_address": "0x0003d57c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbfc]!"
        ]
    },
    "method.TaoCrypt.MontgomeryReduce_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a7dcc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 8",
            "ldr r5, [sp, 0x2c]",
            "mov r4, r1",
            "lsl sl, r5, 2",
            "mov r7, r2",
            "mov sb, r3",
            "mov r6, r0",
            "add r8, r1, sl",
            "ldr r3, [sp, 0x28]",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j",
            "mov r2, r7",
            "mov r1, r8",
            "mov r3, r6",
            "mov r0, r4",
            "str sb, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt20RecursiveMultiplyTopEPjS0_PKjS2_S2_j",
            "add r1, r7, sl",
            "mov r2, r4",
            "mov r3, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r2, sb",
            "mov r7, r0",
            "mov r1, r4",
            "mov r0, r8",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "subs r7, r7, 0",
            "movne r7, 1",
            "cmp r0, 0",
            "movne r0, 0",
            "andeq r0, r7, 1",
            "ldr r2, [0x000a7ec4]",
            "cmp r0, 0",
            "add r2, pc, r2",
            "bne 0xa7ea0",
            "cmp r7, 0",
            "movne r4, r8",
            "cmp r5, 0",
            "beq 0xa7e94",
            "mov r3, r0",
            "ldr r2, [r4, r0]",
            "add r3, r3, 1",
            "cmp r5, r3",
            "str r2, [r6, r0]",
            "add r0, r0, 4",
            "bhi 0xa7e7c",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [0x000a7ec8]",
            "ldr r1, [0x000a7ecc]",
            "ldr r0, [0x000a7ed0]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0xa40",
            "ldr r2, [0x000a7ed4]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt20RecursiveMultiplyTopEPjS0_PKjS2_S2_j": {
        "function_address": "0x0003d8f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9ac]!"
        ]
    },
    "sym.yaSSL_CTX_sess_accept_renegotiate": {
        "function_address": "0x00085ba0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x10]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_compress_alloc": {
        "function_address": "0x00050090",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r1]",
            "mov r5, r1",
            "lsl ip, r3, 7",
            "ldr r1, [0x00050148]",
            "sub ip, ip, r3, lsl 3",
            "umull lr, r3, r1, ip",
            "lsr r3, r3, 5",
            "add r3, r3, 0xc",
            "sub sp, sp, 0xc",
            "mov r7, r0",
            "str r3, [r2]",
            "mov r0, r3",
            "mov r1, 0x10",
            "mov r4, r2",
            "bl rsym.my_malloc",
            "subs r6, r0, 0",
            "beq 0x50114",
            "ldr r3, [r4]",
            "add r1, sp, 8",
            "str r3, [r1, -4]!",
            "mov r2, r7",
            "ldr r3, [r5]",
            "bl sym.imp.compress",
            "ldr r3, [sp, 4]",
            "subs r7, r0, 0",
            "str r3, [r4]",
            "bne 0x50124",
            "ldr r2, [r5]",
            "cmp r3, r2",
            "strlo r3, [r5]",
            "strlo r2, [r4]",
            "bhs 0x50134",
            "mov r0, r6",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym.my_no_flags_free",
            "mov r6, 0",
            "b 0x50114",
            "mov r0, r6",
            "str r7, [r4]",
            "bl rsym.my_no_flags_free",
            "mov r6, r7",
            "b 0x50114"
        ]
    },
    "sym.imp.compress": {
        "function_address": "0x0003d18c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe9c]!"
        ]
    },
    "sym.TaoCrypt::Integer::Divide_TaoCrypt::Integer__TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000ab19c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r2",
            "sub sp, sp, 0x20",
            "mov r4, r3",
            "mov r7, r0",
            "mov r6, r1",
            "bl rsym._ZN8TaoCrypt14PositiveDivideERNS_7IntegerES1_RKS0_S3_",
            "ldr r3, [r5, 0xc]",
            "cmp r3, 1",
            "beq 0xab1e8",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xab1dc",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7Integer6NegateEv",
            "b 0xab1d0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7Integer6NegateEv",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "cmp r0, 0",
            "bne 0xab1c4",
            "add r5, sp, 0x10",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegermmEv",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer13AbsoluteValueEv",
            "mov r2, r7",
            "mov r0, sp",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "mov r1, sp",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "mov r0, r5",
            "mov r8, sp",
            "bl rsym._ZN8TaoCrypt7IntegerD1Ev",
            "b 0xab1c4"
        ]
    },
    "rsym._ZN8TaoCrypt14PositiveDivideERNS_7IntegerES1_RKS0_S3_": {
        "function_address": "0x0003daec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x85c]!"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer13AbsoluteValueEv": {
        "function_address": "0x0003fd18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x194]!"
        ]
    },
    "sym.TaoCrypt::RecursiveMultiply_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a6c88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldr r5, [sp, 0x48]",
            "ldr sb, [0x000a7110]",
            "cmp r5, 1",
            "add sb, pc, sb",
            "mov r8, r1",
            "mov sl, r2",
            "mov r7, r3",
            "mov r6, r0",
            "bls 0xa70c8",
            "tst r5, 1",
            "bne 0xa70c8",
            "cmp r5, 8",
            "beq 0xa6da4",
            "cmp r5, 4",
            "beq 0xa6db8",
            "cmp r5, 2",
            "beq 0xa70b4",
            "lsr r4, r5, 1",
            "lsl fp, r4, 2",
            "sub r3, r4, 0xc0000001",
            "add r0, sl, fp",
            "lsl r3, r3, 2",
            "str r0, [sp, 0x10]",
            "add r2, r0, r3",
            "add r1, sl, r3",
            "mov r0, r4",
            "b 0xa6d04",
            "cmp r0, 0",
            "beq 0xa709c",
            "ldr lr, [r1]",
            "ldr ip, [r2]",
            "sub r0, r0, 1",
            "cmp lr, ip",
            "bhi 0xa70ac",
            "sub r1, r1, 4",
            "sub r2, r2, 4",
            "bhs 0xa6cfc",
            "mvn lr, 2",
            "add r1, r7, fp",
            "add r2, r1, r3",
            "str r1, [sp, 0xc]",
            "add r3, r7, r3",
            "mov r1, r4",
            "b 0xa6d48",
            "cmp r1, 0",
            "beq 0xa6d6c",
            "ldr ip, [r3]",
            "ldr r0, [r2]",
            "sub r1, r1, 1",
            "cmp ip, r0",
            "bhi 0xa70a4",
            "sub r3, r3, 4",
            "sub r2, r2, 4",
            "bhs 0xa6d40",
            "mvn r1, 0",
            "add lr, r1, lr",
            "add lr, lr, 4",
            "cmp lr, 8",
            "addls pc, pc, lr, lsl 2",
            "b 0xa7060",
            "b 0xa6fe4",
            "b 0xa7060",
            "b 0xa6fa8",
            "b 0xa7060",
            "b 0xa7060",
            "b 0xa7060",
            "b 0xa6f40",
            "b 0xa7060",
            "b 0xa6dcc",
            "mov r1, r2",
            "mov r2, r3",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable9Multiply8EPjPKjS3_",
            "mov r1, sl",
            "mov r2, r7",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable9Multiply4EPjPKjS3_",
            "add r1, r6, fp",
            "lsl ip, r5, 2",
            "str r1, [sp, 0x18]",
            "mov r2, sl",
            "ldr r1, [sp, 0x10]",
            "mov r3, r4",
            "mov r0, r6",
            "str ip, [sp, 0x1c]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r7",
            "add r0, r8, r0",
            "str r0, [sp, 0x14]",
            "ldr r2, [sp, 0xc]",
            "mov r3, r4",
            "ldr r0, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r0, r8",
            "ldr r1, [sp, 0x14]",
            "mov r2, r6",
            "ldr r3, [sp, 0x18]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "add r0, r8, fp",
            "mov r1, r0",
            "ldr r2, [sp, 0x18]",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr ip, [sp, 0x1c]",
            "mvn fp, 0",
            "mov r2, sl",
            "mov r3, r7",
            "mov r0, r6",
            "add r7, r6, ip",
            "ldr r1, [sp, 0x14]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "mov r0, r7",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "ldr r3, [sp, 0xc]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "mov r1, r8",
            "mov r2, r6",
            "mov r3, r5",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "mov r2, r7",
            "mov sl, r0",
            "mov r1, r8",
            "mov r3, r5",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "mov r7, r0",
            "ldr r0, [sp, 0x18]",
            "mov r2, r8",
            "mov r1, r0",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "add r7, r7, sl",
            "add r7, r7, r0",
            "add fp, r7, fp",
            "cmp fp, 2",
            "bhi 0xa70ec",
            "add r5, r4, r5",
            "ldr r2, [r6, r5, lsl 2]",
            "add r3, r6, r5, lsl 2",
            "add fp, fp, r2",
            "cmp r2, fp",
            "str fp, [r6, r5, lsl 2]",
            "bls 0xa6f34",
            "cmp r4, 1",
            "beq 0xa6f34",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xa6f28",
            "b 0xa6f34",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa6f34",
            "add r2, r2, 1",
            "cmp r4, r2",
            "bhi 0xa6f10",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, sl",
            "ldr r2, [sp, 0x10]",
            "lsl ip, r5, 2",
            "add fp, r6, fp",
            "mov r3, r4",
            "mov r0, r6",
            "str fp, [sp, 0x18]",
            "str ip, [sp, 0x1c]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r0, [sp, 0x1c]",
            "ldr r1, [sp, 0xc]",
            "add r0, r8, r0",
            "str r0, [sp, 0x14]",
            "mov r2, r7",
            "mov r3, r4",
            "ldr r0, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r0, r8",
            "ldr r1, [sp, 0x14]",
            "mov r2, r6",
            "ldr r3, [sp, 0x18]",
            "str r4, [sp]",
            "mov fp, 0",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr ip, [sp, 0x1c]",
            "b 0xa6e44",
            "ldr r1, [sp, 0x10]",
            "mov r2, sl",
            "lsl ip, r5, 2",
            "add fp, r6, fp",
            "mov r3, r4",
            "mov r0, r6",
            "str fp, [sp, 0x18]",
            "str ip, [sp, 0x1c]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r7",
            "add r0, r8, r0",
            "str r0, [sp, 0x14]",
            "ldr r2, [sp, 0xc]",
            "b 0xa6f78",
            "add ip, r6, fp",
            "ldr r1, [sp, 0x10]",
            "mov r2, sl",
            "mov r3, r4",
            "str ip, [sp, 0x18]",
            "mov r0, r6",
            "lsl ip, r5, 2",
            "str ip, [sp, 0x1c]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r7",
            "add r0, r8, r0",
            "str r0, [sp, 0x14]",
            "ldr r2, [sp, 0xc]",
            "mov r3, r4",
            "ldr r0, [sp, 0x18]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r0, r8",
            "ldr r1, [sp, 0x14]",
            "mov r2, r6",
            "ldr r3, [sp, 0x18]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "add r0, r8, fp",
            "mov r1, r0",
            "mov r2, r6",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mvn fp, 0",
            "ldr ip, [sp, 0x1c]",
            "b 0xa6e44",
            "mov r3, 0",
            "mov r2, r3",
            "str r2, [r8, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r5, r3",
            "bhi 0xa7068",
            "lsl r1, r5, 2",
            "add fp, r6, fp",
            "str fp, [sp, 0x18]",
            "mov fp, r2",
            "add r2, r8, r1",
            "str r1, [sp, 0x1c]",
            "str r2, [sp, 0x14]",
            "mov ip, r1",
            "b 0xa6e44",
            "mov lr, r0",
            "b 0xa6d28",
            "mov r1, 1",
            "b 0xa6d6c",
            "mov lr, 3",
            "b 0xa6d28",
            "mov r1, sl",
            "mov r2, r7",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable9Multiply2EPjPKjS3_",
            "ldr r3, [0x000a7114]",
            "ldr r1, [0x000a7118]",
            "ldr r0, [0x000a711c]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x750",
            "ldr r2, [0x000a7120]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a7114]",
            "ldr r1, [0x000a7118]",
            "ldr r0, [0x000a7124]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x750",
            "ldr r2, [0x000a7128]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.__aeabi_f2lz": {
        "function_address": "0x000bfdbc",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r4, r0",
            "bl fcn.000c007c",
            "cmp r0, 0",
            "bne 0xbfdf4",
            "mov r0, r4",
            "bl sym.__aeabi_f2ulz",
            "mov r3, r0",
            "mov r4, r1",
            "mov r1, r4",
            "mov r0, r3",
            "pop {r4, lr}",
            "bx lr",
            "add r0, r4, 0x80000000",
            "bl sym.__aeabi_f2ulz",
            "rsbs r3, r0, 0",
            "rsc r4, r1, 0",
            "b 0xbfde4"
        ]
    },
    "fcn.000c007c": {
        "function_address": "0x000c007c",
        "instructions": [
            "str lr, [sp, -8]!",
            "bl fcn.000c004c",
            "movlo r0, 1",
            "movhs r0, 0",
            "ldr lr, [sp], 8",
            "bx lr"
        ]
    },
    "fcn.000c004c": {
        "function_address": "0x000c004c",
        "instructions": [
            "push {r0, r1, r2, r3, lr}",
            "bl fcn.000bffd8",
            "cmp r0, 0",
            "cmnmi r0, 0",
            "pop {r0, r1, r2, r3, lr}",
            "bx lr"
        ]
    },
    "fcn.000bffd8": {
        "function_address": "0x000bffd8",
        "instructions": [
            "mov ip, 1",
            "str ip, [sp, -4]!",
            "lsl r2, r0, 1",
            "lsl r3, r1, 1",
            "mvns ip, r2, asr 24",
            "mvnsne ip, r3, asr 24",
            "beq 0xc0014",
            "add sp, sp, 4",
            "orrs ip, r2, r3, lsr 1",
            "teqne r0, r1",
            "subspl r0, r2, r3",
            "asrhi r0, r1, 0x1f",
            "mvnlo r0, r1, asr 31",
            "orrne r0, r0, 1",
            "bx lr",
            "mvns ip, r2, asr 24",
            "bne 0xc0024",
            "lsls ip, r0, 9",
            "bne 0xc0034",
            "mvns ip, r3, asr 24",
            "bne 0xbfff4",
            "lsls ip, r1, 9",
            "beq 0xbfff4",
            "pop {r0}",
            "bx lr"
        ]
    },
    "sym.init_dynamic_array2": {
        "function_address": "0x00050650",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [sp, 0x18]",
            "mov r4, r0",
            "cmp ip, 0",
            "mov r5, r2",
            "mov r6, r3",
            "mov r7, r1",
            "bne 0x5068c",
            "ldr r0, [0x000506f4]",
            "bl fcn.000bed20",
            "cmp r0, 0x10",
            "movhs ip, r0",
            "movlo ip, 0x10",
            "cmp r6, 8",
            "bhi 0x506cc",
            "cmp r6, 0",
            "bne 0x506d8",
            "str r6, [r4]",
            "stmib r4, {r6, ip}",
            "str ip, [r4, 0xc]",
            "str r7, [r4, 0x10]",
            "mov r6, ip",
            "mul r0, r7, r6",
            "mov r1, 0",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r4]",
            "streq r0, [r4, 8]",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "lsl r3, r6, 1",
            "cmp ip, r3",
            "movhs ip, r3",
            "mov r3, 0",
            "cmp r5, 0",
            "stmib r4, {r3, r6, ip}",
            "str r7, [r4, 0x10]",
            "str r5, [r4]",
            "bne 0x506c0",
            "b 0x506a8"
        ]
    },
    "method.TaoCrypt::AbstractEuclideanDomain.Mod_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x00098934",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x18",
            "add r6, sp, 8",
            "mov r4, r0",
            "mov r8, r2",
            "add r5, r0, 0xc",
            "mov r0, r6",
            "mov r7, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "str r8, [sp]",
            "ldr ip, [r4]",
            "mov r3, r7",
            "mov r0, r4",
            "mov r2, r6",
            "mov r1, r5",
            "ldr ip, [ip, 0x60]",
            "mov lr, pc",
            "bx ip",
            "ldr r4, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Add_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad618",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.my_malloc": {
        "function_address": "0x00048ae0",
        "instructions": [
            "cmp r0, 0",
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "movne r6, r0",
            "moveq r6, 1",
            "mov r0, r6",
            "mov r8, r1",
            "bl sym.imp.malloc",
            "ldr r7, [0x00048b88]",
            "subs r4, r0, 0",
            "add r7, pc, r7",
            "beq 0x48b28",
            "tst r8, 0x20",
            "movne r2, r6",
            "movne r1, 0",
            "blne sym.imp.memset",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "bl rsym._my_thread_var",
            "mov sl, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "ands r5, r8, 8",
            "str r3, [sl]",
            "beq 0x48b5c",
            "ldr r3, [0x00048b8c]",
            "ldr r2, [r7, r3]",
            "ldr r3, [0x00048b90]",
            "ldr r2, [r2]",
            "ldr r3, [r7, r3]",
            "str r2, [r3]",
            "tst r8, 0x18",
            "bne 0x48b74",
            "cmp r5, 0",
            "beq 0x48b1c",
            "mov r0, 1",
            "bl sym.imp.exit",
            "mov r2, r6",
            "mov r1, 0x64",
            "mov r0, 5",
            "bl rsym.my_error",
            "b 0x48b64"
        ]
    },
    "fcn.0007e754": {
        "function_address": "0x0007e754",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e7b0]",
            "ldr r3, [0x0007e7b4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7DES_EDE11DES_EDEImplEEEvPT_",
            "ldr r3, [0x0007e7b8]",
            "ldr r1, [0x0007e7bc]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e7c0]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e7c4]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.mySTL::pair_int__yaSSL.HandShakeBase_______mySTL::GetArrayMemory_mySTL::pair_int__yaSSL::HandShakeBase_________unsigned_int_": {
        "function_address": "0x0008a040",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "lsl r0, r0, 3",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007c5bc": {
        "function_address": "0x0007c5bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "str r5, [r0, 8]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "str r5, [r4, 0x1c]",
            "str r5, [r4, 0x20]",
            "str r5, [r4, 0x24]",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "str r5, [r4, 0x54]",
            "str r5, [r4, 0x38]",
            "str r5, [r4, 0x44]",
            "str r5, [r4, 0x48]",
            "str r5, [r4, 0x4c]",
            "strb r5, [r4, 0x50]",
            "strb r5, [r4, 0x51]",
            "strb r5, [r4, 0x52]",
            "strb r5, [r4, 0x53]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_PublicKey::RSA_PublicKey_TaoCrypt::Source_": {
        "function_address": "0x000b2d54",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt13RSA_PublicKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_get_fd": {
        "function_address": "0x00085fb8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket6get_fdEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL6Socket6get_fdEv": {
        "function_address": "0x0003e098",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x494]!"
        ]
    },
    "sym.yaSSL::RSA::RSA_unsigned_char_const__unsigned_int__bool_": {
        "function_address": "0x0007fe1c",
        "instructions": [
            "ldr ip, [0x0007fee0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr lr, [0x0007fee4]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str lr, [r0]",
            "mov r5, r1",
            "mov r6, r2",
            "mov r7, r3",
            "mov r1, 0",
            "mov r0, 0xa0",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x80",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r8, 0x90",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r7, 0",
            "str r8, [r4, 4]",
            "bne 0x7fecc",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3RSA7RSAImpl10SetPrivateEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r8",
            "mov r1, r5",
            "mov r2, r6",
            "bl rsym._ZN5yaSSL3RSA7RSAImpl9SetPublicEPKhj",
            "b 0x7fec0"
        ]
    },
    "sym.TaoCrypt::DSA_Public_Decoder::DSA_Public_Decoder__": {
        "function_address": "0x0009d6c0",
        "instructions": [
            "ldr ip, [0x0009d6fc]",
            "ldr r3, [0x0009d700]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d704]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d708]",
            "ldr r0, [0x0009d70c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::DSA_PublicKey_TaoCrypt::Source_": {
        "function_address": "0x000a13a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Negate__": {
        "function_address": "0x000a50b4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "cmp r0, 0",
            "ldreq r3, [r4, 0xc]",
            "rsbeq r3, r3, 1",
            "streq r3, [r4, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::ModularArithmetic__": {
        "function_address": "0x000adba8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000adc48]",
            "ldr r3, [0x000adc4c]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "ldr r6, [r0, 0x30]",
            "ldr r2, [r0, 0x2c]",
            "add r3, r3, 8",
            "mov r4, r0",
            "str r3, [r0]",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x20]",
            "ldr r2, [r4, 0x1c]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r4, 0x10]",
            "ldr r2, [r4, 0xc]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000adc50]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::output_buffer_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::output_buffer_::iterator__mySTL::list_yaSSL::output_buffer_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089df4",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89e24",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89e0c",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RSA::RSAImpl::SetPrivate_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007fbf0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "cmp r2, 0",
            "sub sp, sp, 0x58",
            "mov r5, r0",
            "mov r4, r1",
            "str r2, [sp, 0x44]",
            "moveq r3, r2",
            "bne 0x7fd3c",
            "mov r0, r3",
            "ldr r2, [sp, 0x44]",
            "add r6, r5, 0x20",
            "mov r1, r4",
            "str r3, [sp, 0x48]",
            "mov r4, 0",
            "bl sym.imp.memcpy",
            "add r7, sp, 0x24",
            "mov r0, r6",
            "add r1, sp, 0x44",
            "add r8, r7, 0x10",
            "str r4, [sp, 0x50]",
            "str r4, [sp, 0x54]",
            "bl rsym._ZN8TaoCrypt14RSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r6, sp, 4",
            "add r1, r5, 0x30",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, r7",
            "mov r0, r6",
            "add r7, r6, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, r8",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "add r0, r5, 0x10",
            "mov r1, r7",
            "bl rsym._ZN8TaoCrypt7Integer4SwapERS0_",
            "ldr r5, [sp, 0x18]",
            "ldr r2, [sp, 0x14]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldmib sp, {r2, r5}",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x38]",
            "ldr r2, [sp, 0x34]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x28]",
            "ldr r2, [sp, 0x24]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x48]",
            "mov r1, r4",
            "mov r0, r5",
            "ldr r2, [sp, 0x44]",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x58",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7fc10"
        ]
    },
    "rsym._ZN8TaoCrypt14RSA_PrivateKey10InitializeERNS_6SourceE": {
        "function_address": "0x0003e4dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1bc]!"
        ]
    },
    "sym.my_thread_global_init": {
        "function_address": "0x0004d874",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x68",
            "mov r1, sp",
            "mov r2, 0x40",
            "ldr r4, [0x0004da8c]",
            "mov r0, 3",
            "bl sym.imp.confstr",
            "ldr r1, [0x0004da90]",
            "add r4, pc, r4",
            "add r1, r4, r1",
            "mov r0, sp",
            "mov r2, 4",
            "bl sym.imp.strncasecmp",
            "cmp r0, 0",
            "moveq r3, 2",
            "beq 0x4d8d4",
            "ldr r1, [0x0004da94]",
            "mov r0, sp",
            "add r1, r4, r1",
            "mov r2, 0xc",
            "bl sym.imp.strncasecmp",
            "cmp r0, 0",
            "moveq r3, 4",
            "movne r3, 1",
            "ldr r2, [0x0004da98]",
            "mov r1, 0",
            "ldr r6, [r4, r2]",
            "ldr r2, [0x0004da9c]",
            "str r3, [r6]",
            "ldr r0, [r4, r2]",
            "bl sym.imp.pthread_key_create",
            "subs r5, r0, 0",
            "bne 0x4da20",
            "ldr r3, [r6]",
            "cmp r3, 2",
            "beq 0x4da48",
            "ldr r3, [0x0004daa0]",
            "ldr r5, [r4, r3]",
            "mov r0, r5",
            "bl sym.imp.pthread_mutexattr_init",
            "mov r1, 3",
            "mov r0, r5",
            "bl sym.imp.pthread_mutexattr_settype",
            "ldr r3, [0x0004daa4]",
            "ldr r6, [r4, r3]",
            "mov r0, r6",
            "bl sym.imp.pthread_mutexattr_init",
            "mov r1, 2",
            "mov r0, r6",
            "bl sym.imp.pthread_mutexattr_settype",
            "ldr r3, [0x0004daa8]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004daac]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dab0]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dab4]",
            "mov r1, 0",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dab8]",
            "mov r1, 0",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dabc]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dac0]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dac4]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dac8]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dacc]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dad0]",
            "mov r1, r5",
            "ldr r0, [r4, r3]",
            "bl rsym.my_pthread_fastmutex_init",
            "ldr r3, [0x0004dad4]",
            "mov r1, 0",
            "ldr r0, [r4, r3]",
            "bl sym.imp.pthread_cond_init",
            "bl rsym.my_thread_init",
            "cmp r0, 0",
            "bne 0x4da14",
            "add sp, sp, 0x68",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym.my_thread_global_end",
            "mov r0, 1",
            "b 0x4da08",
            "ldr r3, [0x0004dad8]",
            "ldr r2, [0x0004dadc]",
            "ldr r3, [r4, r3]",
            "add r2, r4, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "mov r3, r5",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 1",
            "b 0x4da08",
            "add r6, sp, 0x40",
            "mov r0, r6",
            "bl sym.imp.pthread_attr_init",
            "mov r1, r5",
            "mov r0, r6",
            "bl sym.imp.pthread_attr_setdetachstate",
            "ldr r2, [0x0004dae0]",
            "mov r1, r6",
            "add r2, r4, r2",
            "mov r3, r5",
            "add r0, sp, 0x64",
            "bl sym.imp.pthread_create",
            "subs r1, r0, 0",
            "bne 0x4d904",
            "ldr r0, [sp, 0x64]",
            "bl sym.imp.pthread_join",
            "b 0x4d904"
        ]
    },
    "sym.imp.confstr": {
        "function_address": "0x0004081c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa3c]!"
        ]
    },
    "sym.imp.strncasecmp": {
        "function_address": "0x0003f244",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x8cc]!"
        ]
    },
    "sym.imp.pthread_key_create": {
        "function_address": "0x00040900",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9a4]!"
        ]
    },
    "sym.imp.pthread_mutexattr_init": {
        "function_address": "0x000405f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbac]!"
        ]
    },
    "sym.imp.pthread_mutexattr_settype": {
        "function_address": "0x0003d4a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc8c]!"
        ]
    },
    "sym.imp.pthread_attr_init": {
        "function_address": "0x0003f70c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x59c]!"
        ]
    },
    "sym.imp.pthread_attr_setdetachstate": {
        "function_address": "0x0003d018",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf94]!"
        ]
    },
    "sym.imp.pthread_create": {
        "function_address": "0x0003e7f4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfac]!"
        ]
    },
    "sym.imp.pthread_join": {
        "function_address": "0x000408e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9b4]!"
        ]
    },
    "sym.TaoCrypt::PositiveSubtract_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a68a8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov sl, r0",
            "mov r0, r1",
            "mov r8, r2",
            "mov r7, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "and r4, r0, 1",
            "add r4, r4, r0",
            "mov r0, r8",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "and r6, r0, 1",
            "add r6, r6, r0",
            "ldr r5, [0x000a6b54]",
            "cmp r4, r6",
            "add r5, pc, r5",
            "beq 0xa6a9c",
            "bls 0xa69c4",
            "ldr r2, [r8, 4]",
            "ldr r1, [r7, 4]",
            "ldr r0, [sl, 4]",
            "mov r3, r6",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r7, [r7, 4]",
            "ldr ip, [sl, 4]",
            "lsl sb, r6, 2",
            "subs r4, r4, r6",
            "add r7, r7, sb",
            "add r8, ip, sb",
            "beq 0xa6b0c",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [r7, r3]",
            "add r2, r2, 1",
            "cmp r4, r2",
            "str r1, [r8, r3]",
            "add r3, r3, 4",
            "bhi 0xa6924",
            "ldr r2, [ip, r6, lsl 2]",
            "add r3, ip, sb",
            "rsb r0, r0, r2",
            "cmp r2, r0",
            "str r0, [ip, r6, lsl 2]",
            "bhs 0xa6b00",
            "cmp r4, 1",
            "beq 0xa699c",
            "ldr r2, [r3, 4]",
            "cmp r2, 0",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xa6990",
            "b 0xa6b00",
            "ldr r1, [r3, 8]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa6b00",
            "add r2, r2, 1",
            "cmp r4, r2",
            "bhi 0xa6978",
            "ldr r3, [0x000a6b58]",
            "ldr r1, [0x000a6b5c]",
            "add r3, r5, r3",
            "ldr r0, [0x000a6b60]",
            "add r3, r3, 0x690",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a6b64]",
            "bl sym.imp.__assert_fail",
            "ldr r2, [r7, 4]",
            "ldr r1, [r8, 4]",
            "ldr r0, [sl, 4]",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r7, [r8, 4]",
            "ldr ip, [sl, 4]",
            "lsl sb, r4, 2",
            "subs r6, r6, r4",
            "add r7, r7, sb",
            "add r8, ip, sb",
            "beq 0xa6b0c",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [r7, r3]",
            "add r2, r2, 1",
            "cmp r6, r2",
            "str r1, [r8, r3]",
            "add r3, r3, 4",
            "bhi 0xa69fc",
            "ldr r2, [ip, r4, lsl 2]",
            "add r3, ip, sb",
            "rsb r0, r0, r2",
            "cmp r2, r0",
            "str r0, [ip, r4, lsl 2]",
            "bhs 0xa6af0",
            "cmp r6, 1",
            "beq 0xa6a74",
            "ldr r2, [r3, 4]",
            "cmp r2, 0",
            "sub r2, r2, 1",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xa6a68",
            "b 0xa6af0",
            "ldr r1, [r3, 8]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa6af0",
            "add r2, r2, 1",
            "cmp r6, r2",
            "bhi 0xa6a50",
            "ldr r3, [0x000a6b58]",
            "ldr r1, [0x000a6b5c]",
            "add r3, r5, r3",
            "ldr r0, [0x000a6b60]",
            "add r3, r3, 0x690",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a6b68]",
            "bl sym.imp.__assert_fail",
            "ldr r2, [r7, 4]",
            "ldr r3, [r8, 4]",
            "sub r0, r4, 0xc0000001",
            "lsl r0, r0, 2",
            "add ip, r3, r0",
            "mov r1, r4",
            "add r0, r2, r0",
            "cmp r1, 0",
            "beq 0xa6b34",
            "ldr r5, [r0]",
            "ldr lr, [ip]",
            "sub r1, r1, 1",
            "cmp r5, lr",
            "bhi 0xa6b34",
            "sub r0, r0, 4",
            "sub ip, ip, 4",
            "bhs 0xa6ab8",
            "mov r1, r3",
            "ldr r0, [sl, 4]",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r3, 1",
            "str r3, [sl, 0xc]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r3, 0",
            "str r3, [sl, 0xc]",
            "b 0xa6af8",
            "ldr r3, [0x000a6b58]",
            "ldr r1, [0x000a6b5c]",
            "add r3, r5, r3",
            "ldr r0, [0x000a6b6c]",
            "add r3, r3, 0x6f0",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000a6b70]",
            "bl sym.imp.__assert_fail",
            "mov r1, r2",
            "ldr r0, [sl, 4]",
            "mov r2, r3",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r3, 0",
            "str r3, [sl, 0xc]",
            "b 0xa6af8"
        ]
    },
    "sym.my_load_path": {
        "function_address": "0x0004d2e0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldrb r3, [r1]",
            "ldr r5, [0x0004d430]",
            "cmp r3, 0x7e",
            "add r5, pc, r5",
            "sub sp, sp, 0x20c",
            "mov r6, r1",
            "mov r4, r0",
            "mov r7, r2",
            "beq 0x4d3a4",
            "mov r0, r6",
            "bl rsym.test_if_hard_path",
            "cmp r0, 0",
            "bne 0x4d3b0",
            "ldrb r3, [r6]",
            "cmp r3, 0x2e",
            "beq 0x4d404",
            "ldr r1, [0x0004d434]",
            "mov r0, r6",
            "add r1, r5, r1",
            "bl rsym.is_prefix",
            "subs ip, r0, 0",
            "beq 0x4d3dc",
            "mov r7, 0",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "add r5, sp, 8",
            "add r1, r7, 0x200",
            "rsb r1, r0, r1",
            "mov r2, 0",
            "mov r0, r5",
            "bl rsym.my_getwd",
            "cmp r0, 0",
            "bne 0x4d3c8",
            "mov r2, 0x200",
            "add r1, r6, r7",
            "mov r0, r5",
            "mov r3, r2",
            "bl sym.imp.__strncat_chk",
            "mov r1, r5",
            "mov r0, r4",
            "mov r2, 0x200",
            "bl rsym.strnmov",
            "mov r3, 0",
            "strb r3, [r4, 0x1ff]",
            "mov r0, r4",
            "add sp, sp, 0x20c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldrb r3, [r1, 1]",
            "cmp r3, 0x2f",
            "bne 0x4d308",
            "add r5, sp, 8",
            "mov r1, r6",
            "mov r0, r5",
            "mov r2, 0x200",
            "bl rsym.strnmov",
            "b 0x4d37c",
            "mov r1, r6",
            "mov r0, r5",
            "mov r2, 0x200",
            "bl rsym.strnmov",
            "b 0x4d37c",
            "cmp r7, 0",
            "beq 0x4d33c",
            "add r5, sp, 8",
            "mov r2, r7",
            "mov r3, r6",
            "mov r0, r5",
            "mov r1, 0x200",
            "str ip, [sp]",
            "bl rsym.strxnmov",
            "b 0x4d37c",
            "ldrb r3, [r6, 1]",
            "cmp r3, 0x2f",
            "moveq r7, 2",
            "beq 0x4d340",
            "ldr r1, [0x0004d434]",
            "mov r0, r6",
            "add r1, r5, r1",
            "bl rsym.is_prefix",
            "subs ip, r0, 0",
            "bne 0x4d33c",
            "b 0x4d3dc"
        ]
    },
    "rsym.strxnmov": {
        "function_address": "0x0003fb2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x2dc]!"
        ]
    },
    "sym.mysql_query": {
        "function_address": "0x00045160",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym.mysql_real_query",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_pending": {
        "function_address": "0x00085340",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r4, r0",
            "add r1, sp, 7",
            "mov r2, 1",
            "bl rsym.yaSSL_peek",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL12bufferedDataEv",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.yaSSL_peek": {
        "function_address": "0x0003d030",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf84]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::ChangeCipherSpec_const_": {
        "function_address": "0x0008c9f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "ldr r1, [0x0008ca18]",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r5, 4]",
            "strb r3, [r0]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.cleanup_dirname": {
        "function_address": "0x00049f5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x244",
            "add sl, sp, 0x240",
            "ldr r2, [0x0004a2a0]",
            "mov r6, 0x2f",
            "strb r6, [sl, -8]!",
            "mov r5, r1",
            "ldr r1, [0x0004a2a4]",
            "add r2, pc, r2",
            "add r7, sl, 1",
            "str r2, [sp, 4]",
            "str r0, [sp, 0x14]",
            "add r1, r2, r1",
            "mov r0, r7",
            "mov r2, 3",
            "bl sym.imp.memcpy",
            "ldrb r3, [r5]",
            "add r0, r0, 2",
            "cmp r3, 0",
            "rsb r8, sl, r0",
            "strb r3, [sp, 0x34]",
            "beq 0x4a254",
            "ldr r1, [0x0004a2a8]",
            "ldr r2, [0x0004a2ac]",
            "add sb, sp, 0x34",
            "str r1, [sp, 0x28]",
            "sub r1, r8, 1",
            "str r2, [sp, 0x20]",
            "str r1, [sp, 8]",
            "add r2, sb, 1",
            "add r1, sb, 2",
            "str r2, [sp, 0x10]",
            "str r1, [sp, 0x24]",
            "rsb r2, r8, 0",
            "add r1, r8, 1",
            "str sb, [sp, 0x18]",
            "mov r6, sb",
            "mov r4, sb",
            "mov fp, sb",
            "str r7, [sp, 0x1c]",
            "str r2, [sp, 0xc]",
            "str r1, [sp, 0x2c]",
            "mov sb, sl",
            "cmp r3, 0x2f",
            "beq 0x4a058",
            "ldrb r3, [r4]",
            "cmp r3, 0x2f",
            "strb r3, [r4]",
            "beq 0x4a05c",
            "add r4, r4, 1",
            "ldrb r3, [r5, 1]!",
            "cmp r3, 0",
            "strb r3, [r4]",
            "bne 0x4a008",
            "ldr r1, [sp, 0x18]",
            "mov sb, fp",
            "rsb r4, fp, r4",
            "ldr r0, [sp, 0x14]",
            "bl sym.imp.strcpy",
            "mov r0, r4",
            "add sp, sp, 0x244",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "strb r3, [r4]",
            "rsb r7, r6, r4",
            "cmp r8, r7",
            "bhs 0x4a120",
            "ldr r2, [sp, 0xc]",
            "mov r1, sb",
            "add sl, r4, r2",
            "mov r0, sl",
            "mov r2, r8",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x4a120",
            "cmp r6, sl",
            "addeq r4, r6, 1",
            "beq 0x4a024",
            "ldrb r3, [sl, -1]",
            "sub sl, sl, 1",
            "cmp r3, 0x7e",
            "beq 0x4a1c0",
            "cmp r3, 0x2e",
            "beq 0x4a20c",
            "cmp sl, r6",
            "blo 0x4a298",
            "ldrb r3, [sl]",
            "cmp r3, 0x2f",
            "beq 0x4a298",
            "mov r0, sl",
            "b 0x4a0d4",
            "ldrb r3, [r0]",
            "cmp r3, 0x2f",
            "beq 0x4a0e0",
            "sub r0, r0, 1",
            "cmp r0, r6",
            "bhs 0x4a0c8",
            "ldrb r3, [r0, 1]",
            "add r4, r0, 1",
            "cmp r3, 0x7e",
            "beq 0x4a104",
            "mov r1, sb",
            "mov r2, r8",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x4a024",
            "mov r1, sb",
            "add r0, sl, 1",
            "bl sym.imp.stpcpy",
            "mov r1, 0x2f",
            "mov r4, r0",
            "strb r1, [r4], 1",
            "b 0x4a024",
            "ldr r2, [sp, 8]",
            "cmp r7, r2",
            "beq 0x4a18c",
            "cmp r7, 0",
            "ble 0x4a154",
            "ldrb r3, [r4, -1]",
            "sub r2, r4, 1",
            "cmp r3, 0x2f",
            "beq 0x4a024",
            "cmp r7, 1",
            "beq 0x4a154",
            "cmp r3, 0x2e",
            "beq 0x4a1ac",
            "ldr r3, [sp, 0x10]",
            "cmp r4, r3",
            "bls 0x4a020",
            "ldrb r3, [r4, -1]",
            "cmp r3, 0x7e",
            "bne 0x4a020",
            "ldrb r2, [r4, -2]",
            "cmp r2, 0x2f",
            "bne 0x4a020",
            "strb r3, [sp, 0x34]",
            "strb r2, [sp, 0x35]",
            "ldr r4, [sp, 0x24]",
            "mov r6, fp",
            "b 0x4a024",
            "mov r0, r6",
            "ldr r1, [sp, 0x1c]",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "moveq r6, r4",
            "addeq r4, r4, 1",
            "beq 0x4a024",
            "b 0x4a12c",
            "ldrb r3, [r4, -2]",
            "cmp r3, 0x2f",
            "moveq r4, r2",
            "bne 0x4a154",
            "b 0x4a024",
            "cmp sl, r6",
            "beq 0x4a1d4",
            "ldrb r3, [sl, -1]",
            "cmp r3, 0x2f",
            "bne 0x4a0ac",
            "ldr r1, [sp, 0x20]",
            "ldr r2, [sp, 4]",
            "ldr r3, [r2, r1]",
            "ldr r1, [r3]",
            "cmp r1, 0",
            "beq 0x4a268",
            "mov r0, fp",
            "ldr r2, [0x0004a2b0]",
            "bl sym.imp.__stpcpy_chk",
            "ldrb r3, [r0, -1]",
            "sub sl, r0, 1",
            "cmp r3, 0x2f",
            "ldrbeq r3, [sl, -1]!",
            "b 0x4a0a4",
            "cmp sl, r6",
            "beq 0x4a220",
            "ldrb r3, [sl, -1]",
            "cmp r3, 0x2f",
            "bne 0x4a0ac",
            "ldr r2, [sp, 4]",
            "ldr r1, [sp, 0x28]",
            "ldr r4, [r2, r1]",
            "mov r1, 0x200",
            "mov r0, r4",
            "mov r2, 0",
            "bl rsym.my_getwd",
            "cmp r0, 0",
            "beq 0x4a274",
            "ldr r3, [sp, 0x2c]",
            "add r4, sl, r3",
            "add r4, r4, 1",
            "b 0x4a024",
            "mov r4, r3",
            "add r3, sp, 0x34",
            "str r3, [sp, 0x18]",
            "mov r1, r3",
            "b 0x4a040",
            "ldr r3, [sp, 0x2c]",
            "add r4, sl, r3",
            "b 0x4a020",
            "mov r1, r4",
            "mov r0, fp",
            "ldr r2, [0x0004a2b0]",
            "bl sym.imp.__stpcpy_chk",
            "ldrb r3, [r0, -1]",
            "sub sl, r0, 1",
            "cmp r3, 0x2f",
            "subeq sl, sl, 1",
            "b 0x4a0ac",
            "mov r0, sl",
            "b 0x4a0e0"
        ]
    },
    "sym.imp.bcmp": {
        "function_address": "0x0003eb3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd7c]!"
        ]
    },
    "sym.imp.__stpcpy_chk": {
        "function_address": "0x0003f1cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x91c]!"
        ]
    },
    "sym.yaSSL::Sessions::Sessions__": {
        "function_address": "0x00092774",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r4, r0",
            "ldr r0, [r5], 0x10",
            "mov r1, 0",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL11SSL_SESSIONEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL5MutexD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL11SSL_SESSIONEED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.free_old_query": {
        "function_address": "0x00075420",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x294]",
            "mov r4, r0",
            "cmp r3, 0",
            "addeq r5, r0, 0x298",
            "addne r5, r0, 0x298",
            "movne r0, r5",
            "movne r1, 0",
            "blne rsym.free_root",
            "mov r0, r5",
            "mov r1, 0x2000",
            "mov r2, 0",
            "bl rsym.init_alloc_root",
            "mov r3, 0",
            "str r3, [r4, 0x288]",
            "str r3, [r4, 0x294]",
            "str r3, [r4, 0x2e8]",
            "str r3, [r4, 0x2f4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_set_accept_state": {
        "function_address": "0x00085c9c",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r3, 0",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::operator___unsigned_int_": {
        "function_address": "0x000a8dac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "lsr r7, r5, 5",
            "cmp r0, r7",
            "movlo r1, r0",
            "movhs r1, r7",
            "cmp r1, 0",
            "ldr ip, [r4, 4]",
            "beq 0xa8e20",
            "cmp r0, r1",
            "bls 0xa8e00",
            "mov r2, r1",
            "mov r3, 0",
            "ldr r2, [ip, r2, lsl 2]",
            "str r2, [ip, r3, lsl 2]",
            "add r3, r3, 1",
            "add r2, r3, r1",
            "cmp r0, r2",
            "bhi 0xa8de8",
            "rsb r6, r1, r0",
            "mov r3, 0",
            "add r6, ip, r6, lsl 2",
            "mov r2, r3",
            "str r2, [r6, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r3, r1",
            "blo 0xa8e10",
            "cmp r0, r7",
            "bhi 0xa8e40",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "beq 0xa8e88",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ands r5, r5, 0x1f",
            "beq 0xa8e28",
            "mvn r7, r7",
            "adds r0, r7, r0",
            "bmi 0xa8e28",
            "add ip, ip, r0, lsl 2",
            "rsb r1, r5, 0x20",
            "mov r2, 0",
            "ldr r3, [ip]",
            "sub r0, r0, 1",
            "orr r2, r2, r3, lsr r5",
            "cmn r0, 1",
            "str r2, [ip], -4",
            "lsl r2, r3, r1",
            "bne 0xa8e60",
            "ldr r3, [r4, 0xc]",
            "cmp r3, 1",
            "bne 0xa8e34",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 0",
            "bne 0xa8e34",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "b 0xa8e34"
        ]
    },
    "sym.cli_read_binary_rows": {
        "function_address": "0x000428dc",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r7, [r0, 0x2c]",
            "ldr fp, [0x00042a24]",
            "cmp r7, 0",
            "mov r6, r0",
            "add fp, pc, fp",
            "beq 0x42a04",
            "add r5, r0, 0x40",
            "ldr r8, [r7, 0x3a8]",
            "add sl, r0, 0x48",
            "b 0x42974",
            "ldr sb, [r7, 0x10]",
            "ldrb r3, [sb]",
            "cmp r4, 7",
            "cmpls r3, 0xfe",
            "moveq r3, 0",
            "movne r3, 1",
            "beq 0x429a8",
            "bl rsym.alloc_root",
            "subs r3, r0, 0",
            "beq 0x429e4",
            "add r2, r3, 0xc",
            "str r2, [r3, 4]",
            "str r3, [r5]",
            "sub r2, r4, 1",
            "mov r5, r3",
            "add r1, sb, 1",
            "ldr r0, [r3, 4]",
            "bl sym.imp.memcpy",
            "str r4, [r5, 8]",
            "mov r1, 1",
            "add r4, r6, 0x68",
            "ldm r4, {r3, r4}",
            "mov r2, 0",
            "adds r3, r3, r1",
            "adc r4, r4, r2",
            "str r3, [r6, 0x68]",
            "str r4, [r6, 0x6c]",
            "mov r0, r8",
            "bl rsym.cli_safe_read",
            "mov r4, r0",
            "cmn r4, 1",
            "add r1, r0, 0xb",
            "mov r0, sl",
            "bne 0x42908",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym.set_stmt_errmsg",
            "mov r0, 1",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "str r3, [r5]",
            "ldrb r2, [sb, 1]",
            "ldrb r1, [sb, 2]",
            "mov r0, r3",
            "add r3, r2, r1, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "str r3, [r8, 0x2f4]",
            "ldrb r3, [sb, 3]",
            "ldrb r2, [sb, 4]",
            "add r3, r3, r2, lsl 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "str r3, [r8, 0x2ec]",
            "b 0x429a0",
            "ldr r2, [0x00042a28]",
            "mov r0, r6",
            "ldr r2, [fp, r2]",
            "ldr r1, [0x00042a2c]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x429a0",
            "ldr r2, [0x00042a28]",
            "mov r3, r7",
            "ldr r2, [fp, r2]",
            "ldr r1, [0x00042a30]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x429a0"
        ]
    },
    "sym.yaSSL::CreateServerHello__": {
        "function_address": "0x0008b9bc",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x54",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL11ServerHelloC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11ServerHelloC1Ev": {
        "function_address": "0x0003d534",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc2c]!"
        ]
    },
    "sym.mysql_store_result": {
        "function_address": "0x000742bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [r0, 0x3a8]",
            "ldr r7, str.8g9g_W_U:gLB:W_g_ggj_eCB__g_g__",
            "ldr r5, [r4, 0x294]",
            "add r7, pc, r7",
            "cmp r5, 0",
            "beq 0x743a8",
            "ldr r8, [r4, 0x380]",
            "cmp r8, 1",
            "bne 0x743b4",
            "ldr r0, [r4, 0x2e8]",
            "mov r6, 0",
            "add r0, r0, 0x16",
            "str r6, [r4, 0x380]",
            "lsl r0, r0, 2",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "beq 0x743d4",
            "ldr r2, [r4, 0x3b0]",
            "add r3, r5, 0x58",
            "str r2, [r5, 0x1c]",
            "strb r8, [r5, 0x50]",
            "str r3, [r5, 0x14]",
            "ldr r3, [r4, 0x3b0]",
            "mov r0, r4",
            "ldr r1, [r4, 0x294]",
            "ldr r2, [r4, 0x2e8]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "mov r7, r0",
            "str r0, [r5, 0xc]",
            "beq 0x743f0",
            "add r3, r0, 0x28",
            "ldm r3, {r2, r3}",
            "stm r5, {r2, r3}",
            "str r2, [r4, 0x2b8]",
            "str r3, [r4, 0x2bc]",
            "ldr r3, [r5, 0xc]",
            "add ip, r5, 0x28",
            "ldr r3, [r3]",
            "add r7, r4, 0x298",
            "str r3, [r5, 0x10]",
            "ldr r3, [r4, 0x294]",
            "str r3, [r5, 8]",
            "ldm r7!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r7, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r3, [r4, 0x2e8]",
            "str r3, [r5, 0x48]",
            "str r6, [r4, 0x3b8]",
            "str r6, [r4, 0x294]",
            "str r6, [r4, 0x2a0]",
            "str r6, [r4, 0x29c]",
            "str r6, [r4, 0x298]",
            "str r6, [r4, 0x2a4]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x00074404]",
            "mov r0, r4",
            "ldr r3, [r7, r3]",
            "ldr r1, [0x00074408]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r5, 0",
            "b 0x743a8",
            "ldr r3, [0x00074404]",
            "mov r0, r4",
            "ldr r3, [r7, r3]",
            "ldr r1, [0x0007440c]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "b 0x743a8",
            "mov r0, r5",
            "bl rsym.my_no_flags_free",
            "mov r5, r7",
            "b 0x743a8"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::BER_Decoder__": {
        "function_address": "0x0009d5d0",
        "instructions": [
            "ldr ip, [0x0009d60c]",
            "ldr r3, [0x0009d610]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d614]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d618]",
            "ldr r0, [0x0009d61c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Block_unsigned_int__TaoCrypt::AllocatorWithCleanup_unsigned_int___::CleanNew_unsigned_int_": {
        "function_address": "0x000acf44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 4]",
            "mov r5, r1",
            "mov r4, r0",
            "ldr r2, [r0]",
            "sub sp, sp, 8",
            "mov r1, r3",
            "mov r6, 0",
            "mov r3, r5",
            "add r0, r0, 8",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "mov r1, r6",
            "lsl r2, r5, 2",
            "bl sym.imp.memset",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_SHA::HMAC_SHA__": {
        "function_address": "0x0007d2a0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d2e4]",
            "ldr r3, [0x0007d2e8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_SHA12HMAC_SHAImplEEEvPT_",
            "ldr r3, [0x0007d2ec]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::MultiplyByPower2Mod_unsigned_int__unsigned_int_const__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a4e4c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [sp, 0x20]",
            "mov r4, r0",
            "cmp r5, 0",
            "mov r6, r2",
            "mov sl, r3",
            "beq 0xa4e88",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r0, [r1, r3]",
            "add r2, r2, 1",
            "cmp r5, r2",
            "str r0, [r4, r3]",
            "add r3, r3, 4",
            "bhi 0xa4e70",
            "sub r8, r5, 0xc0000001",
            "lsl r8, r8, 2",
            "cmp r6, 0",
            "add r7, sl, r8",
            "add r8, r4, r8",
            "beq 0xa4efc",
            "cmp r5, 0",
            "movne r3, 0",
            "movne r0, r3",
            "movne r2, r3",
            "beq 0xa4f04",
            "ldr r1, [r4, r3]",
            "add r2, r2, 1",
            "orr r0, r0, r1, lsl 1",
            "cmp r5, r2",
            "str r0, [r4, r3]",
            "lsr r0, r1, 0x1f",
            "add r3, r3, 4",
            "bhi 0xa4eb4",
            "cmp r0, 0",
            "beq 0xa4f04",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, sl",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "sub r6, r6, 1",
            "cmp r6, 0",
            "bne 0xa4ea0",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r1, r8",
            "mov r2, r7",
            "mov r3, r5",
            "cmp r3, 0",
            "beq 0xa4edc",
            "ldr ip, [r1]",
            "ldr r0, [r2]",
            "sub r3, r3, 1",
            "cmp ip, r0",
            "bhi 0xa4edc",
            "sub r1, r1, 4",
            "sub r2, r2, 4",
            "bhs 0xa4f10",
            "sub r6, r6, 1",
            "b 0xa4ef4"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::Alert_const_": {
        "function_address": "0x0008c99c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r6, [0x0008c9dc]",
            "mov r5, r1",
            "mov r1, r6",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r5, 4]",
            "mov r1, r6",
            "strb r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r5, 8]",
            "strb r3, [r0]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_new": {
        "function_address": "0x00086618",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r1, 0",
            "mov r0, 0x9e0",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r5",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3SSLC1EPNS_7SSL_CTXE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL3SSLC1EPNS_7SSL_CTXE": {
        "function_address": "0x000409fc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x8fc]!"
        ]
    },
    "sym.my_message_no_curses": {
        "function_address": "0x0004a708",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0004a7b8]",
            "ldr r3, [0x0004a7bc]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r2",
            "ldr r0, [r3]",
            "mov r6, r1",
            "bl sym.imp.fflush",
            "tst r5, 4",
            "bne 0x4a7a0",
            "ldr r5, [0x0004a7c0]",
            "ldr r3, [0x0004a7c4]",
            "ldr r3, [r4, r3]",
            "ldr r0, [r3]",
            "cmp r0, 0",
            "beq 0x4a770",
            "ldr r7, [r4, r5]",
            "ldr r1, [r7]",
            "bl sym.imp.fputs",
            "ldr r0, [0x0004a7c8]",
            "ldr r3, [r7]",
            "add r0, r4, r0",
            "mov r1, 1",
            "mov r2, 2",
            "bl sym.imp.fwrite",
            "ldr r4, [r4, r5]",
            "mov r0, r6",
            "ldr r1, [r4]",
            "bl sym.imp.fputs",
            "ldr r1, [r4]",
            "mov r0, 0xa",
            "bl sym.imp.fputc",
            "ldr r0, [r4]",
            "bl sym.imp.fflush",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r5, [0x0004a7c0]",
            "mov r0, 7",
            "ldr r3, [r4, r5]",
            "ldr r1, [r3]",
            "bl sym.imp.fputc",
            "b 0x4a738"
        ]
    },
    "method.mySTL::pair_int__yaSSL.ServerKeyBase_______mySTL::GetArrayMemory_mySTL::pair_int__yaSSL::ServerKeyBase_________unsigned_int_": {
        "function_address": "0x0008a028",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "lsl r0, r0, 3",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::FortezzaKeys::FortezzaKeys__": {
        "function_address": "0x00090be4",
        "instructions": [
            "ldr ip, [0x00090c20]",
            "ldr r3, [0x00090c24]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090c28]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090c2c]",
            "ldr r0, [0x00090c30]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CertificateRequest::CertificateRequest__": {
        "function_address": "0x0008ae7c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008aed4]",
            "ldr r3, [0x0008aed8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "mov r5, r0",
            "str r3, [r0]",
            "ldr r0, [r6, 0x28]!",
            "mov r1, 0",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPhE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_S8_S7_",
            "mov r0, r6",
            "bl rsym._ZN5mySTL4listIPhED1Ev",
            "ldr r3, [0x0008aedc]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000927b4": {
        "function_address": "0x000927b4",
        "instructions": [
            "mov r3, 0",
            "push {r4, lr}",
            "str r3, [r0, 8]",
            "mov r4, r0",
            "str r3, [r0]",
            "str r3, [r0, 4]",
            "add r0, r0, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN5yaSSL11CertManagerC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_b_append": {
        "function_address": "0x000547ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "add r7, r0, 0x38",
            "mov r4, r0",
            "mov r0, r7",
            "mov r5, r2",
            "mov r6, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r0, [r4, 0x28]",
            "ldr r8, [r4, 0x2c]",
            "rsb r8, r0, r8",
            "cmp r8, r5",
            "bhs 0x5485c",
            "mov r1, r6",
            "mov r2, r8",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x28]",
            "mov r0, r4",
            "add r3, r3, r8",
            "str r3, [r4, 0x28]",
            "mov r1, 0",
            "bl rsym.my_b_flush_io_cache",
            "cmp r0, 0",
            "bne 0x548d8",
            "rsb r5, r8, r5",
            "cmp r5, 0x1000",
            "add r6, r6, r8",
            "ldrlo r0, [r4, 0x28]",
            "bhs 0x54888",
            "mov r2, r5",
            "mov r1, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x28]",
            "mov r0, r7",
            "add r5, r3, r5",
            "str r5, [r4, 0x28]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r4, 0x9c]",
            "bic r8, r5, 0xff0",
            "bic r8, r8, 0xf",
            "orr r3, r3, 4",
            "ldr r0, [r4, 0x88]",
            "mov r1, r6",
            "mov r2, r8",
            "bl rsym.my_write",
            "cmp r0, 0",
            "bne 0x548e8",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "adds r2, r0, r8",
            "adc r3, r1, 0",
            "str r2, [r4, 8]",
            "str r3, [r4, 0xc]",
            "ldr r0, [r4, 0x28]",
            "rsb r5, r8, r5",
            "add r6, r6, r8",
            "b 0x5485c",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 1",
            "b 0x54880",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "mvn r0, 0",
            "str r0, [r4, 0x90]",
            "b 0x54880"
        ]
    },
    "sym.yaSSL_CTX_set_verify": {
        "function_address": "0x00085c30",
        "instructions": [
            "tst r1, 1",
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r2",
            "mov r5, r0",
            "bne 0x85c7c",
            "cmp r1, 0",
            "beq 0x85c74",
            "tst r4, 2",
            "beq 0x85c60",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL7SSL_CTX13setFailNoCertEv",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL7SSL_CTX17setVerifyCallbackEPFiiPNS_14X509_STORE_CTXEE",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN5yaSSL7SSL_CTX13setVerifyNoneEv",
            "b 0x85c60",
            "bl rsym._ZN5yaSSL7SSL_CTX13setVerifyPeerEv",
            "tst r4, 2",
            "bne 0x85c58",
            "b 0x85c60"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX13setFailNoCertEv": {
        "function_address": "0x0003ec20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xce4]!"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX17setVerifyCallbackEPFiiPNS_14X509_STORE_CTXEE": {
        "function_address": "0x0003efec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa5c]!"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX13setVerifyNoneEv": {
        "function_address": "0x0003db28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x834]!"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX13setVerifyPeerEv": {
        "function_address": "0x0003e134",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x42c]!"
        ]
    },
    "fcn.0007d7d0": {
        "function_address": "0x0007d7d0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0007d864]",
            "ldr r3, [0x0007d868]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x370",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r2, [0x0007d86c]",
            "mov r1, 8",
            "ldr r2, [r4, r2]",
            "add r6, r0, 0x20",
            "mov r3, 1",
            "add r2, r2, r1",
            "add r7, r0, 0x10",
            "add r4, r0, 0x1c8",
            "add ip, r0, 0x1d8",
            "str r6, [r0, 0xc]",
            "mov r6, 0",
            "str r7, [r0, 8]",
            "str r6, [r0, 0x30]",
            "str r1, [r0, 0x1bc]",
            "str r4, [r0, 0x1c0]",
            "str ip, [r0, 0x1c4]",
            "str r3, [r0, 0x1ec]",
            "str r2, [r0, 0x1b8]",
            "str r0, [r5, 4]",
            "str r1, [r0, 4]",
            "str r3, [r0, 0x34]",
            "str r2, [r0]",
            "str r3, [r0, 0x1e8]",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::X509_NAME::X509_NAME__": {
        "function_address": "0x00092260",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIcEEvPT_",
            "ldr r0, [r4, 0x10]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_SHA::HMAC_SHA_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007ee24",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007eec8]",
            "ldr r3, [0x0007eecc]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x114",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007eed0]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_list_processes": {
        "function_address": "0x00044c84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, 0",
            "sub sp, sp, 0x18",
            "str r3, [sp]",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "ldr ip, [r0, 0x3b0]",
            "mov r1, 0xa",
            "mov r4, r0",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x44cd4",
            "mov r0, 0",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym.free_old_query",
            "ldr r3, [r4, 0x10]",
            "add r0, sp, 0x18",
            "str r3, [r0, -4]!",
            "bl rsym.net_field_length",
            "ldr r2, [r4, 0x2e0]",
            "mov r5, r0",
            "tst r2, 0x200",
            "movne r2, 7",
            "moveq r2, 5",
            "ldr r3, [r4, 0x3b0]",
            "mov r0, r4",
            "mov r1, r6",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x44cc4",
            "ldr ip, [r4, 0x2e0]",
            "mov r3, r6",
            "add r1, r4, 0x298",
            "mov r2, r5",
            "str ip, [sp]",
            "bl rsym.unpack_fields",
            "cmp r0, 0",
            "str r0, [r4, 0x294]",
            "beq 0x44cc4",
            "mov r3, 1",
            "str r3, [r4, 0x380]",
            "str r5, [r4, 0x2e8]",
            "mov r0, r4",
            "bl rsym.mysql_store_result",
            "b 0x44cc8"
        ]
    },
    "fcn.0008f35c": {
        "function_address": "0x0008f35c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f3c4]",
            "ldr r3, [0x0008f3c8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x24]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r5, 0x1c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add r0, r5, 4",
            "bl rsym._ZN5yaSSL14ServerDHParamsD1Ev",
            "ldr r3, [0x0008f3cc]",
            "ldr r0, [0x0008f3d0]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f3d4]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f3d8]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_CTX_sess_misses": {
        "function_address": "0x00085b3c",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x24]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::output_buffer_::pop_back__": {
        "function_address": "0x000886c4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x8870c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_unsigned_char_::pop_front__": {
        "function_address": "0x0008721c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x87264",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.packfrm": {
        "function_address": "0x000501b4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 8",
            "mov r4, r1",
            "add r1, sp, 8",
            "str r4, [r1, -4]!",
            "mov sb, r2",
            "mov r2, sp",
            "mov r7, r3",
            "mov r8, r0",
            "bl rsym.my_compress",
            "subs r6, r0, 0",
            "movne r0, 1",
            "beq 0x501f4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr sl, [sp, 4]",
            "mov r1, 0x10",
            "add sl, sl, 0xc",
            "mov r0, sl",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "moveq r0, 2",
            "beq 0x501e8",
            "lsr r3, r4, 0x18",
            "lsr r1, r4, 8",
            "lsr r2, r4, 0x10",
            "mov r0, 1",
            "strb r0, [r5]",
            "strb r1, [r5, 5]",
            "strb r2, [r5, 6]",
            "strb r3, [r5, 7]",
            "strb r6, [r5, 1]",
            "strb r6, [r5, 2]",
            "strb r6, [r5, 3]",
            "strb r4, [r5, 4]",
            "ldr r3, [sp, 4]",
            "mov r1, r8",
            "strb r3, [r5, 8]",
            "ldr r3, [sp, 4]",
            "add r0, r5, 0xc",
            "lsr r3, r3, 8",
            "strb r3, [r5, 9]",
            "ldrh r3, [sp, 6]",
            "strb r3, [r5, 0xa]",
            "ldrb r3, [sp, 7]",
            "strb r3, [r5, 0xb]",
            "ldr r2, [sp, 4]",
            "bl sym.imp.memcpy",
            "str r5, [sb]",
            "mov r0, r6",
            "str sl, [r7]",
            "b 0x501e8"
        ]
    },
    "sym.TaoCrypt::PositiveAdd_TaoCrypt::Integer__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000aa8a4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r1]",
            "mov r5, r2",
            "ldr r2, [r2]",
            "ldr r7, [0x000aab40]",
            "cmp r3, r2",
            "sub sp, sp, 8",
            "mov r6, r1",
            "add r7, pc, r7",
            "mov r4, r0",
            "beq 0xaaadc",
            "bls 0xaaa14",
            "mov r3, r2",
            "ldr r0, [r0, 4]",
            "ldr r1, [r1, 4]",
            "ldr r2, [r5, 4]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "ldr sl, [r5]",
            "ldr sb, [r6]",
            "ldr r8, [r4, 4]",
            "ldr ip, [r6, 4]",
            "subs sb, sb, sl",
            "lsl sl, sl, 2",
            "add ip, ip, sl",
            "add sl, r8, sl",
            "beq 0xaab1c",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [ip, r3]",
            "add r2, r2, 1",
            "cmp sb, r2",
            "str r1, [sl, r3]",
            "add r3, r3, 4",
            "bhi 0xaa914",
            "ldr r2, [r5]",
            "ldr ip, [r6]",
            "subs ip, ip, r2",
            "beq 0xaab1c",
            "ldr r1, [r8, r2, lsl 2]",
            "add r3, r8, r2, lsl 2",
            "add r0, r0, r1",
            "cmp r1, r0",
            "str r0, [r8, r2, lsl 2]",
            "bls 0xaaa00",
            "cmp ip, 1",
            "beq 0xaa99c",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xaa990",
            "b 0xaaa00",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xaaa00",
            "add r2, r2, 1",
            "cmp ip, r2",
            "bhi 0xaa978",
            "ldr r2, [r4]",
            "lsl r5, r2, 1",
            "cmp r5, r2",
            "movls r5, r2",
            "bls 0xaa9e8",
            "ldr r1, [r4, 4]",
            "mov ip, 1",
            "mov r3, r5",
            "add r0, r4, 8",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "ldr r3, [r4]",
            "str r0, [r4, 4]",
            "rsb r2, r3, r5",
            "add r0, r0, r3, lsl 2",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "str r5, [r4]",
            "lsr r3, r5, 1",
            "cmp r3, r5",
            "bhs 0xaaaf8",
            "ldr r2, [r4, 4]",
            "mov r1, 1",
            "str r1, [r2, r3, lsl 2]",
            "mov r3, 0",
            "str r3, [r4, 0xc]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r0, [r0, 4]",
            "ldr r1, [r1, 4]",
            "ldr r2, [r5, 4]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "ldr sl, [r6]",
            "ldr sb, [r5]",
            "ldr r8, [r4, 4]",
            "ldr ip, [r5, 4]",
            "subs sb, sb, sl",
            "lsl sl, sl, 2",
            "add ip, ip, sl",
            "add sl, r8, sl",
            "beq 0xaab1c",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [ip, r3]",
            "add r2, r2, 1",
            "cmp sb, r2",
            "str r1, [sl, r3]",
            "add r3, r3, 4",
            "bhi 0xaaa50",
            "ldr r2, [r6]",
            "ldr ip, [r5]",
            "subs ip, ip, r2",
            "beq 0xaab1c",
            "ldr r1, [r8, r2, lsl 2]",
            "add r3, r8, r2, lsl 2",
            "add r0, r0, r1",
            "cmp r1, r0",
            "str r0, [r8, r2, lsl 2]",
            "bls 0xaaa00",
            "cmp ip, 1",
            "beq 0xaa99c",
            "ldr r2, [r3, 4]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r3, 4]",
            "moveq r2, 1",
            "beq 0xaaacc",
            "b 0xaaa00",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xaaa00",
            "add r2, r2, 1",
            "cmp ip, r2",
            "bhi 0xaaab4",
            "b 0xaa99c",
            "ldr r1, [r1, 4]",
            "ldr r2, [r5, 4]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r0, 0",
            "beq 0xaaa00",
            "b 0xaa99c",
            "ldr r3, [0x000aab44]",
            "ldr r1, [0x000aab48]",
            "ldr r0, [0x000aab4c]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000aab44]",
            "ldr r1, [0x000aab50]",
            "ldr r0, [0x000aab54]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x8c0",
            "mov r2, 0x1ec",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.vio_close": {
        "function_address": "0x0007a1a8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [r0, 0x30]",
            "mov r4, r0",
            "cmp r5, 0",
            "beq 0x7a1e0",
            "mov r1, 2",
            "ldr r0, [r0]",
            "bl sym.imp.shutdown",
            "subs r5, r0, 0",
            "ldr r0, [r4]",
            "mvnne r5, 0",
            "bl sym.imp.close",
            "cmp r0, 0",
            "mvnne r5, 0",
            "mvn r3, 0",
            "str r3, [r4]",
            "mov r3, 0",
            "str r3, [r4, 0x30]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.shutdown": {
        "function_address": "0x0003efb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa84]!"
        ]
    },
    "sym.TaoCrypt::PublicKey::SetSize_unsigned_int_": {
        "function_address": "0x0009a228",
        "instructions": [
            "str r1, [r0, 4]",
            "push {r4, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "str r0, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.00084c28": {
        "function_address": "0x00084c28",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl sym.imp.pthread_mutex_destroy",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientKeyExchange::ClientKeyExchange_yaSSL::SSL_": {
        "function_address": "0x0008f038",
        "instructions": [
            "ldr r3, [0x0008f068]",
            "ldr r2, [0x0008f06c]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "bl rsym._ZN5yaSSL17ClientKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HASHwithTransform::HASHwithTransform_unsigned_int__unsigned_int_": {
        "function_address": "0x000a2278",
        "instructions": [
            "ldr ip, [0x000a22f4]",
            "ldr r3, [0x000a22f8]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "cmp r1, 8",
            "add r3, r3, 8",
            "push {r4, lr}",
            "str r3, [r0]",
            "bhi 0xa22ac",
            "cmp r2, 0x40",
            "bhi 0xa22d0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x000a22fc]",
            "ldr r1, [0x000a2300]",
            "ldr r0, [0x000a2304]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x22",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a22fc]",
            "ldr r1, [0x000a2300]",
            "ldr r0, [0x000a2308]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xb0",
            "mov r2, 0x23",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CreateAlert__": {
        "function_address": "0x0008b40c",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, fcn.0011c9f4",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b440]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::CertManager__": {
        "function_address": "0x0007c540",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r0, 0x38]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4X509EEEvPT_",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r0, [r4, 0x44]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN8TaoCrypt6SignerEE8iteratorEN5yaSSL12del_ptr_zeroEEET0_T_SA_S9_",
            "mov r5, r4",
            "mov r1, r6",
            "mov r2, 0",
            "ldr r0, [r4, 0x1c]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "ldr r0, [r5], 0x44",
            "mov r1, r6",
            "mov r2, 0",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL4x509EE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL4listIPN8TaoCrypt6SignerEED1Ev",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add r0, r4, 0x1c",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL4x509EED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DiffieHellman::DiffieHellman_yaSSL::Integer_const__yaSSL::Integer_const__yaSSL::RandomPool_const_": {
        "function_address": "0x0007eae8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "mov r6, r2",
            "mov r8, r3",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "add r7, r0, 0x10",
            "mov sl, r0",
            "ldr r8, [r8]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r3, 0",
            "ldr r6, [r6]",
            "str r3, [sl, 0x2c]",
            "str r3, [sl, 0x24]",
            "str r3, [sl, 0x28]",
            "ldr r1, [r5]",
            "str r8, [sl, 0x20]",
            "str sl, [r4]",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r6",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r0, [r4]",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r5, [r4]",
            "mov r6, r0",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x24]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r5, 0x28]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldr r3, [r4]",
            "str r0, [r5, 0x2c]",
            "ldr r1, [r3, 0x20]",
            "mov r0, r3",
            "ldr r2, [r3, 0x28]",
            "ldr r3, [r3, 0x24]",
            "bl rsym._ZN8TaoCrypt2DH15GenerateKeyPairERNS_21RandomNumberGeneratorEPhS3_",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::X509::X509_char_const__unsigned_int__char_const__unsigned_int__char_const__int__char_const__int_": {
        "function_address": "0x00094cbc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r3",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL9X509_NAMEC1EPKcj",
            "mov r1, r5",
            "ldr r2, [sp, 0x10]",
            "add r0, r4, 0x14",
            "bl rsym._ZN5yaSSL9X509_NAMEC1EPKcj",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x18]",
            "add r0, r4, 0x28",
            "bl rsym._ZN5yaSSL12StringHolderC1EPKci",
            "ldr r1, [sp, 0x1c]",
            "ldr r2, [sp, 0x20]",
            "add r0, r4, 0x34",
            "bl rsym._ZN5yaSSL12StringHolderC1EPKci",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.mySTL::list_yaSSL::output_buffer_.erase_mySTL::list_yaSSL::output_buffer_::iterator_": {
        "function_address": "0x0008873c",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x88794",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x887a8",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x8879c",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE8pop_backEv",
            "mov r0, 1",
            "b 0x88794",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9pop_frontEv",
            "mov r0, 1",
            "b 0x88794"
        ]
    },
    "sym.my_fstat": {
        "function_address": "0x0005a148",
        "instructions": [
            "mov r2, r1",
            "push {r4, lr}",
            "mov r1, r0",
            "mov r0, 3",
            "bl sym.imp.__fxstat64",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__fxstat64": {
        "function_address": "0x0003ddc8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x674]!"
        ]
    },
    "sym.TaoCrypt::RSA_Encryptor_TaoCrypt::RSA_BlockType2_::SSL_Verify_unsigned_char_const__unsigned_int__unsigned_char_const_": {
        "function_address": "0x000bbb34",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r6, r0",
            "sub sp, sp, 0x18",
            "ldr r0, [r0]",
            "mov sb, r1",
            "mov r7, r2",
            "mov r8, r3",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub r0, r0, 1",
            "lsr r0, r0, 3",
            "cmp r0, 0xa",
            "movls ip, 0",
            "strls ip, [sp, 0xc]",
            "bls 0xbbb80",
            "sub r0, r0, 0xa",
            "str r0, [sp, 0xc]",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "add r0, sp, 0x18",
            "ldr r4, [r0, -0xc]!",
            "mov r1, ip",
            "mov r3, r4",
            "mov r2, r4",
            "mov r5, 0",
            "add r0, r0, 8",
            "str ip, [sp, 0x10]",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r4",
            "mov sl, r0",
            "mov r1, r5",
            "str r4, [sp, 0xc]",
            "str r0, [sp, 0x10]",
            "bl sym.imp.memset",
            "ldr r0, [r6]",
            "mov r1, r8",
            "mov r2, sl",
            "bl rsym._ZN8TaoCrypt11SSL_DecryptERKNS_13RSA_PublicKeyEPKhPh",
            "cmp r0, r7",
            "ldrne r4, [sp, 0x10]",
            "beq 0xbbc04",
            "mov r1, 0",
            "ldr r2, [sp, 0xc]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r4, [sp, 0x10]",
            "mov r1, sb",
            "mov r2, r7",
            "mov r0, r4",
            "bl sym.imp.memcmp",
            "rsbs r5, r0, 1",
            "movlo r5, 0",
            "b 0xbbbdc"
        ]
    },
    "rsym._ZN8TaoCrypt11SSL_DecryptERKNS_13RSA_PublicKeyEPKhPh": {
        "function_address": "0x0003fad8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x314]!"
        ]
    },
    "sym.yaSSL::InitServerKeyFactory_yaSSL::Factory_yaSSL::ServerKeyBase__int__yaSSL::ServerKeyBase_______": {
        "function_address": "0x0008f7f8",
        "instructions": [
            "ldr r2, [r0, 8]",
            "ldr r3, [r0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "rsb r3, r3, r2",
            "ldr r5, [0x0008faa8]",
            "asr r3, r3, 3",
            "cmp r3, 2",
            "mov r4, r0",
            "add r5, pc, r5",
            "bls 0x8f89c",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "beq 0x8f8fc",
            "ldr r2, [0x0008faac]",
            "mov r1, 1",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldmib r4, {r2, r3}",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x8f980",
            "ldr r1, [0x0008fab0]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 2",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x8fa08",
            "ldr r2, [0x0008fab4]",
            "mov r1, 3",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldr r3, [r4, 4]",
            "add r3, r3, 8",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 3",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "asr r3, r3, 3",
            "cmp r3, 2",
            "bhi 0x8fa84",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r7, [r4]",
            "add r3, r6, 0x18",
            "ldr r1, [r4, 4]",
            "stmib r4, {r0, r3}",
            "str r6, [r4]",
            "mov r0, r7",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_",
            "mov r0, r7",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_",
            "ldr r2, [r4, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "bne 0x8f82c",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fa84",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008faac]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 1",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8f850",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fa84",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fab0]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8f878",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8fa84",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008fab4]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r3], 8",
            "ldr r5, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r5",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_",
            "b 0x8f894",
            "ldr r3, [0x0008fab8]",
            "ldr r1, [0x0008fabc]",
            "ldr r0, [0x0008fac0]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x110",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEPT_j": {
        "function_address": "0x000409c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x924]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEES8_EET0_T_SA_S9_": {
        "function_address": "0x0003ee54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb6c]!"
        ]
    },
    "rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_": {
        "function_address": "0x0003feb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x84]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_": {
        "function_address": "0x0003d6a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb34]!"
        ]
    },
    "sym.yaSSL::CreateRSAClient__": {
        "function_address": "0x0008b1e8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL24EncryptedPreMasterSecretC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL24EncryptedPreMasterSecretC1Ev": {
        "function_address": "0x0003d3b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd2c]!"
        ]
    },
    "sym.net_end": {
        "function_address": "0x0007aac0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::Data_const_": {
        "function_address": "0x0008c0f4",
        "instructions": [
            "push {r4, lr}",
            "ldrh r2, [r1, 4]",
            "mov r4, r0",
            "ldr r1, [r1, 0xc]",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.vio_should_retry": {
        "function_address": "0x0007a220",
        "instructions": [
            "push {r4, lr}",
            "bl sym.imp.__errno_location",
            "ldr r0, [r0]",
            "cmp r0, 0xb",
            "cmpne r0, 4",
            "movne r0, 0",
            "moveq r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_error": {
        "function_address": "0x00049b00",
        "instructions": [
            "push {r1, r2, r3}",
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x00049be8]",
            "ldr r3, [0x00049bec]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "sub sp, sp, 0x20c",
            "cmp r3, 0",
            "mov r4, r0",
            "beq 0x49b50",
            "ldr r2, [r3, 0xc]",
            "cmp r0, r2",
            "bgt 0x49b44",
            "b 0x49b9c",
            "ldr r2, [r3, 0xc]",
            "cmp r2, r4",
            "bge 0x49b9c",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x49b38",
            "ldr r2, [0x00049bf0]",
            "add r6, sp, 4",
            "add r2, r5, r2",
            "mov r0, r6",
            "mov r1, 0x200",
            "mov r3, r4",
            "bl rsym.my_snprintf",
            "ldr r3, [0x00049bf4]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "mov r1, r6",
            "ldr r2, [sp, 0x21c]",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x20c",
            "pop {r4, r5, r6, lr}",
            "add sp, sp, 0xc",
            "bx lr",
            "ldr r2, [r3, 8]",
            "cmp r4, r2",
            "blt 0x49b50",
            "ldr r3, [r3, 4]",
            "rsb r2, r2, r4",
            "ldr r2, [r3, r2, lsl 2]",
            "cmp r2, 0",
            "beq 0x49b50",
            "ldrb r3, [r2]",
            "cmp r3, 0",
            "beq 0x49b50",
            "add ip, sp, 0x220",
            "add r6, sp, 4",
            "mov r3, ip",
            "mov r0, r6",
            "mov r1, 0x200",
            "str ip, [sp, 0x204]",
            "bl rsym.my_vsnprintf",
            "b 0x49b6c"
        ]
    },
    "sym.TaoCrypt::DivideByPower2Mod_unsigned_int__unsigned_int_const__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a4f40",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r7, [sp, 0x20]",
            "mov r4, r0",
            "cmp r7, 0",
            "mov r5, r2",
            "mov sb, r3",
            "beq 0xa4f7c",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r0, [r1, r3]",
            "add r2, r2, 1",
            "cmp r7, r2",
            "str r0, [r4, r3]",
            "add r3, r3, 4",
            "bhi 0xa4f64",
            "sub r6, r7, 1",
            "sub sl, r7, 0xc0000001",
            "cmp r5, 0",
            "add sl, r4, sl, lsl 2",
            "add r8, r4, r6, lsl 2",
            "beq 0xa4fd4",
            "ldr r0, [r4]",
            "ands r0, r0, 1",
            "bne 0xa4fdc",
            "cmp r6, 0",
            "blt 0xa4fc8",
            "mov r2, sl",
            "mov r3, r6",
            "ldr r1, [r2]",
            "subs r3, r3, 1",
            "orr r0, r0, r1, lsr 1",
            "str r0, [r2], -4",
            "lsl r0, r1, 0x1f",
            "bpl 0xa4fb0",
            "sub r5, r5, 1",
            "cmp r5, 0",
            "bne 0xa4f94",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, sb",
            "mov r3, r7",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r6, 0",
            "blt 0xa501c",
            "mov r2, sl",
            "mov r3, r6",
            "mov ip, 0",
            "ldr r1, [r2]",
            "subs r3, r3, 1",
            "orr ip, ip, r1, lsr 1",
            "str ip, [r2], -4",
            "lsl ip, r1, 0x1f",
            "bpl 0xa5004",
            "ldr r3, [r8]",
            "sub r5, r5, 1",
            "add r0, r3, r0, lsl 31",
            "str r0, [r8]",
            "b 0xa4fcc"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::GetInteger_TaoCrypt::Integer_": {
        "function_address": "0x0009a548",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, lr}",
            "ldr r2, [r3, 0x10]",
            "mov r4, r1",
            "cmp r2, 0",
            "moveq r1, r3",
            "moveq r0, r4",
            "bleq rsym._ZN8TaoCrypt7Integer6DecodeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_long10_to_str_8bit": {
        "function_address": "0x0005ef58",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "cmp r3, 0",
            "sub sp, sp, 0x48",
            "mov r3, 0",
            "strb r3, [sp, 0x45]",
            "ldr r3, [sp, 0x58]",
            "blt 0x5f004",
            "mov r5, 0",
            "ldr lr, [0x0005f024]",
            "add r0, r3, 0x30",
            "umull r4, ip, lr, r3",
            "lsr ip, ip, 3",
            "cmp ip, 0",
            "add r3, ip, ip, lsl 2",
            "sub r3, r0, r3, lsl 1",
            "addeq r6, sp, 4",
            "strb r3, [sp, 0x44]",
            "addeq r3, r6, 0x40",
            "beq 0x5efd4",
            "add r6, sp, 4",
            "ldr r4, [0x0005f028]",
            "add r3, r6, 0x40",
            "smull r0, lr, r4, ip",
            "asr r0, ip, 0x1f",
            "rsb r0, r0, lr, asr 2",
            "add ip, ip, 0x30",
            "add lr, r0, r0, lsl 2",
            "sub lr, ip, lr, lsl 1",
            "subs ip, r0, 0",
            "strb lr, [r3, -1]!",
            "bne 0x5efb0",
            "add r4, r6, 0x41",
            "rsb r4, r3, r4",
            "cmp r4, r2",
            "movhs r4, r2",
            "mov r0, r1",
            "mov r2, r4",
            "mov r1, r3",
            "bl sym.imp.memcpy",
            "add r0, r4, r5",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "cmp r3, 0",
            "bge 0x5ef74",
            "mov r0, 0x2d",
            "strb r0, [r1], 1",
            "rsb r3, r3, 0",
            "sub r2, r2, 1",
            "mov r5, 1",
            "b 0x5ef78"
        ]
    },
    "sym.yaSSLv23_client_method": {
        "function_address": "0x00086670",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 2",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 1",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, r1",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::vector_TaoCrypt::Integer__mySTL::GetArrayMemory_mySTL::vector_TaoCrypt::Integer____unsigned_int_": {
        "function_address": "0x000bab74",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, r0, lsl 1",
            "mov r1, 0",
            "lsl r0, r0, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.convert_dirname": {
        "function_address": "0x0004a800",
        "instructions": [
            "cmp r2, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "beq 0x4a860",
            "ldr r3, [0x0004a868]",
            "rsb r2, r1, r2",
            "cmp r2, r3",
            "bgt 0x4a860",
            "mov r0, r4",
            "bl rsym.strmake",
            "cmp r4, r0",
            "beq 0x4a854",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0",
            "cmpne r3, 0x2f",
            "movne r3, 0x2f",
            "movne r4, r0",
            "strbne r3, [r4], 1",
            "movne r3, 0",
            "moveq r4, r0",
            "strbne r3, [r0, 1]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr",
            "ldr r2, [pc]",
            "b 0x4a820"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::Square_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a8028",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r3, [r1]",
            "ldr r5, [r0, 0xc]",
            "ldr r2, [0x000a80f0]",
            "cmp r5, r3",
            "add r2, pc, r2",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r7, r1",
            "ldr r6, [r0, 0x50]",
            "ldr sl, [r0, 0x20]",
            "blo 0xa80c8",
            "add r8, r6, r5, lsl 3",
            "mov r1, r8",
            "ldr r2, [r7, 4]",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt15RecursiveSquareEPjS0_PKjj",
            "ldr r1, [r7]",
            "rsb r2, r1, r5",
            "lsls r2, r2, 1",
            "add r1, r6, r1, lsl 3",
            "beq 0xa8098",
            "mov r3, 0",
            "mov r0, r3",
            "str r0, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r2, r3",
            "bhi 0xa8088",
            "ldr ip, [r4, 0x40]",
            "ldr r3, [r4, 0x10]",
            "mov r0, sl",
            "mov r1, r8",
            "mov r2, r6",
            "str ip, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt16MontgomeryReduceEPjS0_PKjS2_S2_j",
            "add r0, r4, 0x1c",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [0x000a80f4]",
            "ldr r1, [0x000a80f8]",
            "add r3, r2, r3",
            "ldr r0, [0x000a80fc]",
            "add r3, r3, 0xb50",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a8100]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt15RecursiveSquareEPjS0_PKjj": {
        "function_address": "0x0003f5e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x664]!"
        ]
    },
    "sym.mysql_stmt_send_long_data": {
        "function_address": "0x00043304",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr ip, [r0, 0xa4]",
            "ldr r5, [0x0004344c]",
            "cmp ip, r1",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "add r5, pc, r5",
            "bls 0x433e4",
            "ldr r7, [r0, 0x30]",
            "add r7, r7, r1, lsl 6",
            "ldr r0, [r7, 0x34]",
            "sub r0, r0, 0xf9",
            "cmp r0, 5",
            "bhi 0x43404",
            "cmp r3, 0",
            "bne 0x43350",
            "ldrb r0, [r7, 0x3a]",
            "cmp r0, 0",
            "bne 0x433dc",
            "ldr r0, [r4, 0x90]",
            "ldr r6, [r4, 0x2c]",
            "lsr ip, r1, 8",
            "lsr lr, r0, 0x18",
            "lsr sl, r0, 8",
            "lsr r8, r0, 0x10",
            "mov r5, 1",
            "strb r0, [sp, 0x10]",
            "strb r1, [sp, 0x14]",
            "strb sl, [sp, 0x11]",
            "strb r8, [sp, 0x12]",
            "strb lr, [sp, 0x13]",
            "strb ip, [sp, 0x15]",
            "strb r5, [r7, 0x3a]",
            "ldr ip, [r6, 0x3b0]",
            "mov r0, r6",
            "stm sp, {r2, r3, r5}",
            "str r4, [sp, 0xc]",
            "mov r1, 0x18",
            "add r2, sp, 0x10",
            "mov r3, 6",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0x433dc",
            "ldr r3, [r4, 0x2c]",
            "cmp r3, 0",
            "movne r0, r4",
            "movne r1, r6",
            "blne rsym.set_stmt_errmsg",
            "mov r0, r5",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x433d0",
            "ldr r3, [0x00043450]",
            "ldr r1, [0x00043454]",
            "ldr r2, [r5, r3]",
            "mov r3, 0",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x433d0",
            "ldr r3, [0x00043450]",
            "add r0, r4, 0x2b0",
            "ldr r3, [r5, r3]",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r2, [0x00043458]",
            "ldr r3, [0x0004345c]",
            "str r2, [r4, 0xa0]",
            "ldr r3, [r5, r3]",
            "ldr ip, [r7, 0x2c]",
            "ldr r3, [r3, 0x8c]",
            "add r0, r4, 0xb0",
            "mov r1, 1",
            "mvn r2, 0",
            "str ip, [sp]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x433d0"
        ]
    },
    "sym.yaSSL::DES::encrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00080998",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r4, 0x34]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "bne 0x80a0c",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80a00",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x809cc",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x80a00",
            "ldr r2, [r4, 0x30]",
            "cmp r2, 0",
            "bne 0x80a8c",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80a00",
            "ldr r2, [r4, 4]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r7, r7, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80a38",
            "b 0x80a00",
            "mov r0, r3",
            "ldr r1, [r4, 4]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80a00",
            "ldr r2, [r4, 4]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80aa8",
            "b 0x80a00"
        ]
    },
    "sym.yaSSL::HMAC_MD5::HMAC_MD5_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007ec94",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x0007ed38]",
            "ldr r3, [0x0007ed3c]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r6, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov sl, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r0, 0x110",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r3, r0",
            "add r2, r0, 0x80",
            "str r2, [r3], 0xc0",
            "add r7, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 4",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "mov r2, 0x40",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007ed40]",
            "mov r0, r7",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3MD54InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE4InitEv",
            "mov r0, r4",
            "str r4, [r6, 4]",
            "mov r1, sl",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE6SetKeyEPKhj",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HASH64withTransform::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000a2490",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r2",
            "ldr r2, [0x000a2640]",
            "sub sp, sp, 0x1c",
            "mov sl, r0",
            "ldr r3, [sl], 0x50",
            "str r2, [sp]",
            "mov r6, r0",
            "mov r7, r1",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp]",
            "cmp r5, 0",
            "add r3, pc, r3",
            "str r3, [sp]",
            "mov r8, r0",
            "beq 0xa260c",
            "and r2, r8, 7",
            "ldr r0, [r6, 4]",
            "str r2, [sp, 4]",
            "lsr sb, r8, 3",
            "mov fp, 0",
            "b 0xa24f8",
            "subs r5, r5, r4",
            "beq 0xa260c",
            "rsb r4, r0, r8",
            "cmp r4, r5",
            "movhs r4, r5",
            "mov r1, r7",
            "add r0, sl, r0",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "ldr r0, [r6, 4]",
            "add r7, r7, r4",
            "add r0, r4, r0",
            "cmp r8, r0",
            "str r0, [r6, 4]",
            "bne 0xa24f0",
            "ldr r3, [r6]",
            "mov r0, r6",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "beq 0xa25dc",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bne 0xa2618",
            "cmp sb, 0",
            "beq 0xa25dc",
            "ldr lr, [sp, 4]",
            "mov r3, sl",
            "str sl, [sp, 0x14]",
            "str r4, [sp, 0x10]",
            "mov sl, r5",
            "ldm r3, {r0, r2}",
            "bic ip, r0, 0xff0000",
            "bic r1, r2, 0xff0000",
            "bic ip, ip, 0xff",
            "bic r0, r0, 0xff000000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "lsr r1, r1, 8",
            "bic r0, r0, 0xff00",
            "lsr ip, ip, 8",
            "bic r2, r2, 0xff00",
            "orr r0, ip, r0, lsl 8",
            "orr r2, r1, r2, lsl 8",
            "ror r5, r0, 0x10",
            "ror r2, r2, 0x10",
            "add lr, lr, 1",
            "mov r4, 0",
            "orr r0, r4, r2",
            "mov r1, r5",
            "cmp sb, lr",
            "stm r3!, {r0, r1}",
            "bhi 0xa2570",
            "str r4, [sp, 8]",
            "str r5, [sp, 0xc]",
            "mov r5, sl",
            "ldr r4, [sp, 0x10]",
            "ldr sl, [sp, 0x14]",
            "ldr r3, [r6]",
            "mov r0, r6",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN8TaoCrypt19HASH64withTransform9AddLengthEj",
            "subs r5, r5, r4",
            "str fp, [r6, 4]",
            "mov r0, fp",
            "bne 0xa24f8",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp]",
            "ldr r3, [0x000a2644]",
            "ldr r1, [0x000a2648]",
            "ldr r0, [0x000a264c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x15c",
            "ldr r2, [0x000a2650]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::DSS::get_signatureLength___const": {
        "function_address": "0x0007db8c",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey15SignatureLengthEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt13DSA_PublicKey15SignatureLengthEv": {
        "function_address": "0x0003cfc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xfcc]!"
        ]
    },
    "sym.yaSSL::CertificateVerify::Build_yaSSL::SSL_": {
        "function_address": "0x0008c38c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r1",
            "add r7, r0, 8",
            "sub sp, sp, 0x54",
            "mov r1, r7",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL16build_certHashesERNS_3SSLERNS_6HashesE",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 1",
            "beq 0x8c4b0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "mov r8, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv",
            "add r7, sp, 0x44",
            "mov r2, r0",
            "mov r1, r8",
            "mov r0, r7",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL3DSSC1EPKhjb",
            "mov r0, 0x30",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "subs r6, r0, 0",
            "moveq sl, 2",
            "moveq r8, sl",
            "beq 0x8c420",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add r8, r6, 2",
            "mov sl, r8",
            "add sb, sp, 0x4c",
            "mov r0, 0x2e",
            "mov r1, sb",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, sb",
            "mov r2, 2",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r3, 0x14",
            "add r5, sp, r3",
            "add r2, r4, 0x18",
            "str r0, [sp]",
            "mov r1, r8",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3DSS4signEPhPKhjRKNS_10RandomPoolE",
            "mov r1, r5",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt19EncodeDSA_SignatureEPKhPh",
            "mov r1, r5",
            "mov r2, 0x2e",
            "mov r0, sl",
            "bl sym.imp.memcpy",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3DSSD1Ev",
            "mov r1, 0x30",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "str r6, [r4, 0x2c]",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add sp, sp, 0x54",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv",
            "add r8, sp, 0x14",
            "mov r2, r0",
            "mov r1, sl",
            "mov r3, 0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL3RSA16get_cipherLengthEv",
            "lsl r0, r0, 0x10",
            "add sl, r0, 0x20000",
            "lsr sl, sl, 0x10",
            "lsr fp, r0, 0x10",
            "mov r1, 0",
            "mov r0, sl",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "subs r6, r0, 0",
            "moveq r3, 2",
            "streq r3, [sp, 0xc]",
            "beq 0x8c520",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add r3, r6, 2",
            "str r3, [sp, 0xc]",
            "add sb, sp, 0x4c",
            "mov r0, fp",
            "mov r1, sb",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, sb",
            "mov r2, 2",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "ldr r1, [sp, 0xc]",
            "str r0, [sp]",
            "mov r2, r7",
            "mov r3, 0x24",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSA4signEPhPKhjRKNS_10RandomPoolE",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "mov r1, sl",
            "b 0x8c490"
        ]
    },
    "rsym._ZN5yaSSL3DSS4signEPhPKhjRKNS_10RandomPoolE": {
        "function_address": "0x0003ed7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbfc]!"
        ]
    },
    "rsym._ZN8TaoCrypt19EncodeDSA_SignatureEPKhPh": {
        "function_address": "0x0003fa48",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x374]!"
        ]
    },
    "rsym._ZN5yaSSL3RSA4signEPhPKhjRKNS_10RandomPoolE": {
        "function_address": "0x0003d8a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9e4]!"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::GetSequence__": {
        "function_address": "0x0009ac70",
        "instructions": [
            "ldr r0, [r0, 4]",
            "ldr r2, [0x0009acf4]",
            "ldr r3, [r0, 0x10]",
            "push {r4, lr}",
            "cmp r3, 0",
            "add r2, pc, r2",
            "beq 0x9ac98",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr ip, [r0]",
            "add r1, r3, 1",
            "cmp r3, ip",
            "str r1, [r0, 0xc]",
            "bhs 0x9acd0",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 0x30",
            "movne r3, 0x3fc",
            "strne r3, [r0, 0x10]",
            "bne 0x9ac8c",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [0x0009acf8]",
            "ldr r1, [0x0009acfc]",
            "ldr r0, [0x0009ad00]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::SHA::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dd24",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::HASH64withTransform::HASH64withTransform_unsigned_int__unsigned_int_": {
        "function_address": "0x000a20bc",
        "instructions": [
            "ldr ip, [0x000a2138]",
            "ldr r3, [0x000a213c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "cmp r1, 8",
            "add r3, r3, 8",
            "push {r4, lr}",
            "str r3, [r0]",
            "bhi 0xa20f0",
            "cmp r2, 0x80",
            "bhi 0xa2114",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x000a2140]",
            "ldr r1, [0x000a2144]",
            "ldr r0, [0x000a2148]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x74",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a2140]",
            "ldr r1, [0x000a2144]",
            "ldr r0, [0x000a214c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x75",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0008a5b4": {
        "function_address": "0x0008a5b4",
        "instructions": [
            "ldr r3, [0x0008a5f4]",
            "ldr r2, [0x0008a5f8]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0], 4",
            "bl rsym._ZN5yaSSL14ServerDHParamsC1Ev",
            "mov r3, 0",
            "str r3, [r4, 0x24]",
            "str r3, [r4, 0x1c]",
            "str r3, [r4, 0x20]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.multi_alloc_root": {
        "function_address": "0x0004c228",
        "instructions": [
            "push {r0, r1, r2, r3}",
            "push {r4, lr}",
            "sub sp, sp, 8",
            "ldr r1, [sp, 0x14]",
            "add r4, sp, 0x14",
            "add r3, r4, 4",
            "cmp r1, 0",
            "str r3, [sp, 4]",
            "beq 0x4c278",
            "add r3, r4, 0xc",
            "mov r1, 0",
            "ldr r2, [r3, -8]",
            "ldr r0, [r3, -4]",
            "add r2, r2, 7",
            "bic r2, r2, 7",
            "cmp r0, 0",
            "str r3, [sp, 4]",
            "add r1, r1, r2",
            "add r3, r3, 8",
            "bne 0x4c254",
            "ldr r0, [sp, 0x10]",
            "bl rsym.alloc_root",
            "cmp r0, 0",
            "beq 0x4c2d4",
            "ldr r3, [sp, 0x14]",
            "add r4, r4, 4",
            "cmp r3, 0",
            "str r4, [sp, 4]",
            "beq 0x4c2d4",
            "mov r2, r0",
            "str r2, [r3]",
            "ldr r3, [sp, 4]",
            "add r1, r3, 4",
            "str r1, [sp, 4]",
            "add ip, r1, 4",
            "ldr r1, [r3]",
            "str ip, [sp, 4]",
            "ldr r3, [r3, 4]",
            "add r1, r1, 7",
            "bic r1, r1, 7",
            "cmp r3, 0",
            "add r2, r2, r1",
            "bne 0x4c2a0",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "add sp, sp, 0x10",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::SSL_SESSION_::list__": {
        "function_address": "0x00087050",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x8706c",
            "b 0x8707c",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x87068",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.longlong2str": {
        "function_address": "0x0005c214",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr sb, [0x0005c380]",
            "subs r7, r3, 0",
            "sub sp, sp, 0x4c",
            "mov r5, r0",
            "mov r6, r1",
            "add sb, pc, sb",
            "mov r8, r2",
            "blt 0x5c30c",
            "sub r3, r7, 2",
            "cmp r3, 0x22",
            "bhi 0x5c318",
            "orrs r3, r5, r6",
            "beq 0x5c328",
            "mov r3, 0",
            "cmp r6, 0",
            "strb r3, [sp, 0x44]",
            "beq 0x5c36c",
            "ldr fp, [0x0005c384]",
            "add r4, sp, 0x44",
            "ldr sl, [sb, fp]",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r7",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "mul ip, r0, r7",
            "rsb r5, ip, r5",
            "ldrb ip, [sl, r5]",
            "cmp r1, 0",
            "strb ip, [r4, -1]!",
            "mov r5, r0",
            "mov r6, r1",
            "bne 0x5c268",
            "cmn r0, 0x80000001",
            "bhi 0x5c268",
            "mov r5, r0",
            "mov r6, r1",
            "ldr sb, [sb, fp]",
            "and sl, r7, 0xff",
            "mov r0, r5",
            "mov r1, r7",
            "bl fcn.000bee34",
            "mul r3, r0, sl",
            "rsb r5, r3, r5",
            "and r5, r5, 0xff",
            "ldrb r3, [sb, r5]",
            "subs r5, r0, 0",
            "strb r3, [r4, -1]!",
            "bne 0x5c2b4",
            "cmp r3, 0",
            "strb r3, [r8, r5]",
            "add r0, r8, r5",
            "add r5, r5, 1",
            "beq 0x5c31c",
            "ldrb r3, [r4, r5]",
            "add r0, r8, r5",
            "cmp r3, 0",
            "strb r3, [r8, r5]",
            "add r5, r5, 1",
            "bne 0x5c2f0",
            "b 0x5c31c",
            "add r3, r7, 0x24",
            "cmp r3, 0x22",
            "bls 0x5c33c",
            "mov r0, 0",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r8",
            "mov r2, 0x30",
            "strb r2, [r0], 1",
            "strb r3, [r8, 1]",
            "b 0x5c31c",
            "cmp r1, 0",
            "blt 0x5c354",
            "rsb r7, r7, 0",
            "orrs r3, r5, r6",
            "bne 0x5c24c",
            "b 0x5c328",
            "mov r3, 0x2d",
            "strb r3, [r8], 1",
            "rsbs r5, r5, 0",
            "rsc r6, r6, 0",
            "rsb r7, r7, 0",
            "b 0x5c348",
            "cmn r5, 0x80000001",
            "bhi 0x5c25c",
            "add r4, sp, 0x44",
            "ldr fp, [0x0005c384]",
            "b 0x5c2ac"
        ]
    },
    "sym.make_scrambled_password": {
        "function_address": "0x000477c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "mov r0, r1",
            "mov r4, r1",
            "bl sym.imp.strlen",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "b rsym.my_make_scrambled_password"
        ]
    },
    "sym.mysql_change_user": {
        "function_address": "0x00045688",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x134",
            "mov r4, r0",
            "ldr fp, [r0, 0x290]",
            "mov r8, r1",
            "mov r6, r2",
            "mov sl, r3",
            "bl rsym.mysql_init_character_set",
            "ldr r5, [0x00045880]",
            "cmp r0, 0",
            "add r5, pc, r5",
            "strne fp, [r4, 0x290]",
            "movne r0, 1",
            "bne 0x457b4",
            "cmp r8, 0",
            "beq 0x45874",
            "cmp r6, 0",
            "beq 0x4585c",
            "add r7, sp, 0x14",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, 0x30",
            "bl rsym.strmake",
            "ldrb r3, [r6]",
            "mov sb, r0",
            "cmp r3, 0",
            "add r0, r0, 1",
            "strbeq r3, [sb, 1]",
            "addeq r0, r0, 1",
            "bne 0x457c0",
            "cmp sl, 0",
            "movne r1, sl",
            "beq 0x45868",
            "mov r2, 0xc0",
            "bl rsym.strmake",
            "ldr r3, [r4, 0x2e0]",
            "add r1, r0, 1",
            "tst r3, 0x8000",
            "beq 0x4573c",
            "ldr r3, [r4, 0x290]",
            "ldr r3, [r3]",
            "lsr r2, r3, 8",
            "strb r3, [r0, 1]",
            "strb r2, [r1, 1]",
            "add r1, r0, 3",
            "rsb r1, r7, r1",
            "mov r3, 0",
            "str r1, [sp, 4]",
            "mov r1, 1",
            "str r1, [sp, 8]",
            "str r7, [sp]",
            "str r3, [sp, 0xc]",
            "mov r2, r3",
            "ldr ip, [r4, 0x3b0]",
            "mov r1, 0x11",
            "mov r0, r4",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r7",
            "mov r2, r6",
            "ldr r3, [r4, 0x3b0]",
            "mov r0, r4",
            "ldr ip, [r3, 0x38]",
            "mov lr, pc",
            "bx ip",
            "ldr r1, [0x00045884]",
            "mov r7, r0",
            "add r1, r5, r1",
            "add r0, r4, 0x3ac",
            "bl rsym.mysql_detach_stmt_list",
            "cmp r7, 0",
            "strne fp, [r4, 0x290]",
            "beq 0x457f0",
            "and r0, r7, 0xff",
            "add sp, sp, 0x134",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r4, 0x2e0]",
            "tst r3, 0x8000",
            "beq 0x45844",
            "mov r3, 0x14",
            "add r1, r4, 0x384",
            "add r0, r0, 1",
            "strb r3, [sb, 1]",
            "add r1, r1, 2",
            "mov r2, r6",
            "bl rsym.scramble",
            "add r0, sb, 0x16",
            "b 0x45700",
            "ldr r0, [r4, 0x274]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x278]",
            "bl rsym.my_no_flags_free",
            "ldr r0, [r4, 0x28c]",
            "bl rsym.my_no_flags_free",
            "mov r1, 0x10",
            "mov r0, r8",
            "bl rsym.my_strdup",
            "mov r1, 0x10",
            "str r0, [r4, 0x274]",
            "mov r0, r6",
            "bl rsym.my_strdup",
            "cmp sl, 0",
            "str r0, [r4, 0x278]",
            "moveq r0, r7",
            "movne r0, sl",
            "movne r1, 0x10",
            "blne rsym.my_strdup",
            "str r0, [r4, 0x28c]",
            "b 0x457b0",
            "add r1, r4, 0x384",
            "add r1, r1, 2",
            "mov r2, r6",
            "bl rsym.scramble_323",
            "add r0, sb, 0xa",
            "b 0x45700",
            "ldr r6, [0x00045888]",
            "add r6, r5, r6",
            "b 0x456d0",
            "ldr r1, [0x00045888]",
            "add r1, r5, r1",
            "b 0x4570c",
            "ldr r8, [0x00045888]",
            "add r8, r5, r8",
            "b 0x456c8"
        ]
    },
    "sym.mysql_stmt_bind_result": {
        "function_address": "0x00042e48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r0, 0xa8]",
            "ldr r6, [0x00042fac]",
            "cmp r3, 0",
            "sub sp, sp, 8",
            "mov r5, r0",
            "add r6, pc, r6",
            "bne 0x42e9c",
            "ldr r2, [0x00042fb0]",
            "ldr lr, [r0, 0xac]",
            "ldr r2, [r6, r2]",
            "ldr ip, [0x00042fb4]",
            "cmp lr, 1",
            "ldr r1, [0x00042fb8]",
            "ldr r2, [r2]",
            "movgt r1, ip",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r7, [r0, 0x34]",
            "cmp r7, r1",
            "lsleq r4, r3, 6",
            "beq 0x42ec0",
            "lsl r4, r3, 6",
            "mov r0, r7",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "ldr r7, [r5, 0x34]",
            "add sl, r7, r4",
            "cmp sl, r7",
            "ldr r8, [r5, 0x38]",
            "bls 0x42f88",
            "mov r4, 0",
            "mov sb, r4",
            "b 0x42ee8",
            "cmp sl, r7",
            "bls 0x42f88",
            "add r8, r8, 0x54",
            "ldr r3, [r7, 4]",
            "str r4, [r7, 0x2c]",
            "cmp r3, 0",
            "addeq r3, r7, 0x3b",
            "streq r3, [r7, 4]",
            "ldr r3, [r7]",
            "mov r0, r7",
            "cmp r3, 0",
            "addeq r3, r7, 0x28",
            "streq r3, [r7]",
            "ldr r3, [r7, 0xc]",
            "str sb, [r7, 0x24]",
            "cmp r3, 0",
            "addeq r3, r7, 0x38",
            "streq r3, [r7, 0xc]",
            "mov r1, r8",
            "bl fcn.00041690",
            "cmp r0, 0",
            "add r7, r7, 0x40",
            "add r4, r4, 1",
            "beq 0x42edc",
            "ldr r3, [0x00042fb0]",
            "add r0, r5, 0x2b0",
            "ldr r3, [r6, r3]",
            "ldr r1, [r3]",
            "bl sym.imp.strcpy",
            "ldr r2, [0x00042fbc]",
            "ldr r3, [0x00042fc0]",
            "str r2, [r5, 0xa0]",
            "ldr r3, [r6, r3]",
            "ldr ip, [r8, 0x4c]",
            "ldr r3, [r3, 0x90]",
            "add r0, r5, 0xb0",
            "mov r1, 1",
            "mvn r2, 0",
            "str ip, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x42e90",
            "ldr r3, [r5, 0x2c]",
            "mov r2, 1",
            "strb r2, [r5, 0x2b8]",
            "ldrb r0, [r3, 0x365]",
            "cmp r0, 0",
            "movne r3, 3",
            "strbne r3, [r5, 0x2b8]",
            "movne r0, 0",
            "b 0x42e90"
        ]
    },
    "method.mySTL::list_unsigned_char_.remove_unsigned_char_": {
        "function_address": "0x00087418",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN5mySTL4listIPhE7look_upES1_",
            "subs r3, r0, 0",
            "moveq r0, r3",
            "beq 0x87470",
            "ldr r2, [r4]",
            "cmp r3, r2",
            "beq 0x87488",
            "ldr r2, [r4, 4]",
            "cmp r3, r2",
            "beq 0x87478",
            "ldr r2, [r3]",
            "ldr r1, [r3, 4]",
            "str r1, [r2, 4]",
            "ldr r3, [r3, 4]",
            "str r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPhE8pop_backEv",
            "mov r0, 1",
            "b 0x87470",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPhE9pop_frontEv",
            "mov r0, 1",
            "b 0x87470"
        ]
    },
    "rsym._ZN5mySTL4listIPhE7look_upES1_": {
        "function_address": "0x0003dd68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x6b4]!"
        ]
    },
    "rsym._ZN5mySTL4listIPhE8pop_backEv": {
        "function_address": "0x000408b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9d4]!"
        ]
    },
    "rsym._ZN5mySTL4listIPhE9pop_frontEv": {
        "function_address": "0x0003f5a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x68c]!"
        ]
    },
    "sym.TaoCrypt::DSA_Verifier::Verify_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x000a18c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov sl, r0",
            "sub sp, sp, 0x104",
            "ldr r0, [r0]",
            "mov r7, r2",
            "mov sb, r1",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey10GetModulusEv",
            "mov fp, r0",
            "ldr r0, [sl]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey16GetSubGroupOrderEv",
            "mov r6, r0",
            "ldr r0, [sl]",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey20GetSubGroupGeneratorEv",
            "mov r4, sl",
            "str r0, [sp, 0x14]",
            "ldr r0, [r4], 4",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey13GetPublicPartEv",
            "str r0, [sp, 0x10]",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "mov r5, r0",
            "mov r1, r7",
            "mov r0, r4",
            "mov r2, r5",
            "mov r3, 0",
            "add sl, sl, 0x14",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "mov r2, r5",
            "add r1, r7, r5",
            "mov r3, 0",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "mov r0, r4",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldr r8, [0x000a1cd4]",
            "cmp r0, 0",
            "add r8, pc, r8",
            "blt 0xa1978",
            "mov r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x104",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r5, sp, 0xf0",
            "mov r1, 1",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "blt 0xa19b0",
            "mov r0, sl",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "blt 0xa1c90",
            "mov r5, 1",
            "ldr r7, [sp, 0xf4]",
            "ldr r2, [sp, 0xf0]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "cmp r5, 0",
            "bne 0xa1964",
            "add ip, sp, 0xd0",
            "add r7, sp, 0xc0",
            "mov r3, r5",
            "mov r1, sb",
            "mov r0, ip",
            "mov r2, 0x14",
            "str ip, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, sl",
            "mov r0, r7",
            "mov r2, r6",
            "bl rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_",
            "ldr ip, [sp, 0xc]",
            "add sl, sp, 0xa0",
            "add r3, sp, 0xb0",
            "mov r1, ip",
            "mov r0, sl",
            "mov r2, r7",
            "str r3, [sp, 0x18]",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r1, sl",
            "ldr r0, [sp, 0x18]",
            "mov r2, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "ldr sl, [sp, 0xa4]",
            "ldr r2, [sp, 0xa0]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, sl",
            "bl sym.imp.memset",
            "mov r0, sl",
            "add sl, sp, 0x80",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add ip, sp, 0x90",
            "mov r2, r7",
            "mov r0, sl",
            "mov r1, r4",
            "str ip, [sp, 0x1c]",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r1, sl",
            "ldr r0, [sp, 0x1c]",
            "mov r2, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "ldr r7, [sp, 0x84]",
            "ldr r2, [sp, 0x80]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr sb, [0x000a1cd8]",
            "ldr r3, [0x000a1cdc]",
            "ldr sb, [r8, sb]",
            "ldr r3, [r8, r3]",
            "add r7, sp, 0x24",
            "add r3, r3, 8",
            "add sb, sb, 8",
            "mov r1, fp",
            "add r0, r7, 0xc",
            "str r3, [sp, 0x28]",
            "str r7, [sp, 0x2c]",
            "str sb, [sp, 0x24]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [fp]",
            "mov r1, r5",
            "add r0, r7, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ejj",
            "add r0, r7, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr ip, [sp, 0x10]",
            "add sl, sp, 0x70",
            "str ip, [sp]",
            "ldr ip, [sp, 0x1c]",
            "ldr r3, [sp, 0x18]",
            "mov r1, r7",
            "ldr r2, [sp, 0x14]",
            "mov r0, sl",
            "add r7, sp, 0x60",
            "str ip, [sp, 4]",
            "bl rsym._ZNK8TaoCrypt17ModularArithmetic19CascadeExponentiateERKNS_7IntegerES3_S3_S3_",
            "mov r2, r6",
            "mov r0, r7",
            "mov r1, sl",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, r7",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r6, [sp, 0x64]",
            "ldr r2, [sp, 0x60]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, sl",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldr r6, [sp, 0x74]",
            "ldr r2, [sp, 0x70]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r4, r0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x54]",
            "ldr r2, [sp, 0x50]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "str sb, [sp, 0x24]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x44]",
            "ldr r2, [sp, 0x40]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r3, [0x000a1ce0]",
            "ldr r6, [sp, 0x94]",
            "ldr r3, [r8, r3]",
            "ldr r2, [sp, 0x90]",
            "add r3, r3, 8",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "str r3, [sp, 0x24]",
            "str r3, [sp, 0x28]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0xb4]",
            "ldr r2, [sp, 0xb0]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0xc4]",
            "ldr r2, [sp, 0xc0]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0xd4]",
            "ldr r2, [sp, 0xd0]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "rsbs r4, r4, 1",
            "movlo r4, 0",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "b 0xa1968",
            "add r5, sp, 0xe0",
            "mov r0, r5",
            "mov r1, 1",
            "bl rsym._ZN8TaoCrypt7IntegerC1El",
            "mov r1, r5",
            "mov r0, sl",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "ldr r7, [sp, 0xe4]",
            "ldr r2, [sp, 0xe0]",
            "lsr r5, r0, 0x1f",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "b 0xa19b4"
        ]
    },
    "rsym._ZNK8TaoCrypt13DSA_PublicKey13GetPublicPartEv": {
        "function_address": "0x0003ccc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x1cc]!"
        ]
    },
    "rsym._ZNK8TaoCrypt17ModularArithmetic19CascadeExponentiateERKNS_7IntegerES3_S3_S3_": {
        "function_address": "0x000405d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbc4]!"
        ]
    },
    "sym.my_strntoll_8bit": {
        "function_address": "0x0005d918",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add r6, r1, r2",
            "sub sp, sp, 0x1c",
            "str r1, [sp, 8]",
            "cmp r1, r6",
            "ldr r1, [sp, 0x44]",
            "mov r2, 0",
            "str r2, [r1]",
            "mov r7, r3",
            "bhs 0x5dc18",
            "ldr ip, [sp, 8]",
            "ldr r2, [r0, 0x20]",
            "ldrb r3, [ip]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5dc18",
            "mov r4, ip",
            "b 0x5d978",
            "ldrb r3, [r4]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x5d984",
            "add r4, r4, 1",
            "cmp r6, r4",
            "bhi 0x5d964",
            "cmp r4, r6",
            "beq 0x5dbc4",
            "ldrb r5, [r4]",
            "cmp r5, 0x2d",
            "moveq r1, 1",
            "addeq r4, r4, 1",
            "streq r1, [sp, 0x10]",
            "beq 0x5db48",
            "cmp r5, 0x2b",
            "beq 0x5db3c",
            "mov r2, r7",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, r7",
            "str r0, [sp]",
            "mov r8, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "mov ip, 0",
            "str r2, [sp, 0xc]",
            "str r4, [sp, 0x14]",
            "str ip, [sp, 0x10]",
            "mov r1, 0",
            "mov sb, r7",
            "asr sl, sb, 0x1f",
            "str r1, [sp, 4]",
            "mov fp, sl",
            "mov r0, 0",
            "mov r1, 0",
            "mov r2, r6",
            "mov sl, sb",
            "b 0x5da60",
            "bne 0x5da24",
            "ldr ip, [sp]",
            "cmp r0, ip",
            "bhi 0x5daa8",
            "ldr ip, [sp]",
            "cmp ip, r0",
            "beq 0x5db10",
            "mul sb, r0, fp",
            "umull r5, r6, r0, sl",
            "mla ip, sl, r1, sb",
            "and r0, r3, 0xff",
            "mov r1, 0",
            "adds r0, r0, r5",
            "add r6, ip, r6",
            "add r4, r4, 1",
            "adc r1, r1, r6",
            "cmp r2, r4",
            "beq 0x5dabc",
            "ldrb r5, [r4]",
            "sub r3, r5, 0x30",
            "and r3, r3, 0xff",
            "cmp r3, 9",
            "bls 0x5da98",
            "sub r3, r5, 0x41",
            "cmp r3, 0x19",
            "subls r3, r5, 0x37",
            "andls r3, r3, 0xff",
            "bls 0x5da98",
            "sub r3, r5, 0x61",
            "cmp r3, 0x19",
            "bhi 0x5dabc",
            "sub r3, r5, 0x57",
            "and r3, r3, 0xff",
            "cmp r7, r3",
            "ble 0x5dabc",
            "cmp r1, r8",
            "bls 0x5da14",
            "mov r3, 1",
            "str r3, [sp, 4]",
            "add r4, r4, 1",
            "cmp r2, r4",
            "bne 0x5da5c",
            "ldr ip, [sp, 0x14]",
            "cmp r4, ip",
            "beq 0x5dbc4",
            "ldr r2, [sp, 0x40]",
            "cmp r2, 0",
            "strne r4, [r2]",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "beq 0x5db90",
            "cmp r1, 0x80000000",
            "bls 0x5dbf0",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r2]",
            "mov r3, 0",
            "mov r4, 0x80000000",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r8, r1",
            "bne 0x5da30",
            "ldr ip, [sp, 0xc]",
            "cmp ip, r3",
            "bhs 0x5da30",
            "ldr ip, [sp]",
            "mov r3, 1",
            "mov r0, ip",
            "mov r1, r8",
            "str r3, [sp, 4]",
            "b 0x5dab0",
            "mov r2, 0",
            "add r4, r4, 1",
            "str r2, [sp, 0x10]",
            "cmp r4, r6",
            "beq 0x5dbc4",
            "mov r2, r7",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, r7",
            "str r0, [sp]",
            "mov r8, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "str r2, [sp, 0xc]",
            "ldrb r5, [r4]",
            "str r4, [sp, 0x14]",
            "b 0x5d9ec",
            "cmp r1, 0",
            "blt 0x5dc00",
            "ldr ip, [sp, 4]",
            "cmp ip, 0",
            "bne 0x5dc20",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "moveq r3, r0",
            "moveq r4, r1",
            "beq 0x5dafc",
            "rsbs r3, r0, 0",
            "rsc r4, r1, 0",
            "b 0x5dafc",
            "ldr ip, [sp, 0x40]",
            "ldr r1, [sp, 0x44]",
            "mov r3, 0x21",
            "str r3, [r1]",
            "cmp ip, 0",
            "ldrne r3, [sp, 0x40]",
            "ldrne r2, [sp, 8]",
            "mov r4, 0",
            "strne r2, [r3]",
            "mov r3, 0",
            "b 0x5dafc",
            "bne 0x5db98",
            "cmp r0, 0",
            "bne 0x5dae8",
            "b 0x5db98",
            "ldr ip, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [ip]",
            "mvn r3, 0",
            "mvn r4, 0x80000000",
            "b 0x5dafc",
            "ldr r4, [sp, 8]",
            "b 0x5d984",
            "ldr r1, [sp, 0x10]",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x22",
            "cmp r1, 0",
            "str r3, [r2]",
            "beq 0x5dc0c",
            "b 0x5daf4"
        ]
    },
    "sym.yaSSL::Mutex::Mutex__": {
        "function_address": "0x00084c74",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r4, r0",
            "bl sym.imp.pthread_mutex_init",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_pthread_fastmutex_lock": {
        "function_address": "0x0004db5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, fp, lr}",
            "ldr r3, [r0, 0x18]",
            "mov r4, r0",
            "cmp r3, 0",
            "beq 0x4dc38",
            "ldr r8, [0x0004dc48]",
            "mov r6, 4",
            "mov r5, 0",
            "b 0x4dc14",
            "cmp r3, 0x10",
            "bne 0x4dc2c",
            "bl rsym.mutex_delay",
            "ldr r0, [r4, 0x1c]",
            "mvn r2, 4",
            "umull sl, fp, r8, r0",
            "mov r3, 0",
            "mov r0, sl",
            "mov r1, fp",
            "bl fcn.000bfd8c",
            "ldr r3, [r4, 0x18]",
            "mov sl, r2",
            "cmp r3, r5",
            "str sl, [r4, 0x1c]",
            "bls 0x4dc38",
            "mov r0, r6",
            "bl fcn.000bf294",
            "mov r6, r0",
            "mov r0, sl",
            "mov r7, r1",
            "bl fcn.000bf294",
            "ldr r2, [0x0004dc4c]",
            "ldr r3, [0x0004dc50]",
            "bl fcn.000bf624",
            "mov r2, 0",
            "ldr r3, [0x0004dc54]",
            "bl fcn.000bf394",
            "mov r2, 0",
            "ldr r3, [0x0004dc58]",
            "bl fcn.000bef84",
            "mov r2, r0",
            "mov r3, r1",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "mov r6, r0",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_trylock",
            "subs r3, r0, 0",
            "add r5, r5, 1",
            "mov r0, r6",
            "bne 0x4db80",
            "mov r0, r3",
            "pop {r4, r5, r6, r7, r8, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_lock",
            "mov r3, r0",
            "b 0x4dc2c"
        ]
    },
    "rsym.mutex_delay": {
        "function_address": "0x0003e9e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe64]!"
        ]
    },
    "sym.imp.pthread_mutex_trylock": {
        "function_address": "0x0003df84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x54c]!"
        ]
    },
    "sym.yaSSL::Crypto::Crypto__": {
        "function_address": "0x000926f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellmanEEEvPT_",
            "mov r5, r4",
            "ldr r0, [r4, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "ldr r0, [r5], 0x10",
            "bl rsym._ZN5yaSSL8ysDeleteINS_6DigestEEEvPT_",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL11CertManagerD1Ev",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL10RandomPoolD1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DES_EDE::DES_EDE__": {
        "function_address": "0x0007d09c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d0e0]",
            "ldr r3, [0x0007d0e4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7DES_EDE11DES_EDEImplEEEvPT_",
            "ldr r3, [0x0007d0e8]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_inet_ntoa": {
        "function_address": "0x00050ad4",
        "instructions": [
            "ldr r3, [0x00050b1c]",
            "ldr r2, [0x00050b20]",
            "add r3, pc, r3",
            "push {r4, r5, r6, lr}",
            "ldr r4, [r3, r2]",
            "mov r5, r0",
            "mov r0, r4",
            "mov r6, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "mov r0, r5",
            "bl sym.imp.inet_ntoa",
            "mov r1, r0",
            "mov r0, r6",
            "bl sym.imp.strcpy",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_unlock",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.inet_ntoa": {
        "function_address": "0x0003d1d4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe6c]!"
        ]
    },
    "sym.yaSSL::SSL::flushBuffer__": {
        "function_address": "0x0009315c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x10",
            "mov sl, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r4, r0, 0",
            "beq 0x93180",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "add r6, sl, 0x9c0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL7Buffers12getHandShakeEv",
            "ldr r5, [r0]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL7Buffers12getHandShakeEv",
            "mov r2, r4",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL13output_bufferEE8iteratorENS2_20yassl_int_cpp_local19SumBufferEEET0_T_SA_S9_",
            "add r7, sp, 4",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL7Buffers12getHandShakeEv",
            "ldr r8, [r0, 8]",
            "cmp r8, 0",
            "beq 0x9321c",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL7Buffers12getHandShakeEv",
            "bl rsym._ZNK5mySTL4listIPN5yaSSL13output_bufferEE5frontEv",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, sb",
            "mov r2, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL7Buffers12useHandShakeEv",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEE9pop_frontEv",
            "add r4, r4, 1",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "cmp r4, r8",
            "blo 0x931cc",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r4, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r4",
            "mov r2, r0",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "b 0x93174"
        ]
    },
    "rsym._ZNK5yaSSL7Buffers12getHandShakeEv": {
        "function_address": "0x0003e188",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x3f4]!"
        ]
    },
    "rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL13output_bufferEE8iteratorENS2_20yassl_int_cpp_local19SumBufferEEET0_T_SA_S9_": {
        "function_address": "0x0003fd3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x17c]!"
        ]
    },
    "rsym._ZNK5mySTL4listIPN5yaSSL13output_bufferEE5frontEv": {
        "function_address": "0x000404b0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc84]!"
        ]
    },
    "sym.yaSSL_CTX_set_default_passwd_cb": {
        "function_address": "0x000852e0",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL7SSL_CTX13SetPasswordCbEPFiPciiPvE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX13SetPasswordCbEPFiPciiPvE": {
        "function_address": "0x0003dda4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x68c]!"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::SHA_::HMAC__": {
        "function_address": "0x000bb328",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb390]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb394]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.unpackfrm": {
        "function_address": "0x0004ffa0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r2",
            "ldrb r2, [r2, 2]",
            "ldrb r4, [r8, 1]",
            "ldrb r3, [r8, 6]",
            "ldrb ip, [r8, 5]",
            "lsl r2, r2, 0x10",
            "ldrb r6, [r8]",
            "add r2, r2, r4, lsl 8",
            "lsl r3, r3, 0x10",
            "ldrb r4, [r8, 4]",
            "ldrb r5, [r8, 3]",
            "add r3, r3, ip, lsl 8",
            "ldrb ip, [r8, 7]",
            "add r3, r3, r4",
            "add r2, r2, r6",
            "add r2, r2, r5, lsl 24",
            "add r3, r3, ip, lsl 24",
            "sub sp, sp, 8",
            "str r3, [sp, 4]",
            "cmp r2, 1",
            "mov r5, r0",
            "mov r4, r1",
            "ldrb r0, [r8, 9]",
            "ldrb r1, [r8, 8]",
            "ldrb ip, [r8, 0xa]",
            "ldrb r2, [r8, 0xb]",
            "movne r0, 1",
            "beq 0x50020",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "lsl r6, ip, 0x10",
            "add r6, r6, r0, lsl 8",
            "add r6, r6, r1",
            "add r6, r6, r2, lsl 24",
            "cmp r6, r3",
            "movhs r0, r6",
            "movlo r0, r3",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "subs r7, r0, 0",
            "moveq r0, 2",
            "beq 0x50014",
            "add r1, r8, 0xc",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "mov r0, r7",
            "mov r1, r6",
            "add r2, sp, 4",
            "bl rsym.my_uncompress",
            "cmp r0, 0",
            "ldreq r3, [sp, 4]",
            "streq r7, [r5]",
            "streq r3, [r4]",
            "beq 0x50014",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "mov r0, 3",
            "b 0x50014"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::sslFactory__yaSSL::sslFactory_": {
        "function_address": "0x00089a38",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x89a90",
            "ldr r1, [r4, 0x28]",
            "ldr r0, [r4, 0x24]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_",
            "ldr r0, [r4, 0x24]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_",
            "ldr r1, [r4, 0x1c]",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvT_S9_",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ServerKeyBaseEvEEEEEvPT_",
            "ldr r1, [r4, 0x10]",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "ldr r0, [r4, 0xc]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldm r4, {r0, r1}",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL7MessageEvEEEEEvT_S9_",
            "ldr r0, [r4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL7MessageEvEEEEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_": {
        "function_address": "0x0003e2b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x32c]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_": {
        "function_address": "0x0003d174",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xeac]!"
        ]
    },
    "rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_": {
        "function_address": "0x0003fa9c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x33c]!"
        ]
    },
    "rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_": {
        "function_address": "0x0003d78c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa9c]!"
        ]
    },
    "sym.yaSSL_get_session": {
        "function_address": "0x00085f10",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "subs r4, r0, 0",
            "movne r0, 0",
            "bne 0x85f54",
            "bl rsym._ZN5yaSSL11GetSessionsEv",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r2, r4",
            "add r1, r0, 0x74",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8Sessions6lookupEPKhPNS_11SSL_SESSIONE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_slave_send_query": {
        "function_address": "0x00045b38",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x3a4]",
            "sub sp, sp, 0x10",
            "cmp r3, 0",
            "ldrne r4, [r3, 0x3a0]",
            "ldreq r4, [r0, 0x3a0]",
            "mov r6, r1",
            "str r4, [r0, 0x3a8]",
            "str r4, [r0, 0x3a4]",
            "ldr ip, [r4]",
            "mov r5, r2",
            "cmp ip, 0",
            "beq 0x45bb0",
            "mov r1, 1",
            "mov r3, 0",
            "strb r1, [r4, 0x385]",
            "ldr ip, [r4, 0x3b0]",
            "mov r2, r3",
            "str r1, [sp, 8]",
            "mov r0, r4",
            "str r6, [sp]",
            "str r5, [sp, 4]",
            "str r3, [sp, 0xc]",
            "mov r1, 3",
            "ldr ip, [ip, 4]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, ip",
            "mov r0, r4",
            "mov r2, ip",
            "mov r3, ip",
            "str ip, [sp]",
            "str ip, [sp, 4]",
            "str ip, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl rsym.mysql_real_connect",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x45b6c",
            "b 0x45ba4"
        ]
    },
    "sym.TaoCrypt::Blowfish::ProcessAndXorBlock_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x0009e0a0",
        "instructions": [
            "ldr ip, [0x0009e70c]",
            "tst r1, 3",
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "add ip, pc, ip",
            "bne 0x9e6c4",
            "mov r6, r1",
            "ldr r4, [r6], 4",
            "tst r6, 3",
            "bne 0x9e6c4",
            "bic r5, r4, 0xff0000",
            "bic r5, r5, 0xff",
            "bic r4, r4, 0xff000000",
            "ldr r6, [r0, 0x38]",
            "bic r4, r4, 0xff00",
            "lsr r5, r5, 8",
            "orr r5, r5, r4, lsl 8",
            "eor r5, r6, r5, ror 16",
            "lsr r4, r5, 0x10",
            "ldr r7, [r1, 4]",
            "lsr r8, r5, 0x18",
            "lsr r1, r5, 8",
            "and r4, r4, 0xff",
            "add r8, r8, 0x20",
            "add r4, r4, 0x120",
            "and r1, r1, 0xff",
            "ldr sb, [r0, r8, lsl 2]",
            "ldr r4, [r0, r4, lsl 2]",
            "bic r6, r7, 0xff0000",
            "add r1, r1, 0x220",
            "and sl, r5, 0xff",
            "ldr r8, [r0, r1, lsl 2]",
            "bic r6, r6, 0xff",
            "add r1, r0, 0x38",
            "add sl, sl, 0x320",
            "bic r7, r7, 0xff000000",
            "ldr sl, [r0, sl, lsl 2]",
            "add sb, sb, r4",
            "bic r7, r7, 0xff00",
            "lsr r6, r6, 8",
            "ldr fp, [r1, 4]",
            "orr r4, r6, r7, lsl 8",
            "eor r8, sb, r8",
            "add r8, r8, sl",
            "eor r4, fp, r4, ror 16",
            "eor r4, r4, r8",
            "lsr r6, r4, 0x10",
            "lsr r7, r4, 0x18",
            "lsr sl, r4, 8",
            "and r6, r6, 0xff",
            "add r7, r7, 0x20",
            "add r6, r6, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r7, [r0, r6, lsl 2]",
            "and r6, r4, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r6, r6, 0x320",
            "ldr r6, [r0, r6, lsl 2]",
            "add r7, r8, r7",
            "ldr r8, [r1, 8]",
            "eor r7, r7, sl",
            "eor r5, r5, r8",
            "add r7, r7, r6",
            "eor r7, r5, r7",
            "lsr r5, r7, 0x10",
            "lsr r6, r7, 0x18",
            "lsr sl, r7, 8",
            "and r5, r5, 0xff",
            "add r6, r6, 0x20",
            "add r5, r5, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r6, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r6, [r0, r5, lsl 2]",
            "and r5, r7, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r5, r5, 0x320",
            "ldr r5, [r0, r5, lsl 2]",
            "add r6, r8, r6",
            "ldr r8, [r1, 0xc]",
            "eor r6, r6, sl",
            "eor r4, r4, r8",
            "add r6, r6, r5",
            "eor r6, r4, r6",
            "lsr r4, r6, 0x10",
            "lsr r5, r6, 0x18",
            "lsr sl, r6, 8",
            "and r4, r4, 0xff",
            "add r5, r5, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r5, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r5, [r0, r4, lsl 2]",
            "and r4, r6, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r4, r4, 0x320",
            "ldr r4, [r0, r4, lsl 2]",
            "add r5, r8, r5",
            "ldr r8, [r1, 0x10]",
            "eor r5, r5, sl",
            "eor r7, r7, r8",
            "add r5, r5, r4",
            "eor r5, r7, r5",
            "lsr r4, r5, 0x10",
            "lsr r7, r5, 0x18",
            "lsr sl, r5, 8",
            "and r4, r4, 0xff",
            "add r7, r7, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "ldr r4, [r0, r4, lsl 2]",
            "and r7, r5, 0xff",
            "add sl, sl, 0x220",
            "ldr sl, [r0, sl, lsl 2]",
            "add r7, r7, 0x320",
            "ldr r7, [r0, r7, lsl 2]",
            "add r4, r8, r4",
            "ldr r8, [r1, 0x14]",
            "eor r4, r4, sl",
            "eor r6, r6, r8",
            "add r4, r4, r7",
            "eor r4, r6, r4",
            "lsr r6, r4, 0x10",
            "lsr r7, r4, 0x18",
            "lsr sl, r4, 8",
            "and r6, r6, 0xff",
            "add r7, r7, 0x20",
            "add r6, r6, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r7, [r0, r6, lsl 2]",
            "and r6, r4, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r6, r6, 0x320",
            "ldr r6, [r0, r6, lsl 2]",
            "add r7, r8, r7",
            "ldr r8, [r1, 0x18]",
            "eor r7, r7, sl",
            "eor r5, r5, r8",
            "add r7, r7, r6",
            "eor r7, r5, r7",
            "lsr r5, r7, 0x10",
            "lsr r6, r7, 0x18",
            "lsr sl, r7, 8",
            "and r5, r5, 0xff",
            "add r6, r6, 0x20",
            "add r5, r5, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r6, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r6, [r0, r5, lsl 2]",
            "and r5, r7, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r5, r5, 0x320",
            "ldr r5, [r0, r5, lsl 2]",
            "add r6, r8, r6",
            "ldr r8, [r1, 0x1c]",
            "eor r6, r6, sl",
            "eor r4, r4, r8",
            "add r6, r6, r5",
            "eor r6, r4, r6",
            "lsr r4, r6, 0x10",
            "lsr r5, r6, 0x18",
            "lsr sl, r6, 8",
            "and r4, r4, 0xff",
            "add r5, r5, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r5, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r5, [r0, r4, lsl 2]",
            "and r4, r6, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r4, r4, 0x320",
            "ldr r4, [r0, r4, lsl 2]",
            "add r5, r8, r5",
            "ldr r8, [r1, 0x20]",
            "eor r5, r5, sl",
            "eor r7, r7, r8",
            "add r5, r5, r4",
            "eor r5, r7, r5",
            "lsr r4, r5, 0x10",
            "lsr r7, r5, 0x18",
            "lsr sl, r5, 8",
            "and r4, r4, 0xff",
            "add r7, r7, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "ldr r4, [r0, r4, lsl 2]",
            "and r7, r5, 0xff",
            "add sl, sl, 0x220",
            "ldr sl, [r0, sl, lsl 2]",
            "add r7, r7, 0x320",
            "ldr r7, [r0, r7, lsl 2]",
            "add r4, r8, r4",
            "ldr r8, [r1, 0x24]",
            "eor r4, r4, sl",
            "eor r6, r6, r8",
            "add r4, r4, r7",
            "eor r4, r6, r4",
            "lsr r6, r4, 0x10",
            "lsr r7, r4, 0x18",
            "lsr sl, r4, 8",
            "and r6, r6, 0xff",
            "add r7, r7, 0x20",
            "add r6, r6, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r7, [r0, r6, lsl 2]",
            "and r6, r4, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r6, r6, 0x320",
            "ldr r6, [r0, r6, lsl 2]",
            "add r7, r8, r7",
            "ldr r8, [r1, 0x28]",
            "eor r7, r7, sl",
            "eor r5, r5, r8",
            "add r7, r7, r6",
            "eor r7, r5, r7",
            "lsr r5, r7, 0x10",
            "lsr r6, r7, 0x18",
            "lsr sl, r7, 8",
            "and r5, r5, 0xff",
            "add r6, r6, 0x20",
            "add r5, r5, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r6, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r6, [r0, r5, lsl 2]",
            "and r5, r7, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r5, r5, 0x320",
            "ldr r5, [r0, r5, lsl 2]",
            "add r6, r8, r6",
            "ldr r8, [r1, 0x2c]",
            "eor r6, r6, sl",
            "eor r4, r4, r8",
            "add r6, r6, r5",
            "eor r6, r4, r6",
            "lsr r4, r6, 0x10",
            "lsr r5, r6, 0x18",
            "lsr sl, r6, 8",
            "and r4, r4, 0xff",
            "add r5, r5, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r5, lsl 2]",
            "add sl, sl, 0x220",
            "ldr r5, [r0, r4, lsl 2]",
            "and r4, r6, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r4, r4, 0x320",
            "ldr r4, [r0, r4, lsl 2]",
            "add r5, r8, r5",
            "ldr r8, [r1, 0x30]",
            "eor r5, r5, sl",
            "eor r7, r7, r8",
            "add r5, r5, r4",
            "eor r5, r7, r5",
            "lsr r4, r5, 0x10",
            "lsr r7, r5, 0x18",
            "lsr sl, r5, 8",
            "and r4, r4, 0xff",
            "add r7, r7, 0x20",
            "add r4, r4, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "ldr r4, [r0, r4, lsl 2]",
            "and r7, r5, 0xff",
            "add sl, sl, 0x220",
            "ldr sl, [r0, sl, lsl 2]",
            "add r7, r7, 0x320",
            "ldr r7, [r0, r7, lsl 2]",
            "add r4, r8, r4",
            "ldr r8, [r1, 0x34]",
            "eor r4, r4, sl",
            "eor r6, r6, r8",
            "add r4, r4, r7",
            "eor r4, r6, r4",
            "lsr r6, r4, 0x10",
            "lsr r7, r4, 0x18",
            "lsr sl, r4, 8",
            "and r6, r6, 0xff",
            "add r7, r7, 0x20",
            "add r6, r6, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "and r7, r4, 0xff",
            "add sl, sl, 0x220",
            "ldr sl, [r0, sl, lsl 2]",
            "add r7, r7, 0x320",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r8, r6",
            "ldr r8, [r1, 0x38]",
            "eor r6, r6, sl",
            "add r6, r6, r7",
            "eor r5, r5, r8",
            "eor r5, r5, r6",
            "lsr r6, r5, 0x10",
            "and r6, r6, 0xff",
            "lsr r7, r5, 0x18",
            "lsr sl, r5, 8",
            "add r7, r7, 0x20",
            "add r6, r6, 0x120",
            "and sl, sl, 0xff",
            "ldr r8, [r0, r7, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "add sl, sl, 0x220",
            "and r7, r5, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "add r7, r7, 0x320",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r8, r6",
            "ldr r8, [r1, 0x3c]",
            "eor r6, r6, sl",
            "add r6, r6, r7",
            "eor r4, r4, r8",
            "eor r4, r4, r6",
            "lsr r8, r4, 0x10",
            "lsr sl, r4, 8",
            "and r8, r8, 0xff",
            "and sl, sl, 0xff",
            "lsr r7, r4, 0x18",
            "and r6, r4, 0xff",
            "add sl, sl, 0x220",
            "add r7, r7, 0x20",
            "add r8, r8, 0x120",
            "add r6, r6, 0x320",
            "tst r3, 3",
            "ldr r6, [r0, r6, lsl 2]",
            "ldr r7, [r0, r7, lsl 2]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr r0, [r0, sl, lsl 2]",
            "ldr sl, [r1, 0x44]",
            "ldr r1, [r1, 0x40]",
            "bne 0x9e6e8",
            "cmp r2, 0",
            "eor r4, r4, sl",
            "beq 0x9e67c",
            "bic sl, r4, 0xff0000",
            "bic sl, sl, 0xff",
            "bic r4, r4, 0xff000000",
            "ldr sb, [r2], 4",
            "bic r4, r4, 0xff00",
            "lsr sl, sl, 8",
            "orr r4, sl, r4, lsl 8",
            "eor r4, sb, r4, ror 16",
            "str r4, [r3], 4",
            "tst r3, 3",
            "bne 0x9e6e8",
            "add r7, r8, r7",
            "eor r0, r7, r0",
            "eor r1, r5, r1",
            "add r6, r0, r6",
            "cmp r2, 0",
            "eor r1, r1, r6",
            "beq 0x9e6a0",
            "bic ip, r1, 0xff0000",
            "bic ip, ip, 0xff",
            "bic r1, r1, 0xff000000",
            "ldr r2, [r2]",
            "bic r1, r1, 0xff00",
            "lsr ip, ip, 8",
            "orr r1, ip, r1, lsl 8",
            "eor r1, r2, r1, ror 16",
            "str r1, [r3]",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "bic sl, r4, 0xff0000",
            "bic sl, sl, 0xff",
            "bic r4, r4, 0xff000000",
            "bic r4, r4, 0xff00",
            "lsr sl, sl, 8",
            "orr r4, sl, r4, lsl 8",
            "ror r4, r4, 0x10",
            "str r4, [r3], 4",
            "b 0x9e62c",
            "bic r2, r1, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r1, r1, 0xff000000",
            "bic r1, r1, 0xff00",
            "lsr r2, r2, 8",
            "orr r1, r2, r1, lsl 8",
            "ror r1, r1, 0x10",
            "str r1, [r3]",
            "b 0x9e674",
            "ldr r3, [0x0009e710]",
            "ldr r1, [0x0009e714]",
            "ldr r0, [0x0009e718]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x0009e71c]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009e710]",
            "ldr r1, [0x0009e714]",
            "ldr r0, [0x0009e718]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x0009e720]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::FileSink::FileSink_char_const__TaoCrypt::Source_": {
        "function_address": "0x000a1e40",
        "instructions": [
            "ldr r3, [0x000a1e84]",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "ldr r1, [0x000a1e88]",
            "add r3, pc, r3",
            "add r1, r3, r1",
            "mov r5, r2",
            "bl sym.imp.fopen64",
            "cmp r0, 0",
            "str r0, [r4]",
            "movne r1, r5",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt8FileSink3putERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.00088a4c": {
        "function_address": "0x00088a4c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x88a68",
            "b 0x88a78",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x88a64",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.finish_client_errs": {
        "function_address": "0x000486c4",
        "instructions": [
            "push {r4, lr}",
            "ldr r1, [0x000486dc]",
            "mov r0, 0x7d0",
            "bl rsym.my_error_unregister",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.my_error_unregister": {
        "function_address": "0x0003df30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x584]!"
        ]
    },
    "sym.my_strntod_8bit": {
        "function_address": "0x0005f02c",
        "instructions": [
            "mov r0, r1",
            "ldr r1, [0x0005f05c]",
            "cmn r2, 0x80000001",
            "moveq r2, r1",
            "push {r4, lr}",
            "add r2, r0, r2",
            "str r2, [r3]",
            "mov r1, r3",
            "ldr r2, [sp, 8]",
            "bl rsym.my_strtod",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::x509_::push_back_yaSSL::x509_": {
        "function_address": "0x00088b38",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::Sessions__yaSSL::Sessions_": {
        "function_address": "0x00089cf8",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL8SessionsD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL8SessionsD1Ev": {
        "function_address": "0x0003e47c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1fc]!"
        ]
    },
    "sym.TaoCrypt::Integer::PositiveCompare_TaoCrypt::Integer_const__const": {
        "function_address": "0x000a4a94",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r6, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r4, r0",
            "beq 0xa4ad0",
            "bhi 0xa4ac8",
            "mvn r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, 1",
            "b 0xa4ac0",
            "ldr r1, [r6, 4]",
            "ldr r2, [r5, 4]",
            "sub r3, r4, 0xc0000001",
            "lsl r3, r3, 2",
            "add r2, r2, r3",
            "add r3, r1, r3",
            "cmp r4, 0",
            "beq 0xa4b14",
            "ldr r0, [r3]",
            "ldr r1, [r2]",
            "sub r4, r4, 1",
            "cmp r0, r1",
            "bhi 0xa4ac8",
            "sub r3, r3, 4",
            "sub r2, r2, 4",
            "bhs 0xa4ae8",
            "b 0xa4abc",
            "mov r0, r4",
            "b 0xa4ac0"
        ]
    },
    "fcn.00088f14": {
        "function_address": "0x00088f14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x88f30",
            "b 0x88f40",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x88f2c",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendClientKeyExchange_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x000840a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r0",
            "sub sp, sp, 0x2c",
            "mov sl, r1",
            "mov r1, 4",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ClientStateE",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x0008424c]",
            "subs r8, r0, 0",
            "add r4, pc, r4",
            "beq 0x840dc",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r6, sp, 0x14",
            "mov r1, r5",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL17ClientKeyExchangeC1ERNS_3SSLE",
            "mov r1, r5",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL17ClientKeyExchange5buildERNS_3SSLE",
            "add r3, sp, 0x20",
            "mov r0, r5",
            "str r3, [sp, 4]",
            "bl rsym._ZN5yaSSL3SSL16makeMasterSecretEv",
            "ldr r3, [sp, 4]",
            "mov r1, 3",
            "add r0, r3, 4",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00084250]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 8]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0x14]",
            "mov fp, r0",
            "mov r0, r6",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 8",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add fp, fp, 4",
            "lsl fp, fp, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb ip, [r0, 0x12f]",
            "lsr fp, fp, 0x10",
            "mov r3, 0x16",
            "add r1, fp, 5",
            "mov r0, r7",
            "str r3, [sp, 0x20]",
            "strb r2, [sp, 0x24]",
            "strb ip, [sp, 0x25]",
            "strh fp, [sp, 0x26]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "ldr r1, [sp, 4]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r8",
            "bl fcn.00081648",
            "cmp sl, 0",
            "beq 0x84238",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "ldr r3, [0x00084254]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 8]",
            "bl rsym._ZN5yaSSL17ClientKeyExchangeD1Ev",
            "b 0x840d0",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r7, sl",
            "b 0x84214"
        ]
    },
    "rsym._ZN5yaSSL17ClientKeyExchangeC1ERNS_3SSLE": {
        "function_address": "0x00040810",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa44]!"
        ]
    },
    "rsym._ZN5yaSSL17ClientKeyExchange5buildERNS_3SSLE": {
        "function_address": "0x0003f544",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6cc]!"
        ]
    },
    "rsym._ZN5yaSSL17ClientKeyExchangeD1Ev": {
        "function_address": "0x0003d384",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd4c]!"
        ]
    },
    "sym.yaSSL::SSL_SESSION::SSL_SESSION_yaSSL::SSL_const__yaSSL::RandomPool_": {
        "function_address": "0x00095100",
        "instructions": [
            "mov r3, 0x1f4",
            "str r3, [r0, 0x58]",
            "mov r3, 0",
            "push {r4, r5, r6, lr}",
            "str r2, [r0, 0x5c]",
            "mov r4, r0",
            "str r3, [r0, 0x60]",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov ip, r4",
            "add r6, r0, 0x74",
            "mov lr, r0",
            "ldm r6!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r6, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "add r6, r4, 0x20",
            "mov ip, r6",
            "add lr, lr, 4",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrh r0, [r0, 0x2c]",
            "strh r0, [r4, 0x50]",
            "bl rsym._ZN5yaSSL11lowResTimerEv",
            "str r0, [r4, 0x54]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager12get_peerX509Ev",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL11SSL_SESSION8CopyX509EPNS_4X509E",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::ClientHello_const_": {
        "function_address": "0x0008c7d8",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r4, r1",
            "sub sp, sp, 0xc",
            "ldr r1, [0x0008c8c4]",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r4, 8]",
            "ldr r1, [0x0008c8c4]",
            "strb r3, [r0]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r4, 9]",
            "add r1, r4, 0xa",
            "strb r3, [r0]",
            "mov r2, 0x20",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "ldr r1, [0x0008c8c4]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r4, 0x2a]",
            "strb r3, [r0]",
            "ldrb r3, [r4, 0x2a]",
            "cmp r3, 0",
            "movne r0, r5",
            "addne r1, r4, 0x2b",
            "movne r2, 0x20",
            "blne rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "add r1, sp, 4",
            "ldrh r0, [r4, 0x4c]",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r0, r5",
            "ldr r1, [0x0008c8c4]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [sp, 4]",
            "ldr r1, [0x0008c8c4]",
            "strb r3, [r0]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [sp, 5]",
            "add r1, r4, 0x4e",
            "strb r3, [r0]",
            "ldrh r2, [r4, 0x4c]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "ldr r1, [0x0008c8c4]",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldrb r3, [r4, 0xce]",
            "ldr r1, [0x0008c8c4]",
            "strb r3, [r0]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferixEj",
            "ldr r3, [r4, 0xd0]",
            "strb r3, [r0]",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::matchSuite_unsigned_char_const__unsigned_int_": {
        "function_address": "0x00091ff4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "subs r4, r2, 0",
            "mov r5, r0",
            "mov r7, r1",
            "beq 0x92090",
            "tst r4, 1",
            "addeq sl, r0, 0x68",
            "moveq r8, 1",
            "bne 0x92090",
            "mov r0, sl",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x2e]",
            "cmp r8, r3",
            "bhs 0x920a8",
            "cmp r4, 1",
            "movhi r6, 1",
            "bhi 0x92044",
            "b 0x920a0",
            "cmp r4, r6",
            "bls 0x920a0",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "add r0, r0, r8",
            "ldrb r3, [r7, r6]",
            "ldrb r2, [r0, 0x2f]",
            "add sb, r7, r6",
            "cmp r2, r3",
            "add r6, r6, 2",
            "bne 0x9203c",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "mov r3, 0",
            "strb r3, [r0, 0x2c]",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldrb r3, [sb]",
            "strb r3, [r0, 0x2d]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r5",
            "mov r1, 0x6d",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "add r8, r8, 2",
            "b 0x92018",
            "mov r0, r5",
            "mov r1, 0x6e",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE"
        ]
    },
    "method.TaoCrypt::RSA_PrivateKey.RSA_PrivateKey_TaoCrypt::Source_": {
        "function_address": "0x000b2c48",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt14RSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.create_random_string": {
        "function_address": "0x00047314",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r5, r0, r1",
            "cmp r0, r5",
            "mov r6, r2",
            "bhs 0x47360",
            "mov r4, r0",
            "mov r0, r6",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047370]",
            "bl fcn.000bf394",
            "mov r2, 0",
            "ldr r3, [0x00047374]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "strb r0, [r4], 1",
            "cmp r5, r4",
            "bhi 0x4732c",
            "mov r0, r5",
            "mov r3, 0",
            "strb r3, [r0]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::DecodeToKey__": {
        "function_address": "0x0009c21c",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder9GetAlgoIdEv",
            "mov r1, 0",
            "str r0, [r4, 0x1c]",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder7GetNameENS0_8NameTypeE",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11CertDecoder11GetValidityEv",
            "mov r0, r4",
            "mov r1, 1",
            "bl rsym._ZN8TaoCrypt11CertDecoder7GetNameENS0_8NameTypeE",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt11CertDecoder6GetKeyEv"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder7GetNameENS0_8NameTypeE": {
        "function_address": "0x0003e218",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x394]!"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder11GetValidityEv": {
        "function_address": "0x0003e974",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xeac]!"
        ]
    },
    "sym.TaoCrypt::AbstractGroup::AbstractGroup__": {
        "function_address": "0x00099ce0",
        "instructions": [
            "ldr ip, [0x00099d1c]",
            "ldr r3, [0x00099d20]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00099d24]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00099d28]",
            "ldr r0, [0x00099d2c]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Twofish::encrypt_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000bdb44",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r7, [0x000beb10]",
            "sub sp, sp, 0x2c",
            "add r7, pc, r7",
            "tst r1, 3",
            "str r7, [sp, 0x14]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 0x18]",
            "bne 0xbeb5c",
            "mov r3, r1",
            "ldr r4, [r3], 4",
            "tst r3, 3",
            "bne 0xbec70",
            "add r5, r3, 4",
            "tst r5, 3",
            "ldr r2, [r1, 4]",
            "bne 0xbec48",
            "tst r5, 3",
            "ldr fp, [r3, 4]",
            "bne 0xbec20",
            "ldr r3, [r0, 0x38]",
            "ldr ip, [r0, 0x3c]",
            "eor r4, r4, r3",
            "eor ip, r2, ip",
            "lsr sl, r4, 8",
            "lsr r8, r4, 0x10",
            "lsr r6, ip, 8",
            "and sl, sl, 0xff",
            "and r8, r8, 0xff",
            "and r6, r6, 0xff",
            "lsr r7, ip, 0x18",
            "and r1, ip, 0xff",
            "lsr r3, ip, 0x10",
            "add sl, sl, 0x134",
            "add r8, r8, 0x234",
            "add r6, r6, 0x234",
            "and sb, r4, 0xff",
            "lsr r2, r4, 0x18",
            "add sl, sl, 2",
            "add r8, r8, 2",
            "add r7, r7, 0x36",
            "add r6, r6, 2",
            "add r1, r1, 0x134",
            "and r3, r3, 0xff",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr r7, [r0, r7, lsl 2]",
            "add sb, sb, 0x36",
            "add r2, r2, 0x334",
            "add r1, r1, 2",
            "add r3, r3, 0x334",
            "ldr r1, [r0, r1, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "add r3, r3, 2",
            "add r2, r2, 2",
            "ldr r2, [r0, r2, lsl 2]",
            "eor r8, sl, r8",
            "eor r7, r7, r6",
            "ldr sl, [r0, r3, lsl 2]",
            "eor r6, r7, r1",
            "eor sb, r8, sb",
            "ldr r1, [r0, 0x40]",
            "ldr r7, [r0, 0x58]",
            "eor r6, r6, sl",
            "eor sb, sb, r2",
            "add r3, r0, 0x58",
            "add sb, r6, sb",
            "ldr r8, [r3, 4]",
            "eor fp, fp, r1",
            "add r1, sb, r7",
            "ldr sl, [r5, 4]",
            "eor r1, fp, r1",
            "ldr r5, [r0, 0x44]",
            "ror r1, r1, 1",
            "add r6, r6, r8",
            "eor r2, sl, r5",
            "add r6, r6, sb",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 8]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0xc]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x10]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x14]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x18]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x1c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x20]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x24]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x28]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x2c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x30]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x34]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x38]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x3c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x40]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x44]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x48]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x4c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x50]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x54]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x58]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x5c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "lsr sl, ip, 0x10",
            "add r7, r7, 0x234",
            "lsr r8, r4, 8",
            "lsr fp, ip, 0x18",
            "and sl, sl, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "and sb, r4, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str fp, [sp, 0x1c]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r4, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x60]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x64]",
            "add fp, r8, fp",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r1, 0x10",
            "eor r2, r6, r2, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, r2, 8",
            "add r7, r7, 0x234",
            "lsr r8, r1, 8",
            "lsr fp, r2, 0x18",
            "and r6, r6, 0xff",
            "add r7, r7, 2",
            "ldr r7, [r0, r7, lsl 2]",
            "and r8, r8, 0xff",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sl, r2, 0x10",
            "and sb, r1, 0xff",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "ldr r6, [r0, r6, lsl 2]",
            "str r7, [sp, 8]",
            "and sl, sl, 0xff",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "str sl, [sp, 0xc]",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr fp, [sp, 8]",
            "ldr r7, [sp, 0xc]",
            "str r6, [sp, 0x20]",
            "and r5, r2, 0xff",
            "str sb, [sp, 0xc]",
            "lsr sl, r1, 0x18",
            "eor sb, r8, fp",
            "add r5, r5, 0x134",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x68]",
            "eor r8, r8, sl",
            "add r8, r8, r6",
            "ldr r5, [r3, 0x6c]",
            "add fp, r8, fp",
            "eor r4, fp, r4",
            "ror r4, r4, 1",
            "add r6, r6, r5",
            "add r6, r6, r8",
            "lsr r7, r4, 0x10",
            "eor ip, r6, ip, ror 31",
            "and r7, r7, 0xff",
            "lsr r6, ip, 8",
            "add r7, r7, 0x234",
            "lsr sl, ip, 0x10",
            "and sl, sl, 0xff",
            "lsr r8, r4, 8",
            "and r6, r6, 0xff",
            "lsr fp, ip, 0x18",
            "add r7, r7, 2",
            "str sl, [sp, 0xc]",
            "and r8, r8, 0xff",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add fp, fp, 0x36",
            "ldr fp, [r0, fp, lsl 2]",
            "add r8, r8, 0x134",
            "add r6, r6, 2",
            "and sb, r4, 0xff",
            "str r7, [sp, 8]",
            "ldr r6, [r0, r6, lsl 2]",
            "add r8, r8, 2",
            "add sb, sb, 0x36",
            "ldr r8, [r0, r8, lsl 2]",
            "str fp, [sp, 0x1c]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr fp, [sp, 8]",
            "str r6, [sp, 0x20]",
            "ldr r7, [sp, 0xc]",
            "and r5, ip, 0xff",
            "str sb, [sp, 0xc]",
            "add r5, r5, 0x134",
            "eor sb, r8, fp",
            "lsr sl, r4, 0x18",
            "ldr r8, [sp, 0x1c]",
            "ldr fp, [sp, 0x20]",
            "add r6, r7, 0x334",
            "add sl, sl, 0x334",
            "add r5, r5, 2",
            "ldr r5, [r0, r5, lsl 2]",
            "eor r7, r8, fp",
            "add sl, sl, 2",
            "ldr fp, [sp, 0xc]",
            "add r6, r6, 2",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr r6, [r0, r6, lsl 2]",
            "eor r8, sb, fp",
            "eor r7, r7, r5",
            "eor r6, r7, r6",
            "ldr fp, [r3, 0x70]",
            "eor r8, r8, sl",
            "ldr r5, [r3, 0x74]",
            "add r8, r8, r6",
            "add fp, r8, fp",
            "add r6, r6, r5",
            "eor r1, fp, r1",
            "ror r1, r1, 1",
            "add r6, r6, r8",
            "eor r2, r6, r2, ror 31",
            "and fp, r1, 0xff",
            "str fp, [sp, 4]",
            "lsr fp, r2, 0x18",
            "str fp, [sp, 8]",
            "ldr fp, [sp, 4]",
            "lsr sb, r1, 8",
            "add fp, fp, 0x36",
            "str fp, [sp, 4]",
            "ldr fp, [sp, 8]",
            "lsr sl, r1, 0x10",
            "add fp, fp, 0x36",
            "str fp, [sp, 8]",
            "ldr fp, [sp, 0x18]",
            "and sb, sb, 0xff",
            "and sl, sl, 0xff",
            "lsr r8, r1, 0x18",
            "add sb, sb, 0x134",
            "add sl, sl, 0x234",
            "add r8, r8, 0x334",
            "tst fp, 3",
            "ldr fp, [sp, 4]",
            "add sb, sb, 2",
            "add sl, sl, 2",
            "add r8, r8, 2",
            "ldr fp, [r0, fp, lsl 2]",
            "ldr sl, [r0, sl, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "ldr r8, [r0, r8, lsl 2]",
            "and r7, r2, 0xff",
            "str fp, [sp, 0x24]",
            "str sl, [sp, 0x1c]",
            "lsr r6, r2, 8",
            "lsr r5, r2, 0x10",
            "add r7, r7, 0x134",
            "str sb, [sp, 0x20]",
            "str r8, [sp, 0xc]",
            "ldr r8, [sp, 8]",
            "and r6, r6, 0xff",
            "and r5, r5, 0xff",
            "add r7, r7, 2",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr r7, [r0, r7, lsl 2]",
            "add r6, r6, 0x234",
            "add r5, r5, 0x334",
            "add r6, r6, 2",
            "add r5, r5, 2",
            "ldr fp, [r0, r6, lsl 2]",
            "str r8, [sp, 8]",
            "ldr r6, [r0, r5, lsl 2]",
            "str r7, [sp, 4]",
            "ldr r5, [r3, 0x78]",
            "ldr r8, [r0, 0x54]",
            "ldr sl, [r3, 0x7c]",
            "ldr r7, [r0, 0x4c]",
            "ldr r3, [r0, 0x48]",
            "ldr r0, [r0, 0x50]",
            "bne 0xbebf8",
            "ldr sb, [sp, 0x10]",
            "eor r1, r1, r3",
            "cmp sb, 0",
            "movne r3, sb",
            "ldrne sb, [r3], 4",
            "ldreq r3, [sp, 0x18]",
            "strne r3, [sp, 0x10]",
            "ldrne r3, [sp, 0x18]",
            "eorne r1, r1, sb",
            "strne r1, [r3], 4",
            "streq r1, [r3], 4",
            "tst r3, 3",
            "bne 0xbebd0",
            "ldr sb, [sp, 0x10]",
            "eor r2, r2, r7",
            "cmp sb, 0",
            "ldrne r7, [sb], 4",
            "streq r2, [r3], 4",
            "eorne r2, r7, r2",
            "strne r2, [r3], 4",
            "strne sb, [sp, 0x10]",
            "tst r3, 3",
            "bne 0xbeba8",
            "ldr r1, [sp, 8]",
            "ldr r7, [sp, 0x20]",
            "ldr sb, [sp, 0x1c]",
            "eor fp, r1, fp",
            "eor r2, r7, sb",
            "ldr r1, [sp, 4]",
            "ldr r7, [sp, 0x24]",
            "ldr sb, [sp, 0xc]",
            "eor fp, fp, r1",
            "eor r2, r2, r7",
            "eor fp, fp, r6",
            "eor r2, r2, sb",
            "ldr r1, [sp, 0x10]",
            "add r2, r2, fp",
            "add r5, r2, r5",
            "cmp r1, 0",
            "eor r4, r5, r4",
            "eor r4, r0, r4, ror 1",
            "ldrne r0, [r1], 4",
            "streq r4, [r3], 4",
            "eorne r4, r0, r4",
            "strne r4, [r3], 4",
            "strne r1, [sp, 0x10]",
            "tst r3, 3",
            "bne 0xbeb80",
            "b 0xbeb28",
            "ldr r7, [sp, 0x10]",
            "add fp, fp, sl",
            "cmp r7, 0",
            "add r2, fp, r2",
            "eor ip, r8, ip, ror 31",
            "eor ip, ip, r2",
            "ldrne r2, [r7]",
            "streq ip, [r3]",
            "eorne ip, r2, ip",
            "strne ip, [r3]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000beb24]",
            "bl sym.imp.__assert_fail",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000beb14]",
            "bl sym.imp.__assert_fail",
            "ldr fp, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, fp, r3",
            "add r1, fp, r1",
            "add r0, fp, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000beb14]",
            "bl sym.imp.__assert_fail",
            "ldr r7, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000beb14]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x118",
            "ldr r2, [0x000beb14]",
            "bl sym.imp.__assert_fail",
            "ldr fp, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, fp, r3",
            "add r1, fp, r1",
            "add r0, fp, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000beb24]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000beb24]",
            "bl sym.imp.__assert_fail",
            "ldr r8, [sp, 0x14]",
            "ldr r3, [0x000beb18]",
            "ldr r1, [0x000beb1c]",
            "ldr r0, [0x000beb20]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0xb8",
            "ldr r2, [0x000beb24]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_yaSSL::ThreadError_::push_back_yaSSL::ThreadError_": {
        "function_address": "0x00089848",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "mov r3, sp",
            "stm r3, {r1, r2}",
            "mov r4, r0",
            "mov r0, 0x10",
            "mov r5, r1",
            "mov r6, r2",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r6, [r0, 0xc]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_strnncoll_gbk": {
        "function_address": "0x0006c298",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "ldr r5, [sp, 0x20]",
            "str r1, [sp, 4]",
            "cmp r5, r2",
            "movlo r4, r5",
            "movhs r4, r2",
            "mov r6, r2",
            "add r0, sp, 4",
            "mov r1, sp",
            "mov r2, r4",
            "str r3, [sp]",
            "ldrb r7, [sp, 0x24]",
            "bl rsym.my_strnncoll_gbk_internal",
            "cmp r0, 0",
            "bne 0x6c2e4",
            "cmp r7, 0",
            "moveq r4, r6",
            "rsb r0, r5, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "rsym.my_strnncoll_gbk_internal": {
        "function_address": "0x0003ea1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe3c]!"
        ]
    },
    "sym._mymalloc": {
        "function_address": "0x0004b944",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x0004bbfc]",
            "ldr r6, [0x0004bc00]",
            "add r4, pc, r4",
            "ldr ip, [r4, r6]",
            "mov r5, r0",
            "ldr r0, [ip]",
            "sub sp, sp, 0x11c",
            "cmp r0, 0",
            "mov r7, r1",
            "mov r8, r2",
            "mov sb, r3",
            "beq 0x4bb44",
            "ldr r2, [0x0004bc04]",
            "ldr r3, [0x0004bc08]",
            "ldr r2, [r4, r2]",
            "ldr r1, [r4, r3]",
            "ldr r0, [r2, 4]",
            "ldr r1, [r1]",
            "cmp r0, 0",
            "add r1, r5, r1",
            "bne 0x4b9e4",
            "ldr r2, [r2]",
            "cmp r2, r1",
            "bhs 0x4b9e4",
            "ands r6, sb, 8",
            "beq 0x4b9c8",
            "ldr r3, [0x0004bc0c]",
            "ldr r2, [r4, r3]",
            "ldr r3, [0x0004bc10]",
            "ldr r2, [r2]",
            "ldr r3, [r4, r3]",
            "str r2, [r3]",
            "tst sb, 0x18",
            "bne 0x4bb54",
            "cmp r6, 0",
            "moveq r0, r6",
            "beq 0x4bb38",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r2, [0x0004bc14]",
            "ldr sl, [r4, r2]",
            "ldr r2, [0x0004bc18]",
            "ldr r0, [sl]",
            "ldr r2, [r4, r2]",
            "ldr r2, [r2]",
            "str r3, [sp, 0x10]",
            "add r0, r0, r2",
            "add r0, r0, 0x1c",
            "add r0, r0, r5",
            "bl sym.imp.malloc",
            "subs fp, r0, 0",
            "ldr r3, [sp, 0x10]",
            "beq 0x4b9a8",
            "ldr sl, [sl]",
            "ldr r0, [0x0004bc1c]",
            "add sl, sl, 0x18",
            "add sl, fp, sl",
            "str r0, [sl, -4]",
            "mov r1, sl",
            "mov r0, 0x68",
            "strb r0, [r1, r5]!",
            "mov r0, 0x15",
            "strb r0, [r1, 3]",
            "mov r0, 0x34",
            "strb r0, [r1, 1]",
            "ldr r2, [0x0004bc20]",
            "mov r0, 0x7a",
            "strb r0, [r1, 2]",
            "mov r1, 0",
            "stmib fp, {r1, r7}",
            "str r8, [fp, 0x10]",
            "str r5, [fp, 0xc]",
            "ldr r0, [r4, r2]",
            "str r2, [sp, 0x14]",
            "str r3, [sp, 0x10]",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r0, [0x0004bc24]",
            "ldr r1, [r4, r0]",
            "ldr r0, [r4, r0]",
            "ldr r1, [r1]",
            "str r1, [fp]",
            "ldr r3, [sp, 0x10]",
            "cmp r1, 0",
            "ldr r2, [sp, 0x14]",
            "strne fp, [r1, 4]",
            "ldr r1, [r4, r3]",
            "ldr r3, [0x0004bc28]",
            "str fp, [r0]",
            "ldr ip, [r4, r3]",
            "ldr r3, [r1]",
            "ldr lr, [ip]",
            "add r3, r5, r3",
            "cmp r3, lr",
            "str r3, [r1]",
            "strhi r3, [ip]",
            "ldr r3, [0x0004bc2c]",
            "ldr r0, [r4, r2]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "tst sb, 0x20",
            "movne r1, 0",
            "bne 0x4bb00",
            "ldr r3, [r4, r6]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x4bb0c",
            "mov r1, 0xa5",
            "mov r2, r5",
            "mov r0, sl",
            "bl sym.imp.memset",
            "ldr r3, [0x0004bc30]",
            "mov r0, sl",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "cmp sl, r2",
            "strlo sl, [r3]",
            "ldr r3, [0x0004bc34]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "cmp sl, r2",
            "strhi sl, [r3]",
            "add sp, sp, 0x11c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym._sanity",
            "b 0x4b978",
            "bl rsym._my_thread_var",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "add sl, sp, 0x18",
            "str r3, [sb]",
            "ldr r3, [0x0004bc38]",
            "mov r1, 1",
            "add r3, r4, r3",
            "mov r2, 0x100",
            "mov r0, sl",
            "str r8, [sp]",
            "str r7, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "mov r1, sl",
            "mov r2, 0x64",
            "mov r0, 5",
            "bl rsym.my_message",
            "ldr r3, [0x0004bc28]",
            "add r2, r5, 0x3fc",
            "ldr r3, [r4, r3]",
            "add r2, r2, 3",
            "ldr ip, [r3]",
            "ldr r3, [0x0004bc3c]",
            "add lr, ip, 0x3fc",
            "add lr, lr, 3",
            "add r3, r4, r3",
            "lsr lr, lr, 0xa",
            "lsr r4, r2, 0xa",
            "mov r1, 1",
            "mov r2, 0x100",
            "mov r0, sl",
            "str r4, [sp, 4]",
            "str lr, [sp, 0xc]",
            "str r5, [sp]",
            "str ip, [sp, 8]",
            "bl sym.imp.__sprintf_chk",
            "mov r1, sl",
            "mov r2, 0x64",
            "mov r0, 5",
            "bl rsym.my_message",
            "b 0x4b9d0"
        ]
    },
    "rsym.my_message": {
        "function_address": "0x0003d588",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xbf4]!"
        ]
    },
    "sym.TaoCrypt::RIPEMD160::RIPEMD160__": {
        "function_address": "0x000b287c",
        "instructions": [
            "ldr ip, [0x000b28b8]",
            "ldr r3, [0x000b28bc]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000b28c0]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000b28c4]",
            "ldr r0, [0x000b28c8]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_TaoCrypt::Signer_::push_back_TaoCrypt::Signer_": {
        "function_address": "0x000878b0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DH_Server::DH_Server__": {
        "function_address": "0x0008abd8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0008ac2c]",
            "ldr r3, [0x0008ac30]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x24]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 0x1c]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "add r0, r4, 4",
            "bl rsym._ZN5yaSSL14ServerDHParamsD1Ev",
            "ldr r3, [0x0008ac34]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RSA_Server::RSA_Server__": {
        "function_address": "0x00090c84",
        "instructions": [
            "ldr ip, [0x00090cc0]",
            "ldr r3, [0x00090cc4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090cc8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090ccc]",
            "ldr r0, [0x00090cd0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.freeze_size": {
        "function_address": "0x000502ec",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r3, r0",
            "mov r4, r0",
            "ldr r0, [r3], 0x14",
            "ldr r5, [r4, 4]",
            "cmp r0, r3",
            "beq 0x5033c",
            "cmp r0, 0",
            "beq 0x5033c",
            "ldr r3, [r4, 8]",
            "cmp r5, 1",
            "movlo r5, 1",
            "cmp r3, r5",
            "beq 0x5033c",
            "ldr r1, [r4, 0x10]",
            "mov r2, 0x10",
            "mul r1, r5, r1",
            "bl rsym.my_realloc",
            "str r5, [r4, 8]",
            "str r0, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateCertificate__": {
        "function_address": "0x0008b354",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL11CertificateC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL11CertificateC1Ev": {
        "function_address": "0x0003ee0c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb9c]!"
        ]
    },
    "sym.yaSSL::ServerHelloDone::ServerHelloDone__": {
        "function_address": "0x0008a694",
        "instructions": [
            "ldr r3, [0x0008a6c8]",
            "ldr r2, [0x0008a6cc]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DES::DES__": {
        "function_address": "0x000a0b2c",
        "instructions": [
            "ldr ip, [0x000a0b68]",
            "ldr r3, [0x000a0b6c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000a0b70]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000a0b74]",
            "ldr r0, [0x000a0b78]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::CertManager::get_peerKey___const": {
        "function_address": "0x0007c4b0",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x28",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_write": {
        "function_address": "0x000496f8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r4, r2, 0",
            "sub sp, sp, 0xc",
            "mov r6, r0",
            "mov r5, r1",
            "mov r7, r3",
            "beq 0x497d0",
            "mov sl, 0",
            "mov r8, sl",
            "mov sb, 0x1b",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "bl sym.imp.write",
            "cmp r0, r4",
            "beq 0x497c8",
            "cmn r0, 1",
            "addne r8, r8, r0",
            "addne r5, r5, r0",
            "rsbne r4, r0, r4",
            "str r0, [sp, 4]",
            "bl rsym._my_thread_var",
            "mov fp, r0",
            "bl sym.imp.__errno_location",
            "ldr r1, [fp, 0x6c]",
            "ldr r2, [r0]",
            "cmp r1, 0",
            "str r2, [fp]",
            "bicne r7, r7, 0x20",
            "cmp r2, 0x1c",
            "cmpne r2, 0x7a",
            "ldr r3, [sp, 4]",
            "bne 0x49784",
            "tst r7, 0x20",
            "bne 0x497f8",
            "sub r1, r3, 1",
            "cmn r1, 3",
            "bls 0x49720",
            "cmp r2, 4",
            "beq 0x49720",
            "cmp r3, 0",
            "bne 0x497d8",
            "cmp sl, 0",
            "bne 0x497d8",
            "str sb, [r0]",
            "mov r1, r5",
            "mov r0, r6",
            "mov r2, r4",
            "bl sym.imp.write",
            "cmp r0, r4",
            "mov sl, 1",
            "bne 0x49738",
            "tst r7, 6",
            "beq 0x49830",
            "mov r0, 0",
            "b 0x497ec",
            "tst r7, 6",
            "beq 0x49834",
            "tst r7, 0x1a",
            "bne 0x49810",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "bl rsym.my_filename",
            "mov r1, sl",
            "bl rsym.wait_for_free_space",
            "add sl, sl, 1",
            "b 0x49720",
            "mov r0, r6",
            "bl rsym.my_filename",
            "ldr r3, [fp]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 3",
            "bl rsym.my_error",
            "b 0x497e8",
            "mov r3, r4",
            "add r0, r3, r8",
            "b 0x497ec"
        ]
    },
    "sym.yaSSL::SSL::UnSetCompression__": {
        "function_address": "0x00091fd0",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r3, 0",
            "strb r3, [r0, 0x12d]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::FileSink::FileSink__": {
        "function_address": "0x000a1d94",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "blne sym.imp.fclose",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::x509__yaSSL::x509_": {
        "function_address": "0x00089d78",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL4x509D1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL4x509D1Ev": {
        "function_address": "0x0003d840",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa24]!"
        ]
    },
    "method.mySTL::list_yaSSL::BulkCipher_.erase_mySTL::list_yaSSL::BulkCipher_::iterator_": {
        "function_address": "0x00089594",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x895ec",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x89600",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x895f4",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE8pop_backEv",
            "mov r0, 1",
            "b 0x895ec",
            "bl rsym._ZN5mySTL4listIPN5yaSSL10BulkCipherEE9pop_frontEv",
            "mov r0, 1",
            "b 0x895ec"
        ]
    },
    "sym.yaSSL::Buffers::Buffers__": {
        "function_address": "0x000921b4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r0, [r0, 0xc]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL13output_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "mov r1, r5",
            "mov r2, 0",
            "ldr r0, [r4]",
            "bl rsym._ZN5mySTL8for_eachINS_4listIPN5yaSSL12input_bufferEE8iteratorENS2_12del_ptr_zeroEEET0_T_S9_S8_",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_",
            "add r0, r4, 0xc",
            "bl rsym._ZN5mySTL4listIPN5yaSSL13output_bufferEED1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIPN5yaSSL12input_bufferEED1Ev",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::set_masterSecret_unsigned_char_const_": {
        "function_address": "0x00092640",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "mov r4, r1",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r4",
            "mov r2, 0x30",
            "add r0, r0, 4",
            "bl sym.imp.memcpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::set_pending_unsigned_char_": {
        "function_address": "0x00093ad4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "add r7, r0, 0x68",
            "mov r6, r0",
            "mov r0, r7",
            "mov r8, r1",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "ldr r5, [0x00094a8c]",
            "sub r8, r8, 4",
            "mov r4, r0",
            "add r5, pc, r5",
            "cmp r8, 0x7a",
            "addls pc, pc, r8, lsl 2",
            "b 0x94a7c",
            "b 0x949fc",
            "b 0x94978",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x948f0",
            "b 0x94864",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x947cc",
            "b 0x94730",
            "b 0x94a7c",
            "b 0x94698",
            "b 0x945fc",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94570",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x944d4",
            "b 0x94438",
            "b 0x94a7c",
            "b 0x943a8",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94308",
            "b 0x94268",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x941c8",
            "b 0x94128",
            "b 0x94084",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x93fe4",
            "b 0x93f44",
            "b 0x93ea0",
            "b 0x94a7c",
            "b 0x94a7c",
            "b 0x93e14",
            "b 0x93d88",
            "b 0x93cf4",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 1",
            "strb r2, [r0, 0x14]",
            "mov r7, 0x20",
            "mov r2, 0x10",
            "strb r2, [r0, 0xd]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xc]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094a90]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "mov r3, 1",
            "mov r7, 0x10",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xc]",
            "strb r7, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094a94]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 4",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 1",
            "strb r2, [r0, 0x14]",
            "mov r7, 8",
            "mov r2, 0x18",
            "strb r2, [r0, 0xc]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094a98]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r3, 7",
            "str r3, [r0, 4]",
            "mov r3, 3",
            "str r3, [r0, 0x10]",
            "mov r3, 2",
            "str r3, [r0, 0x1c]",
            "mov r3, 0x14",
            "mov sl, 1",
            "strb r3, [r0, 0x14]",
            "mov r8, 0x20",
            "mov r3, 0x10",
            "strb r3, [r0, 0xd]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xc]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094a9c]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r3, 7",
            "str r3, [r0, 4]",
            "mov r3, 3",
            "str r3, [r0, 0x10]",
            "mov r3, 2",
            "mov sl, 1",
            "mov r8, 0x10",
            "str r3, [r0, 0x1c]",
            "mov r3, 0x14",
            "strb r3, [r0, 0x14]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094aa0]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r3, 4",
            "str r3, [r0, 4]",
            "mov r3, 3",
            "str r3, [r0, 0x10]",
            "mov r3, 2",
            "str r3, [r0, 0x1c]",
            "mov r3, 0x14",
            "mov sl, 1",
            "strb r3, [r0, 0x14]",
            "mov r8, 8",
            "mov r3, 0x18",
            "strb r3, [r0, 0xc]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094aa4]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 2",
            "mov sl, 1",
            "strb r2, [r0, 0x14]",
            "mov r8, 0x20",
            "mov r2, 0x10",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0xd]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xc]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094aa8]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "mov r3, 2",
            "mov r8, 0x10",
            "mov sl, 1",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094aac]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 4",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 2",
            "mov sl, 1",
            "strb r2, [r0, 0x14]",
            "mov r8, 8",
            "mov r2, 0x18",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0xc]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RMDC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ab0]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "mov sl, 1",
            "mov r3, 2",
            "strb r2, [r0, 0x14]",
            "mov r8, 0x20",
            "mov r2, 0x10",
            "str r3, [r0, 0x1c]",
            "strb r2, [r0, 0xd]",
            "str r3, [r0, 0x10]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xc]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ab4]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "mov r3, 2",
            "mov sl, 1",
            "strb r2, [r0, 0x14]",
            "mov r8, 0x20",
            "mov r2, 0x10",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0xd]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xc]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ab8]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 1",
            "strb r2, [r0, 0x14]",
            "mov r7, 0x20",
            "mov r2, 0x10",
            "strb r2, [r0, 0xd]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xc]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094abc]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "mov sl, 1",
            "mov r3, 2",
            "mov r8, 0x10",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r3, [r0, 0x1c]",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 0x10]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ac0]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "mov r3, 2",
            "mov r8, 0x10",
            "mov sl, 1",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r8",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ac4]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 7",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "mov r3, 1",
            "mov r7, 0x10",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xc]",
            "strb r7, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3AESC1Ej",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ac8]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 4",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "mov sl, 1",
            "mov r3, 2",
            "strb r2, [r0, 0x14]",
            "mov r8, 8",
            "mov r2, 0x18",
            "str r3, [r0, 0x1c]",
            "strb r2, [r0, 0xc]",
            "str r3, [r0, 0x10]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094acc]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 3",
            "mov sl, 1",
            "mov r3, 2",
            "mov r8, 8",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r3, [r0, 0x1c]",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 0x10]",
            "str sl, [r0, 0x20]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3DESC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ad0]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 4",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "mov r3, 2",
            "mov sl, 1",
            "strb r2, [r0, 0x14]",
            "mov r8, 8",
            "mov r2, 0x18",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0xc]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ad4]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 3",
            "mov r3, 2",
            "mov r8, 8",
            "mov sl, 1",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r3, [r0, 0x20]",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 0x10]",
            "str r3, [r0, 0x1c]",
            "strb r8, [r0, 0xc]",
            "strb r8, [r0, 0xd]",
            "str sl, [r0, 8]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "strb sl, [r0, 0x128]",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3DESC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ad8]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 4",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "mov r3, 1",
            "strb r2, [r0, 0x14]",
            "mov r7, 8",
            "mov r2, 0x18",
            "strb r2, [r0, 0xc]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL7DES_EDEC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094adc]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r2, 3",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "mov r3, 1",
            "mov r7, 8",
            "str r2, [r0, 0x10]",
            "mov r2, 0x14",
            "strb r2, [r0, 0x14]",
            "str r3, [r0, 8]",
            "str r3, [r0, 0x1c]",
            "strb r7, [r0, 0xc]",
            "strb r7, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r8, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, r7",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3DESC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ae0]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r1, 2",
            "str r1, [r0, 0x10]",
            "mov r1, 0x14",
            "mov r2, 1",
            "mov r3, 0",
            "strb r1, [r0, 0x14]",
            "mov r1, 0x10",
            "str r2, [r0, 0x1c]",
            "strb r1, [r0, 0xc]",
            "stmib r0, {r2, r3}",
            "strb r3, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RC4C1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ae4]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r3, 1",
            "mov r1, 0x10",
            "mov r2, 0",
            "str r3, [r0, 0x1c]",
            "strb r1, [r0, 0xc]",
            "str r2, [r0, 8]",
            "str r3, [r0, 4]",
            "str r3, [r0, 0x10]",
            "strb r1, [r0, 0x14]",
            "strb r2, [r0, 0xd]",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r7, r0",
            "bl rsym._ZN5yaSSL3RC4C1Ev",
            "mov r0, r6",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE",
            "ldr r1, [0x00094ae8]",
            "add r0, r4, 0xaf",
            "add r1, r5, r1",
            "mov r2, 0x30",
            "bl sym.imp.strncpy",
            "b 0x93d80",
            "mov r0, r6",
            "mov r1, 0x68",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE"
        ]
    },
    "rsym._ZN5yaSSL3RMDC1Ev": {
        "function_address": "0x0003e9bc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe7c]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto9setDigestEPNS_6DigestE": {
        "function_address": "0x0003e5a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x134]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto9setCipherEPNS_10BulkCipherE": {
        "function_address": "0x0003f748",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x574]!"
        ]
    },
    "rsym._ZN5yaSSL3RC4C1Ev": {
        "function_address": "0x0003ee6c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb5c]!"
        ]
    },
    "sym.my_b_fill": {
        "function_address": "0x00055630",
        "instructions": [
            "push {r4, r5, r6, r7, r8, fp, lr}",
            "mov r4, r0",
            "ldr r2, [r4, 0x18]",
            "ldr r0, [r0, 0x14]",
            "ldr r3, [r4, 0x8c]",
            "rsb r0, r2, r0",
            "ldm r4, {r1, r2}",
            "adds r5, r1, r0",
            "adc r6, r2, 0",
            "cmp r3, 0",
            "sub sp, sp, 0xc",
            "bne 0x55708",
            "add ip, r4, 8",
            "ldm ip, {fp, ip}",
            "mov r7, fp",
            "mov r8, ip",
            "lsl r3, r5, 0x14",
            "ldr r2, [r4, 0x98]",
            "subs r7, r7, r5",
            "sbc r8, r8, r6",
            "lsr r3, r3, 0x14",
            "cmp r8, 0",
            "mov r1, r5",
            "rsb r2, r3, r2",
            "bls 0x556b0",
            "cmp r2, 0",
            "streq r2, [r4, 0x90]",
            "moveq r0, r2",
            "bne 0x556d0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, fp, lr}",
            "bx lr",
            "bne 0x556bc",
            "cmp r7, r2",
            "bhi 0x55694",
            "rsb r2, r1, fp",
            "cmp r2, 0",
            "streq r2, [r4, 0x90]",
            "moveq r0, r2",
            "beq 0x556a4",
            "ldr r0, [r4, 0x88]",
            "ldr r1, [r4, 0x18]",
            "ldr r3, [r4, 0x9c]",
            "bl rsym.my_read",
            "cmn r0, 1",
            "streq r0, [r4, 0x90]",
            "moveq r0, 0",
            "beq 0x556a4",
            "ldr r3, [r4, 0x18]",
            "stm r4, {r5, r6}",
            "add r2, r3, r0",
            "str r2, [r4, 0x14]",
            "str r3, [r4, 0x10]",
            "b 0x556a4",
            "ldr r0, [r4, 0x88]",
            "mov r7, 0",
            "mov r2, r5",
            "mov r3, r6",
            "str r7, [sp]",
            "str r7, [sp, 4]",
            "bl rsym.my_seek",
            "cmn r0, 1",
            "beq 0x55738",
            "mov r3, 0",
            "str r3, [r4, 0x8c]",
            "b 0x55660",
            "cmn r1, 1",
            "streq r7, [r4, 0x90]",
            "moveq r0, r7",
            "bne 0x5572c",
            "b 0x556a4"
        ]
    },
    "sym.my_pread": {
        "function_address": "0x00055c88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "mov r7, r0",
            "mov sb, r1",
            "mov r5, r2",
            "bl sym.imp.__errno_location",
            "ldr sl, [sp, 0x38]",
            "ldr r8, [sp, 0x3c]",
            "mov fp, 0",
            "mov r6, r0",
            "str fp, [r6]",
            "mov r1, sb",
            "mov r2, r5",
            "mov r0, r7",
            "str sl, [sp]",
            "str r8, [sp, 4]",
            "bl sym.imp.pread64",
            "subs r3, r0, r5",
            "movne r3, 1",
            "cmp r3, 0",
            "mov r4, r0",
            "beq 0x55cfc",
            "str r3, [sp, 0xc]",
            "bl rsym._my_thread_var",
            "ldr r2, [r6]",
            "cmp r2, 0",
            "mvneq r2, 0",
            "str r2, [r0]",
            "ldr r3, [sp, 0xc]",
            "cmp r4, r5",
            "orrne r3, r3, 1",
            "cmp r3, 0",
            "sub r2, r4, 1",
            "beq 0x55dbc",
            "cmn r2, 3",
            "bls 0x55d24",
            "ldr r3, [r6]",
            "cmp r3, 4",
            "beq 0x55cb0",
            "ldr r3, [sp, 0x40]",
            "tst r3, 0x1a",
            "bne 0x55d54",
            "cmn r4, 1",
            "beq 0x55d44",
            "ldr r3, [sp, 0x40]",
            "tst r3, 6",
            "mvnne r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmn r4, 1",
            "beq 0x55d94",
            "ldr r3, [sp, 0x40]",
            "tst r3, 6",
            "beq 0x55d44",
            "mov r0, r7",
            "bl rsym.my_filename",
            "mov r4, r0",
            "bl rsym._my_thread_var",
            "mov r2, r4",
            "ldr r3, [r0]",
            "mov r1, 0x24",
            "mov r0, 9",
            "bl rsym.my_error",
            "mvn r4, 0",
            "b 0x55d44",
            "mov r0, r7",
            "bl rsym.my_filename",
            "mov r5, r0",
            "bl rsym._my_thread_var",
            "mov r2, r5",
            "ldr r3, [r0]",
            "mov r1, 0x24",
            "mov r0, 2",
            "bl rsym.my_error",
            "b 0x55d44",
            "ldr r3, [sp, 0x40]",
            "tst r3, 6",
            "moveq r4, r5",
            "movne r4, 0",
            "b 0x55d44"
        ]
    },
    "sym.imp.pread64": {
        "function_address": "0x0003e3f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x254]!"
        ]
    },
    "sym.yaSSL::ClientHello::ClientHello_yaSSL::ProtocolVersion__bool_": {
        "function_address": "0x0008b724",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0008b78c]",
            "ldr ip, [0x0008b790]",
            "sub sp, sp, 8",
            "add r3, pc, r3",
            "strh r1, [sp, 4]",
            "ldr ip, [r3, ip]",
            "ldrb r1, [sp, 4]",
            "ldrb lr, [sp, 5]",
            "cmp r2, 0",
            "movne r2, 0xdd",
            "moveq r2, 0",
            "add ip, ip, 8",
            "mov r4, r0",
            "str ip, [r0]",
            "strb lr, [r0, 9]",
            "strb r1, [r0, 8]",
            "str r2, [r0, 0xd0]",
            "mov r1, 0",
            "mov r2, 0x20",
            "add r0, r0, 0xa",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::PBKDF2_HMAC_TaoCrypt::SHA_.DeriveKey_unsigned_char__unsigned_int__unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int__unsigned_int__const": {
        "function_address": "0x000bb8d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x13c",
            "ldr r5, [sp, 0x16c]",
            "ldr r0, [0x000bbb1c]",
            "cmp r5, 0",
            "add r0, pc, r0",
            "str r0, [sp, 0xc]",
            "mov r4, r1",
            "mov fp, r2",
            "mov sl, r3",
            "beq 0xbbaf4",
            "mov r0, 0x14",
            "str r0, [sp, 0x128]",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "add r0, sp, 0x138",
            "ldr r6, [r0, -0x10]!",
            "mov r1, ip",
            "mov r3, r6",
            "mov r8, 0",
            "mov r2, r6",
            "add r0, r0, 8",
            "str ip, [sp, 0x12c]",
            "str r8, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "add r7, sp, 0x14",
            "mov r1, r8",
            "mov r2, r6",
            "add r8, r7, 0x10",
            "str r0, [sp, 0x12c]",
            "str r6, [sp, 0x128]",
            "bl sym.imp.memset",
            "add ip, r7, 0x80",
            "add lr, r7, 0xc0",
            "mov r1, 5",
            "add r3, r7, 0x100",
            "mov r2, 0x40",
            "mov r0, r8",
            "str ip, [sp, 0x14]",
            "str lr, [sp, 0x18]",
            "str r3, [sp, 0x1c]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [0x000bbb20]",
            "mov r0, r8",
            "ldr r3, [r2, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 0x24]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE4InitEv",
            "mov r0, r7",
            "mov r1, sl",
            "ldr r2, [sp, 0x160]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6SetKeyEPKhj",
            "cmp fp, 0",
            "beq 0xbbab4",
            "add sb, sp, 0x134",
            "mov sl, 1",
            "add sb, sb, 3",
            "mov r0, r7",
            "ldr r1, [sp, 0x164]",
            "ldr r2, [sp, 0x168]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "lsr r3, sl, 0x18",
            "mov r0, r7",
            "mov r1, sb",
            "mov r2, 1",
            "strb r3, [sp, 0x137]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "lsr r3, sl, 0x10",
            "mov r0, r7",
            "mov r1, sb",
            "mov r2, 1",
            "strb r3, [sp, 0x137]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "lsr r3, sl, 8",
            "mov r0, r7",
            "mov r1, sb",
            "mov r2, 1",
            "strb r3, [sp, 0x137]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "mov r2, 1",
            "mov r1, sb",
            "mov r0, r7",
            "strb sl, [sp, 0x137]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "mov r0, r7",
            "ldr r1, [sp, 0x12c]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE5FinalEPh",
            "ldr r8, [sp, 0x128]",
            "mov r0, r4",
            "cmp fp, r8",
            "movlo r8, fp",
            "ldr r1, [sp, 0x12c]",
            "mov r2, r8",
            "bl sym.imp.memcpy",
            "cmp r5, 1",
            "bls 0xbbaa4",
            "mov r6, 1",
            "ldr r2, [sp, 0x128]",
            "ldr r1, [sp, 0x12c]",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "mov r0, r7",
            "ldr r1, [sp, 0x12c]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE5FinalEPh",
            "add r6, r6, 1",
            "mov r0, r4",
            "ldr r1, [sp, 0x12c]",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "cmp r5, r6",
            "bhi 0xbba6c",
            "subs fp, fp, r8",
            "addne r4, r4, r8",
            "addne sl, sl, 1",
            "bne 0xbb9cc",
            "ldr r0, [sp, 0xc]",
            "ldr r3, [0x000bbb24]",
            "ldr r4, [sp, 0x12c]",
            "ldr r3, [r0, r3]",
            "ldr r2, [sp, 0x128]",
            "add r3, r3, 8",
            "mov r1, 0",
            "mov r0, r4",
            "str r3, [sp, 0x24]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x13c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000bbb28]",
            "ldr r1, [0x000bbb2c]",
            "add r3, r0, r3",
            "ldr r2, [sp, 0xc]",
            "add r1, r0, r1",
            "ldr r0, [0x000bbb30]",
            "add r3, r3, 0x168",
            "add r0, r2, r0",
            "mov r2, 0x34",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_sleep": {
        "function_address": "0x00055ae8",
        "instructions": [
            "ldr r2, [0x00055b40]",
            "str lr, [sp, -4]!",
            "umull r1, ip, r2, r0",
            "lsr ip, ip, 0x12",
            "rsb lr, ip, ip, lsl 5",
            "rsb lr, lr, lr, lsl 6",
            "mov r3, r0",
            "add lr, ip, lr, lsl 3",
            "sub sp, sp, 0x14",
            "mov r0, 0",
            "sub lr, r3, lr, lsl 6",
            "str lr, [sp, 0xc]",
            "mov r1, r0",
            "add lr, sp, 8",
            "mov r2, r0",
            "mov r3, r0",
            "str lr, [sp]",
            "str ip, [sp, 8]",
            "bl sym.imp.select",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.select": {
        "function_address": "0x0003f0d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9c4]!"
        ]
    },
    "sym.yaSSL::SSL::Send_unsigned_char_const__unsigned_int_": {
        "function_address": "0x00093120",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "add r0, r0, 0x9b0",
            "add r0, r0, 8",
            "mov r3, 0",
            "mov r5, r2",
            "bl rsym._ZNK5yaSSL6Socket4sendEPKhji",
            "cmp r5, r0",
            "beq 0x93154",
            "mov r0, r4",
            "mov r1, 0x71",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL6Socket4sendEPKhji": {
        "function_address": "0x0003f9a0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x3e4]!"
        ]
    },
    "sym.yaSSL_CTX_sess_connect_renegotiate": {
        "function_address": "0x00085b8c",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x14]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_TaoCrypt::Integer_const_": {
        "function_address": "0x000a938c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r0",
            "sub sp, sp, 0xc",
            "mov r0, r1",
            "mov r6, r1",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r5, [0x000a94d0]",
            "cmp r0, 8",
            "add r5, pc, r5",
            "bls 0xa946c",
            "cmp r0, 0x10",
            "movls r3, 0x10",
            "bls 0xa93d8",
            "cmp r0, 0x20",
            "movls r3, 0x20",
            "bls 0xa93d8",
            "cmp r0, 0x40",
            "movls r3, 0x40",
            "bhi 0xa9494",
            "str r3, [r4]",
            "mov r1, 0",
            "lsl r0, r3, 2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "mov r0, r4",
            "ldr r5, [r0], 8",
            "mov r1, r3",
            "str r3, [r4, 4]",
            "mov r7, 0",
            "mov r3, r5",
            "mov r2, r5",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r1, r7",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "bl sym.imp.memset",
            "ldr r1, [r4]",
            "ldr r3, [r6, 0xc]",
            "cmp r1, r7",
            "str r3, [r4, 0xc]",
            "ldr r0, [r6, 4]",
            "ldr ip, [r4, 4]",
            "beq 0xa945c",
            "mov r3, r7",
            "ldr r2, [r0, r7]",
            "add r3, r3, 1",
            "cmp r1, r3",
            "str r2, [ip, r7]",
            "add r7, r7, 4",
            "bhi 0xa9444",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [0x000a94d4]",
            "add r3, r5, r3",
            "add r0, r3, r0, lsl 2",
            "ldr r3, [r0, 0x5ec]",
            "cmn r3, 0xc0000001",
            "str r3, [r4]",
            "bhi 0xa94a8",
            "cmp r3, 0",
            "beq 0xa93ec",
            "b 0xa93dc",
            "sub r0, r0, 1",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r3, 1",
            "lsl r3, r3, r0",
            "b 0xa947c",
            "ldr r3, [0x000a94d4]",
            "ldr r1, [0x000a94d8]",
            "add r3, r5, r3",
            "ldr r0, [0x000a94dc]",
            "add r3, r3, 0xc80",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 8",
            "mov r2, 0x41",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_fwrite": {
        "function_address": "0x0004d024",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r1",
            "mov r4, r2",
            "mov r8, r3",
            "mov r6, r0",
            "bl sym.imp.ftell",
            "mov r7, 0",
            "mov sl, r0",
            "asr fp, sl, 0x1f",
            "mov r3, r6",
            "mov r2, r4",
            "mov r1, 1",
            "mov r0, r5",
            "bl sym.imp.fwrite",
            "cmp r4, r0",
            "mov r3, r0",
            "beq 0x4d13c",
            "str r0, [sp, 8]",
            "bl rsym._my_thread_var",
            "str r0, [sp, 0xc]",
            "bl sym.imp.__errno_location",
            "ldr r3, [sp, 8]",
            "ldr r1, [r0]",
            "ldr r2, [sp, 0xc]",
            "cmn r3, 1",
            "mov sb, r0",
            "str r1, [r2]",
            "beq 0x4d0ac",
            "adds sl, sl, r3",
            "adc fp, fp, 0",
            "add r5, r5, r3",
            "add r7, r7, r3",
            "rsb r4, r3, r4",
            "ldr r2, [sb]",
            "cmp r2, 4",
            "beq 0x4d10c",
            "mov r0, r6",
            "str r3, [sp, 8]",
            "bl sym.imp.ferror",
            "cmp r0, 0",
            "ldr r3, [sp, 8]",
            "beq 0x4d12c",
            "tst r8, 0x1a",
            "bne 0x4d0e8",
            "mvn r0, 0",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "bl sym.imp.fileno",
            "bl rsym.my_filename",
            "ldr r3, [sb]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 3",
            "bl rsym.my_error",
            "b 0x4d0d8",
            "mov r1, 0",
            "mov r0, r6",
            "mov r2, sl",
            "mov r3, fp",
            "str r1, [sp]",
            "str r1, [sp, 4]",
            "bl rsym.my_fseek",
            "b 0x4d04c",
            "tst r8, 6",
            "bne 0x4d0d0",
            "add r0, r7, r3",
            "b 0x4d0dc",
            "tst r8, 6",
            "movne r0, 0",
            "bne 0x4d0dc",
            "b 0x4d134"
        ]
    },
    "sym.TaoCrypt::MontgomeryRepresentation::ConvertIn_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad668",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r4, r1",
            "ldr r7, [r4, 0xc]!",
            "sub sp, sp, 0x24",
            "mov r1, r2",
            "mov r5, r0",
            "lsl r7, r7, 5",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, r7",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerlSEj",
            "add r6, sp, 0x10",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldm sp, {r2, r7}",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AllocatorWithCleanup_unsigned_int_::deallocate_void__unsigned_int_": {
        "function_address": "0x000acf1c",
        "instructions": [
            "push {r4, lr}",
            "lsl r2, r2, 2",
            "mov r4, r1",
            "mov r0, r1",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::Integer::IntegerImpl__yaSSL::Integer::IntegerImpl_": {
        "function_address": "0x000812bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x812e4",
            "ldm r4, {r2, r5}",
            "mov r0, r5",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::RSA_Encryptor_TaoCrypt::RSA_BlockType1_.SSL_Verify_unsigned_char_const__unsigned_int__unsigned_char_const_": {
        "function_address": "0x000bbc24",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r6, r0",
            "sub sp, sp, 0x18",
            "ldr r0, [r0]",
            "mov sb, r1",
            "mov r7, r2",
            "mov r8, r3",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "sub r0, r0, 1",
            "lsr r0, r0, 3",
            "cmp r0, 0xa",
            "movls ip, 0",
            "strls ip, [sp, 0xc]",
            "bls 0xbbc70",
            "sub r0, r0, 0xa",
            "str r0, [sp, 0xc]",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "add r0, sp, 0x18",
            "ldr r4, [r0, -0xc]!",
            "mov r1, ip",
            "mov r3, r4",
            "mov r2, r4",
            "mov r5, 0",
            "add r0, r0, 8",
            "str ip, [sp, 0x10]",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r4",
            "mov sl, r0",
            "mov r1, r5",
            "str r4, [sp, 0xc]",
            "str r0, [sp, 0x10]",
            "bl sym.imp.memset",
            "ldr r0, [r6]",
            "mov r1, r8",
            "mov r2, sl",
            "bl rsym._ZN8TaoCrypt11SSL_DecryptERKNS_13RSA_PublicKeyEPKhPh",
            "cmp r0, r7",
            "ldrne r4, [sp, 0x10]",
            "beq 0xbbcf4",
            "mov r1, 0",
            "ldr r2, [sp, 0xc]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r4, [sp, 0x10]",
            "mov r1, sb",
            "mov r2, r7",
            "mov r0, r4",
            "bl sym.imp.memcmp",
            "rsbs r5, r0, 1",
            "movlo r5, 0",
            "b 0xbbccc"
        ]
    },
    "sym.yaSSL::RandomPool::Fill_unsigned_char__unsigned_int__const": {
        "function_address": "0x0007dba0",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0]",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ServerKeyExchange::ServerKeyExchange_yaSSL::SSL_": {
        "function_address": "0x0008ee9c",
        "instructions": [
            "ldr r3, [0x0008eecc]",
            "ldr r2, [0x0008eed0]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "bl rsym._ZN5yaSSL17ServerKeyExchange9createKeyERNS_3SSLE",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::Initialize_TaoCrypt::Source_": {
        "function_address": "0x000a131c",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x000a1360]",
            "ldr ip, [0x000a1364]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "add ip, ip, 8",
            "str ip, [r2, -8]!",
            "mov ip, r0",
            "str r1, [sp, 4]",
            "mov r0, sp",
            "mov r1, ip",
            "bl rsym._ZN8TaoCrypt18DSA_Public_Decoder6DecodeERNS_13DSA_PublicKeyE",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt18DSA_Public_Decoder6DecodeERNS_13DSA_PublicKeyE": {
        "function_address": "0x0003f04c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa1c]!"
        ]
    },
    "sym.yaSSL::DES_EDE::decrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x000804c8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r7, 0x1ec]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "add r4, r7, 0x1b8",
            "bne 0x80540",
            "ldr r1, [r7, 0x1bc]",
            "mov r0, r3",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80534",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x80500",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x80534",
            "ldr r2, [r7, 0x1e8]",
            "cmp r2, 0",
            "bne 0x805c0",
            "mov r0, r3",
            "ldr r1, [r7, 0x1bc]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80534",
            "ldr r2, [r7, 0x1bc]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x8056c",
            "b 0x80534",
            "mov r0, r3",
            "ldr r1, [r7, 0x1bc]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80534",
            "ldr r2, [r7, 0x1bc]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x805dc",
            "b 0x80534"
        ]
    },
    "fcn.000880bc": {
        "function_address": "0x000880bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x880d8",
            "b 0x880e8",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x880d4",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym._my_b_read": {
        "function_address": "0x00053a58",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r0",
            "ldr r3, [r0, 0x14]",
            "ldr r0, [r0, 0x10]",
            "sub sp, sp, 0xc",
            "rsb r5, r0, r3",
            "cmp r5, 0",
            "mov r7, r1",
            "mov r6, r2",
            "mov sl, r5",
            "bne 0x53ba0",
            "ldr r1, [r4, 0x18]",
            "ldr r2, [r4, 0x8c]",
            "rsb r3, r1, r3",
            "ldm r4, {r0, r1}",
            "adds r8, r0, r3",
            "adc sb, r1, 0",
            "cmp r2, 0",
            "bne 0x53b70",
            "lsl r3, r8, 0x14",
            "lsr r3, r3, 0x14",
            "rsb r2, r3, 0x2000",
            "cmp r6, r2",
            "blo 0x53aec",
            "ldr r2, [r4, 0xc]",
            "cmp r2, sb",
            "bhi 0x53c08",
            "beq 0x53bfc",
            "str r5, [r4, 0x90]",
            "mov r0, 1",
            "b 0x53b64",
            "adds r8, r8, fp",
            "adc sb, sb, 0",
            "add sl, r5, fp",
            "rsb r6, fp, r6",
            "add r7, r7, fp",
            "mov r3, 0",
            "ldr r1, [r4, 0x64]",
            "ldr r2, [r4, 0x98]",
            "cmp r1, 4",
            "rsb r2, r3, r2",
            "beq 0x53b20",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "mov fp, r0",
            "mov ip, r1",
            "subs fp, fp, r8",
            "sbc ip, ip, sb",
            "cmp ip, 0",
            "beq 0x53bc0",
            "cmp r2, 0",
            "bne 0x53bcc",
            "cmp r6, 0",
            "strne sl, [r4, 0x90]",
            "movne r0, 1",
            "bne 0x53b64",
            "mov r5, r6",
            "ldr r1, [r4, 0x18]",
            "stm r4, {r8, sb}",
            "add r5, r1, r5",
            "add r3, r1, r6",
            "str r3, [r4, 0x10]",
            "str r5, [r4, 0x14]",
            "mov r0, r7",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [r4, 0x88]",
            "mov r1, 0",
            "mov r2, r8",
            "mov r3, sb",
            "str r1, [sp, 4]",
            "str r1, [sp]",
            "bl rsym.my_seek",
            "cmn r0, 1",
            "beq 0x53c7c",
            "mov r3, 0",
            "str r3, [r4, 0x8c]",
            "b 0x53aa4",
            "mov r1, r0",
            "mov r2, r5",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "add r7, r7, r5",
            "ldr r3, [r4, 0x14]",
            "rsb r6, r5, r6",
            "b 0x53a84",
            "cmp r2, fp",
            "rsbhi r2, r8, r0",
            "b 0x53b20",
            "ldr r0, [r4, 0x88]",
            "ldr r1, [r4, 0x18]",
            "ldr r3, [r4, 0x9c]",
            "bl rsym.my_read",
            "cmp r6, r0",
            "mov r5, r0",
            "bhi 0x53c44",
            "cmn r0, 1",
            "bne 0x53b3c",
            "stm r4, {r8, sb}",
            "mvn r5, 0",
            "b 0x53c64",
            "ldr r2, [r4, 8]",
            "cmp r2, r8",
            "bls 0x53ac8",
            "bic fp, r6, 0xff0",
            "bic fp, fp, 0xf",
            "rsb fp, r3, fp",
            "ldr r0, [r4, 0x88]",
            "mov r1, r7",
            "mov r2, fp",
            "ldr r3, [r4, 0x9c]",
            "bl rsym.my_read",
            "cmp fp, r0",
            "beq 0x53ad4",
            "cmn r0, 1",
            "addne r0, r0, r5",
            "str r0, [r4, 0x90]",
            "mov r0, 1",
            "b 0x53b64",
            "cmn r0, 1",
            "beq 0x53bf0",
            "mov r2, r5",
            "mov r0, r7",
            "ldr r1, [r4, 0x18]",
            "bl sym.imp.memcpy",
            "stm r4, {r8, sb}",
            "add r5, r5, sl",
            "ldr r3, [r4, 0x18]",
            "str r5, [r4, 0x90]",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0x14]",
            "mov r0, 1",
            "b 0x53b64",
            "cmn r1, 1",
            "streq r1, [r4, 0x90]",
            "moveq r0, 1",
            "bne 0x53b94",
            "b 0x53b64"
        ]
    },
    "fcn.0007d3e0": {
        "function_address": "0x0007d3e0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d424]",
            "ldr r3, [0x0007d428]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RMD7RMDImplEEEvPT_",
            "ldr r3, [0x0007d42c]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::EncryptedPreMasterSecret::alloc_int_": {
        "function_address": "0x0008b168",
        "instructions": [
            "push {r4, lr}",
            "str r1, [r0, 8]",
            "mov r4, r0",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_TaoCrypt::tcDelete_TaoCrypt::Integer__TaoCrypt::Integer_": {
        "function_address": "0x000bb5f4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0xbb61c",
            "ldm r4, {r2, r5}",
            "mov r0, r5",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN8TaoCrypt5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZdlPvN8TaoCrypt5new_tE": {
        "function_address": "0x0003e908",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xef4]!"
        ]
    },
    "sym.TaoCrypt::DES_EDE3::SetKey_unsigned_char_const__unsigned_int__TaoCrypt::CipherDir_": {
        "function_address": "0x0009f650",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r8, r3, 0",
            "mov r4, r0",
            "mov r6, r1",
            "mov r7, r2",
            "add r0, r0, 0x38",
            "bne 0x9f6a0",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0xb8",
            "add r1, r6, 8",
            "mov r2, r7",
            "mov r3, 1",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "add r5, r6, 0x10",
            "add r0, r4, 0x138",
            "mov r1, r5",
            "mov r2, r7",
            "mov r3, r8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "b rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "add r5, r1, 0x10",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0xb8",
            "add r1, r6, 8",
            "mov r2, r7",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "cmp r8, 1",
            "moveq r5, r6",
            "add r0, r4, 0x138",
            "b 0x9f68c"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::Errors__yaSSL::Errors_": {
        "function_address": "0x00089cc8",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x89ce4",
            "add r0, r4, 0xc",
            "bl rsym._ZN5yaSSL5MutexD1Ev",
            "mov r0, r4",
            "bl rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEED1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL4listIN5yaSSL11ThreadErrorEED1Ev": {
        "function_address": "0x0003facc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x31c]!"
        ]
    },
    "sym.yaX509_get_subject_name": {
        "function_address": "0x00085cb8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL4X50910GetSubjectEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::RSA_BlockType1.Pad_unsigned_char_const__unsigned_int__unsigned_char__unsigned_int__TaoCrypt::RandomNumberGenerator__const": {
        "function_address": "0x000b2b18",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [sp, 0x18]",
            "mov r6, r3",
            "tst r7, 7",
            "movne r3, 0",
            "strbne r3, [r6], 1",
            "mov r0, r6",
            "mov r3, 1",
            "rsb r7, r2, r7, lsr 3",
            "mov r5, r1",
            "mov r4, r2",
            "strb r3, [r0], 1",
            "sub r2, r7, 2",
            "mov r1, 0xff",
            "bl sym.imp.memset",
            "add r0, r6, r7",
            "mov r3, 0",
            "strb r3, [r0, -1]",
            "mov r1, r5",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer_mySTL::uninit_fill_n_TaoCrypt::Integer__unsigned_int__TaoCrypt.Integer__TaoCrypt::Integer__unsigned_int__TaoCrypt::Integer_const_": {
        "function_address": "0x000babbc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "mov r8, r2",
            "beq 0xbabf4",
            "mov r7, r5",
            "mov r6, r0",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "subs r7, r7, 1",
            "add r6, r6, 0x10",
            "bne 0xbabd8",
            "add r4, r4, r5, lsl 4",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::Integer.InverseMod_unsigned_int__const": {
        "function_address": "0x000a62b8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r1",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloEj",
            "subs r5, r0, 0",
            "beq 0xa6368",
            "cmp r5, 1",
            "moveq r6, r5",
            "beq 0xa636c",
            "mov r0, r8",
            "mov r1, r5",
            "bl fcn.000bee1c",
            "subs r4, r1, 0",
            "beq 0xa6368",
            "mov r0, r8",
            "mov r1, r5",
            "bl fcn.000bed20",
            "cmp r4, 1",
            "moveq r7, r0",
            "beq 0xa6378",
            "mov r7, r0",
            "mov r6, 1",
            "b 0xa634c",
            "bl fcn.000bed20",
            "cmp r5, 1",
            "mla r6, r7, r0, r6",
            "mov r1, r5",
            "mov r0, r4",
            "beq 0xa636c",
            "bl fcn.000bee1c",
            "mov r0, r4",
            "subs r4, r1, 0",
            "mov r1, r5",
            "beq 0xa6368",
            "bl fcn.000bed20",
            "cmp r4, 1",
            "mla r7, r0, r6, r7",
            "beq 0xa6378",
            "mov r0, r5",
            "mov r1, r4",
            "bl fcn.000bee1c",
            "mov r0, r5",
            "subs r5, r1, 0",
            "mov r1, r4",
            "bne 0xa6310",
            "mov r6, 0",
            "mov r0, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "rsb r6, r7, r8",
            "b 0xa636c"
        ]
    },
    "method.TaoCrypt::AllocatorWithCleanup_unsigned_char_::pointer_TaoCrypt::StdReallocate_unsigned_char__TaoCrypt.AllocatorWithCleanup_unsigned_char____TaoCrypt::AllocatorWithCleanup_unsigned_char___unsigned_char__TaoCrypt::AllocatorWithCleanup_unsigned_cha": {
        "function_address": "0x000bb630",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "cmp r2, r3",
            "mov r4, r1",
            "mov r5, r3",
            "mov r6, r2",
            "ldrb r1, [sp, 0x18]",
            "beq 0xbb694",
            "cmp r1, 0",
            "beq 0xbb6a0",
            "cmp r3, 0",
            "moveq r7, r3",
            "bne 0xbb6d0",
            "mov r1, r4",
            "cmp r5, r6",
            "movlo r2, r5",
            "movhs r2, r6",
            "mov r0, r7",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "mov r2, r6",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r4, r7",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "cmp r5, 0",
            "moveq r4, r5",
            "beq 0xbb694",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r4, r0",
            "b 0xbb694",
            "mov r1, 0",
            "mov r0, r3",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r7, r0",
            "b 0xbb660"
        ]
    },
    "sym.yaSSL_CTX_sess_connect_good": {
        "function_address": "0x00085bb4",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0xc]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::verifyState_yaSSL::ServerState_": {
        "function_address": "0x00091740",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x91760",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, r5",
            "beq 0x91758",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL11order_errorEv"
        ]
    },
    "method.TaoCrypt::DSA_PrivateKey.DSA_PrivateKey_TaoCrypt::Source_": {
        "function_address": "0x000a1424",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt14DSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.remove_io_thread": {
        "function_address": "0x00054f28",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 0x58]",
            "mov r5, r0",
            "ldr r3, [r4, 0x88]",
            "cmp r3, r0",
            "beq 0x54fc0",
            "mov r0, r4",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r6, [r4, 0x98]",
            "mov r3, 0",
            "sub r6, r6, 1",
            "str r6, [r4, 0x98]",
            "str r3, [r5, 0x58]",
            "ldr r2, [r4, 0x88]",
            "cmp r2, r5",
            "streq r3, [r4, 0x88]",
            "ldr r3, [r4, 0x94]",
            "sub r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r4, 0x94]",
            "beq 0x54fac",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_unlock",
            "cmp r6, 0",
            "bne 0x54fa4",
            "add r0, r4, 0x50",
            "bl sym.imp.pthread_cond_destroy",
            "add r0, r4, 0x20",
            "bl sym.imp.pthread_cond_destroy",
            "mov r0, r4",
            "bl sym.imp.pthread_mutex_destroy",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x50",
            "bl sym.imp.pthread_cond_signal",
            "add r0, r4, 0x20",
            "bl sym.imp.pthread_cond_broadcast",
            "b 0x54f7c",
            "mov r1, 1",
            "bl rsym.my_b_flush_io_cache",
            "b 0x54f40"
        ]
    },
    "sym.my_pthread_fastmutex_init": {
        "function_address": "0x0004dc5c",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0004dcac]",
            "ldr r2, [0x0004dcb0]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "cmp r2, 1",
            "ble 0x4dc90",
            "ldr r2, [0x0004dcb4]",
            "ldr r3, [r3, r2]",
            "cmp r1, r3",
            "moveq r3, 8",
            "streq r3, [r0, 0x18]",
            "beq 0x4dc98",
            "mov r3, 0",
            "str r3, [r0, 0x18]",
            "mov r3, 1",
            "str r3, [r0, 0x1c]",
            "bl sym.imp.pthread_mutex_init",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DiffieHellman::DiffieHellman__": {
        "function_address": "0x0007f990",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13DiffieHellman6DHImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ServerKeyBase::ServerKeyBase__": {
        "function_address": "0x00090aa4",
        "instructions": [
            "ldr ip, [0x00090ae0]",
            "ldr r3, [0x00090ae4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090ae8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090aec]",
            "ldr r0, [0x00090af0]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_thread_init": {
        "function_address": "0x0004d5a4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0004d66c]",
            "ldr r3, [0x0004d670]",
            "add r4, pc, r4",
            "ldr r5, [r4, r3]",
            "ldr r0, [r5]",
            "bl sym.imp.pthread_getspecific",
            "subs r6, r0, 0",
            "movne r0, 0",
            "beq 0x4d5d4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 1",
            "mov r1, 0x80",
            "bl sym.imp.calloc",
            "subs r7, r0, 0",
            "moveq r0, 1",
            "beq 0x4d5cc",
            "mov r1, r7",
            "ldr r0, [r5]",
            "bl sym.imp.pthread_setspecific",
            "bl sym.imp.pthread_self",
            "ldr r3, [0x0004d674]",
            "str r0, [r7, 0x60]",
            "ldr r1, [r4, r3]",
            "add r0, r7, 0x38",
            "bl rsym.my_pthread_fastmutex_init",
            "mov r1, r6",
            "add r0, r7, 8",
            "bl sym.imp.pthread_cond_init",
            "ldr r3, [0x0004d678]",
            "ldr r5, [r4, r3]",
            "mov r3, 1",
            "strb r3, [r7, 0x70]",
            "mov r0, r5",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r1, [0x0004d67c]",
            "ldr r3, [0x0004d680]",
            "ldr r2, [r4, r1]",
            "ldr r3, [r4, r3]",
            "add r2, r2, 1",
            "str r2, [r4, r1]",
            "str r2, [r7, 0x64]",
            "ldr r2, [r3]",
            "mov r0, r5",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r6",
            "b 0x4d5cc"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x0003d81c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa3c]!"
        ]
    },
    "sym.yaSSL::SSL::set_preMaster_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0009353c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r4, r0, 0x68",
            "mov r5, r2",
            "mov r0, r4",
            "mov r6, r1",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL10Connection14AllocPreSecretEj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r1, r6",
            "mov r2, r5",
            "ldr r0, [r0]",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL10Connection14AllocPreSecretEj": {
        "function_address": "0x0003da98",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x894]!"
        ]
    },
    "sym.yaSSL_CTX_sess_cb_hits": {
        "function_address": "0x00085b64",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x1c]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::input_buffer_::pop_front__": {
        "function_address": "0x00088148",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x88190",
            "ldr r3, [r4, 4]",
            "cmp r0, r3",
            "ldrne r3, [r0, 4]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4]",
            "streq r3, [r4]",
            "streq r3, [r4, 4]",
            "strne r2, [r3]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AES::encrypt_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000971e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x00097b34]",
            "sub sp, sp, 0x64",
            "add r4, pc, r4",
            "tst r1, 3",
            "str r4, [sp, 0x50]",
            "str r2, [sp, 0x4c]",
            "str r3, [sp, 0x5c]",
            "bne 0x97ae8",
            "mov r3, r1",
            "ldr r8, [r3], 4",
            "tst r3, 3",
            "bne 0x979f8",
            "add ip, r3, 4",
            "tst ip, 3",
            "ldr r2, [r1, 4]",
            "bne 0x97a70",
            "tst ip, 3",
            "ldr r3, [r3, 4]",
            "bne 0x97a48",
            "ldr sl, [sp, 0x50]",
            "ldr r1, [0x00097b38]",
            "ldr sb, [r0, 0x38]",
            "ldr r1, [sl, r1]",
            "bic r6, r8, 0xff0000",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x00097b3c]",
            "ldr r7, [ip, 4]",
            "ldr fp, [sl, r1]",
            "ldr r1, [0x00097b40]",
            "bic ip, r7, 0xff0000",
            "ldr r1, [sl, r1]",
            "bic ip, ip, 0xff",
            "str r1, [sp, 0x14]",
            "ldr r1, [0x00097b44]",
            "bic r7, r7, 0xff000000",
            "ldr r1, [sl, r1]",
            "bic r4, r3, 0xff0000",
            "str r1, [sp, 0x2c]",
            "add r1, r0, 0x3c",
            "str r1, [sp, 0x54]",
            "bic r1, r8, 0xff000000",
            "ldr r8, [r0, 0x3c]",
            "ldr r0, [sp, 0x54]",
            "ldr sl, [sp, 0x54]",
            "ldr r0, [r0, 8]",
            "ldr sl, [sl, 4]",
            "str r0, [sp, 4]",
            "ldr r0, [sp, 0x54]",
            "bic r7, r7, 0xff00",
            "bic r6, r6, 0xff",
            "lsr ip, ip, 8",
            "str sl, [sp, 8]",
            "bic r5, r2, 0xff0000",
            "ldr sl, [r0, 0xc]",
            "bic r1, r1, 0xff00",
            "orr ip, ip, r7, lsl 8",
            "lsr sb, sb, 1",
            "ldr r7, [sp, 0x2c]",
            "bic r4, r4, 0xff",
            "bic r3, r3, 0xff000000",
            "lsr r6, r6, 8",
            "str sb, [sp, 0x58]",
            "bic r3, r3, 0xff00",
            "orr r6, r6, r1, lsl 8",
            "bic r5, r5, 0xff",
            "bic r2, r2, 0xff000000",
            "lsr r4, r4, 8",
            "ldr r1, [sp, 0xc]",
            "ldr r7, [r7]",
            "bic r2, r2, 0xff00",
            "orr r4, r4, r3, lsl 8",
            "ldr sb, [sp, 4]",
            "ldr r3, [sp, 0x14]",
            "lsr r5, r5, 8",
            "eor r6, r8, r6, ror 16",
            "eor ip, sl, ip, ror 16",
            "ldr r8, [sp, 8]",
            "ldr sl, [sp, 0x58]",
            "orr r5, r5, r2, lsl 8",
            "ldr r0, [r1]",
            "ldr r2, [r3]",
            "ldr r1, [fp]",
            "str r7, [sp, 0x14]",
            "ldr r3, [sp, 0x54]",
            "eor r5, r8, r5, ror 16",
            "eor r4, sb, r4, ror 16",
            "str sl, [sp, 0x48]",
            "mov fp, r7",
            "b 0x974f0",
            "ldr fp, [sp, 0x14]",
            "and r8, ip, 0xff",
            "ldr r8, [fp, r8, lsl 2]",
            "and r7, r4, 0xff",
            "and sb, r6, 0xff",
            "and sl, r5, 0xff",
            "ldr sb, [fp, sb, lsl 2]",
            "ldr sl, [fp, sl, lsl 2]",
            "ldr r7, [fp, r7, lsl 2]",
            "str r8, [sp, 0x38]",
            "lsr fp, r4, 0x10",
            "lsr r8, r5, 0x10",
            "str r8, [sp, 0x44]",
            "str fp, [sp, 0x10]",
            "lsr r8, ip, 0x18",
            "lsr fp, r4, 0x18",
            "ldr r8, [r0, r8, lsl 2]",
            "ldr fp, [r0, fp, lsl 2]",
            "str sl, [sp, 0x1c]",
            "str r7, [sp, 0x40]",
            "lsr sl, ip, 0x10",
            "lsr r7, r6, 0x18",
            "str r7, [sp, 0x28]",
            "str sb, [sp, 0xc]",
            "and sl, sl, 0xff",
            "lsr sb, r5, 0x18",
            "str r8, [sp, 0x30]",
            "str fp, [sp, 0x3c]",
            "ldr r8, [sp, 0x10]",
            "ldr fp, [sp, 0x44]",
            "ldr sb, [r0, sb, lsl 2]",
            "str sl, [sp, 0x18]",
            "ldr sl, [sp, 0x28]",
            "lsr r7, r6, 0x10",
            "and r8, r8, 0xff",
            "and fp, fp, 0xff",
            "lsr ip, ip, 8",
            "ldr sl, [r0, sl, lsl 2]",
            "str sb, [sp, 0x2c]",
            "str r8, [sp, 0x34]",
            "and sb, r7, 0xff",
            "str fp, [sp, 0x20]",
            "ldr r7, [sp, 0x1c]",
            "ldr fp, [r3, 0x24]",
            "str ip, [sp, 0x44]",
            "lsr r8, r4, 8",
            "ldr ip, [sp, 0xc]",
            "ldr r4, [r3, 0x20]",
            "str sb, [sp, 0x24]",
            "str sl, [sp, 0x28]",
            "lsr sb, r5, 8",
            "lsr sl, r6, 8",
            "eor r5, r7, fp",
            "eor r6, ip, r4",
            "ldr r7, [r3, 0x28]",
            "ldr ip, [sp, 0x38]",
            "and sl, sl, 0xff",
            "eor r4, ip, r7",
            "ldr r7, [r3, 0x2c]",
            "ldr ip, [sp, 0x40]",
            "and r8, r8, 0xff",
            "eor fp, ip, r7",
            "ldr ip, [sp, 0x18]",
            "and sb, sb, 0xff",
            "ldr ip, [r1, ip, lsl 2]",
            "add r3, r3, 0x20",
            "str ip, [sp, 0xc]",
            "ldr r7, [sp, 0x34]",
            "str sl, [sp, 0x18]",
            "ldr r7, [r1, r7, lsl 2]",
            "ldr ip, [sp, 0x20]",
            "ldr sl, [sp, 0x24]",
            "str r7, [sp, 0x10]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr ip, [r1, ip, lsl 2]",
            "ldr r7, [sp, 0x44]",
            "str sl, [sp, 0x1c]",
            "str ip, [sp, 0x20]",
            "and sl, r7, 0xff",
            "ldr ip, [sp, 0x2c]",
            "ldr r7, [sp, 0x30]",
            "eor r6, r6, ip",
            "eor r5, r5, r7",
            "ldr ip, [sp, 0x3c]",
            "ldr r7, [sp, 0x28]",
            "eor r4, r4, ip",
            "eor ip, fp, r7",
            "ldr fp, [sp, 0x18]",
            "ldr r8, [r2, r8, lsl 2]",
            "ldr r7, [r2, fp, lsl 2]",
            "ldr fp, [sp, 0xc]",
            "ldr sb, [r2, sb, lsl 2]",
            "eor r6, r6, fp",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [r2, sl, lsl 2]",
            "eor r5, r5, fp",
            "ldr fp, [sp, 0x1c]",
            "eor r6, r6, r8",
            "eor r4, r4, fp",
            "ldr fp, [sp, 0x20]",
            "eor r5, r5, r7",
            "eor ip, ip, fp",
            "ldr fp, [sp, 0x14]",
            "eor r4, r4, sb",
            "eor ip, ip, sl",
            "and r7, r4, 0xff",
            "ldr r7, [fp, r7, lsl 2]",
            "and sb, ip, 0xff",
            "and sl, r6, 0xff",
            "and r8, r5, 0xff",
            "ldr sb, [fp, sb, lsl 2]",
            "ldr sl, [fp, sl, lsl 2]",
            "ldr r8, [fp, r8, lsl 2]",
            "lsr fp, r4, 0x18",
            "str r7, [sp, 0x40]",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr r7, ip, 0x18",
            "str r7, [sp, 0x28]",
            "str fp, [sp, 0x3c]",
            "ldr fp, [sp, 0x28]",
            "str sl, [sp, 0x1c]",
            "str r8, [sp, 0x38]",
            "lsr sl, r5, 0x10",
            "lsr r8, r6, 0x10",
            "lsr r7, r4, 0x10",
            "str r8, [sp, 0x44]",
            "str sb, [sp, 0xc]",
            "str sl, [sp, 0x10]",
            "ldr fp, [r0, fp, lsl 2]",
            "lsr sb, r6, 0x18",
            "lsr sl, ip, 0x10",
            "and r7, r7, 0xff",
            "ldr sb, [r0, sb, lsl 2]",
            "lsr r8, r5, 0x18",
            "str r7, [sp, 0x34]",
            "and sl, sl, 0xff",
            "ldr r7, [sp, 0x44]",
            "ldr r8, [r0, r8, lsl 2]",
            "str sl, [sp, 0x24]",
            "str fp, [sp, 0x28]",
            "ldr sl, [sp, 0xc]",
            "ldr fp, [r3, 0x10]",
            "str sb, [sp, 0x2c]",
            "and r7, r7, 0xff",
            "ldr sb, [sp, 0x10]",
            "lsr r5, r5, 8",
            "str r8, [sp, 0x30]",
            "str r7, [sp, 0x20]",
            "str r5, [sp, 0x44]",
            "ldr r7, [r3, 0x14]",
            "eor r5, sl, fp",
            "lsr r8, r4, 8",
            "ldr sl, [sp, 0x38]",
            "ldr r4, [sp, 0x1c]",
            "ldr fp, [r3, 0x18]",
            "and sb, sb, 0xff",
            "str sb, [sp, 0x18]",
            "lsr sb, ip, 8",
            "eor ip, r4, r7",
            "eor r4, sl, fp",
            "ldr r7, [sp, 0x40]",
            "ldr sl, [r3, 0x1c]",
            "lsr r6, r6, 8",
            "eor fp, r7, sl",
            "ldr r7, [sp, 0x18]",
            "and r6, r6, 0xff",
            "ldr r7, [r1, r7, lsl 2]",
            "and sb, sb, 0xff",
            "str r7, [sp, 0xc]",
            "ldr sl, [sp, 0x34]",
            "ldr r7, [sp, 0x24]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr r7, [r1, r7, lsl 2]",
            "str sl, [sp, 0x10]",
            "str r7, [sp, 0x18]",
            "ldr sl, [sp, 0x20]",
            "ldr r7, [sp, 0x2c]",
            "str r6, [sp, 0x1c]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr r6, [sp, 0x44]",
            "eor r5, r5, r7",
            "ldr r7, [sp, 0x3c]",
            "str sl, [sp, 0x20]",
            "eor r4, r4, r7",
            "and sl, r6, 0xff",
            "ldr r7, [sp, 0x28]",
            "ldr r6, [sp, 0x30]",
            "and r8, r8, 0xff",
            "eor ip, ip, r6",
            "eor r6, fp, r7",
            "ldr fp, [sp, 0x1c]",
            "ldr r7, [r2, sb, lsl 2]",
            "ldr sb, [r2, fp, lsl 2]",
            "ldr fp, [sp, 0xc]",
            "ldr r8, [r2, r8, lsl 2]",
            "eor r5, r5, fp",
            "ldr fp, [sp, 0x10]",
            "ldr sl, [r2, sl, lsl 2]",
            "eor ip, ip, fp",
            "ldr fp, [sp, 0x18]",
            "eor r5, r5, r8",
            "eor r4, r4, fp",
            "ldr fp, [sp, 0x20]",
            "eor ip, ip, r7",
            "eor r6, r6, fp",
            "ldr fp, [sp, 0x48]",
            "eor r4, r4, sb",
            "subs fp, fp, 1",
            "str fp, [sp, 0x48]",
            "eor r6, r6, sl",
            "bne 0x9734c",
            "ldr r0, [sp, 0x50]",
            "lsr r2, r5, 0x10",
            "lsr sb, ip, 0x10",
            "ldr r3, [0x00097b48]",
            "and sb, sb, 0xff",
            "and r2, r2, 0xff",
            "str sb, [sp, 0x48]",
            "ldr r3, [r0, r3]",
            "ldr sb, [sp, 0x54]",
            "lsr r7, r6, 8",
            "lsr r0, r6, 0x10",
            "str r2, [sp, 0x28]",
            "ldr r2, [sp, 0x58]",
            "and r7, r7, 0xff",
            "and r0, r0, 0xff",
            "ldr r3, [r3]",
            "str r7, [sp, 0x2c]",
            "str r0, [sp, 0x18]",
            "lsr r7, r6, 0x18",
            "add r0, sb, r2, lsl 5",
            "ldr sb, [sb, r2, lsl 5]",
            "ldr r2, [sp, 0x48]",
            "lsr r8, r4, 0x10",
            "str r7, [sp, 0x24]",
            "lsr r7, ip, 0x18",
            "ldr r2, [r3, r2, lsl 2]",
            "ldr r7, [r3, r7, lsl 2]",
            "and r8, r8, 0xff",
            "str r8, [sp, 0x10]",
            "lsr sl, r4, 8",
            "and sl, sl, 0xff",
            "str r2, [sp, 0x48]",
            "str r7, [sp, 0x30]",
            "ldr r2, [sp, 0x10]",
            "ldr r7, [sp, 0x2c]",
            "str sl, [sp, 0xc]",
            "ldr r8, [sp, 0x5c]",
            "and sl, r4, 0xff",
            "lsr r4, r4, 0x18",
            "ldr sl, [r3, sl, lsl 2]",
            "ldr r2, [r3, r2, lsl 2]",
            "ldr r7, [r3, r7, lsl 2]",
            "ldr r4, [r3, r4, lsl 2]",
            "lsr r1, r5, 8",
            "str sb, [sp, 0x14]",
            "ldr sb, [sp, 0xc]",
            "and r1, r1, 0xff",
            "tst r8, 3",
            "and r6, r6, 0xff",
            "lsr r8, r5, 0x18",
            "and r5, r5, 0xff",
            "lsr fp, ip, 8",
            "str sl, [sp, 0x1c]",
            "ldr r6, [r3, r6, lsl 2]",
            "ldr sl, [r3, r8, lsl 2]",
            "str r2, [sp, 0x20]",
            "ldr r8, [r3, sb, lsl 2]",
            "str r7, [sp, 0x2c]",
            "ldr r5, [r3, r5, lsl 2]",
            "str r4, [sp, 0x10]",
            "ldr r1, [r3, r1, lsl 2]",
            "ldr sb, [sp, 0x18]",
            "ldr r2, [sp, 0x24]",
            "ldr r7, [sp, 0x28]",
            "and ip, ip, 0xff",
            "and fp, fp, 0xff",
            "ldr r4, [r3, sb, lsl 2]",
            "str r1, [sp, 0xc]",
            "ldr sb, [r0, 4]",
            "ldr r1, [r3, ip, lsl 2]",
            "ldr ip, [r3, r2, lsl 2]",
            "ldr r2, [r3, r7, lsl 2]",
            "ldr r7, [r0, 0xc]",
            "ldr r3, [r3, fp, lsl 2]",
            "ldr r0, [r0, 8]",
            "bne 0x97a98",
            "ldr fp, [sp, 0x14]",
            "and r6, r6, 0xff",
            "eor r6, r6, fp",
            "ldr fp, [sp, 0x48]",
            "and sl, sl, 0xff000000",
            "eor sl, r6, sl",
            "and r6, fp, 0xff0000",
            "eor sl, sl, r6",
            "ldr r6, [sp, 0x4c]",
            "and r8, r8, 0xff00",
            "cmp r6, 0",
            "eor r8, sl, r8",
            "beq 0x97964",
            "mov fp, r6",
            "bic sl, r8, 0xff0000",
            "ldr r6, [fp], 4",
            "bic sl, sl, 0xff",
            "bic r8, r8, 0xff000000",
            "bic r8, r8, 0xff00",
            "lsr sl, sl, 8",
            "str fp, [sp, 0x4c]",
            "orr r8, sl, r8, lsl 8",
            "ldr fp, [sp, 0x5c]",
            "eor r6, r6, r8, ror 16",
            "str r6, [fp], 4",
            "tst fp, 3",
            "bne 0x97a20",
            "ldr r6, [sp, 0x30]",
            "and r5, r5, 0xff",
            "ldr r8, [sp, 0x20]",
            "eor r5, r5, sb",
            "ldr sl, [sp, 0x2c]",
            "and sb, r6, 0xff000000",
            "ldr r6, [sp, 0x4c]",
            "eor r5, r5, sb",
            "and sb, r8, 0xff0000",
            "eor r5, r5, sb",
            "cmp r6, 0",
            "and sb, sl, 0xff00",
            "eor r5, r5, sb",
            "beq 0x9798c",
            "bic r8, r5, 0xff0000",
            "mov sb, r6",
            "bic r8, r8, 0xff",
            "bic r5, r5, 0xff000000",
            "ldr r6, [sb], 4",
            "bic r5, r5, 0xff00",
            "lsr r8, r8, 8",
            "orr r5, r8, r5, lsl 8",
            "eor r5, r6, r5, ror 16",
            "str sb, [sp, 0x4c]",
            "str r5, [fp], 4",
            "tst fp, 3",
            "bne 0x97ac0",
            "ldr r5, [sp, 0x10]",
            "and r1, r1, 0xff",
            "eor r1, r1, r0",
            "ldr r6, [sp, 0xc]",
            "and r0, r5, 0xff000000",
            "ldr r8, [sp, 0x4c]",
            "eor r1, r1, r0",
            "and r4, r4, 0xff0000",
            "eor r1, r1, r4",
            "and r5, r6, 0xff00",
            "cmp r8, 0",
            "eor r1, r1, r5",
            "beq 0x979b0",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "ldr r4, [r8], 4",
            "bic r1, r1, 0xff00",
            "lsr r0, r0, 8",
            "orr r1, r0, r1, lsl 8",
            "eor r1, r4, r1, ror 16",
            "str r8, [sp, 0x4c]",
            "str r1, [fp], 4",
            "tst fp, 3",
            "bne 0x97b0c",
            "ldr sl, [sp, 0x1c]",
            "and ip, ip, 0xff000000",
            "and r1, sl, 0xff",
            "eor r7, r1, r7",
            "eor ip, r7, ip",
            "and r2, r2, 0xff0000",
            "eor r2, ip, r2",
            "ldr ip, [sp, 0x4c]",
            "and r3, r3, 0xff00",
            "cmp ip, 0",
            "eor r3, r2, r3",
            "beq 0x979d4",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "ldr r2, [ip]",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "eor r3, r2, r3, ror 16",
            "str r3, [fp]",
            "add sp, sp, 0x64",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "bic r6, r8, 0xff0000",
            "bic r6, r6, 0xff",
            "bic r8, r8, 0xff000000",
            "bic r8, r8, 0xff00",
            "lsr r6, r6, 8",
            "orr r6, r6, r8, lsl 8",
            "ldr fp, [sp, 0x5c]",
            "ror r6, r6, 0x10",
            "str r6, [fp], 4",
            "b 0x9782c",
            "bic r6, r5, 0xff0000",
            "bic r6, r6, 0xff",
            "bic r5, r5, 0xff000000",
            "bic r5, r5, 0xff00",
            "lsr r6, r6, 8",
            "orr r5, r6, r5, lsl 8",
            "ror r5, r5, 0x10",
            "str r5, [fp], 4",
            "b 0x97898",
            "bic r0, r1, 0xff0000",
            "bic r0, r0, 0xff",
            "bic r1, r1, 0xff000000",
            "bic r1, r1, 0xff00",
            "lsr r0, r0, 8",
            "orr r1, r0, r1, lsl 8",
            "ror r1, r1, 0x10",
            "str r1, [fp], 4",
            "b 0x978fc",
            "bic r2, r3, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r2, r2, 8",
            "orr r3, r2, r3, lsl 8",
            "ror r3, r3, 0x10",
            "str r3, [fp]",
            "b 0x97958",
            "ldr r5, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x00097b58]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x00097b5c]",
            "bl sym.imp.__assert_fail",
            "ldr r7, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x00097b58]",
            "bl sym.imp.__assert_fail",
            "ldr r6, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x00097b58]",
            "bl sym.imp.__assert_fail",
            "ldr r8, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x00097b5c]",
            "bl sym.imp.__assert_fail",
            "ldr sl, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, sl, r3",
            "add r1, sl, r1",
            "add r0, sl, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x00097b5c]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x198",
            "ldr r2, [0x00097b58]",
            "bl sym.imp.__assert_fail",
            "ldr sb, [sp, 0x50]",
            "ldr r3, [0x00097b4c]",
            "ldr r1, [0x00097b50]",
            "ldr r0, [0x00097b54]",
            "add r3, sb, r3",
            "add r1, sb, r1",
            "add r0, sb, r0",
            "add r3, r3, 0x1f8",
            "ldr r2, [0x00097b5c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::operator___yaSSL::output_buffer__yaSSL::Finished_const_": {
        "function_address": "0x0008bfb0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, r1",
            "mov r5, r1",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "cmp r0, 0x24",
            "beq 0x8bfe8",
            "add r1, r5, 8",
            "mov r0, r4",
            "mov r2, 0xc",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r1, r5, 8",
            "mov r0, r4",
            "mov r2, 0x10",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r4",
            "add r1, r5, 0x18",
            "mov r2, 0x14",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "b 0x8bfdc"
        ]
    },
    "sym.my_strntoull10rnd_ucs2": {
        "function_address": "0x0006ba18",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x11c",
            "add sl, sp, 0x14",
            "mov sb, r1",
            "cmp r2, 0xff",
            "addls r7, r1, r2",
            "addhi r7, r1, 0xff",
            "mov r6, r0",
            "str r3, [sp, 0xc]",
            "ldr fp, [sp, 0x140]",
            "mov r4, sl",
            "mov r5, r1",
            "add r8, sp, 0x114",
            "b 0x6ba6c",
            "ldr r3, [sp, 0x114]",
            "add r4, r4, 1",
            "sub r1, r3, 1",
            "cmp r1, 0x64",
            "bhi 0x6ba98",
            "add r5, r5, r0",
            "strb r3, [r4, -1]",
            "mov r2, r5",
            "ldr ip, [r6, 0x64]",
            "mov r0, r6",
            "mov r1, r8",
            "mov r3, r7",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "mov r2, r4",
            "bgt 0x6ba50",
            "ldr ip, [sp, 0x144]",
            "rsb r2, sl, r2",
            "ldr r3, [sp, 0xc]",
            "mov r0, r6",
            "mov r1, sl",
            "stm sp, {fp, ip}",
            "bl rsym.my_strntoull10rnd_8bit",
            "ldr r3, [fp]",
            "rsb sl, sl, r3",
            "add sb, sb, sl, lsl 1",
            "str sb, [fp]",
            "add sp, sp, 0x11c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "rsym.my_strntoull10rnd_8bit": {
        "function_address": "0x0004006c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf5c]!"
        ]
    },
    "sym.yaSSL::SSL::setKeys__": {
        "function_address": "0x00091f18",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r6, r0, 0x68",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "mov r4, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x91f8c",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "add r1, r4, 0xdc",
            "ldr r3, [r0]",
            "add r2, r4, 0x10c",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "add r2, r4, 0xfc",
            "ldr r3, [r0]",
            "add r1, r4, 0xbc",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "add r1, r4, 0xbc",
            "add r2, r4, 0xfc",
            "ldr r3, [r0]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "add r2, r4, 0x10c",
            "ldr r3, [r0]",
            "add r1, r4, 0xdc",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "b 0x91f84"
        ]
    },
    "sym.insert_dynamic": {
        "function_address": "0x000505ec",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0, 4]",
            "ldr r2, [r0, 8]",
            "sub sp, sp, 8",
            "cmp r3, r2",
            "mov r4, r0",
            "beq 0x50630",
            "ldr r2, [r0, 0x10]",
            "ldr lr, [r0]",
            "add ip, r3, 1",
            "mla r0, r2, r3, lr",
            "str ip, [r4, 4]",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr",
            "str r1, [sp, 4]",
            "bl rsym.alloc_dynamic",
            "cmp r0, 0",
            "ldr r1, [sp, 4]",
            "ldrne r2, [r4, 0x10]",
            "moveq r0, 1",
            "bne 0x5061c",
            "b 0x50624"
        ]
    },
    "sym.yaSSLv23_server_method": {
        "function_address": "0x000866b8",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 2",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, 1",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_delete": {
        "function_address": "0x00048dd0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r1",
            "mov r5, r0",
            "bl sym.imp.unlink",
            "cmn r0, 1",
            "mov r4, r0",
            "beq 0x48e18",
            "tst r6, 0x400",
            "bne 0x48e00",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym.my_sync_dir_by_file",
            "cmp r0, 0",
            "mvnne r4, 0",
            "b 0x48df4",
            "bl rsym._my_thread_var",
            "mov r7, r0",
            "bl sym.imp.__errno_location",
            "ldr r2, [r0]",
            "tst r6, 0x18",
            "str r2, [r7]",
            "beq 0x48df4",
            "and r1, r6, 0x80",
            "ldr r3, [r0]",
            "add r1, r1, 0x24",
            "mov r2, r5",
            "mov r0, 6",
            "bl rsym.my_error",
            "b 0x48df4"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x0003e794",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfec]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::Equal_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000acefc",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DH_Server::read_yaSSL::SSL__yaSSL::input_buffer_": {
        "function_address": "0x0008e15c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xa4",
            "str r0, [sp, 0x18]",
            "mov sb, r1",
            "mov r0, r2",
            "ldr r1, [0x0008e610]",
            "mov r6, r2",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008e610]",
            "mov r0, r6",
            "strb r3, [sp, 0x9c]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "add r7, sp, 0x9c",
            "ldrb r3, [r0]",
            "add r8, sp, 0x9e",
            "mov r0, r7",
            "mov r1, r8",
            "strb r3, [sp, 0x9d]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldr r2, [sp, 0x18]",
            "ldrh r5, [sp, 0x9e]",
            "add r4, r2, 4",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL14ServerDHParams7alloc_pEi",
            "ldrh r2, [sp, 0x9e]",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r6",
            "ldr r1, [0x0008e610]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008e610]",
            "mov r0, r6",
            "strb r3, [sp, 0x9c]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r8",
            "mov r0, r7",
            "strb r3, [sp, 0x9d]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh r1, [sp, 0x9e]",
            "mov r0, r4",
            "add r5, r5, r1",
            "bl rsym._ZN5yaSSL14ServerDHParams7alloc_gEi",
            "ldrh r2, [sp, 0x9e]",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r6",
            "ldr r1, [0x0008e610]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008e610]",
            "mov r0, r6",
            "strb r3, [sp, 0x9c]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r8",
            "mov r0, r7",
            "strb r3, [sp, 0x9d]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh sl, [sp, 0x9e]",
            "mov r0, r4",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL14ServerDHParams9alloc_pubEi",
            "lsl r5, r5, 0x10",
            "add r5, r5, 0x60000",
            "lsr r5, r5, 0x10",
            "add sl, r5, sl",
            "lsl sl, sl, 0x10",
            "ldrh r2, [sp, 0x9e]",
            "lsr sl, sl, 0x10",
            "add r5, sp, 0x74",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r1, sl",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "rsb r1, sl, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer11set_currentEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, sl",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "mov r0, r6",
            "ldr r1, [0x0008e610]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "ldr r1, [0x0008e610]",
            "mov r0, r6",
            "strb r3, [sp, 0x9c]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "mov r1, r8",
            "mov r0, r7",
            "strb r3, [sp, 0x9d]",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "mov r1, 0",
            "ldrh r0, [sp, 0x9e]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldr lr, [sp, 0x18]",
            "mov r3, r0",
            "str r3, [lr, 0x1c]",
            "mov r1, r0",
            "ldrh r2, [sp, 0x9e]",
            "mov r0, r6",
            "add r6, sp, 0x94",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "add r7, sp, 0x8c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r8, r0, 0x34",
            "add sl, r0, 0x54",
            "mov r1, r8",
            "mov r0, r6",
            "mov r2, 0x20",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r1, sl",
            "mov r2, 0x20",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r1, r0",
            "mov r0, r5",
            "str r1, [sp, 0x14]",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "add fp, sp, 0x50",
            "mov r2, r0",
            "ldr r1, [sp, 0x14]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r0, r6",
            "mov r1, fp",
            "bl rsym._ZN5yaSSL3MD510get_digestEPh",
            "mov r1, r8",
            "mov r0, r7",
            "mov r2, 0x20",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "mov r1, sl",
            "mov r2, 0x20",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "add r2, fp, 0x10",
            "mov r8, r0",
            "mov r0, r5",
            "str r2, [sp, 0x1c]",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r1, r8",
            "mov r2, r0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPh",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r8, r0",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr sl, [r0, 0x20]",
            "cmp sl, 1",
            "beq 0x8e584",
            "ldr r2, [sp, 0x18]",
            "add sl, sp, 0x28",
            "ldr r1, [r2, 0x1c]",
            "mov r0, sl",
            "ldrh r2, [sp, 0x9e]",
            "bl rsym._ZN8TaoCrypt19DecodeDSA_SignatureEPhPKhj",
            "strh r0, [sp, 0x9e]",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL11CertManager11get_peerKeyEv",
            "mov fp, r0",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv",
            "add r8, sp, 0x84",
            "mov r2, r0",
            "mov r1, fp",
            "mov r3, 1",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3DSSC1EPKhjb",
            "ldrh ip, [sp, 0x9e]",
            "ldr r1, [sp, 0x1c]",
            "mov r3, sl",
            "mov r0, r8",
            "mov r2, 0x14",
            "str ip, [sp]",
            "bl rsym._ZN5yaSSL3DSS6verifyEPKhjS2_j",
            "cmp r0, 0",
            "beq 0x8e5e8",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3DSSD1Ev",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "str r0, [sp, 0x24]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams5get_pEv",
            "str r0, [sp, 0x20]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams9get_pSizeEv",
            "mov sl, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams5get_gEv",
            "mov fp, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams9get_gSizeEv",
            "str r0, [sp, 0x1c]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams7get_pubEv",
            "str r0, [sp, 0x18]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL14ServerDHParams11get_pubSizeEv",
            "mov ip, r0",
            "mov r0, sb",
            "str ip, [sp, 0x14]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, 0",
            "mov r4, r0",
            "mov r0, 4",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr lr, [sp, 0x1c]",
            "ldr ip, [sp, 0x14]",
            "str lr, [sp]",
            "ldr lr, [sp, 0x18]",
            "mov r2, sl",
            "mov r3, fp",
            "mov r8, r0",
            "ldr r1, [sp, 0x20]",
            "str lr, [sp, 4]",
            "str ip, [sp, 8]",
            "str r4, [sp, 0xc]",
            "bl rsym._ZN5yaSSL13DiffieHellmanC1EPKhjS2_jS2_jRKNS_10RandomPoolE",
            "mov r1, r8",
            "ldr r0, [sp, 0x24]",
            "bl rsym._ZN5yaSSL6Crypto5SetDHEPNS_13DiffieHellmanE",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL11CertManager11get_peerKeyEv",
            "mov r1, r0",
            "mov r0, r8",
            "str r1, [sp, 0x14]",
            "bl rsym._ZNK5yaSSL11CertManager17get_peerKeyLengthEv",
            "add r8, sp, 0x28",
            "mov r2, r0",
            "ldr r1, [sp, 0x14]",
            "mov r3, sl",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "ldr lr, [sp, 0x18]",
            "ldrh ip, [sp, 0x9e]",
            "ldr r3, [lr, 0x1c]",
            "mov r1, fp",
            "mov r0, r8",
            "mov r2, 0x24",
            "str ip, [sp]",
            "bl rsym._ZN5yaSSL3RSA6verifyEPKhjS2_j",
            "cmp r0, 0",
            "beq 0x8e5f8",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "b 0x8e4b0",
            "mov r0, sb",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8e4a8",
            "mov r0, sb",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL3RSAD1Ev",
            "b 0x8e4b0"
        ]
    },
    "rsym._ZN5yaSSL14ServerDHParams7alloc_pEi": {
        "function_address": "0x000400b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf2c]!"
        ]
    },
    "rsym._ZN5yaSSL14ServerDHParams7alloc_gEi": {
        "function_address": "0x0003ddb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x684]!"
        ]
    },
    "rsym._ZN5yaSSL14ServerDHParams9alloc_pubEi": {
        "function_address": "0x0003fcd0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1c4]!"
        ]
    },
    "rsym._ZN5yaSSL3SHA6updateEPKhj": {
        "function_address": "0x0003f874",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4ac]!"
        ]
    },
    "rsym._ZN5yaSSL3SHA10get_digestEPh": {
        "function_address": "0x0003e83c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf7c]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams5get_pEv": {
        "function_address": "0x0003e560",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x164]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams9get_pSizeEv": {
        "function_address": "0x0003fa18",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x394]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams5get_gEv": {
        "function_address": "0x0003d27c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xdfc]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams9get_gSizeEv": {
        "function_address": "0x0003d420",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xce4]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams7get_pubEv": {
        "function_address": "0x0003edc4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xbcc]!"
        ]
    },
    "rsym._ZNK5yaSSL14ServerDHParams11get_pubSizeEv": {
        "function_address": "0x000408c4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9cc]!"
        ]
    },
    "rsym._ZN5yaSSL13DiffieHellmanC1EPKhjS2_jS2_jRKNS_10RandomPoolE": {
        "function_address": "0x000400c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf24]!"
        ]
    },
    "rsym._ZN5yaSSL6Crypto5SetDHEPNS_13DiffieHellmanE": {
        "function_address": "0x00040060",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf64]!"
        ]
    },
    "sym.yaSSL_CTX_sess_cache_full": {
        "function_address": "0x00085b50",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL7SSL_CTX8GetStatsEv",
            "ldr r0, [r0, 0x20]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::Socket.shutDown_int_": {
        "function_address": "0x00084da0",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0]",
            "bl sym.imp.shutdown",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sslFactory::sslFactory__": {
        "function_address": "0x0009357c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, 0",
            "mov r4, r0",
            "str r5, [r0]",
            "str r5, [r0, 4]",
            "str r5, [r0, 8]",
            "bl rsym._ZN5yaSSL18InitMessageFactoryERNS_7FactoryINS_7MessageEiPFPS1_vEEE",
            "add r0, r4, 0xc",
            "str r5, [r4, 0xc]",
            "str r5, [r4, 0x10]",
            "str r5, [r4, 0x14]",
            "bl rsym._ZN5yaSSL20InitHandShakeFactoryERNS_7FactoryINS_13HandShakeBaseEiPFPS1_vEEE",
            "add r0, r4, 0x18",
            "str r5, [r4, 0x18]",
            "str r5, [r4, 0x1c]",
            "str r5, [r4, 0x20]",
            "bl rsym._ZN5yaSSL20InitServerKeyFactoryERNS_7FactoryINS_13ServerKeyBaseEiPFPS1_vEEE",
            "add r0, r4, 0x24",
            "str r5, [r4, 0x2c]",
            "str r5, [r4, 0x24]",
            "str r5, [r4, 0x28]",
            "bl rsym._ZN5yaSSL20InitClientKeyFactoryERNS_7FactoryINS_13ClientKeyBaseEiPFPS1_vEEE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.000877c4": {
        "function_address": "0x000877c4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x877e0",
            "b 0x877f0",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x877dc",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::get_peerKeyLength___const": {
        "function_address": "0x0007c488",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x28",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::setPeerX509_yaSSL::X509_": {
        "function_address": "0x0007c21c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x38]",
            "ldr r2, [0x0007c320]",
            "cmp r3, 0",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "add r2, pc, r2",
            "mov r5, r1",
            "bne 0x7c2fc",
            "cmp r1, 0",
            "beq 0x7c2f0",
            "mov r0, r1",
            "bl rsym._ZN5yaSSL4X5099GetIssuerEv",
            "mov r7, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X50910GetSubjectEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X5099GetBeforeEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL4X5098GetAfterEv",
            "mov r5, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "mov sb, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL9X509_NAME9GetLengthEv",
            "mov sl, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME7GetNameEv",
            "mov r7, r0",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL9X509_NAME9GetLengthEv",
            "mov r1, 0",
            "mov fp, r0",
            "mov r0, 0x40",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "str fp, [sp]",
            "ldr r3, [r8, 8]",
            "mov r6, r0",
            "str r3, [sp, 4]",
            "ldr r3, [r8, 4]",
            "mov r1, sb",
            "str r3, [sp, 8]",
            "ldr ip, [r5, 8]",
            "mov r2, sl",
            "str ip, [sp, 0xc]",
            "ldr ip, [r5, 4]",
            "mov r3, r7",
            "str ip, [sp, 0x10]",
            "bl rsym._ZN5yaSSL4X509C1EPKcjS2_jS2_iS2_i",
            "str r6, [r4, 0x38]",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x0007c324]",
            "ldr r1, [0x0007c328]",
            "ldr r0, [0x0007c32c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x1c",
            "ldr r2, [0x0007c330]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.vio_blocking": {
        "function_address": "0x0007a258",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0xc]",
            "mov r4, r0",
            "lsr r3, r3, 0xb",
            "eor r3, r3, 1",
            "and r3, r3, 1",
            "strb r3, [r2]",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "blt 0x7a2b8",
            "ldr r5, [r4, 0xc]",
            "cmp r1, 0",
            "bicne r2, r5, 0x800",
            "orreq r2, r5, 0x800",
            "strne r2, [r4, 0xc]",
            "streq r2, [r4, 0xc]",
            "cmp r5, r2",
            "beq 0x7a2b8",
            "mov r1, 4",
            "bl sym.imp.fcntl",
            "cmn r0, 1",
            "streq r5, [r4, 0xc]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, 0",
            "b 0x7a2b0"
        ]
    },
    "sym.yaSSL::SSL::GetMultiProtocol___const": {
        "function_address": "0x00091bec",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0x68",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX9getMethodEv",
            "pop {r4, lr}",
            "b rsym._ZNK5yaSSL10SSL_METHOD16multipleProtocolEv"
        ]
    },
    "sym.TaoCrypt::Integer::AbsoluteValue___const": {
        "function_address": "0x000a9770",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r3, 0",
            "str r3, [r4, 0xc]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_slave_query": {
        "function_address": "0x00045be4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym.mysql_slave_send_query",
            "cmp r0, 0",
            "movne r0, 1",
            "moveq r0, r4",
            "ldreq r3, [r4, 0x3b0]",
            "ldreq ip, [r3]",
            "moveq lr, pc",
            "bxeq ip"
        ]
    },
    "sym.scramble_323": {
        "function_address": "0x00047cf8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r6, r2, 0",
            "sub sp, sp, 0x2c",
            "mov r4, r0",
            "mov r5, r1",
            "beq 0x47d1c",
            "ldrb r3, [r6]",
            "cmp r3, 0",
            "bne 0x47d34",
            "mov r6, r4",
            "mov r3, 0",
            "strb r3, [r6]",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "mov r1, r6",
            "mov r2, r0",
            "add r0, sp, 0x20",
            "bl rsym.hash_password",
            "mov r1, r5",
            "add r0, sp, 0x18",
            "mov r2, 8",
            "bl rsym.hash_password",
            "ldr r3, [sp, 0x24]",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x18]",
            "eor r2, r2, r3",
            "ldr r3, [sp, 0x20]",
            "mov r0, sp",
            "eor r1, r1, r3",
            "bl rsym.randominit",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "mov r6, r4",
            "strb r0, [r6], 1",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "strb r0, [r4, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "add r6, r6, 1",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "add r6, r6, 1",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "add r6, r6, 1",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "add r6, r6, 1",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "mov r2, 0",
            "ldr r3, [0x00047fd0]",
            "bl fcn.000bef84",
            "bl fcn.000bf9d0",
            "add r6, r6, 1",
            "strb r0, [r6, 1]",
            "mov r0, sp",
            "bl rsym.my_rnd",
            "mov r2, 0",
            "ldr r3, [0x00047fcc]",
            "bl fcn.000bf394",
            "bl sym.imp.floor",
            "bl fcn.000bf9d0",
            "rsb r1, r4, 0",
            "ands r1, r1, 3",
            "and r0, r0, 0xff",
            "add r6, r4, 8",
            "moveq r2, r4",
            "moveq ip, 8",
            "beq 0x47f54",
            "mov r2, r4",
            "mov r3, 0",
            "ldrb r5, [r4, r3]",
            "rsb ip, r3, 7",
            "eor r5, r0, r5",
            "strb r5, [r4, r3]",
            "add r3, r3, 1",
            "cmp r1, r3",
            "add r2, r2, 1",
            "bhi 0x47f34",
            "rsb sl, r1, 8",
            "lsr r5, sl, 2",
            "lsls r8, r5, 2",
            "beq 0x47fac",
            "and r7, r0, 0xff",
            "orr sb, r7, r7, lsl 8",
            "orr sb, sb, r7, lsl 16",
            "mov r3, 0",
            "add r4, r4, r1",
            "orr r7, sb, r7, lsl 24",
            "mov r1, r3",
            "ldr fp, [r4, r3]",
            "add r1, r1, 1",
            "eor fp, r7, fp",
            "cmp r1, r5",
            "str fp, [r4, r3]",
            "add r3, r3, 4",
            "blo 0x47f80",
            "cmp sl, r8",
            "add r2, r2, r8",
            "rsb ip, r8, ip",
            "beq 0x47d20",
            "mov r3, 0",
            "ldrb r1, [r2, r3]",
            "eor r1, r0, r1",
            "strb r1, [r2, r3]",
            "add r3, r3, 1",
            "cmp r3, ip",
            "bne 0x47fb0",
            "b 0x47d20"
        ]
    },
    "sym.get_charset": {
        "function_address": "0x00051e10",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r5, [0x00051ee0]",
            "ldr r3, [0x00051ee4]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "sub sp, sp, 0x22c",
            "ldr r4, [r3]",
            "mov r6, r0",
            "ldr r3, [r4]",
            "mov r7, r1",
            "cmp r3, r0",
            "bne 0x51e50",
            "mov r0, r4",
            "add sp, sp, 0x22c",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r0, [0x00051ee8]",
            "ldr r1, [0x00051eec]",
            "add r0, r5, r0",
            "add r1, r5, r1",
            "bl sym.imp.pthread_once",
            "sub r3, r6, 1",
            "cmp r3, 0xfd",
            "movhi r4, 0",
            "bhi 0x51e40",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.00051b20",
            "subs r4, r0, 0",
            "bne 0x51e40",
            "tst r7, 0x10",
            "beq 0x51e40",
            "add r7, sp, 4",
            "mov r0, r7",
            "bl rsym.get_charsets_dir",
            "ldr r1, [0x00051ef0]",
            "mov r2, 0xa",
            "add r1, r5, r1",
            "bl sym.imp.memcpy",
            "add r5, sp, 0x228",
            "mov r3, 0x23",
            "strb r3, [r5, -0x18]!",
            "add r1, r5, 1",
            "mov r0, r6",
            "mov r2, 0xa",
            "bl rsym.int10_to_str",
            "mov r2, r5",
            "mov r3, r7",
            "mov r1, 4",
            "mov r0, 0x16",
            "bl rsym.my_error",
            "b 0x51e40"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetDigest__": {
        "function_address": "0x0009af3c",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "ldr r0, [r3, 0x10]",
            "ldr r5, [0x0009b03c]",
            "cmp r0, 0",
            "add r5, pc, r5",
            "movne r0, 0",
            "beq 0x9af68",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r2, [r3, 0xc]",
            "ldr ip, [r3]",
            "add r1, r2, 1",
            "cmp r2, ip",
            "str r1, [r3, 0xc]",
            "bhs 0x9aff4",
            "ldr r1, [r3, 4]",
            "ldrb r2, [r1, r2]",
            "cmp r2, 4",
            "ldrne r2, [0x0009b040]",
            "strne r2, [r3, 0x10]",
            "bne 0x9af60",
            "mov r0, r3",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "str r0, [r4, 0x18]",
            "mov r1, 0",
            "ldr r0, [r4, 0x18]",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r2, [r4, 4]",
            "str r0, [r4, 0x4c]",
            "ldr r3, [r2, 0xc]",
            "ldr r1, [r2]",
            "cmp r3, r1",
            "bhs 0x9b018",
            "ldr r1, [r2, 4]",
            "ldr r2, [r4, 0x18]",
            "add r1, r1, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 0x18]",
            "ldr r1, [r3, 0xc]",
            "add r2, r1, r2",
            "str r2, [r3, 0xc]",
            "ldr r0, [r4, 0x18]",
            "b 0x9af60",
            "ldr r3, [0x0009b044]",
            "ldr r1, [0x0009b048]",
            "ldr r0, [0x0009b04c]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x0009b044]",
            "ldr r1, [0x0009b048]",
            "ldr r0, [0x0009b04c]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0xfc",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.fn_ext": {
        "function_address": "0x0004a8ac",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0x2f",
            "mov r4, r0",
            "bl sym.imp.strrchr",
            "cmp r0, 0",
            "movne r4, r0",
            "mov r0, r4",
            "mov r1, 0x2e",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0x4a8e0",
            "pop {r4, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym.strend",
            "b 0x4a8d8"
        ]
    },
    "sym.imp.strrchr": {
        "function_address": "0x0003db34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x82c]!"
        ]
    },
    "sym.my_net_write": {
        "function_address": "0x0007b0f8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r3, [r0]",
            "mov r6, r0",
            "cmp r3, 0",
            "sub sp, sp, 0xc",
            "mov r5, r1",
            "mov r4, r2",
            "moveq r0, r3",
            "beq 0x7b1a0",
            "ldr sl, [0x0007b204]",
            "cmp r2, sl",
            "addls r8, sp, 4",
            "bls 0x7b1ac",
            "add r8, sp, 4",
            "mvn r7, 0",
            "b 0x7b150",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "bne 0x7b19c",
            "cmp r4, sl",
            "sub r5, r5, 1",
            "bls 0x7b1ac",
            "ldr r3, [r6, 0x30]",
            "mov r1, r8",
            "add r2, r3, 1",
            "str r2, [r6, 0x30]",
            "mov r0, r6",
            "mov r2, 4",
            "strb r7, [sp, 4]",
            "strb r7, [sp, 5]",
            "strb r7, [sp, 6]",
            "strb r3, [sp, 7]",
            "bl fcn.0007ae48",
            "add r4, r4, 0xff000000",
            "cmp r0, 0",
            "mov r1, r5",
            "mvn r2, 0xff000000",
            "add r4, r4, 1",
            "mov r0, r6",
            "add r5, r5, 0x1000000",
            "beq 0x7b138",
            "mov r0, 1",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [r6, 0x30]",
            "lsr lr, r4, 8",
            "add r2, r3, 1",
            "str r2, [r6, 0x30]",
            "lsr ip, r4, 0x10",
            "mov r1, r8",
            "mov r0, r6",
            "mov r2, 4",
            "strb lr, [sp, 5]",
            "strb ip, [sp, 6]",
            "strb r4, [sp, 4]",
            "strb r3, [sp, 7]",
            "bl fcn.0007ae48",
            "cmp r0, 0",
            "bne 0x7b19c",
            "mov r0, r6",
            "mov r1, r5",
            "mov r2, r4",
            "bl fcn.0007ae48",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x7b1a0"
        ]
    },
    "sym.yaSSL::RMD::RMD__": {
        "function_address": "0x0007ef44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007efa8]",
            "ldr r3, [0x0007efac]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007efb0]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_RMD::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007cd88",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Data::SetData_unsigned_short__unsigned_char_const_": {
        "function_address": "0x0008b044",
        "instructions": [
            "ldr r3, [r0, 0xc]",
            "ldr ip, [0x0008b090]",
            "cmp r3, 0",
            "push {r4, lr}",
            "add ip, pc, ip",
            "bne 0x8b06c",
            "str r2, [r0, 0xc]",
            "strh r1, [r0, 4]",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x0008b094]",
            "ldr r1, [0x0008b098]",
            "ldr r0, [0x0008b09c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x54",
            "ldr r2, [0x0008b0a0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::Parameters::SetCipherNames__": {
        "function_address": "0x0008d8f4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldrb r7, [r0, 0x2e]",
            "ldr r3, [0x0008d974]",
            "lsrs r7, r7, 1",
            "mov r6, r0",
            "add r3, pc, r3",
            "beq 0x8d958",
            "ldr r8, [0x0008d978]",
            "mov r5, r0",
            "add r8, r3, r8",
            "mov r4, 0",
            "ldrb r3, [r5, 0x30]",
            "add r5, r5, 2",
            "ldr sl, [r8, r3, lsl 2]",
            "mov r0, sl",
            "bl sym.imp.strlen",
            "add r3, r4, r4, lsl 1",
            "add r3, r6, r3, lsl 4",
            "add r2, r0, 1",
            "add r4, r4, 1",
            "add r0, r3, 0xdf",
            "mov r1, sl",
            "bl sym.imp.strncpy",
            "cmp r7, r4",
            "bgt 0x8d920",
            "add r7, r7, r7, lsl 1",
            "add r3, r6, r7, lsl 4",
            "add r3, r3, 0xd8",
            "mov r2, 0",
            "strb r2, [r3, 7]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateRSAServerKEA__": {
        "function_address": "0x0008b268",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, [0x0008b298]",
            "add r4, pc, r4",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [0x0008b29c]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::input_buffer__yaSSL::input_buffer_": {
        "function_address": "0x00089e30",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::OS_Seed::GenerateSeed_unsigned_char__unsigned_int_": {
        "function_address": "0x000b07e8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r2, 0",
            "mov r6, r0",
            "mov r5, r1",
            "beq 0xb0820",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r0, [r6]",
            "bl sym.imp.read",
            "cmn r0, 1",
            "mov r3, r0",
            "beq 0xb0850",
            "subs r4, r4, r0",
            "bne 0xb0828",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r5, r5, r3",
            "mov r0, 1",
            "bl sym.imp.sleep",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r0, [r6]",
            "bl sym.imp.read",
            "cmn r0, 1",
            "mov r3, r0",
            "bne 0xb0818",
            "mov r3, 0x3ec",
            "str r3, [r6, 4]",
            "b 0xb0820"
        ]
    },
    "sym.mysql_manager_init": {
        "function_address": "0x000481c0",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x48214",
            "mov r1, 0",
            "mov r2, 0x39c",
            "bl sym.imp.memset",
            "mov r0, 0x800",
            "mov r1, 0",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "str r0, [r4, 0x278]",
            "mov r3, r0",
            "moveq r4, r0",
            "beq 0x48208",
            "mov r2, 0x800",
            "str r3, [r4, 0x27c]",
            "str r2, [r4, 0x290]",
            "str r3, [r4, 0x280]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr",
            "ldr r0, [0x0004823c]",
            "mov r1, 0x30",
            "bl rsym.my_malloc",
            "subs r4, r0, 0",
            "beq 0x48208",
            "add r3, r4, 0x39c",
            "mov r2, 1",
            "strb r2, [r4, 0x294]",
            "str r3, [r4, 0x278]",
            "b 0x481f8"
        ]
    },
    "sym.TaoCrypt::AlmostInverse_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a516c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldr r8, [sp, 0x4c]",
            "ldr r4, [0x000a572c]",
            "cmp r3, r8",
            "movls ip, 0",
            "movhi ip, 1",
            "cmp r8, 0",
            "orreq ip, ip, 1",
            "cmp ip, 0",
            "add r4, pc, r4",
            "str r4, [sp, 4]",
            "str r0, [sp, 0x1c]",
            "bne 0xa5704",
            "tst r8, 1",
            "bne 0xa5704",
            "lsl r0, r8, 1",
            "ldr r4, [sp, 0x48]",
            "add ip, r0, r8",
            "sub r5, r8, 2",
            "sub r7, r8, 1",
            "add ip, r1, ip, lsl 2",
            "add r5, r4, r5, lsl 2",
            "add r7, r4, r7, lsl 2",
            "str ip, [sp, 8]",
            "add r4, r1, r8, lsl 3",
            "mov r6, r8",
            "ldr ip, [r5]",
            "cmp ip, 0",
            "bne 0xa5200",
            "ldr ip, [r7]",
            "cmp ip, 0",
            "bne 0xa5200",
            "subs r6, r6, 2",
            "sub r5, r5, 8",
            "sub r7, r7, 8",
            "bne 0xa51d8",
            "adds r0, r0, r8",
            "movne ip, 0",
            "movne r5, ip",
            "beq 0xa5220",
            "str r5, [r1, ip, lsl 2]",
            "add ip, ip, 1",
            "cmp r0, ip",
            "bhi 0xa5210",
            "mov r0, 1",
            "cmp r3, 0",
            "str r0, [r1]",
            "beq 0xa5250",
            "mov r0, 0",
            "mov ip, r0",
            "ldr r5, [r2, r0]",
            "add ip, ip, 1",
            "cmp r3, ip",
            "str r5, [r4, r0]",
            "add r0, r0, 4",
            "bhi 0xa5238",
            "mov r3, 0",
            "ldr ip, [sp, 8]",
            "ldr r5, [sp, 0x48]",
            "mov r2, r3",
            "ldr r0, [r5, r3]",
            "add r2, r2, 1",
            "cmp r8, r2",
            "str r0, [ip, r3]",
            "add r3, r3, 4",
            "bhi 0xa5260",
            "mov ip, 0",
            "str ip, [sp, 0x18]",
            "str r1, [sp, 0x14]",
            "add r7, r1, r8, lsl 2",
            "mov sl, ip",
            "mov r5, 2",
            "ldr r3, [r4]",
            "cmp r3, 0",
            "bne 0xa53e4",
            "sub ip, r6, 2",
            "sub r0, r6, 1",
            "cmp r6, 0",
            "add ip, r4, ip, lsl 2",
            "add fp, r4, r0, lsl 2",
            "bne 0xa52e0",
            "mov r3, 0",
            "ldr r2, [sp, 0x1c]",
            "mov sl, r3",
            "str sl, [r2, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r8, r3",
            "bhi 0xa52c0",
            "mov r0, sl",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "sub r2, r6, 3",
            "sub r3, r6, 4",
            "add r2, r4, r2, lsl 2",
            "add r3, r4, r3, lsl 2",
            "str r2, [sp, 0xc]",
            "str r3, [sp, 0x10]",
            "ldr r3, [ip]",
            "cmp r3, 0",
            "bne 0xa5344",
            "ldr r3, [fp]",
            "cmp r3, 0",
            "bne 0xa5344",
            "ldr r1, [sp, 0xc]",
            "ldr r3, [sp, 0x10]",
            "mov sb, r6",
            "b 0xa5330",
            "ldr r2, [r1], -8",
            "sub r3, r3, 8",
            "cmp r2, 0",
            "bne 0xa5344",
            "subs sb, sb, 2",
            "beq 0xa52b4",
            "ldr r2, [r3]",
            "cmp r2, 0",
            "beq 0xa5320",
            "cmp r6, 1",
            "movhi r1, 1",
            "movhi r2, 0",
            "movhi r3, r1",
            "bls 0xa5374",
            "ldr r1, [r4, r1, lsl 2]",
            "cmp r3, r0",
            "str r1, [r4, r2, lsl 2]",
            "mov r2, r3",
            "add r3, r3, 1",
            "mov r1, r3",
            "bne 0xa5358",
            "mov r1, 0",
            "sub r3, r5, 1",
            "str r1, [fp]",
            "ldr r3, [r7, r3, lsl 2]",
            "cmp r3, r1",
            "addne r5, r5, 2",
            "cmp r5, r8",
            "bhi 0xa5670",
            "cmp r5, 1",
            "bls 0xa5664",
            "subs r3, r5, 1",
            "beq 0xa53cc",
            "sub r2, r5, 0xc0000001",
            "sub r1, r5, 0xc0000002",
            "add r1, r7, r1, lsl 2",
            "add r2, r7, r2, lsl 2",
            "mov sb, ip",
            "ldr ip, [r1], -4",
            "subs r3, r3, 1",
            "str ip, [r2], -4",
            "bne 0xa53b8",
            "mov ip, sb",
            "mov r3, 0",
            "str r3, [r7]",
            "ldr r3, [r4]",
            "add sl, sl, 0x20",
            "cmp r3, 0",
            "beq 0xa52f8",
            "ands r2, r3, 1",
            "movne r2, 0",
            "bne 0xa5400",
            "lsr r3, r3, 1",
            "tst r3, 1",
            "add r2, r2, 1",
            "beq 0xa53f0",
            "cmp r3, 1",
            "add sl, sl, r2",
            "beq 0xa55b0",
            "cmp r2, 0x1f",
            "bhi 0xa56d8",
            "cmp r2, 0",
            "beq 0xa549c",
            "subs r1, r6, 1",
            "bmi 0xa544c",
            "sub r3, r6, 0xc0000001",
            "add r3, r4, r3, lsl 2",
            "rsb lr, r2, 0x20",
            "mov ip, 0",
            "ldr r0, [r3]",
            "subs r1, r1, 1",
            "orr ip, ip, r0, lsr r2",
            "str ip, [r3], -4",
            "lsl ip, r0, lr",
            "bpl 0xa5434",
            "cmp r5, 0",
            "beq 0xa549c",
            "mov r3, 0",
            "rsb lr, r2, 0x20",
            "mov ip, r3",
            "mov r1, r3",
            "ldr r0, [r7, r3]",
            "add r1, r1, 1",
            "orr ip, ip, r0, lsl r2",
            "cmp r1, r5",
            "str ip, [r7, r3]",
            "lsr ip, r0, lr",
            "add r3, r3, 4",
            "blo 0xa5464",
            "cmp ip, 0",
            "beq 0xa549c",
            "str ip, [r7, r5, lsl 2]",
            "add r5, r5, 2",
            "cmp r8, r5",
            "blo 0xa56b0",
            "sub r3, r6, 2",
            "ldr r2, [r4, r3, lsl 2]",
            "cmp r2, 0",
            "bne 0xa54bc",
            "ldr ip, [sp, 8]",
            "ldr r2, [ip, r3, lsl 2]",
            "cmp r2, 0",
            "beq 0xa5590",
            "sub r2, r6, 0xc0000001",
            "ldr r0, [sp, 8]",
            "lsl r2, r2, 2",
            "add r1, r0, r2",
            "mov r3, r6",
            "add r2, r4, r2",
            "cmp r3, 0",
            "beq 0xa5520",
            "ldr ip, [r2]",
            "ldr r0, [r1]",
            "sub r3, r3, 1",
            "cmp ip, r0",
            "bhi 0xa5520",
            "sub r2, r2, 4",
            "sub r1, r1, 4",
            "bhs 0xa54d4",
            "ldr ip, [sp, 0x18]",
            "ldr r3, [sp, 0x14]",
            "mov r2, r4",
            "add ip, ip, 1",
            "ldr r4, [sp, 8]",
            "str r7, [sp, 0x14]",
            "str ip, [sp, 0x18]",
            "str r2, [sp, 8]",
            "mov r7, r3",
            "mov r1, r4",
            "ldr r2, [sp, 8]",
            "mov r3, r6",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r0, [sp, 0x14]",
            "mov r2, r7",
            "mov r1, r0",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r0, 0",
            "beq 0xa5290",
            "ldr r1, [sp, 0x14]",
            "mov r2, 1",
            "str r2, [r1, r5, lsl 2]",
            "add r5, r5, 2",
            "cmp r8, r5",
            "bhs 0xa5290",
            "ldr r4, [sp, 4]",
            "ldr r3, [0x000a5730]",
            "ldr r1, [0x000a5734]",
            "ldr r0, [0x000a5738]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x244",
            "ldr r2, [0x000a573c]",
            "bl sym.imp.__assert_fail",
            "sub r2, r6, 1",
            "ldr r1, [r4, r2, lsl 2]",
            "cmp r1, 0",
            "bne 0xa54bc",
            "ldr r2, [ip, r2, lsl 2]",
            "cmp r2, 0",
            "moveq r6, r3",
            "b 0xa54bc",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "bne 0xa540c",
            "cmp r6, 0",
            "beq 0xa540c",
            "sub r3, r6, 2",
            "ldr r3, [r4, r3, lsl 2]",
            "cmp r3, 0",
            "beq 0xa55dc",
            "mov r3, r6",
            "b 0xa5614",
            "sub r3, r6, 1",
            "ldr r3, [r4, r3, lsl 2]",
            "cmp r3, 0",
            "bne 0xa55d4",
            "sub ip, r6, 3",
            "sub r1, r6, 4",
            "add ip, r4, ip, lsl 2",
            "add r1, r4, r1, lsl 2",
            "mov r3, r6",
            "subs r3, r3, 2",
            "beq 0xa540c",
            "ldr r0, [r1]",
            "cmp r0, 0",
            "beq 0xa5650",
            "cmp r3, 2",
            "bne 0xa540c",
            "ldr r4, [sp, 0x18]",
            "ands r3, r4, 1",
            "moveq r2, r3",
            "ldreq r0, [sp, 0x14]",
            "bne 0xa5698",
            "cmp r8, r2",
            "bls 0xa52d0",
            "ldr r1, [r0, r3]",
            "ldr ip, [sp, 0x1c]",
            "add r2, r2, 1",
            "str r1, [ip, r3]",
            "add r3, r3, 4",
            "b 0xa5630",
            "ldr r0, [ip], -8",
            "sub r1, r1, 8",
            "cmp r0, 0",
            "bne 0xa5614",
            "b 0xa5600",
            "cmp r5, 0",
            "beq 0xa53d4",
            "b 0xa539c",
            "ldr r2, [sp, 4]",
            "ldr r3, [0x000a5730]",
            "ldr r1, [0x000a5734]",
            "ldr r0, [0x000a5738]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x244",
            "ldr r2, [0x000a5740]",
            "bl sym.imp.__assert_fail",
            "ldr r0, [sp, 0x1c]",
            "ldr r1, [sp, 0x48]",
            "ldr r2, [sp, 0x14]",
            "mov r3, r8",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "b 0xa52d0",
            "ldr r4, [sp, 4]",
            "ldr r3, [0x000a5730]",
            "ldr r1, [0x000a5734]",
            "ldr r0, [0x000a5738]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x244",
            "ldr r2, [0x000a5744]",
            "bl sym.imp.__assert_fail",
            "ldr r0, [sp, 4]",
            "ldr r3, [0x000a5730]",
            "ldr r1, [0x000a5748]",
            "add r3, r0, r3",
            "ldr r2, [sp, 4]",
            "add r1, r0, r1",
            "ldr r0, [0x000a574c]",
            "add r3, r3, 0x2d8",
            "add r0, r2, r0",
            "ldr r2, [0x000a5750]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 4]",
            "ldr r3, [0x000a5730]",
            "ldr r1, [0x000a5734]",
            "ldr r0, [0x000a5754]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x244",
            "ldr r2, [0x000a5758]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.create_temp_file": {
        "function_address": "0x00048e50",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x00048fd0]",
            "cmp r2, 0",
            "add r4, pc, r4",
            "sub sp, sp, 0x28",
            "mov r5, r0",
            "mov r6, r1",
            "beq 0x48f78",
            "add r7, sp, 8",
            "mov r1, r2",
            "mov r0, r7",
            "mov r2, 0x17",
            "bl rsym.strnmov",
            "ldr r1, [0x00048fd4]",
            "mov r2, 7",
            "add r1, r4, r1",
            "bl sym.imp.memcpy",
            "cmp r6, 0",
            "add r8, r0, 6",
            "beq 0x48fa4",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "rsb r8, r7, r8",
            "ldr r3, [0x00048fd8]",
            "add r8, r0, r8",
            "cmp r8, r3",
            "bhi 0x48f84",
            "mov r2, 0",
            "mov r1, r6",
            "mov r0, r5",
            "bl rsym.convert_dirname",
            "mov r1, r7",
            "bl sym.imp.strcpy",
            "mov r0, r5",
            "bl sym.imp.mkstemp64",
            "ldr ip, [sp, 0x40]",
            "mov r3, 1",
            "mov r1, r5",
            "mov r2, 5",
            "mov r6, r0",
            "str ip, [sp]",
            "bl rsym.my_register_filename",
            "mvn r3, r6",
            "lsr r3, r3, 0x1f",
            "ands r3, r3, r0, lsr 31",
            "mov r7, r0",
            "bne 0x48f50",
            "cmp r0, 0",
            "blt 0x48f40",
            "ldr r3, [0x00048fdc]",
            "ldr r5, [r4, r3]",
            "mov r0, r5",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldr r3, [0x00048fe0]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "add r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r7",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "bl rsym._my_thread_var",
            "mov r4, r0",
            "mov r0, r6",
            "ldr r6, [r4]",
            "bl sym.imp.close",
            "mov r0, r5",
            "mov r1, 0x90",
            "bl rsym.my_delete",
            "str r6, [r4]",
            "b 0x48f40",
            "ldr r2, [0x00048fe4]",
            "add r2, r4, r2",
            "b 0x48e70",
            "bl sym.imp.__errno_location",
            "mov r4, r0",
            "bl rsym._my_thread_var",
            "mov r3, 0x24",
            "str r3, [r0]",
            "mvn r7, 0",
            "str r3, [r4]",
            "b 0x48f40",
            "ldr r0, [0x00048fe8]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r6, r0, 0",
            "beq 0x48fc0",
            "bl sym.imp.strlen",
            "b 0x48ea8",
            "ldr r6, [0x00048fec]",
            "mov r0, 4",
            "add r6, r4, r6",
            "b 0x48ea8"
        ]
    },
    "sym.imp.mkstemp64": {
        "function_address": "0x0003d1a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe8c]!"
        ]
    },
    "sym.yaSSL::buildClientHello_yaSSL::SSL__yaSSL::ClientHello_": {
        "function_address": "0x00082724",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security14use_connectionEv",
            "ldrh r2, [r4, 8]",
            "mov r3, 0x130",
            "strh r2, [r0, r3]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "add r1, r4, 0xa",
            "mov r2, 0x20",
            "bl rsym._ZNK5yaSSL10RandomPool4FillEPhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "strbeq r0, [r4, 0x2a]",
            "bne 0x827cc",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x2e]",
            "mov r0, r5",
            "strh r3, [r4, 0x4c]",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrh r2, [r4, 0x4c]",
            "add r1, r0, 0x2f",
            "add r0, r4, 0x4e",
            "bl sym.imp.memcpy",
            "ldrh r3, [r4, 0x4c]",
            "ldrb r1, [r4, 0x2a]",
            "mov r0, r4",
            "add r1, r1, r3",
            "mov r3, 1",
            "strb r3, [r4, 0xce]",
            "add r1, r1, 0x27",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r6, 0x20",
            "strb r6, [r4, 0x2a]",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10get_resumeEv",
            "bl rsym._ZNK5yaSSL11SSL_SESSION5GetIDEv",
            "mov r2, r6",
            "mov r1, r0",
            "add r0, r4, 0x2b",
            "bl sym.imp.memcpy",
            "b 0x82774"
        ]
    },
    "method.TaoCrypt::AbstractGroup.CascadeScalarMultiply_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x0009933c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x64",
            "str r0, [sp, 0x30]",
            "mov r0, r3",
            "str r3, [sp, 0x1c]",
            "mov r4, r1",
            "str r2, [sp, 0x2c]",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "mov r5, r0",
            "ldr r0, [sp, 0x8c]",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "cmp r0, r5",
            "movlo r0, r5",
            "cmp r0, 0",
            "str r0, [sp, 0x28]",
            "beq 0x9997c",
            "cmp r0, 0x2e",
            "bhi 0x99808",
            "mov r2, 4",
            "mov r3, 6",
            "mov r1, 1",
            "str r2, [sp, 0xc]",
            "mov sl, 0x40",
            "str r3, [sp, 0x34]",
            "mov r7, 0x20",
            "mov sb, r2",
            "mov fp, 2",
            "str r1, [sp, 0x24]",
            "mov r0, sb",
            "bl rsym._ZN5mySTL14GetArrayMemoryIN8TaoCrypt7IntegerEEEPT_j",
            "add r6, sp, 0x40",
            "mov r5, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r2, r6",
            "mov r1, sb",
            "mov r0, r5",
            "bl rsym._ZN5mySTL13uninit_fill_nIPN8TaoCrypt7IntegerEjS2_EET_S4_T0_RKT1_",
            "ldr r6, [sp, 0x44]",
            "ldr r2, [sp, 0x40]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "str r0, [sp, 0x3c]",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r1, [sp, 0x2c]",
            "add r0, r5, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, r5, r7",
            "ldr r1, [sp, 0x88]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r3, [sp, 0x24]",
            "cmp r3, 1",
            "beq 0x99950",
            "ldr r3, [r4]",
            "ldr r1, [sp, 0x2c]",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "add r8, r5, 0x20",
            "mov r1, r0",
            "add sl, r5, sl",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r3, [r4]",
            "ldr r1, [sp, 0x88]",
            "str sl, [sp, 0x20]",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "ldr r0, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "cmp fp, 3",
            "bls 0x994b8",
            "mov r7, 0x10",
            "mov r6, 3",
            "add r1, r5, r7",
            "mov r2, r8",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "add r0, r5, r6, lsl 4",
            "add r6, r6, 2",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "cmp fp, r6",
            "add r7, r7, 0x20",
            "bhi 0x99480",
            "add r3, fp, 1",
            "lsl r3, r3, 4",
            "lsl r1, fp, 1",
            "str r3, [sp, 0x18]",
            "add r2, r1, 1",
            "str r3, [sp, 0x14]",
            "mov r3, 1",
            "str r1, [sp, 0x38]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 8]",
            "lsl sl, fp, 4",
            "mov r8, r5",
            "ldr r1, [sp, 8]",
            "add r3, r1, fp",
            "cmp sb, r3",
            "bls 0x99544",
            "ldr r6, [sp, 0x14]",
            "ldr r5, [sp, 0x10]",
            "lsl r7, r1, 4",
            "add r1, r8, r7",
            "ldr r3, [r4]",
            "ldr r2, [sp, 0x88]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r5, r5, fp",
            "mov r1, r0",
            "add r0, r8, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "rsb r3, fp, r5",
            "cmp sb, r3",
            "add r6, r6, sl",
            "add r7, r7, sl",
            "bhi 0x99504",
            "ldr r2, [sp, 8]",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 0x14]",
            "add r2, r2, 2",
            "add r3, r3, 2",
            "add r1, r1, 0x20",
            "cmp fp, r2",
            "str r2, [sp, 8]",
            "str r3, [sp, 0x10]",
            "str r1, [sp, 0x14]",
            "bhi 0x994e8",
            "ldr r2, [sp, 0x34]",
            "mov r5, r8",
            "cmp r2, sb",
            "bhs 0x995ec",
            "ldr r3, [sp, 0xc]",
            "str fp, [sp, 4]",
            "rsb r6, r3, r2",
            "mov fp, sb",
            "lsl r6, r6, 4",
            "add r7, r3, r2",
            "lsl sl, r3, 4",
            "lsl r8, r2, 4",
            "mov sb, r3",
            "add r1, r5, r6",
            "ldr r3, [r4]",
            "ldr r2, [sp, 0x20]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r7, r7, sb",
            "mov r1, r0",
            "add r0, r5, r8",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "rsb r3, sb, r7",
            "cmp fp, r3",
            "add r8, r8, sl",
            "add r6, r6, sl",
            "bhi 0x995a4",
            "mov sb, fp",
            "ldr fp, [sp, 4]",
            "cmp fp, sb",
            "bhs 0x996c4",
            "ldr r1, [sp, 0xc]",
            "ldr r2, [sp, 0xc]",
            "add sl, fp, 2",
            "add r1, r1, fp",
            "lsl r3, sl, 4",
            "lsl r2, r2, 4",
            "str sb, [sp, 0x14]",
            "str fp, [sp, 0x20]",
            "ldr sb, [sp, 0x2c]",
            "mov fp, sl",
            "ldr sl, [sp, 0x38]",
            "str r1, [sp, 4]",
            "str r2, [sp, 0x10]",
            "str r3, [sp, 8]",
            "cmp sl, fp",
            "bls 0x9967c",
            "ldr r8, [sp, 0x18]",
            "ldr r7, [sp, 8]",
            "mov r6, fp",
            "add r1, r5, r8",
            "mov r2, sb",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r6, r6, 2",
            "mov r1, r0",
            "add r0, r5, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "cmp r6, sl",
            "add r7, r7, 0x20",
            "add r8, r8, 0x20",
            "blo 0x99640",
            "ldr r2, [sp, 0xc]",
            "ldr r1, [sp, 4]",
            "add fp, fp, r2",
            "add r1, r1, r2",
            "rsb r3, r2, r1",
            "str r1, [sp, 4]",
            "ldr r1, [sp, 0x14]",
            "add sl, sl, r2",
            "cmp r3, r1",
            "ldr r2, [sp, 8]",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 0x18]",
            "add r2, r2, r3",
            "add r1, r1, r3",
            "str r2, [sp, 8]",
            "str r1, [sp, 0x18]",
            "blo 0x9962c",
            "ldr fp, [sp, 0x20]",
            "ldr r2, [sp, 0x28]",
            "add r6, sp, 0x50",
            "sub r8, r2, 1",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "cmp r8, 0",
            "blt 0x99900",
            "mov sb, 0",
            "str fp, [sp, 0xc]",
            "mov r3, 1",
            "mov sl, sb",
            "str r5, [sp, 0x18]",
            "mov fp, r8",
            "mov r1, fp",
            "ldr r0, [sp, 0x1c]",
            "str r3, [sp]",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "lsl sl, sl, 1",
            "add sl, r0, sl",
            "mov r1, fp",
            "ldr r0, [sp, 0x8c]",
            "bl rsym._ZNK8TaoCrypt7Integer6GetBitEj",
            "lsl sb, sb, 1",
            "cmp fp, 0",
            "add sb, r0, sb",
            "str fp, [sp, 8]",
            "ldr r3, [sp]",
            "beq 0x9974c",
            "ldr r1, [sp, 0xc]",
            "cmp r1, sl, lsl 1",
            "bls 0x9974c",
            "cmp r1, sb, lsl 1",
            "strhi r8, [sp, 8]",
            "bhi 0x997f8",
            "orrs r2, sb, sl",
            "str r2, [sp, 4]",
            "rsb r8, fp, r8",
            "bne 0x99858",
            "mov sb, r2",
            "mvn r5, 0",
            "mov r7, r2",
            "mov sl, r2",
            "cmp r3, 0",
            "bne 0x9986c",
            "cmp r8, 0",
            "beq 0x997a8",
            "ldr r3, [r4]",
            "mov r1, r6",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "subs r8, r8, 1",
            "bne 0x9977c",
            "ldr r1, [sp, 4]",
            "cmp r1, 0",
            "bne 0x998d0",
            "cmp r7, 0",
            "beq 0x997ec",
            "ldr r3, [r4]",
            "mov r1, r6",
            "mov r0, r4",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "sub r5, r5, 1",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "cmn r5, 1",
            "bne 0x997bc",
            "mov r3, 0",
            "mov sb, r3",
            "mov sl, r3",
            "subs fp, fp, 1",
            "bmi 0x998fc",
            "ldr r8, [sp, 8]",
            "b 0x996f8",
            "ldr r3, [0x000999a0]",
            "cmp r0, r3",
            "movlo r3, 2",
            "movhs r3, 3",
            "movlo r1, 0xc",
            "movhs r1, 0x18",
            "movlo r2, 8",
            "movhs r2, 0x10",
            "str r3, [sp, 0x24]",
            "movlo sl, 0x80",
            "movhs sl, 0x100",
            "str r1, [sp, 0x34]",
            "str r2, [sp, 0xc]",
            "movlo r7, 0x40",
            "movhs r7, 0x80",
            "movlo sb, 0x10",
            "movhs sb, 0x40",
            "movlo fp, 4",
            "movhs fp, 8",
            "b 0x993ac",
            "tst sl, 1",
            "beq 0x99888",
            "mvn r5, 0",
            "mov r7, 0",
            "b 0x9976c",
            "ldr r2, [sp, 0x24]",
            "ldr r3, [sp, 0x18]",
            "add r1, sl, sb, lsl r2",
            "mov r0, r6",
            "add r1, r3, r1, lsl 4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "b 0x997b4",
            "ands r7, sb, 1",
            "bne 0x99860",
            "lsr sl, sl, 1",
            "lsr sb, sb, 1",
            "orrs r1, sb, sl",
            "str r1, [sp, 4]",
            "sub r8, r8, 1",
            "add r7, r7, 1",
            "moveq sb, r1",
            "subeq r5, r7, 1",
            "moveq sl, r1",
            "beq 0x9976c",
            "tst sl, 1",
            "bne 0x998c8",
            "tst sb, 1",
            "beq 0x99890",
            "sub r5, r7, 1",
            "b 0x9976c",
            "ldr r3, [sp, 0x24]",
            "ldr r1, [sp, 0x18]",
            "add r2, sl, sb, lsl r3",
            "mov r0, r4",
            "add r2, r1, r2, lsl 4",
            "ldr r3, [r4]",
            "mov r1, r6",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "b 0x997b4",
            "ldr r5, [sp, 0x18]",
            "mov r1, r6",
            "ldr r0, [sp, 0x30]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r4, [sp, 0x54]",
            "ldr r2, [sp, 0x50]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "ldr r1, [sp, 0x3c]",
            "bl rsym._ZN5mySTL7destroyIPN8TaoCrypt7IntegerEEEvT_S4_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIN8TaoCrypt7IntegerEEEvPT_",
            "ldr r0, [sp, 0x30]",
            "add sp, sp, 0x64",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r1, [sp, 0x2c]",
            "ldr r2, [sp, 0x88]",
            "ldr r3, [r4]",
            "mov r0, r4",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "add r0, r5, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "b 0x996c4",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "ldr r0, [sp, 0x30]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "b 0x99940"
        ]
    },
    "sym.my_fseek": {
        "function_address": "0x0004cfe0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, r2",
            "ldr r2, [sp, 8]",
            "mov r4, r0",
            "bl sym.imp.fseek",
            "cmp r0, 0",
            "mvnne r3, 0",
            "mvnne r4, 0",
            "bne 0x4d014",
            "mov r0, r4",
            "bl sym.imp.ftell",
            "mov r3, r0",
            "asr r4, r3, 0x1f",
            "mov r1, r4",
            "mov r0, r3",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_escape_string": {
        "function_address": "0x00044bc8",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [0x00044c08]",
            "ldr r3, [0x00044c0c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "mov lr, r0",
            "sub sp, sp, 0xc",
            "ldr r0, [r3]",
            "mov r3, r1",
            "str r2, [sp]",
            "mov r1, lr",
            "mov r2, 0",
            "bl rsym.escape_string_for_mysql",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "fcn.0009a814": {
        "function_address": "0x0009a814",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0009a874]",
            "ldr r3, [0x0009a878]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x4c]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r0, [r5, 8]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [0x0009a87c]",
            "ldr r0, [0x0009a880]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0009a884]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0009a888]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.directory_file_name": {
        "function_address": "0x0005a164",
        "instructions": [
            "push {r4, lr}",
            "ldrb r2, [r1]",
            "ldr r3, [0x0005a1b0]",
            "cmp r2, 0",
            "add r3, pc, r3",
            "mov r4, r0",
            "ldreq r1, [0x0005a1b4]",
            "addeq r1, r3, r1",
            "mov r0, r4",
            "bl sym.imp.stpcpy",
            "ldrb r3, [r0, -1]",
            "cmp r3, 0x2f",
            "movne r3, 0",
            "strbne r3, [r0, 1]",
            "movne r3, 0x2f",
            "strbne r3, [r0]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AbstractGroup::Accumulate_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x0009864c",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "mov r4, r1",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RandomNumberGenerator::RandomNumberGenerator__": {
        "function_address": "0x000b09d8",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x124",
            "mov r4, r0",
            "add r5, sp, 0x100",
            "bl rsym._ZN8TaoCrypt7OS_SeedC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, 0x20",
            "bl rsym._ZN8TaoCrypt7OS_Seed12GenerateSeedEPhj",
            "mov r1, r5",
            "add r0, r4, 8",
            "mov r2, 0x20",
            "bl rsym._ZN8TaoCrypt4ARC46SetKeyEPKhj",
            "mov r0, r4",
            "mov r1, sp",
            "mov r2, 0x100",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "mov r0, r4",
            "add sp, sp, 0x124",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Mutex::Lock::Lock_yaSSL::Mutex_": {
        "function_address": "0x00084be8",
        "instructions": [
            "push {r4, lr}",
            "str r1, [r0]",
            "mov r4, r0",
            "mov r0, r1",
            "bl sym.imp.pthread_mutex_lock",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DES::ProcessAndXorBlock_unsigned_char_const__unsigned_char_const__unsigned_char__const": {
        "function_address": "0x000a01bc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x000a0444]",
            "tst r1, 3",
            "add r5, pc, r5",
            "sub sp, sp, 8",
            "mov r4, r2",
            "mov r6, r3",
            "bne 0xa03fc",
            "mov ip, r1",
            "ldr r3, [ip], 4",
            "bic r2, r3, 0xff0000",
            "bic r2, r2, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r2, r2, 8",
            "orr r2, r2, r3, lsl 8",
            "ror r2, r2, 0x10",
            "tst ip, 3",
            "str r2, [sp, 4]",
            "bne 0xa03fc",
            "ldr r1, [r1, 4]",
            "ldr r3, [0x000a0448]",
            "bic ip, r1, 0xff0000",
            "bic ip, ip, 0xff",
            "bic r1, r1, 0xff000000",
            "lsr ip, ip, 8",
            "bic r1, r1, 0xff00",
            "orr r1, ip, r1, lsl 8",
            "ror r1, r1, 0xc",
            "eor ip, r1, r2",
            "and r3, ip, r3",
            "eor r1, r3, r1",
            "eor ip, r3, r2",
            "ror r1, r1, 0x14",
            "eor r3, r1, ip",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor r1, r3, r1",
            "eor ip, r3, ip",
            "ldr r2, [0x000a044c]",
            "ror r3, r1, 0x12",
            "eor r1, r3, ip",
            "and r2, r1, r2",
            "eor r3, r2, r3",
            "eor ip, r2, ip",
            "ror r3, r3, 6",
            "eor r2, r3, ip",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "eor r3, r2, r3",
            "eor ip, r2, ip",
            "ror r3, r3, 0x17",
            "ldr r2, [0x000a0450]",
            "eor r1, r3, ip",
            "and r2, r1, r2",
            "eor ip, r2, ip",
            "eor r3, r2, r3",
            "ror ip, ip, 0x1f",
            "add r0, r0, 0x38",
            "add r1, sp, 4",
            "mov r2, sp",
            "stm sp, {r3, ip}",
            "bl rsym._ZNK8TaoCrypt8BasicDES15RawProcessBlockERjS1_",
            "ldm sp, {r1, r2}",
            "ror r1, r1, 1",
            "ldr r3, [0x000a0450]",
            "eor r0, r1, r2",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 9",
            "eor r3, r2, r1",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0x1a",
            "ldr r3, [0x000a044c]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xe",
            "eor r3, r2, r1",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 0x10",
            "eor r2, r3, r2",
            "eor r1, r3, r1",
            "ror r2, r2, 0xc",
            "ldr r3, [0x000a0448]",
            "eor r0, r2, r1",
            "and r3, r0, r3",
            "eor r2, r3, r2",
            "ror r2, r2, 4",
            "eor r3, r3, r1",
            "tst r6, 3",
            "str r3, [sp]",
            "str r2, [sp, 4]",
            "bne 0xa0420",
            "cmp r4, 0",
            "beq 0xa03b4",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "ldr r0, [r4], 4",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "eor r3, r0, r3, ror 16",
            "str r3, [r6], 4",
            "tst r6, 3",
            "bne 0xa0420",
            "cmp r4, 0",
            "beq 0xa03d8",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "ldr r1, [r4]",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "eor r2, r1, r2, ror 16",
            "str r2, [r6]",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bic r1, r3, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r3, r3, 0xff000000",
            "bic r3, r3, 0xff00",
            "lsr r1, r1, 8",
            "orr r3, r1, r3, lsl 8",
            "ror r3, r3, 0x10",
            "str r3, [r6], 4",
            "b 0xa0374",
            "bic r3, r2, 0xff0000",
            "bic r3, r3, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r3, r3, 8",
            "orr r2, r3, r2, lsl 8",
            "ror r2, r2, 0x10",
            "str r2, [r6]",
            "b 0xa03a8",
            "ldr r3, [0x000a0454]",
            "ldr r1, [0x000a0458]",
            "ldr r0, [0x000a045c]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x8f0",
            "ldr r2, [0x000a0460]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a0454]",
            "ldr r1, [0x000a0458]",
            "ldr r0, [0x000a045c]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x950",
            "ldr r2, [0x000a0464]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_clear": {
        "function_address": "0x000852c8",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "bl rsym._ZN5yaSSL6Errors6RemoveEv",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_get_quiet_shutdown": {
        "function_address": "0x00085f90",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK5yaSSL3SSL16GetQuietShutdownEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK5yaSSL3SSL16GetQuietShutdownEv": {
        "function_address": "0x0003f898",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x494]!"
        ]
    },
    "sym.my_date_to_str": {
        "function_address": "0x00078e18",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr ip, [0x00078e60]",
            "ldr r3, [0x00078e64]",
            "ldr lr, [r0, 8]",
            "ldr r5, [r0]",
            "ldr r4, [r0, 4]",
            "add ip, pc, ip",
            "sub sp, sp, 0x14",
            "add r3, ip, r3",
            "mov r0, r1",
            "mvn r2, 0",
            "mov r1, 1",
            "str r5, [sp]",
            "stmib sp, {r4, lr}",
            "bl sym.imp.__sprintf_chk",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Data::Process_yaSSL::input_buffer__yaSSL::SSL_": {
        "function_address": "0x0008d1e4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r0, r2",
            "sub sp, sp, 0x5c",
            "mov r6, r2",
            "mov r4, r1",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrh sb, [r0, 0x2a]",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 8]",
            "cmp r3, 1",
            "movne r7, 0",
            "movne sl, r7",
            "movne r5, r7",
            "beq 0x8d470",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_digestEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "rsb r7, r7, sb",
            "rsb r7, r0, r7",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov fp, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "rsb r7, r5, r7",
            "rsb r7, sl, r7",
            "cmp r7, 0",
            "str r0, [sp, 0x18]",
            "beq 0x8d308",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL13CompressionOnEv",
            "cmp r0, 0",
            "bne 0x8d374",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, r7",
            "mov sb, r0",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r1, sb",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL7addDataEPNS_12input_bufferE",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, r7",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, sb",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr r3, [sp, 0x18]",
            "cmp r0, 0",
            "add r2, fp, r3",
            "beq 0x8d41c",
            "mov ip, 0x17",
            "str ip, [sp]",
            "mov r0, r6",
            "mov ip, 1",
            "add r1, sp, 0x34",
            "mov r3, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL8TLS_hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "add sb, sp, 0x20",
            "mov r0, r4",
            "mov r1, sb",
            "mov r2, r8",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "cmp r5, 0",
            "beq 0x8d340",
            "mov fp, 0",
            "add fp, fp, 1",
            "mov r0, r4",
            "ldr r1, [0x0008d4f0]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "cmp r5, fp",
            "bgt 0x8d328",
            "cmp sl, 0",
            "bne 0x8d450",
            "cmp r7, 0",
            "beq 0x8d440",
            "mov r0, sb",
            "mov r2, r8",
            "add r1, sp, 0x34",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x8d460",
            "add sp, sp, 0x5c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add sb, sp, 0x48",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, sb",
            "bl rsym._ZN5yaSSL10DeCompressERNS_12input_bufferEiS1_",
            "cmn r0, 1",
            "beq 0x8d4b0",
            "mov r0, sb",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r3, r0",
            "mov r0, sb",
            "str r3, [sp, 0xc]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, r0",
            "mov r0, sb",
            "str r2, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r1, 0",
            "mov ip, r0",
            "mov r0, 0x10",
            "str ip, [sp, 0x14]",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r3",
            "mov r3, ip",
            "str r0, [sp, 0x1c]",
            "bl rsym._ZN5yaSSL12input_bufferC1EjPKhj",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL7addDataEPNS_12input_bufferE",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL5isTLSEv",
            "ldr r3, [sp, 0x18]",
            "cmp r0, 0",
            "add r2, fp, r3",
            "bne 0x8d2e8",
            "mov ip, 0x17",
            "str ip, [sp]",
            "mov r0, r6",
            "mov ip, 1",
            "add r1, sp, 0x34",
            "mov r3, r7",
            "str ip, [sp, 4]",
            "bl rsym._ZN5yaSSL4hmacERNS_3SSLEPhPKhjNS_11ContentTypeEb",
            "b 0x8d308",
            "mov r0, r6",
            "mov r1, 1",
            "bl rsym._ZN5yaSSL3SSL16get_SEQIncrementEb",
            "b 0x8d368",
            "mov r0, r4",
            "ldr r1, [0x0008d4f0]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "b 0x8d348",
            "mov r0, r6",
            "mov r1, 0x70",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8d368",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "subs r5, r0, 0",
            "moveq r7, r5",
            "bne 0x8d4c8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "add r3, sb, r0",
            "sub r3, r3, 1",
            "rsb r5, r5, r3",
            "ldrb r5, [r8, r5]",
            "mov sl, 1",
            "b 0x8d228",
            "mov r0, r6",
            "mov r1, 0x77",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "b 0x8d368",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r7, r0",
            "mov r5, r0",
            "b 0x8d484"
        ]
    },
    "rsym._ZN5yaSSL3SSL7addDataEPNS_12input_bufferE": {
        "function_address": "0x0003e008",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x4f4]!"
        ]
    },
    "rsym._ZN5yaSSL10DeCompressERNS_12input_bufferEiS1_": {
        "function_address": "0x0003d7e0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa64]!"
        ]
    },
    "rsym._ZN5yaSSL12input_bufferC1EjPKhj": {
        "function_address": "0x00040048",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf74]!"
        ]
    },
    "sym.yaSSL::Certificate::Certificate_yaSSL::x509_const_": {
        "function_address": "0x0008cf08",
        "instructions": [
            "ldr r3, [0x0008cf4c]",
            "ldr r2, [0x0008cf50]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "str r2, [r0]",
            "str r1, [r0, 8]",
            "mov r0, r1",
            "bl rsym._ZNK5yaSSL4x50910get_lengthEv",
            "add r1, r0, 6",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL13HandShakeBase10set_lengthEi",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0008ad78": {
        "function_address": "0x0008ad78",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008adbc]",
            "ldr r3, [0x0008adc0]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13ServerKeyBaseEEEvPT_",
            "ldr r3, [0x0008adc4]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.bchange": {
        "function_address": "0x0005c190",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r3",
            "ldr r3, [sp, 0x10]",
            "cmp r1, r4",
            "mov r6, r2",
            "mov r5, r0",
            "rsb r2, r1, r3",
            "blo 0x5c1d4",
            "add r1, r0, r1",
            "add r0, r0, r4",
            "bl sym.imp.memmove",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r2, r4",
            "add r0, r5, r0",
            "add r1, r5, r3",
            "bl rsym.bmove_upp",
            "b 0x5c1bc"
        ]
    },
    "sym.TaoCrypt::AbstractGroup::Reduce_TaoCrypt::Integer__TaoCrypt::Integer_const__const": {
        "function_address": "0x00098620",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [r0]",
            "mov r4, r1",
            "ldr ip, [r3, 0x20]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::verifyState_yaSSL::RecordLayerHeader_const_": {
        "function_address": "0x000917c8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x91814",
            "ldrb r3, [r4, 4]",
            "cmp r3, 3",
            "bne 0x917f8",
            "ldrb r3, [r4, 5]",
            "cmp r3, 2",
            "bls 0x9181c",
            "mov r0, r5",
            "mov r1, 0x75",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "ldr r3, [r4]",
            "cmp r3, 0x17",
            "beq 0x91848",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r6, r5, 0x8e0",
            "add r6, r6, 0xc",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL6States9getRecordEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x91808",
            "mov r0, r5",
            "mov r1, 0x6a",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL6States12getHandShakeEv",
            "ldr r3, [r0]",
            "cmp r3, 3",
            "bne 0x91838",
            "b 0x91814"
        ]
    },
    "rsym._ZNK5yaSSL6States9getRecordEv": {
        "function_address": "0x0003d738",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xad4]!"
        ]
    },
    "sym.yaSSL::sendData_yaSSL::SSL__void_const__int_": {
        "function_address": "0x00083490",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x44",
            "mov fp, r1",
            "mov sb, r2",
            "mov r6, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r1, [0x0008368c]",
            "cmp r0, 0x50",
            "add r1, pc, r1",
            "str r1, [sp, 8]",
            "beq 0x8367c",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL23verfiyHandShakeCompleteEv",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r4, r0, 0",
            "bne 0x8362c",
            "ldr r2, [0x00083690]",
            "add r5, sp, 0x34",
            "str r2, [sp, 0xc]",
            "add r7, sp, 0x24",
            "add sl, sp, 0x14",
            "b 0x835a0",
            "bl rsym._ZN5yaSSL8CompressEPKhiRNS_12input_bufferE",
            "cmn r0, 1",
            "beq 0x835fc",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "mov r1, r0",
            "mov r0, r7",
            "str r1, [sp, 4]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "ldr r1, [sp, 4]",
            "mov r2, r0",
            "lsl r1, r1, 0x10",
            "lsr r1, r1, 0x10",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL4Data7SetDataEtPKh",
            "mov r2, sl",
            "mov r1, r5",
            "mov r0, r6",
            "bl fcn.000830c4",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r1, r0",
            "mov r0, r5",
            "str r1, [sp, 4]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp, 4]",
            "mov r2, r0",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "add r4, r4, r8",
            "bne 0x83608",
            "cmp r4, sb",
            "beq 0x8363c",
            "ldr r2, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "mov r0, r7",
            "ldr r3, [r2, r1]",
            "add r3, r3, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r1, 0x4000",
            "rsb r0, r4, sb",
            "bl rsym._ZN5yaSSL3minIiEET_S1_S1_",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL12input_bufferC1Ev",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL4DataC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL3SSL13CompressionOnEv",
            "cmp r0, 0",
            "mov r1, r8",
            "mov r2, r7",
            "lsl r3, r8, 0x10",
            "add r0, fp, r4",
            "bne 0x834ec",
            "lsr r1, r3, 0x10",
            "add r2, fp, r4",
            "mov r0, sl",
            "bl rsym._ZN5yaSSL4Data7SetDataEtPKh",
            "b 0x83528",
            "mov r0, r6",
            "mov r1, 0x76",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "ldr r2, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "mov r0, r7",
            "ldr r3, [r2, r1]",
            "add r3, r3, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mvn r0, 0",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "mov r0, r7",
            "ldr r3, [r2, r1]",
            "add r3, r3, 8",
            "str r3, [sp, 0x14]",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "mov r1, r4",
            "mov r2, 1",
            "bl rsym._ZN5yaSSL3Log8ShowDataEjb",
            "mov r0, r4",
            "b 0x83630",
            "mov r0, r6",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x834bc"
        ]
    },
    "rsym._ZN5yaSSL8CompressEPKhiRNS_12input_bufferE": {
        "function_address": "0x0003d8b8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9d4]!"
        ]
    },
    "rsym._ZN5yaSSL4Data7SetDataEtPKh": {
        "function_address": "0x0003ec74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcac]!"
        ]
    },
    "sym.TaoCrypt::RSA_PrivateKey::RSA_PrivateKey_TaoCrypt::Source_": {
        "function_address": "0x000b2ca8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x50",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x60",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x70",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt14RSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.getopt_ll_limit_value": {
        "function_address": "0x00057704",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r5, [r2, 0x40]",
            "ldr r8, [0x000578c8]",
            "cmp r5, 0",
            "moveq r5, 1",
            "moveq r6, 0",
            "asrne r6, r5, 0x1f",
            "cmp r1, 0",
            "add r8, pc, r8",
            "sub sp, sp, 0x20c",
            "mov r4, r2",
            "mov fp, r0",
            "mov r7, r1",
            "mov sl, r3",
            "ble 0x578ac",
            "add r1, r4, 0x30",
            "ldm r1, {r0, r1}",
            "cmp r7, r1",
            "bls 0x577e4",
            "orrs r3, r0, r1",
            "movne sb, 1",
            "beq 0x577e8",
            "ldr r3, [r4, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 3",
            "beq 0x57804",
            "cmp r3, 5",
            "beq 0x57804",
            "add r3, r4, 0x38",
            "ldm r3, {r2, r3}",
            "subs r0, r0, r2",
            "sbc r1, r1, r3",
            "mov r2, r5",
            "mov r3, r6",
            "bl fcn.000bfd8c",
            "mul ip, r0, r6",
            "umull r2, r3, r0, r5",
            "mla r1, r5, r1, ip",
            "ldr r5, [r4, 0x2c]",
            "add r1, r1, r3",
            "cmp r5, r1",
            "ldr r6, [r4, 0x28]",
            "bgt 0x57828",
            "bne 0x577bc",
            "cmp r6, r2",
            "bhi 0x57828",
            "mov r6, r2",
            "mov r5, r1",
            "cmp sl, 0",
            "strbne sb, [sl]",
            "beq 0x5784c",
            "mov r0, r6",
            "mov r1, r5",
            "add sp, sp, 0x20c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "beq 0x578bc",
            "ldr r3, [r4, 0x18]",
            "mov r0, fp",
            "and r3, r3, 0x7f",
            "cmp r3, 3",
            "mov r1, r7",
            "mov sb, 0",
            "bne 0x5776c",
            "cmp r1, 0",
            "bgt 0x57818",
            "bne 0x57774",
            "cmn r0, 0x80000001",
            "bls 0x57774",
            "mov sb, 1",
            "mvn r0, 0x80000000",
            "mov r1, 0",
            "b 0x57774",
            "cmp r5, r7",
            "bgt 0x5783c",
            "bne 0x577c4",
            "cmp r6, fp",
            "bls 0x577c4",
            "mov sb, 1",
            "cmp sl, 0",
            "strbne sb, [sl]",
            "bne 0x577d0",
            "cmp sb, 0",
            "beq 0x577d0",
            "ldr r3, [0x000578cc]",
            "mov r1, r7",
            "ldr r3, [r8, r3]",
            "add r2, sp, 0x108",
            "mov r0, fp",
            "ldr sl, [r4]",
            "ldr r4, [r3]",
            "bl rsym.llstr",
            "mov r1, r5",
            "mov r7, r0",
            "add r2, sp, 8",
            "mov r0, r6",
            "bl rsym.llstr",
            "ldr r1, [0x000578d0]",
            "str r0, [sp]",
            "add r1, r8, r1",
            "mov r2, sl",
            "mov r3, r7",
            "mov r0, 1",
            "mov lr, pc",
            "bx r4",
            "b 0x577d0",
            "bne 0x577e8",
            "cmp r0, 0",
            "bne 0x57740",
            "b 0x577e8",
            "cmp fp, r0",
            "bls 0x577e8",
            "b 0x57750"
        ]
    },
    "sym.yaSSL::Socket::receive_unsigned_char__unsigned_int__int_": {
        "function_address": "0x00084db4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0",
            "strb r0, [r4, 4]",
            "ldr r0, [r4]",
            "bl sym.imp.recv",
            "cmn r0, 1",
            "mov r5, r0",
            "beq 0x84df0",
            "cmp r0, 0",
            "mvneq r0, 0",
            "beq 0x84de8",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN5yaSSL6Socket13get_lastErrorEv",
            "cmp r0, 0xb",
            "beq 0x84e08",
            "bl rsym._ZN5yaSSL6Socket13get_lastErrorEv",
            "cmp r0, 0xb",
            "bne 0x84de4",
            "mov r3, 1",
            "strb r3, [r4, 5]",
            "strb r3, [r4, 4]",
            "mov r0, 0",
            "b 0x84de8"
        ]
    },
    "sym.imp.recv": {
        "function_address": "0x0003d660",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb64]!"
        ]
    },
    "rsym._ZN5yaSSL6Socket13get_lastErrorEv": {
        "function_address": "0x00040a20",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x8e4]!"
        ]
    },
    "sym.normalize_dirname": {
        "function_address": "0x0004a2b4",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x204",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym.intern_filename",
            "mov r0, sp",
            "bl sym.imp.strlen",
            "cmp r0, 0",
            "mov r4, sp",
            "beq 0x4a310",
            "add r2, sp, 0x200",
            "add r3, r2, r0",
            "ldrb r3, [r3, -0x201]",
            "cmp r3, 0x2f",
            "beq 0x4a310",
            "ldr r3, [0x0004a328]",
            "cmp r0, r3",
            "movhs r0, r3",
            "add r0, r2, r0",
            "mov r3, 0",
            "strb r3, [r0, -0x1ff]",
            "mov r3, 0x2f",
            "strb r3, [r0, -0x200]",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym.cleanup_dirname",
            "add sp, sp, 0x204",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym.cleanup_dirname": {
        "function_address": "0x0003e938",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xed4]!"
        ]
    },
    "method.TaoCrypt::SHA384.operator_TaoCrypt::SHA384_const_": {
        "function_address": "0x000b38b0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xd4",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt6SHA384C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt6SHA3844SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0xd4",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA384C1ERKS0_": {
        "function_address": "0x00040294",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdec]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA3844SwapERS0_": {
        "function_address": "0x0003f8ec",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x45c]!"
        ]
    },
    "sym.cli_read_change_user_result": {
        "function_address": "0x000455b4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r6, r1",
            "mov r7, r2",
            "mov r5, r0",
            "bl rsym.cli_safe_read",
            "ldr r4, [0x0004567c]",
            "cmn r0, 1",
            "add r4, pc, r4",
            "beq 0x4565c",
            "cmp r0, 1",
            "beq 0x455ec",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r5, 0x10]",
            "ldrb r3, [r3]",
            "cmp r3, 0xfe",
            "bne 0x455e0",
            "ldr r3, [r5, 0x2e0]",
            "tst r3, 0x8000",
            "beq 0x455e0",
            "add r1, r5, 0x384",
            "mov r2, r7",
            "add r1, r1, 2",
            "mov r0, r6",
            "bl rsym.scramble_323",
            "mov r0, r5",
            "mov r1, r6",
            "mov r2, 9",
            "bl rsym.my_net_write",
            "cmp r0, 0",
            "bne 0x45644",
            "mov r0, r5",
            "bl rsym.net_flush",
            "cmp r0, 0",
            "beq 0x45664",
            "ldr r3, [0x00045680]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x00045684]",
            "ldr r2, [r3]",
            "bl rsym.set_mysql_error",
            "mov r0, 1",
            "b 0x455e4",
            "mov r0, r5",
            "bl rsym.cli_safe_read",
            "cmn r0, 1",
            "movne r0, 0",
            "moveq r0, 1",
            "b 0x455e4"
        ]
    },
    "sym.read_user_name": {
        "function_address": "0x000454f0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "bl sym.imp.geteuid",
            "ldr r4, [0x0004559c]",
            "cmp r0, 0",
            "add r4, pc, r4",
            "beq 0x4552c",
            "bl sym.imp.getlogin",
            "subs r1, r0, 0",
            "beq 0x45544",
            "mov r0, r5",
            "mov r2, 0x30",
            "bl rsym.strmake",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [0x000455a0]",
            "mov r0, r5",
            "add r1, r4, r1",
            "mov r2, 5",
            "bl sym.imp.memcpy",
            "b 0x45524",
            "bl sym.imp.geteuid",
            "bl sym.imp.getpwuid",
            "cmp r0, 0",
            "ldrne r1, [r0]",
            "bne 0x45518",
            "ldr r0, [0x000455a4]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "bne 0x45518",
            "ldr r0, [0x000455a8]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "bne 0x45518",
            "ldr r0, [0x000455ac]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "ldreq r1, [0x000455b0]",
            "addeq r1, r4, r1",
            "b 0x45518"
        ]
    },
    "sym.imp.geteuid": {
        "function_address": "0x0003ce5c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xbc]!"
        ]
    },
    "sym.imp.getlogin": {
        "function_address": "0x0003d8d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9c4]!"
        ]
    },
    "sym.imp.getpwuid": {
        "function_address": "0x0003e920",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xee4]!"
        ]
    },
    "fcn.0008f3dc": {
        "function_address": "0x0008f3dc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008f434]",
            "ldr r3, [0x0008f438]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0xc]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008f43c]",
            "ldr r0, [0x0008f440]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x0008f444]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x0008f448]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::CleanUp__": {
        "function_address": "0x000a4b9c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000a4bd4]",
            "ldr r5, [0x000a4bd8]",
            "add r4, pc, r4",
            "add r6, r4, r5",
            "ldr r0, [r4, r5]",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_7IntegerEEEvPT_",
            "ldr r0, [r6, 4]",
            "bl rsym._ZN8TaoCrypt8tcDeleteINS_7IntegerEEEvPT_",
            "mov r3, 0",
            "str r3, [r4, r5]",
            "str r3, [r6, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt8tcDeleteINS_7IntegerEEEvPT_": {
        "function_address": "0x0003ef2c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xadc]!"
        ]
    },
    "sym.free_root": {
        "function_address": "0x0004bf08",
        "instructions": [
            "tst r1, 2",
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "beq 0x4bf80",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "moveq r1, r0",
            "beq 0x4bf44",
            "ldr r2, [r3, 8]",
            "mov r1, r3",
            "sub r2, r2, 0x10",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x4bf28",
            "ldr r3, [r5, 4]",
            "cmp r3, 0",
            "str r3, [r1]",
            "beq 0x4bf6c",
            "ldr r2, [r3, 8]",
            "sub r2, r2, 0x10",
            "str r2, [r3, 4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0x4bf54",
            "mov r3, 0",
            "str r3, [r5, 0x18]",
            "str r3, [r5, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ands r1, r1, 1",
            "streq r1, [r0, 8]",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "ldreq r3, [r5, 8]",
            "beq 0x4bfc0",
            "ldr r3, [r5, 8]",
            "b 0x4bfa4",
            "mov r0, r4",
            "cmp r0, r3",
            "ldr r4, [r0]",
            "beq 0x4bfb8",
            "bl rsym.my_no_flags_free",
            "ldr r3, [r5, 8]",
            "cmp r4, 0",
            "bne 0x4bfa0",
            "ldr r0, [r5]",
            "cmp r0, 0",
            "bne 0x4c010",
            "mov r2, 0",
            "cmp r3, 0",
            "str r2, [r5]",
            "str r2, [r5, 4]",
            "beq 0x4bff8",
            "str r3, [r5]",
            "ldr r1, [r3, 8]",
            "sub r1, r1, 0x10",
            "str r1, [r3, 4]",
            "ldr r3, [r5]",
            "str r2, [r3]",
            "mov r3, 0",
            "str r3, [r5, 0x18]",
            "mov r3, 4",
            "str r3, [r5, 0x14]",
            "b 0x4bf78",
            "mov r0, r4",
            "cmp r0, r3",
            "ldr r4, [r0]",
            "beq 0x4c024",
            "bl rsym.my_no_flags_free",
            "ldr r3, [r5, 8]",
            "cmp r4, 0",
            "bne 0x4c00c",
            "mov r2, 0",
            "cmp r3, 0",
            "str r2, [r5]",
            "str r2, [r5, 4]",
            "bne 0x4bfe0",
            "b 0x4bff8"
        ]
    },
    "sym.mySTL::list_yaSSL::SSL_SESSION_::pop_back__": {
        "function_address": "0x00087d34",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x87d7c",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CreateCertificateVerify__": {
        "function_address": "0x0008b2e8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL17CertificateVerifyC1Ev",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_strtoll10_8bit": {
        "function_address": "0x0005ed54",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym.my_strtoll10",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym.my_strtoll10": {
        "function_address": "0x00040690",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb44]!"
        ]
    },
    "sym.my_b_safe_write": {
        "function_address": "0x000548fc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0, 0x64]",
            "mov r4, r0",
            "cmp r3, 3",
            "mov r5, r2",
            "beq 0x54958",
            "ldr r3, [r0, 0x28]",
            "ldr lr, [r0, 0x2c]",
            "add ip, r3, r2",
            "cmp lr, ip",
            "bhs 0x5493c",
            "ldr ip, [r0, 0x60]",
            "mov lr, pc",
            "bx ip",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x28]",
            "mov r0, 0",
            "add r5, r3, r5",
            "str r5, [r4, 0x28]",
            "b 0x54934",
            "pop {r4, r5, r6, lr}",
            "b rsym.my_b_append"
        ]
    },
    "sym.my_MD5Final": {
        "function_address": "0x00056b78",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r1, 0x10]",
            "mov r4, r1",
            "lsr r3, r3, 3",
            "and r3, r3, 0x3f",
            "rsb r2, r3, 0x3f",
            "add r1, r1, r3",
            "mvn ip, 0x7f",
            "cmp r2, 7",
            "mov r5, r0",
            "strb ip, [r1, 0x18]",
            "add r0, r1, 0x19",
            "bls 0x56cac",
            "sub r2, r2, 8",
            "mov r1, 0",
            "bl sym.imp.memset",
            "add r6, r4, 0x18",
            "ldr r3, [r4, 0x10]",
            "add r2, r4, 0x50",
            "lsr ip, r3, 0x18",
            "lsr r0, r3, 8",
            "lsr r1, r3, 0x10",
            "strb r3, [r4, 0x50]",
            "strb ip, [r2, 3]",
            "strb r0, [r2, 1]",
            "strb r1, [r2, 2]",
            "ldr r3, [r4, 0x14]",
            "add r2, r4, 0x54",
            "lsr ip, r3, 0x18",
            "lsr r0, r3, 8",
            "lsr r1, r3, 0x10",
            "strb r3, [r4, 0x54]",
            "strb ip, [r2, 3]",
            "strb r0, [r2, 1]",
            "strb r1, [r2, 2]",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.00055f68",
            "ldr r3, [r4]",
            "add r2, r5, 4",
            "lsr r1, r3, 0x18",
            "lsr ip, r3, 8",
            "lsr r0, r3, 0x10",
            "strb ip, [r5, 1]",
            "strb r0, [r5, 2]",
            "strb r1, [r5, 3]",
            "strb r3, [r5]",
            "ldr r3, [r4, 4]",
            "add r1, r5, 8",
            "lsr r6, r3, 0x18",
            "lsr ip, r3, 8",
            "lsr r0, r3, 0x10",
            "strb r3, [r5, 4]",
            "strb r6, [r2, 3]",
            "strb ip, [r2, 1]",
            "strb r0, [r2, 2]",
            "ldr r3, [r4, 8]",
            "add r2, r5, 0xc",
            "lsr ip, r3, 8",
            "lsr r0, r3, 0x10",
            "lsr r6, r3, 0x18",
            "strb r3, [r5, 8]",
            "strb ip, [r1, 1]",
            "strb r0, [r1, 2]",
            "strb r6, [r1, 3]",
            "ldr r3, [r4, 0xc]",
            "strb r3, [r5, 0xc]",
            "lsr ip, r3, 0x18",
            "lsr r0, r3, 8",
            "lsr r1, r3, 0x10",
            "mov r3, 0",
            "strb ip, [r2, 3]",
            "strb r0, [r2, 1]",
            "strb r1, [r2, 2]",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r1, 0",
            "add r6, r4, 0x18",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r1, r6",
            "bl fcn.00055f68",
            "mov r3, 0",
            "str r3, [r4, 0x4c]",
            "str r3, [r4, 0x18]",
            "str r3, [r4, 0x1c]",
            "str r3, [r4, 0x20]",
            "str r3, [r4, 0x24]",
            "str r3, [r4, 0x28]",
            "str r3, [r4, 0x2c]",
            "str r3, [r4, 0x30]",
            "str r3, [r4, 0x34]",
            "str r3, [r4, 0x38]",
            "str r3, [r4, 0x3c]",
            "str r3, [r4, 0x40]",
            "str r3, [r4, 0x44]",
            "str r3, [r4, 0x48]",
            "b 0x56bbc"
        ]
    },
    "fcn.00055f68": {
        "function_address": "0x00055f68",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp}",
            "ldrb r3, [r1, 2]",
            "ldrb r2, [r1, 3]",
            "ldrb r4, [r1, 1]",
            "mov r6, r1",
            "ldrb ip, [r6], 4",
            "orr r2, r3, r2, lsl 8",
            "orr r2, r4, r2, lsl 8",
            "sub sp, sp, 0x80",
            "orr ip, ip, r2, lsl 8",
            "str ip, [sp, 8]",
            "ldrb r2, [r6, 2]",
            "ldrb ip, [r6, 3]",
            "ldr r8, [r0, 8]",
            "ldrb r6, [r6, 1]",
            "ldr r7, [r0, 0xc]",
            "ldr r3, [r0, 4]",
            "orr ip, r2, ip, lsl 8",
            "ldrb r2, [r1, 4]",
            "eor r4, r7, r8",
            "orr ip, r6, ip, lsl 8",
            "orr r2, r2, ip, lsl 8",
            "and r4, r4, r3",
            "str r2, [sp, 0xc]",
            "eor r4, r4, r7",
            "add r7, r1, 8",
            "ldrb r2, [r7, 2]",
            "ldrb ip, [r7, 3]",
            "ldr sb, [sp, 8]",
            "ldr fp, [sp, 0xc]",
            "ldr r5, [0x00056a7c]",
            "ldr r6, [0x00056a80]",
            "ldr sl, [r0]",
            "orr ip, r2, ip, lsl 8",
            "ldr r2, [r0, 0xc]",
            "ldrb r7, [r7, 1]",
            "add r5, sb, r5",
            "add r6, fp, r6",
            "add r6, r6, r2",
            "add r5, r5, sl",
            "ldrb r2, [r1, 8]",
            "orr ip, r7, ip, lsl 8",
            "add r5, r5, r4",
            "add r5, r3, r5, ror 25",
            "eor r4, r8, r3",
            "orr r2, r2, ip, lsl 8",
            "str r2, [sp, 0x10]",
            "add r7, r1, 0xc",
            "and r4, r5, r4",
            "ldrb r2, [r7, 2]",
            "eor r4, r4, r8",
            "ldrb r8, [r7, 3]",
            "ldrb r7, [r7, 1]",
            "orr r8, r2, r8, lsl 8",
            "ldrb r2, [r1, 0xc]",
            "ldr sb, [sp, 0x10]",
            "orr r8, r7, r8, lsl 8",
            "add r4, r6, r4",
            "ldr r6, [0x00056a84]",
            "add r4, r5, r4, ror 20",
            "eor ip, r5, r3",
            "ldr sl, [r0, 8]",
            "orr r2, r2, r8, lsl 8",
            "str r2, [sp, 0x14]",
            "add r7, r1, 0x10",
            "add r6, sb, r6",
            "and ip, r4, ip",
            "ldrb r8, [r7, 2]",
            "add r6, r6, sl",
            "eor ip, ip, r3",
            "ldrb sl, [r7, 3]",
            "ldr fp, [sp, 0x14]",
            "ldrb r7, [r7, 1]",
            "add ip, r6, ip",
            "ldr r6, [0x00056a88]",
            "add ip, r4, ip, ror 15",
            "eor r2, r4, r5",
            "orr sl, r8, sl, lsl 8",
            "ldrb r8, [r1, 0x10]",
            "orr sl, r7, sl, lsl 8",
            "add r6, fp, r6",
            "and r2, ip, r2",
            "add r7, r1, 0x14",
            "add r6, r6, r3",
            "orr r8, r8, sl, lsl 8",
            "eor r2, r2, r5",
            "str r8, [sp, 0x18]",
            "add r2, r6, r2",
            "ldrb r8, [r7, 2]",
            "ldrb sl, [r7, 3]",
            "ldr fp, [sp, 0x18]",
            "ldr r6, [0x00056a8c]",
            "ldrb r7, [r7, 1]",
            "add r6, fp, r6",
            "orr sl, r8, sl, lsl 8",
            "ldrb fp, [r1, 0x14]",
            "add r2, ip, r2, ror 10",
            "eor sb, ip, r4",
            "orr sl, r7, sl, lsl 8",
            "orr fp, fp, sl, lsl 8",
            "and sb, r2, sb",
            "str fp, [sp, 0x1c]",
            "add r8, r1, 0x18",
            "eor sb, sb, r4",
            "add r5, r6, r5",
            "ldrb sl, [r8, 3]",
            "add r6, r5, sb",
            "ldr r7, [0x00056a90]",
            "ldrb r5, [r8, 2]",
            "ldrb r8, [r8, 1]",
            "add r7, fp, r7",
            "orr sl, r5, sl, lsl 8",
            "ldrb fp, [r1, 0x18]",
            "add r6, r2, r6, ror 25",
            "eor sb, r2, ip",
            "orr sl, r8, sl, lsl 8",
            "orr fp, fp, sl, lsl 8",
            "and sb, r6, sb",
            "str fp, [sp, 0x20]",
            "add r8, r1, 0x1c",
            "eor sb, sb, ip",
            "add r4, r7, r4",
            "ldrb sl, [r8, 2]",
            "add r4, r4, sb",
            "ldr r7, [0x00056a94]",
            "ldrb sb, [r8, 3]",
            "ldrb r8, [r8, 1]",
            "add r7, fp, r7",
            "orr sl, sl, sb, lsl 8",
            "ldrb fp, [r1, 0x1c]",
            "add r5, r6, r4, ror 20",
            "orr r8, r8, sl, lsl 8",
            "eor r4, r6, r2",
            "orr fp, fp, r8, lsl 8",
            "and r4, r5, r4",
            "str fp, [sp, 0x24]",
            "add ip, r7, ip",
            "eor r4, r4, r2",
            "add r7, r1, 0x20",
            "ldrb r8, [r7, 2]",
            "ldrb sl, [r7, 3]",
            "add r4, ip, r4",
            "ldr ip, [0x00056a98]",
            "ldrb r7, [r7, 1]",
            "add ip, fp, ip",
            "orr sl, r8, sl, lsl 8",
            "ldrb fp, [r1, 0x20]",
            "add r4, r5, r4, ror 15",
            "eor sb, r5, r6",
            "orr sl, r7, sl, lsl 8",
            "orr fp, fp, sl, lsl 8",
            "and sb, r4, sb",
            "str fp, [sp, 0x28]",
            "add r8, r1, 0x24",
            "eor sb, sb, r6",
            "add r2, ip, r2",
            "ldrb sl, [r8, 2]",
            "add r2, r2, sb",
            "ldrb sb, [r8, 3]",
            "ldr r7, [0x00056a9c]",
            "ldrb r8, [r8, 1]",
            "orr sb, sl, sb, lsl 8",
            "ldrb sl, [r1, 0x24]",
            "add ip, r4, r2, ror 10",
            "add r7, fp, r7",
            "eor r2, r4, r5",
            "orr sb, r8, sb, lsl 8",
            "add r6, r7, r6",
            "orr sl, sl, sb, lsl 8",
            "add r7, r1, 0x28",
            "and r2, ip, r2",
            "ldrb fp, [r7, 2]",
            "ldrb r8, [r7, 3]",
            "eor r2, r2, r5",
            "str sl, [sp, 0x2c]",
            "ldr sb, [sp, 0x2c]",
            "add r2, r6, r2",
            "ldr r6, [0x00056aa0]",
            "add r2, ip, r2, ror 25",
            "ldrb sl, [r7, 1]",
            "eor r7, ip, r4",
            "add r6, sb, r6",
            "orr r8, fp, r8, lsl 8",
            "and sb, r2, r7",
            "ldrb r7, [r1, 0x28]",
            "orr r8, sl, r8, lsl 8",
            "orr r7, r7, r8, lsl 8",
            "str r7, [sp, 0x30]",
            "add r7, r1, 0x2c",
            "ldrb sl, [r7, 3]",
            "ldrb r8, [r7, 2]",
            "ldr fp, [sp, 0x30]",
            "ldrb r7, [r7, 1]",
            "add r5, r6, r5",
            "orr r8, r8, sl, lsl 8",
            "sub r6, fp, 0xa400",
            "ldrb fp, [r1, 0x2c]",
            "orr r8, r7, r8, lsl 8",
            "orr fp, fp, r8, lsl 8",
            "add r7, r1, 0x30",
            "sub r6, r6, 0x4f",
            "str fp, [sp, 0x34]",
            "eor sb, sb, r4",
            "ldrb sl, [r7, 3]",
            "ldrb r8, [r7, 2]",
            "add r4, r6, r4",
            "ldr r6, [0x00056aa4]",
            "ldrb r7, [r7, 1]",
            "add r6, fp, r6",
            "add r5, r5, sb",
            "ldrb fp, [r1, 0x30]",
            "orr r8, r8, sl, lsl 8",
            "add r5, r2, r5, ror 20",
            "eor sb, r2, ip",
            "orr r8, r7, r8, lsl 8",
            "orr fp, fp, r8, lsl 8",
            "and sb, r5, sb",
            "str fp, [sp, 0x38]",
            "eor sb, sb, ip",
            "add ip, r6, ip",
            "add r6, r1, 0x34",
            "ldrb sl, [r6, 3]",
            "ldrb r8, [r6, 2]",
            "ldrb fp, [r6, 1]",
            "add r4, r4, sb",
            "ldr r6, [sp, 0x38]",
            "ldr r7, [0x00056aa8]",
            "add r4, r5, r4, ror 15",
            "eor sb, r5, r2",
            "add r7, r6, r7",
            "orr r8, r8, sl, lsl 8",
            "ldrb r6, [r1, 0x34]",
            "and sb, r4, sb",
            "eor sb, sb, r2",
            "orr fp, fp, r8, lsl 8",
            "add r8, r1, 0x38",
            "orr r6, r6, fp, lsl 8",
            "ldrb sl, [r8, 3]",
            "ldrb fp, [r8, 2]",
            "add ip, ip, sb",
            "ldrb r8, [r8, 1]",
            "add r2, r7, r2",
            "ldr r7, [0x00056aac]",
            "add ip, r4, ip, ror 10",
            "eor sb, r4, r5",
            "str r8, [sp, 0x3c]",
            "add r7, r6, r7",
            "and sb, ip, sb",
            "eor sb, sb, r5",
            "add r5, r7, r5",
            "ldr r7, [sp, 0x3c]",
            "ldrb r8, [r1, 0x38]",
            "orr sl, fp, sl, lsl 8",
            "orr sl, r7, sl, lsl 8",
            "add r2, r2, sb",
            "add r7, r1, 0x3c",
            "add r2, ip, r2, ror 25",
            "orr r8, r8, sl, lsl 8",
            "eor sb, ip, r4",
            "ldrb sl, [r7, 2]",
            "and sb, r2, sb",
            "ldrb fp, [r7, 3]",
            "eor sb, sb, r4",
            "str sl, [sp, 0x3c]",
            "ldrb r7, [r7, 1]",
            "add r5, r5, sb",
            "ldr sb, [0x00056ab0]",
            "add r5, r2, r5, ror 20",
            "str r7, [sp, 4]",
            "eor sl, r2, ip",
            "add sb, r8, sb",
            "ldr r7, [sp, 0x3c]",
            "add r4, sb, r4",
            "and sl, r5, sl",
            "ldr sb, [sp, 4]",
            "ldrb r1, [r1, 0x3c]",
            "orr fp, r7, fp, lsl 8",
            "eor sl, sl, ip",
            "orr r7, sb, fp, lsl 8",
            "add sl, r4, sl",
            "ldr sb, [0x00056ab4]",
            "add sl, r5, sl, ror 15",
            "orr r7, r1, r7, lsl 8",
            "eor r4, r5, r2",
            "add sb, r7, sb",
            "and r4, sl, r4",
            "eor r4, r4, r2",
            "add ip, sb, ip",
            "add ip, ip, r4",
            "add r1, sl, ip, ror 10",
            "ldr fp, [sp, 0xc]",
            "ldr ip, [0x00056ab8]",
            "eor r4, r1, sl",
            "add ip, fp, ip",
            "and r4, r4, r5",
            "eor r4, r4, sl",
            "add r2, ip, r2",
            "add r2, r2, r4",
            "add r2, r1, r2, ror 27",
            "ldr r4, [sp, 0x20]",
            "ldr ip, [0x00056abc]",
            "eor sb, r2, r1",
            "add ip, r4, ip",
            "and sb, sb, sl",
            "eor sb, sb, r1",
            "add ip, ip, r5",
            "add ip, ip, sb",
            "add r4, r2, ip, ror 23",
            "ldr sb, [sp, 0x34]",
            "ldr ip, [0x00056ac0]",
            "eor r5, r4, r2",
            "add ip, sb, ip",
            "and r5, r5, r1",
            "eor r5, r5, r2",
            "add ip, ip, sl",
            "add ip, ip, r5",
            "add ip, r4, ip, ror 18",
            "ldr fp, [sp, 8]",
            "ldr r5, [0x00056ac4]",
            "eor sl, ip, r4",
            "add r5, fp, r5",
            "and sl, sl, r2",
            "eor sl, sl, r4",
            "add r1, r5, r1",
            "add r1, r1, sl",
            "add r1, ip, r1, ror 12",
            "ldr sb, [sp, 0x1c]",
            "ldr r5, [0x00056ac8]",
            "eor sl, r1, ip",
            "add r5, sb, r5",
            "and sl, sl, r4",
            "eor sl, sl, ip",
            "add r2, r5, r2",
            "add r2, r2, sl",
            "add r2, r1, r2, ror 27",
            "ldr fp, [sp, 0x30]",
            "ldr r5, [0x00056acc]",
            "eor sl, r2, r1",
            "add r5, fp, r5",
            "and sl, sl, ip",
            "eor sl, sl, r1",
            "add r4, r5, r4",
            "add r4, r4, sl",
            "add r4, r2, r4, ror 23",
            "ldr r5, [0x00056ad0]",
            "eor sl, r4, r2",
            "add r5, r7, r5",
            "and sl, sl, r1",
            "eor sl, sl, r2",
            "add ip, r5, ip",
            "add ip, ip, sl",
            "add ip, r4, ip, ror 18",
            "ldr sb, [sp, 0x18]",
            "ldr r5, [0x00056ad4]",
            "eor sl, ip, r4",
            "add r5, sb, r5",
            "and sl, sl, r2",
            "eor sl, sl, r4",
            "add r1, r5, r1",
            "add r1, r1, sl",
            "add r1, ip, r1, ror 12",
            "ldr fp, [sp, 0x2c]",
            "ldr r5, [0x00056ad8]",
            "eor sl, r1, ip",
            "add r5, fp, r5",
            "and sl, sl, r4",
            "eor sl, sl, ip",
            "add r2, r5, r2",
            "add r2, r2, sl",
            "add r2, r1, r2, ror 27",
            "ldr r5, [0x00056adc]",
            "eor sl, r2, r1",
            "add r5, r8, r5",
            "and sl, sl, ip",
            "eor sl, sl, r1",
            "add r4, r5, r4",
            "add r4, r4, sl",
            "add r4, r2, r4, ror 23",
            "ldr sb, [sp, 0x14]",
            "ldr r5, [0x00056ae0]",
            "eor sl, r4, r2",
            "add r5, sb, r5",
            "and sl, sl, r1",
            "eor sl, sl, r2",
            "add ip, r5, ip",
            "add ip, ip, sl",
            "add ip, r4, ip, ror 18",
            "ldr fp, [sp, 0x28]",
            "ldr r5, [0x00056ae4]",
            "eor sl, ip, r4",
            "add r5, fp, r5",
            "and sl, sl, r2",
            "eor sl, sl, r4",
            "add r1, r5, r1",
            "add r1, r1, sl",
            "add r1, ip, r1, ror 12",
            "ldr r5, [0x00056ae8]",
            "eor sl, r1, ip",
            "add r5, r6, r5",
            "and sl, sl, r4",
            "eor sl, sl, ip",
            "add r2, r5, r2",
            "add r2, r2, sl",
            "add r2, r1, r2, ror 27",
            "ldr sb, [sp, 0x10]",
            "ldr r5, [0x00056aec]",
            "eor sl, r2, r1",
            "add r5, sb, r5",
            "and sl, sl, ip",
            "eor sl, sl, r1",
            "add r4, r5, r4",
            "add r4, r4, sl",
            "add r4, r2, r4, ror 23",
            "ldr fp, [sp, 0x24]",
            "ldr r5, [0x00056af0]",
            "eor sl, r4, r2",
            "add r5, fp, r5",
            "and sl, sl, r1",
            "eor sl, sl, r2",
            "add ip, r5, ip",
            "add ip, ip, sl",
            "add ip, r4, ip, ror 18",
            "ldr sb, [sp, 0x38]",
            "ldr r5, [0x00056af4]",
            "eor sl, ip, r4",
            "add r5, sb, r5",
            "and sb, sl, r2",
            "eor sb, sb, r4",
            "ldr fp, [sp, 0x1c]",
            "add r1, r5, r1",
            "ldr r5, [0x00056af8]",
            "add r1, r1, sb",
            "add r1, ip, r1, ror 12",
            "add r5, fp, r5",
            "eor sl, r1, sl",
            "add r2, r5, r2",
            "ldr sb, [0x00056afc]",
            "ldr r5, [sp, 0x28]",
            "add r2, r2, sl",
            "add r2, r1, r2, ror 28",
            "eor sl, r1, ip",
            "add sb, r5, sb",
            "add r4, sb, r4",
            "eor r5, sl, r2",
            "ldr sb, [sp, 0x34]",
            "ldr sl, [0x00056b00]",
            "add r5, r4, r5",
            "add r5, r2, r5, ror 21",
            "add sl, sb, sl",
            "eor sb, r2, r1",
            "eor sb, sb, r5",
            "add ip, sl, ip",
            "ldr sl, [0x00056b04]",
            "add ip, ip, sb",
            "add r4, r5, ip, ror 16",
            "add sl, r8, sl",
            "eor ip, r5, r2",
            "add r1, sl, r1",
            "eor sl, ip, r4",
            "add r1, r1, sl",
            "ldr ip, [0x00056b08]",
            "ldr sl, [sp, 0xc]",
            "add r1, r4, r1, ror 9",
            "add ip, sl, ip",
            "eor sl, r4, r5",
            "eor sl, sl, r1",
            "ldr fp, [sp, 0x18]",
            "add r2, ip, r2",
            "ldr ip, [0x00056b0c]",
            "add r2, r2, sl",
            "add r2, r1, r2, ror 28",
            "eor sl, r1, r4",
            "add ip, fp, ip",
            "add ip, ip, r5",
            "eor r5, sl, r2",
            "add ip, ip, r5",
            "ldr sl, [0x00056b10]",
            "ldr r5, [sp, 0x24]",
            "add ip, r2, ip, ror 21",
            "add sl, r5, sl",
            "eor r5, r2, r1",
            "ldr sb, [sp, 0x30]",
            "add r4, sl, r4",
            "eor sl, r5, ip",
            "ldr r5, [0x00056b14]",
            "add r4, r4, sl",
            "add r4, ip, r4, ror 16",
            "add r5, sb, r5",
            "eor sl, ip, r2",
            "eor sl, sl, r4",
            "add r1, r5, r1",
            "ldr r5, [0x00056b18]",
            "add r1, r1, sl",
            "add r1, r4, r1, ror 9",
            "add r5, r6, r5",
            "eor sl, r4, ip",
            "eor sl, sl, r1",
            "add r2, r5, r2",
            "add r2, r2, sl",
            "ldr r5, [0x00056b1c]",
            "ldr sl, [sp, 8]",
            "add r2, r1, r2, ror 28",
            "add r5, sl, r5",
            "eor sl, r1, r4",
            "add ip, r5, ip",
            "ldr fp, [sp, 0x14]",
            "eor r5, sl, r2",
            "ldr sl, [0x00056b20]",
            "add r5, ip, r5",
            "add r5, r2, r5, ror 21",
            "add sl, fp, sl",
            "eor sb, r2, r1",
            "eor sb, sb, r5",
            "add r4, sl, r4",
            "add r4, r4, sb",
            "add ip, r5, r4, ror 16",
            "ldr sl, [0x00056b24]",
            "ldr r4, [sp, 0x20]",
            "ldr sb, [sp, 0x2c]",
            "add sl, r4, sl",
            "eor r4, r5, r2",
            "add r1, sl, r1",
            "eor sl, r4, ip",
            "ldr r4, [0x00056b28]",
            "add r1, r1, sl",
            "add r1, ip, r1, ror 9",
            "eor sl, ip, r5",
            "add r4, sb, r4",
            "add r2, r4, r2",
            "ldr fp, [sp, 0x38]",
            "eor r4, sl, r1",
            "ldr sl, [0x00056b2c]",
            "add r4, r2, r4",
            "add r4, r1, r4, ror 28",
            "add sl, fp, sl",
            "eor sb, r1, ip",
            "eor sb, sb, r4",
            "add r5, sl, r5",
            "ldr sl, [0x00056b30]",
            "add r5, r5, sb",
            "add r2, r4, r5, ror 21",
            "add sl, r7, sl",
            "eor r5, r4, r1",
            "ldr sb, [sp, 0x10]",
            "add ip, sl, ip",
            "eor sl, r5, r2",
            "ldr r5, [0x00056b34]",
            "add ip, ip, sl",
            "add ip, r2, ip, ror 16",
            "eor sl, r2, r4",
            "add r5, sb, r5",
            "add r1, r5, r1",
            "eor r5, sl, ip",
            "ldr fp, [sp, 8]",
            "add r5, r1, r5",
            "ldr sl, [0x00056b38]",
            "add r5, ip, r5, ror 9",
            "mvn sb, r2",
            "add sl, fp, sl",
            "orr sb, r5, sb",
            "add r4, sl, r4",
            "eor r1, sb, ip",
            "add r1, r4, r1",
            "ldr sb, [sp, 0x24]",
            "ldr sl, [0x00056b3c]",
            "add r1, r5, r1, ror 26",
            "mvn r4, ip",
            "add sl, sb, sl",
            "orr r4, r1, r4",
            "eor r4, r4, r5",
            "add r2, sl, r2",
            "add r2, r2, r4",
            "ldr r4, [0x00056b40]",
            "add r2, r1, r2, ror 22",
            "mvn sl, r5",
            "add r4, r8, r4",
            "orr sl, r2, sl",
            "add ip, r4, ip",
            "eor r4, sl, r1",
            "ldr fp, [sp, 0x1c]",
            "add r4, ip, r4",
            "ldr r8, [0x00056b44]",
            "add r4, r2, r4, ror 17",
            "mvn sl, r1",
            "add r8, fp, r8",
            "orr sl, r4, sl",
            "add r5, r8, r5",
            "eor ip, sl, r2",
            "ldr sb, [sp, 0x38]",
            "add ip, r5, ip",
            "ldr r8, [0x00056b48]",
            "add ip, r4, ip, ror 11",
            "mvn r5, r2",
            "add r8, sb, r8",
            "orr r5, ip, r5",
            "eor r5, r5, r4",
            "add r1, r8, r1",
            "ldr sl, [sp, 0x14]",
            "add r1, r1, r5",
            "ldr r5, [0x00056b4c]",
            "add r1, ip, r1, ror 26",
            "mvn r8, r4",
            "add r5, sl, r5",
            "orr r8, r1, r8",
            "eor r8, r8, ip",
            "add r2, r5, r2",
            "ldr fp, [sp, 0x30]",
            "add r2, r2, r8",
            "ldr r5, [0x00056b50]",
            "add r2, r1, r2, ror 22",
            "mvn r8, ip",
            "add r5, fp, r5",
            "orr r8, r2, r8",
            "eor r8, r8, r1",
            "add r4, r5, r4",
            "ldr sb, [sp, 0xc]",
            "add r4, r4, r8",
            "ldr r8, [0x00056b54]",
            "add r4, r2, r4, ror 17",
            "mvn r5, r1",
            "add r8, sb, r8",
            "orr r5, r4, r5",
            "eor r5, r5, r2",
            "add ip, r8, ip",
            "ldr sl, [sp, 0x28]",
            "add ip, ip, r5",
            "ldr r5, [0x00056b58]",
            "add ip, r4, ip, ror 11",
            "mvn r8, r2",
            "add r5, sl, r5",
            "orr r8, ip, r8",
            "eor r8, r8, r4",
            "add r1, r5, r1",
            "add r1, r1, r8",
            "ldr r8, [0x00056b5c]",
            "add r1, ip, r1, ror 26",
            "mvn r5, r4",
            "add r8, r7, r8",
            "orr r5, r1, r5",
            "eor r5, r5, ip",
            "add r2, r8, r2",
            "ldr fp, [sp, 0x20]",
            "add r2, r2, r5",
            "ldr r5, [0x00056b60]",
            "add r2, r1, r2, ror 22",
            "mvn r7, ip",
            "add r5, fp, r5",
            "orr r7, r2, r7",
            "eor r7, r7, r1",
            "add r4, r5, r4",
            "add r4, r4, r7",
            "ldr r7, [0x00056b64]",
            "add r4, r2, r4, ror 17",
            "mvn r5, r1",
            "add r7, r6, r7",
            "orr r5, r4, r5",
            "eor r5, r5, r2",
            "add ip, r7, ip",
            "add ip, ip, r5",
            "ldr r7, [sp, 0x18]",
            "ldr r5, [0x00056b68]",
            "add ip, r4, ip, ror 11",
            "mvn r6, r2",
            "add r5, r7, r5",
            "orr r6, ip, r6",
            "eor r6, r6, r4",
            "add r1, r5, r1",
            "add r1, r1, r6",
            "ldr r8, [sp, 0x34]",
            "ldr r6, [0x00056b6c]",
            "add r1, ip, r1, ror 26",
            "mvn r5, r4",
            "add r6, r8, r6",
            "orr r5, r1, r5",
            "eor r5, r5, ip",
            "add r2, r6, r2",
            "add r2, r2, r5",
            "ldr sb, [sp, 0x10]",
            "ldr r5, [0x00056b70]",
            "add r2, r1, r2, ror 22",
            "mvn r6, ip",
            "add r5, sb, r5",
            "orr r6, r2, r6",
            "eor r6, r6, r1",
            "add r4, r5, r4",
            "add r4, r4, r6",
            "ldr sl, [sp, 0x2c]",
            "ldr r6, [0x00056b74]",
            "add r4, r2, r4, ror 17",
            "mvn r5, r1",
            "orr r5, r4, r5",
            "add r6, sl, r6",
            "eor r5, r5, r2",
            "add ip, r6, ip",
            "add ip, ip, r5",
            "add r3, r4, r3",
            "ldr fp, [r0]",
            "add r3, r3, ip, ror 11",
            "ldr r5, [r0, 0xc]",
            "ldr ip, [r0, 8]",
            "add r1, r1, fp",
            "add r4, ip, r4",
            "add r2, r5, r2",
            "str r1, [r0]",
            "str r2, [r0, 0xc]",
            "stmib r0, {r3, r4}",
            "add sp, sp, 0x80",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Times_TaoCrypt::Integer_const__const": {
        "function_address": "0x000aa18c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r6, r1",
            "mov r5, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r6",
            "mov r2, r5",
            "bl rsym._ZN8TaoCrypt8MultiplyERNS_7IntegerERKS0_S3_",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt8MultiplyERNS_7IntegerERKS0_S3_": {
        "function_address": "0x00040750",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xac4]!"
        ]
    },
    "sym.getopt_ull_limit_value": {
        "function_address": "0x00057f88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r4, r2",
            "ldr r5, [r2, 0x30]",
            "ldr r2, [r2, 0x34]",
            "mov r6, r1",
            "ldr r8, [0x00058150]",
            "sub sp, sp, 0x21c",
            "cmp r6, r2",
            "add r8, pc, r8",
            "mov fp, r5",
            "mov ip, r2",
            "str r0, [sp, 0x14]",
            "mov sb, r3",
            "bhi 0x5807c",
            "beq 0x58074",
            "ldr r3, [r4, 0x18]",
            "ldr r2, [sp, 0x14]",
            "and r3, r3, 0x7f",
            "cmp r3, 4",
            "mov fp, r2",
            "mov ip, r6",
            "mov sl, 0",
            "beq 0x58098",
            "cmp r3, 6",
            "beq 0x5813c",
            "ldr r3, [r4, 0x40]",
            "cmp r3, 1",
            "ble 0x58038",
            "mov r1, r3",
            "asr r2, r1, 0x1f",
            "str r1, [sp, 8]",
            "str r2, [sp, 0xc]",
            "add r3, sp, 8",
            "ldm r3, {r2, r3}",
            "mov r0, fp",
            "mov r1, ip",
            "bl fcn.000bfd8c",
            "ldr r3, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mul r3, r0, r3",
            "umull fp, ip, r0, r2",
            "mla r1, r2, r1, r3",
            "add r1, r1, ip",
            "mov ip, r1",
            "ldr r5, [r4, 0x2c]",
            "ldr r7, [r4, 0x28]",
            "cmp r5, ip",
            "bhi 0x580b4",
            "beq 0x580ac",
            "mov r5, ip",
            "mov r7, fp",
            "cmp sb, 0",
            "strbne sl, [sb]",
            "beq 0x580dc",
            "mov r0, r7",
            "mov r1, r5",
            "add sp, sp, 0x21c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r0, r5",
            "bls 0x57fc4",
            "orrs r2, r5, r2",
            "movne sl, 1",
            "beq 0x57fc4",
            "ldr r3, [r4, 0x18]",
            "and r3, r3, 0x7f",
            "cmp r3, 4",
            "bne 0x57fe4",
            "cmp ip, 0",
            "movne sl, 1",
            "mvnne fp, 0",
            "movne ip, 0",
            "b 0x57fec",
            "cmp r7, fp",
            "bls 0x5804c",
            "cmp r5, r6",
            "bhi 0x580cc",
            "bne 0x58054",
            "ldr r3, [sp, 0x14]",
            "cmp r7, r3",
            "bls 0x58054",
            "mov sl, 1",
            "cmp sb, 0",
            "strbne sl, [sb]",
            "bne 0x58060",
            "cmp sl, 0",
            "beq 0x58060",
            "ldr r3, [0x00058154]",
            "mov r1, r6",
            "ldr r3, [r8, r3]",
            "add r2, sp, 0x118",
            "ldr r0, [sp, 0x14]",
            "ldr sl, [r4]",
            "ldr r4, [r3]",
            "bl rsym.ullstr",
            "mov r1, r5",
            "mov r6, r0",
            "add r2, sp, 0x18",
            "mov r0, r7",
            "bl rsym.ullstr",
            "ldr r1, [0x00058158]",
            "str r0, [sp]",
            "add r1, r8, r1",
            "mov r2, sl",
            "mov r3, r6",
            "mov r0, 1",
            "mov lr, pc",
            "bx r4",
            "b 0x58060",
            "cmp ip, 0",
            "movne sl, 1",
            "mvnne fp, 0",
            "movne ip, 0",
            "b 0x57fec"
        ]
    },
    "rsym.ullstr": {
        "function_address": "0x0003cb68",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2b4]!"
        ]
    },
    "sym.unsigned_char_mySTL::GetArrayMemory_unsigned_char__unsigned_int_": {
        "function_address": "0x000baba8",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_strntoull_ucs2": {
        "function_address": "0x0006a53c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x2c",
            "mov r5, r0",
            "ldr r0, [sp, 0x54]",
            "mov ip, 0",
            "str ip, [r0]",
            "mov sb, r3",
            "add sl, r1, r2",
            "mov r4, r1",
            "str ip, [sp, 0x14]",
            "add r8, sp, 0x24",
            "mov r2, r4",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a80c",
            "ldr r3, [sp, 0x24]",
            "sub r3, r3, 9",
            "cmp r3, 0x24",
            "addls pc, pc, r3, lsl 2",
            "b 0x6a64c",
            "b 0x6a644",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a644",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a64c",
            "b 0x6a644",
            "b 0x6a64c",
            "b 0x6a638",
            "ldr r2, [sp, 0x14]",
            "eor r2, r2, 1",
            "str r2, [sp, 0x14]",
            "add r4, r4, r0",
            "b 0x6a568",
            "mov r2, sb",
            "mov r3, 0",
            "mvn r0, 0",
            "mvn r1, 0",
            "bl fcn.000bfd8c",
            "mov r2, sb",
            "str r0, [sp, 0xc]",
            "mov fp, r1",
            "mvn r0, 0",
            "mvn r1, 0",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "str r2, [sp, 0x18]",
            "mov r2, sb",
            "asr r3, r2, 0x1f",
            "stm sp, {r2, r3}",
            "mov lr, 0",
            "str r4, [sp, 0x1c]",
            "mov r6, 0",
            "mov r7, 0",
            "str lr, [sp, 0x10]",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, r4",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a780",
            "ldr r2, [sp, 0x24]",
            "add r4, r4, r0",
            "sub r3, r2, 0x30",
            "cmp r3, 9",
            "bls 0x6a700",
            "sub r3, r2, 0x41",
            "cmp r3, 0x19",
            "subls r3, r2, 0x37",
            "strls r3, [sp, 0x24]",
            "bls 0x6a704",
            "sub r3, r2, 0x61",
            "cmp r3, 0x19",
            "bhi 0x6a784",
            "sub r3, r2, 0x57",
            "str r3, [sp, 0x24]",
            "cmp sb, r3",
            "ble 0x6a784",
            "cmp r7, fp",
            "bhi 0x6a724",
            "bne 0x6a730",
            "ldr ip, [sp, 0xc]",
            "cmp r6, ip",
            "bls 0x6a730",
            "mov lr, 1",
            "str lr, [sp, 0x10]",
            "b 0x6a6a0",
            "ldr r0, [sp, 0xc]",
            "cmp r6, r0",
            "beq 0x6a760",
            "ldr ip, [sp, 4]",
            "ldr lr, [sp]",
            "mul ip, r6, ip",
            "umull r1, r2, r6, lr",
            "mla r0, lr, r7, ip",
            "adds r6, r1, r3",
            "add r2, r0, r2",
            "adc r7, r2, 0",
            "b 0x6a6a0",
            "cmp r7, fp",
            "bne 0x6a73c",
            "ldr r2, [sp, 0x18]",
            "cmp r2, r3",
            "bhs 0x6a73c",
            "mov r3, 1",
            "str r3, [sp, 0x10]",
            "b 0x6a6a0",
            "beq 0x6a7e8",
            "ldr r3, [sp, 0x50]",
            "cmp r3, 0",
            "strne r4, [r3]",
            "ldr ip, [sp, 0x1c]",
            "cmp ip, r4",
            "beq 0x6a838",
            "ldr r2, [sp, 0x10]",
            "cmp r2, 0",
            "beq 0x6a7d0",
            "ldr ip, [sp, 0x54]",
            "mov r3, 0x22",
            "str r3, [ip]",
            "mvn r6, 0",
            "mvn r7, 0",
            "mov r1, r7",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [sp, 0x14]",
            "cmp r0, 0",
            "beq 0x6a7bc",
            "rsbs r6, r6, 0",
            "rsc r7, r7, 0",
            "b 0x6a7bc",
            "ldr r0, [sp, 0x50]",
            "mov r3, 0x54",
            "cmp r0, 0",
            "strne r4, [r0]",
            "ldr r2, [sp, 0x54]",
            "mov r6, 0",
            "str r3, [r2]",
            "mov r7, 0",
            "b 0x6a7bc",
            "ldr r3, [sp, 0x50]",
            "mov r6, 0",
            "cmp r3, 0",
            "strne r4, [r3]",
            "ldr ip, [sp, 0x54]",
            "cmp r0, 0",
            "moveq r0, 0x54",
            "movne r0, 0x21",
            "str r0, [ip]",
            "mov r7, 0",
            "b 0x6a7bc",
            "ldr r0, [sp, 0x54]",
            "mov r3, 0x21",
            "str r3, [r0]",
            "mov r6, 0",
            "mov r7, 0",
            "b 0x6a7bc"
        ]
    },
    "sym.TaoCrypt::HASHwithTransform::Update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x000a230c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r5, r2",
            "ldr r2, [0x000a247c]",
            "sub sp, sp, 0xc",
            "mov sl, r0",
            "ldr r3, [sl], 0x30",
            "str r2, [sp]",
            "mov r6, r0",
            "mov r7, r1",
            "ldr ip, [r3, 0x14]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [sp]",
            "cmp r5, 0",
            "add r3, pc, r3",
            "str r3, [sp]",
            "mov r8, r0",
            "beq 0xa23f4",
            "and r2, r8, 3",
            "ldr r0, [r6, 4]",
            "str r2, [sp, 4]",
            "lsr sb, r8, 2",
            "mov fp, 0",
            "b 0xa2374",
            "subs r5, r5, r4",
            "beq 0xa23f4",
            "rsb r4, r0, r8",
            "cmp r4, r5",
            "movhs r4, r5",
            "mov r1, r7",
            "add r0, sl, r0",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "ldr r0, [r6, 4]",
            "add r7, r7, r4",
            "add r0, r4, r0",
            "cmp r8, r0",
            "str r0, [r6, 4]",
            "bne 0xa236c",
            "ldr r3, [r6]",
            "mov r0, r6",
            "ldr ip, [r3, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0xa2400",
            "ldr r3, [r6]",
            "mov r0, r6",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r6",
            "mov r1, r8",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform9AddLengthEj",
            "subs r5, r5, r4",
            "str fp, [r6, 4]",
            "mov r0, fp",
            "bne 0xa2374",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "bne 0xa2454",
            "cmp sb, 0",
            "beq 0xa23c4",
            "ldr r3, [sp, 4]",
            "mov r0, r3",
            "ldr r2, [sl, r3]",
            "add r0, r0, 1",
            "bic r1, r2, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r1, r1, 8",
            "orr r2, r1, r2, lsl 8",
            "ror r2, r2, 0x10",
            "cmp sb, r0",
            "str r2, [sl, r3]",
            "add r3, r3, 4",
            "bhi 0xa241c",
            "b 0xa23c4",
            "ldr r2, [sp]",
            "ldr r3, [0x000a2480]",
            "ldr r1, [0x000a2484]",
            "ldr r0, [0x000a2488]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x104",
            "ldr r2, [0x000a248c]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL_set_session": {
        "function_address": "0x00085ed4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security10GetContextEv",
            "bl rsym._ZNK5yaSSL7SSL_CTX18GetSessionCacheOffEv",
            "cmp r0, 0",
            "movne r0, 0",
            "bne 0x85f08",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym._ZN5yaSSL3SSL11set_sessionEPNS_11SSL_SESSIONE",
            "mov r0, 1",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt.CRT_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000acc98",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x44",
            "mov r4, r1",
            "add r5, sp, 0x30",
            "mov r1, r3",
            "mov r7, r0",
            "add r6, sp, 0x20",
            "mov r8, r2",
            "mov r0, r5",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer5MinusERKS0_",
            "add sl, sp, 0x10",
            "ldr r1, [sp, 0x64]",
            "mov r2, r5",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "ldr r2, [sp, 0x60]",
            "mov r0, sl",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, r8",
            "mov r2, sl",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r0, r7",
            "mov r1, sp",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add r0, r6, 8",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r4, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r5, sp",
            "mov r0, r7",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::PKCS12_Decoder::PKCS12_Decoder__": {
        "function_address": "0x0009d760",
        "instructions": [
            "ldr ip, [0x0009d79c]",
            "ldr r3, [0x0009d7a0]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0009d7a4]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009d7a8]",
            "ldr r0, [0x0009d7ac]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mysql_server_init": {
        "function_address": "0x00045d6c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00045e9c]",
            "ldr r3, [0x00045ea0]",
            "add r4, pc, r4",
            "add r3, r4, r3",
            "ldrb r2, [r3, 1]",
            "cmp r2, 0",
            "bne 0x45dbc",
            "ldr r2, [0x00045ea4]",
            "mov r5, 1",
            "ldr r2, [r4, r2]",
            "strb r5, [r3, 1]",
            "ldrb r2, [r2]",
            "strb r2, [r3, 2]",
            "bl rsym.my_init",
            "cmp r0, 0",
            "movne r0, r5",
            "beq 0x45dc4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym.my_thread_init",
            "b 0x45db4",
            "ldr r5, [0x00045ea8]",
            "bl rsym.init_client_errs",
            "ldr r6, [r4, r5]",
            "ldr r3, [r6]",
            "cmp r3, 0",
            "beq 0x45e0c",
            "ldr r3, [0x00045eac]",
            "ldr r5, [r4, r3]",
            "ldr r3, [r5]",
            "cmp r3, 0",
            "beq 0x45e78",
            "mov r0, 0",
            "bl rsym.mysql_debug",
            "mov r0, 0xd",
            "mov r1, 1",
            "bl sym.imp.signal",
            "mov r0, 0",
            "b 0x45db4",
            "ldr r3, [0x00045eb0]",
            "ldr r0, [0x00045eb4]",
            "ldr r1, [0x00045eb8]",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "str r3, [r6]",
            "bl sym.imp.getservbyname",
            "cmp r0, 0",
            "beq 0x45e4c",
            "ldr r2, [r0, 8]",
            "lsl r2, r2, 0x10",
            "lsr r3, r2, 8",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "orr r3, r3, r2, lsr 24",
            "str r3, [r6]",
            "ldr r0, [0x00045ebc]",
            "add r0, r4, r0",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "beq 0x45ddc",
            "mov r1, 0",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "ldr r3, [r4, r5]",
            "str r0, [r3]",
            "b 0x45ddc",
            "ldr r3, [0x00045ec0]",
            "ldr r0, [0x00045ec4]",
            "add r3, r4, r3",
            "add r0, r4, r0",
            "str r3, [r5]",
            "bl sym.imp.getenv",
            "cmp r0, 0",
            "strne r0, [r5]",
            "b 0x45df0"
        ]
    },
    "rsym.my_init": {
        "function_address": "0x0003d6cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb1c]!"
        ]
    },
    "rsym.init_client_errs": {
        "function_address": "0x0003fd54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x16c]!"
        ]
    },
    "sym.imp.signal": {
        "function_address": "0x0003d240",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe24]!"
        ]
    },
    "sym.imp.getservbyname": {
        "function_address": "0x00040594",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbec]!"
        ]
    },
    "sym.yaSSL::RC4::decrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dc40",
        "instructions": [
            "ldr r0, [r0, 4]",
            "push {r4, lr}",
            "add r0, r0, 0x100",
            "add r0, r0, 2",
            "bl rsym._ZN8TaoCrypt4ARC47ProcessEPhPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_read": {
        "function_address": "0x00049498",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "mov r8, r3",
            "mov r5, r0",
            "mov sl, r1",
            "mov r6, r2",
            "bl sym.imp.__errno_location",
            "ands sb, r8, 0x200",
            "and fp, r8, 0x1a",
            "mov r7, r0",
            "and r8, r8, 6",
            "bne 0x4962c",
            "cmp fp, 0",
            "movne r4, sb",
            "bne 0x49540",
            "mov r4, sb",
            "str r4, [r7]",
            "mov r1, sl",
            "mov r2, r6",
            "mov r0, r5",
            "bl sym.imp.read",
            "cmp r6, r0",
            "mov fp, r0",
            "beq 0x495fc",
            "bl rsym._my_thread_var",
            "ldr r3, [r7]",
            "sub r2, fp, 1",
            "cmp r3, 0",
            "mvneq r3, 0",
            "cmn r2, 3",
            "str r3, [r0]",
            "bhi 0x4961c",
            "cmn fp, 1",
            "mov r4, fp",
            "beq 0x49598",
            "cmp r8, 0",
            "beq 0x49594",
            "mvn r4, 0",
            "b 0x49598",
            "ldr r3, [r7]",
            "cmp r3, 4",
            "bne 0x49580",
            "str r4, [r7]",
            "mov r1, sl",
            "mov r2, r6",
            "mov r0, r5",
            "bl sym.imp.read",
            "cmp r6, r0",
            "mov fp, r0",
            "beq 0x495fc",
            "bl rsym._my_thread_var",
            "ldr r3, [r7]",
            "sub r2, fp, 1",
            "cmp r3, 0",
            "mvneq r3, 0",
            "cmn r2, 3",
            "str r3, [r0]",
            "bhi 0x49534",
            "cmn fp, 1",
            "str r0, [sp]",
            "beq 0x495d4",
            "cmp r8, 0",
            "bne 0x495a8",
            "mov r4, fp",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym.my_filename",
            "ldr r1, [sp]",
            "mov r2, r0",
            "ldr r3, [r1]",
            "mov r0, 9",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mvn r4, 0",
            "b 0x49598",
            "mov r5, r6",
            "mov r0, r5",
            "bl rsym.my_filename",
            "ldr r1, [sp]",
            "mov r2, r0",
            "ldr r3, [r1]",
            "mov r0, 2",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mvn r4, 0",
            "b 0x49598",
            "mov ip, r6",
            "cmp r8, 0",
            "movne r4, 0",
            "bne 0x49598",
            "cmp sb, 0",
            "movne r4, r6",
            "moveq r4, ip",
            "b 0x49598",
            "ldr r3, [r7]",
            "cmp r3, 4",
            "bne 0x49518",
            "b 0x494d8",
            "mov ip, r6",
            "str sb, [sp, 4]",
            "mov sb, r6",
            "mov r6, r5",
            "mov r5, ip",
            "mov r2, 0",
            "str r2, [r7]",
            "mov r1, sl",
            "mov r2, r5",
            "mov r0, r6",
            "bl sym.imp.read",
            "cmp r0, r5",
            "mov r4, r0",
            "beq 0x496e8",
            "bl rsym._my_thread_var",
            "str r0, [sp]",
            "ldr r3, [r7]",
            "sub r2, r4, 1",
            "cmp r3, 0",
            "mvneq r3, 0",
            "cmn r2, 3",
            "str r3, [r0]",
            "bhi 0x496d8",
            "cmp fp, 0",
            "beq 0x496cc",
            "cmn r4, 1",
            "beq 0x495d0",
            "cmp r8, 0",
            "beq 0x496c0",
            "mov r0, r6",
            "bl rsym.my_filename",
            "ldr r1, [sp]",
            "mov r2, r0",
            "ldr r3, [r1]",
            "mov r0, 9",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "rsb r5, r4, r5",
            "add sl, sl, r4",
            "b 0x49640",
            "cmn r4, 1",
            "bne 0x496c0",
            "b 0x49598",
            "ldr r3, [r7]",
            "cmp r3, 4",
            "bne 0x49688",
            "b 0x49640",
            "mov r6, sb",
            "mov ip, r5",
            "ldr sb, [sp, 4]",
            "b 0x49600"
        ]
    },
    "sym.my_MD5Update": {
        "function_address": "0x00056d04",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r3, [r0, 0x10]",
            "mov r6, r2",
            "add r2, r3, r2, lsl 3",
            "cmp r3, r2",
            "str r2, [r0, 0x10]",
            "ldrhi r2, [r0, 0x14]",
            "ldrls r2, [r0, 0x14]",
            "addhi r2, r2, 1",
            "lsr r3, r3, 3",
            "strhi r2, [r0, 0x14]",
            "add r2, r2, r6, lsr 29",
            "ands r3, r3, 0x3f",
            "mov r7, r0",
            "mov r8, r1",
            "str r2, [r0, 0x14]",
            "addeq r5, r0, 0x18",
            "beq 0x56d80",
            "rsb r4, r3, 0x40",
            "cmp r6, r4",
            "add r3, r3, 0x18",
            "add r0, r0, r3",
            "blo 0x56dd0",
            "mov r2, r4",
            "add r5, r7, 0x18",
            "bl sym.imp.memcpy",
            "mov r0, r7",
            "mov r1, r5",
            "bl fcn.00055f68",
            "rsb r6, r4, r6",
            "add r8, r8, r4",
            "cmp r6, 0x3f",
            "bls 0x56dcc",
            "mov r4, 0",
            "add r1, r8, r4",
            "mov r2, 0x40",
            "mov r0, r5",
            "bl sym.imp.memcpy",
            "add r4, r4, 0x40",
            "mov r0, r7",
            "mov r1, r5",
            "bl fcn.00055f68",
            "rsb r3, r4, r6",
            "cmp r3, 0x3f",
            "bhi 0x56d8c",
            "sub r6, r6, 0x40",
            "bic r3, r6, 0x3f",
            "add r3, r3, 0x40",
            "add r8, r8, r3",
            "and r6, r6, 0x3f",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::MD5::MD5__": {
        "function_address": "0x000b052c",
        "instructions": [
            "ldr ip, [0x000b0568]",
            "ldr r3, [0x000b056c]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000b0570]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000b0574]",
            "ldr r0, [0x000b0578]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::Integer::Divide_unsigned_int__TaoCrypt::Integer__TaoCrypt::Integer_const__unsigned_int_": {
        "function_address": "0x000ac8cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr ip, [0x000acc40]",
            "sub sp, sp, 0x4c",
            "add ip, pc, ip",
            "subs fp, r3, 0",
            "str ip, [sp, 0x14]",
            "mov r8, r0",
            "mov sl, r1",
            "mov r7, r2",
            "beq 0xacbf4",
            "sub r4, fp, 1",
            "ands r6, r4, fp",
            "beq 0xacae8",
            "mov r0, r2",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "cmp r0, 8",
            "mov r4, r0",
            "bls 0xaca90",
            "cmp r0, 0x10",
            "subls r4, r0, 1",
            "movls sb, 0x40",
            "movls r6, 0x10",
            "bls 0xac968",
            "cmp r4, 0x20",
            "subls r4, r4, 1",
            "movls sb, 0x80",
            "movls r6, 0x20",
            "bls 0xac968",
            "cmp r4, 0x40",
            "subls r4, r4, 1",
            "movls sb, 0x100",
            "movls r6, 0x40",
            "bls 0xac968",
            "sub r4, r4, 1",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "mov r6, 1",
            "lsl r6, r6, r0",
            "lsl sb, r6, 2",
            "ldr r1, [sl, 4]",
            "ldr r2, [sl]",
            "mov r5, 0",
            "mov r3, r6",
            "add r0, sl, 8",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r6, [sl]",
            "str r0, [sl, 4]",
            "mov r2, sb",
            "mov r1, r5",
            "bl sym.imp.memset",
            "str r5, [r8]",
            "ldr r3, [sl]",
            "cmp r3, r4",
            "bls 0xacbcc",
            "ldr r3, [r7]",
            "ldr r2, [sl, 4]",
            "cmp r3, r4",
            "str r2, [sp, 0x10]",
            "bls 0xacba4",
            "lsl r6, r4, 2",
            "add r2, r2, r6",
            "sub r5, r4, 0xc0000001",
            "str r2, [sp, 0xc]",
            "ldr sb, [r7, 4]",
            "lsl r5, r5, 2",
            "mov r2, 0",
            "b 0xaca0c",
            "ldr r3, [sl]",
            "sub r4, r4, 1",
            "cmp r4, r3",
            "bhs 0xacbcc",
            "ldr r3, [r7]",
            "cmp r4, r3",
            "bhs 0xacba4",
            "ldr r3, [sp, 0x10]",
            "mov r6, r5",
            "add r3, r3, r5",
            "str r3, [sp, 0xc]",
            "sub r5, r5, 4",
            "ldr r3, [sb, r6]",
            "str r2, [sp, 0x44]",
            "str r3, [sp, 0x40]",
            "add r1, sp, 0x40",
            "ldm r1, {r0, r1}",
            "mov r3, 0",
            "mov r2, fp",
            "bl fcn.000bfd8c",
            "ldr r3, [sp, 0xc]",
            "str r0, [r3]",
            "ldr r3, [r7]",
            "cmp r3, r4",
            "bls 0xacba4",
            "ldr r2, [sb, r6]",
            "ldr r3, [r8]",
            "str r2, [sp, 0x38]",
            "str r3, [sp, 0x3c]",
            "add r1, sp, 0x38",
            "ldm r1, {r0, r1}",
            "mov r2, fp",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "cmp r4, 0",
            "str r2, [r8]",
            "bne 0xac9dc",
            "ldr r3, [r7, 0xc]",
            "cmp r3, 1",
            "movne r3, 0",
            "strne r3, [sl, 0xc]",
            "beq 0xacb7c",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x000acc44]",
            "mov r6, 0",
            "add r3, ip, r3",
            "add r3, r3, r0, lsl 2",
            "ldr r5, [r3, 0x5ec]",
            "ldr r1, [sl, 4]",
            "ldr r2, [sl]",
            "mov r3, r5",
            "add r0, sl, 8",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [sl]",
            "str r0, [sl, 4]",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "bl sym.imp.memset",
            "cmp r4, r6",
            "str r6, [r8]",
            "sub r4, r4, 1",
            "bne 0xac99c",
            "b 0xaca70",
            "mov r0, fp",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "add r5, sp, 0x18",
            "mov sb, r0",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "sub r1, sb, 1",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "add r5, sp, 0x28",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr sb, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, r6",
            "lsl r2, r2, 2",
            "mov r0, sb",
            "bl sym.imp.memset",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, r5",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r0, r5, 8",
            "ldr r1, [sp, 0x2c]",
            "ldr r2, [sp, 0x28]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "ldr r3, [r7]",
            "cmp r3, 0",
            "beq 0xacc18",
            "ldr r3, [r7, 4]",
            "ldr r3, [r3]",
            "and r4, r4, r3",
            "str r4, [r8]",
            "b 0xaca84",
            "ldr r2, [r8]",
            "str r3, [sl, 0xc]",
            "cmp r2, 0",
            "beq 0xaca84",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegermmEv",
            "ldr r3, [r8]",
            "rsb fp, r3, fp",
            "str fp, [r8]",
            "b 0xaca84",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x000acc44]",
            "ldr r1, [0x000acc48]",
            "ldr r0, [0x000acc4c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x000acc44]",
            "ldr r1, [0x000acc48]",
            "ldr r0, [0x000acc4c]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000acc44]",
            "ldr r1, [0x000acc50]",
            "ldr r0, [0x000acc54]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0xf50",
            "ldr r2, [0x000acc58]",
            "bl sym.imp.__assert_fail",
            "ldr r2, [sp, 0x14]",
            "ldr r3, [0x000acc44]",
            "ldr r1, [0x000acc48]",
            "ldr r0, [0x000acc4c]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::SSL_Decrypt_TaoCrypt::RSA_PublicKey_const__unsigned_char_const__unsigned_char_": {
        "function_address": "0x000b2ddc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x38",
            "mov r7, r1",
            "mov r8, r2",
            "mov r6, r0",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "add ip, r0, 6",
            "lsr ip, ip, 3",
            "cmp ip, 0",
            "str ip, [sp, 0x28]",
            "bne 0xb2f2c",
            "add r0, sp, 0x38",
            "ldr r5, [r0, -0x10]!",
            "mov r1, ip",
            "mov r3, r5",
            "mov r4, 0",
            "mov r2, r5",
            "add r0, r0, 8",
            "str ip, [sp, 0x2c]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r5",
            "mov r1, r4",
            "str r5, [sp, 0x28]",
            "str r0, [sp, 0x2c]",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "add r5, sp, 8",
            "mov r3, r4",
            "mov r2, r0",
            "mov r1, r7",
            "mov r0, r5",
            "add r7, sp, 0x18",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r2, r5",
            "mov r0, r7",
            "mov r1, r6",
            "bl rsym._ZNK8TaoCrypt13RSA_PublicKey13ApplyFunctionERKNS_7IntegerE",
            "ldr r5, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "ldr r2, [sp, 0x28]",
            "cmp r0, r2",
            "bhi 0xb2f40",
            "ldr r1, [sp, 0x2c]",
            "mov r3, 0",
            "mov r0, r7",
            "bl rsym._ZNK8TaoCrypt7Integer6EncodeEPhjNS0_10SignednessE",
            "mov r0, r6",
            "ldr r4, [sp, 0x2c]",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "mov r3, r8",
            "sub r2, r0, 1",
            "mov r1, r4",
            "add r0, sp, 0x34",
            "bl rsym._ZNK8TaoCrypt14RSA_BlockType15UnPadEPKhjPh",
            "ldr r4, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x2c]",
            "mov r1, 0",
            "ldr r2, [sp, 0x28]",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x38",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, ip",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "b 0xb2e08",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r2, [sp, 0x28]",
            "b 0xb2eac"
        ]
    },
    "rsym._ZNK8TaoCrypt14RSA_BlockType15UnPadEPKhjPh": {
        "function_address": "0x0003cb74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x2ac]!"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::DSS::DSSImpl__yaSSL::DSS::DSSImpl_": {
        "function_address": "0x000814cc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r4, r0, 0",
            "beq 0x815f8",
            "ldr r5, [r4, 0x84]",
            "ldr r2, [r4, 0x80]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "add r5, r4, 0x40",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r5, 0x34]",
            "ldr r2, [r5, 0x30]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r5, 0x24]",
            "ldr r2, [r5, 0x20]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [r5, 0x14]",
            "ldr r2, [r5, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r5, 4]",
            "ldr r2, [r4, 0x40]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x34]",
            "ldr r2, [r4, 0x30]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x24]",
            "ldr r2, [r4, 0x20]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [r4, 0x14]",
            "ldr r2, [r4, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldm r4, {r2, r5}",
            "mov r0, r5",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::AES::AES__": {
        "function_address": "0x00098514",
        "instructions": [
            "ldr ip, [0x00098550]",
            "ldr r3, [0x00098554]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00098558]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x0009855c]",
            "ldr r0, [0x00098560]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_close": {
        "function_address": "0x00048ff0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r5, [0x000490f8]",
            "ldr r7, [0x000490fc]",
            "add r5, pc, r5",
            "mov r6, r0",
            "ldr r0, [r5, r7]",
            "mov sb, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "mov r0, r6",
            "bl sym.imp.close",
            "cmn r0, 1",
            "mov r4, r0",
            "bne 0x490c0",
            "bl sym.imp.__errno_location",
            "ldr sl, [r0]",
            "mov r8, r0",
            "cmp sl, 4",
            "beq 0x49010",
            "bl rsym._my_thread_var",
            "tst sb, 0x18",
            "str sl, [r0]",
            "bne 0x490d8",
            "ldr r3, [0x00049100]",
            "ldr r3, [r5, r3]",
            "ldr r3, [r3]",
            "cmp r6, r3",
            "bhs 0x4907c",
            "ldr r3, [0x00049104]",
            "lsl r8, r6, 3",
            "ldr sl, [r5, r3]",
            "ldr r3, [sl]",
            "add r2, r3, r8",
            "ldr r2, [r2, 4]",
            "cmp r2, 0",
            "bne 0x490a4",
            "ldr r3, [0x00049108]",
            "ldr r0, [r5, r7]",
            "ldr r3, [r5, r3]",
            "ldr r2, [r3]",
            "sub r2, r2, 1",
            "str r2, [r3]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r0, [r3, r6, lsl 3]",
            "bl rsym.my_no_flags_free",
            "ldr r3, [sl]",
            "add r8, r3, r8",
            "mov r3, 0",
            "str r3, [r8, 4]",
            "b 0x4907c",
            "cmp r0, 0",
            "beq 0x49048",
            "bl sym.imp.__errno_location",
            "mov r8, r0",
            "ldr sl, [r0]",
            "b 0x49038",
            "mov r0, r6",
            "bl rsym.my_filename",
            "ldr r3, [r8]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 4",
            "bl rsym.my_error",
            "b 0x49048"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::SSL_CTX__yaSSL::SSL_CTX_": {
        "function_address": "0x00089ff0",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "blne rsym._ZN5yaSSL7SSL_CTXD1Ev",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTXD1Ev": {
        "function_address": "0x000407c8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa74]!"
        ]
    },
    "sym.yaX509_NAME_get_entry": {
        "function_address": "0x00085538",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN5yaSSL9X509_NAME8GetEntryEi",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL9X509_NAME8GetEntryEi": {
        "function_address": "0x0003dbf4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x7ac]!"
        ]
    },
    "sym.my_wildcmp_mb": {
        "function_address": "0x0006052c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "ldr r5, [sp, 0x40]",
            "mov r6, r3",
            "cmp r3, r5",
            "mov r4, r0",
            "mov r8, r1",
            "mov sb, r2",
            "ldr fp, [sp, 0x48]",
            "beq 0x60758",
            "ldrb r3, [r3]",
            "mvn sl, 0",
            "ldr ip, [sp, 0x4c]",
            "cmp r3, ip",
            "beq 0x605ec",
            "cmp r3, fp",
            "beq 0x606f8",
            "ldr r2, [sp, 0x44]",
            "cmp r3, r2",
            "beq 0x60660",
            "mov r7, r6",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r5",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x60670",
            "add sl, r8, r6",
            "cmp sl, sb",
            "bhi 0x6072c",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r6",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x6072c",
            "add r6, r7, r6",
            "cmp r6, r5",
            "beq 0x606a4",
            "ldrb r3, [r6]",
            "ldr ip, [sp, 0x4c]",
            "mov r8, sl",
            "cmp r3, ip",
            "mov sl, 1",
            "bne 0x60568",
            "cmp ip, fp",
            "beq 0x606f8",
            "add r6, r6, 1",
            "cmp r5, r6",
            "beq 0x60658",
            "ldr sl, [sp, 0x4c]",
            "ldrb r7, [r6]",
            "mov r1, r8",
            "cmp r7, sl",
            "mov r2, sb",
            "mov r0, r4",
            "beq 0x6064c",
            "cmp fp, r7",
            "bne 0x60784",
            "cmp r8, sb",
            "beq 0x608a4",
            "ldr r3, [r4, 0x64]",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x60764",
            "add r8, r8, r0",
            "add r6, r6, 1",
            "cmp r5, r6",
            "bne 0x60604",
            "mov sl, 0",
            "b 0x606ac",
            "add r7, r6, 1",
            "cmp r7, r5",
            "bne 0x60580",
            "b 0x6057c",
            "cmp r8, sb",
            "beq 0x6072c",
            "ldr r3, [r4, 0x2c]",
            "ldrb r2, [r7]",
            "ldrb r1, [r8]",
            "ldrb r2, [r3, r2]",
            "ldrb r3, [r3, r1]",
            "cmp r2, r3",
            "bne 0x6072c",
            "add r6, r7, 1",
            "cmp r6, r5",
            "add sl, r8, 1",
            "bne 0x605d4",
            "subs sl, sl, sb",
            "movne sl, 1",
            "mov r0, sl",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, r8",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "add r3, r6, 1",
            "cmp r5, r3",
            "add r8, r8, r0",
            "bls 0x60734",
            "ldrb r2, [r6, 1]",
            "mov r6, r3",
            "cmp fp, r2",
            "bne 0x60734",
            "cmp sb, r8",
            "beq 0x606ac",
            "mov r1, r8",
            "mov r2, sb",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "moveq r0, 1",
            "beq 0x606d8",
            "b 0x606bc",
            "mov sl, 1",
            "b 0x606ac",
            "cmp r3, r5",
            "mov r6, r3",
            "beq 0x60758",
            "ldrb r3, [r3]",
            "ldr ip, [sp, 0x4c]",
            "cmp r3, ip",
            "beq 0x605f4",
            "cmp r5, r6",
            "bne 0x6055c",
            "subs sl, r8, sb",
            "movne sl, 1",
            "b 0x606ac",
            "mov r1, r8",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "b 0x60648",
            "cmp r6, r5",
            "beq 0x60658",
            "cmp r8, sb",
            "beq 0x608a4",
            "ldr r2, [sp, 0x44]",
            "cmp r2, r7",
            "beq 0x60938",
            "mov sl, r6",
            "mov r1, sl",
            "mov r2, r5",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sp, 0x10]",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, sl",
            "mov r2, r5",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "addeq r0, r0, 1",
            "beq 0x60808",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, sl",
            "mov r2, r5",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 0x2c]",
            "add r0, sl, r0",
            "str r0, [sp, 0x14]",
            "ldrb r7, [r3, r7]",
            "mov r6, r5",
            "cmp r8, sb",
            "bhs 0x608a4",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "beq 0x608ac",
            "add r5, r8, r3",
            "cmp sb, r5",
            "blo 0x608e8",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r3",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x608e8",
            "ldr ip, [sp, 0x44]",
            "mov r0, r4",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x4c]",
            "mov r1, r5",
            "mov r2, sb",
            "ldr r3, [sp, 0x14]",
            "str r6, [sp]",
            "str fp, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl rsym.my_wildcmp_mb",
            "cmp r0, 0",
            "ble 0x6094c",
            "cmp r5, sb",
            "beq 0x608a4",
            "ldr r2, [sp, 0x14]",
            "ldr ip, [sp, 0x4c]",
            "ldrb r3, [r2]",
            "cmp r3, ip",
            "bne 0x60930",
            "mvn sl, 0",
            "b 0x606ac",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x608e8",
            "ldrb r3, [r8]",
            "ldr r2, [r4, 0x2c]",
            "ldrb r3, [r2, r3]",
            "cmp r3, r7",
            "addeq r5, r8, 1",
            "beq 0x60854",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "addeq r0, r0, 1",
            "beq 0x6092c",
            "ldr r3, [r4, 0x64]",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "add r5, r8, r0",
            "mov r8, r5",
            "b 0x6081c",
            "add sl, r6, 1",
            "cmp sl, r5",
            "ldrbne r7, [r6, 1]",
            "bne 0x607a4",
            "b 0x607a0",
            "mov sl, r0",
            "b 0x606ac"
        ]
    },
    "rsym.my_wildcmp_mb": {
        "function_address": "0x00040840",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa24]!"
        ]
    },
    "sym.my_wildcmp_unicode": {
        "function_address": "0x00067c98",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "ldr r5, [sp, 0x60]",
            "mov r4, r3",
            "ldr r3, [r0, 0x64]",
            "cmp r4, r5",
            "str r2, [sp, 0x24]",
            "mov r7, r0",
            "mov r6, r1",
            "ldr sl, [r3, 0x20]",
            "ldr sb, [sp, 0x70]",
            "beq 0x67fa8",
            "add r2, sp, 0x34",
            "add fp, sp, 0x30",
            "str r2, [sp, 0x28]",
            "mov r0, r7",
            "mov r1, fp",
            "mov r2, r4",
            "mov r3, r5",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "ldr r3, [sp, 0x30]",
            "ldr ip, [sp, 0x6c]",
            "cmp ip, r3",
            "beq 0x67e28",
            "ldr r2, [sp, 0x64]",
            "add r4, r4, r0",
            "cmp r4, r5",
            "movhs r8, 0",
            "movlo r8, 1",
            "cmp r3, r2",
            "movne r8, 0",
            "cmp r8, 0",
            "beq 0x67d50",
            "mov r0, r7",
            "mov r1, fp",
            "mov r2, r4",
            "mov r3, r5",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "add r4, r4, r0",
            "mov r8, 1",
            "mov r0, r7",
            "ldr r1, [sp, 0x28]",
            "mov r2, r6",
            "ldr r3, [sp, 0x24]",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "cmp r8, 0",
            "beq 0x67e00",
            "ldr r2, [sp, 0x30]",
            "cmp sb, 0",
            "mov r1, r2",
            "beq 0x67e1c",
            "ldr r3, [sp, 0x34]",
            "lsr ip, r3, 8",
            "and ip, ip, 0xff",
            "ldr ip, [sb, ip, lsl 2]",
            "cmp ip, 0",
            "andne r3, r3, 0xff",
            "addne r3, r3, r3, lsl 1",
            "addne r3, ip, r3, lsl 1",
            "lsr ip, r2, 8",
            "and ip, ip, 0xff",
            "ldr ip, [sb, ip, lsl 2]",
            "ldrhne r3, [r3, 4]",
            "cmp ip, 0",
            "andne r2, r2, 0xff",
            "addne r2, r2, r2, lsl 1",
            "str r3, [sp, 0x34]",
            "addne r2, ip, r2, lsl 1",
            "ldrhne r1, [r2, 4]",
            "str r1, [sp, 0x30]",
            "cmp r3, r1",
            "bne 0x67f78",
            "cmp r4, r5",
            "add r6, r6, r0",
            "bne 0x67cd4",
            "ldr sb, [sp, 0x24]",
            "subs r0, r6, sb",
            "movne r0, 1",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 0x30]",
            "ldr r3, [sp, 0x68]",
            "mov r1, r2",
            "cmp r3, r2",
            "beq 0x67ddc",
            "cmp sb, 0",
            "bne 0x67d88",
            "mov r1, r2",
            "ldr r3, [sp, 0x34]",
            "b 0x67dd4",
            "cmp r5, r4",
            "mov r8, r3",
            "beq 0x67fa0",
            "add ip, sp, 0x34",
            "str ip, [sp, 0x28]",
            "str sb, [sp, 0x2c]",
            "str r3, [sp, 0x1c]",
            "mov r2, r4",
            "mov r1, fp",
            "mov r3, r5",
            "mov r0, r7",
            "mov lr, pc",
            "bx sl",
            "subs r8, r0, 0",
            "mov r2, r6",
            "ldr r1, [sp, 0x28]",
            "ldr r3, [sp, 0x24]",
            "mov r0, r7",
            "ble 0x67f78",
            "ldr ip, [sp, 0x30]",
            "ldr sb, [sp, 0x1c]",
            "cmp sb, ip",
            "addeq r4, r4, r8",
            "beq 0x67f98",
            "ldr sb, [sp, 0x68]",
            "cmp ip, sb",
            "beq 0x67f80",
            "cmp r4, r5",
            "ldr sb, [sp, 0x2c]",
            "beq 0x67fa0",
            "ldr ip, [sp, 0x24]",
            "cmp r6, ip",
            "beq 0x68078",
            "mov r0, r7",
            "mov r1, fp",
            "mov r2, r4",
            "mov r3, r5",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "ldr r3, [sp, 0x30]",
            "ldr r2, [sp, 0x64]",
            "add r4, r4, r0",
            "cmp r2, r3",
            "beq 0x68048",
            "cmp sb, 0",
            "addne r8, sp, 0x34",
            "bne 0x67f58",
            "b 0x67ff8",
            "ldr r2, [sp, 0x34]",
            "ldr r3, [sp, 0x30]",
            "lsr r1, r2, 8",
            "and r1, r1, 0xff",
            "ldr r1, [sb, r1, lsl 2]",
            "and ip, r2, 0xff",
            "cmp r1, 0",
            "lsr fp, r3, 8",
            "addne ip, ip, ip, lsl 1",
            "addne r1, r1, ip, lsl 1",
            "and fp, fp, 0xff",
            "ldrhne r2, [r1, 4]",
            "ldr r1, [sb, fp, lsl 2]",
            "str r2, [sp, 0x34]",
            "cmp r1, 0",
            "andne r3, r3, 0xff",
            "addne r3, r3, r3, lsl 1",
            "addne r3, r1, r3, lsl 1",
            "ldrhne r3, [r3, 4]",
            "cmp r3, r2",
            "str r3, [sp, 0x30]",
            "beq 0x67fb4",
            "add r6, r6, r0",
            "ldr r2, [sp, 0x24]",
            "cmp r2, r6",
            "beq 0x68078",
            "mov r2, r6",
            "mov r1, r8",
            "ldr r3, [sp, 0x24]",
            "mov r0, r7",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "bgt 0x67ef0",
            "mov r0, 1",
            "b 0x67df4",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "add r4, r4, r8",
            "add r6, r6, r0",
            "cmp r5, r4",
            "bne 0x67e44",
            "mov r0, 0",
            "b 0x67df4",
            "subs r0, r1, r2",
            "movne r0, 1",
            "b 0x67df4",
            "ldr ip, [sp, 0x64]",
            "add r6, r6, r0",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x68]",
            "mov r0, r7",
            "str ip, [sp, 8]",
            "ldr ip, [sp, 0x6c]",
            "mov r1, r6",
            "ldr r2, [sp, 0x24]",
            "mov r3, r4",
            "str r5, [sp]",
            "str ip, [sp, 0xc]",
            "str sb, [sp, 0x10]",
            "bl rsym.my_wildcmp_unicode",
            "cmp r0, 0",
            "bgt 0x67f4c",
            "b 0x67df4",
            "add r8, sp, 0x34",
            "ldr fp, [sp, 0x24]",
            "b 0x68020",
            "ldr r3, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "cmp r2, r3",
            "addne r6, r6, r0",
            "beq 0x68080",
            "cmp fp, r6",
            "beq 0x68078",
            "mov r2, r6",
            "mov r1, r8",
            "mov r3, fp",
            "mov r0, r7",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "bgt 0x68004",
            "mov r0, 1",
            "b 0x67df4",
            "cmp r5, r4",
            "bls 0x67ee0",
            "mov r1, fp",
            "mov r0, r7",
            "mov r2, r4",
            "mov r3, r5",
            "mov lr, pc",
            "bx sl",
            "cmp r0, 0",
            "ble 0x67f78",
            "add r4, r4, r0",
            "b 0x67ee0",
            "mvn r0, 0",
            "b 0x67df4",
            "ldr ip, [sp, 0x64]",
            "add r6, r6, r0",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x68]",
            "mov r0, r7",
            "str ip, [sp, 8]",
            "ldr ip, [sp, 0x6c]",
            "mov r1, r6",
            "mov r2, fp",
            "mov r3, r4",
            "str r5, [sp]",
            "str ip, [sp, 0xc]",
            "str sb, [sp, 0x10]",
            "bl rsym.my_wildcmp_unicode",
            "cmp r0, 0",
            "bgt 0x68018",
            "b 0x67df4"
        ]
    },
    "rsym.my_wildcmp_unicode": {
        "function_address": "0x00040924",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x98c]!"
        ]
    },
    "sym.TaoCrypt::PublicKey::SetKey_unsigned_char_const_": {
        "function_address": "0x0009a274",
        "instructions": [
            "ldr r2, [r0, 4]",
            "push {r4, lr}",
            "ldr r0, [r0]",
            "bl sym.imp.memcpy",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.get_charset_name": {
        "function_address": "0x00051000",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00051064]",
            "mov r5, r0",
            "ldr r1, [0x00051068]",
            "ldr r0, [0x0005106c]",
            "add r4, pc, r4",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "bl sym.imp.pthread_once",
            "ldr r3, [0x00051070]",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3, r5, lsl 2]",
            "cmp r3, 0",
            "beq 0x51044",
            "ldr r2, [r3]",
            "cmp r2, r5",
            "beq 0x51054",
            "ldr r0, [0x00051074]",
            "add r0, r4, r0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, [r3, 0x14]",
            "cmp r0, 0",
            "bne 0x5104c",
            "b 0x51044"
        ]
    },
    "sym.yaSSL::Fortezza_Server::Fortezza_Server__": {
        "function_address": "0x00090c34",
        "instructions": [
            "ldr ip, [0x00090c70]",
            "ldr r3, [0x00090c74]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00090c78]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x00090c7c]",
            "ldr r0, [0x00090c80]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::BER_Decoder::GetSet__": {
        "function_address": "0x0009b4ac",
        "instructions": [
            "ldr r0, [r0, 4]",
            "ldr r2, [0x0009b530]",
            "ldr r3, [r0, 0x10]",
            "push {r4, lr}",
            "cmp r3, 0",
            "add r2, pc, r2",
            "beq 0x9b4d4",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [r0, 0xc]",
            "ldr ip, [r0]",
            "add r1, r3, 1",
            "cmp r3, ip",
            "str r1, [r0, 0xc]",
            "bhs 0x9b50c",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 0x31",
            "ldrne r3, [0x0009b534]",
            "strne r3, [r0, 0x10]",
            "bne 0x9b4c8",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [0x0009b538]",
            "ldr r1, [0x0009b53c]",
            "ldr r0, [0x0009b540]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0007db14": {
        "function_address": "0x0007db14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "str r5, [r4]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_fclose": {
        "function_address": "0x0004caac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r4, [0x0004cb98]",
            "ldr r5, [0x0004cb9c]",
            "add r4, pc, r4",
            "mov r7, r0",
            "ldr r0, [r4, r5]",
            "mov sl, r1",
            "bl rsym.my_pthread_fastmutex_lock",
            "mov r0, r7",
            "bl sym.imp.fileno",
            "mov r6, r0",
            "mov r0, r7",
            "bl sym.imp.fclose",
            "subs r7, r0, 0",
            "blt 0x4cb58",
            "ldr r3, [0x0004cba0]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "sub r2, r2, 1",
            "str r2, [r3]",
            "ldr r3, [0x0004cba4]",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3]",
            "cmp r6, r3",
            "bhs 0x4cb2c",
            "ldr r3, [0x0004cba8]",
            "ldr r3, [r4, r3]",
            "ldr r2, [r3]",
            "add r2, r2, r6, lsl 3",
            "ldr r1, [r2, 4]",
            "cmp r1, 0",
            "bne 0x4cb40",
            "ldr r0, [r4, r5]",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r7",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r1, 0",
            "str r1, [r2, 4]",
            "ldr r3, [r3]",
            "ldr r0, [r3, r6, lsl 3]",
            "bl rsym.my_no_flags_free",
            "b 0x4cb2c",
            "bl rsym._my_thread_var",
            "mov sb, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "tst sl, 0x18",
            "mov r8, r0",
            "str r3, [sb]",
            "beq 0x4cafc",
            "mov r0, r6",
            "bl rsym.my_filename",
            "ldr r3, [r8]",
            "mov r2, r0",
            "mov r1, 0x24",
            "mov r0, 4",
            "bl rsym.my_error",
            "b 0x4cafc"
        ]
    },
    "sym.yaSSL::SSL::verifyClientState_yaSSL::HandShakeType_": {
        "function_address": "0x00091d14",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x91da0",
            "sub r5, r5, 2",
            "cmp r5, 0x12",
            "addls pc, pc, r5, lsl 2",
            "b 0x91dc0",
            "b 0x91d88",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91e00",
            "b 0x91e1c",
            "b 0x91dcc",
            "b 0x91dcc",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91dc0",
            "b 0x91da8",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x91dc0",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "beq 0x91e38",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL11order_errorEv",
            "add r5, r4, 0x8e0",
            "add r5, r5, 0xc",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 2",
            "beq 0x91da0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 3",
            "bne 0x91dc0",
            "b 0x91da0",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "bne 0x91dc0",
            "b 0x91da0",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, 2",
            "bne 0x91dc0",
            "b 0x91da0",
            "add r0, r4, 0x68",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x91da0",
            "b 0x91dc0"
        ]
    },
    "rsym._ZNK5yaSSL6States9getClientEv": {
        "function_address": "0x0003dc30",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x784]!"
        ]
    },
    "sym.longlong10_to_str": {
        "function_address": "0x0005c388",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr sl, [0x0005c4b8]",
            "cmp r3, 0",
            "sub sp, sp, 0x48",
            "mov r5, r0",
            "mov r6, r1",
            "add sl, pc, sl",
            "mov r7, r2",
            "blt 0x5c488",
            "orrs r3, r5, r6",
            "beq 0x5c474",
            "mov r3, 0",
            "cmp r6, 0",
            "strb r3, [sp, 0x44]",
            "beq 0x5c4a4",
            "ldr sb, [0x0005c4bc]",
            "add r4, sp, 0x44",
            "ldr r8, [sl, sb]",
            "mov r0, r5",
            "mov r1, r6",
            "mov r3, 0",
            "mov r2, 0xa",
            "bl fcn.000bfd8c",
            "add r3, r0, r0, lsl 2",
            "sub r5, r5, r3, lsl 1",
            "ldrb r3, [r8, r5]",
            "cmp r1, 0",
            "mov r5, r0",
            "mov r6, r1",
            "strb r3, [r4, -1]!",
            "bne 0x5c3d0",
            "cmn r0, 0x80000001",
            "bhi 0x5c3d0",
            "ldr r0, [sl, sb]",
            "ldr r1, [0x0005c4c0]",
            "smull r3, r2, r1, r5",
            "asr r3, r5, 0x1f",
            "rsb r3, r3, r2, asr 2",
            "add r2, r3, r3, lsl 2",
            "sub r5, r5, r2, lsl 1",
            "and r5, r5, 0xff",
            "ldrb r2, [r0, r5]",
            "subs r5, r3, 0",
            "strb r2, [r4, -1]!",
            "bne 0x5c414",
            "cmp r2, 0",
            "strb r2, [r7, r5]",
            "add r0, r7, r5",
            "add r5, r5, 1",
            "beq 0x5c468",
            "ldrb r2, [r4, r5]",
            "add r0, r7, r5",
            "cmp r2, 0",
            "strb r2, [r7, r5]",
            "add r5, r5, 1",
            "bne 0x5c450",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "mov r0, r7",
            "mov r2, 0x30",
            "strb r2, [r0], 1",
            "strb r3, [r7, 1]",
            "b 0x5c468",
            "cmp r1, 0",
            "bge 0x5c3ac",
            "mov r3, 0x2d",
            "strb r3, [r7], 1",
            "rsbs r5, r5, 0",
            "rsc r6, r6, 0",
            "b 0x5c3ac",
            "cmn r5, 0x80000001",
            "bhi 0x5c3c4",
            "add r4, sp, 0x44",
            "ldr sb, [0x0005c4bc]",
            "b 0x5c40c"
        ]
    },
    "sym.yaSSL::InitHandShakeFactory_yaSSL::Factory_yaSSL::HandShakeBase__int__yaSSL::HandShakeBase_______": {
        "function_address": "0x0008fe48",
        "instructions": [
            "ldr r2, [r0, 8]",
            "ldr r3, [r0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "rsb r3, r3, r2",
            "ldr r5, [0x000905c0]",
            "asr r3, r3, 3",
            "cmp r3, 9",
            "mov r4, r0",
            "add r5, pc, r5",
            "bls 0x90008",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "beq 0x90068",
            "ldr r2, [0x000905c4]",
            "mov r1, 0",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x900f0",
            "ldr r1, [0x000905c8]",
            "ldr r2, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 1",
            "stm r3, {r0, r1}",
            "ldr r3, [r4, 8]",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x90174",
            "ldr r1, [0x000905cc]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 2",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x901fc",
            "ldr r1, [0x000905d0]",
            "ldr r2, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0xb",
            "stm r3, {r0, r1}",
            "ldr r3, [r4, 8]",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x90280",
            "ldr r1, [0x000905d4]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0xc",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x90308",
            "ldr r1, [0x000905d8]",
            "ldr r2, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0xd",
            "stm r3, {r0, r1}",
            "ldr r3, [r4, 8]",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x9038c",
            "ldr r1, [0x000905dc]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0xe",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x90414",
            "ldr r1, [0x000905e0]",
            "ldr r2, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0xf",
            "stm r3, {r0, r1}",
            "ldr r3, [r4, 8]",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x90498",
            "ldr r1, [0x000905e4]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 0x10",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r3, r2",
            "str r3, [r4, 4]",
            "beq 0x90520",
            "ldr r2, [0x000905e8]",
            "mov r1, 0x14",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldr r3, [r4, 4]",
            "add r3, r3, 8",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 0xa",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "asr r3, r3, 3",
            "cmp r3, 9",
            "bhi 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r7, [r4]",
            "add r3, r6, 0x50",
            "ldr r1, [r4, 4]",
            "stmib r4, {r0, r3}",
            "str r6, [r4]",
            "mov r0, r7",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r7",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r2, [r4, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "bne 0x8fe7c",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905c4]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8fea4",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905c8]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 1",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8fecc",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905cc]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8fef4",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905d0]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0xb",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8ff1c",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905d4]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0xc",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8ff44",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905d8]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0xd",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8ff6c",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905dc]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0xe",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8ff94",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905e0]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0xf",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8ffbc",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905e4]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x10",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r3, r2",
            "bne 0x8ffe4",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x9059c",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x000905e8]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 0x14",
            "str r2, [r3], 8",
            "ldr r5, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r5",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvT_S9_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEvPT_",
            "b 0x90000",
            "ldr r3, [0x000905ec]",
            "ldr r1, [0x000905f0]",
            "ldr r0, [0x000905f4]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x1f4",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEEEEPT_j": {
        "function_address": "0x0003fcb8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1d4]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13HandShakeBaseEvEEES8_EET0_T_SA_S9_": {
        "function_address": "0x0003dee8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x5b4]!"
        ]
    },
    "sym.TaoCrypt::DSA_PrivateKey::DSA_PrivateKey_TaoCrypt::Source_": {
        "function_address": "0x000a12d4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x10",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x20",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x30",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "add r0, r4, 0x40",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt14DSA_PrivateKey10InitializeERNS_6SourceE",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_commit": {
        "function_address": "0x00041f3c",
        "instructions": [
            "ldr r3, [0x00041f64]",
            "ldr r1, [0x00041f68]",
            "add r3, pc, r3",
            "push {r4, lr}",
            "add r1, r3, r1",
            "mov r2, 6",
            "bl rsym.mysql_real_query",
            "and r0, r0, 0xff",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::verifyState_yaSSL::HandShakeHeader_const_": {
        "function_address": "0x00093094",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x930b4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States12getHandShakeEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0x930f8",
            "add r0, r4, 0x68",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x93108",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL15HandShakeHeader17get_handshakeTypeEv",
            "mov r1, r0",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL17verifyServerStateENS_13HandShakeTypeE",
            "mov r0, r4",
            "mov r1, 0x6b",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL15HandShakeHeader17get_handshakeTypeEv",
            "mov r1, r0",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL17verifyClientStateENS_13HandShakeTypeE"
        ]
    },
    "rsym._ZNK5yaSSL15HandShakeHeader17get_handshakeTypeEv": {
        "function_address": "0x0003f7cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x51c]!"
        ]
    },
    "sym.TaoCrypt::RIPEMD160::RIPEMD160_TaoCrypt::RIPEMD160_const_": {
        "function_address": "0x000b0c64",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add ip, r5, 0x10",
            "add sl, r6, 0x10",
            "mov fp, ip",
            "ldm sl!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "stm fp!, {r0, r1, r2, r3}",
            "add r4, r6, 0x30",
            "mov ip, sb",
            "ldr r8, [0x000b0cf0]",
            "ldm r4!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b0cf4]",
            "stm ip!, {r0, r1, r2, r3}",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldr r0, [sl]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "str r0, [fp]",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::output_buffer::write_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007bcd0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r0]",
            "mov r4, r0",
            "sub r7, r7, 1",
            "mov r5, r2",
            "add r7, r7, r2",
            "mov r6, r1",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "mov r1, r7",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "ldr r3, [r4]",
            "ldr r0, [r4, 4]",
            "mov r2, r5",
            "add r0, r0, r3",
            "mov r1, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [r4]",
            "add r5, r3, r5",
            "str r5, [r4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::SHA::operator_TaoCrypt::SHA_const_": {
        "function_address": "0x000b3dec",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt3SHAC1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt3SHA4SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt3SHA4SwapERS0_": {
        "function_address": "0x0003e89c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf3c]!"
        ]
    },
    "sym.yaSSL::Socket::get_ready___const": {
        "function_address": "0x00084ea4",
        "instructions": [
            "str lr, [sp, -4]!",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "mov r3, 0",
            "str r3, [r2, -4]!",
            "ldr r1, [0x00084ed4]",
            "ldr r0, [r0]",
            "bl sym.imp.ioctl",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x0003e584",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x14c]!"
        ]
    },
    "sym.TaoCrypt::Integer::SquareRoot___const": {
        "function_address": "0x000ac0b8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r1, 0xc]",
            "ldr r6, [0x000ac2bc]",
            "sub sp, sp, 0x7c",
            "cmp r3, 1",
            "str r0, [sp, 4]",
            "mov fp, r1",
            "add r6, pc, r6",
            "beq 0xac274",
            "mov r0, r1",
            "bl rsym._ZNK8TaoCrypt7IntegerntEv",
            "cmp r0, 0",
            "bne 0xac274",
            "add r4, sp, 0x68",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, fp",
            "bl rsym._ZNK8TaoCrypt7Integer8BitCountEv",
            "add r5, sp, 0x58",
            "add r1, r0, 1",
            "lsr r1, r1, 1",
            "mov r0, r5",
            "add r7, sp, 0x48",
            "bl rsym._ZN8TaoCrypt7Integer6Power2Ej",
            "mov r2, r5",
            "mov r0, r7",
            "mov r1, r5",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "mov r0, r7",
            "mov r1, fp",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "blt 0xac294",
            "add r0, r7, 8",
            "ldr r1, [sp, 0x4c]",
            "ldr r2, [sp, 0x48]",
            "add r7, sp, 8",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r3, r7, 8",
            "add sl, sp, 0x38",
            "add r8, sp, 0x28",
            "add sb, sp, 0x18",
            "str r3, [sp]",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r0, sl",
            "mov r1, fp",
            "mov r2, r4",
            "bl rsym._ZNK8TaoCrypt7Integer9DividedByERKS0_",
            "mov r2, sl",
            "mov r0, r8",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer4PlusERKS0_",
            "mov r1, r8",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "mov r1, 1",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerrSEj",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r2, [sp, 8]",
            "ldr r0, [sp]",
            "ldr r1, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r1, sb",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r6, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x2c]",
            "ldr r2, [sp, 0x28]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r6, [sp, 0x3c]",
            "ldr r2, [sp, 0x38]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "mov r1, r4",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "cmp r0, 0",
            "blt 0xac164",
            "mov r1, r4",
            "ldr r0, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r5, 8",
            "ldr r1, [sp, 0x5c]",
            "ldr r2, [sp, 0x58]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 8",
            "ldr r1, [sp, 0x6c]",
            "ldr r2, [sp, 0x68]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "b 0xac284",
            "bl rsym._ZN8TaoCrypt7Integer4ZeroEv",
            "mov r1, r0",
            "ldr r0, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "ldr r0, [sp, 4]",
            "add sp, sp, 0x7c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000ac2c0]",
            "ldr r1, [0x000ac2c4]",
            "add r3, r6, r3",
            "ldr r0, [0x000ac2c8]",
            "add r3, r3, 0xee0",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000ac2cc]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "fcn.0009a30c": {
        "function_address": "0x0009a30c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r3",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt9PublicKeyC1EPKhj",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "mov r1, r6",
            "mov r2, r0",
            "mov r5, r0",
            "add r0, r4, 8",
            "bl sym.imp.memcpy",
            "add r5, r4, r5",
            "mov r3, 0",
            "strb r3, [r5, 8]",
            "ldr r1, [sp, 0x10]",
            "add r0, r4, 0x208",
            "mov r2, 0x14",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ServerDHParams::alloc_g_int_": {
        "function_address": "0x0008b0ec",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "str r1, [r0, 4]",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 0x10]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_fill_8bit": {
        "function_address": "0x0005ed70",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r1",
            "mov r1, r3",
            "bl sym.imp.memset",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000909b4": {
        "function_address": "0x000909b4",
        "instructions": [
            "ldr ip, [0x000909f0]",
            "ldr r3, [0x000909f4]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000909f8]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000909fc]",
            "ldr r0, [0x00090a00]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaX509_get_notAfter": {
        "function_address": "0x000855ac",
        "instructions": [
            "subs r3, r0, 0",
            "push {r4, lr}",
            "moveq r0, r3",
            "blne rsym._ZN5yaSSL4X5098GetAfterEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.vio_reset": {
        "function_address": "0x00079cd4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "ldr r5, [sp, 0x38]",
            "ldr r0, [r0, 0x54]",
            "mov sl, r3",
            "mov r6, r1",
            "mov r7, r2",
            "ldr r8, [0x00079ee4]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 0x9c",
            "bl sym.imp.memset",
            "tst r5, 2",
            "and r3, r5, 1",
            "stm r4, {r7, sl}",
            "strb r3, [r4, 8]",
            "str r6, [r4, 0x30]",
            "add r8, pc, r8",
            "bne 0x79e00",
            "cmp r6, 4",
            "beq 0x79e20",
            "ldr r3, [0x00079ee8]",
            "tst r5, 2",
            "ldr r2, [r8, r3]",
            "ldr r3, [0x00079eec]",
            "str r2, [r4, 0x60]",
            "ldr r3, [r8, r3]",
            "str r3, [r4, 0x64]",
            "bne 0x79df4",
            "ldr r3, [0x00079ef0]",
            "ldr r7, [r8, r3]",
            "ldr r3, [0x00079ef4]",
            "ldr sb, [0x00079ef8]",
            "ldr r6, [r8, r3]",
            "ldr r3, [0x00079efc]",
            "ldr sb, [r8, sb]",
            "ldr sl, [r8, r3]",
            "ldr r3, [0x00079f00]",
            "str sb, [sp, 4]",
            "ldr r5, [r8, r3]",
            "ldr r3, [0x00079f04]",
            "ldr sb, [0x00079f08]",
            "ldr ip, [r8, r3]",
            "ldr r3, [0x00079f0c]",
            "ldr fp, [r8, sb]",
            "ldr r0, [r8, r3]",
            "ldr r3, [0x00079f10]",
            "ldr sb, [0x00079f14]",
            "ldr r1, [r8, r3]",
            "ldr r3, [0x00079f18]",
            "str sl, [r4, 0x94]",
            "ldr r2, [r8, r3]",
            "ldr r3, [0x00079f1c]",
            "str r7, [r4, 0x68]",
            "ldr r3, [r8, r3]",
            "str r6, [r4, 0x6c]",
            "str r5, [r4, 0x7c]",
            "str ip, [r4, 0x78]",
            "str r0, [r4, 0x88]",
            "str r1, [r4, 0x8c]",
            "str r2, [r4, 0x90]",
            "str r3, [r4, 0x80]",
            "ldr r3, [sp, 4]",
            "ldr r8, [r8, sb]",
            "str r3, [r4, 0x84]",
            "str fp, [r4, 0x70]",
            "str r8, [r4, 0x74]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x00079f20]",
            "ldr r7, [r8, r3]",
            "b 0x79d58",
            "mov r0, 0x4000",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "cmp r0, 0",
            "biceq r5, r5, 2",
            "cmp r6, 4",
            "str r0, [r4, 0x54]",
            "bne 0x79d30",
            "ldr r3, [0x00079f24]",
            "ldr sb, [0x00079f28]",
            "ldr r7, [r8, r3]",
            "ldr r3, [0x00079efc]",
            "ldr sb, [r8, sb]",
            "ldr sl, [r8, r3]",
            "ldr r3, [0x00079eec]",
            "str sb, [sp, 4]",
            "ldr r6, [r8, r3]",
            "ldr r3, [0x00079f2c]",
            "ldr sb, [0x00079f1c]",
            "ldr r5, [r8, r3]",
            "ldr r3, [0x00079f30]",
            "ldr sb, [r8, sb]",
            "ldr ip, [r8, r3]",
            "ldr r3, [0x00079f00]",
            "str sb, [sp, 8]",
            "ldr r0, [r8, r3]",
            "ldr r3, [0x00079f04]",
            "ldr sb, [0x00079ef8]",
            "ldr r1, [r8, r3]",
            "ldr r3, [0x00079f0c]",
            "ldr sb, [r8, sb]",
            "ldr r2, [r8, r3]",
            "ldr r3, [0x00079f10]",
            "str sb, [sp, 0xc]",
            "ldr r3, [r8, r3]",
            "str sl, [r4, 0x94]",
            "str r7, [r4, 0x60]",
            "str r6, [r4, 0x64]",
            "str r5, [r4, 0x68]",
            "str ip, [r4, 0x6c]",
            "str r0, [r4, 0x7c]",
            "str r1, [r4, 0x78]",
            "str r2, [r4, 0x88]",
            "str r3, [r4, 0x8c]",
            "ldr r3, [sp, 4]",
            "ldr sb, [0x00079f34]",
            "str r3, [r4, 0x90]",
            "ldr r3, [sp, 8]",
            "ldr fp, [r8, sb]",
            "ldr sb, [0x00079f14]",
            "str r3, [r4, 0x80]",
            "ldr r3, [sp, 0xc]",
            "ldr r8, [r8, sb]",
            "str r3, [r4, 0x84]",
            "str fp, [r4, 0x70]",
            "str r8, [r4, 0x74]",
            "b 0x79de8"
        ]
    },
    "sym.yaTLSv1_client_method": {
        "function_address": "0x00086790",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 1",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 1",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_CTX_set_session_cache_mode": {
        "function_address": "0x00085f60",
        "instructions": [
            "cmp r1, 0x1e",
            "push {r4, lr}",
            "beq 0x85f88",
            "cmp r1, 0x22",
            "beq 0x85f80",
            "mov r0, 1",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5yaSSL7SSL_CTX23SetSessionCacheFlushOffEv",
            "b 0x85f74",
            "bl rsym._ZN5yaSSL7SSL_CTX18SetSessionCacheOffEv",
            "b 0x85f74"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX23SetSessionCacheFlushOffEv": {
        "function_address": "0x000402e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xdb4]!"
        ]
    },
    "rsym._ZN5yaSSL7SSL_CTX18SetSessionCacheOffEv": {
        "function_address": "0x0003cf88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xff4]!"
        ]
    },
    "sym.yaSSL::operator___yaSSL::input_buffer__yaSSL::CertificateRequest_": {
        "function_address": "0x0008c574",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r8, r1",
            "sub sp, sp, 8",
            "ldr r1, [0x0008c690]",
            "mov r6, r0",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "str r3, [r8, 0x24]",
            "beq 0x8c5cc",
            "mov r5, r8",
            "mov r4, 0",
            "mov r0, r6",
            "ldr r1, [0x0008c690]",
            "bl rsym._ZN5yaSSL12input_bufferixEj",
            "ldr r3, [r8, 0x24]",
            "ldrb r2, [r0]",
            "add r4, r4, 1",
            "cmp r3, r4",
            "str r2, [r5, 8]",
            "add r5, r5, 4",
            "bgt 0x8c5a4",
            "add r5, sp, 4",
            "mov r1, r5",
            "mov r2, 2",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "add r1, sp, 2",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh r3, [sp, 2]",
            "cmp r3, 0",
            "beq 0x8c680",
            "add r8, r8, 0x28",
            "mov r7, sp",
            "mov r2, 2",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "mov r0, r5",
            "mov r1, sp",
            "bl rsym._ZN5yaSSL5ato16EPKhRt",
            "ldrh r0, [sp]",
            "mov r1, 0",
            "add r0, r0, 2",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r4, r0",
            "mov r1, r4",
            "mov r0, r8",
            "bl rsym._ZN5mySTL4listIPhE9push_backES1_",
            "mov r1, r5",
            "mov r2, 2",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "ldrh r2, [sp]",
            "mov r0, r6",
            "add r1, r4, 2",
            "bl rsym._ZN5yaSSL12input_buffer4readEPhj",
            "ldrh r3, [sp, 2]",
            "ldrh r2, [sp]",
            "sub r3, r3, 2",
            "rsb r3, r2, r3",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "cmp r3, 0",
            "strh r3, [sp, 2]",
            "bne 0x8c600",
            "mov r0, r6",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5mySTL4listIPhE9push_backES1_": {
        "function_address": "0x0003d1f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe54]!"
        ]
    },
    "sym.TaoCrypt::EuclideanDomainOf::MultiplicativeInverse_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad41c",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer21MultiplicativeInverseEv",
            "mov r1, sp",
            "add r0, r5, 0x1c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt7Integer21MultiplicativeInverseEv": {
        "function_address": "0x0003f1b4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x92c]!"
        ]
    },
    "sym.vio_keepalive": {
        "function_address": "0x00079fa8",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r2, [r0, 0x30]",
            "mov r3, 0",
            "sub sp, sp, 0x14",
            "cmp r2, 3",
            "str r3, [sp, 0xc]",
            "moveq r0, r3",
            "beq 0x79ff0",
            "cmp r1, 0",
            "movne r3, 1",
            "strne r3, [sp, 0xc]",
            "ldr r0, [r0]",
            "mov ip, 4",
            "mov r1, 1",
            "mov r2, 9",
            "add r3, sp, 0xc",
            "str ip, [sp]",
            "bl sym.imp.setsockopt",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RecursiveSquare_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a7260",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r8, [0x000a740c]",
            "subs r5, r3, 0",
            "add r8, pc, r8",
            "sub sp, sp, 0x14",
            "mov r7, r1",
            "mov r6, r0",
            "mov sl, r2",
            "beq 0xa73c0",
            "tst r5, 1",
            "bne 0xa73c0",
            "cmp r5, 4",
            "beq 0xa73a0",
            "cmp r5, 2",
            "beq 0xa73b0",
            "lsr r4, r5, 1",
            "lsl fp, r5, 2",
            "lsl ip, r4, 2",
            "add sb, r7, fp",
            "add lr, sl, ip",
            "mov r1, sb",
            "mov r3, r4",
            "str lr, [sp, 0xc]",
            "str ip, [sp, 8]",
            "bl rsym._ZN8TaoCrypt15RecursiveSquareEPjS0_PKjj",
            "add r0, r6, fp",
            "mov r1, sb",
            "ldr r2, [sp, 0xc]",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt15RecursiveSquareEPjS0_PKjj",
            "ldr ip, [sp, 8]",
            "mov r2, sl",
            "add fp, r6, ip",
            "mov r1, sb",
            "ldr r3, [sp, 0xc]",
            "mov r0, r7",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "mov r1, fp",
            "mov r2, r7",
            "mov r3, r5",
            "mov r0, fp",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "mov r1, fp",
            "mov sl, r0",
            "mov r2, r7",
            "mov r0, fp",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r4, 0",
            "beq 0xa73e8",
            "add r5, r4, r5",
            "ldr r3, [r6, r5, lsl 2]",
            "add sl, sl, r0",
            "add sl, sl, r3",
            "cmp r3, sl",
            "str sl, [r6, r5, lsl 2]",
            "add r6, r6, r5, lsl 2",
            "bls 0xa7394",
            "cmp r4, 1",
            "beq 0xa7394",
            "ldr r3, [r6, 4]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r6, 4]",
            "moveq r3, 1",
            "beq 0xa7388",
            "b 0xa7394",
            "ldr r2, [r6, 8]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [r6, 8]",
            "add r6, r6, 4",
            "bne 0xa7394",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bhi 0xa7370",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, r2",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable7Square4EPjPKj",
            "mov r1, sl",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable7Square2EPjPKj",
            "ldr r3, [0x000a7410]",
            "ldr r1, [0x000a7414]",
            "add r3, r8, r3",
            "ldr r0, [0x000a7418]",
            "add r3, r3, 0x850",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a741c]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a7410]",
            "ldr r1, [0x000a7414]",
            "ldr r0, [0x000a7420]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x8c0",
            "mov r2, 0x1ec",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::BulkCipher::BulkCipher__": {
        "function_address": "0x00081214",
        "instructions": [
            "ldr ip, [0x00081254]",
            "ldr r3, [0x00081258]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x0008125c]",
            "add r2, r3, 8",
            "ldr r3, [0x00081260]",
            "str r2, [r0]",
            "ldr r0, [0x00081264]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.get_charsets_dir": {
        "function_address": "0x00051a2c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x00051b04]",
            "ldr r3, [0x00051b08]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "sub sp, sp, 0x10",
            "ldr r1, [r3]",
            "mov r4, r0",
            "cmp r1, 0",
            "beq 0x51a78",
            "ldr r2, [0x00051b0c]",
            "bl rsym.strmake",
            "mov r0, r4",
            "mov r1, r4",
            "mov r2, 0",
            "bl rsym.convert_dirname",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r7, [0x00051b10]",
            "add r6, r5, r7",
            "mov r0, r6",
            "bl rsym.test_if_hard_path",
            "cmp r0, 0",
            "bne 0x51aac",
            "ldr r8, [0x00051b14]",
            "mov r0, r6",
            "add r8, r5, r8",
            "mov r1, r8",
            "bl rsym.is_prefix",
            "subs ip, r0, 0",
            "beq 0x51ad4",
            "ldr r3, [0x00051b18]",
            "ldr r2, [0x00051b1c]",
            "mov ip, 0",
            "add r1, r5, r7",
            "add r3, r5, r3",
            "add r2, r5, r2",
            "mov r0, r4",
            "str ip, [sp]",
            "bl rsym.strxmov",
            "b 0x51a5c",
            "ldr lr, [0x00051b1c]",
            "ldr r3, [0x00051b18]",
            "add lr, r5, lr",
            "mov r1, r8",
            "add r5, r5, r3",
            "mov r2, lr",
            "mov r3, r6",
            "mov r0, r4",
            "stmib sp, {r5, ip}",
            "str lr, [sp]",
            "bl rsym.strxmov",
            "b 0x51a5c"
        ]
    },
    "method.TaoCrypt::DSA_PrivateKey.Initialize_TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a1258",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "ldr ip, [sp, 0x10]",
            "mov r4, r0",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERKNS_7IntegerES3_S3_S3_",
            "add r0, r4, 0x40",
            "ldr r1, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13DSA_PublicKey10InitializeERKNS_7IntegerES3_S3_S3_": {
        "function_address": "0x0003da8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x89c]!"
        ]
    },
    "sym.yaSSL::DH_Server::build_yaSSL::SSL_": {
        "function_address": "0x0008e850",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "sub sp, sp, 0xa4",
            "mov r0, r1",
            "mov r4, r1",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto6use_dhEv",
            "add r5, r6, 4",
            "add r2, sp, 0x94",
            "add r3, sp, 0x90",
            "add r1, sp, 0x98",
            "mov r7, r0",
            "bl rsym._ZNK5yaSSL13DiffieHellman9set_sizesERiS1_S1_",
            "ldr r1, [sp, 0x98]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL14ServerDHParams7alloc_pEi",
            "ldr r1, [sp, 0x94]",
            "mov sl, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL14ServerDHParams7alloc_gEi",
            "ldr r1, [sp, 0x90]",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL14ServerDHParams9alloc_pubEi",
            "mov r1, sl",
            "mov r3, r0",
            "mov r2, r8",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL13DiffieHellman9get_parmsEPhS1_S1_",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 0x20]",
            "cmp r3, 1",
            "beq 0x8e920",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 2",
            "beq 0x8e984",
            "mov r0, r4",
            "mov r1, 0x74",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r7, 0",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4AuthEEEvPT_",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager11get_keyTypeEv",
            "cmp r0, 1",
            "bne 0x8e8fc",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "mov sl, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv",
            "mov r1, 0",
            "mov r8, r0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, sl",
            "mov r7, r0",
            "mov r2, r8",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL3RSAC1EPKhjb",
            "cmp r7, 0",
            "moveq fp, r7",
            "beq 0x8e9cc",
            "mov r0, 0",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4AuthEEEvPT_",
            "mov fp, 0",
            "b 0x8e9cc",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager14get_privateKeyEv",
            "mov sl, r0",
            "mov r0, r7",
            "bl rsym._ZNK5yaSSL11CertManager20get_privateKeyLengthEv",
            "mov r1, 0",
            "mov r8, r0",
            "mov r0, 8",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, sl",
            "mov r7, r0",
            "mov r2, r8",
            "mov r3, 0",
            "bl rsym._ZN5yaSSL3DSSC1EPKhjb",
            "cmp r7, 0",
            "movne r0, 0",
            "blne rsym._ZN5yaSSL8ysDeleteINS_4AuthEEEvPT_",
            "mov fp, 6",
            "ldr r3, [r7]",
            "mov r0, r7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "add fp, fp, r0",
            "lsl fp, fp, 0x10",
            "lsrs fp, fp, 0x10",
            "beq 0x8eccc",
            "ldr r2, [sp, 0x98]",
            "ldr r3, [sp, 0x94]",
            "ldr r1, [sp, 0x90]",
            "add r3, r2, r3",
            "add r3, r3, 8",
            "lsl r2, fp, 0x10",
            "asr r2, r2, 0x10",
            "add r3, r3, r1",
            "add r3, r3, r2",
            "add r8, sp, 0x74",
            "mov r1, r3",
            "str r3, [r6, 0x20]",
            "add sl, sp, 0x9c",
            "mov r0, r8",
            "str r2, [sp, 0x18]",
            "bl rsym._ZN5yaSSL13output_bufferC1Ej",
            "ldrh r0, [sp, 0x98]",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, sl",
            "mov r0, r8",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL14ServerDHParams5get_pEv",
            "ldr r2, [sp, 0x98]",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "ldrh r0, [sp, 0x94]",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, sl",
            "mov r0, r8",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL14ServerDHParams5get_gEv",
            "ldr r2, [sp, 0x94]",
            "mov r1, r0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "ldrh r0, [sp, 0x90]",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r1, sl",
            "mov r0, r8",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL14ServerDHParams7get_pubEv",
            "add sb, sp, 0x88",
            "mov r1, r0",
            "ldr r2, [sp, 0x90]",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "add r5, sp, 0x80",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3MD5C1Ev",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SHAC1Ev",
            "mov r1, 0",
            "ldr r0, [sp, 0x18]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r6, 0x1c]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r3, r0, 0x34",
            "add r0, r0, 0x54",
            "mov r1, r3",
            "str r0, [sp, 0x14]",
            "mov r2, 0x20",
            "mov r0, sb",
            "str r3, [sp, 0xc]",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0x20",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "add r2, sp, 0x50",
            "mov r1, r0",
            "mov r0, r8",
            "str r2, [sp, 0x1c]",
            "str r1, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp, 0x10]",
            "mov r2, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3MD56updateEPKhj",
            "mov r0, sb",
            "ldr r1, [sp, 0x1c]",
            "bl rsym._ZN5yaSSL3MD510get_digestEPh",
            "ldr r3, [sp, 0xc]",
            "mov r0, r5",
            "mov r1, r3",
            "mov r2, 0x20",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "mov r2, 0x20",
            "ldr r1, [sp, 0x14]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "ldr r3, [sp, 0x1c]",
            "mov r1, r0",
            "add r3, r3, 0x10",
            "mov r0, r8",
            "str r3, [sp, 0x14]",
            "str r1, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "ldr r1, [sp, 0x10]",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SHA6updateEPKhj",
            "ldr r1, [sp, 0x14]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SHA10get_digestEPh",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0, 0x20]",
            "cmp r3, 1",
            "beq 0x8ecdc",
            "ldr r3, [r7]",
            "mov r0, r4",
            "ldr ip, [r3]",
            "ldr r4, [r6, 0x1c]",
            "str ip, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "ldr r2, [sp, 0x14]",
            "mov r1, r4",
            "str r0, [sp]",
            "mov r3, 0x14",
            "mov r0, r7",
            "add r4, sp, 0x20",
            "ldr ip, [sp, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r1, r4",
            "ldr r0, [r6, 0x1c]",
            "bl rsym._ZN8TaoCrypt19EncodeDSA_SignatureEPKhPh",
            "mov r1, r4",
            "ldr r0, [r6, 0x1c]",
            "mov r2, 0x2e",
            "bl sym.imp.memcpy",
            "mov r0, fp",
            "mov r1, sl",
            "bl rsym._ZN5yaSSL6c16toaEtPh",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, 2",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r0, r8",
            "ldr r2, [sp, 0x18]",
            "ldr r1, [r6, 0x1c]",
            "bl rsym._ZN5yaSSL13output_buffer5writeEPKhj",
            "mov r1, 0",
            "ldr r0, [r6, 0x20]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "mov r4, r0",
            "str r0, [r6, 0x24]",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r6, r0",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SHAD1Ev",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL3MD5D1Ev",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL13output_bufferD1Ev",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_4AuthEEEvPT_",
            "b 0x8e914",
            "mov r0, r4",
            "mov r1, 0x74",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x8e90c",
            "ldr r3, [r7]",
            "mov r0, r4",
            "ldr ip, [r3]",
            "ldr r4, [r6, 0x1c]",
            "str ip, [sp, 0x10]",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_randomEv",
            "mov r1, r4",
            "str r0, [sp]",
            "ldr r2, [sp, 0x1c]",
            "mov r0, r7",
            "mov r3, 0x24",
            "ldr ip, [sp, 0x10]",
            "mov lr, pc",
            "bx ip",
            "b 0x8ec44"
        ]
    },
    "rsym._ZNK5yaSSL13DiffieHellman9set_sizesERiS1_S1_": {
        "function_address": "0x00040648",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb74]!"
        ]
    },
    "rsym._ZNK5yaSSL13DiffieHellman9get_parmsEPhS1_S1_": {
        "function_address": "0x0003f73c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x57c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_4AuthEEEvPT_": {
        "function_address": "0x0003e680",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa4]!"
        ]
    },
    "sym.TaoCrypt::RecursiveInverseModPower2_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a8200",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x000a84a0]",
            "cmp r3, 2",
            "add r6, pc, r6",
            "sub sp, sp, 0xc",
            "mov r7, r0",
            "mov r4, r1",
            "mov r8, r2",
            "beq 0xa835c",
            "lsr r5, r3, 1",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt25RecursiveInverseModPower2EPjS0_PKjj",
            "mov r3, 1",
            "subs r1, r5, 1",
            "str r3, [r4]",
            "beq 0xa8258",
            "mov r0, 0",
            "str r0, [r4, r3, lsl 2]",
            "add r3, r3, 1",
            "sub r2, r3, 1",
            "cmp r1, r2",
            "bhi 0xa8244",
            "lsl sl, r5, 2",
            "add sb, r7, sl",
            "add fp, r4, sl",
            "mov r0, sb",
            "mov r1, fp",
            "mov r2, r4",
            "mov r3, r7",
            "str r8, [sp]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt20RecursiveMultiplyTopEPjS0_PKjS2_S2_j",
            "add r3, r8, sl",
            "mov r0, r4",
            "mov r1, fp",
            "mov r2, r7",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j",
            "mov r0, r4",
            "mov r1, sb",
            "mov r2, r4",
            "mov r3, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "cmp r5, 0",
            "beq 0xa8478",
            "ldr r2, [r4]",
            "sub r3, r2, 1",
            "cmp r2, r3",
            "str r3, [r4]",
            "bhs 0xa8314",
            "cmp r5, 1",
            "beq 0xa8314",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "sub r3, r3, 1",
            "str r3, [r4, 4]",
            "moveq r2, 1",
            "moveq r3, r4",
            "beq 0xa8308",
            "b 0xa8314",
            "ldr r1, [r3, 8]",
            "cmp r1, 0",
            "sub r1, r1, 1",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa8314",
            "add r2, r2, 1",
            "cmp r5, r2",
            "bhi 0xa82f0",
            "mov r3, 0",
            "mov r2, r3",
            "ldr r1, [r4, r3]",
            "add r2, r2, 1",
            "mvn r1, r1",
            "cmp r5, r2",
            "str r1, [r4, r3]",
            "add r3, r3, 4",
            "bhi 0xa831c",
            "mov r0, sb",
            "mov r1, fp",
            "mov r2, r7",
            "mov r3, r4",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt23RecursiveMultiplyBottomEPjS0_PKjS2_j",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r2]",
            "tst r3, 1",
            "beq 0xa8428",
            "and r0, r3, 7",
            "mul lr, r3, r0",
            "rsb lr, lr, 2",
            "mul ip, r0, lr",
            "mul lr, r3, ip",
            "rsb lr, lr, 2",
            "mul r0, ip, lr",
            "mul lr, r3, r0",
            "rsb lr, lr, 2",
            "mul ip, r0, lr",
            "mul lr, ip, r3",
            "rsb lr, lr, 2",
            "mul r0, ip, lr",
            "mul ip, r0, r3",
            "cmp ip, 1",
            "bne 0xa8450",
            "add r5, r1, 8",
            "mov r3, 0",
            "stm r1, {r0, r3}",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable15Multiply2BottomEPjPKjS3_",
            "ldr r3, [r4, 8]",
            "mov r0, r7",
            "sub r2, r3, 1",
            "cmp r3, r2",
            "ldrlo r1, [r4, 0xc]",
            "str r2, [r4, 8]",
            "sublo r1, r1, 1",
            "mvn r2, r2",
            "strlo r1, [r4, 0xc]",
            "str r2, [r4, 8]",
            "addhs r3, r4, 0xc",
            "addlo r3, r4, 0xc",
            "ldr r2, [r3]",
            "mvn r2, r2",
            "str r2, [r3]",
            "ldr r1, [r4, 8]",
            "add r2, r1, 2",
            "cmp r1, r2",
            "str r2, [r4, 8]",
            "ldrhi r2, [r3]",
            "mov r1, r4",
            "addhi r2, r2, 1",
            "strhi r2, [r3]",
            "mov r2, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._ZN8TaoCrypt8Portable15Multiply2BottomEPjPKjS3_",
            "ldr r3, [0x000a84a4]",
            "ldr r1, [0x000a84a8]",
            "add r3, r6, r3",
            "ldr r0, [0x000a84ac]",
            "add r3, r3, 0xc40",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a84b0]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a84a4]",
            "ldr r1, [0x000a84a8]",
            "add r3, r6, r3",
            "ldr r0, [0x000a84b4]",
            "add r3, r3, 0xc40",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 8",
            "ldr r2, [0x000a84b8]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x000a84a4]",
            "ldr r1, [0x000a84a8]",
            "add r3, r6, r3",
            "ldr r0, [0x000a84bc]",
            "add r3, r3, 0x6f0",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0xc",
            "ldr r2, [0x000a84c0]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable15Multiply2BottomEPjPKjS3_": {
        "function_address": "0x0003f79c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x53c]!"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Equal_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000acedc",
        "instructions": [
            "push {r4, lr}",
            "mov r0, r1",
            "mov r1, r2",
            "bl rsym._ZNK8TaoCrypt7Integer7CompareERKS0_",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007e510": {
        "function_address": "0x0007e510",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e56c]",
            "ldr r3, [0x0007e570]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_MD512HMAC_MD5ImplEEEvPT_",
            "ldr r3, [0x0007e574]",
            "ldr r1, [0x0007e578]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e57c]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e580]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::CertDecoder::CertDecoder__": {
        "function_address": "0x0009a190",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r5, [0x0009a1dc]",
            "ldr r3, [0x0009a1e0]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r4, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0x4c]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [0x0009a1e4]",
            "mov r0, r4",
            "ldr r3, [r5, r3]",
            "add r3, r3, 8",
            "str r3, [r4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::x509::x509_unsigned_int_": {
        "function_address": "0x0007c424",
        "instructions": [
            "push {r4, lr}",
            "str r1, [r0]",
            "mov r4, r0",
            "mov r0, r1",
            "mov r1, 0",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "str r0, [r4, 4]",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_rollback": {
        "function_address": "0x00041f0c",
        "instructions": [
            "ldr r3, [0x00041f34]",
            "ldr r1, [0x00041f38]",
            "add r3, pc, r3",
            "push {r4, lr}",
            "add r1, r3, r1",
            "mov r2, 8",
            "bl rsym.mysql_real_query",
            "and r0, r0, 0xff",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::SignatureLength___const": {
        "function_address": "0x000a1090",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZNK8TaoCrypt13DSA_PublicKey16GetSubGroupOrderEv",
            "bl rsym._ZNK8TaoCrypt7Integer9ByteCountEv",
            "lsl r0, r0, 1",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym._myrealloc": {
        "function_address": "0x0004bd10",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r4, [0x0004be80]",
            "sub sp, sp, 0xc",
            "subs r5, r0, 0",
            "add r4, pc, r4",
            "mov sl, r1",
            "mov r7, r2",
            "mov r6, r3",
            "ldr r8, [sp, 0x30]",
            "bne 0x4bd5c",
            "tst r8, 0x40",
            "beq 0x4bd5c",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, r8",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "b rsym._mymalloc",
            "ldr r3, [0x0004be84]",
            "ldr r3, [r4, r3]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0x4be0c",
            "ldr r0, [0x0004be88]",
            "mov r1, r5",
            "add r0, r4, r0",
            "mov r2, r7",
            "mov r3, r6",
            "bl fcn.0004b624",
            "subs sb, r0, 0",
            "movne r5, 0",
            "bne 0x4bdfc",
            "ldr r3, [0x0004be8c]",
            "ldr r1, [r5, -4]",
            "ldr r2, [0x0004be90]",
            "ldr r3, [r4, r3]",
            "cmp r1, r2",
            "ldr fp, [r3]",
            "bne 0x4be4c",
            "mov r0, sl",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r8",
            "bl rsym._mymalloc",
            "subs r4, r0, 0",
            "beq 0x4be1c",
            "rsb fp, fp, r5",
            "ldr r2, [fp, -0xc]",
            "mov r1, r5",
            "cmp sl, r2",
            "movlo r2, sl",
            "bl sym.imp.memcpy",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, sb",
            "bl rsym._myfree",
            "mov r5, r4",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r7",
            "mov r1, r6",
            "bl rsym._sanity",
            "b 0x4bd70",
            "ands r4, r8, 0x100",
            "bne 0x4bdfc",
            "ands r8, r8, 0x80",
            "moveq r5, r8",
            "beq 0x4bdfc",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r6",
            "mov r3, r4",
            "bl rsym._myfree",
            "mov r5, r4",
            "b 0x4bdfc",
            "ldr r3, [0x0004be94]",
            "ldr r2, [0x0004be98]",
            "ldr r5, [r4, r3]",
            "add r2, r4, r2",
            "ldr r0, [r5]",
            "mov r3, r6",
            "mov r1, 1",
            "str r7, [sp]",
            "bl sym.imp.__fprintf_chk",
            "ldr r0, [r5]",
            "mov r5, sb",
            "bl sym.imp.fflush",
            "b 0x4bdfc"
        ]
    },
    "rsym._myfree": {
        "function_address": "0x0003e2a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x334]!"
        ]
    },
    "sym.TaoCrypt::Integer::Gcd_TaoCrypt::Integer_const__TaoCrypt::Integer_const_": {
        "function_address": "0x000a95d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r5, [0x000a9690]",
            "ldr r3, [0x000a9694]",
            "ldr r7, [0x000a9698]",
            "add r5, pc, r5",
            "sub sp, sp, 0x34",
            "ldr r3, [r5, r3]",
            "ldr r7, [r5, r7]",
            "add r4, sp, 4",
            "mov r6, r0",
            "add r7, r7, 8",
            "add r3, r3, 8",
            "add r0, r4, 0xc",
            "mov sl, r1",
            "mov r8, r2",
            "str r3, [sp, 8]",
            "str r4, [sp, 0xc]",
            "str r7, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r3, [0x000a969c]",
            "add r0, r4, 0x1c",
            "ldr r3, [r5, r3]",
            "add r5, r3, 8",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r2, r8",
            "mov r1, sl",
            "mov r0, r4",
            "bl rsym._ZNK8TaoCrypt23AbstractEuclideanDomain3GcdERKNS_7IntegerES3_",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt7IntegerC1ERKS0_",
            "add r0, r4, 0x24",
            "ldr r1, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "str r5, [sp, 4]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "add r0, r4, 0x14",
            "ldr r1, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "str r7, [sp, 4]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r0, r6",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZNK8TaoCrypt23AbstractEuclideanDomain3GcdERKNS_7IntegerES3_": {
        "function_address": "0x0003e818",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf94]!"
        ]
    },
    "sym.yaSSL::DES_EDE::set_encryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007dca8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "mov r0, r4",
            "mov r2, 0x18",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt8DES_EDE36SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0x10",
            "mov r1, r5",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.str_to_time": {
        "function_address": "0x00079338",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "str r3, [sp, 0x14]",
            "mov r3, 0",
            "strb r3, [r2, 0x1c]",
            "add r5, r0, r1",
            "cmp r0, r5",
            "mov r4, r0",
            "ldr fp, [0x00079984]",
            "ldr r0, [sp, 0x14]",
            "mov sb, r2",
            "str r3, [r0]",
            "add fp, pc, fp",
            "beq 0x793bc",
            "ldr r2, [0x00079988]",
            "str r2, [sp, 0x10]",
            "ldr r2, [fp, r2]",
            "ldrb r3, [r4]",
            "ldr r0, [r2, 0x20]",
            "add r2, r0, r3",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "bne 0x793b0",
            "b 0x793cc",
            "ldrb r3, [r4]",
            "sub r1, r1, 1",
            "add r2, r0, r3",
            "ldrb r2, [r2, 1]",
            "tst r2, 8",
            "beq 0x793cc",
            "add r4, r4, 1",
            "cmp r5, r4",
            "bne 0x79398",
            "mov r0, 1",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r3, 0x2d",
            "beq 0x7968c",
            "cmp r1, 0xb",
            "bhi 0x79644",
            "ldr r7, [sp, 0x10]",
            "ldrb r1, [r4]",
            "ldr r3, [fp, r7]",
            "ldr ip, [r3, 0x20]",
            "add r3, ip, r1",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x79920",
            "mov r6, 0",
            "mov r7, 0",
            "mov r0, 0xa",
            "mov r2, r4",
            "b 0x79424",
            "ldrb r1, [r2]",
            "add r3, ip, r1",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x796c4",
            "umull r3, r4, r6, r0",
            "mla r4, r0, r7, r4",
            "sub r1, r1, 0x30",
            "adds r6, r3, r1",
            "add r2, r2, 1",
            "adc r7, r4, r1, asr 31",
            "cmp r5, r2",
            "bne 0x79410",
            "mov r4, r5",
            "mov r8, 0",
            "mov ip, 0",
            "ldr r2, [0x0007998c]",
            "mov r3, 0",
            "mov r0, r6",
            "mov r1, r7",
            "str ip, [sp, 0x20]",
            "bl fcn.000bfd8c",
            "mov r2, 0x64",
            "str r0, [sp, 0x24]",
            "mov r3, 0",
            "mov r0, r6",
            "mov r1, r7",
            "bl fcn.000bfd8c",
            "mov r2, 0x64",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "mov r0, r6",
            "str r2, [sp, 0x28]",
            "mov r1, r7",
            "mov r2, 0x64",
            "mov r3, 0",
            "bl fcn.000bfd8c",
            "mov sl, r4",
            "str r2, [sp, 0x2c]",
            "cmp r8, 1",
            "ble 0x794c0",
            "ldrb r3, [sl]",
            "cmp r3, 0x2e",
            "beq 0x79848",
            "mov r3, 0",
            "str r3, [sp, 0x30]",
            "cmp r8, 1",
            "ble 0x79514",
            "ldrb r3, [sl]",
            "cmp r3, 0x65",
            "cmpne r3, 0x45",
            "bne 0x79514",
            "ldr r0, [sp, 0x10]",
            "ldrb r3, [sl, 1]",
            "ldr r2, [fp, r0]",
            "ldr r2, [r2, 0x20]",
            "add r1, r2, r3",
            "ldrb r1, [r1, 1]",
            "tst r1, 4",
            "bne 0x793bc",
            "cmp r3, 0x2d",
            "cmpne r3, 0x2b",
            "bne 0x79514",
            "cmp r8, 2",
            "bne 0x79908",
            "ldr r3, [0x00079990]",
            "add r3, fp, r3",
            "ldrb r3, [r3, 7]",
            "cmp r3, 0xff",
            "beq 0x796b8",
            "cmp sl, r5",
            "beq 0x79574",
            "ldr r1, [sp, 0x10]",
            "ldrb r3, [sl]",
            "ldr r2, [fp, r1]",
            "ldr r2, [r2, 0x20]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x79568",
            "b 0x79574",
            "ldrb r3, [sl]",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x79574",
            "add sl, sl, 1",
            "cmp r5, sl",
            "bne 0x79554",
            "add r4, sl, 2",
            "cmp r5, r4",
            "blo 0x796b8",
            "ldrb r3, [sl, 1]",
            "cmp r3, 0x4d",
            "cmpne r3, 0x6d",
            "bne 0x796b8",
            "ldrb r3, [sl]",
            "cmp r3, 0x70",
            "cmpne r3, 0x50",
            "bne 0x796a8",
            "ldr r2, [sp, 0x24]",
            "ldr r1, [0x00079994]",
            "umull r7, r3, r1, r2",
            "lsr r3, r3, 3",
            "add r3, r3, r3, lsl 1",
            "sub r2, r2, r3, lsl 2",
            "add r2, r2, 0xc",
            "str r2, [sp, 0x24]",
            "ldr r0, [sp, 0x2c]",
            "ldr r1, [sp, 0x30]",
            "ldr lr, [sp, 0x20]",
            "ldr ip, [sp, 0x28]",
            "mov r3, 0",
            "str r2, [sb, 0xc]",
            "mov r2, 2",
            "str r0, [sb, 0x14]",
            "stmib sb, {r3, lr}",
            "str ip, [sb, 0x10]",
            "str r1, [sb, 0x18]",
            "str r2, [sb, 0x20]",
            "str r3, [sb]",
            "mov r0, sb",
            "ldr r1, [sp, 0x14]",
            "bl rsym.check_time_range",
            "cmp r0, 0",
            "bne 0x793bc",
            "cmp r4, r5",
            "beq 0x7963c",
            "ldr sb, [sp, 0x10]",
            "ldr r3, [fp, sb]",
            "ldr r2, [r3, 0x20]",
            "ldrb r3, [r4]",
            "add r4, r4, 1",
            "add r3, r2, r3",
            "ldrb r3, [r3, 1]",
            "ands r3, r3, 8",
            "beq 0x798e8",
            "cmp r4, r5",
            "bne 0x7961c",
            "mov r0, 0",
            "b 0x793c0",
            "add ip, sp, 0x34",
            "mov r0, r4",
            "mov r2, sb",
            "mov r3, 3",
            "str ip, [sp]",
            "bl rsym.str_to_datetime",
            "cmn r0, 1",
            "blt 0x793dc",
            "ldr r3, [sp, 0x34]",
            "cmp r3, 0",
            "ldrne sb, [sp, 0x14]",
            "ldrne r3, [sb]",
            "orrne r3, r3, 1",
            "strne r3, [sb]",
            "cmn r0, 1",
            "movne r0, 0",
            "moveq r0, 1",
            "b 0x793c0",
            "add r4, r4, 1",
            "mov r3, 1",
            "cmp r5, r4",
            "strb r3, [sb, 0x1c]",
            "beq 0x793bc",
            "sub r1, r1, 1",
            "b 0x793d4",
            "cmp r3, 0x61",
            "cmpne r3, 0x41",
            "ldreq r2, [sp, 0x24]",
            "beq 0x795c0",
            "ldr r2, [sp, 0x24]",
            "mov r4, sl",
            "b 0x795c0",
            "mov r4, r2",
            "tst r3, 8",
            "rsbeq r8, r4, r5",
            "beq 0x79724",
            "mov sl, r4",
            "b 0x796f0",
            "ldrb r3, [sl]",
            "add r3, ip, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "beq 0x79700",
            "add sl, sl, 1",
            "cmp r5, sl",
            "bne 0x796dc",
            "b 0x79444",
            "rsb r8, sl, r5",
            "cmp sl, r4",
            "cmpne r8, 1",
            "bls 0x79720",
            "tst r3, 4",
            "strne r6, [sp, 0x20]",
            "movne r0, 1",
            "bne 0x79760",
            "mov r4, sl",
            "cmp r8, 1",
            "ble 0x7944c",
            "ldrb r3, [r4]",
            "cmp r3, 0x3a",
            "bne 0x7944c",
            "ldrb r3, [r4, 1]",
            "add sl, r4, 1",
            "add r3, ip, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x7944c",
            "mov r3, 0",
            "str r3, [sp, 0x20]",
            "str r6, [sp, 0x24]",
            "mov r0, 2",
            "add r1, sp, 0x20",
            "str r1, [sp, 0x18]",
            "add r7, r1, r0, lsl 2",
            "mov r6, 0xa",
            "cmp sl, r5",
            "moveq r8, 0",
            "moveq r1, r8",
            "beq 0x797dc",
            "ldrb r8, [sl]",
            "add r3, ip, r8",
            "ldrb r1, [r3, 1]",
            "ands r1, r1, 4",
            "movne r1, 0",
            "movne r2, 0",
            "bne 0x797b4",
            "b 0x79824",
            "ldrb r8, [sl]",
            "add r3, ip, r8",
            "ldrb r3, [r3, 1]",
            "tst r3, 4",
            "beq 0x79824",
            "umull r3, r4, r1, r6",
            "mla r4, r6, r2, r4",
            "sub r8, r8, 0x30",
            "adds r1, r3, r8",
            "add sl, sl, 1",
            "adc r2, r4, r8, asr 31",
            "cmp r5, sl",
            "bne 0x797a0",
            "mov sl, r5",
            "mov r8, 0",
            "add r0, r0, 1",
            "cmp r0, 4",
            "str r1, [r7]",
            "beq 0x79900",
            "cmp r8, 1",
            "ble 0x7982c",
            "ldrb r3, [sl]",
            "cmp r3, 0x3a",
            "bne 0x7982c",
            "ldrb r3, [sl, 1]",
            "add r7, r7, 4",
            "add r3, ip, r3",
            "ldrb r3, [r3, 1]",
            "add r2, sl, 1",
            "tst r3, 4",
            "beq 0x7982c",
            "mov sl, r2",
            "b 0x79770",
            "rsb r8, sl, r5",
            "b 0x797dc",
            "ldr ip, [sp, 0x18]",
            "rsb r2, r0, 4",
            "lsl r2, r2, 2",
            "add r0, ip, r0, lsl 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "b 0x794ac",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [fp, r3]",
            "ldrb r3, [sl, 1]",
            "ldr r6, [r2, 0x20]",
            "add r2, sl, 1",
            "add r1, r6, r3",
            "ldrb r1, [r1, 1]",
            "tst r1, 4",
            "beq 0x794c0",
            "sub r3, r3, 0x30",
            "and r3, r3, 0xff",
            "mov r4, 0",
            "mov r0, 5",
            "mov r8, 0xa",
            "str sb, [sp, 0xc]",
            "add sl, r2, 1",
            "cmp sl, r5",
            "beq 0x79960",
            "ldrb r1, [r2, 1]",
            "mov r2, sl",
            "add ip, r6, r1",
            "ldrb ip, [ip, 1]",
            "sub r1, r1, 0x30",
            "tst ip, 4",
            "beq 0x7992c",
            "cmp r0, 0",
            "ble 0x798e0",
            "umull sb, sl, r3, r8",
            "mla ip, r8, r4, sl",
            "str sb, [sp, 0x18]",
            "str sl, [sp, 0x1c]",
            "and r3, r1, 0xff",
            "mov r4, 0",
            "str ip, [sp, 0x1c]",
            "add sl, sp, 0x18",
            "ldm sl, {sb, sl}",
            "adds r3, r3, sb",
            "adc r4, r4, sl",
            "sub r0, r0, 1",
            "b 0x79884",
            "ldr sl, [sp, 0x14]",
            "mov r0, r3",
            "ldr r2, [sl]",
            "orr r3, r2, 1",
            "str r3, [sl]",
            "b 0x793c0",
            "rsb r8, sl, r5",
            "b 0x794ac",
            "ldrb r3, [sl, 2]",
            "add r2, r2, r3",
            "ldrb r3, [r2, 1]",
            "tst r3, 4",
            "beq 0x79514",
            "b 0x793bc",
            "mov r6, 0",
            "mov r7, 0",
            "b 0x796c8",
            "ldr sb, [sp, 0xc]",
            "mov r1, r3",
            "mov r8, sl",
            "cmp r0, 0",
            "ble 0x79970",
            "ldr r2, [0x00079998]",
            "ldr r2, [fp, r2]",
            "ldr r6, [r2, r0, lsl 3]",
            "asr r7, r6, 0x1f",
            "umull r1, r2, r6, r3",
            "str r1, [sp, 0x30]",
            "rsb r8, r8, r5",
            "b 0x794c8",
            "ldr sb, [sp, 0xc]",
            "mov r1, r3",
            "mov r8, r5",
            "b 0x79938",
            "ldrne ip, [sp, 0x14]",
            "ldrne r3, [ip]",
            "orrne r3, r3, 1",
            "strne r3, [ip]",
            "b 0x79954"
        ]
    },
    "rsym.check_time_range": {
        "function_address": "0x0003fe8c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9c]!"
        ]
    },
    "rsym.str_to_datetime": {
        "function_address": "0x000406cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb1c]!"
        ]
    },
    "sym.yaSSL::InitClientKeyFactory_yaSSL::Factory_yaSSL::ClientKeyBase__int__yaSSL::ClientKeyBase_______": {
        "function_address": "0x0008f52c",
        "instructions": [
            "ldr r2, [r0, 8]",
            "ldr r3, [r0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "rsb r3, r3, r2",
            "ldr r5, [0x0008f7dc]",
            "asr r3, r3, 3",
            "cmp r3, 2",
            "mov r4, r0",
            "add r5, pc, r5",
            "bls 0x8f5d0",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "beq 0x8f630",
            "ldr r2, [0x0008f7e0]",
            "mov r1, 1",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldmib r4, {r2, r3}",
            "add r2, r2, 8",
            "cmp r3, r2",
            "str r2, [r4, 4]",
            "beq 0x8f6b4",
            "ldr r1, [0x0008f7e4]",
            "ldr r3, [r4, 4]",
            "ldr r1, [r5, r1]",
            "mov r0, 2",
            "stm r2, {r0, r1}",
            "ldr r2, [r4, 8]",
            "add r3, r3, 8",
            "cmp r2, r3",
            "str r3, [r4, 4]",
            "beq 0x8f73c",
            "ldr r2, [0x0008f7e8]",
            "mov r1, 3",
            "ldr r2, [r5, r2]",
            "stm r3, {r1, r2}",
            "ldr r3, [r4, 4]",
            "add r3, r3, 8",
            "str r3, [r4, 4]",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r0, 3",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "asr r3, r3, 3",
            "cmp r3, 2",
            "bhi 0x8f7b8",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r7, [r4]",
            "add r3, r6, 0x18",
            "ldr r1, [r4, 4]",
            "stmib r4, {r0, r3}",
            "str r6, [r4]",
            "mov r0, r7",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_",
            "mov r0, r7",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_",
            "ldr r2, [r4, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, r2",
            "bne 0x8f560",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8f7b8",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008f7e0]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 1",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_",
            "ldmib r4, {r2, r3}",
            "cmp r3, r2",
            "bne 0x8f584",
            "ldr r7, [r4]",
            "rsb r7, r7, r2",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8f7b8",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008f7e4]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 2",
            "str r2, [r3], 8",
            "ldr r8, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r8",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_",
            "mov r0, r8",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_",
            "ldr r3, [r4, 4]",
            "ldr r2, [r4, 8]",
            "cmp r2, r3",
            "bne 0x8f5ac",
            "ldr r7, [r4]",
            "rsb r7, r7, r3",
            "asr r7, r7, 3",
            "lsl r7, r7, 1",
            "add r7, r7, 1",
            "mov r0, r7",
            "bl rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEPT_j",
            "ldr r1, [r4, 4]",
            "mov r6, r0",
            "ldr r0, [r4]",
            "rsb r3, r0, r1",
            "cmp r7, r3, asr 3",
            "bls 0x8f7b8",
            "mov r2, r6",
            "bl rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEES8_EET0_T_SA_S9_",
            "ldr r2, [0x0008f7e8]",
            "mov r3, r0",
            "ldr r2, [r5, r2]",
            "add r7, r6, r7, lsl 3",
            "str r2, [r0, 4]",
            "mov r2, 3",
            "str r2, [r3], 8",
            "ldr r5, [r4]",
            "ldr r1, [r4, 4]",
            "mov r0, r5",
            "stmib r4, {r3, r7}",
            "str r6, [r4]",
            "bl rsym._ZN5mySTL7destroyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvT_S9_",
            "mov r0, r5",
            "bl rsym._ZN5mySTL15FreeArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEvPT_",
            "b 0x8f5c8",
            "ldr r3, [0x0008f7ec]",
            "ldr r1, [0x0008f7f0]",
            "ldr r0, [0x0008f7f4]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x9c",
            "mov r2, 0x90",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN5mySTL14GetArrayMemoryINS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEEEEPT_j": {
        "function_address": "0x00040108",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xef4]!"
        ]
    },
    "rsym._ZN5mySTL11uninit_copyIPNS_4pairIiPFPN5yaSSL13ClientKeyBaseEvEEES8_EET0_T_SA_S9_": {
        "function_address": "0x0003dce4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x70c]!"
        ]
    },
    "method.yaSSL::del_ptr_zero_mySTL::for_each_mySTL::list_yaSSL::BulkCipher_::iterator__yaSSL.del_ptr_zero__mySTL::list_yaSSL::BulkCipher_::iterator__mySTL::list_yaSSL::BulkCipher_::iterator__yaSSL::del_ptr_zero_": {
        "function_address": "0x00089b64",
        "instructions": [
            "cmp r1, r0",
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "beq 0x89b94",
            "mov r4, r0",
            "mov r6, 0",
            "ldr r0, [r4, 8]",
            "str r6, [r4, 8]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10BulkCipherEEEvPT_",
            "ldr r4, [r4, 4]",
            "cmp r4, r5",
            "bne 0x89b7c",
            "mov r0, 0",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendServerHelloDone_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x00084914",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "mov r8, r1",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "ldr r4, [0x00084a7c]",
            "subs r7, r0, 0",
            "add r4, pc, r4",
            "beq 0x84944",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r6, sp, 0x18",
            "mov r0, r6",
            "add sl, sp, 0x10",
            "bl rsym._ZN5yaSSL15ServerHelloDoneC1Ev",
            "add r0, sl, 4",
            "mov r1, 3",
            "mov r2, r7",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "ldr r3, [0x00084a80]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 4]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "mov r0, r6",
            "bl rsym._ZNK5yaSSL13HandShakeBase10get_lengthEv",
            "ldr r3, [sp, 0x18]",
            "mov fp, r0",
            "mov r0, r6",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "add sb, sp, 4",
            "mov r1, r0",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader8set_typeENS_13HandShakeTypeE",
            "mov r1, fp",
            "mov r0, sb",
            "bl rsym._ZN5yaSSL15HandShakeHeader10set_lengthEj",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "add r3, fp, 4",
            "lsl r3, r3, 0x10",
            "ldrb r2, [r0, 0x12e]",
            "ldrb lr, [r0, 0x12f]",
            "lsr r3, r3, 0x10",
            "add r1, r3, 5",
            "mov ip, 0x16",
            "mov r0, r4",
            "str ip, [sp, 0x10]",
            "strb r2, [sp, 0x14]",
            "strb lr, [sp, 0x15]",
            "strh r3, [sp, 0x16]",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sl",
            "mov r0, r4",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, sb",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_15HandShakeHeaderE",
            "mov r1, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_13HandShakeBaseE",
            "mov r0, r5",
            "mov r1, r4",
            "mov r2, r7",
            "bl fcn.00081648",
            "cmp r8, 0",
            "beq 0x84a68",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "b 0x84938",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r4, r8",
            "b 0x84a5c"
        ]
    },
    "sym.yaTLSv1_1_server_method": {
        "function_address": "0x00086748",
        "instructions": [
            "push {r4, lr}",
            "sub sp, sp, 8",
            "mov r2, 2",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 0",
            "mov r4, r0",
            "ldr r2, [sp, 4]",
            "mov r3, r1",
            "bl rsym._ZN5yaSSL10SSL_METHODC1ENS_13ConnectionEndENS_15ProtocolVersionEb",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_set_max_open_files": {
        "function_address": "0x00049350",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r6, r0",
            "mov r1, sp",
            "mov r0, 7",
            "bl sym.imp.getrlimit64",
            "ldr r7, [0x0004948c]",
            "cmp r0, 0",
            "mov r5, sp",
            "add r7, pc, r7",
            "bne 0x493e4",
            "ldr r4, [sp]",
            "ldr r3, [sp, 4]",
            "cmn r4, 1",
            "beq 0x4946c",
            "cmp r3, 0",
            "bne 0x493e8",
            "cmp r6, r4",
            "bls 0x493e8",
            "mov r0, 7",
            "mov r1, sp",
            "stmib sp, {r3, r6}",
            "str r3, [sp, 0xc]",
            "str r6, [sp]",
            "bl sym.imp.setrlimit64",
            "cmp r0, 0",
            "bne 0x493e8",
            "mov r3, 0",
            "mov r4, 0",
            "mov r1, sp",
            "mov r0, 7",
            "stm sp, {r3, r4}",
            "bl sym.imp.getrlimit64",
            "ldr r4, [sp]",
            "ldr r3, [sp, 4]",
            "orrs r3, r4, r3",
            "bne 0x493e8",
            "mov r4, r6",
            "cmp r4, 0x40",
            "bhi 0x49400",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "lsl r0, r4, 3",
            "mov r1, 0x10",
            "bl rsym.my_malloc",
            "subs r6, r0, 0",
            "moveq r4, 0x40",
            "beq 0x493f0",
            "ldr r3, [0x00049490]",
            "ldr r5, [r7, r3]",
            "ldr r3, [0x00049494]",
            "ldr r2, [r5]",
            "ldr r7, [r7, r3]",
            "cmp r4, r2",
            "movlo r2, r4",
            "ldr r1, [r7]",
            "lsl r2, r2, 3",
            "bl sym.imp.memcpy",
            "ldr r0, [r5]",
            "mov r1, 0",
            "rsb r2, r0, r4",
            "bic r2, r2, r2, asr 31",
            "lsl r2, r2, 3",
            "add r0, r6, r0, lsl 3",
            "bl sym.imp.memset",
            "bl rsym.my_free_open_file_info",
            "str r6, [r7]",
            "str r4, [r5]",
            "b 0x493f0",
            "cmn r3, 1",
            "streq r0, [sp, 4]",
            "streq r6, [sp]",
            "moveq r4, r6",
            "beq 0x493e8",
            "cmp r3, 0",
            "bne 0x493e8",
            "b 0x49394"
        ]
    },
    "sym.imp.getrlimit64": {
        "function_address": "0x0003e29c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x33c]!"
        ]
    },
    "sym.imp.setrlimit64": {
        "function_address": "0x00040510",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc44]!"
        ]
    },
    "rsym.my_free_open_file_info": {
        "function_address": "0x0003de34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x62c]!"
        ]
    },
    "sym.TaoCrypt::Integer::operator____const": {
        "function_address": "0x000a5030",
        "instructions": [
            "ldr r1, [r0, 0xc]",
            "ldr r2, [0x000a50a4]",
            "cmp r1, 1",
            "push {r4, lr}",
            "add r2, pc, r2",
            "beq 0xa5064",
            "ldr r1, [r0]",
            "cmp r1, 0",
            "beq 0xa5080",
            "ldr r3, [r0, 4]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xa5070",
            "mov r0, 0",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "rsbs r0, r0, 1",
            "movlo r0, 0",
            "b 0xa5068",
            "ldr r3, [0x000a50a8]",
            "ldr r1, [0x000a50ac]",
            "ldr r0, [0x000a50b0]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "method.TaoCrypt.RecursiveMultiplyTop_unsigned_int__unsigned_int__unsigned_int_const__unsigned_int_const__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a7848",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x24",
            "ldr r6, [sp, 0x4c]",
            "ldr ip, [0x000a7db0]",
            "cmp r6, 1",
            "add ip, pc, ip",
            "str ip, [sp, 0x14]",
            "mov r5, r0",
            "mov r7, r1",
            "str r2, [sp, 0x18]",
            "bls 0xa7d54",
            "tst r6, 1",
            "bne 0xa7d54",
            "cmp r6, 4",
            "beq 0xa7d0c",
            "cmp r6, 2",
            "beq 0xa7d30",
            "lsr r4, r6, 1",
            "lsl sl, r4, 2",
            "sub r8, r4, 0xc0000001",
            "lsl r8, r8, 2",
            "add sb, r3, sl",
            "add r1, r3, r8",
            "add r2, sb, r8",
            "mov r0, r4",
            "b 0xa78b8",
            "cmp r0, 0",
            "beq 0xa7cf0",
            "ldr lr, [r1]",
            "ldr ip, [r2]",
            "sub r0, r0, 1",
            "cmp lr, ip",
            "bhi 0xa7d00",
            "sub r1, r1, 4",
            "sub r2, r2, 4",
            "bhs 0xa78b0",
            "mvn r0, 2",
            "str r0, [sp, 0x10]",
            "ldr r2, [sp, 0x48]",
            "mov lr, r4",
            "add fp, r2, sl",
            "add ip, r2, r8",
            "add r0, fp, r8",
            "b 0xa7900",
            "cmp lr, 0",
            "beq 0xa7924",
            "ldr r1, [ip]",
            "ldr r2, [r0]",
            "sub lr, lr, 1",
            "cmp r1, r2",
            "bhi 0xa7cf8",
            "sub ip, ip, 4",
            "sub r0, r0, 4",
            "bhs 0xa78f8",
            "mvn lr, 0",
            "ldr ip, [sp, 0x10]",
            "add lr, lr, ip",
            "add lr, lr, 4",
            "cmp lr, 8",
            "addls pc, pc, lr, lsl 2",
            "b 0xa7ba0",
            "b 0xa7bd4",
            "b 0xa7ba0",
            "b 0xa7c50",
            "b 0xa7ba0",
            "b 0xa7ba0",
            "b 0xa7ba0",
            "b 0xa7cb8",
            "b 0xa7ba0",
            "b 0xa7960",
            "mov r2, r3",
            "add r3, r5, sl",
            "str r3, [sp, 0x1c]",
            "mov r1, sb",
            "mov r3, r4",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "add ip, r7, r6, lsl 2",
            "ldr r1, [sp, 0x48]",
            "mov r2, fp",
            "mov r3, r4",
            "ldr r0, [sp, 0x1c]",
            "str ip, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "add r0, r7, sl",
            "str r0, [sp, 0x10]",
            "ldr r1, [sp, 0xc]",
            "mov r0, r7",
            "mov r2, r5",
            "ldr r3, [sp, 0x1c]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr r0, [sp, 0x10]",
            "ldr r2, [sp, 0x1c]",
            "mov r1, r0",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mvn r2, 0",
            "ldr r0, [sp, 0xc]",
            "str r2, [sp, 0x1c]",
            "mov r2, sb",
            "mov r3, fp",
            "mov r1, r5",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr r2, [sp, 0x18]",
            "mov r3, r4",
            "add r1, r2, sl",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r2, r7",
            "mov r3, r4",
            "mov sb, r0",
            "mov r1, r5",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r2, [sp, 0xc]",
            "add r3, r2, r8",
            "add r8, r5, r8",
            "mov r2, r4",
            "b 0xa7a34",
            "cmp r2, 0",
            "beq 0xa7ce8",
            "ldr ip, [r8]",
            "ldr r1, [r3]",
            "sub r2, r2, 1",
            "cmp ip, r1",
            "bhi 0xa7ce8",
            "sub r8, r8, 4",
            "sub r3, r3, 4",
            "bhs 0xa7a2c",
            "mov r8, 1",
            "ldr r3, [r5]",
            "add r0, sb, r0",
            "add r0, r0, r3",
            "add r0, r0, r8",
            "cmp r3, r0",
            "str r0, [r5]",
            "bls 0xa7ce0",
            "cmp r4, 1",
            "beq 0xa7ac0",
            "ldr r3, [r5, 4]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [r5, 4]",
            "moveq r2, 1",
            "moveq r3, r5",
            "beq 0xa7ab4",
            "b 0xa7ce0",
            "ldr r1, [r3, 8]",
            "add r1, r1, 1",
            "cmp r1, 0",
            "str r1, [r3, 8]",
            "add r3, r3, 4",
            "bne 0xa7ce0",
            "add r2, r2, 1",
            "cmp r4, r2",
            "bhi 0xa7a9c",
            "mov fp, 1",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "mov r3, r4",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "add r6, r4, r6",
            "add r7, r7, r6, lsl 2",
            "mov sb, r0",
            "mov r2, r7",
            "mov r3, r4",
            "mov r0, r5",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "ldr r3, [sp, 0x1c]",
            "add r8, r8, r3",
            "add sb, r8, sb",
            "add sb, sb, r0",
            "add fp, sb, fp",
            "cmp fp, 2",
            "movls r3, 0",
            "addls sl, r5, sl",
            "movls r2, r3",
            "bhi 0xa7d84",
            "ldr r1, [r7, r3]",
            "add r2, r2, 1",
            "cmp r4, r2",
            "str r1, [sl, r3]",
            "add r3, r3, 4",
            "bhi 0xa7b20",
            "ldr r3, [r5, r4, lsl 2]",
            "add fp, fp, r3",
            "cmp r3, fp",
            "str fp, [r5, r4, lsl 2]",
            "bls 0xa7b94",
            "cmp r4, 1",
            "beq 0xa7b94",
            "ldr r3, [sl, 4]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "str r3, [sl, 4]",
            "moveq r3, 1",
            "beq 0xa7b88",
            "b 0xa7b94",
            "ldr r2, [sl, 8]",
            "add r2, r2, 1",
            "cmp r2, 0",
            "str r2, [sl, 8]",
            "add sl, sl, 4",
            "bne 0xa7b94",
            "add r3, r3, 1",
            "cmp r4, r3",
            "bhi 0xa7b70",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r3, 0",
            "mov r2, r3",
            "str r2, [r7, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp r6, r3",
            "bhi 0xa7ba8",
            "add ip, r7, r6, lsl 2",
            "add r3, r7, sl",
            "str r2, [sp, 0x1c]",
            "str r3, [sp, 0x10]",
            "str ip, [sp, 0xc]",
            "mov r0, ip",
            "b 0xa79d8",
            "add r0, r5, sl",
            "mov r2, r3",
            "mov r1, sb",
            "mov r3, r4",
            "str r0, [sp, 0x10]",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "add ip, r7, r6, lsl 2",
            "ldr r1, [sp, 0x48]",
            "mov r2, fp",
            "mov r3, r4",
            "ldr r0, [sp, 0x10]",
            "str ip, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r3, [sp, 0x10]",
            "add ip, r7, sl",
            "mov r0, r7",
            "ldr r1, [sp, 0xc]",
            "mov r2, r5",
            "str ip, [sp, 0x10]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "ldr r0, [sp, 0x10]",
            "mov r2, r5",
            "mov r1, r0",
            "mov r3, r4",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mvn r0, 0",
            "str r0, [sp, 0x1c]",
            "ldr r0, [sp, 0xc]",
            "b 0xa79d8",
            "mov r2, r3",
            "mov r1, sb",
            "add ip, r5, sl",
            "mov r3, r4",
            "mov r0, r5",
            "str ip, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r1, [sp, 0x48]",
            "mov r2, fp",
            "add ip, r7, r6, lsl 2",
            "mov r3, r4",
            "ldr r0, [sp, 0x10]",
            "str ip, [sp, 0xc]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "mov r0, r7",
            "mov r2, r5",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 0xc]",
            "str r4, [sp]",
            "bl rsym._ZN8TaoCrypt17RecursiveMultiplyEPjS0_PKjS2_j",
            "add r0, r7, sl",
            "mov r2, 0",
            "str r0, [sp, 0x10]",
            "str r2, [sp, 0x1c]",
            "ldr r0, [sp, 0xc]",
            "b 0xa79d8",
            "mov r1, r3",
            "mov r2, sb",
            "add ip, r5, sl",
            "mov r3, r4",
            "mov r0, r5",
            "str ip, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr r2, [sp, 0x48]",
            "mov r1, fp",
            "b 0xa7c74",
            "mov fp, 0",
            "b 0xa7ac4",
            "mov r8, 0",
            "b 0xa7a58",
            "str r0, [sp, 0x10]",
            "b 0xa78e0",
            "mov lr, 1",
            "b 0xa7924",
            "mov ip, 3",
            "str ip, [sp, 0x10]",
            "b 0xa78e0",
            "mov r1, r3",
            "ldr r2, [sp, 0x48]",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt8Portable9Multiply4EPjPKjS3_",
            "mov r0, r5",
            "add r1, r7, 0x10",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "b 0xa7b94",
            "mov r1, r3",
            "ldr r2, [sp, 0x48]",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt8Portable9Multiply2EPjPKjS3_",
            "mov r0, r5",
            "add r1, r7, 8",
            "mov r2, 8",
            "bl sym.imp.memcpy",
            "b 0xa7b94",
            "ldr r0, [sp, 0x14]",
            "ldr r3, [0x000a7db4]",
            "ldr r1, [0x000a7db8]",
            "add r3, r0, r3",
            "ldr r2, [sp, 0x14]",
            "add r1, r0, r1",
            "ldr r0, [0x000a7dbc]",
            "add r3, r3, 0x9a0",
            "add r0, r2, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a7dc0]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x14]",
            "ldr r3, [0x000a7db4]",
            "ldr r1, [0x000a7db8]",
            "add r3, ip, r3",
            "ldr r0, [0x000a7dc4]",
            "add r3, r3, 0x9a0",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a7dc8]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable9Multiply4EPjPKjS3_": {
        "function_address": "0x0003de4c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x61c]!"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable9Multiply2EPjPKjS3_": {
        "function_address": "0x0003d0cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xf1c]!"
        ]
    },
    "sym.TaoCrypt::MD2::Final_unsigned_char_": {
        "function_address": "0x000addd0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r2, [r0, 0x28]",
            "sub sp, sp, 0x10",
            "rsbs r2, r2, 0x10",
            "mov r5, r1",
            "mov r4, r0",
            "moveq r1, sp",
            "beq 0xade54",
            "lsr lr, r2, 2",
            "cmp lr, 0",
            "cmpne r2, 3",
            "lsl r0, lr, 2",
            "movhi r3, 0",
            "movls r3, 1",
            "and ip, r2, 0xff",
            "movls r0, 0",
            "movls r1, sp",
            "bls 0xade40",
            "orr r6, ip, ip, lsl 8",
            "orr r6, r6, ip, lsl 16",
            "orr r6, r6, ip, lsl 24",
            "mov r1, sp",
            "str r6, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "cmp lr, r3",
            "bhi 0xade28",
            "cmp r2, r0",
            "beq 0xade54",
            "add r3, r1, r0",
            "add r0, r0, 1",
            "cmp r2, r0",
            "strb ip, [r3], 1",
            "bhi 0xade44",
            "mov r1, sp",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4]",
            "ldr r1, [r4, 0x14]",
            "mov r0, r4",
            "mov r2, 0x10",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "ldr r3, [r4]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.find_typeset": {
        "function_address": "0x0004afa8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, fp, lr}",
            "ldr r3, [r1]",
            "sub sp, sp, 8",
            "cmp r3, 0",
            "mov sl, r1",
            "mov r8, r2",
            "beq 0x4b09c",
            "mov r3, 0",
            "str r3, [r2]",
            "ldrb r2, [r0]",
            "cmp r2, r3",
            "beq 0x4b0b8",
            "mov fp, 0",
            "mov ip, 0",
            "mov r7, 1",
            "add r3, r3, 1",
            "str r3, [r8]",
            "ldrb r3, [r0]",
            "cmp r3, 0x2c",
            "cmpne r3, 0",
            "moveq r2, r0",
            "beq 0x4b014",
            "mov r2, r0",
            "ldrb r3, [r2, 1]!",
            "cmp r3, 0x2c",
            "cmpne r3, 0",
            "bne 0x4b004",
            "cmp r3, 0",
            "beq 0x4b07c",
            "ldrb r3, [r2, 1]",
            "add r6, r2, 1",
            "cmp r3, 0",
            "beq 0x4b07c",
            "mov r1, sl",
            "mov r2, 0xa",
            "str ip, [sp, 4]",
            "bl rsym.find_type",
            "subs r3, r0, 1",
            "ldr ip, [sp, 4]",
            "bmi 0x4b09c",
            "rsb r2, r3, 0x20",
            "lsr r5, r7, r2",
            "subs r0, r0, 0x21",
            "lslpl r5, r7, r0",
            "lsl r4, r7, r3",
            "ldrb r3, [r6]",
            "orr fp, fp, r4",
            "cmp r3, 0",
            "orr ip, ip, r5",
            "beq 0x4b0c0",
            "mov r0, r6",
            "ldr r3, [r8]",
            "b 0x4afe4",
            "mov r6, r2",
            "mov r1, sl",
            "mov r2, 0xa",
            "str ip, [sp, 4]",
            "bl rsym.find_type",
            "subs r3, r0, 1",
            "ldr ip, [sp, 4]",
            "bpl 0x4b048",
            "mov fp, 0",
            "mov ip, 0",
            "mov r1, ip",
            "mov r0, fp",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, sl, fp, lr}",
            "bx lr",
            "mov fp, 0",
            "mov ip, 0",
            "mov r3, 0",
            "str r3, [r8]",
            "b 0x4b0a4"
        ]
    },
    "method.yaSSL::x509.operator_yaSSL::x509_const_": {
        "function_address": "0x0007c3ac",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xc",
            "mov r5, r0",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL4x509C1ERKS0_",
            "mov r0, r5",
            "mov r1, sp",
            "bl rsym._ZN5yaSSL4x5094SwapERS0_",
            "mov r0, sp",
            "bl rsym._ZN5yaSSL4x509D1Ev",
            "mov r4, sp",
            "mov r0, r5",
            "add sp, sp, 0xc",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL4x5094SwapERS0_": {
        "function_address": "0x00040618",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb94]!"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Multiply_TaoCrypt::Integer_const__TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad82c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x20",
            "add r6, sp, 0x10",
            "mov r4, r0",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "add r2, r4, 0xc",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sp",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_do_handshake": {
        "function_address": "0x000865c4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 1",
            "beq 0x865ec",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym.yaSSL_accept",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym.yaSSL_connect"
        ]
    },
    "sym.TaoCrypt::Integer::Randomize_TaoCrypt::RandomNumberGenerator__unsigned_int_": {
        "function_address": "0x000a87ec",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "lsr r5, r2, 3",
            "ldr r6, [0x000a88f8]",
            "sub sp, sp, 0x1c",
            "add r5, r5, 1",
            "add r6, pc, r6",
            "str r5, [sp, 0xc]",
            "mov r8, r2",
            "mov fp, r0",
            "mov sb, r1",
            "mov r1, 0",
            "mov r0, r5",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov ip, r0",
            "add r0, sp, 0x18",
            "ldr r4, [r0, -0xc]!",
            "mov r1, ip",
            "mov r3, r4",
            "mov r7, 0",
            "mov r2, r4",
            "add r0, r0, 8",
            "str ip, [sp, 0x10]",
            "str r7, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r2, r4",
            "mov sl, r0",
            "mov r1, r7",
            "str r0, [sp, 0x10]",
            "str r4, [sp, 0xc]",
            "bl sym.imp.memset",
            "mov r0, sb",
            "mov r1, sl",
            "mov r2, r5",
            "bl rsym._ZN8TaoCrypt21RandomNumberGenerator13GenerateBlockEPhj",
            "ldr r3, [sp, 0xc]",
            "cmp r3, r7",
            "beq 0xa88d0",
            "ldr r4, [sp, 0x10]",
            "and r1, r8, 7",
            "ldrb r0, [r4]",
            "bl rsym._ZN8TaoCrypt4CropEjj",
            "strb r0, [r4]",
            "mov r2, r5",
            "mov r0, fp",
            "ldr r1, [sp, 0x10]",
            "mov r3, r7",
            "bl rsym._ZN8TaoCrypt7Integer6DecodeEPKhjNS0_10SignednessE",
            "ldr r4, [sp, 0x10]",
            "mov r1, r7",
            "mov r0, r4",
            "ldr r2, [sp, 0xc]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x000a88fc]",
            "ldr r1, [0x000a8900]",
            "add r3, r6, r3",
            "ldr r0, [0x000a8904]",
            "add r3, r3, 0x560",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 8",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt4CropEjj": {
        "function_address": "0x0003f940",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x424]!"
        ]
    },
    "method.TaoCrypt.GetPKCS_Cert_char_const__TaoCrypt::Source_": {
        "function_address": "0x0009aef4",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x0009af34]",
            "ldr r2, [0x0009af38]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "sub sp, sp, 0xc",
            "add r0, sp, 8",
            "add r2, r2, 8",
            "str r2, [r0, -8]!",
            "mov r0, sp",
            "str r1, [sp, 4]",
            "bl rsym._ZN8TaoCrypt14PKCS12_Decoder6DecodeEv",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt14PKCS12_Decoder6DecodeEv": {
        "function_address": "0x0003dccc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x71c]!"
        ]
    },
    "sym.yaSSL::ServerHello::ServerHello__": {
        "function_address": "0x0008b9e0",
        "instructions": [
            "ldr r3, [0x0008ba3c]",
            "ldr r2, [0x0008ba40]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, r5, r6, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "mov r5, 0x20",
            "str r2, [r0], 8",
            "mov r1, 3",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r2, r5",
            "mov r1, 0",
            "add r0, r4, 0xa",
            "bl sym.imp.memset",
            "mov r2, r5",
            "add r0, r4, 0x2b",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Integer::Integer__": {
        "function_address": "0x0007f974",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7Integer11IntegerImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.000aee84": {
        "function_address": "0x000aee84",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x000aef28]",
            "ldr r3, [0x000aef2c]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "ldr r6, [r0, 0x20]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r5, r0",
            "ldr r2, [r0, 0x1c]",
            "mov r1, 0",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r6, [r5, 0x14]",
            "mov r1, 0",
            "ldr r2, [r5, 0x10]",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r6, [r5, 8]",
            "mov r1, 0",
            "ldr r2, [r5, 4]",
            "mov r0, r6",
            "bl sym.imp.memset",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "ldr r3, [0x000aef30]",
            "ldr r0, [0x000aef34]",
            "ldr r3, [r4, r3]",
            "ldr r1, [0x000aef38]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "ldr r3, [0x000aef3c]",
            "add r0, r4, r0",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::ClientHello::ClientHello__": {
        "function_address": "0x0008b794",
        "instructions": [
            "ldr r3, fcn.0011c66c",
            "ldr r2, [0x0008b7e0]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "push {r4, lr}",
            "add r2, r2, 8",
            "mov r4, r0",
            "mov r1, 3",
            "str r2, [r0], 8",
            "mov r2, 0",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "add r0, r4, 0xa",
            "mov r1, 0",
            "mov r2, 0x20",
            "bl sym.imp.memset",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_like_range_ucs2": {
        "function_address": "0x0006b22c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov fp, r0",
            "sub sp, sp, 0x24",
            "ldr r0, [r0, 0x30]",
            "add r8, r1, r2",
            "mov r4, r1",
            "ldrb r2, [sp, 0x4c]",
            "ldrb r1, [sp, 0x48]",
            "cmp r0, 0",
            "ldr r5, [sp, 0x54]",
            "str r3, [sp, 0xc]",
            "add r7, r4, 1",
            "ldr r3, [sp, 0x50]",
            "str r2, [sp, 0x10]",
            "str r1, [sp, 8]",
            "moveq sb, r0",
            "addne sb, r0, 0x1000",
            "cmp r8, r7",
            "ldr r6, [sp, 0x58]",
            "add sl, r5, r3",
            "ldr r1, [fp, 0x58]",
            "addls ip, r5, 1",
            "movls r2, 0",
            "bls 0x6b418",
            "ldr r0, [sp, 0x50]",
            "bl fcn.000bed20",
            "add ip, r5, 1",
            "cmp r0, 0",
            "cmpne ip, sl",
            "movhs r3, 0",
            "movlo r3, 1",
            "movhs r2, r3",
            "bhs 0x6b418",
            "mov r3, r5",
            "str fp, [sp, 4]",
            "str r5, [sp, 0x1c]",
            "ldrb r2, [r4]",
            "cmp r2, 0",
            "bne 0x6b2f0",
            "ldrb r1, [r7]",
            "ldr r5, [sp, 0xc]",
            "cmp r1, r5",
            "beq 0x6b3c8",
            "ldr fp, [sp, 8]",
            "cmp r1, fp",
            "beq 0x6b46c",
            "ldr fp, [sp, 0x10]",
            "cmp r1, fp",
            "beq 0x6b540",
            "cmp sb, 0",
            "beq 0x6b3c0",
            "add r5, r4, 3",
            "cmp r8, r5",
            "bls 0x6b3c0",
            "cmp r2, 0",
            "bne 0x6b3c0",
            "ldrb fp, [r7]",
            "str fp, [sp, 0x14]",
            "ldrb fp, [sb, fp]",
            "cmp fp, 0",
            "beq 0x6b3c0",
            "ldrb r1, [r4, 2]",
            "str r1, [sp, 0x18]",
            "ldr fp, [sp, 0x18]",
            "add r1, r4, 2",
            "cmp fp, 0",
            "bne 0x6b364",
            "ldrb r5, [r5]",
            "ldr fp, [sp, 8]",
            "str r5, [sp, 0x18]",
            "cmp r5, fp",
            "beq 0x6b540",
            "ldr fp, [sp, 0x10]",
            "cmp fp, r5",
            "beq 0x6b540",
            "ldrb r5, [sb, r5]",
            "cmp r5, 0",
            "bne 0x6b4b4",
            "mov r5, r6",
            "mov ip, r3",
            "strb r2, [r5], 1",
            "strb r2, [ip], 1",
            "ldrb r2, [r4, 1]",
            "strb r2, [r6, 1]",
            "strb r2, [r3, 1]",
            "add r6, r5, 1",
            "add r3, ip, 1",
            "add r7, r1, 1",
            "cmp r8, r7",
            "bls 0x6b408",
            "subs r0, r0, 1",
            "moveq r2, 0",
            "movne r2, 1",
            "add ip, r3, 1",
            "cmp ip, sl",
            "movhs r2, 0",
            "andlo r2, r2, 1",
            "cmp r2, 0",
            "beq 0x6b530",
            "mov r4, r1",
            "b 0x6b2bc",
            "add r1, r4, 2",
            "b 0x6b364",
            "cmp r8, r7",
            "bls 0x6b2d8",
            "ldrb r1, [r4, 2]",
            "mov r2, r6",
            "strb r1, [r2], 1",
            "add r4, r4, 2",
            "strb r1, [r3]",
            "ldrb r1, [r4, 1]",
            "mov r3, ip",
            "strb r1, [r6, 1]",
            "strb r1, [r3], 1",
            "add r1, r4, 2",
            "add r7, r1, 1",
            "cmp r8, r7",
            "add r6, r2, 1",
            "bhi 0x6b394",
            "ldr r5, [sp, 0x1c]",
            "add ip, r3, 1",
            "rsb r2, r5, r3",
            "mov r5, r3",
            "ldr r3, [sp, 0x60]",
            "cmp sl, ip",
            "str r2, [r3]",
            "ldr r4, [sp, 0x5c]",
            "str r2, [r4]",
            "bls 0x6b45c",
            "mov r2, 0",
            "mov r3, 0x20",
            "strb r2, [r6]",
            "strb r2, [r5]",
            "mov r5, ip",
            "add ip, ip, 2",
            "cmp sl, ip",
            "strb r3, [r6, 1]",
            "strb r3, [r5], 1",
            "add r6, r6, 2",
            "bhi 0x6b438",
            "mov r0, 0",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r2, [sp, 4]",
            "ldrh r1, [r2, 0x5c]",
            "mov r2, r6",
            "lsr r1, r1, 8",
            "strb r1, [r3]",
            "ldr r3, [sp, 4]",
            "ldrh r1, [r3, 0x5c]",
            "mov r3, ip",
            "strb r1, [r3], 1",
            "ldr r5, [sp, 4]",
            "add r1, r4, 2",
            "ldrh ip, [r5, 0x5e]",
            "lsr ip, ip, 8",
            "strb ip, [r2], 1",
            "ldrh ip, [r5, 0x5e]",
            "strb ip, [r6, 1]",
            "add r6, r2, 1",
            "b 0x6b388",
            "ldr fp, [sp, 0x14]",
            "sub r5, fp, 0x40",
            "ldr fp, [sp, 4]",
            "ldr fp, [fp, 0x30]",
            "str fp, [sp]",
            "ldr fp, [sp, 0x18]",
            "add r5, fp, r5, lsl 6",
            "ldr fp, [sp]",
            "add r5, fp, r5, lsl 1",
            "ldrh r5, [r5, -0x80]",
            "cmp r5, 0",
            "beq 0x6b364",
            "cmp r0, 1",
            "beq 0x6b540",
            "add r2, r3, 2",
            "cmp sl, r2",
            "bls 0x6b540",
            "mov r1, r6",
            "mov r2, 0",
            "strb r2, [r1], 1",
            "mov r4, r7",
            "strb r2, [r3]",
            "ldrb r2, [r4], 1",
            "mov r3, ip",
            "strb r2, [r6, 1]",
            "strb r2, [r3], 1",
            "add r6, r1, 1",
            "ldrb r2, [r7, 1]",
            "sub r0, r0, 1",
            "add r1, r7, 3",
            "b 0x6b364",
            "ldr r5, [sp, 0x1c]",
            "rsb r2, r5, r3",
            "mov r5, r3",
            "b 0x6b418",
            "ldr fp, [sp, 4]",
            "ldr r5, [sp, 0x1c]",
            "ldr r2, [fp, 0xc]",
            "ldr ip, [sp, 0x5c]",
            "tst r2, 0x10",
            "ldreq r5, [sp, 0x50]",
            "rsbne r5, r5, r3",
            "str r5, [ip]",
            "ldr r2, [sp, 0x60]",
            "ldr r1, [sp, 0x50]",
            "add r3, r3, 1",
            "str r1, [r2]",
            "mov r2, 0",
            "strb r2, [r3, -1]",
            "strb r2, [r3], 2",
            "ldrh r1, [fp, 0x5e]",
            "cmp sl, r3",
            "lsr r1, r1, 8",
            "strb r1, [r6]",
            "ldrh r1, [fp, 0x5e]",
            "strb r1, [r6, 1]",
            "add r6, r6, 2",
            "bhi 0x6b574",
            "b 0x6b45c"
        ]
    },
    "sym.TaoCrypt::DSA_Public_Decoder::Decode_TaoCrypt::DSA_PublicKey_": {
        "function_address": "0x0009c5a0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [r0]",
            "mov r4, r0",
            "sub sp, sp, 0x44",
            "mov r6, r1",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "ldr r5, [r3, 0x10]",
            "cmp r5, 0",
            "bne 0x9c6dc",
            "add r7, sp, 0x30",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey10SetModulusERKNS_7IntegerE",
            "ldr r7, [sp, 0x34]",
            "ldr r2, [sp, 0x30]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x20",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey16SetSubGroupOrderERKNS_7IntegerE",
            "ldr r7, [sp, 0x24]",
            "ldr r2, [sp, 0x20]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "add r7, sp, 0x10",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r1, r7",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey20SetSubGroupGeneratorERKNS_7IntegerE",
            "ldr r7, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r7",
            "bl sym.imp.memset",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt11BER_Decoder10GetIntegerERNS_7IntegerE",
            "mov r1, r0",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt13DSA_PublicKey13SetPublicPartERKNS_7IntegerE",
            "ldm sp, {r2, r4}",
            "mov r1, r5",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "mov r7, sp",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x44",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ClientDiffieHellmanPublic::ClientDiffieHellmanPublic__": {
        "function_address": "0x0008ac88",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0008accc]",
            "ldr r3, [0x0008acd0]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 0xc]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "ldr r3, [0x0008acd4]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::DoProcessReply_yaSSL::SSL_": {
        "function_address": "0x00082144",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x3c",
            "mov r4, r0",
            "bl rsym._ZN5yaSSL3SSL9useSocketEv",
            "bl rsym._ZN5yaSSL6Socket4waitEv",
            "subs r5, r0, 0",
            "beq 0x822f8",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket9get_readyEv",
            "subs r6, r0, 0",
            "moveq r4, 1",
            "bne 0x82188",
            "mov r0, r4",
            "add sp, sp, 0x3c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10useBuffersEv",
            "bl rsym._ZN5yaSSL7Buffers12TakeRawInputEv",
            "subs r8, r0, 0",
            "beq 0x8230c",
            "bl rsym._ZNK5yaSSL12input_buffer8get_sizeEv",
            "add r5, sp, 0x20",
            "mov r7, r0",
            "add r1, r0, r6",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "cmp r7, 0",
            "beq 0x821dc",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, r7",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer6assignEPKhj",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL8ysDeleteINS_12input_bufferEEEvPT_",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useSocketEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, r6",
            "add r1, r0, r7",
            "mov r3, 0",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL6Socket7receiveEPhji",
            "cmn r0, 1",
            "beq 0x8251c",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer8add_sizeEj",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL10getFactoryEv",
            "bl rsym._ZNK5yaSSL10sslFactory10getMessageEv",
            "mov r6, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0x82530",
            "add r3, sp, 0x30",
            "str r3, [sp, 8]",
            "add r3, r3, 4",
            "mov sl, 0",
            "str r3, [sp, 0xc]",
            "add r8, sp, 0x10",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer3eofEv",
            "subs r7, r0, 0",
            "bne 0x82574",
            "mov r1, 3",
            "mov r2, r7",
            "ldr r0, [sp, 0xc]",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "cmp r0, 4",
            "bhi 0x82324",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "add sl, r0, r7",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL10useBuffersEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r8, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "mov r1, 0",
            "mov sb, r0",
            "mov r0, 0x10",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "rsb r2, r7, sb",
            "mov r4, r0",
            "mov r1, sl",
            "add r2, r8, r2",
            "mov r3, sl",
            "bl rsym._ZN5yaSSL12input_bufferC1EjPKhj",
            "mov r1, r4",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL7Buffers11SetRawInputEPNS_12input_bufferE",
            "mov r4, 1",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "b 0x82178",
            "mov r0, r4",
            "mov r1, 0x72",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r4, r5",
            "b 0x82178",
            "add r5, sp, 0x20",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r7, r8",
            "b 0x821dc",
            "ldr r1, [sp, 8]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSLrsERNS_12input_bufferERNS_17RecordLayerHeaderE",
            "mov r0, r4",
            "ldr r1, [sp, 8]",
            "bl rsym._ZN5yaSSL3SSL11verifyStateERKNS_17RecordLayerHeaderE",
            "mov r0, r5",
            "ldrh r7, [sp, 0x36]",
            "bl rsym._ZNK5yaSSL12input_buffer13get_remainingEv",
            "cmp r7, r0",
            "bhi 0x8257c",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "ldrh r3, [sp, 0x36]",
            "add r3, r3, 5",
            "add r3, r3, sl",
            "cmp r0, r3",
            "bhs 0x82514",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldrb r3, [r0, 0x28]",
            "cmp r3, 0",
            "beq 0x82434",
            "ldr r3, [r6]",
            "ldr r1, [r6, 4]",
            "ldr r0, [sp, 0x30]",
            "cmp r3, r1",
            "bne 0x823a8",
            "b 0x8240c",
            "add r3, r3, 8",
            "cmp r1, r3",
            "beq 0x8240c",
            "ldr r2, [r3]",
            "cmp r0, r2",
            "bne 0x8239c",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r7, r0, 0",
            "beq 0x82410",
            "mov r1, r7",
            "mov r0, r5",
            "bl rsym._ZN5yaSSLrsERNS_12input_bufferERNS_7MessageE",
            "mov r1, r5",
            "mov r2, r4",
            "ldr r3, [r7]",
            "mov r0, r7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x8241c",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7MessageEEEvPT_",
            "b 0x82350",
            "mov r7, 0",
            "mov r0, r4",
            "mov r1, 0x67",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r0, r7",
            "bl rsym._ZN5yaSSL8ysDeleteINS_7MessageEEEvPT_",
            "mov r0, r5",
            "mov r4, 0",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "b 0x82178",
            "ldrh r7, [sp, 0x36]",
            "mov r0, r8",
            "mov r1, r7",
            "bl rsym._ZN5yaSSL12input_bufferC1Ej",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov sb, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "add sb, sb, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useCryptoEv",
            "bl rsym._ZN5yaSSL6Crypto10use_cipherEv",
            "ldr r2, [r0]",
            "mov r3, r0",
            "mov r0, r8",
            "ldr fp, [r2, 4]",
            "str r3, [sp, 4]",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "ldr r3, [sp, 4]",
            "mov r1, r0",
            "mov r2, sb",
            "mov r0, r3",
            "mov r3, r7",
            "mov lr, pc",
            "bx fp",
            "mov r0, r8",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "mov r2, r7",
            "mov r1, r0",
            "mov r0, sb",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11useSecurityEv",
            "bl rsym._ZN5yaSSL8Security9use_parmsEv",
            "strh r7, [r0, 0x2a]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9isTLSv1_1Ev",
            "cmp r0, 0",
            "beq 0x82508",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer11get_currentEv",
            "mov r7, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto10get_cipherEv",
            "ldr r3, [r0]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "add r1, r0, r7",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL12input_buffer11set_currentEj",
            "mov r0, r8",
            "bl rsym._ZN5yaSSL12input_bufferD1Ev",
            "b 0x82384",
            "mov sl, r3",
            "b 0x82258",
            "mov r0, r4",
            "mov r1, 0x72",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "mov r4, 0",
            "b 0x822ec",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "bne 0x82240",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL12input_buffer4peekEv",
            "cmp r0, 0x16",
            "beq 0x82240",
            "mov r1, r4",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL21ProcessOldClientHelloERNS_12input_bufferERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x82240",
            "mov r4, 0",
            "b 0x822ec",
            "mov r7, 5",
            "b 0x82288"
        ]
    },
    "rsym._ZN5yaSSL6Socket4waitEv": {
        "function_address": "0x0003df90",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x544]!"
        ]
    },
    "rsym._ZNK5yaSSL6Socket9get_readyEv": {
        "function_address": "0x0003e128",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x434]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL10useBuffersEv": {
        "function_address": "0x0003e914",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xeec]!"
        ]
    },
    "rsym._ZN5yaSSL7Buffers12TakeRawInputEv": {
        "function_address": "0x0003dfb4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x52c]!"
        ]
    },
    "rsym._ZNK5yaSSL10sslFactory10getMessageEv": {
        "function_address": "0x0003ffdc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xfbc]!"
        ]
    },
    "rsym._ZN5yaSSL12input_buffer3eofEv": {
        "function_address": "0x0003e14c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x41c]!"
        ]
    },
    "rsym._ZN5yaSSL7Buffers11SetRawInputEPNS_12input_bufferE": {
        "function_address": "0x0003cec8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x74]!"
        ]
    },
    "rsym._ZN5yaSSLrsERNS_12input_bufferERNS_17RecordLayerHeaderE": {
        "function_address": "0x00040078",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xf54]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL11verifyStateERKNS_17RecordLayerHeaderE": {
        "function_address": "0x000406c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb24]!"
        ]
    },
    "rsym._ZN5yaSSLrsERNS_12input_bufferERNS_7MessageE": {
        "function_address": "0x000407a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xa8c]!"
        ]
    },
    "rsym._ZN5yaSSL8ysDeleteINS_7MessageEEEvPT_": {
        "function_address": "0x0003ee3c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xb7c]!"
        ]
    },
    "rsym._ZNK5yaSSL12input_buffer4peekEv": {
        "function_address": "0x0003f0e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x9b4]!"
        ]
    },
    "rsym._ZN5yaSSL21ProcessOldClientHelloERNS_12input_bufferERNS_3SSLE": {
        "function_address": "0x0003e8d8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf14]!"
        ]
    },
    "method.TaoCrypt.Divide_unsigned_int__unsigned_int__unsigned_int__unsigned_int_const__unsigned_int__unsigned_int_const__unsigned_int_": {
        "function_address": "0x000a575c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xa4",
            "ldr r7, [sp, 0xc8]",
            "ldr r6, [sp, 0xd0]",
            "ldr ip, [0x000a6088]",
            "cmp r7, 0",
            "cmpne r6, 0",
            "add ip, pc, ip",
            "str ip, [sp, 0x24]",
            "str r0, [sp, 0x64]",
            "str r1, [sp, 0xc]",
            "mov sl, r2",
            "mov r5, r3",
            "ldr r0, [sp, 0xcc]",
            "beq 0xa6008",
            "orr r3, r6, r7",
            "tst r3, 1",
            "bne 0xa6008",
            "sub r3, r6, 1",
            "ldr r8, [r0, r3, lsl 2]",
            "str r3, [sp, 0x50]",
            "cmp r8, 0",
            "bne 0xa57c8",
            "sub r3, r6, 2",
            "ldr r3, [r0, r3, lsl 2]",
            "cmp r3, 0",
            "beq 0xa5fe0",
            "cmp r7, r6",
            "blo 0xa5fb4",
            "add r4, r7, 2",
            "rsbs r8, r8, 1",
            "movlo r8, 0",
            "add r2, r6, r4",
            "ldr r1, [sp, 0x50]",
            "add sb, sl, r4, lsl 2",
            "mov r3, 0",
            "subs ip, r6, r8",
            "add r2, sl, r2, lsl 2",
            "lsl r8, r8, 2",
            "str r3, [sb, r1, lsl 2]",
            "str r2, [sp, 0x20]",
            "str r3, [sl, r4, lsl 2]",
            "add lr, sb, r8",
            "beq 0xa5828",
            "mov r2, r3",
            "ldr r1, [r0, r3]",
            "add r2, r2, 1",
            "cmp ip, r2",
            "str r1, [lr, r3]",
            "add r3, r3, 4",
            "bhi 0xa5810",
            "ldr r2, [sp, 0x50]",
            "ldr r0, [sb, r2, lsl 2]",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "rsb r3, r0, 0x20",
            "cmp r3, 0x1f",
            "str r0, [sp, 0x60]",
            "str r3, [sp, 0x48]",
            "bhi 0xa5f8c",
            "ldr r0, [sp, 0x48]",
            "cmp r0, 0",
            "beq 0xa5888",
            "mov r3, 0",
            "ldr fp, [sp, 0x48]",
            "ldr ip, [sp, 0x60]",
            "mov r0, r3",
            "mov r2, r3",
            "ldr r1, [sb, r3]",
            "add r2, r2, 1",
            "orr r0, r0, r1, lsl fp",
            "cmp r6, r2",
            "str r0, [sb, r3]",
            "lsr r0, r1, ip",
            "add r3, r3, 4",
            "bhi 0xa5868",
            "mov r2, 0",
            "mov r1, sl",
            "lsl fp, r7, 2",
            "add ip, r7, 1",
            "str r2, [sl, ip, lsl 2]",
            "mov r3, r2",
            "str r2, [sl, r7, lsl 2]",
            "str r2, [r1], r8",
            "add r2, sl, fp",
            "str r2, [sp, 8]",
            "str r1, [sp, 0x5c]",
            "mov r2, r3",
            "mov r0, r1",
            "ldr r1, [r5, r3]",
            "add r2, r2, 1",
            "cmp r7, r2",
            "str r1, [r0, r3]",
            "add r3, r3, 4",
            "bhi 0xa58bc",
            "ldr r3, [sp, 0x48]",
            "cmp r3, 0",
            "beq 0xa591c",
            "cmp r4, 0",
            "beq 0xa591c",
            "mov r3, 0",
            "ldr r8, [sp, 0x48]",
            "ldr r5, [sp, 0x60]",
            "mov r0, r3",
            "mov r2, r3",
            "ldr r1, [sl, r3]",
            "add r2, r2, 1",
            "orr r0, r0, r1, lsl r8",
            "cmp r4, r2",
            "str r0, [sl, r3]",
            "lsr r0, r1, r5",
            "add r3, r3, 4",
            "bhi 0xa58fc",
            "ldr r3, [sl, ip, lsl 2]",
            "cmp r3, 0",
            "bne 0xa5934",
            "ldr r2, [sl, fp]",
            "cmp r2, 1",
            "bls 0xa5ebc",
            "sub r2, r6, 0xc0000001",
            "rsb r1, r6, r4",
            "str r2, [sp, 0x54]",
            "add r1, sl, r1, lsl 2",
            "lsl r2, r2, 2",
            "add r1, r1, r2",
            "mov r3, r6",
            "add r2, sb, r2",
            "ldr ip, [r1]",
            "ldr r0, [r2]",
            "sub r3, r3, 1",
            "cmp ip, r0",
            "bhi 0xa597c",
            "sub r1, r1, 4",
            "sub r2, r2, 4",
            "blo 0xa59a4",
            "cmp r3, 0",
            "bne 0xa5954",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "ldr r0, [0x000a6094]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x334",
            "ldr r2, [0x000a6098]",
            "bl sym.imp.__assert_fail",
            "mov r7, r4",
            "sub r3, r6, 2",
            "ldr r0, [sp, 0x50]",
            "ldr r4, [sb, r3, lsl 2]",
            "ldr r8, [sb, r0, lsl 2]",
            "add r4, r4, 1",
            "sub r1, r7, 2",
            "cmp r4, 0",
            "addeq r8, r8, 1",
            "cmp r6, r1",
            "str r1, [sp, 0x10]",
            "str r4, [sp, 0x98]",
            "str r8, [sp, 0x9c]",
            "bhi 0xa5e40",
            "add r2, r6, 1",
            "mvn r1, r6",
            "lsl r2, r2, 2",
            "add ip, sp, 0x78",
            "mvn r3, 1",
            "add r0, r1, r7",
            "str r2, [sp, 0x30]",
            "sub r1, r7, 3",
            "lsl r2, r6, 2",
            "str ip, [sp, 0x34]",
            "rsb r3, r6, r3",
            "ldr ip, [sp, 0xc]",
            "add r1, sl, r1, lsl 2",
            "add r3, r3, r7",
            "str r2, [sp, 0x2c]",
            "sub r2, r7, 4",
            "add r7, sl, r7, lsl 2",
            "str r7, [sp, 0x38]",
            "str r1, [sp, 8]",
            "add r7, ip, r0, lsl 2",
            "ldr r1, [sp, 0x2c]",
            "ldr r0, [sp, 0x20]",
            "lsl r3, r3, 2",
            "add r2, sl, r2, lsl 2",
            "add r0, r0, r1",
            "add r5, ip, r3",
            "str r2, [sp, 0x14]",
            "ldr ip, [sp, 0x30]",
            "ldr r2, [sp, 0x20]",
            "str r0, [sp, 0x3c]",
            "mov r0, 0",
            "add r2, r2, ip",
            "str r0, [sp, 0x18]",
            "ldr r1, [sp, 0x34]",
            "ldr ip, [sp, 0x20]",
            "ldr r0, [sp, 0x54]",
            "str r2, [sp, 0x40]",
            "add sl, sl, r3",
            "add r1, r1, 4",
            "add r2, sp, 0x68",
            "add r3, sp, 0x98",
            "add ip, ip, 8",
            "add r0, sb, r0, lsl 2",
            "str r1, [sp, 0x58]",
            "str r2, [sp, 0x1c]",
            "str r3, [sp, 0x44]",
            "str ip, [sp, 0x4c]",
            "str r0, [sp, 0xc]",
            "mov fp, sb",
            "ldr ip, [sp, 0x18]",
            "ldr r2, [sp, 0x38]",
            "orrs r1, r4, r8",
            "add r3, r2, ip",
            "ldr r0, [r3, -0xc]",
            "ldr r1, [sp, 0x14]",
            "ldr sb, [r3, -4]",
            "ldr ip, [r3, -8]",
            "str r4, [sp, 0x90]",
            "str r8, [sp, 0x94]",
            "str r0, [sp, 0x28]",
            "ldr lr, [r1]",
            "bne 0xa5df8",
            "ldr r3, [sp, 0x98]",
            "str ip, [r5]",
            "cmp r3, 0",
            "str sb, [r7]",
            "bne 0xa5af4",
            "ldr r2, [sp, 0x9c]",
            "cmp r2, 0",
            "beq 0xa5b6c",
            "ldr r2, [sp, 0x80]",
            "cmp r2, 0",
            "bne 0xa605c",
            "ldr r2, [sp, 0x84]",
            "cmp r2, 0",
            "bne 0xa605c",
            "ldr r1, [sp, 0x7c]",
            "ldr r2, [sp, 0x9c]",
            "cmp r1, r2",
            "blo 0xa5b2c",
            "bne 0xa605c",
            "ldr r2, [sp, 0x78]",
            "cmp r3, r2",
            "bls 0xa605c",
            "ldr r0, [sp, 0x1c]",
            "mov r1, r5",
            "ldr r2, [sp, 0x44]",
            "bl rsym._ZN8TaoCrypt8Portable9Multiply2EPjPKjS3_",
            "ldr r0, [sp, 0x1c]",
            "ldr r2, [sp, 0x34]",
            "mov r1, r0",
            "mov r3, 4",
            "bl rsym._ZN8TaoCrypt8Portable3AddEPjPKjS3_j",
            "ldr r0, [sp, 0x1c]",
            "ldr r1, [sp, 0x14]",
            "mov r2, 0x10",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0xa6034",
            "ldr sb, [r7]",
            "cmp sb, 0",
            "beq 0xa5d50",
            "ldr r0, [sp, 0x40]",
            "ldr r1, [sp, 0x3c]",
            "mov r3, 0",
            "ldr r4, [sp, 0x20]",
            "str r3, [r0]",
            "mov r8, r3",
            "str r3, [r1]",
            "mov sb, fp",
            "mov r0, r4",
            "mov r2, sb",
            "add r8, r8, 4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt8Portable9Multiply2EPjPKjS3_",
            "cmp r6, r8",
            "add r4, r4, 0x10",
            "add sb, sb, 0x10",
            "bhi 0xa5b94",
            "cmp r6, 2",
            "bls 0xa5c14",
            "ldr r4, [sp, 0x4c]",
            "add r8, fp, 8",
            "mov sb, 6",
            "mov r0, r4",
            "mov r1, r5",
            "mov r2, r8",
            "bl rsym._ZN8TaoCrypt8Portable12Multiply2AddEPjPKjS3_",
            "cmp r0, 0",
            "beq 0xa5c00",
            "ldr r3, [r4, 0x10]",
            "ldr r2, [r4, 0x14]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "addeq r2, r2, 1",
            "str r2, [r4, 0x14]",
            "str r3, [r4, 0x10]",
            "cmp r6, sb",
            "add r4, r4, 0x10",
            "add r8, r8, 0x10",
            "add sb, sb, 4",
            "bhi 0xa5bcc",
            "mov r0, sl",
            "mov r1, sl",
            "ldr r2, [sp, 0x20]",
            "add r3, r6, 2",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "cmp r0, 0",
            "bne 0xa5dc8",
            "ldr r0, [sp, 0x30]",
            "ldr r3, [sl, r0]",
            "cmp r3, 0",
            "bne 0xa5dc8",
            "ldr r0, [sp, 0x2c]",
            "add r8, sl, r0",
            "ldr r4, [r8]",
            "cmp r4, 0",
            "bne 0xa5cd8",
            "ldr r2, [sp, 0xc]",
            "mov r1, r6",
            "ldr r3, [sp, 8]",
            "b 0xa5c6c",
            "cmp r1, 0",
            "beq 0xa5cd8",
            "ldr ip, [r3]",
            "ldr r0, [r2]",
            "sub r1, r1, 1",
            "cmp ip, r0",
            "bhi 0xa5cd8",
            "sub r3, r3, 4",
            "sub r2, r2, 4",
            "bhs 0xa5c64",
            "add r1, sp, 0x10",
            "ldm r1, {r1, r2, r3}",
            "ldr ip, [sp, 8]",
            "sub r1, r1, 2",
            "sub r2, r2, 8",
            "sub r3, r3, 8",
            "sub ip, ip, 8",
            "cmp r6, r1",
            "str r1, [sp, 0x10]",
            "str r2, [sp, 0x14]",
            "str r3, [sp, 0x18]",
            "str ip, [sp, 8]",
            "sub sl, sl, 8",
            "sub r7, r7, 8",
            "sub r5, r5, 8",
            "bhi 0xa5e40",
            "ldr r4, [sp, 0x98]",
            "ldr r8, [sp, 0x9c]",
            "b 0xa5aa0",
            "mov r2, fp",
            "mov r3, r6",
            "mov r0, sl",
            "mov r1, sl",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "rsb r0, r0, r4",
            "str r0, [r8]",
            "ldr r3, [r5]",
            "ldr r2, [r7]",
            "add r3, r3, 1",
            "cmp r3, 0",
            "addeq r2, r2, 1",
            "str r3, [r5]",
            "str r2, [r7]",
            "ldr r3, [r5]",
            "cmp r3, 0",
            "bne 0xa5c48",
            "cmp r2, 0",
            "bne 0xa5c48",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "add r3, ip, r3",
            "ldr r0, [0x000a609c]",
            "add r3, r3, 0x420",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a60a0]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [r5]",
            "ldr lr, [sp, 0x20]",
            "mov r0, sb",
            "mov r3, sb",
            "mov r8, r5",
            "ldr r2, [fp, sb]",
            "add r3, r3, 1",
            "umull r4, r5, r2, ip",
            "adds r1, r4, r0",
            "adc r2, r5, 0",
            "str r1, [sp, 0x88]",
            "str r2, [sp, 0x8c]",
            "cmp r6, r3",
            "ldr r0, [sp, 0x8c]",
            "str r1, [lr, sb]",
            "add sb, sb, 4",
            "bhi 0xa5d64",
            "ldr r2, [sp, 0x3c]",
            "ldr ip, [sp, 0x40]",
            "mov r3, 0",
            "str r0, [r2]",
            "mov r1, sl",
            "str r3, [ip]",
            "mov r0, sl",
            "ldr r2, [sp, 0x20]",
            "add r3, r6, 2",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "cmp r0, 0",
            "mov r5, r8",
            "beq 0xa5c30",
            "ldr r1, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r2, [sp, 0x24]",
            "add r3, r1, r3",
            "ldr r0, [0x000a60a4]",
            "ldr r1, [0x000a6090]",
            "add r3, r3, 0x420",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 4",
            "ldr r2, [0x000a60a8]",
            "bl sym.imp.__assert_fail",
            "str ip, [sp, 0x80]",
            "ldr ip, [sp, 0x28]",
            "mov r3, 0",
            "mov r1, r4",
            "mov r2, r8",
            "ldr r0, [sp, 0x58]",
            "str ip, [sp, 0x7c]",
            "str lr, [sp, 0x78]",
            "str sb, [sp, 0x84]",
            "bl rsym._ZN8TaoCrypt21DivideThreeWordsByTwoIjNS_5DWordEEET_PS2_S2_S2_PT0_",
            "mov r1, r4",
            "mov sb, r0",
            "mov r2, r8",
            "ldr r0, [sp, 0x34]",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt21DivideThreeWordsByTwoIjNS_5DWordEEET_PS2_S2_S2_PT0_",
            "mov ip, r0",
            "b 0xa5ad4",
            "mov r3, 0",
            "ldr r0, [sp, 0x5c]",
            "ldr ip, [sp, 0x64]",
            "mov r2, r3",
            "ldr r1, [r0, r3]",
            "add r2, r2, 1",
            "cmp r6, r2",
            "str r1, [ip, r3]",
            "add r3, r3, 4",
            "bhi 0xa5e50",
            "ldr r1, [sp, 0x48]",
            "cmp r1, 0",
            "beq 0xa5eb0",
            "ldr r2, [sp, 0x50]",
            "cmp r2, 0",
            "blt 0xa5eb0",
            "ldr ip, [sp, 0x64]",
            "ldr r0, [sp, 0x54]",
            "ldr r4, [sp, 0x60]",
            "add r3, ip, r0, lsl 2",
            "mov r0, 0",
            "mov ip, r1",
            "ldr r1, [r3]",
            "subs r2, r2, 1",
            "orr r0, r0, r1, lsr ip",
            "str r0, [r3], -4",
            "lsl r0, r1, r4",
            "bpl 0xa5e98",
            "add sp, sp, 0xa4",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "rsb r2, r6, r7",
            "sub ip, r6, 0xc0000001",
            "lsl r1, ip, 2",
            "lsl r4, r2, 2",
            "str ip, [sp, 0x54]",
            "ldr ip, [sp, 0xc]",
            "add r5, sl, r4",
            "add r0, r2, 1",
            "str r3, [ip, r2, lsl 2]",
            "add r4, ip, r4",
            "str r3, [ip, r0, lsl 2]",
            "add ip, r5, r1",
            "mov r8, r7",
            "add fp, sb, r1",
            "mov r7, ip",
            "ldr r0, [sp, 8]",
            "ldr ip, [r0]",
            "cmp ip, 0",
            "beq 0xa5f40",
            "mov r1, r5",
            "mov r3, r6",
            "mov r0, r5",
            "mov r2, sb",
            "str ip, [sp, 4]",
            "bl rsym._ZN8TaoCrypt8Portable8SubtractEPjPKjS3_j",
            "ldr ip, [sp, 4]",
            "ldr r1, [sp, 8]",
            "rsb r0, r0, ip",
            "str r0, [r1]",
            "ldr r3, [r4]",
            "add r3, r3, 1",
            "str r3, [r4]",
            "b 0xa5ef8",
            "mov r1, r7",
            "mov r2, fp",
            "mov r3, r6",
            "str ip, [sp, 0x10]",
            "b 0xa5f5c",
            "cmp r3, 0",
            "beq 0xa5f84",
            "ldr ip, [r1]",
            "ldr r0, [r2]",
            "cmp ip, r0",
            "bhi 0xa5f84",
            "sub r3, r3, 1",
            "sub r1, r1, 4",
            "sub r2, r2, 4",
            "bhs 0xa5f54",
            "mov r7, r8",
            "b 0xa59a8",
            "ldr ip, [sp, 0x10]",
            "b 0xa5f08",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "ldr r0, [0x000a60ac]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x334",
            "ldr r2, [0x000a60b0]",
            "bl sym.imp.__assert_fail",
            "ldr r0, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "add r3, r0, r3",
            "ldr r2, [sp, 0x24]",
            "add r1, r0, r1",
            "ldr r0, [0x000a60b4]",
            "add r3, r3, 0x334",
            "add r0, r2, r0",
            "ldr r2, [0x000a60b8]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "ldr r0, [0x000a60bc]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x334",
            "ldr r2, [0x000a60c0]",
            "bl sym.imp.__assert_fail",
            "ldr r0, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "add r3, r0, r3",
            "ldr r2, [sp, 0x24]",
            "add r1, r0, r1",
            "ldr r0, [0x000a60c4]",
            "add r3, r3, 0x334",
            "add r0, r2, r0",
            "ldr r2, [0x000a60c8]",
            "bl sym.imp.__assert_fail",
            "ldr ip, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "ldr r0, [0x000a60cc]",
            "add r3, ip, r3",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x3c8",
            "ldr r2, [0x000a60d0]",
            "bl sym.imp.__assert_fail",
            "ldr r0, [sp, 0x24]",
            "ldr r3, [0x000a608c]",
            "ldr r1, [0x000a6090]",
            "add r3, r0, r3",
            "ldr r2, [sp, 0x24]",
            "add r1, r0, r1",
            "ldr r0, [0x000a60d4]",
            "add r3, r3, 0x3c8",
            "add r0, r2, r0",
            "ldr r2, [0x000a60d8]",
            "bl sym.imp.__assert_fail"
        ]
    },
    "rsym._ZN8TaoCrypt8Portable12Multiply2AddEPjPKjS3_": {
        "function_address": "0x0003ef74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xaac]!"
        ]
    },
    "rsym._ZN8TaoCrypt21DivideThreeWordsByTwoIjNS_5DWordEEET_PS2_S2_S2_PT0_": {
        "function_address": "0x0003ec38",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xcd4]!"
        ]
    },
    "sym.mySTL::list_yaSSL::output_buffer_::push_back_yaSSL::output_buffer_": {
        "function_address": "0x00088670",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r0, 0xc",
            "mov r5, r1",
            "bl rsym._ZN5mySTL14GetArrayMemoryIhEEPT_j",
            "mov r3, 0",
            "str r3, [r0, 4]",
            "str r3, [r0]",
            "str r5, [r0, 8]",
            "ldr r3, [r4, 4]",
            "cmp r3, 0",
            "strne r0, [r3, 4]",
            "ldrne r3, [r4, 4]",
            "streq r0, [r4]",
            "strne r3, [r0]",
            "ldr r3, [r4, 8]",
            "str r0, [r4, 4]",
            "add r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::DividedBy_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ab24c",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "mov r4, r0",
            "mov r0, sp",
            "mov r7, r1",
            "mov r6, r2",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, sp",
            "mov r1, r4",
            "mov r2, r7",
            "mov r3, r6",
            "bl rsym._ZN8TaoCrypt7Integer6DivideERS0_S1_RKS0_S3_",
            "add r0, sp, 8",
            "ldr r1, [sp, 4]",
            "ldr r2, [sp]",
            "bl rsym._ZN8TaoCrypt20AllocatorWithCleanupIjE10deallocateEPvj",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::BitCount___const": {
        "function_address": "0x000a6380",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "bl rsym._ZNK8TaoCrypt7Integer9WordCountEv",
            "ldr r2, [0x000a63f4]",
            "subs r4, r0, 0",
            "add r2, pc, r2",
            "moveq r0, r4",
            "bne 0xa63a8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [r5]",
            "sub r3, r4, 1",
            "cmp r3, r1",
            "bhs 0xa63d0",
            "ldr r2, [r5, 4]",
            "sub r4, r4, 0xf8000001",
            "ldr r0, [r2, r3, lsl 2]",
            "bl rsym._ZN8TaoCrypt12BitPrecisionEj",
            "add r0, r0, r4, lsl 5",
            "b 0xa63a0",
            "ldr r3, [0x000a63f8]",
            "ldr r1, [0x000a63fc]",
            "ldr r0, [0x000a6400]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x7c",
            "mov r2, 0x94",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::AES::SetKey_unsigned_char_const__unsigned_int__TaoCrypt::CipherDir_": {
        "function_address": "0x00095ee8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x00096cd0]",
            "cmp r2, 0x18",
            "cmpne r2, 0x10",
            "sub sp, sp, 0x14",
            "mov r7, r2",
            "moveq sl, 0",
            "movne sl, 1",
            "add r6, pc, r6",
            "mov r5, r0",
            "beq 0x95fb8",
            "cmp r2, 0x20",
            "bne 0x971c0",
            "mov r3, 0xe",
            "add r4, r0, 0x3c",
            "str r3, [r0, 0x38]",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "mov r1, 0",
            "add r0, r5, 0x5c",
            "mov r2, r1",
            "bl sym.imp.memset",
            "mov ip, r7",
            "lsrs ip, ip, 2",
            "beq 0x95f88",
            "mov r3, r5",
            "mov r0, 0",
            "ldr r2, [r3, 0x3c]",
            "add r0, r0, 1",
            "bic r1, r2, 0xff0000",
            "bic r1, r1, 0xff",
            "bic r2, r2, 0xff000000",
            "bic r2, r2, 0xff00",
            "lsr r1, r1, 8",
            "orr r2, r1, r2, lsl 8",
            "ror r2, r2, 0x10",
            "cmp r0, ip",
            "str r2, [r3, 0x3c]",
            "add r3, r3, 4",
            "bne 0x95f54",
            "cmp r7, 0x18",
            "beq 0x96d04",
            "cmp r7, 0x20",
            "beq 0x966d0",
            "cmp r7, 0x10",
            "beq 0x95ff8",
            "ldr r3, [r5, 0x30]",
            "cmp r3, 1",
            "beq 0x964bc",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "lsr r3, r2, 2",
            "lsl r8, r3, 2",
            "cmp r2, r8",
            "add r3, r3, 6",
            "str r3, [r0, 0x38]",
            "bhi 0x9719c",
            "add r4, r0, 0x3c",
            "mov r0, r4",
            "bl sym.imp.memcpy",
            "mov r1, sl",
            "rsb r2, r7, r8",
            "add r0, r4, r7",
            "bl sym.imp.memset",
            "add ip, r7, 3",
            "bic ip, ip, 3",
            "b 0x95f44",
            "ldr r3, [0x00096ce4]",
            "ldr r2, [0x00096ce8]",
            "ldr r3, [r6, r3]",
            "ldr r1, [r4, 0xc]",
            "ldr r3, [r3]",
            "ldr r2, [r6, r2]",
            "and r0, r1, 0xff",
            "lsr r7, r1, 0x10",
            "ldr r0, [r3, r0, lsl 2]",
            "ldr r8, [r2]",
            "ldr sl, [r4]",
            "lsr ip, r1, 8",
            "and r7, r7, 0xff",
            "ldr r7, [r3, r7, lsl 2]",
            "and ip, ip, 0xff",
            "ldr ip, [r3, ip, lsl 2]",
            "eor r8, sl, r8",
            "and r0, r0, 0xff00",
            "eor r8, r8, r0",
            "and r7, r7, 0xff000000",
            "lsr r0, r1, 0x18",
            "ldrb r0, [r3, r0, lsl 2]",
            "eor r7, r8, r7",
            "and ip, ip, 0xff0000",
            "eor ip, r7, ip",
            "ldr r7, [r4, 4]",
            "eor r0, ip, r0",
            "ldr ip, [r4, 8]",
            "eor r7, r0, r7",
            "eor ip, r7, ip",
            "eor r1, ip, r1",
            "str r1, [r4, 0x1c]",
            "str r0, [r4, 0x10]",
            "str r7, [r4, 0x14]",
            "str ip, [r4, 0x18]",
            "and r7, r1, 0xff",
            "lsr ip, r1, 0x10",
            "ldr sl, [r2, 4]",
            "ldr r7, [r3, r7, lsl 2]",
            "lsr r8, r1, 8",
            "and ip, ip, 0xff",
            "ldr ip, [r3, ip, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "eor r0, r0, sl",
            "and r7, r7, 0xff00",
            "eor r7, r0, r7",
            "lsr r1, r1, 0x18",
            "and r0, ip, 0xff000000",
            "eor r7, r7, r0",
            "ldrb ip, [r3, r1, lsl 2]",
            "add r0, r4, 0x10",
            "and r1, r8, 0xff0000",
            "eor r7, r7, r1",
            "ldr r1, [r0, 4]",
            "eor r7, r7, ip",
            "ldr ip, [r0, 8]",
            "eor r1, r7, r1",
            "eor ip, r1, ip",
            "str r7, [r0, 0x10]",
            "str r1, [r0, 0x14]",
            "str ip, [r0, 0x18]",
            "ldr r8, [r4, 0x1c]",
            "add r1, r0, 0x10",
            "eor ip, ip, r8",
            "str ip, [r0, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 8]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "str r7, [r1, 0x10]",
            "ldmib r1, {r8, ip}",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str ip, [r1, 0x18]",
            "str r8, [r1, 0x14]",
            "ldr r8, [r0, 0x1c]",
            "add r0, r1, 0x10",
            "eor ip, ip, r8",
            "str ip, [r1, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 0xc]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "ldr r8, [r0, 4]",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "ldr ip, [r0, 8]",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str r7, [r0, 0x10]",
            "str ip, [r0, 0x18]",
            "str r8, [r0, 0x14]",
            "ldr r8, [r1, 0x1c]",
            "add r1, r0, 0x10",
            "eor ip, ip, r8",
            "str ip, [r0, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 0x10]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "ldr r8, [r1, 4]",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "ldr ip, [r1, 8]",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str r7, [r1, 0x10]",
            "str ip, [r1, 0x18]",
            "str r8, [r1, 0x14]",
            "ldr r8, [r0, 0x1c]",
            "add r0, r1, 0x10",
            "eor ip, ip, r8",
            "str ip, [r1, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 0x14]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "str r7, [r0, 0x10]",
            "ldmib r0, {r8, ip}",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str ip, [r0, 0x18]",
            "str r8, [r0, 0x14]",
            "ldr r8, [r1, 0x1c]",
            "add r1, r0, 0x10",
            "eor ip, ip, r8",
            "str ip, [r0, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 0x18]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "ldr r8, [r1, 4]",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "ldr ip, [r1, 8]",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str r7, [r1, 0x10]",
            "str ip, [r1, 0x18]",
            "str r8, [r1, 0x14]",
            "ldr r8, [r0, 0x1c]",
            "add r0, r1, 0x10",
            "eor ip, ip, r8",
            "str ip, [r1, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r2, 0x1c]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "ldr r8, [r0, 4]",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "ldr ip, [r0, 8]",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str r7, [r0, 0x10]",
            "str ip, [r0, 0x18]",
            "str r8, [r0, 0x14]",
            "ldr r8, [r1, 0x1c]",
            "add r1, r0, 0x10",
            "eor ip, ip, r8",
            "str ip, [r0, 0x1c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr sl, [r3, sl, lsl 2]",
            "ldr fp, [r2, 0x20]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "and sl, sl, 0xff00",
            "eor r7, r7, fp",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "eor r7, r7, sb",
            "eor r7, r7, ip",
            "str r7, [r1, 0x10]",
            "ldmib r1, {r8, ip}",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "str ip, [r1, 0x18]",
            "str r8, [r1, 0x14]",
            "ldr r8, [r0, 0x1c]",
            "add r0, r1, 0x10",
            "eor ip, ip, r8",
            "str ip, [r1, 0x1c]",
            "and r8, ip, 0xff",
            "lsr sl, ip, 0x10",
            "ldr sb, [r2, 0x24]",
            "ldr r8, [r3, r8, lsl 2]",
            "lsr r2, ip, 8",
            "and sl, sl, 0xff",
            "ldr sl, [r3, sl, lsl 2]",
            "and r2, r2, 0xff",
            "ldr r2, [r3, r2, lsl 2]",
            "eor r7, r7, sb",
            "and r8, r8, 0xff00",
            "eor r8, r7, r8",
            "lsr ip, ip, 0x18",
            "and r7, sl, 0xff000000",
            "ldrb r3, [r3, ip, lsl 2]",
            "and r2, r2, 0xff0000",
            "eor ip, r8, r7",
            "eor ip, ip, r2",
            "ldr r2, [r0, 4]",
            "eor ip, ip, r3",
            "ldr r3, [r0, 8]",
            "eor r2, ip, r2",
            "eor r3, r2, r3",
            "str r3, [r0, 0x18]",
            "str ip, [r0, 0x10]",
            "str r2, [r0, 0x14]",
            "ldr r2, [r1, 0x1c]",
            "eor r3, r3, r2",
            "str r3, [r0, 0x1c]",
            "ldr r3, [r5, 0x30]",
            "cmp r3, 1",
            "bne 0x95fac",
            "ldr r8, [r5, 0x38]",
            "lsls r7, r8, 2",
            "beq 0x96530",
            "add r2, r5, r7, lsl 2",
            "add r2, r2, 0x3c",
            "mov r3, r5",
            "mov r1, 0",
            "ldr r0, [r3, 0x3c]",
            "ldr ip, [r2]",
            "add r1, r1, 4",
            "str ip, [r3, 0x3c]",
            "str r0, [r2]",
            "ldr r0, [r3, 0x40]",
            "ldr ip, [r2, 4]",
            "rsb sl, r1, r7",
            "str ip, [r3, 0x40]",
            "str r0, [r2, 4]",
            "ldr r0, [r3, 0x44]",
            "ldr ip, [r2, 8]",
            "cmp r1, sl",
            "str ip, [r3, 0x44]",
            "str r0, [r2, 8]",
            "ldr r0, [r3, 0x48]",
            "ldr ip, [r2, 0xc]",
            "str ip, [r3, 0x48]",
            "str r0, [r2, 0xc]",
            "add r3, r3, 0x10",
            "sub r2, r2, 0x10",
            "blo 0x964d8",
            "cmp r8, 1",
            "bls 0x95fac",
            "ldr r3, [0x00096cd4]",
            "ldr r1, [0x00096cd8]",
            "ldr ip, [r6, r3]",
            "ldr r3, [0x00096cdc]",
            "ldr r0, [r6, r1]",
            "ldr r2, [r6, r3]",
            "ldr r1, [0x00096ce0]",
            "ldr r3, [0x00096ce4]",
            "ldr r1, [r6, r1]",
            "ldr r3, [r6, r3]",
            "ldr r6, [ip]",
            "ldr r3, [r3]",
            "ldr ip, [r0]",
            "ldr r0, [r1]",
            "ldr r1, [r2]",
            "mov r7, 1",
            "ldr r8, [r4, 0x10]",
            "ldr r2, [r4, 0x14]",
            "lsr sb, r8, 0x10",
            "and sb, sb, 0xff",
            "ldrb fp, [r3, sb, lsl 2]",
            "lsr sl, r8, 0x18",
            "lsr sb, r8, 8",
            "and r8, r8, 0xff",
            "ldrb r8, [r3, r8, lsl 2]",
            "ldrb sl, [r3, sl, lsl 2]",
            "str r8, [sp, 0xc]",
            "and r8, sb, 0xff",
            "ldrb r8, [r3, r8, lsl 2]",
            "ldr sb, [r6, sl, lsl 2]",
            "ldr sl, [ip, fp, lsl 2]",
            "str r8, [sp, 4]",
            "ldr r8, [sp, 0xc]",
            "eor sl, sb, sl",
            "ldr sb, [sp, 4]",
            "ldr fp, [r1, r8, lsl 2]",
            "ldr r8, [r0, sb, lsl 2]",
            "eor fp, sl, fp",
            "eor fp, fp, r8",
            "lsr r8, r2, 0x10",
            "str fp, [r4, 0x10]",
            "lsr sl, r2, 0x18",
            "and r8, r8, 0xff",
            "ldrb sl, [r3, sl, lsl 2]",
            "ldrb r8, [r3, r8, lsl 2]",
            "lsr sb, r2, 8",
            "and r2, r2, 0xff",
            "ldrb r2, [r3, r2, lsl 2]",
            "and sb, sb, 0xff",
            "ldr r8, [ip, r8, lsl 2]",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr sl, [r6, sl, lsl 2]",
            "ldr r2, [r1, r2, lsl 2]",
            "ldr fp, [r0, sb, lsl 2]",
            "eor sl, sl, r8",
            "ldr sb, [r4, 0x18]",
            "eor r8, sl, r2",
            "eor r8, r8, fp",
            "lsr r2, sb, 0x10",
            "str r8, [r4, 0x14]",
            "lsr sl, sb, 8",
            "lsr r8, sb, 0x18",
            "and r2, r2, 0xff",
            "ldrb r8, [r3, r8, lsl 2]",
            "ldrb r2, [r3, r2, lsl 2]",
            "and sb, sb, 0xff",
            "and sl, sl, 0xff",
            "ldrb sl, [r3, sl, lsl 2]",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr r8, [r6, r8, lsl 2]",
            "ldr r2, [ip, r2, lsl 2]",
            "ldr fp, [r0, sl, lsl 2]",
            "ldr sb, [r1, sb, lsl 2]",
            "ldr sl, [r4, 0x1c]",
            "eor r2, r8, r2",
            "eor sb, r2, sb",
            "lsr r2, sl, 0x10",
            "eor sb, sb, fp",
            "lsr r8, sl, 0x18",
            "and r2, r2, 0xff",
            "str sb, [r4, 0x18]",
            "ldrb r2, [r3, r2, lsl 2]",
            "ldrb r8, [r3, r8, lsl 2]",
            "lsr sb, sl, 8",
            "and sl, sl, 0xff",
            "ldrb sl, [r3, sl, lsl 2]",
            "and sb, sb, 0xff",
            "ldr r8, [r6, r8, lsl 2]",
            "ldr fp, [ip, r2, lsl 2]",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr sl, [r1, sl, lsl 2]",
            "ldr sb, [r0, sb, lsl 2]",
            "eor r2, r8, fp",
            "eor r2, r2, sl",
            "eor r2, r2, sb",
            "str r2, [r4, 0x1c]",
            "ldr r2, [r5, 0x38]",
            "add r7, r7, 1",
            "cmp r2, r7",
            "add r4, r4, 0x10",
            "bhi 0x96578",
            "b 0x95fac",
            "ldr r3, [0x00096ce4]",
            "ldr r1, [0x00096ce8]",
            "ldr r3, [r6, r3]",
            "ldr r2, [r4, 0x1c]",
            "ldr r3, [r3]",
            "ldr r0, [r6, r1]",
            "lsr r7, r2, 0x10",
            "and r1, r2, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "ldr r8, [r0]",
            "ldr sl, [r4]",
            "lsr ip, r2, 8",
            "and r7, r7, 0xff",
            "ldr r7, [r3, r7, lsl 2]",
            "and ip, ip, 0xff",
            "ldr ip, [r3, ip, lsl 2]",
            "eor r8, sl, r8",
            "and r1, r1, 0xff00",
            "eor r8, r8, r1",
            "and r7, r7, 0xff000000",
            "lsr r1, r2, 0x18",
            "ldrb r1, [r3, r1, lsl 2]",
            "eor r7, r8, r7",
            "and ip, ip, 0xff0000",
            "eor ip, r7, ip",
            "ldr r8, [r4, 4]",
            "eor ip, ip, r1",
            "ldr r7, [r4, 8]",
            "eor r8, ip, r8",
            "ldr r1, [r4, 0xc]",
            "eor r7, r8, r7",
            "eor r1, r7, r1",
            "str ip, [r4, 0x20]",
            "str r8, [r4, 0x24]",
            "str r7, [r4, 0x28]",
            "str r1, [r4, 0x2c]",
            "and r8, r1, 0xff",
            "lsr r7, r1, 0x18",
            "lsr sb, r1, 0x10",
            "ldrb sl, [r3, r8, lsl 2]",
            "ldr r7, [r3, r7, lsl 2]",
            "ldr r8, [r4, 0x10]",
            "and sb, sb, 0xff",
            "lsr r1, r1, 8",
            "ldr sb, [r3, sb, lsl 2]",
            "and r1, r1, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "eor r8, sl, r8",
            "and r7, r7, 0xff000000",
            "eor r8, r8, r7",
            "and sb, sb, 0xff0000",
            "eor r8, r8, sb",
            "and r1, r1, 0xff00",
            "ldr r7, [r4, 0x14]",
            "eor r8, r8, r1",
            "ldr r1, [r4, 0x18]",
            "eor r7, r8, r7",
            "eor r1, r7, r1",
            "eor r2, r1, r2",
            "str r8, [r4, 0x30]",
            "str r1, [r4, 0x38]",
            "str r2, [r4, 0x3c]",
            "str r7, [r4, 0x34]",
            "and r1, r2, 0xff",
            "lsr r8, r2, 0x10",
            "ldr r7, [r3, r1, lsl 2]",
            "ldr sl, [r0, 4]",
            "lsr r1, r2, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and r1, r1, 0xff",
            "eor ip, ip, sl",
            "ldr r1, [r3, r1, lsl 2]",
            "and r7, r7, 0xff00",
            "eor r7, ip, r7",
            "lsr r2, r2, 0x18",
            "and ip, r8, 0xff000000",
            "ldrb r2, [r3, r2, lsl 2]",
            "eor r7, r7, ip",
            "and r1, r1, 0xff0000",
            "eor r7, r7, r1",
            "eor r7, r7, r2",
            "add r1, r4, 0x20",
            "str r7, [r1, 0x20]",
            "ldmib r1, {r8, ip}",
            "ldr r2, [r1, 0xc]",
            "eor r8, r7, r8",
            "eor ip, r8, ip",
            "eor r2, ip, r2",
            "str r8, [r1, 0x24]",
            "str ip, [r1, 0x28]",
            "str r2, [r1, 0x2c]",
            "and r8, r2, 0xff",
            "lsr ip, r2, 0x18",
            "lsr sb, r2, 0x10",
            "ldrb sl, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr r8, [r3, ip, lsl 2]",
            "lsr r2, r2, 8",
            "ldr ip, [r1, 0x10]",
            "ldr sb, [r3, sb, lsl 2]",
            "and r2, r2, 0xff",
            "ldr r2, [r3, r2, lsl 2]",
            "eor ip, sl, ip",
            "and r8, r8, 0xff000000",
            "eor r8, ip, r8",
            "and sb, sb, 0xff0000",
            "and ip, r2, 0xff00",
            "eor r8, r8, sb",
            "ldr r2, [r1, 0x14]",
            "eor r8, r8, ip",
            "ldr ip, [r1, 0x18]",
            "eor r2, r8, r2",
            "eor ip, r2, ip",
            "str r2, [r1, 0x34]",
            "str ip, [r1, 0x38]",
            "str r8, [r1, 0x30]",
            "ldr r8, [r4, 0x3c]",
            "add r2, r1, 0x20",
            "eor ip, ip, r8",
            "str ip, [r1, 0x3c]",
            "and sl, ip, 0xff",
            "lsr r8, ip, 0x10",
            "ldr fp, [r0, 8]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, ip, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor r7, r7, fp",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r8, r8, 0xff000000",
            "lsr ip, ip, 0x18",
            "ldrb ip, [r3, ip, lsl 2]",
            "eor r7, r7, r8",
            "and sb, sb, 0xff0000",
            "eor r7, r7, sb",
            "ldr r8, [r2, 4]",
            "eor ip, r7, ip",
            "ldr r7, [r2, 8]",
            "eor r8, ip, r8",
            "ldr sl, [r2, 0xc]",
            "eor r7, r8, r7",
            "eor sl, r7, sl",
            "str ip, [r2, 0x20]",
            "str r8, [r2, 0x24]",
            "str r7, [r2, 0x28]",
            "str sl, [r2, 0x2c]",
            "and sb, sl, 0xff",
            "lsr r8, sl, 0x18",
            "lsr r7, sl, 0x10",
            "ldr fp, [r2, 0x10]",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr r8, [r3, r8, lsl 2]",
            "and r7, r7, 0xff",
            "lsr sl, sl, 8",
            "ldr r7, [r3, r7, lsl 2]",
            "and sl, sl, 0xff",
            "ldr sl, [r3, sl, lsl 2]",
            "eor sb, sb, fp",
            "and r8, r8, 0xff000000",
            "eor r8, sb, r8",
            "and r7, r7, 0xff0000",
            "eor r8, r8, r7",
            "and r7, sl, 0xff00",
            "eor r8, r8, r7",
            "str r8, [r2, 0x30]",
            "ldr sl, [r2, 0x14]",
            "ldr r7, [r2, 0x18]",
            "eor r8, r8, sl",
            "eor r7, r8, r7",
            "str r7, [r2, 0x38]",
            "str r8, [r2, 0x34]",
            "ldr r8, [r1, 0x3c]",
            "add r1, r2, 0x20",
            "eor r7, r7, r8",
            "str r7, [r2, 0x3c]",
            "and sl, r7, 0xff",
            "lsr r8, r7, 0x10",
            "ldr fp, [r0, 0xc]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, r7, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor ip, ip, fp",
            "and sl, sl, 0xff00",
            "eor ip, ip, sl",
            "and r8, r8, 0xff000000",
            "lsr sl, r7, 0x18",
            "and sb, sb, 0xff0000",
            "eor r7, ip, r8",
            "ldrb ip, [r3, sl, lsl 2]",
            "eor r7, r7, sb",
            "ldr r8, [r1, 4]",
            "eor ip, r7, ip",
            "ldr r7, [r1, 8]",
            "eor r8, ip, r8",
            "ldr sl, [r1, 0xc]",
            "eor r7, r8, r7",
            "eor sl, r7, sl",
            "str ip, [r1, 0x20]",
            "str r8, [r1, 0x24]",
            "str r7, [r1, 0x28]",
            "str sl, [r1, 0x2c]",
            "and sb, sl, 0xff",
            "lsr r8, sl, 0x18",
            "lsr r7, sl, 0x10",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr r8, [r3, r8, lsl 2]",
            "ldr fp, [r1, 0x10]",
            "and r7, r7, 0xff",
            "lsr sl, sl, 8",
            "ldr r7, [r3, r7, lsl 2]",
            "and sl, sl, 0xff",
            "eor sb, sb, fp",
            "and r8, r8, 0xff000000",
            "ldr fp, [r3, sl, lsl 2]",
            "and r7, r7, 0xff0000",
            "eor sl, sb, r8",
            "eor sl, sl, r7",
            "ldr r8, [r1, 0x14]",
            "and r7, fp, 0xff00",
            "eor sl, sl, r7",
            "ldr r7, [r1, 0x18]",
            "eor r8, sl, r8",
            "eor r7, r8, r7",
            "str sl, [r1, 0x30]",
            "str r7, [r1, 0x38]",
            "str r8, [r1, 0x34]",
            "ldr r8, [r2, 0x3c]",
            "add r2, r1, 0x20",
            "eor r7, r7, r8",
            "str r7, [r1, 0x3c]",
            "and sl, r7, 0xff",
            "lsr r8, r7, 0x10",
            "ldr fp, [r0, 0x10]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, r7, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor ip, ip, fp",
            "and sl, sl, 0xff00",
            "eor ip, ip, sl",
            "and r8, r8, 0xff000000",
            "lsr sl, r7, 0x18",
            "and sb, sb, 0xff0000",
            "eor r7, ip, r8",
            "ldrb ip, [r3, sl, lsl 2]",
            "eor r7, r7, sb",
            "eor ip, r7, ip",
            "str ip, [r2, 0x20]",
            "ldr r8, [r2, 4]",
            "ldr r7, [r2, 8]",
            "ldr sl, [r2, 0xc]",
            "eor r8, ip, r8",
            "eor r7, r8, r7",
            "eor sl, r7, sl",
            "str r8, [r2, 0x24]",
            "str r7, [r2, 0x28]",
            "str sl, [r2, 0x2c]",
            "and sb, sl, 0xff",
            "lsr r8, sl, 0x18",
            "lsr r7, sl, 0x10",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr r8, [r3, r8, lsl 2]",
            "ldr fp, [r2, 0x10]",
            "and r7, r7, 0xff",
            "lsr sl, sl, 8",
            "ldr r7, [r3, r7, lsl 2]",
            "and sl, sl, 0xff",
            "eor sb, sb, fp",
            "and r8, r8, 0xff000000",
            "ldr fp, [r3, sl, lsl 2]",
            "and r7, r7, 0xff0000",
            "eor sl, sb, r8",
            "eor sl, sl, r7",
            "ldr r8, [r2, 0x14]",
            "and r7, fp, 0xff00",
            "eor sl, sl, r7",
            "ldr r7, [r2, 0x18]",
            "eor r8, sl, r8",
            "eor r7, r8, r7",
            "str sl, [r2, 0x30]",
            "str r7, [r2, 0x38]",
            "str r8, [r2, 0x34]",
            "ldr r8, [r1, 0x3c]",
            "add r1, r2, 0x20",
            "eor r7, r7, r8",
            "str r7, [r2, 0x3c]",
            "and sl, r7, 0xff",
            "lsr r8, r7, 0x10",
            "ldr fp, [r0, 0x14]",
            "ldr sl, [r3, sl, lsl 2]",
            "lsr sb, r7, 8",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sb, sb, 0xff",
            "ldr sb, [r3, sb, lsl 2]",
            "eor ip, ip, fp",
            "and sl, sl, 0xff00",
            "eor ip, ip, sl",
            "and r8, r8, 0xff000000",
            "lsr sl, r7, 0x18",
            "and sb, sb, 0xff0000",
            "eor r7, ip, r8",
            "ldrb ip, [r3, sl, lsl 2]",
            "eor r7, r7, sb",
            "ldr r8, [r1, 4]",
            "eor ip, r7, ip",
            "ldr r7, [r1, 8]",
            "eor r8, ip, r8",
            "ldr sl, [r1, 0xc]",
            "eor r7, r8, r7",
            "eor sl, r7, sl",
            "str ip, [r1, 0x20]",
            "str r8, [r1, 0x24]",
            "str r7, [r1, 0x28]",
            "str sl, [r1, 0x2c]",
            "and sb, sl, 0xff",
            "lsr r8, sl, 0x18",
            "lsr r7, sl, 0x10",
            "ldrb sb, [r3, sb, lsl 2]",
            "ldr r8, [r3, r8, lsl 2]",
            "ldr fp, [r1, 0x10]",
            "and r7, r7, 0xff",
            "lsr sl, sl, 8",
            "ldr r7, [r3, r7, lsl 2]",
            "and sl, sl, 0xff",
            "ldr sl, [r3, sl, lsl 2]",
            "eor sb, sb, fp",
            "and r8, r8, 0xff000000",
            "and r7, r7, 0xff0000",
            "eor r8, sb, r8",
            "eor r8, r8, r7",
            "and r7, sl, 0xff00",
            "eor r8, r8, r7",
            "str r8, [r1, 0x30]",
            "ldr sl, [r1, 0x14]",
            "ldr r7, [r1, 0x18]",
            "eor r8, r8, sl",
            "eor r7, r8, r7",
            "str r7, [r1, 0x38]",
            "str r8, [r1, 0x34]",
            "ldr r8, [r2, 0x3c]",
            "add r2, r1, 0x20",
            "eor r7, r7, r8",
            "str r7, [r1, 0x3c]",
            "ldr r1, [r2, 0x1c]",
            "ldr sl, [r0, 0x18]",
            "and r7, r1, 0xff",
            "lsr r0, r1, 0x10",
            "ldr r8, [r3, r7, lsl 2]",
            "and r0, r0, 0xff",
            "lsr r7, r1, 8",
            "ldr r0, [r3, r0, lsl 2]",
            "and r7, r7, 0xff",
            "ldr r7, [r3, r7, lsl 2]",
            "eor ip, ip, sl",
            "and r8, r8, 0xff00",
            "eor ip, ip, r8",
            "lsr r1, r1, 0x18",
            "and r0, r0, 0xff000000",
            "ldrb r3, [r3, r1, lsl 2]",
            "eor r0, ip, r0",
            "and r1, r7, 0xff0000",
            "eor r0, r0, r1",
            "ldr r1, [r2, 4]",
            "eor r0, r0, r3",
            "ldr r3, [r2, 8]",
            "eor r1, r0, r1",
            "ldr ip, [r2, 0xc]",
            "eor r3, r1, r3",
            "eor ip, r3, ip",
            "str ip, [r2, 0x2c]",
            "str r0, [r2, 0x20]",
            "str r1, [r2, 0x24]",
            "str r3, [r2, 0x28]",
            "b 0x95fa0",
            "ldr r3, [0x00096ce4]",
            "ldr r1, [0x00096ce8]",
            "ldr r3, [r6, r3]",
            "ldr r2, [r4, 0x14]",
            "ldr r3, [r3]",
            "ldr r0, [r6, r1]",
            "lsr r7, r2, 0x10",
            "and r1, r2, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "ldr r8, [r0]",
            "ldr sl, [r4]",
            "lsr ip, r2, 8",
            "and r7, r7, 0xff",
            "ldr r7, [r3, r7, lsl 2]",
            "and ip, ip, 0xff",
            "ldr ip, [r3, ip, lsl 2]",
            "eor r8, sl, r8",
            "and r1, r1, 0xff00",
            "eor r8, r8, r1",
            "and r7, r7, 0xff000000",
            "lsr r1, r2, 0x18",
            "ldrb r1, [r3, r1, lsl 2]",
            "eor r7, r8, r7",
            "and ip, ip, 0xff0000",
            "ldr sl, [r4, 4]",
            "eor ip, r7, ip",
            "eor r1, ip, r1",
            "ldr r8, [r4, 8]",
            "ldr r7, [r4, 0xc]",
            "eor sl, r1, sl",
            "ldr ip, [r4, 0x10]",
            "eor r8, sl, r8",
            "eor r7, r8, r7",
            "eor ip, r7, ip",
            "eor r2, ip, r2",
            "str sl, [r4, 0x1c]",
            "str r7, [r4, 0x24]",
            "str ip, [r4, 0x28]",
            "str r2, [r4, 0x2c]",
            "str r1, [r4, 0x18]",
            "str r8, [r4, 0x20]",
            "and r7, r2, 0xff",
            "lsr ip, r2, 0x10",
            "ldr r7, [r3, r7, lsl 2]",
            "ldr r8, [r0, 4]",
            "lsr sl, r2, 8",
            "and ip, ip, 0xff",
            "ldr ip, [r3, ip, lsl 2]",
            "and sl, sl, 0xff",
            "eor r8, r1, r8",
            "and r7, r7, 0xff00",
            "ldr r1, [r3, sl, lsl 2]",
            "eor r7, r8, r7",
            "and ip, ip, 0xff000000",
            "lsr r2, r2, 0x18",
            "ldrb r2, [r3, r2, lsl 2]",
            "eor r7, r7, ip",
            "and r1, r1, 0xff0000",
            "eor r7, r7, r1",
            "eor r7, r7, r2",
            "add r1, r4, 0x18",
            "str r7, [r4, 0x30]",
            "ldr sl, [r1, 4]",
            "ldr r8, [r1, 8]",
            "eor sl, r7, sl",
            "ldr r2, [r1, 0xc]",
            "eor r8, sl, r8",
            "ldr ip, [r1, 0x10]",
            "eor r2, r8, r2",
            "eor ip, r2, ip",
            "str sl, [r1, 0x1c]",
            "str r8, [r1, 0x20]",
            "str r2, [r1, 0x24]",
            "str ip, [r1, 0x28]",
            "ldr r8, [r4, 0x2c]",
            "add r2, r4, 0x30",
            "eor r8, ip, r8",
            "mov ip, r8",
            "str r8, [r1, 0x2c]",
            "and r8, r8, 0xff",
            "lsr r1, ip, 0x10",
            "ldr sl, [r3, r8, lsl 2]",
            "ldr sb, [r0, 8]",
            "lsr r8, ip, 8",
            "and r1, r1, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "eor r7, r7, sb",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r1, r1, 0xff000000",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r1",
            "ldrb r1, [r3, ip, lsl 2]",
            "and ip, r8, 0xff0000",
            "eor r7, r7, ip",
            "eor r7, r7, r1",
            "str r7, [r4, 0x48]",
            "ldr sl, [r2, 4]",
            "ldr r8, [r2, 8]",
            "ldr r1, [r2, 0xc]",
            "eor sl, r7, sl",
            "ldr ip, [r2, 0x10]",
            "eor r8, sl, r8",
            "eor r1, r8, r1",
            "eor ip, r1, ip",
            "str r1, [r2, 0x24]",
            "str ip, [r2, 0x28]",
            "str sl, [r2, 0x1c]",
            "str r8, [r2, 0x20]",
            "ldr r8, [r4, 0x44]",
            "add r1, r4, 0x48",
            "eor r8, ip, r8",
            "mov ip, r8",
            "str r8, [r2, 0x2c]",
            "and r8, r8, 0xff",
            "lsr r2, ip, 0x10",
            "ldr sl, [r3, r8, lsl 2]",
            "ldr sb, [r0, 0xc]",
            "lsr r8, ip, 8",
            "and r2, r2, 0xff",
            "ldr r2, [r3, r2, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "eor r7, r7, sb",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r2, r2, 0xff000000",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r2",
            "ldrb r2, [r3, ip, lsl 2]",
            "and ip, r8, 0xff0000",
            "eor r7, r7, ip",
            "eor r7, r7, r2",
            "str r7, [r4, 0x60]",
            "ldr sl, [r1, 4]",
            "ldr r8, [r1, 8]",
            "eor sl, r7, sl",
            "ldr r2, [r1, 0xc]",
            "eor r8, sl, r8",
            "ldr ip, [r1, 0x10]",
            "eor r2, r8, r2",
            "eor ip, r2, ip",
            "str sl, [r1, 0x1c]",
            "str r2, [r1, 0x24]",
            "str ip, [r1, 0x28]",
            "str r8, [r1, 0x20]",
            "ldr r8, [r4, 0x5c]",
            "add r2, r4, 0x60",
            "eor r8, ip, r8",
            "lsr sb, r8, 0x10",
            "and sl, r8, 0xff",
            "str r8, [r1, 0x2c]",
            "mov ip, r8",
            "ldr sl, [r3, sl, lsl 2]",
            "and r1, sb, 0xff",
            "lsr r8, r8, 8",
            "ldr sb, [r0, 0x10]",
            "ldr r1, [r3, r1, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "eor r7, r7, sb",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r1, r1, 0xff000000",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r1",
            "ldrb r1, [r3, ip, lsl 2]",
            "and ip, r8, 0xff0000",
            "eor r7, r7, ip",
            "eor r7, r7, r1",
            "str r7, [r4, 0x78]",
            "ldr sl, [r2, 4]",
            "ldr r8, [r2, 8]",
            "ldr r1, [r2, 0xc]",
            "eor sl, r7, sl",
            "ldr ip, [r2, 0x10]",
            "eor r8, sl, r8",
            "eor r1, r8, r1",
            "eor ip, r1, ip",
            "str r1, [r2, 0x24]",
            "str ip, [r2, 0x28]",
            "str sl, [r2, 0x1c]",
            "str r8, [r2, 0x20]",
            "ldr r8, [r4, 0x74]",
            "add r1, r4, 0x78",
            "eor r8, ip, r8",
            "mov ip, r8",
            "str r8, [r2, 0x2c]",
            "and r8, r8, 0xff",
            "lsr r2, ip, 0x10",
            "ldr sl, [r3, r8, lsl 2]",
            "ldr sb, [r0, 0x14]",
            "lsr r8, ip, 8",
            "and r2, r2, 0xff",
            "ldr r2, [r3, r2, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "eor r7, r7, sb",
            "and sl, sl, 0xff00",
            "eor r7, r7, sl",
            "and r2, r2, 0xff000000",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r2",
            "ldrb r2, [r3, ip, lsl 2]",
            "and ip, r8, 0xff0000",
            "eor r7, r7, ip",
            "eor r7, r7, r2",
            "str r7, [r4, 0x90]",
            "ldr sl, [r1, 4]",
            "ldr r8, [r1, 8]",
            "eor sl, r7, sl",
            "ldr r2, [r1, 0xc]",
            "eor r8, sl, r8",
            "ldr ip, [r1, 0x10]",
            "eor r2, r8, r2",
            "eor ip, r2, ip",
            "str r2, [r1, 0x24]",
            "str ip, [r1, 0x28]",
            "str sl, [r1, 0x1c]",
            "str r8, [r1, 0x20]",
            "ldr r8, [r4, 0x8c]",
            "add r2, r4, 0x90",
            "eor r8, ip, r8",
            "mov ip, r8",
            "str r8, [r1, 0x2c]",
            "and r8, r8, 0xff",
            "lsr r1, ip, 0x10",
            "ldr sl, [r3, r8, lsl 2]",
            "ldr sb, [r0, 0x18]",
            "lsr r8, ip, 8",
            "and r1, r1, 0xff",
            "ldr r1, [r3, r1, lsl 2]",
            "and r8, r8, 0xff",
            "ldr r8, [r3, r8, lsl 2]",
            "and sl, sl, 0xff00",
            "eor r7, r7, sb",
            "eor r7, r7, sl",
            "and r1, r1, 0xff000000",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r1",
            "ldrb r1, [r3, ip, lsl 2]",
            "and ip, r8, 0xff0000",
            "eor r7, r7, ip",
            "eor r7, r7, r1",
            "str r7, [r4, 0xa8]",
            "ldr sl, [r2, 4]",
            "ldr r8, [r2, 8]",
            "ldr r1, [r2, 0xc]",
            "eor sl, r7, sl",
            "ldr ip, [r2, 0x10]",
            "eor r8, sl, r8",
            "eor r1, r8, r1",
            "eor ip, r1, ip",
            "str r1, [r2, 0x24]",
            "str ip, [r2, 0x28]",
            "str sl, [r2, 0x1c]",
            "str r8, [r2, 0x20]",
            "ldr r8, [r4, 0xa4]",
            "add r1, r4, 0xa8",
            "eor r8, ip, r8",
            "mov ip, r8",
            "str r8, [r2, 0x2c]",
            "lsr r2, ip, 0x10",
            "and r8, r8, 0xff",
            "ldr sl, [r0, 0x1c]",
            "ldr r8, [r3, r8, lsl 2]",
            "and r0, r2, 0xff",
            "lsr r2, ip, 8",
            "ldr r0, [r3, r0, lsl 2]",
            "and r2, r2, 0xff",
            "ldr r2, [r3, r2, lsl 2]",
            "eor r7, r7, sl",
            "and r8, r8, 0xff00",
            "lsr ip, ip, 0x18",
            "eor r7, r7, r8",
            "and r0, r0, 0xff000000",
            "ldrb r3, [r3, ip, lsl 2]",
            "and r2, r2, 0xff0000",
            "eor r0, r7, r0",
            "eor r0, r0, r2",
            "ldr r2, [r1, 4]",
            "eor r0, r0, r3",
            "ldr r3, [r1, 8]",
            "eor r2, r0, r2",
            "ldr ip, [r1, 0xc]",
            "eor r3, r2, r3",
            "eor ip, r3, ip",
            "str ip, [r1, 0x24]",
            "str r0, [r1, 0x18]",
            "str r2, [r1, 0x1c]",
            "str r3, [r1, 0x20]",
            "b 0x95fa0",
            "ldr r3, [0x00096cf8]",
            "ldr r1, [0x00096cec]",
            "ldr r0, [0x00096cf0]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0xb4",
            "ldr r2, [0x00096cf4]",
            "bl sym.imp.__assert_fail",
            "ldr r3, [0x00096cf8]",
            "ldr r1, [0x00096cfc]",
            "ldr r0, [0x00096d00]",
            "add r3, r6, r3",
            "add r1, r6, r1",
            "add r0, r6, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::Square_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad750",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x20",
            "add r6, sp, 0x10",
            "mov r4, r0",
            "mov r2, r1",
            "mov r0, r6",
            "bl rsym._ZNK8TaoCrypt7Integer5TimesERKS0_",
            "add r2, r4, 0xc",
            "mov r1, r6",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer6ModuloERKS0_",
            "mov r1, sp",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0x14]",
            "ldr r2, [sp, 0x10]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x20",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::input_buffer::operator___unsigned_int_": {
        "function_address": "0x0007bc54",
        "instructions": [
            "ldr r3, [0x0007bcbc]",
            "ldr r2, [0x0007bcc0]",
            "cmp r1, r3",
            "push {r4, lr}",
            "add r2, pc, r2",
            "mov r4, r0",
            "bne 0x7bc98",
            "ldr r1, [r0, 4]",
            "ldr r2, [r0]",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "ldr r3, [r4, 4]",
            "ldr r0, [r4, 8]",
            "add r2, r3, 1",
            "str r2, [r4, 4]",
            "add r0, r0, r3",
            "pop {r4, lr}",
            "bx lr",
            "ldr r3, [0x0007bcc4]",
            "ldr r1, [0x0007bcc8]",
            "ldr r0, [0x0007bccc]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x90",
            "mov r2, 0x8f",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::output_buffer::operator___unsigned_int_": {
        "function_address": "0x0007bbcc",
        "instructions": [
            "ldr r3, [0x0007bc40]",
            "ldr r2, [0x0007bc44]",
            "cmp r1, r3",
            "push {r4, r5, r6, lr}",
            "add r2, pc, r2",
            "mov r4, r0",
            "bne 0x7bc1c",
            "ldr r5, [r0]",
            "bl rsym._ZNK5yaSSL13output_buffer12get_capacityEv",
            "mov r1, r5",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL5Check5checkEjj",
            "ldr r3, [r4]",
            "ldr r0, [r4, 4]",
            "add r2, r3, 1",
            "str r2, [r4]",
            "add r0, r0, r3",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r3, [0x0007bc48]",
            "ldr r1, [0x0007bc4c]",
            "ldr r0, [0x0007bc50]",
            "add r3, r2, r3",
            "add r1, r2, r1",
            "add r0, r2, r0",
            "add r3, r3, 0x50",
            "mov r2, 0x100",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.TaoCrypt::PKCS12_Decoder::Decode__": {
        "function_address": "0x0009ae1c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [r0]",
            "mov r5, r0",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r5, 4]",
            "ldr r4, [0x0009aee0]",
            "ldr r3, [r3, 0x10]",
            "add r4, pc, r4",
            "cmp r3, 0",
            "beq 0x9ae54",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "ldr r0, [r5, 4]",
            "ldr r3, [r0, 0xc]",
            "ldr r1, [r0]",
            "add r2, r3, 1",
            "cmp r3, r1",
            "str r2, [r0, 0xc]",
            "bhs 0x9aebc",
            "ldr r2, [r0, 4]",
            "ldrb r3, [r2, r3]",
            "cmp r3, 6",
            "ldrne r3, [0x0009aee4]",
            "strne r3, [r0, 0x10]",
            "bne 0x9ae4c",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "cmp r0, 0",
            "beq 0x9ae4c",
            "ldr r3, [r5, 4]",
            "sub r0, r0, 1",
            "ldr r2, [r3, 0xc]",
            "ldr r1, [r3]",
            "cmp r2, r1",
            "add r2, r2, 1",
            "str r2, [r3, 0xc]",
            "blo 0x9ae94",
            "ldr r3, [0x0009aee8]",
            "ldr r1, [0x0009aeec]",
            "ldr r0, [0x0009aef0]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_once_alloc": {
        "function_address": "0x00050770",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r3, [0x000508b4]",
            "ldr r2, [0x000508b8]",
            "add r3, pc, r3",
            "ldr ip, [r3, r2]",
            "add r0, r0, 7",
            "ldr r4, [ip]",
            "sub sp, sp, 0xc",
            "cmp r4, 0",
            "bic r5, r0, 7",
            "beq 0x5086c",
            "ldr r2, [r4, 4]",
            "cmp r5, r2",
            "bls 0x5082c",
            "mov r0, 0",
            "b 0x507bc",
            "ldr r2, [r4, 4]",
            "cmp r5, r2",
            "bls 0x5082c",
            "mov r6, r4",
            "ldr r4, [r4]",
            "cmp r0, r2",
            "movlo r0, r2",
            "cmp r4, 0",
            "bne 0x507b0",
            "lsl r0, r0, 2",
            "ldr r2, [0x000508bc]",
            "add r7, r5, 0x10",
            "ldr r3, [r3, r2]",
            "ldr r3, [r3]",
            "cmp r3, r0",
            "bls 0x507f8",
            "cmp r7, r3",
            "movlo r7, r3",
            "mov r0, r7",
            "str r1, [sp, 4]",
            "bl sym.imp.malloc",
            "subs r4, r0, 0",
            "ldr r1, [sp, 4]",
            "beq 0x50878",
            "sub r3, r7, 0x10",
            "str r3, [r4, 4]",
            "mov r3, 0",
            "str r3, [r4]",
            "str r7, [r4, 8]",
            "str r4, [r6]",
            "ldr r2, [r4, 4]",
            "ldr r3, [r4, 8]",
            "tst r1, 0x20",
            "rsb r3, r2, r3",
            "rsb r2, r5, r2",
            "str r2, [r4, 4]",
            "add r4, r4, r3",
            "bne 0x50858",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r2, r5",
            "mov r0, r4",
            "mov r1, 0",
            "bl sym.imp.memset",
            "b 0x50848",
            "mov r0, r4",
            "mov r6, ip",
            "b 0x507d8",
            "bl rsym._my_thread_var",
            "mov r5, r0",
            "bl sym.imp.__errno_location",
            "ldr r1, [sp, 4]",
            "ldr r3, [r0]",
            "ands r1, r1, 0x18",
            "str r3, [r5]",
            "moveq r0, r1",
            "beq 0x5084c",
            "mov r2, r7",
            "mov r0, 5",
            "mov r1, 0x24",
            "bl rsym.my_error",
            "mov r0, r4",
            "b 0x5084c"
        ]
    },
    "sym._my_memdup": {
        "function_address": "0x0004bcd4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r5, r0",
            "mov r1, r2",
            "mov r0, r4",
            "mov r2, r3",
            "ldr r3, [sp, 0x10]",
            "bl rsym._mymalloc",
            "subs r6, r0, 0",
            "movne r1, r5",
            "movne r2, r4",
            "blne sym.imp.memcpy",
            "mov r0, r6",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::CertDecoder.CertDecoder_TaoCrypt::Source__bool__mySTL::list_TaoCrypt::Signer___bool__TaoCrypt::CertDecoder::CertType_": {
        "function_address": "0x0009d2bc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [0x0009d33c]",
            "ldr lr, [0x0009d340]",
            "add ip, pc, ip",
            "ldr lr, [ip, lr]",
            "mov r4, r0",
            "add lr, lr, 8",
            "str r1, [r4, 4]",
            "ldrb r5, [sp, 0x18]",
            "mov r1, 0",
            "mov r6, r2",
            "str lr, [r0], 8",
            "mov r2, r1",
            "mov r7, r3",
            "eor r5, r5, 1",
            "bl rsym._ZN8TaoCrypt9PublicKeyC1EPKhj",
            "mov r3, 0",
            "cmp r6, 0",
            "strb r5, [r4, 0x470]",
            "strb r3, [r4, 0x250]",
            "str r3, [r4, 0x10]",
            "str r3, [r4, 0x14]",
            "str r3, [r4, 0x18]",
            "str r3, [r4, 0x4c]",
            "strb r3, [r4, 0x50]",
            "movne r1, r7",
            "ldrne r2, [sp, 0x1c]",
            "movne r0, r4",
            "blne rsym._ZN8TaoCrypt11CertDecoder6DecodeEPN5mySTL4listIPNS_6SignerEEENS0_8CertTypeE",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "sym.mysql_list_tables": {
        "function_address": "0x0004666c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r3, [0x0004674c]",
            "ldr r2, [0x00046750]",
            "sub sp, sp, 0x100",
            "add r3, pc, r3",
            "add r2, r3, r2",
            "cmp r1, 0",
            "mov r4, sp",
            "mov r5, r1",
            "mov r6, r0",
            "ldm r2, {r0, r1, r2}",
            "add ip, sp, 0xb",
            "stm r4, {r0, r1, r2}",
            "beq 0x466b0",
            "ldrb r2, [r5]",
            "cmp r2, 0",
            "bne 0x466d8",
            "mov r1, sp",
            "mov r0, r6",
            "bl rsym.mysql_query",
            "cmp r0, 0",
            "movne r0, 0",
            "moveq r0, r6",
            "bleq rsym.mysql_store_result",
            "add sp, sp, 0x100",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r1, [0x00046754]",
            "mov r2, 8",
            "add r1, r3, r1",
            "mov r0, ip",
            "bl sym.imp.memcpy",
            "ldrb r3, [r5]",
            "add r0, r0, 7",
            "add r2, sp, 0xfa",
            "cmp r3, 0",
            "cmpne r2, r0",
            "bls 0x4672c",
            "mov r1, 0x5c",
            "cmp r3, 0x5c",
            "cmpne r3, 0x27",
            "strbeq r1, [r0], 1",
            "ldrbeq r3, [r5]",
            "strb r3, [r0], 1",
            "ldrb r3, [r5, 1]!",
            "cmp r3, 0",
            "cmpne r2, r0",
            "bhi 0x46708",
            "cmp r3, 0",
            "movne r3, 0x25",
            "strbne r3, [r0], 1",
            "mov r3, 0",
            "strb r3, [r0, 1]",
            "mov r3, 0x27",
            "strb r3, [r0]",
            "b 0x466b0"
        ]
    },
    "sym.my_symlink": {
        "function_address": "0x0004ce98",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0xc",
            "mov r5, r2",
            "mov r4, r0",
            "mov r6, r1",
            "bl sym.imp.symlink",
            "cmp r0, 0",
            "bne 0x4ceec",
            "tst r5, 0x400",
            "bne 0x4ced0",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym.my_sync_dir_by_file",
            "cmp r0, 0",
            "beq 0x4cec0",
            "mvn r0, 0",
            "b 0x4cec4",
            "bl rsym._my_thread_var",
            "mov r7, r0",
            "bl sym.imp.__errno_location",
            "ldr r3, [r0]",
            "tst r5, 0x10",
            "str r3, [r7]",
            "beq 0x4cee4",
            "ldr ip, [r0]",
            "mov r2, r6",
            "mov r3, r4",
            "mov r0, 0x19",
            "mov r1, 0",
            "str ip, [sp]",
            "bl rsym.my_error",
            "mvn r0, 0",
            "b 0x4cec4"
        ]
    },
    "sym.imp.symlink": {
        "function_address": "0x0003e320",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x2e4]!"
        ]
    },
    "sym.wild_compare": {
        "function_address": "0x0004a8ec",
        "instructions": [
            "ldr r3, [0x0004abd0]",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r4, [0x0004abd4]",
            "add r3, pc, r3",
            "ldr r7, [r3, r4]",
            "ldr ip, [0x0004abd8]",
            "ldr r4, [0x0004abdc]",
            "ldr ip, [r3, ip]",
            "ldr r6, [r3, r4]",
            "ldrb ip, [ip]",
            "mov r4, r1",
            "ldrb r8, [r6]",
            "ldrb r1, [r7]",
            "mov r5, r2",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "beq 0x4aa84",
            "cmp r5, 0",
            "bne 0x4a9dc",
            "b 0x4a968",
            "mov r2, r4",
            "ldrb r3, [r2], 1",
            "ldrb r4, [r0]",
            "add r0, r0, 1",
            "cmp r4, r3",
            "bne 0x4a9a4",
            "ldrb r3, [r2]",
            "mov r7, r0",
            "cmp r3, 0",
            "mov r4, r2",
            "beq 0x4ab58",
            "cmp r1, r3",
            "beq 0x4aa20",
            "cmp r3, r8",
            "beq 0x4aa7c",
            "cmp r3, ip",
            "bne 0x4a93c",
            "ldrb r3, [r4, 1]",
            "add r2, r4, 1",
            "cmp r3, 0",
            "ldrbeq r3, [r4]",
            "ldrb r4, [r0]",
            "addne r2, r2, 1",
            "cmp r4, r3",
            "add r0, r0, 1",
            "beq 0x4a954",
            "mov r0, 1",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r2, r4",
            "ldrb r3, [r2], 1",
            "ldrb r4, [r0]",
            "cmp r4, r3",
            "bne 0x4a9a4",
            "ldrb r3, [r2]",
            "add r7, r0, 1",
            "cmp r3, 0",
            "beq 0x4ab58",
            "mov r4, r2",
            "mov r0, r7",
            "cmp r1, r3",
            "beq 0x4aa20",
            "cmp r3, r8",
            "beq 0x4aa7c",
            "cmp r3, ip",
            "bne 0x4a9b0",
            "ldrb r3, [r4, 1]",
            "add r2, r4, 1",
            "cmp r3, 0",
            "ldrbeq r3, [r4]",
            "beq 0x4a9b8",
            "ldrb r4, [r0]",
            "cmp r4, ip",
            "bne 0x4a9a4",
            "add r0, r0, 1",
            "add r2, r2, 1",
            "b 0x4a9b8",
            "mov r3, r1",
            "mov r7, r0",
            "cmp r3, 0",
            "beq 0x4ab58",
            "cmp r8, r3",
            "add r4, r4, 1",
            "bne 0x4aa94",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "beq 0x4a9a4",
            "cmp r5, 0",
            "beq 0x4aa58",
            "cmp r3, r1",
            "beq 0x4a9a4",
            "cmp ip, r3",
            "add r0, r0, 1",
            "bne 0x4a924",
            "cmp r5, 0",
            "beq 0x4a924",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "addne r0, r0, 1",
            "b 0x4a924",
            "mov r7, r0",
            "b 0x4aa28",
            "ldrb r0, [r0]",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x4a9a8",
            "cmp r5, 0",
            "beq 0x4aac0",
            "ldrb r2, [r0]",
            "cmp r2, r1",
            "addeq r7, r0, 1",
            "beq 0x4aab4",
            "b 0x4aac0",
            "add r7, r7, 1",
            "ldrb r3, [r7]",
            "cmp r3, r2",
            "beq 0x4aab0",
            "ldrb r6, [r4]",
            "cmp r1, r6",
            "beq 0x4ab0c",
            "cmp r8, r6",
            "bne 0x4ab68",
            "cmp r5, 0",
            "beq 0x4ab00",
            "ldrb r2, [r7]",
            "cmp ip, r2",
            "addne r3, r7, 1",
            "beq 0x4ab38",
            "cmp r2, 0",
            "beq 0x4a9a4",
            "mov r7, r3",
            "add r4, r4, 1",
            "b 0x4aac0",
            "mov r3, r7",
            "ldrb r2, [r3], 1",
            "b 0x4aaec",
            "cmp r5, 0",
            "beq 0x4aaf8",
            "ldrb r3, [r7]",
            "cmp r3, r1",
            "bne 0x4aaf8",
            "add r7, r7, 1",
            "ldrb r3, [r7]",
            "cmp r3, r1",
            "beq 0x4ab20",
            "add r4, r4, 1",
            "b 0x4aac0",
            "ldrb r2, [r7, 1]",
            "add r3, r7, 1",
            "cmp r2, 0",
            "moveq r2, ip",
            "addne r7, r7, 2",
            "beq 0x4aaec",
            "add r4, r4, 1",
            "b 0x4aac0",
            "ldrb r0, [r7]",
            "subs r0, r0, 0",
            "movne r0, 1",
            "b 0x4a9a8",
            "cmp r6, 0",
            "beq 0x4aba8",
            "cmp ip, r6",
            "beq 0x4abb0",
            "add r7, r7, 1",
            "ldrb r3, [r7, -1]",
            "sub r0, r7, 1",
            "cmp r3, 0",
            "beq 0x4a9a4",
            "cmp r6, r3",
            "bne 0x4ab78",
            "mov r1, r4",
            "mov r2, r5",
            "bl rsym.wild_compare",
            "cmp r0, 0",
            "bne 0x4ab78",
            "mov r0, 0",
            "b 0x4a9a8",
            "ldrb r6, [r4, 1]",
            "subs r3, r6, 0",
            "movne r3, 1",
            "cmp r5, 0",
            "movne r3, 0",
            "cmp r3, 0",
            "moveq r6, ip",
            "b 0x4ab78"
        ]
    },
    "rsym.wild_compare": {
        "function_address": "0x0003de40",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x624]!"
        ]
    },
    "method.TaoCrypt::Twofish.SetKey_unsigned_char_const__unsigned_int__TaoCrypt::CipherDir_": {
        "function_address": "0x000bc1e0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub r3, r2, 0x10",
            "ldr r5, [0x000bc9d4]",
            "sub sp, sp, 0x7c",
            "cmp r3, 0x10",
            "str r0, [sp, 0x2c]",
            "mov r6, r2",
            "add r5, pc, r5",
            "bhi 0xbc9b0",
            "cmp r2, 0x10",
            "beq 0xbc99c",
            "cmp r2, 0x19",
            "movlo r0, 0x80000002",
            "movhs r0, 0x80000003",
            "movlo r4, 3",
            "movhs r4, 4",
            "str r0, [sp, 0x34]",
            "movlo r7, 0x18",
            "movhs r7, 0x20",
            "add r2, sp, 0x58",
            "str r2, [sp, 0x28]",
            "mov r3, 0x20",
            "mov r2, r6",
            "ldr r0, [sp, 0x28]",
            "bl sym.imp.__memcpy_chk",
            "ldr r3, [sp, 0x28]",
            "rsb r2, r6, r7",
            "add r0, r3, r6",
            "mov r1, 0",
            "ldr r6, [0x000bc9d8]",
            "bl sym.imp.memset",
            "ldr r7, [0x000bc9dc]",
            "ldr r8, [sp, 0x60]",
            "ldr sl, [sp, 0x58]",
            "ldr r3, [r5, r6]",
            "str r6, [sp]",
            "ldr r6, [sp, 0x70]",
            "ldr ip, [r5, r7]",
            "ldr r2, [sp, 0x5c]",
            "str r7, [sp, 0x30]",
            "str r8, [sp, 0x14]",
            "str sl, [sp, 0xc]",
            "ldr r0, [sp, 0x64]",
            "ldr r7, [sp, 0x68]",
            "ldr r8, [sp, 0x74]",
            "ldr sl, [sp, 0x6c]",
            "str r6, [sp, 0x24]",
            "ldr r6, [sp, 0x2c]",
            "str r2, [sp, 8]",
            "str r5, [sp, 4]",
            "str r0, [sp, 0x10]",
            "str r7, [sp, 0x1c]",
            "str r8, [sp, 0x20]",
            "str sl, [sp, 0x18]",
            "mov r2, 0",
            "mov r1, r3",
            "mov r5, ip",
            "lsl r0, r2, 0x10",
            "orr r0, r0, r2, lsl 8",
            "orr r0, r0, r2",
            "cmp r4, 3",
            "orr r0, r0, r2, lsl 24",
            "beq 0xbc780",
            "cmp r4, 4",
            "beq 0xbc734",
            "lsr r8, r0, 0x10",
            "lsl r7, r0, 0x10",
            "and r8, r8, 0xff",
            "add r7, r3, r7, lsr 24",
            "ldrb r8, [r3, r8]",
            "ldrb sl, [r7, 0x100]",
            "and r7, r0, 0xff",
            "ldrb r7, [r3, r7]",
            "lsl r8, r8, 0x10",
            "add r0, r3, r0, lsr 24",
            "orr r8, r8, sl, lsl 8",
            "ldrb r0, [r0, 0x100]",
            "eor r8, r8, r7",
            "orr r0, r8, r0, lsl 24",
            "ldr r8, [sp, 0x14]",
            "cmp r4, 3",
            "eor r0, r0, r8",
            "lsl r7, r0, 8",
            "lsr r8, r0, 8",
            "add r7, r3, r7, lsr 24",
            "and r8, r8, 0xff",
            "ldrb r7, [r7, 0x100]",
            "ldrb sl, [r3, r8]",
            "and r8, r0, 0xff",
            "lsl r7, r7, 0x10",
            "ldrb r8, [r3, r8]",
            "add r0, r3, r0, lsr 24",
            "orr sl, r7, sl, lsl 8",
            "ldrb r0, [r0, 0x100]",
            "eor sl, sl, r8",
            "orr sl, sl, r0, lsl 24",
            "ldr r0, [sp, 0xc]",
            "eor r7, sl, r0",
            "lsr r8, r7, 8",
            "lsr r0, r7, 0x10",
            "and r8, r8, 0xff",
            "and r0, r0, 0xff",
            "add r8, r8, 0x100",
            "add r0, r0, 0x200",
            "ldr sb, [ip, r8, lsl 2]",
            "ldr sl, [ip, r0, lsl 2]",
            "lsr r8, r7, 0x18",
            "add r0, r2, 1",
            "and r7, r7, 0xff",
            "ldr fp, [ip, r7, lsl 2]",
            "add r8, r8, 0x300",
            "lsl r7, r0, 0x10",
            "orr r7, r7, r0, lsl 8",
            "eor sl, sb, sl",
            "ldr r8, [ip, r8, lsl 2]",
            "eor fp, sl, fp",
            "orr r7, r0, r7",
            "eor fp, fp, r8",
            "orr r0, r7, r0, lsl 24",
            "beq 0xbc6e8",
            "cmp r4, 4",
            "beq 0xbc6a4",
            "lsr r7, r0, 0x10",
            "lsl r8, r0, 0x10",
            "and r7, r7, 0xff",
            "add r8, r1, r8, lsr 24",
            "ldrb r7, [r1, r7]",
            "ldrb sl, [r8, 0x100]",
            "and r8, r0, 0xff",
            "lsl r7, r7, 0x10",
            "ldrb r8, [r1, r8]",
            "add r0, r1, r0, lsr 24",
            "orr sl, r7, sl, lsl 8",
            "ldrb r0, [r0, 0x100]",
            "eor sl, sl, r8",
            "ldr r8, [sp, 0x10]",
            "orr sl, sl, r0, lsl 24",
            "eor r7, sl, r8",
            "lsl r0, r7, 8",
            "lsr r8, r7, 8",
            "add r0, r1, r0, lsr 24",
            "and r8, r8, 0xff",
            "ldrb r0, [r0, 0x100]",
            "ldrb sl, [r1, r8]",
            "and r8, r7, 0xff",
            "lsl r0, r0, 0x10",
            "ldrb r8, [r1, r8]",
            "add r7, r1, r7, lsr 24",
            "orr sl, r0, sl, lsl 8",
            "ldrb r7, [r7, 0x100]",
            "eor sl, sl, r8",
            "orr sl, sl, r7, lsl 24",
            "ldr r7, [sp, 8]",
            "add r2, r2, 2",
            "eor r0, sl, r7",
            "lsr r8, r0, 8",
            "lsr r7, r0, 0x10",
            "and r8, r8, 0xff",
            "and r7, r7, 0xff",
            "add r8, r8, 0x100",
            "add r7, r7, 0x200",
            "lsr sl, r0, 0x18",
            "ldr r8, [r5, r8, lsl 2]",
            "ldr r7, [r5, r7, lsl 2]",
            "and r0, r0, 0xff",
            "ldr r0, [r5, r0, lsl 2]",
            "add sl, sl, 0x300",
            "eor r7, r8, r7",
            "ldr sl, [r5, sl, lsl 2]",
            "eor r7, r7, r0",
            "eor sl, r7, sl",
            "ror sl, sl, 0x18",
            "add r0, fp, sl, lsl 1",
            "ror r0, r0, 0x17",
            "add fp, sl, fp",
            "cmp r2, 0x28",
            "str fp, [r6, 0x38]",
            "str r0, [r6, 0x3c]",
            "add r6, r6, 8",
            "bne 0xbc2c4",
            "ldr r8, [sp, 0x34]",
            "add r7, sp, 0x38",
            "ldr sl, [sp, 0x28]",
            "add r7, r7, r8, lsl 3",
            "ldr r5, [sp, 4]",
            "ldr r3, [0x000bc9e0]",
            "ldr r8, [sp, 8]",
            "ldr r1, [sp, 0xc]",
            "add ip, sl, 0xc",
            "mov r6, 0",
            "lsr r2, r8, 0x18",
            "ands sl, r2, 0x80",
            "movne sl, r3",
            "eor sl, sl, r2, lsl 1",
            "ands r0, r2, 1",
            "movne r0, 0xa6",
            "eor sb, sl, r8, lsr 25",
            "eor sb, sb, r0",
            "orr r2, r2, sl, lsl 16",
            "orr r2, r2, sb, lsl 8",
            "lsl r8, r8, 8",
            "orr r2, r2, sb, lsl 24",
            "orr r8, r8, r1, lsr 24",
            "eor r0, r8, r2",
            "lsr r2, r0, 0x18",
            "ands sl, r2, 0x80",
            "movne sl, r3",
            "eor sl, sl, r2, lsl 1",
            "ands r8, r2, 1",
            "movne r8, 0xa6",
            "eor sb, sl, r0, lsr 25",
            "eor sb, sb, r8",
            "orr r2, r2, sl, lsl 16",
            "lsl r8, r1, 8",
            "orr r2, r2, sb, lsl 8",
            "lsr r8, r8, 0x18",
            "orr r0, r8, r0, lsl 8",
            "orr r8, r2, sb, lsl 24",
            "eor r8, r0, r8",
            "lsr r2, r8, 0x18",
            "ands sl, r2, 0x80",
            "movne sl, r3",
            "eor sl, sl, r2, lsl 1",
            "ands r0, r2, 1",
            "movne r0, 0xa6",
            "eor sb, sl, r8, lsr 25",
            "eor sb, sb, r0",
            "orr r2, r2, sl, lsl 16",
            "lsl r0, r1, 0x10",
            "orr r2, r2, sb, lsl 8",
            "lsr r0, r0, 0x18",
            "orr r8, r0, r8, lsl 8",
            "orr r0, r2, sb, lsl 24",
            "eor r0, r8, r0",
            "lsr r2, r0, 0x18",
            "ands sl, r2, 0x80",
            "movne sl, r3",
            "eor sl, sl, r2, lsl 1",
            "ands r8, r2, 1",
            "eor sb, sl, r0, lsr 25",
            "movne r8, 0xa6",
            "eor r8, sb, r8",
            "orr r2, r2, sl, lsl 16",
            "lsl r1, r1, 0x18",
            "orr r2, r2, r8, lsl 8",
            "lsr r1, r1, 0x18",
            "orr r2, r2, r8, lsl 24",
            "orr r1, r1, r0, lsl 8",
            "eor r0, r1, r2",
            "lsr r2, r0, 0x18",
            "ands r8, r2, 0x80",
            "movne r8, r3",
            "eor r8, r8, r2, lsl 1",
            "ands r1, r2, 1",
            "eor sl, r8, r0, lsr 25",
            "movne r1, 0xa6",
            "eor r1, sl, r1",
            "orr r2, r2, r8, lsl 16",
            "orr r2, r2, r1, lsl 8",
            "orr r1, r2, r1, lsl 24",
            "eor r1, r1, r0, lsl 8",
            "lsr r2, r1, 0x18",
            "ands r8, r2, 0x80",
            "movne r8, r3",
            "eor r8, r8, r2, lsl 1",
            "ands r0, r2, 1",
            "eor sl, r8, r1, lsr 25",
            "movne r0, 0xa6",
            "eor r0, sl, r0",
            "orr r2, r2, r8, lsl 16",
            "orr r2, r2, r0, lsl 8",
            "orr r0, r2, r0, lsl 24",
            "eor r0, r0, r1, lsl 8",
            "lsr r2, r0, 0x18",
            "ands r8, r2, 0x80",
            "movne r8, r3",
            "eor r8, r8, r2, lsl 1",
            "ands r1, r2, 1",
            "eor sl, r8, r0, lsr 25",
            "movne r1, 0xa6",
            "eor r1, sl, r1",
            "orr r2, r2, r8, lsl 16",
            "orr r2, r2, r1, lsl 8",
            "orr r1, r2, r1, lsl 24",
            "eor r1, r1, r0, lsl 8",
            "lsr r2, r1, 0x18",
            "ands r8, r2, 0x80",
            "movne r8, r3",
            "eor r8, r8, r2, lsl 1",
            "ands r0, r2, 1",
            "movne r0, 0xa6",
            "eor sl, r8, r1, lsr 25",
            "eor r0, sl, r0",
            "orr r2, r2, r8, lsl 16",
            "orr r2, r2, r0, lsl 8",
            "orr r0, r2, r0, lsl 24",
            "add r6, r6, 1",
            "eor r1, r0, r1, lsl 8",
            "cmp r6, r4",
            "str r1, [r7], -8",
            "add ip, ip, 8",
            "bhs 0xbc7cc",
            "ldr r8, [ip, -8]",
            "ldr r1, [ip, -0xc]",
            "b 0xbc4d8",
            "lsr r8, r0, 0x10",
            "and r8, r8, 0xff",
            "lsr r7, r0, 8",
            "ldrb sl, [r3, r8]",
            "and r7, r7, 0xff",
            "and r8, r0, 0xff",
            "ldrb r7, [r3, r7]",
            "add r8, r3, r8",
            "add r0, r3, r0, lsr 24",
            "lsl sl, sl, 0x10",
            "ldrb r8, [r8, 0x100]",
            "orr sl, sl, r7, lsl 8",
            "ldrb r0, [r0, 0x100]",
            "eor sl, sl, r8",
            "ldr r7, [sp, 0x20]",
            "orr r0, sl, r0, lsl 24",
            "eor r0, r0, r7",
            "ldm sp, {r8, sl}",
            "ldr r7, [sl, r8]",
            "lsr r8, r0, 0x10",
            "and r8, r8, 0xff",
            "lsl sl, r0, 0x10",
            "ldrb sb, [r7, r8]",
            "add sl, r7, sl, lsr 24",
            "and r8, r0, 0xff",
            "add r8, r7, r8",
            "ldrb sl, [sl, 0x100]",
            "lsl sb, sb, 0x10",
            "ldrb r8, [r8, 0x100]",
            "ldrb r7, [r7, r0, lsr 24]",
            "orr sb, sb, sl, lsl 8",
            "eor sb, sb, r8",
            "orr r0, sb, r7, lsl 24",
            "ldr r7, [sp, 0x18]",
            "eor r0, r0, r7",
            "b 0xbc3c8",
            "ldm sp, {r8, sl}",
            "ldr r7, [sl, r8]",
            "lsr sl, r0, 0x10",
            "and sl, sl, 0xff",
            "lsr r8, r0, 8",
            "ldrb sb, [r7, sl]",
            "and r8, r8, 0xff",
            "and sl, r0, 0xff",
            "ldrb r8, [r7, r8]",
            "add sl, r7, sl",
            "add r0, r7, r0, lsr 24",
            "lsl sb, sb, 0x10",
            "ldrb r7, [sl, 0x100]",
            "orr sb, sb, r8, lsl 8",
            "ldrb r0, [r0, 0x100]",
            "eor sb, sb, r7",
            "ldr r7, [sp, 0x24]",
            "orr r0, sb, r0, lsl 24",
            "eor r0, r0, r7",
            "ldm sp, {r8, sl}",
            "lsl sb, r0, 0x10",
            "ldr r7, [sl, r8]",
            "lsr r8, r0, 0x10",
            "and r8, r8, 0xff",
            "ldrb sl, [r7, r8]",
            "add sb, r7, sb, lsr 24",
            "and r8, r0, 0xff",
            "add r8, r7, r8",
            "ldrb sb, [sb, 0x100]",
            "lsl sl, sl, 0x10",
            "ldrb r8, [r8, 0x100]",
            "ldrb r7, [r7, r0, lsr 24]",
            "orr sl, sl, sb, lsl 8",
            "eor sl, sl, r8",
            "orr sl, sl, r7, lsl 24",
            "ldr r7, [sp, 0x1c]",
            "eor r0, sl, r7",
            "b 0xbc2e4",
            "ldr r2, [sp, 0x2c]",
            "ldr r3, [sp, 0x30]",
            "ldr r8, [sp]",
            "ldr r6, [sp, 0x50]",
            "ldr r7, [sp, 0x48]",
            "add r0, r2, 0x4d0",
            "ldr ip, [r5, r3]",
            "ldr sb, [sp, 0x40]",
            "ldr fp, [sp, 0x38]",
            "ldr r1, [r5, r8]",
            "str r6, [sp, 0xc]",
            "str r7, [sp, 8]",
            "add r0, r0, 8",
            "mov r2, 0",
            "str r5, [sp, 4]",
            "lsl r3, r2, 0x10",
            "orr r3, r3, r2, lsl 8",
            "orr r3, r3, r2",
            "cmp r4, 3",
            "orr r3, r3, r2, lsl 24",
            "beq 0xbc950",
            "cmp r4, 4",
            "beq 0xbc900",
            "lsr r5, r3, 0x10",
            "lsl r6, r3, 0x10",
            "and r5, r5, 0xff",
            "add r6, r1, r6, lsr 24",
            "ldrb r5, [r1, r5]",
            "and r8, r3, 0xff",
            "ldrb r7, [r6, 0x100]",
            "lsl r5, r5, 0x10",
            "ldrb r6, [r1, r8]",
            "add r3, r1, r3, lsr 24",
            "orr r7, r5, r7, lsl 8",
            "ldrb r3, [r3, 0x100]",
            "eor r7, r7, r6",
            "orr r7, r7, r3, lsl 24",
            "eor r5, r7, sb",
            "lsl r3, r5, 8",
            "lsr r6, r5, 8",
            "add r3, r1, r3, lsr 24",
            "and r6, r6, 0xff",
            "ldrb r3, [r3, 0x100]",
            "ldrb r7, [r1, r6]",
            "and r8, r5, 0xff",
            "lsl r3, r3, 0x10",
            "ldrb r6, [r1, r8]",
            "add r5, r1, r5, lsr 24",
            "orr r7, r3, r7, lsl 8",
            "ldrb r5, [r5, 0x100]",
            "eor r7, r7, r6",
            "orr r7, r7, r5, lsl 24",
            "eor r3, r7, fp",
            "lsr r7, r3, 8",
            "lsr r6, r3, 0x10",
            "lsr r5, r3, 0x18",
            "and r7, r7, 0xff",
            "and r6, r6, 0xff",
            "add r7, r7, 0x100",
            "add r6, r6, 0x200",
            "add r5, r5, 0x300",
            "and r3, r3, 0xff",
            "ldr r3, [ip, r3, lsl 2]",
            "ldr r7, [ip, r7, lsl 2]",
            "ldr r6, [ip, r6, lsl 2]",
            "ldr r5, [ip, r5, lsl 2]",
            "add r2, r2, 1",
            "cmp r2, 0x100",
            "str r3, [r0, -0x400]",
            "str r7, [r0]",
            "str r6, [r0, 0x400]",
            "str r5, [r0, 0x800]",
            "add r0, r0, 4",
            "bne 0xbc808",
            "add sp, sp, 0x7c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r6, [sp, 4]",
            "ldr sl, [sp]",
            "lsr r7, r3, 0x10",
            "ldr r5, [r6, sl]",
            "and r7, r7, 0xff",
            "lsr r6, r3, 8",
            "ldrb r8, [r5, r7]",
            "and r6, r6, 0xff",
            "and r7, r3, 0xff",
            "ldrb r6, [r5, r6]",
            "add r7, r5, r7",
            "ldrb r7, [r7, 0x100]",
            "add r5, r5, r3, lsr 24",
            "lsl r8, r8, 0x10",
            "orr r8, r8, r6, lsl 8",
            "ldrb r3, [r5, 0x100]",
            "eor r8, r8, r7",
            "ldr r7, [sp, 0xc]",
            "orr r3, r8, r3, lsl 24",
            "eor r3, r3, r7",
            "ldm sp, {r8, sl}",
            "lsr r7, r3, 0x10",
            "ldr r5, [sl, r8]",
            "lsl r6, r3, 0x10",
            "and r7, r7, 0xff",
            "add r6, r5, r6, lsr 24",
            "ldrb r7, [r5, r7]",
            "and sl, r3, 0xff",
            "ldrb r8, [r6, 0x100]",
            "add sl, r5, sl",
            "lsl r7, r7, 0x10",
            "ldrb r6, [sl, 0x100]",
            "ldrb r5, [r5, r3, lsr 24]",
            "orr r7, r7, r8, lsl 8",
            "eor r7, r7, r6",
            "orr r7, r7, r5, lsl 24",
            "ldr r5, [sp, 8]",
            "eor r3, r7, r5",
            "b 0xbc828",
            "mov r7, 0x80000001",
            "str r7, [sp, 0x34]",
            "mov r4, 2",
            "mov r7, r2",
            "b 0xbc22c",
            "ldr r3, [0x000bc9e4]",
            "ldr r1, [0x000bc9e8]",
            "ldr r0, [0x000bc9ec]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x8e",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::DES::set_encryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007dcdc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "add r0, r4, 0x38",
            "mov r2, 8",
            "mov r3, 0",
            "bl rsym._ZN8TaoCrypt8BasicDES6SetKeyEPKhjNS_9CipherDirE",
            "mov r1, r5",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_like_range_simple": {
        "function_address": "0x0005e110",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc",
            "ldr r5, [sp, 0x3c]",
            "mov r4, r1",
            "add r7, r1, r2",
            "ldr r1, [sp, 0x38]",
            "str r0, [sp]",
            "add r6, r5, r1",
            "cmp r5, r6",
            "cmpne r4, r7",
            "mov sl, r3",
            "ldr r8, [sp, 0x40]",
            "ldrb fp, [sp, 0x30]",
            "ldrb sb, [sp, 0x34]",
            "ldr r1, [r0, 0x58]",
            "beq 0x5e378",
            "ldr r0, [sp, 0x38]",
            "bl fcn.000bed20",
            "cmp r0, 0",
            "beq 0x5e378",
            "add r3, r5, 1",
            "str r5, [sp, 4]",
            "add r2, r8, 1",
            "mov r5, sb",
            "b 0x5e1b8",
            "cmp r1, fp",
            "beq 0x5e2d0",
            "cmp r1, r5",
            "beq 0x5e304",
            "strb r1, [r2, -1]",
            "mov ip, r4",
            "strb r1, [r3, -1]",
            "mov r8, r2",
            "mov r1, r3",
            "add r4, ip, 1",
            "cmp r7, r4",
            "cmpne r6, r3",
            "beq 0x5e1fc",
            "subs r0, r0, 1",
            "add r3, r3, 1",
            "add r2, r2, 1",
            "beq 0x5e2f4",
            "ldrb r1, [r4]",
            "sub sb, r2, 1",
            "cmp r1, sl",
            "sub r8, r3, 1",
            "bne 0x5e174",
            "add ip, r4, 1",
            "cmp ip, r7",
            "beq 0x5e174",
            "ldrb r4, [r4, 1]",
            "mov r1, r3",
            "strb r4, [r2, -1]",
            "strb r4, [r3, -1]",
            "add r4, ip, 1",
            "cmp r7, r4",
            "cmpne r6, r3",
            "mov r8, r2",
            "bne 0x5e1a8",
            "ldr r5, [sp, 4]",
            "rsb r2, r5, r3",
            "mov r5, r3",
            "ldr r3, [sp, 0x48]",
            "cmp r6, r5",
            "str r2, [r3]",
            "ldr ip, [sp, 0x44]",
            "str r2, [ip]",
            "beq 0x5e2c0",
            "orr r3, r5, r8",
            "tst r3, 3",
            "add r1, r8, 4",
            "add r3, r5, 4",
            "movne r2, 0",
            "moveq r2, 1",
            "rsb ip, r5, r6",
            "cmp r8, r3",
            "cmpls r5, r1",
            "movls r3, 0",
            "movhi r3, 1",
            "cmp ip, 3",
            "movls r2, 0",
            "andhi r2, r2, 1",
            "ands r3, r2, r3",
            "beq 0x5e358",
            "lsr r0, ip, 2",
            "lsls r4, r0, 2",
            "beq 0x5e2a0",
            "mov r3, 0",
            "ldr r1, [0x0005e380]",
            "mov r2, r3",
            "add r2, r2, 1",
            "cmp r2, r0",
            "str r1, [r8, r3]",
            "str r1, [r5, r3]",
            "add r3, r3, 4",
            "blo 0x5e278",
            "cmp ip, r4",
            "add r5, r5, r4",
            "add r8, r8, r4",
            "beq 0x5e2c0",
            "mov r3, 0",
            "mov r2, 0x20",
            "strb r2, [r8, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r1, r5, r3",
            "cmp r6, r1",
            "bne 0x5e2a8",
            "mov r0, 0",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov ip, 0",
            "strb ip, [r3, -1]",
            "ldr ip, [sp]",
            "mov r8, r2",
            "ldrh r1, [ip, 0x5e]",
            "mov ip, r4",
            "strb r1, [r2, -1]",
            "mov r1, r3",
            "b 0x5e198",
            "ldr r5, [sp, 4]",
            "rsb r2, r5, r1",
            "mov r5, r1",
            "b 0x5e208",
            "ldm sp, {r1, r5}",
            "ldr r3, [r1, 0xc]",
            "ldr r2, [sp, 0x44]",
            "tst r3, 0x10",
            "ldreq r5, [sp, 0x38]",
            "rsbne r5, r5, r8",
            "str r5, [r2]",
            "ldr r1, [sp, 0x48]",
            "ldr ip, [sp, 0x38]",
            "mov r3, 0",
            "str ip, [r1]",
            "ldr r0, [sp]",
            "mov r1, r3",
            "strb r1, [r8, r3]",
            "ldrh r2, [r0, 0x5e]",
            "strb r2, [sb, r3]",
            "add r3, r3, 1",
            "add r2, r8, r3",
            "cmp r6, r2",
            "bne 0x5e338",
            "b 0x5e2c0",
            "mov r2, 0x20",
            "strb r2, [r8, r3]",
            "strb r2, [r5, r3]",
            "add r3, r3, 1",
            "add r1, r5, r3",
            "cmp r6, r1",
            "bne 0x5e35c",
            "b 0x5e2c0",
            "mov r2, 0",
            "b 0x5e208"
        ]
    },
    "sym.yaSSL_accept": {
        "function_address": "0x00086060",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0x50",
            "beq 0x862b0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9GetAcceptEv",
            "ldr r3, [r0]",
            "cmp r3, 5",
            "addls pc, pc, r3, lsl 2",
            "b 0x862a8",
            "b 0x860a8",
            "b 0x860d4",
            "b 0x86118",
            "b 0x86150",
            "b 0x86198",
            "b 0x861d0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x860d4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9UseAcceptEv",
            "mov r3, 1",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL15sendServerHelloERNS_3SSLENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "subs r5, r0, 0",
            "beq 0x862c0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x86118",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9UseAcceptEv",
            "mov r3, 2",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "beq 0x8626c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x86150",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9UseAcceptEv",
            "mov r3, 3",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL16sendChangeCipherERNS_3SSLENS_12BufferOutputE",
            "mov r1, 0",
            "mov r2, r1",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12sendFinishedERNS_3SSLENS_13ConnectionEndENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11flushBufferEv",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x86198",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9UseAcceptEv",
            "mov r3, 4",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "bne 0x86228",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x861d0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States9UseAcceptEv",
            "mov r3, 5",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket6get_fdEv",
            "mov r2, 0",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3Log7ShowTCPEib",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x8628c",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "mov r0, r4",
            "bne 0x861ac",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "mov r0, r4",
            "cmp r3, 2",
            "ble 0x86214",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x861d0",
            "b 0x861bc",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "mov r0, r4",
            "bne 0x8612c",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9getServerEv",
            "ldr r3, [r0]",
            "mov r0, r4",
            "cmp r3, 2",
            "ble 0x86258",
            "b 0x8612c",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Errors3AddEi",
            "mvn r0, 0",
            "b 0x8620c",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x86074",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL15sendCertificateERNS_3SSLENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "ldrb r3, [r0, 0x128]",
            "cmp r3, 0",
            "bne 0x86324",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager10verifyPeerEv",
            "cmp r0, 0",
            "bne 0x86314",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL19sendServerHelloDoneERNS_3SSLENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11flushBufferEv",
            "b 0x860f4",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL22sendCertificateRequestERNS_3SSLENS_12BufferOutputE",
            "b 0x862fc",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL21sendServerKeyExchangeERNS_3SSLENS_12BufferOutputE",
            "b 0x862e4"
        ]
    },
    "rsym._ZNK5yaSSL6States9GetAcceptEv": {
        "function_address": "0x0003ff28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x34]!"
        ]
    },
    "rsym._ZN5yaSSL6States9UseAcceptEv": {
        "function_address": "0x0003ef50",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xac4]!"
        ]
    },
    "rsym._ZN5yaSSL15sendServerHelloERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003fa24",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x38c]!"
        ]
    },
    "rsym._ZN5yaSSL16sendChangeCipherERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003cf7c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xffc]!"
        ]
    },
    "rsym._ZN5yaSSL12sendFinishedERNS_3SSLENS_13ConnectionEndENS_12BufferOutputE": {
        "function_address": "0x0003f520",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x6e4]!"
        ]
    },
    "rsym._ZN5yaSSL3SSL11flushBufferEv": {
        "function_address": "0x0003f6d0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5c4]!"
        ]
    },
    "rsym._ZN5yaSSL3Log7ShowTCPEib": {
        "function_address": "0x0003f6e8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x5b4]!"
        ]
    },
    "rsym._ZN5yaSSL6Errors3AddEi": {
        "function_address": "0x0003f904",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x44c]!"
        ]
    },
    "rsym._ZN5yaSSL15sendCertificateERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003cd6c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x15c]!"
        ]
    },
    "rsym._ZN5yaSSL19sendServerHelloDoneERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003d12c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xedc]!"
        ]
    },
    "rsym._ZN5yaSSL22sendCertificateRequestERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003f394",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7ec]!"
        ]
    },
    "rsym._ZN5yaSSL21sendServerKeyExchangeERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003e4ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x1dc]!"
        ]
    },
    "sym.TaoCrypt::Signer::Signer_unsigned_char_const__unsigned_int__char_const__unsigned_char_const_": {
        "function_address": "0x0009a360",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, r3",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt9PublicKeyC1EPKhj",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "mov r1, r6",
            "mov r2, r0",
            "mov r5, r0",
            "add r0, r4, 8",
            "bl sym.imp.memcpy",
            "add r5, r4, r5",
            "mov r3, 0",
            "strb r3, [r5, 8]",
            "ldr r1, [sp, 0x10]",
            "add r0, r4, 0x208",
            "mov r2, 0x14",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.my_load_defaults": {
        "function_address": "0x0004f518",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x7c",
            "mov ip, 0",
            "add r8, sp, 0x24",
            "mov sl, r0",
            "mov r5, r1",
            "mov r0, r8",
            "mov r1, 0x200",
            "mov r4, r2",
            "mov r2, ip",
            "mov r6, r3",
            "str ip, [sp, 0x74]",
            "bl rsym.init_alloc_root",
            "mov r0, r8",
            "bl fcn.0004e16c",
            "ldr r7, [0x0004f8dc]",
            "cmp r0, 0",
            "str r0, [sp, 0x1c]",
            "add r7, pc, r7",
            "beq 0x4f858",
            "ldr sb, [r4]",
            "cmp sb, 1",
            "ble 0x4f590",
            "ldr r3, [r6]",
            "ldr r1, [0x0004f8e0]",
            "ldr r0, [r3, 4]",
            "add r1, r7, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x4f7a8",
            "ldr r2, [r5]",
            "ldr r3, [0x0004f8e4]",
            "cmp r2, 0",
            "add r3, r7, r3",
            "mov r2, 0",
            "str r2, [sp, 0x58]",
            "str r3, [sp, 0x5c]",
            "str r5, [sp, 0x60]",
            "beq 0x4f5cc",
            "mov r3, 1",
            "ldr r2, [r5, r3, lsl 2]",
            "str r3, [sp, 0x58]",
            "cmp r2, 0",
            "add r3, r3, 1",
            "bne 0x4f5b8",
            "add r2, sp, 0x44",
            "str r2, [sp, 0x14]",
            "mov r0, r2",
            "mov ip, 0x20",
            "mov r3, sb",
            "mov r1, 4",
            "mov r2, 0",
            "str ip, [sp]",
            "bl rsym.init_dynamic_array2",
            "cmp r0, 0",
            "str r0, [sp, 0x10]",
            "bne 0x4f858",
            "add ip, sp, 0x58",
            "str ip, [sp, 0x70]",
            "add ip, sp, 0x68",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x14]",
            "ldr lr, [0x0004f8e8]",
            "str ip, [sp, 0x6c]",
            "ldr ip, [sp, 0x1c]",
            "add lr, r7, lr",
            "mov r0, sl",
            "mov r1, r4",
            "mov r2, r6",
            "add r3, sp, 0x74",
            "str lr, [sp]",
            "str ip, [sp, 8]",
            "str r8, [sp, 0x68]",
            "bl rsym.my_search_option_files",
            "ldr r1, [sp, 0x48]",
            "ldr r3, [r4]",
            "add r1, r1, 9",
            "add r1, r1, r3",
            "mov sl, r0",
            "lsl r1, r1, 2",
            "mov r0, r8",
            "bl rsym.alloc_root",
            "subs r5, r0, 0",
            "beq 0x4f858",
            "ldr r3, [r6]",
            "add r2, r5, 0x20",
            "ldr r3, [r3]",
            "str r2, [sp, 0x18]",
            "str r3, [r5, 0x20]",
            "ldr r2, [sp, 0x48]",
            "add r0, r5, 0x24",
            "lsl r2, r2, 2",
            "ldr r1, [sp, 0x44]",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 0x74]",
            "ldr r2, [r4]",
            "rsb r2, r3, r2",
            "str r2, [r4]",
            "ldr fp, [r6]",
            "add fp, fp, r3, lsl 2",
            "str fp, [r6]",
            "ldr sb, [r4]",
            "cmp sb, 1",
            "ble 0x4f6f0",
            "ldr r1, [0x0004f8ec]",
            "ldr r0, [fp, 4]",
            "add r1, r7, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x4f780",
            "sub sb, sb, 1",
            "str sb, [r4]",
            "ldr fp, [r6]",
            "mov r3, 1",
            "add fp, fp, 4",
            "str r3, [sp, 0x10]",
            "str fp, [r6]",
            "ldr sb, [r4]",
            "cmp sb, 0",
            "bne 0x4f780",
            "ldr r3, [sp, 0x48]",
            "ldr r2, [sp, 0x18]",
            "add sb, sb, r3",
            "mov r3, 0",
            "str r3, [r2, sb, lsl 2]",
            "ldr lr, [r4]",
            "ldr ip, [sp, 0x48]",
            "ldm r8!, {r0, r1, r2, r3}",
            "add ip, lr, ip",
            "str ip, [r4]",
            "ldr ip, [sp, 0x18]",
            "str ip, [r6]",
            "mov ip, r5",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r8, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "ldr r0, [sp, 0x14]",
            "bl rsym.delete_dynamic",
            "ldr r2, [sp, 0x10]",
            "cmp r2, 0",
            "bne 0x4f87c",
            "ldr ip, [sp, 0xa0]",
            "rsbs r3, sl, 1",
            "movlo r3, 0",
            "cmp ip, 0",
            "moveq r3, 0",
            "cmp r3, 0",
            "ldrne r2, [sp, 0x1c]",
            "strne r2, [ip]",
            "ldrne sl, [sp, 0x10]",
            "mov r0, sl",
            "add sp, sp, 0x7c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r0, [sp, 0x48]",
            "ldr ip, [sp, 0x18]",
            "sub r2, sb, 1",
            "add r0, r0, 1",
            "add r0, ip, r0, lsl 2",
            "add r1, fp, 4",
            "lsl r2, r2, 2",
            "bl sym.imp.memcpy",
            "ldr sb, [r4]",
            "b 0x4f6f8",
            "add r1, sb, 9",
            "lsl r1, r1, 2",
            "mov r0, r8",
            "bl rsym.alloc_root",
            "subs ip, r0, 0",
            "beq 0x4f858",
            "ldr r3, [r6]",
            "add r7, ip, 0x20",
            "ldr r3, [r3]",
            "str r3, [ip, 0x20]",
            "ldr r3, [r4]",
            "cmp r3, 2",
            "movls r3, 4",
            "bls 0x4f810",
            "mov r2, ip",
            "mov r3, 2",
            "ldr r1, [r6]",
            "ldr r1, [r1, r3, lsl 2]",
            "add r3, r3, 1",
            "str r1, [r2, 0x24]",
            "ldr r1, [r4]",
            "add r2, r2, 4",
            "cmp r1, r3",
            "bhi 0x4f7e8",
            "sub r3, r3, 1",
            "lsl r3, r3, 2",
            "mov sl, 0",
            "str sl, [r7, r3]",
            "ldr r5, [r4]",
            "ldm r8!, {r0, r1, r2, r3}",
            "sub r5, r5, 1",
            "str r5, [r4]",
            "mov r4, ip",
            "str r7, [r6]",
            "stm r4!, {r0, r1, r2, r3}",
            "ldr r2, [sp, 0xa0]",
            "cmp r2, sl",
            "ldm r8, {r0, r1, r2, r3}",
            "stm r4, {r0, r1, r2, r3}",
            "ldreq sl, [sp, 0xa0]",
            "ldrne r3, [sp, 0x1c]",
            "ldrne ip, [sp, 0xa0]",
            "strne r3, [ip]",
            "b 0x4f770",
            "ldr r3, [0x0004f8f0]",
            "ldr r2, [0x0004f8f4]",
            "ldr r3, [r7, r3]",
            "add r2, r7, r2",
            "ldr r0, [r3]",
            "mov r1, 1",
            "bl sym.imp.__fprintf_chk",
            "mov r0, 1",
            "bl sym.imp.exit",
            "ldr r3, [r6]",
            "ldr r1, [0x0004f8f8]",
            "ldr r8, [0x0004f8fc]",
            "ldr r2, [r3]",
            "add r1, r7, r1",
            "mov r0, 1",
            "bl sym.imp.__printf_chk",
            "mov r5, 1",
            "add r8, r7, r8",
            "b 0x4f8bc",
            "ldr r3, [r6]",
            "mov r0, 1",
            "ldr r2, [r3, r5, lsl 2]",
            "mov r1, r8",
            "bl sym.imp.__printf_chk",
            "add r5, r5, 1",
            "ldr r3, [r4]",
            "cmp r5, r3",
            "blt 0x4f8a4",
            "ldr r0, [0x0004f900]",
            "add r0, r7, r0",
            "bl sym.imp.puts",
            "mov r0, 0",
            "bl sym.imp.exit"
        ]
    },
    "fcn.0004e16c": {
        "function_address": "0x0004e16c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r1, 0x1c",
            "mov r6, r0",
            "bl rsym.alloc_root",
            "ldr r5, [0x0004e264]",
            "subs r4, r0, 0",
            "add r5, pc, r5",
            "beq 0x4e258",
            "mov r2, 0",
            "mov r3, r4",
            "str r2, [r3], 4",
            "add r3, r3, 4",
            "str r2, [r4, 4]",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "str r2, [r3], 4",
            "ldr r1, [0x0004e268]",
            "str r2, [r3], 4",
            "str r2, [r3]",
            "add r1, r5, r1",
            "mov r2, r4",
            "mov r0, r6",
            "bl fcn.0004e118",
            "ldr r1, [0x0004e26c]",
            "mov r7, r0",
            "mov r2, r4",
            "add r1, r5, r1",
            "mov r0, r6",
            "bl fcn.0004e118",
            "ldr r1, [0x0004e270]",
            "add r7, r0, r7",
            "add r1, r5, r1",
            "mov r2, r4",
            "mov r0, r6",
            "bl fcn.0004e118",
            "add r7, r7, r0",
            "ldr r0, [0x0004e274]",
            "add r0, r5, r0",
            "bl sym.imp.getenv",
            "subs r1, r0, 0",
            "beq 0x4e220",
            "mov r0, r6",
            "mov r2, r4",
            "bl fcn.0004e118",
            "add r7, r7, r0",
            "ldr r1, [0x0004e278]",
            "mov r2, r4",
            "add r1, r5, r1",
            "mov r0, r6",
            "bl fcn.0004e118",
            "ldr r1, [0x0004e27c]",
            "add r7, r0, r7",
            "mov r2, r4",
            "add r1, r5, r1",
            "mov r0, r6",
            "bl fcn.0004e118",
            "add r7, r7, r0",
            "cmp r7, 0",
            "movgt r4, 0",
            "mov r0, r4",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "rsym.my_search_option_files": {
        "function_address": "0x0003efa4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xa8c]!"
        ]
    },
    "method.TaoCrypt::SHA512.operator_TaoCrypt::SHA512_const_": {
        "function_address": "0x000b39ec",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0xd4",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt6SHA512C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt6SHA5124SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0xd4",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA512C1ERKS0_": {
        "function_address": "0x0003dff0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x504]!"
        ]
    },
    "rsym._ZN8TaoCrypt6SHA5124SwapERS0_": {
        "function_address": "0x000405ac",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xbdc]!"
        ]
    },
    "sym.my_strntoul_ucs2": {
        "function_address": "0x00069f48",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "add sl, r1, r2",
            "ldr r2, [sp, 0x44]",
            "mov ip, 0",
            "str ip, [r2]",
            "mov r5, r0",
            "mov r7, r3",
            "mov r4, r1",
            "str ip, [sp, 4]",
            "add r8, sp, 0x14",
            "mov r2, r4",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a18c",
            "ldr r3, [sp, 0x14]",
            "sub r3, r3, 9",
            "cmp r3, 0x24",
            "addls pc, pc, r3, lsl 2",
            "b 0x6a058",
            "b 0x6a050",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a050",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a058",
            "b 0x6a050",
            "b 0x6a058",
            "b 0x6a044",
            "ldr r3, [sp, 4]",
            "eor r3, r3, 1",
            "str r3, [sp, 4]",
            "add r4, r4, r0",
            "b 0x69f74",
            "mov r1, r7",
            "mvn r0, 0",
            "bl fcn.000bed20",
            "mov r1, r7",
            "mov sb, r0",
            "mvn r0, 0",
            "bl fcn.000bee1c",
            "mov r6, 0",
            "str r1, [sp, 8]",
            "str r4, [sp, 0xc]",
            "mov fp, r6",
            "ldr ip, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, r4",
            "mov r3, sl",
            "ldr ip, [ip, 0x20]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "ble 0x6a118",
            "ldr r2, [sp, 0x14]",
            "add r4, r4, r0",
            "sub r3, r2, 0x30",
            "cmp r3, 9",
            "bls 0x6a0e4",
            "sub r3, r2, 0x41",
            "cmp r3, 0x19",
            "subls r3, r2, 0x37",
            "strls r3, [sp, 0x14]",
            "bls 0x6a0e8",
            "sub r3, r2, 0x61",
            "cmp r3, 0x19",
            "bhi 0x6a11c",
            "sub r3, r2, 0x57",
            "str r3, [sp, 0x14]",
            "cmp r7, r3",
            "ble 0x6a11c",
            "cmp r6, sb",
            "bhi 0x6a110",
            "beq 0x6a104",
            "mla r6, r7, r6, r3",
            "b 0x6a084",
            "ldr ip, [sp, 8]",
            "cmp ip, r3",
            "bhs 0x6a0fc",
            "mov fp, 1",
            "b 0x6a084",
            "beq 0x6a16c",
            "ldr r2, [sp, 0x40]",
            "cmp r2, 0",
            "strne r4, [r2]",
            "ldr r3, [sp, 0xc]",
            "cmp r3, r4",
            "beq 0x6a1b4",
            "cmp fp, 0",
            "beq 0x6a15c",
            "ldr r2, [sp, 0x44]",
            "mov r3, 0x22",
            "str r3, [r2]",
            "mvn r6, 0",
            "mov r0, r6",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [sp, 4]",
            "cmp r3, 0",
            "rsbne r6, r6, 0",
            "b 0x6a14c",
            "ldr r2, [sp, 0x40]",
            "mov r3, 0x54",
            "cmp r2, 0",
            "strne r4, [r2]",
            "ldr ip, [sp, 0x44]",
            "mov r6, 0",
            "str r3, [ip]",
            "b 0x6a14c",
            "ldr ip, [sp, 0x40]",
            "mov r6, 0",
            "cmp ip, 0",
            "strne r4, [ip]",
            "ldr r2, [sp, 0x44]",
            "cmp r0, 0",
            "moveq r0, 0x54",
            "movne r0, 0x21",
            "str r0, [r2]",
            "b 0x6a14c",
            "ldr ip, [sp, 0x44]",
            "mov r3, 0x21",
            "str r3, [ip]",
            "mov r6, 0",
            "b 0x6a14c"
        ]
    },
    "sym.mysql_stmt_store_result": {
        "function_address": "0x00042fc4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x2c]",
            "ldr sb, [0x000432f0]",
            "cmp r3, 0",
            "sub sp, sp, 0x2c",
            "mov r4, r0",
            "add sb, pc, sb",
            "beq 0x43244",
            "ldr r6, [r0, 0xa8]",
            "ldr r3, [r3, 0x3a8]",
            "cmp r6, 0",
            "str r3, [sp, 0x14]",
            "beq 0x431dc",
            "ldr r3, [r0, 0xac]",
            "cmp r3, 2",
            "ble 0x43224",
            "ldr r3, [r0, 0xa0]",
            "cmp r3, 0",
            "bne 0x431ec",
            "ldr r2, [sp, 0x14]",
            "ldr ip, [r2, 0x380]",
            "cmp ip, 0",
            "beq 0x431f4",
            "cmp ip, 1",
            "bne 0x43200",
            "ldrb r3, [r4, 0x2ba]",
            "cmp r3, 0",
            "beq 0x43040",
            "ldrb r1, [r4, 0x2b8]",
            "cmp r1, 0",
            "beq 0x43260",
            "ldr ip, [sp, 0x14]",
            "mov r0, r4",
            "ldr r3, [ip, 0x3b0]",
            "ldr ip, [r3, 0x24]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x432bc",
            "ldrb r3, [r4, 0x2ba]",
            "cmp r3, 0",
            "beq 0x4311c",
            "ldr fp, [r4, 0x40]",
            "cmp fp, 0",
            "beq 0x43120",
            "add r3, sp, 0x24",
            "str r3, [sp, 0x10]",
            "ldr r3, [r4, 0xa8]",
            "ldr r5, [r4, 0x34]",
            "ldr r8, [fp, 4]",
            "add sl, r5, r3, lsl 6",
            "add r3, r3, 9",
            "add r3, r8, r3, lsr 3",
            "str r3, [sp, 0x24]",
            "cmp r5, sl",
            "ldr r7, [r4, 0x38]",
            "bhs 0x43110",
            "mov r6, 4",
            "b 0x430d0",
            "lsl r6, r6, 1",
            "ands r6, r6, 0xff",
            "add r5, r5, 0x40",
            "addeq r8, r8, 1",
            "moveq r6, 1",
            "cmp sl, r5",
            "bls 0x43110",
            "add r7, r7, 0x54",
            "ldrb r3, [r8]",
            "tst r6, r3",
            "bne 0x430b0",
            "mov r0, r5",
            "mov r1, r7",
            "ldr r2, [sp, 0x10]",
            "lsl r6, r6, 1",
            "ldr ip, [r5, 0x1c]",
            "mov lr, pc",
            "bx ip",
            "ands r6, r6, 0xff",
            "add r5, r5, 0x40",
            "addeq r8, r8, 1",
            "moveq r6, 1",
            "cmp sl, r5",
            "bhi 0x430cc",
            "ldr fp, [fp]",
            "cmp fp, 0",
            "bne 0x43080",
            "ldr fp, [r4, 0x40]",
            "ldr r2, [0x000432f4]",
            "str fp, [r4, 0x78]",
            "add sb, sb, r2",
            "add r2, r4, 0x68",
            "ldm r2, {r1, r2}",
            "str r1, [r4, 0x80]",
            "str r2, [r4, 0x84]",
            "ldr ip, [sp, 0x14]",
            "mov r3, 0",
            "str r1, [ip, 0x2b8]",
            "str r2, [ip, 0x2bc]",
            "mov r0, r3",
            "str sb, [r4, 0x7c]",
            "str r3, [ip, 0x380]",
            "str r3, [ip, 0x3b8]",
            "b 0x431e0",
            "ldr r5, [r0, 0x90]",
            "mov r1, 0x1c",
            "mvn lr, 0",
            "mov r0, r2",
            "lsr sl, r5, 0x18",
            "lsr r7, r5, 8",
            "lsr r8, r5, 0x10",
            "mov r6, 1",
            "add r2, sp, r1",
            "mov r3, 8",
            "strb r7, [sp, 0x1d]",
            "strb r8, [sp, 0x1e]",
            "strb sl, [sp, 0x1f]",
            "strb lr, [sp, 0x23]",
            "str ip, [sp, 4]",
            "strb r5, [sp, 0x1c]",
            "strb lr, [sp, 0x20]",
            "strb lr, [sp, 0x21]",
            "strb lr, [sp, 0x22]",
            "str ip, [sp]",
            "str r6, [sp, 8]",
            "str r4, [sp, 0xc]",
            "bl rsym.cli_advanced_command",
            "cmp r0, 0",
            "beq 0x43028",
            "ldr r3, [r4, 0x2c]",
            "cmp r3, 0",
            "beq 0x431ec",
            "mov r0, r4",
            "ldr r1, [sp, 0x14]",
            "bl rsym.set_stmt_errmsg",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, 1",
            "b 0x431e0",
            "ldr r3, [r0, 0x9c]",
            "tst r3, 0x40",
            "bne 0x43160",
            "ldr r3, [0x000432f8]",
            "mov r0, r4",
            "ldr r3, [sb, r3]",
            "ldr r1, [0x000432fc]",
            "ldr r2, [r3]",
            "mov r3, 0",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x431e0",
            "ldr r3, [0x000432f8]",
            "ldr r1, [0x000432fc]",
            "ldr r2, [sb, r3]",
            "mov r3, 0",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x431e0",
            "ldr r2, [0x000432f8]",
            "ldr r1, [0x00043300]",
            "ldr r2, [sb, r2]",
            "ldr r2, [r2]",
            "bl rsym.set_stmt_error",
            "mov r0, 1",
            "b 0x431e0",
            "ldr r2, [r4, 0xa8]",
            "ldr r0, [r4, 0x34]",
            "lsl r2, r2, 6",
            "bl sym.imp.memset",
            "ldr r1, [r4, 0x34]",
            "ldr r3, [r4, 0xa8]",
            "add r3, r1, r3, lsl 6",
            "cmp r1, r3",
            "bhs 0x432a4",
            "mov r0, 6",
            "mov r2, 1",
            "str r0, [r1, 0x34]",
            "str r2, [r1, 0x20]",
            "add r1, r1, 0x40",
            "cmp r3, r1",
            "bhi 0x4328c",
            "ldr r1, [r4, 0x34]",
            "mov r0, r4",
            "bl rsym.mysql_stmt_bind_result",
            "cmp r0, 0",
            "bne 0x431ec",
            "strb r0, [r4, 0x2b8]",
            "b 0x43040",
            "add r0, r4, 0x48",
            "mov r1, 1",
            "bl rsym.free_root",
            "mov r3, 0",
            "mov r2, 0",
            "mov r1, 0",
            "str r1, [r4, 0x68]",
            "str r2, [r4, 0x6c]",
            "str r3, [r4, 0x40]",
            "ldr r2, [sp, 0x14]",
            "mov r0, 1",
            "str r3, [r2, 0x380]",
            "b 0x431e0"
        ]
    },
    "rsym.mysql_stmt_bind_result": {
        "function_address": "0x00040720",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xae4]!"
        ]
    },
    "sym.my_print_default_files": {
        "function_address": "0x0004e280",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r6, [0x0004e428]",
            "ldr r1, [0x0004e42c]",
            "add r6, pc, r6",
            "sub sp, sp, 0x244",
            "add r3, r6, r1",
            "str r3, [sp, 0x238]",
            "mov r3, 0",
            "str r3, [sp, 0x23c]",
            "str r1, [sp, 0x10]",
            "mov sl, r0",
            "bl rsym.fn_ext",
            "ldrb r3, [r0]",
            "cmp r3, 0",
            "addne r2, sp, 0x238",
            "strne r2, [sp, 0xc]",
            "ldreq r3, [0x0004e430]",
            "addeq r3, r6, r3",
            "streq r3, [sp, 0xc]",
            "ldr r0, [0x0004e434]",
            "add r0, r6, r0",
            "bl sym.imp.puts",
            "mov r0, sl",
            "bl rsym.dirname_length",
            "subs r2, r0, 0",
            "bne 0x4e3ec",
            "add r3, sp, 0x218",
            "mov r0, r3",
            "mov r1, 0x200",
            "str r3, [sp, 0x14]",
            "bl rsym.init_alloc_root",
            "ldr r0, [sp, 0x14]",
            "bl fcn.0004e16c",
            "subs r7, r0, 0",
            "beq 0x4e404",
            "ldr r1, [r7]",
            "cmp r1, 0",
            "beq 0x4e3c8",
            "ldr sb, [0x0004e438]",
            "ldr r2, [0x0004e43c]",
            "ldr fp, [0x0004e440]",
            "add sb, r6, sb",
            "add r5, sp, 0x18",
            "str r2, [sp, 8]",
            "ldr r2, [sp, 0xc]",
            "ldr r3, [r2]",
            "cmp r3, 0",
            "movne r4, r2",
            "movne r8, 0",
            "bne 0x4e350",
            "b 0x4e3bc",
            "ldr r1, [r7]",
            "ldrb r3, [r1]",
            "mov r2, 0",
            "cmp r3, r2",
            "mov r0, r5",
            "bne 0x4e378",
            "ldr r1, [sp, 8]",
            "ldr r3, [r6, r1]",
            "ldr r1, [r3]",
            "cmp r1, r2",
            "beq 0x4e3b0",
            "bl rsym.convert_dirname",
            "ldrb r2, [sp, 0x18]",
            "mov r1, sl",
            "cmp r2, 0x7e",
            "moveq r2, 0x2e",
            "strbeq r2, [r0], 1",
            "mov r3, sb",
            "ldr r2, [r4]",
            "str r8, [sp]",
            "bl rsym.strxmov",
            "ldr r3, [r6, fp]",
            "mov r0, r5",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "ldr r3, [r4, 4]!",
            "cmp r3, 0",
            "bne 0x4e34c",
            "ldr r1, [r7, 4]!",
            "cmp r1, 0",
            "bne 0x4e330",
            "ldr r0, [sp, 0x14]",
            "mov r1, 0",
            "bl rsym.free_root",
            "ldr r3, [sp, 0x10]",
            "add r0, r6, r3",
            "bl sym.imp.puts",
            "add sp, sp, 0x244",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [0x0004e440]",
            "mov r0, sl",
            "ldr r3, [r6, r3]",
            "ldr r1, [r3]",
            "bl sym.imp.fputs",
            "b 0x4e3d4",
            "ldr r3, [0x0004e440]",
            "ldr r0, [0x0004e444]",
            "ldr r3, [r6, r3]",
            "add r0, r6, r0",
            "ldr r3, [r3]",
            "mov r1, 1",
            "mov r2, 0x34",
            "bl sym.imp.fwrite",
            "b 0x4e3c8"
        ]
    },
    "sym._my_hash_init": {
        "function_address": "0x000526a8",
        "instructions": [
            "str lr, [sp, -4]!",
            "str r2, [r0, 0x30]",
            "sub sp, sp, 0xc",
            "ldr r2, [sp, 0x10]",
            "str r1, [sp]",
            "str r2, [r0]",
            "ldr r2, [sp, 0x14]",
            "mov ip, 0",
            "str r2, [r0, 4]",
            "mov r2, 1",
            "str r2, [r0, 8]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 8",
            "str r2, [r0, 0x28]",
            "ldr r2, [sp, 0x1c]",
            "str r2, [r0, 0x2c]",
            "ldr r2, [sp, 0x20]",
            "str ip, [r0, 0xc]",
            "str r2, [r0, 0x10]",
            "mov r2, ip",
            "add r0, r0, 0x14",
            "bl rsym.init_dynamic_array2",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL_connect": {
        "function_address": "0x00086344",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0x50",
            "beq 0x865b4",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States10GetConnectEv",
            "ldr r3, [r0]",
            "cmp r3, 4",
            "addls pc, pc, r3, lsl 2",
            "b 0x865ac",
            "b 0x86388",
            "b 0x863b4",
            "b 0x86424",
            "b 0x864c4",
            "b 0x864fc",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL15sendClientHelloERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x863b4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States10UseConnectEv",
            "mov r3, 1",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "movne r5, 5",
            "moveq r5, 4",
            "b 0x863e4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "mov r0, r4",
            "bne 0x86400",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "mov r0, r4",
            "cmp r3, r5",
            "blt 0x863d0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x86424",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States10UseConnectEv",
            "mov r3, 2",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager10sendVerifyEv",
            "cmp r0, 0",
            "movne r0, r4",
            "movne r1, 0",
            "blne rsym._ZN5yaSSL15sendCertificateERNS_3SSLENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "subs r1, r0, 0",
            "moveq r0, r4",
            "bleq rsym._ZN5yaSSL21sendClientKeyExchangeERNS_3SSLENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getCryptoEv",
            "bl rsym._ZNK5yaSSL6Crypto15get_certManagerEv",
            "bl rsym._ZNK5yaSSL11CertManager10sendVerifyEv",
            "cmp r0, 0",
            "movne r0, r4",
            "movne r1, 0",
            "blne rsym._ZN5yaSSL21sendCertificateVerifyERNS_3SSLENS_12BufferOutputE",
            "mov r1, 0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL16sendChangeCipherERNS_3SSLENS_12BufferOutputE",
            "mov r1, 1",
            "mov r2, 0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL12sendFinishedERNS_3SSLENS_13ConnectionEndENS_12BufferOutputE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11flushBufferEv",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x864c4",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States10UseConnectEv",
            "mov r3, 3",
            "str r3, [r0]",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "beq 0x86560",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x864fc",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9useStatesEv",
            "bl rsym._ZN5yaSSL6States10UseConnectEv",
            "mov r3, 4",
            "str r3, [r0]",
            "mov r1, 5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ClientStateE",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket6get_fdEv",
            "mov r2, 0",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3Log7ShowTCPEib",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x86590",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "mov r0, r4",
            "bne 0x864d8",
            "bl rsym._ZN5yaSSL12processReplyERNS_3SSLE",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL9getStatesEv",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "mov r0, r4",
            "cmp r3, 4",
            "ble 0x8654c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "bne 0x864fc",
            "b 0x864e8",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "mov r5, r0",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "mov r1, r0",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL6Errors3AddEi",
            "mvn r0, 0",
            "b 0x86544",
            "mov r0, r4",
            "mov r1, 0",
            "bl rsym._ZN5yaSSL3SSL8SetErrorENS_10YasslErrorE",
            "b 0x86358"
        ]
    },
    "rsym._ZNK5yaSSL6States10GetConnectEv": {
        "function_address": "0x0003f2f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x854]!"
        ]
    },
    "rsym._ZN5yaSSL15sendClientHelloERNS_3SSLE": {
        "function_address": "0x0003ea94",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xdec]!"
        ]
    },
    "rsym._ZN5yaSSL6States10UseConnectEv": {
        "function_address": "0x0003ff58",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x14]!"
        ]
    },
    "rsym._ZNK5yaSSL11CertManager10sendVerifyEv": {
        "function_address": "0x0003cdcc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x11c]!"
        ]
    },
    "rsym._ZN5yaSSL21sendClientKeyExchangeERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003febc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x7c]!"
        ]
    },
    "rsym._ZN5yaSSL21sendCertificateVerifyERNS_3SSLENS_12BufferOutputE": {
        "function_address": "0x0003ecb0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xc84]!"
        ]
    },
    "sym.TaoCrypt::MD2::MD2__": {
        "function_address": "0x000aed5c",
        "instructions": [
            "ldr r3, [0x000aee6c]",
            "push {r4, r5, r6, r7, lr}",
            "ldr r2, [0x000aee70]",
            "add r3, pc, r3",
            "ldr r2, [r3, r2]",
            "mov r4, r0",
            "add r2, r2, 8",
            "mov r0, 0x30",
            "str r2, [r4]",
            "str r0, [r4, 4]",
            "sub sp, sp, 0xc",
            "mov r1, 0",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r6, [r4, 4]",
            "str r0, [r4, 8]",
            "mov r3, r6",
            "mov r1, r0",
            "mov r5, 0",
            "mov r2, r6",
            "add r0, r4, 0xc",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r6, [r4, 4]",
            "mov r2, r6",
            "str r0, [r4, 8]",
            "mov r1, r5",
            "mov r6, 0x10",
            "bl sym.imp.memset",
            "str r6, [r4, 0x10]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r7, [r4, 0x10]",
            "str r0, [r4, 0x14]",
            "mov r1, r0",
            "mov r2, r7",
            "mov r3, r7",
            "add r0, r4, 0x18",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r7, [r4, 0x10]",
            "str r0, [r4, 0x14]",
            "mov r2, r7",
            "mov r1, r5",
            "bl sym.imp.memset",
            "str r6, [r4, 0x1c]",
            "mov r1, 0",
            "mov r0, r6",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "ldr r6, [r4, 0x1c]",
            "str r0, [r4, 0x20]",
            "mov r3, r6",
            "mov r1, r0",
            "mov r2, r6",
            "add r0, r4, 0x24",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIhNS_20AllocatorWithCleanupIhEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "mov r1, r5",
            "mov r2, r6",
            "str r0, [r4, 0x20]",
            "str r6, [r4, 0x1c]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt3MD24InitEv",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::ServerHello::ServerHello_yaSSL::ProtocolVersion__bool_": {
        "function_address": "0x0008b858",
        "instructions": [
            "push {r4, lr}",
            "ldr r3, [0x0008b8d0]",
            "ldr ip, [0x0008b8d4]",
            "sub sp, sp, 8",
            "add r3, pc, r3",
            "strh r1, [sp, 4]",
            "ldr ip, [r3, ip]",
            "ldrb r1, [sp, 4]",
            "ldrb lr, [sp, 5]",
            "cmp r2, 0",
            "movne r2, 0xdd",
            "moveq r2, 0",
            "add ip, ip, 8",
            "mov r4, r0",
            "str ip, [r0]",
            "strb lr, [r0, 9]",
            "strb r1, [r0, 8]",
            "str r2, [r0, 0x50]",
            "mov r1, 0",
            "mov r2, 0x20",
            "add r0, r0, 0xa",
            "bl sym.imp.memset",
            "add r0, r4, 0x2b",
            "mov r1, 0",
            "mov r2, 0x20",
            "bl sym.imp.memset",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_MD5::get_digest_unsigned_char_": {
        "function_address": "0x0007ccec",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt4HMACINS_3MD5EE5FinalEPh",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RSA::decrypt_unsigned_char__unsigned_char_const__unsigned_int__yaSSL::RandomPool_const_": {
        "function_address": "0x0007ce8c",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr ip, [r0, 4]",
            "sub sp, sp, 0x14",
            "mov lr, r1",
            "ldr r1, [sp, 0x18]",
            "add ip, ip, 0x20",
            "add r0, sp, 0x10",
            "str ip, [r0, -8]!",
            "ldr ip, [r1]",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, lr",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13RSA_DecryptorINS_14RSA_BlockType2EE7DecryptEPKhjPhRNS_21RandomNumberGeneratorE",
            "add sp, sp, 0x14",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_DecryptorINS_14RSA_BlockType2EE7DecryptEPKhjPhRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003dad4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x86c]!"
        ]
    },
    "sym.pack_dirname": {
        "function_address": "0x0004a510",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x214",
            "add r6, sp, 0x10",
            "mov r4, r0",
            "bl rsym.intern_filename",
            "mov r0, r6",
            "mov r1, 0x200",
            "mov r2, 0",
            "bl rsym.my_getwd",
            "ldr r5, [0x0004a700]",
            "subs r7, r0, 0",
            "add r5, pc, r5",
            "bne 0x4a564",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "ldrb r3, [r4]",
            "mov sb, r0",
            "cmp r3, 0x2f",
            "beq 0x4a564",
            "cmp r3, 0",
            "bne 0x4a69c",
            "mov r0, r4",
            "mov r1, r4",
            "bl rsym.cleanup_dirname",
            "subs r3, r0, 0",
            "beq 0x4a690",
            "ldr sl, [0x0004a704]",
            "ldr r2, [r5, sl]",
            "ldr fp, [r2]",
            "cmp fp, 0",
            "moveq r2, fp",
            "moveq r8, r2",
            "beq 0x4a604",
            "mov r0, fp",
            "str r3, [sp, 0xc]",
            "bl sym.imp.strlen",
            "add r2, fp, r0",
            "ldrb r2, [r2, -1]",
            "mov r8, r0",
            "cmp r2, 0x2f",
            "subeq r8, r0, 1",
            "ldr r3, [sp, 0xc]",
            "cmp r8, 1",
            "movls r2, 0",
            "movhi r2, 1",
            "cmp r8, r3",
            "movhs r3, 0",
            "andlo r3, r2, 1",
            "cmp r3, 0",
            "beq 0x4a604",
            "mov r1, fp",
            "mov r0, r4",
            "mov r2, r8",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x4a600",
            "ldrb r3, [r4, r8]",
            "add r1, r4, r8",
            "cmp r3, 0x2f",
            "beq 0x4a6d0",
            "mov r2, 1",
            "cmp r7, 0",
            "bne 0x4a690",
            "cmp r8, sb",
            "movhs sb, 0",
            "andlo sb, r2, 1",
            "cmp sb, 0",
            "beq 0x4a650",
            "ldr r3, [r5, sl]",
            "mov r0, r6",
            "ldr r1, [r3]",
            "mov r2, r8",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x4a650",
            "add r2, sp, 0x210",
            "add r3, r2, r8",
            "ldrb r3, [r3, -0x200]",
            "cmp r3, 0x2f",
            "beq 0x4a6e8",
            "mov r0, r4",
            "mov r1, r6",
            "bl rsym.is_prefix",
            "cmp r0, 0",
            "beq 0x4a690",
            "mov r0, r6",
            "bl sym.imp.strlen",
            "ldrb r3, [r4, r0]",
            "add r1, r4, r0",
            "cmp r3, 0",
            "bne 0x4a6c4",
            "strb r3, [r4, 2]",
            "mov r3, 0x2e",
            "strb r3, [r4]",
            "mov r3, 0x2f",
            "strb r3, [r4, 1]",
            "add sp, sp, 0x214",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r0, r4",
            "bl sym.imp.strlen",
            "mov r1, r7",
            "add ip, r0, 1",
            "mov r2, r6",
            "mov r0, r4",
            "mov r3, sb",
            "str ip, [sp]",
            "bl rsym.bchange",
            "b 0x4a564",
            "mov r0, r4",
            "bl rsym.strmov_overlapp",
            "b 0x4a690",
            "mov r0, r4",
            "mov r3, 0x7e",
            "strb r3, [r0], 1",
            "bl rsym.strmov_overlapp",
            "mov r2, 1",
            "b 0x4a604",
            "mov r3, 0x7e",
            "add r1, r6, r8",
            "add r0, r6, 1",
            "strb r3, [sp, 0x10]",
            "bl rsym.strmov_overlapp",
            "b 0x4a650"
        ]
    },
    "rsym.strmov_overlapp": {
        "function_address": "0x0004033c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xd7c]!"
        ]
    },
    "sym.yaSSL::x509::x509__": {
        "function_address": "0x0007c1a0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL13ysArrayDeleteIhEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HandShakeBase::HandShakeBase__": {
        "function_address": "0x00084b20",
        "instructions": [
            "ldr ip, [0x00084b60]",
            "ldr r3, [0x00084b64]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x00084b68]",
            "add r2, r3, 8",
            "ldr r3, [0x00084b6c]",
            "str r2, [r0]",
            "ldr r0, [0x00084b70]",
            "add r3, ip, r3",
            "push {r4, lr}",
            "add r1, ip, r1",
            "add r0, ip, r0",
            "add r3, r3, 0x1c",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::list_unsigned_char_::pop_back__": {
        "function_address": "0x000872d0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 4]",
            "cmp r0, 0",
            "beq 0x87318",
            "ldr r3, [r4]",
            "cmp r0, r3",
            "ldrne r3, [r0]",
            "moveq r3, 0",
            "movne r2, 0",
            "strne r3, [r4, 4]",
            "streq r3, [r4, 4]",
            "streq r3, [r4]",
            "strne r2, [r3, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "fcn.0007e5f8": {
        "function_address": "0x0007e5f8",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007e654]",
            "ldr r3, [0x0007e658]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3SHA7SHAImplEEEvPT_",
            "ldr r3, [0x0007e65c]",
            "ldr r1, [0x0007e660]",
            "ldr r3, [r4, r3]",
            "ldr r0, [0x0007e664]",
            "add r2, r3, 8",
            "ldr r3, [0x0007e668]",
            "str r2, [r5]",
            "add r3, r4, r3",
            "add r1, r4, r1",
            "add r0, r4, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x57",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::HandShakeHeader::get_length___const": {
        "function_address": "0x0008d7bc",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL7c24to32EPKh",
            "lsl r0, r0, 0x10",
            "lsr r0, r0, 0x10",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::sendChangeCipher_yaSSL::SSL__yaSSL::BufferOutput_": {
        "function_address": "0x00082f5c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x14",
            "mov r7, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security9get_parmsEv",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0x8307c",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "subs r5, r0, 0",
            "beq 0x82f9c",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "add r6, sp, 8",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL16ChangeCipherSpecC1Ev",
            "mov r2, r5",
            "mov r1, 3",
            "add r0, sp, 4",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security14get_connectionEv",
            "mov r3, r0",
            "ldrb sl, [r3, 0x12e]",
            "ldrb r5, [r3, 0x12f]",
            "mov r0, r6",
            "ldr r3, [sp, 8]",
            "ldr ip, [r3, 0xc]",
            "mov lr, pc",
            "bx ip",
            "strb sl, [sp, 4]",
            "str r0, [sp]",
            "strb r5, [sp, 5]",
            "mov r0, r6",
            "ldr r3, [sp, 8]",
            "ldr ip, [r3, 0x10]",
            "mov lr, pc",
            "bx ip",
            "mov r8, sp",
            "strh r0, [sp, 6]",
            "mov r1, 0",
            "mov r0, 0xc",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r5, r0",
            "bl rsym._ZN5yaSSL13output_bufferC1Ev",
            "ldrh r1, [sp, 6]",
            "mov r0, r5",
            "add r1, r1, 5",
            "bl rsym._ZN5yaSSL13output_buffer8allocateEj",
            "mov r1, sp",
            "mov r0, r5",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_17RecordLayerHeaderE",
            "mov r1, r6",
            "bl rsym._ZN5yaSSLlsERNS_13output_bufferERKNS_7MessageE",
            "cmp r7, 0",
            "beq 0x830a0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer10get_bufferEv",
            "mov r6, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL13output_buffer8get_sizeEv",
            "mov r1, r6",
            "mov r2, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL4SendEPKhj",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL8ysDeleteINS_13output_bufferEEEvPT_",
            "b 0x82f90",
            "mov r0, r4",
            "bl rsym._ZNK5yaSSL3SSL11getSecurityEv",
            "bl rsym._ZNK5yaSSL8Security12get_resumingEv",
            "cmp r0, 0",
            "beq 0x830b4",
            "mov r0, r4",
            "mov r1, 2",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ServerStateE",
            "b 0x82f80",
            "mov r1, r5",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3SSL9addBufferEPNS_13output_bufferE",
            "mov r5, r7",
            "b 0x83070",
            "mov r0, r4",
            "mov r1, 3",
            "bl rsym._ZN5yaSSL3SSL11verifyStateENS_11ServerStateE",
            "b 0x82f80"
        ]
    },
    "sym.yaX509_get_notBefore": {
        "function_address": "0x000855c4",
        "instructions": [
            "subs r3, r0, 0",
            "push {r4, lr}",
            "moveq r0, r3",
            "blne rsym._ZN5yaSSL4X5099GetBeforeEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::HMAC_SHA::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007cd58",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt4HMACINS_3SHAEE5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::SHA224::SHA224_TaoCrypt::SHA224_const_": {
        "function_address": "0x000b3aa8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "mov r2, 0x40",
            "mov r5, r0",
            "mov r6, r1",
            "mov r1, 8",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "add sl, r6, 0x10",
            "add ip, r5, 0x10",
            "ldm sl!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "add sb, r5, 0x30",
            "ldm sl, {r0, r1, r2}",
            "add r4, r6, 0x30",
            "stm ip, {r0, r1, r2}",
            "ldm r4!, {r0, r1, r2, r3}",
            "mov ip, sb",
            "ldr r8, [0x000b3b30]",
            "stm ip!, {r0, r1, r2, r3}",
            "ldr r7, [0x000b3b34]",
            "add r8, pc, r8",
            "ldr r7, [r8, r7]",
            "ldmib r6, {r1, r2, r3}",
            "add r7, r7, 8",
            "stmib r5, {r1, r2, r3}",
            "str r7, [r5]",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm r4, {r0, r1, r2, r3}",
            "stm ip, {r0, r1, r2, r3}",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::CertDecoder::GetValidity__": {
        "function_address": "0x0009ba44",
        "instructions": [
            "ldr r3, [r0, 4]",
            "push {r4, r5, r6, lr}",
            "ldr r5, [r3, 0x10]",
            "mov r4, r0",
            "cmp r5, 0",
            "beq 0x9ba64",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r4",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt11CertDecoder7GetDateENS0_8DateTypeE",
            "mov r0, r4",
            "mov r1, 1",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN8TaoCrypt11CertDecoder7GetDateENS0_8DateTypeE"
        ]
    },
    "rsym._ZN8TaoCrypt11CertDecoder7GetDateENS0_8DateTypeE": {
        "function_address": "0x0003f82c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x4dc]!"
        ]
    },
    "sym.TaoCrypt::FileSource::size_bool_": {
        "function_address": "0x000a1e8c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "mov r6, r1",
            "bl sym.imp.ftell",
            "cmp r6, 0",
            "mov r5, r0",
            "movne r7, r0",
            "bne 0xa1ecc",
            "mov r1, r6",
            "mov r2, r6",
            "ldr r0, [r4]",
            "bl sym.imp.fseek",
            "ldr r0, [r4]",
            "bl sym.imp.ftell",
            "mov r7, r0",
            "mov r1, 0",
            "mov r2, 2",
            "ldr r0, [r4]",
            "bl sym.imp.fseek",
            "ldr r0, [r4]",
            "bl sym.imp.ftell",
            "mov r1, r5",
            "mov r6, r0",
            "mov r2, 0",
            "ldr r0, [r4]",
            "bl sym.imp.fseek",
            "rsb r0, r7, r6",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::DiffieHellman.DiffieHellman_unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int__unsigned_char_const__unsigned_int__yaSSL::RandomPool_const_": {
        "function_address": "0x0007f6dc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r6, r0",
            "sub sp, sp, 0x2c",
            "mov sb, r1",
            "mov r7, r2",
            "mov fp, r3",
            "mov r1, 0",
            "mov r0, 0x30",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "ldr r3, [sp, 0x5c]",
            "add sl, r0, 0x10",
            "ldr r3, [r3]",
            "mov r5, r0",
            "str r3, [sp, 4]",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r3, [sp, 4]",
            "mov r4, 0",
            "add r8, sp, 0x18",
            "str r3, [r5, 0x20]",
            "mov r1, sb",
            "mov r2, r7",
            "str r4, [r5, 0x24]",
            "str r4, [r5, 0x28]",
            "str r4, [r5, 0x2c]",
            "str r5, [r6]",
            "mov r3, r4",
            "add r7, sp, 8",
            "mov r0, r8",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r3, r4",
            "ldr r2, [sp, 0x50]",
            "mov r1, fp",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, r8",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "mov r1, r7",
            "mov r0, sl",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr r5, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r5, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, r4",
            "lsl r2, r2, 2",
            "mov r0, r5",
            "bl sym.imp.memset",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r1, 0",
            "ldr r0, [sp, 0x58]",
            "ldr r4, [r6]",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "ldr r3, [r6]",
            "str r0, [r4, 0x24]",
            "ldr r0, [r3, 0x24]",
            "ldr r1, [sp, 0x54]",
            "ldr r2, [sp, 0x58]",
            "bl sym.imp.memcpy",
            "mov r0, r6",
            "add sp, sp, 0x2c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::Connection::Connection_yaSSL::ProtocolVersion__yaSSL::RandomPool_": {
        "function_address": "0x0008b468",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 8",
            "strh r1, [sp, 4]",
            "ldrb r3, [sp, 4]",
            "mov r1, 0",
            "cmp r3, 2",
            "str r1, [r0]",
            "str r1, [r0, 0x11c]",
            "str r1, [r0, 0x120]",
            "str r1, [r0, 0x124]",
            "strb r1, [r0, 0x128]",
            "strb r1, [r0, 0x129]",
            "mov r6, r2",
            "mov r4, r0",
            "ldrb r2, [sp, 5]",
            "strbls r1, [r0, 0x12a]",
            "bls 0x8b4c4",
            "cmp r2, r1",
            "beq 0x8b51c",
            "mov r1, 1",
            "cmp r2, 1",
            "strb r1, [r0, 0x12a]",
            "bls 0x8b520",
            "mov r5, 0",
            "strb r1, [r4, 0x12b]",
            "strb r2, [r4, 0x12f]",
            "strb r3, [r4, 0x12e]",
            "strb r5, [r4, 0x12d]",
            "add r0, r4, 0x130",
            "mov r1, 3",
            "mov r2, r5",
            "bl rsym._ZN5yaSSL15ProtocolVersionC1Ehh",
            "str r6, [r4, 0x134]",
            "str r5, [r4, 0x90]",
            "str r5, [r4, 0x74]",
            "str r5, [r4, 0x78]",
            "str r5, [r4, 0x7c]",
            "str r5, [r4, 0x80]",
            "str r5, [r4, 0x84]",
            "str r5, [r4, 0x88]",
            "str r5, [r4, 0x8c]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "strb r2, [r0, 0x12a]",
            "mov r1, 0",
            "b 0x8b4c4"
        ]
    },
    "sym.TaoCrypt::ModularArithmetic::MultiplicativeInverse_TaoCrypt::Integer_const__const": {
        "function_address": "0x000ad8b0",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x14",
            "add r2, r0, 0xc",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZNK8TaoCrypt7Integer10InverseModERKS0_",
            "mov r1, sp",
            "add r0, r4, 0x2c",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r5, r0",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DSA_PublicKey::SetModulus_TaoCrypt::Integer_const_": {
        "function_address": "0x000a1208",
        "instructions": [
            "push {r4, lr}",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RIPEMD160::operator_TaoCrypt::RIPEMD160_const_": {
        "function_address": "0x000b0c30",
        "instructions": [
            "push {r4, r5, lr}",
            "sub sp, sp, 0x74",
            "mov r4, r0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt9RIPEMD160C1ERKS0_",
            "mov r0, r4",
            "mov r1, sp",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604SwapERS0_",
            "mov r5, sp",
            "mov r0, r4",
            "add sp, sp, 0x74",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt9RIPEMD1604SwapERS0_": {
        "function_address": "0x0003d234",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xe2c]!"
        ]
    },
    "sym.TaoCrypt::HASHwithTransform::HASHwithTransform__": {
        "function_address": "0x000a2d58",
        "instructions": [
            "ldr ip, [0x000a2d94]",
            "ldr r3, [0x000a2d98]",
            "add ip, pc, ip",
            "ldr r3, [ip, r3]",
            "ldr r1, [0x000a2d9c]",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r3, [0x000a2da0]",
            "ldr r0, [0x000a2da4]",
            "push {r4, lr}",
            "add r3, ip, r3",
            "add r0, ip, r0",
            "add r1, ip, r1",
            "mov r2, 0x58",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.yaSSL::AES::decrypt_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x00080194",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r7, [r0, 4]",
            "mov r5, r1",
            "ldr r1, [r7, 0x160]",
            "sub sp, sp, 0x10",
            "cmp r1, 0",
            "mov r6, r2",
            "add r4, r7, 0x12c",
            "bne 0x8020c",
            "ldr r1, [r7, 0x130]",
            "mov r0, r3",
            "bl fcn.000bed20",
            "subs r7, r0, 0",
            "beq 0x80200",
            "mov r3, r5",
            "mov r1, r6",
            "ldr ip, [r4]",
            "mov r0, r4",
            "mov r2, 0",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "ldr r3, [r4, 4]",
            "subs r7, r7, 1",
            "add r6, r6, r3",
            "add r5, r5, r3",
            "bne 0x801cc",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "cmp r1, 1",
            "bne 0x80200",
            "ldr r2, [r7, 0x15c]",
            "cmp r2, 0",
            "bne 0x8028c",
            "mov r0, r3",
            "ldr r1, [r7, 0x130]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80200",
            "ldr r2, [r7, 0x130]",
            "mov r1, r6",
            "ldr r0, [r4, 8]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "ldr r1, [r4, 8]",
            "mov r2, 0",
            "mov r3, r1",
            "ldr ip, [r4]",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r2, [r4, 4]",
            "ldr r1, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x80238",
            "b 0x80200",
            "mov r0, r3",
            "ldr r1, [r7, 0x130]",
            "bl fcn.000bed20",
            "subs r8, r0, 0",
            "beq 0x80200",
            "ldr r2, [r7, 0x130]",
            "mov r7, sp",
            "mov r1, r6",
            "ldr r0, [r4, 0xc]",
            "bl sym.imp.memcpy",
            "ldr ip, [r4]",
            "mov r3, r5",
            "ldr r1, [r4, 0xc]",
            "mov r2, 0",
            "mov r0, r4",
            "ldr ip, [ip, 0xc]",
            "mov lr, pc",
            "bx ip",
            "mov r0, r5",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "bl rsym._ZN8TaoCrypt6xorbufEPhPKhj",
            "mov r3, 0x10",
            "ldr r1, [r4, 8]",
            "ldr r2, [r4, 4]",
            "mov r0, sp",
            "bl sym.imp.__memcpy_chk",
            "ldr r1, [r4, 0xc]",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "ldr r0, [r4, 0xc]",
            "mov r1, sp",
            "bl sym.imp.memcpy",
            "ldr r2, [r4, 4]",
            "subs r8, r8, 1",
            "add r5, r5, r2",
            "add r6, r6, r2",
            "bne 0x802a8",
            "b 0x80200"
        ]
    },
    "sym.TaoCrypt::HMAC_TaoCrypt::RIPEMD160_::HMAC__": {
        "function_address": "0x000bb408",
        "instructions": [
            "mov r3, r0",
            "add r2, r0, 0x80",
            "push {r4, r5, r6, lr}",
            "str r2, [r3], 0xc0",
            "add r6, r0, 0x10",
            "add r2, r0, 0x100",
            "mov r4, r0",
            "mov r1, 5",
            "str r3, [r0, 4]",
            "str r2, [r0, 8]",
            "ldr r5, [0x000bb470]",
            "mov r2, 0x40",
            "mov r0, r6",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x000bb474]",
            "add r5, pc, r5",
            "ldr r3, [r5, r3]",
            "mov r0, r6",
            "add r3, r3, 8",
            "str r3, [r4, 0x10]",
            "bl rsym._ZN8TaoCrypt9RIPEMD1604InitEv",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt4HMACINS_9RIPEMD160EE4InitEv",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.TaoCrypt::RSA_Decryptor_TaoCrypt::RSA_BlockType2_.SSL_Sign_unsigned_char_const__unsigned_int__unsigned_char__TaoCrypt::RandomNumberGenerator_": {
        "function_address": "0x000bc0ac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x34",
            "add r4, sp, 8",
            "add r5, r4, 0x10",
            "mov r6, r0",
            "mov r0, r4",
            "mov r7, r2",
            "mov sl, r3",
            "mov r8, r1",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegerC1Ev",
            "ldr r6, [r6]",
            "mov r0, r4",
            "mov r1, r6",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "add r1, r6, 0x20",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldr ip, [sp, 0x50]",
            "add r0, sp, 0x30",
            "mov r3, sl",
            "str r4, [r0, -8]!",
            "mov r1, r8",
            "mov r2, r7",
            "str ip, [sp]",
            "bl rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType1EE7EncryptEPKhjPhRNS_21RandomNumberGeneratorE",
            "ldr r4, [sp, 0x1c]",
            "ldr r2, [sp, 0x18]",
            "mov r1, 0",
            "lsl r2, r2, 2",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "ldr r4, [sp, 0xc]",
            "ldr r2, [sp, 8]",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt13RSA_EncryptorINS_14RSA_BlockType1EE7EncryptEPKhjPhRNS_21RandomNumberGeneratorE": {
        "function_address": "0x0003d9a8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x934]!"
        ]
    },
    "method.void_TaoCrypt.tcArrayDelete_char__char_": {
        "function_address": "0x000bb2b0",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "bl rsym._ZdaPvN8TaoCrypt5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::Integer::Integer_long_": {
        "function_address": "0x000a8ac0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r8, [0x000a8b98]",
            "mov r3, 2",
            "str r3, [r0]",
            "add r8, pc, r8",
            "sub sp, sp, 8",
            "mov r4, r0",
            "mov r7, r1",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r5, [r3], 8",
            "mov r6, 0",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r2, r5",
            "mov r0, r3",
            "mov r3, r5",
            "str r6, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r5, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r5, 2",
            "mov r1, r6",
            "bl sym.imp.memset",
            "cmp r7, r6",
            "movlt r3, 1",
            "strlt r3, [r4, 0xc]",
            "ldr r3, [r4]",
            "strge r6, [r4, 0xc]",
            "rsblt r7, r7, 0",
            "cmp r3, 0",
            "beq 0xa8b74",
            "ldr r3, [r4, 4]",
            "str r7, [r3]",
            "ldr r2, [r4]",
            "cmp r2, 1",
            "bls 0xa8b74",
            "mov r2, 0",
            "str r2, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 8",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [0x000a8b9c]",
            "ldr r1, [0x000a8ba0]",
            "ldr r0, [0x000a8ba4]",
            "add r3, r8, r3",
            "add r1, r8, r1",
            "add r0, r8, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym._my_b_seq_read": {
        "function_address": "0x00053784",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr r3, [r0, 0x10]",
            "ldr r5, [r0, 0x14]",
            "sub sp, sp, 0x24",
            "subs r5, r5, r3",
            "mov r4, r0",
            "mov r6, r1",
            "mov sb, r2",
            "moveq r5, r2",
            "bne 0x53950",
            "add r7, r4, 0x38",
            "mov r0, r7",
            "bl rsym.my_pthread_fastmutex_lock",
            "ldm r4, {r1, r2}",
            "ldr ip, [r4, 0x14]",
            "ldr r0, [r4, 0x18]",
            "ldr r3, [r4, 0xc]",
            "rsb r0, r0, ip",
            "adds sl, r1, r0",
            "adc fp, r2, 0",
            "cmp r3, fp",
            "bhi 0x53898",
            "beq 0x5388c",
            "ldr r1, [r4, 0x24]",
            "ldr r8, [r4, 0x28]",
            "mov r0, r6",
            "rsb r8, r1, r8",
            "cmp r5, r8",
            "movlo r6, r5",
            "movhs r6, r8",
            "mov r2, r6",
            "bl sym.imp.memcpy",
            "ldr r1, [r4, 0x24]",
            "subs r3, r5, r6",
            "rsbne sb, r3, sb",
            "add r1, r1, r6",
            "rsb r5, r6, r8",
            "str r1, [r4, 0x24]",
            "strne sb, [r4, 0x90]",
            "mov r2, r5",
            "ldr r0, [r4, 0x18]",
            "str r3, [sp, 0x14]",
            "bl sym.imp.memcpy",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "adds r0, r0, r8",
            "ldr r2, [r4, 0x18]",
            "adc r1, r1, 0",
            "str r0, [r4, 8]",
            "str r1, [r4, 0xc]",
            "ldr ip, [r4, 0x28]",
            "adds r0, sl, r6",
            "adc r1, fp, 0",
            "add r5, r2, r5",
            "stm r4, {r0, r1}",
            "str r5, [r4, 0x14]",
            "str ip, [r4, 0x24]",
            "str r2, [r4, 0x10]",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r3, [sp, 0x14]",
            "subs r0, r3, 0",
            "movne r0, 1",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "ldr r3, [r4, 8]",
            "cmp r3, sl",
            "bls 0x537e0",
            "ldr r0, [r4, 0x88]",
            "mov r1, 0",
            "mov r2, sl",
            "mov r3, fp",
            "str r1, [sp, 4]",
            "str r1, [sp]",
            "bl rsym.my_seek",
            "cmn r0, 1",
            "beq 0x53a14",
            "lsl r3, sl, 0x14",
            "lsr r3, r3, 0x14",
            "rsb r2, r3, 0x2000",
            "mov r8, 0",
            "cmp r5, r2",
            "str r8, [r4, 0x8c]",
            "bhs 0x5397c",
            "ldr r2, [r4, 0x98]",
            "add r1, r4, 8",
            "ldm r1, {r0, r1}",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "subs r0, r0, sl",
            "sbc r1, r1, fp",
            "cmp r1, 0",
            "str r0, [sp, 0x18]",
            "str r1, [sp, 0x1c]",
            "rsb r2, r3, r2",
            "beq 0x5396c",
            "cmp r2, 0",
            "bne 0x539cc",
            "cmp r5, 0",
            "bne 0x537e0",
            "mov r8, r5",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "ldr r1, [r4, 0x18]",
            "stm r4, {sl, fp}",
            "add r8, r1, r8",
            "add r3, r1, r5",
            "str r3, [r4, 0x10]",
            "str r8, [r4, 0x14]",
            "mov r0, r6",
            "mov r2, r5",
            "bl sym.imp.memcpy",
            "mov r0, 0",
            "b 0x53880",
            "mov r0, r6",
            "mov r2, r5",
            "mov r1, r3",
            "add r6, r6, r5",
            "bl sym.imp.memcpy",
            "rsb r5, r5, sb",
            "b 0x537ac",
            "cmp r2, r0",
            "ldrhi r1, [sp, 8]",
            "rsbhi r2, sl, r1",
            "b 0x53908",
            "bic ip, r5, 0xff0",
            "bic ip, ip, 0xf",
            "rsb ip, r3, ip",
            "ldr r0, [r4, 0x88]",
            "mov r2, ip",
            "ldr r3, [r4, 0x9c]",
            "mov r1, r6",
            "str ip, [sp, 0x14]",
            "bl rsym.my_read",
            "cmn r0, 1",
            "ldr ip, [sp, 0x14]",
            "beq 0x53a30",
            "adds sl, sl, r0",
            "adc fp, fp, 0",
            "cmp ip, r0",
            "rsb r5, r0, r5",
            "add r6, r6, r0",
            "bne 0x537e0",
            "mov r3, r8",
            "b 0x538d8",
            "ldr r0, [r4, 0x88]",
            "ldr r1, [r4, 0x18]",
            "ldr r3, [r4, 0x9c]",
            "bl rsym.my_read",
            "cmn r0, 1",
            "mov r8, r0",
            "beq 0x53a44",
            "cmp r5, r0",
            "bls 0x5391c",
            "mov r0, r6",
            "adds sl, sl, r8",
            "ldr r1, [r4, 0x18]",
            "mov r2, r8",
            "adc fp, fp, 0",
            "rsb r5, r8, r5",
            "bl sym.imp.memcpy",
            "add r6, r6, r8",
            "b 0x537e0",
            "cmn r1, 1",
            "bne 0x538bc",
            "str r1, [r4, 0x90]",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 1",
            "b 0x53880",
            "str r0, [r4, 0x90]",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 1",
            "b 0x53880",
            "str r0, [r4, 0x90]",
            "mov r0, r7",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, 1",
            "b 0x53880"
        ]
    },
    "sym.yaSSL::HMAC_MD5::HMAC_MD5__": {
        "function_address": "0x0007d390",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007d3d4]",
            "ldr r3, [0x0007d3d8]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_8HMAC_MD512HMAC_MD5ImplEEEvPT_",
            "ldr r3, [0x0007d3dc]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::OS_Seed::OS_Seed__": {
        "function_address": "0x000b0894",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r6, 0",
            "ldr r4, [0x000b08f8]",
            "mov r5, r0",
            "str r6, [r0, 4]",
            "ldr r0, [0x000b08fc]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "mov r1, r6",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "str r0, [r5]",
            "beq 0xb08d4",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "ldr r0, [0x000b0900]",
            "mov r1, r6",
            "add r0, r4, r0",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "ldreq r3, [0x000b0904]",
            "str r0, [r5]",
            "streq r3, [r5, 4]",
            "b 0xb08c8"
        ]
    },
    "sym.my_once_memdup": {
        "function_address": "0x000508c0",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r0",
            "mov r1, r2",
            "mov r0, r4",
            "bl rsym.my_once_alloc",
            "subs r5, r0, 0",
            "movne r1, r6",
            "movne r2, r4",
            "blne sym.imp.memcpy",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "method.yaSSL::Security.Security_yaSSL::ProtocolVersion__yaSSL::RandomPool__yaSSL::ConnectionEnd__yaSSL::Ciphers_const__yaSSL::SSL_CTX__bool_": {
        "function_address": "0x00092fb4",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x14",
            "strh r1, [sp, 0xc]",
            "mov r4, r0",
            "mov r7, r3",
            "ldrb r6, [sp, 0x30]",
            "ldr r1, [sp, 0xc]",
            "mov r5, r2",
            "bl rsym._ZN5yaSSL10ConnectionC1ENS_15ProtocolVersionERNS_10RandomPoolE",
            "ldr r3, [sp, 0xc]",
            "mov r1, r7",
            "ldr r2, [sp, 0x28]",
            "add r0, r4, 0x138",
            "str r6, [sp]",
            "bl rsym._ZN5yaSSL10ParametersC1ENS_13ConnectionEndERKNS_7CiphersENS_15ProtocolVersionEb",
            "add r0, r4, 0x810",
            "mov r1, r5",
            "add r0, r0, 8",
            "bl rsym._ZN5yaSSL11SSL_SESSIONC1ERNS_10RandomPoolE",
            "ldr r3, [sp, 0x2c]",
            "mov r0, r4",
            "str r3, [r4, 0x87c]",
            "mov r3, 0",
            "strb r3, [r4, 0x880]",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::AES::set_decryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007e8a4",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [r0, 4]",
            "mov r5, r2",
            "add r0, r4, 0x12c",
            "ldr r2, [r4, 0x258]",
            "mov r3, 1",
            "bl rsym._ZN8TaoCrypt3AES6SetKeyEPKhjNS_9CipherDirE",
            "add r0, r4, 0x13c",
            "mov r1, r5",
            "mov r2, 0x10",
            "bl sym.imp.memcpy",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RMD::get_digest_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dd60",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r0",
            "mov r5, r1",
            "ldr r0, [r0, 4]",
            "mov r1, r2",
            "mov r2, r3",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "ldr r0, [r4, 4]",
            "mov r1, r5",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform5FinalEPh",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_Private_Decoder::ReadHeader__": {
        "function_address": "0x0009b14c",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "bl rsym._ZN8TaoCrypt11BER_Decoder11GetSequenceEv",
            "mov r0, r4",
            "pop {r4, lr}",
            "b rsym._ZN8TaoCrypt11BER_Decoder10GetVersionEv"
        ]
    },
    "method.mySTL::list_unsigned_char_.erase_mySTL::list_unsigned_char_::iterator_": {
        "function_address": "0x00087348",
        "instructions": [
            "cmp r1, 0",
            "push {r4, lr}",
            "mov r4, r0",
            "moveq r0, r1",
            "beq 0x873a0",
            "ldr r3, [r4]",
            "cmp r3, r1",
            "beq 0x873b4",
            "ldr r3, [r4, 4]",
            "cmp r3, r1",
            "beq 0x873a8",
            "ldr r3, [r1]",
            "ldr r2, [r1, 4]",
            "mov r0, r1",
            "str r2, [r3, 4]",
            "ldr r2, [r1, 4]",
            "str r3, [r2]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "ldr r3, [r4, 8]",
            "mov r0, 1",
            "sub r3, r3, 1",
            "str r3, [r4, 8]",
            "pop {r4, lr}",
            "bx lr",
            "bl rsym._ZN5mySTL4listIPhE8pop_backEv",
            "mov r0, 1",
            "b 0x873a0",
            "bl rsym._ZN5mySTL4listIPhE9pop_frontEv",
            "mov r0, 1",
            "b 0x873a0"
        ]
    },
    "sym.my_xml_parse": {
        "function_address": "0x00073320",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "ldr fp, str.yG_I",
            "mov r4, r0",
            "ldr r5, [0x0007381c]",
            "add r0, r1, r2",
            "add fp, pc, fp",
            "sub sp, sp, 0x24",
            "add r3, r4, 0x88",
            "cmp r1, r0",
            "str r3, [r4, 0x108]",
            "str r1, [r4, 0x10c]",
            "str r1, [r4, 0x110]",
            "str r0, [r4, 0x114]",
            "add r5, fp, r5",
            "add sl, sp, 0x10",
            "mov sb, 1",
            "bhs 0x7347c",
            "ldrb r3, [r1]",
            "cmp r3, 0x3c",
            "beq 0x73494",
            "ldr r2, [r4, 0x110]",
            "ldr r0, [r4, 0x114]",
            "str r1, [sp, 0x18]",
            "cmp r2, r0",
            "blo 0x73398",
            "b 0x733a4",
            "add r2, r2, 1",
            "cmp r2, r0",
            "str r2, [r4, 0x110]",
            "bhs 0x733a4",
            "ldrb r3, [r2]",
            "cmp r3, 0x3c",
            "bne 0x73388",
            "ldr r3, [r4]",
            "str r2, [sp, 0x1c]",
            "tst r3, 2",
            "ldrne r1, [sp, 0x18]",
            "bne 0x73448",
            "ldr r6, [sp, 0x18]",
            "cmp r6, r2",
            "mov r1, r6",
            "bhs 0x73448",
            "ldrb r3, [r6]",
            "ldrb r3, [r5, r3]",
            "tst r3, 8",
            "bne 0x733ec",
            "b 0x7340c",
            "ldrb r3, [r1]",
            "ldrb r3, [r5, r3]",
            "tst r3, 8",
            "beq 0x733fc",
            "add r1, r1, 1",
            "cmp r2, r1",
            "str r1, [sp, 0x18]",
            "bhi 0x733dc",
            "ldr r2, [sp, 0x1c]",
            "cmp r2, r1",
            "bls 0x73448",
            "ldr r6, [sp, 0x18]",
            "ldrb r1, [r2, -1]",
            "sub r3, r2, 1",
            "ldrb r1, [r5, r1]",
            "tst r1, 8",
            "beq 0x736dc",
            "mov r1, r6",
            "b 0x73438",
            "ldrb ip, [r3, -1]!",
            "ldrb ip, [r5, ip]",
            "tst ip, 8",
            "beq 0x73450",
            "cmp r6, r3",
            "str r3, [sp, 0x1c]",
            "mov r2, r3",
            "blo 0x73428",
            "cmp r1, r2",
            "beq 0x73470",
            "ldr r3, [r4, 0x120]",
            "cmp r3, 0",
            "beq 0x73470",
            "rsb r2, r1, r2",
            "mov r0, r4",
            "mov lr, pc",
            "bx r3",
            "ldr r0, [r4, 0x114]",
            "ldr r1, [r4, 0x110]",
            "cmp r1, r0",
            "blo 0x73364",
            "ldrb r0, [r4, 0x88]",
            "cmp r0, 0",
            "bne 0x7370c",
            "add sp, sp, 0x24",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "add r8, sp, 0x18",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "cmp r0, 0x43",
            "beq 0x7346c",
            "cmp r0, 0x44",
            "bne 0x734f4",
            "ldr r3, [r4, 0x120]",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "add r1, r1, 9",
            "sub r2, r2, 3",
            "cmp r3, 0",
            "str r1, [sp, 0x18]",
            "str r2, [sp, 0x1c]",
            "beq 0x7346c",
            "rsb r2, r1, r2",
            "mov r0, r4",
            "mov lr, pc",
            "bx r3",
            "ldr r0, [r4, 0x114]",
            "ldr r1, [r4, 0x110]",
            "b 0x73474",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "cmp r0, 0x2f",
            "beq 0x7372c",
            "cmp r0, 0x21",
            "beq 0x73770",
            "cmp r0, 0x3f",
            "movne r7, 0",
            "strne r7, [sp, 0xc]",
            "beq 0x7378c",
            "cmp r0, 0x49",
            "bne 0x737e4",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x18]",
            "mov r3, 0",
            "str r3, [r4, 4]",
            "rsb r2, r1, r2",
            "mov r0, r4",
            "bl fcn.000730a0",
            "cmp r0, 0",
            "bne 0x736ac",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "cmp r0, 0x49",
            "mov r6, r0",
            "beq 0x73578",
            "cmp r0, 0x53",
            "movne r3, 0",
            "andeq r3, r7, 1",
            "cmp r3, 0",
            "beq 0x735ac",
            "mov r0, r4",
            "mov r1, sl",
            "bl fcn.00072c88",
            "cmp r0, 0x3d",
            "mov r6, r0",
            "beq 0x7362c",
            "cmp r0, 0x49",
            "beq 0x736b4",
            "cmp r0, 0x53",
            "movne r3, 0",
            "andeq r3, r7, 1",
            "cmp r3, 0",
            "bne 0x7354c",
            "cmp r6, 0x2f",
            "beq 0x737a8",
            "ldr r3, [sp, 0xc]",
            "cmp r3, 0",
            "beq 0x735f0",
            "cmp r6, 0x3f",
            "bne 0x737f4",
            "mov r1, 0",
            "mov r0, r4",
            "mov r2, r1",
            "bl fcn.00073194",
            "cmp r0, 0",
            "bne 0x736ac",
            "mov r1, r8",
            "mov r0, r4",
            "bl fcn.00072c88",
            "mov r6, r0",
            "cmp r7, 0",
            "bne 0x736e8",
            "cmp r6, 0x3e",
            "beq 0x7346c",
            "mov r0, r6",
            "bl fcn.00072a24",
            "ldr r3, [0x00073820]",
            "str r0, [sp]",
            "add r3, fp, r3",
            "add r0, r4, 8",
            "mov r1, 1",
            "mvn r2, 0",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x73488",
            "mov r0, r4",
            "mov r1, sl",
            "bl fcn.00072c88",
            "cmp r0, 0x49",
            "cmpne r0, 0x53",
            "bne 0x737d4",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x18]",
            "mov r0, r4",
            "str sb, [r4, 4]",
            "rsb r2, r1, r2",
            "bl fcn.000730a0",
            "cmp r0, 0",
            "bne 0x736ac",
            "ldr r3, [r4, 0x120]",
            "ldr r2, [sp, 0x14]",
            "cmp r3, 0",
            "ldr r1, [sp, 0x10]",
            "beq 0x73690",
            "rsb r2, r1, r2",
            "mov r0, r4",
            "mov lr, pc",
            "bx r3",
            "cmp r0, 0",
            "bne 0x736ac",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "mov r0, r4",
            "rsb r2, r1, r2",
            "bl fcn.00073194",
            "cmp r0, 0",
            "beq 0x7354c",
            "mov r0, 1",
            "b 0x73488",
            "ldr r2, [sp, 0x1c]",
            "ldr r1, [sp, 0x18]",
            "mov r0, r4",
            "str sb, [r4, 4]",
            "rsb r2, r1, r2",
            "bl fcn.000730a0",
            "cmp r0, 0",
            "beq 0x73690",
            "mov r0, 1",
            "b 0x73488",
            "mov r1, r6",
            "ldr r2, [sp, 0x1c]",
            "b 0x73450",
            "mov r1, 0",
            "mov r0, r4",
            "mov r2, r1",
            "bl fcn.00073194",
            "cmp r0, 0",
            "bne 0x736ac",
            "cmp r6, 0x3e",
            "beq 0x7346c",
            "b 0x73600",
            "ldr r3, [0x00073824]",
            "add r0, r4, 8",
            "add r3, fp, r3",
            "mov r1, 1",
            "mvn r2, 0",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x73488",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "cmp r0, 0x49",
            "bne 0x73808",
            "ldr r1, [sp, 0x18]",
            "ldr r2, [sp, 0x1c]",
            "mov r0, r4",
            "rsb r2, r1, r2",
            "bl fcn.00073194",
            "cmp r0, 0",
            "bne 0x736ac",
            "mov r1, r8",
            "mov r0, r4",
            "bl fcn.00072c88",
            "mov r6, r0",
            "b 0x735f8",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "mov r3, 0",
            "mov r7, 1",
            "str r3, [sp, 0xc]",
            "b 0x73520",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "mov r3, 1",
            "mov r7, 0",
            "str r3, [sp, 0xc]",
            "b 0x73520",
            "mov r1, 0",
            "mov r0, r4",
            "mov r2, r1",
            "bl fcn.00073194",
            "cmp r0, 0",
            "bne 0x736ac",
            "mov r0, r4",
            "mov r1, r8",
            "bl fcn.00072c88",
            "mov r6, r0",
            "b 0x735b4",
            "bl fcn.00072a24",
            "ldr r3, [0x00073828]",
            "str r0, [sp]",
            "b 0x73610",
            "bl fcn.00072a24",
            "ldr r3, [0x0007382c]",
            "str r0, [sp]",
            "b 0x73610",
            "mov r0, r6",
            "bl fcn.00072a24",
            "ldr r3, [0x00073830]",
            "str r0, [sp]",
            "b 0x73610",
            "bl fcn.00072a24",
            "ldr r3, [0x00073834]",
            "str r0, [sp]",
            "b 0x73610"
        ]
    },
    "fcn.00072c88": {
        "function_address": "0x00072c88",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr r3, [r0, 0x110]",
            "ldr r2, [r0, 0x114]",
            "ldr r6, [0x00073088]",
            "cmp r3, r2",
            "mov r4, r0",
            "add r6, pc, r6",
            "mov r7, r1",
            "bhs 0x72ce8",
            "ldr sl, [0x0007308c]",
            "ldrb r1, [r3]",
            "add r0, r6, sl",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "bne 0x72cd8",
            "b 0x72d00",
            "ldrb r1, [r3]",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "beq 0x72d00",
            "add r3, r3, 1",
            "cmp r3, r2",
            "str r3, [r4, 0x110]",
            "blo 0x72cc8",
            "str r2, [r7]",
            "ldr r3, [r4, 0x114]",
            "mov r0, 0x45",
            "str r3, [r7, 4]",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "str r3, [r7]",
            "ldr r3, [r4, 0x110]",
            "str r3, [r7, 4]",
            "ldr r8, [r4, 0x114]",
            "ldr r5, [r4, 0x110]",
            "rsb r3, r5, r8",
            "cmp r3, 3",
            "ble 0x72d8c",
            "ldr r1, [0x00073090]",
            "mov r0, r5",
            "add r1, r6, r1",
            "mov r2, 4",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x72d8c",
            "cmp r8, r5",
            "bls 0x72e4c",
            "ldr sb, [0x00073094]",
            "add sl, r6, sb",
            "b 0x72d60",
            "add r5, r5, 1",
            "cmp r8, r5",
            "str r5, [r4, 0x110]",
            "bls 0x72e50",
            "mov r0, r5",
            "mov r1, sl",
            "mov r2, 3",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x72d50",
            "add r5, r5, 3",
            "str r5, [r4, 0x110]",
            "str r5, [r7, 4]",
            "mov r0, 0x43",
            "b 0x72cf8",
            "ldr r1, [0x00073098]",
            "mov r0, r5",
            "add r1, r6, r1",
            "mov r2, 9",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "bne 0x72e10",
            "add r3, r5, 9",
            "sub r8, r8, 2",
            "cmp r8, r3",
            "str r3, [r4, 0x110]",
            "bls 0x72e44",
            "add r5, r5, 0xa",
            "b 0x72dd4",
            "cmp r8, r3",
            "str r5, [r4, 0x110]",
            "add r5, r5, 1",
            "bls 0x72e44",
            "ldrb r2, [r5, -1]",
            "mov r3, r5",
            "cmp r2, 0x5d",
            "bne 0x72dc4",
            "ldrb r2, [r5]",
            "cmp r2, 0x5d",
            "bne 0x72dc4",
            "ldrb r2, [r5, 1]",
            "cmp r2, 0x3e",
            "bne 0x72dc4",
            "add r5, r5, 2",
            "str r5, [r4, 0x110]",
            "mov r0, 0x44",
            "str r5, [r7, 4]",
            "b 0x72cf8",
            "ldrb sb, [r5]",
            "ldr r0, [0x0007309c]",
            "mov r1, sb",
            "add r0, r6, r0",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0x72e70",
            "add r5, r5, 1",
            "str r5, [r4, 0x110]",
            "ldr r3, [r7]",
            "str r5, [r7, 4]",
            "ldrb r0, [r3]",
            "b 0x72cf8",
            "mov r0, 0x44",
            "b 0x72cf8",
            "ldr sb, [0x00073094]",
            "mov r0, r5",
            "add r1, r6, sb",
            "mov r2, 3",
            "bl sym.imp.bcmp",
            "cmp r0, 0",
            "ldrne r5, [r4, 0x110]",
            "bne 0x72d80",
            "b 0x72d78",
            "cmp sb, 0x22",
            "cmpne sb, 0x27",
            "bne 0x72f50",
            "add r3, r5, 1",
            "cmp r8, r3",
            "str r3, [r4, 0x110]",
            "bls 0x72ec8",
            "ldr r2, [r7]",
            "ldrb r0, [r5, 1]",
            "ldrb r1, [r2]",
            "cmp r0, r1",
            "bne 0x72eb8",
            "b 0x72ecc",
            "ldr r2, [r7]",
            "ldrb r0, [r3]",
            "ldrb r1, [r2]",
            "cmp r0, r1",
            "beq 0x72ecc",
            "add r3, r3, 1",
            "cmp r8, r3",
            "str r3, [r4, 0x110]",
            "bhi 0x72ea4",
            "ldr r2, [r7]",
            "str r3, [r7, 4]",
            "ldr r1, [r4, 0x110]",
            "ldrb r0, [r2]",
            "mov r3, r2",
            "ldrb r2, [r1]",
            "cmp r0, r2",
            "addeq r1, r1, 1",
            "streq r1, [r4, 0x110]",
            "ldreq r3, [r7]",
            "add r3, r3, 1",
            "str r3, [r7]",
            "ldr r2, [r4]",
            "tst r2, 2",
            "bne 0x72f48",
            "ldr r2, [r7, 4]",
            "cmp r2, r3",
            "bls 0x72f48",
            "ldrb r1, [r3]",
            "add r0, r6, sl",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "bne 0x72f38",
            "b 0x73044",
            "ldrb r1, [r3]",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "beq 0x73044",
            "add r3, r3, 1",
            "cmp r2, r3",
            "str r3, [r7]",
            "bhi 0x72f28",
            "mov r0, 0x53",
            "b 0x72cf8",
            "add r1, r6, sl",
            "ldrb r3, [r1, sb]",
            "tst r3, 1",
            "moveq r0, 0x55",
            "beq 0x72cf8",
            "add r2, r5, 1",
            "cmp r8, r2",
            "str r2, [r4, 0x110]",
            "bls 0x72fac",
            "ldrb r3, [r5, 1]",
            "ldrb r3, [r1, r3]",
            "tst r3, 2",
            "beq 0x72fac",
            "add r5, r5, 2",
            "b 0x72f9c",
            "ldrb r3, [r5], 1",
            "ldrb r3, [r1, r3]",
            "tst r3, 2",
            "beq 0x72fac",
            "cmp r8, r5",
            "str r5, [r4, 0x110]",
            "mov r2, r5",
            "bhi 0x72f8c",
            "ldr r3, [r7]",
            "str r2, [r7, 4]",
            "cmp r3, r2",
            "bhs 0x7303c",
            "ldrb r1, [r3]",
            "add r0, r6, sl",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "bne 0x72fe4",
            "b 0x73000",
            "ldrb r1, [r3]",
            "ldrb r1, [r0, r1]",
            "tst r1, 8",
            "beq 0x72ff4",
            "add r3, r3, 1",
            "cmp r2, r3",
            "str r3, [r7]",
            "bhi 0x72fd4",
            "ldr r2, [r7, 4]",
            "cmp r2, r3",
            "bls 0x7303c",
            "ldrb r3, [r2, -1]",
            "add r1, r6, sl",
            "ldrb r0, [r1, r3]",
            "sub r3, r2, 1",
            "tst r0, 8",
            "beq 0x7303c",
            "ldr r0, [r7]",
            "b 0x73030",
            "ldrb r2, [r3, -1]!",
            "ldrb r2, [r1, r2]",
            "tst r2, 8",
            "beq 0x7303c",
            "cmp r0, r3",
            "str r3, [r7, 4]",
            "blo 0x73020",
            "mov r0, 0x49",
            "b 0x72cf8",
            "ldrb r3, [r2, -1]",
            "add r1, r6, sl",
            "ldrb r0, [r1, r3]",
            "sub r3, r2, 1",
            "tst r0, 8",
            "beq 0x72f48",
            "ldr r0, [r7]",
            "b 0x73074",
            "ldrb r2, [r3, -1]!",
            "ldrb r2, [r1, r2]",
            "tst r2, 8",
            "beq 0x72f48",
            "cmp r0, r3",
            "str r3, [r7, 4]",
            "blo 0x73064",
            "mov r0, 0x53",
            "b 0x72cf8"
        ]
    },
    "fcn.000730a0": {
        "function_address": "0x000730a0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r0",
            "ldr r0, [r0, 0x108]",
            "add r6, r4, 0x88",
            "rsb r3, r6, r0",
            "add r3, r3, 1",
            "mov r5, r2",
            "add r2, r3, r2",
            "ldr r3, [0x0007318c]",
            "cmp r2, 0x80",
            "add r3, pc, r3",
            "mov r7, r1",
            "bhi 0x73164",
            "cmp r0, r6",
            "movhi r3, 0x2f",
            "strbhi r3, [r0]",
            "ldrhi r0, [r4, 0x108]",
            "mov r2, r5",
            "addhi r0, r0, 1",
            "strhi r0, [r4, 0x108]",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x108]",
            "add r2, r3, r5",
            "str r2, [r4, 0x108]",
            "mov r2, 0",
            "strb r2, [r3, r5]",
            "ldr r3, [r4]",
            "tst r3, 1",
            "bne 0x73140",
            "ldr r3, [r4, 0x11c]",
            "cmp r3, 0",
            "beq 0x73184",
            "ldr r2, [r4, 0x108]",
            "mov r1, r6",
            "mov r0, r4",
            "rsb r2, r6, r2",
            "mov lr, pc",
            "bx r3",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "ldr r3, [r4, 0x11c]",
            "cmp r3, r2",
            "beq 0x73184",
            "mov r0, r4",
            "mov r1, r7",
            "mov r2, r5",
            "mov lr, pc",
            "bx r3",
            "b 0x73138",
            "ldr r2, [0x00073190]",
            "add r0, r4, 8",
            "add r3, r3, r2",
            "mov r1, 1",
            "mvn r2, 0",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x73138",
            "mov r0, 0",
            "b 0x73138"
        ]
    },
    "fcn.00073194": {
        "function_address": "0x00073194",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "ldr ip, [r0, 0x108]",
            "mov r5, r0",
            "ldr r6, [0x00073314]",
            "add r0, r0, 0x88",
            "cmp ip, r0",
            "sub sp, sp, 0x48",
            "add r6, pc, r6",
            "bls 0x7330c",
            "ldrb r3, [ip]",
            "cmp r3, 0x2f",
            "beq 0x732d8",
            "mov r4, ip",
            "b 0x731d8",
            "ldrb r3, [r4]",
            "cmp r3, 0x2f",
            "beq 0x732dc",
            "sub r4, r4, 1",
            "cmp r4, r0",
            "bhi 0x731cc",
            "ldrb r3, [r4]",
            "cmp r3, 0x2f",
            "rsbne r7, r4, ip",
            "beq 0x732dc",
            "cmp r7, r2",
            "cmpne r1, 0",
            "bne 0x73258",
            "ldr r3, [r5]",
            "tst r3, 1",
            "bne 0x73244",
            "ldr r3, [r5, 0x124]",
            "cmp r3, 0",
            "beq 0x73250",
            "mov r1, r0",
            "rsb r2, r0, ip",
            "mov r0, r5",
            "mov lr, pc",
            "bx r3",
            "mov r3, 0",
            "strb r3, [r4]",
            "str r4, [r5, 0x108]",
            "add sp, sp, 0x48",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr",
            "ldr r3, [r5, 0x124]",
            "cmp r3, 0",
            "bne 0x73220",
            "mov r0, 0",
            "b 0x7322c",
            "cmp r2, 0x1f",
            "movlo sl, r2",
            "movhs sl, 0x1f",
            "add r8, sp, 0x28",
            "mov r0, r8",
            "mov r2, sl",
            "mov r3, 0x20",
            "bl sym.imp.__memcpy_chk",
            "mov sb, 0",
            "cmp r7, 0",
            "strb sb, [r8, sl]",
            "beq 0x732e8",
            "cmp r7, 0x1f",
            "movlo sl, r7",
            "movhs sl, 0x1f",
            "add r7, sp, 8",
            "add r1, r4, 1",
            "mov r2, sl",
            "mov r3, 0x20",
            "mov r0, r7",
            "bl sym.imp.__memcpy_chk",
            "ldr r3, [0x00073318]",
            "strb sb, [r7, sl]",
            "add r0, r5, 8",
            "add r3, r6, r3",
            "mov r1, 1",
            "mvn r2, 0",
            "str r8, [sp]",
            "str r7, [sp, 4]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x73238",
            "mov r4, ip",
            "sub r7, ip, 1",
            "rsb r7, r4, r7",
            "b 0x731f4",
            "ldr r3, [0x0007331c]",
            "add r0, r5, 8",
            "add r3, r6, r3",
            "mov r1, 1",
            "mvn r2, 0",
            "str r8, [sp]",
            "bl sym.imp.__sprintf_chk",
            "mov r0, 1",
            "b 0x73238",
            "mov r4, ip",
            "b 0x731e4"
        ]
    },
    "fcn.00072a24": {
        "function_address": "0x00072a24",
        "instructions": [
            "ldr r3, [0x00072ba8]",
            "sub r0, r0, 0x21",
            "add r3, pc, r3",
            "cmp r0, 0x33",
            "addls pc, pc, r0, lsl 2",
            "b 0x72b18",
            "b 0x72b24",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b30",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b3c",
            "b 0x72b48",
            "b 0x72b54",
            "b 0x72b60",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b6c",
            "b 0x72b78",
            "b 0x72b84",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b90",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b18",
            "b 0x72b9c",
            "b 0x72b0c",
            "ldr r0, [0x00072bac]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bb0]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bb4]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bb8]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bbc]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bc0]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bc4]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bc8]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bcc]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bd0]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bd4]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bd8]",
            "add r0, r3, r0",
            "bx lr",
            "ldr r0, [0x00072bdc]",
            "add r0, r3, r0",
            "bx lr"
        ]
    },
    "sym.yaSSL_shutdown": {
        "function_address": "0x00085fcc",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x10",
            "mov r5, r0",
            "bl rsym._ZNK5yaSSL3SSL16GetQuietShutdownEv",
            "ldr r4, [0x00086058]",
            "subs r2, r0, 0",
            "add r4, pc, r4",
            "bne 0x86018",
            "add r6, sp, 4",
            "mov r1, 1",
            "mov r0, r6",
            "bl rsym._ZN5yaSSL5AlertC1ENS_10AlertLevelENS_16AlertDescriptionE",
            "mov r0, r5",
            "mov r1, r6",
            "bl rsym._ZN5yaSSL9sendAlertERNS_3SSLERKNS_5AlertE",
            "ldr r3, [0x0008605c]",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [sp, 4]",
            "mov r0, r5",
            "bl rsym._ZN5yaSSL3SSL6useLogEv",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym._ZNK5yaSSL3SSL9getSocketEv",
            "bl rsym._ZNK5yaSSL6Socket6get_fdEv",
            "mov r2, 1",
            "mov r1, r0",
            "mov r0, r4",
            "bl rsym._ZN5yaSSL3Log7ShowTCPEib",
            "bl rsym._ZN5yaSSL9GetErrorsEv",
            "bl rsym._ZN5yaSSL6Errors6RemoveEv",
            "mov r0, 1",
            "add sp, sp, 0x10",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym._ZN5yaSSL5AlertC1ENS_10AlertLevelENS_16AlertDescriptionE": {
        "function_address": "0x0003fc1c",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x23c]!"
        ]
    },
    "rsym._ZN5yaSSL9sendAlertERNS_3SSLERKNS_5AlertE": {
        "function_address": "0x00040630",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb84]!"
        ]
    },
    "sym.TaoCrypt::Integer::Integer__": {
        "function_address": "0x000a8c90",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "ldr r7, [0x000a8d4c]",
            "mov r3, 2",
            "str r3, [r0]",
            "add r7, pc, r7",
            "sub sp, sp, 0xc",
            "mov r4, r0",
            "mov r1, 0",
            "mov r0, 8",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r4",
            "ldr r6, [r3], 8",
            "mov r5, 0",
            "mov r1, r0",
            "str r0, [r4, 4]",
            "mov r2, r6",
            "mov r0, r3",
            "mov r3, r6",
            "str r5, [sp]",
            "bl rsym._ZN8TaoCrypt13StdReallocateIjNS_20AllocatorWithCleanupIjEEEENT0_7pointerERS3_PT_NS3_9size_typeES8_b",
            "str r6, [r4]",
            "str r0, [r4, 4]",
            "lsl r2, r6, 2",
            "mov r1, r5",
            "bl sym.imp.memset",
            "ldr r3, [r4]",
            "str r5, [r4, 0xc]",
            "cmp r3, r5",
            "beq 0xa8d28",
            "cmp r3, 1",
            "ldr r3, [r4, 4]",
            "bls 0xa8d28",
            "str r5, [r3]",
            "str r5, [r3, 4]",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, lr}",
            "bx lr",
            "ldr r3, [0x000a8d50]",
            "ldr r1, [0x000a8d54]",
            "ldr r0, [0x000a8d58]",
            "add r3, r7, r3",
            "add r1, r7, r1",
            "add r0, r7, r0",
            "add r3, r3, 0x610",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.my_strndup": {
        "function_address": "0x00048b94",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r4, r1",
            "mov r6, r0",
            "mov r1, r2",
            "add r0, r4, 1",
            "bl rsym.my_malloc",
            "subs r5, r0, 0",
            "beq 0x48bc8",
            "mov r1, r6",
            "mov r2, r4",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "strb r3, [r5, r4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::CertManager::get_privateKey___const": {
        "function_address": "0x0007c49c",
        "instructions": [
            "push {r4, lr}",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL12input_buffer10get_bufferEv",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RMD::update_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007dd10",
        "instructions": [
            "push {r4, lr}",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN8TaoCrypt17HASHwithTransform6UpdateEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.mySTL::list_yaSSL::output_buffer_::list__": {
        "function_address": "0x00088584",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "bne 0x885a0",
            "b 0x885b0",
            "mov r0, r4",
            "ldr r4, [r0, 4]",
            "bl rsym._ZN5mySTL15FreeArrayMemoryIvEEvPT_",
            "cmp r4, 0",
            "bne 0x8859c",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RC4::RC4__": {
        "function_address": "0x0007cfac",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007cff0]",
            "ldr r3, [0x0007cff4]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "ldr r0, [r0, 4]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_3RC47RC4ImplEEEvPT_",
            "ldr r3, [0x0007cff8]",
            "mov r0, r5",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RandomPool::RandomPool__": {
        "function_address": "0x0007d5c0",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "bl rsym._ZN5yaSSL8ysDeleteINS_10RandomPool10RandomImplEEEvPT_",
            "mov r0, r4",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.my_block_write": {
        "function_address": "0x00054db4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "add r6, sp, 0x38",
            "ldm r6, {r5, r6}",
            "ldm r0, {fp, ip}",
            "cmp ip, r6",
            "mov r4, r0",
            "mov r8, r1",
            "mov r7, r2",
            "bhi 0x54e74",
            "beq 0x54e6c",
            "ldr r3, [r4, 0x18]",
            "ldr r2, [r4, 0x2c]",
            "mov sl, 0",
            "rsb r2, r3, r2",
            "adds r0, fp, r2",
            "adc r1, ip, 0",
            "cmp r1, r6",
            "bls 0x54ee4",
            "rsb r5, fp, r5",
            "rsb r6, r5, r2",
            "cmp r6, r7",
            "movhs r6, r7",
            "add r0, r3, r5",
            "mov r2, r6",
            "mov r1, r8",
            "bl sym.imp.memcpy",
            "ldr r3, [r4, 0x18]",
            "ldr r2, [r4, 0x28]",
            "add r3, r3, r6",
            "cmp r3, r2",
            "rsb r7, r6, r7",
            "strhi r3, [r4, 0x28]",
            "cmp r7, 0",
            "beq 0x54e5c",
            "add r8, r8, r6",
            "mov r0, r4",
            "mov r1, r8",
            "mov r2, r7",
            "bl rsym._my_b_write",
            "cmp r0, 0",
            "mvnne sl, 0",
            "mov r0, sl",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp fp, r5",
            "bls 0x54de0",
            "adds r2, r5, r7",
            "adc r3, r6, 0",
            "cmp r3, ip",
            "bls 0x54ef4",
            "ldr r3, [r4, 0x9c]",
            "rsb sb, r5, fp",
            "ldr r0, [r4, 0x88]",
            "orr r3, r3, 4",
            "mov r1, r8",
            "mov r2, sb",
            "stm sp, {r5, r6}",
            "str r3, [sp, 8]",
            "bl rsym.my_pwrite",
            "ldm r4, {fp, ip}",
            "subs sl, r0, 0",
            "ldr r3, [r4, 0x18]",
            "ldr r2, [r4, 0x2c]",
            "mvnne sl, 0",
            "strne sl, [r4, 0x90]",
            "rsb r2, r3, r2",
            "adds r5, r5, sb",
            "adc r6, r6, 0",
            "adds r0, fp, r2",
            "adc r1, ip, 0",
            "cmp r1, r6",
            "rsb r7, sb, r7",
            "add r8, r8, sb",
            "bhi 0x54e00",
            "bne 0x54e44",
            "cmp r0, r5",
            "bhi 0x54e00",
            "b 0x54e44",
            "bne 0x54f00",
            "cmp r2, fp",
            "bhi 0x54e84",
            "ldr r3, [r4, 0x9c]",
            "ldr r0, [r4, 0x88]",
            "orr r3, r3, 4",
            "mov r1, r8",
            "mov r2, r7",
            "stm sp, {r5, r6}",
            "str r3, [sp, 8]",
            "bl rsym.my_pwrite",
            "mov sl, r0",
            "b 0x54e5c"
        ]
    },
    "rsym._my_b_write": {
        "function_address": "0x0003cf28",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x34]!"
        ]
    },
    "rsym.my_pwrite": {
        "function_address": "0x00040570",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc04]!"
        ]
    },
    "sym.yaSSL::SHA::SHA__": {
        "function_address": "0x0007ed44",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x0007eda8]",
            "ldr r3, [0x0007edac]",
            "add r4, pc, r4",
            "ldr r3, [r4, r3]",
            "mov r5, r0",
            "add r3, r3, 8",
            "str r3, [r0]",
            "mov r1, 0",
            "mov r0, 0x70",
            "bl rsym._ZnwjN5yaSSL5new_tE",
            "mov r1, 5",
            "mov r2, 0x40",
            "mov r6, r0",
            "bl rsym._ZN8TaoCrypt17HASHwithTransformC2Ejj",
            "ldr r3, [0x0007edb0]",
            "mov r0, r6",
            "ldr r3, [r4, r3]",
            "add r3, r3, 8",
            "str r3, [r6]",
            "bl rsym._ZN8TaoCrypt3SHA4InitEv",
            "str r6, [r5, 4]",
            "mov r0, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::RSA_PrivateKey::Initialize_TaoCrypt::Source_": {
        "function_address": "0x000b2bfc",
        "instructions": [
            "str lr, [sp, -4]!",
            "ldr r3, [0x000b2c40]",
            "ldr ip, [0x000b2c44]",
            "add r3, pc, r3",
            "ldr ip, [r3, ip]",
            "sub sp, sp, 0xc",
            "add r2, sp, 8",
            "add ip, ip, 8",
            "str ip, [r2, -8]!",
            "mov ip, r0",
            "str r1, [sp, 4]",
            "mov r0, sp",
            "mov r1, ip",
            "bl rsym._ZN8TaoCrypt19RSA_Private_Decoder6DecodeERNS_14RSA_PrivateKeyE",
            "add sp, sp, 0xc",
            "pop {lr}",
            "bx lr"
        ]
    },
    "rsym._ZN8TaoCrypt19RSA_Private_Decoder6DecodeERNS_14RSA_PrivateKeyE": {
        "function_address": "0x0003fa54",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x36c]!"
        ]
    },
    "sym.vio_delete": {
        "function_address": "0x000799ac",
        "instructions": [
            "push {r4, lr}",
            "subs r4, r0, 0",
            "beq 0x799d4",
            "ldr r3, [r4, 0x30]",
            "cmp r3, 0",
            "bne 0x799dc",
            "ldr r0, [r4, 0x54]",
            "bl rsym.my_no_flags_free",
            "mov r0, r4",
            "bl rsym.my_no_flags_free",
            "pop {r4, lr}",
            "bx lr",
            "ldr ip, [r4, 0x90]",
            "mov lr, pc",
            "bx ip",
            "b 0x799c4"
        ]
    },
    "sym.yaSSL::Integer::assign_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007f7fc",
        "instructions": [
            "push {r4, r5, lr}",
            "ldr r5, [r0]",
            "sub sp, sp, 0x14",
            "mov r3, 0",
            "mov r0, sp",
            "bl rsym._ZN8TaoCrypt7IntegerC1EPKhjNS0_10SignednessE",
            "mov r1, sp",
            "mov r0, r5",
            "bl rsym._ZN8TaoCrypt7IntegeraSERKS0_",
            "ldm sp, {r2, r4}",
            "mov r0, r4",
            "lsl r2, r2, 2",
            "mov r1, 0",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIjEEvPT_",
            "add sp, sp, 0x14",
            "pop {r4, r5, lr}",
            "bx lr"
        ]
    },
    "sym.void_yaSSL::ysDelete_yaSSL::HMAC_MD5::HMAC_MD5Impl__yaSSL::HMAC_MD5::HMAC_MD5Impl_": {
        "function_address": "0x00080dd4",
        "instructions": [
            "ldr r3, [0x00080e04]",
            "cmp r0, 0",
            "push {r4, lr}",
            "add r3, pc, r3",
            "ldrne r2, [0x00080e08]",
            "ldrne r2, [r3, r2]",
            "addne r2, r2, 8",
            "strne r2, [r0, 0x10]",
            "mov r1, 0",
            "bl rsym._ZdlPvN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::SSL::verifyState_yaSSL::ClientState_": {
        "function_address": "0x00091784",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "mov r4, r0",
            "bl rsym._ZNK5yaSSL3SSL8GetErrorEv",
            "cmp r0, 0",
            "beq 0x917a4",
            "pop {r4, r5, r6, lr}",
            "bx lr",
            "add r0, r4, 0x8e0",
            "add r0, r0, 0xc",
            "bl rsym._ZNK5yaSSL6States9getClientEv",
            "ldr r3, [r0]",
            "cmp r3, r5",
            "beq 0x9179c",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "b rsym._ZN5yaSSL3SSL11order_errorEv"
        ]
    },
    "sym.yaSSL::RSA::RSAImpl::SetPublic_unsigned_char_const__unsigned_int_": {
        "function_address": "0x0007f280",
        "instructions": [
            "push {r4, r5, lr}",
            "cmp r2, 0",
            "sub sp, sp, 0x1c",
            "mov r4, r0",
            "mov r5, r1",
            "str r2, [sp, 4]",
            "moveq r3, r2",
            "bne 0x7f2f4",
            "mov r0, r3",
            "ldr r2, [sp, 4]",
            "mov r1, r5",
            "str r3, [sp, 8]",
            "mov r5, 0",
            "bl sym.imp.memcpy",
            "mov r0, r4",
            "add r1, sp, 4",
            "str r5, [sp, 0x10]",
            "str r5, [sp, 0x14]",
            "bl rsym._ZN8TaoCrypt13RSA_PublicKey10InitializeERNS_6SourceE",
            "ldr r4, [sp, 8]",
            "mov r1, r5",
            "mov r0, r4",
            "ldr r2, [sp, 4]",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "add sp, sp, 0x1c",
            "pop {r4, r5, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x7f2a0"
        ]
    },
    "sym.my_b_append_tell": {
        "function_address": "0x00055908",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "add r5, r0, 0x38",
            "mov r4, r0",
            "mov r0, r5",
            "bl rsym.my_pthread_fastmutex_lock",
            "add r3, r4, 8",
            "ldm r3, {r2, r3}",
            "ldr ip, [r4, 0x28]",
            "ldr r1, [r4, 0x24]",
            "mov r0, r5",
            "rsb r1, r1, ip",
            "adds r4, r2, r1",
            "adc r5, r3, r1, asr 31",
            "bl sym.imp.pthread_mutex_unlock",
            "mov r0, r4",
            "mov r1, r5",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::RC4::set_decryptKey_unsigned_char_const__unsigned_char_const_": {
        "function_address": "0x0007dc70",
        "instructions": [
            "ldr r0, [r0, 4]",
            "push {r4, lr}",
            "add r0, r0, 0x100",
            "mov r2, 0x10",
            "add r0, r0, 2",
            "bl rsym._ZN8TaoCrypt4ARC46SetKeyEPKhj",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.TaoCrypt::DecodeDSA_Signature_unsigned_char__unsigned_char_const__unsigned_int_": {
        "function_address": "0x0009beb8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r5, [0x0009c0dc]",
            "sub sp, sp, 0x18",
            "cmp r2, 0",
            "add r5, pc, r5",
            "mov r6, r0",
            "mov r4, r1",
            "str r2, [sp, 4]",
            "moveq r3, r2",
            "bne 0x9bf50",
            "mov r0, r3",
            "ldr r2, [sp, 4]",
            "mov r1, r4",
            "str r3, [sp, 8]",
            "bl sym.imp.memcpy",
            "ldr r2, [sp, 4]",
            "mov r8, 0",
            "mov r3, 1",
            "cmp r2, r8",
            "str r3, [sp, 0x10]",
            "str r8, [sp, 0x14]",
            "beq 0x9c0b8",
            "ldr r4, [sp, 8]",
            "ldrb r3, [r4]",
            "cmp r3, 0x30",
            "movne r3, 0x3fc",
            "strne r3, [sp, 0x14]",
            "movne r5, r8",
            "beq 0x9bf64",
            "mov r1, 0",
            "mov r0, r4",
            "bl sym.imp.memset",
            "mov r0, r4",
            "bl rsym._ZN8TaoCrypt13tcArrayDeleteIhEEvPT_",
            "mov r0, r5",
            "add sp, sp, 0x18",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr",
            "mov r1, 0",
            "mov r0, r2",
            "bl rsym._ZnajN8TaoCrypt5new_tE",
            "mov r3, r0",
            "b 0x9bee0",
            "add r7, sp, 4",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [sp, 4]",
            "add r1, r3, 1",
            "cmp r3, r2",
            "str r1, [sp, 0x10]",
            "bhs 0x9c0b8",
            "ldr r4, [sp, 8]",
            "ldrb r3, [r4, r3]",
            "cmp r3, 2",
            "ldrne r3, [0x0009c0e0]",
            "movne r5, r8",
            "strne r3, [sp, 0x14]",
            "bne 0x9bf2c",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "cmp r0, 0x14",
            "mov r4, r0",
            "beq 0x9bfec",
            "cmp r0, 0x15",
            "beq 0x9bfe0",
            "cmp r0, 0x13",
            "strbeq r8, [r6], 1",
            "beq 0x9bfec",
            "ldr r3, [0x0009c0e4]",
            "mov r5, r8",
            "str r3, [sp, 0x14]",
            "ldmib sp, {r2, r4}",
            "b 0x9bf2c",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "mov r4, 0x14",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 8]",
            "mov r2, r4",
            "add r1, r1, r3",
            "mov r0, r6",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 0x10]",
            "mov r0, r7",
            "add r3, r3, r4",
            "str r3, [sp, 0x10]",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "cmp r0, 2",
            "beq 0x9c034",
            "ldr r3, [0x0009c0e0]",
            "mov r5, 0",
            "str r3, [sp, 0x14]",
            "ldmib sp, {r2, r4}",
            "b 0x9bf2c",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt9GetLengthERNS_6SourceE",
            "cmp r0, 0x14",
            "mov r5, r0",
            "beq 0x9c084",
            "cmp r0, 0x15",
            "beq 0x9c078",
            "cmp r0, 0x13",
            "moveq r3, 0",
            "strbeq r3, [r6, r4]",
            "addeq r6, r6, 1",
            "beq 0x9c084",
            "ldr r3, [0x0009c0e4]",
            "mov r5, 0",
            "str r3, [sp, 0x14]",
            "ldmib sp, {r2, r4}",
            "b 0x9bf2c",
            "mov r0, r7",
            "bl rsym._ZN8TaoCrypt6Source4nextEv",
            "mov r5, 0x14",
            "ldr r3, [sp, 0x10]",
            "ldr r1, [sp, 8]",
            "mov r2, r5",
            "add r0, r6, r4",
            "add r1, r1, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [sp, 0x10]",
            "ldr r2, [sp, 4]",
            "add r5, r3, r5",
            "str r5, [sp, 0x10]",
            "ldr r4, [sp, 8]",
            "mov r5, 0x28",
            "b 0x9bf2c",
            "ldr r3, [0x0009c0e8]",
            "ldr r1, [0x0009c0ec]",
            "ldr r0, [0x0009c0f0]",
            "add r3, r5, r3",
            "add r1, r5, r1",
            "add r0, r5, r0",
            "add r3, r3, 0x58",
            "mov r2, 0x92",
            "bl sym.imp.__assert_fail"
        ]
    },
    "sym.mySTL::pair_int__yaSSL::Message_______mySTL::GetArrayMemory_mySTL::pair_int__yaSSL::Message_________unsigned_int_": {
        "function_address": "0x0008a058",
        "instructions": [
            "push {r4, lr}",
            "mov r1, 0",
            "lsl r0, r0, 3",
            "bl rsym._ZnajN5yaSSL5new_tE",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.dynstr_free": {
        "function_address": "0x0004dd94",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r0",
            "ldr r0, [r0]",
            "cmp r0, 0",
            "beq 0x4ddb4",
            "bl rsym.my_no_flags_free",
            "mov r3, 0",
            "str r3, [r4]",
            "pop {r4, lr}",
            "bx lr"
        ]
    },
    "sym.yaSSL::input_buffer::set_current_unsigned_int_": {
        "function_address": "0x0007bb68",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "subs r5, r1, 0",
            "mov r4, r0",
            "subne r1, r5, 1",
            "ldrne r2, [r0]",
            "blne rsym._ZN5yaSSL5Check5checkEjj",
            "str r5, [r4, 4]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00040a58",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "ldr r4, [0x00040a9c]",
            "ldr r5, [0x00040aa0]",
            "add r4, pc, r4",
            "ldrb r3, [r4, r5]",
            "cmp r3, 0",
            "bne 0x40a94",
            "ldr r3, [0x00040aa4]",
            "ldr r3, [r4, r3]",
            "cmp r3, 0",
            "ldrne r3, [0x00040aa8]",
            "ldrne r0, [r4, r3]",
            "blne sym.imp.__cxa_finalize",
            "mov r3, 1",
            "strb r3, [r4, r5]",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00040894",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0x9ec]!"
        ]
    },
    "rsym.str_to_time": {
        "function_address": "0x0003d714",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xaec]!"
        ]
    },
    "fcn.000bfa24": {
        "function_address": "0x000bfa24",
        "instructions": [
            "lsl r2, r1, 1",
            "subs r3, r2, 0x70000000",
            "subshs ip, r3, 0x200000",
            "rsbshs ip, ip, 0x1fc00000",
            "bls 0xbfa54",
            "and ip, r1, 0x80000000",
            "lsl r2, r0, 3",
            "orr r0, ip, r0, lsr 29",
            "cmp r2, 0x80000000",
            "adc r0, r0, r3, lsl 2",
            "biceq r0, r0, 1",
            "bx lr",
            "tst r1, 0x40000000",
            "bne 0xbfa9c",
            "adds r2, r3, 0x2e00000",
            "andlt r0, r1, 0x80000000",
            "bxlt lr",
            "orr r1, r1, 0x100000",
            "lsr r2, r2, 0x15",
            "rsb r2, r2, 0x18",
            "rsb ip, r2, 0x20",
            "lsls r3, r0, ip",
            "lsr r0, r0, r2",
            "orrne r0, r0, 1",
            "lsl r3, r1, 0xb",
            "lsr r3, r3, 0xb",
            "orr r0, r0, r3, lsl ip",
            "lsr r3, r3, r2",
            "lsl r3, r3, 1",
            "b 0xbfa38",
            "mvns r3, r2, asr 21",
            "bne 0xbfab4",
            "orrs r3, r0, r1, lsl 12",
            "movne r0, 0x7f000000",
            "orrne r0, r0, 0xc00000",
            "bxne lr",
            "and r0, r1, 0x80000000",
            "orr r0, r0, 0x7f000000",
            "orr r0, r0, 0x800000",
            "bx lr"
        ]
    },
    "fcn.000bf320": {
        "function_address": "0x000bf320",
        "instructions": [
            "orrs r2, r0, r1",
            "bxeq lr",
            "push {r4, r5, lr}",
            "mov r5, 0",
            "b 0xbf350",
            "mov r4, 0x400",
            "add r4, r4, 0x32",
            "lsrs ip, r1, 0x16",
            "beq 0xbf074",
            "mov r2, 3",
            "lsrs ip, ip, 3",
            "addne r2, r2, 3",
            "lsrs ip, ip, 3",
            "addne r2, r2, 3",
            "add r2, r2, ip, lsr 3",
            "rsb r3, r2, 0x20",
            "lsl ip, r0, r3",
            "lsr r0, r0, r2",
            "orr r0, r0, r1, lsl r3",
            "lsr r1, r1, r2",
            "add r4, r4, r2",
            "b 0xbf074"
        ]
    },
    "rsym.__aeabi_f2ulz": {
        "function_address": "0x0003d3cc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xd1c]!"
        ]
    },
    "rsym.__aeabi_d2ulz": {
        "function_address": "0x0003e2f0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x304]!"
        ]
    },
    "rsym.number_to_datetime": {
        "function_address": "0x00040684",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xb4c]!"
        ]
    },
    "fcn.000bf334": {
        "function_address": "0x000bf334",
        "instructions": [
            "orrs r2, r0, r1",
            "bxeq lr",
            "push {r4, r5, lr}",
            "ands r5, r1, 0x80000000",
            "bpl 0xbf350",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0"
        ]
    },
    "rsym.__aeabi_d2lz": {
        "function_address": "0x0003ea34",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xe2c]!"
        ]
    },
    "fcn.000bfcc4": {
        "function_address": "0x000bfcc4",
        "instructions": [
            "orrs r2, r0, r1",
            "bxeq lr",
            "ands r3, r1, 0x80000000",
            "bpl 0xbfcdc",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "movs ip, r1",
            "moveq ip, r0",
            "moveq r1, r0",
            "moveq r0, 0",
            "orr r3, r3, 0x5b000000",
            "subeq r3, r3, 0x10000000",
            "sub r3, r3, 0x800000",
            "mov r2, 0x17",
            "cmp ip, 0x10000",
            "lsrhs ip, ip, 0x10",
            "subhs r2, r2, 0x10",
            "cmp ip, 0x100",
            "lsrhs ip, ip, 8",
            "subhs r2, r2, 8",
            "cmp ip, 0x10",
            "lsrhs ip, ip, 4",
            "subhs r2, r2, 4",
            "cmp ip, 4",
            "subhs r2, r2, 2",
            "sublo r2, r2, ip, lsr 1",
            "subs r2, r2, ip, lsr 3",
            "sub r3, r3, r2, lsl 23",
            "blt 0xbfd54",
            "add r3, r3, r1, lsl r2",
            "lsl ip, r0, r2",
            "rsb r2, r2, 0x20",
            "cmp ip, 0x80000000",
            "adc r0, r3, r0, lsr r2",
            "biceq r0, r0, 1",
            "bx lr",
            "add r2, r2, 0x20",
            "lsl ip, r1, r2",
            "rsb r2, r2, 0x20",
            "orrs r0, r0, ip, lsl 1",
            "adc r0, r3, r1, lsr r2",
            "biceq r0, r0, ip, lsr 31",
            "bx lr"
        ]
    },
    "rsym.__aeabi_f2lz": {
        "function_address": "0x0003cd84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0x14c]!"
        ]
    },
    "fcn.000bf974": {
        "function_address": "0x000bf974",
        "instructions": [
            "lsl r2, r1, 1",
            "adds r2, r2, 0x200000",
            "bhs 0xbf9b4",
            "bpl 0xbf9ac",
            "mvn r3, 0x3e0",
            "subs r2, r3, r2, asr 21",
            "bls 0xbf9bc",
            "lsl r3, r1, 0xb",
            "orr r3, r3, 0x80000000",
            "orr r3, r3, r0, lsr 21",
            "tst r1, 0x80000000",
            "lsr r0, r3, r2",
            "rsbne r0, r0, 0",
            "bx lr",
            "mov r0, 0",
            "bx lr",
            "orrs r0, r0, r1, lsl 12",
            "bne 0xbf9c8",
            "ands r0, r1, 0x80000000",
            "mvneq r0, 0x80000000",
            "bx lr",
            "mov r0, 0",
            "bx lr"
        ]
    },
    "rsym.my_TIME_to_str": {
        "function_address": "0x000404a4",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 104, 20",
            "ldr pc, [ip, 0xc8c]!"
        ]
    },
    "rsym.TIME_to_ulonglong": {
        "function_address": "0x0003fc88",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1f4]!"
        ]
    },
    "rsym.str2int": {
        "function_address": "0x0003ce74",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6b000",
            "ldr pc, [ip, 0xac]!"
        ]
    },
    "fcn.0004e118": {
        "function_address": "0x0004e118",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "sub sp, sp, 0x200",
            "mov r5, r0",
            "mov r0, sp",
            "mov r6, r2",
            "bl rsym.normalize_dirname",
            "mov r1, sp",
            "mov r2, r0",
            "mov r0, r5",
            "bl rsym.strmake_root",
            "cmp r0, 0",
            "mov r4, sp",
            "moveq r0, 1",
            "beq 0x4e160",
            "mov r1, r6",
            "mov r2, 7",
            "bl rsym.array_append_string_unique",
            "mov r0, 0",
            "add sp, sp, 0x200",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "rsym.array_append_string_unique": {
        "function_address": "0x0003fca0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0x1e4]!"
        ]
    },
    "fcn.0004e530": {
        "function_address": "0x0004e530",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "ldr r5, [0x0004e5f8]",
            "ldr ip, [0x0004e5fc]",
            "add r5, pc, r5",
            "ldr ip, [r5, ip]",
            "sub r1, r1, 1",
            "ldrb lr, [r2, r1]",
            "ldr r8, [ip, 0x20]",
            "mov r7, r0",
            "add lr, r8, lr",
            "ldrb r0, [lr, 1]",
            "sub sp, sp, 0xc",
            "tst r0, 8",
            "mov r6, r3",
            "add sl, r2, r1",
            "beq 0x4e584",
            "ldrb r3, [sl, 1]!",
            "add r3, r8, r3",
            "ldrb r3, [r3, 1]",
            "tst r3, 8",
            "bne 0x4e570",
            "mov r0, sl",
            "bl sym.imp.strlen",
            "sub r3, r0, 1",
            "add r3, sl, r3",
            "mov r1, r3",
            "ldrb r2, [r3, -1]!",
            "add r2, r8, r2",
            "ldrb r4, [r2, 1]",
            "ands r4, r4, 8",
            "bne 0x4e594",
            "cmp sl, r1",
            "strb r4, [r1]",
            "bhs 0x4e5c8",
            "mov r0, sl",
            "add sp, sp, 0xc",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "ldr r3, [0x0004e600]",
            "ldr r2, [0x0004e604]",
            "ldr r3, [r5, r3]",
            "ldr ip, [sp, 0x28]",
            "ldr r0, [r3]",
            "add r2, r5, r2",
            "mov r3, r7",
            "mov r1, 1",
            "stm sp, {r6, ip}",
            "mov sl, r4",
            "bl sym.imp.__fprintf_chk",
            "b 0x4e5b8"
        ]
    },
    "rsym.fn_format": {
        "function_address": "0x0003e8c0",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xf24]!"
        ]
    },
    "rsym.my_dir": {
        "function_address": "0x0003eb84",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xd4c]!"
        ]
    },
    "fcn.000512c0": {
        "function_address": "0x000512c0",
        "instructions": [
            "push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "mov r1, 0x10",
            "mov r7, r0",
            "mov r0, 0x100",
            "bl rsym.my_once_alloc",
            "cmp r0, 0",
            "str r0, [r7, 0x44]",
            "beq 0x5147c",
            "mov r0, 0x100",
            "mov r1, 0x10",
            "bl rsym.my_once_alloc",
            "cmp r0, 0",
            "mov r8, r0",
            "str r0, [r7, 0x48]",
            "beq 0x5147c",
            "ldr r5, [r7, 0x44]",
            "mov r4, 0",
            "mov fp, 1",
            "mov sl, 2",
            "mov sb, 0xe",
            "b 0x5132c",
            "tst r3, 4",
            "strbne sb, [r5, r4]",
            "beq 0x5143c",
            "add r4, r4, 1",
            "cmp r4, 0x100",
            "beq 0x51354",
            "ldr r3, [r7, 0x20]",
            "and r6, r4, 0xff",
            "add r6, r6, 1",
            "ldrb r3, [r3, r6]",
            "tst r3, 3",
            "beq 0x51314",
            "strb sl, [r5, r4]",
            "add r4, r4, 1",
            "cmp r4, 0x100",
            "bne 0x5132c",
            "mov r0, 0xa",
            "strb r0, [r5, 0x27]",
            "mov r0, 0x10",
            "strb r0, [r5, 0x2e]",
            "mov r0, 9",
            "strb r0, [r5, 0x3c]",
            "mov r0, 0xb",
            "strb r0, [r5, 0x23]",
            "mov r0, 0x16",
            "strb r0, [r5, 0x3b]",
            "mov r0, 0x17",
            "strb r0, [r5, 0x3a]",
            "mov r0, 0x12",
            "strb r0, [r5]",
            "mov r0, 0x13",
            "strb r0, [r5, 0x5c]",
            "mov r0, 0x14",
            "strb r0, [r5, 0x2f]",
            "mov r0, 0x15",
            "strb r0, [r5, 0x2a]",
            "mov r0, 0x18",
            "strb r0, [r5, 0x40]",
            "mov r0, 0x1b",
            "mov r3, 8",
            "mov r1, 2",
            "mov r2, 0x11",
            "strb r0, [r5, 0x60]",
            "mov r0, 0x21",
            "strb r3, [r5, 0x3e]",
            "strb r3, [r5, 0x21]",
            "strb r3, [r5, 0x3d]",
            "strb r1, [r5, 0x5f]",
            "strb r2, [r5, 0x26]",
            "strb r0, [r5, 0x22]",
            "strb r1, [r5, 0x24]",
            "strb r2, [r5, 0x7c]",
            "mov r3, 0",
            "ldrb r2, [r5, r3]",
            "cmp r2, 2",
            "cmpne r2, 0xe",
            "movne r2, 0",
            "moveq r2, 1",
            "strb r2, [r8, r3]",
            "add r3, r3, 1",
            "cmp r3, 0x100",
            "bne 0x513e8",
            "mov r1, 0x1e",
            "mov r2, 0x1f",
            "mov r3, 0x20",
            "strb r3, [r5, 0x6e]",
            "strb r1, [r5, 0x78]",
            "strb r2, [r5, 0x62]",
            "strb r1, [r5, 0x58]",
            "strb r2, [r5, 0x42]",
            "strb r3, [r5, 0x4e]",
            "mov r0, 0",
            "pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, r4",
            "ldr r3, [r7, 0x64]",
            "mov r0, r7",
            "ldr ip, [r3, 8]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 1",
            "bhi 0x51344",
            "ldr r3, [r7, 0x20]",
            "ldrb r3, [r3, r6]",
            "tst r3, 8",
            "movne r3, 0x1a",
            "moveq r3, fp",
            "strbne r3, [r5, r4]",
            "strbeq r3, [r5, r4]",
            "b 0x51320",
            "mov r0, 1",
            "b 0x51434"
        ]
    },
    "fcn.000511e8": {
        "function_address": "0x000511e8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x6c",
            "mov r2, r1",
            "mov r5, r1",
            "mov r1, sp",
            "mov r8, r0",
            "bl rsym.my_stat",
            "ldr r4, [0x000512b8]",
            "cmp r0, 0",
            "add r4, pc, r4",
            "beq 0x51220",
            "ldr r6, [sp, 0x30]",
            "cmp r6, 0x100000",
            "bls 0x51230",
            "mov r0, 1",
            "add sp, sp, 0x6c",
            "pop {r4, r5, r6, r7, r8, sl, lr}",
            "bx lr",
            "mov r0, r6",
            "mov r1, r5",
            "bl rsym.my_malloc",
            "subs r7, r0, 0",
            "beq 0x51220",
            "mov r0, r8",
            "mov r1, 0",
            "mov r2, r5",
            "bl rsym.my_open",
            "subs r8, r0, 0",
            "blt 0x51284",
            "mov r2, r6",
            "mov r3, r5",
            "mov r1, r7",
            "bl rsym.my_read",
            "mov r1, r5",
            "mov sl, r0",
            "mov r0, r8",
            "bl rsym.my_close",
            "cmp r6, sl",
            "beq 0x51294",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "mov r0, 1",
            "b 0x51224",
            "ldr r2, [0x000512bc]",
            "mov r1, r6",
            "add r2, r4, r2",
            "mov r0, r7",
            "bl rsym.my_parse_charset_xml",
            "mov r0, r7",
            "bl rsym.my_no_flags_free",
            "mov r0, 0",
            "b 0x51224"
        ]
    },
    "rsym.my_parse_charset_xml": {
        "function_address": "0x0003d564",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xc0c]!"
        ]
    },
    "sym.imp.pthread_cond_wait": {
        "function_address": "0x0003d888",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x9f4]!"
        ]
    },
    "fcn.00058290": {
        "function_address": "0x00058290",
        "instructions": [
            "push {r4, r5, r6, r7, r8, fp, lr}",
            "mov r7, 0",
            "sub sp, sp, 0x14",
            "str r7, [r1]",
            "mov r4, r1",
            "mov r5, r0",
            "mov r6, r2",
            "bl sym.imp.__errno_location",
            "mov r2, 0xa",
            "mov r8, r0",
            "str r7, [r0]",
            "add r1, sp, 0xc",
            "mov r0, r5",
            "bl sym.imp.strtoll",
            "ldr r3, [r8]",
            "ldr r2, [0x000583e0]",
            "cmp r3, 0x22",
            "mov fp, r0",
            "mov ip, r1",
            "add r2, pc, r2",
            "beq 0x583a8",
            "ldr r3, [sp, 0xc]",
            "ldrb r3, [r3]",
            "cmp r3, 0x6b",
            "cmpne r3, 0x4b",
            "beq 0x5832c",
            "cmp r3, 0x6d",
            "cmpne r3, 0x4d",
            "bne 0x58344",
            "lsl r3, r1, 0x14",
            "lsl r2, r0, 0x14",
            "orr r3, r3, r0, lsr 12",
            "mov fp, r2",
            "mov ip, r3",
            "mov r1, ip",
            "mov r0, fp",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, fp, lr}",
            "bx lr",
            "lsl r3, r1, 0xa",
            "orr r3, r3, fp, lsr 22",
            "lsl r2, fp, 0xa",
            "mov fp, r2",
            "mov ip, r3",
            "b 0x58318",
            "cmp r3, 0x67",
            "cmpne r3, 0x47",
            "bne 0x58368",
            "lsl r3, r1, 0x1e",
            "lsl r2, r0, 0x1e",
            "orr r3, r3, r0, lsr 2",
            "mov fp, r2",
            "mov ip, r3",
            "b 0x58318",
            "cmp r3, 0",
            "beq 0x58318",
            "ldr r1, [0x000583e4]",
            "ldr r0, [0x000583e8]",
            "ldr r1, [r2, r1]",
            "add r2, r2, r0",
            "ldr r0, [r1]",
            "mov r1, 1",
            "str r6, [sp]",
            "str r5, [sp, 4]",
            "bl sym.imp.__fprintf_chk",
            "mov r3, 1",
            "str r3, [r4]",
            "mov fp, 0",
            "mov ip, 0",
            "b 0x58318",
            "ldr r3, [0x000583ec]",
            "ldr r1, [0x000583f0]",
            "ldr r3, [r2, r3]",
            "add r1, r2, r1",
            "mov r0, r7",
            "mov r2, r5",
            "ldr ip, [r3]",
            "mov lr, pc",
            "bx ip",
            "mov r3, 1",
            "str r3, [r4]",
            "mov fp, 0",
            "mov ip, 0",
            "b 0x58318"
        ]
    },
    "sym.imp.strtoll": {
        "function_address": "0x0003dca8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x734]!"
        ]
    },
    "fcn.00058418": {
        "function_address": "0x00058418",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r1",
            "mov r1, r2",
            "ldr r2, [r4]",
            "bl fcn.00058290",
            "mov r2, r4",
            "mov r3, 0",
            "pop {r4, lr}",
            "b rsym.getopt_ull_limit_value"
        ]
    },
    "fcn.000583f4": {
        "function_address": "0x000583f4",
        "instructions": [
            "push {r4, lr}",
            "mov r4, r1",
            "mov r1, r2",
            "ldr r2, [r4]",
            "bl fcn.00058290",
            "mov r2, r4",
            "mov r3, 0",
            "pop {r4, lr}",
            "b rsym.getopt_ll_limit_value"
        ]
    },
    "fcn.000bf8c8": {
        "function_address": "0x000bf8c8",
        "instructions": [
            "mov ip, r0",
            "mov r0, r2",
            "mov r2, ip",
            "mov ip, r1",
            "mov r1, r3",
            "mov r3, ip",
            "b fcn.000bf8e4"
        ]
    },
    "rsym.getopt_ull_limit_value": {
        "function_address": "0x0003d930",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0x984]!"
        ]
    },
    "rsym.getopt_ll_limit_value": {
        "function_address": "0x0003d624",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xb8c]!"
        ]
    },
    "rsym.find_typeset": {
        "function_address": "0x0003e7dc",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x69000",
            "ldr pc, [ip, 0xfbc]!"
        ]
    },
    "fcn.0005cc70": {
        "function_address": "0x0005cc70",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "cmp r3, r2",
            "movlo r5, r3",
            "movhs r5, r2",
            "mov r2, r5",
            "mov r4, r0",
            "bl sym.imp.memcpy",
            "mov r3, 0",
            "strb r3, [r4, r5]",
            "mov r0, r4",
            "pop {r4, r5, r6, lr}",
            "bx lr"
        ]
    },
    "fcn.0005cb74": {
        "function_address": "0x0005cb74",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "add r4, r2, r3",
            "ldr r3, [0x0005cc68]",
            "cmp r2, r4",
            "add r3, pc, r3",
            "mov sl, r0",
            "mov r8, r1",
            "bhs 0x5cc5c",
            "mov sb, r2",
            "ldr r5, [0x0005cc6c]",
            "cmp r4, sb",
            "add r5, r3, r5",
            "mov r7, 0",
            "bhi 0x5cbbc",
            "b 0x5cc44",
            "add sb, sb, 1",
            "cmp r4, sb",
            "bls 0x5cc44",
            "ldrb r1, [sb]",
            "mov r0, r5",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "mov r6, sb",
            "bne 0x5cbb0",
            "cmp r4, sb",
            "movhi r6, sb",
            "bls 0x5cc48",
            "add r6, r6, 1",
            "cmp r4, r6",
            "mov r0, r5",
            "bls 0x5cc00",
            "ldrb r1, [r6]",
            "bl sym.imp.strchr",
            "cmp r0, 0",
            "beq 0x5cbe0",
            "cmp r6, sb",
            "movne r1, 0",
            "moveq r1, 1",
            "cmp r7, r8",
            "orrhi r1, r1, 1",
            "cmp r1, 0",
            "bne 0x5cc5c",
            "mov r0, sb",
            "mov r2, 0x10",
            "bl sym.imp.strtoul",
            "cmp r4, r6",
            "strb r0, [sl, r7]",
            "bls 0x5cc5c",
            "mov sb, r6",
            "cmp r4, sb",
            "add r7, r7, 1",
            "bhi 0x5cbbc",
            "mov r6, sb",
            "mov r1, 1",
            "cmp r7, r8",
            "orrhi r1, r1, 1",
            "cmp r1, 0",
            "beq 0x5cc1c",
            "mov r0, 0",
            "pop {r4, r5, r6, r7, r8, sb, sl, lr}",
            "bx lr"
        ]
    },
    "fcn.000600d8": {
        "function_address": "0x000600d8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1c",
            "ldr r4, [sp, 0x40]",
            "mov r6, r3",
            "cmp r3, r4",
            "mov r5, r0",
            "mov r8, r1",
            "mov sb, r2",
            "ldr fp, [sp, 0x48]",
            "beq 0x602f8",
            "ldrb r3, [r3]",
            "mvn sl, 0",
            "ldr ip, [sp, 0x4c]",
            "cmp r3, ip",
            "beq 0x60198",
            "cmp r3, fp",
            "beq 0x60298",
            "ldr r2, [sp, 0x44]",
            "cmp r3, r2",
            "beq 0x6020c",
            "mov r7, r6",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r7",
            "mov r2, r4",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "subs r6, r0, 0",
            "beq 0x6021c",
            "add sl, r8, r6",
            "cmp sl, sb",
            "bhi 0x602cc",
            "mov r0, r8",
            "mov r1, r7",
            "mov r2, r6",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x602cc",
            "add r6, r7, r6",
            "cmp r6, r4",
            "beq 0x60244",
            "ldrb r3, [r6]",
            "ldr ip, [sp, 0x4c]",
            "mov r8, sl",
            "cmp r3, ip",
            "mov sl, 1",
            "bne 0x60114",
            "cmp ip, fp",
            "beq 0x60298",
            "add r6, r6, 1",
            "cmp r4, r6",
            "beq 0x60204",
            "ldr sl, [sp, 0x4c]",
            "ldrb r7, [r6]",
            "mov r1, r8",
            "cmp r7, sl",
            "mov r2, sb",
            "mov r0, r5",
            "beq 0x601f8",
            "cmp fp, r7",
            "bne 0x60324",
            "cmp r8, sb",
            "beq 0x6043c",
            "ldr r3, [r5, 0x64]",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "moveq r0, 1",
            "bne 0x60304",
            "add r8, r8, r0",
            "add r6, r6, 1",
            "cmp r4, r6",
            "bne 0x601b0",
            "mov sl, 0",
            "b 0x6024c",
            "add r7, r6, 1",
            "cmp r7, r4",
            "bne 0x6012c",
            "b 0x60128",
            "cmp r8, sb",
            "beq 0x602cc",
            "ldrb r2, [r7]",
            "ldrb r3, [r8]",
            "cmp r2, r3",
            "bne 0x602cc",
            "add r6, r7, 1",
            "cmp r6, r4",
            "add sl, r8, 1",
            "bne 0x60180",
            "subs sl, sl, sb",
            "movne sl, 1",
            "mov r0, sl",
            "add sp, sp, 0x1c",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "mov r1, r8",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "add r3, r6, 1",
            "cmp r4, r3",
            "add r8, r8, r0",
            "bls 0x602d4",
            "ldrb r2, [r6, 1]",
            "mov r6, r3",
            "cmp fp, r2",
            "bne 0x602d4",
            "cmp sb, r8",
            "beq 0x6024c",
            "mov r1, r8",
            "mov r2, sb",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "moveq r0, 1",
            "beq 0x60278",
            "b 0x6025c",
            "mov sl, 1",
            "b 0x6024c",
            "cmp r3, r4",
            "mov r6, r3",
            "beq 0x602f8",
            "ldrb r3, [r3]",
            "ldr ip, [sp, 0x4c]",
            "cmp r3, ip",
            "beq 0x601a0",
            "cmp r4, r6",
            "bne 0x60108",
            "subs sl, r8, sb",
            "movne sl, 1",
            "b 0x6024c",
            "mov r1, r8",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "b 0x601f4",
            "cmp r6, r4",
            "beq 0x60204",
            "cmp r8, sb",
            "beq 0x6043c",
            "ldr r2, [sp, 0x44]",
            "cmp r2, r7",
            "beq 0x604c8",
            "mov sl, r6",
            "mov r1, sl",
            "mov r2, r4",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "str r0, [sp, 0x10]",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, sl",
            "mov r2, r4",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "addeq r0, r0, 1",
            "beq 0x603a8",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, sl",
            "mov r2, r4",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "add r0, sl, r0",
            "str r0, [sp, 0x14]",
            "mov r6, r4",
            "cmp r8, sb",
            "bhs 0x6043c",
            "ldr r3, [sp, 0x10]",
            "cmp r3, 0",
            "beq 0x60444",
            "add r4, r8, r3",
            "cmp sb, r4",
            "blo 0x60478",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r3",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x60478",
            "ldr ip, [sp, 0x44]",
            "mov r0, r5",
            "str ip, [sp, 4]",
            "ldr ip, [sp, 0x4c]",
            "mov r1, r4",
            "mov r2, sb",
            "ldr r3, [sp, 0x14]",
            "str r6, [sp]",
            "str fp, [sp, 8]",
            "str ip, [sp, 0xc]",
            "bl fcn.000600d8",
            "cmp r0, 0",
            "ble 0x604dc",
            "cmp r4, sb",
            "beq 0x6043c",
            "ldr r2, [sp, 0x14]",
            "ldr ip, [sp, 0x4c]",
            "ldrb r3, [r2]",
            "cmp r3, ip",
            "bne 0x604c0",
            "mvn sl, 0",
            "b 0x6024c",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "bne 0x60478",
            "ldrb r3, [r8]",
            "cmp r3, r7",
            "addeq r4, r8, 1",
            "beq 0x603ec",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "cmp r0, 0",
            "addeq r0, r0, 1",
            "beq 0x604bc",
            "ldr r3, [r5, 0x64]",
            "mov r0, r5",
            "mov r1, r8",
            "mov r2, sb",
            "ldr ip, [r3, 4]",
            "mov lr, pc",
            "bx ip",
            "add r4, r8, r0",
            "mov r8, r4",
            "b 0x603b4",
            "add sl, r6, 1",
            "cmp sl, r4",
            "ldrbne r7, [r6, 1]",
            "bne 0x60344",
            "b 0x60340",
            "mov sl, r0",
            "b 0x6024c"
        ]
    },
    "fcn.00071814": {
        "function_address": "0x00071814",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr ip, [r0, 4]",
            "ldr r0, [r0, 8]",
            "sub sp, sp, 0x28",
            "rsb ip, r0, ip",
            "add r5, sp, 8",
            "mov r7, r1",
            "mov r6, r2",
            "mov r1, r0",
            "cmp ip, 0x1d",
            "movlo r2, ip",
            "movhs r2, 0x1d",
            "mov r0, r5",
            "mov r8, r3",
            "ldr r4, [0x0007188c]",
            "bl rsym.strmake",
            "add r3, r7, r6",
            "mov r2, 0",
            "strb r2, [r3, -1]",
            "ldr r2, [0x00071890]",
            "add r4, pc, r4",
            "add r2, r4, r2",
            "mov r0, r7",
            "sub r1, r6, 1",
            "mov r3, r8",
            "str r5, [sp]",
            "bl rsym.my_snprintf",
            "add sp, sp, 0x28",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.00072414": {
        "function_address": "0x00072414",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x34",
            "ldr fp, [sp, 0x58]",
            "mov r4, r3",
            "ldr r3, [r0, 0x64]",
            "cmp r4, fp",
            "str r2, [sp, 0x20]",
            "mov r5, r0",
            "mov r6, r1",
            "ldr sb, [r3, 0x20]",
            "beq 0x72688",
            "add r0, sp, 0x28",
            "add r1, sp, 0x2c",
            "str r0, [sp, 0x1c]",
            "str r1, [sp, 0x24]",
            "mov r0, r5",
            "ldr r1, [sp, 0x1c]",
            "mov r2, r4",
            "mov r3, fp",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "ble 0x72668",
            "ldr r7, [sp, 0x28]",
            "ldr r2, [sp, 0x64]",
            "cmp r2, r7",
            "beq 0x725f8",
            "ldr r3, [sp, 0x5c]",
            "add r4, r4, r0",
            "cmp r7, r3",
            "movne r7, 0",
            "beq 0x72590",
            "mov r0, r5",
            "ldr r1, [sp, 0x24]",
            "mov r2, r6",
            "ldr r3, [sp, 0x20]",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "str r0, [sp, 0x10]",
            "ble 0x72668",
            "cmp r7, 0",
            "ldrne r3, [sp, 0x28]",
            "bne 0x724d4",
            "ldr r3, [sp, 0x28]",
            "ldr r8, [sp, 0x60]",
            "cmp r8, r3",
            "beq 0x7255c",
            "ldr r1, [r5, 0x34]",
            "lsr r7, r3, 8",
            "ldr r7, [r1, r7, lsl 2]",
            "ldr r0, [sp, 0x2c]",
            "ldr r2, [r5, 0x2c]",
            "lsr ip, r0, 8",
            "str r7, [sp, 0x18]",
            "and r8, r3, 0xff",
            "ldrb r7, [r2, r3, lsr 8]",
            "ldr r1, [r1, ip, lsl 2]",
            "ldrb r2, [r2, r0, lsr 8]",
            "lsl r8, r8, 1",
            "and ip, r0, 0xff",
            "lsl ip, ip, 1",
            "str r8, [sp, 0x14]",
            "ldr sl, [sp, 0x14]",
            "mla r8, r2, ip, r1",
            "ldr ip, [sp, 0x18]",
            "mla sl, r7, sl, ip",
            "cmp r8, 0",
            "cmpne sl, 0",
            "beq 0x72584",
            "cmp r2, r7",
            "bls 0x725bc",
            "lsl r7, r7, 1",
            "mov r1, sl",
            "mov r0, r8",
            "mov r2, r7",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x72668",
            "ldrh r0, [r8, r7]",
            "cmp r0, 0",
            "bne 0x72668",
            "ldr r0, [sp, 0x10]",
            "cmp r4, fp",
            "add r6, r6, r0",
            "bne 0x72450",
            "ldr r1, [sp, 0x20]",
            "subs r0, r6, r1",
            "movne r0, 1",
            "add sp, sp, 0x34",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "subs r0, r3, r0",
            "movne r0, 1",
            "b 0x72554",
            "mov r0, r5",
            "ldr r1, [sp, 0x1c]",
            "mov r2, r4",
            "mov r3, fp",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "ble 0x72668",
            "add r4, r4, r0",
            "mov r7, 1",
            "b 0x72494",
            "bhs 0x725e4",
            "lsl r7, r2, 1",
            "mov r0, r8",
            "mov r1, sl",
            "mov r2, r7",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "bne 0x72668",
            "ldrh r0, [sl, r7]",
            "b 0x72554",
            "mov r0, r8",
            "mov r1, sl",
            "lsl r2, r2, 1",
            "bl sym.imp.memcmp",
            "b 0x72554",
            "cmp fp, r4",
            "addne sl, sp, 0x2c",
            "strne r7, [sp, 0x10]",
            "beq 0x72680",
            "mov r2, r4",
            "ldr r1, [sp, 0x1c]",
            "mov r3, fp",
            "mov r0, r5",
            "mov lr, pc",
            "bx sb",
            "subs r7, r0, 0",
            "mov r2, r6",
            "mov r1, sl",
            "ldr r3, [sp, 0x20]",
            "mov r0, r5",
            "ble 0x72668",
            "ldr ip, [sp, 0x28]",
            "ldr r8, [sp, 0x10]",
            "cmp r8, ip",
            "addeq r4, r4, r7",
            "beq 0x72678",
            "ldr r8, [sp, 0x60]",
            "cmp ip, r8",
            "bne 0x72694",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "bgt 0x72670",
            "mov r0, 1",
            "b 0x72578",
            "add r4, r4, r7",
            "add r6, r6, r0",
            "cmp fp, r4",
            "bne 0x72608",
            "mov r0, 0",
            "b 0x72578",
            "subs r0, r6, r2",
            "movne r0, 1",
            "b 0x72578",
            "cmp r4, fp",
            "beq 0x72680",
            "ldr ip, [sp, 0x20]",
            "cmp r6, ip",
            "beq 0x72864",
            "mov r0, r5",
            "ldr r1, [sp, 0x1c]",
            "mov r2, r4",
            "mov r3, fp",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "ble 0x72668",
            "ldr r3, [sp, 0x28]",
            "ldr r1, [sp, 0x5c]",
            "cmp r1, r3",
            "addne r2, sp, 0x2c",
            "strne r2, [sp, 0x14]",
            "movne sl, r4",
            "bne 0x7272c",
            "b 0x72830",
            "cmp r2, r8",
            "bls 0x727b0",
            "lsl r8, r8, 1",
            "mov r1, r4",
            "mov r0, r7",
            "mov r2, r8",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "ldrheq r0, [r7, r8]",
            "bne 0x72718",
            "cmp r0, 0",
            "beq 0x727ec",
            "ldr r1, [sp, 0x10]",
            "add r6, r6, r1",
            "ldr r2, [sp, 0x20]",
            "cmp r2, r6",
            "beq 0x72864",
            "mov r0, r5",
            "ldr r1, [sp, 0x14]",
            "mov r2, r6",
            "ldr r3, [sp, 0x20]",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "str r0, [sp, 0x10]",
            "ble 0x72668",
            "ldr r3, [sp, 0x28]",
            "ldr r0, [r5, 0x34]",
            "lsr r4, r3, 8",
            "ldr r1, [sp, 0x2c]",
            "ldr r4, [r0, r4, lsl 2]",
            "ldr r2, [r5, 0x2c]",
            "lsr ip, r1, 8",
            "str r4, [sp, 0x18]",
            "ldr r4, [r0, ip, lsl 2]",
            "ldrb r8, [r2, r3, lsr 8]",
            "and r0, r1, 0xff",
            "ldrb r2, [r2, r1, lsr 8]",
            "lsl r0, r0, 1",
            "mla r7, r2, r0, r4",
            "and ip, r3, 0xff",
            "ldr r0, [sp, 0x18]",
            "lsl ip, ip, 1",
            "mla r4, r8, ip, r0",
            "cmp r7, 0",
            "cmpne r4, 0",
            "bne 0x726e8",
            "subs r0, r1, r3",
            "movne r0, 1",
            "b 0x72710",
            "bhs 0x727d8",
            "lsl r8, r2, 1",
            "mov r0, r7",
            "mov r1, r4",
            "mov r2, r8",
            "bl sym.imp.memcmp",
            "cmp r0, 0",
            "ldrheq r0, [r4, r8]",
            "beq 0x72710",
            "b 0x72718",
            "mov r0, r7",
            "mov r1, r4",
            "lsl r2, r2, 1",
            "bl sym.imp.memcmp",
            "b 0x72710",
            "ldr r8, [sp, 0x5c]",
            "ldr ip, [sp, 0x60]",
            "str r8, [sp, 4]",
            "ldr r8, [sp, 0x64]",
            "mov r0, r5",
            "mov r1, r6",
            "ldr r2, [sp, 0x20]",
            "mov r3, sl",
            "str fp, [sp]",
            "str ip, [sp, 8]",
            "str r8, [sp, 0xc]",
            "bl fcn.00072414",
            "cmp r0, 0",
            "ble 0x72578",
            "ldr ip, [sp, 0x10]",
            "add r6, r6, ip",
            "b 0x72720",
            "add r4, r4, r0",
            "ldr r1, [sp, 0x1c]",
            "mov r0, r5",
            "mov r2, r4",
            "mov r3, fp",
            "mov lr, pc",
            "bx sb",
            "cmp r0, 0",
            "ble 0x72668",
            "add r3, sp, 0x2c",
            "str r3, [sp, 0x14]",
            "mov sl, r4",
            "b 0x7272c",
            "mvn r0, 0",
            "b 0x72578"
        ]
    },
    "rsym.init_dynamic_array": {
        "function_address": "0x0003d7f8",
        "instructions": [
            "add ip, pc, 0x100000",
            "add ip, ip, 0x6a000",
            "ldr pc, [ip, 0xa54]!"
        ]
    },
    "fcn.000bff80": {
        "function_address": "0x000bff80",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "mov r4, r2",
            "mov r7, r3",
            "mov r5, r0",
            "mov r6, r1",
            "bl fcn.000c00dc",
            "mul r8, r0, r7",
            "umull r2, r3, r0, r4",
            "mla ip, r4, r1, r8",
            "mov r7, r5",
            "add r3, ip, r3",
            "mov r8, r6",
            "subs r7, r7, r2",
            "sbc r8, r8, r3",
            "ldr r3, [sp, 0x18]",
            "stm r3, {r7, r8}",
            "pop {r4, r5, r6, r7, r8, lr}",
            "bx lr"
        ]
    },
    "fcn.000c00dc": {
        "function_address": "0x000c00dc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x14",
            "cmp r1, 0",
            "movge r6, 0",
            "blt 0xc045c",
            "cmp r3, 0",
            "blt 0xc044c",
            "subs r8, r3, 0",
            "mov sl, r1",
            "mov r4, r2",
            "mov r5, r0",
            "bne 0xc01e4",
            "cmp r2, r1",
            "bls 0xc0220",
            "mov r0, r2",
            "bl fcn.000c09d0",
            "cmp r0, 0",
            "rsbne r3, r0, 0x20",
            "lsrne r3, r5, r3",
            "lslne r4, r4, r0",
            "orrne sl, r3, sl, lsl r0",
            "lsr r8, r4, 0x10",
            "lslne r5, r5, r0",
            "mov r1, r8",
            "mov r0, sl",
            "bl fcn.000bee1c",
            "mov r0, sl",
            "mov fp, r1",
            "mov r1, r8",
            "bl fcn.000bed20",
            "lsl r7, r4, 0x10",
            "lsr r7, r7, 0x10",
            "mul sb, r7, r0",
            "lsr r3, r5, 0x10",
            "orr fp, r3, fp, lsl 16",
            "cmp sb, fp",
            "mov sl, r0",
            "bls 0xc018c",
            "adds fp, fp, r4",
            "sub sl, r0, 1",
            "bhs 0xc018c",
            "cmp sb, fp",
            "subhi sl, sl, 1",
            "addhi fp, fp, r4",
            "rsb sb, sb, fp",
            "mov r0, sb",
            "mov r1, r8",
            "bl fcn.000bee1c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r8",
            "bl fcn.000bed20",
            "mul r3, r7, r0",
            "lsl r5, r5, 0x10",
            "lsr r5, r5, 0x10",
            "orr r5, r5, fp, lsl 16",
            "cmp r3, r5",
            "bls 0xc01d8",
            "adds r5, r5, r4",
            "sub r0, r0, 1",
            "bhs 0xc01d8",
            "cmp r3, r5",
            "subhi r0, r0, 1",
            "orr sl, r0, sl, lsl 16",
            "mov r7, 0",
            "b 0xc01f4",
            "cmp r8, r1",
            "bls 0xc0304",
            "mov r7, 0",
            "mov sl, r7",
            "cmp r6, 0",
            "mov r3, sl",
            "mov r4, r7",
            "beq 0xc020c",
            "rsbs r3, r3, 0",
            "rsc r4, r4, 0",
            "mov r1, r4",
            "mov r0, r3",
            "add sp, sp, 0x14",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "bx lr",
            "cmp r2, 0",
            "bne 0xc0238",
            "mov r1, r2",
            "mov r0, 1",
            "bl fcn.000bed20",
            "mov r4, r0",
            "mov r0, r4",
            "bl fcn.000c09d0",
            "subs sb, r0, 0",
            "bne 0xc046c",
            "lsl r8, r4, 0x10",
            "mov r0, 1",
            "rsb sl, r4, sl",
            "lsr r8, r8, 0x10",
            "lsr r7, r4, 0x10",
            "str r0, [sp, 0xc]",
            "mov r0, sl",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sl",
            "mov fp, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "mul sb, r8, r0",
            "lsr r3, r5, 0x10",
            "orr fp, r3, fp, lsl 16",
            "cmp sb, fp",
            "mov sl, r0",
            "bls 0xc02ac",
            "adds fp, fp, r4",
            "sub sl, r0, 1",
            "bhs 0xc02ac",
            "cmp sb, fp",
            "subhi sl, sl, 1",
            "addhi fp, fp, r4",
            "rsb sb, sb, fp",
            "mov r0, sb",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sb",
            "mov fp, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "mul r3, r8, r0",
            "lsl r5, r5, 0x10",
            "lsr r5, r5, 0x10",
            "orr r5, r5, fp, lsl 16",
            "cmp r3, r5",
            "bls 0xc02f8",
            "adds r5, r5, r4",
            "sub r0, r0, 1",
            "bhs 0xc02f8",
            "cmp r3, r5",
            "subhi r0, r0, 1",
            "orr sl, r0, sl, lsl 16",
            "ldr r7, [sp, 0xc]",
            "b 0xc01f4",
            "mov r0, r3",
            "bl fcn.000c09d0",
            "subs r7, r0, 0",
            "beq 0xc0544",
            "rsb sb, r7, 0x20",
            "lsr r2, r4, sb",
            "lsr r3, r5, sb",
            "orr r8, r2, r8, lsl r7",
            "lsr sb, sl, sb",
            "orr r3, r3, sl, lsl r7",
            "lsr fp, r8, 0x10",
            "mov r0, sb",
            "mov r1, fp",
            "str r3, [sp, 0xc]",
            "bl fcn.000bee1c",
            "mov r0, sb",
            "mov r3, r1",
            "mov r1, fp",
            "str r3, [sp, 4]",
            "bl fcn.000bed20",
            "lsl sb, r8, 0x10",
            "lsr sb, sb, 0x10",
            "mul r1, sb, r0",
            "mov sl, r0",
            "ldr r0, [sp, 0xc]",
            "ldr r3, [sp, 4]",
            "lsr r2, r0, 0x10",
            "orr r3, r2, r3, lsl 16",
            "cmp r1, r3",
            "lsl r2, r4, r7",
            "bls 0xc038c",
            "adds r3, r3, r8",
            "sub sl, sl, 1",
            "blo 0xc0568",
            "rsb r4, r1, r3",
            "mov r0, r4",
            "mov r1, fp",
            "str r2, [sp, 8]",
            "bl fcn.000bee1c",
            "mov r0, r4",
            "mov r3, r1",
            "mov r1, fp",
            "str r3, [sp, 4]",
            "bl fcn.000bed20",
            "ldr r4, [sp, 0xc]",
            "mul r1, sb, r0",
            "lsl ip, r4, 0x10",
            "ldr r3, [sp, 4]",
            "lsr ip, ip, 0x10",
            "orr r3, ip, r3, lsl 16",
            "cmp r1, r3",
            "ldr r2, [sp, 8]",
            "bls 0xc03e4",
            "adds r3, r3, r8",
            "sub r0, r0, 1",
            "blo 0xc0558",
            "rsb r3, r1, r3",
            "orr sl, r0, sl, lsl 16",
            "lsr r1, sl, 0x10",
            "lsr r0, r2, 0x10",
            "bic ip, sl, r1, lsl 16",
            "bic r4, r2, r0, lsl 16",
            "mul r2, ip, r4",
            "mul r4, r1, r4",
            "mul ip, r0, ip",
            "mul r0, r1, r0",
            "adds ip, r4, ip",
            "addhs r0, r0, 0x10000",
            "adds r2, r2, ip, lsl 16",
            "adc r0, r0, ip, lsr 16",
            "cmp r3, r0",
            "blo 0xc0440",
            "movne r3, 0",
            "moveq r3, 1",
            "cmp r2, r5, lsl r7",
            "movls r7, 0",
            "andhi r7, r3, 1",
            "cmp r7, 0",
            "beq 0xc01f4",
            "sub sl, sl, 1",
            "mov r7, 0",
            "b 0xc01f4",
            "rsbs r2, r2, 0",
            "rsc r3, r3, 0",
            "mvn r6, r6",
            "b 0xc00f8",
            "rsbs r0, r0, 0",
            "rsc r1, r1, 0",
            "mvn r6, 0",
            "b 0xc00f0",
            "rsb r8, sb, 0x20",
            "lsr r3, r5, r8",
            "lsl r4, r4, sb",
            "lsr r8, sl, r8",
            "orr r3, r3, sl, lsl sb",
            "lsr r7, r4, 0x10",
            "mov r0, r8",
            "mov r1, r7",
            "str r3, [sp, 0xc]",
            "bl fcn.000bee1c",
            "mov r0, r8",
            "mov sl, r1",
            "mov r1, r7",
            "bl fcn.000bed20",
            "lsl r8, r4, 0x10",
            "lsr r8, r8, 0x10",
            "mul r3, r8, r0",
            "ldr r1, [sp, 0xc]",
            "mov fp, r0",
            "lsr r2, r1, 0x10",
            "orr sl, r2, sl, lsl 16",
            "cmp r3, sl",
            "bls 0xc04d4",
            "adds sl, sl, r4",
            "sub fp, r0, 1",
            "blo 0xc0578",
            "rsb sl, r3, sl",
            "mov r0, sl",
            "mov r1, r7",
            "bl fcn.000bee1c",
            "mov r0, sl",
            "mov r3, r1",
            "mov r1, r7",
            "str r3, [sp, 4]",
            "bl fcn.000bed20",
            "ldr r1, [sp, 0xc]",
            "mul sl, r8, r0",
            "lsl r2, r1, 0x10",
            "ldr r3, [sp, 4]",
            "lsr r2, r2, 0x10",
            "orr r3, r2, r3, lsl 16",
            "cmp sl, r3",
            "bls 0xc0530",
            "adds r3, r3, r4",
            "sub r0, r0, 1",
            "bhs 0xc0530",
            "cmp sl, r3",
            "subhi r0, r0, 1",
            "addhi r3, r3, r4",
            "orr r0, r0, fp, lsl 16",
            "lsl r5, r5, sb",
            "rsb sl, sl, r3",
            "str r0, [sp, 0xc]",
            "b 0xc0260",
            "cmp r8, sl",
            "cmphs r4, r5",
            "movls sl, 1",
            "bls 0xc01f4",
            "b 0xc01ec",
            "cmp r1, r3",
            "addhi r3, r3, r8",
            "subhi r0, r0, 1",
            "b 0xc03e4",
            "cmp r1, r3",
            "subhi sl, sl, 1",
            "addhi r3, r3, r8",
            "b 0xc038c",
            "cmp r3, sl",
            "subhi fp, fp, 1",
            "addhi sl, sl, r4",
            "b 0xc04d4"
        ]
    }
}