{
    "entry0": {
        "function_address": "0x00402744",
        "instructions": [
            "xor ebp, ebp",
            "mov r9, rdx",
            "pop rsi",
            "mov rdx, rsp",
            "and rsp, 0xfffffffffffffff0",
            "push rax",
            "push rsp",
            "mov r8, 0x41cc10",
            "mov rcx, 0x41cc20",
            "mov rdi, main",
            "call sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x00402170",
        "instructions": [
            "jmp qword [reloc.__libc_start_main]"
        ]
    },
    "sym._init": {
        "function_address": "0x00401f40",
        "instructions": [
            "sub rsp, 8",
            "call fcn.00402770",
            "add rsp, 8",
            "ret"
        ]
    },
    "fcn.00402770": {
        "function_address": "0x00402770",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x402782",
            "call rax",
            "add rsp, 8",
            "ret"
        ]
    },
    "sym.btrfs_free_extent": {
        "function_address": "0x0040c419",
        "instructions": [
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x20",
            "mov edx, dword [rsi + 0x1f0]",
            "mov rax, qword [rsi + 0x1d8]",
            "mov r13, qword [rsp + 0x50]",
            "mov rax, qword [rax + 0x28]",
            "cmp rcx, rdx",
            "jae 0x40c462",
            "lea rcx, str.btrfs_free_extent",
            "mov edx, 0x9b2",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__num_bytes___root__sectorsize_",
            "jmp 0x40c4a1",
            "cmp rsi, rax",
            "jne 0x40c4f8",
            "mov edi, 0x38",
            "mov qword [rsp + 0x18], rcx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "mov rcx, qword [rsp + 0x18]",
            "jne 0x40c4a6",
            "lea rcx, str.btrfs_free_extent",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___extent_op_",
            "mov edx, 0x9b7",
            "call sym.imp.__assert_fail",
            "mov qword [rax + 0x10], rcx",
            "mov dword [rax], 1",
            "lea rdx, [r12 + rcx - 1]",
            "mov qword [rax + 8], r12",
            "mov dword [rax + 0x34], r13d",
            "xor r8d, r8d",
            "mov rdi, qword [rbx + 0x1d8]",
            "mov ecx, 8",
            "mov rsi, r12",
            "add rdi, 0x100",
            "call fcn.00411e1b",
            "mov rdi, qword [rbx + 0x1d8]",
            "mov rdx, rbp",
            "mov rsi, r12",
            "xor ebp, ebp",
            "add rdi, 0x100",
            "call fcn.0041210c",
            "jmp 0x40c52b",
            "mov rax, qword [rsp + 0x58]",
            "mov rdx, r12",
            "mov qword [rsp], r13",
            "mov r14, rdi",
            "mov qword [rsp + 8], rax",
            "call fcn.0040b15a",
            "mov ebp, eax",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rdi, r14",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040bd20",
            "test ebp, ebp",
            "cmove ebp, eax",
            "add rsp, 0x20",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00402280",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "sym.imp.__assert_fail": {
        "function_address": "0x004020e0",
        "instructions": [
            "jmp qword [reloc.__assert_fail]"
        ]
    },
    "fcn.00411e1b": {
        "function_address": "0x00411e1b",
        "instructions": [
            "push r15",
            "movsxd rax, ecx",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "xor r13d, r13d",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x18",
            "mov dword [rsp + 4], ecx",
            "mov qword [rsp + 8], rax",
            "test r13, r13",
            "jne 0x411e57",
            "call fcn.00411a4b",
            "test rax, rax",
            "mov r13, rax",
            "je 0x411ff5",
            "mov rsi, r15",
            "mov rdi, rbp",
            "call fcn.0041196c",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x411e99",
            "mov r8d, dword [rsp + 4]",
            "mov rdx, r15",
            "mov rcx, r12",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00411bd7",
            "cmp eax, 0xffffffef",
            "mov r15d, eax",
            "lea rcx, str.set_extent_bits",
            "mov edx, 0x140",
            "je 0x411efd",
            "jmp 0x411ffb",
            "mov rax, qword [rax + 0x30]",
            "mov r14, qword [rbx + 0x38]",
            "cmp rax, r15",
            "jne 0x411ed6",
            "cmp r14, r12",
            "ja 0x411f94",
            "mov rax, qword [rsp + 8]",
            "or qword [rbx + 0x48], rax",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00411b2b",
            "cmp r14, 0xffffffffffffffff",
            "je 0x411fdd",
            "lea r15, [r14 + 1]",
            "jmp 0x411fea",
            "jae 0x411f4e",
            "mov rcx, r15",
            "mov rdx, r13",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00411ab3",
            "cmp eax, 0xffffffef",
            "mov r15d, eax",
            "jne 0x411f10",
            "lea rcx, str.set_extent_bits",
            "mov edx, 0x169",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__err___17_",
            "call sym.imp.__assert_fail",
            "test eax, eax",
            "jne 0x411ffb",
            "cmp qword [rbx + 0x38], r12",
            "ja 0x411f42",
            "mov rax, qword [rsp + 8]",
            "or qword [rbx + 0x48], rax",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00411b2b",
            "cmp r14, 0xffffffffffffffff",
            "je 0x411ffb",
            "lea r15, [r14 + 1]",
            "jmp 0x411f46",
            "mov r15, qword [rbx + 0x30]",
            "xor r13d, r13d",
            "jmp 0x411fea",
            "jbe 0x411f94",
            "lea rbx, [rax - 1]",
            "cmp r12, rax",
            "mov r8d, dword [rsp + 4]",
            "mov rdx, r15",
            "mov rsi, r13",
            "mov rdi, rbp",
            "cmovb rbx, r12",
            "mov rcx, rbx",
            "call fcn.00411bd7",
            "cmp eax, 0xffffffef",
            "mov r15d, eax",
            "jne 0x411f8a",
            "lea rcx, str.set_extent_bits",
            "mov edx, 0x188",
            "jmp 0x411efd",
            "test eax, eax",
            "jne 0x411ffb",
            "lea r15, [rbx + 1]",
            "jmp 0x411f46",
            "lea rcx, [r12 + 1]",
            "mov rdx, r13",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00411ab3",
            "cmp eax, 0xffffffef",
            "mov r15d, eax",
            "lea rcx, str.set_extent_bits",
            "mov edx, 0x196",
            "je 0x411efd",
            "movsxd r14, dword [rsp + 4]",
            "mov rsi, r13",
            "mov rdi, rbp",
            "or qword [rbx + 0x48], r14",
            "call fcn.00411b2b",
            "jmp 0x411ffb",
            "xor r15d, r15d",
            "test r13, r13",
            "je 0x411ffb",
            "mov rdi, r13",
            "xor r15d, r15d",
            "call fcn.00411a7c",
            "jmp 0x411ffb",
            "cmp r15, r12",
            "jbe 0x411e41",
            "jmp 0x411fd5",
            "mov r15d, 0xfffffff4",
            "add rsp, 0x18",
            "mov eax, r15d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041210c": {
        "function_address": "0x0041210c",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "mov rbx, rsi",
            "push rax",
            "call fcn.0041196c",
            "test rax, rax",
            "je 0x41212d",
            "cmp qword [rax + 0x30], rbx",
            "jne 0x41212d",
            "mov qword [rax + 0x50], rbp",
            "xor eax, eax",
            "jmp 0x412132",
            "mov eax, 0xfffffffe",
            "pop rbp",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0040b15a": {
        "function_address": "0x0040b15a",
        "instructions": [
            "push r15",
            "mov r15, r9",
            "push r14",
            "mov r14, r8",
            "push r13",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "sub rsp, 0xb8",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x48], rdi",
            "mov qword [rsp + 0x58], rsi",
            "mov qword [rsp + 0x50], rcx",
            "mov rbp, qword [rax + 0x28]",
            "mov rdx, qword [rax + 0x1c8]",
            "mov rax, qword [rbp + 0x1d8]",
            "mov qword [rsp + 0x68], rdx",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00409eb0",
            "mov rdi, qword [rsp + 0x58]",
            "mov r13, rax",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rax, qword [rax + 0x210]",
            "test rax, rax",
            "je 0x40b203",
            "mov rdx, qword [rsp + 0xf8]",
            "mov rdi, qword [rsp + 0xf0]",
            "mov r9, r15",
            "mov dword [rsp + 0x10], 1",
            "mov r8, r14",
            "mov rcx, qword [rsp + 0x50]",
            "mov rsi, qword [rsp + 0x58]",
            "mov qword [rsp + 8], rdx",
            "mov qword [rsp], rdi",
            "mov rdx, r12",
            "mov rdi, qword [rsp + 0x48]",
            "call rax",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x40bcba",
            "or byte [rax + 0x88], 8",
            "mov dword [rax + 0x80], 1",
            "xor eax, eax",
            "cmp qword [rsp + 0xf0], 0xff",
            "mov dword [rsp + 0x64], 0",
            "seta al",
            "test eax, eax",
            "mov dword [rsp + 0x60], eax",
            "jne 0x40b253",
            "shr r13, 8",
            "and r13d, 1",
            "mov dword [rsp + 0x64], r13d",
            "mov rdi, qword [rsp + 0xf0]",
            "mov rdx, qword [rsp + 0xf8]",
            "lea rcx, [rsp + 0x78]",
            "mov r9, qword [rsp + 0x50]",
            "mov dword [rsp + 0x20], 0",
            "mov r8, r12",
            "mov qword [rsp + 8], r15",
            "mov qword [rsp], r14",
            "mov rsi, rbp",
            "mov qword [rsp + 0x10], rdi",
            "mov rdi, qword [rsp + 0x48]",
            "mov qword [rsp + 0x18], rdx",
            "mov rdx, rbx",
            "call fcn.0040a2e7",
            "cmp eax, 0xfffffffe",
            "mov r13d, eax",
            "jne 0x40b50c",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "cmp qword [rsp + 0xf0], 0xff",
            "mov qword [rsp + 0x78], 0",
            "mov qword [rsp + 0x9f], r12",
            "ja 0x40b375",
            "test r14, r14",
            "je 0x40b2e9",
            "mov byte [rsp + 0xa7], 0xb6",
            "mov qword [rsp + 0xa8], r14",
            "jmp 0x40b2f9",
            "mov byte [rsp + 0xa7], 0xb0",
            "mov qword [rsp + 0xa8], r15",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rsp + 0x9f]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "call fcn.0040551b",
            "mov edx, 0xfffffffe",
            "test eax, eax",
            "cmovg eax, edx",
            "cmp eax, edx",
            "jne 0x40b509",
            "test r14, r14",
            "je 0x40b509",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rsp + 0x9f]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "mov byte [rsp + 0xa7], 0xb4",
            "call fcn.0040551b",
            "test eax, eax",
            "jg 0x40b762",
            "jmp 0x40b509",
            "test r14, r14",
            "je 0x40b38c",
            "mov byte [rsp + 0xa7], 0xb8",
            "mov qword [rsp + 0xa8], r14",
            "jmp 0x40b3b4",
            "mov rdx, qword [rsp + 0xf8]",
            "mov rsi, qword [rsp + 0xf0]",
            "mov rdi, r15",
            "mov byte [rsp + 0xa7], 0xb2",
            "call fcn.00409dfa",
            "mov qword [rsp + 0xa8], rax",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rsp + 0x9f]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x40b509",
            "test r14, r14",
            "je 0x40b439",
            "test eax, eax",
            "jne 0x40b3ee",
            "xor eax, eax",
            "jmp 0x40b509",
            "mov rdi, rbx",
            "mov byte [rsp + 0xa7], 0xb4",
            "call fcn.00402e1a",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rsp + 0x9f]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "call fcn.0040551b",
            "cmp eax, 0",
            "jl 0x40b509",
            "je 0x40b509",
            "mov eax, 0xfffffffe",
            "jmp 0x40b509",
            "mov r13, qword [rbx]",
            "mov rdi, r13",
            "call fcn.00409ea9",
            "xor ecx, ecx",
            "cmp dword [rbx + 0x40], eax",
            "jb 0x40b471",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "jl 0x40b509",
            "jne 0x40b42f",
            "mov r13, qword [rbx]",
            "mov rdi, r13",
            "call fcn.00409ea9",
            "mov ecx, 1",
            "mov edx, dword [rbx + 0x40]",
            "lea rsi, [rsp + 0x9f]",
            "mov rdi, r13",
            "mov dword [rsp + 0x38], eax",
            "mov dword [rsp + 0x40], ecx",
            "call fcn.00409e65",
            "cmp qword [rsp + 0x9f], r12",
            "mov eax, dword [rsp + 0x38]",
            "mov ecx, dword [rsp + 0x40]",
            "jne 0x40b42f",
            "cmp byte [rsp + 0xa7], 0xb2",
            "jne 0x40b42f",
            "mov edx, dword [rbx + 0x40]",
            "movsxd rsi, edx",
            "imul rsi, rsi, 0x19",
            "mov esi, dword [r13 + rsi + 0xf2]",
            "lea rdi, [r13 + rsi + 0xd5]",
            "cmp qword [rdi + 0xc], r15",
            "lea rsi, [rdi + 0xc]",
            "jne 0x40bcc2",
            "mov rdi, qword [rsp + 0xf0]",
            "cmp qword [rsi + 8], rdi",
            "jne 0x40bcc2",
            "mov rdi, qword [rsp + 0xf8]",
            "cmp qword [rsi + 0x10], rdi",
            "jne 0x40bcc2",
            "test ecx, ecx",
            "je 0x40b3e7",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "jmp 0x40b3b4",
            "mov r13d, eax",
            "test r13d, r13d",
            "jne 0x40b762",
            "mov r14d, dword [rbx + 0x40]",
            "jmp 0x40b57a",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0x8e]",
            "mov edx, r14d",
            "call fcn.00409e65",
            "cmp qword [rsp + 0x8e], r12",
            "je 0x40b53c",
            "xor eax, eax",
            "jmp 0x40b586",
            "mov al, byte [rsp + 0x96]",
            "cmp al, 0xa8",
            "jne 0x40b556",
            "mov rdx, qword [rsp + 0x50]",
            "cmp qword [rsp + 0x97], rdx",
            "jmp 0x40b56a",
            "cmp al, 0xa9",
            "jne 0x40b56c",
            "mov rdi, qword [rsp + 0xf0]",
            "cmp qword [rsp + 0x97], rdi",
            "je 0x40b581",
            "mov eax, dword [rbx + 0x40]",
            "sub eax, r14d",
            "cmp eax, 5",
            "jg 0x40b538",
            "dec r14d",
            "test r14d, r14d",
            "jns 0x40b51b",
            "jmp 0x40b538",
            "mov eax, 1",
            "test eax, eax",
            "je 0x40b59e",
            "movsxd rdx, r14d",
            "mov rcx, qword [rbx]",
            "imul rdx, rdx, 0x19",
            "cmp dword [rcx + rdx + 0xf6], 0x17",
            "jbe 0x40b5ac",
            "test eax, eax",
            "mov r15d, 1",
            "jne 0x40b7ac",
            "cmp qword [rsp + 0x78], 0",
            "je 0x40b5d0",
            "lea rcx, str.__free_extent",
            "mov edx, 0x8bc",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__iref_",
            "jmp 0x40b605",
            "mov r8d, dword [rsp + 0x60]",
            "mov rdi, qword [rsp + 0x48]",
            "xor ecx, ecx",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "call fcn.0040a949",
            "test eax, eax",
            "je 0x40b60a",
            "lea rcx, str.__free_extent",
            "mov edx, 0x8c0",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "or byte [rbx + 0x88], 8",
            "mov qword [rsp + 0x8e], r12",
            "cmp dword [rsp + 0x64], 0",
            "je 0x40b642",
            "mov rax, qword [rsp + 0xf0]",
            "mov byte [rsp + 0x96], 0xa9",
            "mov qword [rsp + 0x97], rax",
            "jmp 0x40b657",
            "mov rdx, qword [rsp + 0x50]",
            "mov byte [rsp + 0x96], 0xa8",
            "mov qword [rsp + 0x97], rdx",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rsp + 0x8e]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "call fcn.0040551b",
            "test eax, eax",
            "mov r14b, byte [rsp + 0x64]",
            "jle 0x40b6d4",
            "test r14b, r14b",
            "je 0x40b6d4",
            "mov edx, dword [rbx + 0x40]",
            "test edx, edx",
            "je 0x40b6d4",
            "mov rdi, qword [rbx]",
            "dec edx",
            "lea rsi, [rsp + 0x8e]",
            "mov dword [rbx + 0x40], edx",
            "mov dword [rsp + 0x38], eax",
            "call fcn.00409e65",
            "cmp qword [rsp + 0x8e], r12",
            "mov eax, dword [rsp + 0x38]",
            "jne 0x40b6d4",
            "cmp byte [rsp + 0x96], 0xa8",
            "jne 0x40b6d4",
            "mov rdx, qword [rsp + 0x50]",
            "cmp qword [rsp + 0x97], rdx",
            "mov edx, 0",
            "cmove eax, edx",
            "test eax, eax",
            "jle 0x40b71c",
            "test r14b, r14b",
            "je 0x40b71c",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "mov rdx, qword [rsp + 0x50]",
            "mov rdi, qword [rsp + 0x48]",
            "mov r9d, 1",
            "or r8d, 0xffffffff",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "mov byte [rsp + 0x96], 0xa8",
            "mov qword [rsp + 0x97], rdx",
            "lea rdx, [rsp + 0x8e]",
            "call fcn.0040551b",
            "test eax, eax",
            "je 0x40bccc",
            "mov ecx, eax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.umm__got__d_back_from_search__was_looking_for__llu_n",
            "mov r8, r12",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rsi, qword [rbx]",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "lea rcx, str.__free_extent",
            "mov edx, 0x8ea",
            "jmp 0x40b5f7",
            "mov rax, qword [rsp + 0xf0]",
            "mov rdi, qword [rsp + 0xf8]",
            "lea rdx, str.btrfs_unable_to_find_ref_byte_nr__llu_parent__llu_root__llu__owner__llu_offset__llu_n",
            "mov r9, r15",
            "mov r8, r14",
            "mov rcx, r12",
            "mov esi, 1",
            "mov r13d, 0xfffffffb",
            "mov qword [rsp], rax",
            "mov rax, qword [reloc.stderr]",
            "mov qword [rsp + 8], rdi",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x40bca3",
            "movsxd rax, r14d",
            "mov rdi, qword [rbx]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdi + rax + 0xf6]",
            "cmp eax, 0x17",
            "ja 0x40b8de",
            "test r15d, r15d",
            "jne 0x40b7d1",
            "cmp r14d, dword [rbx + 0x40]",
            "je 0x40b7f0",
            "lea rcx, str.__free_extent",
            "mov edx, 0x8fd",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__found_extent__extent_slot___path__slots_0__",
            "jmp 0x40b605",
            "mov rcx, qword [rsp + 0xf0]",
            "mov rdi, qword [rsp + 0x48]",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "call fcn.0040a0bf",
            "test eax, eax",
            "jns 0x40b82b",
            "lea rcx, str.__free_extent",
            "mov edx, 0x900",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041dee6]",
            "jmp 0x40b605",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "or byte [rbx + 0x88], 8",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rdx, qword [rsp + 0x50]",
            "mov rdi, qword [rsp + 0x48]",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "mov qword [rsp + 0x8e], r12",
            "mov byte [rsp + 0x96], 0xa8",
            "mov qword [rsp + 0x97], rdx",
            "lea rdx, [rsp + 0x8e]",
            "call fcn.0040551b",
            "test eax, eax",
            "je 0x40bcd8",
            "mov ecx, eax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.umm__got__d_back_from_search__was_looking_for__llu_n",
            "mov r8, r12",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rsi, qword [rbx]",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "lea rcx, str.__free_extent",
            "mov edx, 0x911",
            "jmp 0x40b5f7",
            "lea rcx, str.__free_extent",
            "mov edx, 0x917",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__item_size___sizeof_ei__",
            "jmp 0x40b605",
            "movsxd rdx, r14d",
            "imul rdx, rdx, 0x19",
            "cmp qword [rsp + 0xf0], 0xff",
            "mov ecx, dword [rdi + rdx + 0xf2]",
            "lea rdx, [rcx + 0x65]",
            "ja 0x40b95d",
            "cmp byte [rsp + 0x96], 0xa8",
            "jne 0x40b95d",
            "cmp eax, 0x29",
            "ja 0x40b92c",
            "lea rcx, str.__free_extent",
            "mov edx, 0x91d",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__item_size___sizeof_ei___sizeof_bi__",
            "jmp 0x40b605",
            "movzx eax, byte [rdi + rcx + 0x10a]",
            "cmp qword [rsp + 0xf0], rax",
            "je 0x40b95d",
            "lea rcx, str.__free_extent",
            "mov edx, 0x91f",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__owner_objectid___btrfs_tree_block_level_leaf__bi__",
            "jmp 0x40b605",
            "add rdx, 0x70",
            "mov rax, qword [rdi + rdx + 0xc]",
            "test rax, rax",
            "jne 0x40b98a",
            "lea rcx, str.__free_extent",
            "mov edx, 0x923",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__refs___refs_to_drop_",
            "jmp 0x40b605",
            "dec rax",
            "je 0x40ba05",
            "cmp qword [rsp + 0x78], 0",
            "je 0x40b9df",
            "test r15d, r15d",
            "je 0x40b9c0",
            "mov r8d, dword [rsp + 0x60]",
            "mov rcx, qword [rsp + 0x78]",
            "mov rdx, rbx",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, rbp",
            "call fcn.0040a949",
            "test eax, eax",
            "je 0x40bca3",
            "jmp 0x40b9f4",
            "lea rcx, str.__free_extent",
            "mov edx, 0x92c",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___found_extent_",
            "jmp 0x40b605",
            "mov qword [rdi + rdx + 0xc], rax",
            "call fcn.00408149",
            "test r15d, r15d",
            "je 0x40bca3",
            "jmp 0x40b99c",
            "lea rcx, str.__free_extent",
            "mov edx, 0x935",
            "jmp 0x40b5f7",
            "test r15d, r15d",
            "jne 0x40ba15",
            "mov r13d, 1",
            "jmp 0x40bb4a",
            "cmp dword [rsp + 0x60], 0",
            "je 0x40bae7",
            "mov r13, qword [rbx]",
            "mov r15, qword [rsp + 0x78]",
            "lea rsi, [rsp + 0x9f]",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, r13",
            "call fcn.00409e65",
            "test r15, r15",
            "je 0x40ba5c",
            "cmp byte [r15 + r13 + 0x7c], 0xb2",
            "jne 0x40ba52",
            "mov eax, dword [r15 + r13 + 0x95]",
            "jmp 0x40bac4",
            "mov eax, dword [r15 + r13 + 0x85]",
            "jmp 0x40bac4",
            "mov al, byte [rsp + 0xa7]",
            "cmp al, 0xb2",
            "jne 0x40ba69",
            "jmp 0x40ba8b",
            "cmp al, 0xb8",
            "jne 0x40ba87",
            "movsxd rax, dword [rbx + 0x40]",
            "imul rax, rax, 0x19",
            "mov eax, dword [r13 + rax + 0xf2]",
            "mov eax, dword [r13 + rax + 0xe1]",
            "jmp 0x40bac4",
            "cmp al, 0xb4",
            "jne 0x40baa5",
            "movsxd rax, dword [rbx + 0x40]",
            "imul rax, rax, 0x19",
            "mov eax, dword [r13 + rax + 0xf2]",
            "mov eax, dword [r13 + rax + 0xf9]",
            "jmp 0x40bac4",
            "lea rcx, str.extent_data_ref_count",
            "mov edx, 0x380",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x40b605",
            "dec eax",
            "je 0x40bae7",
            "lea rcx, str.__free_extent",
            "mov edx, 0x93d",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__is_data__refs_to_drop___extent_data_ref_count_root__path__iref__",
            "jmp 0x40b605",
            "cmp qword [rsp + 0x78], 0",
            "je 0x40bb18",
            "cmp dword [rbx + 0x40], r14d",
            "je 0x40ba0a",
            "lea rcx, str.__free_extent",
            "mov edx, 0x93f",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__path__slots_0____extent_slot_",
            "jmp 0x40b605",
            "lea eax, [r14 + 1]",
            "cmp dword [rbx + 0x40], eax",
            "je 0x40bb40",
            "lea rcx, str.__free_extent",
            "mov edx, 0x941",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__path__slots_0____extent_slot__1_",
            "jmp 0x40b605",
            "mov dword [rbx + 0x40], r14d",
            "mov r13d, 2",
            "cmp qword [rsp + 0x68], 0",
            "je 0x40bcfb",
            "mov rdi, qword [rsp + 0x68]",
            "mov rax, qword [rdi + 8]",
            "test rax, rax",
            "je 0x40bcfb",
            "mov rdx, qword [rsp + 0x50]",
            "mov rsi, r12",
            "mov rdi, qword [rsp + 0x58]",
            "xor r14d, r14d",
            "call rax",
            "test eax, eax",
            "jg 0x40bc25",
            "jmp 0x40bcfb",
            "mov edx, dword [rsp + 0x50]",
            "mov rdi, qword [rsp + 0x58]",
            "mov rsi, r12",
            "call fcn.0040754f",
            "test rax, rax",
            "mov r14, rax",
            "je 0x40bc0b",
            "xor esi, esi",
            "mov rdi, rax",
            "call fcn.0040814e",
            "test eax, eax",
            "je 0x40bc03",
            "cmp qword [r14 + 0xd4], 0xfffffffffffffffa",
            "mov rax, qword [r14 + 0xcc]",
            "mov qword [rsp + 0x80], rax",
            "je 0x40bc03",
            "mov rdi, qword [rsp + 0x48]",
            "cmp rax, qword [rdi]",
            "jne 0x40bc03",
            "mov rax, qword [r14 + 0xb4]",
            "test al, 1",
            "mov qword [rsp + 0x80], rax",
            "jne 0x40bc03",
            "mov rsi, qword [rsp + 0x58]",
            "mov rdx, r14",
            "xor edi, edi",
            "call fcn.0040813e",
            "mov rdi, r14",
            "mov r14d, 1",
            "call fcn.00412164",
            "jmp 0x40bc25",
            "mov rdi, r14",
            "call fcn.00412164",
            "mov rdx, qword [rsp + 0x50]",
            "mov rdi, qword [rsp + 0x58]",
            "mov ecx, 1",
            "mov rsi, r12",
            "xor r14d, r14d",
            "call fcn.0040b0a6",
            "mov ecx, dword [rbx + 0x40]",
            "mov rdi, qword [rsp + 0x48]",
            "mov r8d, r13d",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "call fcn.00406b84",
            "test eax, eax",
            "mov r13d, eax",
            "lea rcx, str.__free_extent",
            "mov edx, 0x959",
            "jne 0x40b5f7",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "cmp dword [rsp + 0x60], 0",
            "je 0x40bc8c",
            "mov rcx, qword [rsp + 0x50]",
            "mov rsi, qword [rsp + 0x58]",
            "mov rdx, r12",
            "mov rdi, qword [rsp + 0x48]",
            "call fcn.0041104f",
            "test eax, eax",
            "lea rcx, str.__free_extent",
            "mov edx, 0x95e",
            "jne 0x40b5f7",
            "mov rdx, qword [rsp + 0x50]",
            "mov rdi, qword [rsp + 0x58]",
            "mov r8d, r14d",
            "xor ecx, ecx",
            "mov rsi, r12",
            "call fcn.0040ac46",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, rbp",
            "call fcn.0040af4b",
            "jmp 0x40bd0b",
            "mov r13d, 0xfffffff4",
            "jmp 0x40bd0b",
            "inc edx",
            "mov dword [rbx + 0x40], edx",
            "jmp 0x40b446",
            "mov r14d, dword [rbx + 0x40]",
            "xor r15d, r15d",
            "jmp 0x40b7ac",
            "mov r14d, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "movsxd rax, r14d",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdi + rax + 0xf6]",
            "cmp eax, 0x17",
            "ja 0x40b8de",
            "jmp 0x40b8bf",
            "cmp dword [rsp + 0x60], 0",
            "jne 0x40bc0b",
            "jmp 0x40bb87",
            "add rsp, 0xb8",
            "mov eax, r13d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040bd20": {
        "function_address": "0x0040bd20",
        "instructions": [
            "push r15",
            "mov r15, rdi",
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "push rbx",
            "xor ebx, ebx",
            "sub rsp, 0x48",
            "mov r12, qword [rsi + 0x1d8]",
            "lea rbp, [r12 + 0x128]",
            "add r12, 0x100",
            "lea rcx, [rsp + 0x30]",
            "lea rdx, [rsp + 0x28]",
            "xor esi, esi",
            "mov r8d, 8",
            "mov rdi, r12",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40bead",
            "mov rsi, qword [rsp + 0x28]",
            "lea rdx, [rsp + 0x38]",
            "mov rdi, r12",
            "call fcn.00412136",
            "test eax, eax",
            "je 0x40bd95",
            "lea rcx, str.del_pending_extents",
            "mov edx, 0x983",
            "jmp 0x40be4c",
            "mov rdx, qword [rsp + 0x30]",
            "mov rsi, qword [rsp + 0x28]",
            "xor r8d, r8d",
            "mov ecx, 8",
            "mov rdi, r12",
            "mov r14, qword [rsp + 0x38]",
            "call fcn.00411cbb",
            "mov rdx, qword [rsp + 0x30]",
            "mov rsi, qword [rsp + 0x28]",
            "xor r8d, r8d",
            "mov ecx, 8",
            "mov rdi, rbp",
            "call fcn.0041208d",
            "test eax, eax",
            "jne 0x40be22",
            "mov rcx, qword [rsp + 0x30]",
            "mov qword [rsp + 8], 0",
            "xor r8d, r8d",
            "movsxd rax, dword [r14 + 0x34]",
            "mov rdx, qword [rsp + 0x28]",
            "mov rsi, r13",
            "mov r9, qword [r13 + 0x1c7]",
            "mov rdi, r15",
            "inc rcx",
            "sub rcx, rdx",
            "mov qword [rsp], rax",
            "call fcn.0040b15a",
            "mov rdi, r14",
            "mov dword [rsp + 0x18], eax",
            "call sym.imp.free",
            "mov eax, dword [rsp + 0x18]",
            "test eax, eax",
            "cmovne ebx, eax",
            "jmp 0x40bd4c",
            "mov rdi, r14",
            "call sym.imp.free",
            "mov rsi, qword [rsp + 0x28]",
            "lea rdx, [rsp + 0x38]",
            "mov rdi, rbp",
            "call fcn.00412136",
            "test eax, eax",
            "je 0x40be5f",
            "lea rcx, str.del_pending_extents",
            "mov edx, 0x993",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov r14, qword [rsp + 0x38]",
            "mov rdx, qword [rsp + 0x30]",
            "xor r8d, r8d",
            "mov rsi, qword [rsp + 0x28]",
            "mov ecx, 8",
            "mov rdi, rbp",
            "call fcn.00411cbb",
            "cmp dword [r14], 2",
            "jne 0x40bea0",
            "lea rcx, str.del_pending_extents",
            "mov edx, 0x99b",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__1_",
            "jmp 0x40be5a",
            "mov rdi, r14",
            "call sym.imp.free",
            "jmp 0x40bd4c",
            "add rsp, 0x48",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "sym.btrfs_inc_extent_ref": {
        "function_address": "0x0040bebe",
        "instructions": [
            "push r15",
            "mov r15, rdx",
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, r9",
            "push rbp",
            "mov rbp, r8",
            "push rbx",
            "sub rsp, 0x98",
            "mov qword [rsp + 0x48], rcx",
            "mov qword [rsp + 0x50], rdi",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "mov rcx, qword [rsp + 0x48]",
            "je 0x40c3b1",
            "or byte [rax + 0x88], 8",
            "mov dword [rax + 0x80], 1",
            "mov r9, rcx",
            "mov rax, qword [r13 + 0x1d8]",
            "mov rdx, qword [rsp + 0xd0]",
            "lea rcx, [rsp + 0x70]",
            "mov rdi, qword [rsp + 0x50]",
            "mov r8, r15",
            "mov r14, qword [rax + 0x28]",
            "mov rax, qword [rsp + 0xd8]",
            "mov qword [rsp + 0x10], rdx",
            "mov rdx, rbx",
            "mov dword [rsp + 0x20], 1",
            "mov qword [rsp + 8], r12",
            "mov qword [rsp], rbp",
            "mov rsi, r14",
            "mov qword [rsp + 0x18], rax",
            "call fcn.0040a2e7",
            "test eax, eax",
            "jne 0x40bfae",
            "cmp qword [rsp + 0xd0], 0xff",
            "ja 0x40bf8e",
            "lea rcx, str.insert_inline_extent_backref",
            "mov edx, 0x549",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__owner___256ULL_",
            "jmp 0x40c052",
            "mov rcx, qword [rsp + 0x70]",
            "mov rdi, qword [rsp + 0x50]",
            "mov r8d, 1",
            "mov rdx, rbx",
            "mov rsi, r14",
            "call fcn.00409f09",
            "jmp 0x40c12b",
            "cmp eax, 0xfffffffe",
            "jne 0x40c12b",
            "movsxd rax, dword [rbx + 0x40]",
            "mov r15, qword [rbx]",
            "mov r11, qword [rsp + 0x70]",
            "imul rax, rax, 0x19",
            "cmp rbp, 1",
            "sbb r8d, r8d",
            "and r8d, 0xfffffffa",
            "cmp qword [rsp + 0xd0], 0xff",
            "mov eax, dword [r15 + rax + 0xf2]",
            "mov qword [rsp + 0x58], rax",
            "ja 0x40bff6",
            "add r8d, 0xb6",
            "jmp 0x40bffd",
            "add r8d, 0xb8",
            "mov edi, r8d",
            "mov dword [rsp + 0x38], r8d",
            "mov qword [rsp + 0x40], r11",
            "call fcn.00409eb8",
            "mov rdi, qword [rsp + 0x50]",
            "mov ecx, eax",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov dword [rsp + 0x48], eax",
            "call fcn.0040520e",
            "test eax, eax",
            "mov r8d, dword [rsp + 0x38]",
            "movsxd r10, dword [rsp + 0x48]",
            "mov r11, qword [rsp + 0x40]",
            "je 0x40c057",
            "lea rcx, str.setup_inline_extent_backref",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x4bd",
            "call sym.imp.__assert_fail",
            "movsxd rax, dword [rbx + 0x40]",
            "imul rax, rax, 0x19",
            "mov eax, dword [r15 + rax + 0xf2]",
            "inc qword [r15 + rax + 0xe1]",
            "lea rdx, [rax + 0x65]",
            "movsxd rax, dword [rbx + 0x40]",
            "lea r14, [r11 + rdx - 0x65]",
            "sub r14, qword [rsp + 0x58]",
            "imul rax, rax, 0x19",
            "mov ecx, dword [r15 + rax + 0xf6]",
            "add rcx, rdx",
            "sub rcx, r10",
            "cmp r14, rcx",
            "jae 0x40c0b4",
            "lea rsi, [r10 + r14]",
            "sub rcx, r14",
            "mov rdx, r14",
            "mov rdi, r15",
            "mov dword [rsp + 0x38], r8d",
            "call fcn.00412a77",
            "mov r8d, dword [rsp + 0x38]",
            "lea rdx, [r15 + r14 + 0x70]",
            "cmp r8d, 0xb2",
            "lea rax, [rdx + 0xc]",
            "mov byte [rdx + 0xc], r8b",
            "jne 0x40c0f8",
            "mov rcx, qword [rsp + 0xd0]",
            "lea rdx, [r15 + r14 + 0x71]",
            "lea rax, [rdx + 0xc]",
            "mov qword [rdx + 0xc], r12",
            "mov qword [rdx + 0x14], rcx",
            "mov rdx, qword [rsp + 0xd8]",
            "mov dword [rax + 0x18], 1",
            "mov qword [rax + 0x10], rdx",
            "jmp 0x40c11e",
            "cmp r8d, 0xb8",
            "jne 0x40c10f",
            "mov dword [r15 + r14 + 0x85], 1",
            "jmp 0x40c11a",
            "cmp r8d, 0xb6",
            "cmovne rbp, r12",
            "mov qword [rax + 1], rbp",
            "mov rdi, r15",
            "call fcn.00408149",
            "jmp 0x40c358",
            "test eax, eax",
            "je 0x40c358",
            "cmp eax, 0xfffffff5",
            "mov r14d, eax",
            "jne 0x40c35b",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdi + rax + 0xf2]",
            "inc qword [rdi + rax + 0xe1]",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "or byte [rbx + 0x88], 8",
            "mov dword [rbx + 0x80], 1",
            "cmp qword [rsp + 0xd0], 0xff",
            "mov rax, qword [r13 + 0x1d8]",
            "mov r14, qword [rax + 0x28]",
            "mov qword [rsp + 0x7f], r15",
            "jbe 0x40c2f4",
            "test rbp, rbp",
            "je 0x40c1b6",
            "mov byte [rsp + 0x87], 0xb8",
            "mov qword [rsp + 0x88], rbp",
            "mov r15d, 4",
            "jmp 0x40c1e4",
            "mov rdx, qword [rsp + 0xd8]",
            "mov rsi, qword [rsp + 0xd0]",
            "mov rdi, r12",
            "mov byte [rsp + 0x87], 0xb2",
            "mov r15d, 0x1c",
            "call fcn.00409dfa",
            "mov qword [rsp + 0x88], rax",
            "mov rdi, qword [rsp + 0x50]",
            "lea r8, [rsp + 0x68]",
            "lea rcx, [rsp + 0x7f]",
            "mov r9d, 1",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov dword [rsp + 0x68], r15d",
            "call fcn.004064c0",
            "cmp eax, 0xffffffef",
            "je 0x40c216",
            "test eax, eax",
            "jne 0x40c343",
            "test rbp, rbp",
            "mov rdi, qword [rbx]",
            "je 0x40c29c",
            "movsxd rdx, dword [rbx + 0x40]",
            "imul rdx, rdx, 0x19",
            "test eax, eax",
            "mov edx, dword [rdi + rdx + 0xf2]",
            "lea rax, [rdx + 0xd5]",
            "jne 0x40c245",
            "mov dword [rdi + rax + 0xc], 1",
            "jmp 0x40c2eb",
            "inc dword [rdi + rax + 0xc]",
            "jmp 0x40c2eb",
            "movsxd rdx, dword [rbx + 0x40]",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rdi + rdx + 0xf2]",
            "lea rcx, [rdi + rdx + 0xd5]",
            "cmp qword [rcx + 0xc], r12",
            "lea rdx, [rcx + 0xc]",
            "jne 0x40c3b9",
            "mov rcx, qword [rsp + 0xd0]",
            "cmp qword [rdx + 8], rcx",
            "jne 0x40c3b9",
            "mov rcx, qword [rsp + 0xd8]",
            "cmp qword [rdx + 0x10], rcx",
            "jne 0x40c3b9",
            "jmp 0x40c2a1",
            "mov rdi, qword [rbx]",
            "cmp eax, 0xffffffef",
            "je 0x40c24e",
            "movsxd rdx, dword [rbx + 0x40]",
            "imul rdx, rdx, 0x19",
            "test eax, eax",
            "mov edx, dword [rdi + rdx + 0xf2]",
            "lea rax, [rdx + 0xd5]",
            "jne 0x40c2e7",
            "add rax, rdi",
            "mov rcx, qword [rsp + 0xd8]",
            "lea rdx, [rax + 0xc]",
            "mov qword [rax + 0xc], r12",
            "mov rax, qword [rsp + 0xd0]",
            "mov qword [rdx + 0x10], rcx",
            "mov dword [rdx + 0x18], 1",
            "mov qword [rdx + 8], rax",
            "jmp 0x40c2eb",
            "inc dword [rdi + rax + 0x24]",
            "call fcn.00408149",
            "xor eax, eax",
            "jmp 0x40c343",
            "test rbp, rbp",
            "je 0x40c30b",
            "mov byte [rsp + 0x87], 0xb6",
            "mov qword [rsp + 0x88], rbp",
            "jmp 0x40c31b",
            "mov byte [rsp + 0x87], 0xb0",
            "mov qword [rsp + 0x88], r12",
            "mov rdi, qword [rsp + 0x50]",
            "lea r8, [rsp + 0x70]",
            "lea rcx, [rsp + 0x7f]",
            "mov r9d, 1",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov dword [rsp + 0x70], 0",
            "call fcn.004064c0",
            "mov rdi, rbx",
            "mov dword [rsp + 0x48], eax",
            "call fcn.00402e1a",
            "mov eax, dword [rsp + 0x48]",
            "mov r14d, eax",
            "jmp 0x40c35b",
            "xor r14d, r14d",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "mov rax, qword [r13 + 0x1d8]",
            "mov rdi, qword [rsp + 0x50]",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040af4b",
            "mov rax, qword [r13 + 0x1d8]",
            "mov rdi, qword [rsp + 0x50]",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040bd20",
            "test r14d, r14d",
            "je 0x40c404",
            "lea rcx, str.btrfs_inc_extent_ref",
            "mov edx, 0x5af",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__err_",
            "jmp 0x40c052",
            "mov r14d, 0xfffffff4",
            "jmp 0x40c404",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "mov rdi, qword [rsp + 0x50]",
            "lea r8, [rsp + 0x6c]",
            "lea rcx, [rsp + 0x7f]",
            "mov r9d, 1",
            "mov rdx, rbx",
            "mov rsi, r14",
            "inc qword [rsp + 0x88]",
            "mov dword [rsp + 0x6c], r15d",
            "call fcn.004064c0",
            "cmp eax, 0xffffffef",
            "je 0x40c299",
            "test eax, eax",
            "je 0x40c299",
            "jmp 0x40c343",
            "add rsp, 0x98",
            "mov eax, r14d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402e0b": {
        "function_address": "0x00402e0b",
        "instructions": [
            "mov esi, 0x90",
            "mov edi, 1",
            "jmp sym.imp.calloc"
        ]
    },
    "fcn.0040a2e7": {
        "function_address": "0x0040a2e7",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rsi",
            "push r13",
            "mov r13, r9",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x68",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 8], rdi",
            "mov qword [rsp + 0x28], rcx",
            "mov qword [rsp + 0x18], r8",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00409eb0",
            "shr rax, 8",
            "mov byte [rsp + 0x46], 0xa8",
            "mov qword [rsp + 0x47], r13",
            "and eax, 1",
            "cmp qword [rsp + 0xa0], 1",
            "mov r15b, al",
            "mov rax, qword [rsp + 0x18]",
            "sbb ebp, ebp",
            "mov qword [rsp + 0x3e], rax",
            "and ebp, 0xfffffffa",
            "cmp qword [rsp + 0xb0], 0xff",
            "ja 0x40a362",
            "add ebp, 0xb6",
            "jmp 0x40a368",
            "add ebp, 0xb8",
            "cmp dword [rsp + 0xc0], 0",
            "mov dword [rsp + 0x14], 0xffffffff",
            "je 0x40a385",
            "mov edi, ebp",
            "call fcn.00409eb8",
            "mov dword [rsp + 0x14], eax",
            "test r15b, r15b",
            "je 0x40a3b2",
            "cmp qword [rsp + 0xb0], 0xff",
            "ja 0x40a3b2",
            "mov rdx, qword [rsp + 0xb0]",
            "mov byte [rsp + 0x46], 0xa9",
            "mov r10d, 1",
            "mov qword [rsp + 0x47], rdx",
            "jmp 0x40a3b5",
            "xor r10d, r10d",
            "mov r8d, dword [rsp + 0x14]",
            "mov rdi, qword [rsp + 8]",
            "lea rdx, [rsp + 0x3e]",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, r14",
            "mov dword [rsp], r10d",
            "call fcn.0040551b",
            "test eax, eax",
            "mov r10d, dword [rsp]",
            "js 0x40a718",
            "test r10d, r10d",
            "je 0x40a433",
            "test eax, eax",
            "jle 0x40a433",
            "mov edx, dword [rbx + 0x40]",
            "test edx, edx",
            "je 0x40a725",
            "mov rdi, qword [rbx]",
            "dec edx",
            "lea rsi, [rsp + 0x3e]",
            "mov dword [rbx + 0x40], edx",
            "call fcn.00409e65",
            "mov rax, qword [rsp + 0x18]",
            "cmp qword [rsp + 0x3e], rax",
            "jne 0x40a725",
            "cmp byte [rsp + 0x46], 0xa8",
            "jne 0x40a725",
            "cmp qword [rsp + 0x47], r13",
            "jne 0x40a725",
            "jmp 0x40a464",
            "test eax, eax",
            "je 0x40a467",
            "movzx ecx, byte [rsp + 0x46]",
            "mov r8, qword [rsp + 0x47]",
            "lea rsi, str.Failed_to_find___llu___u___llu__n",
            "mov rdx, qword [rsp + 0x3e]",
            "mov edi, 1",
            "xor eax, eax",
            "mov r12d, 0xfffffffe",
            "call sym.imp.__printf_chk",
            "jmp 0x40a78c",
            "xor r10d, r10d",
            "movsxd rax, dword [rbx + 0x40]",
            "mov r12, qword [rbx]",
            "imul rax, rax, 0x19",
            "mov r15d, dword [r12 + rax + 0xf6]",
            "cmp r15d, 0x17",
            "ja 0x40a50d",
            "cmp dword [rsp + 0xc0], 0",
            "mov r12d, 0xfffffffe",
            "je 0x40a78c",
            "mov rcx, qword [rsp + 0xb0]",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov dword [rsp], r10d",
            "call fcn.0040a0bf",
            "test eax, eax",
            "mov r10d, dword [rsp]",
            "js 0x40a718",
            "mov r8d, dword [rbx + 0x40]",
            "mov r12, qword [rbx]",
            "movsxd rax, r8d",
            "imul rax, rax, 0x19",
            "mov r15d, dword [r12 + rax + 0xf6]",
            "cmp r15d, 0x17",
            "ja 0x40a50d",
            "lea rsi, str.Size_is__u__needs_to_be__u__slot__d_n",
            "mov ecx, 0x18",
            "mov edx, r15d",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rsi, r12",
            "mov rdi, r14",
            "mov r12d, 0xffffffea",
            "call fcn.0040f1cb",
            "jmp 0x40a78c",
            "movsxd rax, dword [rbx + 0x40]",
            "mov ecx, r15d",
            "imul rax, rax, 0x19",
            "mov eax, dword [r12 + rax + 0xf2]",
            "mov rdx, qword [r12 + rax + 0xf1]",
            "lea rcx, [rax + rcx + 0x65]",
            "lea r13, [rax + 0x7d]",
            "mov qword [rsp + 8], rcx",
            "test dl, 2",
            "je 0x40a55a",
            "test r10d, r10d",
            "jne 0x40a563",
            "lea r13, [rax + 0x8f]",
            "cmp r13, rcx",
            "jbe 0x40a563",
            "lea rcx, str.lookup_inline_extent_backref",
            "mov edx, 0x457",
            "jmp 0x40a57c",
            "and dl, 1",
            "je 0x40a71d",
            "cmp r13, qword [rsp + 8]",
            "jb 0x40a58f",
            "jbe 0x40a639",
            "lea rcx, str.lookup_inline_extent_backref",
            "mov edx, 0x461",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ptr___end_",
            "call sym.imp.__assert_fail",
            "lea rax, [r12 + r13 + 0x70]",
            "movzx ecx, byte [rax + 0xc]",
            "lea rdx, [rax + 0xc]",
            "cmp ebp, ecx",
            "jl 0x40a639",
            "jle 0x40a5a8",
            "jmp 0x40a614",
            "cmp ecx, 0xb2",
            "jne 0x40a5f1",
            "lea rdx, [r12 + r13 + 0x71]",
            "mov rdi, qword [rdx + 0xc]",
            "cmp rdi, qword [rsp + 0xa8]",
            "lea rax, [rdx + 0xc]",
            "jne 0x40a73c",
            "mov rdx, qword [rsp + 0xb0]",
            "cmp qword [rax + 8], rdx",
            "jne 0x40a73c",
            "mov rdx, qword [rsp + 0xb8]",
            "cmp qword [rax + 0x10], rdx",
            "jne 0x40a73c",
            "jmp 0x40a641",
            "cmp qword [rsp + 0xa0], 0",
            "mov rax, qword [rdx + 1]",
            "je 0x40a625",
            "cmp qword [rsp + 0xa0], rax",
            "je 0x40a641",
            "cmp rax, qword [rsp + 0xa0]",
            "jb 0x40a639",
            "mov edi, ecx",
            "call fcn.00409eb8",
            "mov eax, eax",
            "add r13, rax",
            "jmp 0x40a563",
            "cmp qword [rsp + 0xa8], rax",
            "je 0x40a641",
            "cmp rax, qword [rsp + 0xa8]",
            "jmp 0x40a612",
            "mov r12d, 0xfffffffe",
            "jmp 0x40a644",
            "xor r12d, r12d",
            "cmp r12d, 0xfffffffe",
            "jne 0x40a70e",
            "cmp dword [rsp + 0xc0], 0",
            "je 0x40a70e",
            "mov eax, dword [r14 + 0x1f8]",
            "add r15d, dword [rsp + 0x14]",
            "sub rax, 0x65",
            "shr rax, 4",
            "sub rax, 0x19",
            "cmp r15, rax",
            "jb 0x40a684",
            "mov r12d, 0xfffffff5",
            "jmp 0x40a78c",
            "xor r14d, r14d",
            "mov rdi, qword [rbx + r14*8]",
            "movsxd r15, r14d",
            "test rdi, rdi",
            "je 0x40a70e",
            "mov ebp, dword [rbx + r14*4 + 0x40]",
            "call fcn.00409ea9",
            "inc ebp",
            "cmp ebp, eax",
            "jb 0x40a6ae",
            "inc r14",
            "cmp r14, 8",
            "jne 0x40a687",
            "jmp 0x40a70e",
            "test r15d, r15d",
            "jne 0x40a6ca",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0x3e]",
            "inc edx",
            "call fcn.00409e65",
            "jmp 0x40a77b",
            "mov edx, dword [rbx + r15*4 + 0x40]",
            "mov rdi, qword [rbx + r15*8]",
            "lea rsi, [rsp + 0x4f]",
            "mov ecx, 0x11",
            "inc edx",
            "movsxd rdx, edx",
            "imul rdx, rdx, 0x21",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov al, byte [rsp + 0x57]",
            "mov byte [rsp + 0x46], al",
            "mov rax, qword [rsp + 0x4f]",
            "mov qword [rsp + 0x3e], rax",
            "jmp 0x40a77b",
            "cmp byte [rsp + 0x46], 0xbf",
            "jbe 0x40a679",
            "mov rax, qword [rsp + 0x28]",
            "mov qword [rax], r13",
            "jmp 0x40a78c",
            "mov r12d, eax",
            "jmp 0x40a78c",
            "mov r12d, 0xfffffffb",
            "jmp 0x40a78c",
            "mov rdi, rbx",
            "mov byte [rsp + 0x46], 0xa8",
            "mov qword [rsp + 0x47], r13",
            "call fcn.00402e1a",
            "jmp 0x40a3b2",
            "mov rdx, qword [rax + 0x10]",
            "mov rsi, qword [rax + 8]",
            "mov dword [rsp], ecx",
            "call fcn.00409dfa",
            "mov rdx, qword [rsp + 0xb8]",
            "mov rsi, qword [rsp + 0xb0]",
            "mov rdi, qword [rsp + 0xa8]",
            "mov qword [rsp + 0x20], rax",
            "call fcn.00409dfa",
            "mov ecx, dword [rsp]",
            "cmp qword [rsp + 0x20], rax",
            "jmp 0x40a612",
            "mov rdx, qword [rsp + 0x18]",
            "cmp qword [rsp + 0x3e], rdx",
            "jne 0x40a70e",
            "jmp 0x40a703",
            "add rsp, 0x68",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409f09": {
        "function_address": "0x00409f09",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "sub rsp, 0x18",
            "movsxd rax, dword [rdx + 0x40]",
            "mov rbx, qword [rdx]",
            "mov qword [rsp], rdi",
            "mov qword [rsp + 8], rsi",
            "movsxd rdx, r8d",
            "imul rax, rax, 0x19",
            "test r8d, r8d",
            "mov eax, dword [rbx + rax + 0xf2]",
            "lea r13, [rax + 0x65]",
            "mov rax, qword [rbx + rax + 0xe1]",
            "jns 0x409f71",
            "lea rcx, [rdx + rax]",
            "test rcx, rcx",
            "jne 0x409f71",
            "lea rcx, str.update_inline_extent_backref",
            "mov edx, 0x512",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__refs_to_mod___0__refs__refs_to_mod___0_",
            "jmp 0x409fcd",
            "add rax, rdx",
            "mov qword [rbx + r13 + 0x7c], rax",
            "movzx edi, byte [rbx + rbp + 0x7c]",
            "cmp edi, 0xb2",
            "jne 0x409f95",
            "lea r9, [rbp + 1]",
            "mov eax, dword [rbx + rbp + 0x95]",
            "xor esi, esi",
            "jmp 0x409fd2",
            "cmp edi, 0xb8",
            "jne 0x409fad",
            "lea rsi, [rbp + 9]",
            "mov eax, dword [rbx + rbp + 0x85]",
            "xor r9d, r9d",
            "jmp 0x409fd2",
            "cmp r8d, 0xffffffff",
            "je 0x409fd9",
            "lea rcx, str.update_inline_extent_backref",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__refs_to_mod____1_",
            "mov edx, 0x520",
            "call sym.imp.__assert_fail",
            "test r8d, r8d",
            "jns 0x40a00a",
            "jmp 0x409fe3",
            "mov eax, 1",
            "xor esi, esi",
            "xor r9d, r9d",
            "neg r8d",
            "movsxd r8, r8d",
            "cmp rax, r8",
            "jae 0x40a00a",
            "lea rcx, str.update_inline_extent_backref",
            "mov edx, 0x523",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__refs_to_mod___0__refs____refs_to_mod_",
            "jmp 0x409fcd",
            "add rax, rdx",
            "je 0x40a02a",
            "cmp edi, 0xb2",
            "jne 0x40a024",
            "mov dword [r9 + rbx + 0x94], eax",
            "jmp 0x40a0a6",
            "mov dword [rsi + rbx + 0x7c], eax",
            "jmp 0x40a0a6",
            "call fcn.00409eb8",
            "mov r15d, eax",
            "movsxd rax, dword [r14 + 0x40]",
            "movsxd rsi, r15d",
            "lea rdx, [rbp + rsi]",
            "imul rax, rax, 0x19",
            "mov r12d, dword [rbx + rax + 0xf6]",
            "mov ecx, r12d",
            "add rcx, r13",
            "cmp rdx, rcx",
            "jae 0x40a066",
            "sub rcx, rbp",
            "mov rdi, rbx",
            "sub rcx, rsi",
            "mov rsi, rbp",
            "call fcn.00412a77",
            "mov rsi, qword [rsp + 8]",
            "mov rdi, qword [rsp]",
            "mov ecx, r12d",
            "sub ecx, r15d",
            "mov r8d, 1",
            "mov rdx, r14",
            "call fcn.0040500a",
            "test eax, eax",
            "je 0x40a0a6",
            "lea rcx, str.update_inline_extent_backref",
            "mov edx, 0x535",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "jmp 0x409fcd",
            "mov rdi, rbx",
            "call fcn.00408149",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409eb8": {
        "function_address": "0x00409eb8",
        "instructions": [
            "cmp edi, 0xb6",
            "je 0x409efd",
            "cmp edi, 0xb0",
            "je 0x409efd",
            "cmp edi, 0xb8",
            "je 0x409f03",
            "cmp edi, 0xb2",
            "mov eax, 0x1d",
            "je 0x409f08",
            "lea rcx, [0x0041e160]",
            "push rsi",
            "lea rdi, [0x0041e6fe]",
            "lea rsi, str.ctree.h",
            "mov edx, 0x5fc",
            "call sym.imp.__assert_fail",
            "mov eax, 9",
            "ret",
            "mov eax, 0xd",
            "ret"
        ]
    },
    "fcn.0040520e": {
        "function_address": "0x0040520e",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13d, ecx",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x18",
            "mov rbx, qword [rdx]",
            "mov rdi, rbx",
            "call fcn.0040291d",
            "lea rdi, [rbp + 0x1f8]",
            "mov rsi, rbx",
            "mov r14d, eax",
            "call fcn.0040292c",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov r15d, eax",
            "call fcn.00403f1a",
            "cmp eax, r13d",
            "jae 0x405271",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "lea rcx, str.btrfs_extend_item",
            "mov edx, 0x924",
            "jmp 0x405375",
            "mov r12d, dword [r12 + 0x40]",
            "mov rdi, rbx",
            "mov esi, r12d",
            "call fcn.0040284c",
            "test r12d, r12d",
            "jns 0x4052a5",
            "lea rcx, str.btrfs_extend_item",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__slot___0_",
            "mov edx, 0x929",
            "call sym.imp.__assert_fail",
            "cmp r12d, r14d",
            "jae 0x4052ba",
            "movsxd r8, r12d",
            "imul r8, r8, 0x19",
            "add r8, 0x65",
            "mov rdx, r8",
            "jmp 0x405313",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.slot__d_too_large__nritems__d_n",
            "mov ecx, r12d",
            "mov esi, 1",
            "mov r8d, r14d",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.btrfs_extend_item",
            "mov edx, 0x92d",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "jmp 0x4052a0",
            "sub dword [rbx + rdx + 0x8d], r13d",
            "inc r12d",
            "add rdx, 0x19",
            "cmp r12d, r14d",
            "jne 0x405304",
            "mov edx, r15d",
            "mov ecx, eax",
            "mov eax, r13d",
            "add rdx, 0x65",
            "sub ecx, r15d",
            "mov rdi, rbx",
            "mov rsi, rdx",
            "mov qword [rsp + 8], r8",
            "sub rsi, rax",
            "call fcn.00412a77",
            "mov r8, qword [rsp + 8]",
            "mov rdi, rbx",
            "add dword [rbx + r8 + 0x91], r13d",
            "call fcn.00408149",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00403f1a",
            "test eax, eax",
            "jns 0x405388",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "lea rcx, str.btrfs_extend_item",
            "mov edx, 0x949",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x4052a0",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412a77": {
        "function_address": "0x00412a77",
        "instructions": [
            "mov rax, rsi",
            "mov rsi, rdx",
            "mov rdx, rcx",
            "lea rsi, [rdi + rsi + 0x7c]",
            "lea rdi, [rdi + rax + 0x7c]",
            "jmp sym.imp.memmove"
        ]
    },
    "fcn.00408149": {
        "function_address": "0x00408149",
        "instructions": [
            "jmp 0x4129d8",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi + 0x48]",
            "mov eax, dword [rbx + 0x74]",
            "test al, 1",
            "jne 0x412a03",
            "or eax, 1",
            "mov rsi, qword [rbx + 0x30]",
            "xor ecx, ecx",
            "mov dword [rbx + 0x74], eax",
            "mov eax, dword [rbx + 0x40]",
            "lea rdx, [rsi + rax - 1]",
            "call fcn.0041200d",
            "inc dword [rbx + 0x70]",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00402e1a": {
        "function_address": "0x00402e1a",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "xor ebx, ebx",
            "push r10",
            "mov rdi, qword [rbp + rbx]",
            "test rdi, rdi",
            "je 0x402e32",
            "call fcn.00412164",
            "add rbx, 8",
            "cmp rbx, 0x40",
            "jne 0x402e23",
            "mov rdi, rbp",
            "mov ecx, 0x24",
            "xor eax, eax",
            "rep stosd dword [rdi], eax",
            "pop r9",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00409dfa": {
        "function_address": "0x00409dfa",
        "instructions": [
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdx",
            "mov edx, 8",
            "push rbx",
            "sub rsp, 0x10",
            "lea rsi, [rsp + 8]",
            "mov qword [rsp + 8], rdi",
            "or edi, 0xffffffff",
            "call fcn.0041cbfb",
            "lea rsi, [rsp + 8]",
            "mov edx, 8",
            "or edi, 0xffffffff",
            "mov ebx, eax",
            "mov qword [rsp + 8], r12",
            "call fcn.0041cbfb",
            "lea rsi, [rsp + 8]",
            "mov edx, 8",
            "mov edi, eax",
            "mov qword [rsp + 8], rbp",
            "call fcn.0041cbfb",
            "add rsp, 0x10",
            "mov edx, ebx",
            "mov eax, eax",
            "pop rbx",
            "shl rdx, 0x1f",
            "xor rdx, rax",
            "pop rbp",
            "mov rax, rdx",
            "pop r12",
            "ret"
        ]
    },
    "fcn.004064c0": {
        "function_address": "0x004064c0",
        "instructions": [
            "push r15",
            "xor eax, eax",
            "mov r15, r8",
            "push r14",
            "mov r14, rcx",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x58",
            "mov qword [rsp + 0x28], rdx",
            "mov dword [rsp + 0x1c], r9d",
            "mov dword [rsp + 0x18], 0",
            "jmp 0x4064f8",
            "mov edx, dword [r15 + rax*4]",
            "add dword [rsp + 0x18], edx",
            "inc rax",
            "cmp dword [rsp + 0x1c], eax",
            "jg 0x4064ed",
            "cmp qword [r12], 0",
            "lea rcx, str.btrfs_insert_empty_items",
            "mov edx, 0x969",
            "je 0x4065c0",
            "imul ebp, dword [rsp + 0x1c], 0x19",
            "mov rcx, qword [rsp + 0x28]",
            "mov r9d, 1",
            "mov rdx, r14",
            "mov rsi, r12",
            "add ebp, dword [rsp + 0x18]",
            "mov r8d, ebp",
            "call fcn.0040551b",
            "cmp eax, 0",
            "je 0x4067d5",
            "jl 0x4067da",
            "mov rdx, qword [rsp + 0x28]",
            "mov rbx, qword [rdx]",
            "mov rdi, rbx",
            "call fcn.0040291d",
            "lea rdi, [r12 + 0x1f8]",
            "mov rsi, rbx",
            "mov dword [rsp + 0x20], eax",
            "call fcn.0040292c",
            "mov rsi, rbx",
            "mov rdi, r12",
            "mov r13d, eax",
            "call fcn.00403f1a",
            "cmp eax, ebp",
            "jae 0x4065d3",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.0040f1cb",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00403f1a",
            "mov r8d, eax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.not_enough_freespace_need__u_have__d_n",
            "mov ecx, ebp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.btrfs_insert_empty_items",
            "mov edx, 0x97c",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "call sym.imp.__assert_fail",
            "mov rdx, qword [rsp + 0x28]",
            "mov ebp, dword [rdx + 0x40]",
            "test ebp, ebp",
            "jns 0x4065fb",
            "lea rcx, str.btrfs_insert_empty_items",
            "mov edx, 0x980",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__slot___0_",
            "jmp 0x4065ce",
            "cmp ebp, dword [rsp + 0x20]",
            "je 0x4066da",
            "mov esi, ebp",
            "mov rdi, rbx",
            "call fcn.0040284c",
            "cmp eax, r13d",
            "mov dword [rsp + 0x24], eax",
            "jb 0x40662a",
            "movsxd rdx, ebp",
            "mov ecx, ebp",
            "imul rdx, rdx, 0x19",
            "add rdx, 0x65",
            "mov rax, rdx",
            "jmp 0x40668c",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.0040f1cb",
            "mov rax, qword [reloc.stderr]",
            "mov r8d, dword [rsp + 0x24]",
            "lea rdx, str.slot__d_old_data__d_data_end__d_n",
            "mov ecx, ebp",
            "mov esi, 1",
            "mov r9d, r13d",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.btrfs_insert_empty_items",
            "mov edx, 0x989",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "jmp 0x4065ce",
            "mov esi, dword [rsp + 0x18]",
            "inc ecx",
            "sub dword [rbx + rax + 0x8d], esi",
            "add rax, 0x19",
            "cmp ecx, dword [rsp + 0x20]",
            "jb 0x40667b",
            "mov esi, dword [rsp + 0x1c]",
            "mov ecx, dword [rsp + 0x20]",
            "mov rdi, rbx",
            "add esi, ebp",
            "sub ecx, ebp",
            "movsxd rsi, esi",
            "imul rsi, rsi, 0x19",
            "imul rcx, rcx, 0x19",
            "add rsi, 0x65",
            "call fcn.00412a77",
            "mov eax, dword [rsp + 0x18]",
            "mov edx, r13d",
            "mov ecx, dword [rsp + 0x24]",
            "add rdx, 0x65",
            "mov rdi, rbx",
            "mov rsi, rdx",
            "sub ecx, r13d",
            "sub rsi, rax",
            "call fcn.00412a77",
            "mov r13d, dword [rsp + 0x24]",
            "mov rcx, r14",
            "xor eax, eax",
            "movsxd r8, ebp",
            "jmp 0x406754",
            "mov rdx, qword [rcx + 9]",
            "lea rsi, [rsp + 0x3f]",
            "mov rdi, rbx",
            "mov qword [rsp + 0x48], rdx",
            "mov dl, byte [rcx + 8]",
            "mov byte [rsp + 0x47], dl",
            "mov rdx, qword [rcx]",
            "mov qword [rsp + 0x10], rax",
            "mov qword [rsp + 8], rcx",
            "mov qword [rsp], r8",
            "mov qword [rsp + 0x3f], rdx",
            "lea edx, [rbp + rax]",
            "call fcn.00402900",
            "mov rax, qword [rsp + 0x10]",
            "mov r8, qword [rsp]",
            "mov esi, r13d",
            "lea rdx, [rax + r8]",
            "sub esi, dword [r15 + rax*4]",
            "imul rdx, rdx, 0x19",
            "lea rdx, [rbx + rdx + 0xe1]",
            "mov dword [rdx + 0x11], esi",
            "mov esi, dword [r15 + rax*4]",
            "inc rax",
            "mov dword [rdx + 0x15], esi",
            "mov rcx, qword [rsp + 8]",
            "sub r13d, esi",
            "add rcx, 0x11",
            "cmp dword [rsp + 0x1c], eax",
            "jg 0x4066e4",
            "mov esi, dword [rsp + 0x20]",
            "add esi, dword [rsp + 0x1c]",
            "mov rdi, rbx",
            "call fcn.004028d4",
            "mov rdi, rbx",
            "call fcn.00408149",
            "test ebp, ebp",
            "jne 0x4067a6",
            "mov rax, qword [r14 + 9]",
            "mov rsi, qword [rsp + 0x28]",
            "lea rdx, [rsp + 0x3f]",
            "mov ecx, 1",
            "mov rdi, r12",
            "mov qword [rsp + 0x48], rax",
            "mov al, byte [r14 + 8]",
            "mov byte [rsp + 0x47], al",
            "mov rax, qword [r14]",
            "mov qword [rsp + 0x3f], rax",
            "call fcn.00403d91",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00403f1a",
            "mov edx, eax",
            "xor eax, eax",
            "test edx, edx",
            "jns 0x4067da",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.0040f1cb",
            "lea rcx, str.btrfs_insert_empty_items",
            "mov edx, 0x9b7",
            "jmp 0x4065c0",
            "mov eax, 0xffffffef",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402e4d": {
        "function_address": "0x00402e4d",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "call fcn.00402e1a",
            "mov rdi, rbx",
            "pop rbx",
            "jmp sym.imp.free"
        ]
    },
    "fcn.0040af4b": {
        "function_address": "0x0040af4b",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdi",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x48",
            "mov r13, qword [rsi + 0x1d8]",
            "mov rdi, qword [r13 + 0x1a8]",
            "call fcn.00409eb0",
            "mov rbp, rax",
            "and ebp, 0x100",
            "lea rbx, [r13 + 0x128]",
            "lea rcx, [rsp + 0x18]",
            "lea rdx, [rsp + 0x10]",
            "xor esi, esi",
            "mov r8d, 8",
            "mov rdi, rbx",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40b095",
            "mov rsi, qword [rsp + 0x10]",
            "lea rdx, [rsp + 0x20]",
            "mov rdi, rbx",
            "call fcn.00412136",
            "test eax, eax",
            "je 0x40afc8",
            "lea rcx, str.finish_current_insert",
            "mov edx, 0x81f",
            "jmp 0x40b03f",
            "mov r15, qword [rsp + 0x20]",
            "cmp dword [r15], 0",
            "jne 0x40b052",
            "mov rax, qword [rsp + 0x10]",
            "test rbp, rbp",
            "mov qword [rsp + 0x2f], rax",
            "je 0x40aff2",
            "movsxd rax, dword [r15 + 0x34]",
            "mov byte [rsp + 0x37], 0xa9",
            "mov qword [rsp + 0x38], rax",
            "jmp 0x40b000",
            "mov rax, qword [r15 + 0x10]",
            "mov byte [rsp + 0x37], 0xa8",
            "mov qword [rsp + 0x38], rax",
            "lea rax, [rsp + 0x2f]",
            "mov r8, qword [r15 + 0x18]",
            "mov rdx, qword [r12 + 0x1c7]",
            "mov rcx, qword [r14]",
            "lea r9, [r15 + 0x20]",
            "mov rsi, r12",
            "mov qword [rsp + 8], rax",
            "mov eax, dword [r15 + 0x34]",
            "mov rdi, r14",
            "mov dword [rsp], eax",
            "call fcn.0040adaf",
            "test eax, eax",
            "je 0x40b06e",
            "lea rcx, str.finish_current_insert",
            "mov edx, 0x831",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "lea rcx, str.finish_current_insert",
            "mov edx, 0x833",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__1_",
            "jmp 0x40b04d",
            "mov rdx, qword [rsp + 0x18]",
            "mov rsi, qword [rsp + 0x10]",
            "mov rdi, rbx",
            "xor r8d, r8d",
            "mov ecx, 8",
            "call fcn.00411cbb",
            "mov rdi, r15",
            "call sym.imp.free",
            "jmp 0x40af7b",
            "add rsp, 0x48",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "main": {
        "function_address": "0x004025ae",
        "instructions": [
            "push r15",
            "xor r15d, r15d",
            "push r14",
            "push r13",
            "push r12",
            "mov r12d, 0x4000",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov ebx, 0x10000",
            "sub rsp, 0x18",
            "mov dword [rsp + 4], edi",
            "jmp 0x40262e",
            "cmp eax, 0x61",
            "je 0x402628",
            "cmp eax, 0x69",
            "jne 0x40265b",
            "mov rax, qword [reloc.optarg]",
            "mov rdi, qword [rax]",
            "call fcn.0041bc20",
            "cmp rax, 2",
            "jbe 0x402614",
            "mov rcx, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Illegal_super_mirror__llu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x40265b",
            "test eax, eax",
            "mov ebx, 0x10000",
            "je 0x40262e",
            "imul ecx, eax, 0xc",
            "mov rbx, r12",
            "shl rbx, cl",
            "jmp 0x40262e",
            "mov r15d, 1",
            "mov edi, dword [rsp + 4]",
            "lea rdx, [0x00420fd4]",
            "mov rsi, rbp",
            "call sym.imp.getopt",
            "cmp eax, 0xffffffff",
            "jne 0x4025d3",
            "mov rax, qword [reloc.optind]",
            "mov eax, dword [rax]",
            "mov dword [rsp], eax",
            "mov eax, dword [rsp + 4]",
            "cmp dword [rsp], eax",
            "jl 0x402665",
            "call fcn.0041bc9c",
            "jmp 0x4026ed",
            "movsxd rax, dword [rsp]",
            "xor r12d, r12d",
            "lea rax, [rbp + rax*8]",
            "mov qword [rsp + 8], rax",
            "mov rax, qword [rsp + 8]",
            "xor esi, esi",
            "mov edx, 0x1b6",
            "mov r13, qword [rax + r12*8]",
            "xor eax, eax",
            "mov rdi, r13",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebp, eax",
            "jns 0x4026b8",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, [0x0041fe03]",
            "mov rcx, r13",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4026ed",
            "test r15d, r15d",
            "jne 0x4026cd",
            "jmp 0x402709",
            "imul ecx, r14d, 0xc",
            "mov ebx, 0x4000",
            "shl rbx, cl",
            "jmp 0x4026d5",
            "xor r14d, r14d",
            "mov ebx, 0x10000",
            "mov rdx, rbx",
            "mov esi, ebp",
            "mov rdi, r13",
            "call fcn.0041bd42",
            "test eax, eax",
            "je 0x4026f4",
            "mov edi, ebp",
            "call sym.imp.close",
            "mov edi, 1",
            "jmp 0x40273c",
            "mov edi, 0xa",
            "inc r14d",
            "call sym.imp.putchar",
            "cmp r14d, 3",
            "jne 0x4026bf",
            "jmp 0x402720",
            "mov rdi, r13",
            "mov rdx, rbx",
            "mov esi, eax",
            "call fcn.0041bd42",
            "mov edi, 0xa",
            "call sym.imp.putchar",
            "mov edi, ebp",
            "inc r12",
            "call sym.imp.close",
            "mov eax, dword [rsp]",
            "add eax, r12d",
            "cmp eax, dword [rsp + 4]",
            "jl 0x402676",
            "xor edi, edi",
            "call sym.imp.exit"
        ]
    },
    "fcn.0041bc20": {
        "function_address": "0x0041bc20",
        "instructions": [
            "sub rsp, 0x28",
            "mov rcx, rdi",
            "xor edx, edx",
            "lea rsi, [rsp + 0x18]",
            "mov qword [rsp + 8], rcx",
            "mov qword [rsp + 0x18], 0",
            "call sym.imp.strtoull",
            "mov rdx, qword [rsp + 0x18]",
            "mov rcx, qword [rsp + 8]",
            "test rdx, rdx",
            "je 0x41bc5e",
            "cmp byte [rdx], 0",
            "je 0x41bc5e",
            "lea rdx, str.ERROR:__s_is_not_a_valid_numeric_value._n",
            "jmp 0x41bc6a",
            "cmp byte [rcx], 0x2d",
            "jne 0x41bc8a",
            "lea rdx, str.ERROR:__s:_negative_value_is_invalid._n",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, 1",
            "call sym.imp.exit",
            "cmp rax, 0xffffffffffffffff",
            "lea rdx, str.ERROR:__s_is_too_large._n",
            "je 0x41bc6a",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "sym.imp.__fprintf_chk": {
        "function_address": "0x004023f0",
        "instructions": [
            "jmp qword [reloc.__fprintf_chk]"
        ]
    },
    "sym.imp.getopt": {
        "function_address": "0x004023b0",
        "instructions": [
            "jmp qword [reloc.getopt]"
        ]
    },
    "fcn.0041bc9c": {
        "function_address": "0x0041bc9c",
        "instructions": [
            "push rbx",
            "mov rbx, qword [reloc.stderr]",
            "lea rdi, str.usage:_btrfs_show_super___i_super_mirror_a__dev__dev..__n",
            "mov rsi, qword [rbx]",
            "call sym.imp.fputs",
            "mov rdi, qword [rbx]",
            "lea rdx, str._tThe_super_mirror_number_is_between_0_and__d._n",
            "mov ecx, 2",
            "mov esi, 1",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rsi, qword [rbx]",
            "lea rdi, str._tIf__a_is_passed_all_the_superblocks_are_showed._n",
            "call sym.imp.fputs",
            "mov rdi, qword [rbx]",
            "lea rcx, str.Btrfs_v3.14.2",
            "lea rdx, [0x00420cb6]",
            "pop rbx",
            "mov esi, 1",
            "xor eax, eax",
            "jmp sym.imp.__fprintf_chk"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00402330",
        "instructions": [
            "jmp qword [reloc.open64]"
        ]
    },
    "fcn.0041bd42": {
        "function_address": "0x0041bd42",
        "instructions": [
            "push r13",
            "mov rcx, rdx",
            "push r12",
            "mov r12, rdi",
            "mov edi, esi",
            "push rbp",
            "mov rbp, rdx",
            "mov edx, 0x1000",
            "push rbx",
            "sub rsp, 0x1048",
            "lea rbx, [rsp + 0x38]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1038], rax",
            "xor eax, eax",
            "mov rsi, rbx",
            "call sym.imp.pread64",
            "cmp rax, 0x1000",
            "mov r13, rax",
            "je 0x41bdf2",
            "call sym.imp.__errno_location",
            "mov ebx, dword [rax]",
            "test ebx, ebx",
            "jne 0x41bda0",
            "xor eax, eax",
            "test r13, r13",
            "je 0x41c4cd",
            "mov r13, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_Failed_to_read_the_superblock_on__s_at__llu_n",
            "mov r8, rbp",
            "mov rcx, r12",
            "mov esi, 1",
            "xor eax, eax",
            "mov rdi, qword [r13]",
            "call sym.imp.__fprintf_chk",
            "mov edi, ebx",
            "call sym.imp.strerror",
            "mov rdi, qword [r13]",
            "lea rdx, str.ERROR:_error___s__errno___d_n",
            "mov rcx, rax",
            "mov r8d, ebx",
            "mov esi, 1",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov eax, 1",
            "jmp 0x41c4cd",
            "lea rsi, str.superblock:_bytenr_llu__device_s_n",
            "mov rdx, rbp",
            "mov rcx, r12",
            "mov edi, 1",
            "xor eax, eax",
            "xor ebp, ebp",
            "call sym.imp.__printf_chk",
            "lea rdi, str._________________________________________________________",
            "call sym.imp.puts",
            "lea rsi, str.csum_t_t_t0x",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x41be49",
            "movzx edx, byte [rbp + rbx]",
            "lea rsi, str._02x",
            "mov edi, 1",
            "xor eax, eax",
            "inc rbp",
            "call sym.imp.__printf_chk",
            "mov rdi, rbx",
            "call fcn.0041bcfb",
            "cmp eax, ebp",
            "jg 0x41be2e",
            "mov rdi, rbx",
            "call fcn.0041bcfb",
            "lea rsi, [rbx + 0x20]",
            "or edx, 0xffffffff",
            "mov ecx, 0xfe0",
            "xor edi, edi",
            "mov ebp, eax",
            "call fcn.004073ac",
            "lea rsi, [rsp + 0x13]",
            "mov edi, eax",
            "call fcn.004073b6",
            "lea rsi, [rsp + 0x13]",
            "movsxd rdx, ebp",
            "mov rdi, rbx",
            "call sym.imp.memcmp",
            "test eax, eax",
            "jne 0x41bea0",
            "lea rsi, str.__match_",
            "mov edi, 1",
            "jmp 0x41beae",
            "lea rsi, str.__DONT_MATCH_",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov edi, 0xa",
            "xor ebx, ebx",
            "call sym.imp.putchar",
            "mov rdx, qword [rsp + 0x68]",
            "lea rsi, str.bytenr_t_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x70]",
            "lea rsi, str.flags_t_t_t0x_llx_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "lea rsi, str.magic_t_t_t",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "call sym.imp.__ctype_b_loc",
            "mov rbp, rax",
            "movsx eax, byte [rsp + rbx + 0x78]",
            "mov rdx, qword [rbp]",
            "mov edi, 0x2e",
            "movsx rcx, al",
            "test byte [rdx + rcx*2 + 1], 0x40",
            "cmovne edi, eax",
            "inc rbx",
            "call sym.imp.putchar",
            "cmp rbx, 8",
            "jne 0x41bf14",
            "mov rax, qword [rsp + 0x78]",
            "movabs rdx, 0x4d5f53665248425f",
            "lea rdi, str.__match_",
            "cmp rax, rdx",
            "mov qword [rsp + 8], rax",
            "je 0x41bf63",
            "lea rdi, str.__DONT_MATCH_",
            "call sym.imp.puts",
            "lea rdi, [rsp + 0x58]",
            "lea rsi, [rsp + 0x13]",
            "xor ebx, ebx",
            "lea r12, [rsp + 0x163]",
            "call sym.imp.uuid_unparse",
            "lea rdx, [rsp + 0x13]",
            "lea rsi, str.fsid_t_t_t_s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea rsi, str.label_t_t_t",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x41c4bb",
            "mov rax, qword [rbp]",
            "movsx rcx, dl",
            "mov edi, 0x2e",
            "test byte [rax + rcx*2 + 1], 0x40",
            "cmovne edi, edx",
            "inc rbx",
            "call sym.imp.putchar",
            "cmp rbx, 0x100",
            "jne 0x41c4bb",
            "mov edi, 0xa",
            "lea rbx, [rsp + 0x153]",
            "call sym.imp.putchar",
            "mov rdx, qword [rsp + 0x80]",
            "lea rsi, str.generation_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x88]",
            "lea rsi, str.root_t_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0xd8]",
            "lea rsi, str.sys_array_size_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xdc]",
            "lea rsi, str.chunk_root_generation_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [rsp + 0xfe]",
            "lea rsi, [0x00420d68]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x90]",
            "lea rsi, str.chunk_root_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [rsp + 0xff]",
            "lea rsi, str.chunk_root_level_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x98]",
            "lea rsi, str.log_root_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xa0]",
            "lea rsi, str.log_root_transid_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [rsp + 0x100]",
            "lea rsi, str.log_root_level_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xa8]",
            "lea rsi, str.total_bytes_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xb0]",
            "lea rsi, str.bytes_used_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0xc8]",
            "lea rsi, str.sectorsize_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0xcc]",
            "lea rsi, str.nodesize_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0xd0]",
            "lea rsi, str.leafsize_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0xd4]",
            "lea rsi, str.stripesize_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xb8]",
            "lea rsi, str.root_dir_t_t_llu_n",
            "xor eax, eax",
            "mov edi, 1",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xc0]",
            "lea rsi, str.num_devices_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xe4]",
            "lea rsi, [0x00420e21]",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xec]",
            "lea rsi, str.compat_ro_flags_t_t0x_llx_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0xf4]",
            "lea rsi, str.incompat_flags_t_t0x_llx_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "movzx edx, word [rsp + 0xfc]",
            "lea rsi, str.csum_type_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov word [rsp + 8], dx",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x38]",
            "call fcn.0041bcfb",
            "lea rsi, str.csum_size_t_t_llu_n",
            "movsxd rdx, eax",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x263]",
            "lea rsi, str.cache_generation_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x26b]",
            "lea rsi, str.uuid_tree_generation_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x143]",
            "lea rsi, [rsp + 0x13]",
            "call sym.imp.uuid_unparse",
            "lea rdx, [rsp + 0x13]",
            "lea rsi, str.dev_item.uuid_t_t_s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea rsi, [rsp + 0x13]",
            "mov rdi, rbx",
            "call sym.imp.uuid_unparse",
            "lea rsi, [rsp + 0x58]",
            "mov edx, 0x10",
            "mov rdi, rbx",
            "call sym.imp.memcmp",
            "lea rcx, [0x00420c79]",
            "test eax, eax",
            "lea rax, [0x00420c70]",
            "lea rdx, [rsp + 0x13]",
            "lea rsi, str.dev_item.fsid_t_t_s__s_n",
            "mov edi, 1",
            "cmove rcx, rax",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x125]",
            "lea rsi, str.dev_item.type_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x109]",
            "lea rsi, str.dev_item.total_bytes_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x111]",
            "lea rsi, str.dev_item.bytes_used_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0x119]",
            "lea rsi, str.dev_item.io_align_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0x11d]",
            "lea rsi, str.dev_item.io_width_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0x121]",
            "lea rsi, str.dev_item.sector_size_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x101]",
            "lea rsi, str.dev_item.devid_t_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "mov edx, dword [rsp + 0x13d]",
            "lea rsi, str.dev_item.dev_group_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov dword [rsp + 8], edx",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [rsp + 0x141]",
            "lea rsi, str.dev_item.seek_speed_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [rsp + 0x142]",
            "lea rsi, str.dev_item.bandwidth_t_u_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x12d]",
            "lea rsi, str.dev_item.generation_t_llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 8], rdx",
            "call sym.imp.__printf_chk",
            "xor eax, eax",
            "jmp 0x41c4cd",
            "movsx edx, byte [r12 + rbx]",
            "test dl, dl",
            "jne 0x41bfb1",
            "jmp 0x41bfdb",
            "mov rdx, qword [rsp + 0x1038]",
            "xor rdx, qword fs:[0x28]",
            "je 0x41c4e5",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1048",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00402130",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "sym.imp.putchar": {
        "function_address": "0x00401f80",
        "instructions": [
            "jmp qword [reloc.putchar]"
        ]
    },
    "sym.imp.exit": {
        "function_address": "0x004023e0",
        "instructions": [
            "jmp qword [reloc.exit]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00402800",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0x40281a",
            "push rbp",
            "mov rbp, rsp",
            "call fcn.00402790",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "fcn.00402790": {
        "function_address": "0x00402790",
        "instructions": [
            "mov eax, 0x6273bf",
            "push rbp",
            "sub rax, loc._edata",
            "cmp rax, 0xe",
            "mov rbp, rsp",
            "ja 0x4027a7",
            "pop rbp",
            "ret",
            "mov eax, 0",
            "test rax, rax",
            "je 0x4027a5",
            "pop rbp",
            "mov edi, loc._edata",
            "jmp rax"
        ]
    },
    "sym.imp.strtoull": {
        "function_address": "0x004021b0",
        "instructions": [
            "jmp qword [reloc.strtoull]"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x004020f0",
        "instructions": [
            "jmp qword [reloc.fputs]"
        ]
    },
    "sym.imp.pread64": {
        "function_address": "0x00402380",
        "instructions": [
            "jmp qword [reloc.pread64]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00401fb0",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x00402430",
        "instructions": [
            "jmp qword [reloc.strerror]"
        ]
    },
    "sym.imp.__printf_chk": {
        "function_address": "0x00402320",
        "instructions": [
            "jmp qword [reloc.__printf_chk]"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00402020",
        "instructions": [
            "jmp qword [reloc.puts]"
        ]
    },
    "fcn.0041bcfb": {
        "function_address": "0x0041bcfb",
        "instructions": [
            "sub rsp, 0x18",
            "mov ax, word [rdi + 0xc4]",
            "cmp ax, 1",
            "mov word [rsp + 0xe], ax",
            "movzx edx, ax",
            "jbe 0x41bd33",
            "lea rcx, str.btrfs_super_csum_size",
            "lea rsi, str.ctree.h",
            "lea rdi, str.__t____sizeof_btrfs_csum_sizes____sizeof__btrfs_csum_sizes__0____",
            "mov edx, 0x7ca",
            "call sym.imp.__assert_fail",
            "lea rax, [0x00420fe0]",
            "mov eax, dword [rax + rdx*4]",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "fcn.004073ac": {
        "function_address": "0x004073ac",
        "instructions": [
            "mov edi, edx",
            "mov rdx, rcx",
            "jmp fcn.0041cbfb"
        ]
    },
    "fcn.004073b6": {
        "function_address": "0x004073b6",
        "instructions": [
            "not edi",
            "mov dword [rsi], edi",
            "ret"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00402180",
        "instructions": [
            "jmp qword [reloc.memcmp]"
        ]
    },
    "sym.imp.__ctype_b_loc": {
        "function_address": "0x00402470",
        "instructions": [
            "jmp qword [reloc.__ctype_b_loc]"
        ]
    },
    "sym.imp.uuid_unparse": {
        "function_address": "0x00401fc0",
        "instructions": [
            "jmp qword [reloc.uuid_unparse]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00402090",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "fcn.0041200d": {
        "function_address": "0x0041200d",
        "instructions": [
            "mov r8d, ecx",
            "mov ecx, 1",
            "jmp fcn.00411e1b"
        ]
    },
    "fcn.00412164": {
        "function_address": "0x00412164",
        "instructions": [
            "push rbp",
            "test rdi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "push r9",
            "je 0x412249",
            "mov eax, dword [rdi + 0x70]",
            "dec eax",
            "cmp eax, 0",
            "mov dword [rdi + 0x70], eax",
            "jge 0x41219d",
            "lea rcx, str.free_extent_buffer",
            "mov edx, 0x261",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__eb__refs___0_",
            "jmp 0x4121c7",
            "jne 0x412249",
            "test byte [rdi + 0x74], 1",
            "mov rbp, qword [rdi + 0x48]",
            "je 0x4121cc",
            "lea rcx, str.free_extent_buffer",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__eb__flags__1_",
            "mov edx, 0x264",
            "call sym.imp.__assert_fail",
            "mov rcx, qword [rdi + 0x50]",
            "mov rdx, qword [rdi + 0x58]",
            "lea rax, [rdi + 0x50]",
            "mov rsi, rbx",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdx], rcx",
            "mov rdx, qword [rdi + 0x68]",
            "mov rcx, qword [rdi + 0x60]",
            "mov qword [rdi + 0x50], rax",
            "mov qword [rdi + 0x58], rax",
            "lea rax, [rdi + 0x60]",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdx], rcx",
            "mov qword [rdi + 0x60], rax",
            "mov qword [rdi + 0x68], rax",
            "lea rdi, [rbp + 8]",
            "call fcn.004119e8",
            "mov eax, dword [rbx + 0x40]",
            "mov rdx, qword [rbp + 0x20]",
            "cmp rdx, rax",
            "jae 0x412236",
            "lea rcx, str.free_extent_buffer",
            "mov edx, 0x268",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__tree__cache_size___eb__len_",
            "jmp 0x4121c7",
            "sub rdx, rax",
            "mov rdi, rbx",
            "mov qword [rbp + 0x20], rdx",
            "pop r8",
            "pop rbx",
            "pop rbp",
            "jmp sym.imp.free",
            "pop rsi",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.004119e8": {
        "function_address": "0x004119e8",
        "instructions": [
            "mov rax, rdi",
            "mov rdi, rsi",
            "mov rsi, rax",
            "jmp fcn.0041c68d"
        ]
    },
    "fcn.0040dbc2": {
        "function_address": "0x0040dbc2",
        "instructions": [
            "push r15",
            "mov r15, rcx",
            "push r14",
            "mov r14d, edx",
            "mov edx, edx",
            "push r13",
            "mov r13, r8",
            "push r12",
            "movsxd r12, r9d",
            "or r9, 0xffffffffffffffff",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x48",
            "mov rcx, qword [rdi]",
            "lea rax, [rsp + 0x2f]",
            "mov r8, qword [rsp + 0x80]",
            "mov dword [rsp + 8], 0",
            "mov qword [rsp + 0x18], rcx",
            "mov rcx, qword [rsp + 0x88]",
            "mov qword [rsp], rax",
            "call fcn.0040d385",
            "test eax, eax",
            "je 0x40dc36",
            "lea rcx, str.alloc_tree_block",
            "mov edx, 0xac5",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "jmp 0x40dc6c",
            "cmp r15, 2",
            "jne 0x40dce6",
            "mov edi, 0x38",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r15, rax",
            "jne 0x40dc71",
            "lea rcx, str.alloc_tree_block",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___extent_op_",
            "mov edx, 0xacb",
            "call sym.imp.__assert_fail",
            "mov dword [rax], 0",
            "mov rdx, qword [rsp + 0x38]",
            "lea r8, [r15 + 0x20]",
            "mov rax, qword [rsp + 0x2f]",
            "mov dword [r15 + 0x34], r12d",
            "mov rsi, r13",
            "mov qword [r15 + 0x18], 0",
            "mov rdi, r8",
            "mov ecx, 0x11",
            "mov qword [r15 + 0x10], rdx",
            "xor r8d, r8d",
            "mov qword [r15 + 8], rax",
            "lea rdx, [rax + rdx - 1]",
            "rep movsb byte [rdi], byte [rsi]",
            "mov rsi, rax",
            "mov rdi, qword [rbx + 0x1d8]",
            "mov cl, 8",
            "add rdi, 0x128",
            "call fcn.00411e1b",
            "mov rdi, qword [rbx + 0x1d8]",
            "mov rsi, qword [rsp + 0x2f]",
            "mov rdx, r15",
            "add rdi, 0x128",
            "call fcn.0041210c",
            "jmp 0x40dd86",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00409eb0",
            "test ah, 1",
            "je 0x40dd0b",
            "movsxd rax, r12d",
            "mov byte [rsp + 0x37], 0xa9",
            "mov qword [rsp + 0x38], rax",
            "mov rcx, qword [rsp + 0x18]",
            "lea rax, [rsp + 0x2f]",
            "mov r9, r13",
            "xor r8d, r8d",
            "mov rdx, r15",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov qword [rsp + 8], rax",
            "mov dword [rsp], r12d",
            "call fcn.0040adaf",
            "movsxd r13, eax",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rdi, rbp",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040af4b",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rdi, rbp",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040bd20",
            "cmp r13d, 0",
            "je 0x40dd86",
            "jle 0x40ddf5",
            "lea rcx, str.btrfs_alloc_free_block",
            "mov edx, 0xafa",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041dd2c]",
            "jmp 0x40dc6c",
            "mov rsi, qword [rsp + 0x2f]",
            "mov edx, r14d",
            "mov rdi, rbx",
            "call fcn.0040755f",
            "test rax, rax",
            "mov r13, rax",
            "jne 0x40dde9",
            "mov rcx, qword [rsp + 0x38]",
            "mov rdx, qword [rsp + 0x2f]",
            "mov rsi, rbx",
            "mov r9, qword [rbx + 0x1c7]",
            "mov rdi, rbp",
            "mov qword [rsp + 8], 0",
            "mov qword [rsp], r12",
            "xor r8d, r8d",
            "call sym.btrfs_free_extent",
            "lea rcx, str.btrfs_alloc_free_block",
            "mov edx, 0xb02",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__1_",
            "jmp 0x40dc6c",
            "mov rdi, rax",
            "call fcn.004085f1",
            "inc qword [rbp + 0x20]",
            "add rsp, 0x48",
            "mov rax, r13",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040d385": {
        "function_address": "0x0040d385",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, r8",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0xd8",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x50], rdi",
            "mov qword [rsp + 0x40], rsi",
            "mov qword [rsp + 0x80], rcx",
            "mov r8, qword [rax + 0x1c8]",
            "test r8, r8",
            "je 0x40d3f0",
            "mov rcx, qword [rsp + 0x110]",
            "mov rdx, r12",
            "mov rsi, rbx",
            "mov rdi, qword [rsp + 0x40]",
            "call qword [r8]",
            "test eax, eax",
            "lea rcx, str.btrfs_reserve_extent",
            "mov edx, 0xa56",
            "jne 0x40d489",
            "jmp 0x40db7f",
            "cmp dword [rsp + 0x118], 0",
            "je 0x40d40d",
            "mov rdx, qword [rax + 0x180]",
            "and rdx, qword [rax + 0x168]",
            "or edx, 1",
            "jmp 0x40d44a",
            "mov edx, dword [rax + 0x208]",
            "test edx, edx",
            "jg 0x40d426",
            "mov rsi, qword [rsp + 0x40]",
            "cmp rsi, qword [rax + 0x38]",
            "jne 0x40d439",
            "test edx, edx",
            "jne 0x40d439",
            "mov rdx, qword [rax + 0x190]",
            "and rdx, qword [rax + 0x178]",
            "or edx, 2",
            "jmp 0x40d44a",
            "mov rdx, qword [rax + 0x188]",
            "and rdx, qword [rax + 0x170]",
            "or edx, 4",
            "mov rsi, qword [rsp + 0x40]",
            "mov dword [rsp + 0x3c], edx",
            "cmp dword [rsi + 0x200], 0",
            "je 0x40d4d2",
            "test byte [rsp + 0x3c], 4",
            "jne 0x40d49c",
            "mov rsi, qword [rax + 0x28]",
            "mov rdi, qword [rsp + 0x50]",
            "mov ecx, 4",
            "mov rdx, rbx",
            "call fcn.0040d230",
            "test eax, eax",
            "je 0x40d49c",
            "lea rcx, str.btrfs_reserve_extent",
            "mov edx, 0xa6e",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rsi, qword [rsp + 0x40]",
            "movsxd rcx, dword [rsp + 0x3c]",
            "lea rdx, [rbx + 0x200000]",
            "mov rdi, qword [rsp + 0x50]",
            "mov rax, qword [rsi + 0x1d8]",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040d230",
            "test eax, eax",
            "lea rcx, str.btrfs_reserve_extent",
            "mov edx, 0xa72",
            "jne 0x40d489",
            "mov rsi, qword [rsp + 0x40]",
            "lea rcx, str.btrfs_reserve_extent",
            "mov edx, 0xa75",
            "mov eax, dword [rsi + 0x1f0]",
            "cmp rbx, rax",
            "jb 0x40d53d",
            "mov rax, qword [rsp + 0x50]",
            "mov rsi, qword [rsp + 0x40]",
            "mov rdx, qword [rsp + 0x50]",
            "mov rax, qword [rax + 0x10]",
            "mov rdx, qword [rdx + 8]",
            "mov qword [rsp + 0x68], rax",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x70], rdx",
            "mov rbp, qword [rax + 0x28]",
            "mov rax, qword [rbp + 0x1d8]",
            "mov qword [rsp + 0x48], rax",
            "mov eax, dword [rbp + 0x1f0]",
            "cmp rbx, rax",
            "jae 0x40d550",
            "lea rcx, str.find_free_extent",
            "mov edx, 0x9eb",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__num_bytes___root__sectorsize_",
            "jmp 0x40d497",
            "mov rdx, qword [rsp + 0x110]",
            "test r12, r12",
            "mov byte [rdx + 8], 0xa8",
            "je 0x40d58d",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, r12",
            "call fcn.0040ab82",
            "mov edx, 0",
            "test rax, rax",
            "mov rdi, qword [rbp + 0x1d8]",
            "cmove r12, rdx",
            "mov ecx, dword [rsp + 0x3c]",
            "mov rsi, rax",
            "mov rdx, r12",
            "jmp 0x40d5a3",
            "mov rcx, qword [rsp + 0x50]",
            "mov rdi, qword [rbp + 0x1d8]",
            "xor edx, edx",
            "mov rsi, qword [rcx + 0x28]",
            "mov ecx, dword [rsp + 0x3c]",
            "call fcn.0040c53a",
            "mov rsi, qword [rsp + 0x80]",
            "mov r15, rax",
            "xor r12d, r12d",
            "mov dword [rsp + 0x78], 0",
            "mov dword [rsp + 0x7c], 0",
            "add rsi, rbx",
            "mov qword [rsp + 0x58], rsi",
            "mov eax, dword [rbp + 0x1fc]",
            "dec rax",
            "add r12, rax",
            "not rax",
            "mov qword [rsp + 0x28], r12",
            "and qword [rsp + 0x28], rax",
            "test r15, r15",
            "jne 0x40d612",
            "mov rsi, qword [rsp + 0x28]",
            "mov rdi, qword [rsp + 0x48]",
            "call fcn.0040ab82",
            "test rax, rax",
            "mov r15, rax",
            "jne 0x40d612",
            "mov rdi, qword [rsp + 0x48]",
            "xor esi, esi",
            "call fcn.0040ab82",
            "mov r15, rax",
            "mov eax, dword [rsp + 0x58]",
            "test r15, r15",
            "mov qword [rsp + 0xa0], 0",
            "mov qword [rsp + 0xa8], 0",
            "mov r13, qword [rsp + 0x28]",
            "mov dword [rsp + 0x8c], eax",
            "je 0x40d991",
            "mov dword [rsp + 0x88], 0",
            "jmp 0x40d653",
            "mov r15, rax",
            "mov rax, qword [rbp + 0x1d8]",
            "cmp dword [r15 + 0x80], 0",
            "mov r14, qword [rax + 0x28]",
            "mov rdx, qword [r14 + 0x1d8]",
            "mov qword [rsp + 0x30], rdx",
            "jne 0x40d8b8",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r12, rax",
            "je 0x40d991",
            "mov dword [rax + 0x80], 2",
            "cmp qword [r15 + 0x30], 0x10000",
            "mov r13d, 0x10000",
            "cmovae r13, qword [r15 + 0x30]",
            "lea rdx, [rsp + 0xbf]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rsi, r14",
            "mov qword [rsp + 0xc8], 0",
            "mov byte [rsp + 0xc7], 0",
            "mov qword [rsp + 0xbf], r13",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x40d8b0",
            "mov rcx, qword [rsp + 0x30]",
            "add rcx, 0x88",
            "mov qword [rsp + 0x30], rcx",
            "mov rcx, qword [r12]",
            "mov edx, dword [r12 + 0x40]",
            "mov rdi, rcx",
            "mov dword [rsp + 0x18], edx",
            "mov qword [rsp + 0x20], rcx",
            "call fcn.00409ea9",
            "mov edx, dword [rsp + 0x18]",
            "mov rcx, qword [rsp + 0x20]",
            "cmp edx, eax",
            "jb 0x40d735",
            "mov rsi, r12",
            "mov rdi, r14",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "jl 0x40d8b0",
            "je 0x40d6f6",
            "jmp 0x40d7b4",
            "lea rsi, [rsp + 0xbf]",
            "mov rdi, rcx",
            "call fcn.00409e65",
            "mov rdx, qword [rsp + 0xbf]",
            "mov rax, qword [r15 + 0x30]",
            "cmp rdx, rax",
            "jb 0x40d7aa",
            "add rax, qword [r15 + 0x39]",
            "cmp rdx, rax",
            "jae 0x40d7b4",
            "mov al, byte [rsp + 0xc7]",
            "add eax, 0x58",
            "cmp al, 1",
            "ja 0x40d7aa",
            "cmp rdx, r13",
            "jbe 0x40d784",
            "mov rdi, qword [rsp + 0x30]",
            "dec rdx",
            "xor ecx, ecx",
            "mov rsi, r13",
            "call fcn.0041200d",
            "cmp byte [rsp + 0xc7], 0xa9",
            "mov r13, qword [rsp + 0xbf]",
            "jne 0x40d7a2",
            "mov eax, dword [r14 + 0x1f8]",
            "add r13, rax",
            "jmp 0x40d7aa",
            "add r13, qword [rsp + 0xc8]",
            "inc dword [r12 + 0x40]",
            "jmp 0x40d6f6",
            "mov rdx, qword [r15 + 0x39]",
            "add rdx, qword [r15 + 0x30]",
            "cmp rdx, r13",
            "jbe 0x40d7d3",
            "mov rdi, qword [rsp + 0x30]",
            "dec rdx",
            "xor ecx, ecx",
            "mov rsi, r13",
            "call fcn.0041200d",
            "mov rax, qword [r14 + 0x1d8]",
            "lea rsi, [r15 + 0x30]",
            "lea r13, [r14 + 0x1d8]",
            "mov edx, 0x10000",
            "xor r14d, r14d",
            "mov qword [rsp + 0x30], rsi",
            "add rax, 0x88",
            "mov qword [rsp + 0x60], rax",
            "jmp 0x40d80b",
            "imul ecx, r14d, 0xc",
            "mov edx, 0x4000",
            "shl rdx, cl",
            "lea rax, [rsp + 0x98]",
            "mov rdi, qword [r13]",
            "lea r9, [rsp + 0x9c]",
            "lea r8, [rsp + 0xb0]",
            "xor ecx, ecx",
            "mov qword [rsp], rax",
            "mov rax, qword [rsp + 0x30]",
            "add rdi, 0x150",
            "mov rsi, qword [rax]",
            "call fcn.00414572",
            "test eax, eax",
            "je 0x40d876",
            "lea rcx, str.remove_sb_from_cache",
            "mov edx, 0x4f",
            "jmp 0x40d489",
            "movsxd rdx, edx",
            "movsxd rax, dword [rsp + 0x98]",
            "xor ecx, ecx",
            "mov rsi, qword [rdi + rdx*8]",
            "mov rdi, qword [rsp + 0x60]",
            "lea rdx, [rsi + rax - 1]",
            "call fcn.0041201a",
            "mov eax, dword [rsp + 0x9c]",
            "mov rdi, qword [rsp + 0xb0]",
            "lea edx, [rax - 1]",
            "test eax, eax",
            "mov dword [rsp + 0x9c], edx",
            "jne 0x40d856",
            "inc r14d",
            "call sym.imp.free",
            "cmp r14d, 3",
            "jne 0x40d7ff",
            "mov dword [r15 + 0x80], 1",
            "mov rdi, r12",
            "call fcn.00402e4d",
            "cmp dword [r15 + 0x84], 0",
            "mov r12, qword [r15 + 0x30]",
            "jne 0x40d9ec",
            "movsxd rax, dword [rsp + 0x3c]",
            "mov rdx, rax",
            "and rdx, qword [r15 + 0x78]",
            "cmp rdx, rax",
            "jne 0x40d9ec",
            "cmp qword [rsp + 0x28], r12",
            "movsxd r14, dword [rsp + 0x8c]",
            "cmovae r12, qword [rsp + 0x28]",
            "mov rdi, qword [rbp + 0x1d8]",
            "lea rcx, [rsp + 0xa8]",
            "lea rdx, [rsp + 0xa0]",
            "mov r8d, 1",
            "mov rsi, r12",
            "add rdi, 0x88",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40d9ec",
            "mov r13, qword [rsp + 0xa0]",
            "cmp r12, r13",
            "cmovae r13, r12",
            "mov r12, qword [rsp + 0xa8]",
            "mov qword [rsp + 0xa0], r13",
            "inc r12",
            "mov rax, r12",
            "sub rax, r13",
            "cmp rax, r14",
            "jb 0x40d8f2",
            "mov rax, qword [r15 + 0x39]",
            "add rax, qword [r15 + 0x30]",
            "add r14, r13",
            "cmp r14, rax",
            "ja 0x40d9ec",
            "mov rdx, qword [rsp + 0x110]",
            "mov qword [rdx], r13",
            "mov qword [rdx + 9], rbx",
            "lea rdx, [r13 + rbx]",
            "mov r12, qword [r15 + 0x39]",
            "add r12, qword [r15 + 0x30]",
            "cmp rdx, r12",
            "ja 0x40db03",
            "jmp 0x40da35",
            "mov rdi, qword [rbp + 0x1d8]",
            "mov rsi, qword [rsp + 0x28]",
            "call fcn.0040abe2",
            "test rax, rax",
            "jne 0x40da2d",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rsp + 0x28]",
            "lea rdx, str.Unable_to_find_block_group_for__llu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.find_search_start",
            "mov edx, 0x120",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__1_",
            "jmp 0x40d497",
            "mov r13, qword [r15 + 0x39]",
            "add r13, qword [r15 + 0x30]",
            "jmp 0x40da06",
            "mov r13, qword [rsp + 0x28]",
            "mov dword [rsp + 0x88], 1",
            "mov rdi, qword [rbp + 0x1d8]",
            "mov rsi, r13",
            "call fcn.0040ab82",
            "test rax, rax",
            "jne 0x40d650",
            "cmp dword [rsp + 0x88], 0",
            "je 0x40d9f6",
            "jmp 0x40d991",
            "mov r12, r13",
            "jmp 0x40db03",
            "mov rdi, qword [rsp + 0x48]",
            "dec rdx",
            "xor r8d, r8d",
            "mov ecx, 8",
            "mov rsi, r13",
            "add rdi, 0x128",
            "call fcn.0041208d",
            "mov rcx, qword [rsp + 0x110]",
            "test eax, eax",
            "mov rsi, qword [rcx]",
            "je 0x40da6c",
            "lea r12, [rbx + rsi]",
            "jmp 0x40db03",
            "mov rdi, qword [rsp + 0x48]",
            "lea rdx, [rbx + rsi - 1]",
            "xor r8d, r8d",
            "mov ecx, 1",
            "add rdi, 0xd8",
            "call fcn.0041208d",
            "test eax, eax",
            "je 0x40da9e",
            "mov rsi, qword [rsp + 0x110]",
            "mov r12, rbx",
            "add r12, qword [rsi]",
            "jmp 0x40db03",
            "cmp qword [rsp + 0x68], 0",
            "je 0x40dacb",
            "mov rdx, qword [rsp + 0x110]",
            "mov rax, qword [rdx]",
            "lea rdx, [rbx + rax]",
            "cmp rdx, qword [rsp + 0x70]",
            "jbe 0x40dacb",
            "mov r12, qword [rsp + 0x70]",
            "add r12, qword [rsp + 0x68]",
            "cmp rax, r12",
            "jb 0x40db03",
            "test byte [rsp + 0x3c], 1",
            "jne 0x40daf5",
            "mov rcx, qword [rsp + 0x110]",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, qword [rcx]",
            "call fcn.0040abe2",
            "test rax, rax",
            "je 0x40daf5",
            "mov rsi, qword [rsp + 0x50]",
            "mov qword [rsi + 0x28], rax",
            "mov rax, qword [rsp + 0x110]",
            "mov qword [rax + 9], rbx",
            "jmp 0x40db7f",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, r12",
            "call fcn.0040ab82",
            "test rax, rax",
            "jne 0x40db50",
            "cmp dword [rsp + 0x7c], 0",
            "jne 0x40db6e",
            "cmp dword [rsp + 0x78], 0",
            "je 0x40db45",
            "mov rcx, qword [rsp + 0x80]",
            "xor r12d, r12d",
            "sub qword [rsp + 0x58], rcx",
            "mov dword [rsp + 0x78], 1",
            "mov dword [rsp + 0x7c], 1",
            "jmp 0x40db50",
            "xor r12d, r12d",
            "mov dword [rsp + 0x78], 1",
            "mov rdi, qword [rbp + 0x1d8]",
            "mov ecx, dword [rsp + 0x3c]",
            "mov rdx, r12",
            "mov rsi, rax",
            "call fcn.0040c53a",
            "mov r15, rax",
            "jmp 0x40d5ce",
            "lea rcx, str.btrfs_reserve_extent",
            "mov edx, 0xa7a",
            "jmp 0x40d489",
            "mov rax, qword [rsp + 0x110]",
            "mov rcx, qword [rsp + 0x40]",
            "mov rsi, qword [rax]",
            "mov rdi, qword [rcx + 0x1d8]",
            "xor ecx, ecx",
            "mov rdx, rsi",
            "add rdx, qword [rax + 9]",
            "add rdi, 0x88",
            "dec rdx",
            "call fcn.0041201a",
            "add rsp, 0xd8",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409eb0": {
        "function_address": "0x00409eb0",
        "instructions": [
            "mov rax, qword [rdi + 0xbc]",
            "ret"
        ]
    },
    "fcn.0040adaf": {
        "function_address": "0x0040adaf",
        "instructions": [
            "push r15",
            "mov r15, rcx",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x48",
            "mov rcx, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x18], rdi",
            "mov qword [rsp + 0x20], r8",
            "mov qword [rsp + 0x28], r9",
            "mov rdi, qword [rcx + 0x1a8]",
            "mov qword [rsp + 0x10], rcx",
            "call fcn.00409eb0",
            "shr rax, 8",
            "mov ebp, eax",
            "and ebp, 1",
            "cmp ebp, 1",
            "sbb r14d, r14d",
            "and r14d, 0x12",
            "call fcn.00402e0b",
            "add r14d, 0x21",
            "test rax, rax",
            "mov r13, rax",
            "mov rcx, qword [rsp + 0x10]",
            "jne 0x40ae32",
            "lea rcx, str.alloc_reserved_tree_block",
            "mov edx, 0xa98",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___path_",
            "jmp 0x40ae80",
            "or byte [rax + 0x88], 8",
            "lea r8, [rsp + 0x3c]",
            "mov r9d, 1",
            "mov rsi, qword [rcx + 0x28]",
            "mov rdi, qword [rsp + 0x18]",
            "mov rdx, rax",
            "mov rcx, qword [rsp + 0x88]",
            "mov dword [rsp + 0x3c], r14d",
            "call fcn.004064c0",
            "test eax, eax",
            "je 0x40ae85",
            "lea rcx, str.alloc_reserved_tree_block",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "mov edx, 0xa9d",
            "call sym.imp.__assert_fail",
            "movsxd rdx, dword [r13 + 0x40]",
            "mov rax, qword [r13]",
            "mov r14, qword [rsp + 0x20]",
            "imul rdx, rdx, 0x19",
            "or r14, 2",
            "test ebp, ebp",
            "mov r8d, dword [rax + rdx + 0xf2]",
            "lea rcx, [rax + r8 + 0xd5]",
            "lea rdx, [r8 + 0x7d]",
            "mov qword [rcx + 0xc], 1",
            "mov qword [rcx + 0x14], r15",
            "mov qword [rcx + 0x1c], r14",
            "jne 0x40aefe",
            "mov rsi, qword [rsp + 0x28]",
            "mov rdi, rax",
            "mov ecx, 0x11",
            "mov qword [rsp + 0x10], rax",
            "mov qword [rsp + 8], r8",
            "call fcn.00412a59",
            "mov edx, dword [rsp + 0x80]",
            "mov r8, qword [rsp + 8]",
            "mov rax, qword [rsp + 0x10]",
            "mov byte [rax + r8 + 0x10a], dl",
            "lea rdx, [r8 + 0x8f]",
            "lea rdx, [rdx + rax + 0x70]",
            "mov rdi, rax",
            "mov qword [rdx + 0xd], r12",
            "mov byte [rdx + 0xc], 0xb0",
            "call fcn.00408149",
            "mov rdi, r13",
            "call fcn.00402e4d",
            "mov rax, qword [rsp + 0x88]",
            "mov edx, dword [rbx + 0x1f8]",
            "mov rdi, rbx",
            "xor r8d, r8d",
            "mov ecx, 1",
            "mov rsi, qword [rax]",
            "call fcn.0040ac46",
            "add rsp, 0x48",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040755f": {
        "function_address": "0x0040755f",
        "instructions": [
            "mov rdi, qword [rdi + 0x1d8]",
            "add rdi, 0x60",
            "jmp 0x412364",
            "push r15",
            "mov r15d, edx",
            "push r14",
            "lea r14, [rdi + 8]",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12d, edx",
            "mov rdx, r12",
            "push rbp",
            "mov rbp, rdi",
            "mov rdi, r14",
            "push rbx",
            "sub rsp, 0x18",
            "call fcn.0041191b",
            "test rax, rax",
            "je 0x4123db",
            "cmp qword [rax + 0x20], r13",
            "jne 0x4123d3",
            "cmp qword [rax + 0x28], r12",
            "jne 0x4123d3",
            "mov rdx, qword [rax + 0x58]",
            "mov rsi, qword [rax + 0x50]",
            "lea rcx, [rax + 0x50]",
            "mov rbx, rax",
            "mov qword [rsi + 8], rdx",
            "mov qword [rdx], rsi",
            "mov rdx, qword [rbp + 0x18]",
            "mov qword [rbp + 0x18], rcx",
            "add rbp, 0x10",
            "mov qword [rax + 0x50], rbp",
            "mov qword [rax + 0x58], rdx",
            "mov qword [rdx], rcx",
            "inc dword [rax + 0x70]",
            "jmp 0x412523",
            "mov rdi, rax",
            "call fcn.00412164",
            "lea rcx, [r12 + 0x80]",
            "mov rdi, rcx",
            "mov qword [rsp + 8], rcx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov rcx, qword [rsp + 8]",
            "jne 0x41241c",
            "lea rcx, str.__alloc_extent_buffer",
            "lea rsi, str.extent_io.c",
            "lea rdi, [0x0041e6fe]",
            "mov edx, 0x240",
            "call sym.imp.__assert_fail",
            "xor eax, eax",
            "mov rdi, rbx",
            "rep stosb byte [rdi], al",
            "lea rax, [rbx + 0x60]",
            "mov qword [rbx + 0x30], r13",
            "mov dword [rbx + 0x40], r15d",
            "mov dword [rbx + 0x70], 1",
            "mov dword [rbx + 0x74], 0",
            "mov qword [rbx + 0x48], rbp",
            "mov dword [rbx + 0x78], 0xffffffff",
            "mov qword [rbx + 0x38], 0xffffffffffffffff",
            "mov qword [rbx + 0x20], r13",
            "mov qword [rbx + 0x28], r12",
            "mov qword [rbx + 0x60], rax",
            "mov qword [rbx + 0x68], rax",
            "cmp qword [rbp + 0x20], 0xfffffff",
            "ja 0x41247f",
            "mov rsi, rbx",
            "mov rdi, r14",
            "call fcn.0041186d",
            "test eax, eax",
            "je 0x412504",
            "jmp 0x4124f8",
            "mov rdi, qword [rbp + 0x10]",
            "xor r15d, r15d",
            "lea rax, [rbp + 0x10]",
            "mov r13, qword [rdi]",
            "jmp 0x4124ee",
            "cmp dword [rdi + 0x20], 1",
            "jne 0x4124b4",
            "sub rdi, 0x50",
            "mov qword [rsp + 8], rax",
            "call fcn.00412164",
            "cmp qword [rbp + 0x20], 0x3fffffff",
            "mov rax, qword [rsp + 8]",
            "ja 0x4124d4",
            "jmp 0x41246a",
            "mov rdx, qword [rdi + 8]",
            "mov rcx, qword [rdi]",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdx], rcx",
            "mov rdx, qword [rbp + 0x18]",
            "mov qword [rbp + 0x18], rdi",
            "mov qword [rdi], rax",
            "mov qword [rdi + 8], rdx",
            "mov qword [rdx], rdi",
            "cmp r15d, 0x40",
            "jbe 0x4124e4",
            "cmp qword [rbp + 0x20], 0x3fffffff",
            "jbe 0x41246a",
            "mov rdi, r13",
            "mov r13, qword [r13]",
            "inc r15d",
            "cmp rdi, rax",
            "jne 0x41248f",
            "jmp 0x41246a",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call sym.imp.free",
            "jmp 0x412523",
            "mov rax, qword [rbp + 0x18]",
            "lea rdx, [rbx + 0x50]",
            "lea rcx, [rbp + 0x10]",
            "mov qword [rbp + 0x18], rdx",
            "mov qword [rbx + 0x50], rcx",
            "mov qword [rbx + 0x58], rax",
            "mov qword [rax], rdx",
            "add qword [rbp + 0x20], r12",
            "add rsp, 0x18",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004085f1": {
        "function_address": "0x004085f1",
        "instructions": [
            "jmp 0x4129b8",
            "or dword [rdi + 0x74], 4",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.00402dd2": {
        "function_address": "0x00402dd2",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "call fcn.00402924",
            "movabs rdx, 0xffffffffffffff",
            "mov rdi, rbx",
            "pop rbx",
            "and rax, rdx",
            "movabs rdx, 0x100000000000000",
            "or rax, rdx",
            "mov rsi, rax",
            "jmp fcn.004028db"
        ]
    },
    "fcn.00402924": {
        "function_address": "0x00402924",
        "instructions": [
            "mov rax, qword [rdi + 0xb4]",
            "ret"
        ]
    },
    "fcn.0040cabc": {
        "function_address": "0x0040cabc",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov ebx, ecx",
            "sub rsp, 0x68",
            "mov r15, qword [rdx + 0xd4]",
            "mov qword [rsp + 0x28], rdi",
            "mov rdi, rdx",
            "mov dword [rsp + 0x18], r8d",
            "mov qword [rsp + 0x40], r15",
            "call fcn.00409ea9",
            "movzx r12d, byte [r13 + 0xe0]",
            "mov dword [rsp + 0x34], eax",
            "mov r8d, dword [rsp + 0x18]",
            "mov eax, r12d",
            "or eax, dword [rbp + 0x200]",
            "je 0x40a938",
            "test r8d, r8d",
            "je 0x40a800",
            "mov r14, qword [reloc.btrfs_inc_extent_ref]",
            "jmp 0x40a807",
            "mov r14, qword [reloc.btrfs_free_extent]",
            "test ebx, ebx",
            "mov qword [rsp + 0x20], 0",
            "je 0x40a81d",
            "mov rax, qword [r13 + 0x30]",
            "mov qword [rsp + 0x20], rax",
            "lea eax, [r12 - 1]",
            "xor ebx, ebx",
            "cdqe",
            "mov qword [rsp + 0x38], rax",
            "jmp 0x40a92e",
            "test r12d, r12d",
            "jne 0x40a8c3",
            "lea rsi, [rsp + 0x4f]",
            "mov edx, ebx",
            "mov rdi, r13",
            "call fcn.00409e65",
            "cmp byte [rsp + 0x57], 0x6c",
            "jne 0x40a92b",
            "imul rax, rbx, 0x19",
            "mov eax, dword [r13 + rax + 0xf2]",
            "lea rsi, [r13 + rax + 0xe1]",
            "cmp byte [rsi + 0x14], 0",
            "je 0x40a92b",
            "mov rdx, qword [rsi + 0x15]",
            "test rdx, rdx",
            "je 0x40a92b",
            "mov rax, qword [rsp + 0x58]",
            "sub rax, qword [rsi + 0x25]",
            "mov r9, r15",
            "mov rcx, qword [rsi + 0x1d]",
            "mov r8, qword [rsp + 0x20]",
            "mov rsi, rbp",
            "mov rdi, qword [rsp + 0x28]",
            "mov qword [rsp + 0x58], rax",
            "mov qword [rsp + 8], rax",
            "mov rax, qword [rsp + 0x4f]",
            "mov qword [rsp], rax",
            "call r14",
            "test eax, eax",
            "je 0x40a92b",
            "lea rcx, str.__btrfs_mod_ref",
            "mov edx, 0x6aa",
            "jmp 0x40a918",
            "imul rax, rbx, 0x21",
            "cmp r12d, 1",
            "mov rdx, qword [r13 + rax + 0xf2]",
            "jne 0x40a8dd",
            "mov ecx, dword [rbp + 0x1f8]",
            "jmp 0x40a8e3",
            "mov ecx, dword [rbp + 0x1f4]",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [rsp + 8], 0",
            "mov r9, r15",
            "mov r8, qword [rsp + 0x20]",
            "mov rsi, rbp",
            "mov rdi, qword [rsp + 0x28]",
            "mov qword [rsp], rax",
            "call r14",
            "test eax, eax",
            "je 0x40a92b",
            "lea rcx, str.__btrfs_mod_ref",
            "mov edx, 0x6b3",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__1_",
            "call sym.imp.__assert_fail",
            "inc rbx",
            "cmp dword [rsp + 0x34], ebx",
            "ja 0x40a830",
            "add rsp, 0x68",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov r8d, 1",
            "jmp 0x40a79e"
        ]
    },
    "fcn.00409ea9": {
        "function_address": "0x00409ea9",
        "instructions": [
            "mov eax, dword [rdi + 0xdc]",
            "ret"
        ]
    },
    "fcn.00409e65": {
        "function_address": "0x00409e65",
        "instructions": [
            "movsxd rdx, edx",
            "push rbx",
            "mov rbx, rsi",
            "imul rdx, rdx, 0x19",
            "mov ecx, 0x11",
            "sub rsp, 0x20",
            "lea rsi, [rsp + 0xf]",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rbx + 9], rax",
            "mov al, byte [rsp + 0x17]",
            "mov byte [rbx + 8], al",
            "mov rax, qword [rsp + 0xf]",
            "mov qword [rbx], rax",
            "add rsp, 0x20",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0040c6c0": {
        "function_address": "0x0040c6c0",
        "instructions": [
            "push r15",
            "mov r15, rcx",
            "push r14",
            "push r13",
            "mov r13, r9",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov ebx, r8d",
            "sub rsp, 0x38",
            "test r8d, r8d",
            "mov qword [rsp + 8], rdi",
            "je 0x40c708",
            "mov rax, qword [rsi + 0x1d8]",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00409eb0",
            "test ah, 1",
            "jne 0x40c708",
            "mov r15d, dword [rbp + 0x1f8]",
            "xor ebx, ebx",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r14, rax",
            "je 0x40c851",
            "cmp ebx, 1",
            "mov dword [rax + 0x80], 1",
            "mov qword [rsp + 0x1f], r12",
            "sbb eax, eax",
            "mov qword [rsp + 0x28], r15",
            "sub eax, 0x57",
            "mov byte [rsp + 0x27], al",
            "mov rax, qword [rbp + 0x1d8]",
            "mov rdi, qword [rsp + 8]",
            "lea rdx, [rsp + 0x1f]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov rcx, r14",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x40c841",
            "test ebx, ebx",
            "je 0x40c7cf",
            "test eax, eax",
            "jle 0x40c7cf",
            "mov edx, dword [r14 + 0x40]",
            "test edx, edx",
            "je 0x40c858",
            "mov rdi, qword [r14]",
            "dec edx",
            "lea rsi, [rsp + 0x1f]",
            "mov dword [r14 + 0x40], edx",
            "call fcn.00409e65",
            "cmp qword [rsp + 0x1f], r12",
            "jne 0x40c858",
            "cmp byte [rsp + 0x27], 0xa8",
            "jne 0x40c858",
            "mov eax, dword [rbp + 0x1f8]",
            "cmp qword [rsp + 0x28], rax",
            "jne 0x40c858",
            "movsxd rdx, dword [r14 + 0x40]",
            "mov rax, qword [r14]",
            "imul rdx, rdx, 0x19",
            "lea rdx, [rax + rdx + 0xe1]",
            "mov ecx, dword [rdx + 0x15]",
            "cmp ecx, 0x17",
            "ja 0x40c7d5",
            "jmp 0x40c7ea",
            "test eax, eax",
            "jne 0x40c838",
            "jmp 0x40c7b2",
            "mov edx, dword [rdx + 0x11]",
            "lea rax, [rax + rdx + 0xd5]",
            "mov rdx, qword [rax + 0xc]",
            "mov rax, qword [rax + 0x1c]",
            "jmp 0x40c81d",
            "cmp ecx, 4",
            "je 0x40c80e",
            "lea rcx, str.btrfs_lookup_extent_info",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__item_size___sizeof_ei0__",
            "mov edx, 0x60a",
            "call sym.imp.__assert_fail",
            "mov edx, dword [rdx + 0x11]",
            "mov edx, dword [rax + rdx + 0xe1]",
            "mov eax, 0x100",
            "test r13, r13",
            "je 0x40c826",
            "mov qword [r13], rdx",
            "cmp qword [rsp + 0x70], 0",
            "je 0x40c83f",
            "mov rdx, qword [rsp + 0x70]",
            "mov qword [rdx], rax",
            "jmp 0x40c83f",
            "mov eax, 0xfffffffb",
            "jmp 0x40c841",
            "xor eax, eax",
            "mov rdi, r14",
            "mov dword [rsp], eax",
            "call fcn.00402e4d",
            "mov eax, dword [rsp]",
            "jmp 0x40c877",
            "mov eax, 0xfffffff4",
            "jmp 0x40c877",
            "mov rdi, r14",
            "xor ebx, ebx",
            "call fcn.00402e1a",
            "mov eax, dword [rbp + 0x1f8]",
            "mov byte [rsp + 0x27], 0xa8",
            "mov qword [rsp + 0x28], rax",
            "jmp 0x40c739",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040551b": {
        "function_address": "0x0040551b",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rcx",
            "sub rsp, 0xb8",
            "mov eax, dword [rcx + 0x80]",
            "test r8d, r8d",
            "mov qword [rsp + 0x48], rdx",
            "mov edx, dword [rcx + 0x84]",
            "mov qword [rsp + 0x28], rdi",
            "mov dword [rsp + 0x40], r8d",
            "mov dword [rsp + 0x54], r9d",
            "mov dword [rsp + 0x5c], eax",
            "mov dword [rsp + 0x50], edx",
            "setg byte [rsp + 0x5b]",
            "jle 0x405584",
            "test dl, dl",
            "je 0x405584",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x419",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__lowest_level__ins_len___0_",
            "jmp 0x4055a4",
            "cmp qword [rbx], 0",
            "je 0x4055a9",
            "lea rcx, str.btrfs_search_slot",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__p__nodes_0______void__0__",
            "mov edx, 0x41a",
            "call sym.imp.__assert_fail",
            "mov rax, qword [rbp]",
            "mov qword [rsp + 0x78], rax",
            "inc dword [rax + 0x70]",
            "jmp 0x40648c",
            "movzx ecx, byte [rdx + 0xe0]",
            "cmp dword [rsp + 0x54], 0",
            "mov dword [rsp + 0x24], ecx",
            "je 0x405603",
            "mov eax, ecx",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x78]",
            "inc eax",
            "mov rsi, rbp",
            "cdqe",
            "mov rcx, qword [rbx + rax*8]",
            "mov r8d, dword [rbx + rax*4 + 0x40]",
            "call fcn.004038a7",
            "test eax, eax",
            "mov r15d, eax",
            "je 0x405603",
            "mov rdi, qword [rsp + 0x78]",
            "call fcn.00412164",
            "jmp 0x4064ab",
            "cmp dword [rsp + 0x54], 0",
            "jne 0x405630",
            "cmp dword [rsp + 0x40], 0",
            "je 0x405630",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x42e",
            "lea rsi, str.ctree.c",
            "lea rdi, str.___cow__ins_len_",
            "jmp 0x4055a4",
            "mov rax, qword [rsp + 0x78]",
            "mov sil, byte [rax + 0xe0]",
            "movzx edx, sil",
            "cmp dword [rsp + 0x24], edx",
            "mov byte [rsp + 0x5a], sil",
            "je 0x40566a",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x430",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "jmp 0x4055a4",
            "movsxd rdx, dword [rsp + 0x24]",
            "mov qword [rbx + rdx*8], rax",
            "test byte [rbx + 0x88], 0x10",
            "je 0x40568e",
            "cmp dword [rsp + 0x24], 0",
            "mov r12, qword [rsp + 0x78]",
            "jne 0x40571f",
            "jmp 0x4056a6",
            "mov edx, dword [rsp + 0x24]",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00404fa4",
            "test eax, eax",
            "je 0x40567c",
            "jmp 0x40649f",
            "mov rdi, r12",
            "xor r15d, r15d",
            "call fcn.0040291d",
            "mov r14d, eax",
            "jmp 0x4056f3",
            "lea eax, [r15 + r14]",
            "mov ecx, 2",
            "mov rsi, qword [rsp + 0x48]",
            "cdq",
            "idiv ecx",
            "mov dword [rsp + 0x24], eax",
            "mov r13d, eax",
            "imul eax, eax, 0x19",
            "cdqe",
            "lea rdi, [r12 + rax + 0xe1]",
            "call fcn.004039ba",
            "cmp eax, 0",
            "jge 0x4056ee",
            "lea r15d, [r13 + 1]",
            "mov r13d, r14d",
            "jmp 0x4056f0",
            "je 0x405700",
            "mov r14d, r13d",
            "cmp r15d, r14d",
            "jl 0x4056b6",
            "mov r12d, 1",
            "jmp 0x405708",
            "mov r15d, dword [rsp + 0x24]",
            "xor r12d, r12d",
            "cmp byte [rsp + 0x5b], 0",
            "mov dword [rbx + 0x40], r15d",
            "mov r15d, r12d",
            "je 0x4064ab",
            "jmp 0x40642b",
            "mov rdi, r12",
            "xor r15d, r15d",
            "call fcn.0040291d",
            "mov r14d, eax",
            "jmp 0x40576c",
            "lea eax, [r15 + r14]",
            "mov esi, 2",
            "cdq",
            "idiv esi",
            "mov rsi, qword [rsp + 0x48]",
            "mov dword [rsp + 0x30], eax",
            "mov r13d, eax",
            "imul eax, eax, 0x21",
            "cdqe",
            "lea rdi, [r12 + rax + 0xe1]",
            "call fcn.004039ba",
            "cmp eax, 0",
            "jge 0x405767",
            "lea r15d, [r13 + 1]",
            "mov r13d, r14d",
            "jmp 0x405769",
            "je 0x40577e",
            "mov r14d, r13d",
            "cmp r15d, r14d",
            "jl 0x40572f",
            "xor eax, eax",
            "test r15d, r15d",
            "setg al",
            "sub r15d, eax",
            "jmp 0x405783",
            "mov r15d, dword [rsp + 0x30]",
            "movsxd rax, dword [rsp + 0x24]",
            "mov dword [rbx + rax*4 + 0x40], r15d",
            "test byte [rbx + 0x88], 1",
            "jne 0x4057a1",
            "cmp byte [rsp + 0x5b], 0",
            "je 0x405d28",
            "mov rdi, qword [rsp + 0x78]",
            "call fcn.0040291d",
            "mov ecx, eax",
            "mov eax, dword [rbp + 0x1f4]",
            "xor edx, edx",
            "mov esi, 0x21",
            "sub rax, 0x65",
            "div rsi",
            "sub rax, 3",
            "cmp rcx, rax",
            "jb 0x405d28",
            "movsxd r12, dword [rsp + 0x24]",
            "mov r14, qword [rbx + r12*8]",
            "mov rdi, r14",
            "call fcn.00402915",
            "mov rdx, qword [rsp + 0x28]",
            "cmp rax, qword [rdx]",
            "je 0x405808",
            "lea rcx, str.split_node",
            "mov edx, 0x5bb",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_c____trans__transid_",
            "jmp 0x4055a4",
            "cmp r14, qword [rbp]",
            "jne 0x405834",
            "mov ecx, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x28]",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "inc ecx",
            "call fcn.00402eaa",
            "test eax, eax",
            "mov r15d, eax",
            "je 0x405b2c",
            "jmp 0x405cf3",
            "mov r13, qword [rbx + r12*8]",
            "mov qword [rsp + 0x88], 0",
            "mov qword [rsp + 0x90], 0",
            "mov r15d, dword [rbx + r12*4 + 0x40]",
            "mov rdi, r13",
            "call fcn.00402915",
            "mov rcx, qword [rsp + 0x28]",
            "cmp rax, qword [rcx]",
            "je 0x405878",
            "lea rcx, str.push_nodes_for_insert",
            "mov edx, 0x354",
            "jmp 0x405d7a",
            "cmp dword [rsp + 0x24], 6",
            "jle 0x405884",
            "jmp 0x405aed",
            "mov esi, dword [rsp + 0x24]",
            "inc esi",
            "movsxd rax, esi",
            "mov dword [rsp + 0x30], esi",
            "mov r12, qword [rbx + rax*8]",
            "mov r14d, dword [rbx + rax*4 + 0x40]",
            "test r12, r12",
            "je 0x405aed",
            "lea r8d, [r14 - 1]",
            "mov rsi, r12",
            "mov rdi, rbp",
            "mov edx, r8d",
            "mov dword [rsp + 0x18], r8d",
            "call fcn.00403b70",
            "test rax, rax",
            "mov qword [rsp + 0x90], rax",
            "je 0x4059d3",
            "mov rdi, rax",
            "call fcn.0040291d",
            "mov ecx, eax",
            "mov dword [rsp + 0x38], eax",
            "mov eax, dword [rbp + 0x1f4]",
            "xor edx, edx",
            "mov esi, 0x21",
            "mov r8d, dword [rsp + 0x18]",
            "sub rax, 0x65",
            "div rsi",
            "dec rax",
            "cmp rcx, rax",
            "jae 0x4059c6",
            "mov rdx, qword [rsp + 0x90]",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x90]",
            "mov rcx, r12",
            "mov rsi, rbp",
            "call fcn.004038a7",
            "test eax, eax",
            "jne 0x4059c6",
            "mov rdx, qword [rsp + 0x90]",
            "mov rdi, qword [rsp + 0x28]",
            "lea rsi, [rbp + 0x1f4]",
            "xor r8d, r8d",
            "mov rcx, r13",
            "call fcn.004029ca",
            "test eax, eax",
            "jne 0x4059c6",
            "lea rsi, [rsp + 0x9f]",
            "xor edx, edx",
            "mov rdi, r13",
            "add r15d, dword [rsp + 0x38]",
            "call fcn.004028a7",
            "lea rsi, [rsp + 0x9f]",
            "mov edx, r14d",
            "mov rdi, r12",
            "call fcn.004028eb",
            "mov rdi, r12",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x90]",
            "call fcn.0040291d",
            "cmp eax, r15d",
            "movsxd r12, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x90]",
            "jbe 0x4059ac",
            "movsxd rax, dword [rsp + 0x30]",
            "mov qword [rbx + r12*8], rdi",
            "dec dword [rbx + rax*4 + 0x40]",
            "jmp 0x405ace",
            "call fcn.0040291d",
            "sub r15d, eax",
            "mov rdi, qword [rsp + 0x90]",
            "mov dword [rbx + r12*4 + 0x40], r15d",
            "jmp 0x405ad6",
            "mov rdi, qword [rsp + 0x90]",
            "call fcn.00412164",
            "inc r14d",
            "mov rsi, r12",
            "mov rdi, rbp",
            "mov edx, r14d",
            "call fcn.00403b70",
            "test rax, rax",
            "mov qword [rsp + 0x88], rax",
            "je 0x405aed",
            "mov rdi, rax",
            "call fcn.0040291d",
            "mov esi, eax",
            "mov eax, dword [rbp + 0x1f4]",
            "xor edx, edx",
            "mov ecx, 0x21",
            "sub rax, 0x65",
            "div rcx",
            "dec rax",
            "cmp rsi, rax",
            "jae 0x405ae0",
            "mov rdx, qword [rsp + 0x88]",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x88]",
            "mov r8d, r14d",
            "mov rcx, r12",
            "mov rsi, rbp",
            "call fcn.004038a7",
            "test eax, eax",
            "jne 0x405ae0",
            "mov rdx, qword [rsp + 0x88]",
            "mov rdi, qword [rsp + 0x28]",
            "lea rsi, [rbp + 0x1f4]",
            "mov rcx, r13",
            "call fcn.00402b4d",
            "test eax, eax",
            "jne 0x405ae0",
            "mov rdi, qword [rsp + 0x88]",
            "lea rsi, [rsp + 0x9f]",
            "xor edx, edx",
            "call fcn.004028a7",
            "lea rsi, [rsp + 0x9f]",
            "mov edx, r14d",
            "mov rdi, r12",
            "call fcn.004028eb",
            "mov rdi, r12",
            "call fcn.00408149",
            "mov rdi, r13",
            "call fcn.0040291d",
            "cmp eax, r15d",
            "mov rdi, qword [rsp + 0x88]",
            "ja 0x405ad6",
            "movsxd r12, dword [rsp + 0x24]",
            "movsxd rax, dword [rsp + 0x30]",
            "mov qword [rbx + r12*8], rdi",
            "inc dword [rbx + rax*4 + 0x40]",
            "mov rdi, r13",
            "call fcn.0040291d",
            "sub r15d, eax",
            "mov dword [rbx + r12*4 + 0x40], r15d",
            "mov rdi, r13",
            "call fcn.00412164",
            "xor r15d, r15d",
            "jmp 0x405af3",
            "mov rdi, qword [rsp + 0x88]",
            "call fcn.00412164",
            "mov r15d, 1",
            "movsxd rax, dword [rsp + 0x24]",
            "test r15d, r15d",
            "mov r14, qword [rbx + rax*8]",
            "jne 0x405b2c",
            "mov rdi, r14",
            "call fcn.0040291d",
            "mov esi, eax",
            "mov eax, dword [rbp + 0x1f4]",
            "xor edx, edx",
            "mov ecx, 0x21",
            "sub rax, 0x65",
            "div rcx",
            "sub rax, 3",
            "cmp rsi, rax",
            "jb 0x405d10",
            "mov rdi, r14",
            "call fcn.0040291d",
            "lea r13d, [rax + 1]",
            "lea rsi, [rsp + 0x9f]",
            "mov rdi, r14",
            "mov r15d, eax",
            "shr r13d, 1",
            "mov edx, r13d",
            "call fcn.004028a7",
            "mov rcx, qword [rbp + 0x1c7]",
            "mov edx, dword [rbp + 0x1f4]",
            "lea r8, [rsp + 0x9f]",
            "mov qword [rsp + 8], 0",
            "mov rax, qword [r14 + 0x30]",
            "mov rsi, rbp",
            "mov r9d, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x28]",
            "mov qword [rsp], rax",
            "call fcn.0040dbc2",
            "cmp rax, 0xfffffffffffff000",
            "mov r12, rax",
            "jbe 0x405b9c",
            "mov r15d, eax",
            "jmp 0x405cf3",
            "xor edx, edx",
            "mov ecx, 0x65",
            "mov rdi, rax",
            "xor esi, esi",
            "sub r15d, r13d",
            "call fcn.00412a8f",
            "movzx esi, byte [r14 + 0xe0]",
            "mov rdi, r12",
            "call fcn.004028e3",
            "mov rsi, qword [r12 + 0x30]",
            "mov rdi, r12",
            "call fcn.004028bc",
            "mov rax, qword [rsp + 0x28]",
            "mov rdi, r12",
            "mov rsi, qword [rax]",
            "call fcn.004028c4",
            "mov rdi, r12",
            "call fcn.00402dd2",
            "mov rsi, qword [rbp + 0x1c7]",
            "mov rdi, r12",
            "call fcn.004028cc",
            "mov rsi, qword [rbp + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rdi, r12",
            "call fcn.00412a59",
            "mov rsi, qword [rbp + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x40",
            "mov rdi, r12",
            "add rsi, 0x10",
            "call fcn.00412a59",
            "mov ecx, r13d",
            "mov r8d, r15d",
            "mov edx, 0x65",
            "imul rcx, rcx, 0x21",
            "mov rsi, r14",
            "mov rdi, r12",
            "imul r8, r8, 0x21",
            "add rcx, 0x65",
            "call fcn.00412a64",
            "mov esi, r15d",
            "mov rdi, r12",
            "call fcn.004028d4",
            "mov esi, r13d",
            "mov rdi, r14",
            "call fcn.004028d4",
            "mov rdi, r14",
            "call fcn.00408149",
            "mov rdi, r12",
            "call fcn.00408149",
            "mov eax, dword [rsp + 0x24]",
            "mov r8, qword [r12 + 0x30]",
            "lea rcx, [rsp + 0x9f]",
            "mov rdi, qword [rsp + 0x28]",
            "lea rsi, [rbp + 0x1f4]",
            "inc eax",
            "movsxd r10, eax",
            "mov dword [rsp], eax",
            "add r10, 0x10",
            "mov edx, dword [rbx + r10*4]",
            "mov qword [rsp + 0x10], r10",
            "lea r9d, [rdx + 1]",
            "mov rdx, rbx",
            "call fcn.00402c92",
            "mov r15d, eax",
            "movsxd rax, dword [rsp + 0x24]",
            "lea rdx, [rax + 0x10]",
            "mov ecx, dword [rbx + rdx*4]",
            "cmp ecx, r13d",
            "jl 0x405ceb",
            "sub ecx, r13d",
            "mov rdi, r14",
            "mov qword [rsp + 0x18], rax",
            "mov dword [rbx + rdx*4], ecx",
            "call fcn.00412164",
            "mov rax, qword [rsp + 0x18]",
            "mov r10, qword [rsp + 0x10]",
            "mov qword [rbx + rax*8], r12",
            "inc dword [rbx + r10*4]",
            "jmp 0x405cf3",
            "mov rdi, r12",
            "call fcn.00412164",
            "cmp r15d, 0",
            "jle 0x405d0a",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x43f",
            "jmp 0x406473",
            "jne 0x4064ab",
            "movsxd rax, dword [rsp + 0x24]",
            "mov rdx, qword [rbx + rax*8]",
            "mov r15d, dword [rbx + rax*4 + 0x40]",
            "mov qword [rsp + 0x78], rdx",
            "jmp 0x4063d1",
            "cmp dword [rsp + 0x40], 0",
            "jns 0x4063d1",
            "movsxd rax, dword [rsp + 0x24]",
            "mov qword [rsp + 0x80], 0",
            "mov qword [rsp + 0x88], 0",
            "mov r12, qword [rbx + rax*8]",
            "mov edx, dword [rbx + rax*4 + 0x40]",
            "mov rdi, r12",
            "mov dword [rsp + 0x38], edx",
            "call fcn.00402915",
            "mov rcx, qword [rsp + 0x28]",
            "cmp rax, qword [rcx]",
            "je 0x405d8d",
            "lea rcx, str.balance_level",
            "mov edx, 0x291",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_mid____trans__transid_",
            "jmp 0x4055a4",
            "movsxd rax, dword [rsp + 0x38]",
            "mov rdi, r12",
            "imul rax, rax, 0x21",
            "cmp dword [rsp + 0x24], 6",
            "mov rax, qword [r12 + rax + 0xf2]",
            "mov qword [rsp + 0x60], rax",
            "jg 0x405dd4",
            "mov esi, dword [rsp + 0x24]",
            "inc esi",
            "movsxd rax, esi",
            "mov dword [rsp + 0x44], esi",
            "mov rdx, qword [rbx + rax*8]",
            "mov eax, dword [rbx + rax*4 + 0x40]",
            "test rdx, rdx",
            "mov qword [rsp + 0x30], rdx",
            "mov dword [rsp + 0x3c], eax",
            "jne 0x405edd",
            "call fcn.0040291d",
            "dec eax",
            "jne 0x406384",
            "xor edx, edx",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00403b70",
            "test rax, rax",
            "mov qword [rsp + 0x90], rax",
            "jne 0x405e1a",
            "lea rcx, str.balance_level",
            "mov edx, 0x2a6",
            "lea rsi, str.ctree.c",
            "lea rdi, str.___child_",
            "jmp 0x4055a4",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x90]",
            "xor r8d, r8d",
            "mov rcx, r12",
            "mov rdx, rax",
            "mov rsi, rbp",
            "call fcn.004038a7",
            "test eax, eax",
            "je 0x405e5b",
            "lea rcx, str.balance_level",
            "mov edx, 0x2a8",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__ret_",
            "jmp 0x4055a4",
            "mov rax, qword [rsp + 0x90]",
            "mov rdi, rbp",
            "mov qword [rbp], rax",
            "call fcn.00402e5f",
            "movsxd rax, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x28]",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov qword [rbx + rax*8], 0",
            "call fcn.0040813e",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00408146",
            "mov rdi, r12",
            "call fcn.00412164",
            "movzx eax, byte [rsp + 0x5a]",
            "mov ecx, dword [r12 + 0x40]",
            "xor r8d, r8d",
            "mov rdx, qword [r12 + 0x30]",
            "mov rdi, qword [rsp + 0x28]",
            "mov rsi, rbp",
            "mov qword [rsp + 8], 1",
            "mov qword [rsp], rax",
            "mov r9, qword [rbp + 0x1c7]",
            "call sym.btrfs_free_extent",
            "mov rdi, r12",
            "mov r15d, eax",
            "jmp 0x406376",
            "call fcn.0040291d",
            "mov esi, eax",
            "mov eax, dword [rbp + 0x1f4]",
            "xor edx, edx",
            "mov ecx, 0x84",
            "sub rax, 0x65",
            "div rcx",
            "cmp rsi, rax",
            "ja 0x406384",
            "mov r8d, dword [rsp + 0x3c]",
            "mov rsi, qword [rsp + 0x30]",
            "mov rdi, rbp",
            "dec r8d",
            "mov edx, r8d",
            "mov dword [rsp + 0x18], r8d",
            "call fcn.00403b70",
            "test rax, rax",
            "mov qword [rsp + 0x88], rax",
            "mov r8d, dword [rsp + 0x18]",
            "jne 0x405f57",
            "mov r14d, dword [rsp + 0x3c]",
            "mov rsi, qword [rsp + 0x30]",
            "mov rdi, rbp",
            "inc r14d",
            "mov edx, r14d",
            "call fcn.00403b70",
            "test rax, rax",
            "mov qword [rsp + 0x80], rax",
            "jne 0x405f93",
            "jmp 0x405f81",
            "mov rcx, qword [rsp + 0x30]",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x88]",
            "mov rdx, rax",
            "mov rsi, rbp",
            "call fcn.004038a7",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x406357",
            "jmp 0x405f30",
            "mov rdi, qword [rsp + 0x88]",
            "xor r13d, r13d",
            "test rdi, rdi",
            "je 0x405ff9",
            "jmp 0x405fc0",
            "mov rcx, qword [rsp + 0x30]",
            "mov rdi, qword [rsp + 0x28]",
            "lea r9, [rsp + 0x80]",
            "mov r8d, r14d",
            "mov rdx, rax",
            "mov rsi, rbp",
            "call fcn.004038a7",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x406357",
            "jmp 0x405f81",
            "call fcn.0040291d",
            "mov rdx, qword [rsp + 0x88]",
            "mov rdi, qword [rsp + 0x28]",
            "lea rsi, [rbp + 0x1f4]",
            "mov r8d, 1",
            "mov rcx, r12",
            "add dword [rsp + 0x38], eax",
            "call fcn.004029ca",
            "mov r13d, eax",
            "test eax, eax",
            "mov eax, 0",
            "cmovns r13d, eax",
            "mov rcx, qword [rsp + 0x80]",
            "test rcx, rcx",
            "je 0x40611f",
            "mov rdi, qword [rsp + 0x28]",
            "lea rsi, [rbp + 0x1f4]",
            "mov r8d, 1",
            "mov rdx, r12",
            "call fcn.004029ca",
            "cmp eax, 0xffffffe4",
            "je 0x406032",
            "mov ecx, eax",
            "shr ecx, 0x1f",
            "cmovne r13d, eax",
            "mov rdi, qword [rsp + 0x80]",
            "call fcn.0040291d",
            "test eax, eax",
            "mov rdi, qword [rsp + 0x80]",
            "jne 0x4060f1",
            "mov rdx, qword [rdi + 0x30]",
            "mov r15d, dword [rdi + 0x40]",
            "mov rsi, rbp",
            "mov qword [rsp + 0x68], rdx",
            "mov rdx, rdi",
            "mov rdi, qword [rsp + 0x28]",
            "call fcn.0040813e",
            "mov rsi, qword [rsp + 0x80]",
            "mov rdi, rbp",
            "call fcn.00408146",
            "mov rdi, qword [rsp + 0x80]",
            "call fcn.00412164",
            "mov ecx, dword [rsp + 0x44]",
            "mov rdi, qword [rsp + 0x28]",
            "mov r8d, r14d",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov qword [rsp + 0x80], 0",
            "call fcn.00405399",
            "test eax, eax",
            "mov r14d, eax",
            "movzx eax, byte [rsp + 0x5a]",
            "mov qword [rsp + 8], 0",
            "mov rdx, qword [rsp + 0x68]",
            "cmove r14d, r13d",
            "mov rdi, qword [rsp + 0x28]",
            "xor r8d, r8d",
            "mov rcx, r15",
            "mov rsi, rbp",
            "mov qword [rsp], rax",
            "mov r9, qword [rbp + 0x1c7]",
            "call sym.btrfs_free_extent",
            "mov r13d, eax",
            "test eax, eax",
            "cmove r13d, r14d",
            "jmp 0x40611f",
            "lea rsi, [rsp + 0x9f]",
            "xor edx, edx",
            "call fcn.004028a7",
            "mov rdi, qword [rsp + 0x30]",
            "lea rsi, [rsp + 0x9f]",
            "mov edx, r14d",
            "call fcn.004028eb",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00408149",
            "mov rdi, r12",
            "call fcn.0040291d",
            "dec eax",
            "jne 0x4061ca",
            "mov rcx, qword [rsp + 0x88]",
            "test rcx, rcx",
            "jne 0x40615b",
            "lea rcx, str.balance_level",
            "mov edx, 0x302",
            "lea rsi, str.ctree.c",
            "lea rdi, str.___left_",
            "jmp 0x4055a4",
            "lea r14, [rbp + 0x1f4]",
            "mov rdi, qword [rsp + 0x28]",
            "mov rdx, r12",
            "mov rsi, r14",
            "call fcn.00402b4d",
            "test eax, eax",
            "mov r15d, eax",
            "js 0x406357",
            "dec r15d",
            "jne 0x4061ca",
            "mov rdx, qword [rsp + 0x88]",
            "mov rdi, qword [rsp + 0x28]",
            "mov r8d, 1",
            "mov rcx, r12",
            "mov rsi, r14",
            "call fcn.004029ca",
            "test eax, eax",
            "js 0x4061c7",
            "dec eax",
            "jne 0x4061ca",
            "lea rcx, str.balance_level",
            "mov edx, 0x30d",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__wret__1_",
            "jmp 0x4055a4",
            "mov r13d, eax",
            "mov rdi, r12",
            "call fcn.0040291d",
            "test eax, eax",
            "jne 0x40626d",
            "mov rdx, qword [r12 + 0x30]",
            "mov rdi, qword [rsp + 0x28]",
            "mov rsi, rbp",
            "mov r15d, dword [r12 + 0x40]",
            "mov qword [rsp + 0x30], rdx",
            "mov rdx, r12",
            "call fcn.0040813e",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00408146",
            "mov rdi, r12",
            "call fcn.00412164",
            "mov r8d, dword [rsp + 0x3c]",
            "mov ecx, dword [rsp + 0x44]",
            "mov rdx, rbx",
            "mov rdi, qword [rsp + 0x28]",
            "mov rsi, rbp",
            "call fcn.00405399",
            "test eax, eax",
            "mov r14d, eax",
            "movzx eax, byte [rsp + 0x5a]",
            "mov qword [rsp + 8], 0",
            "mov rdx, qword [rsp + 0x30]",
            "cmove r14d, r13d",
            "mov rdi, qword [rsp + 0x28]",
            "mov rcx, r15",
            "xor r8d, r8d",
            "mov rsi, rbp",
            "xor r12d, r12d",
            "mov qword [rsp], rax",
            "mov r9, qword [rbp + 0x1c7]",
            "call sym.btrfs_free_extent",
            "mov r15d, eax",
            "test eax, eax",
            "cmove r15d, r14d",
            "jmp 0x4062a2",
            "lea rsi, [rsp + 0x9f]",
            "xor edx, edx",
            "mov rdi, r12",
            "mov r15d, r13d",
            "call fcn.004028a7",
            "mov edx, dword [rsp + 0x3c]",
            "mov rdi, qword [rsp + 0x30]",
            "lea rsi, [rsp + 0x9f]",
            "call fcn.004028eb",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x88]",
            "test rdi, rdi",
            "je 0x4062ff",
            "call fcn.0040291d",
            "cmp eax, dword [rsp + 0x38]",
            "movsxd r13, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x88]",
            "jbe 0x4062ef",
            "movsxd rax, dword [rsp + 0x44]",
            "mov ecx, dword [rsp + 0x38]",
            "inc dword [rdi + 0x70]",
            "mov qword [rbx + r13*8], rdi",
            "dec dword [rbx + rax*4 + 0x40]",
            "test r12, r12",
            "mov dword [rbx + r13*4 + 0x40], ecx",
            "je 0x4062ff",
            "mov rdi, r12",
            "call fcn.00412164",
            "jmp 0x4062ff",
            "call fcn.0040291d",
            "mov esi, dword [rsp + 0x38]",
            "sub esi, eax",
            "mov dword [rbx + r13*4 + 0x40], esi",
            "test byte [rbx + 0x88], 0x10",
            "jne 0x406317",
            "mov edx, dword [rsp + 0x24]",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00404fa4",
            "movsxd rax, dword [rsp + 0x24]",
            "mov rcx, qword [rsp + 0x60]",
            "movsxd rdx, dword [rbx + rax*4 + 0x40]",
            "mov rax, qword [rbx + rax*8]",
            "imul rdx, rdx, 0x21",
            "cmp rcx, qword [rax + rdx + 0xf2]",
            "je 0x406357",
            "lea rcx, str.balance_level",
            "mov edx, 0x339",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x4055a4",
            "mov rdi, qword [rsp + 0x80]",
            "test rdi, rdi",
            "je 0x406369",
            "call fcn.00412164",
            "mov rdi, qword [rsp + 0x88]",
            "test rdi, rdi",
            "je 0x40637b",
            "call fcn.00412164",
            "test r15d, r15d",
            "jne 0x4064ab",
            "movsxd rax, dword [rsp + 0x24]",
            "mov rdi, qword [rbx + rax*8]",
            "test rdi, rdi",
            "mov qword [rsp + 0x78], rdi",
            "jne 0x4063a4",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "jmp 0x4055a9",
            "mov r15d, dword [rbx + rax*4 + 0x40]",
            "call fcn.0040291d",
            "dec eax",
            "jne 0x4063d1",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x44f",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_nritems_b___1_",
            "jmp 0x4055a4",
            "movzx eax, byte [rsp + 0x50]",
            "cmp dword [rsp + 0x24], eax",
            "jne 0x4063e7",
            "mov r15d, 1",
            "jmp 0x4064ab",
            "cmp dword [rsp + 0x5c], 0",
            "je 0x406408",
            "mov rdx, qword [rsp + 0x48]",
            "mov ecx, r15d",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov r8, qword [rdx]",
            "mov edx, dword [rsp + 0x24]",
            "call fcn.00403be0",
            "mov rsi, qword [rsp + 0x78]",
            "mov edx, r15d",
            "mov rdi, rbp",
            "call fcn.00403b70",
            "mov rdi, rax",
            "mov qword [rsp + 0x78], rax",
            "call fcn.004129c6",
            "test eax, eax",
            "jne 0x40648c",
            "jmp 0x4064a5",
            "mov rsi, qword [rsp + 0x78]",
            "mov rdi, rbp",
            "mov r15d, r12d",
            "call fcn.00403f1a",
            "cmp dword [rsp + 0x40], eax",
            "jle 0x4064ab",
            "mov r8d, dword [rsp + 0x40]",
            "mov rdx, qword [rsp + 0x48]",
            "mov r9d, r12d",
            "mov rdi, qword [rsp + 0x28]",
            "xor r9d, 1",
            "mov rcx, rbx",
            "mov rsi, rbp",
            "call fcn.004046d9",
            "cmp eax, 0",
            "jle 0x406486",
            "lea rcx, str.btrfs_search_slot",
            "mov edx, 0x462",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__sret___0_",
            "jmp 0x4055a4",
            "cmovne r15d, eax",
            "jmp 0x4064ab",
            "mov rdx, qword [rsp + 0x78]",
            "test rdx, rdx",
            "jne 0x4055ba",
            "jmp 0x4063dc",
            "or r15d, 0xffffffff",
            "jmp 0x4064ab",
            "mov r15d, 0xfffffffb",
            "add rsp, 0xb8",
            "mov eax, r15d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040c886": {
        "function_address": "0x0040c886",
        "instructions": [
            "push r15",
            "mov r15, rdx",
            "push r14",
            "mov r14, r8",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x38",
            "mov rax, qword [rsi + 0x1d8]",
            "mov rdi, qword [rax + 0x1a8]",
            "mov dword [rsp + 8], ecx",
            "call fcn.00409eb0",
            "mov r12, rax",
            "and r12d, 0x100",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "movsxd rcx, dword [rsp + 8]",
            "je 0x40ca95",
            "test r12, r12",
            "mov dword [rax + 0x80], 1",
            "mov qword [rsp + 0x1f], r15",
            "je 0x40c8fd",
            "mov qword [rsp + 0x28], rcx",
            "mov byte [rsp + 0x27], 0xa9",
            "mov r10d, 1",
            "jmp 0x40c910",
            "mov eax, dword [rbp + 0x1f8]",
            "mov byte [rsp + 0x27], 0xa8",
            "xor r10d, r10d",
            "mov qword [rsp + 0x28], rax",
            "mov rax, qword [rbp + 0x1d8]",
            "lea rdx, [rsp + 0x1f]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov rcx, rbx",
            "mov rdi, r13",
            "mov rsi, qword [rax + 0x28]",
            "mov dword [rsp + 8], r10d",
            "call fcn.0040551b",
            "test eax, eax",
            "mov r12d, eax",
            "mov r10d, dword [rsp + 8]",
            "js 0x40ca65",
            "test r10d, r10d",
            "je 0x40c995",
            "test eax, eax",
            "jle 0x40c995",
            "mov edx, dword [rbx + 0x40]",
            "test edx, edx",
            "je 0x40ca9d",
            "mov rdi, qword [rbx]",
            "dec edx",
            "lea rsi, [rsp + 0x1f]",
            "mov dword [rbx + 0x40], edx",
            "call fcn.00409e65",
            "cmp qword [rsp + 0x1f], r15",
            "jne 0x40ca9d",
            "mov eax, dword [rbp + 0x1f8]",
            "cmp qword [rsp + 0x28], rax",
            "jne 0x40ca9d",
            "cmp byte [rsp + 0x27], 0xa8",
            "jne 0x40ca9d",
            "jmp 0x40c9e1",
            "test r12d, r12d",
            "je 0x40c9e1",
            "mov rsi, qword [rbx]",
            "mov rdi, rbp",
            "call fcn.0040f1cb",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_find_block_number__Lu_n",
            "mov rcx, r15",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.btrfs_set_block_flags",
            "mov edx, 0x657",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x40ca49",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rax, qword [rbx]",
            "xor r12d, r12d",
            "imul rdx, rdx, 0x19",
            "cmp dword [rax + rdx + 0xf6], 0x17",
            "ja 0x40ca4e",
            "mov rax, qword [rbp + 0x1d8]",
            "or rcx, 0xffffffffffffffff",
            "mov rdx, rbx",
            "mov rdi, r13",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040a0bf",
            "test eax, eax",
            "mov r12d, eax",
            "js 0x40ca65",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rax, qword [rbx]",
            "imul rdx, rdx, 0x19",
            "cmp dword [rax + rdx + 0xf6], 0x17",
            "ja 0x40ca4e",
            "lea rcx, str.btrfs_set_block_flags",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__item_size___sizeof_item__",
            "mov edx, 0x666",
            "call sym.imp.__assert_fail",
            "movsxd rdx, dword [rbx + 0x40]",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rax + rdx + 0xf2]",
            "or qword [rax + rdx + 0xf1], r14",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "mov rax, qword [rbp + 0x1d8]",
            "mov rdi, r13",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040af4b",
            "mov rax, qword [rbp + 0x1d8]",
            "mov rdi, r13",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040bd20",
            "jmp 0x40caaa",
            "mov r12d, 0xfffffff4",
            "jmp 0x40caaa",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "jmp 0x40c8fd",
            "add rsp, 0x38",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040f1cb": {
        "function_address": "0x0040f1cb",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x1a8",
            "mov ecx, dword [rsi + 0xdc]",
            "mov r9, qword [rsi + 0xcc]",
            "mov rbp, qword [rsi + 0xd4]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x198], rax",
            "xor eax, eax",
            "mov dword [rsp + 0x48], ecx",
            "mov qword [rsp + 0x50], r9",
            "mov qword [rsp + 0x28], r9",
            "call fcn.00403f1a",
            "mov rdx, qword [rbx + 0xac]",
            "mov r9, qword [rsp + 0x28]",
            "lea rsi, str.leaf__llu_items__d_free_space__d_generation__llu_owner__llu_n",
            "mov ecx, dword [rsp + 0x48]",
            "mov r8d, eax",
            "mov qword [rsp], rbp",
            "mov edi, 1",
            "xor eax, eax",
            "lea rbp, [rsp + 0x99]",
            "mov qword [rsp + 0x50], rdx",
            "call sym.imp.__printf_chk",
            "mov rdi, rbx",
            "call fcn.0040e5f1",
            "mov rax, qword [reloc.stdout]",
            "mov rdi, qword [rax]",
            "call sym.imp.fflush",
            "mov qword [rsp + 0x38], 0",
            "jmp 0x40fc7c",
            "imul r15, qword [rsp + 0x38], 0x19",
            "lea rsi, [rsp + 0x5f]",
            "mov ecx, 0x11",
            "mov rdi, rbx",
            "lea rdx, [r15 + 0x65]",
            "lea r15, [rbx + r15 + 0xe1]",
            "call fcn.00412a4b",
            "mov r13, qword [rsp + 0x5f]",
            "mov edx, dword [rsp + 0x38]",
            "lea rsi, str._titem__d",
            "mov edi, 1",
            "xor eax, eax",
            "mov r14b, byte [rsp + 0x67]",
            "mov qword [rsp + 0x50], r13",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x5f]",
            "call fcn.0040e694",
            "mov ecx, dword [r15 + 0x15]",
            "mov edx, dword [r15 + 0x11]",
            "lea rsi, str._itemoff__d_itemsize__d_n",
            "xor eax, eax",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "cmp r13, 0xfffffffffffffff5",
            "jne 0x40f357",
            "test r14b, r14b",
            "jne 0x40f357",
            "mov r13d, dword [r15 + 0x11]",
            "lea rsi, [rsp + 0x70]",
            "mov ecx, 0x11",
            "mov rdi, rbx",
            "lea rdx, [r13 + 0x65]",
            "call fcn.00412a4b",
            "lea rsi, str._t_tlocation",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x70]",
            "call fcn.0040e694",
            "mov edi, 0xa",
            "call sym.imp.putchar",
            "lea rax, [rbx + r13 + 0xe1]",
            "lea rsi, str._t_tcache_generation__llu_entries__llu_bitmaps__llu_n",
            "mov edi, 1",
            "mov rcx, qword [rax + 0x19]",
            "mov rdx, qword [rax + 0x11]",
            "mov r8, qword [rax + 0x21]",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "cmp r14b, 0xa9",
            "je 0x40f873",
            "ja 0x40f427",
            "cmp r14b, 0x54",
            "je 0x40f63e",
            "ja 0x40f3c4",
            "cmp r14b, 0x18",
            "je 0x40f63e",
            "ja 0x40f3a1",
            "cmp r14b, 0xc",
            "je 0x40f523",
            "cmp r14b, 0xd",
            "je 0x40f5a9",
            "dec r14b",
            "jne 0x40fc68",
            "jmp 0x40f4e2",
            "cmp r14b, 0x3c",
            "je 0x40f81b",
            "cmp r14b, 0x48",
            "je 0x40f81b",
            "cmp r14b, 0x30",
            "jne 0x40fc68",
            "jmp 0x40f833",
            "cmp r14b, 0x80",
            "je 0x40f91f",
            "ja 0x40f3f3",
            "cmp r14b, 0x6c",
            "je 0x40f92b",
            "cmp r14b, 0x78",
            "je 0x40f913",
            "cmp r14b, 0x60",
            "jne 0x40fc68",
            "jmp 0x40f63e",
            "cmp r14b, 0x90",
            "je 0x40f858",
            "ja 0x40f40e",
            "cmp r14b, 0x84",
            "jne 0x40fc68",
            "jmp 0x40f83f",
            "cmp r14b, 0x9c",
            "je 0x40f84f",
            "cmp r14b, 0xa8",
            "jne 0x40fc68",
            "jmp 0x40f86f",
            "cmp r14b, 0xd8",
            "je 0x40fade",
            "ja 0x40f485",
            "cmp r14b, 0xb6",
            "je 0x40f894",
            "ja 0x40f462",
            "cmp r14b, 0xb2",
            "je 0x40f8a0",
            "cmp r14b, 0xb4",
            "je 0x40f8eb",
            "cmp r14b, 0xb0",
            "jne 0x40fc68",
            "jmp 0x40f888",
            "cmp r14b, 0xc0",
            "je 0x40fa1f",
            "cmp r14b, 0xcc",
            "je 0x40fb0e",
            "cmp r14b, 0xb8",
            "jne 0x40fc68",
            "jmp 0x40f8d4",
            "cmp r14b, 0xf4",
            "je 0x40fb94",
            "ja 0x40f4b4",
            "cmp r14b, 0xf0",
            "je 0x40fb42",
            "cmp r14b, 0xf2",
            "je 0x40fb67",
            "cmp r14b, 0xe4",
            "jne 0x40fc68",
            "jmp 0x40fa65",
            "cmp r14b, 0xfc",
            "ja 0x40f4d3",
            "cmp r14b, 0xfb",
            "jae 0x40fbd0",
            "cmp r14b, 0xf9",
            "jne 0x40fc68",
            "jmp 0x40fc5c",
            "cmp r14b, 0xfd",
            "jne 0x40fc68",
            "jmp 0x40fc37",
            "mov eax, dword [r15 + 0x11]",
            "mov edi, 1",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov esi, dword [rdx + 0x34]",
            "mov r9, qword [rdx + 0x2c]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rcx, qword [rdx + 0x14]",
            "mov dword [rsp + 8], esi",
            "mov eax, dword [rdx + 0x40]",
            "lea rsi, str._t_tinode_generation__llu_transid__llu_size__llu_block_group__llu_mode__o_links__u_n",
            "mov dword [rsp], eax",
            "mov rdx, qword [rdx + 0xc]",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov r10d, dword [r15 + 0x11]",
            "mov r15d, dword [r15 + 0x15]",
            "mov dword [rsp + 0x34], r15d",
            "xor r15d, r15d",
            "lea r13, [r10 + 0x65]",
            "jmp 0x40f59d",
            "lea rax, [r13 + rbx + 0x70]",
            "mov r8d, 0xff",
            "lea rdx, [r13 + 0xa]",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "movzx r12d, word [rax + 0x14]",
            "mov r14, qword [rax + 0xc]",
            "cmp r12d, 0xff",
            "cmovbe r8d, r12d",
            "mov ecx, r8d",
            "mov dword [rsp + 0x28], r8d",
            "call fcn.00412a4b",
            "mov r8d, dword [rsp + 0x28]",
            "lea rsi, str._t_tinode_ref_index__llu_namelen__u_name:__.s_n",
            "mov ecx, r12d",
            "mov r9, rbp",
            "add r12d, 0xa",
            "mov rdx, r14",
            "mov edi, 1",
            "xor eax, eax",
            "add r15d, r12d",
            "call sym.imp.__printf_chk",
            "mov eax, r12d",
            "add r13, rax",
            "cmp r15d, dword [rsp + 0x34]",
            "jb 0x40f539",
            "jmp 0x40fc68",
            "mov r10d, dword [r15 + 0x11]",
            "mov r15d, dword [r15 + 0x15]",
            "xor r13d, r13d",
            "mov dword [rsp + 0x34], r15d",
            "lea r14, [r10 + 0x65]",
            "jmp 0x40f632",
            "lea rax, [r14 + rbx + 0x70]",
            "mov r9d, 0xff",
            "lea rdx, [r14 + 0x12]",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "movzx r12d, word [rax + 0x1c]",
            "mov rcx, qword [rax + 0x14]",
            "mov r15, qword [rax + 0xc]",
            "mov qword [rsp + 0x40], rcx",
            "cmp r12d, 0xff",
            "cmovbe r9d, r12d",
            "mov ecx, r9d",
            "mov dword [rsp + 0x28], r9d",
            "call fcn.00412a4b",
            "mov r9d, dword [rsp + 0x28]",
            "mov rdx, qword [rsp + 0x40]",
            "lea rsi, str._t_tinode_extref_index__llu_parent__llu_namelen__u_name:__.s_n",
            "mov r8d, r12d",
            "mov qword [rsp], rbp",
            "add r12d, 0x12",
            "mov rcx, r15",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov eax, r12d",
            "add r13d, r12d",
            "add r14, rax",
            "cmp r13d, dword [rsp + 0x34]",
            "jb 0x40f5bf",
            "jmp 0x40fc68",
            "mov r12d, dword [r15 + 0x11]",
            "mov r15d, dword [r15 + 0x15]",
            "mov dword [rsp + 0x34], 0",
            "mov dword [rsp + 0x4c], r15d",
            "lea r15, [0x0041f080]",
            "add r12, 0x65",
            "jmp 0x40f808",
            "lea rsi, [rsp + 0x70]",
            "mov rdx, r12",
            "mov ecx, 0x11",
            "mov rdi, rbx",
            "lea r13, [r12 + rbx + 0x7c]",
            "call fcn.00412a4b",
            "lea rsi, str._t_tlocation",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x70]",
            "call fcn.0040e694",
            "lea rsi, str._type",
            "xor eax, eax",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [r13 + 0x1d]",
            "lea eax, [rdx - 1]",
            "cmp al, 7",
            "ja case.default.0x40f6c3",
            "movzx eax, al",
            "movsxd rax, dword [r15 + rax*4]",
            "add rax, r15",
            "jmp rax",
            "lea rsi, str.FILE",
            "jmp 0x40f6d5",
            "lea rsi, [0x0041e56c]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40f72c",
            "lea rsi, str.CHRDEV",
            "jmp 0x40f6d5",
            "lea rsi, str.BLKDEV",
            "jmp 0x40f6d5",
            "lea rsi, str.FIFO",
            "jmp 0x40f6d5",
            "lea rsi, str.SOCK",
            "jmp 0x40f6d5",
            "lea rsi, str.SYMLINK",
            "jmp 0x40f6d5",
            "lea rsi, str.XATTR",
            "jmp 0x40f6d5",
            "lea rsi, [0x0041eb9d]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov edi, 0xa",
            "call sym.imp.putchar",
            "mov r10w, word [r13 + 0x1b]",
            "mov r11d, 0xff",
            "lea rax, [r12 + 0x1e]",
            "mov r8d, r11d",
            "movzx r13d, word [r13 + 0x19]",
            "mov rsi, rbp",
            "mov rdx, rax",
            "mov rdi, rbx",
            "mov dword [rsp + 0x18], r11d",
            "movzx r14d, r10w",
            "mov dword [rsp + 0x20], r10d",
            "mov qword [rsp + 0x40], rax",
            "cmp r14d, 0xff",
            "cmovbe r8d, r14d",
            "mov ecx, r8d",
            "mov dword [rsp + 0x28], r8d",
            "call fcn.00412a4b",
            "mov r8d, dword [rsp + 0x28]",
            "lea rsi, str._t_tnamelen__u_datalen__u_name:__.s_n",
            "xor eax, eax",
            "mov r9, rbp",
            "mov ecx, r13d",
            "mov edx, r14d",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "test r13d, r13d",
            "mov r10d, dword [rsp + 0x20]",
            "mov r11d, dword [rsp + 0x18]",
            "je 0x40f7fa",
            "mov rdx, qword [rsp + 0x40]",
            "cmp r13d, 0xff",
            "movzx r10d, r10w",
            "cmovbe r11d, r13d",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "mov ecx, r11d",
            "mov dword [rsp + 0x18], r11d",
            "add rdx, r10",
            "call fcn.00412a4b",
            "mov r11d, dword [rsp + 0x18]",
            "lea rsi, str._t_tdata__.s_n",
            "mov rcx, rbp",
            "mov edi, 1",
            "xor eax, eax",
            "mov edx, r11d",
            "call sym.imp.__printf_chk",
            "lea eax, [r14 + r13 + 0x1e]",
            "add dword [rsp + 0x34], eax",
            "mov edx, eax",
            "add r12, rdx",
            "mov ecx, dword [rsp + 0x4c]",
            "cmp dword [rsp + 0x34], ecx",
            "jb 0x40f663",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tdir_log_end__Lu_n",
            "mov rdx, qword [rbx + rax + 0xe1]",
            "jmp 0x40fbef",
            "lea rdi, str._t_torphan_item",
            "jmp 0x40fc63",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.0040ed3f",
            "jmp 0x40fc68",
            "lea rdx, [0x0041ec1a]",
            "jmp 0x40f85f",
            "lea rdx, [0x0041ec16]",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.0040e550",
            "jmp 0x40fc68",
            "xor edx, edx",
            "jmp 0x40f878",
            "mov edx, 1",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call fcn.0040ef59",
            "jmp 0x40fc68",
            "lea rdi, str._t_ttree_block_backref",
            "jmp 0x40fc63",
            "lea rdi, str._t_tshared_block_backref",
            "jmp 0x40fc63",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_textent_data_backref_root__llu_objectid__llu_offset__llu_count__u_n",
            "mov edi, 1",
            "lea rdx, [rbx + rax + 0xd5]",
            "xor eax, eax",
            "mov rcx, qword [rdx + 0x14]",
            "mov r9d, dword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rdx, qword [rdx + 0xc]",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tshared_data_backref_count__u_n",
            "mov edx, dword [rbx + rax + 0xe1]",
            "jmp 0x40fa0e",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_textent_back_ref_root__llu_gen__llu_owner__llu_num_refs__lu_n",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov rcx, qword [rdx + 0x14]",
            "mov r9d, dword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rdx, qword [rdx + 0xc]",
            "jmp 0x40fb31",
            "lea rdi, str._t_tcsum_item",
            "jmp 0x40fc63",
            "lea rdi, str._t_textent_csum_item",
            "jmp 0x40fc63",
            "mov eax, dword [r15 + 0x11]",
            "lea r12, [rbx + rax + 0xe1]",
            "movzx eax, byte [r12 + 0x14]",
            "test eax, eax",
            "jne 0x40f988",
            "mov al, byte [r12 + 0x10]",
            "mov edx, dword [r15 + 0x15]",
            "test al, al",
            "movzx r8d, al",
            "jne 0x40f968",
            "cmp byte [r12 + 0x11], 0",
            "jne 0x40f968",
            "cmp word [r12 + 0x12], 0",
            "jne 0x40f968",
            "lea ecx, [rdx - 0x15]",
            "jmp 0x40f96d",
            "mov ecx, dword [r12 + 8]",
            "lea rsi, str._t_tinline_extent_data_size__u_ram__u_compress__d_n",
            "sub edx, 0x15",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "cmp eax, 2",
            "mov rcx, qword [r12 + 0x1d]",
            "mov rdx, qword [r12 + 0x15]",
            "jne 0x40f9cc",
            "lea rsi, str._t_tprealloc_data_disk_byte__llu_nr__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rcx, qword [r12 + 0x2d]",
            "mov rdx, qword [r12 + 0x25]",
            "lea rsi, str._t_tprealloc_data_offset__llu_nr__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "lea rsi, str._t_textent_data_disk_byte__llu_nr__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [r12 + 0x25]",
            "mov rcx, qword [r12 + 0x2d]",
            "lea rsi, str._t_textent_data_offset__llu_nr__llu_ram__llu_n",
            "mov r8, qword [r12 + 8]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "movzx edx, byte [r12 + 0x10]",
            "lea rsi, str._t_textent_compression__d_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov edx, dword [r15 + 0x11]",
            "lea rsi, [rsp + 0x81]",
            "mov ecx, 0x18",
            "mov rdi, rbx",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov rdx, qword [rsp + 0x81]",
            "mov rcx, qword [rsp + 0x89]",
            "lea rsi, str._t_tblock_group_used__llu_chunk_objectid__llu_flags__llu_n",
            "mov r8, qword [rsp + 0x91]",
            "mov qword [rsp + 0x50], rdx",
            "jmp 0x40fafd",
            "mov r13d, dword [r15 + 0x11]",
            "lea rsi, str._t_tchunk_length__llu_owner__llu_type__llu_num_stripes__d_n",
            "mov edi, 1",
            "xor eax, eax",
            "xor r14d, r14d",
            "lea rdx, [rbx + r13 + 0xd5]",
            "add r13, 0x95",
            "movzx r12d, word [rdx + 0x38]",
            "mov rcx, qword [rdx + 0x14]",
            "mov r8, qword [rdx + 0x24]",
            "mov rdx, qword [rdx + 0xc]",
            "mov r9d, r12d",
            "call sym.imp.__printf_chk",
            "jmp 0x40fad4",
            "mov rax, r14",
            "lea rsi, str._t_t_tstripe__d_devid__llu_offset__llu_n",
            "mov edx, r14d",
            "shl rax, 5",
            "mov edi, 1",
            "inc r14",
            "lea rax, [rax + r13 + 0x70]",
            "add rax, rbx",
            "mov r8, qword [rax + 0x14]",
            "mov rcx, qword [rax + 0xc]",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "cmp r12d, r14d",
            "jg 0x40faa4",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tdev_item_devid__llu_total_bytes__llu_bytes_used__Lu_n",
            "lea rax, [rbx + rax + 0xd5]",
            "mov rcx, qword [rax + 0x14]",
            "mov r8, qword [rax + 0x1c]",
            "mov rdx, qword [rax + 0xc]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tdev_extent_chunk_tree__llu_n_t_tchunk_objectid__llu_chunk_offset__llu_length__llu_n",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov rcx, qword [rdx + 0x14]",
            "mov r9, qword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rdx, qword [rdx + 0xc]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tversion__llu_generation__llu_flags__llx_scan__lld_n",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov rcx, qword [rdx + 0x14]",
            "mov r9, qword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rdx, qword [rdx + 0xc]",
            "jmp 0x40fb31",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tgeneration__llu_n_t_treferenced__lld_referenced_compressed__lld_n_t_texclusive__lld_exclusive_compressed__lld_n",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov rax, qword [rdx + 0x2c]",
            "mov r9, qword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rcx, qword [rdx + 0x14]",
            "mov qword [rsp], rax",
            "mov rdx, qword [rdx + 0xc]",
            "jmp 0x40fbbf",
            "mov eax, dword [r15 + 0x11]",
            "lea rsi, str._t_tflags__llx_n_t_tmax_referenced__lld_max_exclusive__lld_n_t_trsv_referenced__lld_rsv_exclusive__lld_n",
            "lea rdx, [rbx + rax + 0xd5]",
            "mov rax, qword [rdx + 0x2c]",
            "mov r9, qword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rcx, qword [rdx + 0x14]",
            "mov qword [rsp], rax",
            "mov rdx, qword [rdx + 0xc]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "mov r13d, dword [r15 + 0x11]",
            "mov r14d, dword [r15 + 0x15]",
            "xor r12d, r12d",
            "add r13, 0x65",
            "test r14b, 7",
            "je 0x40fc2b",
            "lea rsi, str.btrfs:_uuid_item_with_illegal_size__lu__n",
            "mov edx, r14d",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "lea rsi, [rsp + 0x50]",
            "mov ecx, 8",
            "mov rdi, rbx",
            "add r12, 8",
            "call fcn.00412a4b",
            "mov rdx, qword [rsp + 0x50]",
            "lea rsi, str._t_tsubvol_id__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "cmp r14d, r12d",
            "lea rdx, [r13 + r12]",
            "jne 0x40fbfd",
            "jmp 0x40fc68",
            "mov eax, dword [r15 + 0x11]",
            "mov edx, dword [r15 + 0x15]",
            "lea rsi, str._t_titem_data__.s_n",
            "mov edi, 1",
            "lea rcx, [rbx + rax + 0xe1]",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40fc68",
            "lea rdi, str._t_tdevice_stats",
            "call sym.imp.puts",
            "mov rax, qword [reloc.stdout]",
            "mov rdi, qword [rax]",
            "call sym.imp.fflush",
            "inc qword [rsp + 0x38]",
            "mov r12d, dword [rsp + 0x38]",
            "cmp dword [rsp + 0x48], r12d",
            "ja 0x40f275",
            "mov rcx, qword [rsp + 0x198]",
            "xor rcx, qword fs:[0x28]",
            "je 0x40fca4",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1a8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040a0bf": {
        "function_address": "0x0040a0bf",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x48",
            "mov rbp, qword [rdx]",
            "mov edx, dword [rdx + 0x40]",
            "movsxd rax, edx",
            "imul rax, rax, 0x19",
            "cmp dword [rbp + rax + 0xf6], 4",
            "je 0x40a103",
            "lea rcx, str.convert_extent_item_v0",
            "mov edx, 0x218",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__btrfs_item_size_nr_leaf__path__slots_0_____sizeof_ei0__",
            "jmp 0x40a17b",
            "mov r13, rsi",
            "lea rsi, [rsp + 0x1e]",
            "mov r14, rdi",
            "mov rdi, rbp",
            "mov r12, rcx",
            "call fcn.00409e65",
            "movsxd rax, dword [rbx + 0x40]",
            "imul rax, rax, 0x19",
            "cmp r12, 0xffffffffffffffff",
            "mov eax, dword [rbp + rax + 0xf2]",
            "mov r15d, dword [rbp + rax + 0xe1]",
            "jne 0x40a1e1",
            "mov r12d, dword [rbx + 0x40]",
            "mov rdi, rbp",
            "call fcn.00409ea9",
            "cmp r12d, eax",
            "jb 0x40a183",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "jl 0x40a2d8",
            "je 0x40a180",
            "lea rcx, str.convert_extent_item_v0",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041dd2c]",
            "mov edx, 0x225",
            "call sym.imp.__assert_fail",
            "mov rbp, qword [rbx]",
            "mov edx, dword [rbx + 0x40]",
            "lea rsi, [rsp + 0x2f]",
            "mov rdi, rbp",
            "call fcn.00409e65",
            "mov rax, qword [rsp + 0x2f]",
            "cmp qword [rsp + 0x1e], rax",
            "je 0x40a1bb",
            "lea rcx, str.convert_extent_item_v0",
            "mov edx, 0x22a",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__key.objectid___found_key.objectid_",
            "jmp 0x40a17b",
            "cmp byte [rsp + 0x37], 0xb4",
            "je 0x40a1ca",
            "inc dword [rbx + 0x40]",
            "jmp 0x40a13a",
            "movsxd rax, dword [rbx + 0x40]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rbp + rax + 0xf2]",
            "mov r12, qword [rbp + rax + 0xf1]",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "cmp r12, 0x100",
            "lea rdx, [rsp + 0x1e]",
            "mov r9d, 1",
            "sbb ebp, ebp",
            "mov rcx, rbx",
            "mov rsi, r13",
            "and ebp, 0x12",
            "mov rdi, r14",
            "add ebp, 0x14",
            "mov r8d, ebp",
            "call fcn.0040551b",
            "cmp eax, 0",
            "jl 0x40a2d8",
            "je 0x40a22d",
            "lea rcx, str.convert_extent_item_v0",
            "mov edx, 0x23e",
            "jmp 0x40a24d",
            "mov ecx, ebp",
            "mov rdx, rbx",
            "mov rsi, r13",
            "mov rdi, r14",
            "call fcn.0040520e",
            "test eax, eax",
            "je 0x40a260",
            "lea rcx, str.convert_extent_item_v0",
            "mov edx, 0x241",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "jmp 0x40a17b",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rbp, qword [rbx]",
            "imul rdx, rdx, 0x19",
            "cmp r12, 0xff",
            "mov ebx, dword [rbp + rdx + 0xf2]",
            "lea rcx, [rbp + rbx + 0xd5]",
            "lea rdx, [rcx + 0xc]",
            "mov qword [rcx + 0xc], r15",
            "mov qword [rdx + 8], 0",
            "ja 0x40a2c0",
            "mov qword [rdx + 0x10], 0x102",
            "lea rdx, [rbx + 0x7d]",
            "mov ecx, 0x12",
            "xor esi, esi",
            "mov rdi, rbp",
            "mov dword [rsp + 8], eax",
            "call fcn.00412a8f",
            "mov byte [rbp + rbx + 0x10a], r12b",
            "mov eax, dword [rsp + 8]",
            "jmp 0x40a2c8",
            "mov qword [rdx + 0x10], 1",
            "mov rdi, rbp",
            "mov dword [rsp + 8], eax",
            "call fcn.00408149",
            "mov eax, dword [rsp + 8]",
            "add rsp, 0x48",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004032ad": {
        "function_address": "0x004032ad",
        "instructions": [
            "push r15",
            "mov r15, rcx",
            "push r14",
            "movsxd r14, r8d",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x58",
            "cmp dword [rsi + 0x200], 0",
            "mov qword [rsp + 0x18], r9",
            "je 0x403332",
            "mov rdx, qword [rsi + 0x1d8]",
            "mov rax, qword [rdi]",
            "mov rdx, qword [rdx + 0x1a0]",
            "cmp rax, qword [rdx]",
            "je 0x40330a",
            "lea rcx, str.__btrfs_cow_block",
            "mov edx, 0x10a",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__root__ref_cows__trans__transid___root__fs_info__running_transaction__transid_",
            "jmp 0x40332d",
            "cmp rax, qword [rsi + 0x1e8]",
            "je 0x403332",
            "lea rcx, str.__btrfs_cow_block",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__root__ref_cows__trans__transid___root__last_trans_",
            "mov edx, 0x10b",
            "call sym.imp.__assert_fail",
            "mov al, byte [rbx + 0xe0]",
            "xor edx, edx",
            "lea rsi, [rsp + 0x3f]",
            "mov rdi, rbx",
            "movzx r12d, al",
            "mov byte [rsp + 0x17], al",
            "test r12d, r12d",
            "jne 0x403356",
            "call fcn.00402862",
            "jmp 0x40335b",
            "call fcn.004028a7",
            "mov rax, qword [rsp + 0x98]",
            "mov rcx, qword [rbp + 0x1c7]",
            "lea r8, [rsp + 0x3f]",
            "mov edx, dword [rbx + 0x40]",
            "mov r9d, r12d",
            "mov rsi, rbp",
            "mov rdi, r13",
            "mov qword [rsp + 8], rax",
            "mov rax, qword [rsp + 0x90]",
            "mov qword [rsp], rax",
            "call fcn.0040dbc2",
            "mov r12, rax",
            "cmp r12, 0xfffffffffffff000",
            "ja 0x403898",
            "mov r8d, dword [r12 + 0x40]",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00412a64",
            "mov rsi, qword [r12 + 0x30]",
            "mov rdi, r12",
            "call fcn.004028bc",
            "mov rsi, qword [r13]",
            "mov rdi, r12",
            "call fcn.004028c4",
            "mov rdi, r12",
            "call fcn.00402dd2",
            "mov rdi, r12",
            "call fcn.00402924",
            "and rax, 0xfffffffffffffffc",
            "mov rdi, r12",
            "mov rsi, rax",
            "call fcn.004028db",
            "mov rsi, qword [rbp + 0x1c7]",
            "mov rdi, r12",
            "cmp rsi, 0xfffffffffffffff8",
            "jne 0x403413",
            "call fcn.00402924",
            "or rax, 2",
            "mov rdi, r12",
            "mov rsi, rax",
            "call fcn.004028db",
            "jmp 0x403418",
            "call fcn.004028cc",
            "mov rsi, qword [rbp + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rdi, r12",
            "call fcn.00412a59",
            "test byte [rbx + 0x75], 4",
            "jne 0x403464",
            "mov rdi, rbx",
            "call fcn.00402915",
            "cmp rax, qword [r13]",
            "jbe 0x403464",
            "lea rcx, str.__btrfs_cow_block",
            "mov edx, 0x129",
            "lea rsi, str.ctree.c",
            "lea rdi, str.____buf__flags___1____10____btrfs_header_generation_buf____trans__transid_",
            "jmp 0x40332d",
            "cmp dword [rbp + 0x200], 0",
            "jne 0x40347c",
            "cmp dword [rbp + 0x200], 0",
            "je 0x403845",
            "jmp 0x4034b6",
            "cmp rbx, qword [rbp]",
            "je 0x40346d",
            "cmp rbx, qword [rbp + 8]",
            "je 0x40346d",
            "mov rdi, rbx",
            "call fcn.00402915",
            "mov rdx, qword [rbp + 0xd8]",
            "cmp rax, rdx",
            "mov qword [rsp + 0x30], rdx",
            "jbe 0x40380e",
            "mov rdi, rbx",
            "call fcn.00402924",
            "test al, 2",
            "je 0x40346d",
            "jmp 0x40380e",
            "mov rdi, rbx",
            "call fcn.00402924",
            "shr rax, 0x38",
            "jne 0x403845",
            "jmp 0x40380e",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xc1",
            "jmp 0x4036b1",
            "cmp qword [rsp + 0x20], 0",
            "jne 0x403527",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xc2",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__refs__0_",
            "jmp 0x40332d",
            "mov rdi, rbx",
            "call fcn.00402924",
            "shr rax, 0x38",
            "jne 0x40351e",
            "mov qword [rsp + 0x28], 0x100",
            "jmp 0x403527",
            "mov qword [rsp + 0x28], 0",
            "mov rdx, qword [rsp + 0x28]",
            "mov rax, qword [rbx + 0xd4]",
            "and edx, 0x100",
            "mov qword [rsp + 0x30], rax",
            "jne 0x403565",
            "cmp rax, 0xfffffffffffffff8",
            "jne 0x403565",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xce",
            "lea rsi, str.ctree.c",
            "lea rdi, str.____flags___1ULL____8____owner___8ULL_",
            "jmp 0x40332d",
            "cmp qword [rsp + 0x20], 1",
            "jbe 0x40365a",
            "mov rcx, qword [rbp + 0x1c7]",
            "cmp rax, rcx",
            "je 0x40358c",
            "cmp rcx, 0xfffffffffffffff8",
            "jne 0x403627",
            "jmp 0x40388a",
            "test rdx, rdx",
            "jne 0x40361a",
            "mov ecx, 1",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cabc",
            "test eax, eax",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xd5",
            "jne 0x4036b1",
            "cmp qword [rbp + 0x1c7], 0xfffffffffffffff8",
            "jne 0x403861",
            "xor ecx, ecx",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cac7",
            "test eax, eax",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xda",
            "jne 0x4036b1",
            "mov ecx, 1",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cabc",
            "test eax, eax",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xdc",
            "jne 0x4036b1",
            "jmp 0x403861",
            "cmp rax, 0xfffffffffffffff8",
            "jne 0x403627",
            "mov ecx, 1",
            "jmp 0x403629",
            "xor ecx, ecx",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cabc",
            "test eax, eax",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xe6",
            "jne 0x4036b1",
            "jmp 0x4036d2",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xec",
            "jmp 0x4036b1",
            "test rdx, rdx",
            "je 0x4036c4",
            "cmp qword [rbp + 0x1c7], 0xfffffffffffffff8",
            "mov ecx, 1",
            "je 0x403670",
            "xor ecx, ecx",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cabc",
            "test eax, eax",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xf5",
            "jne 0x4036b1",
            "mov ecx, 1",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040cac7",
            "test eax, eax",
            "je 0x4036c4",
            "lea rcx, str.update_ref_for_cow",
            "mov edx, 0xf7",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__ret_",
            "jmp 0x40332d",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040813e",
            "cmp rbx, qword [rbp]",
            "jne 0x403724",
            "movzx eax, byte [rsp + 0x17]",
            "mov qword [rbp], r12",
            "xor r8d, r8d",
            "inc dword [r12 + 0x70]",
            "mov qword [rsp + 8], 0",
            "mov rsi, rbp",
            "mov ecx, dword [rbx + 0x40]",
            "mov rdx, qword [rbx + 0x30]",
            "mov rdi, r13",
            "mov qword [rsp], rax",
            "mov r9, qword [rbp + 0x1c7]",
            "call sym.btrfs_free_extent",
            "mov rdi, rbx",
            "call fcn.00412164",
            "mov rdi, rbp",
            "call fcn.00402e5f",
            "jmp 0x4037c7",
            "imul r14, r14, 0x21",
            "mov rdx, qword [r12 + 0x30]",
            "lea rax, [r15 + r14 + 0xe1]",
            "mov qword [rax + 0x11], rdx",
            "mov rdx, qword [r13]",
            "test rdx, rdx",
            "jne 0x403760",
            "lea rcx, str.__btrfs_cow_block",
            "mov dx, 0x138",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__trans__transid__0_",
            "jmp 0x40332d",
            "mov qword [rax + 0x19], rdx",
            "mov rdi, r15",
            "call fcn.00408149",
            "mov rdi, r15",
            "call fcn.00402915",
            "cmp rax, qword [r13]",
            "je 0x403799",
            "lea rcx, str.__btrfs_cow_block",
            "mov edx, 0x13c",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_parent____trans__transid_",
            "jmp 0x40332d",
            "movzx eax, byte [rsp + 0x17]",
            "mov ecx, dword [rbx + 0x40]",
            "xor r8d, r8d",
            "mov qword [rsp + 8], 1",
            "mov rdx, qword [rbx + 0x30]",
            "mov rsi, rbp",
            "mov rdi, r13",
            "mov qword [rsp], rax",
            "mov r9, qword [rbp + 0x1c7]",
            "call sym.btrfs_free_extent",
            "mov rdx, qword [rbx + 0x60]",
            "lea rax, [rbx + 0x60]",
            "cmp rdx, rax",
            "je 0x4037ef",
            "mov rcx, qword [rbx + 0x68]",
            "mov rdi, rbx",
            "mov qword [rdx + 8], rcx",
            "mov qword [rcx], rdx",
            "mov qword [rbx + 0x60], rax",
            "mov qword [rbx + 0x68], rax",
            "call fcn.00412164",
            "mov rdi, rbx",
            "call fcn.00412164",
            "mov rdi, r12",
            "call fcn.00408149",
            "mov rdx, qword [rsp + 0x18]",
            "xor eax, eax",
            "mov qword [rdx], r12",
            "jmp 0x403898",
            "movzx ecx, byte [rbx + 0xe0]",
            "lea rax, [rsp + 0x28]",
            "mov rdx, qword [rbx + 0x30]",
            "lea r9, [rsp + 0x20]",
            "mov r8d, 1",
            "mov rsi, rbp",
            "mov qword [rsp], rax",
            "mov rdi, r13",
            "call fcn.0040c6c0",
            "test eax, eax",
            "je 0x4034de",
            "jmp 0x4034cd",
            "cmp qword [rbp + 0x1c7], 0xfffffffffffffff8",
            "mov qword [rsp + 0x20], 1",
            "jne 0x403505",
            "jmp 0x403513",
            "movzx ecx, byte [rbx + 0xe0]",
            "mov rdx, qword [rbx + 0x30]",
            "mov r8d, 0x100",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040c886",
            "test eax, eax",
            "je 0x4036d2",
            "jmp 0x40364c",
            "test rdx, rdx",
            "jne 0x403620",
            "jmp 0x403595",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402862": {
        "function_address": "0x00402862",
        "instructions": [
            "movsxd rdx, edx",
            "mov ecx, 0x11",
            "imul rdx, rdx, 0x19",
            "add rdx, 0x65",
            "jmp fcn.00412a4b"
        ]
    },
    "fcn.004028a7": {
        "function_address": "0x004028a7",
        "instructions": [
            "movsxd rdx, edx",
            "mov ecx, 0x11",
            "imul rdx, rdx, 0x21",
            "add rdx, 0x65",
            "jmp fcn.00412a4b"
        ]
    },
    "fcn.00412a64": {
        "function_address": "0x00412a64",
        "instructions": [
            "lea rax, [rdi + rdx + 0x7c]",
            "lea rsi, [rsi + rcx + 0x7c]",
            "mov rcx, r8",
            "mov rdi, rax",
            "rep movsb byte [rdi], byte [rsi]",
            "ret"
        ]
    },
    "fcn.004028bc": {
        "function_address": "0x004028bc",
        "instructions": [
            "mov qword [rdi + 0xac], rsi",
            "ret"
        ]
    },
    "fcn.004028c4": {
        "function_address": "0x004028c4",
        "instructions": [
            "mov qword [rdi + 0xcc], rsi",
            "ret"
        ]
    },
    "fcn.004028db": {
        "function_address": "0x004028db",
        "instructions": [
            "mov qword [rdi + 0xb4], rsi",
            "ret"
        ]
    },
    "fcn.004028cc": {
        "function_address": "0x004028cc",
        "instructions": [
            "mov qword [rdi + 0xd4], rsi",
            "ret"
        ]
    },
    "fcn.00412a59": {
        "function_address": "0x00412a59",
        "instructions": [
            "lea rax, [rdi + rdx + 0x7c]",
            "mov rdi, rax",
            "rep movsb byte [rdi], byte [rsi]",
            "ret"
        ]
    },
    "fcn.00402915": {
        "function_address": "0x00402915",
        "instructions": [
            "mov rax, qword [rdi + 0xcc]",
            "ret"
        ]
    },
    "fcn.0040cac7": {
        "function_address": "0x0040cac7",
        "instructions": [
            "xor r8d, r8d",
            "jmp 0x40a79e"
        ]
    },
    "fcn.0040813e": {
        "function_address": "0x0040813e",
        "instructions": [
            "mov rdi, rdx",
            "jmp fcn.00412a07"
        ]
    },
    "fcn.00402e5f": {
        "function_address": "0x00402e5f",
        "instructions": [
            "cmp dword [rdi + 0x204], 0",
            "je 0x402ea9",
            "mov rdx, qword [rdi + 0x220]",
            "lea rax, [rdi + 0x220]",
            "cmp rdx, rax",
            "jne 0x402ea9",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rcx, qword [rax + 0x1d0]",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdi + 0x220], rcx",
            "lea rcx, [rax + 0x1d0]",
            "mov qword [rdi + 0x228], rcx",
            "mov qword [rax + 0x1d0], rdx",
            "ret"
        ]
    },
    "fcn.004039ba": {
        "function_address": "0x004039ba",
        "instructions": [
            "sub rsp, 0x28",
            "mov rax, qword [rdi + 9]",
            "mov qword [rsp + 0x18], rax",
            "mov al, byte [rdi + 8]",
            "mov byte [rsp + 0x17], al",
            "mov rax, qword [rdi]",
            "lea rdi, [rsp + 0xf]",
            "mov qword [rsp + 0xf], rax",
            "call fcn.0040398e",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "fcn.0040398e": {
        "function_address": "0x0040398e",
        "instructions": [
            "mov rdx, qword [rsi]",
            "cmp qword [rdi], rdx",
            "mov eax, 1",
            "ja 0x4039b9",
            "jae 0x4039a1",
            "or eax, 0xffffffff",
            "ret",
            "mov dl, byte [rsi + 8]",
            "cmp byte [rdi + 8], dl",
            "ja 0x4039b9",
            "jb 0x40399d",
            "mov rdx, qword [rsi + 9]",
            "cmp qword [rdi + 9], rdx",
            "ja 0x4039b9",
            "jb 0x40399d",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.00418c8c": {
        "function_address": "0x00418c8c",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x18",
            "cmp qword [rdi + 0x220], 0",
            "je 0x418d36",
            "mov edi, 0x48",
            "mov qword [rsp + 8], rsi",
            "mov dword [rsp], r8d",
            "mov r13, rdx",
            "mov r12, rcx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov rsi, qword [rsp + 8]",
            "mov r8d, dword [rsp]",
            "je 0x418d3a",
            "lea r9, [rax + 0x30]",
            "mov ecx, 0x11",
            "mov rdi, r9",
            "rep movsb byte [rdi], byte [rsi]",
            "mov qword [rax + 0x20], r13",
            "mov qword [rax + 0x28], r12",
            "mov rsi, rax",
            "mov dword [rax + 0x44], r8d",
            "mov rdi, qword [rbp + 0x220]",
            "call fcn.0041186d",
            "test eax, eax",
            "je 0x418d0e",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "call sym.imp.free",
            "mov eax, dword [rsp + 8]",
            "cmp eax, 0xffffffef",
            "je 0x418d3f",
            "test eax, eax",
            "je 0x418d3f",
            "lea rcx, str.btrfs_add_corrupt_extent_record",
            "lea rsi, [0x004201f8]",
            "lea rdi, str.__ret__ret____17_",
            "mov edx, 0x2f",
            "call sym.imp.__assert_fail",
            "xor eax, eax",
            "jmp 0x418d3f",
            "mov eax, 0xfffffff4",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0041186d": {
        "function_address": "0x0041186d",
        "instructions": [
            "lea rdx, [0x004117d9]",
            "jmp fcn.0041ca1e"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00401f70",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "fcn.0040754f": {
        "function_address": "0x0040754f",
        "instructions": [
            "mov rdi, qword [rdi + 0x1d8]",
            "add rdi, 0x60",
            "jmp 0x4122bc",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov ebp, edx",
            "mov rdx, rbp",
            "push rbx",
            "mov rbx, rdi",
            "lea rdi, [rdi + 8]",
            "call fcn.0041191b",
            "mov rcx, rax",
            "xor eax, eax",
            "test rcx, rcx",
            "je 0x41231a",
            "cmp qword [rcx + 0x20], r12",
            "jne 0x41231a",
            "cmp qword [rcx + 0x28], rbp",
            "jne 0x41231a",
            "mov rax, qword [rcx + 0x58]",
            "mov rsi, qword [rcx + 0x50]",
            "lea rdx, [rcx + 0x50]",
            "mov qword [rsi + 8], rax",
            "mov qword [rax], rsi",
            "mov rax, qword [rbx + 0x18]",
            "mov qword [rbx + 0x18], rdx",
            "add rbx, 0x10",
            "mov qword [rcx + 0x50], rbx",
            "mov qword [rcx + 0x58], rax",
            "mov qword [rax], rdx",
            "mov rax, rcx",
            "inc dword [rcx + 0x70]",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.0041191b": {
        "function_address": "0x0041191b",
        "instructions": [
            "sub rsp, 0x28",
            "xor ecx, ecx",
            "mov qword [rsp + 0x10], rsi",
            "mov qword [rsp + 0x18], rdx",
            "lea rsi, [rsp + 8]",
            "lea rdx, [fcn.004117b4]",
            "call fcn.0041ca98",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "fcn.0041ca98": {
        "function_address": "0x0041ca98",
        "instructions": [
            "push r13",
            "mov r13, rdx",
            "xor eax, eax",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "push r8",
            "mov rbx, qword [rdi]",
            "xor edi, edi",
            "jmp 0x41cad2",
            "mov rsi, r12",
            "mov rdi, rbx",
            "call r13",
            "cmp eax, 0",
            "jge 0x41cac6",
            "mov rcx, qword [rbx + 0x10]",
            "jmp 0x41cacc",
            "je 0x41caf1",
            "mov rcx, qword [rbx + 8]",
            "mov rdi, rbx",
            "mov rbx, rcx",
            "test rbx, rbx",
            "jne 0x41cab2",
            "test rbp, rbp",
            "je 0x41caf1",
            "test eax, eax",
            "jle 0x41caed",
            "test rdi, rdi",
            "je 0x41caed",
            "call fcn.0041c948",
            "mov rdi, rax",
            "mov qword [rbp], rdi",
            "pop rdx",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0041c948": {
        "function_address": "0x0041c948",
        "instructions": [
            "mov rax, qword [rdi]",
            "and rax, 0xfffffffffffffffc",
            "cmp rdi, rax",
            "je 0x41c982",
            "mov rax, qword [rdi + 8]",
            "test rax, rax",
            "jne 0x41c962",
            "jmp 0x41c96f",
            "mov rax, rdx",
            "mov rdx, qword [rax + 0x10]",
            "test rdx, rdx",
            "jne 0x41c95f",
            "ret",
            "mov rdi, rdx",
            "mov rdx, qword [rdi]",
            "and rdx, 0xfffffffffffffffc",
            "je 0x41c984",
            "cmp rdi, qword [rdx + 8]",
            "je 0x41c96c",
            "mov rax, rdx",
            "ret",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.0040850e": {
        "function_address": "0x0040850e",
        "instructions": [
            "push r14",
            "mov r14, rcx",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov ebx, edx",
            "mov edx, ebx",
            "sub rsp, 0x20",
            "mov qword [rsp + 0x18], 0",
            "call fcn.0040754f",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x408559",
            "mov rsi, r14",
            "mov rdi, rax",
            "call fcn.0040814e",
            "test eax, eax",
            "je 0x408559",
            "mov rdi, rbp",
            "call fcn.00412164",
            "jmp 0x4085e2",
            "mov rdi, qword [r13 + 0x1d8]",
            "lea r8, [rsp + 0x18]",
            "lea rcx, [rsp + 0x10]",
            "mov eax, ebx",
            "xor r9d, r9d",
            "xor esi, esi",
            "mov qword [rsp], 0",
            "mov rdx, r12",
            "mov qword [rsp + 0x10], rax",
            "add rdi, 0x150",
            "call fcn.00414c15",
            "test eax, eax",
            "je 0x4085b0",
            "lea rcx, str.readahead_tree_block",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "mov edx, 0xa4",
            "call sym.imp.__assert_fail",
            "mov rcx, qword [rsp + 0x18]",
            "mov edx, 0x10000",
            "mov rax, qword [rcx + 8]",
            "inc qword [rax + 0x20]",
            "mov edi, dword [rax + 0x28]",
            "cmp ebx, 0x10000",
            "mov rsi, qword [rcx + 0x10]",
            "cmovbe rdx, rbx",
            "call sym.imp.readahead",
            "mov rdi, qword [rsp + 0x18]",
            "call sym.imp.free",
            "add rsp, 0x20",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040814e": {
        "function_address": "0x0040814e",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "push r8",
            "call fcn.004129c6",
            "test eax, eax",
            "je 0x40817d",
            "mov rdi, qword [rbx + 0x48]",
            "mov ecx, 1",
            "mov rdx, rbp",
            "mov rsi, rbx",
            "call fcn.00407036",
            "test eax, eax",
            "sete al",
            "movzx eax, al",
            "pop rsi",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00414c15": {
        "function_address": "0x00414c15",
        "instructions": [
            "sub rsp, 0x18",
            "mov rax, qword [rsp + 0x20]",
            "mov dword [rsp], r9d",
            "mov r9, r8",
            "xor r8d, r8d",
            "mov qword [rsp + 8], rax",
            "call fcn.0041470c",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "sym.imp.readahead": {
        "function_address": "0x00402410",
        "instructions": [
            "jmp qword [reloc.readahead]"
        ]
    },
    "fcn.00403d91": {
        "function_address": "0x00403d91",
        "instructions": [
            "push r14",
            "mov r14, rdx",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov ebx, ecx",
            "jmp 0x403dd1",
            "movsxd r12, ebx",
            "mov rdi, qword [rbp + r12*8]",
            "mov r13d, dword [rbp + r12*4 + 0x40]",
            "test rdi, rdi",
            "je 0x403dd6",
            "mov edx, r13d",
            "mov rsi, r14",
            "call fcn.004028eb",
            "mov rdi, qword [rbp + r12*8]",
            "call fcn.00408149",
            "test r13d, r13d",
            "jne 0x403dd6",
            "inc ebx",
            "cmp ebx, 7",
            "jle 0x403da3",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.004028eb": {
        "function_address": "0x004028eb",
        "instructions": [
            "movsxd rdx, edx",
            "mov ecx, 0x11",
            "imul rdx, rdx, 0x21",
            "add rdx, 0x65",
            "jmp fcn.00412a59"
        ]
    },
    "fcn.0040295a": {
        "function_address": "0x0040295a",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12d, esi",
            "push rbp",
            "mov ebp, edx",
            "push rbx",
            "mov rbx, rdi",
            "push rcx",
            "call fcn.0040291d",
            "test ebp, ebp",
            "je 0x4029c0",
            "mov esi, r12d",
            "mov rdi, rbx",
            "mov r13d, eax",
            "call fcn.0040284c",
            "imul ecx, ebp, 0x19",
            "add ebp, r12d",
            "cmp r13d, ebp",
            "cmovle ebp, r13d",
            "dec ebp",
            "movsxd rbp, ebp",
            "imul rbp, rbp, 0x19",
            "sub ecx, dword [rbx + rbp + 0xf2]",
            "add eax, ecx",
            "jns 0x4029c2",
            "lea rcx, str.leaf_space_used",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__data_len___0_",
            "mov edx, 0x60e",
            "call sym.imp.__assert_fail",
            "xor eax, eax",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0040291d": {
        "function_address": "0x0040291d",
        "instructions": [
            "mov eax, dword [rdi + 0xdc]",
            "ret"
        ]
    },
    "fcn.0040284c": {
        "function_address": "0x0040284c",
        "instructions": [
            "movsxd rsi, esi",
            "imul rsi, rsi, 0x19",
            "mov eax, dword [rdi + rsi + 0xf6]",
            "add eax, dword [rdi + rsi + 0xf2]",
            "ret"
        ]
    },
    "fcn.00403b70": {
        "function_address": "0x00403b70",
        "instructions": [
            "push r13",
            "push r12",
            "movsxd r12, edx",
            "test r12d, r12d",
            "push rbp",
            "push rbx",
            "push rbp",
            "mov rbp, rsi",
            "movzx r13d, byte [rsi + 0xe0]",
            "js 0x403bd5",
            "mov rbx, rdi",
            "mov rdi, rsi",
            "call fcn.0040291d",
            "cmp r12d, eax",
            "jae 0x403bd5",
            "test r13d, r13d",
            "je 0x403bd5",
            "imul r12, r12, 0x21",
            "dec r13d",
            "lea rax, [rbp + r12 + 0xe1]",
            "mov rcx, qword [rax + 0x19]",
            "jne 0x403bbc",
            "mov edx, dword [rbx + 0x1f8]",
            "jmp 0x403bc2",
            "mov edx, dword [rbx + 0x1f4]",
            "mov rsi, qword [rax + 0x11]",
            "mov rdi, rbx",
            "pop rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "jmp fcn.004085f6",
            "pop r11",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "xor eax, eax",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00403f1a": {
        "function_address": "0x00403f1a",
        "instructions": [
            "push r13",
            "mov r13, rdi",
            "mov rdi, rsi",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x18",
            "call fcn.0040291d",
            "mov r12d, dword [r13 + 0x1f8]",
            "xor esi, esi",
            "mov edx, eax",
            "mov rdi, rbp",
            "mov ebx, eax",
            "call fcn.0040295a",
            "sub r12d, 0x65",
            "sub r12d, eax",
            "jns 0x403f8d",
            "mov edx, ebx",
            "xor esi, esi",
            "mov rdi, rbp",
            "call fcn.0040295a",
            "mov edx, dword [r13 + 0x1f8]",
            "mov r9d, eax",
            "mov rax, qword [reloc.stderr]",
            "mov dword [rsp], ebx",
            "mov ecx, r12d",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "lea r8, [rdx - 0x65]",
            "lea rdx, str.leaf_free_space_ret__d__leaf_data_size__lu__used__d_nritems__d_n",
            "call sym.imp.__fprintf_chk",
            "add rsp, 0x18",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.004038a7": {
        "function_address": "0x004038a7",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14d, r8d",
            "push r13",
            "mov r13, rcx",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x18",
            "mov rax, qword [rsi + 0x1d8]",
            "mov rcx, qword [rdi]",
            "mov r8, qword [rax + 0x158]",
            "cmp rcx, r8",
            "je 0x403913",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.trans__llu_running__llu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.btrfs_cow_block",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "mov edx, 0x169",
            "call sym.imp.__assert_fail",
            "mov rdi, rdx",
            "mov rbx, rdx",
            "mov r15, r9",
            "call fcn.00402915",
            "cmp rax, qword [rbp]",
            "jne 0x403951",
            "mov rdi, rbx",
            "call fcn.00402924",
            "test al, 1",
            "jne 0x403951",
            "cmp qword [r12 + 0x1c7], 0xfffffffffffffff8",
            "je 0x40394a",
            "mov rdi, rbx",
            "call fcn.00402924",
            "test al, 2",
            "jne 0x403951",
            "mov qword [r15], rbx",
            "xor eax, eax",
            "jmp 0x40397f",
            "mov qword [rsp + 8], 0",
            "mov rax, qword [rbx + 0x30]",
            "mov r9, r15",
            "mov r8d, r14d",
            "mov rcx, r13",
            "mov rdx, rbx",
            "mov rsi, r12",
            "mov rdi, rbp",
            "and rax, 0xffffffffc0000000",
            "mov qword [rsp], rax",
            "call fcn.004032ad",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040292c": {
        "function_address": "0x0040292c",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "mov rdi, rsi",
            "push rbx",
            "mov rbx, rsi",
            "call fcn.0040291d",
            "test eax, eax",
            "jne 0x402948",
            "mov eax, dword [rbp]",
            "sub eax, 0x65",
            "jmp 0x402957",
            "dec eax",
            "cdqe",
            "imul rax, rax, 0x19",
            "mov eax, dword [rbx + rax + 0xf2]",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.004043a0": {
        "function_address": "0x004043a0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x58",
            "mov rax, qword [rdx + 8]",
            "mov rbp, qword [rdx]",
            "mov qword [rsp + 0x18], rdi",
            "mov r13d, dword [rdx + 0x44]",
            "test rax, rax",
            "mov qword [rsp + 0x10], rax",
            "jne 0x4043d0",
            "jmp 0x404480",
            "mov rdi, qword [rsp + 0x10]",
            "mov r12, rsi",
            "mov r14d, ecx",
            "mov r15d, r8d",
            "call fcn.0040291d",
            "dec eax",
            "cmp r13d, eax",
            "jae 0x404480",
            "mov rsi, qword [rsp + 0x10]",
            "inc r13d",
            "mov rdi, r12",
            "mov edx, r13d",
            "mov dword [rsp + 0x24], r13d",
            "call fcn.00403b70",
            "mov rdi, r12",
            "mov rsi, rax",
            "mov qword [rsp + 0x30], rax",
            "call fcn.00403f1a",
            "cmp eax, r14d",
            "mov rdx, qword [rsp + 0x30]",
            "jge 0x404425",
            "mov rdi, rdx",
            "jmp 0x40447b",
            "mov r8d, dword [rsp + 0x24]",
            "mov rcx, qword [rsp + 0x10]",
            "lea r9, [rsp + 0x30]",
            "mov rdi, qword [rsp + 0x18]",
            "mov rsi, r12",
            "call fcn.004038a7",
            "test eax, eax",
            "mov rsi, qword [rsp + 0x30]",
            "je 0x40444f",
            "mov rdi, rsi",
            "jmp 0x40447b",
            "mov rdi, r12",
            "call fcn.00403f1a",
            "cmp eax, r14d",
            "jge 0x40445e",
            "jmp 0x404476",
            "mov rdi, rbp",
            "mov dword [rsp + 8], eax",
            "call fcn.0040291d",
            "test eax, eax",
            "mov r13d, eax",
            "mov r8d, dword [rsp + 8]",
            "jne 0x40448a",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00412164",
            "mov eax, 1",
            "jmp 0x4046ca",
            "test r15d, r15d",
            "lea edx, [rax - 1]",
            "movsxd rax, r8d",
            "sete sil",
            "xor r15d, r15d",
            "xor ecx, ecx",
            "movzx r10d, sil",
            "add r14d, 0x19",
            "jmp 0x4044e7",
            "movsxd rdi, edx",
            "lea r8d, [r14 + rcx]",
            "imul rdi, rdi, 0x19",
            "add rdi, 0x65",
            "cmp dword [rbx + 0x40], edx",
            "mov edi, dword [rbp + rdi + 0x91]",
            "cmove ecx, r8d",
            "mov r9d, edi",
            "movsxd r8, ecx",
            "lea r8, [r9 + r8 + 0x19]",
            "cmp r8, rax",
            "jbe 0x4044da",
            "test r15d, r15d",
            "jne 0x4044ee",
            "jmp 0x404476",
            "inc r15d",
            "test edx, edx",
            "lea ecx, [rcx + rdi + 0x19]",
            "je 0x4044ee",
            "dec edx",
            "cmp edx, r10d",
            "jae 0x4044a6",
            "jmp 0x4044d3",
            "cmp r15d, r13d",
            "jne 0x404517",
            "test sil, sil",
            "je 0x404517",
            "lea rcx, str.push_leaf_right",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "mov edx, 0x67e",
            "call sym.imp.__assert_fail",
            "mov rdi, qword [rsp + 0x30]",
            "sub r13d, r15d",
            "lea r14, [r12 + 0x1f8]",
            "call fcn.0040291d",
            "mov esi, r13d",
            "mov rdi, rbp",
            "mov dword [rsp + 0x18], eax",
            "call fcn.0040284c",
            "mov rsi, rbp",
            "mov rdi, r14",
            "mov dword [rsp + 0x28], eax",
            "call fcn.0040292c",
            "mov rsi, qword [rsp + 0x30]",
            "mov rdi, r14",
            "mov dword [rsp + 0x2c], eax",
            "call fcn.0040292c",
            "mov ecx, dword [r12 + 0x1f8]",
            "mov r8d, dword [rsp + 0x28]",
            "mov eax, eax",
            "sub r8d, dword [rsp + 0x2c]",
            "lea rdx, [rax + 0x65]",
            "mov rdi, qword [rsp + 0x30]",
            "mov rsi, rdx",
            "sub rcx, 0x65",
            "movsxd r8, r8d",
            "sub rcx, rax",
            "sub rsi, r8",
            "mov qword [rsp + 8], r8",
            "call fcn.00412a77",
            "mov rsi, rbp",
            "mov rdi, r14",
            "call fcn.0040292c",
            "mov edx, dword [r12 + 0x1f8]",
            "mov r8, qword [rsp + 8]",
            "mov ecx, eax",
            "mov rdi, qword [rsp + 0x30]",
            "add rcx, 0x65",
            "mov rsi, rbp",
            "sub rdx, r8",
            "call fcn.00412a64",
            "mov ecx, dword [rsp + 0x18]",
            "movsxd r8, r15d",
            "mov rdi, qword [rsp + 0x30]",
            "imul r8, r8, 0x19",
            "mov edx, 0x65",
            "imul rcx, rcx, 0x19",
            "lea rsi, [r8 + 0x65]",
            "mov qword [rsp + 8], r8",
            "call fcn.00412a77",
            "movsxd rcx, r13d",
            "mov r8, qword [rsp + 8]",
            "mov rdi, qword [rsp + 0x30]",
            "imul rcx, rcx, 0x19",
            "mov edx, 0x65",
            "mov rsi, rbp",
            "add rcx, 0x65",
            "call fcn.00412a64",
            "add r15d, dword [rsp + 0x18]",
            "mov rdi, qword [rsp + 0x30]",
            "mov esi, r15d",
            "call fcn.004028d4",
            "mov edx, dword [r12 + 0x1f8]",
            "mov rcx, qword [rsp + 0x30]",
            "xor eax, eax",
            "sub edx, 0x65",
            "jmp 0x404646",
            "movsxd rsi, eax",
            "inc eax",
            "imul rsi, rsi, 0x19",
            "sub edx, dword [rcx + rsi + 0xf6]",
            "mov dword [rcx + rsi + 0xf2], edx",
            "cmp eax, r15d",
            "jne 0x40462f",
            "mov esi, r13d",
            "mov rdi, rbp",
            "call fcn.004028d4",
            "test r13d, r13d",
            "je 0x404663",
            "mov rdi, rbp",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x30]",
            "lea rsi, [rsp + 0x3f]",
            "xor edx, edx",
            "call fcn.00402862",
            "mov edx, dword [rsp + 0x24]",
            "mov rdi, qword [rsp + 0x10]",
            "lea rsi, [rsp + 0x3f]",
            "call fcn.004028eb",
            "mov rdi, qword [rsp + 0x10]",
            "call fcn.00408149",
            "mov eax, dword [rbx + 0x40]",
            "cmp eax, r13d",
            "jb 0x4046be",
            "mov rdi, qword [rbx]",
            "sub eax, r13d",
            "mov dword [rbx + 0x40], eax",
            "call fcn.00412164",
            "mov rax, qword [rsp + 0x30]",
            "inc dword [rbx + 0x44]",
            "mov qword [rbx], rax",
            "jmp 0x4046c8",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00412164",
            "xor eax, eax",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004028d4": {
        "function_address": "0x004028d4",
        "instructions": [
            "mov dword [rdi + 0xdc], esi",
            "ret"
        ]
    },
    "fcn.00403f9b": {
        "function_address": "0x00403f9b",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x58",
            "mov ebp, dword [rdx + 0x44]",
            "mov r12, qword [rdx]",
            "mov qword [rsp + 0x10], rdi",
            "test ebp, ebp",
            "je 0x404385",
            "cmp qword [rdx + 8], 0",
            "je 0x404385",
            "mov rdi, r12",
            "mov r13, rsi",
            "mov r14d, ecx",
            "mov r15d, r8d",
            "call fcn.0040291d",
            "test eax, eax",
            "mov dword [rsp + 0x1c], eax",
            "je 0x404385",
            "lea r8d, [rbp - 1]",
            "mov rsi, qword [rbx + 8]",
            "mov rdi, r13",
            "mov edx, r8d",
            "mov dword [rsp + 8], r8d",
            "call fcn.00403b70",
            "mov rdi, r13",
            "mov rsi, rax",
            "mov qword [rsp + 0x30], rax",
            "call fcn.00403f1a",
            "cmp eax, r14d",
            "mov rdx, qword [rsp + 0x30]",
            "mov r8d, dword [rsp + 8]",
            "jge 0x404023",
            "mov rdi, rdx",
            "jmp 0x40405d",
            "mov rcx, qword [rbx + 8]",
            "mov rdi, qword [rsp + 0x10]",
            "lea r9, [rsp + 0x30]",
            "mov rsi, r13",
            "call fcn.004038a7",
            "test eax, eax",
            "mov dword [rsp + 0x10], eax",
            "mov rsi, qword [rsp + 0x30]",
            "je 0x40404b",
            "mov rdi, rsi",
            "jmp 0x40405d",
            "mov rdi, r13",
            "call fcn.00403f1a",
            "cmp eax, r14d",
            "jge 0x404067",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00412164",
            "jmp 0x404385",
            "mov edi, dword [rsp + 0x1c]",
            "cmp r15d, 1",
            "mov ecx, 0x65",
            "cdqe",
            "sbb edi, 0",
            "xor edx, edx",
            "xor ebp, ebp",
            "add r14d, 0x19",
            "jmp 0x4040b5",
            "cmp dword [rbx + 0x40], ebp",
            "lea esi, [r14 + rdx]",
            "cmove edx, esi",
            "mov esi, dword [r12 + rcx + 0x91]",
            "add rcx, 0x19",
            "movsxd r8, edx",
            "mov r9d, esi",
            "lea r8, [r9 + r8 + 0x19]",
            "cmp r8, rax",
            "jbe 0x4040af",
            "test ebp, ebp",
            "jne 0x4040bb",
            "jmp 0x404058",
            "lea edx, [rdx + rsi + 0x19]",
            "inc ebp",
            "cmp ebp, edi",
            "jne 0x404083",
            "jmp 0x4040a9",
            "test r15d, r15d",
            "jne 0x4040dc",
            "mov rdi, r12",
            "call fcn.0040291d",
            "cmp ebp, eax",
            "lea rcx, str.push_leaf_left",
            "mov edx, 0x70d",
            "je 0x40423a",
            "movsxd rax, ebp",
            "mov rdi, qword [rsp + 0x30]",
            "imul rax, rax, 0x19",
            "mov qword [rsp + 0x28], rax",
            "call fcn.0040291d",
            "movsxd rdx, eax",
            "mov r8, qword [rsp + 0x28]",
            "mov rdi, qword [rsp + 0x30]",
            "imul rdx, rdx, 0x19",
            "mov ecx, 0x65",
            "mov rsi, r12",
            "add rdx, 0x65",
            "call fcn.00412a64",
            "lea eax, [rbp - 1]",
            "mov r15d, dword [r13 + 0x1f8]",
            "mov rsi, qword [rsp + 0x30]",
            "cdqe",
            "imul rax, rax, 0x19",
            "sub r15d, 0x65",
            "lea r14, [r12 + rax + 0xe1]",
            "lea rax, [r13 + 0x1f8]",
            "mov ecx, dword [r14 + 0x11]",
            "mov rdi, rax",
            "mov qword [rsp + 0x20], rax",
            "sub r15d, ecx",
            "mov qword [rsp + 8], rcx",
            "call fcn.0040292c",
            "mov rcx, qword [rsp + 8]",
            "movsxd r8, r15d",
            "mov rdi, qword [rsp + 0x30]",
            "mov edx, 0x65",
            "mov eax, eax",
            "mov rsi, r12",
            "sub rdx, r8",
            "add rcx, 0x65",
            "add rdx, rax",
            "call fcn.00412a64",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.0040291d",
            "test eax, eax",
            "mov dword [rsp + 0x18], eax",
            "jne 0x4041ac",
            "lea rcx, str.push_leaf_left",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__old_left_nritems__0_",
            "mov edx, 0x71e",
            "call sym.imp.__assert_fail",
            "mov eax, dword [rsp + 0x18]",
            "mov rdi, qword [rsp + 0x30]",
            "dec eax",
            "cdqe",
            "imul rax, rax, 0x19",
            "mov r9d, dword [rdi + rax + 0xf2]",
            "mov eax, dword [rsp + 0x18]",
            "movsxd rdx, eax",
            "mov esi, eax",
            "imul rdx, rdx, 0x19",
            "add esi, ebp",
            "add rdx, 0x65",
            "jmp 0x4041fb",
            "mov ecx, dword [rdi + rdx + 0x8d]",
            "inc eax",
            "add ecx, r9d",
            "add ecx, 0x65",
            "sub ecx, dword [r13 + 0x1f8]",
            "mov dword [rdi + rdx + 0x8d], ecx",
            "add rdx, 0x19",
            "cmp eax, esi",
            "jb 0x4041da",
            "call fcn.004028d4",
            "cmp ebp, dword [rsp + 0x1c]",
            "jbe 0x40424d",
            "mov rax, qword [reloc.stderr]",
            "mov r8d, dword [rsp + 0x1c]",
            "lea rdx, str.push_items__d_nr__u_n",
            "mov ecx, ebp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "lea rcx, str.push_leaf_left",
            "mov edx, 0x72e",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "jmp 0x4041a7",
            "jae 0x4042b2",
            "mov rdi, qword [rsp + 0x20]",
            "mov rsi, r12",
            "mov r15d, dword [r14 + 0x11]",
            "call fcn.0040292c",
            "mov rdi, qword [rsp + 0x20]",
            "mov rsi, r12",
            "mov r14d, eax",
            "sub r15d, r14d",
            "call fcn.0040292c",
            "mov esi, dword [r13 + 0x1f8]",
            "movsxd rcx, r15d",
            "mov edx, eax",
            "add rdx, 0x65",
            "mov rdi, r12",
            "sub rsi, rcx",
            "call fcn.00412a77",
            "mov rdi, r12",
            "call fcn.0040291d",
            "sub eax, ebp",
            "mov rdx, qword [rsp + 0x28]",
            "mov esi, 0x65",
            "imul rcx, rax, 0x19",
            "mov rdi, r12",
            "add rdx, 0x65",
            "call fcn.00412a77",
            "mov r14d, dword [rsp + 0x1c]",
            "mov rdi, r12",
            "xor r15d, r15d",
            "sub r14d, ebp",
            "mov esi, r14d",
            "call fcn.004028d4",
            "mov eax, dword [r13 + 0x1f8]",
            "mov edx, 0x65",
            "sub eax, 0x65",
            "jmp 0x4042f0",
            "sub eax, dword [r12 + rdx + 0x91]",
            "inc r15d",
            "mov dword [r12 + rdx + 0x8d], eax",
            "add rdx, 0x19",
            "cmp r15d, r14d",
            "jne 0x4042d9",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00408149",
            "test r15d, r15d",
            "je 0x40430c",
            "mov rdi, r12",
            "call fcn.00408149",
            "lea rsi, [rsp + 0x3f]",
            "xor edx, edx",
            "mov rdi, r12",
            "call fcn.00402862",
            "lea rdx, [rsp + 0x3f]",
            "mov ecx, 1",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00403d91",
            "mov eax, dword [rbx + 0x40]",
            "cmp eax, ebp",
            "jge 0x404353",
            "add eax, dword [rsp + 0x18]",
            "mov rdi, qword [rbx]",
            "mov dword [rbx + 0x40], eax",
            "call fcn.00412164",
            "mov rax, qword [rsp + 0x30]",
            "dec dword [rbx + 0x44]",
            "mov qword [rbx], rax",
            "jmp 0x404360",
            "mov rdi, qword [rsp + 0x30]",
            "call fcn.00412164",
            "sub dword [rbx + 0x40], ebp",
            "cmp dword [rbx + 0x40], 0",
            "jns 0x40438d",
            "lea rcx, str.push_leaf_left",
            "mov edx, 0x758",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__path__slots_0____0_",
            "jmp 0x4041a7",
            "mov dword [rsp + 0x10], 1",
            "mov eax, dword [rsp + 0x10]",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402eaa": {
        "function_address": "0x00402eaa",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "push r12",
            "movsxd r12, ecx",
            "movsxd rax, r12d",
            "push rbp",
            "push rbx",
            "sub rsp, 0x38",
            "cmp qword [rdx + rax*8], 0",
            "je 0x402ee4",
            "lea rcx, str.insert_new_root",
            "mov edx, 0x54b",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__path__nodes_level__",
            "jmp 0x402f11",
            "lea eax, [r12 - 1]",
            "mov rbp, rsi",
            "cdqe",
            "mov r13, qword [rdx + rax*8]",
            "cmp r13, qword [rsi]",
            "je 0x402f16",
            "lea rcx, str.insert_new_root",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__path__nodes_level_1____root__node_",
            "mov edx, 0x54c",
            "call sym.imp.__assert_fail",
            "xor edx, edx",
            "cmp r12d, 1",
            "mov r15, rdi",
            "lea rsi, [rsp + 0x1f]",
            "mov rdi, r13",
            "jne 0x402f30",
            "call fcn.00402862",
            "jmp 0x402f35",
            "call fcn.004028a7",
            "mov rcx, qword [rbp + 0x1c7]",
            "mov edx, dword [rbp + 0x1f4]",
            "lea r8, [rsp + 0x1f]",
            "mov qword [rsp + 8], 0",
            "mov rax, qword [rbp]",
            "mov r9d, r12d",
            "mov rsi, rbp",
            "mov rdi, r15",
            "mov rax, qword [rax + 0x30]",
            "mov qword [rsp], rax",
            "call fcn.0040dbc2",
            "mov rbx, rax",
            "cmp rbx, 0xfffffffffffff000",
            "ja 0x403084",
            "xor edx, edx",
            "mov ecx, 0x65",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.00412a8f",
            "mov esi, 1",
            "mov rdi, rbx",
            "call fcn.004028d4",
            "movzx esi, r12b",
            "mov rdi, rbx",
            "call fcn.004028e3",
            "mov rsi, qword [rbx + 0x30]",
            "mov rdi, rbx",
            "call fcn.004028bc",
            "mov rsi, qword [r15]",
            "mov rdi, rbx",
            "call fcn.004028c4",
            "mov rdi, rbx",
            "call fcn.00402dd2",
            "mov rsi, qword [rbp + 0x1c7]",
            "mov rdi, rbx",
            "call fcn.004028cc",
            "mov rsi, qword [rbp + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rdi, rbx",
            "call fcn.00412a59",
            "mov rsi, qword [rbp + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x40",
            "mov rdi, rbx",
            "add rsi, 0x10",
            "call fcn.00412a59",
            "lea rsi, [rsp + 0x1f]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.004028eb",
            "mov rax, qword [r13 + 0x30]",
            "mov rdi, r13",
            "mov qword [rbx + 0xf2], rax",
            "call fcn.00402915",
            "cmp rax, qword [r15]",
            "je 0x40304e",
            "lea rcx, str.insert_new_root",
            "mov edx, 0x56d",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__lower_gen___trans__transid_",
            "jmp 0x402f11",
            "mov qword [rbx + 0xfa], rax",
            "mov rdi, rbx",
            "call fcn.00408149",
            "mov rdi, qword [rbp]",
            "mov qword [rbp], rbx",
            "call fcn.00412164",
            "mov rdi, rbp",
            "call fcn.00402e5f",
            "inc dword [rbx + 0x70]",
            "xor eax, eax",
            "mov qword [r14 + r12*8], rbx",
            "mov dword [r14 + r12*4 + 0x40], 0",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412a8f": {
        "function_address": "0x00412a8f",
        "instructions": [
            "lea rdx, [rdi + rdx + 0x7c]",
            "mov al, sil",
            "mov rdi, rdx",
            "rep stosb byte [rdi], al",
            "ret"
        ]
    },
    "fcn.004028e3": {
        "function_address": "0x004028e3",
        "instructions": [
            "mov byte [rdi + 0xe0], sil",
            "ret"
        ]
    },
    "fcn.00402c92": {
        "function_address": "0x00402c92",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "movsxd rbp, r9d",
            "push rbx",
            "sub rsp, 0x18",
            "movsxd rax, dword [rsp + 0x50]",
            "mov rbx, qword [rdx + rax*8]",
            "test rbx, rbx",
            "jne 0x402ccd",
            "lea rcx, str.insert_ptr",
            "mov edx, 0x590",
            "lea rsi, str.ctree.c",
            "lea rdi, str.___path__nodes_level__",
            "jmp 0x402d09",
            "mov r13, rdi",
            "mov rdi, rbx",
            "mov qword [rsp + 8], rsi",
            "mov r15, rcx",
            "mov r14, r8",
            "call fcn.0040291d",
            "cmp ebp, eax",
            "mov r12d, eax",
            "mov rsi, qword [rsp + 8]",
            "jle 0x402d0e",
            "lea rcx, str.insert_ptr",
            "mov edx, 0x594",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "call sym.imp.__assert_fail",
            "movsxd rdi, eax",
            "mov eax, dword [rsi]",
            "mov ecx, 0x21",
            "xor edx, edx",
            "sub rax, 0x65",
            "div rcx",
            "lea rcx, str.insert_ptr",
            "mov edx, 0x596",
            "cmp rdi, rax",
            "je 0x402cfb",
            "cmp ebp, r12d",
            "je 0x402d64",
            "lea esi, [rbp + 1]",
            "mov ecx, r12d",
            "movsxd rdx, ebp",
            "sub ecx, ebp",
            "mov rdi, rbx",
            "movsxd rsi, esi",
            "movsxd rcx, ecx",
            "imul rdx, rdx, 0x21",
            "imul rsi, rsi, 0x21",
            "imul rcx, rcx, 0x21",
            "add rdx, 0x65",
            "add rsi, 0x65",
            "call fcn.00412a77",
            "mov edx, ebp",
            "mov rsi, r15",
            "mov rdi, rbx",
            "imul rbp, rbp, 0x21",
            "call fcn.004028eb",
            "lea rax, [rbx + rbp + 0xe1]",
            "mov qword [rax + 0x11], r14",
            "mov rdx, qword [r13]",
            "test rdx, rdx",
            "jne 0x402da8",
            "lea rcx, str.insert_ptr",
            "mov dx, 0x59f",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__trans__transid__0_",
            "jmp 0x402d09",
            "lea esi, [r12 + 1]",
            "mov qword [rax + 0x19], rdx",
            "mov rdi, rbx",
            "call fcn.004028d4",
            "mov rdi, rbx",
            "call fcn.00408149",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402877": {
        "function_address": "0x00402877",
        "instructions": [
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x20",
            "lea rsi, [rsp + 0xf]",
            "call fcn.00402862",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rbx + 9], rax",
            "mov al, byte [rsp + 0x17]",
            "mov byte [rbx + 8], al",
            "mov rax, qword [rsp + 0xf]",
            "mov qword [rbx], rax",
            "add rsp, 0x20",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00404ccc": {
        "function_address": "0x00404ccc",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rdi",
            "mov rdi, rdx",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x48",
            "call fcn.0040291d",
            "mov edx, eax",
            "mov r14d, eax",
            "mov eax, dword [rbx + 0x40]",
            "imul rdx, rdx, 0x19",
            "cmp rdx, rax",
            "jbe 0x404d27",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0x30]",
            "lea rdx, str.invalid_number_of_items__llu_n",
            "mov esi, 1",
            "mov ebp, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "cmp byte [rbx + 0xe0], 0",
            "je 0x404d63",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0xac]",
            "lea rdx, str.leaf_is_not_a_leaf__llu_n",
            "mov esi, 1",
            "mov ebp, 4",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rcx",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00403f1a",
            "test eax, eax",
            "jns 0x404db3",
            "mov rsi, rbx",
            "mov rdi, r13",
            "mov ebp, 5",
            "call fcn.00403f1a",
            "mov r8d, eax",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0xac]",
            "lea rdx, str.leaf_free_space_incorrect__llu__d_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rcx",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "xor ebp, ebp",
            "test r14d, r14d",
            "je 0x404f93",
            "lea rsi, [rsp + 0x2f]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.00402862",
            "test r12, r12",
            "je 0x404f11",
            "cmp byte [r12 + 8], 0",
            "je 0x404f11",
            "lea rsi, [rsp + 0x2f]",
            "mov edx, 0x11",
            "mov rdi, r12",
            "call sym.imp.memcmp",
            "test eax, eax",
            "je 0x404f11",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0xac]",
            "lea rdx, str.leaf_parent_key_incorrect__llu_n",
            "mov esi, 1",
            "mov bpl, 2",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rcx",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "lea rsi, [rsp + 0x2f]",
            "mov edx, ebp",
            "mov rdi, rbx",
            "call fcn.00402862",
            "lea r8d, [r15 + 1]",
            "lea rsi, [rsp + 0x1e]",
            "mov rdi, rbx",
            "mov edx, r8d",
            "mov dword [rsp + 8], r8d",
            "call fcn.00402877",
            "lea rsi, [rsp + 0x1e]",
            "lea rdi, [rsp + 0x2f]",
            "call fcn.004039ba",
            "test eax, eax",
            "mov r8d, dword [rsp + 8]",
            "js 0x404e96",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.bad_key_ordering__d__d_n",
            "mov ecx, ebp",
            "mov esi, 1",
            "mov ebp, 3",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "imul rax, rbp, 0x19",
            "mov esi, r8d",
            "mov rdi, rbx",
            "mov ecx, dword [rbx + rax + 0xf2]",
            "mov dword [rsp + 8], ecx",
            "call fcn.0040284c",
            "mov ecx, dword [rsp + 8]",
            "mov r8d, eax",
            "cmp ecx, eax",
            "je 0x404ec4",
            "lea rdx, str.incorrect_offsets__u__u_n",
            "jmp 0x404ef4",
            "test r15d, r15d",
            "jne 0x404f1b",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.0040284c",
            "mov edx, dword [r13 + 0x1f8]",
            "mov esi, eax",
            "mov ecx, edx",
            "sub rcx, 0x65",
            "cmp rsi, rcx",
            "je 0x404f1b",
            "lea r8d, [rdx - 0x65]",
            "lea rdx, str.bad_item_end__u_wanted__u_n",
            "mov ecx, eax",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov ebp, 6",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x404f34",
            "xor ebp, ebp",
            "cmp r14d, 1",
            "ja 0x404f20",
            "jmp 0x404f93",
            "inc rbp",
            "jmp 0x404f24",
            "sub r14d, 2",
            "cmp ebp, r14d",
            "mov r15d, ebp",
            "jb 0x404e2d",
            "xor ebp, ebp",
            "jmp 0x404f93",
            "mov rax, qword [rbx + 0xd4]",
            "cmp rax, 2",
            "mov qword [rsp + 0x10], rax",
            "jne 0x404f93",
            "test r12, r12",
            "je 0x404f69",
            "mov rax, qword [r12 + 9]",
            "mov qword [rsp + 0x27], rax",
            "mov al, byte [r12 + 8]",
            "mov byte [rsp + 0x26], al",
            "mov rax, qword [r12]",
            "mov qword [rsp + 0x1e], rax",
            "jmp 0x404f78",
            "lea rsi, [rsp + 0x1e]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.00402877",
            "mov ecx, dword [rbx + 0x40]",
            "mov rdx, qword [rbx + 0x30]",
            "lea rsi, [rsp + 0x1e]",
            "mov rdi, qword [r13 + 0x1d8]",
            "xor r8d, r8d",
            "call fcn.00418c8c",
            "add rsp, 0x48",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004039e5": {
        "function_address": "0x004039e5",
        "instructions": [
            "push r14",
            "mov r14, rdi",
            "mov rdi, rdx",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x40",
            "call fcn.0040291d",
            "test eax, eax",
            "mov r13d, eax",
            "je 0x403ad3",
            "mov esi, eax",
            "mov eax, dword [r14 + 0x1f4]",
            "xor edx, edx",
            "mov ecx, 0x21",
            "sub rax, 0x65",
            "div rcx",
            "cmp rsi, rax",
            "ja 0x403ad3",
            "test rbp, rbp",
            "je 0x403ab7",
            "cmp byte [rbp + 8], 0",
            "je 0x403ab7",
            "lea rsi, [rsp + 0x1e]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.004028a7",
            "lea rsi, [rsp + 0x1e]",
            "mov edx, 0x11",
            "mov rdi, rbp",
            "call sym.imp.memcmp",
            "test eax, eax",
            "jne 0x403adb",
            "jmp 0x403ab7",
            "lea rsi, [rsp + 0x1e]",
            "mov edx, r12d",
            "mov rdi, rbx",
            "inc r12d",
            "call fcn.004028a7",
            "lea rsi, [rsp + 0x2f]",
            "mov edx, r12d",
            "mov rdi, rbx",
            "call fcn.004028a7",
            "mov rax, qword [rsp + 0x38]",
            "lea rsi, [rsp + 0xd]",
            "lea rdi, [rsp + 0x1e]",
            "mov qword [rsp + 0x16], rax",
            "mov al, byte [rsp + 0x37]",
            "mov byte [rsp + 0x15], al",
            "mov rax, qword [rsp + 0x2f]",
            "mov qword [rsp + 0xd], rax",
            "call fcn.004039ba",
            "test eax, eax",
            "js 0x403acc",
            "jmp 0x403ae3",
            "xor r12d, r12d",
            "cmp r13d, 1",
            "ja 0x403ac8",
            "xor r12d, r12d",
            "jmp 0x403b60",
            "sub r13d, 2",
            "cmp r12d, r13d",
            "jb 0x403a63",
            "jmp 0x403ac0",
            "mov r12d, 1",
            "jmp 0x403ae9",
            "mov r12d, 2",
            "jmp 0x403ae9",
            "mov r12d, 3",
            "mov rax, qword [rbx + 0xd4]",
            "cmp rax, 2",
            "mov qword [rsp], rax",
            "jne 0x403b60",
            "test rbp, rbp",
            "je 0x403b15",
            "mov rax, qword [rbp + 9]",
            "mov qword [rsp + 0x16], rax",
            "mov al, byte [rbp + 8]",
            "mov byte [rsp + 0x15], al",
            "mov rax, qword [rbp]",
            "jmp 0x403b3b",
            "lea rsi, [rsp + 0x2f]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.004028a7",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [rsp + 0x16], rax",
            "mov al, byte [rsp + 0x37]",
            "mov byte [rsp + 0x15], al",
            "mov rax, qword [rsp + 0x2f]",
            "mov ecx, dword [rbx + 0x40]",
            "movzx r8d, byte [rbx + 0xe0]",
            "lea rsi, [rsp + 0xd]",
            "mov rdx, qword [rbx + 0x30]",
            "mov rdi, qword [r14 + 0x1d8]",
            "mov qword [rsp + 0xd], rax",
            "call fcn.00418c8c",
            "add rsp, 0x40",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040e5f1": {
        "function_address": "0x0040e5f1",
        "instructions": [
            "push rbx",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rbx, rdi",
            "sub rsp, 0x70",
            "lea rsi, [rsp + 0xe]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x68], rax",
            "xor eax, eax",
            "call fcn.00412a4b",
            "lea rsi, [rsp + 0x1e]",
            "lea rdi, [rsp + 0xe]",
            "mov byte [rsp + 0x42], 0",
            "call sym.imp.uuid_unparse",
            "lea rsi, [rsp + 0xe]",
            "mov ecx, 0x10",
            "mov edx, 0x40",
            "mov rdi, rbx",
            "call fcn.00412a4b",
            "lea rsi, [rsp + 0x43]",
            "lea rdi, [rsp + 0xe]",
            "mov byte [rsp + 0x67], 0",
            "call sym.imp.uuid_unparse",
            "lea rcx, [rsp + 0x43]",
            "lea rdx, [rsp + 0x1e]",
            "lea rsi, str.fs_uuid__s_nchunk_uuid__s_n",
            "xor eax, eax",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "mov rax, qword [rsp + 0x68]",
            "xor rax, qword fs:[0x28]",
            "je 0x40e68e",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x70",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.fflush": {
        "function_address": "0x00402290",
        "instructions": [
            "jmp qword [reloc.fflush]"
        ]
    },
    "fcn.00412a4b": {
        "function_address": "0x00412a4b",
        "instructions": [
            "mov rax, rsi",
            "lea rsi, [rdi + rdx + 0x7c]",
            "mov rdi, rax",
            "rep movsb byte [rdi], byte [rsi]",
            "ret"
        ]
    },
    "fcn.0040e694": {
        "function_address": "0x0040e694",
        "instructions": [
            "push r12",
            "lea rsi, str.key__",
            "xor eax, eax",
            "push rbp",
            "push rbx",
            "sub rsp, 0x10",
            "mov bl, byte [rdi + 8]",
            "mov r12, qword [rdi + 9]",
            "mov rbp, qword [rdi]",
            "mov edi, 1",
            "mov qword [rsp + 8], r12",
            "call sym.imp.__printf_chk",
            "cmp bl, 0xf6",
            "je 0x40e6d8",
            "ja 0x40e6cf",
            "cmp bl, 0xcc",
            "jne 0x40e713",
            "jmp 0x40e914",
            "lea eax, [rbx + 5]",
            "cmp al, 1",
            "ja 0x40e713",
            "jmp 0x40e704",
            "mov rdx, rbp",
            "movabs rcx, 0xffffffffffff",
            "lea rsi, str._llu__llu",
            "and rcx, rbp",
            "shr rdx, 0x30",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40e92a",
            "mov rdx, rbp",
            "lea rsi, str.0x_016llx",
            "jmp 0x40e91e",
            "cmp rbp, 0xffffffffffffff01",
            "je 0x40e8e8",
            "ja 0x40e7a7",
            "cmp rbp, 5",
            "je 0x40e861",
            "ja 0x40e766",
            "cmp rbp, 2",
            "je 0x40e83d",
            "ja 0x40e74d",
            "cmp rbp, 1",
            "jne 0x40e914",
            "jmp 0x40e821",
            "cmp rbp, 3",
            "je 0x40e849",
            "cmp rbp, 4",
            "jne 0x40e914",
            "jmp 0x40e855",
            "cmp rbp, 8",
            "je 0x40e8d6",
            "ja 0x40e78b",
            "cmp rbp, 6",
            "je 0x40e86d",
            "cmp rbp, 7",
            "jne 0x40e914",
            "jmp 0x40e879",
            "cmp rbp, 9",
            "je 0x40e8df",
            "cmp rbp, 0x100",
            "jne 0x40e914",
            "jmp 0x40e8fa",
            "cmp rbp, 0xfffffffffffffff8",
            "je 0x40e8a9",
            "ja 0x40e7e7",
            "cmp rbp, 0xfffffffffffffff5",
            "je 0x40e8c4",
            "ja 0x40e7ce",
            "cmp rbp, 0xfffffffffffffff4",
            "jne 0x40e914",
            "jmp 0x40e8cd",
            "cmp rbp, 0xfffffffffffffff6",
            "je 0x40e8bb",
            "cmp rbp, 0xfffffffffffffff7",
            "jne 0x40e914",
            "jmp 0x40e8b2",
            "cmp rbp, 0xfffffffffffffffb",
            "je 0x40e88e",
            "ja 0x40e80c",
            "cmp rbp, 0xfffffffffffffff9",
            "je 0x40e8a0",
            "cmp rbp, 0xfffffffffffffffa",
            "jne 0x40e914",
            "jmp 0x40e897",
            "cmp rbp, 0xfffffffffffffffc",
            "je 0x40e885",
            "cmp rbp, 0xffffffffffffffff",
            "jne 0x40e914",
            "jmp 0x40e8f1",
            "cmp bl, 0xd8",
            "lea rsi, str.DEV_ITEMS",
            "je 0x40e906",
            "lea rsi, str.ROOT_TREE",
            "jmp 0x40e906",
            "lea rsi, str.EXTENT_TREE",
            "jmp 0x40e906",
            "lea rsi, [0x0041e5fe]",
            "jmp 0x40e906",
            "lea rsi, str.DEV_TREE",
            "jmp 0x40e906",
            "lea rsi, str.FS_TREE",
            "jmp 0x40e906",
            "lea rsi, str.ROOT_TREE_DIR",
            "jmp 0x40e906",
            "lea rsi, str.CSUM_TREE",
            "jmp 0x40e906",
            "lea rsi, str.BALANCE",
            "jmp 0x40e906",
            "lea rsi, str.ORPHAN",
            "jmp 0x40e906",
            "lea rsi, str.TREE_LOG",
            "jmp 0x40e906",
            "lea rsi, str.LOG_FIXUP",
            "jmp 0x40e906",
            "lea rsi, str.TREE_RELOC",
            "jmp 0x40e906",
            "lea rsi, str.DATA_RELOC_TREE",
            "jmp 0x40e906",
            "lea rsi, str.EXTENT_CSUM",
            "jmp 0x40e906",
            "lea rsi, str.FREE_SPACE",
            "jmp 0x40e906",
            "lea rsi, str.FREE_INO",
            "jmp 0x40e906",
            "lea rsi, str.QUOTA_TREE",
            "jmp 0x40e906",
            "lea rsi, str.UUID_TREE",
            "jmp 0x40e906",
            "lea rsi, str.MULTIPLE",
            "jmp 0x40e906",
            "lea rsi, [0x0041e5f5]",
            "jmp 0x40e906",
            "cmp bl, 0xe4",
            "jne 0x40e914",
            "lea rsi, str.FIRST_CHUNK_TREE",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40e92a",
            "lea rsi, [0x0041e522]",
            "mov rdx, rbp",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov edi, 0x20",
            "call sym.imp.putchar",
            "test bl, bl",
            "jne 0x40e956",
            "cmp rbp, 0xfffffffffffffff5",
            "jne 0x40e956",
            "lea rsi, str.UNTYPED",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40ecaa",
            "cmp bl, 0xb0",
            "je 0x40eb95",
            "ja 0x40ea26",
            "cmp bl, 0x60",
            "je 0x40eb1d",
            "ja 0x40e9cb",
            "cmp bl, 0x18",
            "je 0x40eb41",
            "ja 0x40e99b",
            "cmp bl, 0xc",
            "je 0x40eaf9",
            "cmp bl, 0xd",
            "je 0x40eb05",
            "cmp bl, 1",
            "jne 0x40ec94",
            "jmp 0x40eaed",
            "cmp bl, 0x3c",
            "je 0x40eb29",
            "ja 0x40e9b4",
            "cmp bl, 0x30",
            "jne 0x40ec94",
            "jmp 0x40eb4d",
            "cmp bl, 0x48",
            "je 0x40eb35",
            "cmp bl, 0x54",
            "jne 0x40ec94",
            "jmp 0x40eb11",
            "cmp bl, 0x84",
            "je 0x40eb59",
            "ja 0x40e9f6",
            "cmp bl, 0x78",
            "je 0x40ebd1",
            "cmp bl, 0x80",
            "je 0x40ebdd",
            "cmp bl, 0x6c",
            "jne 0x40ec94",
            "jmp 0x40ebe6",
            "cmp bl, 0x9c",
            "je 0x40eb65",
            "ja 0x40ea0f",
            "cmp bl, 0x90",
            "jne 0x40ec94",
            "jmp 0x40eb71",
            "cmp bl, 0xa8",
            "je 0x40eb7d",
            "cmp bl, 0xa9",
            "jne 0x40ec94",
            "jmp 0x40eb89",
            "cmp bl, 0xf0",
            "je 0x40ec2e",
            "ja 0x40ea8c",
            "cmp bl, 0xb8",
            "je 0x40ebb9",
            "ja 0x40ea5c",
            "cmp bl, 0xb4",
            "je 0x40ebc5",
            "cmp bl, 0xb6",
            "je 0x40eba1",
            "cmp bl, 0xb2",
            "jne 0x40ec94",
            "jmp 0x40ebad",
            "cmp bl, 0xcc",
            "je 0x40ec0a",
            "ja 0x40ea75",
            "cmp bl, 0xc0",
            "jne 0x40ec94",
            "jmp 0x40ebef",
            "cmp bl, 0xd8",
            "je 0x40ec01",
            "cmp bl, 0xe4",
            "jne 0x40ec94",
            "jmp 0x40ebf8",
            "cmp bl, 0xf9",
            "je 0x40ec5e",
            "ja 0x40eac7",
            "cmp bl, 0xf4",
            "je 0x40ec49",
            "ja 0x40eab0",
            "cmp bl, 0xf2",
            "jne 0x40ec94",
            "jmp 0x40ec40",
            "cmp bl, 0xf6",
            "je 0x40ec37",
            "cmp bl, 0xf8",
            "jne 0x40ec94",
            "jmp 0x40ec13",
            "cmp bl, 0xfb",
            "je 0x40ec76",
            "jb 0x40ec1c",
            "cmp bl, 0xfc",
            "je 0x40ec7f",
            "cmp bl, 0xfd",
            "jne 0x40ec94",
            "jmp 0x40ec25",
            "lea rsi, str.INODE_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.INODE_REF",
            "jmp 0x40ec65",
            "lea rsi, str.INODE_EXTREF",
            "jmp 0x40ec65",
            "lea rsi, str.DIR_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.DIR_INDEX",
            "jmp 0x40ec65",
            "lea rsi, str.DIR_LOG_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.DIR_LOG_INDEX",
            "jmp 0x40ec65",
            "lea rsi, str.XATTR_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.ORPHAN_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.ROOT_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.ROOT_REF",
            "jmp 0x40ec65",
            "lea rsi, str.ROOT_BACKREF",
            "jmp 0x40ec65",
            "lea rsi, str.EXTENT_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.METADATA_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.TREE_BLOCK_REF",
            "jmp 0x40ec65",
            "lea rsi, str.SHARED_BLOCK_REF",
            "jmp 0x40ec65",
            "lea rsi, str.EXTENT_DATA_REF",
            "jmp 0x40ec65",
            "lea rsi, str.SHARED_DATA_REF",
            "jmp 0x40ec65",
            "lea rsi, str.EXTENT_REF_V0",
            "jmp 0x40ec65",
            "lea rsi, str.CSUM_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.EXTENT_CSUM",
            "jmp 0x40ec65",
            "lea rsi, str.EXTENT_DATA",
            "jmp 0x40ec65",
            "lea rsi, str.BLOCK_GROUP_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.CHUNK_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.DEV_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.DEV_EXTENT",
            "jmp 0x40ec65",
            "lea rsi, str.BALANCE_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.DEV_REPLACE_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.STRING_ITEM",
            "jmp 0x40ec65",
            "lea rsi, str.BTRFS_STATUS_KEY",
            "jmp 0x40ec65",
            "lea rsi, str.BTRFS_QGROUP_RELATION_KEY",
            "jmp 0x40ec50",
            "lea rsi, str.BTRFS_QGROUP_INFO_KEY",
            "jmp 0x40ec50",
            "lea rsi, str.BTRFS_QGROUP_LIMIT_KEY",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40ecc5",
            "lea rsi, str.DEV_STATS_ITEM",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40ed00",
            "lea rsi, str.BTRFS_UUID_KEY_SUBVOL",
            "jmp 0x40ec86",
            "lea rsi, str.BTRFS_UUID_KEY_RECEIVED_SUBVOL",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40ecf4",
            "lea rsi, str.UNKNOWN._d",
            "movzx edx, bl",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea ecx, [rbx + 0xe]",
            "cmp cl, 0xa",
            "ja 0x40ed00",
            "mov eax, 1",
            "shl rax, cl",
            "test al, 0x15",
            "jne 0x40ecc5",
            "test ah, 6",
            "jne 0x40ecf4",
            "jmp 0x40ed00",
            "add rsp, 0x10",
            "movabs rcx, 0xffffffffffff",
            "mov rdx, r12",
            "pop rbx",
            "pop rbp",
            "and rcx, r12",
            "lea rsi, str.__llu__llu_",
            "shr rdx, 0x30",
            "pop r12",
            "mov edi, 1",
            "xor eax, eax",
            "jmp sym.imp.__printf_chk",
            "mov rdx, r12",
            "lea rsi, str._0x_016llx_",
            "jmp 0x40ed2b",
            "cmp r12, 0xffffffffffffffff",
            "mov rdx, r12",
            "lea rsi, str.__llu_",
            "jne 0x40ed2b",
            "add rsp, 0x10",
            "lea rsi, [0x0041dcc1]",
            "mov edi, 1",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "xor eax, eax",
            "jmp sym.imp.__printf_chk",
            "add rsp, 0x10",
            "mov edi, 1",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "jmp sym.imp.__printf_chk"
        ]
    },
    "fcn.0040ed3f": {
        "function_address": "0x0040ed3f",
        "instructions": [
            "movsxd rsi, esi",
            "push rbx",
            "mov r8, rdi",
            "imul rsi, rsi, 0x19",
            "mov ecx, 0x1b7",
            "sub rsp, 0x200",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1f8], rax",
            "xor eax, eax",
            "lea rbx, [rsp + 0x41]",
            "lea rax, [rdi + rsi + 0xe1]",
            "mov rdi, rbx",
            "movsxd rsi, dword [rax + 0x15]",
            "mov edx, dword [rax + 0x11]",
            "xor eax, eax",
            "rep stosb byte [rdi], al",
            "mov rdi, r8",
            "add rdx, 0x65",
            "mov rcx, rsi",
            "mov rsi, rbx",
            "call fcn.00412a4b",
            "mov rax, qword [rsp + 0xe1]",
            "movzx ecx, byte [rsp + 0x12f]",
            "lea rsi, str._t_troot_data_bytenr__llu_level__d_dirid__llu_refs__u_gen__llu_n",
            "mov rdx, qword [rsp + 0xf1]",
            "mov r9d, dword [rsp + 0x119]",
            "mov edi, 1",
            "mov r8, qword [rsp + 0xe9]",
            "mov qword [rsp], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rdx",
            "call sym.imp.__printf_chk",
            "mov rax, qword [rsp + 0x130]",
            "cmp qword [rsp + 0xe1], rax",
            "jne 0x40eef0",
            "lea rdi, [rbx + 0xf7]",
            "lea rsi, [rsp + 0x1c]",
            "add rbx, 0x107",
            "call sym.imp.uuid_unparse",
            "lea rdx, [rsp + 0x1c]",
            "lea rsi, str._t_tuuid__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "xor eax, eax",
            "xor edx, edx",
            "lea rcx, [rax + rbx]",
            "cmp byte [rcx], 1",
            "adc edx, 0",
            "inc rax",
            "cmp rax, 0x10",
            "jne 0x40ee24",
            "cmp edx, 0x10",
            "je 0x40ee66",
            "lea rsi, [rsp + 0x1c]",
            "lea rdi, [rsp + 0x148]",
            "call sym.imp.uuid_unparse",
            "lea rdx, [rsp + 0x1c]",
            "lea rsi, str._t_tparent_uuid__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "xor eax, eax",
            "xor edx, edx",
            "lea rcx, [rsp + 0x158]",
            "add rcx, rax",
            "cmp byte [rcx], 1",
            "adc edx, 0",
            "inc rax",
            "cmp rax, 0x10",
            "jne 0x40ee6a",
            "cmp edx, 0x10",
            "je 0x40eeb3",
            "lea rsi, [rsp + 0x1c]",
            "lea rdi, [rsp + 0x158]",
            "call sym.imp.uuid_unparse",
            "lea rdx, [rsp + 0x1c]",
            "lea rsi, str._t_treceived_uuid__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rdx, qword [rsp + 0x168]",
            "test rdx, rdx",
            "je 0x40eef0",
            "mov r9, qword [rsp + 0x180]",
            "mov r8, qword [rsp + 0x178]",
            "lea rsi, str._t_tctransid__llu_otransid__llu_stransid__llu_rtransid__llu_n",
            "mov rcx, qword [rsp + 0x170]",
            "mov edi, 1",
            "xor eax, eax",
            "mov qword [rsp + 0x10], rdx",
            "call sym.imp.__printf_chk",
            "mov eax, dword [rsp + 0x119]",
            "test eax, eax",
            "mov dword [rsp + 0x10], eax",
            "jne 0x40ef38",
            "lea rsi, str._t_tdrop",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x11d]",
            "call fcn.0040e694",
            "movzx edx, byte [rsp + 0x12e]",
            "lea rsi, [0x0041e950]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rax, qword [rsp + 0x1f8]",
            "xor rax, qword fs:[0x28]",
            "je 0x40ef50",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x200",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0040e550": {
        "function_address": "0x0040e550",
        "instructions": [
            "push r14",
            "movsxd rsi, esi",
            "mov r14, rdx",
            "imul rsi, rsi, 0x19",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x120",
            "mov edx, dword [rdi + rsi + 0xf2]",
            "lea r12, [rsp + 0x19]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x118], rax",
            "xor eax, eax",
            "mov rsi, r12",
            "lea rbx, [rdi + rdx + 0xd5]",
            "add rdx, 0x77",
            "mov bp, word [rbx + 0x1c]",
            "movzx ecx, bp",
            "call fcn.00412a4b",
            "mov r8, qword [rbx + 0x14]",
            "mov qword [rsp], r12",
            "lea rsi, str._t_troot__s_key_dirid__llu_sequence__llu_name__.s_n",
            "mov rcx, qword [rbx + 0xc]",
            "xor eax, eax",
            "movzx r9d, bp",
            "mov rdx, r14",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "mov rax, qword [rsp + 0x118]",
            "xor rax, qword fs:[0x28]",
            "je 0x40e5e1",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x120",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040ef59": {
        "function_address": "0x0040ef59",
        "instructions": [
            "push r15",
            "movsxd rsi, esi",
            "imul rsi, rsi, 0x19",
            "push r14",
            "push r13",
            "lea rax, [rsi + 0x65]",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x38",
            "mov qword [rsp + 8], rax",
            "lea rax, [rdi + rsi + 0xe1]",
            "mov r12d, dword [rax + 0x15]",
            "cmp r12d, 0x17",
            "ja 0x40efd3",
            "cmp r12d, 4",
            "je 0x40efb1",
            "lea rcx, str.print_extent_item",
            "mov edx, 0x106",
            "lea rsi, str.print_tree.c",
            "lea rdi, str.__item_size___sizeof_ei0__",
            "jmp 0x40f17a",
            "mov eax, dword [rax + 0x11]",
            "lea rsi, str._t_textent_refs__u_n",
            "mov edx, dword [rdi + rax + 0xe1]",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40f1bc",
            "mov ebp, dword [rax + 0x11]",
            "mov r15d, edx",
            "lea rsi, str._t_textent_refs__llu_gen__llu_flags__llu_n",
            "lea rax, [rdi + rbp + 0xd5]",
            "mov edi, 1",
            "lea r13, [rbp + 0x65]",
            "mov r14, qword [rax + 0x1c]",
            "mov rcx, qword [rax + 0x14]",
            "mov rdx, qword [rax + 0xc]",
            "xor eax, eax",
            "mov r8, r14",
            "call sym.imp.__printf_chk",
            "and r14b, 2",
            "je 0x40f069",
            "test r15d, r15d",
            "jne 0x40f072",
            "lea rdx, [rbp + 0x7d]",
            "lea rsi, [rsp + 0x1f]",
            "mov ecx, 0x11",
            "mov rdi, rbx",
            "call fcn.00412a4b",
            "lea rsi, str._t_ttree_block",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "lea rdi, [rsp + 0x1f]",
            "call fcn.0040e694",
            "movzx edx, byte [rbx + rbp + 0x10a]",
            "lea rsi, [0x0041e950]",
            "mov edi, 1",
            "xor eax, eax",
            "add rbp, 0x8f",
            "call sym.imp.__printf_chk",
            "jmp 0x40f0a4",
            "add rbp, 0x7d",
            "test r15d, r15d",
            "je 0x40f0a4",
            "mov rdx, qword [rsp + 8]",
            "lea rsi, [rsp + 0x1f]",
            "mov ecx, 0x11",
            "mov rdi, rbx",
            "lea rbp, [r13 + 0x18]",
            "call fcn.00412a4b",
            "mov edx, dword [rsp + 0x28]",
            "lea rsi, str._t_ttree_block_skinny_level__d_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "add r13, r12",
            "jmp 0x40f195",
            "lea rdx, [rbx + rbp + 0x70]",
            "mov al, byte [rdx + 0xc]",
            "mov rdx, qword [rdx + 0xd]",
            "cmp al, 0xb2",
            "movzx r12d, al",
            "je 0x40f0f8",
            "ja 0x40f0cc",
            "cmp al, 0xb0",
            "jne 0x40f1bc",
            "jmp 0x40f0da",
            "cmp al, 0xb6",
            "je 0x40f0e3",
            "cmp al, 0xb8",
            "jne 0x40f1bc",
            "jmp 0x40f122",
            "lea rsi, str._t_ttree_block_backref_root__llu_n",
            "jmp 0x40f0ea",
            "lea rsi, str._t_tshared_block_backref_parent__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40f13c",
            "lea rdx, [rbx + rbp + 0x71]",
            "lea rsi, str._t_textent_data_backref_root__llu_objectid__llu_offset__llu_count__u_n",
            "mov edi, 1",
            "xor eax, eax",
            "mov rcx, qword [rdx + 0x14]",
            "mov r9d, dword [rdx + 0x24]",
            "mov r8, qword [rdx + 0x1c]",
            "mov rdx, qword [rdx + 0xc]",
            "call sym.imp.__printf_chk",
            "jmp 0x40f13c",
            "mov ecx, dword [rbx + rbp + 0x85]",
            "lea rsi, str._t_tshared_data_backref_parent__llu_count__u_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "cmp r12d, 0xb6",
            "je 0x40f17f",
            "cmp r12d, 0xb0",
            "je 0x40f17f",
            "cmp r12d, 0xb8",
            "je 0x40f186",
            "cmp r12d, 0xb2",
            "je 0x40f18d",
            "lea rcx, str.btrfs_extent_inline_ref_size",
            "lea rsi, str.ctree.h",
            "lea rdi, [0x0041e6fe]",
            "mov edx, 0x5fc",
            "call sym.imp.__assert_fail",
            "mov eax, 9",
            "jmp 0x40f192",
            "mov eax, 0xd",
            "jmp 0x40f192",
            "mov eax, 0x1d",
            "add rbp, rax",
            "cmp rbp, r13",
            "jb 0x40f0ac",
            "jbe 0x40f1bc",
            "lea rcx, str.print_extent_item",
            "mov edx, 0x14d",
            "lea rsi, str.print_tree.c",
            "lea rdi, str.__ptr___end_",
            "jmp 0x40f17a",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00405399": {
        "function_address": "0x00405399",
        "instructions": [
            "push r15",
            "movsxd rax, ecx",
            "mov r15d, ecx",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "mov ebp, r8d",
            "push rbx",
            "sub rsp, 0x28",
            "mov rbx, qword [rdx + rax*8]",
            "mov rdi, rbx",
            "call fcn.0040291d",
            "mov r12d, eax",
            "lea eax, [rax - 1]",
            "cmp ebp, eax",
            "je 0x4053f8",
            "lea edx, [rbp + 1]",
            "mov ecx, ebp",
            "movsxd rsi, ebp",
            "not ecx",
            "mov rdi, rbx",
            "movsxd rdx, edx",
            "add ecx, r12d",
            "imul rdx, rdx, 0x21",
            "imul rsi, rsi, 0x21",
            "imul rcx, rcx, 0x21",
            "add rdx, 0x65",
            "add rsi, 0x65",
            "call fcn.00412a77",
            "dec r12d",
            "mov rdi, rbx",
            "mov esi, r12d",
            "call fcn.004028d4",
            "test r12d, r12d",
            "jne 0x405445",
            "cmp rbx, qword [r13]",
            "jne 0x405445",
            "cmp byte [rbx + 0xe0], 1",
            "je 0x405439",
            "lea rcx, str.btrfs_del_ptr",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_level_root__node____1_",
            "mov edx, 0x9f1",
            "call sym.imp.__assert_fail",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.004028e3",
            "jmp 0x40546c",
            "test ebp, ebp",
            "jne 0x40546c",
            "lea rsi, [rsp + 0xf]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.004028a7",
            "lea ecx, [r15 + 1]",
            "lea rdx, [rsp + 0xf]",
            "mov rsi, r14",
            "mov rdi, r13",
            "call fcn.00403d91",
            "mov rdi, rbx",
            "call fcn.00408149",
            "add rsp, 0x28",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00404fa4": {
        "function_address": "0x00404fa4",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "movsxd rbp, edx",
            "lea eax, [rbp + 1]",
            "push rbx",
            "mov rbx, rsi",
            "cdqe",
            "sub rsp, 0x20",
            "mov rdi, qword [rsi + rax*8]",
            "test rdi, rdi",
            "je 0x404fd8",
            "mov edx, dword [rsi + rax*4 + 0x40]",
            "lea rsi, [rsp + 0xf]",
            "call fcn.004028a7",
            "lea rsi, [rsp + 0xf]",
            "jmp 0x404fda",
            "xor esi, esi",
            "test ebp, ebp",
            "jne 0x404feb",
            "mov rdx, qword [rbx]",
            "mov rdi, r12",
            "call fcn.00404ccc",
            "jmp 0x404ff7",
            "mov rdx, qword [rbx + rbp*8]",
            "mov rdi, r12",
            "call fcn.004039e5",
            "cmp eax, 1",
            "sbb eax, eax",
            "add rsp, 0x20",
            "pop rbx",
            "not eax",
            "pop rbp",
            "and eax, 0xfffffffb",
            "pop r12",
            "ret"
        ]
    },
    "fcn.004029ca": {
        "function_address": "0x004029ca",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, rcx",
            "sub rsp, 0x18",
            "mov dword [rsp + 8], r8d",
            "call fcn.0040291d",
            "mov rdi, r13",
            "mov ebp, eax",
            "call fcn.0040291d",
            "mov rdi, r12",
            "mov r14d, eax",
            "mov r15d, dword [r15]",
            "call fcn.00402915",
            "cmp rax, qword [rbx]",
            "mov r8d, dword [rsp + 8]",
            "je 0x402a2f",
            "lea rcx, str.push_node_left",
            "mov edx, 0x4d0",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_src____trans__transid_",
            "jmp 0x402a60",
            "mov rdi, r13",
            "mov dword [rsp + 8], r8d",
            "call fcn.00402915",
            "cmp rax, qword [rbx]",
            "mov r8d, dword [rsp + 8]",
            "je 0x402a65",
            "lea rcx, str.push_node_left",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_dst____trans__transid_",
            "mov edx, 0x4d1",
            "call sym.imp.__assert_fail",
            "cmp ebp, 8",
            "jg 0x402a78",
            "test r8d, r8d",
            "mov eax, 1",
            "je 0x402b3e",
            "mov eax, r15d",
            "xor edx, edx",
            "mov ecx, 0x21",
            "sub rax, 0x65",
            "div rcx",
            "sub eax, r14d",
            "test eax, eax",
            "jle 0x402b39",
            "test r8d, r8d",
            "je 0x402ac0",
            "cmp eax, ebp",
            "mov ebx, ebp",
            "cmovle ebx, eax",
            "cmp ebx, ebp",
            "jge 0x402ac8",
            "mov eax, ebp",
            "sub eax, ebx",
            "cmp eax, 7",
            "jg 0x402ac8",
            "cmp ebx, 8",
            "mov eax, 1",
            "jle 0x402b3e",
            "sub ebx, 8",
            "jmp 0x402ac8",
            "lea ebx, [rbp - 8]",
            "cmp ebx, eax",
            "cmovg ebx, eax",
            "movsxd r15, ebx",
            "movsxd rdx, r14d",
            "mov ecx, 0x65",
            "imul r15, r15, 0x21",
            "mov rsi, r12",
            "mov rdi, r13",
            "imul rdx, rdx, 0x21",
            "mov r8, r15",
            "add rdx, 0x65",
            "call fcn.00412a64",
            "cmp ebx, ebp",
            "jge 0x402b0d",
            "mov ecx, ebp",
            "lea rdx, [r15 + 0x65]",
            "mov esi, 0x65",
            "sub ecx, ebx",
            "mov rdi, r12",
            "movsxd rcx, ecx",
            "imul rcx, rcx, 0x21",
            "call fcn.00412a77",
            "mov esi, ebp",
            "mov rdi, r12",
            "sub esi, ebx",
            "call fcn.004028d4",
            "lea esi, [r14 + rbx]",
            "mov rdi, r13",
            "call fcn.004028d4",
            "mov rdi, r12",
            "call fcn.00408149",
            "mov rdi, r13",
            "call fcn.00408149",
            "xor eax, eax",
            "jmp 0x402b3e",
            "mov eax, 1",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00402b4d": {
        "function_address": "0x00402b4d",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rdi",
            "mov rdi, rcx",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x10",
            "call fcn.00402915",
            "cmp rax, qword [r12]",
            "je 0x402b8f",
            "lea rcx, str.balance_node_right",
            "mov edx, 0x510",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_src____trans__transid_",
            "jmp 0x402bb7",
            "mov rdi, rbx",
            "call fcn.00402915",
            "cmp rax, qword [r12]",
            "je 0x402bbc",
            "lea rcx, str.balance_node_right",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_dst____trans__transid_",
            "mov edx, 0x511",
            "call sym.imp.__assert_fail",
            "mov rdi, rbp",
            "call fcn.0040291d",
            "mov rdi, rbx",
            "mov r12d, eax",
            "call fcn.0040291d",
            "mov r14d, eax",
            "mov eax, dword [r13]",
            "xor edx, edx",
            "mov ecx, 0x21",
            "sub rax, 0x65",
            "div rcx",
            "mov r13d, eax",
            "mov eax, 1",
            "sub r13d, r14d",
            "test r13d, r13d",
            "jle 0x402c85",
            "cmp r12d, 3",
            "jle 0x402c85",
            "mov edx, r12d",
            "sar edx, 1",
            "inc edx",
            "cmp edx, r12d",
            "jge 0x402c85",
            "cmp edx, r13d",
            "movsxd rcx, r14d",
            "mov rdi, rbx",
            "cmovle r13d, edx",
            "mov edx, 0x65",
            "movsxd r8, r13d",
            "sub r12d, r13d",
            "imul r8, r8, 0x21",
            "imul rcx, rcx, 0x21",
            "lea rsi, [r8 + 0x65]",
            "mov qword [rsp + 8], r8",
            "call fcn.00412a77",
            "movsxd rcx, r12d",
            "mov r8, qword [rsp + 8]",
            "mov edx, 0x65",
            "imul rcx, rcx, 0x21",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "add rcx, 0x65",
            "call fcn.00412a64",
            "mov esi, r12d",
            "mov rdi, rbp",
            "call fcn.004028d4",
            "lea esi, [r14 + r13]",
            "mov rdi, rbx",
            "call fcn.004028d4",
            "mov rdi, rbp",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00408149",
            "xor eax, eax",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.00403be0": {
        "function_address": "0x00403be0",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x58",
            "mov eax, dword [rsi + 0x80]",
            "dec edx",
            "mov qword [rsp + 0x20], r8",
            "mov dword [rsp + 0x28], eax",
            "jne 0x403d82",
            "mov rbx, qword [rsi + 8]",
            "test rbx, rbx",
            "je 0x403d82",
            "movsxd rax, ecx",
            "mov r14, rdi",
            "mov r12d, ecx",
            "imul rax, rax, 0x21",
            "mov rbp, qword [rbx + rax + 0xf2]",
            "mov eax, dword [rdi + 0x1f8]",
            "mov rsi, rbp",
            "mov edx, eax",
            "mov dword [rsp + 0x1c], eax",
            "call fcn.0040754f",
            "test rax, rax",
            "je 0x403c50",
            "mov rdi, rax",
            "call fcn.00412164",
            "jmp 0x403d82",
            "mov rdi, rbx",
            "mov r15, rbp",
            "call fcn.0040291d",
            "mov dword [rsp + 0x18], 0",
            "mov dword [rsp + 0x2c], eax",
            "mov qword [rsp + 0x10], 0",
            "cmp dword [rsp + 0x28], 0",
            "jge 0x403c85",
            "test r12d, r12d",
            "je 0x403d82",
            "dec r12d",
            "jmp 0x403c95",
            "je 0x403c95",
            "inc r12d",
            "cmp r12d, dword [rsp + 0x2c]",
            "jae 0x403d82",
            "cmp dword [r13 + 0x80], 0",
            "js 0x403cbe",
            "movsxd rax, r12d",
            "imul rax, rax, 0x21",
            "lea rax, [rbx + rax + 0xe1]",
            "mov r8, qword [rax + 0x11]",
            "cmp r8, r15",
            "ja 0x403cec",
            "cmp r8, rbp",
            "jb 0x403cec",
            "jmp 0x403d14",
            "cmp qword [rsp + 0x20], 0",
            "je 0x403c9f",
            "lea rsi, [rsp + 0x3f]",
            "mov edx, r12d",
            "mov rdi, rbx",
            "call fcn.004028a7",
            "mov rax, qword [rsp + 0x3f]",
            "cmp rax, qword [rsp + 0x20]",
            "mov qword [rsp + 0x30], rax",
            "je 0x403c9f",
            "jmp 0x403d82",
            "cmp r8, rbp",
            "jae 0x403d00",
            "mov rdx, rbp",
            "sub rdx, r8",
            "cmp rdx, 0x8000",
            "jbe 0x403d14",
            "cmp r8, r15",
            "jbe 0x403d3a",
            "mov rdx, r8",
            "sub rdx, r15",
            "cmp rdx, 0x8000",
            "ja 0x403d3a",
            "mov rcx, qword [rax + 0x19]",
            "mov edx, dword [rsp + 0x1c]",
            "mov rsi, r8",
            "mov rdi, r14",
            "mov qword [rsp + 8], r8",
            "call fcn.0040850e",
            "mov eax, dword [rsp + 0x1c]",
            "mov r8, qword [rsp + 8]",
            "add qword [rsp + 0x10], rax",
            "inc dword [rsp + 0x18]",
            "cmp dword [r13 + 0x80], 1",
            "jg 0x403d5a",
            "cmp qword [rsp + 0x10], 0x40000",
            "ja 0x403d82",
            "cmp dword [rsp + 0x18], 0x20",
            "ja 0x403d82",
            "cmp qword [rsp + 0x10], 0x100000",
            "ja 0x403d82",
            "cmp dword [rsp + 0x18], 0x80",
            "ja 0x403d82",
            "cmp rbp, r8",
            "cmova rbp, r8",
            "cmp r15, r8",
            "cmovb r15, r8",
            "jmp 0x403c70",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004046d9": {
        "function_address": "0x004046d9",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "mov rbx, rcx",
            "sub rsp, 0x88",
            "test r8d, r8d",
            "mov qword [rsp + 0x20], rdi",
            "mov qword [rsp + 0x28], rdx",
            "mov dword [rsp + 0x1c], r8d",
            "mov dword [rsp + 0x40], r9d",
            "jne 0x404715",
            "cmp qword [rbx + 8], 0",
            "jne 0x404779",
            "jmp 0x40479d",
            "mov rdx, qword [rsp + 0x28]",
            "cmp byte [rdx + 8], 0x54",
            "je 0x404709",
            "mov ecx, dword [rsp + 0x1c]",
            "mov rdi, qword [rsp + 0x20]",
            "xor r8d, r8d",
            "mov rdx, rbx",
            "call fcn.004043a0",
            "cmp eax, 0",
            "jl 0x404cba",
            "jne 0x404752",
            "mov rsi, qword [rbx]",
            "mov rdi, r12",
            "call fcn.00403f1a",
            "cmp eax, dword [rsp + 0x1c]",
            "jl 0x404709",
            "jmp 0x404772",
            "mov ecx, dword [rsp + 0x1c]",
            "mov rdi, qword [rsp + 0x20]",
            "xor r8d, r8d",
            "mov rdx, rbx",
            "mov rsi, r12",
            "call fcn.00403f9b",
            "test eax, eax",
            "jns 0x40473f",
            "jmp 0x404cba",
            "xor eax, eax",
            "jmp 0x404cba",
            "lea rax, [r12 + 0x1f8]",
            "lea rdx, [r12 + 0x1f4]",
            "mov dword [rsp + 0x34], 0",
            "mov qword [rsp + 0x38], rax",
            "mov qword [rsp + 0x48], rdx",
            "jmp 0x4047c3",
            "mov rdi, qword [rsp + 0x20]",
            "mov ecx, 1",
            "mov rdx, rbx",
            "mov rsi, r12",
            "call fcn.00402eaa",
            "test eax, eax",
            "je 0x404779",
            "jmp 0x404cba",
            "mov dword [rsp + 0x34], 1",
            "mov r15, qword [rbx]",
            "mov eax, dword [rbx + 0x40]",
            "mov rdi, r15",
            "mov dword [rsp + 0x14], eax",
            "call fcn.0040291d",
            "mov r13d, eax",
            "mov dword [rsp + 0x18], eax",
            "inc r13d",
            "shr r13d, 1",
            "cmp r13d, dword [rsp + 0x14]",
            "jg 0x404831",
            "dec eax",
            "jne 0x4047fd",
            "mov eax, dword [rsp + 0x18]",
            "cmp dword [rsp + 0x14], eax",
            "jae 0x404c95",
            "jmp 0x40482b",
            "mov edx, dword [rsp + 0x18]",
            "mov esi, r13d",
            "mov rdi, r15",
            "sub edx, r13d",
            "call fcn.0040295a",
            "mov edx, dword [r12 + 0x1f8]",
            "add eax, dword [rsp + 0x1c]",
            "sub rdx, 0x65",
            "cdqe",
            "cmp rax, rdx",
            "ja 0x4047ed",
            "jmp 0x404c7a",
            "mov edx, dword [rsp + 0x18]",
            "jmp 0x40489b",
            "mov edx, r13d",
            "xor esi, esi",
            "mov rdi, r15",
            "call fcn.0040295a",
            "mov edx, dword [r12 + 0x1f8]",
            "add eax, dword [rsp + 0x1c]",
            "sub rdx, 0x65",
            "cdqe",
            "cmp rax, rdx",
            "jbe 0x404c7a",
            "cmp dword [rsp + 0x40], 0",
            "jne 0x404872",
            "cmp dword [rsp + 0x1c], 0",
            "je 0x404872",
            "cmp dword [rsp + 0x14], 0",
            "je 0x404c95",
            "cmp dword [rsp + 0x40], 0",
            "jne 0x404880",
            "cmp dword [rsp + 0x1c], 0",
            "jne 0x40488b",
            "cmp dword [rsp + 0x14], 0",
            "je 0x404c67",
            "mov eax, dword [rsp + 0x18]",
            "cmp dword [rsp + 0x14], eax",
            "je 0x404c75",
            "mov edx, eax",
            "sub edx, dword [rsp + 0x14]",
            "mov esi, dword [rsp + 0x14]",
            "mov rdi, r15",
            "call fcn.0040295a",
            "mov edx, dword [r12 + 0x1f8]",
            "add eax, dword [rsp + 0x1c]",
            "mov r13d, dword [rsp + 0x14]",
            "cdqe",
            "sub rdx, 0x65",
            "cmp rdx, rax",
            "sbb r14d, r14d",
            "not r14d",
            "add r14d, 2",
            "jmp 0x404c80",
            "mov qword [rsp + 8], 0",
            "mov rax, qword [r15 + 0x30]",
            "lea r8, [rsp + 0x5e]",
            "mov rcx, qword [r12 + 0x1c7]",
            "mov edx, dword [r12 + 0x1f8]",
            "xor r9d, r9d",
            "mov rdi, qword [rsp + 0x20]",
            "mov rsi, r12",
            "mov qword [rsp], rax",
            "call fcn.0040dbc2",
            "cmp rax, 0xfffffffffffff000",
            "mov rbp, rax",
            "jbe 0x404934",
            "lea rcx, str.split_leaf",
            "mov edx, 0x7fe",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__1_",
            "jmp 0x404bc6",
            "mov rdi, rax",
            "mov ecx, 0x65",
            "xor edx, edx",
            "xor esi, esi",
            "call fcn.00412a8f",
            "mov rsi, qword [rbp + 0x30]",
            "mov rdi, rbp",
            "call fcn.004028bc",
            "mov rdx, qword [rsp + 0x20]",
            "mov rdi, rbp",
            "mov rsi, qword [rdx]",
            "call fcn.004028c4",
            "mov rdi, rbp",
            "call fcn.00402dd2",
            "mov rsi, qword [r12 + 0x1c7]",
            "mov rdi, rbp",
            "call fcn.004028cc",
            "xor esi, esi",
            "mov rdi, rbp",
            "call fcn.004028e3",
            "mov rsi, qword [r12 + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rdi, rbp",
            "call fcn.00412a59",
            "mov rsi, qword [r12 + 0x1d8]",
            "mov ecx, 0x10",
            "mov edx, 0x40",
            "mov rdi, rbp",
            "add rsi, 0x10",
            "call fcn.00412a59",
            "test r14d, r14d",
            "jne 0x404a89",
            "xor esi, esi",
            "cmp r13d, dword [rsp + 0x14]",
            "mov rdi, rbp",
            "jg 0x404a1b",
            "call fcn.004028d4",
            "mov eax, dword [rbx + 0x44]",
            "mov r8, qword [rbp + 0x30]",
            "lea rsi, [r12 + 0x1f4]",
            "mov rdi, qword [rsp + 0x20]",
            "lea rcx, [rsp + 0x5e]",
            "mov rdx, rbx",
            "mov dword [rsp], 1",
            "lea r9d, [rax + 1]",
            "call fcn.00402c92",
            "mov rdi, qword [rbx]",
            "mov r13d, eax",
            "call fcn.00412164",
            "mov qword [rbx], rbp",
            "mov dword [rbx + 0x40], 0",
            "inc dword [rbx + 0x44]",
            "jmp 0x404a79",
            "call fcn.004028d4",
            "mov r8, qword [rbp + 0x30]",
            "mov r9d, dword [rbx + 0x44]",
            "lea rsi, [r12 + 0x1f4]",
            "mov rdi, qword [rsp + 0x20]",
            "lea rcx, [rsp + 0x5e]",
            "mov rdx, rbx",
            "mov dword [rsp], 1",
            "call fcn.00402c92",
            "mov rdi, qword [rbx]",
            "mov r13d, eax",
            "call fcn.00412164",
            "cmp dword [rbx + 0x44], 0",
            "mov qword [rbx], rbp",
            "mov dword [rbx + 0x40], 0",
            "jne 0x404a79",
            "lea rdx, [rsp + 0x5e]",
            "mov ecx, 1",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00403d91",
            "mov rdi, rbp",
            "call fcn.00408149",
            "mov eax, r13d",
            "jmp 0x404cba",
            "mov eax, dword [rsp + 0x18]",
            "mov rdi, rbp",
            "sub eax, r13d",
            "mov esi, eax",
            "mov dword [rsp + 0x18], eax",
            "call fcn.004028d4",
            "mov esi, r13d",
            "mov rdi, r15",
            "call fcn.0040284c",
            "mov rdi, qword [rsp + 0x38]",
            "mov rsi, r15",
            "mov dword [rsp + 0x30], eax",
            "call fcn.0040292c",
            "movsxd r8, dword [rsp + 0x18]",
            "movsxd rcx, r13d",
            "mov edx, 0x65",
            "imul rcx, rcx, 0x19",
            "mov rsi, r15",
            "mov rdi, rbp",
            "mov dword [rsp + 0x44], eax",
            "imul r8, r8, 0x19",
            "add rcx, 0x65",
            "call fcn.00412a64",
            "mov rdi, qword [rsp + 0x38]",
            "mov rsi, r15",
            "call fcn.0040292c",
            "mov r8d, dword [rsp + 0x30]",
            "sub r8d, dword [rsp + 0x44]",
            "mov ecx, eax",
            "mov edx, dword [r12 + 0x1f8]",
            "add rcx, 0x65",
            "mov rsi, r15",
            "mov rdi, rbp",
            "movsxd r8, r8d",
            "sub rdx, r8",
            "call fcn.00412a64",
            "mov esi, r13d",
            "mov rdi, r15",
            "call fcn.0040284c",
            "mov ecx, dword [r12 + 0x1f8]",
            "xor edx, edx",
            "sub ecx, 0x65",
            "sub ecx, eax",
            "mov eax, 0x65",
            "jmp 0x404b46",
            "add dword [rbp + rax + 0x8d], ecx",
            "inc edx",
            "add rax, 0x19",
            "cmp edx, dword [rsp + 0x18]",
            "jl 0x404b39",
            "mov esi, r13d",
            "mov rdi, r15",
            "call fcn.004028d4",
            "lea rsi, [rsp + 0x6f]",
            "xor edx, edx",
            "mov rdi, rbp",
            "call fcn.00402862",
            "mov eax, dword [rbx + 0x44]",
            "mov r8, qword [rbp + 0x30]",
            "lea rcx, [rsp + 0x6f]",
            "mov rsi, qword [rsp + 0x48]",
            "mov rdi, qword [rsp + 0x20]",
            "mov rdx, rbx",
            "mov dword [rsp], 1",
            "lea r9d, [rax + 1]",
            "call fcn.00402c92",
            "mov rdi, rbp",
            "mov dword [rsp + 0x18], eax",
            "call fcn.00408149",
            "mov rdi, r15",
            "call fcn.00408149",
            "mov edx, dword [rsp + 0x14]",
            "cmp dword [rbx + 0x40], edx",
            "je 0x404bcb",
            "lea rcx, str.copy_for_split",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__path__slots_0____slot_",
            "mov edx, 0x790",
            "call sym.imp.__assert_fail",
            "cmp r13d, dword [rsp + 0x14]",
            "jg 0x404be6",
            "mov rdi, qword [rbx]",
            "call fcn.00412164",
            "mov qword [rbx], rbp",
            "sub dword [rbx + 0x40], r13d",
            "inc dword [rbx + 0x44]",
            "jmp 0x404bee",
            "mov rdi, rbp",
            "call fcn.00412164",
            "cmp dword [rbx + 0x40], 0",
            "jns 0x404c10",
            "lea rcx, str.copy_for_split",
            "mov edx, 0x79b",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__path__slots_0____0_",
            "jmp 0x404bc6",
            "cmp dword [rsp + 0x18], 0",
            "je 0x404c33",
            "lea rcx, str.split_leaf",
            "mov edx, 0x831",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__ret_",
            "jmp 0x404bc6",
            "cmp r14d, 2",
            "jne 0x404772",
            "cmp dword [rsp + 0x34], 0",
            "je 0x4047bb",
            "lea rcx, str.split_leaf",
            "mov edx, 0x834",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__num_doubles___0_",
            "jmp 0x404bc6",
            "mov r14d, 1",
            "mov r13d, 1",
            "jmp 0x404c80",
            "mov r13d, dword [rsp + 0x14]",
            "mov r14d, 1",
            "lea rsi, [rsp + 0x5e]",
            "mov edx, r13d",
            "mov rdi, r15",
            "call fcn.00402862",
            "jmp 0x4048d4",
            "mov rdx, qword [rsp + 0x28]",
            "xor r14d, r14d",
            "mov rax, qword [rdx + 9]",
            "mov qword [rsp + 0x67], rax",
            "mov al, byte [rdx + 8]",
            "mov byte [rsp + 0x66], al",
            "mov rax, qword [rdx]",
            "mov qword [rsp + 0x5e], rax",
            "jmp 0x4048d4",
            "add rsp, 0x88",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00408146": {
        "function_address": "0x00408146",
        "instructions": [
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.004129c6": {
        "function_address": "0x004129c6",
        "instructions": [
            "test rdi, rdi",
            "je 0x4129d5",
            "mov eax, dword [rdi + 0x74]",
            "shr eax, 2",
            "and eax, 1",
            "ret",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.00402900": {
        "function_address": "0x00402900",
        "instructions": [
            "movsxd rdx, edx",
            "mov ecx, 0x11",
            "imul rdx, rdx, 0x19",
            "add rdx, 0x65",
            "jmp fcn.00412a59"
        ]
    },
    "fcn.00405485": {
        "function_address": "0x00405485",
        "instructions": [
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, rcx",
            "sub rsp, 0x20",
            "mov qword [rsp + 0x18], rdx",
            "call fcn.00402915",
            "cmp rax, qword [rbx]",
            "mov rdx, qword [rsp + 0x18]",
            "je 0x4054cc",
            "lea rcx, str.btrfs_del_leaf",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_header_generation_leaf____trans__transid_",
            "mov edx, 0xa0f",
            "call sym.imp.__assert_fail",
            "mov r8d, dword [rdx + 0x44]",
            "mov ecx, 1",
            "mov rsi, r12",
            "mov rdi, rbx",
            "call fcn.00405399",
            "test eax, eax",
            "jne 0x405512",
            "mov ecx, dword [rbp + 0x40]",
            "mov rdx, qword [rbp + 0x30]",
            "xor r8d, r8d",
            "mov r9, qword [r12 + 0x1c7]",
            "mov qword [rsp + 8], 0",
            "mov rsi, r12",
            "mov qword [rsp], 0",
            "mov rdi, rbx",
            "call sym.btrfs_free_extent",
            "add rsp, 0x20",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00406e25": {
        "function_address": "0x00406e25",
        "instructions": [
            "push r14",
            "xor eax, eax",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "jmp 0x406e67",
            "mov r14d, dword [rbx + rax*4 + 0x44]",
            "test r14d, r14d",
            "jne 0x406e4c",
            "inc rax",
            "cmp rax, 7",
            "jne 0x406e67",
            "jmp 0x406eb1",
            "dec r14d",
            "mov rdi, r13",
            "mov edx, r14d",
            "call fcn.00403b70",
            "mov r12, rax",
            "movsxd rax, ebp",
            "mov dword [rbx + rax*4 + 0x40], r14d",
            "jmp 0x406e76",
            "mov rsi, qword [rbx + rax*8 + 8]",
            "lea ebp, [rax + 1]",
            "test rsi, rsi",
            "jne 0x406e37",
            "jmp 0x406eb1",
            "dec ebp",
            "movsxd r14, ebp",
            "mov rdi, qword [rbx + r14*8]",
            "call fcn.00412164",
            "mov rdi, r12",
            "call fcn.0040291d",
            "cmp eax, 1",
            "mov edx, eax",
            "mov qword [rbx + r14*8], r12",
            "adc edx, 0xffffffff",
            "test ebp, ebp",
            "mov dword [rbx + r14*4 + 0x40], edx",
            "je 0x406eb8",
            "mov rsi, r12",
            "mov rdi, r13",
            "call fcn.00403b70",
            "mov r12, rax",
            "jmp 0x406e76",
            "mov eax, 1",
            "jmp 0x406eba",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040cacf": {
        "function_address": "0x0040cacf",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x38",
            "mov r14, qword [rsi + 0x1d8]",
            "call fcn.00402e0b",
            "mov rbx, rax",
            "add r14, 0xb0",
            "test rax, rax",
            "je 0x40cc37",
            "xor ebp, ebp",
            "lea rcx, [rsp + 0x20]",
            "lea rdx, [rsp + 0x18]",
            "mov r8d, 1",
            "mov rsi, rbp",
            "mov rdi, r14",
            "call fcn.00412027",
            "test eax, eax",
            "je 0x40cb2e",
            "test rbp, rbp",
            "je 0x40cc2b",
            "jmp 0x40cb02",
            "mov rbp, qword [rsp + 0x20]",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdx, [rsp + 0x28]",
            "mov rdi, r14",
            "inc rbp",
            "call fcn.00412136",
            "test eax, eax",
            "je 0x40cb5a",
            "lea rcx, str.btrfs_write_dirty_block_groups",
            "mov edx, 0x707",
            "jmp 0x40cbbc",
            "mov rdx, qword [rsp + 0x20]",
            "mov rsi, qword [rsp + 0x18]",
            "xor r8d, r8d",
            "mov ecx, 1",
            "mov rdi, r14",
            "call fcn.00411cbb",
            "mov rax, qword [r15 + 0x1d8]",
            "mov r10, qword [rsp + 0x28]",
            "xor r8d, r8d",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rdi, r12",
            "mov r13, qword [rax + 0x28]",
            "lea rdx, [r10 + 0x30]",
            "mov qword [rsp + 8], r10",
            "mov rsi, r13",
            "call fcn.0040551b",
            "cmp eax, 0",
            "mov r10, qword [rsp + 8]",
            "jl 0x40cc10",
            "je 0x40cbcf",
            "lea rcx, str.write_one_cache_group",
            "mov edx, 0x6d8",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rax, qword [rbx]",
            "lea rsi, [r10 + 0x41]",
            "mov ecx, 0x18",
            "mov rdi, rax",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rax + rdx + 0xf2]",
            "mov qword [rsp + 8], rax",
            "add rdx, 0x65",
            "call fcn.00412a59",
            "mov rax, qword [rsp + 8]",
            "mov rdi, rax",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "mov rsi, r13",
            "mov rdi, r12",
            "call fcn.0040af4b",
            "mov rsi, r13",
            "mov rdi, r12",
            "call fcn.0040bd20",
            "jmp 0x40cb04",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "xor eax, eax",
            "jmp 0x40cc3c",
            "mov eax, 0xfffffff4",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412027": {
        "function_address": "0x00412027",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x18",
            "mov dword [rsp + 8], r8d",
            "call fcn.0041196c",
            "mov r8d, dword [rsp + 8]",
            "movsxd r13, r8d",
            "test rax, rax",
            "jne 0x412058",
            "mov eax, 1",
            "jmp 0x412082",
            "cmp qword [rax + 0x38], rbx",
            "jb 0x412078",
            "test qword [rax + 0x48], r13",
            "je 0x412078",
            "mov rdx, qword [rax + 0x30]",
            "mov qword [rbp], rdx",
            "mov rax, qword [rax + 0x38]",
            "mov qword [r12], rax",
            "xor eax, eax",
            "jmp 0x412082",
            "mov rdi, rax",
            "call fcn.004119e3",
            "jmp 0x41204c",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00412136": {
        "function_address": "0x00412136",
        "instructions": [
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "mov rbx, rsi",
            "push rcx",
            "call fcn.0041196c",
            "test rax, rax",
            "je 0x41215b",
            "cmp qword [rax + 0x30], rbx",
            "jne 0x41215b",
            "mov rax, qword [rax + 0x50]",
            "mov qword [rbp], rax",
            "xor eax, eax",
            "jmp 0x412160",
            "mov eax, 0xfffffffe",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00411cbb": {
        "function_address": "0x00411cbb",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "xor ebx, ebx",
            "sub rsp, 0x18",
            "mov dword [rsp + 0xc], ecx",
            "test rbx, rbx",
            "jne 0x411cf0",
            "call fcn.00411a4b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x411e05",
            "mov rsi, r15",
            "mov rdi, r12",
            "call fcn.0041196c",
            "test rax, rax",
            "mov r8, rax",
            "je 0x411df0",
            "mov rax, qword [rax + 0x30]",
            "cmp rax, r13",
            "ja 0x411df0",
            "cmp rax, r15",
            "mov r14, qword [r8 + 0x38]",
            "jae 0x411d80",
            "mov rsi, r8",
            "mov rcx, r15",
            "mov rdx, rbx",
            "mov rdi, r12",
            "mov qword [rsp], r8",
            "call fcn.00411ab3",
            "cmp eax, 0xffffffef",
            "mov r8, qword [rsp]",
            "jne 0x411d49",
            "lea rcx, str.clear_extent_bits",
            "mov edx, 0xf8",
            "jmp 0x411da8",
            "test eax, eax",
            "jne 0x411e0a",
            "cmp qword [r8 + 0x38], r13",
            "ja 0x411d78",
            "mov edx, dword [rsp + 0xc]",
            "mov rsi, r8",
            "mov rdi, r12",
            "call fcn.00411c59",
            "or ebp, eax",
            "cmp r14, 0xffffffffffffffff",
            "je 0x411e0a",
            "lea r15, [r14 + 1]",
            "jmp 0x411d7c",
            "mov r15, qword [r8 + 0x30]",
            "xor ebx, ebx",
            "jmp 0x411dfa",
            "cmp r14, r13",
            "jbe 0x411dce",
            "lea rcx, [r13 + 1]",
            "mov rdx, rbx",
            "mov rsi, r8",
            "mov rdi, r12",
            "call fcn.00411ab3",
            "cmp eax, 0xffffffef",
            "jne 0x411dbb",
            "lea rcx, str.clear_extent_bits",
            "mov edx, 0x10e",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__err___17_",
            "call sym.imp.__assert_fail",
            "mov edx, dword [rsp + 0xc]",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00411c59",
            "or ebp, eax",
            "jmp 0x411e0a",
            "mov edx, dword [rsp + 0xc]",
            "mov rsi, r8",
            "mov rdi, r12",
            "call fcn.00411c59",
            "or ebp, eax",
            "cmp r14, 0xffffffffffffffff",
            "je 0x411df0",
            "lea r15, [r14 + 1]",
            "jmp 0x411dfa",
            "test rbx, rbx",
            "je 0x411e0a",
            "mov rdi, rbx",
            "call fcn.00411a7c",
            "jmp 0x411e0a",
            "cmp r15, r13",
            "jbe 0x411cda",
            "jmp 0x411deb",
            "mov ebp, 0xfffffff4",
            "add rsp, 0x18",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00410048": {
        "function_address": "0x00410048",
        "instructions": [
            "push r14",
            "mov r14, rdx",
            "push r13",
            "mov r13, rcx",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x20",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x410089",
            "lea rcx, str.btrfs_update_root",
            "mov edx, 0x4d",
            "lea rsi, str.root_tree.c",
            "lea rdi, str.___path_",
            "jmp 0x4100c8",
            "xor r8d, r8d",
            "mov r9d, 1",
            "mov rcx, rax",
            "mov rdx, r14",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.0040551b",
            "cmp eax, 0",
            "jl 0x4101ad",
            "je 0x4100cd",
            "lea rcx, str.btrfs_update_root",
            "lea rsi, str.root_tree.c",
            "lea rdi, str.__ret___0_",
            "mov edx, 0x51",
            "call sym.imp.__assert_fail",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "imul rdx, rdx, 0x19",
            "lea rcx, [rdi + rdx + 0xe1]",
            "cmp dword [rcx + 0x15], 0x1b6",
            "mov edx, dword [rcx + 0x11]",
            "jbe 0x4100f1",
            "jmp 0x410179",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rdx, r14",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x4101ad",
            "mov ecx, dword [rbx + 0x40]",
            "mov r8d, 1",
            "mov rdx, rbx",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00406b84",
            "test eax, eax",
            "js 0x4101ad",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "lea r8, [rsp + 0x14]",
            "mov r9d, 1",
            "mov rcx, r14",
            "mov rdx, rbx",
            "mov rsi, r12",
            "mov rdi, rbp",
            "mov dword [rsp + 0x14], 0x1b7",
            "call fcn.004064c0",
            "test eax, eax",
            "js 0x4101ad",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rdi + rdx + 0xf2]",
            "mov rcx, qword [r13 + 0xa0]",
            "add rdx, 0x65",
            "mov rsi, r13",
            "mov dword [rsp + 8], eax",
            "mov qword [rsp + 0x18], rcx",
            "mov qword [r13 + 0xef], rcx",
            "mov ecx, 0x1b7",
            "call fcn.00412a59",
            "mov rdi, qword [rbx]",
            "call fcn.00408149",
            "mov eax, dword [rsp + 8]",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "call fcn.00402e4d",
            "mov eax, dword [rsp + 8]",
            "add rsp, 0x20",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.00406b84": {
        "function_address": "0x00406b84",
        "instructions": [
            "push r15",
            "xor r15d, r15d",
            "push r14",
            "mov r14d, ecx",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x48",
            "mov rbx, qword [rdx]",
            "movsxd rdx, ecx",
            "mov dword [rsp + 0x18], r8d",
            "add r8d, ecx",
            "lea eax, [r8 - 1]",
            "cdqe",
            "imul rax, rax, 0x19",
            "mov eax, dword [rbx + rax + 0xf2]",
            "mov dword [rsp + 0x1c], eax",
            "xor eax, eax",
            "jmp 0x406bdb",
            "lea rcx, [rax + rdx]",
            "inc rax",
            "imul rcx, rcx, 0x19",
            "add r15d, dword [rbx + rcx + 0xf6]",
            "cmp dword [rsp + 0x18], eax",
            "jg 0x406bc8",
            "mov rdi, rbx",
            "mov dword [rsp + 8], r8d",
            "call fcn.0040291d",
            "mov r8d, dword [rsp + 8]",
            "mov dword [rsp + 0x14], eax",
            "cmp r8d, eax",
            "je 0x406c76",
            "lea rdi, [rbp + 0x1f8]",
            "mov rsi, rbx",
            "call fcn.0040292c",
            "mov ecx, dword [rsp + 0x1c]",
            "movsxd rdx, eax",
            "movsxd rsi, r15d",
            "add rdx, 0x65",
            "mov rdi, rbx",
            "add rsi, rdx",
            "sub ecx, eax",
            "movsxd rcx, ecx",
            "call fcn.00412a77",
            "mov r8d, dword [rsp + 8]",
            "movsxd rdx, r8d",
            "imul rdx, rdx, 0x19",
            "add rdx, 0x65",
            "mov rax, rdx",
            "jmp 0x406c4d",
            "add dword [rbx + rax + 0x8d], r15d",
            "inc r8d",
            "add rax, 0x19",
            "cmp r8d, dword [rsp + 0x14]",
            "jb 0x406c3e",
            "mov ecx, dword [rsp + 0x14]",
            "movsxd rsi, r14d",
            "mov rdi, rbx",
            "imul rsi, rsi, 0x19",
            "sub ecx, r14d",
            "sub ecx, dword [rsp + 0x18]",
            "add rsi, 0x65",
            "imul rcx, rcx, 0x19",
            "call fcn.00412a77",
            "mov r15d, dword [rsp + 0x14]",
            "sub r15d, dword [rsp + 0x18]",
            "mov rdi, rbx",
            "mov esi, r15d",
            "call fcn.004028d4",
            "test r15d, r15d",
            "jne 0x406cd7",
            "cmp rbx, qword [rbp]",
            "jne 0x406ca5",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.004028e3",
            "jmp 0x406e10",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040813e",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00408146",
            "mov rcx, rbx",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.00405485",
            "mov r14d, eax",
            "jmp 0x406e13",
            "mov edx, r15d",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.0040295a",
            "test r14d, r14d",
            "movsxd r15, eax",
            "jne 0x406d10",
            "lea rsi, [rsp + 0x2f]",
            "xor edx, edx",
            "mov rdi, rbx",
            "call fcn.00402862",
            "lea rdx, [rsp + 0x2f]",
            "mov ecx, 1",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00403d91",
            "mov edx, dword [rbp + 0x1f8]",
            "sub rdx, 0x65",
            "shr rdx, 2",
            "cmp r15, rdx",
            "jae 0x406e08",
            "mov r15d, dword [r12 + 0x44]",
            "inc dword [rbx + 0x70]",
            "mov r8d, 1",
            "mov ecx, 1",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.00403f9b",
            "cmp eax, 0xffffffe4",
            "je 0x406d59",
            "mov edx, eax",
            "shr edx, 0x1f",
            "je 0x406d59",
            "mov r14d, eax",
            "jmp 0x406d5c",
            "xor r14d, r14d",
            "cmp qword [r12], rbx",
            "jne 0x406d95",
            "mov rdi, rbx",
            "call fcn.0040291d",
            "test eax, eax",
            "je 0x406d95",
            "mov r8d, 1",
            "mov ecx, 1",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.004043a0",
            "cmp eax, 0xffffffe4",
            "je 0x406d95",
            "mov edx, eax",
            "shr edx, 0x1f",
            "cmovne r14d, eax",
            "mov rdi, rbx",
            "call fcn.0040291d",
            "test eax, eax",
            "jne 0x406df6",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.0040813e",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00408146",
            "mov dword [r12 + 0x44], r15d",
            "mov rcx, rbx",
            "mov rdx, r12",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.00405485",
            "test eax, eax",
            "mov r14d, eax",
            "je 0x406dfe",
            "lea rcx, str.btrfs_del_items",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__ret_",
            "mov edx, 0xa79",
            "call sym.imp.__assert_fail",
            "mov rdi, rbx",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00412164",
            "jmp 0x406e13",
            "mov rdi, rbx",
            "call fcn.00408149",
            "xor r14d, r14d",
            "add rsp, 0x48",
            "mov eax, r14d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041255f": {
        "function_address": "0x0041255f",
        "instructions": [
            "push rbx",
            "mov edx, dword [rdi + 0x40]",
            "lea rsi, [rdi + 0x7c]",
            "mov rcx, qword [rdi + 0x38]",
            "mov rbx, rdi",
            "mov edi, dword [rdi + 0x78]",
            "call sym.imp.pwrite64",
            "test eax, eax",
            "mov edx, eax",
            "js 0x412588",
            "xor edx, edx",
            "cmp dword [rbx + 0x40], eax",
            "sete dl",
            "lea edx, [rdx + rdx*4 - 5]",
            "mov eax, edx",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.pwrite64": {
        "function_address": "0x00402260",
        "instructions": [
            "jmp qword [reloc.pwrite64]"
        ]
    },
    "fcn.0041470c": {
        "function_address": "0x0041470c",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x58",
            "test r9, r9",
            "mov qword [rsp + 0x40], rdi",
            "mov dword [rsp + 0xc], esi",
            "mov qword [rsp + 0x10], rdx",
            "mov qword [rsp + 0x28], rcx",
            "mov qword [rsp + 0x38], r8",
            "mov qword [rsp + 0x30], r9",
            "mov ebx, dword [rsp + 0x90]",
            "setne byte [rsp + 0x48]",
            "je 0x414752",
            "test esi, esi",
            "mov r13d, 1",
            "je 0x414758",
            "mov r13d, 8",
            "mov eax, dword [rsp + 0xc]",
            "mov ebp, 1",
            "xor r14d, r14d",
            "and eax, 1",
            "mov dword [rsp + 0x4c], eax",
            "mov rsi, qword [rsp + 0x10]",
            "mov rdi, qword [rsp + 0x40]",
            "call fcn.0041196c",
            "test rax, rax",
            "mov r12, rax",
            "je 0x414bfa",
            "mov rdx, qword [rax + 0x20]",
            "mov rsi, qword [rsp + 0x10]",
            "cmp rdx, rsi",
            "mov qword [rsp + 0x18], rdx",
            "ja 0x414bfa",
            "mov rax, qword [rax + 0x28]",
            "mov qword [rsp + 0x20], rax",
            "add rax, rdx",
            "cmp rax, rsi",
            "jb 0x414bfa",
            "cmp byte [rsp + 0x48], 0",
            "je 0x4147db",
            "movsxd rsi, r13d",
            "mov edi, 1",
            "shl rsi, 4",
            "add rsi, 8",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r15, rax",
            "jne 0x4147de",
            "jmp 0x414c01",
            "xor r15d, r15d",
            "cmp dword [rsp + 0xc], 1",
            "mov r10, qword [r12 + 0x30]",
            "jne 0x414802",
            "test r10b, 0x30",
            "je 0x4147f7",
            "mov ebp, dword [r12 + 0x48]",
            "jmp 0x414802",
            "test r10b, 0x40",
            "je 0x414802",
            "mov ebp, dword [r12 + 0x4c]",
            "test r10d, 0x180",
            "je 0x41485c",
            "cmp byte [rsp + 0x48], 0",
            "je 0x41485c",
            "cmp dword [rsp + 0x4c], 0",
            "jne 0x41481e",
            "cmp ebx, 1",
            "jle 0x41485c",
            "cmp qword [rsp + 0x98], 0",
            "je 0x41485c",
            "mov ebp, dword [r12 + 0x48]",
            "cmp r13d, ebp",
            "jl 0x41485c",
            "movsxd rdi, ebp",
            "mov qword [rsp], r10",
            "shl rdi, 3",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r14, rax",
            "mov r10, qword [rsp]",
            "jne 0x41485c",
            "mov rdi, r15",
            "call sym.imp.free",
            "jmp 0x414c01",
            "cmp r13d, ebp",
            "jge 0x414878",
            "cmp byte [rsp + 0x48], 0",
            "je 0x414878",
            "mov rdi, r15",
            "mov r13d, ebp",
            "call sym.imp.free",
            "jmp 0x41476b",
            "mov r13, qword [rsp + 0x10]",
            "sub r13, qword [rsp + 0x18]",
            "xor edx, edx",
            "movsxd rdi, dword [r12 + 0x40]",
            "mov rax, r13",
            "div rdi",
            "mov rbp, rax",
            "mov r9, rax",
            "imul rax, rdi",
            "cmp r13, rax",
            "jae 0x4148bd",
            "lea rcx, str.__btrfs_map_block",
            "mov edx, 0x54c",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__offset___stripe_offset_",
            "jmp 0x414b20",
            "mov r11, r13",
            "sub r11, rax",
            "test r10d, 0x1f8",
            "je 0x4148e8",
            "mov rax, qword [rsp + 0x20]",
            "sub rdi, r11",
            "mov rdx, qword [rsp + 0x28]",
            "sub rax, r13",
            "cmp rdi, rax",
            "cmova rdi, rax",
            "mov qword [rdx], rdi",
            "jmp 0x4148f8",
            "mov rax, qword [rsp + 0x20]",
            "mov rsi, qword [rsp + 0x28]",
            "sub rax, r13",
            "mov qword [rsi], rax",
            "cmp qword [rsp + 0x30], 0",
            "jne 0x414905",
            "jmp 0x414bf6",
            "mov dword [r15 + 4], 1",
            "mov rax, qword [r12 + 0x30]",
            "test al, 0x10",
            "je 0x414938",
            "cmp dword [rsp + 0xc], 1",
            "jne 0x41491f",
            "jmp 0x414989",
            "test ebx, ebx",
            "je 0x41492b",
            "lea edi, [rbx - 1]",
            "jmp 0x414af4",
            "movsxd r10, dword [r12 + 0x48]",
            "mov rax, rbp",
            "jmp 0x414ad9",
            "test al, 0x40",
            "je 0x41497e",
            "mov eax, dword [r12 + 0x48]",
            "mov r10d, dword [r12 + 0x4c]",
            "cdq",
            "mov edi, r10d",
            "idiv r10d",
            "xor edx, edx",
            "movsxd r9, eax",
            "mov rax, rbp",
            "div r9",
            "imul edi, edx",
            "cmp dword [rsp + 0xc], 1",
            "jne 0x414968",
            "mov dword [r15 + 4], r10d",
            "jmp 0x414971",
            "lea eax, [rdi + rbx - 1]",
            "test ebx, ebx",
            "cmovne edi, eax",
            "mov rax, rbp",
            "xor edx, edx",
            "div r9",
            "jmp 0x414af1",
            "test al, 0x20",
            "je 0x4149a8",
            "cmp dword [rsp + 0xc], 1",
            "jne 0x414999",
            "mov eax, dword [r12 + 0x48]",
            "xor edi, edi",
            "mov dword [r15 + 4], eax",
            "jmp 0x414af4",
            "lea eax, [rbx - 1]",
            "xor edi, edi",
            "test ebx, ebx",
            "cmovne edi, eax",
            "jmp 0x414af4",
            "test eax, 0x180",
            "je 0x414ae2",
            "test r14, r14",
            "mov rdi, r12",
            "je 0x414aa4",
            "call fcn.00412aa0",
            "movsxd r10, dword [r12 + 0x40]",
            "movsxd rbp, eax",
            "xor edx, edx",
            "mov edi, ebp",
            "mov rax, r13",
            "imul edi, r10d",
            "movsxd rdi, edi",
            "div rdi",
            "xor edx, edx",
            "imul rax, rdi",
            "movsxd rdi, dword [r12 + 0x48]",
            "div r10",
            "xor edx, edx",
            "div rbp",
            "xor edx, edx",
            "mov r9, rax",
            "div rdi",
            "imul rbp, r9",
            "mov dword [rsp + 0x10], edx",
            "sub edx, ebp",
            "mov ebx, ebp",
            "mov dword [rsp + 0x48], edx",
            "jmp 0x414a2f",
            "mov eax, dword [rsp + 0x48]",
            "movsxd rdi, dword [r12 + 0x40]",
            "add eax, r13d",
            "cdq",
            "idiv dword [r12 + 0x48]",
            "imul rdi, rbp",
            "movsxd rdx, edx",
            "inc rbp",
            "add rdi, qword [r12 + 0x20]",
            "mov qword [r14 + rdx*8], rdi",
            "mov edx, ebp",
            "mov rdi, r12",
            "mov qword [rsp], r9",
            "sub edx, ebx",
            "mov r13d, ebp",
            "mov dword [rsp + 0xc], edx",
            "call fcn.00412aa0",
            "cmp dword [rsp + 0xc], eax",
            "mov r9, qword [rsp]",
            "jl 0x414a0a",
            "mov ebx, dword [rsp + 0xc]",
            "add ebx, dword [rsp + 0x10]",
            "mov eax, ebx",
            "cdq",
            "idiv dword [r12 + 0x48]",
            "movsxd rdx, edx",
            "mov qword [r14 + rdx*8], 0xfffffffffffffffe",
            "test byte [r12 + 0x31], 1",
            "je 0x414a87",
            "lea eax, [rbx + 1]",
            "cdq",
            "idiv dword [r12 + 0x48]",
            "movsxd rdx, edx",
            "mov qword [r14 + rdx*8], 0xffffffffffffffff",
            "movsxd rax, dword [r12 + 0x40]",
            "mov rsi, qword [rsp + 0x28]",
            "xor edi, edi",
            "xor r11d, r11d",
            "mov qword [rsi], rax",
            "mov eax, dword [r12 + 0x48]",
            "mov dword [r15 + 4], eax",
            "jmp 0x414af4",
            "mov qword [rsp], r11",
            "call fcn.00412aa0",
            "xor edx, edx",
            "movsxd r9, eax",
            "mov r10d, eax",
            "mov rax, rbp",
            "mov r11, qword [rsp]",
            "div r9",
            "cmp ebx, 1",
            "mov r9, rax",
            "mov ebp, edx",
            "jle 0x414ace",
            "lea ebp, [r10 + rbx - 2]",
            "movsxd r10, dword [r12 + 0x48]",
            "movsxd rax, ebp",
            "add rax, r9",
            "xor edx, edx",
            "div r10",
            "mov edi, edx",
            "jmp 0x414af4",
            "movsxd r9, dword [r12 + 0x48]",
            "mov rax, rbp",
            "xor edx, edx",
            "div r9",
            "mov edi, edx",
            "mov r9, rax",
            "cmp edi, dword [r12 + 0x48]",
            "jge 0x414b06",
            "mov ebx, dword [r15 + 4]",
            "mov rdx, r15",
            "xor eax, eax",
            "jmp 0x414b57",
            "lea rcx, str.__btrfs_map_block",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__stripe_index___map__num_stripes_",
            "mov edx, 0x5b7",
            "call sym.imp.__assert_fail",
            "movsxd rbp, dword [r12 + 0x40]",
            "movsxd r10, r10d",
            "mov rcx, r11",
            "add r10, 5",
            "inc eax",
            "shl r10, 4",
            "add r10, r12",
            "add rcx, qword [r10 + 8]",
            "imul rbp, r9",
            "add rbp, rcx",
            "mov qword [rdx + 0x10], rbp",
            "mov r10, qword [r10]",
            "mov qword [rdx + 8], r10",
            "add rdx, 0x10",
            "cmp eax, ebx",
            "lea r10d, [rax + rdi]",
            "jl 0x414b25",
            "cmp qword [rsp + 0x38], 0",
            "mov rdx, qword [rsp + 0x30]",
            "mov qword [rdx], r15",
            "je 0x414b7c",
            "mov rax, qword [r12 + 0x30]",
            "mov rsi, qword [rsp + 0x38]",
            "mov qword [rsi], rax",
            "test r14, r14",
            "je 0x414bf6",
            "xor eax, eax",
            "xor edx, edx",
            "jmp 0x414bda",
            "mov r9, qword [r14 + rax*8 + 8]",
            "mov rdi, qword [r14 + rax*8]",
            "cmp rdi, r9",
            "jbe 0x414bd7",
            "lea edx, [rax + 1]",
            "shl rcx, 4",
            "mov qword [r14 + rax*8], r9",
            "add rcx, r15",
            "mov qword [r14 + rax*8 + 8], rdi",
            "movsxd rdx, edx",
            "mov r11, qword [rcx + 8]",
            "mov r10, qword [rcx + 0x10]",
            "shl rdx, 4",
            "add rdx, r15",
            "mov rbx, qword [rdx + 8]",
            "mov qword [rcx + 8], rbx",
            "mov rbx, qword [rdx + 0x10]",
            "mov qword [rcx + 0x10], rbx",
            "mov qword [rdx + 8], r11",
            "mov qword [rdx + 0x10], r10",
            "mov edx, 1",
            "inc rax",
            "mov edi, dword [r15 + 4]",
            "movsxd rcx, eax",
            "dec edi",
            "cmp ecx, edi",
            "jl 0x414b87",
            "test edx, edx",
            "jne 0x414b81",
            "mov rax, qword [rsp + 0x98]",
            "mov qword [rax], r14",
            "xor eax, eax",
            "jmp 0x414c06",
            "mov eax, 0xfffffffe",
            "jmp 0x414c06",
            "mov eax, 0xfffffff4",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041196c": {
        "function_address": "0x0041196c",
        "instructions": [
            "sub rsp, 0x28",
            "lea rdx, [fcn.004117b4]",
            "mov qword [rsp + 0x10], rsi",
            "lea rsi, [rsp + 8]",
            "mov rcx, rsp",
            "mov qword [rsp + 0x18], 1",
            "call fcn.0041ca98",
            "test rax, rax",
            "jne 0x41199b",
            "mov rax, qword [rsp]",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x004021c0",
        "instructions": [
            "jmp qword [reloc.calloc]"
        ]
    },
    "fcn.00412aa0": {
        "function_address": "0x00412aa0",
        "instructions": [
            "mov rcx, qword [rdi + 0x30]",
            "mov eax, dword [rdi + 0x48]",
            "mov edx, 1",
            "test cl, 0x80",
            "jne 0x412abc",
            "mov edx, ecx",
            "shl edx, 0x17",
            "sar edx, 0x1f",
            "and edx, 2",
            "sub eax, edx",
            "ret"
        ]
    },
    "fcn.00412535": {
        "function_address": "0x00412535",
        "instructions": [
            "push rbx",
            "lea rsi, [rdi + rsi + 0x7c]",
            "mov rcx, qword [rdi + 0x38]",
            "mov edi, dword [rdi + 0x78]",
            "mov rbx, rdx",
            "call sym.imp.pread64",
            "test eax, eax",
            "js 0x41255d",
            "cdqe",
            "cmp rax, rbx",
            "sete al",
            "movzx eax, al",
            "lea eax, [rax + rax*4 - 5]",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0041535f": {
        "function_address": "0x0041535f",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rcx",
            "sub rsp, 0x48",
            "mov eax, dword [rdx + 4]",
            "mov r15d, dword [rsi + 0x40]",
            "mov qword [rsp + 0x38], rdi",
            "mov qword [rsp + 8], r8",
            "movsxd rdi, eax",
            "mov dword [rsp + 0x34], eax",
            "shl rdi, 3",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r12, rax",
            "mov r8, qword [rsp + 8]",
            "jne 0x4153c0",
            "lea rcx, str.write_raid56_with_parity",
            "mov edx, 0x77d",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___ebs_",
            "jmp 0x415430",
            "movsxd rax, r15d",
            "mov rdx, qword [r13 + 0x30]",
            "cmp rbx, rax",
            "lea rax, [rbx + 0x80]",
            "cmova r15d, ebx",
            "xor r9d, r9d",
            "mov qword [rsp + 0x20], rdx",
            "mov qword [rsp + 0x28], rax",
            "jmp 0x41552f",
            "cmp qword [r8 + r9*8], 0xfffffffffffffffd",
            "ja 0x415630",
            "mov rdi, qword [rsp + 0x28]",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp], r9",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "mov r8, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "jne 0x415435",
            "lea rcx, str.split_eb_for_raid56",
            "lea rsi, str.volumes.c",
            "lea rdi, [0x0041e6fe]",
            "mov edx, 0x75a",
            "call sym.imp.__assert_fail",
            "mov rcx, qword [rsp + 0x28]",
            "xor eax, eax",
            "mov rdi, rbp",
            "rep stosb byte [rdi], al",
            "mov rdx, qword [r8 + r9*8]",
            "cmp qword [rsp + 0x20], rdx",
            "mov dword [rbp + 0x40], ebx",
            "mov dword [rbp + 0x70], 1",
            "mov dword [rbp + 0x74], 0",
            "mov dword [rbp + 0x78], 0xffffffff",
            "mov qword [rbp + 0x30], rdx",
            "mov qword [rbp + 0x38], 0xffffffffffffffff",
            "ja 0x415486",
            "mov ecx, dword [r13 + 0x40]",
            "lea rax, [rdx + rbx]",
            "add rcx, qword [rsp + 0x20]",
            "cmp rcx, rax",
            "jae 0x415512",
            "mov rdi, qword [rsp + 0x38]",
            "xor edx, edx",
            "mov rsi, rbp",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp], r9",
            "call fcn.0040756f",
            "test eax, eax",
            "mov r8, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "jne 0x415760",
            "mov edi, dword [rbp + 0x40]",
            "mov rax, qword [rbp + 0x30]",
            "mov rdx, qword [r13 + 0x30]",
            "lea rcx, [rdi + rax]",
            "cmp rcx, rdx",
            "jbe 0x415528",
            "mov ecx, dword [r13 + 0x40]",
            "lea rsi, [rcx + rdx]",
            "cmp rax, rsi",
            "jae 0x415528",
            "mov rsi, rax",
            "xor r10d, r10d",
            "mov r11, rdx",
            "sub rsi, rdx",
            "cmp rax, rdx",
            "cmovbe rsi, r10",
            "sub r11, rax",
            "cmp rdx, rax",
            "cmova r10, r11",
            "mov eax, ebx",
            "sub rcx, rsi",
            "cmp rcx, rax",
            "lea rsi, [r13 + rsi + 0x7c]",
            "cmova rcx, rax",
            "sub rdi, r10",
            "lea rax, [rbp + r10 + 0x7c]",
            "cmp rcx, rdi",
            "cmova rcx, rdi",
            "mov rdi, rax",
            "jmp 0x415526",
            "sub rdx, qword [rsp + 0x20]",
            "lea rax, [rbp + 0x7c]",
            "mov rcx, rbx",
            "mov rdi, rax",
            "lea rsi, [r13 + rdx + 0x7c]",
            "rep movsb byte [rdi], byte [rsi]",
            "mov qword [r12 + r9*8], rbp",
            "inc r9",
            "cmp dword [rsp + 0x34], r9d",
            "jg 0x4153e7",
            "jmp 0x415630",
            "cmp qword [r8 + rbp*8], 0xfffffffffffffffd",
            "ja 0x415598",
            "shl r15, 4",
            "mov rax, qword [r12 + rbp*8]",
            "add r15, r14",
            "mov rdx, qword [r15 + 0x10]",
            "mov qword [rax + 0x38], rdx",
            "mov rdx, qword [r15 + 8]",
            "mov edx, dword [rdx + 0x28]",
            "mov dword [rax + 0x78], edx",
            "mov rdx, qword [r15 + 8]",
            "inc qword [rdx + 0x20]",
            "mov rdx, qword [r8 + rbp*8]",
            "cmp qword [rax + 0x30], rdx",
            "je 0x41562b",
            "lea rcx, str.write_raid56_with_parity",
            "mov edx, 0x78b",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ebs_i___start___raid_map_i__",
            "jmp 0x415430",
            "lea rdi, [rsi + 0x80]",
            "mov qword [rsp + 0x10], rcx",
            "mov qword [rsp + 0x18], rsi",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp], r9",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rcx, qword [rsp + 0x10]",
            "mov rsi, qword [rsp + 0x18]",
            "mov r8, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "jne 0x4155ee",
            "lea rcx, str.write_raid56_with_parity",
            "mov edx, 0x78f",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___new_eb_",
            "jmp 0x415430",
            "movsxd rdx, r15d",
            "shl rdx, 4",
            "add rdx, r14",
            "mov rdi, qword [rdx + 0x10]",
            "mov qword [rax + 0x38], rdi",
            "mov rdi, qword [rdx + 8]",
            "mov edi, dword [rdi + 0x28]",
            "mov dword [rax + 0x78], edi",
            "mov rdx, qword [rdx + 8]",
            "inc qword [rdx + 0x20]",
            "mov dword [rax + 0x40], ebx",
            "mov rdx, qword [r8 + rbp*8]",
            "cmp rdx, 0xfffffffffffffffe",
            "je 0x415628",
            "inc rdx",
            "cmove rcx, rax",
            "jmp 0x41562b",
            "mov r9, rax",
            "inc rbp",
            "jmp 0x41563a",
            "xor ebp, ebp",
            "xor ecx, ecx",
            "xor r9d, r9d",
            "movsxd rsi, r15d",
            "mov eax, dword [r14 + 4]",
            "movsxd r15, ebp",
            "cmp r15d, eax",
            "jl 0x41553f",
            "test rcx, rcx",
            "movsxd r15, eax",
            "je 0x4156d9",
            "lea rdi, [r15*8]",
            "mov qword [rsp + 0x10], rcx",
            "mov qword [rsp], r9",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "mov rcx, qword [rsp + 0x10]",
            "mov r9, qword [rsp]",
            "jne 0x41569c",
            "lea rcx, str.write_raid56_with_parity",
            "mov edx, 0x79f",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___pointers_",
            "jmp 0x415430",
            "mov qword [r12 + r15*8 - 8], rcx",
            "mov qword [r12 + r15*8 - 0x10], r9",
            "xor ecx, ecx",
            "jmp 0x4156ba",
            "mov rax, qword [r12 + rcx*8]",
            "add rax, 0x7c",
            "mov qword [rbp + rcx*8], rax",
            "inc rcx",
            "mov edi, dword [r14 + 4]",
            "cmp edi, ecx",
            "jg 0x4156aa",
            "mov rdx, rbp",
            "mov rsi, rbx",
            "call fcn.0041a6b0",
            "mov rdi, rbp",
            "call sym.imp.free",
            "xor ebx, ebx",
            "jmp 0x415758",
            "mov qword [r12 + r15*8 - 8], r9",
            "mov rsi, qword [r12]",
            "lea rax, [r9 + 0x7c]",
            "mov rcx, rbx",
            "mov rdi, rax",
            "xor eax, eax",
            "add rsi, 0x7c",
            "rep movsb byte [rdi], byte [rsi]",
            "jmp 0x41571b",
            "mov rsi, qword [r12 + rax*8 + 8]",
            "add edx, 8",
            "mov rsi, qword [rsi + rcx + 0x7c]",
            "add rcx, 0x70",
            "xor qword [r9 + rcx + 0xc], rsi",
            "jmp 0x415710",
            "xor edx, edx",
            "movsxd rcx, edx",
            "cmp rcx, rbx",
            "jb 0x4156f6",
            "inc rax",
            "mov edx, dword [r14 + 4]",
            "lea ecx, [rax + 1]",
            "dec edx",
            "cmp ecx, edx",
            "jl 0x41570e",
            "jmp 0x4156d5",
            "mov rbp, qword [r12 + rbx*8]",
            "mov rdi, rbp",
            "call fcn.0041255f",
            "test eax, eax",
            "je 0x415748",
            "lea rcx, str.write_raid56_with_parity",
            "mov edx, 0x7b6",
            "jmp 0x41576c",
            "cmp rbp, r13",
            "je 0x415755",
            "mov rdi, rbp",
            "call sym.imp.free",
            "inc rbx",
            "cmp dword [r14 + 4], ebx",
            "jg 0x41572a",
            "jmp 0x41577f",
            "lea rcx, str.split_eb_for_raid56",
            "mov edx, 0x769",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret_",
            "jmp 0x415430",
            "mov rdi, r12",
            "call sym.imp.free",
            "add rsp, 0x48",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040756f": {
        "function_address": "0x0040756f",
        "instructions": [
            "push r15",
            "push r14",
            "lea r14, [rdi + 0x150]",
            "push r13",
            "mov r13d, edx",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x28",
            "mov r15d, dword [rsi + 0x40]",
            "mov qword [rsp + 0x10], 0",
            "jmp 0x4076a5",
            "test byte [r12 + 0x20c], 2",
            "mov qword [rsp + 0x18], r15",
            "jne 0x407643",
            "mov rdx, rbp",
            "add rdx, qword [rbx + 0x30]",
            "lea r8, [rsp + 0x10]",
            "lea rcx, [rsp + 0x18]",
            "xor esi, esi",
            "mov qword [rsp], 0",
            "mov r9d, r13d",
            "mov rdi, r14",
            "call fcn.00414c15",
            "test eax, eax",
            "je 0x40760a",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, rbp",
            "add rcx, qword [rbx + 0x30]",
            "lea rdx, str.Couldnt_map_the_block__Lu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rdi, qword [rsp + 0x10]",
            "jmp 0x40761a",
            "mov rdi, qword [rsp + 0x10]",
            "mov rax, qword [rdi + 8]",
            "mov edx, dword [rax + 0x28]",
            "test edx, edx",
            "jne 0x407624",
            "call sym.imp.free",
            "jmp 0x4076b2",
            "mov dword [rbx + 0x78], edx",
            "inc qword [rax + 0x20]",
            "mov rax, qword [rdi + 0x10]",
            "mov qword [rbx + 0x38], rax",
            "call sym.imp.free",
            "mov qword [rsp + 0x10], 0",
            "jmp 0x40767a",
            "mov rdx, qword [r12 + 0x1f0]",
            "mov rax, qword [rdx + 0x30]",
            "add rdx, 0x30",
            "jmp 0x407673",
            "cmp qword [rax + 0x50], 1",
            "jne 0x407670",
            "mov edx, dword [rax + 0x28]",
            "mov dword [rbx + 0x78], edx",
            "mov rdx, qword [rbx + 0x30]",
            "mov qword [rbx + 0x38], rdx",
            "inc qword [rax + 0x20]",
            "jmp 0x40767a",
            "mov rax, qword [rax]",
            "cmp rax, rdx",
            "jne 0x407655",
            "jmp 0x40765c",
            "cmp qword [rsp + 0x18], r15",
            "jbe 0x407686",
            "mov qword [rsp + 0x18], r15",
            "mov rdx, qword [rsp + 0x18]",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.00412535",
            "test eax, eax",
            "jne 0x4076b2",
            "mov rax, qword [rsp + 0x18]",
            "add rbp, rax",
            "sub r15, rax",
            "test r15, r15",
            "jne 0x4075a1",
            "xor eax, eax",
            "jmp 0x4076b7",
            "mov eax, 0xfffffffb",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041a6b0": {
        "function_address": "0x0041a6b0",
        "instructions": [
            "push r15",
            "lea eax, [rdi - 3]",
            "sub edi, 4",
            "movabs r15, 0x1d1d1d1d1d1d1d1d",
            "push r14",
            "cdqe",
            "movabs r14, 0xfefefefefefefefe",
            "push r13",
            "push r12",
            "lea r12, [rdx + rax*8]",
            "push rbp",
            "push rbx",
            "mov rbx, qword [rdx + rax*8 + 8]",
            "mov rbp, qword [rdx + rax*8 + 0x10]",
            "movsxd rax, edi",
            "lea r13, [rdx + rax*8]",
            "mov dword [rsp - 4], edi",
            "xor edx, edx",
            "jmp 0x41a754",
            "mov rax, qword [r12]",
            "mov r8d, dword [rsp - 4]",
            "xor r9d, r9d",
            "mov rdi, qword [rax + rdx]",
            "mov rax, rdi",
            "jmp 0x41a742",
            "mov rcx, qword [r13 + r9]",
            "movabs r11, 0x8080808080808080",
            "dec r8d",
            "and r11, rax",
            "add rax, rax",
            "sub r9, 8",
            "and rax, r14",
            "mov r10, qword [rcx + rdx]",
            "lea rcx, [r11 + r11]",
            "shr r11, 7",
            "sub rcx, r11",
            "xor rax, r10",
            "and rcx, r15",
            "xor rdi, r10",
            "xor rax, rcx",
            "test r8d, r8d",
            "jns 0x41a708",
            "mov qword [rbx + rdx], rdi",
            "mov qword [rbp + rdx], rax",
            "add rdx, 8",
            "cmp rdx, rsi",
            "jb 0x41a6f3",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00411c93": {
        "function_address": "0x00411c93",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "call fcn.00411865",
            "lea rdi, [rbx + 8]",
            "call fcn.00411865",
            "lea rax, [rbx + 0x10]",
            "mov qword [rbx + 0x20], 0",
            "mov qword [rbx + 0x10], rax",
            "mov qword [rbx + 0x18], rax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00411865": {
        "function_address": "0x00411865",
        "instructions": [
            "mov qword [rdi], 0",
            "ret"
        ]
    },
    "fcn.004078c4": {
        "function_address": "0x004078c4",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi + 0x30]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x28]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x38]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x40]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x48]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x1a8]",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x58]",
            "call sym.imp.free",
            "mov rdi, rbx",
            "pop rbx",
            "jmp sym.imp.free"
        ]
    },
    "fcn.004119f6": {
        "function_address": "0x004119f6",
        "instructions": [
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "jmp 0x411a13",
            "mov rdi, rbp",
            "mov rsi, rbx",
            "call fcn.004119e8",
            "mov rdi, rbx",
            "call r12",
            "mov rdi, rbp",
            "call fcn.004119d9",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x411a02",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.004119d9": {
        "function_address": "0x004119d9",
        "instructions": [
            "jmp fcn.0041c91c"
        ]
    },
    "fcn.0041224d": {
        "function_address": "0x0041224d",
        "instructions": [
            "push r13",
            "push r12",
            "lea r12, [rdi + 0x10]",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "push r11",
            "jmp 0x41229c",
            "cmp dword [rbx + 0x20], 1",
            "lea r13, [rbx - 0x50]",
            "je 0x412294",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx - 0x20]",
            "lea rdx, str.extent_buffer_leak:_start__llu_len__u_n",
            "mov r8d, dword [rbx - 0x10]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov dword [rbx + 0x20], 1",
            "mov rdi, r13",
            "call fcn.00412164",
            "mov rbx, qword [rbp + 0x10]",
            "cmp rbx, r12",
            "jne 0x41225e",
            "pop r10",
            "pop rbx",
            "mov rdi, rbp",
            "lea rsi, [0x00411ab1]",
            "pop rbp",
            "pop r12",
            "pop r13",
            "jmp fcn.004119f6"
        ]
    },
    "fcn.00413222": {
        "function_address": "0x00413222",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "mov ebp, edi",
            "mov edi, 0x1000",
            "push rbx",
            "sub rsp, 0x38",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp + 0x18], rdx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov r8, qword [rsp + 8]",
            "je 0x413499",
            "mov edi, ebp",
            "mov rdx, r8",
            "mov rsi, rax",
            "call fcn.00407cfd",
            "test eax, eax",
            "mov ebp, 0xfffffffb",
            "js 0x41348f",
            "test byte [rbx + 0x3c], 2",
            "mov rbp, qword [rbx + 0xc9]",
            "mov qword [rsp + 0x28], rbp",
            "je 0x413293",
            "mov qword [r12], 1",
            "jmp 0x41329f",
            "mov rdi, rbx",
            "call fcn.00412b93",
            "mov qword [r12], rax",
            "mov rax, qword [rbx + 0x48]",
            "lea r13, [rbx + 0x20]",
            "mov rdi, r13",
            "mov qword [rsp + 0x10], rax",
            "call fcn.00412aff",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x413339",
            "mov esi, 0x60",
            "mov edi, 1",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x4132d8",
            "jmp 0x4133d1",
            "lea rax, [rax + 0x30]",
            "mov rdx, qword [0x006272b0]",
            "mov qword [r12 + 0x30], rax",
            "mov qword [r12 + 0x38], rax",
            "lea rax, [r12 + 0x40]",
            "mov qword [rdx + 8], rax",
            "mov qword [r12 + 0x40], rdx",
            "lea rdx, [0x006272b0]",
            "mov qword [0x006272b0], rax",
            "mov qword [r12 + 0x48], rdx",
            "mov rax, qword [rbx + 0x20]",
            "mov qword [r12], rax",
            "mov rax, qword [r13 + 8]",
            "mov qword [r12 + 0x10], rbp",
            "mov qword [r12 + 0x20], 0xffffffffffffffff",
            "mov qword [r12 + 8], rax",
            "mov rax, qword [rsp + 0x10]",
            "mov qword [r12 + 0x18], rax",
            "jmp 0x413358",
            "lea rdx, [rbx + 0x10b]",
            "lea rdi, [rax + 0x30]",
            "mov rsi, rbp",
            "call fcn.00412b48",
            "test rax, rax",
            "mov r13, rax",
            "jne 0x41342b",
            "mov esi, 0x90",
            "mov edi, 1",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r13, rax",
            "je 0x4133d1",
            "mov dword [rax + 0x28], 0xffffffff",
            "mov qword [rax + 0x50], rbp",
            "mov rdi, r15",
            "mov rax, qword [rbx + 0x10b]",
            "mov qword [r13 + 0x80], rax",
            "mov rax, qword [rbx + 0x113]",
            "mov qword [r13 + 0x88], rax",
            "call sym.imp.strdup",
            "test rax, rax",
            "mov r14, rax",
            "mov qword [r13 + 0x30], rax",
            "jne 0x4133ac",
            "jmp 0x4133c9",
            "lea rdi, [rbx + 0x12b]",
            "call sym.imp.strdup",
            "test rax, rax",
            "mov qword [r13 + 0x38], rax",
            "jne 0x4133db",
            "mov rdi, r14",
            "call sym.imp.free",
            "mov rdi, r13",
            "call sym.imp.free",
            "mov ebp, 0xfffffff4",
            "jmp 0x41348f",
            "mov rdi, rbx",
            "call fcn.00412b93",
            "mov qword [r13 + 0x40], rax",
            "mov rax, qword [rbx + 0x78]",
            "mov qword [r13 + 0x48], rax",
            "mov rax, qword [rbx + 0xd1]",
            "mov qword [r13 + 0x58], rax",
            "mov rax, qword [rbx + 0xd9]",
            "mov qword [r13 + 0x60], rax",
            "mov qword [rsp + 0x28], rax",
            "mov rax, qword [r12 + 0x30]",
            "mov qword [rax + 8], r13",
            "mov qword [r13], rax",
            "lea rax, [r12 + 0x30]",
            "mov qword [r13 + 8], rax",
            "mov qword [r12 + 0x30], r13",
            "mov qword [r13 + 0x18], r12",
            "jmp 0x413463",
            "mov r14, qword [rax + 0x30]",
            "test r14, r14",
            "je 0x413443",
            "mov rsi, r15",
            "mov rdi, r14",
            "call sym.imp.strcmp",
            "test eax, eax",
            "je 0x413463",
            "mov rdi, r15",
            "call sym.imp.strdup",
            "test rax, rax",
            "mov r15, rax",
            "je 0x4133d1",
            "mov rdi, r14",
            "call sym.imp.free",
            "mov qword [r13 + 0x30], r15",
            "mov rdx, qword [rsp + 0x10]",
            "cmp rdx, qword [r12 + 0x18]",
            "jbe 0x413479",
            "mov qword [r12 + 0x10], rbp",
            "mov qword [r12 + 0x18], rdx",
            "cmp qword [r12 + 0x20], rbp",
            "jbe 0x413485",
            "mov qword [r12 + 0x20], rbp",
            "mov rdx, qword [rsp + 0x18]",
            "xor ebp, ebp",
            "mov qword [rdx], r12",
            "mov rdi, rbx",
            "call sym.imp.free",
            "jmp 0x41349e",
            "mov ebp, 0xfffffff4",
            "add rsp, 0x38",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00407cfd": {
        "function_address": "0x00407cfd",
        "instructions": [
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0xde0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0xdd8], rax",
            "xor eax, eax",
            "cmp rdx, 0x10000",
            "lea rbx, [rsp + 0xd]",
            "jne 0x407dab",
            "mov ecx, 0x10000",
            "mov edx, 0xdcb",
            "mov rsi, rbx",
            "call sym.imp.pread64",
            "cmp eax, 0xdca",
            "jbe 0x407dc2",
            "mov rax, qword [rsp + 0x3d]",
            "cmp rax, 0x10000",
            "mov qword [rsp], rax",
            "jne 0x407dc2",
            "mov rax, qword [rbx + 0x40]",
            "or edx, 0xffffffff",
            "test rax, rax",
            "mov qword [rsp], rax",
            "je 0x407dfb",
            "movabs rdx, 0x4d5f53665248425f",
            "cmp rax, rdx",
            "jne 0x407dc2",
            "jmp 0x407d9c",
            "mov ecx, 0xdcb",
            "mov rdi, rbp",
            "mov rsi, rbx",
            "rep movsb byte [rdi], byte [rsi]",
            "mov rdi, rbx",
            "call fcn.00407031",
            "xor edx, edx",
            "test rax, rax",
            "jne 0x407dfb",
            "jmp 0x407dc2",
            "mov rdi, rbx",
            "call fcn.00407031",
            "test rax, rax",
            "jne 0x407d7e",
            "jmp 0x407dc2",
            "mov rcx, rdx",
            "mov rsi, rbx",
            "mov edx, 0xdcb",
            "call sym.imp.pread64",
            "cmp eax, 0xdca",
            "ja 0x407dc7",
            "or edx, 0xffffffff",
            "jmp 0x407dfb",
            "mov rax, qword [rsp + 0x3d]",
            "cmp rax, r12",
            "mov qword [rsp], rax",
            "jne 0x407dc2",
            "mov rax, qword [rbx + 0x40]",
            "movabs rdx, 0x4d5f53665248425f",
            "cmp rax, rdx",
            "mov qword [rsp], rax",
            "jne 0x407dc2",
            "mov ecx, 0xdcb",
            "mov rdi, rbp",
            "mov rsi, rbx",
            "rep movsb byte [rdi], byte [rsi]",
            "xor edx, edx",
            "mov eax, edx",
            "mov rdx, qword [rsp + 0xdd8]",
            "xor rdx, qword fs:[0x28]",
            "je 0x407e15",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0xde0",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00412b93": {
        "function_address": "0x00412b93",
        "instructions": [
            "mov rax, qword [rdi + 0x88]",
            "ret"
        ]
    },
    "fcn.00412aff": {
        "function_address": "0x00412aff",
        "instructions": [
            "push r13",
            "mov r13, rdi",
            "push r12",
            "lea r12, [0x006272b0]",
            "push rbp",
            "push rbx",
            "push rcx",
            "mov rbx, qword [0x006272b0]",
            "jmp 0x412b39",
            "lea rbp, [rbx - 0x40]",
            "mov edx, 0x10",
            "mov rdi, r13",
            "mov rsi, rbp",
            "call sym.imp.memcmp",
            "test eax, eax",
            "jne 0x412b36",
            "mov rax, rbp",
            "jmp 0x412b40",
            "mov rbx, qword [rbx]",
            "cmp rbx, r12",
            "jne 0x412b19",
            "xor eax, eax",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00412b48": {
        "function_address": "0x00412b48",
        "instructions": [
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "push r8",
            "mov rbx, qword [rdi]",
            "jmp 0x412b7f",
            "cmp qword [rbx + 0x50], r13",
            "jne 0x412b7c",
            "lea rdi, [rbx + 0x80]",
            "mov edx, 0x10",
            "mov rsi, r12",
            "call sym.imp.memcmp",
            "test eax, eax",
            "je 0x412b88",
            "mov rbx, qword [rbx]",
            "cmp rbx, rbp",
            "jne 0x412b5e",
            "xor eax, eax",
            "jmp 0x412b8b",
            "mov rax, rbx",
            "pop rsi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "sym.imp.strdup": {
        "function_address": "0x00402420",
        "instructions": [
            "jmp qword [reloc.strdup]"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x004021e0",
        "instructions": [
            "jmp qword [reloc.strcmp]"
        ]
    },
    "fcn.00417daa": {
        "function_address": "0x00417daa",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov edi, 0x1010",
            "sub rsp, 0xd8",
            "lea r15, [rsp + 0x30]",
            "mov dword [rsp + 0x14], esi",
            "mov qword [rsp + 0x30], r15",
            "mov qword [rsp + 0x38], r15",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r12, rax",
            "je 0x4171d4",
            "lea rdi, [rax + 0x10]",
            "mov edx, 0x1000",
            "mov rsi, rbx",
            "call sym.imp.__strcpy_chk",
            "lea r13, [r12 + 0x10]",
            "xor eax, eax",
            "or rcx, 0xffffffffffffffff",
            "mov rdi, r13",
            "repne scasb al, byte [rdi]",
            "mov edi, 0x1000",
            "not rcx",
            "lea r14d, [rcx - 1]",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x417165",
            "mov rdi, r13",
            "call sym.imp.opendir",
            "test rax, rax",
            "mov rbp, rax",
            "jne 0x416f7f",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Unable_to_open__s_for_scanning_n",
            "mov rcx, r13",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "call sym.imp.__errno_location",
            "mov r13d, dword [rax]",
            "neg r13d",
            "jmp 0x417182",
            "movsxd r14, r14d",
            "mov qword [rsp + 0x18], r14",
            "mov rdi, rbp",
            "call sym.imp.readdir64",
            "test rax, rax",
            "je 0x41711b",
            "cmp byte [rax + 0x13], 0x2e",
            "je 0x416f87",
            "lea rdx, [rax + 0x13]",
            "or rcx, 0xffffffffffffffff",
            "xor eax, eax",
            "mov rdi, rdx",
            "repne scasb al, byte [rdi]",
            "mov rax, qword [rsp + 0x18]",
            "sub rax, rcx",
            "cmp rax, 0x1000",
            "ja 0x41716f",
            "lea r8, str._s__s",
            "mov qword [rsp], rdx",
            "mov r9, r13",
            "mov ecx, 0x1000",
            "mov edx, 1",
            "mov esi, 0x1000",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "lea rsi, [rsp + 0x40]",
            "mov rdi, rbx",
            "call fcn.0041ccd0",
            "test eax, eax",
            "jns 0x41701e",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_stat__s_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x416f87",
            "mov eax, dword [rsp + 0x58]",
            "and eax, 0xf000",
            "cmp eax, 0xa000",
            "je 0x416f87",
            "cmp eax, 0x4000",
            "jne 0x417074",
            "mov edi, 0x1010",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r14, rax",
            "je 0x417177",
            "lea rdi, [rax + 0x10]",
            "mov edx, 0x1000",
            "mov rsi, rbx",
            "call sym.imp.__strcpy_chk",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [r14], r15",
            "mov qword [rsp + 0x38], r14",
            "mov qword [r14 + 8], rax",
            "mov qword [rax], r14",
            "mov eax, dword [rsp + 0x58]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x416f87",
            "xor esi, esi",
            "xor eax, eax",
            "mov rdi, rbx",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r14d, eax",
            "jns 0x4170e1",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "cmp edi, 0x7b",
            "je 0x416f87",
            "cmp edi, 6",
            "je 0x416f87",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_read__s:__s_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x416f87",
            "lea rcx, [rsp + 0x28]",
            "lea rdx, [rsp + 0x20]",
            "mov r8d, 0x10000",
            "mov rsi, rbx",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "jne 0x41710e",
            "cmp dword [rsp + 0x14], 0",
            "jle 0x41710e",
            "mov rdi, rbx",
            "call fcn.00416dd2",
            "mov edi, r14d",
            "call sym.imp.close",
            "jmp 0x416f87",
            "cmp qword [rsp + 0x30], r15",
            "je 0x41717f",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov r12, qword [rsp + 0x30]",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov rdi, rbp",
            "mov rdx, qword [r12]",
            "mov rax, qword [r12 + 8]",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov qword [r12], 0x100100",
            "mov qword [r12 + 8], 0x200200",
            "call sym.imp.closedir",
            "jmp 0x416f12",
            "mov r13d, 0xfffffff4",
            "xor ebp, ebp",
            "jmp 0x417182",
            "mov r13d, 0xfffffff2",
            "jmp 0x417182",
            "mov r13d, 0xfffffff4",
            "jmp 0x417182",
            "xor r13d, r13d",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rdi, rbx",
            "lea rbx, [rsp + 0x30]",
            "call sym.imp.free",
            "jmp 0x4171bb",
            "mov rdx, qword [rdi]",
            "mov rax, qword [rdi + 8]",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov qword [rdi], 0x100100",
            "mov qword [rdi + 8], 0x200200",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x30]",
            "cmp rdi, rbx",
            "jne 0x417199",
            "test rbp, rbp",
            "je 0x4171da",
            "mov rdi, rbp",
            "call sym.imp.closedir",
            "jmp 0x4171da",
            "mov r13d, 0xfffffff4",
            "add rsp, 0xd8",
            "mov eax, r13d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "push r14",
            "push r13",
            "mov r13d, edi",
            "push r12",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "sub rsp, 0x520",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x518], rax",
            "xor eax, eax",
            "lea r14, [rsp + 0xaf]",
            "jmp 0x4176c5",
            "mov ebp, 1",
            "lea rsi, [0x0042045e]",
            "lea rdi, str._proc_partitions",
            "call sym.imp.fopen64",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x41772d",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rax",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "je 0x417745",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rbx",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "je 0x417745",
            "lea rsi, str._dev_",
            "lea rdi, [rsp + 0xaa]",
            "call sym.imp.strcpy",
            "jmp 0x4178c5",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Unable_to_open__proc_partitions_for_scanning_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x417763",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Unable_to_read__proc_partitions_for_scanning_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov rdi, rbx",
            "call sym.imp.fclose",
            "mov eax, 0xfffffffe",
            "jmp 0x4178f5",
            "lea rsi, str.__d__d__d__99s",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, r14",
            "xor eax, eax",
            "call sym.imp.sscanf",
            "lea rsi, str._dev_dm_",
            "lea rdi, [rsp + 0xaa]",
            "mov edx, 8",
            "call sym.imp.strncmp",
            "test eax, eax",
            "mov edx, 1",
            "je 0x4177c8",
            "lea rsi, str._dev_md",
            "lea rdi, [rsp + 0xaa]",
            "mov edx, 7",
            "call sym.imp.strncmp",
            "xor edx, edx",
            "test eax, eax",
            "sete dl",
            "mov eax, ebp",
            "xor eax, 1",
            "test edx, eax",
            "jne 0x4178c5",
            "test edx, edx",
            "jne 0x4177e1",
            "test ebp, ebp",
            "jne 0x4178c5",
            "lea rsi, [rsp + 0x18]",
            "lea rdi, [rsp + 0xaa]",
            "call fcn.0041ccd0",
            "test eax, eax",
            "jns 0x417821",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xaa]",
            "lea rdx, str.failed_to_stat__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4178c5",
            "mov eax, dword [rsp + 0x30]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x4178c5",
            "lea rdi, [rsp + 0xaa]",
            "xor esi, esi",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r12d, eax",
            "jns 0x417888",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "cmp edi, 0x7b",
            "je 0x4178c5",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xaa]",
            "lea rdx, str.failed_to_open__s:__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4178c5",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "lea rsi, [rsp + 0xaa]",
            "mov r8d, 0x10000",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "jne 0x4178bd",
            "test r13d, r13d",
            "jle 0x4178bd",
            "lea rdi, [rsp + 0xaa]",
            "call fcn.00416dd2",
            "mov edi, r12d",
            "call sym.imp.close",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rbx",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "jne 0x41776d",
            "mov rdi, rbx",
            "call sym.imp.fclose",
            "test ebp, ebp",
            "je 0x4176c0",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x518]",
            "xor rdx, qword fs:[0x28]",
            "je 0x41790d",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x520",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "push r12",
            "mov r12d, edi",
            "xor esi, esi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x1030",
            "lea rdi, [rsp + 0x20]",
            "mov qword [rsp + 0x18], 0",
            "mov qword [rsp + 0x20], 0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1028], rax",
            "xor eax, eax",
            "call sym.imp.blkid_get_cache",
            "test eax, eax",
            "jns 0x417c44",
            "lea rdi, str.ERROR:_lblkid_cache_get_failed",
            "call sym.imp.puts",
            "mov eax, 1",
            "jmp 0x417d5b",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_probe_all",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_dev_iterate_begin",
            "lea rdx, str.btrfs",
            "lea rsi, [0x0041fe7f]",
            "mov rdi, rax",
            "mov rbp, rax",
            "call sym.imp.blkid_dev_set_search",
            "jmp 0x417d32",
            "mov rsi, qword [rsp + 0x18]",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_verify",
            "test rax, rax",
            "mov qword [rsp + 0x18], rax",
            "je 0x417d32",
            "mov rdi, rax",
            "call sym.imp.blkid_dev_devname",
            "lea rdi, [rsp + 0x28]",
            "mov edx, 0x1000",
            "mov rsi, rax",
            "call sym.imp.strncpy",
            "lea rdi, [rsp + 0x28]",
            "xor esi, esi",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x417cdb",
            "lea rdx, [rsp + 0x28]",
            "lea rsi, str.ERROR:_could_not_open__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x417d32",
            "lea rcx, [rsp + 8]",
            "lea rdx, [rsp + 0x10]",
            "lea rsi, [rsp + 0x28]",
            "mov r8d, 0x10000",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "je 0x417d1c",
            "lea rdx, [rsp + 0x28]",
            "lea rsi, str.ERROR:_could_not_scan__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov edi, ebx",
            "call sym.imp.close",
            "jmp 0x417d32",
            "mov edi, ebx",
            "call sym.imp.close",
            "test r12d, r12d",
            "je 0x417d32",
            "lea rdi, [rsp + 0x28]",
            "call fcn.00416dd2",
            "lea rsi, [rsp + 0x18]",
            "mov rdi, rbp",
            "call sym.imp.blkid_dev_next",
            "test eax, eax",
            "je 0x417c76",
            "mov rdi, rbp",
            "call sym.imp.blkid_dev_iterate_end",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_put_cache",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x1028]",
            "xor rdx, qword fs:[0x28]",
            "je 0x417d73",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1030",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "cmp edi, 2",
            "je 0x417d94",
            "cmp edi, 8",
            "je 0x417da0",
            "dec edi",
            "jne 0x417da7",
            "mov edi, esi",
            "jmp 0x41768f",
            "lea rdi, str._dev",
            "jmp 0x416ec4",
            "mov edi, esi",
            "jmp 0x417beb",
            "xor eax, eax",
            "ret",
            "push rbx",
            "mov esi, edi",
            "mov ebx, edi",
            "mov edi, 1",
            "call 0x417d7f",
            "test eax, eax",
            "je 0x417dca",
            "mov esi, ebx",
            "mov edi, 2",
            "pop rbx",
            "jmp 0x417d7f",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "sym.imp.__strcpy_chk": {
        "function_address": "0x00402310",
        "instructions": [
            "jmp qword [reloc.__strcpy_chk]"
        ]
    },
    "sym.imp.opendir": {
        "function_address": "0x00402070",
        "instructions": [
            "jmp qword [reloc.opendir]"
        ]
    },
    "sym.imp.readdir64": {
        "function_address": "0x00402360",
        "instructions": [
            "jmp qword [reloc.readdir64]"
        ]
    },
    "sym.imp.__snprintf_chk": {
        "function_address": "0x00401f60",
        "instructions": [
            "jmp qword [reloc.__snprintf_chk]"
        ]
    },
    "fcn.0041ccd0": {
        "function_address": "0x0041ccd0",
        "instructions": [
            "mov rdx, rsi",
            "mov rsi, rdi",
            "mov edi, 1",
            "jmp sym.imp.__lxstat64"
        ]
    },
    "fcn.00416dd2": {
        "function_address": "0x00416dd2",
        "instructions": [
            "push r12",
            "xor esi, esi",
            "push rbp",
            "mov rbp, rdi",
            "lea rdi, str._dev_btrfs_control",
            "push rbx",
            "sub rsp, 0x1010",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1008], rax",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x416e35",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "call sym.imp.strerror",
            "mov rcx, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_open__dev_btrfs_control_skipping_device_registration:__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x416ea0",
            "lea rdi, [rsp + 0x10]",
            "mov edx, 0xff7",
            "mov rsi, rbp",
            "call sym.imp.strncpy",
            "lea rdx, [rsp + 8]",
            "mov edi, ebx",
            "mov esi, 0x50009404",
            "xor eax, eax",
            "mov byte [rsp + 0x1006], 0",
            "call sym.imp.ioctl",
            "mov r12d, eax",
            "call sym.imp.__errno_location",
            "test r12d, r12d",
            "mov edi, dword [rax]",
            "jns 0x416e99",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_device_scan_failed__s____s_n",
            "mov rcx, rbp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, ebx",
            "call sym.imp.close",
            "mov rax, qword [rsp + 0x1008]",
            "xor rax, qword fs:[0x28]",
            "je 0x416eb8",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1010",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.closedir": {
        "function_address": "0x00402150",
        "instructions": [
            "jmp qword [reloc.closedir]"
        ]
    },
    "sym.imp.fopen64": {
        "function_address": "0x00402230",
        "instructions": [
            "jmp qword [reloc.fopen64]"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x00402190",
        "instructions": [
            "jmp qword [reloc.fgets]"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00402000",
        "instructions": [
            "jmp qword [reloc.strcpy]"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00402050",
        "instructions": [
            "jmp qword [reloc.fclose]"
        ]
    },
    "sym.imp.sscanf": {
        "function_address": "0x004022c0",
        "instructions": [
            "jmp qword [reloc.sscanf]"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x00401fe0",
        "instructions": [
            "jmp qword [reloc.strncmp]"
        ]
    },
    "sym.imp.blkid_get_cache": {
        "function_address": "0x00402440",
        "instructions": [
            "jmp qword [reloc.blkid_get_cache]"
        ]
    },
    "sym.imp.blkid_probe_all": {
        "function_address": "0x00402450",
        "instructions": [
            "jmp qword [reloc.blkid_probe_all]"
        ]
    },
    "sym.imp.blkid_dev_iterate_begin": {
        "function_address": "0x004020a0",
        "instructions": [
            "jmp qword [reloc.blkid_dev_iterate_begin]"
        ]
    },
    "sym.imp.blkid_dev_set_search": {
        "function_address": "0x00402100",
        "instructions": [
            "jmp qword [reloc.blkid_dev_set_search]"
        ]
    },
    "sym.imp.blkid_verify": {
        "function_address": "0x00402220",
        "instructions": [
            "jmp qword [reloc.blkid_verify]"
        ]
    },
    "sym.imp.blkid_dev_devname": {
        "function_address": "0x004023c0",
        "instructions": [
            "jmp qword [reloc.blkid_dev_devname]"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00401fd0",
        "instructions": [
            "jmp qword [reloc.strncpy]"
        ]
    },
    "sym.imp.blkid_dev_next": {
        "function_address": "0x00402210",
        "instructions": [
            "jmp qword [reloc.blkid_dev_next]"
        ]
    },
    "sym.imp.blkid_dev_iterate_end": {
        "function_address": "0x004022d0",
        "instructions": [
            "jmp qword [reloc.blkid_dev_iterate_end]"
        ]
    },
    "sym.imp.blkid_put_cache": {
        "function_address": "0x00402080",
        "instructions": [
            "jmp qword [reloc.blkid_put_cache]"
        ]
    },
    "unk.0x417d7f": {
        "function_address": "0x00417d7f",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov edi, 0x1010",
            "sub rsp, 0xd8",
            "lea r15, [rsp + 0x30]",
            "mov dword [rsp + 0x14], esi",
            "mov qword [rsp + 0x30], r15",
            "mov qword [rsp + 0x38], r15",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r12, rax",
            "je 0x4171d4",
            "lea rdi, [rax + 0x10]",
            "mov edx, 0x1000",
            "mov rsi, rbx",
            "call sym.imp.__strcpy_chk",
            "lea r13, [r12 + 0x10]",
            "xor eax, eax",
            "or rcx, 0xffffffffffffffff",
            "mov rdi, r13",
            "repne scasb al, byte [rdi]",
            "mov edi, 0x1000",
            "not rcx",
            "lea r14d, [rcx - 1]",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x417165",
            "mov rdi, r13",
            "call sym.imp.opendir",
            "test rax, rax",
            "mov rbp, rax",
            "jne 0x416f7f",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Unable_to_open__s_for_scanning_n",
            "mov rcx, r13",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "call sym.imp.__errno_location",
            "mov r13d, dword [rax]",
            "neg r13d",
            "jmp 0x417182",
            "movsxd r14, r14d",
            "mov qword [rsp + 0x18], r14",
            "mov rdi, rbp",
            "call sym.imp.readdir64",
            "test rax, rax",
            "je 0x41711b",
            "cmp byte [rax + 0x13], 0x2e",
            "je 0x416f87",
            "lea rdx, [rax + 0x13]",
            "or rcx, 0xffffffffffffffff",
            "xor eax, eax",
            "mov rdi, rdx",
            "repne scasb al, byte [rdi]",
            "mov rax, qword [rsp + 0x18]",
            "sub rax, rcx",
            "cmp rax, 0x1000",
            "ja 0x41716f",
            "lea r8, str._s__s",
            "mov qword [rsp], rdx",
            "mov r9, r13",
            "mov ecx, 0x1000",
            "mov edx, 1",
            "mov esi, 0x1000",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "lea rsi, [rsp + 0x40]",
            "mov rdi, rbx",
            "call fcn.0041ccd0",
            "test eax, eax",
            "jns 0x41701e",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_stat__s_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x416f87",
            "mov eax, dword [rsp + 0x58]",
            "and eax, 0xf000",
            "cmp eax, 0xa000",
            "je 0x416f87",
            "cmp eax, 0x4000",
            "jne 0x417074",
            "mov edi, 0x1010",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r14, rax",
            "je 0x417177",
            "lea rdi, [rax + 0x10]",
            "mov edx, 0x1000",
            "mov rsi, rbx",
            "call sym.imp.__strcpy_chk",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [r14], r15",
            "mov qword [rsp + 0x38], r14",
            "mov qword [r14 + 8], rax",
            "mov qword [rax], r14",
            "mov eax, dword [rsp + 0x58]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x416f87",
            "xor esi, esi",
            "xor eax, eax",
            "mov rdi, rbx",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r14d, eax",
            "jns 0x4170e1",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "cmp edi, 0x7b",
            "je 0x416f87",
            "cmp edi, 6",
            "je 0x416f87",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_read__s:__s_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x416f87",
            "lea rcx, [rsp + 0x28]",
            "lea rdx, [rsp + 0x20]",
            "mov r8d, 0x10000",
            "mov rsi, rbx",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "jne 0x41710e",
            "cmp dword [rsp + 0x14], 0",
            "jle 0x41710e",
            "mov rdi, rbx",
            "call fcn.00416dd2",
            "mov edi, r14d",
            "call sym.imp.close",
            "jmp 0x416f87",
            "cmp qword [rsp + 0x30], r15",
            "je 0x41717f",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov r12, qword [rsp + 0x30]",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov rdi, rbp",
            "mov rdx, qword [r12]",
            "mov rax, qword [r12 + 8]",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov qword [r12], 0x100100",
            "mov qword [r12 + 8], 0x200200",
            "call sym.imp.closedir",
            "jmp 0x416f12",
            "mov r13d, 0xfffffff4",
            "xor ebp, ebp",
            "jmp 0x417182",
            "mov r13d, 0xfffffff2",
            "jmp 0x417182",
            "mov r13d, 0xfffffff4",
            "jmp 0x417182",
            "xor r13d, r13d",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rdi, rbx",
            "lea rbx, [rsp + 0x30]",
            "call sym.imp.free",
            "jmp 0x4171bb",
            "mov rdx, qword [rdi]",
            "mov rax, qword [rdi + 8]",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov qword [rdi], 0x100100",
            "mov qword [rdi + 8], 0x200200",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x30]",
            "cmp rdi, rbx",
            "jne 0x417199",
            "test rbp, rbp",
            "je 0x4171da",
            "mov rdi, rbp",
            "call sym.imp.closedir",
            "jmp 0x4171da",
            "mov r13d, 0xfffffff4",
            "add rsp, 0xd8",
            "mov eax, r13d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "push r14",
            "push r13",
            "mov r13d, edi",
            "push r12",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "sub rsp, 0x520",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x518], rax",
            "xor eax, eax",
            "lea r14, [rsp + 0xaf]",
            "jmp 0x4176c5",
            "mov ebp, 1",
            "lea rsi, [0x0042045e]",
            "lea rdi, str._proc_partitions",
            "call sym.imp.fopen64",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x41772d",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rax",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "je 0x417745",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rbx",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "je 0x417745",
            "lea rsi, str._dev_",
            "lea rdi, [rsp + 0xaa]",
            "call sym.imp.strcpy",
            "jmp 0x4178c5",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Unable_to_open__proc_partitions_for_scanning_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x417763",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Unable_to_read__proc_partitions_for_scanning_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov rdi, rbx",
            "call sym.imp.fclose",
            "mov eax, 0xfffffffe",
            "jmp 0x4178f5",
            "lea rsi, str.__d__d__d__99s",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, r14",
            "xor eax, eax",
            "call sym.imp.sscanf",
            "lea rsi, str._dev_dm_",
            "lea rdi, [rsp + 0xaa]",
            "mov edx, 8",
            "call sym.imp.strncmp",
            "test eax, eax",
            "mov edx, 1",
            "je 0x4177c8",
            "lea rsi, str._dev_md",
            "lea rdi, [rsp + 0xaa]",
            "mov edx, 7",
            "call sym.imp.strncmp",
            "xor edx, edx",
            "test eax, eax",
            "sete dl",
            "mov eax, ebp",
            "xor eax, 1",
            "test edx, eax",
            "jne 0x4178c5",
            "test edx, edx",
            "jne 0x4177e1",
            "test ebp, ebp",
            "jne 0x4178c5",
            "lea rsi, [rsp + 0x18]",
            "lea rdi, [rsp + 0xaa]",
            "call fcn.0041ccd0",
            "test eax, eax",
            "jns 0x417821",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xaa]",
            "lea rdx, str.failed_to_stat__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4178c5",
            "mov eax, dword [rsp + 0x30]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x4178c5",
            "lea rdi, [rsp + 0xaa]",
            "xor esi, esi",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r12d, eax",
            "jns 0x417888",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "cmp edi, 0x7b",
            "je 0x4178c5",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xaa]",
            "lea rdx, str.failed_to_open__s:__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4178c5",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "lea rsi, [rsp + 0xaa]",
            "mov r8d, 0x10000",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "jne 0x4178bd",
            "test r13d, r13d",
            "jle 0x4178bd",
            "lea rdi, [rsp + 0xaa]",
            "call fcn.00416dd2",
            "mov edi, r12d",
            "call sym.imp.close",
            "lea rdi, [rsp + 0x118]",
            "mov rdx, rbx",
            "mov esi, 0x3ff",
            "call sym.imp.fgets",
            "test rax, rax",
            "jne 0x41776d",
            "mov rdi, rbx",
            "call sym.imp.fclose",
            "test ebp, ebp",
            "je 0x4176c0",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x518]",
            "xor rdx, qword fs:[0x28]",
            "je 0x41790d",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x520",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "push r12",
            "mov r12d, edi",
            "xor esi, esi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x1030",
            "lea rdi, [rsp + 0x20]",
            "mov qword [rsp + 0x18], 0",
            "mov qword [rsp + 0x20], 0",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1028], rax",
            "xor eax, eax",
            "call sym.imp.blkid_get_cache",
            "test eax, eax",
            "jns 0x417c44",
            "lea rdi, str.ERROR:_lblkid_cache_get_failed",
            "call sym.imp.puts",
            "mov eax, 1",
            "jmp 0x417d5b",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_probe_all",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_dev_iterate_begin",
            "lea rdx, str.btrfs",
            "lea rsi, [0x0041fe7f]",
            "mov rdi, rax",
            "mov rbp, rax",
            "call sym.imp.blkid_dev_set_search",
            "jmp 0x417d32",
            "mov rsi, qword [rsp + 0x18]",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_verify",
            "test rax, rax",
            "mov qword [rsp + 0x18], rax",
            "je 0x417d32",
            "mov rdi, rax",
            "call sym.imp.blkid_dev_devname",
            "lea rdi, [rsp + 0x28]",
            "mov edx, 0x1000",
            "mov rsi, rax",
            "call sym.imp.strncpy",
            "lea rdi, [rsp + 0x28]",
            "xor esi, esi",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x417cdb",
            "lea rdx, [rsp + 0x28]",
            "lea rsi, str.ERROR:_could_not_open__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x417d32",
            "lea rcx, [rsp + 8]",
            "lea rdx, [rsp + 0x10]",
            "lea rsi, [rsp + 0x28]",
            "mov r8d, 0x10000",
            "mov edi, eax",
            "call fcn.00413222",
            "test eax, eax",
            "je 0x417d1c",
            "lea rdx, [rsp + 0x28]",
            "lea rsi, str.ERROR:_could_not_scan__s_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov edi, ebx",
            "call sym.imp.close",
            "jmp 0x417d32",
            "mov edi, ebx",
            "call sym.imp.close",
            "test r12d, r12d",
            "je 0x417d32",
            "lea rdi, [rsp + 0x28]",
            "call fcn.00416dd2",
            "lea rsi, [rsp + 0x18]",
            "mov rdi, rbp",
            "call sym.imp.blkid_dev_next",
            "test eax, eax",
            "je 0x417c76",
            "mov rdi, rbp",
            "call sym.imp.blkid_dev_iterate_end",
            "mov rdi, qword [rsp + 0x20]",
            "call sym.imp.blkid_put_cache",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x1028]",
            "xor rdx, qword fs:[0x28]",
            "je 0x417d73",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1030",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "cmp edi, 2",
            "je 0x417d94",
            "cmp edi, 8",
            "je 0x417da0",
            "dec edi",
            "jne 0x417da7",
            "mov edi, esi",
            "jmp 0x41768f",
            "lea rdi, str._dev",
            "jmp 0x416ec4",
            "mov edi, esi",
            "jmp 0x417beb",
            "xor eax, eax",
            "ret",
            "push rbx",
            "mov esi, edi",
            "mov ebx, edi",
            "mov edi, 1",
            "call 0x417d7f",
            "test eax, eax",
            "je 0x417dca",
            "mov esi, ebx",
            "mov edi, 2",
            "pop rbx",
            "jmp 0x417d7f",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00407e21": {
        "function_address": "0x00407e21",
        "instructions": [
            "push r15",
            "mov r15, rdi",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x28",
            "mov rdx, qword [rdi + 0x1d8]",
            "mov rax, qword [rdx + 0x1f0]",
            "mov rbp, qword [rdx + 0x1a8]",
            "lea rcx, [rax + 0x30]",
            "lea r12, [rbp + 0xc9]",
            "mov rbx, qword [rax + 0x30]",
            "lea r14, [rbp + 0x20]",
            "mov qword [rsp + 8], rcx",
            "jmp 0x408021",
            "cmp dword [rbx + 0x2c], 0",
            "jne 0x407e72",
            "mov rbx, qword [rbx]",
            "jmp 0x408021",
            "mov qword [r12 + 0x2c], 0",
            "mov rax, qword [rbx + 0x78]",
            "mov qword [r12 + 0x24], rax",
            "mov rax, qword [rbx + 0x50]",
            "mov qword [r12], rax",
            "mov rax, qword [rbx + 0x58]",
            "mov qword [r12 + 8], rax",
            "mov rax, qword [rbx + 0x60]",
            "mov qword [r12 + 0x10], rax",
            "mov eax, dword [rbx + 0x68]",
            "mov dword [r12 + 0x18], eax",
            "mov eax, dword [rbx + 0x6c]",
            "mov dword [r12 + 0x1c], eax",
            "mov eax, dword [rbx + 0x70]",
            "mov dword [r12 + 0x20], eax",
            "mov rax, qword [rbx + 0x80]",
            "mov qword [rbp + 0x10b], rax",
            "mov rax, qword [rbx + 0x88]",
            "mov qword [rbp + 0x113], rax",
            "mov rax, qword [rbx + 0x18]",
            "mov rdx, qword [rax]",
            "mov qword [rbp + 0x11b], rdx",
            "mov rax, qword [rax + 8]",
            "mov qword [rbp + 0x123], rax",
            "mov rax, qword [rbp + 0x38]",
            "or rax, 1",
            "mov qword [rbp + 0x38], rax",
            "mov qword [rsp + 0x18], rax",
            "mov rax, qword [r15 + 0x1d8]",
            "mov rax, qword [rax + 0x1b8]",
            "cmp rax, 0x10000",
            "je 0x407f84",
            "or edx, 0xffffffff",
            "mov ecx, 0xfe0",
            "xor edi, edi",
            "mov rsi, r14",
            "mov qword [rbp + 0x30], rax",
            "mov qword [rsp + 0x18], rax",
            "call fcn.004073ac",
            "mov rsi, rbp",
            "mov edi, eax",
            "call fcn.004073b6",
            "mov rax, qword [r15 + 0x1d8]",
            "mov edi, dword [rbx + 0x28]",
            "mov edx, 0x1000",
            "mov rcx, qword [rax + 0x1b8]",
            "mov rsi, qword [rax + 0x1a8]",
            "call sym.imp.pwrite64",
            "cmp eax, 0x1000",
            "je 0x407e6a",
            "lea rcx, str.write_dev_supers",
            "mov edx, 0x501",
            "jmp 0x407ffc",
            "imul ecx, r9d, 0xc",
            "mov r13d, 0x4000",
            "shl r13, cl",
            "jmp 0x407f8d",
            "xor r9d, r9d",
            "mov r13d, 0x10000",
            "lea rax, [r13 + 0x1000]",
            "cmp rax, qword [rbx + 0x58]",
            "ja 0x407e6a",
            "or edx, 0xffffffff",
            "mov ecx, 0xfe0",
            "xor edi, edi",
            "mov qword [rbp + 0x30], r13",
            "mov rsi, r14",
            "mov dword [rsp], r9d",
            "mov qword [rsp + 0x18], r13",
            "call fcn.004073ac",
            "mov rsi, rbp",
            "mov edi, eax",
            "call fcn.004073b6",
            "mov rax, qword [r15 + 0x1d8]",
            "mov edi, dword [rbx + 0x28]",
            "mov rcx, r13",
            "mov edx, 0x1000",
            "mov rsi, qword [rax + 0x1a8]",
            "call sym.imp.pwrite64",
            "cmp eax, 0x1000",
            "mov r9d, dword [rsp]",
            "je 0x40800f",
            "lea rcx, str.write_dev_supers",
            "mov edx, 0x517",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret___4096_",
            "call sym.imp.__assert_fail",
            "inc r9d",
            "cmp r9d, 3",
            "jne 0x407f75",
            "jmp 0x407e6a",
            "cmp rbx, qword [rsp + 8]",
            "jne 0x407e64",
            "add rsp, 0x28",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00407036": {
        "function_address": "0x00407036",
        "instructions": [
            "push r14",
            "test rdx, rdx",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "jne 0x40704b",
            "jmp 0x4070cf",
            "mov r13, rdi",
            "mov rdi, rsi",
            "mov rbx, rsi",
            "mov r14d, ecx",
            "call fcn.00407024",
            "cmp rax, rbp",
            "je 0x4070cf",
            "mov rdi, rbx",
            "call fcn.004129c6",
            "test eax, eax",
            "jne 0x4070a9",
            "mov rdi, rbx",
            "call fcn.00407024",
            "mov r12, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0x30]",
            "lea rdx, str.parent_transid_verify_failed_on__llu_wanted__llu_found__llu_n",
            "mov r9, rax",
            "mov r8, rbp",
            "xor eax, eax",
            "mov esi, 1",
            "mov rdi, qword [r12]",
            "call sym.imp.__fprintf_chk",
            "test r14d, r14d",
            "jne 0x4070b8",
            "mov ebp, 1",
            "jmp 0x4070d5",
            "mov rdi, rbx",
            "call fcn.00407024",
            "cmp rax, rbp",
            "jne 0x40706d",
            "jmp 0x4070d3",
            "or dword [rbx + 0x74], 0x400",
            "mov rsi, qword [r12]",
            "lea rdi, str.Ignoring_transid_failure_n",
            "call sym.imp.fputs",
            "xor ebp, ebp",
            "jmp 0x4070e0",
            "xor ebp, ebp",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.004129bf",
            "pop rbx",
            "mov eax, ebp",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.00407024": {
        "function_address": "0x00407024",
        "instructions": [
            "mov rax, qword [rdi + 0xcc]",
            "ret"
        ]
    },
    "fcn.004129bf": {
        "function_address": "0x004129bf",
        "instructions": [
            "and dword [rsi + 0x74], 0xfffffffb",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.004119e3": {
        "function_address": "0x004119e3",
        "instructions": [
            "jmp fcn.0041c948"
        ]
    },
    "fcn.0041231f": {
        "function_address": "0x0041231f",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "lea rdi, [rdi + 8]",
            "call fcn.0041196c",
            "test rax, rax",
            "je 0x412360",
            "mov rdx, qword [rax + 0x58]",
            "mov rsi, qword [rax + 0x50]",
            "lea rcx, [rax + 0x50]",
            "mov qword [rsi + 8], rdx",
            "mov qword [rdx], rsi",
            "mov rdx, qword [rbx + 0x18]",
            "mov qword [rbx + 0x18], rcx",
            "add rbx, 0x10",
            "mov qword [rax + 0x50], rbx",
            "mov qword [rax + 0x58], rdx",
            "mov qword [rdx], rcx",
            "inc dword [rax + 0x70]",
            "jmp 0x412362",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00407331": {
        "function_address": "0x00407331",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x18",
            "mov r8, qword [rsi + 0xac]",
            "mov rcx, qword [rsi + 0x30]",
            "cmp rcx, r8",
            "mov qword [rsp + 8], r8",
            "je 0x40736e",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Check_tree_block_failed__want_Lu__have_Lu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x40739c",
            "mov rax, qword [rdi]",
            "mov rbx, qword [rax + 0x1f0]",
            "jmp 0x407397",
            "mov ecx, 0x10",
            "mov edx, 0x20",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00412a3b",
            "test eax, eax",
            "je 0x4073a3",
            "mov rbx, qword [rbx + 0x58]",
            "test rbx, rbx",
            "jne 0x40737a",
            "mov eax, 1",
            "jmp 0x4073a5",
            "xor eax, eax",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00412a3b": {
        "function_address": "0x00412a3b",
        "instructions": [
            "mov rax, rdx",
            "mov rdx, rcx",
            "lea rdi, [rdi + rax + 0x7c]",
            "jmp sym.imp.memcmp"
        ]
    },
    "fcn.004074ea": {
        "function_address": "0x004074ea",
        "instructions": [
            "sub rsp, 0x18",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rcx, rsi",
            "mov rax, qword [rax + 0x1a8]",
            "mov ax, word [rax + 0xc4]",
            "cmp ax, 1",
            "mov word [rsp + 0xe], ax",
            "movzx esi, ax",
            "jbe 0x407533",
            "lea rcx, [0x0041d990]",
            "lea rsi, str.ctree.h",
            "lea rdi, str.__t____sizeof_btrfs_csum_sizes____sizeof__btrfs_csum_sizes__0____",
            "mov edx, 0x7ca",
            "call sym.imp.__assert_fail",
            "lea rax, [0x0041d9a8]",
            "mov rdi, rcx",
            "mov esi, dword [rax + rsi*4]",
            "add rsp, 0x18",
            "and esi, 0xffff",
            "jmp fcn.004074ce"
        ]
    },
    "fcn.004076c6": {
        "function_address": "0x004076c6",
        "instructions": [
            "push rbp",
            "xor r9d, r9d",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x38",
            "mov eax, dword [rdx + 0x40]",
            "mov rdi, qword [rsi + 0x1d8]",
            "mov rdx, qword [rdx + 0x30]",
            "lea r8, [rsp + 0x28]",
            "lea rcx, [rsp + 0x18]",
            "mov esi, 1",
            "mov qword [rsp + 0x20], 0",
            "mov qword [rsp + 0x28], 0",
            "add rdi, 0x150",
            "mov qword [rsp + 0x18], rax",
            "lea rax, [rsp + 0x20]",
            "mov qword [rsp], rax",
            "call fcn.00414c15",
            "mov r8, qword [rsp + 0x20]",
            "test r8, r8",
            "je 0x4077ba",
            "mov rcx, qword [rsp + 0x18]",
            "mov rdx, qword [rsp + 0x28]",
            "mov rsi, rbx",
            "mov rdi, qword [rbp + 0x1d8]",
            "call fcn.0041535f",
            "test eax, eax",
            "lea rcx, str.write_and_map_eb",
            "mov edx, 0x156",
            "jne 0x407767",
            "jmp 0x4077c6",
            "test eax, eax",
            "je 0x40777a",
            "lea rcx, str.write_and_map_eb",
            "mov edx, 0x158",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "movsxd rax, ebp",
            "mov rdi, rbx",
            "inc ebp",
            "shl rax, 4",
            "add rax, rdx",
            "mov rdx, qword [rax + 8]",
            "mov edx, dword [rdx + 0x28]",
            "mov dword [rbx + 0x78], edx",
            "mov rdx, qword [rax + 0x10]",
            "mov qword [rbx + 0x38], rdx",
            "mov rax, qword [rax + 8]",
            "inc qword [rax + 0x20]",
            "call fcn.0041255f",
            "test eax, eax",
            "je 0x4077bc",
            "lea rcx, str.write_and_map_eb",
            "mov edx, 0x15e",
            "jmp 0x407767",
            "xor ebp, ebp",
            "mov rdx, qword [rsp + 0x28]",
            "cmp ebp, dword [rdx + 4]",
            "jl 0x407757",
            "mov rdi, qword [rsp + 0x28]",
            "call sym.imp.free",
            "add rsp, 0x38",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00412a07": {
        "function_address": "0x00412a07",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi + 0x48]",
            "mov eax, dword [rbx + 0x74]",
            "test al, 1",
            "je 0x412a37",
            "and eax, 0xfffffffe",
            "mov rsi, qword [rbx + 0x30]",
            "xor ecx, ecx",
            "mov dword [rbx + 0x74], eax",
            "mov eax, dword [rbx + 0x40]",
            "lea rdx, [rsi + rax - 1]",
            "call fcn.0041201a",
            "mov rdi, rbx",
            "call fcn.00412164",
            "xor eax, eax",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0041201a": {
        "function_address": "0x0041201a",
        "instructions": [
            "mov r8d, ecx",
            "mov ecx, 1",
            "jmp fcn.00411cbb"
        ]
    },
    "fcn.004071c7": {
        "function_address": "0x004071c7",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x28",
            "test byte [rsi + 0x20c], 1",
            "je 0x4071e8",
            "xor eax, eax",
            "jmp 0x407322",
            "mov rax, qword [rsi + 0x30]",
            "lea r9, [rsp + 0x10]",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "mov r12, rdi",
            "mov rdx, qword [rax]",
            "inc dword [rdx + 0x70]",
            "mov qword [rsp + 0x10], rdx",
            "mov rsi, qword [rsi + 0x30]",
            "call fcn.004038a7",
            "mov rdi, qword [rsp + 0x10]",
            "mov dword [rsp], eax",
            "call fcn.00412164",
            "mov eax, dword [rsp]",
            "test eax, eax",
            "je 0x4072ff",
            "jmp 0x407322",
            "mov rax, qword [rbx + 8]",
            "mov rdx, qword [rbx]",
            "lea r13, [rbx - 0x220]",
            "mov rdi, r12",
            "lea r15, [r13 + 0x10]",
            "mov rsi, r13",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov rax, qword [rbx - 0x48]",
            "mov qword [rbx], rbx",
            "mov qword [rbx + 8], rbx",
            "mov r14, qword [rax + 0x30]",
            "call fcn.0040cacf",
            "mov rax, qword [r13]",
            "mov rdx, qword [r13 + 0xc0]",
            "mov rax, qword [rax + 0x30]",
            "mov qword [rsp + 0x18], rdx",
            "cmp rdx, rax",
            "je 0x4072e6",
            "mov qword [r13 + 0xc0], rax",
            "mov rax, qword [r12]",
            "lea rdx, [r13 + 0x1c7]",
            "mov rcx, r15",
            "mov rsi, r14",
            "mov rdi, r12",
            "mov qword [r13 + 0xb0], rax",
            "mov qword [rsp + 0x18], rax",
            "mov rax, qword [r13]",
            "mov al, byte [rax + 0xe0]",
            "mov byte [r13 + 0xfe], al",
            "call fcn.00410048",
            "test eax, eax",
            "je 0x4072d6",
            "lea rcx, str.update_cowonly_root",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x1a2",
            "call sym.imp.__assert_fail",
            "mov rsi, r13",
            "mov rdi, r12",
            "call fcn.0040cacf",
            "jmp 0x40725d",
            "mov rdi, qword [rbx - 0x218]",
            "call fcn.00412164",
            "mov qword [rbx - 0x218], 0",
            "jmp 0x40730b",
            "lea rax, [rbp + 0x1d0]",
            "mov qword [rsp + 8], rax",
            "mov rbx, qword [rbp + 0x1d0]",
            "cmp rbx, qword [rsp + 8]",
            "jne 0x40722a",
            "jmp 0x4071e1",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00408181": {
        "function_address": "0x00408181",
        "instructions": [
            "push r14",
            "lea r14, [rsi + 0x1d8]",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x20",
            "mov r12, qword [rsi + 0x1d8]",
            "add r12, 0x60",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "xor esi, esi",
            "mov r8d, 1",
            "mov rdi, r12",
            "call fcn.00412027",
            "test eax, eax",
            "je 0x4082b9",
            "jmp 0x4082ce",
            "mov rdi, r12",
            "call fcn.0041231f",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x4081e7",
            "mov rax, qword [rsp + 8]",
            "cmp qword [rbx + 0x30], rax",
            "je 0x408203",
            "lea rcx, str.__commit_transaction",
            "mov edx, 0x1d6",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.___eb__eb__start___start_",
            "jmp 0x40822c",
            "mov rsi, rbx",
            "mov rdi, r14",
            "call fcn.00407331",
            "test eax, eax",
            "je 0x408231",
            "lea rcx, str.write_tree_block",
            "mov edx, 0x169",
            "lea rsi, str.disk_io.c",
            "lea rdi, [0x0041e6fe]",
            "call sym.imp.__assert_fail",
            "mov rsi, qword [r13]",
            "mov rdi, rbx",
            "call fcn.0040814e",
            "test eax, eax",
            "jne 0x40824f",
            "lea rcx, str.write_tree_block",
            "mov edx, 0x16c",
            "jmp 0x40821e",
            "mov rax, qword [rbx + 0xb4]",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "or rax, 1",
            "mov qword [rbx + 0xb4], rax",
            "mov qword [rsp + 0x18], rax",
            "call fcn.004074ea",
            "mov rdx, rbx",
            "mov rsi, rbp",
            "mov rdi, r13",
            "call fcn.004076c6",
            "test eax, eax",
            "je 0x4082a1",
            "lea rcx, str.__commit_transaction",
            "mov edx, 0x1d8",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "jmp 0x40822c",
            "mov eax, dword [rbx + 0x40]",
            "mov rdi, rbx",
            "add qword [rsp + 8], rax",
            "call fcn.00412a07",
            "mov rdi, rbx",
            "call fcn.00412164",
            "mov rsi, qword [rsp + 8]",
            "cmp rsi, qword [rsp + 0x10]",
            "ja 0x4081a5",
            "jmp 0x4081cc",
            "add rsp, 0x20",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040803d": {
        "function_address": "0x0040803d",
        "instructions": [
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x10",
            "mov rax, qword [rsi + 0x1d8]",
            "test byte [rax + 0x20c], 1",
            "mov rcx, qword [rax + 0x30]",
            "mov rdx, qword [rax + 0x38]",
            "je 0x408064",
            "xor ebx, ebx",
            "jmp 0x408136",
            "mov rsi, qword [rdi]",
            "mov rax, qword [rax + 0x1a8]",
            "mov qword [rax + 0x48], rsi",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rsi, qword [rcx]",
            "mov rax, qword [rax + 0x1a8]",
            "mov rsi, qword [rsi + 0x30]",
            "mov qword [rax + 0x50], rsi",
            "mov rax, qword [rcx]",
            "mov cl, byte [rax + 0xe0]",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rax, qword [rax + 0x1a8]",
            "mov byte [rax + 0xc6], cl",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rcx, qword [rax + 0x1a8]",
            "mov rax, qword [rdx]",
            "mov rax, qword [rax + 0x30]",
            "mov qword [rcx + 0x58], rax",
            "mov qword [rsp + 8], rax",
            "mov rax, qword [rdx]",
            "mov cl, byte [rax + 0xe0]",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rax, qword [rax + 0x1a8]",
            "mov byte [rax + 0xc7], cl",
            "mov rdi, qword [rdx]",
            "call fcn.00407024",
            "mov rdx, qword [rbx + 0x1d8]",
            "mov rdi, rbx",
            "mov qword [rsp + 8], rax",
            "mov rdx, qword [rdx + 0x1a8]",
            "mov qword [rdx + 0xa4], rax",
            "call fcn.00407e21",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x40805d",
            "mov ecx, eax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.failed_to_write_new_super_block_err__d_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "add rsp, 0x10",
            "mov eax, ebx",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0040cc4b": {
        "function_address": "0x0040cc4b",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x10",
            "mov r12, qword [rsi + 0x1d8]",
            "add r12, 0x88",
            "lea rcx, [rsp + 8]",
            "xor esi, esi",
            "mov r8d, 1",
            "mov rdx, rsp",
            "mov rdi, rbx",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40ccc4",
            "mov rdx, qword [rsp + 8]",
            "mov rsi, qword [rsp]",
            "xor ecx, ecx",
            "mov rdi, rbp",
            "inc rdx",
            "sub rdx, rsi",
            "call fcn.0040b0a6",
            "mov rdx, qword [rsp + 8]",
            "mov rsi, qword [rsp]",
            "xor ecx, ecx",
            "mov rdi, rbx",
            "call fcn.0041201a",
            "mov rdx, qword [rsp + 8]",
            "mov rsi, qword [rsp]",
            "xor ecx, ecx",
            "mov rdi, r12",
            "call fcn.0041200d",
            "jmp 0x40cc67",
            "add rsp, 0x10",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.0040b0a6": {
        "function_address": "0x0040b0a6",
        "instructions": [
            "push r14",
            "test ecx, ecx",
            "push r13",
            "mov r13d, ecx",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov r14, qword [rdi + 0x1d8]",
            "mov rbx, rdx",
            "lea rdx, [rsi - 1]",
            "lea rdi, [r14 + 0xd8]",
            "je 0x40b0dc",
            "add rdx, rbx",
            "xor ecx, ecx",
            "call fcn.0041200d",
            "jmp 0x40b14a",
            "add rdx, rbx",
            "xor ecx, ecx",
            "call fcn.0041201a",
            "jmp 0x40b14a",
            "mov rsi, rbp",
            "mov rdi, r14",
            "call fcn.0040abe2",
            "test rax, rax",
            "jne 0x40b109",
            "mov edx, dword [r12 + 0x1f0]",
            "cmp rbx, rdx",
            "cmovbe rdx, rbx",
            "jmp 0x40b144",
            "mov rdx, qword [rax + 0x30]",
            "add rdx, qword [rax + 0x39]",
            "mov rcx, qword [rax + 0x60]",
            "sub rdx, rbp",
            "cmp rdx, rbx",
            "cmova rdx, rbx",
            "test r13d, r13d",
            "je 0x40b135",
            "add qword [rax + 0x70], rdx",
            "add qword [rcx + 0x18], rdx",
            "add qword [r14 + 0x1c0], rdx",
            "jmp 0x40b144",
            "sub qword [rax + 0x70], rdx",
            "sub qword [rcx + 0x18], rdx",
            "sub qword [r14 + 0x1c0], rdx",
            "add rbp, rdx",
            "sub rbx, rdx",
            "test rbx, rbx",
            "jne 0x40b0e8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "xor eax, eax",
            "pop r14",
            "ret"
        ]
    },
    "fcn.004070eb": {
        "function_address": "0x004070eb",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "push rcx",
            "mov rbp, qword [rdi + 0x1d8]",
            "mov edi, 0x30",
            "call sym.imp.malloc",
            "test rax, rax",
            "jne 0x407123",
            "lea rcx, [0x0041dae0]",
            "mov edx, 0x25",
            "lea rsi, str.transaction.h",
            "lea rdi, str.___h_",
            "jmp 0x407144",
            "cmp qword [rbx + 8], 0",
            "je 0x407149",
            "lea rcx, [0x0041dae0]",
            "lea rsi, str.transaction.h",
            "lea rdi, str.__root__commit_root_",
            "mov edx, 0x26",
            "call sym.imp.__assert_fail",
            "cmp qword [rbp + 0x1a0], 0",
            "je 0x40716f",
            "lea rcx, [0x0041dae0]",
            "mov edx, 0x27",
            "lea rsi, str.transaction.h",
            "lea rdi, str.__fs_info__running_transaction_",
            "jmp 0x407144",
            "mov rdx, qword [rbp + 0x158]",
            "mov qword [rbp + 0x1a0], rax",
            "inc rdx",
            "mov qword [rbp + 0x158], rdx",
            "mov qword [rax], rdx",
            "mov qword [rax + 8], 0",
            "mov qword [rax + 0x10], 0",
            "mov qword [rax + 0x18], 1",
            "mov qword [rax + 0x20], 0",
            "mov qword [rax + 0x28], 0",
            "mov qword [rbx + 0x1e8], rdx",
            "mov rdx, qword [rbx]",
            "mov qword [rbx + 8], rdx",
            "inc dword [rdx + 0x70]",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.004082dd": {
        "function_address": "0x004082dd",
        "instructions": [
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x10",
            "mov r14, qword [rdi]",
            "mov rdi, qword [rsi + 8]",
            "cmp rdi, qword [rsi]",
            "mov r12, qword [rsi + 0x1d8]",
            "je 0x408367",
            "call fcn.00412164",
            "mov rax, qword [rbx]",
            "mov qword [rbx + 8], 0",
            "lea rcx, [rbx + 0x10]",
            "mov rdi, rbp",
            "mov rdx, qword [rax + 0x30]",
            "mov qword [rbx + 0xc0], rdx",
            "mov rdx, qword [rbp]",
            "mov qword [rbx + 0xb0], rdx",
            "mov al, byte [rax + 0xe0]",
            "mov qword [rsp + 8], rdx",
            "lea rdx, [rbx + 0x1c7]",
            "mov byte [rbx + 0xfe], al",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rsi, qword [rax + 0x30]",
            "call fcn.00410048",
            "test eax, eax",
            "lea rcx, str.btrfs_commit_transaction",
            "mov edx, 0x1f3",
            "jne 0x408382",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.004071c7",
            "test eax, eax",
            "je 0x408395",
            "lea rcx, str.btrfs_commit_transaction",
            "mov edx, 0x1f6",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00408181",
            "test eax, eax",
            "mov r13d, eax",
            "lea rcx, str.btrfs_commit_transaction",
            "mov edx, 0x1f8",
            "jne 0x408382",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0040803d",
            "mov rsi, qword [r12 + 0x28]",
            "lea rdx, [r12 + 0xd8]",
            "mov rdi, rbp",
            "call fcn.0040cc4b",
            "mov eax, r13d",
            "mov rdi, rbp",
            "mov ecx, 0xc",
            "rep stosd dword [rdi], eax",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 8]",
            "call fcn.00412164",
            "mov qword [rbx + 8], 0",
            "mov qword [r12 + 0x1a0], 0",
            "xor eax, eax",
            "mov qword [r12 + 0x160], r14",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040cce8": {
        "function_address": "0x0040cce8",
        "instructions": [
            "push r12",
            "lea r12, [rdi + 0xb0]",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x20",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "or r8d, 0xffffffff",
            "xor esi, esi",
            "mov rdi, r12",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40cd6b",
            "mov rsi, qword [rsp + 8]",
            "lea rdx, [rsp + 0x18]",
            "mov rdi, r12",
            "call fcn.00412136",
            "test eax, eax",
            "jne 0x40cd51",
            "mov rbp, qword [rsp + 0x18]",
            "cmp qword [rbp + 0x68], 0",
            "je 0x40cd49",
            "mov rdi, rbp",
            "call fcn.0041b5f4",
            "mov rdi, qword [rbp + 0x68]",
            "call sym.imp.free",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov rdx, qword [rsp + 0x10]",
            "mov rsi, qword [rsp + 8]",
            "xor r8d, r8d",
            "or ecx, 0xffffffff",
            "mov rdi, r12",
            "call fcn.00411cbb",
            "jmp 0x40ccfa",
            "lea rbp, [rbx + 0x88]",
            "lea rcx, [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "xor esi, esi",
            "mov r8d, 1",
            "mov rdi, rbp",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40cdc6",
            "mov rdx, qword [rsp + 0x10]",
            "mov rsi, qword [rsp + 8]",
            "xor ecx, ecx",
            "mov rdi, rbp",
            "call fcn.0041201a",
            "jmp 0x40cd72",
            "mov rcx, qword [rax]",
            "mov rdx, qword [rax + 8]",
            "lea rdi, [rax - 0x28]",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdx], rcx",
            "mov qword [rax], rax",
            "mov qword [rax + 8], rax",
            "call sym.imp.free",
            "jmp 0x40cdcd",
            "lea rbp, [rbx + 0x1f8]",
            "mov rax, qword [rbx + 0x1f8]",
            "cmp rax, rbp",
            "jne 0x40cda6",
            "add rsp, 0x20",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.0041b5f4": {
        "function_address": "0x0041b5f4",
        "instructions": [
            "mov rdi, qword [rdi + 0x68]",
            "jmp fcn.0041ab21"
        ]
    },
    "fcn.0041cafc": {
        "function_address": "0x0041cafc",
        "instructions": [
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "jmp 0x41cb19",
            "mov rdi, rbx",
            "mov rsi, rbp",
            "call fcn.0041c68d",
            "mov rdi, rbx",
            "call r12",
            "mov rdi, rbp",
            "call fcn.0041c91c",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x41cb08",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.0041c68d": {
        "function_address": "0x0041c68d",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rax, qword [rdi + 0x10]",
            "mov rdx, qword [rdi + 8]",
            "test rax, rax",
            "jne 0x41c6a7",
            "mov rax, rdx",
            "jmp 0x41c751",
            "test rdx, rdx",
            "jne 0x41c6b4",
            "jmp 0x41c751",
            "mov rdx, rax",
            "mov rax, qword [rdx + 0x10]",
            "test rax, rax",
            "jne 0x41c6b1",
            "mov r8, qword [rdx]",
            "mov rax, qword [rdx + 8]",
            "mov rsi, r8",
            "and r8d, 1",
            "and rsi, 0xfffffffffffffffc",
            "test rax, rax",
            "mov rbx, rsi",
            "je 0x41c6e3",
            "mov rcx, qword [rax]",
            "and ecx, 3",
            "or rcx, rsi",
            "mov qword [rax], rcx",
            "cmp rsi, rdi",
            "jne 0x41c6f1",
            "mov qword [rdi + 8], rax",
            "mov rbx, rdx",
            "jmp 0x41c6f5",
            "mov qword [rsi + 0x10], rax",
            "mov rcx, qword [rdi]",
            "mov qword [rdx], rcx",
            "mov rcx, qword [rdi + 8]",
            "mov qword [rdx + 8], rcx",
            "mov rcx, qword [rdi + 0x10]",
            "mov qword [rdx + 0x10], rcx",
            "mov rcx, qword [rdi]",
            "and rcx, 0xfffffffffffffffc",
            "je 0x41c726",
            "cmp qword [rcx + 0x10], rdi",
            "jne 0x41c720",
            "mov qword [rcx + 0x10], rdx",
            "jmp 0x41c72a",
            "mov qword [rcx + 8], rdx",
            "jmp 0x41c72a",
            "mov qword [rbp], rdx",
            "mov rsi, qword [rdi + 0x10]",
            "mov rcx, qword [rsi]",
            "and ecx, 3",
            "or rcx, rdx",
            "mov qword [rsi], rcx",
            "mov rsi, qword [rdi + 8]",
            "test rsi, rsi",
            "je 0x41c78e",
            "mov rcx, qword [rsi]",
            "and ecx, 3",
            "or rcx, rdx",
            "mov qword [rsi], rcx",
            "jmp 0x41c78e",
            "mov r8, qword [rdi]",
            "mov rdx, r8",
            "and r8d, 1",
            "and rdx, 0xfffffffffffffffc",
            "test rax, rax",
            "mov rbx, rdx",
            "je 0x41c773",
            "mov rcx, qword [rax]",
            "and ecx, 3",
            "or rcx, rdx",
            "mov qword [rax], rcx",
            "test rdx, rdx",
            "je 0x41c78a",
            "cmp qword [rdx + 0x10], rdi",
            "jne 0x41c784",
            "mov qword [rdx + 0x10], rax",
            "jmp 0x41c78e",
            "mov qword [rdx + 8], rax",
            "jmp 0x41c78e",
            "mov qword [rbp], rax",
            "dec r8d",
            "jne 0x41c919",
            "jmp 0x41c8fc",
            "mov rdi, qword [rbx + 0x10]",
            "cmp rdi, rax",
            "jne 0x41c84e",
            "mov rdi, qword [rbx + 8]",
            "mov rax, qword [rdi]",
            "test al, 1",
            "jne 0x41c7ce",
            "or rax, 1",
            "mov rsi, rbp",
            "mov qword [rdi], rax",
            "and qword [rbx], 0xfffffffffffffffe",
            "mov rdi, rbx",
            "call fcn.0041c4f4",
            "mov rdi, qword [rbx + 8]",
            "mov rax, qword [rdi + 0x10]",
            "test rax, rax",
            "je 0x41c7dc",
            "test byte [rax], 1",
            "je 0x41c7f3",
            "mov rdx, qword [rdi + 8]",
            "test rdx, rdx",
            "je 0x41c892",
            "test byte [rdx], 1",
            "je 0x41c7f3",
            "jmp 0x41c892",
            "mov rdx, qword [rdi + 8]",
            "test rdx, rdx",
            "je 0x41c801",
            "test byte [rdx], 1",
            "je 0x41c81a",
            "test rax, rax",
            "je 0x41c80a",
            "or qword [rax], 1",
            "and qword [rdi], 0xfffffffffffffffe",
            "mov rsi, rbp",
            "call fcn.0041c553",
            "mov rdi, qword [rbx + 8]",
            "mov rax, qword [rdi]",
            "mov rdx, qword [rbx]",
            "and rax, 0xfffffffffffffffe",
            "and edx, 1",
            "or rax, rdx",
            "mov qword [rdi], rax",
            "or qword [rbx], 1",
            "mov rax, qword [rdi + 8]",
            "test rax, rax",
            "je 0x41c83e",
            "or qword [rax], 1",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.0041c4f4",
            "jmp 0x41c8f0",
            "mov rax, qword [rdi]",
            "test al, 1",
            "jne 0x41c86f",
            "or rax, 1",
            "mov rsi, rbp",
            "mov qword [rdi], rax",
            "and qword [rbx], 0xfffffffffffffffe",
            "mov rdi, rbx",
            "call fcn.0041c553",
            "mov rdi, qword [rbx + 0x10]",
            "mov rax, qword [rdi + 0x10]",
            "test rax, rax",
            "je 0x41c884",
            "test byte [rax], 1",
            "jne 0x41c884",
            "test byte [rax], 1",
            "jne 0x41c8a4",
            "jmp 0x41c8c1",
            "mov rdx, qword [rdi + 8]",
            "test rdx, rdx",
            "je 0x41c892",
            "test byte [rdx], 1",
            "je 0x41c89f",
            "and qword [rdi], 0xfffffffffffffffe",
            "mov rdx, qword [rbx]",
            "and rdx, 0xfffffffffffffffc",
            "jmp 0x41c8f6",
            "test rax, rax",
            "jne 0x41c87d",
            "mov rax, qword [rdi + 8]",
            "test rax, rax",
            "je 0x41c8b1",
            "or qword [rax], 1",
            "and qword [rdi], 0xfffffffffffffffe",
            "mov rsi, rbp",
            "call fcn.0041c4f4",
            "mov rdi, qword [rbx + 0x10]",
            "mov rax, qword [rdi]",
            "mov rdx, qword [rbx]",
            "and rax, 0xfffffffffffffffe",
            "and edx, 1",
            "or rax, rdx",
            "mov qword [rdi], rax",
            "or qword [rbx], 1",
            "mov rax, qword [rdi + 0x10]",
            "test rax, rax",
            "je 0x41c8e5",
            "or qword [rax], 1",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.0041c553",
            "mov rax, qword [rbp]",
            "jmp 0x41c910",
            "mov rax, rbx",
            "mov rbx, rdx",
            "test rax, rax",
            "je 0x41c906",
            "test byte [rax], 1",
            "je 0x41c915",
            "cmp rax, qword [rbp]",
            "jne 0x41c79c",
            "test rax, rax",
            "je 0x41c919",
            "or qword [rax], 1",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0041c91c": {
        "function_address": "0x0041c91c",
        "instructions": [
            "mov rax, qword [rdi]",
            "test rax, rax",
            "jne 0x41c928",
            "ret",
            "mov rax, rdx",
            "mov rdx, qword [rax + 0x10]",
            "test rdx, rdx",
            "jne 0x41c925",
            "ret"
        ]
    },
    "fcn.00407b8c": {
        "function_address": "0x00407b8c",
        "instructions": [
            "push rbx",
            "mov rax, qword [rdi + 0x48]",
            "mov rbx, rdi",
            "test rax, rax",
            "je 0x407ba1",
            "mov rdi, qword [rax]",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x40]",
            "test rax, rax",
            "je 0x407bb2",
            "mov rdi, qword [rax]",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x28]",
            "test rax, rax",
            "je 0x407bc3",
            "mov rdi, qword [rax]",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x30]",
            "test rax, rax",
            "je 0x407bd4",
            "mov rdi, qword [rax]",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x58]",
            "test rax, rax",
            "je 0x407be5",
            "mov rdi, qword [rax]",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x38]",
            "test rax, rax",
            "je 0x407bf7",
            "pop rbx",
            "mov rdi, qword [rax]",
            "jmp fcn.00412164",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0041306f": {
        "function_address": "0x0041306f",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "push rbx",
            "jmp 0x413107",
            "mov rbp, rax",
            "jmp 0x413107",
            "mov edi, dword [rbx + 0x28]",
            "cmp edi, 0xffffffff",
            "je 0x4130c9",
            "call sym.imp.fsync",
            "mov edi, dword [rbx + 0x28]",
            "xor edx, edx",
            "xor esi, esi",
            "mov ecx, 4",
            "call sym.imp.posix_fadvise64",
            "test eax, eax",
            "je 0x4130ba",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Warning__could_not_drop_caches_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov edi, dword [rbx + 0x28]",
            "call sym.imp.close",
            "mov dword [rbx + 0x28], 0xffffffff",
            "mov rdx, qword [rbx]",
            "mov rax, qword [rbx + 8]",
            "mov dword [rbx + 0x2c], 0",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov rdi, qword [rbx + 0x30]",
            "mov qword [rbx], 0x100100",
            "mov qword [rbx + 8], 0x200200",
            "call sym.imp.free",
            "mov rdi, qword [rbx + 0x38]",
            "call sym.imp.free",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov rbx, qword [rbp + 0x30]",
            "lea rax, [rbp + 0x30]",
            "cmp rbx, rax",
            "jne 0x413082",
            "mov rax, qword [rbp + 0x58]",
            "mov qword [rbp + 0x58], 0",
            "test rax, rax",
            "jne 0x41307a",
            "mov rdi, rbp",
            "call sym.imp.free",
            "pop r11",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.fsync": {
        "function_address": "0x00402370",
        "instructions": [
            "jmp qword [reloc.fsync]"
        ]
    },
    "sym.imp.posix_fadvise64": {
        "function_address": "0x00402400",
        "instructions": [
            "jmp qword [reloc.posix_fadvise64]"
        ]
    },
    "fcn.00407bf9": {
        "function_address": "0x00407bf9",
        "instructions": [
            "push rbp",
            "lea rbp, [rdi + 0x1e0]",
            "push rbx",
            "mov rbx, rdi",
            "push r8",
            "jmp 0x407c27",
            "mov rcx, qword [rax]",
            "mov rdx, qword [rax + 8]",
            "lea rdi, [rax - 0x60]",
            "mov qword [rcx + 8], rdx",
            "mov qword [rdx], rcx",
            "mov qword [rax], rax",
            "mov qword [rax + 8], rax",
            "call fcn.00412164",
            "mov rax, qword [rbx + 0x1e0]",
            "cmp rax, rbp",
            "jne 0x407c09",
            "lea rsi, [0x0040701f]",
            "lea rdi, [rbx + 0x150]",
            "call fcn.004119f6",
            "lea rdi, [rbx + 0x60]",
            "call fcn.0041224d",
            "lea rdi, [rbx + 0x88]",
            "call fcn.0041224d",
            "lea rdi, [rbx + 0xb0]",
            "call fcn.0041224d",
            "lea rdi, [rbx + 0xd8]",
            "call fcn.0041224d",
            "lea rdi, [rbx + 0x100]",
            "call fcn.0041224d",
            "pop rsi",
            "lea rdi, [rbx + 0x128]",
            "pop rbx",
            "pop rbp",
            "jmp fcn.0041224d"
        ]
    },
    "fcn.0041449c": {
        "function_address": "0x0041449c",
        "instructions": [
            "push rbx",
            "mov rbx, rsi",
            "call fcn.0041196c",
            "test rax, rax",
            "jne 0x4144c6",
            "lea rcx, str.btrfs_num_copies",
            "mov edx, 0x46d",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___ce_",
            "jmp 0x4144f2",
            "mov rdx, qword [rax + 0x20]",
            "cmp rdx, rbx",
            "ja 0x4144d8",
            "add rdx, qword [rax + 0x28]",
            "cmp rdx, rbx",
            "jae 0x4144f7",
            "lea rcx, str.btrfs_num_copies",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ce__start___logical__ce__start__ce__size___logical_",
            "mov edx, 0x46e",
            "call sym.imp.__assert_fail",
            "mov rdx, qword [rax + 0x30]",
            "test dl, 0x30",
            "je 0x414505",
            "mov eax, dword [rax + 0x48]",
            "jmp 0x41452b",
            "test dl, 0x40",
            "je 0x41450f",
            "mov eax, dword [rax + 0x4c]",
            "jmp 0x41452b",
            "test dl, 0x80",
            "mov eax, 2",
            "jne 0x41452b",
            "and edx, 0x100",
            "cmp rdx, 1",
            "sbb eax, eax",
            "and eax, 0xfffffffe",
            "add eax, 3",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00414f17": {
        "function_address": "0x00414f17",
        "instructions": [
            "push r15",
            "mov edx, 0x1000",
            "mov esi, 0x10000",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x28",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rbp, qword [rax + 0x1a8]",
            "call fcn.0040755f",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x414ff9",
            "mov rdi, rax",
            "call fcn.004085f1",
            "mov ecx, 0xdcb",
            "xor edx, edx",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.00412a59",
            "mov eax, dword [rbp + 0xa0]",
            "mov dword [rsp + 0x1c], eax",
            "lea r14, [rbp + rax + 0x32b]",
            "lea rax, [rbp + 0x32b]",
            "jmp 0x414fe0",
            "cmp byte [rax + 8], 0xe4",
            "mov rsi, qword [rax + 9]",
            "lea r13, [rax + 0x11]",
            "jne 0x414fc1",
            "mov r15, r13",
            "mov rdx, rbx",
            "mov rdi, r12",
            "sub r15, rbp",
            "mov rcx, r15",
            "call fcn.00414c98",
            "test eax, eax",
            "jne 0x414fe7",
            "movzx edi, word [rbx + r15 + 0xa8]",
            "call fcn.00412bd4",
            "mov eax, eax",
            "add rax, r13",
            "jmp 0x414fe0",
            "lea rcx, str.btrfs_read_sys_array",
            "lea rsi, str.volumes.c",
            "lea rdi, [0x0041e6fe]",
            "mov edx, 0x6dc",
            "call sym.imp.__assert_fail",
            "cmp rax, r14",
            "jb 0x414f86",
            "xor eax, eax",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "call fcn.00412164",
            "mov eax, dword [rsp + 8]",
            "jmp 0x414ffe",
            "mov eax, 0xfffffff4",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00414c98": {
        "function_address": "0x00414c98",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdi",
            "push r13",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x48",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x38], rax",
            "xor eax, eax",
            "lea rax, [rdx + rcx + 0x70]",
            "mov rdx, qword [rdi + 0x1d8]",
            "lea r15, [rax + 0xc]",
            "mov rax, qword [rax + 0xc]",
            "add rdx, 0x150",
            "mov rdi, rdx",
            "mov qword [rsp + 0x10], rdx",
            "mov qword [rsp + 0x18], rax",
            "call fcn.0041196c",
            "test rax, rax",
            "je 0x414d0a",
            "mov rdx, qword [rax + 0x20]",
            "cmp rdx, rbx",
            "ja 0x414d0a",
            "add rdx, qword [rax + 0x28]",
            "cmp rdx, rbx",
            "ja 0x414e4e",
            "movzx edx, word [r15 + 0x2c]",
            "lea rdi, [rdx + 5]",
            "movzx esi, dx",
            "mov qword [rsp], rdx",
            "mov dword [rsp + 8], esi",
            "shl rdi, 4",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r13, rax",
            "mov rdx, qword [rsp]",
            "mov esi, dword [rsp + 8]",
            "je 0x414e52",
            "mov qword [rax + 0x20], rbx",
            "mov rax, qword [rsp + 0x18]",
            "shl rdx, 5",
            "mov dword [r13 + 0x48], esi",
            "lea rdx, [r12 + rdx + 0x30]",
            "mov rbx, r13",
            "mov qword [r13 + 0x28], rax",
            "mov eax, dword [r15 + 0x24]",
            "mov qword [rsp + 0x18], rdx",
            "mov dword [r13 + 0x3c], eax",
            "mov eax, dword [r15 + 0x20]",
            "mov dword [r13 + 0x38], eax",
            "mov eax, dword [r15 + 0x28]",
            "mov dword [r13 + 0x44], eax",
            "mov rax, qword [r15 + 0x10]",
            "mov dword [r13 + 0x40], eax",
            "mov rax, qword [r15 + 0x18]",
            "mov qword [r13 + 0x30], rax",
            "movzx eax, word [r15 + 0x2e]",
            "lea r15, [r12 + 0x30]",
            "mov dword [r13 + 0x4c], eax",
            "jmp 0x414e13",
            "lea rax, [rbp + r15 + 0x70]",
            "lea rsi, [rsp + 0x28]",
            "mov ecx, 0x10",
            "mov rdi, rbp",
            "mov rdx, qword [rax + 0x14]",
            "mov qword [rbx + 0x58], rdx",
            "lea rdx, [r15 + 0x10]",
            "mov r12, qword [rax + 0xc]",
            "call fcn.00412a4b",
            "lea rdx, [rsp + 0x28]",
            "xor ecx, ecx",
            "mov rsi, r12",
            "mov rdi, r14",
            "call fcn.00414c37",
            "test rax, rax",
            "mov qword [rbx + 0x50], rax",
            "jne 0x414e0b",
            "mov esi, 0x90",
            "mov edi, 1",
            "call sym.imp.calloc",
            "lea rsi, str.warning__device__llu_is_missing_n",
            "mov qword [rax + 0x50], r12",
            "mov dword [rax + 0x28], 0xffffffff",
            "mov qword [rbx + 0x50], rax",
            "mov rdx, r12",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "add r15, 0x20",
            "add rbx, 0x10",
            "cmp r15, qword [rsp + 0x18]",
            "jne 0x414d95",
            "mov rdi, qword [rsp + 0x10]",
            "mov rsi, r13",
            "call fcn.0041186d",
            "test eax, eax",
            "je 0x414e4e",
            "lea rcx, str.read_one_chunk",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x650",
            "call sym.imp.__assert_fail",
            "xor eax, eax",
            "jmp 0x414e57",
            "mov eax, 0xfffffff4",
            "mov rdx, qword [rsp + 0x38]",
            "xor rdx, qword fs:[0x28]",
            "je 0x414e6c",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x48",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412bd4": {
        "function_address": "0x00412bd4",
        "instructions": [
            "test edi, edi",
            "jne 0x412bdf",
            "push r10",
            "call fcn.00402490",
            "lea eax, [rdi - 1]",
            "cdqe",
            "shl rax, 5",
            "add rax, 0x50",
            "ret"
        ]
    },
    "fcn.004085f6": {
        "function_address": "0x004085f6",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x28",
            "mov qword [rsp + 0x10], rcx",
            "call fcn.0040755f",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x408792",
            "mov rsi, qword [rsp + 0x10]",
            "mov rdi, rax",
            "call fcn.0040814e",
            "test eax, eax",
            "jne 0x408792",
            "lea rax, [r12 + 0x1d8]",
            "xor r13d, r13d",
            "xor r15d, r15d",
            "xor ebp, ebp",
            "xor r14d, r14d",
            "mov qword [rsp + 0x18], rax",
            "jmp 0x408655",
            "mov ebp, r15d",
            "mov r13d, 1",
            "mov rdi, qword [r12 + 0x1d8]",
            "mov edx, ebp",
            "mov rsi, rbx",
            "call fcn.0040756f",
            "test eax, eax",
            "jne 0x4086f7",
            "mov rdi, qword [rsp + 0x18]",
            "mov rsi, rbx",
            "call fcn.00407331",
            "test eax, eax",
            "jne 0x4086f7",
            "mov edx, 1",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.004074ea",
            "test eax, eax",
            "jne 0x4086f7",
            "mov rdi, qword [rbx + 0x48]",
            "mov rdx, qword [rsp + 0x10]",
            "mov ecx, r13d",
            "mov rsi, rbx",
            "call fcn.00407036",
            "test eax, eax",
            "jne 0x4086f7",
            "test byte [rbx + 0x75], 4",
            "je 0x4086ea",
            "mov rax, qword [rbx + 0x60]",
            "lea rdx, [rbx + 0x60]",
            "cmp rax, rdx",
            "jne 0x4086ea",
            "mov rdx, qword [r12 + 0x1d8]",
            "mov rcx, qword [rdx + 0x1e8]",
            "mov qword [rdx + 0x1e8], rax",
            "add rdx, 0x1e0",
            "mov qword [rbx + 0x60], rdx",
            "mov qword [rbx + 0x68], rcx",
            "mov qword [rcx], rax",
            "inc dword [rbx + 0x70]",
            "mov rdi, rbx",
            "call fcn.004085f1",
            "jmp 0x408792",
            "test r13d, r13d",
            "je 0x408731",
            "lea rdi, [r12 + 0x1d8]",
            "mov rsi, rbx",
            "call fcn.00407331",
            "test eax, eax",
            "mov rax, qword [reloc.stderr]",
            "mov rsi, qword [rax]",
            "je 0x408723",
            "lea rdi, str.read_block_failed_check_tree_block_n",
            "jmp 0x40872a",
            "lea rdi, str.Csum_didnt_match_n",
            "call sym.imp.fputs",
            "jmp 0x408788",
            "mov rdi, qword [r12 + 0x1d8]",
            "mov edx, dword [rbx + 0x40]",
            "mov rsi, qword [rbx + 0x30]",
            "add rdi, 0x150",
            "call fcn.0041449c",
            "mov dword [rsp + 0xc], eax",
            "dec eax",
            "je 0x40864f",
            "mov rdi, rbx",
            "call fcn.00407024",
            "cmp rax, r14",
            "jbe 0x408777",
            "test ebp, ebp",
            "je 0x408777",
            "mov rdi, rbx",
            "mov r15d, ebp",
            "call fcn.00407024",
            "mov r14, rax",
            "inc ebp",
            "cmp ebp, dword [rsp + 0xc]",
            "jg 0x40864c",
            "jmp 0x408655",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call fcn.00412164",
            "add rsp, 0x28",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041500d": {
        "function_address": "0x0041500d",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x68",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x58], rax",
            "xor eax, eax",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rbx, qword [rax + 0x38]",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r12, rax",
            "je 0x41532c",
            "lea rdx, [rsp + 0x16]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rsi, rbx",
            "mov qword [rsp + 0x16], 1",
            "mov qword [rsp + 0x1f], 0",
            "mov byte [rsp + 0x1e], 0",
            "call fcn.0040551b",
            "test eax, eax",
            "mov ebp, eax",
            "js 0x415322",
            "mov rbp, qword [r12]",
            "movsxd r13, dword [r12 + 0x40]",
            "mov eax, dword [rbp + 0xdc]",
            "cmp r13d, eax",
            "mov dword [rsp + 0x10], eax",
            "jb 0x4150b5",
            "mov rsi, r12",
            "mov rdi, rbx",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "je 0x415080",
            "mov ebp, 0",
            "cmovle ebp, eax",
            "jmp 0x415322",
            "lea rsi, [rsp + 0x27]",
            "mov edx, r13d",
            "mov rdi, rbp",
            "call fcn.00412abf",
            "mov al, byte [rsp + 0x2f]",
            "cmp al, 0xd8",
            "jne 0x4152d1",
            "imul r13, r13, 0x19",
            "lea rsi, [rsp + 0x48]",
            "mov ecx, 0x10",
            "mov rdi, rbp",
            "mov eax, dword [rbp + r13 + 0xf2]",
            "lea r13, [rbp + rax + 0xd5]",
            "lea rdx, [rax + 0xa7]",
            "mov r15, qword [r13 + 0xc]",
            "mov qword [rsp + 8], rdx",
            "lea r14, [r13 + 0xc]",
            "mov qword [rsp], rax",
            "call fcn.00412a4b",
            "mov rax, qword [rsp]",
            "lea rsi, [rsp + 0x38]",
            "mov ecx, 0x10",
            "mov rdi, rbp",
            "lea rdx, [rax + 0xb7]",
            "call fcn.00412a4b",
            "mov rcx, qword [rbx + 0x1d8]",
            "lea rdi, [rsp + 0x38]",
            "mov edx, 0x10",
            "mov rsi, rcx",
            "mov qword [rsp], rcx",
            "call sym.imp.memcmp",
            "test eax, eax",
            "mov rcx, qword [rsp]",
            "je 0x4151de",
            "mov rax, qword [rcx + 0x1f0]",
            "mov rcx, qword [rax + 0x58]",
            "jmp 0x415184",
            "lea rsi, [rsp + 0x38]",
            "mov rdi, rcx",
            "mov edx, 0x10",
            "mov qword [rsp], rcx",
            "call sym.imp.memcmp",
            "test eax, eax",
            "mov rcx, qword [rsp]",
            "je 0x4151de",
            "mov rcx, qword [rcx + 0x58]",
            "test rcx, rcx",
            "jne 0x415162",
            "lea rdi, [rsp + 0x38]",
            "call fcn.00412aff",
            "test rax, rax",
            "je 0x4152c3",
            "xor esi, esi",
            "mov rdi, rax",
            "mov qword [rsp], rax",
            "call fcn.0041313c",
            "test eax, eax",
            "mov rdx, qword [rsp]",
            "jne 0x4152c3",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rax, qword [rax + 0x1f0]",
            "mov rax, qword [rax + 0x58]",
            "mov qword [rdx + 0x58], rax",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rax, qword [rax + 0x1f0]",
            "mov qword [rax + 0x58], rdx",
            "lea rcx, [rsp + 0x38]",
            "lea rdx, [rsp + 0x48]",
            "mov rsi, r15",
            "mov rdi, rbx",
            "call fcn.00414c37",
            "test rax, rax",
            "jne 0x41525c",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.warning_devid__llu_not_found_already_n",
            "mov rcx, r15",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov esi, 0x90",
            "mov edi, 1",
            "call sym.imp.calloc",
            "test rax, rax",
            "je 0x4152c3",
            "mov dword [rax + 0x28], 0xffffffff",
            "mov rdx, qword [rbx + 0x1d8]",
            "mov rdx, qword [rdx + 0x1f0]",
            "mov rcx, qword [rdx + 0x30]",
            "mov qword [rcx + 8], rax",
            "mov qword [rax], rcx",
            "lea rcx, [rdx + 0x30]",
            "mov qword [rax + 8], rcx",
            "mov qword [rdx + 0x30], rax",
            "mov rdx, qword [r13 + 0xc]",
            "lea rsi, [rax + 0x80]",
            "mov ecx, 0x10",
            "mov rdi, rbp",
            "mov qword [rax + 0x50], rdx",
            "mov rdx, qword [r14 + 8]",
            "mov qword [rax + 0x58], rdx",
            "mov rdx, qword [r14 + 0x10]",
            "mov qword [rax + 0x60], rdx",
            "mov rdx, qword [r14 + 0x24]",
            "mov qword [rax + 0x78], rdx",
            "mov edx, dword [r14 + 0x18]",
            "mov dword [rax + 0x68], edx",
            "mov edx, dword [r14 + 0x1c]",
            "mov dword [rax + 0x6c], edx",
            "mov edx, dword [r14 + 0x20]",
            "mov dword [rax + 0x70], edx",
            "mov rdx, qword [rsp + 8]",
            "mov qword [rsp], rax",
            "call fcn.00412a4b",
            "mov rdx, qword [rbx + 0x1d8]",
            "mov rax, qword [rsp]",
            "mov rdx, qword [rdx + 0x40]",
            "mov qword [rax + 0x10], rdx",
            "jmp 0x415318",
            "lea rcx, str.btrfs_read_chunk_tree",
            "mov edx, 0x710",
            "jmp 0x415305",
            "cmp al, 0xe4",
            "jne 0x415318",
            "imul r13, r13, 0x19",
            "mov rsi, qword [rsp + 0x30]",
            "mov rdx, rbp",
            "mov rdi, rbx",
            "mov ecx, dword [rbp + r13 + 0xf2]",
            "add rcx, 0x65",
            "call fcn.00414c98",
            "test eax, eax",
            "je 0x415318",
            "lea rcx, str.btrfs_read_chunk_tree",
            "mov edx, 0x715",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "inc dword [r12 + 0x40]",
            "jmp 0x415080",
            "mov rdi, r12",
            "call fcn.00402e4d",
            "jmp 0x415331",
            "mov ebp, 0xfffffff4",
            "mov rdx, qword [rsp + 0x58]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebp",
            "je 0x415348",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x68",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00406ec3": {
        "function_address": "0x00406ec3",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "xor r12d, r12d",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "push r13",
            "mov r13, rdi",
            "jmp 0x406f3b",
            "mov r14d, dword [rbx + r12*4 + 0x44]",
            "mov rdi, r15",
            "call fcn.0040291d",
            "inc r14d",
            "cmp r14d, eax",
            "jb 0x406f02",
            "inc r12",
            "cmp r12, 7",
            "jne 0x406f3b",
            "mov eax, 1",
            "jmp 0x406fa7",
            "cmp dword [rbx + 0x80], 0",
            "je 0x406f1e",
            "xor r8d, r8d",
            "mov ecx, r14d",
            "mov edx, ebp",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00403be0",
            "mov edx, r14d",
            "mov rsi, r15",
            "mov rdi, r13",
            "call fcn.00403b70",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x406f4c",
            "mov eax, 0xfffffffb",
            "jmp 0x406fa7",
            "mov r15, qword [rbx + r12*8 + 8]",
            "lea ebp, [r12 + 1]",
            "test r15, r15",
            "jne 0x406eda",
            "jmp 0x406ef8",
            "movsxd rax, ebp",
            "mov dword [rbx + rax*4 + 0x40], r14d",
            "dec ebp",
            "movsxd r14, ebp",
            "mov rdi, qword [rbx + r14*8]",
            "call fcn.00412164",
            "test ebp, ebp",
            "mov qword [rbx + r14*8], r12",
            "mov dword [rbx + r14*4 + 0x40], 0",
            "je 0x406fa5",
            "cmp dword [rbx + 0x80], 0",
            "je 0x406f8e",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "mov edx, ebp",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00403be0",
            "xor edx, edx",
            "mov rsi, r12",
            "mov rdi, r13",
            "call fcn.00403b70",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x406f54",
            "jmp 0x406f34",
            "xor eax, eax",
            "pop r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412abf": {
        "function_address": "0x00412abf",
        "instructions": [
            "movsxd rdx, edx",
            "push rbx",
            "mov rbx, rsi",
            "imul rdx, rdx, 0x19",
            "mov ecx, 0x11",
            "sub rsp, 0x20",
            "lea rsi, [rsp + 0xf]",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rbx + 9], rax",
            "mov al, byte [rsp + 0x17]",
            "mov byte [rbx + 8], al",
            "mov rax, qword [rsp + 0xf]",
            "mov qword [rbx], rax",
            "add rsp, 0x20",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0041313c": {
        "function_address": "0x0041313c",
        "instructions": [
            "push r15",
            "mov r15d, esi",
            "and r15d, 2",
            "push r14",
            "lea r14, [rdi + 0x30]",
            "push r13",
            "mov r13d, esi",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "push r12",
            "mov rbx, qword [rdi + 0x30]",
            "jmp 0x413209",
            "mov rdi, qword [rbx + 0x30]",
            "test rdi, rdi",
            "jne 0x41318e",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbx + 0x50]",
            "lea rdx, str.no_name_for_device__llu__skip_it_now_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x413206",
            "mov esi, r13d",
            "call sym.imp.__open64_2",
            "test eax, eax",
            "mov r12d, eax",
            "jns 0x4131b0",
            "call sym.imp.__errno_location",
            "mov ebx, dword [rax]",
            "mov rdi, rbp",
            "neg ebx",
            "call fcn.0041306f",
            "jmp 0x413214",
            "xor edx, edx",
            "xor esi, esi",
            "mov ecx, 4",
            "mov edi, eax",
            "call sym.imp.posix_fadvise64",
            "test eax, eax",
            "je 0x4131da",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Warning__could_not_drop_caches_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov rax, qword [rbp + 0x10]",
            "cmp qword [rbx + 0x50], rax",
            "jne 0x4131e8",
            "mov dword [rbp + 0x28], r12d",
            "mov rax, qword [rbp + 0x20]",
            "cmp qword [rbx + 0x50], rax",
            "jne 0x4131f6",
            "mov dword [rbp + 0x2c], r12d",
            "test r15d, r15d",
            "mov dword [rbx + 0x28], r12d",
            "je 0x413206",
            "mov dword [rbx + 0x2c], 1",
            "mov rbx, qword [rbx]",
            "cmp rbx, r14",
            "jne 0x413162",
            "xor ebx, ebx",
            "pop rbp",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00414c37": {
        "function_address": "0x00414c37",
        "instructions": [
            "push r13",
            "mov r13, rdx",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "push r8",
            "mov rax, qword [rdi + 0x1d8]",
            "mov rbx, qword [rax + 0x1f0]",
            "jmp 0x414c89",
            "test rbp, rbp",
            "je 0x414c71",
            "mov edx, 0x10",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call sym.imp.memcmp",
            "test eax, eax",
            "jne 0x414c85",
            "lea rdi, [rbx + 0x30]",
            "mov rdx, r13",
            "mov rsi, r12",
            "call fcn.00412b48",
            "test rax, rax",
            "jne 0x414c90",
            "mov rbx, qword [rbx + 0x58]",
            "test rbx, rbx",
            "jne 0x414c58",
            "xor eax, eax",
            "pop rsi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0040ff0c": {
        "function_address": "0x0040ff0c",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x58",
            "mov qword [rsp + 0x1d], rsi",
            "mov byte [rsp + 0x25], 0x84",
            "mov qword [rsp + 0x26], 0xffffffffffffffff",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x40ff62",
            "lea rcx, str.btrfs_find_last_root",
            "mov edx, 0x27",
            "lea rsi, str.root_tree.c",
            "lea rdi, str.___path_",
            "jmp 0x40ffb3",
            "lea rdx, [rsp + 0x1d]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rsi, rbp",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x410029",
            "mov r15d, dword [rbx + 0x40]",
            "test r15d, r15d",
            "jne 0x40ff95",
            "mov eax, 0xfffffffe",
            "jmp 0x410029",
            "test eax, eax",
            "jne 0x40ffb8",
            "lea rcx, str.btrfs_find_last_root",
            "lea rsi, str.root_tree.c",
            "lea rdi, str.__ret__0_",
            "mov edx, 0x30",
            "call sym.imp.__assert_fail",
            "dec r15d",
            "mov rbp, qword [rbx]",
            "lea rsi, [rsp + 0x3f]",
            "movsxd r15, r15d",
            "mov ecx, 0x11",
            "imul r15, r15, 0x19",
            "mov rdi, rbp",
            "lea rdx, [r15 + 0x65]",
            "call fcn.00412a4b",
            "mov rax, qword [rsp + 0x48]",
            "mov qword [rsp + 0x37], rax",
            "mov al, byte [rsp + 0x47]",
            "mov byte [rsp + 0x36], al",
            "mov rax, qword [rsp + 0x3f]",
            "cmp rax, r13",
            "mov qword [rsp + 0x2e], rax",
            "jne 0x40ff8b",
            "mov edx, dword [rbp + r15 + 0xf2]",
            "mov ecx, 0x1b7",
            "mov rsi, r14",
            "mov rdi, rbp",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "lea rsi, [rsp + 0x2e]",
            "mov ecx, 0x11",
            "mov rdi, r12",
            "rep movsb byte [rdi], byte [rsi]",
            "xor eax, eax",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "call fcn.00402e4d",
            "mov eax, dword [rsp + 8]",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004088b6": {
        "function_address": "0x004088b6",
        "instructions": [
            "push r12",
            "mov r9, rsi",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rcx",
            "mov r8, rbx",
            "sub rsp, 0x20",
            "mov ecx, dword [rdi + 0x1fc]",
            "mov edx, dword [rdi + 0x1f0]",
            "mov esi, dword [rdi + 0x1f8]",
            "mov edi, dword [rdi + 0x1f4]",
            "mov qword [rsp], r12",
            "call fcn.004077d9",
            "lea rcx, [rbx + 0x1c7]",
            "lea rdx, [rbx + 0x10]",
            "mov rdi, rbp",
            "mov rsi, r12",
            "call fcn.0040ff0c",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x408951",
            "cmp byte [rbx + 0xfe], 0",
            "jne 0x40891b",
            "mov edx, dword [rbx + 0x1f8]",
            "jmp 0x408921",
            "mov edx, dword [rbx + 0x1f4]",
            "mov rsi, qword [rbx + 0xc0]",
            "mov rcx, qword [rbx + 0xb0]",
            "mov rdi, rbx",
            "mov qword [rsp + 0x18], rsi",
            "call fcn.004085f6",
            "mov qword [rbx], rax",
            "mov rdi, rax",
            "call fcn.004129c6",
            "test eax, eax",
            "mov eax, 0xfffffffb",
            "cmove ebp, eax",
            "add rsp, 0x20",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.004077d9": {
        "function_address": "0x004077d9",
        "instructions": [
            "mov dword [r8 + 0x1f0], edx",
            "lea rax, [r8 + 0x220]",
            "mov r10, qword [rsp + 8]",
            "lea rdx, [r8 + 0x1c7]",
            "mov dword [r8 + 0x1f4], edi",
            "mov dword [r8 + 0x1fc], ecx",
            "mov qword [r8 + 0x220], rax",
            "mov qword [r8 + 0x228], rax",
            "mov ecx, 0x11",
            "xor eax, eax",
            "mov rdi, rdx",
            "mov qword [r8], 0",
            "mov qword [r8 + 8], 0",
            "mov dword [r8 + 0x1f8], esi",
            "lea rdx, [r8 + 0x10]",
            "mov dword [r8 + 0x200], 0",
            "mov dword [r8 + 0x204], 0",
            "mov qword [r8 + 0x1d8], r9",
            "mov qword [r8 + 0x1e0], r10",
            "mov qword [r8 + 0x1e8], 0",
            "mov qword [r8 + 0x210], 0",
            "mov qword [r8 + 0x218], 0",
            "rep stosb byte [rdi], al",
            "mov rdi, rdx",
            "mov cx, 0x1b7",
            "rep stosb byte [rdi], al",
            "mov qword [r8 + 0x1c7], r10",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.0040895c": {
        "function_address": "0x0040895c",
        "instructions": [
            "push r13",
            "mov r9, rdi",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x28",
            "mov r13, qword [rdi + 0x30]",
            "mov edi, 0x248",
            "mov qword [rsp + 0x18], r9",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov r9, qword [rsp + 0x18]",
            "je 0x408afe",
            "xor eax, eax",
            "mov ecx, 0x92",
            "mov rdi, rbx",
            "rep stosd dword [rdi], eax",
            "cmp qword [rbp + 9], 0xffffffffffffffff",
            "jne 0x4089cf",
            "mov rdx, qword [rbp]",
            "mov rcx, rbx",
            "mov rsi, r9",
            "mov rdi, r13",
            "call fcn.004088b6",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x408af2",
            "mov rdi, rbx",
            "movsxd rbx, ebp",
            "call sym.imp.free",
            "jmp 0x408b05",
            "mov rax, qword [rbp]",
            "mov ecx, dword [r13 + 0x1fc]",
            "mov r8, rbx",
            "mov edx, dword [r13 + 0x1f0]",
            "mov esi, dword [r13 + 0x1f8]",
            "mov edi, dword [r13 + 0x1f4]",
            "mov qword [rsp], rax",
            "call fcn.004077d9",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r12, rax",
            "jne 0x408a27",
            "lea rcx, str.btrfs_read_fs_root_no_cache",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.___path_",
            "mov edx, 0x278",
            "call sym.imp.__assert_fail",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov rsi, r13",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rdx, rbp",
            "call fcn.0040551b",
            "cmp eax, 0",
            "mov r13d, eax",
            "je 0x408a50",
            "mov eax, 0xfffffffe",
            "cmovg r13d, eax",
            "jmp 0x408a8a",
            "movsxd rax, dword [r12 + 0x40]",
            "mov rdi, qword [r12]",
            "lea rsi, [rbx + 0x10]",
            "mov ecx, 0x1b7",
            "imul rax, rax, 0x19",
            "mov edx, dword [rdi + rax + 0xf2]",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "lea rax, [rbx + 0x1c7]",
            "mov ecx, 0x11",
            "mov rsi, rbp",
            "mov rdi, rax",
            "rep movsb byte [rdi], byte [rsi]",
            "mov rdi, r12",
            "call fcn.00402e1a",
            "mov rdi, r12",
            "call fcn.00402e4d",
            "test r13d, r13d",
            "je 0x408aac",
            "mov rdi, rbx",
            "movsxd rbx, r13d",
            "call sym.imp.free",
            "jmp 0x408b05",
            "cmp byte [rbx + 0xfe], 0",
            "mov rcx, qword [rbx + 0xb0]",
            "jne 0x408ac4",
            "mov edx, dword [rbx + 0x1f8]",
            "jmp 0x408aca",
            "mov edx, dword [rbx + 0x1f4]",
            "mov rsi, qword [rbx + 0xc0]",
            "mov rdi, rbx",
            "call fcn.004085f6",
            "test rax, rax",
            "mov qword [rbx], rax",
            "jne 0x408af2",
            "mov rdi, rbx",
            "mov rbx, 0xfffffffffffffffb",
            "call sym.imp.free",
            "jmp 0x408b05",
            "mov dword [rbx + 0x200], 1",
            "jmp 0x408b05",
            "mov rbx, 0xfffffffffffffff4",
            "add rsp, 0x28",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0041ca1e": {
        "function_address": "0x0041ca1e",
        "instructions": [
            "push r14",
            "xor eax, eax",
            "mov r14, rdx",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "jmp 0x41ca5b",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call r14",
            "cmp eax, 0",
            "jge 0x41ca4e",
            "mov rbp, qword [rbp]",
            "add rbp, 0x10",
            "jmp 0x41ca58",
            "je 0x41ca8a",
            "mov rbp, qword [rbp]",
            "add rbp, 8",
            "mov rax, r12",
            "mov r12, qword [rbp]",
            "test r12, r12",
            "jne 0x41ca36",
            "mov qword [rbx], rax",
            "mov qword [rbx + 8], 0",
            "mov rsi, r13",
            "mov qword [rbx + 0x10], 0",
            "mov rdi, rbx",
            "mov qword [rbp], rbx",
            "call fcn.0041c5b2",
            "xor eax, eax",
            "jmp 0x41ca8f",
            "mov eax, 0xffffffef",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0041c5b2": {
        "function_address": "0x0041c5b2",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "jmp 0x41c665",
            "and rbp, 0xfffffffffffffffc",
            "mov rax, qword [rbp + 0x10]",
            "cmp rbx, rax",
            "jne 0x41c615",
            "mov rax, qword [rbp + 8]",
            "test rax, rax",
            "je 0x41c5e5",
            "mov rdx, qword [rax]",
            "test dl, 1",
            "jne 0x41c5e5",
            "jmp 0x41c622",
            "mov r14, qword [rbx + 8]",
            "cmp r14, r12",
            "jne 0x41c5ff",
            "mov rdi, rbx",
            "mov rsi, r13",
            "mov r12, rbx",
            "mov rbx, r14",
            "call fcn.0041c4f4",
            "or qword [rbx], 1",
            "mov rsi, r13",
            "mov rdi, rbp",
            "and qword [rbp], 0xfffffffffffffffe",
            "call fcn.0041c553",
            "jmp 0x41c665",
            "test rax, rax",
            "je 0x41c637",
            "mov rdx, qword [rax]",
            "test dl, 1",
            "jne 0x41c637",
            "or rdx, 1",
            "mov r12, rbp",
            "mov qword [rax], rdx",
            "or qword [rbx], 1",
            "and qword [rbp], 0xfffffffffffffffe",
            "jmp 0x41c665",
            "mov r14, qword [rbx + 0x10]",
            "cmp r14, r12",
            "jne 0x41c651",
            "mov rdi, rbx",
            "mov rsi, r13",
            "mov r12, rbx",
            "mov rbx, r14",
            "call fcn.0041c553",
            "or qword [rbx], 1",
            "mov rsi, r13",
            "mov rdi, rbp",
            "and qword [rbp], 0xfffffffffffffffe",
            "call fcn.0041c4f4",
            "mov rbx, qword [r12]",
            "and rbx, 0xfffffffffffffffc",
            "je 0x41c67c",
            "mov rbp, qword [rbx]",
            "test bpl, 1",
            "je 0x41c5c5",
            "mov rax, qword [r13]",
            "or qword [rax], 1",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040cde4": {
        "function_address": "0x0040cde4",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x78",
            "mov rbp, qword [rdi + 0x1d8]",
            "mov qword [rsp + 0x3d], 0",
            "mov qword [rsp + 0x46], 0",
            "mov byte [rsp + 0x45], 0xc0",
            "lea rax, [rbp + 0xb0]",
            "mov r13, qword [rbp + 0x28]",
            "mov qword [rsp + 0x18], rax",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x40d03d",
            "lea rax, [rsp + 0x4e]",
            "mov qword [rsp + 0x10], rax",
            "lea rdx, [rsp + 0x3d]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rbx",
            "mov rsi, r13",
            "call fcn.0040551b",
            "test eax, eax",
            "mov r12d, eax",
            "js 0x40cebd",
            "mov r12, qword [rbx]",
            "mov r15d, dword [rbx + 0x40]",
            "mov rdi, r12",
            "call fcn.00409ea9",
            "cmp r15d, eax",
            "jb 0x40ce85",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "mov r12d, eax",
            "je 0x40ce5a",
            "jge 0x40cead",
            "jmp 0x40cebd",
            "lea rsi, [rsp + 0x5f]",
            "mov edx, r15d",
            "mov rdi, r12",
            "call fcn.00409e65",
            "mov rax, qword [rsp + 0x3d]",
            "cmp qword [rsp + 0x5f], rax",
            "jb 0x40cea8",
            "cmp byte [rsp + 0x67], 0xc0",
            "je 0x40ceb8",
            "inc dword [rbx + 0x40]",
            "jmp 0x40ce5a",
            "mov r12d, 0xfffffffe",
            "jmp 0x40d033",
            "xor r12d, r12d",
            "jmp 0x40cec6",
            "test r12d, r12d",
            "jne 0x40d033",
            "mov r8, qword [rbx]",
            "mov edx, dword [rbx + 0x40]",
            "lea rsi, [rsp + 0x4e]",
            "mov rdi, r8",
            "mov qword [rsp + 8], r8",
            "call fcn.00409e65",
            "mov esi, 0x88",
            "mov edi, 1",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r14, rax",
            "mov r8, qword [rsp + 8]",
            "je 0x40d033",
            "lea r15, [rax + 0x41]",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rdi, r8",
            "mov ecx, 0x18",
            "mov r12d, 2",
            "mov rsi, r15",
            "imul rax, rax, 0x19",
            "mov edx, dword [r8 + rax + 0xf2]",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov rsi, qword [rsp + 0x10]",
            "lea rdi, [r14 + 0x30]",
            "mov ecx, 0x11",
            "rep movsb byte [rdi], byte [rsi]",
            "mov rdi, rbx",
            "mov dword [r14 + 0x80], 0",
            "mov qword [r14 + 0x70], 0",
            "mov rax, qword [rsp + 0x57]",
            "add rax, qword [rsp + 0x4e]",
            "mov qword [rsp + 0x3d], rax",
            "call fcn.00402e1a",
            "mov rsi, qword [r14 + 0x51]",
            "test sil, 1",
            "mov qword [rsp + 0x30], rsi",
            "mov qword [r14 + 0x78], rsi",
            "jne 0x40cf89",
            "test sil, 2",
            "mov r12b, 0x10",
            "jne 0x40cf89",
            "mov r12d, esi",
            "and r12d, 4",
            "mov rdi, rbp",
            "call fcn.00409dc4",
            "mov rsi, qword [r14 + 0x30]",
            "mov rdi, r13",
            "call fcn.00414ea1",
            "test eax, eax",
            "je 0x40cfac",
            "mov dword [r14 + 0x84], 1",
            "mov rdi, r15",
            "call fcn.00409ea5",
            "mov rsi, qword [r14 + 0x78]",
            "mov rdx, qword [rsp + 0x57]",
            "lea r8, [rsp + 0x28]",
            "mov rcx, rax",
            "mov rdi, rbp",
            "call fcn.0040aa99",
            "test eax, eax",
            "je 0x40cff0",
            "lea rcx, str.btrfs_read_block_groups",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "mov edx, 0xc94",
            "call sym.imp.__assert_fail",
            "mov rsi, qword [rsp + 0x4e]",
            "mov rax, qword [rsp + 0x28]",
            "mov ecx, r12d",
            "mov rdi, qword [rsp + 0x18]",
            "or ecx, 8",
            "xor r8d, r8d",
            "mov rdx, rsi",
            "add rdx, qword [rsp + 0x57]",
            "mov qword [r14 + 0x60], rax",
            "dec rdx",
            "call fcn.00411e1b",
            "mov rsi, qword [rsp + 0x4e]",
            "mov rdi, qword [rsp + 0x18]",
            "mov rdx, r14",
            "call fcn.0041210c",
            "jmp 0x40ce3b",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "jmp 0x40d043",
            "mov r12d, 0xfffffff4",
            "add rsp, 0x78",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409dc4": {
        "function_address": "0x00409dc4",
        "instructions": [
            "mov rax, rsi",
            "and eax, 0x1f8",
            "je 0x409df5",
            "test sil, 1",
            "je 0x409ddb",
            "or qword [rdi + 0x168], rax",
            "test sil, 4",
            "je 0x409de8",
            "or qword [rdi + 0x170], rax",
            "and sil, 2",
            "je 0x409df5",
            "or qword [rdi + 0x178], rax",
            "ret"
        ]
    },
    "fcn.00414ea1": {
        "function_address": "0x00414ea1",
        "instructions": [
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, qword [rdi + 0x1d8]",
            "add rdi, 0x150",
            "call fcn.0041196c",
            "mov rdx, qword [rbx + 0x1d8]",
            "test byte [rdx + 0x20c], 4",
            "jne 0x414f0c",
            "test rax, rax",
            "je 0x414ed4",
            "mov ecx, dword [rax + 0x48]",
            "xor edx, edx",
            "jmp 0x414f08",
            "lea rcx, str.btrfs_chunk_readonly",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___ce_",
            "mov edx, 0x5fe",
            "call sym.imp.__assert_fail",
            "mov rsi, rdx",
            "inc rdx",
            "shl rsi, 4",
            "mov rsi, qword [rax + rsi + 0x50]",
            "cmp dword [rsi + 0x2c], 0",
            "je 0x414f10",
            "cmp ecx, edx",
            "jg 0x414ef3",
            "xor eax, eax",
            "jmp 0x414f15",
            "mov eax, 1",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00409ea5": {
        "function_address": "0x00409ea5",
        "instructions": [
            "mov rax, qword [rdi]",
            "ret"
        ]
    },
    "fcn.0040aa99": {
        "function_address": "0x0040aa99",
        "instructions": [
            "push r15",
            "lea rax, [rdi + 0x1f8]",
            "mov r15, rdx",
            "push r14",
            "mov r14, rsi",
            "push r13",
            "mov r13, r8",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x18",
            "mov r12, qword [rdi + 0x1f8]",
            "mov rbx, r12",
            "jmp 0x40aacf",
            "test qword [rbx - 0x28], r14",
            "jne 0x40aad6",
            "mov rbx, qword [rbx]",
            "cmp rbx, rax",
            "jne 0x40aac6",
            "jmp 0x40ab1b",
            "mov rdx, r15",
            "mov r8, rcx",
            "add rdx, qword [rbx - 0x20]",
            "add r8, qword [rbx - 0x18]",
            "lea rbp, [rbx - 0x28]",
            "mov qword [rbx - 0x20], rdx",
            "cmp rdx, r8",
            "mov qword [rbx - 0x18], r8",
            "jae 0x40ab15",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, rdx",
            "lea rdx, str.warning__bad_space_info_total_bytes__llu_used__llu_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov qword [r13], rbp",
            "jmp 0x40ab6a",
            "mov edi, 0x38",
            "mov qword [rsp + 8], rcx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rcx, qword [rsp + 8]",
            "je 0x40ab6e",
            "lea rdx, [rax + 0x28]",
            "mov qword [r12 + 8], rdx",
            "mov qword [rax + 0x28], r12",
            "mov qword [rax + 0x30], rbx",
            "mov qword [rbp + 0x1f8], rdx",
            "mov qword [rax], r14",
            "mov qword [rax + 8], r15",
            "mov qword [rax + 0x10], rcx",
            "mov qword [rax + 0x18], 0",
            "mov dword [rax + 0x20], 0",
            "mov qword [r13], rax",
            "xor eax, eax",
            "jmp 0x40ab73",
            "mov eax, 0xfffffff4",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00408b13": {
        "function_address": "0x00408b13",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x18",
            "mov rax, qword [rsi]",
            "cmp rax, 1",
            "mov qword [rsp + 8], rax",
            "jne 0x408b3a",
            "mov rbx, qword [rdi + 0x30]",
            "jmp 0x408c16",
            "cmp rax, 2",
            "jne 0x408b49",
            "mov rbx, qword [rdi + 0x28]",
            "jmp 0x408c16",
            "cmp rax, 3",
            "jne 0x408b58",
            "mov rbx, qword [rdi + 0x38]",
            "jmp 0x408c16",
            "cmp rax, 4",
            "jne 0x408b67",
            "mov rbx, qword [rdi + 0x40]",
            "jmp 0x408c16",
            "cmp rax, 7",
            "jne 0x408b76",
            "mov rbx, qword [rdi + 0x48]",
            "jmp 0x408c16",
            "cmp rax, 0xfffffffffffffff8",
            "je 0x408b83",
            "cmp qword [rsi + 9], 0xffffffffffffffff",
            "je 0x408b9f",
            "lea rcx, str.btrfs_read_fs_root",
            "mov edx, 0x2c5",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__location__objectid___8ULL__location__offset____u64__1_",
            "jmp 0x408c11",
            "lea r13, [rdi + 0x50]",
            "lea rdx, [0x00407008]",
            "lea rsi, [rsp + 8]",
            "xor ecx, ecx",
            "mov rdi, r13",
            "call fcn.0041ca98",
            "test rax, rax",
            "je 0x408bc7",
            "lea rbx, [rax - 0x230]",
            "jmp 0x408c16",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.0040895c",
            "cmp rax, 0xfffffffffffff000",
            "mov rbx, rax",
            "ja 0x408c16",
            "lea rsi, [rax + 0x230]",
            "lea rdx, [0x00407019]",
            "mov rdi, r13",
            "call fcn.0041ca1e",
            "test eax, eax",
            "je 0x408c16",
            "lea rcx, str.btrfs_read_fs_root",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x2d2",
            "call sym.imp.__assert_fail",
            "add rsp, 0x18",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00407913": {
        "function_address": "0x00407913",
        "instructions": [
            "push r15",
            "mov r15d, edi",
            "mov edi, 0x228",
            "push r14",
            "mov r14, rsi",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x18",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x407b06",
            "mov rdi, rax",
            "mov ecx, 0x8a",
            "xor eax, eax",
            "rep stosd dword [rdi], eax",
            "mov edi, 0x248",
            "call sym.imp.malloc",
            "mov edi, 0x248",
            "mov qword [rbx + 0x30], rax",
            "mov r13, rax",
            "call sym.imp.malloc",
            "mov edi, 0x248",
            "mov qword [rbx + 0x28], rax",
            "mov r12, rax",
            "call sym.imp.malloc",
            "mov edi, 0x248",
            "mov qword [rbx + 0x38], rax",
            "mov qword [rsp], rax",
            "call sym.imp.malloc",
            "mov edi, 0x248",
            "mov qword [rbx + 0x40], rax",
            "mov qword [rsp + 8], rax",
            "call sym.imp.malloc",
            "mov edi, 0x1000",
            "mov qword [rbx + 0x48], rax",
            "mov rbp, rax",
            "call sym.imp.malloc",
            "test r13, r13",
            "mov qword [rbx + 0x1a8], rax",
            "mov rsi, qword [rsp + 8]",
            "mov r8, qword [rsp]",
            "je 0x407afc",
            "test r12, r12",
            "je 0x407afc",
            "test r8, r8",
            "je 0x407afc",
            "test rsi, rsi",
            "je 0x407afc",
            "test rbp, rbp",
            "je 0x407afc",
            "test rax, rax",
            "je 0x407afc",
            "mov rdi, rax",
            "mov ecx, 0x400",
            "xor eax, eax",
            "rep stosd dword [rdi], eax",
            "mov rdi, r13",
            "mov cl, 0x92",
            "rep stosd dword [rdi], eax",
            "mov rdi, r12",
            "mov cl, 0x92",
            "rep stosd dword [rdi], eax",
            "mov rdi, qword [rbx + 0x38]",
            "mov cl, 0x92",
            "rep stosd dword [rdi], eax",
            "mov rdi, qword [rbx + 0x40]",
            "mov cl, 0x92",
            "rep stosd dword [rdi], eax",
            "mov rdi, qword [rbx + 0x48]",
            "mov cl, 0x92",
            "rep stosd dword [rdi], eax",
            "lea rdi, [rbx + 0x60]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0x88]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0xb0]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0xd8]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0x100]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0x128]",
            "call fcn.00411c93",
            "lea rdi, [rbx + 0x150]",
            "mov qword [rbx + 0x50], 0",
            "call fcn.00411865",
            "lea rax, [rbx + 0x1d0]",
            "test r15d, r15d",
            "mov qword [rbx + 0x1b0], 1",
            "mov qword [rbx + 0x1d0], rax",
            "mov qword [rbx + 0x1d8], rax",
            "lea rax, [rbx + 0x1f8]",
            "mov qword [rbx + 0x1f8], rax",
            "mov qword [rbx + 0x200], rax",
            "lea rax, [rbx + 0x1e0]",
            "mov qword [rbx + 0x1e0], rax",
            "mov qword [rbx + 0x1e8], rax",
            "jne 0x407ad2",
            "or byte [rbx + 0x20c], 1",
            "mov qword [rbx + 0x1b8], r14",
            "mov qword [rbx + 0x180], 0xffffffffffffffff",
            "mov qword [rbx + 0x188], 0xffffffffffffffff",
            "mov qword [rbx + 0x190], 0xffffffffffffffff",
            "jmp 0x407b06",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call fcn.004078c4",
            "add rsp, 0x18",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00407c8e": {
        "function_address": "0x00407c8e",
        "instructions": [
            "push r12",
            "mov rax, rcx",
            "mov r12d, r8d",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x10",
            "test rcx, rcx",
            "mov ecx, 0x10000",
            "cmove rax, rcx",
            "lea rcx, [rsp + 8]",
            "mov r8, rax",
            "call fcn.00413222",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x407ce0",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.No_valid_Btrfs_found_on__s_n",
            "mov rcx, rbp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x407cf2",
            "cmp qword [rsp + 8], 1",
            "je 0x407cf2",
            "mov edi, r12d",
            "call fcn.00417daa",
            "mov ebx, eax",
            "add rsp, 0x10",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.__open64_2": {
        "function_address": "0x00402270",
        "instructions": [
            "jmp qword [reloc.__open64_2]"
        ]
    },
    "fcn.00407031": {
        "function_address": "0x00407031",
        "instructions": [
            "mov rax, qword [rdi + 0x48]",
            "ret"
        ]
    },
    "fcn.00407b18": {
        "function_address": "0x00407b18",
        "instructions": [
            "sub rsp, 0x18",
            "mov rax, qword [rdi + 0xbc]",
            "mov rcx, rax",
            "mov qword [rsp + 8], rax",
            "and rcx, 0xfffffffffffffc10",
            "je 0x407b3d",
            "lea rdx, str.couldnt_open_because_of_unsupported_option_features___Lx_._n",
            "jmp 0x407b68",
            "test al, 1",
            "jne 0x407b4c",
            "or rax, 1",
            "mov qword [rdi + 0xbc], rax",
            "mov rcx, qword [rdi + 0xb4]",
            "test esi, esi",
            "mov qword [rsp + 8], rcx",
            "je 0x407b85",
            "test rcx, rcx",
            "je 0x407b85",
            "lea rdx, str.couldnt_open_RDWR_because_of_unsupported_option_features___Lx_._n",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov eax, 0xffffffa1",
            "jmp 0x407b87",
            "xor eax, eax",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "fcn.004087a4": {
        "function_address": "0x004087a4",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "mov r9, rbp",
            "push rbx",
            "sub rsp, 0x28",
            "mov rbx, qword [rdi + 0x1a8]",
            "mov ecx, dword [rbx + 0x9c]",
            "mov edi, dword [rbx + 0x94]",
            "mov esi, dword [rbx + 0x98]",
            "mov edx, dword [rbx + 0x90]",
            "mov qword [rsp], 3",
            "mov r8, qword [rbp + 0x38]",
            "mov dword [rsp + 0x18], ecx",
            "call fcn.004077d9",
            "mov rdi, qword [rbp + 0x38]",
            "call fcn.00414f17",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x4088a8",
            "cmp byte [rbx + 0xc7], 0",
            "mov r13, qword [rbp + 0x38]",
            "jne 0x408812",
            "mov edx, dword [r13 + 0x1f8]",
            "jmp 0x408819",
            "mov edx, dword [r13 + 0x1f4]",
            "mov rsi, qword [rbx + 0x58]",
            "mov rcx, qword [rbx + 0xa4]",
            "mov rdi, r13",
            "mov qword [rsp + 0x18], rsi",
            "call fcn.004085f6",
            "mov qword [r13], rax",
            "mov rax, qword [rbp + 0x38]",
            "mov rdi, qword [rax]",
            "test rdi, rdi",
            "jne 0x40885f",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_read_chunk_root_n",
            "mov r12d, 0xfffffffb",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x4088a8",
            "call fcn.004129c6",
            "test eax, eax",
            "je 0x408841",
            "mov rax, qword [rbx + 0x38]",
            "movabs rdx, 0x200000000",
            "test rax, rdx",
            "mov qword [rsp + 0x18], rax",
            "jne 0x4088a8",
            "mov rdi, qword [rbp + 0x38]",
            "call fcn.0041500d",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x4088a8",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_read_chunk_tree_n",
            "mov r12d, ebx",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "add rsp, 0x28",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00408c24": {
        "function_address": "0x00408c24",
        "instructions": [
            "push r15",
            "mov r15, rsi",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov r9, rbx",
            "sub rsp, 0x58",
            "mov r12, qword [rdi + 0x1a8]",
            "mov rbp, qword [rbx + 0x30]",
            "mov dword [rsp + 0x20], edx",
            "mov eax, dword [r12 + 0x98]",
            "mov ecx, dword [r12 + 0x9c]",
            "mov r8, rbp",
            "mov edi, dword [r12 + 0x94]",
            "mov edx, dword [r12 + 0x90]",
            "mov qword [rsp], 1",
            "mov esi, eax",
            "mov dword [rsp + 0x24], eax",
            "mov dword [rsp + 0x30], ecx",
            "call fcn.004077d9",
            "cmp byte [r12 + 0xc6], 0",
            "jne 0x408c98",
            "mov r13d, dword [rbp + 0x1f8]",
            "jmp 0x408c9f",
            "mov r13d, dword [rbp + 0x1f4]",
            "mov rdi, r12",
            "call fcn.00407031",
            "test r15, r15",
            "mov r14, rax",
            "jne 0x408cc5",
            "test byte [rsp + 0x20], 4",
            "jne 0x408cc5",
            "mov r15, qword [r12 + 0x50]",
            "mov qword [rsp + 0x30], r15",
            "jmp 0x408d7f",
            "test byte [rsp + 0x20], 4",
            "je 0x408d7f",
            "mov rdi, r12",
            "xor r14d, r14d",
            "xor r15d, r15d",
            "call fcn.00407031",
            "mov qword [rsp + 0x18], 0",
            "mov qword [rsp + 0x28], rax",
            "imul rax, r14, 0xa8",
            "lea rax, [r12 + rax + 0xb2b]",
            "mov rdi, rax",
            "mov qword [rsp + 0x10], rax",
            "call fcn.0040702c",
            "cmp rax, qword [rsp + 0x28]",
            "je 0x408d32",
            "mov rdi, qword [rsp + 0x10]",
            "call fcn.0040702c",
            "cmp rax, qword [rsp + 0x18]",
            "jbe 0x408d32",
            "mov rdi, qword [rsp + 0x10]",
            "movsxd r15, r14d",
            "call fcn.0040702c",
            "mov qword [rsp + 0x18], rax",
            "inc r14",
            "cmp r14, 4",
            "jne 0x408cec",
            "cmp r15d, 3",
            "jle 0x408d54",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Invalid_backup_root_number_n",
            "mov rsi, qword [rax]",
            "jmp 0x408db1",
            "imul r15, r15, 0xa8",
            "mov rax, qword [rbx + 0x1a8]",
            "lea rax, [rax + r15 + 0xb20]",
            "mov r15, qword [rax + 0xb]",
            "lea rdi, [rax + 0xb]",
            "mov qword [rsp + 0x30], r15",
            "call fcn.0040702c",
            "mov r14, rax",
            "mov rcx, r14",
            "mov edx, r13d",
            "mov rsi, r15",
            "mov rdi, rbp",
            "call fcn.004085f6",
            "mov qword [rbp], rax",
            "mov rdi, rax",
            "call fcn.004129c6",
            "test eax, eax",
            "jne 0x408dc0",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_read_tree_root_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov eax, 0xfffffffb",
            "jmp 0x408ff1",
            "mov rcx, qword [rbx + 0x28]",
            "mov edx, 2",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.004088b6",
            "test eax, eax",
            "je 0x408e23",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_setup_extent_tree_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "test byte [rsp + 0x20], 2",
            "jne 0x408df7",
            "jmp 0x408db6",
            "mov r15, qword [rbx + 0x28]",
            "mov edx, dword [rsp + 0x24]",
            "xor esi, esi",
            "mov rdi, r15",
            "call fcn.0040755f",
            "mov qword [r15], rax",
            "mov rax, qword [rbx + 0x28]",
            "mov rsi, qword [rax]",
            "test rsi, rsi",
            "je 0x408fb4",
            "xor edi, edi",
            "call fcn.004129bf",
            "mov rax, qword [rbx + 0x28]",
            "mov edx, 4",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov dword [rax + 0x204], 1",
            "mov rcx, qword [rbx + 0x40]",
            "call fcn.004088b6",
            "test eax, eax",
            "je 0x408e5f",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_setup_device_tree_n",
            "mov rsi, qword [rax]",
            "jmp 0x408db1",
            "mov rax, qword [rbx + 0x40]",
            "mov edx, 7",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov dword [rax + 0x204], 1",
            "mov rcx, qword [rbx + 0x48]",
            "call fcn.004088b6",
            "test eax, eax",
            "jne 0x408eb4",
            "mov rax, qword [rbx + 0x48]",
            "mov edi, 0x248",
            "mov dword [rax + 0x204], 1",
            "mov r15, qword [r12 + 0x60]",
            "mov qword [rsp + 0x30], r15",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r13, rax",
            "jne 0x408ed6",
            "jmp 0x408fbb",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_setup_csum_tree_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "test byte [rsp + 0x20], 2",
            "jne 0x408e85",
            "jmp 0x408db6",
            "test r15, r15",
            "jne 0x408ee8",
            "mov rdi, rax",
            "call sym.imp.free",
            "jmp 0x408fd1",
            "cmp byte [r12 + 0xc8], 0",
            "mov esi, dword [rbp + 0x1f8]",
            "mov r9, rbx",
            "mov edi, dword [rbp + 0x1f4]",
            "mov ecx, dword [rbp + 0x1fc]",
            "mov r8, r13",
            "mov edx, dword [rbp + 0x1f0]",
            "mov qword [rsp], 0xfffffffffffffffa",
            "mov eax, esi",
            "cmovne eax, edi",
            "mov dword [rsp + 0x10], eax",
            "call fcn.004077d9",
            "mov rdi, r12",
            "call fcn.00407031",
            "mov edx, dword [rsp + 0x10]",
            "lea rcx, [rax + 1]",
            "mov rsi, r15",
            "mov rdi, rbp",
            "call fcn.004085f6",
            "mov qword [r13], rax",
            "mov rdi, rax",
            "mov qword [rbx + 0x58], r13",
            "call fcn.004129c6",
            "test eax, eax",
            "jne 0x408fd1",
            "mov rdi, qword [r13]",
            "call fcn.00412164",
            "mov rdi, r13",
            "call sym.imp.free",
            "mov qword [rbx + 0x58], 0",
            "jmp 0x408fbb",
            "test byte [rsp + 0x20], 0x20",
            "jne 0x408f7f",
            "mov rdi, qword [rbx + 0x30]",
            "call fcn.0040cde4",
            "lea rsi, [rsp + 0x3f]",
            "mov rdi, rbx",
            "mov qword [rsp + 0x3f], 5",
            "mov byte [rsp + 0x47], 0x84",
            "mov qword [rsp + 0x48], 0xffffffffffffffff",
            "call fcn.00408b13",
            "test rax, rax",
            "mov qword [rbx + 0x20], rax",
            "je 0x408db6",
            "xor eax, eax",
            "jmp 0x408ff1",
            "mov eax, 0xfffffff4",
            "jmp 0x408ff1",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Couldnt_setup_log_root_tree_n",
            "mov rsi, qword [rax]",
            "jmp 0x408db1",
            "mov rax, qword [rbx + 0x28]",
            "mov qword [rbx + 0x158], r14",
            "mov qword [rbx + 0x160], r14",
            "mov rdi, qword [rax]",
            "call fcn.004129c6",
            "test eax, eax",
            "jne 0x408f6f",
            "jmp 0x408f7f",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040702c": {
        "function_address": "0x0040702c",
        "instructions": [
            "mov rax, qword [rdi + 8]",
            "ret"
        ]
    },
    "fcn.00409000": {
        "function_address": "0x00409000",
        "instructions": [
            "push r15",
            "mov eax, 0x10000",
            "push r14",
            "mov r14d, edi",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12d, r8d",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x28",
            "test rdx, rdx",
            "cmove rbp, rax",
            "mov qword [rsp + 8], rcx",
            "xor edx, edx",
            "xor esi, esi",
            "mov ecx, 4",
            "mov qword [rsp + 0x18], 0",
            "call sym.imp.posix_fadvise64",
            "test eax, eax",
            "je 0x40905c",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Warning__could_not_drop_caches_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov eax, r12d",
            "mov rsi, rbp",
            "and eax, 1",
            "mov edi, eax",
            "mov dword [rsp + 4], eax",
            "call fcn.00407913",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x409093",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Failed_to_allocate_memory_for_fs_info_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x4091d1",
            "test r12b, 0x10",
            "je 0x4090a0",
            "or byte [rax + 0x20c], 2",
            "mov r15d, r12d",
            "mov r8d, 1",
            "lea rdx, [rsp + 0x18]",
            "shr r15d, 3",
            "mov rcx, rbp",
            "mov rsi, r13",
            "xor r15d, 1",
            "mov edi, r14d",
            "and r15d, 1",
            "and r8d, r15d",
            "call fcn.00407c8e",
            "test eax, eax",
            "jne 0x4091c7",
            "mov esi, dword [rsp + 4]",
            "mov rdi, qword [rsp + 0x18]",
            "neg esi",
            "mov qword [rbx + 0x1f0], rdi",
            "and esi, 2",
            "mov eax, esi",
            "or al, 0x80",
            "test r12b, 0x40",
            "cmovne esi, eax",
            "call fcn.0041313c",
            "test eax, eax",
            "jne 0x4091c7",
            "test r15b, r15b",
            "mov r13, qword [rbx + 0x1a8]",
            "je 0x40911c",
            "mov rax, qword [rsp + 0x18]",
            "mov rdx, rbp",
            "mov rsi, r13",
            "mov edi, dword [rax + 0x28]",
            "jmp 0x409125",
            "mov rdx, rbp",
            "mov rsi, r13",
            "mov edi, r14d",
            "call fcn.00407cfd",
            "test eax, eax",
            "je 0x409146",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.No_valid_btrfs_found_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x4091bd",
            "mov rax, qword [r13 + 0x20]",
            "mov rdi, qword [rbx + 0x1a8]",
            "mov esi, dword [rsp + 4]",
            "mov qword [rbx], rax",
            "mov rax, qword [r13 + 0x28]",
            "mov qword [rbx + 8], rax",
            "call fcn.00407b18",
            "test eax, eax",
            "jne 0x4091bd",
            "mov rdi, rbx",
            "call fcn.004087a4",
            "test eax, eax",
            "je 0x409187",
            "mov rdi, rbx",
            "call fcn.00407b8c",
            "mov rdi, rbx",
            "call fcn.00407bf9",
            "jmp 0x4091bd",
            "mov rax, qword [rbx + 0x38]",
            "lea rsi, [rbx + 0x10]",
            "mov ecx, 0x10",
            "mov edx, 0x40",
            "mov rdi, qword [rax]",
            "call fcn.00412a4b",
            "mov rsi, qword [rsp + 8]",
            "mov edx, r12d",
            "mov rdi, rbx",
            "call fcn.00408c24",
            "test eax, eax",
            "je 0x4091d1",
            "and r12b, 2",
            "jne 0x4091d1",
            "jmp 0x409175",
            "mov rdi, qword [rsp + 0x18]",
            "call fcn.0041306f",
            "mov rdi, rbx",
            "xor ebx, ebx",
            "call fcn.004078c4",
            "add rsp, 0x28",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004091fe": {
        "function_address": "0x004091fe",
        "instructions": [
            "push r13",
            "xor eax, eax",
            "mov r13, rdx",
            "mov edx, 0x180",
            "push r12",
            "mov r12, rsi",
            "mov esi, ecx",
            "and esi, 1",
            "push rbp",
            "neg esi",
            "mov rbp, rdi",
            "and esi, 0x42",
            "push rbx",
            "sub rsp, 0x18",
            "mov dword [rsp + 8], ecx",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebx, eax",
            "mov r8d, dword [rsp + 8]",
            "jns 0x40925a",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, [0x0041fe03]",
            "mov rcx, rbp",
            "mov esi, 1",
            "xor ebp, ebp",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x409274",
            "mov rsi, rbp",
            "mov edi, eax",
            "mov rcx, r13",
            "mov rdx, r12",
            "call fcn.00409000",
            "mov edi, ebx",
            "mov rbp, rax",
            "call sym.imp.close",
            "add rsp, 0x18",
            "mov rax, rbp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00409318": {
        "function_address": "0x00409318",
        "instructions": [
            "push rcx",
            "mov edi, 0x58",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rdx, rax",
            "je 0x40933d",
            "mov ecx, 0x16",
            "xor eax, eax",
            "mov rdi, rdx",
            "rep stosd dword [rdi], eax",
            "inc dword [0x00627490]",
            "mov rax, rdx",
            "pop rdx",
            "ret"
        ]
    },
    "fcn.00409680": {
        "function_address": "0x00409680",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13d, edx",
            "lea rdx, [0x006274a0]",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x188",
            "mov eax, dword [rdi]",
            "mov ecx, eax",
            "cmp rsi, qword [rdx + rcx*8]",
            "jbe 0x4096af",
            "xor ebp, ebp",
            "jmp 0x409783",
            "lea ecx, [rax + rax*2]",
            "mov qword [rsp + 0x18], 0",
            "mov rbp, qword [rdi + 8]",
            "lea rbx, [rsp + 0x18]",
            "sub ecx, 3",
            "jmp 0x4096ec",
            "test rbp, rbp",
            "je 0x4096a8",
            "mov rdi, rsi",
            "mov qword [rbx + 0x10], rbp",
            "dec eax",
            "shr rdi, cl",
            "sub ecx, 3",
            "and edi, 7",
            "mov rbp, qword [rbp + rdi*8 + 8]",
            "mov dword [rbx + 0x18], edi",
            "add rbx, 0x10",
            "test eax, eax",
            "jne 0x4096c9",
            "test rbp, rbp",
            "jne 0x40974f",
            "jmp 0x4096a8",
            "mov eax, dword [rbx + 8]",
            "lea r15, [r14 + r10 + 8]",
            "mov qword [rsp + 8], r9",
            "mov qword [rsp], r10",
            "mov rsi, r15",
            "mov edi, eax",
            "mov dword [rsp + 0x14], eax",
            "call fcn.004092a0",
            "test eax, eax",
            "mov r9, qword [rsp + 8]",
            "mov r10, qword [rsp]",
            "je 0x409783",
            "mov eax, dword [rsp + 0x14]",
            "mov esi, 0x40",
            "cdq",
            "idiv esi",
            "mov rsi, 0xfffffffffffffffe",
            "cdqe",
            "mov cl, dl",
            "rol rsi, cl",
            "and qword [r15 + rax*8], rsi",
            "cmp qword [r14 + r9*8 + 8], 0",
            "jne 0x409783",
            "sub rbx, 0x10",
            "jmp 0x40975e",
            "mov r9d, r13d",
            "add r9, 8",
            "lea r10, [r9*8]",
            "mov r14, qword [rbx]",
            "test r14, r14",
            "jne 0x4096f7",
            "mov edx, dword [r12 + 4]",
            "lea ecx, [r13 + 0x14]",
            "mov eax, 1",
            "shl eax, cl",
            "test eax, edx",
            "je 0x409783",
            "not eax",
            "and eax, edx",
            "mov dword [r12 + 4], eax",
            "add rsp, 0x188",
            "mov rax, rbp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004092a0": {
        "function_address": "0x004092a0",
        "instructions": [
            "mov eax, edi",
            "mov ecx, 0x40",
            "cdq",
            "idiv ecx",
            "mov cl, dil",
            "cdqe",
            "lea rax, [rsi + rax*8]",
            "mov rax, qword [rax]",
            "shr rax, cl",
            "and eax, 1",
            "ret"
        ]
    },
    "fcn.0040500a": {
        "function_address": "0x0040500a",
        "instructions": [
            "push r15",
            "mov r15, rdx",
            "push r14",
            "push r13",
            "mov r13d, ecx",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x58",
            "mov ebp, dword [rdx + 0x40]",
            "mov rbx, qword [rdx]",
            "mov qword [rsp + 0x18], rsi",
            "movsxd rax, ebp",
            "imul rax, rax, 0x19",
            "lea r12, [rbx + rax + 0xe1]",
            "lea rdx, [rax + 0x65]",
            "mov r14d, dword [r12 + 0x15]",
            "mov qword [rsp + 0x20], rdx",
            "cmp r14d, ecx",
            "je 0x4051fd",
            "mov rdi, rbx",
            "mov dword [rsp + 8], r8d",
            "sub r14d, r13d",
            "call fcn.0040291d",
            "mov rdi, qword [rsp + 0x18]",
            "mov rsi, rbx",
            "mov dword [rsp + 0x10], eax",
            "add rdi, 0x1f8",
            "call fcn.0040292c",
            "mov dword [rsp + 0x28], eax",
            "mov eax, dword [r12 + 0x11]",
            "test ebp, ebp",
            "mov r8d, dword [rsp + 8]",
            "mov r9d, dword [rsp + 0x10]",
            "mov dword [rsp + 0x2c], eax",
            "jns 0x4050ae",
            "lea rcx, str.btrfs_truncate_item",
            "mov edx, 0x8cc",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__slot___0_",
            "jmp 0x4050d6",
            "cmp ebp, r9d",
            "jae 0x4050bc",
            "mov rdx, qword [rsp + 0x20]",
            "mov esi, ebp",
            "jmp 0x4050e9",
            "lea rcx, str.btrfs_truncate_item",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__slot___nritems_",
            "mov edx, 0x8cd",
            "call sym.imp.__assert_fail",
            "add dword [rbx + rdx + 0x8d], r14d",
            "inc esi",
            "add rdx, 0x19",
            "cmp esi, r9d",
            "jne 0x4050db",
            "test r8d, r8d",
            "je 0x405117",
            "mov edx, dword [rsp + 0x28]",
            "mov ecx, dword [rsp + 0x2c]",
            "mov rdi, rbx",
            "add ecx, r13d",
            "sub ecx, dword [rsp + 0x28]",
            "add rdx, 0x65",
            "lea rsi, [rdx + r14]",
            "call fcn.00412a77",
            "jmp 0x4051ab",
            "lea rsi, [rsp + 0x3f]",
            "mov edx, ebp",
            "mov rdi, rbx",
            "call fcn.00402862",
            "cmp byte [rsp + 0x47], 0x6c",
            "jne 0x405156",
            "mov esi, dword [r12 + 0x11]",
            "mov eax, r14d",
            "add rsi, 0x65",
            "mov rdx, rsi",
            "sub rdx, rax",
            "cmp byte [rbx + rdx + 0x90], 0",
            "jne 0x405156",
            "mov ecx, 0x15",
            "mov rdi, rbx",
            "call fcn.00412a77",
            "mov edx, dword [rsp + 0x28]",
            "mov ecx, dword [rsp + 0x2c]",
            "mov rdi, rbx",
            "sub ecx, dword [rsp + 0x28]",
            "add rdx, 0x65",
            "lea rsi, [rdx + r14]",
            "call fcn.00412a77",
            "add r14, qword [rsp + 0x48]",
            "lea rsi, [rsp + 0x3f]",
            "mov edx, ebp",
            "mov rdi, rbx",
            "mov qword [rsp + 0x30], r14",
            "mov qword [rsp + 0x48], r14",
            "call fcn.00402900",
            "test ebp, ebp",
            "jne 0x4051ab",
            "mov rdi, qword [rsp + 0x18]",
            "lea rdx, [rsp + 0x3f]",
            "mov ecx, 1",
            "mov rsi, r15",
            "call fcn.00403d91",
            "mov rdx, qword [rsp + 0x20]",
            "mov rdi, rbx",
            "mov dword [rbx + rdx + 0x91], r13d",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x18]",
            "mov rsi, rbx",
            "call fcn.00403f1a",
            "test eax, eax",
            "jns 0x4051fd",
            "mov rdi, qword [rsp + 0x18]",
            "mov rsi, rbx",
            "call fcn.0040f1cb",
            "lea rcx, str.btrfs_truncate_item",
            "mov edx, 0x90a",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x4050d6",
            "add rsp, 0x58",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041cbfb": {
        "function_address": "0x0041cbfb",
        "instructions": [
            "mov rax, qword [0x006273b0]",
            "jmp rax"
        ]
    },
    "fcn.0040abe2": {
        "function_address": "0x0040abe2",
        "instructions": [
            "push rbp",
            "lea rbp, [rdi + 0xb0]",
            "mov r8d, 0x16",
            "push rbx",
            "mov rdi, rbp",
            "mov rbx, rsi",
            "sub rsp, 0x28",
            "lea rcx, [rsp + 0x18]",
            "lea rdx, [rsp + 0x10]",
            "call fcn.00412027",
            "test eax, eax",
            "je 0x40ac12",
            "xor eax, eax",
            "jmp 0x40ac3f",
            "mov rsi, qword [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "mov rdi, rbp",
            "call fcn.00412136",
            "test eax, eax",
            "jne 0x40ac0e",
            "mov rax, qword [rsp + 8]",
            "mov rdx, qword [rax + 0x30]",
            "cmp rdx, rbx",
            "ja 0x40ac0e",
            "add rdx, qword [rax + 0x39]",
            "cmp rbx, rdx",
            "jae 0x40ac0e",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00411a4b": {
        "function_address": "0x00411a4b",
        "instructions": [
            "push rcx",
            "mov edi, 0x58",
            "call sym.imp.malloc",
            "test rax, rax",
            "je 0x411a7a",
            "mov qword [rax + 0x18], 0",
            "mov dword [rax + 0x40], 1",
            "mov qword [rax + 0x48], 0",
            "mov qword [rax + 0x50], 0",
            "pop rdx",
            "ret"
        ]
    },
    "fcn.00411bd7": {
        "function_address": "0x00411bd7",
        "instructions": [
            "push rbp",
            "cmp rcx, rdx",
            "push rbx",
            "push r10",
            "jae 0x411bfc",
            "lea rcx, str.insert_state",
            "mov edx, 0x96",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__end___start_",
            "jmp 0x411c42",
            "movsxd r8, r8d",
            "or qword [rsi + 0x48], r8",
            "mov qword [rsi + 0x30], rdx",
            "mov qword [rsi + 0x38], rcx",
            "mov rbp, rdi",
            "mov rbx, rsi",
            "mov rdi, rsi",
            "call fcn.00411a34",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0041186d",
            "test eax, eax",
            "je 0x411c47",
            "lea rcx, str.insert_state",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x9c",
            "call sym.imp.__assert_fail",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.00411b2b",
            "pop r9",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00411b2b": {
        "function_address": "0x00411b2b",
        "instructions": [
            "push r12",
            "push rbp",
            "push rbx",
            "test byte [rsi + 0x48], 0xa",
            "mov rbx, rsi",
            "jne 0x411bd0",
            "mov r12, rdi",
            "mov rdi, rsi",
            "call fcn.004119de",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x411b89",
            "mov rax, qword [rbx + 0x30]",
            "dec rax",
            "cmp qword [rbp + 0x38], rax",
            "jne 0x411b89",
            "mov rax, qword [rbx + 0x48]",
            "cmp qword [rbp + 0x48], rax",
            "jne 0x411b89",
            "mov rax, qword [rbp + 0x30]",
            "mov rdi, rbx",
            "mov qword [rbx + 0x30], rax",
            "call fcn.00411a34",
            "mov rdi, r12",
            "mov rsi, rbp",
            "call fcn.004119e8",
            "mov rdi, rbp",
            "call fcn.00411a7c",
            "mov rdi, rbx",
            "call fcn.004119e3",
            "test rax, rax",
            "je 0x411bd0",
            "mov rdx, qword [rbx + 0x38]",
            "inc rdx",
            "cmp qword [rax + 0x30], rdx",
            "jne 0x411bd0",
            "mov rdx, qword [rbx + 0x48]",
            "cmp qword [rax + 0x48], rdx",
            "jne 0x411bd0",
            "mov rdx, qword [rbx + 0x30]",
            "mov rdi, rax",
            "mov qword [rax + 0x30], rdx",
            "call fcn.00411a34",
            "mov rdi, r12",
            "mov rsi, rbx",
            "call fcn.004119e8",
            "mov rdi, rbx",
            "call fcn.00411a7c",
            "pop rbx",
            "pop rbp",
            "xor eax, eax",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00411ab3": {
        "function_address": "0x00411ab3",
        "instructions": [
            "push r13",
            "mov r13, rdi",
            "mov rdi, rdx",
            "push r12",
            "mov r12, rcx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "push r8",
            "mov rax, qword [rsi + 0x30]",
            "mov qword [rdx + 0x30], rax",
            "lea rax, [rcx - 1]",
            "mov qword [rdx + 0x38], rax",
            "mov rax, qword [rsi + 0x48]",
            "mov qword [rdx + 0x48], rax",
            "call fcn.00411a34",
            "mov rdi, rbp",
            "mov qword [rbp + 0x30], r12",
            "call fcn.00411a34",
            "mov rsi, rbx",
            "mov rdi, r13",
            "call fcn.0041186d",
            "test eax, eax",
            "je 0x411b21",
            "lea rcx, str.split_state",
            "lea rsi, str.extent_io.c",
            "lea rdi, str.__ret_",
            "mov edx, 0xb1",
            "call sym.imp.__assert_fail",
            "pop rdi",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "xor eax, eax",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00411a7c": {
        "function_address": "0x00411a7c",
        "instructions": [
            "mov eax, dword [rdi + 0x40]",
            "dec eax",
            "cmp eax, 0",
            "mov dword [rdi + 0x40], eax",
            "jge 0x411aa9",
            "lea rcx, str.btrfs_free_extent_state",
            "push rsi",
            "lea rdi, str.__state__refs___0_",
            "lea rsi, str.extent_io.c",
            "mov edx, 0x3d",
            "call sym.imp.__assert_fail",
            "jne 0x411ab0",
            "jmp sym.imp.free",
            "ret"
        ]
    },
    "fcn.0040ac46": {
        "function_address": "0x0040ac46",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13d, ecx",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x38",
            "mov r12, qword [rdi + 0x1d8]",
            "mov dword [rsp + 0x14], r8d",
            "mov rdx, qword [r12 + 0x1a8]",
            "mov rcx, qword [rdx + 0x78]",
            "lea rax, [rbx + rcx]",
            "sub rcx, rbx",
            "test r13d, r13d",
            "cmove rax, rcx",
            "mov qword [rdx + 0x78], rax",
            "mov rdx, qword [rdi + 0xd0]",
            "lea rax, [rbx + rdx]",
            "sub rdx, rbx",
            "test r13d, r13d",
            "cmove rax, rdx",
            "mov qword [rsp + 0x28], rax",
            "mov qword [rdi + 0xd0], rax",
            "lea rax, [r12 + 0xb0]",
            "mov qword [rsp + 0x18], rax",
            "jmp 0x40ad90",
            "mov rsi, rbp",
            "mov rdi, r12",
            "call fcn.0040abe2",
            "test rax, rax",
            "mov r15, rax",
            "je 0x40ad9d",
            "mov rsi, qword [rax + 0x30]",
            "mov rax, qword [rax + 0x39]",
            "mov r14, rbp",
            "sub r14, rsi",
            "cmp r14, rax",
            "jbe 0x40ad03",
            "lea rcx, str.update_block_group",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__byte_in_group___cache__key.offset_",
            "mov edx, 0x7a2",
            "call sym.imp.__assert_fail",
            "mov rdi, qword [rsp + 0x18]",
            "lea rdx, [rsi + rax - 1]",
            "xor r8d, r8d",
            "mov ecx, 1",
            "call fcn.00411e1b",
            "lea rax, [r15 + 0x41]",
            "mov rdi, rax",
            "mov qword [rsp], rax",
            "call fcn.00409ea5",
            "mov r8, qword [r15 + 0x39]",
            "mov rdx, qword [r15 + 0x60]",
            "sub r8, r14",
            "mov r14, rbx",
            "cmp r8, rbx",
            "cmovbe r14, r8",
            "test r13d, r13d",
            "je 0x40ad52",
            "add rax, r14",
            "add qword [rdx + 0x10], r14",
            "mov qword [rsp + 8], rax",
            "jmp 0x40ad7c",
            "sub rax, r14",
            "sub qword [rdx + 0x10], r14",
            "cmp dword [rsp + 0x14], 0",
            "mov qword [rsp + 8], rax",
            "je 0x40ad7c",
            "lea rdx, [r14 + rbp - 1]",
            "lea rdi, [r12 + 0x88]",
            "xor ecx, ecx",
            "mov rsi, rbp",
            "call fcn.0041200d",
            "mov rsi, qword [rsp + 8]",
            "mov rdi, qword [rsp]",
            "sub rbx, r14",
            "add rbp, r14",
            "call fcn.00409df6",
            "test rbx, rbx",
            "jne 0x40acba",
            "xor eax, eax",
            "jmp 0x40ada0",
            "or eax, 0xffffffff",
            "add rsp, 0x38",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409df6": {
        "function_address": "0x00409df6",
        "instructions": [
            "mov qword [rdi], rsi",
            "ret"
        ]
    },
    "fcn.00411c59": {
        "function_address": "0x00411c59",
        "instructions": [
            "push rbp",
            "mov ebp, edx",
            "not edx",
            "movsxd rdx, edx",
            "push rbx",
            "push rbx",
            "mov rcx, qword [rsi + 0x48]",
            "mov rbx, rsi",
            "and rdx, rcx",
            "and ebp, ecx",
            "test rdx, rdx",
            "mov qword [rsi + 0x48], rdx",
            "jne 0x411c87",
            "call fcn.004119e8",
            "mov rdi, rbx",
            "call fcn.00411a7c",
            "jmp 0x411c8c",
            "call fcn.00411b2b",
            "pop r11",
            "pop rbx",
            "mov eax, ebp",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0040a949": {
        "function_address": "0x0040a949",
        "instructions": [
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x28",
            "test rcx, rcx",
            "je 0x40a96f",
            "or r8d, 0xffffffff",
            "call fcn.00409f09",
            "jmp 0x40aa8e",
            "test r8d, r8d",
            "mov edx, dword [rdx + 0x40]",
            "je 0x40aa78",
            "mov rbx, qword [rbp]",
            "lea rsi, [rsp + 0xf]",
            "mov rdi, rbx",
            "call fcn.00409e65",
            "mov al, byte [rsp + 0x17]",
            "cmp al, 0xb2",
            "jne 0x40a9b2",
            "movsxd rdx, dword [rbp + 0x40]",
            "xor ecx, ecx",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rbx + rdx + 0xf2]",
            "lea rsi, [rdx + 0x65]",
            "mov edx, dword [rbx + rdx + 0xf9]",
            "jmp 0x40aa0e",
            "cmp al, 0xb8",
            "jne 0x40a9d2",
            "movsxd rdx, dword [rbp + 0x40]",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rbx + rdx + 0xf2]",
            "lea rcx, [rdx + 0x65]",
            "mov edx, dword [rbx + rdx + 0xe1]",
            "jmp 0x40a9ee",
            "cmp al, 0xb4",
            "jne 0x40a9f2",
            "movsxd rdx, dword [rbp + 0x40]",
            "xor ecx, ecx",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rbx + rdx + 0xf2]",
            "mov edx, dword [rbx + rdx + 0xf9]",
            "xor esi, esi",
            "jmp 0x40aa0e",
            "lea rcx, str.remove_extent_data_ref",
            "mov edx, 0x341",
            "lea rsi, str.extent_tree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x40aa2b",
            "test edx, edx",
            "jne 0x40aa30",
            "lea rcx, str.remove_extent_data_ref",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__num_refs___refs_to_drop_",
            "mov dx, 0x344",
            "call sym.imp.__assert_fail",
            "dec edx",
            "jne 0x40aa3f",
            "mov ecx, dword [rbp + 0x40]",
            "mov r8d, 1",
            "jmp 0x40aa80",
            "cmp al, 0xb2",
            "jne 0x40aa4c",
            "mov dword [rbx + rsi + 0x94], edx",
            "jmp 0x40aa6c",
            "cmp al, 0xb8",
            "jne 0x40aa56",
            "mov dword [rbx + rcx + 0x7c], edx",
            "jmp 0x40aa6c",
            "movsxd rax, dword [rbp + 0x40]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rbx + rax + 0xf2]",
            "mov dword [rbx + rax + 0xf9], edx",
            "mov rdi, rbx",
            "call fcn.00408149",
            "xor eax, eax",
            "jmp 0x40aa8e",
            "mov r8d, 1",
            "mov ecx, edx",
            "mov rdx, rbp",
            "mov rsi, r13",
            "mov rdi, r12",
            "call fcn.00406b84",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0041104f": {
        "function_address": "0x0041104f",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "push rbp",
            "mov rbp, rcx",
            "add rbp, rdx",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x58",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x10], rdi",
            "mov qword [rsp + 0x18], rcx",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00410918",
            "mov dword [rsp + 0x24], eax",
            "movzx r14d, ax",
            "mov rax, qword [rbx + 0x1d8]",
            "movsxd r15, dword [rbx + 0x1f0]",
            "mov r12, qword [rax + 0x48]",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x411384",
            "lea rax, [rbp - 1]",
            "mov qword [rsp + 0x28], rax",
            "mov rax, qword [rsp + 0x28]",
            "mov rdi, qword [rsp + 0x10]",
            "lea rdx, [rsp + 0x3f]",
            "or r8d, 0xffffffff",
            "mov r9d, 1",
            "mov rcx, rbx",
            "mov rsi, r12",
            "mov qword [rsp + 0x3f], 0xfffffffffffffff6",
            "mov byte [rsp + 0x47], 0x80",
            "mov qword [rsp + 0x48], rax",
            "call fcn.0040551b",
            "test eax, eax",
            "jle 0x411105",
            "mov eax, dword [rbx + 0x40]",
            "test eax, eax",
            "je 0x411378",
            "dec eax",
            "mov dword [rbx + 0x40], eax",
            "mov r9, qword [rbx]",
            "mov edx, dword [rbx + 0x40]",
            "lea rsi, [rsp + 0x3f]",
            "mov rdi, r9",
            "mov qword [rsp + 8], r9",
            "call fcn.004108d8",
            "cmp qword [rsp + 0x3f], 0xfffffffffffffff6",
            "mov r9, qword [rsp + 8]",
            "jne 0x411378",
            "cmp byte [rsp + 0x47], 0x80",
            "jne 0x411378",
            "mov rsi, qword [rsp + 0x48]",
            "cmp rsi, rbp",
            "jae 0x411378",
            "mov ecx, dword [rbx + 0x40]",
            "movzx r8d, word [rsp + 0x24]",
            "xor edx, edx",
            "movsxd rax, ecx",
            "imul rax, rax, 0x19",
            "lea rdi, [r9 + rax + 0xe1]",
            "mov eax, dword [rdi + 0x15]",
            "div r8d",
            "mov eax, eax",
            "imul rax, r15",
            "add rax, rsi",
            "cmp rax, r13",
            "jbe 0x411378",
            "cmp rsi, r13",
            "jb 0x4111b6",
            "cmp rax, rbp",
            "ja 0x41124f",
            "mov rdi, qword [rsp + 0x10]",
            "mov r8d, 1",
            "mov rdx, rbx",
            "mov rsi, r12",
            "call fcn.00406b84",
            "test eax, eax",
            "je 0x41136b",
            "lea rcx, str.btrfs_del_csums",
            "mov edx, 0x1b2",
            "jmp 0x411339",
            "cmp rax, rbp",
            "jbe 0x41124f",
            "mov rax, r13",
            "xor edx, edx",
            "mov r8, r14",
            "sub rax, rsi",
            "mov rcx, r14",
            "xor esi, esi",
            "div r15",
            "xor edx, edx",
            "imul r8, rax",
            "mov rax, qword [rsp + 0x18]",
            "div r15",
            "imul rcx, rax",
            "mov eax, dword [rdi + 0x11]",
            "mov rdi, r9",
            "mov qword [rsp + 8], r8",
            "lea rdx, [r8 + rax + 0x65]",
            "call fcn.00412a8f",
            "mov r8, qword [rsp + 8]",
            "mov rdi, qword [rsp + 0x10]",
            "lea rcx, [rsp + 0x3f]",
            "mov rdx, rbx",
            "mov rsi, r12",
            "mov qword [rsp + 0x48], r13",
            "call fcn.004068a2",
            "cmp eax, 0xfffffff5",
            "je 0x411240",
            "test eax, eax",
            "je 0x411240",
            "lea rcx, str.btrfs_del_csums",
            "lea rsi, str.file_item.c",
            "lea rdi, str.__ret__ret____11_",
            "mov edx, 0x1da",
            "call sym.imp.__assert_fail",
            "mov rax, qword [rsp + 0x28]",
            "mov qword [rsp + 0x48], rax",
            "jmp 0x41136b",
            "mov rax, qword [r12 + 0x1d8]",
            "mov rdi, qword [rax + 0x1a8]",
            "call fcn.00410918",
            "movzx ecx, ax",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rdx, qword [rbx]",
            "mov esi, dword [r12 + 0x1f0]",
            "mov rdi, qword [rsp + 0x48]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdx + rax + 0xf6]",
            "xor edx, edx",
            "div ecx",
            "mov eax, eax",
            "imul rax, rsi",
            "add rax, rdi",
            "cmp rdi, r13",
            "jae 0x4112da",
            "cmp rax, rbp",
            "ja 0x41134c",
            "mov rax, r13",
            "xor edx, edx",
            "mov r8d, 1",
            "sub rax, rdi",
            "mov rdi, qword [rsp + 0x10]",
            "div rsi",
            "mov rdx, rbx",
            "mov rsi, r12",
            "imul ecx, eax",
            "call fcn.0040500a",
            "test eax, eax",
            "je 0x41136b",
            "lea rcx, str.truncate_one_csum",
            "mov edx, 0x162",
            "jmp 0x411339",
            "cmp rax, rbp",
            "jbe 0x41134c",
            "cmp rbp, rdi",
            "jbe 0x41134c",
            "sub rax, rbp",
            "xor edx, edx",
            "mov rdi, qword [rsp + 0x10]",
            "div rsi",
            "xor r8d, r8d",
            "mov rdx, rbx",
            "mov rsi, r12",
            "imul ecx, eax",
            "call fcn.0040500a",
            "test eax, eax",
            "je 0x411314",
            "lea rcx, str.truncate_one_csum",
            "mov edx, 0x16f",
            "jmp 0x411339",
            "lea rdx, [rsp + 0x3f]",
            "mov rsi, rbx",
            "mov rdi, r12",
            "mov qword [rsp + 0x48], rbp",
            "call fcn.00403ddf",
            "test eax, eax",
            "je 0x41136b",
            "lea rcx, str.truncate_one_csum",
            "mov edx, 0x173",
            "lea rsi, str.file_item.c",
            "lea rdi, str.__ret_",
            "jmp 0x41123b",
            "lea rcx, str.truncate_one_csum",
            "mov edx, 0x175",
            "lea rsi, str.file_item.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x41123b",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "jmp 0x4110ba",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "xor eax, eax",
            "jmp 0x411389",
            "mov eax, 0xfffffff4",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00410918": {
        "function_address": "0x00410918",
        "instructions": [
            "sub rsp, 0x18",
            "mov ax, word [rdi + 0xc4]",
            "cmp ax, 1",
            "mov word [rsp + 0xe], ax",
            "movzx edx, ax",
            "jbe 0x410950",
            "lea rcx, [0x0041f280]",
            "lea rsi, str.ctree.h",
            "lea rdi, str.__t____sizeof_btrfs_csum_sizes____sizeof__btrfs_csum_sizes__0____",
            "mov edx, 0x7ca",
            "call sym.imp.__assert_fail",
            "lea rax, [0x0041f278]",
            "mov eax, dword [rax + rdx*4]",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "fcn.004108d8": {
        "function_address": "0x004108d8",
        "instructions": [
            "movsxd rdx, edx",
            "push rbx",
            "mov rbx, rsi",
            "imul rdx, rdx, 0x19",
            "mov ecx, 0x11",
            "sub rsp, 0x20",
            "lea rsi, [rsp + 0xf]",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov rax, qword [rsp + 0x18]",
            "mov qword [rbx + 9], rax",
            "mov al, byte [rsp + 0x17]",
            "mov byte [rbx + 8], al",
            "mov rax, qword [rsp + 0xf]",
            "mov qword [rbx], rax",
            "add rsp, 0x20",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.004068a2": {
        "function_address": "0x004068a2",
        "instructions": [
            "push r15",
            "mov r15, rcx",
            "push r14",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, r8",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x68",
            "mov rbx, qword [rdx]",
            "mov edx, dword [rdx + 0x40]",
            "mov qword [rsp + 0x10], rsi",
            "lea rsi, [rsp + 0x3e]",
            "mov rdi, rbx",
            "call fcn.00402877",
            "mov rdi, qword [rsp + 0x10]",
            "mov rsi, rbx",
            "call fcn.00403f1a",
            "cmp eax, 0x18",
            "ja 0x4069c0",
            "movsxd rax, dword [rbp + 0x40]",
            "mov rdi, rbp",
            "imul rax, rax, 0x19",
            "mov r14d, dword [rbx + rax + 0xf6]",
            "call fcn.00402e1a",
            "or byte [rbp + 0x88], 1",
            "lea rdx, [rsp + 0x3e]",
            "xor r8d, r8d",
            "mov rsi, qword [rsp + 0x10]",
            "mov r9d, 1",
            "mov rcx, rbp",
            "mov rdi, r13",
            "call fcn.0040551b",
            "and byte [rbp + 0x88], 0xfe",
            "test eax, eax",
            "jne 0x406b70",
            "movsxd rax, dword [rbp + 0x40]",
            "mov rdx, qword [rbp]",
            "imul rax, rax, 0x19",
            "cmp r14d, dword [rdx + rax + 0xf6]",
            "jne 0x406b70",
            "mov rsi, qword [rsp + 0x10]",
            "lea rdx, [rsp + 0x3e]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov rcx, rbp",
            "mov rdi, r13",
            "call fcn.004046d9",
            "test eax, eax",
            "je 0x40698b",
            "lea rcx, str.btrfs_split_item",
            "mov edx, 0x871",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__ret_",
            "jmp 0x4069b7",
            "mov rdi, qword [rsp + 0x10]",
            "mov rsi, rbx",
            "call fcn.00403f1a",
            "cmp eax, 0x18",
            "ja 0x4069bc",
            "lea rcx, str.btrfs_split_item",
            "lea rsi, str.ctree.c",
            "lea rdi, str.__btrfs_leaf_free_space_root__leaf____sizeof_struct_btrfs_item__",
            "mov edx, 0x873",
            "call sym.imp.__assert_fail",
            "mov rbx, qword [rbp]",
            "movsxd rax, dword [rbp + 0x40]",
            "imul rax, rax, 0x19",
            "lea r13, [rbx + rax + 0xe1]",
            "lea rdx, [rax + 0x65]",
            "mov eax, dword [r13 + 0x15]",
            "mov ecx, dword [r13 + 0x11]",
            "mov qword [rsp + 0x28], rdx",
            "mov edx, eax",
            "mov dword [rsp + 0x24], ecx",
            "mov dword [rsp + 0x20], eax",
            "mov rdi, rdx",
            "mov qword [rsp + 0x18], rdx",
            "call sym.imp.malloc",
            "mov edx, dword [r13 + 0x11]",
            "mov rcx, qword [rsp + 0x18]",
            "mov rsi, rax",
            "mov rdi, rbx",
            "mov r14, rax",
            "add rdx, 0x65",
            "call fcn.00412a4b",
            "mov esi, dword [rbp + 0x40]",
            "mov rbx, qword [rbp]",
            "lea r13d, [rsi + 1]",
            "mov rdi, rbx",
            "mov dword [rsp + 8], esi",
            "call fcn.0040291d",
            "cmp r13d, eax",
            "mov esi, dword [rsp + 8]",
            "je 0x406a65",
            "add esi, 2",
            "mov ecx, eax",
            "movsxd rdx, r13d",
            "movsxd rsi, esi",
            "sub ecx, r13d",
            "mov rdi, rbx",
            "imul rdx, rdx, 0x19",
            "mov dword [rsp + 8], eax",
            "imul rsi, rsi, 0x19",
            "imul rcx, rcx, 0x19",
            "add rdx, 0x65",
            "add rsi, 0x65",
            "call fcn.00412a77",
            "mov eax, dword [rsp + 8]",
            "mov rdx, qword [r15 + 9]",
            "lea rsi, [rsp + 0x4f]",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "mov qword [rsp + 0x58], rdx",
            "mov dl, byte [r15 + 8]",
            "mov byte [rsp + 0x57], dl",
            "mov rdx, qword [r15]",
            "mov qword [rsp + 0x4f], rdx",
            "mov edx, r13d",
            "movsxd r13, r13d",
            "imul r13, r13, 0x19",
            "call fcn.00402900",
            "mov ecx, dword [rsp + 0x24]",
            "mov rdi, rbx",
            "add r13, 0xd5",
            "lea rdx, [rbx + r13 + 0xc]",
            "mov dword [rdx + 0x11], ecx",
            "mov ecx, dword [rsp + 0x20]",
            "sub ecx, r12d",
            "mov dword [rdx + 0x15], ecx",
            "mov rdx, qword [rsp + 0x28]",
            "lea rcx, [rbx + rdx + 0x7c]",
            "mov edx, dword [rsp + 0x20]",
            "add edx, dword [rsp + 0x24]",
            "mov dword [rcx + 0x15], r12d",
            "sub edx, r12d",
            "mov dword [rcx + 0x11], edx",
            "mov eax, dword [rsp + 8]",
            "lea esi, [rax + 1]",
            "call fcn.004028d4",
            "movsxd rax, dword [rbp + 0x40]",
            "mov rcx, r12",
            "mov rsi, r14",
            "mov rdi, rbx",
            "imul rax, rax, 0x19",
            "mov edx, dword [rbx + rax + 0xf2]",
            "add rdx, 0x65",
            "call fcn.00412a59",
            "mov edx, dword [rbx + r13 + 0x1d]",
            "mov rcx, qword [rsp + 0x18]",
            "lea rsi, [r14 + r12]",
            "mov rdi, rbx",
            "sub rcx, r12",
            "add rdx, 0x65",
            "call fcn.00412a59",
            "mov rdi, rbx",
            "call fcn.00408149",
            "mov rdi, qword [rsp + 0x10]",
            "mov rsi, rbx",
            "call fcn.00403f1a",
            "test eax, eax",
            "jns 0x406b64",
            "mov rdi, qword [rsp + 0x10]",
            "mov rsi, rbx",
            "call fcn.0040f1cb",
            "lea rcx, str.btrfs_split_item",
            "mov edx, 0x8a8",
            "lea rsi, str.ctree.c",
            "lea rdi, [0x0041e6fe]",
            "jmp 0x4069b7",
            "mov rdi, r14",
            "call sym.imp.free",
            "xor eax, eax",
            "jmp 0x406b75",
            "mov eax, 0xfffffff5",
            "add rsp, 0x68",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00403ddf": {
        "function_address": "0x00403ddf",
        "instructions": [
            "push r14",
            "mov r14, rdi",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x20",
            "mov ebx, dword [rsi + 0x40]",
            "mov r12, qword [rsi]",
            "test ebx, ebx",
            "jg 0x403e0e",
            "mov rdi, r12",
            "call fcn.0040291d",
            "dec eax",
            "cmp ebx, eax",
            "jb 0x403e6a",
            "jmp 0x403e34",
            "lea edx, [rbx - 1]",
            "lea rsi, [rsp + 0xf]",
            "mov rdi, r12",
            "call fcn.00402862",
            "lea rdi, [rsp + 0xf]",
            "mov rsi, rbp",
            "call fcn.004039ba",
            "test eax, eax",
            "js 0x403dfe",
            "or eax, 0xffffffff",
            "jmp 0x403ea4",
            "mov rax, qword [rbp + 9]",
            "lea rsi, [rsp + 0xf]",
            "mov edx, ebx",
            "mov rdi, r12",
            "mov qword [rsp + 0x18], rax",
            "mov al, byte [rbp + 8]",
            "mov byte [rsp + 0x17], al",
            "mov rax, qword [rbp]",
            "mov qword [rsp + 0xf], rax",
            "call fcn.00402900",
            "mov rdi, r12",
            "call fcn.00408149",
            "test ebx, ebx",
            "je 0x403e8d",
            "jmp 0x403ea2",
            "lea edx, [rbx + 1]",
            "lea rsi, [rsp + 0xf]",
            "mov rdi, r12",
            "call fcn.00402862",
            "lea rdi, [rsp + 0xf]",
            "mov rsi, rbp",
            "call fcn.004039ba",
            "test eax, eax",
            "jg 0x403e34",
            "jmp 0x403e2f",
            "lea rdx, [rsp + 0xf]",
            "mov ecx, 1",
            "mov rsi, r13",
            "mov rdi, r14",
            "call fcn.00403d91",
            "xor eax, eax",
            "add rsp, 0x20",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0041208d": {
        "function_address": "0x0041208d",
        "instructions": [
            "push r14",
            "movsxd r14, ecx",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "mov r12d, r8d",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "xor ebx, ebx",
            "call fcn.0041196c",
            "jmp 0x4120f3",
            "test r12d, r12d",
            "je 0x4120b5",
            "cmp qword [rax + 0x30], rbp",
            "ja 0x4120ff",
            "cmp qword [rax + 0x30], r13",
            "ja 0x412101",
            "test qword [rax + 0x48], r14",
            "je 0x4120cd",
            "test r12d, r12d",
            "mov ebx, 1",
            "je 0x412101",
            "jmp 0x4120d2",
            "test r12d, r12d",
            "jne 0x4120ff",
            "mov rbp, qword [rax + 0x38]",
            "inc rbp",
            "cmp rbp, r13",
            "ja 0x412101",
            "mov rdi, rax",
            "call fcn.004119e3",
            "test rax, rax",
            "jne 0x4120f3",
            "test r12d, r12d",
            "cmovne ebx, eax",
            "jmp 0x412101",
            "cmp rbp, r13",
            "ja 0x412101",
            "test rax, rax",
            "jne 0x4120aa",
            "jmp 0x412101",
            "xor ebx, ebx",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0040d055": {
        "function_address": "0x0040d055",
        "instructions": [
            "push r15",
            "lea rax, [rdi + 0xb0]",
            "mov r15, rcx",
            "push r14",
            "push r13",
            "mov r13, r9",
            "push r12",
            "mov r12, rdi",
            "mov edi, 1",
            "push rbp",
            "mov rbp, r8",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x28",
            "mov qword [rsp + 8], rsi",
            "mov esi, 0x88",
            "mov qword [rsp], rax",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov r14, rax",
            "jne 0x40d0b5",
            "lea rcx, str.btrfs_add_block_group",
            "mov edx, 0xcb0",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___cache_",
            "jmp 0x40d115",
            "mov rsi, qword [rsp + 8]",
            "lea rdi, [rax + 0x41]",
            "mov qword [rax + 0x30], rbp",
            "mov qword [rax + 0x39], r13",
            "mov byte [rax + 0x38], 0xc0",
            "call fcn.00409df6",
            "mov rcx, qword [rsp + 8]",
            "lea r8, [r14 + 0x60]",
            "mov rdx, r13",
            "mov rsi, rbx",
            "mov rdi, r12",
            "mov qword [r14 + 0x49], r15",
            "mov qword [r14 + 0x78], rbx",
            "mov qword [rsp + 0x18], rbx",
            "mov qword [r14 + 0x51], rbx",
            "call fcn.0040aa99",
            "test eax, eax",
            "je 0x40d11a",
            "lea rcx, str.btrfs_add_block_group",
            "mov edx, 0xcbc",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rdi, rbx",
            "call fcn.00409da0",
            "mov rdi, qword [rsp]",
            "or eax, 8",
            "lea rdx, [rbp + r13 - 1]",
            "xor r8d, r8d",
            "mov ecx, eax",
            "mov rsi, rbp",
            "call fcn.00411e1b",
            "test eax, eax",
            "lea rcx, str.btrfs_add_block_group",
            "mov edx, 0xcc2",
            "jne 0x40d107",
            "mov rdi, qword [rsp]",
            "mov rdx, r14",
            "mov rsi, rbp",
            "call fcn.0041210c",
            "test eax, eax",
            "lea rcx, str.btrfs_add_block_group",
            "mov edx, 0xcc6",
            "jne 0x40d107",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00409dc4",
            "add rsp, 0x28",
            "mov rax, r14",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00409da0": {
        "function_address": "0x00409da0",
        "instructions": [
            "mov rax, rdi",
            "and eax, 1",
            "neg eax",
            "and eax, 2",
            "mov edx, eax",
            "or edx, 4",
            "test dil, 4",
            "cmovne eax, edx",
            "mov edx, eax",
            "or edx, 0x10",
            "and dil, 2",
            "cmovne eax, edx",
            "ret"
        ]
    },
    "fcn.004067e9": {
        "function_address": "0x004067e9",
        "instructions": [
            "push r14",
            "mov r14, rcx",
            "push r13",
            "push r12",
            "mov r12d, r8d",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x20",
            "mov qword [rsp], rsi",
            "mov qword [rsp + 8], rdi",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "mov rsi, qword [rsp]",
            "mov rdi, qword [rsp + 8]",
            "jne 0x40683c",
            "lea rcx, str.btrfs_insert_item",
            "lea rsi, str.ctree.c",
            "lea rdi, str.___path_",
            "mov edx, 0x9cc",
            "call sym.imp.__assert_fail",
            "lea r8, [rsp + 0x1c]",
            "mov r9d, 1",
            "mov rcx, rbp",
            "mov rdx, rax",
            "mov dword [rsp + 0x1c], r12d",
            "call fcn.004064c0",
            "test eax, eax",
            "mov r13d, eax",
            "jne 0x40688a",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rbp, qword [rbx]",
            "mov ecx, r12d",
            "mov rsi, r14",
            "mov rdi, rbp",
            "imul rax, rax, 0x19",
            "mov edx, dword [rbp + rax + 0xf2]",
            "add rdx, 0x65",
            "call fcn.00412a59",
            "mov rdi, rbp",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "add rsp, 0x20",
            "mov eax, r13d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0041381f": {
        "function_address": "0x0041381f",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x108",
            "mov r14, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0xb8], rdx",
            "mov qword [rsp + 0x80], rsi",
            "mov qword [rsp + 0x50], rdi",
            "mov qword [rsp + 0x88], rcx",
            "mov rax, qword [r14 + 0x1f0]",
            "mov rsi, qword [r14 + 0x38]",
            "mov qword [rsp + 0x20], r8",
            "mov qword [rsp + 0x70], rax",
            "mov rdx, qword [rsp + 0x70]",
            "add rax, 0x30",
            "mov qword [rsp + 0x40], rsi",
            "mov qword [rsp + 0x30], rax",
            "cmp qword [rdx + 0x30], rax",
            "jne 0x41388d",
            "mov r15d, 0xffffffe4",
            "jmp 0x41423f",
            "test qword [rsp + 0x20], 0x1f8",
            "je 0x413921",
            "test byte [rsp + 0x20], 2",
            "jne 0x413913",
            "test byte [rsp + 0x20], 1",
            "je 0x4138db",
            "mov rsi, qword [rsp + 0x40]",
            "movabs r13, 0x280000000",
            "mov ebp, 0x40000000",
            "mov r15d, 0x4000000",
            "mov r12d, dword [rsi + 0x1f8]",
            "sub r12, 0xce",
            "shr r12, 5",
            "inc r12d",
            "jmp 0x413935",
            "test byte [rsp + 0x20], 4",
            "je 0x413921",
            "mov rsi, qword [rsp + 0x40]",
            "movabs r13, 0x100000000",
            "mov ebp, 0x40000000",
            "mov r15d, 0x2000000",
            "mov r12d, dword [rsi + 0x1f8]",
            "sub r12, 0xce",
            "shr r12, 5",
            "inc r12d",
            "jmp 0x413935",
            "mov r12d, 0x3a",
            "mov r13d, 0x1000000",
            "jmp 0x41392a",
            "xor r12d, r12d",
            "mov r13d, 0x2000000",
            "mov ebp, 0x800000",
            "mov r15d, 0x100000",
            "test byte [rsp + 0x20], 0x10",
            "je 0x413968",
            "mov rdi, qword [r14 + 0x1a8]",
            "mov ebx, 2",
            "call fcn.00412b93",
            "cmp rax, 2",
            "cmovbe rbx, rax",
            "cmp ebx, 1",
            "jle 0x413882",
            "mov dword [rsp + 0x28], 2",
            "jmp 0x413975",
            "mov dword [rsp + 0x28], 1",
            "mov ebx, 1",
            "mov rdx, qword [rsp + 0x20]",
            "mov ecx, dword [rsp + 0x28]",
            "mov eax, 2",
            "and edx, 0x20",
            "cmovne ecx, eax",
            "cmovne ebx, eax",
            "test byte [rsp + 0x20], 8",
            "mov qword [rsp + 0x58], rdx",
            "mov dword [rsp + 0x28], ecx",
            "je 0x4139bc",
            "mov rdi, qword [r14 + 0x1a8]",
            "call fcn.00412b93",
            "cmp eax, r12d",
            "mov ebx, eax",
            "jg 0x4139b1",
            "jmp 0x4139b4",
            "mov ebx, r12d",
            "mov dword [rsp + 0x28], 2",
            "mov rsi, qword [rsp + 0x20]",
            "mov dword [rsp + 0x90], 0",
            "and esi, 0x40",
            "mov qword [rsp + 0xa8], rsi",
            "je 0x413a0d",
            "mov rdi, qword [r14 + 0x1a8]",
            "mov ebx, r12d",
            "call fcn.00412b93",
            "cmp eax, r12d",
            "cmovle ebx, eax",
            "cmp ebx, 3",
            "jle 0x413882",
            "and ebx, 0xfffffffe",
            "mov dword [rsp + 0x90], 2",
            "mov dword [rsp + 0x28], 4",
            "test byte [rsp + 0x20], 0x80",
            "je 0x413a4e",
            "mov rdi, qword [r14 + 0x1a8]",
            "mov ebx, r12d",
            "call fcn.00412b93",
            "cmp eax, r12d",
            "cmovle ebx, eax",
            "cmp ebx, 1",
            "jle 0x413882",
            "mov rax, qword [r14 + 0x1a8]",
            "mov dword [rsp + 0x28], 2",
            "mov eax, dword [rax + 0x9c]",
            "mov dword [rsp + 0xd0], eax",
            "test qword [rsp + 0x20], 0x100",
            "je 0x413a93",
            "mov rdi, qword [r14 + 0x1a8]",
            "mov ebx, r12d",
            "call fcn.00412b93",
            "cmp eax, r12d",
            "cmovle ebx, eax",
            "cmp ebx, 2",
            "jle 0x413882",
            "mov rax, qword [r14 + 0x1a8]",
            "mov dword [rsp + 0x28], 3",
            "mov eax, dword [rax + 0x9c]",
            "mov dword [rsp + 0xd0], eax",
            "mov rax, qword [r14 + 0x1a8]",
            "xor edx, edx",
            "mov ecx, 0xa",
            "mov qword [rsp + 0x68], 0",
            "mov dword [rsp + 0x94], 0",
            "mov qword [rsp + 0x38], 0",
            "mov qword [rsp + 0xa0], r15",
            "mov rax, qword [rax + 0x70]",
            "mov qword [rsp + 0xd0], rax",
            "div rcx",
            "cmp r13, rax",
            "cmovbe rax, r13",
            "mov qword [rsp + 0x78], rax",
            "lea rax, [rsp + 0xd8]",
            "mov qword [rsp + 0x18], rax",
            "jmp 0x413b00",
            "mov rbp, qword [rsp + 0x38]",
            "mov dword [rsp + 0x94], 1",
            "mov ecx, dword [rsp + 0x90]",
            "mov rdi, qword [rsp + 0x20]",
            "mov edx, ebx",
            "mov rsi, rbp",
            "call fcn.00412b9b",
            "cmp rax, qword [rsp + 0x78]",
            "jbe 0x413b30",
            "mov rax, qword [rsp + 0x78]",
            "movsxd rcx, ebx",
            "xor edx, edx",
            "div rcx",
            "mov rbp, rax",
            "xor bp, bp",
            "cmp rbp, qword [rsp + 0xa0]",
            "mov rcx, qword [rsp + 0x70]",
            "lea rdx, [rsp + 0xd8]",
            "cmovb rbp, qword [rsp + 0xa0]",
            "mov dword [rsp + 0x2c], 0",
            "mov qword [rsp + 0xd8], rdx",
            "mov qword [rsp + 0xe0], rdx",
            "mov r12, qword [rcx + 0x30]",
            "xor bp, bp",
            "cmp qword [rsp + 0x58], 0",
            "lea rax, [rbp + rbp]",
            "cmove rax, rbp",
            "mov qword [rsp + 0xb0], rax",
            "jmp 0x413df2",
            "mov rsi, qword [r12 + 0x10]",
            "mov rax, qword [rsi + 0x1d8]",
            "mov qword [rsp + 0x48], rsi",
            "mov rax, qword [rax + 0x198]",
            "mov qword [rsp + 0x98], rax",
            "mov rax, qword [r12 + 0x58]",
            "mov qword [rsp + 0x60], rax",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r13, rax",
            "je 0x414239",
            "mov rax, qword [r12 + 0x50]",
            "mov rdx, qword [rsp + 0x48]",
            "xor r9d, r9d",
            "mov rsi, qword [rsp + 0x48]",
            "mov rdi, qword [rsp + 0x50]",
            "xor r8d, r8d",
            "mov rcx, r13",
            "mov qword [rsp + 0xef], rax",
            "mov rax, qword [rdx + 0x1d8]",
            "lea rdx, [rsp + 0xef]",
            "mov rax, qword [rax + 0x198]",
            "mov byte [rsp + 0xf7], 0xcc",
            "mov qword [rsp + 0xf8], rax",
            "mov dword [r13 + 0x80], 2",
            "call fcn.0040551b",
            "test eax, eax",
            "mov r15d, eax",
            "js 0x413d5c",
            "movzx ecx, byte [rsp + 0xf7]",
            "mov rdi, qword [rsp + 0x48]",
            "xor edx, edx",
            "mov rsi, r13",
            "call fcn.00406fb4",
            "test eax, eax",
            "mov r15d, eax",
            "js 0x413d5c",
            "cmp qword [rsp + 0x98], 0x100000",
            "mov ecx, 0x100000",
            "cmovae rcx, qword [rsp + 0x98]",
            "xor r9d, r9d",
            "mov r15, qword [r13]",
            "mov r8d, dword [r13 + 0x40]",
            "mov edx, dword [r15 + 0xdc]",
            "cmp r8d, edx",
            "mov dword [rsp + 0xd0], edx",
            "jb 0x413cb6",
            "mov rdi, qword [rsp + 0x48]",
            "mov rsi, r13",
            "mov qword [rsp + 8], rcx",
            "mov qword [rsp], r9",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "mov r15d, eax",
            "mov rcx, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "je 0x413c69",
            "jge 0x413d45",
            "jmp 0x413d5c",
            "lea rsi, [rsp + 0xef]",
            "mov edx, r8d",
            "mov rdi, r15",
            "mov qword [rsp + 8], rcx",
            "mov dword [rsp + 0x10], r8d",
            "mov qword [rsp], r9",
            "call fcn.00412abf",
            "mov rsi, qword [r12 + 0x50]",
            "cmp qword [rsp + 0xef], rsi",
            "mov rcx, qword [rsp + 8]",
            "movsxd r8, dword [rsp + 0x10]",
            "mov r9, qword [rsp]",
            "jb 0x413d3c",
            "ja 0x413d45",
            "cmp byte [rsp + 0xf7], 0xcc",
            "jne 0x413d3c",
            "mov rdx, qword [rsp + 0xf8]",
            "cmp rdx, qword [rsp + 0x60]",
            "ja 0x413d45",
            "cmp rdx, rcx",
            "jbe 0x413d1a",
            "add r9, rdx",
            "sub r9, rcx",
            "imul r8, r8, 0x19",
            "mov esi, dword [r15 + r8 + 0xf2]",
            "add rdx, qword [r15 + rsi + 0xf9]",
            "cmp rcx, rdx",
            "cmovb rcx, rdx",
            "cmp rcx, qword [rsp + 0x60]",
            "ja 0x413d54",
            "inc dword [r13 + 0x40]",
            "jmp 0x413c69",
            "cmp rcx, qword [rsp + 0x60]",
            "jae 0x413d54",
            "add r9, qword [rsp + 0x60]",
            "sub r9, rcx",
            "mov qword [rsp + 0x68], r9",
            "xor r15d, r15d",
            "mov rdi, r13",
            "call fcn.00402e4d",
            "test r15d, r15d",
            "je 0x413d6e",
            "jmp 0x41423f",
            "mov rdx, qword [rsp + 0xb0]",
            "cmp qword [rsp + 0x68], rdx",
            "mov rax, qword [r12]",
            "jb 0x413dd0",
            "mov rdx, qword [r12 + 8]",
            "lea rcx, [rsp + 0xd8]",
            "mov r15d, dword [rsp + 0x2c]",
            "mov qword [rax + 8], rdx",
            "mov qword [rdx], rax",
            "add r15d, 2",
            "mov rdx, qword [rsp + 0xe0]",
            "mov qword [rsp + 0xe0], r12",
            "mov qword [r12], rcx",
            "mov qword [r12 + 8], rdx",
            "mov qword [rdx], r12",
            "mov edx, dword [rsp + 0x2c]",
            "inc edx",
            "cmp qword [rsp + 0x58], 0",
            "cmovne edx, r15d",
            "mov dword [rsp + 0x2c], edx",
            "jmp 0x413de8",
            "mov rsi, qword [rsp + 0x38]",
            "cmp qword [rsp + 0x68], rsi",
            "mov rdx, qword [rsp + 0x68]",
            "cmovbe rdx, rsi",
            "mov qword [rsp + 0x38], rdx",
            "cmp rax, qword [rsp + 0x30]",
            "je 0x413e01",
            "mov r12, rax",
            "cmp dword [rsp + 0x2c], ebx",
            "jl 0x413b89",
            "jmp 0x413e92",
            "cmp dword [rsp + 0x2c], ebx",
            "jge 0x413e92",
            "mov rax, qword [rsp + 0xd8]",
            "cmp rax, qword [rsp + 0x18]",
            "je 0x413e3d",
            "mov rcx, qword [rsp + 0x30]",
            "mov rsi, qword [rsp + 0x30]",
            "mov rdx, qword [rcx]",
            "mov rcx, qword [rsp + 0xe0]",
            "mov qword [rax + 8], rsi",
            "mov qword [rsi], rax",
            "mov qword [rcx], rdx",
            "mov qword [rdx + 8], rcx",
            "mov eax, dword [rsp + 0x28]",
            "cmp dword [rsp + 0x2c], eax",
            "jl 0x413e73",
            "cmp qword [rsp + 0xa8], 0",
            "mov ebx, dword [rsp + 0x2c]",
            "je 0x413af5",
            "mov eax, ebx",
            "mov ebx, dword [rsp + 0x90]",
            "cdq",
            "idiv dword [rsp + 0x90]",
            "imul ebx, eax",
            "jmp 0x413af5",
            "cmp qword [rsp + 0x38], 0",
            "je 0x413882",
            "cmp dword [rsp + 0x94], 0",
            "je 0x413af0",
            "jmp 0x413882",
            "mov rdi, qword [rsp + 0x40]",
            "lea rsi, [rsp + 0xd0]",
            "call fcn.00412bed",
            "test eax, eax",
            "mov r15d, eax",
            "jne 0x41423f",
            "mov rax, qword [rsp + 0xd0]",
            "mov edi, ebx",
            "mov qword [rsp + 0xef], 0x100",
            "mov byte [rsp + 0xf7], 0xe4",
            "mov qword [rsp + 0xf8], rax",
            "call fcn.00412bd4",
            "mov rdi, rax",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r12, rax",
            "je 0x414239",
            "movsxd rdi, ebx",
            "add rdi, 5",
            "shl rdi, 4",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov r15, rax",
            "jne 0x413f13",
            "mov rdi, r12",
            "call sym.imp.free",
            "jmp 0x414239",
            "mov ecx, dword [rsp + 0x90]",
            "mov rdi, qword [rsp + 0x20]",
            "mov rsi, rbp",
            "mov edx, ebx",
            "call fcn.00412b9b",
            "mov rcx, qword [rsp + 0x88]",
            "lea rsi, [rsp + 0xd8]",
            "mov r11, r15",
            "lea r10, [r12 + 0x30]",
            "mov dword [rsp + 0x28], 0",
            "mov qword [rsp + 0x38], rsi",
            "mov qword [rcx], rax",
            "lea eax, [rbx - 1]",
            "mov dword [rsp + 0x2c], eax",
            "jmp 0x41409a",
            "mov r13, qword [rsp + 0xd8]",
            "cmp r13, qword [rsp + 0x38]",
            "jne 0x413f8b",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3be",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__list_empty_private_devs__",
            "jmp 0x414021",
            "cmp qword [rsp + 0x58], 0",
            "je 0x413f9d",
            "mov edx, dword [rsp + 0x2c]",
            "cmp dword [rsp + 0x28], edx",
            "jne 0x413fc4",
            "mov rax, qword [r13 + 8]",
            "mov rdx, qword [r13]",
            "mov rcx, qword [rsp + 0x30]",
            "mov qword [rdx + 8], rax",
            "mov qword [rax], rdx",
            "mov rax, qword [rcx + 8]",
            "mov qword [rcx + 8], r13",
            "mov qword [r13], rcx",
            "mov qword [r13 + 8], rax",
            "mov qword [rax], r13",
            "mov rax, qword [r14 + 0x38]",
            "mov rcx, qword [rsp + 0xf8]",
            "lea r9, [rsp + 0xc8]",
            "mov rdi, qword [rsp + 0x50]",
            "mov r8, rbp",
            "mov rsi, r13",
            "mov rdx, qword [rax + 0x1c7]",
            "mov qword [rsp + 0x10], r10",
            "mov qword [rsp + 8], r11",
            "call fcn.00412d0d",
            "test eax, eax",
            "mov r10, qword [rsp + 0x10]",
            "mov r11, qword [rsp + 8]",
            "je 0x414026",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3cb",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "add qword [r13 + 0x60], rbp",
            "mov rdi, qword [rsp + 0x50]",
            "mov rsi, r13",
            "mov qword [rsp + 0x10], r10",
            "mov qword [rsp + 8], r11",
            "call fcn.004136ad",
            "mov r11, qword [rsp + 8]",
            "mov r10, qword [rsp + 0x10]",
            "add r11, 0x10",
            "test eax, eax",
            "je 0x414061",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3cf",
            "jmp 0x414013",
            "mov rax, qword [rsp + 0xc8]",
            "mov qword [r11 + 0x40], r13",
            "inc dword [rsp + 0x28]",
            "mov qword [r11 + 0x48], rax",
            "mov rdx, qword [r13 + 0x50]",
            "mov qword [r10 + 8], rax",
            "mov qword [r10], rdx",
            "mov rax, qword [r13 + 0x80]",
            "mov qword [r10 + 0x10], rax",
            "mov rax, qword [r13 + 0x88]",
            "mov qword [r10 + 0x18], rax",
            "add r10, 0x20",
            "cmp dword [rsp + 0x28], ebx",
            "jl 0x413f5d",
            "mov rsi, qword [rsp + 0x38]",
            "cmp qword [rsp + 0xd8], rsi",
            "je 0x4140d2",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3d9",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___list_empty_private_devs__",
            "jmp 0x414021",
            "mov rcx, qword [rsp + 0x88]",
            "mov rsi, qword [rsp + 0x80]",
            "mov edi, ebx",
            "mov edx, dword [rsp + 0x90]",
            "mov rax, qword [rcx]",
            "mov rcx, qword [rsp + 0x20]",
            "mov qword [r12], rax",
            "mov rax, qword [rsi + 0x1c7]",
            "mov qword [r12 + 0x10], 0x10000",
            "mov word [r12 + 0x2c], bx",
            "mov dword [r12 + 0x20], 0x10000",
            "mov dword [r12 + 0x24], 0x10000",
            "mov qword [r12 + 8], rax",
            "mov rax, qword [rsp + 0x20]",
            "mov qword [r12 + 0x18], rax",
            "mov eax, dword [rsi + 0x1f0]",
            "mov esi, dword [rsp + 0x90]",
            "mov word [r12 + 0x2e], dx",
            "mov qword [r15 + 0x30], rcx",
            "mov dword [r15 + 0x40], 0x10000",
            "mov dword [r12 + 0x28], eax",
            "mov dword [r15 + 0x44], eax",
            "mov dword [r15 + 0x4c], esi",
            "mov dword [r15 + 0x38], 0x10000",
            "mov dword [r15 + 0x3c], 0x10000",
            "mov dword [r15 + 0x48], ebx",
            "call fcn.00412bd4",
            "mov rsi, qword [rsp + 0x40]",
            "mov rdi, qword [rsp + 0x50]",
            "lea rdx, [rsp + 0xef]",
            "mov rcx, r12",
            "mov r8d, eax",
            "call fcn.004067e9",
            "test eax, eax",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3ef",
            "jne 0x414013",
            "mov rax, qword [rsp + 0xf8]",
            "mov rdx, qword [rsp + 0xb8]",
            "lea rdi, [r14 + 0x150]",
            "mov rcx, qword [rsp + 0x88]",
            "mov rsi, r15",
            "mov qword [rdx], rax",
            "mov qword [r15 + 0x20], rax",
            "mov rax, qword [rcx]",
            "mov qword [r15 + 0x28], rax",
            "call fcn.0041186d",
            "test eax, eax",
            "mov r15d, eax",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3f6",
            "jne 0x414013",
            "test byte [rsp + 0x20], 2",
            "je 0x41422f",
            "mov edi, ebx",
            "call fcn.00412bd4",
            "mov rsi, qword [rsp + 0x40]",
            "mov rdi, qword [rsp + 0x50]",
            "lea rdx, [rsp + 0xef]",
            "mov rcx, r12",
            "mov r8d, eax",
            "call fcn.00413796",
            "test eax, eax",
            "lea rcx, str.btrfs_alloc_chunk",
            "mov edx, 0x3fb",
            "jne 0x414013",
            "mov rdi, r12",
            "call sym.imp.free",
            "jmp 0x41423f",
            "mov r15d, 0xfffffff4",
            "add rsp, 0x108",
            "mov eax, r15d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00412b9b": {
        "function_address": "0x00412b9b",
        "instructions": [
            "test dil, 0x30",
            "jne 0x412bd0",
            "test dil, 0x40",
            "je 0x412bb4",
            "mov eax, edx",
            "cdq",
            "idiv ecx",
            "cdqe",
            "imul rsi, rax",
            "jmp 0x412bd0",
            "test dil, 0x80",
            "je 0x412bbe",
            "dec edx",
            "jmp 0x412bc9",
            "test edi, 0x100",
            "je 0x412bc9",
            "sub edx, 2",
            "movsxd rdx, edx",
            "imul rsi, rdx",
            "mov rax, rsi",
            "ret"
        ]
    },
    "fcn.00406fb4": {
        "function_address": "0x00406fb4",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov ebp, ecx",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x20",
            "mov eax, dword [rbx + 0x40]",
            "test eax, eax",
            "jne 0x406fdc",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00406e25",
            "test eax, eax",
            "je 0x406fe1",
            "jmp 0x406ffc",
            "dec eax",
            "mov dword [rbx + 0x40], eax",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0xf]",
            "call fcn.00402877",
            "movzx eax, byte [rsp + 0x17]",
            "cmp eax, ebp",
            "jne 0x406fc4",
            "xor eax, eax",
            "add rsp, 0x20",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00412bed": {
        "function_address": "0x00412bed",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x40",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x412c24",
            "lea rcx, str.find_next_chunk",
            "mov edx, 0x1bf",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___path_",
            "jmp 0x412c78",
            "lea rdx, [rsp + 0x1e]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rsi, r12",
            "mov qword [rsp + 0x1e], 0x100",
            "mov qword [rsp + 0x27], 0xffffffffffffffff",
            "mov byte [rsp + 0x26], 0xe4",
            "call fcn.0040551b",
            "cmp eax, 0",
            "jl 0x412cf4",
            "jne 0x412c7d",
            "lea rcx, str.find_next_chunk",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret__0_",
            "mov edx, 0x1c9",
            "call sym.imp.__assert_fail",
            "xor edx, edx",
            "mov ecx, 0xe4",
            "mov rsi, rbx",
            "mov rdi, r12",
            "call fcn.00406fb4",
            "test eax, eax",
            "je 0x412c9f",
            "mov qword [rbp], 0",
            "xor eax, eax",
            "jmp 0x412cf4",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0x2f]",
            "mov dword [rsp + 8], eax",
            "call fcn.00412abf",
            "cmp qword [rsp + 0x2f], 0x100",
            "mov eax, dword [rsp + 8]",
            "je 0x412ccc",
            "mov qword [rbp], 0",
            "jmp 0x412cf4",
            "movsxd rcx, dword [rbx + 0x40]",
            "mov rdx, qword [rbx]",
            "imul rcx, rcx, 0x19",
            "mov ecx, dword [rdx + rcx + 0xf2]",
            "mov rdx, qword [rdx + rcx + 0xe1]",
            "add rdx, qword [rsp + 0x38]",
            "mov qword [rsp + 0x10], rdx",
            "mov qword [rbp], rdx",
            "mov rdi, rbx",
            "mov dword [rsp + 8], eax",
            "call fcn.00402e4d",
            "mov eax, dword [rsp + 8]",
            "add rsp, 0x40",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00412d0d": {
        "function_address": "0x00412d0d",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, r9",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x78",
            "mov rax, qword [rsi + 0x10]",
            "mov qword [rsp + 0x38], rdi",
            "mov qword [rsp + 0x40], rdx",
            "mov qword [rsp + 0x48], rcx",
            "mov qword [rsp + 0x28], r8",
            "mov qword [rsp + 0x30], rax",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x41304b",
            "mov r15, qword [r12 + 0x10]",
            "mov rdx, qword [r12 + 0x58]",
            "mov ebp, 0x100000",
            "mov rax, qword [r15 + 0x1d8]",
            "mov qword [rsp + 0x20], rdx",
            "mov rax, qword [rax + 0x198]",
            "mov dword [rbx + 0x80], 2",
            "cmp rax, 0x100000",
            "cmovae rbp, rax",
            "cmp rbp, rdx",
            "jb 0x412d94",
            "mov eax, 0xffffffe4",
            "jmp 0x412f45",
            "mov rax, qword [r12 + 0x50]",
            "lea rcx, [rsp + 0x5f]",
            "mov rdi, qword [rsp + 0x38]",
            "lea rdx, [rsp + 0x5f]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov qword [rsp + 0x18], rcx",
            "mov rsi, r15",
            "mov rcx, rbx",
            "mov qword [rsp + 0x5f], rax",
            "mov qword [rsp + 0x68], rbp",
            "mov byte [rsp + 0x67], 0xcc",
            "call fcn.0040551b",
            "test eax, eax",
            "js 0x412f45",
            "movzx ecx, byte [rsp + 0x67]",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov rdi, r15",
            "call fcn.00406fb4",
            "test eax, eax",
            "js 0x412f45",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0x5f]",
            "xor r14d, r14d",
            "call fcn.00412abf",
            "xor r9d, r9d",
            "mov r8, qword [rbx]",
            "mov r10d, dword [rbx + 0x40]",
            "mov eax, dword [r8 + 0xdc]",
            "cmp r10d, eax",
            "mov dword [rsp + 0x58], eax",
            "jb 0x412e66",
            "mov rsi, rbx",
            "mov rdi, r15",
            "mov dword [rsp], r9d",
            "call fcn.00406ec3",
            "cmp eax, 0",
            "mov r9d, dword [rsp]",
            "je 0x412e05",
            "jge 0x413052",
            "jmp 0x412f45",
            "mov qword [r13], rbp",
            "jmp 0x412f03",
            "cmp r14, rbp",
            "mov rcx, rbp",
            "cmovae rcx, r14",
            "cmp qword [rsp + 0x20], rcx",
            "mov qword [r13], rcx",
            "jbe 0x412d8a",
            "jmp 0x412f03",
            "lea rsi, [rsp + 0x5f]",
            "mov edx, r10d",
            "mov rdi, r8",
            "mov qword [rsp + 0x10], r8",
            "mov dword [rsp], r9d",
            "mov dword [rsp + 8], r10d",
            "call fcn.00412abf",
            "mov rsi, qword [r12 + 0x50]",
            "cmp qword [rsp + 0x5f], rsi",
            "mov r8, qword [rsp + 0x10]",
            "mov r9d, dword [rsp]",
            "movsxd r10, dword [rsp + 8]",
            "jb 0x412efb",
            "ja 0x413052",
            "mov rax, qword [rsp + 0x68]",
            "cmp rax, rbp",
            "jb 0x412ed7",
            "cmp rax, r14",
            "jbe 0x412ed7",
            "test r9d, r9d",
            "je 0x412ed7",
            "cmp r14, rbp",
            "cmovb r14, rbp",
            "cmp rax, r14",
            "jbe 0x412ed7",
            "mov rdx, rax",
            "sub rdx, r14",
            "cmp rdx, qword [rsp + 0x28]",
            "jb 0x412ed7",
            "mov qword [r13], r14",
            "jmp 0x412f03",
            "cmp byte [rsp + 0x67], 0xcc",
            "jne 0x412efb",
            "imul r10, r10, 0x19",
            "mov r14, rax",
            "mov r9d, 1",
            "mov edx, dword [r8 + r10 + 0xf2]",
            "add r14, qword [r8 + rdx + 0xf9]",
            "inc dword [rbx + 0x40]",
            "jmp 0x412e05",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "mov rax, qword [r13]",
            "cmp rax, rbp",
            "jae 0x412f33",
            "lea rcx, str.find_free_dev_extent",
            "mov edx, 0x179",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__start___search_start_",
            "jmp 0x412fbd",
            "add rax, qword [rsp + 0x28]",
            "cmp rax, qword [rsp + 0x20]",
            "ja 0x412d8a",
            "jmp 0x412f5d",
            "mov rdi, rbx",
            "mov dword [rsp + 0x10], eax",
            "call fcn.00402e1a",
            "mov eax, dword [rsp + 0x10]",
            "test eax, eax",
            "jne 0x413039",
            "mov rax, qword [r12 + 0x50]",
            "mov rsi, qword [rsp + 0x30]",
            "lea r8, [rsp + 0x58]",
            "mov rdi, qword [rsp + 0x38]",
            "lea rcx, [rsp + 0x5f]",
            "mov r9d, 1",
            "mov rdx, rbx",
            "mov byte [rsp + 0x67], 0xcc",
            "mov dword [rsp + 0x58], 0x30",
            "mov qword [rsp + 0x5f], rax",
            "mov rax, qword [r13]",
            "mov qword [rsp + 0x68], rax",
            "call fcn.004064c0",
            "test eax, eax",
            "je 0x412fc2",
            "lea rcx, str.btrfs_alloc_dev_extent",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x1a2",
            "call sym.imp.__assert_fail",
            "movsxd rdx, dword [rbx + 0x40]",
            "mov rbp, qword [rbx]",
            "mov rsi, qword [rsp + 0x40]",
            "mov rdi, rbp",
            "imul rdx, rdx, 0x19",
            "mov edx, dword [rbp + rdx + 0xf2]",
            "lea rcx, [rbp + rdx + 0xd5]",
            "add rdx, 0x85",
            "mov qword [rcx + 0xc], rsi",
            "mov qword [rcx + 0x14], 0x100",
            "lea r12, [rcx + 0xc]",
            "mov rcx, qword [rsp + 0x48]",
            "mov qword [r12 + 0x10], rcx",
            "mov rcx, qword [rsp + 0x30]",
            "mov rsi, qword [rcx + 0x1d8]",
            "mov ecx, 0x10",
            "mov dword [rsp + 0x10], eax",
            "add rsi, 0x10",
            "call fcn.00412a59",
            "mov rsi, qword [rsp + 0x28]",
            "mov rdi, rbp",
            "mov qword [r12 + 0x18], rsi",
            "call fcn.00408149",
            "mov eax, dword [rsp + 0x10]",
            "mov rdi, rbx",
            "mov dword [rsp + 0x10], eax",
            "call fcn.00402e4d",
            "mov eax, dword [rsp + 0x10]",
            "jmp 0x413060",
            "mov eax, 0xfffffff4",
            "jmp 0x413060",
            "test r9d, r9d",
            "je 0x412e3f",
            "jmp 0x412e48",
            "add rsp, 0x78",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004136ad": {
        "function_address": "0x004136ad",
        "instructions": [
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x30",
            "mov rax, qword [rsi + 0x10]",
            "mov rax, qword [rax + 0x1d8]",
            "mov r12, qword [rax + 0x38]",
            "mov qword [rsp + 8], rdi",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbp, rax",
            "mov rdi, qword [rsp + 8]",
            "je 0x413784",
            "mov rax, qword [rbx + 0x50]",
            "lea rdx, [rsp + 0x1f]",
            "xor r8d, r8d",
            "mov rsi, r12",
            "mov r9d, 1",
            "mov rcx, rbp",
            "mov qword [rsp + 0x1f], 1",
            "mov byte [rsp + 0x27], 0xd8",
            "mov qword [rsp + 0x28], rax",
            "call fcn.0040551b",
            "cmp eax, 0",
            "mov r12d, eax",
            "jl 0x41377a",
            "jne 0x413774",
            "movsxd rax, dword [rbp + 0x40]",
            "mov rdi, qword [rbp]",
            "mov rcx, qword [rbx + 0x50]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdi + rax + 0xf2]",
            "lea rax, [rdi + rax + 0xd5]",
            "mov qword [rax + 0xc], rcx",
            "lea rdx, [rax + 0xc]",
            "mov rax, qword [rbx + 0x78]",
            "mov qword [rdx + 0x24], rax",
            "mov eax, dword [rbx + 0x68]",
            "mov dword [rdx + 0x18], eax",
            "mov eax, dword [rbx + 0x6c]",
            "mov dword [rdx + 0x1c], eax",
            "mov eax, dword [rbx + 0x70]",
            "mov dword [rdx + 0x20], eax",
            "mov rax, qword [rbx + 0x58]",
            "mov qword [rdx + 8], rax",
            "mov rax, qword [rbx + 0x60]",
            "mov qword [rdx + 0x10], rax",
            "call fcn.00408149",
            "jmp 0x41377a",
            "mov r12d, 0xfffffffe",
            "mov rdi, rbp",
            "call fcn.00402e4d",
            "jmp 0x41378a",
            "mov r12d, 0xfffffff4",
            "add rsp, 0x30",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00413796": {
        "function_address": "0x00413796",
        "instructions": [
            "push rbx",
            "mov rax, qword [rsi + 0x1d8]",
            "mov r10, rcx",
            "mov r9, qword [rax + 0x1a8]",
            "mov eax, dword [r9 + 0xa0]",
            "lea ecx, [r8 + rax]",
            "mov dword [rsp - 0x18], eax",
            "add rcx, 0x11",
            "cmp rcx, 0x800",
            "ja 0x413818",
            "mov ecx, eax",
            "lea rsi, [rsp - 0x11]",
            "lea eax, [r8 + rax + 0x11]",
            "lea r11, [r9 + rcx + 0x320]",
            "mov rcx, qword [rdx + 9]",
            "lea rbx, [r11 + 0xb]",
            "mov qword [rsp - 8], rcx",
            "mov cl, byte [rdx + 8]",
            "mov rdx, qword [rdx]",
            "mov rdi, rbx",
            "mov byte [rsp - 9], cl",
            "mov ecx, 0x11",
            "mov qword [rsp - 0x11], rdx",
            "lea rdx, [r11 + 0x1c]",
            "rep movsb byte [rdi], byte [rsi]",
            "movsxd rcx, r8d",
            "mov rdi, rdx",
            "mov rsi, r10",
            "rep movsb byte [rdi], byte [rsi]",
            "mov dword [r9 + 0xa0], eax",
            "xor eax, eax",
            "jmp 0x41381d",
            "mov eax, 0xffffffe5",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0040d187": {
        "function_address": "0x0040d187",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "mov rsi, rdx",
            "mov rdx, rcx",
            "mov rcx, r8",
            "mov r8, r9",
            "push rbx",
            "mov rbx, rdi",
            "push rax",
            "mov rdi, qword [rbp + 0x1d8]",
            "mov r9, qword [rsp + 0x20]",
            "call fcn.0040d055",
            "mov rdx, qword [rbp + 0x1d8]",
            "lea rcx, [rax + 0x41]",
            "mov r8d, 0x18",
            "mov rdi, rbx",
            "mov rbp, qword [rdx + 0x28]",
            "lea rdx, [rax + 0x30]",
            "mov rsi, rbp",
            "call fcn.004067e9",
            "test eax, eax",
            "lea rcx, str.btrfs_make_block_group",
            "mov edx, 0xcda",
            "jne 0x40d1fc",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.0040af4b",
            "test eax, eax",
            "je 0x40d20f",
            "lea rcx, str.btrfs_make_block_group",
            "mov edx, 0xcdd",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call fcn.0040bd20",
            "test eax, eax",
            "lea rcx, str.btrfs_make_block_group",
            "mov edx, 0xcdf",
            "jne 0x40d1fc",
            "pop rbp",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0040d230": {
        "function_address": "0x0040d230",
        "instructions": [
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "mov rsi, rcx",
            "sub rsp, 0x30",
            "mov rdi, qword [rbx + 0x1d8]",
            "lea rdx, [rdi + 0x1f8]",
            "mov rax, qword [rdi + 0x1f8]",
            "jmp 0x40d26a",
            "test qword [rax - 0x28], rsi",
            "je 0x40d267",
            "sub rax, 0x28",
            "jmp 0x40d271",
            "mov rax, qword [rax]",
            "cmp rax, rdx",
            "jne 0x40d25b",
            "xor eax, eax",
            "test rax, rax",
            "mov qword [rsp + 0x18], rax",
            "jne 0x40d29d",
            "lea r8, [rsp + 0x18]",
            "xor ecx, ecx",
            "xor edx, edx",
            "call fcn.0040aa99",
            "test eax, eax",
            "lea rcx, str.do_chunk_alloc",
            "mov edx, 0x764",
            "jne 0x40d367",
            "mov rcx, qword [rsp + 0x18]",
            "test rcx, rcx",
            "jne 0x40d2c6",
            "lea rcx, str.do_chunk_alloc",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.___space_info_",
            "mov edx, 0x766",
            "call sym.imp.__assert_fail",
            "cmp dword [rcx + 0x20], 0",
            "jne 0x40d37a",
            "imul rax, qword [rcx + 8], 7",
            "xor edx, edx",
            "mov edi, 0xa",
            "mov rsi, r12",
            "add rsi, qword [rcx + 0x18]",
            "add rsi, qword [rcx + 0x10]",
            "div rdi",
            "cmp rsi, rax",
            "jb 0x40d37a",
            "mov r8, qword [rcx]",
            "lea rdx, [rsp + 0x20]",
            "lea rcx, [rsp + 0x28]",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0041381f",
            "cmp eax, 0xffffffe4",
            "jne 0x40d31e",
            "mov rax, qword [rsp + 0x18]",
            "mov dword [rax + 0x20], 1",
            "jmp 0x40d37a",
            "test eax, eax",
            "lea rcx, str.do_chunk_alloc",
            "mov edx, 0x777",
            "jne 0x40d367",
            "mov rax, qword [rsp + 0x28]",
            "mov r9, qword [rsp + 0x20]",
            "xor edx, edx",
            "mov r8d, 0x100",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "mov qword [rsp], rax",
            "mov rax, qword [rsp + 0x18]",
            "mov rcx, qword [rax]",
            "call fcn.0040d187",
            "test eax, eax",
            "je 0x40d37a",
            "lea rcx, str.do_chunk_alloc",
            "mov edx, 0x77b",
            "lea rsi, str.extent_tree.c",
            "lea rdi, str.__ret_",
            "jmp 0x40d2c1",
            "add rsp, 0x30",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.0040ab82": {
        "function_address": "0x0040ab82",
        "instructions": [
            "push rbx",
            "mov eax, 0x11000",
            "lea rbx, [rdi + 0xb0]",
            "mov r8d, 0x16",
            "sub rsp, 0x20",
            "cmp rsi, 0x11000",
            "mov rdi, rbx",
            "cmovae rax, rsi",
            "lea rcx, [rsp + 0x18]",
            "lea rdx, [rsp + 0x10]",
            "mov rsi, rax",
            "call fcn.00412027",
            "test eax, eax",
            "je 0x40abc1",
            "xor eax, eax",
            "jmp 0x40abdc",
            "mov rsi, qword [rsp + 0x10]",
            "lea rdx, [rsp + 8]",
            "mov rdi, rbx",
            "call fcn.00412136",
            "test eax, eax",
            "jne 0x40abbd",
            "mov rax, qword [rsp + 8]",
            "add rsp, 0x20",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.0040c53a": {
        "function_address": "0x0040c53a",
        "instructions": [
            "push r15",
            "push r14",
            "lea r14, [rdi + 0xb0]",
            "push r13",
            "mov r13, rdx",
            "push r12",
            "movsxd r12, ecx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, r12",
            "sub rsp, 0x38",
            "call fcn.00409da0",
            "test r13, r13",
            "mov r15d, eax",
            "jne 0x40c575",
            "test rbp, rbp",
            "mov rsi, r13",
            "je 0x40c5eb",
            "jmp 0x40c5b5",
            "mov rdi, rbx",
            "mov rsi, r13",
            "call fcn.0040abe2",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x40c56b",
            "cmp dword [rax + 0x84], 0",
            "jne 0x40c56b",
            "mov rax, r12",
            "and rax, qword [rbx + 0x78]",
            "cmp rax, r12",
            "jne 0x40c56b",
            "lea rdi, [rbx + 0x41]",
            "call fcn.00409ea5",
            "add rax, qword [rbx + 0x70]",
            "cmp rax, qword [rbx + 0x39]",
            "jae 0x40c56b",
            "jmp 0x40c67a",
            "cmp dword [rbp + 0x84], 0",
            "jne 0x40c5ef",
            "mov rax, r12",
            "and rax, qword [rbp + 0x78]",
            "cmp rax, r12",
            "jne 0x40c5ef",
            "lea rdi, [rbp + 0x41]",
            "mov rbx, rbp",
            "call fcn.00409ea5",
            "add rax, qword [rbp + 0x70]",
            "mov rsi, qword [rbp + 0x39]",
            "cmp rax, rsi",
            "jb 0x40c67a",
            "add rsi, qword [rbp + 0x30]",
            "xor ebp, ebp",
            "jmp 0x40c604",
            "mov rsi, qword [rbp + 0x30]",
            "cmp r13, rsi",
            "cmovae rsi, r13",
            "jmp 0x40c5eb",
            "mov rsi, r13",
            "mov ebp, 1",
            "lea rcx, [rsp + 0x20]",
            "lea rdx, [rsp + 0x18]",
            "mov r8d, r15d",
            "mov rdi, r14",
            "call fcn.00412027",
            "test eax, eax",
            "jne 0x40c674",
            "mov rsi, qword [rsp + 0x18]",
            "lea rdx, [rsp + 0x28]",
            "mov rdi, r14",
            "call fcn.00412136",
            "test eax, eax",
            "jne 0x40c674",
            "mov rbx, qword [rsp + 0x28]",
            "mov rsi, qword [rbx + 0x39]",
            "add rsi, qword [rbx + 0x30]",
            "lea rdi, [rbx + 0x41]",
            "mov qword [rsp + 8], rsi",
            "call fcn.00409ea5",
            "cmp dword [rbx + 0x84], 0",
            "mov rsi, qword [rsp + 8]",
            "jne 0x40c604",
            "mov rdx, r12",
            "and rdx, qword [rbx + 0x78]",
            "cmp rdx, r12",
            "jne 0x40c604",
            "add rax, qword [rbx + 0x70]",
            "cmp rax, qword [rbx + 0x39]",
            "jae 0x40c604",
            "jmp 0x40c67a",
            "test ebp, ebp",
            "je 0x40c5fc",
            "xor ebx, ebx",
            "add rsp, 0x38",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00414572": {
        "function_address": "0x00414572",
        "instructions": [
            "push r15",
            "mov r15, r8",
            "push r14",
            "mov r14, r9",
            "push r13",
            "mov r13, rcx",
            "push r12",
            "mov r12, rdx",
            "push rbp",
            "push rbx",
            "sub rsp, 0x18",
            "call fcn.0041196c",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x4145b8",
            "lea rcx, str.btrfs_rmap_block",
            "lea rsi, str.volumes.c",
            "lea rdi, str.___ce_",
            "mov edx, 0x4a4",
            "call sym.imp.__assert_fail",
            "mov rcx, qword [rax + 0x30]",
            "mov esi, dword [rax + 0x40]",
            "mov rbp, qword [rax + 0x28]",
            "mov eax, dword [rax + 0x48]",
            "test cl, 0x40",
            "movsxd r8, esi",
            "je 0x4145d4",
            "cdq",
            "idiv dword [rbx + 0x4c]",
            "jmp 0x4145d9",
            "test cl, 8",
            "je 0x4145e9",
            "movsxd rcx, eax",
            "xor edx, edx",
            "mov rax, rbp",
            "div rcx",
            "mov rbp, rax",
            "jmp 0x414619",
            "test ecx, 0x180",
            "je 0x414619",
            "mov rdi, rbx",
            "mov dword [rsp + 8], esi",
            "call fcn.00412aa0",
            "xor edx, edx",
            "mov r8d, eax",
            "movsxd rcx, eax",
            "mov rax, rbp",
            "mov esi, dword [rsp + 8]",
            "div rcx",
            "imul r8d, esi",
            "mov rbp, rax",
            "movsxd r8, r8d",
            "movsxd rsi, dword [rbx + 0x48]",
            "mov edi, 1",
            "mov qword [rsp + 8], r8",
            "shl rsi, 3",
            "call sym.imp.calloc",
            "xor esi, esi",
            "mov r9, rax",
            "xor ecx, ecx",
            "mov r8, qword [rsp + 8]",
            "jmp 0x4146dd",
            "test r13, r13",
            "je 0x41465b",
            "movsxd rdx, eax",
            "add rdx, 5",
            "shl rdx, 4",
            "mov rdx, qword [rbx + rdx]",
            "cmp qword [rdx + 0x50], r13",
            "jne 0x4146da",
            "add rax, 5",
            "shl rax, 4",
            "mov rax, qword [rbx + rax + 8]",
            "cmp rax, r12",
            "ja 0x4146da",
            "lea rdx, [rbp + rax]",
            "cmp rdx, r12",
            "jbe 0x4146da",
            "movsxd r11, dword [rbx + 0x40]",
            "mov rdx, r12",
            "sub rdx, rax",
            "mov rax, rdx",
            "xor edx, edx",
            "div r11",
            "mov rdi, rax",
            "mov rax, qword [rbx + 0x30]",
            "test al, 0x40",
            "je 0x4146aa",
            "imul rdi, r10",
            "movsxd r11, dword [rbx + 0x4c]",
            "xor edx, edx",
            "lea rax, [rsi + rdi]",
            "div r11",
            "mov rdi, rax",
            "jmp 0x4146b5",
            "test al, 8",
            "je 0x4146b5",
            "imul rdi, r10",
            "add rdi, rsi",
            "imul rdi, r8",
            "xor edx, edx",
            "add rdi, qword [rbx + 0x20]",
            "jmp 0x4146cb",
            "inc rdx",
            "cmp qword [r9 + rdx*8 - 8], rdi",
            "je 0x4146da",
            "cmp edx, ecx",
            "jl 0x4146c1",
            "jne 0x4146da",
            "movsxd rax, ecx",
            "inc ecx",
            "mov qword [r9 + rax*8], rdi",
            "inc rsi",
            "movsxd r10, dword [rbx + 0x48]",
            "movsxd rax, esi",
            "cmp eax, r10d",
            "jl 0x414641",
            "mov rax, qword [rsp + 0x50]",
            "mov qword [r15], r9",
            "mov dword [r14], ecx",
            "mov dword [rax], r8d",
            "add rsp, 0x18",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041095f": {
        "function_address": "0x0041095f",
        "instructions": [
            "push r15",
            "mov r15, rdx",
            "push r14",
            "mov r14, r8",
            "push r13",
            "mov r13, r9",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x38",
            "mov qword [rsp], rcx",
            "mov qword [rsp + 8], rsi",
            "mov r12, qword [rsp + 0x70]",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "mov rcx, qword [rsp]",
            "mov rsi, qword [rsp + 8]",
            "jne 0x4109b9",
            "lea rcx, str.btrfs_insert_file_extent",
            "mov edx, 0x2c",
            "lea rsi, str.file_item.c",
            "lea rdi, str.___path_",
            "jmp 0x410a0f",
            "mov qword [rsp + 0x28], rcx",
            "lea r8, [rsp + 0x18]",
            "lea rcx, [rsp + 0x1f]",
            "mov r9d, 1",
            "mov rdx, rax",
            "mov rdi, rbp",
            "mov qword [rsp + 0x1f], r15",
            "mov byte [rsp + 0x27], 0x6c",
            "mov dword [rsp + 0x18], 0x35",
            "call fcn.004064c0",
            "cmp eax, 0",
            "mov r15d, eax",
            "jl 0x410a65",
            "je 0x410a14",
            "lea rcx, str.btrfs_insert_file_extent",
            "lea rsi, str.file_item.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x35",
            "call sym.imp.__assert_fail",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "imul rax, rax, 0x19",
            "mov eax, dword [rdi + rax + 0xf2]",
            "lea rax, [rdi + rax + 0xd5]",
            "mov qword [rax + 0x21], r14",
            "mov qword [rax + 0x29], r13",
            "mov qword [rax + 0x31], 0",
            "mov qword [rax + 0x39], r12",
            "mov qword [rax + 0x14], r12",
            "mov rdx, qword [rbp]",
            "mov byte [rax + 0x20], 1",
            "mov byte [rax + 0x1c], 0",
            "mov byte [rax + 0x1d], 0",
            "mov word [rax + 0x1e], 0",
            "mov qword [rax + 0xc], rdx",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "add rsp, 0x38",
            "mov eax, r15d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0040c68c": {
        "function_address": "0x0040c68c",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "push r8",
            "mov rax, qword [rsi + 0x1d8]",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040af4b",
            "mov rax, qword [rbp + 0x1d8]",
            "mov rdi, rbx",
            "mov rsi, qword [rax + 0x28]",
            "call fcn.0040bd20",
            "pop r9",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0040fcb6": {
        "function_address": "0x0040fcb6",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "sub rsp, 0x58",
            "test rsi, rsi",
            "je 0x40fefc",
            "movzx ecx, byte [rsi + 0xe0]",
            "mov ebp, dword [rsi + 0xdc]",
            "mov rbx, rdi",
            "mov dword [rsp + 0x30], ebp",
            "test cl, cl",
            "jne 0x40fcf2",
            "call fcn.0040f1cb",
            "jmp 0x40fefc",
            "mov eax, dword [rdi + 0x1f4]",
            "mov r15d, edx",
            "mov edi, 0x21",
            "xor edx, edx",
            "mov r8, qword [rsi + 0xd4]",
            "lea r14, [rsi + 0xd4]",
            "mov rsi, qword [rsi + 0xcc]",
            "sub rax, 0x65",
            "mov qword [rsp + 8], r8",
            "mov r8d, ebp",
            "div rdi",
            "mov rdx, qword [r12 + 0x30]",
            "mov qword [rsp + 0x30], rsi",
            "mov dil, 1",
            "mov qword [rsp], rsi",
            "lea rsi, str.node__llu_level__d_items__d_free__u_generation__llu_owner__llu_n",
            "mov r9d, eax",
            "xor eax, eax",
            "sub r9d, ebp",
            "call sym.imp.__printf_chk",
            "mov rdi, r12",
            "call fcn.0040e5f1",
            "mov rax, qword [reloc.stdout]",
            "mov rdi, qword [rax]",
            "call sym.imp.fflush",
            "cmp byte [r12 + 0xe0], 1",
            "jne 0x40fd75",
            "mov eax, dword [rbx + 0x1f8]",
            "jmp 0x40fd7b",
            "mov eax, dword [rbx + 0x1f4]",
            "mov dword [rsp + 0x24], eax",
            "xor r13d, r13d",
            "jmp 0x40fe0f",
            "imul rax, r13, 0x21",
            "lea rsi, [rsp + 0x3f]",
            "mov ecx, 0x11",
            "mov rdi, r12",
            "inc r13",
            "lea r8, [r12 + rax + 0xe1]",
            "lea rdx, [rax + 0x65]",
            "mov rax, qword [r8 + 0x11]",
            "mov qword [rsp + 0x18], r8",
            "mov qword [rsp + 0x28], rax",
            "call fcn.00412a4b",
            "mov edi, 9",
            "call sym.imp.putchar",
            "lea rdi, [rsp + 0x3f]",
            "call fcn.0040e694",
            "mov ecx, dword [rsp + 0x24]",
            "mov rax, qword [rsp + 0x28]",
            "xor edx, edx",
            "mov r8, qword [rsp + 0x18]",
            "lea rsi, str._block__llu___llu__gen__llu_n",
            "mov edi, 1",
            "div rcx",
            "mov r8, qword [r8 + 0x19]",
            "mov rdx, qword [rsp + 0x28]",
            "mov rcx, rax",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "mov rax, qword [reloc.stdout]",
            "mov rdi, qword [rax]",
            "call sym.imp.fflush",
            "cmp ebp, r13d",
            "ja 0x40fd87",
            "xor r13d, r13d",
            "test r15d, r15d",
            "jne 0x40fef3",
            "jmp 0x40fefc",
            "imul rax, r13, 0x21",
            "mov edx, dword [rsp + 0x24]",
            "mov rdi, rbx",
            "lea r9, [r12 + rax + 0xe1]",
            "mov rcx, qword [r9 + 0x19]",
            "mov rsi, qword [r9 + 0x11]",
            "mov qword [rsp + 0x18], r9",
            "call fcn.004085f6",
            "test rax, rax",
            "mov r15, rax",
            "mov r9, qword [rsp + 0x18]",
            "jne 0x40fe86",
            "mov rax, qword [reloc.stderr]",
            "mov r8, qword [r14]",
            "lea rdx, str.failed_to_read__llu_in_tree__llu_n",
            "mov rcx, qword [r9 + 0x11]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "mov qword [rsp + 0x30], r8",
            "call sym.imp.__fprintf_chk",
            "jmp 0x40fef0",
            "movzx eax, byte [rax + 0xe0]",
            "test al, al",
            "jne 0x40feaa",
            "cmp byte [r12 + 0xe0], 1",
            "je 0x40feaa",
            "lea rcx, str.btrfs_print_tree",
            "mov edx, 0x3dd",
            "jmp 0x40fec5",
            "movzx edx, byte [r12 + 0xe0]",
            "dec edx",
            "cmp eax, edx",
            "je 0x40fed8",
            "lea rcx, str.btrfs_print_tree",
            "mov edx, 0x3e0",
            "lea rsi, str.print_tree.c",
            "lea rdi, [0x0041e6fe]",
            "call sym.imp.__assert_fail",
            "mov rdi, rbx",
            "mov edx, 1",
            "mov rsi, r15",
            "call fcn.0040fcb6",
            "mov rdi, r15",
            "call fcn.00412164",
            "inc r13",
            "cmp ebp, r13d",
            "ja 0x40fe29",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004102f8": {
        "function_address": "0x004102f8",
        "instructions": [
            "push r15",
            "movsxd r15, edx",
            "push r14",
            "push r13",
            "mov r13d, edx",
            "push r12",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "sub rsp, 0x18",
            "movsxd rax, dword [rdi + 0x40]",
            "mov r12, qword [rdi]",
            "mov qword [rsp + 8], rsi",
            "imul rax, rax, 0x19",
            "lea rax, [r12 + rax + 0xe1]",
            "mov ebx, dword [rax + 0x11]",
            "mov eax, dword [rax + 0x15]",
            "mov dword [rsp + 4], eax",
            "add rbx, 0x65",
            "jmp 0x410372",
            "lea rdx, [r12 + rbx + 0x7c]",
            "movzx eax, word [rdx + 0x1b]",
            "movzx edx, word [rdx + 0x19]",
            "cmp eax, r13d",
            "lea r14d, [rax + rdx + 0x1e]",
            "je 0x410358",
            "mov r9d, r14d",
            "add ebp, r14d",
            "add rbx, r9",
            "jmp 0x410372",
            "mov rsi, qword [rsp + 8]",
            "lea rdx, [rbx + 0x1e]",
            "mov rcx, r15",
            "mov rdi, r12",
            "call fcn.00412a3b",
            "test eax, eax",
            "jne 0x41034d",
            "jmp 0x41037a",
            "cmp ebp, dword [rsp + 4]",
            "jb 0x410336",
            "xor ebx, ebx",
            "add rsp, 0x18",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041038c": {
        "function_address": "0x0041038c",
        "instructions": [
            "push r14",
            "mov r14, r9",
            "mov r9d, 1",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov ebp, r8d",
            "push rbx",
            "mov rbx, rdx",
            "sub rsp, 0x10",
            "mov dword [rsp + 0xc], r8d",
            "lea r8, [rsp + 0xc]",
            "call fcn.004064c0",
            "cmp eax, 0xffffffef",
            "jne 0x410400",
            "mov edx, dword [rsp + 0x40]",
            "mov rsi, r14",
            "mov rdi, rbx",
            "call fcn.004102f8",
            "test rax, rax",
            "mov rdx, 0xffffffffffffffef",
            "jne 0x41046b",
            "mov ecx, ebp",
            "mov rdx, rbx",
            "mov rsi, r13",
            "mov rdi, r12",
            "call fcn.0040520e",
            "test eax, eax",
            "lea rcx, str.insert_with_overflow",
            "mov edx, 0x31",
            "jg 0x410416",
            "cmp eax, 0",
            "movsxd rdx, eax",
            "jl 0x41046b",
            "je 0x410429",
            "lea rcx, str.insert_with_overflow",
            "mov edx, 0x35",
            "lea rsi, str.dir_item.c",
            "lea rdi, [0x0041dd2c]",
            "call sym.imp.__assert_fail",
            "movsxd rax, dword [rbx + 0x40]",
            "mov rdx, qword [rbx]",
            "imul rax, rax, 0x19",
            "lea rcx, [rdx + rax + 0xe1]",
            "mov eax, dword [rcx + 0x11]",
            "mov edx, dword [rcx + 0x15]",
            "add rax, 0x65",
            "cmp ebp, edx",
            "jbe 0x410466",
            "lea rcx, str.insert_with_overflow",
            "mov edx, 0x39",
            "lea rsi, str.dir_item.c",
            "lea rdi, str.__data_size___btrfs_item_size_leaf__item__",
            "jmp 0x410424",
            "sub edx, ebp",
            "add rdx, rax",
            "add rsp, 0x10",
            "mov rax, rdx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.004119de": {
        "function_address": "0x004119de",
        "instructions": [
            "jmp fcn.0041c985"
        ]
    },
    "fcn.00411a34": {
        "function_address": "0x00411a34",
        "instructions": [
            "mov rax, qword [rdi + 0x38]",
            "mov rdx, qword [rdi + 0x30]",
            "inc rax",
            "mov qword [rdi + 0x20], rdx",
            "sub rax, rdx",
            "mov qword [rdi + 0x28], rax",
            "ret"
        ]
    },
    "fcn.00402490": {
        "function_address": "0x00402490",
        "instructions": [
            "lea rcx, str.btrfs_chunk_item_size",
            "push r9",
            "lea rsi, str.ctree.h",
            "lea rdi, str.__num_stripes__0_",
            "mov edx, 0x12f",
            "call sym.imp.__assert_fail"
        ]
    },
    "fcn.00415a68": {
        "function_address": "0x00415a68",
        "instructions": [
            "sub rsp, 0x98",
            "mov rsi, rsp",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x415a86",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "neg eax",
            "jmp 0x415aad",
            "mov edx, dword [rsp + 0x18]",
            "xor eax, eax",
            "and edx, 0xf000",
            "cmp edx, 0x6000",
            "jne 0x415aad",
            "mov rax, qword [rsp + 0x28]",
            "shr rax, 8",
            "cmp rax, 7",
            "sete al",
            "movzx eax, al",
            "add rsp, 0x98",
            "ret"
        ]
    },
    "fcn.0041ccb0": {
        "function_address": "0x0041ccb0",
        "instructions": [
            "mov rdx, rsi",
            "mov rsi, rdi",
            "mov edi, 1",
            "jmp sym.imp.__xstat64"
        ]
    },
    "fcn.00415ab5": {
        "function_address": "0x00415ab5",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "mov edx, 0x1000",
            "push rbx",
            "sub rsp, 0x2028",
            "lea rsi, [rsp + 0x1018]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x2018], rax",
            "xor eax, eax",
            "call sym.imp.__realpath_chk",
            "test rax, rax",
            "jne 0x415af0",
            "jmp 0x415b8c",
            "lea rdi, [rsp + 0x1018]",
            "mov esi, 0x2f",
            "call sym.imp.strrchr",
            "lea r8, str._sys_block__s_loop_backing_file",
            "lea rdi, [rsp + 0x18]",
            "mov r9, rax",
            "mov ecx, 0x1000",
            "mov edx, 1",
            "mov esi, 0x1000",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "lea rsi, [0x0042045e]",
            "lea rdi, [rsp + 0x18]",
            "call sym.imp.fopen64",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x415b42",
            "jmp 0x415b8c",
            "lea r8, str.___i__n_",
            "lea rdi, [rsp + 4]",
            "mov r9d, 0xfff",
            "mov ecx, 0x14",
            "mov edx, 1",
            "mov esi, 0x14",
            "xor eax, eax",
            "call sym.imp.__snprintf_chk",
            "lea rsi, [rsp + 4]",
            "mov rdx, rbp",
            "mov rdi, rbx",
            "xor eax, eax",
            "call sym.imp.fscanf",
            "mov rdi, rbx",
            "mov ebp, eax",
            "call sym.imp.fclose",
            "xor eax, eax",
            "inc ebp",
            "jne 0x415b95",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "neg eax",
            "mov rdx, qword [rsp + 0x2018]",
            "xor rdx, qword fs:[0x28]",
            "je 0x415bad",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x2028",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "sym.imp.__realpath_chk": {
        "function_address": "0x00402140",
        "instructions": [
            "jmp qword [reloc.__realpath_chk]"
        ]
    },
    "sym.imp.strrchr": {
        "function_address": "0x004020d0",
        "instructions": [
            "jmp qword [reloc.strrchr]"
        ]
    },
    "sym.imp.fscanf": {
        "function_address": "0x00402110",
        "instructions": [
            "jmp qword [reloc.fscanf]"
        ]
    },
    "fcn.004074ce": {
        "function_address": "0x004074ce",
        "instructions": [
            "push r14",
            "mov r14d, edx",
            "push r13",
            "mov r13d, ecx",
            "push r12",
            "movzx r12d, si",
            "push rbp",
            "mov rbp, rdi",
            "mov rdi, r12",
            "push rbx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x4074bc",
            "mov edx, dword [rbp + 0x40]",
            "lea rsi, [rbp + 0x9c]",
            "or edi, 0xffffffff",
            "sub edx, 0x20",
            "call fcn.0041cbfb",
            "mov rsi, rbx",
            "mov edi, eax",
            "call fcn.004073b6",
            "xor edx, edx",
            "test r14d, r14d",
            "mov rcx, r12",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "je 0x4074aa",
            "call fcn.00412a3b",
            "test eax, eax",
            "je 0x4074af",
            "test r13d, r13d",
            "je 0x407435",
            "mov rax, qword [reloc.fix_crc]",
            "cmp dword [rax], 0",
            "je 0x40745d",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rbp + 0x30]",
            "lea rdx, str.checksum_verify_failed_on__llu_found__08X_wanted__08X_n",
            "mov r9d, dword [rbp + 0x7c]",
            "mov r8d, dword [rbx]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rax, qword [reloc.fix_crc]",
            "mov r13d, 1",
            "cmp dword [rax], 0",
            "je 0x4074a0",
            "mov rcx, r12",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "xor r13b, r13b",
            "call fcn.00412a59",
            "mov rdi, rbp",
            "call fcn.0041255f",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.___Fixed_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov rdi, rbx",
            "call sym.imp.free",
            "jmp 0x4074c2",
            "call fcn.00412a59",
            "mov rdi, rbx",
            "xor r13d, r13d",
            "call sym.imp.free",
            "jmp 0x4074c2",
            "mov r13d, 1",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "mov eax, r13d",
            "pop r13",
            "pop r14",
            "ret",
            "movzx esi, si",
            "xor ecx, ecx",
            "jmp 0x4073bb"
        ]
    },
    "fcn.004134af": {
        "function_address": "0x004134af",
        "instructions": [
            "push r15",
            "mov r15, rdi",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x48",
            "mov rax, qword [rsi + 0x1d8]",
            "mov r14, qword [rax + 0x38]",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x413695",
            "lea rdx, [rsp + 0x1e]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "xor edi, edi",
            "mov rcx, rax",
            "mov rsi, r14",
            "mov qword [rsp + 0x1e], 1",
            "mov byte [rsp + 0x26], 0xd8",
            "mov qword [rsp + 0x27], 0xffffffffffffffff",
            "call fcn.0040551b",
            "cmp eax, 0",
            "mov r12d, eax",
            "jl 0x413570",
            "jne 0x413537",
            "lea rcx, str.find_next_devid",
            "lea rsi, str.volumes.c",
            "lea rdi, str.__ret__0_",
            "mov edx, 0x1f0",
            "call sym.imp.__assert_fail",
            "mov ecx, 0xd8",
            "mov edx, 1",
            "mov rsi, rbx",
            "mov rdi, r14",
            "mov r13d, 1",
            "call fcn.00406fb4",
            "test eax, eax",
            "jne 0x413575",
            "mov edx, dword [rbx + 0x40]",
            "mov rdi, qword [rbx]",
            "lea rsi, [rsp + 0x2f]",
            "call fcn.00412abf",
            "mov r13, qword [rsp + 0x38]",
            "inc r13",
            "jmp 0x413575",
            "xor r13d, r13d",
            "jmp 0x413578",
            "xor r12d, r12d",
            "mov rdi, rbx",
            "call fcn.00402e1a",
            "test r12d, r12d",
            "jne 0x41368b",
            "lea r8, [rsp + 0x18]",
            "lea rcx, [rsp + 0x2f]",
            "mov r9d, 1",
            "mov rdx, rbx",
            "mov rsi, r14",
            "mov rdi, r15",
            "mov qword [rsp + 0x2f], 1",
            "mov byte [rsp + 0x37], 0xd8",
            "mov qword [rsp + 0x38], r13",
            "mov dword [rsp + 0x18], 0x62",
            "call fcn.004064c0",
            "test eax, eax",
            "mov r12d, eax",
            "jne 0x41368b",
            "movsxd rax, dword [rbx + 0x40]",
            "mov r15, qword [rbx]",
            "lea rsi, [rbp + 0x80]",
            "mov ecx, 0x10",
            "mov rdi, r15",
            "imul rax, rax, 0x19",
            "mov eax, dword [r15 + rax + 0xf2]",
            "mov qword [rbp + 0x50], r13",
            "lea rdx, [r15 + rax + 0xd5]",
            "mov qword [rdx + 0xc], r13",
            "mov qword [rdx + 0x38], 0",
            "lea r8, [rdx + 0xc]",
            "mov rdx, qword [rbp + 0x78]",
            "mov qword [r8 + 0x24], rdx",
            "mov edx, dword [rbp + 0x68]",
            "mov dword [r8 + 0x18], edx",
            "mov edx, dword [rbp + 0x6c]",
            "mov dword [r8 + 0x1c], edx",
            "mov edx, dword [rbp + 0x70]",
            "mov dword [r8 + 0x20], edx",
            "mov rdx, qword [rbp + 0x58]",
            "mov qword [r8 + 8], rdx",
            "mov rdx, qword [rbp + 0x60]",
            "mov dword [r8 + 0x3c], 0",
            "mov byte [r8 + 0x40], 0",
            "mov byte [r8 + 0x41], 0",
            "mov qword [r8 + 0x34], 0",
            "mov qword [r8 + 0x10], rdx",
            "lea rdx, [rax + 0xa7]",
            "mov qword [rsp + 8], rax",
            "call fcn.00412a59",
            "mov rax, qword [rsp + 8]",
            "mov rsi, qword [r14 + 0x1d8]",
            "mov rdi, r15",
            "mov ecx, 0x10",
            "lea rdx, [rax + 0xb7]",
            "call fcn.00412a59",
            "mov rdi, r15",
            "call fcn.00408149",
            "mov rdi, rbx",
            "call fcn.00402e4d",
            "jmp 0x41369b",
            "mov r12d, 0xfffffff4",
            "add rsp, 0x48",
            "mov eax, r12d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004115f1": {
        "function_address": "0x004115f1",
        "instructions": [
            "sub rsp, 0x28",
            "mov r8d, 0xa0",
            "mov qword [rsp + 0xf], rdx",
            "lea rdx, [rsp + 0xf]",
            "mov byte [rsp + 0x17], 1",
            "mov qword [rsp + 0x18], 0",
            "call fcn.004067e9",
            "add rsp, 0x28",
            "ret"
        ]
    },
    "fcn.00411398": {
        "function_address": "0x00411398",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rdx",
            "push r13",
            "lea r13d, [rcx + 0xa]",
            "push r12",
            "push rbp",
            "push rbx",
            "mov ebx, ecx",
            "sub rsp, 0x58",
            "mov qword [rsp + 8], rdi",
            "mov qword [rsp + 0x10], rsi",
            "mov qword [rsp + 0x3f], r8",
            "mov qword [rsp + 0x48], r9",
            "mov byte [rsp + 0x47], 0xc",
            "call fcn.00402e0b",
            "test rax, rax",
            "mov r12, rax",
            "je 0x41151c",
            "mov rsi, qword [rsp + 0x10]",
            "mov rdi, qword [rsp + 8]",
            "lea r8, [rsp + 0x38]",
            "lea rcx, [rsp + 0x3f]",
            "mov r9d, 1",
            "mov rdx, rax",
            "mov dword [rsp + 0x38], r13d",
            "call fcn.004064c0",
            "cmp eax, 0xffffffef",
            "mov ebp, eax",
            "jne 0x4114c2",
            "movsxd rax, dword [r12 + 0x40]",
            "mov r11, qword [r12]",
            "movsxd rsi, ebx",
            "xor r15d, r15d",
            "mov qword [rsp + 0x28], rsi",
            "imul rax, rax, 0x19",
            "lea rax, [r11 + rax + 0xe1]",
            "mov edx, dword [rax + 0x15]",
            "mov eax, dword [rax + 0x11]",
            "mov dword [rsp + 0x1c], edx",
            "add rax, 0x65",
            "mov qword [rsp + 0x20], rax",
            "jmp 0x41147e",
            "mov edx, r15d",
            "add rdx, qword [rsp + 0x20]",
            "movzx eax, word [r11 + rdx + 0x84]",
            "cmp eax, ebx",
            "lea r15d, [r15 + rax + 0xa]",
            "jne 0x41147e",
            "mov rcx, qword [rsp + 0x28]",
            "add rdx, 0xa",
            "mov rdi, r11",
            "mov rsi, r14",
            "mov qword [rsp], r11",
            "call fcn.00412a3b",
            "test eax, eax",
            "mov r11, qword [rsp]",
            "je 0x411512",
            "cmp r15d, dword [rsp + 0x1c]",
            "jb 0x411440",
            "jmp 0x411523",
            "lea rcx, str.btrfs_insert_inode_ref",
            "lea rsi, str.inode_item.c",
            "lea rdi, str.__ret_",
            "mov edx, 0x52",
            "call sym.imp.__assert_fail",
            "movsxd rax, dword [r12 + 0x40]",
            "mov rcx, qword [r12]",
            "imul rax, rax, 0x19",
            "mov edx, dword [rcx + rax + 0xf2]",
            "add rdx, r15",
            "jmp 0x4114da",
            "test eax, eax",
            "js 0x411512",
            "movsxd rax, dword [r12 + 0x40]",
            "mov rcx, qword [r12]",
            "imul rax, rax, 0x19",
            "mov edx, dword [rcx + rax + 0xf2]",
            "mov word [rcx + rdx + 0xe9], bx",
            "mov rcx, qword [r12]",
            "mov rsi, qword [rsp + 0x90]",
            "mov qword [rcx + rdx + 0xe1], rsi",
            "mov rdi, qword [r12]",
            "add rdx, 0x6f",
            "movsxd rcx, ebx",
            "mov rsi, r14",
            "call fcn.00412a59",
            "mov rdi, qword [r12]",
            "call fcn.00408149",
            "mov rdi, r12",
            "call fcn.00402e4d",
            "jmp 0x41155c",
            "mov ebp, 0xfffffff4",
            "jmp 0x41155c",
            "movsxd rax, dword [r12 + 0x40]",
            "mov rdx, qword [r12]",
            "mov ecx, r13d",
            "mov rsi, qword [rsp + 0x10]",
            "mov rdi, qword [rsp + 8]",
            "imul rax, rax, 0x19",
            "mov r15d, dword [rdx + rax + 0xf6]",
            "mov rdx, r12",
            "call fcn.0040520e",
            "test eax, eax",
            "mov ebp, eax",
            "je 0x4114a9",
            "jmp 0x41148a",
            "add rsp, 0x58",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x00402120",
        "instructions": [
            "jmp qword [reloc.ioctl]"
        ]
    },
    "fcn.0041692c": {
        "function_address": "0x0041692c",
        "instructions": [
            "push rbx",
            "sub rsp, 0x10",
            "mov edx, dword [rsi + 0x18]",
            "and edx, 0xf000",
            "cmp edx, 0x8000",
            "jne 0x416948",
            "mov rbx, qword [rsi + 0x30]",
            "jmp 0x41696c",
            "xor ebx, ebx",
            "cmp edx, 0x6000",
            "jne 0x41696c",
            "lea rdx, [rsp + 8]",
            "xor eax, eax",
            "mov esi, 0x80081272",
            "call sym.imp.ioctl",
            "test eax, eax",
            "js 0x41696c",
            "mov rbx, qword [rsp + 8]",
            "add rsp, 0x10",
            "mov rax, rbx",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.004159a1": {
        "function_address": "0x004159a1",
        "instructions": [
            "push r13",
            "mov r13, rsi",
            "push r12",
            "mov r12d, edi",
            "mov rdi, rdx",
            "push rbp",
            "push rbx",
            "mov rbx, rdx",
            "push rcx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4159f3",
            "xor eax, eax",
            "mov rdi, rbp",
            "mov rcx, rbx",
            "rep stosb byte [rdi], al",
            "mov rdx, rbx",
            "mov edi, r12d",
            "mov rcx, r13",
            "mov rsi, rbp",
            "call sym.imp.pwrite64",
            "cmp rax, rbx",
            "mov rdi, rbp",
            "sete bl",
            "movzx ebx, bl",
            "lea ebx, [rbx + rbx*4 - 5]",
            "call sym.imp.free",
            "jmp 0x4159f8",
            "mov ebx, 0xfffffff4",
            "pop rdx",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00415bb7": {
        "function_address": "0x00415bb7",
        "instructions": [
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "sub rsp, 0x4130",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x4128], rax",
            "xor eax, eax",
            "call fcn.00415a68",
            "cmp eax, 0",
            "mov ebx, eax",
            "jge 0x415bf7",
            "cmp ebx, 0xfffffffe",
            "jne 0x415d7a",
            "xor ebx, ebx",
            "jmp 0x415d7a",
            "je 0x415c28",
            "lea rsi, [rsp + 0x128]",
            "mov rdi, r12",
            "lea r12, [rsp + 0x128]",
            "call fcn.00415ab5",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x415c28",
            "call sym.imp.__errno_location",
            "cmp dword [rax], 1",
            "jne 0x415d7a",
            "xor r12d, r12d",
            "mov rdi, rbp",
            "call fcn.00415a68",
            "cmp eax, 0",
            "mov ebx, eax",
            "jge 0x415c39",
            "jmp 0x415be7",
            "je 0x415c69",
            "lea rsi, [rsp + 0x1128]",
            "mov rdi, rbp",
            "lea rbp, [rsp + 0x1128]",
            "call fcn.00415ab5",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x415c69",
            "call sym.imp.__errno_location",
            "cmp dword [rax], 1",
            "jne 0x415d7a",
            "xor ebp, ebp",
            "lea rsi, [rsp + 0x2128]",
            "mov edx, 0x1000",
            "mov rdi, r12",
            "call sym.imp.__realpath_chk",
            "test rax, rax",
            "jne 0x415c98",
            "lea rdi, [rsp + 0x2128]",
            "mov edx, 0x1000",
            "mov rsi, r12",
            "call sym.imp.__strcpy_chk",
            "lea rsi, [rsp + 0x3128]",
            "mov edx, 0x1000",
            "mov rdi, rbp",
            "call sym.imp.__realpath_chk",
            "test rax, rax",
            "jne 0x415cc7",
            "lea rdi, [rsp + 0x3128]",
            "mov edx, 0x1000",
            "mov rsi, rbp",
            "call sym.imp.__strcpy_chk",
            "lea rsi, [rsp + 0x3128]",
            "lea rdi, [rsp + 0x2128]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x415cea",
            "mov ebx, 1",
            "jmp 0x415d7a",
            "lea rsi, [rsp + 8]",
            "mov rdi, r12",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x415d10",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "xor ebx, ebx",
            "mov edx, eax",
            "neg edx",
            "cmp eax, 2",
            "cmovne ebx, edx",
            "jmp 0x415d7a",
            "lea rsi, [rsp + 0x98]",
            "mov rdi, rbp",
            "call fcn.0041ccb0",
            "test eax, eax",
            "js 0x415cfb",
            "mov eax, dword [rsp + 0x20]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x415d56",
            "mov eax, dword [rsp + 0xb0]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x415d56",
            "mov rdx, qword [rsp + 0xc0]",
            "cmp qword [rsp + 0x30], rdx",
            "je 0x415ce0",
            "xor ebx, ebx",
            "mov rax, qword [rsp + 0x98]",
            "cmp qword [rsp + 8], rax",
            "jne 0x415d7a",
            "mov rdx, qword [rsp + 0xa0]",
            "cmp qword [rsp + 0x10], rdx",
            "je 0x415ce0",
            "mov rdx, qword [rsp + 0x4128]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebx",
            "je 0x415d94",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x4130",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00415a17": {
        "function_address": "0x00415a17",
        "instructions": [
            "sub rsp, 0x98",
            "mov rsi, rsp",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x415a3f",
            "call sym.imp.__errno_location",
            "mov edx, dword [rax]",
            "xor eax, eax",
            "mov ecx, edx",
            "neg ecx",
            "cmp edx, 2",
            "cmovne eax, ecx",
            "jmp 0x415a60",
            "mov edx, dword [rsp + 0x18]",
            "and edx, 0xf000",
            "cmp edx, 0x8000",
            "sete al",
            "cmp edx, 0x6000",
            "sete dl",
            "or eax, edx",
            "movzx eax, al",
            "add rsp, 0x98",
            "ret"
        ]
    },
    "fcn.00416d3c": {
        "function_address": "0x00416d3c",
        "instructions": [
            "sub rsp, 0x98",
            "mov rsi, rsp",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x416d5a",
            "call sym.imp.__errno_location",
            "mov eax, dword [rax]",
            "neg eax",
            "jmp 0x416d6e",
            "mov eax, dword [rsp + 0x18]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "sete al",
            "movzx eax, al",
            "add rsp, 0x98",
            "ret"
        ]
    },
    "fcn.00417dce": {
        "function_address": "0x00417dce",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rsi",
            "push r13",
            "movsxd r13, ecx",
            "push r12",
            "mov r12, r8",
            "mov r8d, 0x10000",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "sub rsp, 0x48",
            "lea rcx, [rsp + 0x30]",
            "lea rdx, [rsp + 0x38]",
            "mov qword [rsp + 0x30], 1",
            "mov qword [rsp + 0x38], 0",
            "call fcn.00413222",
            "not eax",
            "shr eax, 0x1f",
            "mov dword [rsp + 0x2c], eax",
            "jne 0x417e3d",
            "lea rsi, [0x0042045e]",
            "lea rdi, str._proc_self_mounts",
            "call sym.imp.setmntent",
            "test rax, rax",
            "mov qword [rsp + 0x10], rax",
            "jne 0x417ef2",
            "jmp 0x417e58",
            "cmp qword [rsp + 0x30], 1",
            "jbe 0x417e1a",
            "xor edi, edi",
            "call fcn.00417daa",
            "test eax, eax",
            "mov r15d, eax",
            "je 0x417e1a",
            "jmp 0x417f4c",
            "call sym.imp.__errno_location",
            "mov r15d, dword [rax]",
            "neg r15d",
            "jmp 0x417f4c",
            "cmp dword [rsp + 0x2c], 0",
            "je 0x417eca",
            "mov rdi, qword [rbx + 0x10]",
            "lea rsi, str.btrfs",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x417ef2",
            "mov rdx, qword [rbx]",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [rsp + 0x18], rdx",
            "lea rdx, [rax + 0x30]",
            "mov r8, qword [rax + 0x30]",
            "mov qword [rsp + 0x20], rdx",
            "jmp 0x417ec1",
            "mov rdi, qword [r8 + 0x30]",
            "mov rsi, qword [rsp + 0x18]",
            "mov qword [rsp + 8], r8",
            "call fcn.00415bb7",
            "test eax, eax",
            "mov r15d, eax",
            "mov r8, qword [rsp + 8]",
            "jne 0x417eea",
            "mov r8, qword [r8]",
            "cmp r8, qword [rsp + 0x20]",
            "jne 0x417e9f",
            "jmp 0x417ef2",
            "mov rdi, qword [rbx]",
            "call fcn.00415a17",
            "cmp eax, 0",
            "mov r15d, eax",
            "jl 0x417f42",
            "je 0x417ef2",
            "mov rsi, qword [rbx]",
            "mov rdi, r14",
            "call fcn.00415bb7",
            "mov r15d, eax",
            "cmp r15d, 0",
            "jl 0x417f42",
            "jne 0x417f08",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.getmntent",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x417e68",
            "test rbx, rbx",
            "setne r14b",
            "je 0x417f30",
            "test r13d, r13d",
            "je 0x417f30",
            "test rbp, rbp",
            "je 0x417f30",
            "mov rsi, qword [rbx + 8]",
            "mov rdx, r13",
            "mov rdi, rbp",
            "call sym.imp.strncpy",
            "mov byte [rbp + r13 - 1], 0",
            "test r12, r12",
            "je 0x417f3e",
            "mov rax, qword [rsp + 0x38]",
            "mov qword [r12], rax",
            "movzx r15d, r14b",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.endmntent",
            "add rsp, 0x48",
            "mov eax, r15d",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "sym.imp.setmntent": {
        "function_address": "0x004022b0",
        "instructions": [
            "jmp qword [reloc.setmntent]"
        ]
    },
    "sym.imp.getmntent": {
        "function_address": "0x004022a0",
        "instructions": [
            "jmp qword [reloc.getmntent]"
        ]
    },
    "sym.imp.endmntent": {
        "function_address": "0x00401f90",
        "instructions": [
            "jmp qword [reloc.endmntent]"
        ]
    },
    "fcn.00417b1d": {
        "function_address": "0x00417b1d",
        "instructions": [
            "push r10",
            "mov qword [rdx], rsi",
            "lea rsi, [rdx + 8]",
            "mov r8d, edi",
            "xor eax, eax",
            "mov ecx, 4",
            "mov rdi, rsi",
            "mov esi, 0xd000941e",
            "rep stosd dword [rdi], eax",
            "mov edi, r8d",
            "call sym.imp.ioctl",
            "xor edx, edx",
            "test eax, eax",
            "je 0x417b51",
            "call sym.imp.__errno_location",
            "mov edx, dword [rax]",
            "neg edx",
            "mov eax, edx",
            "pop r9",
            "ret"
        ]
    },
    "fcn.00415798": {
        "function_address": "0x00415798",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x20a8",
            "lea rsi, [rsp + 8]",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x2098], rax",
            "xor eax, eax",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x4157d4",
            "call sym.imp.__errno_location",
            "mov ebx, dword [rax]",
            "neg ebx",
            "jmp 0x415948",
            "mov eax, dword [rsp + 0x20]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x4157ee",
            "mov r12, qword [rsp + 0x30]",
            "xor r13d, r13d",
            "jmp 0x415806",
            "cmp eax, 0x8000",
            "je 0x4157fc",
            "xor ebx, ebx",
            "jmp 0x415948",
            "mov r12, qword [rsp + 8]",
            "mov r13, qword [rsp + 0x10]",
            "lea rsi, [0x0042045e]",
            "lea rdi, str._proc_swaps",
            "call sym.imp.fopen64",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x4157f5",
            "lea rbx, [rsp + 0x98]",
            "mov rdx, rax",
            "mov esi, 0x1000",
            "mov rdi, rbx",
            "call sym.imp.fgets",
            "test rax, rax",
            "jne 0x41591d",
            "xor ebx, ebx",
            "jmp 0x415940",
            "mov esi, 0x20",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x41585e",
            "mov byte [rax], 0",
            "mov esi, 9",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x415873",
            "mov byte [rax], 0",
            "lea rsi, [rsp + 0x1098]",
            "mov rcx, rbx",
            "jmp 0x4158d2",
            "cmp al, 0x5c",
            "jne 0x4158ca",
            "mov dil, byte [rcx + 1]",
            "mov dl, dil",
            "and edx, 0xfffffff8",
            "cmp dl, 0x30",
            "jne 0x4158ca",
            "mov r8b, byte [rcx + 2]",
            "mov dl, r8b",
            "and edx, 0xfffffff8",
            "cmp dl, 0x30",
            "jne 0x4158ca",
            "mov dl, byte [rcx + 3]",
            "mov r9b, 0xf8",
            "and r9d, edx",
            "cmp r9b, 0x30",
            "jne 0x4158ca",
            "and r8d, 7",
            "and edx, 7",
            "add rcx, 4",
            "lea edi, [r8 + rdi*8]",
            "lea edx, [rdx + rdi*8]",
            "mov byte [rsi], dl",
            "inc rsi",
            "jmp 0x4158d2",
            "mov byte [rsi], al",
            "inc rcx",
            "inc rsi",
            "mov al, byte [rcx]",
            "test al, al",
            "jne 0x415880",
            "mov byte [rsi], 0",
            "lea rdi, [rsp + 0x1098]",
            "lea rsi, [rsp + 8]",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jne 0x41591d",
            "mov eax, dword [rsp + 0x20]",
            "and eax, 0xf000",
            "cmp eax, 0x6000",
            "jne 0x415908",
            "cmp r12, qword [rsp + 0x30]",
            "jmp 0x41591b",
            "cmp eax, 0x8000",
            "jne 0x41591d",
            "cmp r12, qword [rsp + 8]",
            "jne 0x41591d",
            "cmp r13, qword [rsp + 0x10]",
            "je 0x41593b",
            "mov rdx, rbp",
            "mov esi, 0x1000",
            "mov rdi, rbx",
            "call sym.imp.fgets",
            "test rax, rax",
            "jne 0x415849",
            "jmp 0x415842",
            "mov ebx, 1",
            "mov rdi, rbp",
            "call sym.imp.fclose",
            "mov rdx, qword [rsp + 0x2098]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebx",
            "je 0x415962",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x20a8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x004020b0",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "fcn.004181c3": {
        "function_address": "0x004181c3",
        "instructions": [
            "push rbp",
            "xor esi, esi",
            "xor eax, eax",
            "push rbx",
            "push rbx",
            "mov rbx, rdi",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebp, eax",
            "jns 0x418203",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.check_mounted__:_Could_not_open__s_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "call sym.imp.__errno_location",
            "mov ebx, dword [rax]",
            "neg ebx",
            "jmp 0x41821d",
            "mov rsi, rbx",
            "mov edi, eax",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "call fcn.00417dce",
            "mov edi, ebp",
            "mov ebx, eax",
            "call sym.imp.close",
            "pop r11",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00409282": {
        "function_address": "0x00409282",
        "instructions": [
            "push r10",
            "mov ecx, edx",
            "xor edx, edx",
            "call fcn.004091fe",
            "test rax, rax",
            "je 0x409298",
            "mov rax, qword [rax + 0x20]",
            "jmp 0x40929a",
            "xor eax, eax",
            "pop r9",
            "ret"
        ]
    },
    "fcn.0040841c": {
        "function_address": "0x0040841c",
        "instructions": [
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "push rbp",
            "mov rbx, qword [rdi + 0x1d8]",
            "mov rax, qword [rbx + 0x158]",
            "cmp qword [rbx + 0x160], rax",
            "je 0x4084c8",
            "call fcn.004070eb",
            "mov rsi, r12",
            "mov rdi, rax",
            "call fcn.004082dd",
            "mov rdi, r12",
            "call fcn.004070eb",
            "mov rsi, rbx",
            "mov rdi, rax",
            "mov rbp, rax",
            "call fcn.004071c7",
            "test eax, eax",
            "lea rcx, str.close_ctree",
            "mov edx, 0x56b",
            "jne 0x408495",
            "mov rsi, r12",
            "mov rdi, rbp",
            "call fcn.00408181",
            "test eax, eax",
            "mov r13d, eax",
            "je 0x4084a8",
            "lea rcx, str.close_ctree",
            "mov edx, 0x56d",
            "lea rsi, str.disk_io.c",
            "lea rdi, str.__ret_",
            "call sym.imp.__assert_fail",
            "mov rdi, rbp",
            "mov rsi, r12",
            "call fcn.0040803d",
            "mov ecx, 0xc",
            "mov rdi, rbp",
            "mov eax, r13d",
            "rep stosd dword [rdi], eax",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov rdi, rbx",
            "call fcn.0040cce8",
            "lea rsi, [0x004078b8]",
            "lea rdi, [rbx + 0x50]",
            "call fcn.0041cafc",
            "mov rdi, rbx",
            "call fcn.00407b8c",
            "mov rdi, qword [rbx + 0x1f0]",
            "call fcn.0041306f",
            "mov rdi, rbx",
            "call fcn.00407bf9",
            "mov rdi, rbx",
            "call fcn.004078c4",
            "pop rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "xor eax, eax",
            "pop r13",
            "ret"
        ]
    },
    "fcn.00418801": {
        "function_address": "0x00418801",
        "instructions": [
            "push r14",
            "mov r14, rdx",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "call fcn.00416d3c",
            "cmp eax, 0",
            "mov ebx, eax",
            "jg 0x418873",
            "mov r12, qword [reloc.stderr]",
            "jne 0x41884b",
            "mov rdi, qword [r12]",
            "lea rdx, str._s_is_not_a_block_device_n",
            "mov rcx, rbp",
            "mov esi, 1",
            "xor eax, eax",
            "mov ebx, 0xffffffea",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4188e4",
            "mov edi, eax",
            "neg edi",
            "call sym.imp.strerror",
            "mov rdi, qword [r12]",
            "lea rdx, str.Could_not_check__s:__s_n",
            "mov r8, rax",
            "mov rcx, rbp",
            "mov esi, 1",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4188e4",
            "xor esi, esi",
            "xor eax, eax",
            "mov rdi, rbp",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r12d, eax",
            "jns 0x4188c1",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "mov ebx, edi",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Could_not_open__s:__s_n",
            "mov rcx, rbp",
            "mov esi, 1",
            "neg ebx",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "cmp r12d, 0xffffffff",
            "jne 0x4188dc",
            "jmp 0x4188e4",
            "xor r8d, r8d",
            "mov ecx, r14d",
            "mov rdx, r13",
            "mov rsi, rbp",
            "mov edi, eax",
            "call fcn.00417dce",
            "cmp eax, 1",
            "sbb ebx, ebx",
            "and ebx, 0xffffffea",
            "mov edi, r12d",
            "call sym.imp.close",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "fcn.0041c4f4": {
        "function_address": "0x0041c4f4",
        "instructions": [
            "mov rax, qword [rdi + 8]",
            "mov rdx, qword [rdi]",
            "mov rcx, qword [rax + 0x10]",
            "and rdx, 0xfffffffffffffffc",
            "test rcx, rcx",
            "mov qword [rdi + 8], rcx",
            "je 0x41c51c",
            "mov r8, qword [rax + 0x10]",
            "mov rcx, qword [r8]",
            "and ecx, 3",
            "or rcx, rdi",
            "mov qword [r8], rcx",
            "mov rcx, qword [rax]",
            "mov qword [rax + 0x10], rdi",
            "and ecx, 3",
            "or rcx, rdx",
            "test rdx, rdx",
            "mov qword [rax], rcx",
            "je 0x41c543",
            "cmp rdi, qword [rdx + 0x10]",
            "jne 0x41c53d",
            "mov qword [rdx + 0x10], rax",
            "jmp 0x41c546",
            "mov qword [rdx + 8], rax",
            "jmp 0x41c546",
            "mov qword [rsi], rax",
            "mov rdx, qword [rdi]",
            "and edx, 3",
            "or rdx, rax",
            "mov qword [rdi], rdx",
            "ret"
        ]
    },
    "fcn.0041c553": {
        "function_address": "0x0041c553",
        "instructions": [
            "mov rax, qword [rdi + 0x10]",
            "mov rdx, qword [rdi]",
            "mov rcx, qword [rax + 8]",
            "and rdx, 0xfffffffffffffffc",
            "test rcx, rcx",
            "mov qword [rdi + 0x10], rcx",
            "je 0x41c57b",
            "mov r8, qword [rax + 8]",
            "mov rcx, qword [r8]",
            "and ecx, 3",
            "or rcx, rdi",
            "mov qword [r8], rcx",
            "mov rcx, qword [rax]",
            "mov qword [rax + 8], rdi",
            "and ecx, 3",
            "or rcx, rdx",
            "test rdx, rdx",
            "mov qword [rax], rcx",
            "je 0x41c5a2",
            "cmp rdi, qword [rdx + 8]",
            "jne 0x41c59c",
            "mov qword [rdx + 8], rax",
            "jmp 0x41c5a5",
            "mov qword [rdx + 0x10], rax",
            "jmp 0x41c5a5",
            "mov qword [rsi], rax",
            "mov rdx, qword [rdi]",
            "and edx, 3",
            "or rdx, rax",
            "mov qword [rdi], rdx",
            "ret"
        ]
    },
    "fcn.00418efc": {
        "function_address": "0x00418efc",
        "instructions": [
            "mov rdx, rsi",
            "mov r8, rdi",
            "mov rcx, rdi",
            "xor esi, esi",
            "jmp 0x418f1e",
            "mov rcx, qword [rax + 0x18]",
            "cmp qword [rdx + 0x48], rcx",
            "ja 0x418f54",
            "jb 0x418f4e",
            "mov eax, 0xffffffef",
            "ret",
            "mov rsi, rax",
            "mov rax, qword [rcx]",
            "test rax, rax",
            "jne 0x418f09",
            "push rdi",
            "lea rdi, [rdx + 0x30]",
            "mov qword [rdx + 0x30], rsi",
            "mov qword [rdx + 0x38], 0",
            "mov qword [rdx + 0x40], 0",
            "mov rsi, r8",
            "mov qword [rcx], rdi",
            "call fcn.0041c5b2",
            "xor eax, eax",
            "jmp 0x418f5a",
            "lea rcx, [rax + 0x10]",
            "jmp 0x418f1b",
            "lea rcx, [rax + 8]",
            "jmp 0x418f1b",
            "pop rsi",
            "ret"
        ]
    },
    "fcn.00419028": {
        "function_address": "0x00419028",
        "instructions": [
            "push r15",
            "push r14",
            "mov r14, rcx",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x28",
            "mov qword [rsp + 0x10], rdx",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp], r9",
            "mov qword [rsp + 0x18], rdi",
            "call fcn.00419008",
            "test rax, rax",
            "mov r15, qword [rsp + 0x80]",
            "mov rbp, qword [rsp + 0x88]",
            "mov r12, qword [rsp + 0x90]",
            "mov rdx, qword [rsp + 0x10]",
            "mov r8, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "je 0x419316",
            "cmp qword [rax + 0x48], r13",
            "jne 0x419316",
            "test rdx, rdx",
            "je 0x419096",
            "mov qword [rax + 0x50], rdx",
            "test r14, r14",
            "je 0x41909f",
            "mov qword [rax + 0x58], r14",
            "test r8, r8",
            "je 0x4190a8",
            "mov qword [rax + 0x60], r8",
            "test r9, r9",
            "je 0x4190b1",
            "mov qword [rax + 0x68], r9",
            "cmp qword [rsp + 0x60], 0",
            "je 0x4190c2",
            "mov rdx, qword [rsp + 0x60]",
            "mov qword [rax + 0x70], rdx",
            "cmp qword [rsp + 0x68], 0",
            "je 0x4190d3",
            "mov rdx, qword [rsp + 0x68]",
            "mov qword [rax + 0x78], rdx",
            "cmp qword [rsp + 0x70], 0",
            "je 0x4190e7",
            "mov rdx, qword [rsp + 0x70]",
            "mov qword [rax + 0x80], rdx",
            "cmp qword [rsp + 0x78], 0",
            "je 0x4190fb",
            "mov rdx, qword [rsp + 0x78]",
            "mov qword [rax + 0x88], rdx",
            "test r15, r15",
            "je 0x419107",
            "mov qword [rax + 0x90], r15",
            "test r12, r12",
            "je 0x419371",
            "test rbp, rbp",
            "je 0x419371",
            "mov edi, 0x30",
            "call sym.imp.malloc",
            "test rax, rax",
            "jne 0x41912d",
            "jmp 0x419267",
            "mov qword [rax + 0x20], rbp",
            "mov qword [rax + 0x28], r12",
            "lea rcx, [rax + 0x10]",
            "mov rdx, qword [r12 + 0xa8]",
            "mov qword [r12 + 0xa8], rax",
            "add r12, 0xa0",
            "mov qword [rax], r12",
            "mov qword [rax + 8], rdx",
            "mov qword [rdx], rax",
            "mov rdx, qword [rbp + 0xb8]",
            "mov qword [rbp + 0xb8], rcx",
            "add rbp, 0xb0",
            "mov qword [rax + 0x10], rbp",
            "mov qword [rax + 0x18], rdx",
            "mov qword [rdx], rcx",
            "jmp 0x419371",
            "lea rdi, str.memory_allocation_failed",
            "call sym.imp.puts",
            "mov edi, 1",
            "call sym.imp.exit",
            "xor eax, eax",
            "mov ecx, 0x30",
            "mov rdi, rbx",
            "test r13, r13",
            "rep stosd dword [rdi], eax",
            "je 0x4191d4",
            "lea rax, [rbx + 0xa0]",
            "mov qword [rbx + 0x48], r13",
            "mov qword [rbx + 0xa0], rax",
            "mov qword [rbx + 0xa8], rax",
            "lea rax, [rbx + 0xb0]",
            "mov qword [rbx + 0xb0], rax",
            "mov qword [rbx + 0xb8], rax",
            "test rdx, rdx",
            "je 0x4191dd",
            "mov qword [rbx + 0x50], rdx",
            "test r14, r14",
            "je 0x4191e6",
            "mov qword [rbx + 0x58], r14",
            "test r8, r8",
            "je 0x4191ef",
            "mov qword [rbx + 0x60], r8",
            "test r9, r9",
            "je 0x4191f8",
            "mov qword [rbx + 0x68], r9",
            "cmp qword [rsp + 0x60], 0",
            "je 0x419209",
            "mov rdx, qword [rsp + 0x60]",
            "mov qword [rbx + 0x70], rdx",
            "cmp qword [rsp + 0x68], 0",
            "je 0x41921a",
            "mov rdx, qword [rsp + 0x68]",
            "mov qword [rbx + 0x78], rdx",
            "cmp qword [rsp + 0x70], 0",
            "je 0x41922e",
            "mov rdx, qword [rsp + 0x70]",
            "mov qword [rbx + 0x80], rdx",
            "cmp qword [rsp + 0x78], 0",
            "je 0x419242",
            "mov rdx, qword [rsp + 0x78]",
            "mov qword [rbx + 0x88], rdx",
            "test r15, r15",
            "je 0x41924e",
            "mov qword [rbx + 0x90], r15",
            "test r12, r12",
            "je 0x4192cf",
            "test rbp, rbp",
            "je 0x4192cf",
            "mov edi, 0x30",
            "call sym.imp.malloc",
            "test rax, rax",
            "jne 0x419282",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.memory_allocation_failed_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "jmp 0x41918b",
            "mov qword [rax + 0x20], rbp",
            "mov qword [rax + 0x28], r12",
            "lea rcx, [rax + 0x10]",
            "mov rdx, qword [r12 + 0xa8]",
            "mov qword [r12 + 0xa8], rax",
            "add r12, 0xa0",
            "mov qword [rax], r12",
            "mov qword [rax + 8], rdx",
            "mov qword [rdx], rax",
            "mov rdx, qword [rbp + 0xb8]",
            "mov qword [rbp + 0xb8], rcx",
            "add rbp, 0xb0",
            "mov qword [rax + 0x10], rbp",
            "mov qword [rax + 0x18], rdx",
            "mov qword [rdx], rcx",
            "mov rdx, qword [rsp + 0x18]",
            "xor ecx, ecx",
            "jmp 0x4192e9",
            "mov rdx, qword [rbx + 0x48]",
            "cmp rdx, qword [rax + 0x48]",
            "ja 0x419353",
            "jb 0x41934d",
            "jmp 0x419359",
            "mov rcx, rax",
            "mov rax, qword [rdx]",
            "test rax, rax",
            "jne 0x4192d8",
            "mov rsi, qword [rsp + 0x18]",
            "mov qword [rbx], rcx",
            "mov rdi, rbx",
            "mov qword [rbx + 8], 0",
            "mov qword [rbx + 0x10], 0",
            "mov qword [rdx], rbx",
            "call fcn.0041c5b2",
            "jmp 0x419371",
            "mov edi, 0xc0",
            "mov qword [rsp + 0x10], rdx",
            "mov qword [rsp + 8], r8",
            "mov qword [rsp], r9",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbx, rax",
            "mov rdx, qword [rsp + 0x10]",
            "mov r8, qword [rsp + 8]",
            "mov r9, qword [rsp]",
            "jne 0x419195",
            "jmp 0x41917f",
            "lea rdx, [rax + 0x10]",
            "jmp 0x4192e6",
            "lea rdx, [rax + 8]",
            "jmp 0x4192e6",
            "lea rsi, str.failed_to_insert_tree__llu_n",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x41918b",
            "add rsp, 0x28",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00419008": {
        "function_address": "0x00419008",
        "instructions": [
            "mov rax, qword [rdi]",
            "jmp 0x419016",
            "cmp rsi, qword [rax + 0x48]",
            "ja 0x419022",
            "jb 0x41901c",
            "ret",
            "test rax, rax",
            "jne 0x41900d",
            "ret",
            "mov rax, qword [rax + 0x10]",
            "jmp 0x419016",
            "mov rax, qword [rax + 8]",
            "jmp 0x419016"
        ]
    },
    "fcn.00419382": {
        "function_address": "0x00419382",
        "instructions": [
            "push r15",
            "mov ecx, 0x400",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x1078",
            "mov qword [rsi], 0",
            "lea rbp, [rsp + 0x68]",
            "mov dword [rsp + 0x5c], edi",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x1068], rax",
            "xor eax, eax",
            "mov rdi, rbp",
            "rep stosd dword [rdi], eax",
            "mov qword [rsp + 0x68], 8",
            "mov dword [rsp + 0xa4], 0xf6",
            "mov dword [rsp + 0xa0], 0xf2",
            "mov qword [rsp + 0x78], 0xffffffffffffffff",
            "mov qword [rsp + 0x88], 0xffffffffffffffff",
            "mov qword [rsp + 0x98], 0xffffffffffffffff",
            "mov dword [rsp + 0xa8], 0x1000",
            "mov edi, dword [rsp + 0x5c]",
            "mov rdx, rbp",
            "mov esi, 0xd0009411",
            "xor eax, eax",
            "call sym.imp.ioctl",
            "mov r14d, eax",
            "call sym.imp.__errno_location",
            "test r14d, r14d",
            "mov edi, dword [rax]",
            "jns 0x41945a",
            "call sym.imp.strerror",
            "mov rcx, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_cant_perform_the_search____s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x419655",
            "cmp dword [rsp + 0xa8], 0",
            "je 0x419655",
            "xor r12d, r12d",
            "xor eax, eax",
            "jmp 0x41961e",
            "lea rdx, [rax + 0x20]",
            "lea r15, [rbp + rax + 0x68]",
            "mov qword [rsp + 0x50], rdx",
            "mov edx, dword [r15 + 0x18]",
            "cmp edx, 0xf2",
            "jne 0x4194f0",
            "lea rax, [rbp + rax + 0x80]",
            "mov rsi, qword [r15 + 0x10]",
            "mov rdx, qword [rax + 8]",
            "mov rcx, qword [rax + 0x10]",
            "mov r8, qword [rax + 0x18]",
            "mov r9, qword [rax + 0x20]",
            "mov rax, qword [rax + 0x28]",
            "mov qword [rsp + 0x30], 0",
            "mov qword [rsp + 0x28], 0",
            "mov qword [rsp + 0x20], 0",
            "mov qword [rsp + 0x18], 0",
            "mov qword [rsp + 0x10], 0",
            "mov qword [rsp + 0x60], rax",
            "mov qword [rsp + 8], 0",
            "mov qword [rsp], rax",
            "jmp 0x4195ea",
            "cmp edx, 0xf4",
            "jne 0x41955a",
            "lea rax, [rbp + rax + 0x80]",
            "mov rsi, qword [r15 + 0x10]",
            "xor r9d, r9d",
            "mov rdx, qword [rax + 8]",
            "mov rcx, qword [rax + 0x10]",
            "mov r8, qword [rax + 0x20]",
            "mov rdi, qword [rax + 0x18]",
            "mov rax, qword [rax + 0x28]",
            "mov qword [rsp + 0x30], 0",
            "mov qword [rsp + 0x10], rcx",
            "mov qword [rsp + 8], rdx",
            "xor ecx, ecx",
            "mov qword [rsp + 0x20], r8",
            "mov qword [rsp + 0x28], 0",
            "xor r8d, r8d",
            "mov qword [rsp + 0x60], rax",
            "mov qword [rsp + 0x18], rdi",
            "xor edx, edx",
            "mov qword [rsp], 0",
            "jmp 0x4195ea",
            "cmp edx, 0xf6",
            "jne 0x419655",
            "mov r13, qword [r15 + 0x10]",
            "mov rcx, qword [r15 + 8]",
            "cmp r13, rcx",
            "jb 0x4195f2",
            "mov rsi, r13",
            "mov rdi, rbx",
            "mov qword [rsp + 0x48], rcx",
            "call fcn.00419008",
            "test rax, rax",
            "mov rcx, qword [rsp + 0x48]",
            "je 0x4195f2",
            "mov rsi, rcx",
            "mov rdi, rbx",
            "mov qword [rsp + 0x48], rax",
            "call fcn.00419008",
            "test rax, rax",
            "mov rdx, qword [rsp + 0x48]",
            "je 0x4195f2",
            "mov qword [rsp + 0x28], rdx",
            "mov qword [rsp + 0x30], rax",
            "xor r9d, r9d",
            "mov qword [rsp + 0x20], 0",
            "mov qword [rsp + 0x18], 0",
            "xor r8d, r8d",
            "mov qword [rsp + 0x10], 0",
            "mov qword [rsp + 8], 0",
            "xor ecx, ecx",
            "mov qword [rsp], 0",
            "xor edx, edx",
            "mov rsi, r13",
            "mov rdi, rbx",
            "call fcn.00419028",
            "mov edx, dword [r15 + 0x18]",
            "mov eax, dword [r15 + 0x1c]",
            "inc r12d",
            "add rax, qword [rsp + 0x50]",
            "mov dword [rsp + 0xa0], edx",
            "mov rdx, qword [r15 + 0x10]",
            "mov qword [rsp + 0x80], rdx",
            "mov rdx, qword [r15 + 8]",
            "mov qword [rsp + 0x70], rdx",
            "cmp r12d, dword [rsp + 0xa8]",
            "jb 0x419472",
            "mov rax, qword [rsp + 0x80]",
            "mov dword [rsp + 0xa8], 0x1000",
            "cmp rax, 0xffffffffffffffff",
            "je 0x419655",
            "inc rax",
            "mov qword [rsp + 0x80], rax",
            "jmp 0x41940e",
            "mov rdx, qword [rsp + 0x1068]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, r14d",
            "je 0x419670",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x1078",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.00418ed4": {
        "function_address": "0x00418ed4",
        "instructions": [
            "mov edi, edi",
            "lea rax, [0x006272d0]",
            "push rbx",
            "imul rdi, rdi, 0x18",
            "mov ebx, dword [rax + rdi + 4]",
            "sub ebx, esi",
            "jmp 0x418ef6",
            "mov edi, 0x20",
            "dec ebx",
            "call sym.imp.putchar",
            "test ebx, ebx",
            "jne 0x418eea",
            "pop rbx",
            "ret"
        ]
    },
    "fcn.00419755": {
        "function_address": "0x00419755",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov r8, qword [rdi]",
            "mov ebx, esi",
            "test r8, r8",
            "jne 0x419782",
            "lea rcx, str.btrfs_qgroup_setup_comparer",
            "mov edx, 0x1aa",
            "lea rsi, str.qgroup.c",
            "lea rdi, str.___set_",
            "jmp 0x4197a1",
            "cmp ebx, 4",
            "jbe 0x4197a6",
            "lea rcx, str.btrfs_qgroup_setup_comparer",
            "lea rsi, str.qgroup.c",
            "lea rdi, str.__comparer___BTRFS_QGROUP_COMP_MAX_",
            "mov edx, 0x1ab",
            "call sym.imp.__assert_fail",
            "mov eax, dword [r8 + 4]",
            "cmp eax, dword [r8]",
            "jle 0x4197cb",
            "lea rcx, str.btrfs_qgroup_setup_comparer",
            "mov edx, 0x1ac",
            "lea rsi, str.qgroup.c",
            "lea rdi, str.__set__ncomps___set__total_",
            "jmp 0x4197a1",
            "mov r12d, edx",
            "jne 0x41982c",
            "shl eax, 4",
            "mov rdi, r8",
            "lea esi, [rax + 0xa8]",
            "movsxd rsi, esi",
            "call sym.imp.realloc",
            "test rax, rax",
            "mov r8, rax",
            "jne 0x41980c",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.memory_allocation_failed_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov edi, 1",
            "call sym.imp.exit",
            "movsxd rax, dword [rax]",
            "mov ecx, 0x28",
            "shl rax, 4",
            "lea rsi, [r8 + rax + 8]",
            "xor eax, eax",
            "mov rdi, rsi",
            "rep stosd dword [rdi], eax",
            "add dword [r8], 0xa",
            "mov qword [rbp], r8",
            "mov ecx, dword [r8 + 4]",
            "movsxd rax, ecx",
            "shl rax, 4",
            "add rax, r8",
            "cmp qword [rax + 8], 0",
            "je 0x419860",
            "lea rcx, str.btrfs_qgroup_setup_comparer",
            "mov edx, 0x1bf",
            "lea rsi, str.qgroup.c",
            "lea rdi, str.__set__comps_set__ncomps_.comp_func_",
            "jmp 0x4197a1",
            "lea rdx, [0x00626c90]",
            "inc ecx",
            "mov dword [rax + 0x10], r12d",
            "mov rdx, qword [rdx + rbx*8]",
            "mov qword [rax + 8], rdx",
            "mov dword [r8 + 4], ecx",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00402300",
        "instructions": [
            "jmp qword [reloc.realloc]"
        ]
    },
    "fcn.0041a4aa": {
        "function_address": "0x0041a4aa",
        "instructions": [
            "push r12",
            "mov esi, 0x2f",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x10",
            "call sym.imp.strchr",
            "or rcx, 0xffffffffffffffff",
            "mov r12, rax",
            "mov rdi, rbx",
            "xor eax, eax",
            "mov edx, 0xa",
            "lea rsi, [rsp + 8]",
            "repne scasb al, byte [rdi]",
            "test r12, r12",
            "mov qword [rsp + 8], 0",
            "mov rdi, rbx",
            "not rcx",
            "lea rbp, [rbx + rcx - 1]",
            "jne 0x41a4fe",
            "call sym.imp.strtoull",
            "cmp qword [rsp + 8], rbp",
            "je 0x41a556",
            "jmp 0x41a538",
            "call sym.imp.strtoull",
            "mov rdi, qword [rsp + 8]",
            "mov rbx, rax",
            "cmp rdi, r12",
            "jne 0x41a538",
            "lea rsi, [rsp + 8]",
            "inc rdi",
            "mov edx, 0xa",
            "call sym.imp.strtoull",
            "cmp qword [rsp + 8], rbp",
            "mov rdx, rax",
            "jne 0x41a538",
            "mov rax, rbx",
            "shl rax, 0x30",
            "or rax, rdx",
            "jmp 0x41a556",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.ERROR:invalid_qgroupid_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "or edi, 0xffffffff",
            "call sym.imp.exit",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "fcn.00418df5": {
        "function_address": "0x00418df5",
        "instructions": [
            "push r15",
            "movsxd r15, esi",
            "push r14",
            "mov r14d, edx",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "push rbx",
            "push rcx",
            "mov rbx, qword [rdi]",
            "test rbx, rbx",
            "je 0x418e1f",
            "mov r12, qword [rbx + 8]",
            "add r12d, dword [rbx + 0x10]",
            "add r12d, dword [rbx + 0x18]",
            "jmp 0x418e22",
            "xor r12d, r12d",
            "lea eax, [r12 + r15]",
            "mov esi, 1",
            "cdqe",
            "lea rdi, [rax*8 + 0x48]",
            "call sym.imp.calloc",
            "test rax, rax",
            "mov rbp, rax",
            "jne 0x418e5f",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.ERROR:_Not_enough_memory_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov eax, 0xd",
            "jmp 0x418ec8",
            "test rbx, rbx",
            "je 0x418eb9",
            "mov rax, qword [rbx + 8]",
            "movsxd rdx, r14d",
            "lea ecx, [r14*8]",
            "lea rsi, [rbx + 0x48]",
            "sub r12d, r14d",
            "movsxd rcx, ecx",
            "mov qword [rbp + 8], rax",
            "mov rax, qword [rbx + 0x10]",
            "mov qword [rbp + 0x10], rax",
            "mov rax, qword [rbx + 0x18]",
            "mov qword [rbp + 0x18], rax",
            "lea rax, [rbp + 0x48]",
            "mov rdi, rax",
            "lea rax, [rdx + r15 + 8]",
            "rep movsb byte [rdi], byte [rsi]",
            "lea rax, [rbp + rax*8 + 8]",
            "lea ecx, [r12*8]",
            "lea rsi, [rbx + rdx*8 + 0x48]",
            "movsxd rcx, ecx",
            "mov rdi, rax",
            "rep movsb byte [rdi], byte [rsi]",
            "mov rdi, qword [r13]",
            "call sym.imp.free",
            "mov qword [r13], rbp",
            "xor eax, eax",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.004024b1": {
        "function_address": "0x004024b1",
        "instructions": [
            "lea rcx, str.io_ctl_map_page",
            "push rax",
            "lea rsi, str.free_space_cache.c",
            "lea rdi, str.__io_ctl__index___io_ctl__num_pages_",
            "mov edx, 0x4d",
            "call sym.imp.__assert_fail"
        ]
    },
    "fcn.0041aa18": {
        "function_address": "0x0041aa18",
        "instructions": [
            "push rbp",
            "mov rbp, rsi",
            "mov rsi, rdi",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, rbp",
            "push r9",
            "call fcn.0041c68d",
            "dec dword [rbx + 0x14]",
            "mov rax, qword [rbp + 0x20]",
            "sub qword [rbx + 8], rax",
            "pop r10",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0041258c": {
        "function_address": "0x0041258c",
        "instructions": [
            "push r15",
            "add rdi, 0x150",
            "mov r15, rdx",
            "push r14",
            "mov r14d, r8d",
            "push r13",
            "mov r13, rsi",
            "push r12",
            "xor r12d, r12d",
            "push rbp",
            "mov rbp, rcx",
            "push rbx",
            "sub rsp, 0x38",
            "mov qword [rsp + 0x20], 0",
            "mov qword [rsp + 0x18], rdi",
            "jmp 0x4126c8",
            "mov rdi, qword [rsp + 0x18]",
            "lea r8, [rsp + 0x20]",
            "lea rcx, [rsp + 0x28]",
            "xor esi, esi",
            "mov qword [rsp], 0",
            "mov r9d, r14d",
            "mov rdx, r15",
            "mov qword [rsp + 0x28], rbp",
            "call fcn.00414c15",
            "test eax, eax",
            "je 0x412612",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Couldnt_map_the_block__Lu_n",
            "mov rcx, r15",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x41263b",
            "mov rax, qword [rsp + 0x20]",
            "mov rdx, qword [rsp + 0x28]",
            "mov rcx, qword [rax + 8]",
            "cmp rbp, rdx",
            "cmovbe rdx, rbp",
            "mov qword [rsp + 0x28], rdx",
            "mov edi, dword [rcx + 0x28]",
            "test edi, edi",
            "jne 0x412645",
            "mov rdi, rax",
            "call sym.imp.free",
            "mov ebx, 0xfffffffb",
            "jmp 0x4126d3",
            "mov rcx, qword [rax + 0x10]",
            "lea rsi, [r13 + r12]",
            "call sym.imp.pread64",
            "mov rdi, qword [rsp + 0x20]",
            "movsxd rbx, eax",
            "mov qword [rsp + 0x10], rax",
            "call sym.imp.free",
            "test ebx, ebx",
            "mov r8, qword [rsp + 0x10]",
            "jns 0x412690",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Error_reading__Lu___d_n",
            "mov rcx, r15",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4126d3",
            "mov r9, qword [rsp + 0x28]",
            "cmp rbx, r9",
            "je 0x4126bf",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Short_read_for__Lu__read__d__read_len__Lu_n",
            "mov rcx, r15",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x41263b",
            "sub rbp, rbx",
            "add r15, rbx",
            "add r12, rbx",
            "test rbp, rbp",
            "jne 0x4125c3",
            "xor ebx, ebx",
            "add rsp, 0x38",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret"
        ]
    },
    "fcn.0041a93f": {
        "function_address": "0x0041a93f",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x18",
            "mov eax, dword [rdi + 0x30]",
            "mov rdx, qword [rdi + 0x10]",
            "mov dword [rsp + 0xc], 0xffffffff",
            "test byte [rdi + 0x38], 1",
            "jne 0x41a98d",
            "cmp eax, dword [rdi + 0x34]",
            "jl 0x41a967",
            "call fcn.004024b1",
            "mov ecx, eax",
            "inc eax",
            "mov qword [rdi + 0x20], 0x1000",
            "shl ecx, 0xc",
            "mov dword [rdi + 0x30], eax",
            "xor eax, eax",
            "movsxd rcx, ecx",
            "add rdx, rcx",
            "mov qword [rdi], rdx",
            "mov qword [rdi + 8], rdx",
            "jmp 0x41aa11",
            "xor edi, edi",
            "test esi, esi",
            "jne 0x41a999",
            "mov edi, dword [rbx + 0x34]",
            "shl edi, 2",
            "cmp eax, dword [rbx + 0x34]",
            "movsxd rsi, esi",
            "mov ebp, dword [rdx + rsi*4]",
            "jge 0x41a962",
            "mov ecx, eax",
            "inc eax",
            "mov qword [rbx + 0x20], 0x1000",
            "shl ecx, 0xc",
            "mov dword [rbx + 0x30], eax",
            "movsxd rcx, ecx",
            "add rcx, rdx",
            "mov edx, 0x1000",
            "lea rsi, [rcx + rdi]",
            "sub edx, edi",
            "mov qword [rbx], rcx",
            "or edi, 0xffffffff",
            "mov qword [rbx + 8], rcx",
            "call fcn.0041cbfb",
            "lea rsi, [rsp + 0xc]",
            "mov edi, eax",
            "mov dword [rsp + 0xc], eax",
            "call fcn.004073b6",
            "xor eax, eax",
            "cmp ebp, dword [rsp + 0xc]",
            "je 0x41aa11",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.btrfs:_csum_mismatch_on_free_space_cache_n",
            "mov rsi, qword [rax]",
            "call sym.imp.fputs",
            "mov rdi, rbx",
            "call fcn.0041a764",
            "mov eax, 0xfffffffb",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0041a764": {
        "function_address": "0x0041a764",
        "instructions": [
            "cmp qword [rdi], 0",
            "je 0x41a779",
            "mov qword [rdi], 0",
            "mov qword [rdi + 8], 0",
            "ret"
        ]
    },
    "fcn.0041a77a": {
        "function_address": "0x0041a77a",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "push rcx",
            "mov rsi, qword [rsi + 0x28]",
            "test rsi, rsi",
            "jne 0x41a7b2",
            "cmp qword [rbx + 0x20], 0",
            "jne 0x41a7b2",
            "lea rcx, str.link_free_space",
            "lea rsi, str.free_space_cache.c",
            "lea rdi, str.___info__bitmap___info__bytes_",
            "mov edx, 0x28e",
            "call sym.imp.__assert_fail",
            "mov rdi, qword [rbx + 0x18]",
            "mov rdx, rbp",
            "xor ecx, ecx",
            "jmp 0x41a7e9",
            "cmp rdi, qword [rax + 0x18]",
            "jae 0x41a7c5",
            "jmp 0x41a7e2",
            "jbe 0x41a7c9",
            "jmp 0x41a7d5",
            "test rsi, rsi",
            "je 0x41a7db",
            "cmp qword [rax + 0x28], 0",
            "jne 0x41a821",
            "lea rdx, [rax + 8]",
            "jmp 0x41a7e6",
            "cmp qword [rax + 0x28], 0",
            "je 0x41a821",
            "lea rdx, [rax + 0x10]",
            "mov rcx, rax",
            "mov rax, qword [rdx]",
            "test rax, rax",
            "jne 0x41a7bd",
            "mov qword [rbx], rcx",
            "mov qword [rbx + 8], 0",
            "mov rsi, rbp",
            "mov qword [rbx + 0x10], 0",
            "mov rdi, rbx",
            "mov qword [rdx], rbx",
            "call fcn.0041c5b2",
            "mov rax, qword [rbx + 0x20]",
            "inc dword [rbp + 0x14]",
            "add qword [rbp + 8], rax",
            "xor eax, eax",
            "jmp 0x41a826",
            "mov eax, 0xffffffef",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0041a82a": {
        "function_address": "0x0041a82a",
        "instructions": [
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "xor ebp, ebp",
            "push rbx",
            "push r8",
            "mov rbx, qword [rdi]",
            "jmp 0x41a845",
            "mov rbp, rbx",
            "mov rbx, rax",
            "test rbx, rbx",
            "je 0x41a91e",
            "cmp r12, qword [rbx + 0x18]",
            "jae 0x41a85a",
            "mov rax, qword [rbx + 0x10]",
            "jmp 0x41a83f",
            "jbe 0x41a929",
            "mov rax, qword [rbx + 8]",
            "jmp 0x41a83f",
            "mov rdi, rbx",
            "call fcn.0041c985",
            "test rax, rax",
            "je 0x41a934",
            "cmp qword [rax + 0x28], 0",
            "jne 0x41a934",
            "mov rdx, qword [rax + 0x20]",
            "add rdx, qword [rax + 0x18]",
            "cmp rdx, r12",
            "cmova rbx, rax",
            "jmp 0x41a934",
            "cmp qword [rbp + 0x18], r12",
            "jbe 0x41a8d5",
            "mov rdi, rbp",
            "call fcn.0041c985",
            "test rax, rax",
            "mov rbp, rax",
            "je 0x41a934",
            "cmp qword [rax + 0x18], r12",
            "jbe 0x41a8d5",
            "lea rcx, str.tree_search_offset",
            "lea rsi, str.free_space_cache.c",
            "lea rdi, str.__entry__offset___offset_",
            "mov edx, 0x255",
            "call sym.imp.__assert_fail",
            "cmp qword [rbp + 0x28], 0",
            "je 0x41a908",
            "mov rdi, rbp",
            "call fcn.0041c985",
            "test rax, rax",
            "je 0x41a8fd",
            "cmp qword [rax + 0x28], 0",
            "jne 0x41a8fd",
            "mov rdx, qword [rax + 0x20]",
            "add rdx, qword [rax + 0x18]",
            "cmp rdx, r12",
            "ja 0x41a919",
            "mov eax, dword [r13 + 0x1c]",
            "shl eax, 0xf",
            "cdqe",
            "jmp 0x41a90c",
            "mov rax, qword [rbp + 0x20]",
            "add rax, qword [rbp + 0x18]",
            "cmp rax, r12",
            "cmova rbx, rbp",
            "jmp 0x41a934",
            "mov rbx, rax",
            "jmp 0x41a934",
            "test rbp, rbp",
            "jne 0x41a896",
            "jmp 0x41a934",
            "cmp qword [rbx + 0x28], 0",
            "jne 0x41a866",
            "pop rsi",
            "mov rax, rbx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "fcn.0041c985": {
        "function_address": "0x0041c985",
        "instructions": [
            "mov rax, qword [rdi]",
            "and rax, 0xfffffffffffffffc",
            "cmp rdi, rax",
            "je 0x41c9bf",
            "mov rax, qword [rdi + 0x10]",
            "test rax, rax",
            "jne 0x41c99f",
            "jmp 0x41c9ac",
            "mov rax, rdx",
            "mov rdx, qword [rax + 8]",
            "test rdx, rdx",
            "jne 0x41c99c",
            "ret",
            "mov rdi, rdx",
            "mov rdx, qword [rdi]",
            "and rdx, 0xfffffffffffffffc",
            "je 0x41c9c1",
            "cmp rdi, qword [rdx + 0x10]",
            "je 0x41c9a9",
            "mov rax, rdx",
            "ret",
            "xor eax, eax",
            "ret"
        ]
    },
    "fcn.0041ab21": {
        "function_address": "0x0041ab21",
        "instructions": [
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "push rax",
            "jmp 0x41ab45",
            "mov rsi, rbx",
            "mov rdi, rbp",
            "call fcn.0041aa18",
            "mov rdi, qword [rbx + 0x28]",
            "call sym.imp.free",
            "mov rdi, rbx",
            "call sym.imp.free",
            "mov rdi, rbp",
            "call fcn.0041c932",
            "test rax, rax",
            "mov rbx, rax",
            "jne 0x41ab29",
            "pop rbp",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.0041c932": {
        "function_address": "0x0041c932",
        "instructions": [
            "mov rax, qword [rdi]",
            "test rax, rax",
            "jne 0x41c93e",
            "ret",
            "mov rax, rdx",
            "mov rdx, qword [rax + 8]",
            "test rdx, rdx",
            "jne 0x41c93b",
            "ret"
        ]
    },
    "fcn.00417a64": {
        "function_address": "0x00417a64",
        "instructions": [
            "push r12",
            "mov r12d, edx",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "sub rsp, 0x90",
            "mov rsi, rsp",
            "call fcn.0041ccb0",
            "test eax, eax",
            "jns 0x417a86",
            "jmp 0x417aed",
            "mov eax, dword [rsp + 0x18]",
            "mov edx, eax",
            "and edx, 0xf000",
            "cmp edx, 0x4000",
            "jne 0x417ab5",
            "mov rdi, rbx",
            "call sym.imp.opendir",
            "test rax, rax",
            "mov qword [rbp], rax",
            "je 0x417aed",
            "mov rdi, rax",
            "call sym.imp.dirfd",
            "jmp 0x417adb",
            "and eax, 0xd000",
            "cmp eax, 0x8000",
            "jne 0x417ace",
            "mov esi, r12d",
            "mov rdi, rbx",
            "call sym.imp.__open64_2",
            "jmp 0x417adb",
            "call sym.imp.__errno_location",
            "mov dword [rax], 0x16",
            "jmp 0x417aed",
            "test eax, eax",
            "jns 0x417af0",
            "mov rdi, qword [rbp]",
            "test rdi, rdi",
            "je 0x417aed",
            "call sym.imp.closedir",
            "or eax, 0xffffffff",
            "add rsp, 0x90",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.imp.dirfd": {
        "function_address": "0x00402200",
        "instructions": [
            "jmp qword [reloc.dirfd]"
        ]
    },
    "fcn.004184f9": {
        "function_address": "0x004184f9",
        "instructions": [
            "push r13",
            "xor eax, eax",
            "push r12",
            "push rbp",
            "or rbp, 0xffffffffffffffff",
            "mov rcx, rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov rdi, rsi",
            "push r12",
            "mov r12, rsi",
            "repne scasb al, byte [rdi]",
            "not rcx",
            "add rcx, rbp",
            "cmp ecx, 0xff",
            "jle 0x418743",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_Label__s_is_too_long__max__d__n",
            "mov rcx, rsi",
            "mov r8d, 0xff",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x418733",
            "mov rdi, rbx",
            "call fcn.004181c3",
            "cmp eax, 0",
            "mov rcx, rbx",
            "lea rdx, str.FATAL:_error_checking__s_mount_status_n",
            "jl 0x4186d2",
            "je 0x41857e",
            "mov rcx, rbx",
            "lea rdx, str.ERROR:_dev__s_is_mounted__use_mount_point_n",
            "jmp 0x4186d2",
            "xor esi, esi",
            "mov rdi, rbx",
            "mov edx, 1",
            "call fcn.00409282",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x418733",
            "mov edi, 0x30",
            "mov r13, qword [rax + 0x1d8]",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "jne 0x4185ce",
            "lea rcx, str.btrfs_start_transaction",
            "mov edx, 0x25",
            "lea rsi, str.transaction.h",
            "lea rdi, str.___h_",
            "jmp 0x4185ef",
            "cmp qword [rbx + 8], 0",
            "je 0x4185f4",
            "lea rcx, str.btrfs_start_transaction",
            "lea rsi, str.transaction.h",
            "lea rdi, str.__root__commit_root_",
            "mov edx, 0x26",
            "call sym.imp.__assert_fail",
            "cmp qword [r13 + 0x1a0], 0",
            "je 0x41861a",
            "lea rcx, str.btrfs_start_transaction",
            "mov edx, 0x27",
            "lea rsi, str.transaction.h",
            "lea rdi, str.__fs_info__running_transaction_",
            "jmp 0x4185ef",
            "mov qword [r13 + 0x1a0], rax",
            "mov rax, qword [r13 + 0x158]",
            "lea rdx, [0x0041fa2d]",
            "mov rcx, r12",
            "mov esi, 0x100",
            "inc rax",
            "mov qword [r13 + 0x158], rax",
            "mov qword [rbp], rax",
            "mov qword [rbp + 8], 0",
            "mov qword [rbp + 0x10], 0",
            "mov qword [rbp + 0x18], 1",
            "mov qword [rbp + 0x20], 0",
            "mov qword [rbp + 0x28], 0",
            "mov qword [rbx + 0x1e8], rax",
            "mov rax, qword [rbx]",
            "mov qword [rbx + 8], rax",
            "inc dword [rax + 0x70]",
            "mov rax, qword [rbx + 0x1d8]",
            "mov rdi, qword [rax + 0x1a8]",
            "xor eax, eax",
            "add rdi, 0x12b",
            "call sym.imp.snprintf",
            "mov rdi, rbp",
            "mov rsi, rbx",
            "call fcn.004082dd",
            "mov rdi, rbx",
            "call fcn.0040841c",
            "jmp 0x41873f",
            "xor eax, eax",
            "mov esi, 0x40000",
            "mov rdi, rbx",
            "call sym.imp.open64",
            "test eax, eax",
            "mov r13d, eax",
            "jns 0x4186ea",
            "lea rdx, str.ERROR:_unable_to_access__s_n",
            "mov rcx, rbx",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x418733",
            "mov edi, eax",
            "mov rdx, r12",
            "xor eax, eax",
            "mov esi, 0x41009432",
            "call sym.imp.ioctl",
            "test eax, eax",
            "jns 0x418737",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "call sym.imp.strerror",
            "mov rcx, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_unable_to_set_label__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, r13d",
            "call sym.imp.close",
            "mov eax, ebp",
            "jmp 0x418758",
            "mov edi, r13d",
            "call sym.imp.close",
            "xor eax, eax",
            "jmp 0x418758",
            "mov rdi, rbx",
            "call fcn.00415a17",
            "test eax, eax",
            "jne 0x418552",
            "jmp 0x4186b2",
            "pop rbp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x004020c0",
        "instructions": [
            "jmp qword [reloc.snprintf]"
        ]
    },
    "fcn.00418760": {
        "function_address": "0x00418760",
        "instructions": [
            "push r12",
            "mov r12, rsi",
            "mov esi, 0x40000",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "sub rsp, 0x110",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x108], rax",
            "xor eax, eax",
            "call sym.imp.open64",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x4175f6",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_unable_to_access__s_n",
            "mov rcx, rbp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x41764d",
            "lea rbp, [rsp + 8]",
            "xor eax, eax",
            "mov ecx, 0x40",
            "mov esi, 0x81009431",
            "mov rdi, rbp",
            "mov rdx, rbp",
            "rep stosd dword [rdi], eax",
            "mov edi, ebx",
            "call sym.imp.ioctl",
            "test eax, eax",
            "jns 0x417652",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "call sym.imp.strerror",
            "mov rcx, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.ERROR:_unable_get_label__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, ebx",
            "call sym.imp.close",
            "or eax, 0xffffffff",
            "jmp 0x41766b",
            "mov edx, 0x100",
            "mov rsi, rbp",
            "mov rdi, r12",
            "call sym.imp.strncpy",
            "mov edi, ebx",
            "call sym.imp.close",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x108]",
            "xor rdx, qword fs:[0x28]",
            "je 0x417683",
            "call sym.imp.__stack_chk_fail",
            "add rsp, 0x110",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "push r8",
            "call fcn.00415a17",
            "test eax, eax",
            "je 0x4187ef",
            "mov rdi, rbx",
            "call fcn.004181c3",
            "cmp eax, 0",
            "mov rcx, rbx",
            "lea rdx, str.FATAL:_error_checking__s_mount_status_n",
            "jl 0x418796",
            "je 0x4187ae",
            "lea rdx, str.ERROR:_dev__s_is_mounted__use_mount_point_n",
            "mov rcx, rbx",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4187ea",
            "xor edx, edx",
            "xor esi, esi",
            "mov rdi, rbx",
            "call fcn.00409282",
            "test rax, rax",
            "je 0x4187ea",
            "mov rdx, qword [rax + 0x1d8]",
            "mov ecx, 0x40",
            "mov rdi, rbp",
            "mov rsi, qword [rdx + 0x1a8]",
            "add rsi, 0x12b",
            "rep movsd dword [rdi], dword [rsi]",
            "mov rdi, rax",
            "call fcn.0040841c",
            "xor eax, eax",
            "jmp 0x4187fd",
            "or eax, 0xffffffff",
            "jmp 0x4187fd",
            "pop rcx",
            "mov rdi, rbx",
            "mov rsi, rbp",
            "pop rbx",
            "pop rbp",
            "jmp 0x4175a0",
            "pop rdx",
            "pop rbx",
            "pop rbp",
            "ret"
        ]
    }
}