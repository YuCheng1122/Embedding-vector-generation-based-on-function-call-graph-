{
    "fcn.0000aba4": {
        "function_address": "0x0000aba4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "cmp r0, 2",
            "ldr r4, aav.0x0000952c",
            "sub sp, sp, 0xec0",
            "sub sp, sp, 4",
            "mov sl, r0",
            "mov r7, r1",
            "add r4, pc, r4",
            "ble 0xb6f0",
            "add r0, sp, 0x830",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, r0, 0xc",
            "bl sym.imp.memset",
            "ldr r3, [0x0000b74c]",
            "mov r1, 0",
            "movw r2, 0x48c",
            "add r8, r7, 4",
            "mov r6, 2",
            "ldr r0, [r4, r3]",
            "bl sym.imp.memset",
            "add r0, sp, 0xdb0",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, r0, 0xc",
            "bl sym.imp.memset",
            "add r0, sp, 0xd30",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, r0, 0xc",
            "bl sym.imp.memset",
            "add r0, sp, 0x3c",
            "mov r1, 0",
            "mov r2, 0x400",
            "bl sym.imp.memset",
            "ldr r3, [0x0000b750]",
            "add r3, r4, r3",
            "str r3, [sp, 0x24]",
            "ldr r3, [0x0000b754]",
            "add r3, r4, r3",
            "str r3, [sp, 0x28]",
            "ldr r3, [0x0000b758]",
            "add r3, r4, r3",
            "str r3, [sp, 0x2c]",
            "ldr r3, [0x0000b75c]",
            "add r3, r4, r3",
            "str r3, [sp, 0x30]",
            "ldr r3, [0x0000b760]",
            "add r3, r4, r3",
            "str r3, [sp, 0x34]",
            "ldr r5, [r8, 4]!",
            "mov r2, 5",
            "ldr r1, [sp, 0x24]",
            "mov r0, r5",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xacb0",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r3, [0x0000b74c]",
            "ldr r0, [r4, r3]",
            "b 0xade0",
            "mov r0, r5",
            "ldr r1, [sp, 0x28]",
            "mov r2, 8",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xad5c",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r1, [0x0000b764]",
            "add r5, r5, 1",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldreq r3, [0x0000b74c]",
            "ldreq r3, [r4, r3]",
            "streq r0, [r3, 0x80]",
            "beq 0xb524",
            "ldr r1, [0x0000b768]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldreq r3, [0x0000b74c]",
            "moveq r2, 1",
            "ldreq r3, [r4, r3]",
            "beq 0xad54",
            "ldr r1, [0x0000b76c]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb524",
            "ldr r3, [0x0000b74c]",
            "mov r2, 2",
            "ldr r3, [r4, r3]",
            "str r2, [r3, 0x80]",
            "b 0xb524",
            "mov r0, r5",
            "ldr r1, [sp, 0x2c]",
            "mov r2, 3",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xada0",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x84",
            "b 0xade0",
            "mov r0, r5",
            "ldr r1, [sp, 0x30]",
            "mov r2, 3",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xadec",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x104",
            "add r1, r5, 1",
            "bl sym.imp.strcpy",
            "b 0xb524",
            "mov r0, r5",
            "ldr r1, [sp, 0x34]",
            "mov r2, 2",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xae30",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x184",
            "b 0xade0",
            "ldr r1, [0x0000b770]",
            "mov r0, r5",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xae78",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x204",
            "b 0xade0",
            "ldr r1, [0x0000b774]",
            "mov r0, r5",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xaec0",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x284",
            "b 0xade0",
            "ldr r1, [0x0000b778]",
            "mov r0, r5",
            "mov r2, 2",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xaf08",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x304",
            "b 0xade0",
            "ldr r1, [0x0000b77c]",
            "mov r0, r5",
            "mov r2, 8",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xaf50",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r0, [0x0000b74c]",
            "ldr r0, [r4, r0]",
            "add r0, r0, 0x384",
            "b 0xade0",
            "ldr r1, [0x0000b780]",
            "mov r0, r5",
            "mov r2, 9",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xafd8",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "ldr r1, [0x0000b784]",
            "add r5, r5, 1",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldreq r3, [0x0000b74c]",
            "ldreq r3, [r4, r3]",
            "streq r0, [r3, 0x404]",
            "beq 0xb524",
            "ldr r1, [0x0000b788]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldreq r3, [0x0000b74c]",
            "moveq r2, 1",
            "ldreq r3, [r4, r3]",
            "streq r2, [r3, 0x404]",
            "b 0xb524",
            "ldr r1, [0x0000b78c]",
            "mov r0, r5",
            "mov r2, 8",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb028",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, r5, 1",
            "bl sym.imp.atoi",
            "ldr r3, [0x0000b74c]",
            "ldr r3, [r4, r3]",
            "str r0, [r3, 0x408]",
            "b 0xb524",
            "ldr r1, [0x0000b790]",
            "mov r0, r5",
            "mov r2, 9",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb068",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xe30",
            "b 0xb0a4",
            "ldr r1, [0x0000b794]",
            "mov r0, r5",
            "mov r2, 7",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb0ac",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xdb0",
            "add r0, r0, 0xc",
            "b 0xade0",
            "ldr r1, [0x0000b798]",
            "mov r0, r5",
            "mov r2, 7",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb0ec",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xd30",
            "b 0xb0a4",
            "ldr r1, [0x0000b79c]",
            "mov r0, r5",
            "mov r2, 5",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb12c",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xcb0",
            "b 0xb0a4",
            "ldr r1, [0x0000b7a0]",
            "mov r0, r5",
            "mov r2, 4",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb16c",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xc30",
            "b 0xb0a4",
            "ldr r1, [0x0000b7a4]",
            "mov r0, r5",
            "mov r2, 4",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb1ac",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xbb0",
            "b 0xb0a4",
            "ldr r1, [0x0000b7a8]",
            "mov r0, r5",
            "mov r2, 3",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb1ec",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xb30",
            "b 0xb0a4",
            "ldr r1, [0x0000b7ac]",
            "mov r0, r5",
            "mov r2, 4",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb22c",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xab0",
            "b 0xb0a4",
            "ldr r1, [0x0000b7b0]",
            "mov r0, r5",
            "mov r2, 5",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb26c",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "addhi r0, sp, 0x3c",
            "bhi 0xade0",
            "b 0xb524",
            "ldr r1, [0x0000b7b4]",
            "mov r0, r5",
            "mov r2, 4",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb2b0",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, r5, 1",
            "bl sym.imp.atoi",
            "b 0xb524",
            "ldr r1, [0x0000b7b8]",
            "mov r0, r5",
            "mov r2, 0xa",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb2f0",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0xa30",
            "b 0xb0a4",
            "ldr r1, [0x0000b7bc]",
            "mov r0, r5",
            "mov r2, 0xb",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb330",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0x9b0",
            "b 0xb0a4",
            "ldr r1, [0x0000b7c0]",
            "mov r0, r5",
            "mov r2, 0xd",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb440",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r2, sp, 0x930",
            "mov r0, r5",
            "add r2, r2, 0xc",
            "b 0xb42c",
            "uxtb r1, r3",
            "sub fp, r1, 0x30",
            "sub sb, r1, 0x61",
            "uxtb fp, fp",
            "uxtb sb, sb",
            "cmp sb, 5",
            "cmphi fp, 9",
            "bls 0xb3a8",
            "sub r1, r1, 0x41",
            "uxtb r1, r1",
            "cmp r1, 5",
            "bhi 0xb524",
            "ldrb r1, [r0, 2]",
            "uxtb ip, r1",
            "sub r5, ip, 0x30",
            "sub lr, ip, 0x61",
            "uxtb r5, r5",
            "uxtb lr, lr",
            "cmp lr, 5",
            "cmphi r5, 9",
            "bls 0xb3dc",
            "sub ip, ip, 0x41",
            "uxtb ip, ip",
            "cmp ip, 5",
            "bhi 0xb524",
            "cmp fp, 9",
            "sxtbls r3, r3",
            "subls r3, r3, 0x30",
            "bls aav.0x0000b3fc",
            "sxtb r3, r3",
            "cmp sb, 5",
            "subls r3, r3, 0x57",
            "subhi r3, r3, 0x37",
            "cmp r5, 9",
            "lsl r3, r3, 4",
            "sxtbls r1, r1",
            "subls r1, r1, 0x30",
            "bls 0xb420",
            "sxtb r1, r1",
            "cmp lr, 5",
            "subls r1, r1, 0x57",
            "subhi r1, r1, 0x37",
            "add r0, r0, 2",
            "add r3, r1, r3",
            "strb r3, [r2], 1",
            "ldrb r3, [r0, 1]",
            "cmp r3, 0",
            "bne 0xb378",
            "strb r3, [r2]",
            "b 0xb524",
            "ldr r1, [0x0000b7c4]",
            "mov r0, r5",
            "mov r2, 5",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb480",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0x8b0",
            "b 0xb0a4",
            "ldr r1, [0x0000b7c8]",
            "mov r0, r5",
            "mov r2, 0xb",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb4d8",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, r5, 1",
            "bl sym.imp.atoi",
            "ldr r2, [0x0000b7cc]",
            "ldr r3, [0x0000b7d0]",
            "mul r2, r2, r0",
            "ldr r3, [r4, r3]",
            "str r2, [r3]",
            "b 0xb524",
            "ldr r1, [0x0000b7d4]",
            "mov r0, r5",
            "mov r2, 5",
            "add r1, r4, r1",
            "bl sym.imp.strncmp",
            "cmp r0, 0",
            "bne 0xb524",
            "mov r0, r5",
            "mov r1, 0x3d",
            "bl sym.imp.strchr",
            "mov r5, r0",
            "bl sym.imp.strlen",
            "cmp r0, 1",
            "bls 0xb6f0",
            "add r0, sp, 0x830",
            "add r1, r5, 1",
            "add r0, r0, 0xc",
            "mov r2, 0x80",
            "bl sym.imp.strncpy",
            "add r6, r6, 1",
            "cmp r6, sl",
            "blt 0xac6c",
            "ldr r5, [r7, 4]",
            "ldr r1, [0x0000b7d8]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb614",
            "ldr r1, [0x0000b7dc]",
            "add r5, sp, 0xe30",
            "add r5, r5, 0xc",
            "str r0, [sp, 0xebc]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldr r2, [0x0000b7e0]",
            "beq 0xb590",
            "ldr r1, [0x0000b7e4]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "ldr r2, [0x0000b7e8]",
            "bne 0xb6f0",
            "ldr r1, [0x0000b7ec]",
            "add r2, r4, r2",
            "mov r0, 0x1b",
            "mov r3, 0",
            "str r2, [sp, 0x18]",
            "mov r2, r0",
            "add r1, r4, r1",
            "str r3, [sp]",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x0000b7f0]",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "add r1, r4, r1",
            "str r1, [sp, 0x10]",
            "ldr r1, [0x0000b74c]",
            "ldr r5, [r4, r1]",
            "mov r1, 6",
            "str r5, [sp, 0x14]",
            "bl sym.imp.zylog",
            "ldr r1, [0x0000b7dc]",
            "add r0, sp, 0xe30",
            "add r0, r0, 0xc",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "add r2, sp, 0xd30",
            "add r3, sp, 0xeb0",
            "subs r0, r0, 0",
            "movne r0, 1",
            "mov r1, r5",
            "add r2, r2, 0xc",
            "add r3, r3, 0xc",
            "bl fcn.0000a634",
            "b 0xb6e8",
            "ldr r1, [0x0000b7f4]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb668",
            "ldr r1, [0x0000b7dc]",
            "add r0, sp, 0xe30",
            "add r0, r0, 0xc",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "ldr r3, [0x0000b74c]",
            "add r2, sp, 0x8b0",
            "subs r0, r0, 0",
            "movne r0, 1",
            "add r2, r2, 0xc",
            "ldr r1, [r4, r3]",
            "add r3, sp, 0xd30",
            "add r3, r3, 0xc",
            "bl fcn.00008cd0",
            "b 0xb6e8",
            "ldr r1, [0x0000b7f8]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb6f0",
            "ldr r1, [0x0000b7dc]",
            "add r5, sp, 0xe30",
            "add r5, r5, 0xc",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "subs r6, r0, 0",
            "beq 0xb6b8",
            "ldr r1, [0x0000b7e4]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0xb6f0",
            "ldr r3, [0x0000b74c]",
            "ldr r1, [r4, r3]",
            "ldrsb r3, [r1]",
            "cmp r3, 0",
            "beq 0xb6f0",
            "ldrb r3, [sp, 0x83c]",
            "cmp r3, 0",
            "movne r5, 0",
            "bne 0xb738",
            "subs r0, r6, 0",
            "movne r0, 1",
            "bl fcn.00009fb0",
            "mov r5, r0",
            "b 0xb6f4",
            "mvn r5, 0",
            "ldr r2, [0x0000b7fc]",
            "add r6, sp, 0x430",
            "mov r3, 0",
            "add r6, r6, 0xc",
            "strb r3, [sp, 0x43c]",
            "mov r1, 0x400",
            "mov r3, r5",
            "add r2, r4, r2",
            "mov r0, r6",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.imp.system",
            "cmp r5, 0",
            "rsbne r5, r5, 0xff000000",
            "addne r5, r5, 0xff0000",
            "addne r5, r5, 0xbd00",
            "addne r5, r5, 0x98",
            "mov r0, r5",
            "add sp, sp, 0x2c4",
            "add sp, sp, 0xc00",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00008aa0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6b8]!"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x00008a64",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6e0]!"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00008b24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x660]!"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00008b18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x668]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008ad0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x698]!"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00008980",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x778]!"
        ]
    },
    "sym.imp.atoi": {
        "function_address": "0x00008b00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x678]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00008a70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6d8]!"
        ]
    },
    "sym.imp.zylog": {
        "function_address": "0x00008b0c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x670]!"
        ]
    },
    "fcn.0000a634": {
        "function_address": "0x0000a634",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1480",
            "ldr r4, aav.0x00009a94",
            "sub sp, sp, 0x24",
            "mov fp, r2",
            "mov sl, r3",
            "ldr r2, [0x0000ab40]",
            "add r6, sp, 0x1000",
            "ldr r3, [0x0000ab44]",
            "add r4, pc, r4",
            "add r6, r6, 0x20",
            "add r7, sp, 0x820",
            "str r1, [sp]",
            "add r2, r4, r2",
            "add r3, r4, r3",
            "mov r5, r0",
            "mov sb, r1",
            "mov r0, r6",
            "mov r1, 0x400",
            "add r8, sp, 0x1400",
            "bl sym.imp.snprintf",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r0, r7",
            "add r8, r8, 0x20",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x80",
            "mov r0, r8",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, sp, 0x420",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, sp, 0x20",
            "bl sym.imp.memset",
            "ldr r2, [0x0000ab48]",
            "mov r3, r6",
            "mov r1, 0x400",
            "mov r0, r7",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "mov r0, r7",
            "mov r1, 0",
            "bl sym.imp.access",
            "cmp r0, 0",
            "ldrne r6, [0x0000ab4c]",
            "bne 0xa8dc",
            "mov r1, 0x2f",
            "mov r0, r6",
            "bl sym.imp.strrchr",
            "subs r1, r0, 0",
            "movne r0, r8",
            "addne r1, r1, 1",
            "moveq r0, r8",
            "moveq r1, r6",
            "bl sym.imp.strcpy",
            "cmp r5, 0",
            "add r2, sp, 0x1400",
            "add r3, sp, 0x820",
            "add r2, r2, 0x20",
            "add r0, sp, 0x20",
            "bne 0xa75c",
            "ldr r1, [0x0000ab44]",
            "str r2, [sp, 4]",
            "ldr r2, [0x0000ab50]",
            "add r1, r4, r1",
            "str r1, [sp]",
            "mov r1, 0x400",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "b 0xa788",
            "ldr r1, [0x0000ab54]",
            "str r2, [sp, 8]",
            "ldr r2, [0x0000ab58]",
            "add r1, r4, r1",
            "str r1, [sp]",
            "ldr r1, [0x0000ab5c]",
            "add r2, r4, r2",
            "add r1, r4, r1",
            "str r1, [sp, 4]",
            "mov r1, 0x400",
            "bl sym.imp.snprintf",
            "ldr r1, [0x0000ab60]",
            "add r7, sp, 0x20",
            "mov r0, r7",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0xa8d8",
            "add r8, sp, 0x420",
            "mov r1, 0x400",
            "mov r0, r8",
            "mov r2, r6",
            "bl sym.imp.fgets",
            "ldr r1, [0x0000ab64]",
            "mov r0, r8",
            "add r1, r4, r1",
            "bl sym.imp.strstr",
            "subs r8, r0, 0",
            "beq 0xa8c8",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "ldr r2, [0x0000ab68]",
            "add r1, sp, 0x1480",
            "mov r3, 0",
            "add r1, r1, 0x20",
            "cmp r5, r3",
            "strb r3, [r1, r2]",
            "sub r2, r2, 0x400",
            "strb r3, [r1, r2]",
            "add r2, sp, 0x1400",
            "add r3, sp, 0x820",
            "add r2, r2, 0x20",
            "bne 0xa830",
            "ldr r1, [0x0000ab44]",
            "mov r0, r7",
            "str r2, [sp, 4]",
            "ldr r2, [0x0000ab6c]",
            "add r1, r4, r1",
            "str r1, [sp]",
            "mov r1, 0x400",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "b 0xa860",
            "ldr r1, [0x0000ab54]",
            "mov r0, r7",
            "str r2, [sp, 8]",
            "ldr r2, [0x0000ab70]",
            "add r1, r4, r1",
            "str r1, [sp]",
            "ldr r1, [0x0000ab5c]",
            "add r2, r4, r2",
            "add r1, r4, r1",
            "str r1, [sp, 4]",
            "mov r1, 0x400",
            "bl sym.imp.snprintf",
            "ldr r1, [0x0000ab60]",
            "add r0, sp, 0x20",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0xa8d8",
            "add r7, sp, 0x420",
            "mov r1, 0x400",
            "mov r2, r6",
            "mov r0, r7",
            "bl sym.imp.fgets",
            "ldr r1, [0x0000ab64]",
            "mov r0, r7",
            "add r1, r4, r1",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "beq 0xa8b4",
            "mov r0, r6",
            "ldr r6, [0x0000ab74]",
            "bl sym.imp.pclose",
            "b 0xa8dc",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "mov r3, 1",
            "str r3, [sl]",
            "b 0xab28",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "str r8, [sl]",
            "b 0xab28",
            "mvn r6, 0",
            "cmp r5, 0",
            "bne 0xaac0",
            "b 0xa94c",
            "add r0, sp, 0x1000",
            "add r0, r0, 0x20",
            "bl fcn.0000935c",
            "ldr r2, [0x0000ab78]",
            "mov r6, r0",
            "ldr r1, [0x0000ab7c]",
            "add r2, r4, r2",
            "mov r0, 0x1b",
            "mov r3, 0",
            "str r2, [sp, 0x18]",
            "mov r2, r0",
            "add r1, r4, r1",
            "str r3, [sp]",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x0000ab80]",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "add r1, r4, r1",
            "str r1, [sp, 0x10]",
            "ldr r1, [0x0000ab84]",
            "ldr r1, [r4, r1]",
            "str r1, [sp, 0x14]",
            "mov r1, 6",
            "bl sym.imp.zylog",
            "b 0xaac0",
            "add r7, sp, 0x1000",
            "mov r1, fp",
            "add r7, r7, 0x20",
            "mov r0, r7",
            "bl fcn.0000a154",
            "subs r6, r0, 0",
            "bne 0xaa70",
            "ldr r2, [0x0000ab40]",
            "add r5, sp, 0xc20",
            "ldr r3, [0x0000ab54]",
            "mov r1, 0x400",
            "mov r0, r5",
            "str sb, [sp]",
            "add r2, r4, r2",
            "ldr r8, [0x0000ab88]",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "mov r0, r5",
            "mov r1, r6",
            "bl sym.imp.access",
            "cmp r0, 0",
            "bne 0xa9c8",
            "mov r0, r7",
            "ldr r6, [0x0000ab8c]",
            "bl sym.remove",
            "add r1, r4, r8",
            "mov r0, r7",
            "bl sym.imp.strcat",
            "mov r0, r7",
            "bl sym.remove",
            "b 0xab18",
            "mov r1, r5",
            "mov r0, r7",
            "bl fcn.00008c40",
            "mov r0, r7",
            "add r8, r4, r8",
            "bl sym.remove",
            "mov r1, 0x1a4",
            "mov r0, r5",
            "bl sym.imp.chmod",
            "mov r1, r8",
            "mov r0, r7",
            "bl sym.imp.strcat",
            "mov r1, r8",
            "mov r0, r5",
            "bl sym.imp.strcat",
            "mov r1, r5",
            "mov r0, r7",
            "bl fcn.00008c40",
            "mov r0, r7",
            "bl sym.remove",
            "mov r1, 0x1a4",
            "mov r0, r5",
            "bl sym.imp.chmod",
            "mov r3, 4",
            "mov r0, 0x1b",
            "str r3, [sl]",
            "mov r1, 6",
            "ldr r3, [0x0000ab7c]",
            "mov r2, r0",
            "str r6, [sp]",
            "str r6, [sp, 4]",
            "add r3, r4, r3",
            "str r6, [sp, 8]",
            "str r3, [sp, 0xc]",
            "ldr r3, [0x0000ab90]",
            "add r3, r4, r3",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x0000ab84]",
            "ldr r3, [r4, r3]",
            "str r3, [sp, 0x14]",
            "mov r3, r6",
            "b 0xaabc",
            "ldr r3, [0x0000ab94]",
            "cmp r6, r3",
            "bne 0xaac0",
            "ldr r3, [0x0000ab7c]",
            "mov r0, 0x1b",
            "mov r1, 6",
            "mov r2, r0",
            "str r5, [sp]",
            "add r3, r4, r3",
            "str r5, [sp, 4]",
            "str r3, [sp, 0xc]",
            "ldr r3, [0x0000ab98]",
            "str r5, [sp, 8]",
            "add r3, r4, r3",
            "str r3, [sp, 0x10]",
            "ldr r3, [0x0000ab84]",
            "ldr r3, [r4, r3]",
            "str r3, [sp, 0x14]",
            "mov r3, r5",
            "bl sym.imp.zylog",
            "add r0, sp, 0x1000",
            "add r0, r0, 0x20",
            "bl sym.remove",
            "cmp r6, 0",
            "beq 0xab18",
            "ldr r2, [0x0000ab7c]",
            "mov r0, 0x1b",
            "mov r3, 0",
            "mov r1, 3",
            "str r3, [sp]",
            "add r2, r4, r2",
            "str r3, [sp, 4]",
            "str r2, [sp, 0xc]",
            "ldr r2, [0x0000ab9c]",
            "str r3, [sp, 8]",
            "add r2, r4, r2",
            "str r2, [sp, 0x10]",
            "ldr r2, [0x0000ab84]",
            "ldr r2, [r4, r2]",
            "str r2, [sp, 0x14]",
            "mov r2, r0",
            "bl sym.imp.zylog",
            "mov r0, r6",
            "add sp, sp, 0xa4",
            "add sp, sp, 0x1400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "cmp r5, 0",
            "beq 0xa8e8",
            "mov r6, 0",
            "ldr r2, [0x0000aba0]",
            "b 0xa8fc"
        ]
    },
    "fcn.00008cd0": {
        "function_address": "0x00008cd0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "subs r8, r0, 0",
            "ldr r4, aav.0x0000b3fc",
            "sub sp, sp, 0x420",
            "sub sp, sp, 4",
            "mov r7, r1",
            "add r0, sp, 0x20",
            "ldr r3, [0x00008e70]",
            "add r4, pc, r4",
            "streq r1, [sp]",
            "moveq r1, 0x400",
            "ldreq r2, [0x00008e74]",
            "beq 0x8d1c",
            "ldr r2, [0x00008e78]",
            "str r1, [sp, 4]",
            "mov r1, 0x400",
            "add r2, r4, r2",
            "str r2, [sp]",
            "ldr r2, [0x00008e7c]",
            "add r2, r4, r2",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "ldr r1, [0x00008e80]",
            "add r0, sp, 0x20",
            "add r1, r4, r1",
            "bl sym.imp.fopen64",
            "subs r5, r0, 0",
            "bne 0x8dac",
            "cmp r8, 0",
            "ldr r2, [0x00008e84]",
            "ldrne r2, [0x00008e88]",
            "ldr r1, [0x00008e8c]",
            "add r2, r4, r2",
            "mov r0, 0x1b",
            "mov r3, 0",
            "str r2, [sp, 0x18]",
            "mov r2, r0",
            "add r1, r4, r1",
            "str r3, [sp]",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x00008e90]",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "add r4, r4, r1",
            "mov r1, 3",
            "str r4, [sp, 0x10]",
            "str r7, [sp, 0x14]",
            "ldr r6, [0x00008e94]",
            "bl sym.imp.zylog",
            "b 0x8e5c",
            "ldr r3, [r4, sl]",
            "mov r0, r6",
            "ldr r1, [r3]",
            "bl sym.imp.fputc",
            "b 0x8db0",
            "ldr sl, [0x00008e98]",
            "ldr r3, [r5, 0x4c]",
            "cmp r3, 0",
            "beq 0x8de0",
            "ldr r3, [r5, 0x10]",
            "ldr r2, [r5, 0x18]",
            "cmp r3, r2",
            "ldrblo r6, [r3], 1",
            "strlo r3, [r5, 0x10]",
            "blo 0x8d98",
            "mov r0, r5",
            "bl sym.imp.__fgetc_unlocked",
            "b 0x8de8",
            "mov r0, r5",
            "bl sym.imp.fgetc",
            "cmn r0, 1",
            "mov r6, r0",
            "bne 0x8d98",
            "ldr r3, [0x00008e98]",
            "ldr r3, [r4, r3]",
            "ldr r0, [r3]",
            "bl sym.imp.fflush",
            "cmp r8, 0",
            "ldr r2, [0x00008e84]",
            "ldrne r2, [0x00008e88]",
            "ldr r1, [0x00008e8c]",
            "add r2, r4, r2",
            "mov r0, 0x1b",
            "mov r3, 0",
            "str r2, [sp, 0x18]",
            "mov r2, r0",
            "add r1, r4, r1",
            "str r3, [sp]",
            "str r1, [sp, 0xc]",
            "ldr r1, [0x00008e9c]",
            "str r3, [sp, 4]",
            "str r3, [sp, 8]",
            "add r4, r4, r1",
            "mov r1, 6",
            "str r4, [sp, 0x10]",
            "str r7, [sp, 0x14]",
            "bl sym.imp.zylog",
            "mov r0, r5",
            "bl sym.imp.fclose",
            "mov r0, r6",
            "add sp, sp, 0x24",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "fcn.00009fb0": {
        "function_address": "0x00009fb0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "sub sp, sp, 0x84",
            "mov r2, 0x80",
            "mov r7, r0",
            "mov r8, r1",
            "mov r0, sp",
            "mov r1, 0",
            "ldr r4, aav.0x0000a110",
            "bl sym.imp.memset",
            "ldr r3, [0x0000a12c]",
            "mov r6, sp",
            "add r4, pc, r4",
            "ldr r0, [0x0000a130]",
            "ldr r5, [r4, r3]",
            "add r0, r4, r0",
            "ldr r1, [r5]",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a134]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a138]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "mov r0, r7",
            "mov r1, r8",
            "mov r2, sp",
            "mov r3, 0",
            "bl fcn.000099cc",
            "cmn r0, 1",
            "mov sl, r0",
            "beq 0xa11c",
            "cmp r0, 1",
            "bne 0xa098",
            "ldr r0, [0x0000a13c]",
            "mov sl, 0",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a140]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "ldr r1, [0x0000a144]",
            "mov r2, sp",
            "ldr r0, [r5]",
            "add r1, r4, r1",
            "bl sym.imp.fprintf",
            "ldr r0, [0x0000a148]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a14c]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "b 0xa11c",
            "cmp r0, 2",
            "mvnne sl, 0",
            "bne 0xa11c",
            "ldr r0, [0x0000a13c]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a140]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "mov r0, r7",
            "mov r1, r8",
            "bl fcn.00009de8",
            "cmp r0, 1",
            "mov sl, r0",
            "bne 0xa0f4",
            "ldr r1, [0x0000a150]",
            "mov sl, 0",
            "ldr r0, [r5]",
            "mov r2, sp",
            "add r1, r4, r1",
            "bl sym.imp.fprintf",
            "ldr r3, [0x0000a12c]",
            "ldr r0, [0x0000a148]",
            "ldr r5, [r4, r3]",
            "add r0, r4, r0",
            "ldr r1, [r5]",
            "bl sym.imp.fputs",
            "ldr r0, [0x0000a14c]",
            "ldr r1, [r5]",
            "add r0, r4, r0",
            "bl sym.imp.fputs",
            "mov r0, sl",
            "add sp, sp, 0x84",
            "pop {r4, r5, r6, r7, r8, sl, pc}"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x000089a4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x760]!"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x000089c8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x748]!"
        ]
    },
    "entry.init0": {
        "function_address": "0x00008bec",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x00008c2c]",
            "cmp r3, 0",
            "beq 0x8c08",
            "ldr r0, [0x00008c30]",
            "ldr r1, [0x00008c34]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x00008c38]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00008c3c]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00008b48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x648]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008ba8",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, loc.__bss_start__",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x00008be4]",
            "cmp r3, 0",
            "beq 0x8bd0",
            "ldr r0, [0x00008be8]",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, loc.__bss_start__",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00008a40",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6f8]!"
        ]
    },
    "fcn.00008ea0": {
        "function_address": "0x00008ea0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, lr}",
            "sub sp, sp, 0x510",
            "mov r7, r1",
            "mov r8, r2",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r6, r0",
            "add r0, sp, 0x10",
            "bl sym.imp.memset",
            "add r5, sp, 0x410",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, sp, 0x490",
            "bl sym.imp.memset",
            "mov r2, 0x80",
            "mov r1, 0",
            "mov r0, r5",
            "ldr r4, aav.0x0000b1f0",
            "bl sym.imp.memset",
            "mov r1, 0x2f",
            "mov r0, r7",
            "bl sym.imp.strrchr",
            "subs r1, r0, 0",
            "add r4, pc, r4",
            "movne r0, r5",
            "addne r1, r1, 1",
            "moveq r0, r5",
            "moveq r1, r7",
            "bl sym.imp.strcpy",
            "cmp r8, 0",
            "ldr r3, [0x00008fe4]",
            "ldrne r3, [0x00008fe8]",
            "cmp r6, 2",
            "add r3, r4, r3",
            "beq 0x8f3c",
            "cmp r6, 1",
            "ldr r2, [0x00008fec]",
            "bne 0x8f40",
            "b 0x8f4c",
            "ldr r2, [0x00008ff0]",
            "add r2, r4, r2",
            "ldr r1, [0x00008ff4]",
            "b 0x8f54",
            "ldr r1, [0x00008ff8]",
            "add r2, r4, r2",
            "str r2, [sp]",
            "add r2, sp, 0x410",
            "str r2, [sp, 8]",
            "add r1, r4, r1",
            "ldr r2, [0x00008ffc]",
            "add r5, sp, 0x10",
            "str r1, [sp, 4]",
            "mov r0, r5",
            "mov r1, 0x400",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "ldr r1, [0x00009000]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r5, r0, 0",
            "mvneq r4, 0",
            "beq 0x8fd4",
            "add r6, sp, 0x490",
            "mov r1, 0x80",
            "mov r2, r5",
            "mov r0, r6",
            "bl sym.imp.fgets",
            "ldr r1, [0x00009004]",
            "mov r0, r6",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "moveq r4, r0",
            "mvnne r4, 0",
            "mov r0, r5",
            "bl sym.imp.pclose",
            "mov r0, r4",
            "add sp, sp, 0x510",
            "pop {r4, r5, r6, r7, r8, pc}"
        ]
    },
    "sym.imp.strrchr": {
        "function_address": "0x00008a10",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x718]!"
        ]
    },
    "sym.imp.popen": {
        "function_address": "0x0000898c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x770]!"
        ]
    },
    "sym.imp.fgets": {
        "function_address": "0x000089b0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x758]!"
        ]
    },
    "sym.imp.pclose": {
        "function_address": "0x00008998",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "fcn.00009008": {
        "function_address": "0x00009008",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "sub sp, sp, 0x480",
            "sub sp, sp, 0xc",
            "mov r7, r0",
            "add r6, sp, 8",
            "add r5, sp, 0x400",
            "mov r0, r6",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r5, r5, 8",
            "bl sym.imp.memset",
            "ldr r4, aav.0x0000b0a0",
            "mov r1, 0",
            "mov r2, 0x80",
            "mov r0, r5",
            "bl sym.imp.memset",
            "ldr r2, [0x000090d0]",
            "add r4, pc, r4",
            "ldr r3, [0x000090d4]",
            "mov r0, r6",
            "mov r1, 0x400",
            "str r7, [sp]",
            "add r2, r4, r2",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "ldr r1, [0x000090d8]",
            "mov r0, r6",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "mvneq r4, 0",
            "beq 0x90bc",
            "mov r1, 0x80",
            "mov r2, r6",
            "mov r0, r5",
            "bl sym.imp.fgets",
            "ldr r1, [0x000090dc]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "moveq r4, r0",
            "mvnne r4, 0",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "mov r0, r4",
            "add sp, sp, 0x8c",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, pc}"
        ]
    },
    "fcn.000090e0": {
        "function_address": "0x000090e0",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0xc",
            "mov sl, r0",
            "add r6, sp, 0xc00",
            "mov r2, 0x400",
            "add r6, r6, 8",
            "mov fp, r1",
            "mov r0, r6",
            "mov r1, 0",
            "bl sym.imp.memset",
            "add r7, sp, 0x400",
            "add r0, sp, 0x800",
            "add r7, r7, 8",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, r0, 8",
            "bl sym.imp.memset",
            "add r5, sp, 8",
            "mov r0, r7",
            "mov r1, 0",
            "mov r2, 0x400",
            "bl sym.imp.memset",
            "ldr r4, aav.0x0000af98",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r0, r5",
            "bl sym.imp.memset",
            "ldr r2, [0x00009340]",
            "add r4, pc, r4",
            "mov r0, r7",
            "mov r1, 0x400",
            "mov r3, sl",
            "ldr r8, [0x00009344]",
            "add r2, r4, r2",
            "bl sym.imp.snprintf",
            "ldr r1, [0x00009348]",
            "mov r0, r7",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r7, r0, 0",
            "beq 0x9320",
            "add r2, sp, 0x1000",
            "mov r3, 0",
            "add r2, r2, 8",
            "mov r0, r5",
            "strb r3, [r2, r8]",
            "mov r1, 0x400",
            "mov r2, r7",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x9330",
            "ldr r1, [0x0000934c]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "subs sl, r0, 0",
            "bne 0x9330",
            "mov r0, r6",
            "mov r1, r5",
            "bl sym.imp.strcpy",
            "add r3, sp, 0x1000",
            "mov sb, r6",
            "add r3, r3, 8",
            "strb sl, [r3, r8]",
            "b 0x9200",
            "mov r0, sb",
            "mov r1, r5",
            "bl sym.imp.strcat",
            "add r2, sp, 0x1000",
            "add r2, r2, 8",
            "strb sl, [r2, r8]",
            "mov r0, r5",
            "mov r1, 0x400",
            "mov r2, r7",
            "bl sym.imp.fgets",
            "subs r6, r0, 0",
            "bne 0x91e8",
            "mov r0, r7",
            "add r7, sp, 0x1000",
            "bl sym.imp.pclose",
            "ldr r2, [0x00009350]",
            "add r7, r7, 8",
            "ldr r3, [0x00009354]",
            "mov r1, 0x400",
            "strb r6, [r7, -0xc00]!",
            "mov r0, r7",
            "add r2, r4, r2",
            "str fp, [sp]",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "ldr r1, [0x00009348]",
            "mov r0, r7",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r7, r0, 0",
            "beq 0x9320",
            "ldr r8, [0x00009344]",
            "add r3, sp, 0x1000",
            "add r3, r3, 8",
            "mov r0, r5",
            "mov r1, 0x400",
            "mov r2, r7",
            "strb r6, [r3, r8]",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "beq 0x9330",
            "ldr r1, [0x0000934c]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "subs r6, r0, 0",
            "bne 0x9330",
            "add r4, sp, 0x800",
            "mov r1, r5",
            "add r4, r4, 8",
            "mov r0, r4",
            "bl sym.imp.strcpy",
            "add r2, sp, 0x1000",
            "add r2, r2, 8",
            "strb r6, [r2, r8]",
            "b 0x92e0",
            "mov r0, r4",
            "mov r1, r5",
            "bl sym.imp.strcat",
            "add r3, sp, 0x1000",
            "add r3, r3, 8",
            "strb r6, [r3, r8]",
            "mov r0, r5",
            "mov r1, 0x400",
            "mov r2, r7",
            "bl sym.imp.fgets",
            "cmp r0, 0",
            "bne 0x92c8",
            "mov r0, r7",
            "bl sym.imp.pclose",
            "add r0, sp, 0xc00",
            "mov r1, r4",
            "add r0, r0, 8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "moveq r0, 1",
            "mvnne r0, 0",
            "b 0x9324",
            "mvn r0, 0",
            "add sp, sp, 0xc",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "mov r0, r7",
            "bl sym.imp.pclose",
            "b 0x9320"
        ]
    },
    "sym.imp.strcat": {
        "function_address": "0x00008a34",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x700]!"
        ]
    },
    "fcn.00008c40": {
        "function_address": "0x00008c40",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r5, r1",
            "sub sp, sp, 0x200",
            "mov r1, 0",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "mov r4, r0",
            "moveq r0, r0",
            "beq 0x8cc8",
            "mov r0, r5",
            "mov r1, 0x41",
            "bl sym.imp.open64",
            "cmn r0, 1",
            "mov r5, r0",
            "movne r6, sp",
            "bne 0x8c9c",
            "mov r0, r4",
            "bl sym.imp.close",
            "mov r0, r5",
            "b 0x8cc8",
            "mov r0, r5",
            "mov r1, sp",
            "bl sym.imp.write",
            "mov r2, 0x200",
            "mov r0, r4",
            "mov r1, sp",
            "bl sym.imp.read",
            "subs r2, r0, 0",
            "bgt 0x8c90",
            "mov r0, r4",
            "bl sym.imp.close",
            "mov r0, r5",
            "bl sym.imp.close",
            "mov r0, 0",
            "add sp, sp, 0x200",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "sym.imp.open64": {
        "function_address": "0x00008ab8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6a8]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008b54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x640]!"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00008a1c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x710]!"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00008a58",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6e8]!"
        ]
    },
    "fcn.000096ac": {
        "function_address": "0x000096ac",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "subs r8, r0, 0",
            "ldr r4, aav.0x0000aa24",
            "sub sp, sp, 0x420",
            "sub sp, sp, 4",
            "mov sl, r1",
            "mov r5, r2",
            "add r4, pc, r4",
            "bne 0x9844",
            "ldr fp, [0x000099a0]",
            "mov r0, r2",
            "ldr sb, [0x000099a4]",
            "ldr r3, [0x000099a8]",
            "add fp, r4, fp",
            "strb r8, [r2]",
            "add sb, r4, sb",
            "str r1, [sp, 4]",
            "mov r2, fp",
            "mov r1, 0x400",
            "add r3, r4, r3",
            "str sb, [sp]",
            "bl sym.imp.snprintf",
            "ldr r3, [0x000099ac]",
            "mov r0, r5",
            "add r3, r4, r3",
            "mov r1, r3",
            "str r3, [sp, 0x14]",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0x9988",
            "add r7, sp, 0x420",
            "mov r1, 0x400",
            "strb r8, [r7, -0x400]!",
            "mov r2, r6",
            "mov r0, r7",
            "bl sym.imp.fgets",
            "ldr r3, [0x000099b0]",
            "mov r0, r7",
            "add r3, r4, r3",
            "mov r1, r3",
            "str r3, [sp, 0x18]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9834",
            "ldr r3, [0x000099b4]",
            "mov r1, 0x400",
            "mov r2, fp",
            "strb r8, [r5]",
            "mov r0, r5",
            "str sb, [sp]",
            "add r3, r4, r3",
            "str sl, [sp, 4]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "mov r0, r5",
            "ldr r1, [sp, 0x14]",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0x9988",
            "mov r1, 0x400",
            "mov r2, r6",
            "mov r0, r7",
            "strb r8, [sp, 0x20]",
            "bl sym.imp.fgets",
            "ldr r1, [0x000099b8]",
            "mov r0, r7",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "moveq r4, r0",
            "beq 0x9838",
            "ldr r3, [0x000099bc]",
            "mov r1, 0x400",
            "mov r2, fp",
            "strb r8, [r5]",
            "mov r0, r5",
            "str sb, [sp]",
            "add r3, r4, r3",
            "str sl, [sp, 4]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "mov r0, r5",
            "ldr r1, [sp, 0x14]",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0x9988",
            "mov r1, 0x400",
            "mov r2, r6",
            "mov r0, r7",
            "strb r8, [sp, 0x20]",
            "bl sym.imp.fgets",
            "mov r0, r7",
            "ldr r1, [sp, 0x18]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x9964",
            "mov r4, 2",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "b 0x998c",
            "cmp r8, 1",
            "bne 0x9984",
            "ldr r3, [0x000099c0]",
            "mov r8, 0",
            "strb r8, [r2]",
            "mov r0, r2",
            "ldr sb, [0x000099a4]",
            "add r3, r4, r3",
            "ldr fp, [0x000099c4]",
            "mov r2, r3",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x000099a8]",
            "add sb, r4, sb",
            "str r1, [sp, 8]",
            "add fp, r4, fp",
            "mov r1, 0x400",
            "str sb, [sp]",
            "add r3, r4, r3",
            "str fp, [sp, 4]",
            "bl sym.imp.snprintf",
            "ldr r3, [0x000099ac]",
            "mov r0, r5",
            "add r3, r4, r3",
            "mov r1, r3",
            "str r3, [sp, 0x18]",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "beq 0x9988",
            "add r7, sp, 0x420",
            "mov r1, 0x400",
            "strb r8, [r7, -0x400]!",
            "mov r2, r6",
            "mov r0, r7",
            "bl sym.imp.fgets",
            "ldr r3, [0x000099b0]",
            "mov r0, r7",
            "add r3, r4, r3",
            "mov r1, r3",
            "str r3, [sp, 0x1c]",
            "bl sym.imp.strcmp",
            "cmp r0, r8",
            "beq 0x9974",
            "ldr r3, [0x000099bc]",
            "mov r1, 0x400",
            "ldr r2, [sp, 0x14]",
            "mov r0, r5",
            "strb r8, [r5]",
            "add r3, r4, r3",
            "stm sp, {sb, fp}",
            "str sl, [sp, 8]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "mov r0, r5",
            "ldr r1, [sp, 0x18]",
            "bl sym.imp.popen",
            "subs r6, r0, 0",
            "bne 0x993c",
            "ldr r0, [0x000099c8]",
            "add r0, r4, r0",
            "bl sym.imp.puts",
            "b 0x9988",
            "mov r1, 0x400",
            "mov r2, r6",
            "mov r0, r7",
            "strb r8, [sp, 0x20]",
            "bl sym.imp.fgets",
            "mov r0, r7",
            "ldr r1, [sp, 0x1c]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9974",
            "mov r0, r6",
            "bl sym.imp.pclose",
            "strb r8, [r5]",
            "b 0x9988",
            "mov r0, r6",
            "mov r4, 2",
            "bl sym.imp.pclose",
            "b 0x998c",
            "b 0x9990",
            "mvn r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x24",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x000089bc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x750]!"
        ]
    },
    "fcn.00009b7c": {
        "function_address": "0x00009b7c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x890",
            "sub sp, sp, 0xc",
            "mov r8, r0",
            "add r5, sp, 0x410",
            "mov r6, r1",
            "add r5, r5, 8",
            "mov r1, 0",
            "mov r0, r5",
            "mov r2, 0x400",
            "add sl, sp, 0x18",
            "add r7, sp, 0x810",
            "bl sym.imp.memset",
            "add r7, r7, 8",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r0, sl",
            "bl sym.imp.memset",
            "ldr r4, aav.0x0000a510",
            "mov r1, 0",
            "mov r2, 0x80",
            "mov r0, r7",
            "bl sym.imp.memset",
            "ldr r3, [0x00009dbc]",
            "add r4, pc, r4",
            "ldr r2, [0x00009dc0]",
            "mov r1, 0x80",
            "mov r0, r7",
            "str r6, [sp, 4]",
            "add r3, r4, r3",
            "ldr sb, [0x00009dc4]",
            "str r3, [sp]",
            "add r2, r4, r2",
            "ldr r3, [0x00009dc8]",
            "mov r6, 0",
            "ldr fp, [0x00009dcc]",
            "add sb, r4, sb",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "ldr ip, [0x00009dd0]",
            "mov r1, 0x400",
            "ldr r3, [0x00009dd4]",
            "add fp, r4, fp",
            "mov r0, r5",
            "str r8, [sp]",
            "add ip, r4, ip",
            "str sb, [sp, 4]",
            "add r3, r4, r3",
            "mov r2, ip",
            "str r3, [sp, 0x14]",
            "str ip, [sp, 0x10]",
            "str r8, [sp, 8]",
            "str fp, [sp, 0xc]",
            "bl sym.imp.snprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr ip, [sp, 0x10]",
            "mov r1, 0x400",
            "ldr r3, [sp, 0x14]",
            "mov r0, r5",
            "strb r6, [sp, 0x418]",
            "mov r2, ip",
            "stm sp, {r7, sb}",
            "str r7, [sp, 8]",
            "str fp, [sp, 0xc]",
            "bl sym.imp.snprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr r2, [0x00009dd8]",
            "mov r0, r5",
            "mov r1, 0x400",
            "mov r3, r7",
            "strb r6, [sp, 0x418]",
            "add r2, r4, r2",
            "str r8, [sp]",
            "bl sym.imp.snprintf",
            "ldr r1, [0x00009ddc]",
            "mov r0, r5",
            "add r1, r4, r1",
            "bl sym.imp.popen",
            "subs r5, r0, 0",
            "beq 0x9d2c",
            "mov r0, sl",
            "mov r1, 0x400",
            "mov r2, r5",
            "strb r6, [sp, 0x18]",
            "bl sym.imp.fgets",
            "subs r7, r0, 0",
            "bne 0x9cf0",
            "mov r0, r5",
            "mov r5, r7",
            "bl sym.imp.pclose",
            "b 0x9d2c",
            "mov r0, sl",
            "mov r1, 0x3a",
            "bl sym.imp.strrchr",
            "subs r7, r0, 0",
            "beq 0x9d30",
            "ldr r1, [0x00009de0]",
            "add r0, r7, 2",
            "add r1, r4, r1",
            "bl sym.imp.strcmp",
            "rsbs r7, r0, 1",
            "movlo r7, 0",
            "mov r0, r5",
            "bl sym.imp.pclose",
            "mov r5, r6",
            "b 0x9d30",
            "mvn r7, 0",
            "ldr r3, [0x00009dcc]",
            "add r6, sp, 0x890",
            "ldr sb, [0x00009de4]",
            "add r6, r6, 8",
            "mov sl, 0",
            "mov r1, 0x400",
            "strb sl, [r6, -0x880]!",
            "mov r0, r6",
            "add sb, r4, sb",
            "add r4, r4, r3",
            "add r3, sp, 0x810",
            "mov r2, sb",
            "add r3, r3, 8",
            "str r4, [sp]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.remove",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r8",
            "mov r0, r6",
            "strb sl, [sp, 0x18]",
            "str r4, [sp]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.remove",
            "cmp r5, sl",
            "beq 0x9da8",
            "mov r0, r5",
            "bl sym.imp.pclose",
            "mov r0, r7",
            "add sp, sp, 0x9c",
            "add sp, sp, 0x800",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.remove": {
        "function_address": "0x00009358",
        "instructions": [
            "b sym.imp.unlink"
        ]
    },
    "fcn.000099cc": {
        "function_address": "0x000099cc",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x1000",
            "sub sp, sp, 0xc",
            "mov r5, 0",
            "add r8, sp, 0x1000",
            "add r8, r8, 8",
            "str r2, [sp]",
            "strb r5, [r8, -0x400]!",
            "mov r2, r8",
            "ldr r7, aav.0x0000a6ec",
            "str r3, [sp, 4]",
            "bl fcn.000096ac",
            "cmn r0, 1",
            "add r7, pc, r7",
            "mov r4, r0",
            "beq 0x9b58",
            "cmp r0, r5",
            "beq 0x9b58",
            "ldr r2, [0x00009b6c]",
            "add r6, sp, 0x1000",
            "ldr fp, [0x00009b70]",
            "add r6, r6, 8",
            "strb r5, [r6, -0x800]!",
            "mov r1, 0x400",
            "add r2, r7, r2",
            "mov r3, r8",
            "mov r0, r6",
            "add fp, r7, fp",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "mov r1, fp",
            "bl sym.imp.popen",
            "subs sb, r0, 0",
            "beq 0x9b54",
            "add sl, sp, 0x1000",
            "mov r1, 0x400",
            "add sl, sl, 8",
            "mov r2, sb",
            "strb r5, [sl, -0xc00]!",
            "mov r0, sl",
            "bl sym.imp.fgets",
            "mov r0, sb",
            "bl sym.imp.pclose",
            "ldr r2, [0x00009b74]",
            "mov r1, 0x400",
            "mov r3, r8",
            "mov r0, r6",
            "strb r5, [sp, 0x808]",
            "add r2, r7, r2",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "mov r1, fp",
            "bl sym.imp.popen",
            "subs r7, r0, 0",
            "beq 0x9b54",
            "ldr r3, [0x00009b78]",
            "add r2, sp, 0x1000",
            "add r2, r2, 8",
            "add r6, sp, 8",
            "mov r1, 0x400",
            "mov r0, r6",
            "strb r5, [r2, r3]",
            "mov r2, r7",
            "bl sym.imp.fgets",
            "mov r0, r7",
            "bl sym.imp.pclose",
            "add r0, sl, 9",
            "add r1, r6, 8",
            "bl sym.imp.strcmp",
            "ldr r3, [sp]",
            "cmp r0, r5",
            "moveq r4, 1",
            "cmp r3, r5",
            "beq 0x9b1c",
            "mov r1, 0xa",
            "mov r0, sl",
            "bl sym.imp.strrchr",
            "add r1, sp, 0x400",
            "cmp r0, 0",
            "add r1, r1, 8",
            "strbne r5, [r0]",
            "add r1, r1, 9",
            "ldr r0, [sp]",
            "bl sym.imp.strcpy",
            "ldr r2, [sp, 4]",
            "cmp r2, 0",
            "beq 0x9b58",
            "add r0, sp, 8",
            "mov r1, 0xa",
            "bl sym.imp.strrchr",
            "cmp r0, 0",
            "add r1, sp, 8",
            "movne r3, 0",
            "add r1, r1, 8",
            "strbne r3, [r0]",
            "ldr r0, [sp, 4]",
            "bl sym.imp.strcpy",
            "b 0x9b58",
            "mvn r4, 0",
            "mov r0, r4",
            "add sp, sp, 0xc",
            "add sp, sp, 0x1000",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "fcn.00009de8": {
        "function_address": "0x00009de8",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "sub sp, sp, 0x500",
            "sub sp, sp, 8",
            "mov r7, r0",
            "add r8, sp, 0x480",
            "mov r2, 0x80",
            "add r8, r8, 8",
            "mov r6, r1",
            "mov r0, r8",
            "mov r1, 0",
            "bl sym.imp.memset",
            "add r0, sp, 0x400",
            "mov r1, 0",
            "mov r2, 0x80",
            "add r0, r0, 8",
            "bl sym.imp.memset",
            "ldr r4, aav.0x0000a2ac",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, sp, 8",
            "bl sym.imp.memset",
            "ldr r5, [0x00009f8c]",
            "add r4, pc, r4",
            "ldr r2, [0x00009f90]",
            "mov r0, r8",
            "ldr r3, [0x00009f94]",
            "mov r1, 0x80",
            "add r5, r4, r5",
            "add r2, r4, r2",
            "str r5, [sp]",
            "add r3, r4, r3",
            "bl sym.imp.snprintf",
            "cmp r7, 0",
            "ldreq r5, [0x00009f98]",
            "addeq r5, r4, r5",
            "ldr r2, [0x00009f9c]",
            "add r7, sp, 0x400",
            "ldr r3, [0x00009f94]",
            "add r7, r7, 8",
            "mov r1, 0x80",
            "mov r0, r7",
            "add r2, r4, r2",
            "str r5, [sp]",
            "add r3, r4, r3",
            "str r6, [sp, 4]",
            "bl sym.imp.snprintf",
            "add r0, sp, 0x480",
            "add r0, r0, 8",
            "bl sym.imp.opendir",
            "subs r6, r0, 0",
            "mvneq r5, 0",
            "beq 0x9f6c",
            "ldr sb, [0x00009fa0]",
            "mov r5, 0",
            "ldr sl, [0x00009fa4]",
            "add sb, r4, sb",
            "add sl, r4, sl",
            "b 0x9f58",
            "add r8, r0, 0x13",
            "mov r1, sb",
            "mov r0, r8",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9f58",
            "mov r0, r8",
            "mov r1, sl",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x9f58",
            "mov r0, r7",
            "mov r1, r8",
            "bl fcn.00009b7c",
            "subs r5, r0, 0",
            "beq 0x9f58",
            "cmp r5, 1",
            "bne 0x9f58",
            "add r7, sp, 8",
            "mov r1, r8",
            "mov r2, r7",
            "mov r3, 0",
            "bl fcn.000099cc",
            "cmn r0, 1",
            "moveq r5, r0",
            "beq 0x9f7c",
            "ldr r3, [0x00009fa8]",
            "mov r2, r7",
            "ldr r1, [0x00009fac]",
            "ldr r3, [r4, r3]",
            "add r1, r4, r1",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "b 0x9f7c",
            "mov r0, r6",
            "bl sym.imp.readdir64",
            "cmp r0, 0",
            "bne 0x9ed0",
            "b 0x9f7c",
            "mov r0, r5",
            "add sp, sp, 0x108",
            "add sp, sp, 0x400",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r0, r6",
            "bl sym.imp.closedir",
            "b 0x9f6c"
        ]
    },
    "sym.imp.opendir": {
        "function_address": "0x00008ac4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6a0]!"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x00008a28",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x708]!"
        ]
    },
    "sym.imp.readdir64": {
        "function_address": "0x00008a88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6c8]!"
        ]
    },
    "sym.imp.closedir": {
        "function_address": "0x00008b3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x650]!"
        ]
    },
    "fcn.0000935c": {
        "function_address": "0x0000935c",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0xc20",
            "sub sp, sp, 4",
            "ldr r4, aav.0x0000ad6c",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r5, r0",
            "ldr fp, [0x00009688]",
            "add r0, sp, 0x820",
            "add r4, pc, r4",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, sp, 0x420",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x400",
            "add r0, sp, 0x20",
            "bl sym.imp.memset",
            "add r0, r4, fp",
            "bl sym.imp.opendir",
            "cmp r0, 0",
            "str r0, [sp, 0xc]",
            "mvneq sl, 0",
            "beq 0x9668",
            "mov r0, 0",
            "mov r1, r5",
            "mov r2, r0",
            "bl fcn.00008ea0",
            "cmp r0, 0",
            "ldreq sl, [0x0000968c]",
            "beq 0x9678",
            "mov r0, 2",
            "mov r1, r5",
            "mov r2, 0",
            "bl fcn.00008ea0",
            "subs sl, r0, 0",
            "bne 0x9678",
            "ldr r3, [0x00009690]",
            "mov r8, sl",
            "ldr sb, [0x00009694]",
            "str sl, [sp, 0x1c]",
            "add r3, r4, r3",
            "str r3, [sp, 0x10]",
            "add sb, r4, sb",
            "ldr r3, [0x00009698]",
            "add r3, r4, r3",
            "str r3, [sp, 0x14]",
            "ldr r3, [0x0000969c]",
            "add r3, r4, r3",
            "str r3, [sp, 0x18]",
            "b 0x95fc",
            "add r7, r0, 0x13",
            "ldr r1, [sp, 0x10]",
            "mov r0, r7",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x95fc",
            "mov r0, r7",
            "ldr r1, [sp, 0x14]",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "beq 0x95fc",
            "mov r0, r7",
            "bl fcn.00009008",
            "cmp r0, 0",
            "bne 0x95fc",
            "mov r0, r5",
            "mov r1, r7",
            "bl fcn.000090e0",
            "cmp r0, 1",
            "bne 0x95fc",
            "add r6, sp, 0xc20",
            "mov r1, 0x400",
            "strb r8, [r6, -0x400]!",
            "mov r2, sb",
            "ldr r3, [sp, 0x18]",
            "mov r0, r6",
            "str r7, [sp]",
            "bl sym.imp.snprintf",
            "mov r0, r5",
            "mov r1, r6",
            "bl sym.imp.strcmp",
            "cmp r0, 0",
            "bne 0x94cc",
            "strb r8, [sp, 0x820]",
            "mov r0, r6",
            "str r7, [sp]",
            "mov r1, 0x400",
            "mov r2, sb",
            "add r3, r4, fp",
            "b 0x951c",
            "add sl, r4, fp",
            "mov r2, sb",
            "mov r3, sl",
            "mov r1, 0x400",
            "mov r0, r6",
            "strb r8, [sp, 0x820]",
            "str r7, [sp]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "bl sym.remove",
            "mov r1, 0x2f",
            "mov r0, r5",
            "strb r8, [sp, 0x820]",
            "bl sym.imp.strrchr",
            "add r0, r0, 1",
            "mov r1, 0x400",
            "str r0, [sp]",
            "mov r2, sb",
            "mov r0, r6",
            "mov r3, sl",
            "add sl, sp, 0x820",
            "add r6, sp, 0xc20",
            "bl sym.imp.snprintf",
            "mov r1, sl",
            "mov r0, r5",
            "bl fcn.00008c40",
            "mov r1, 0x1a4",
            "mov r0, sl",
            "bl sym.imp.chmod",
            "mov r8, 0",
            "mov r0, r5",
            "bl sym.remove",
            "strb r8, [r6, -0x800]!",
            "mov r1, r7",
            "mov r0, r6",
            "bl sym.imp.strcpy",
            "ldr r3, [0x000096a0]",
            "mov r1, 0x400",
            "ldr r2, [0x000096a4]",
            "mov r0, sl",
            "strb r8, [sp, 0x820]",
            "add r3, r4, r3",
            "str r6, [sp]",
            "add r2, r4, r2",
            "str r3, [sp, 4]",
            "add r3, r4, fp",
            "bl sym.imp.snprintf",
            "mov r1, 0x2f",
            "mov r0, r5",
            "bl sym.imp.strrchr",
            "subs r1, r0, 0",
            "strbeq r1, [sp, 0x420]",
            "movne r0, r6",
            "addne r1, r1, 1",
            "moveq r0, r6",
            "moveq r1, r5",
            "strbne r8, [sp, 0x420]",
            "add r6, sp, 0xc20",
            "mov r8, 1",
            "bl sym.imp.strcpy",
            "mov r3, 0",
            "ldr r2, [0x000096a4]",
            "strb r3, [r6, -0xc00]!",
            "add r3, sp, 0x420",
            "str r3, [sp]",
            "mov r1, 0x400",
            "ldr r3, [0x000096a0]",
            "add r2, r4, r2",
            "mov r0, r6",
            "add r3, r4, r3",
            "str r3, [sp, 4]",
            "add r3, r4, fp",
            "bl sym.imp.snprintf",
            "add r0, sp, 0x820",
            "mov r1, r6",
            "bl sym.imp.rename",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.readdir64",
            "cmp r0, 0",
            "beq 0x9614",
            "cmp r8, 0",
            "beq 0x942c",
            "cmp r8, 1",
            "ldr sl, [sp, 0x1c]",
            "beq 0x9678",
            "mov r0, r5",
            "mov r1, 0x2f",
            "bl sym.imp.strrchr",
            "ldr r2, [0x00009694]",
            "cmp r0, 0",
            "ldr r3, [0x0000969c]",
            "add r6, sp, 0x820",
            "addne r5, r0, 1",
            "mov r1, 0x400",
            "add r2, r4, r2",
            "mov r0, r6",
            "add r3, r4, r3",
            "str r5, [sp]",
            "bl sym.imp.snprintf",
            "mov r0, r6",
            "ldr sl, [0x000096a8]",
            "bl sym.remove",
            "b 0x9678",
            "mov r0, sl",
            "add sp, sp, 0x24",
            "add sp, sp, 0xc00",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "ldr r0, [sp, 0xc]",
            "bl sym.imp.closedir",
            "b 0x9668"
        ]
    },
    "sym.imp.chmod": {
        "function_address": "0x000089f8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x728]!"
        ]
    },
    "sym.imp.rename": {
        "function_address": "0x00008a04",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x720]!"
        ]
    },
    "fcn.0000a154": {
        "function_address": "0x0000a154",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x820",
            "sub sp, sp, 4",
            "mov r6, r0",
            "add r8, sp, 0x420",
            "mov r2, 0x400",
            "mov fp, r1",
            "mov r0, r8",
            "mov r1, 0",
            "add r4, sp, 0x20",
            "bl sym.imp.memset",
            "mov r1, 0",
            "mov r2, 0x400",
            "mov r0, r4",
            "ldr r5, aav.0x00009f48",
            "bl sym.imp.memset",
            "mov r0, r6",
            "mov r1, 0",
            "bl sym.imp.access",
            "cmp r0, 0",
            "add r5, pc, r5",
            "str r0, [sp, 0x10]",
            "bne 0xa5d4",
            "ldrsb r7, [fp]",
            "ldr sb, [0x0000a5f4]",
            "ldr sl, [0x0000a5f8]",
            "cmp r7, 0",
            "bne 0xa32c",
            "add sb, r5, sb",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r6",
            "mov r0, r4",
            "add fp, r5, sl",
            "bl sym.imp.snprintf",
            "ldr r2, [0x0000a5fc]",
            "mov r1, 0x400",
            "mov r3, fp",
            "mov r0, r8",
            "str r6, [sp]",
            "add r2, r5, r2",
            "str r4, [sp, 4]",
            "bl sym.imp.snprintf",
            "mov r0, r8",
            "mov r1, 0x72",
            "bl sym.imp.popen",
            "subs sl, r0, 0",
            "beq 0xa5dc",
            "mov r1, 0x400",
            "mov r2, sl",
            "mov r0, r4",
            "strb r7, [sp, 0x20]",
            "bl sym.imp.fgets",
            "ldr r3, [0x0000a600]",
            "mov r0, r4",
            "add r3, r5, r3",
            "mov r1, r3",
            "str r3, [sp, 0x10]",
            "bl sym.imp.strcmp",
            "subs r7, r0, 0",
            "movne r0, sl",
            "bne 0xa308",
            "mov r0, sl",
            "bl sym.imp.pclose",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r6",
            "mov r0, r4",
            "strb r7, [sp, 0x20]",
            "bl sym.imp.snprintf",
            "mov r1, r7",
            "mov r0, r4",
            "bl sym.imp.access",
            "subs r7, r0, 0",
            "bne 0xa5dc",
            "ldr sl, [0x0000a604]",
            "mov r1, 0x400",
            "mov r3, r6",
            "mov r0, r4",
            "strb r7, [sp, 0x20]",
            "add sl, r5, sl",
            "mov r2, sl",
            "bl sym.imp.snprintf",
            "ldr r2, [0x0000a608]",
            "mov r0, r8",
            "mov r1, 0x400",
            "mov r3, fp",
            "strb r7, [sp, 0x420]",
            "add r2, r5, r2",
            "str r6, [sp]",
            "str r4, [sp, 4]",
            "bl sym.imp.snprintf",
            "ldr r1, [0x0000a60c]",
            "mov r0, r8",
            "add r1, r5, r1",
            "bl sym.imp.popen",
            "subs r8, r0, 0",
            "beq 0xa5dc",
            "mov r1, 0x400",
            "mov r2, r8",
            "mov r0, r4",
            "strb r7, [sp, 0x20]",
            "bl sym.imp.fgets",
            "mov r0, r4",
            "ldr r1, [sp, 0x10]",
            "bl sym.imp.strcmp",
            "subs r7, r0, 0",
            "beq 0xa310",
            "mov r0, r8",
            "bl sym.imp.pclose",
            "b 0xa5d4",
            "mov r0, r8",
            "bl sym.imp.pclose",
            "strb r7, [sp, 0x20]",
            "mov r0, r4",
            "mov r1, 0x400",
            "mov r2, sl",
            "b 0xa528",
            "add sb, r5, sb",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r6",
            "mov r0, r4",
            "add sl, r5, sl",
            "bl sym.imp.snprintf",
            "ldr r2, [0x0000a610]",
            "mov r3, sl",
            "mov r1, 0x400",
            "mov r0, r8",
            "str sl, [sp, 0x14]",
            "add r2, r5, r2",
            "stm sp, {r6, fp}",
            "str r4, [sp, 8]",
            "bl sym.imp.snprintf",
            "ldr r3, [0x0000a60c]",
            "mov r0, r8",
            "add r3, r5, r3",
            "mov r1, r3",
            "str r3, [sp, 0x18]",
            "bl sym.imp.popen",
            "subs sl, r0, 0",
            "beq 0xa5dc",
            "ldr r3, [sp, 0x10]",
            "mov r1, 0x400",
            "mov r2, sl",
            "mov r0, r4",
            "strb r3, [sp, 0x20]",
            "bl sym.imp.fgets",
            "ldr r3, [0x0000a600]",
            "mov r0, r4",
            "add r3, r5, r3",
            "mov r1, r3",
            "str r3, [sp, 0x1c]",
            "bl sym.imp.strcmp",
            "subs r7, r0, 0",
            "beq 0xa410",
            "ldr r1, [0x0000a614]",
            "mov r0, r4",
            "add r1, r5, r1",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "ldreq r4, [0x0000a618]",
            "beq 0xa408",
            "ldr r3, [sp, 0x10]",
            "mov r0, r4",
            "mov r1, 0x400",
            "mov r2, sb",
            "strb r3, [sp, 0x20]",
            "mov r3, r6",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "ldr r4, [0x0000a61c]",
            "bl sym.remove",
            "mov r0, sl",
            "b 0xa508",
            "mov r0, sl",
            "bl sym.imp.pclose",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r6",
            "mov r0, r4",
            "strb r7, [sp, 0x20]",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "mov r1, r7",
            "bl sym.imp.access",
            "subs sl, r0, 0",
            "bne 0xa5dc",
            "ldr sb, [0x0000a604]",
            "mov r1, 0x400",
            "mov r3, r6",
            "mov r0, r4",
            "strb sl, [sp, 0x20]",
            "add sb, r5, sb",
            "mov r2, sb",
            "bl sym.imp.snprintf",
            "ldr r2, [0x0000a620]",
            "mov r0, r8",
            "mov r1, 0x400",
            "ldr r3, [sp, 0x14]",
            "strb sl, [sp, 0x420]",
            "add r2, r5, r2",
            "stm sp, {r6, fp}",
            "str r4, [sp, 8]",
            "bl sym.imp.snprintf",
            "mov r0, r8",
            "ldr r1, [sp, 0x18]",
            "bl sym.imp.popen",
            "subs r8, r0, 0",
            "beq 0xa5dc",
            "mov r1, 0x400",
            "mov r2, r8",
            "mov r0, r4",
            "strb sl, [sp, 0x20]",
            "bl sym.imp.fgets",
            "mov r0, r4",
            "ldr r1, [sp, 0x1c]",
            "bl sym.imp.strcmp",
            "subs r7, r0, 0",
            "beq aav.0x0000a510",
            "ldr r1, [0x0000a614]",
            "mov r0, r4",
            "add r1, r5, r1",
            "bl sym.imp.strstr",
            "cmp r0, 0",
            "ldreq r4, [0x0000a618]",
            "beq 0xa504",
            "mov r0, r4",
            "mov r1, 0x400",
            "mov r2, sb",
            "mov r3, r6",
            "strb sl, [sp, 0x20]",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "ldr r4, [0x0000a61c]",
            "bl sym.remove",
            "mov r0, r8",
            "bl sym.imp.pclose",
            "b 0xa5e0",
            "mov r0, r8",
            "bl sym.imp.pclose",
            "mov r0, r4",
            "mov r1, 0x400",
            "mov r2, sb",
            "strb r7, [sp, 0x20]",
            "mov r3, r6",
            "bl sym.imp.snprintf",
            "mov r0, r4",
            "mov r1, r7",
            "bl sym.imp.access",
            "cmp r0, 0",
            "bne 0xa5dc",
            "mov r0, r6",
            "mov r8, 0",
            "bl sym.remove",
            "ldr r2, [0x0000a5f4]",
            "add r4, sp, 0x820",
            "strb r8, [r4, -0x800]!",
            "mov r1, 0x400",
            "mov r3, r6",
            "mov r0, r4",
            "add r2, r5, r2",
            "add r7, sp, 0x820",
            "bl sym.imp.snprintf",
            "ldr r3, [0x0000a624]",
            "mov r1, 0x400",
            "strb r8, [r7, -0x400]!",
            "mov r0, r7",
            "ldr r2, [0x0000a628]",
            "add r3, r5, r3",
            "str r4, [sp]",
            "str r3, [sp, 4]",
            "ldr r3, [0x0000a62c]",
            "add r2, r5, r2",
            "str r6, [sp, 8]",
            "add r3, r5, r3",
            "bl sym.imp.snprintf",
            "mov r0, r7",
            "bl sym.imp.system",
            "mov r0, r6",
            "mov r1, r8",
            "bl sym.imp.access",
            "subs r5, r0, 0",
            "bne 0xa5dc",
            "mov r0, r4",
            "mov r4, r5",
            "bl sym.remove",
            "b 0xa5e0",
            "ldr r4, [0x0000a618]",
            "b 0xa5e0",
            "ldr r4, [0x0000a630]",
            "mov r0, r4",
            "add sp, sp, 0x24",
            "add sp, sp, 0x800",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}"
        ]
    },
    "sym.imp.access": {
        "function_address": "0x00008af4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x680]!"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x00008a4c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6f0]!"
        ]
    },
    "sym.imp.fopen64": {
        "function_address": "0x00008b60",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x638]!"
        ]
    },
    "sym.imp.fputc": {
        "function_address": "0x00008ae8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x688]!"
        ]
    },
    "sym.imp.__fgetc_unlocked": {
        "function_address": "0x000089e0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x738]!"
        ]
    },
    "sym.imp.fgetc": {
        "function_address": "0x00008adc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x690]!"
        ]
    },
    "sym.imp.fflush": {
        "function_address": "0x000089d4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x740]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00008aac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x6b0]!"
        ]
    },
    "sym.imp.fputs": {
        "function_address": "0x00008b30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xb000",
            "ldr pc, [ip, 0x658]!"
        ]
    }
}