{
    "fcn.00009120": {
        "function_address": "0x00009120",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, fp, lr}",
            "sub sp, sp, 0x294",
            "ldr r5, aav.0x000088b0",
            "bl fcn.0000880c",
            "cmp r0, 0",
            "add r5, pc, r5",
            "beq 0x9148",
            "mov r0, 1",
            "add sp, sp, 0x294",
            "pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}",
            "bl fcn.000090c4",
            "bl fcn.000088f8",
            "cmp r0, 0",
            "bne 0x913c",
            "bl fcn.000089a0",
            "cmp r0, 0",
            "bne 0x913c",
            "ldr r0, [0x00009544]",
            "add r6, sp, 0x1fc",
            "ldr r1, [0x00009548]",
            "mov fp, 1",
            "ldr ip, [0x0000954c]",
            "mov r7, r5",
            "ldr r2, [r5, r0]",
            "ldr r3, [r5, r1]",
            "str r6, [sp, 0x20]",
            "ldr r2, [r2]",
            "ldr r3, [r3]",
            "ldr r6, [0x00009550]",
            "str r0, [sp, 0x18]",
            "add r0, sp, 0x170",
            "cmp r2, r3",
            "str r1, [sp, 0x1c]",
            "addgt r2, r2, 1",
            "ldr r1, [0x00009554]",
            "strgt r2, [sp, 0x14]",
            "add r2, sp, 0x27c",
            "str r2, [sp, 0x28]",
            "addle r3, r3, 1",
            "ldr r2, [0x00009558]",
            "str ip, [sp, 0x3c]",
            "add ip, sp, 0x28c",
            "str r0, [sp, 0x24]",
            "str r2, [sp, 0x40]",
            "ldr r2, [0x0000955c]",
            "ldr r0, [0x00009560]",
            "str r6, [sp, 0x30]",
            "add r2, r5, r2",
            "ldr r6, [0x00009564]",
            "str r2, [sp, 0x48]",
            "ldr r2, [0x00009568]",
            "str ip, [sp, 0x2c]",
            "ldr ip, [0x0000956c]",
            "add r2, r5, r2",
            "str r1, [sp, 0x38]",
            "str r2, [sp, 0x4c]",
            "add r1, sp, 0x70",
            "ldr r2, [0x00009570]",
            "strle r3, [sp, 0x14]",
            "mov r3, 0",
            "str r0, [sp, 0x54]",
            "mov r4, r3",
            "str r2, [sp, 0x60]",
            "ldr r2, [0x00009574]",
            "str r1, [sp, 0x34]",
            "str r6, [sp, 0x6c]",
            "ldr r0, [0x00009578]",
            "add r2, r5, r2",
            "ldr r1, [0x0000957c]",
            "ldr r6, [0x00009580]",
            "str ip, [sp, 0x64]",
            "movw ip, 0xfee8",
            "movt ip, 0xffff",
            "str r0, [sp, 0x5c]",
            "str r1, [sp, 0x44]",
            "str r2, [sp, 0x50]",
            "str r6, [sp, 0x68]",
            "str ip, [sp, 0x58]",
            "cmp r3, 0x1f",
            "bls 0x9358",
            "ldr r1, [sp, 0x18]",
            "add r6, sp, 0x290",
            "ldr r2, [sp, 0x1c]",
            "mov r3, r4",
            "ldr r0, [sp, 0x14]",
            "ldr r5, [r7, r1]",
            "ldr r8, [r7, r2]",
            "mov r2, r4",
            "ldr r1, [sp, 0x20]",
            "ldr lr, [r5]",
            "ldr ip, [r8]",
            "str r4, [sp]",
            "and sl, lr, 0x1f",
            "lsr lr, lr, 5",
            "and sb, ip, 0x1f",
            "lsr ip, ip, 5",
            "add lr, r6, lr, lsl 2",
            "add ip, r6, ip, lsl 2",
            "ldr r6, [lr, -0x94]",
            "orr r6, r6, fp, lsl sl",
            "str r6, [lr, -0x94]",
            "ldr lr, [ip, -0x94]",
            "orr lr, lr, fp, lsl sb",
            "str lr, [ip, -0x94]",
            "bl sym.imp.select",
            "cmn r0, 1",
            "beq 0x94dc",
            "cmp r0, 0",
            "beq 0x94b4",
            "ldr r0, [r5]",
            "add r6, sp, 0x290",
            "mov ip, 0x10",
            "ldr r1, [sp, 0x24]",
            "str ip, [sp, 0x28c]",
            "and r3, r0, 0x1f",
            "ldr ip, [sp, 0x2c]",
            "lsr r2, r0, 5",
            "add r2, r6, r2, lsl 2",
            "ldr r6, [sp, 0x28]",
            "ldr r2, [r2, -0x94]",
            "lsr r3, r2, r3",
            "mov r2, 0x8c",
            "tst r3, 1",
            "mov r3, 0",
            "ldreq r0, [r8]",
            "stm sp, {r6, ip}",
            "bl sym.imp.recvfrom",
            "cmn r0, 1",
            "beq 0x9500",
            "ldr r2, [sp, 0x170]",
            "cmp r2, 5",
            "addls pc, pc, r2, lsl 2",
            "b 0x9498",
            "b 0x9484",
            "b 0x9420",
            "b 0x9498",
            "b 0x936c",
            "b 0x9498",
            "b 0x934c",
            "ldr r1, [sp, 0x4c]",
            "str fp, [r1, 4]",
            "mov r3, 0",
            "add r0, sp, 0x290",
            "add r2, r0, r3, lsl 2",
            "add r3, r3, 1",
            "str r4, [r2, -0x94]",
            "b 0x9258",
            "ldr r0, [sp, 0x30]",
            "mov r1, 1",
            "mov r2, 0x19",
            "ldr r3, [r7, r0]",
            "ldr r0, [sp, 0x50]",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "ldrb r3, [sp, 0x174]",
            "tst r3, 3",
            "bne 0x9514",
            "and r2, r3, 0xc",
            "ldr r6, [sp, 0x44]",
            "cmp r2, 4",
            "ldr ip, [sp, 0x58]",
            "ldrne r2, [sp, 0x64]",
            "add r0, sp, 0x290",
            "ldreq r1, [sp, 0x6c]",
            "add r5, r7, r6",
            "ldrh r6, [r0, ip]",
            "ubfx r3, r3, 4, 2",
            "addne lr, r7, r2",
            "ldr ip, [sp, 0x174]",
            "ldr r2, [sp, 0x5c]",
            "addeq lr, r7, r1",
            "ldr r0, [sp, 0x34]",
            "ubfx ip, ip, 8, 0x10",
            "str lr, [sp]",
            "add r1, r7, r2",
            "mov r2, r5",
            "str ip, [sp, 4]",
            "str r6, [sp, 8]",
            "bl sym.imp.sprintf",
            "ldr r0, [sp, 0x34]",
            "bl sym.imp.system",
            "ldrb r3, [sp, 0x174]",
            "mov r2, r5",
            "ldr r6, [sp, 0x60]",
            "ldr r0, [sp, 0x34]",
            "ubfx r3, r3, 4, 2",
            "add r1, r7, r6",
            "bl sym.imp.sprintf",
            "ldr r0, [sp, 0x34]",
            "bl sym.imp.system",
            "mov r3, 0",
            "b 0x9358",
            "ldr r2, [sp, 0x30]",
            "mov r1, 1",
            "ldr r6, [sp, 0x40]",
            "mov r5, 0",
            "ldr r3, [r7, r2]",
            "mov r2, 0x11",
            "add r0, r7, r6",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "ldrb r2, [sp, 0x175]",
            "and r3, r5, 7",
            "mov ip, 0x80",
            "asr r3, ip, r3",
            "tst r3, r2",
            "beq 0x9474",
            "ldrb r2, [sp, 0x174]",
            "mov r0, r5",
            "tst r3, r2",
            "bne 0x94f0",
            "ldr r1, [sp, 0x178]",
            "bl fcn.00008f60",
            "add r5, r5, 1",
            "cmp r5, 4",
            "bne 0x9444",
            "b 0x9354",
            "ldr r0, [sp, 0x174]",
            "ldr r1, [sp, 0x178]",
            "bl fcn.00008cd4",
            "mov r3, 0",
            "b 0x9358",
            "ldr r6, [sp, 0x30]",
            "ldr r1, [sp, 0x48]",
            "ldr r3, [r7, r6]",
            "ldr r0, [r3]",
            "bl sym.imp.fprintf",
            "mov r3, 0",
            "b 0x9358",
            "ldr r0, [sp, 0x30]",
            "mov r2, 8",
            "ldr r1, [sp, 0x38]",
            "ldr r3, [r7, r0]",
            "add r0, r7, r1",
            "mov r1, 1",
            "ldr r3, [r3]",
            "bl sym.imp.fwrite",
            "mov r3, r4",
            "b 0x9358",
            "ldr ip, [sp, 0x3c]",
            "add r0, r7, ip",
            "bl sym.imp.perror",
            "mov r3, r4",
            "b 0x9358",
            "mov r0, r5",
            "ldr r1, [sp, 0x178]",
            "bl fcn.00008e08",
            "b 0x9474",
            "ldr r1, [sp, 0x54]",
            "add r0, r7, r1",
            "bl sym.imp.perror",
            "mov r3, 0",
            "b 0x9358",
            "ldr ip, [sp, 0x68]",
            "ubfx r3, r3, 4, 2",
            "ldr r0, [sp, 0x44]",
            "add r1, r7, ip",
            "add r2, r7, r0",
            "ldr r0, [sp, 0x34]",
            "bl sym.imp.sprintf",
            "ldr r0, [sp, 0x34]",
            "bl sym.imp.system",
            "mov r3, 0",
            "b 0x9358"
        ]
    },
    "fcn.0000880c": {
        "function_address": "0x0000880c",
        "instructions": [
            "push {r4, r5, r6, lr}",
            "mov r1, 0x42",
            "ldr r4, aav.0x000091c8",
            "ldr r0, [0x000088ec]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "bl sym.imp.ftok",
            "cmp r0, 0",
            "bge 0x8838",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}",
            "mov r1, 8",
            "movw r2, 0x3b6",
            "bl sym.imp.shmget",
            "cmp r0, 0",
            "blt 0x8830",
            "mov r1, 0",
            "ldr r6, [0x000088f0]",
            "mov r2, r1",
            "bl sym.imp.shmat",
            "cmp r0, 0",
            "str r0, [r4, r6]",
            "beq 0x88e0",
            "mov ip, 0",
            "mov r1, r0",
            "mov r3, ip",
            "mov r5, 0x80",
            "mov r2, ip",
            "strb ip, [r1], 1",
            "add r1, r1, 1",
            "strb ip, [r0, 1]",
            "strb ip, [r1], 1",
            "strb ip, [r1], 1",
            "strb ip, [r1], 1",
            "strb ip, [r1], 1",
            "strb ip, [r1], 1",
            "strb ip, [r1]",
            "ldrb r1, [r0, r3]",
            "and ip, r2, 7",
            "add r2, r2, 1",
            "cmp r2, 4",
            "orr r1, r1, r5, asr ip",
            "strb r1, [r0, r3]",
            "add r3, r3, 2",
            "bne 0x88a0",
            "ldr r2, [0x000088f4]",
            "mov r3, 0",
            "add r6, r4, r6",
            "mov r0, r3",
            "str r3, [r6, 4]",
            "ldr r2, [r4, r2]",
            "str r3, [r2]",
            "pop {r4, r5, r6, pc}",
            "mvn r0, 0",
            "pop {r4, r5, r6, pc}"
        ]
    },
    "fcn.000090c4": {
        "function_address": "0x000090c4",
        "instructions": [
            "push {r3, r4, r5, lr}",
            "ldr r4, aav.0x00008910",
            "ldr r0, [0x00009114]",
            "ldr r1, [0x00009118]",
            "add r4, pc, r4",
            "add r0, r4, r0",
            "add r1, r4, r1",
            "bl sym.imp.fopen",
            "mov r3, r0",
            "mov r5, r0",
            "ldr r0, [0x0000911c]",
            "mov r1, 1",
            "mov r2, 4",
            "add r0, r4, r0",
            "bl sym.imp.fwrite",
            "mov r0, r5",
            "bl sym.imp.fclose",
            "mov r0, 0",
            "pop {r3, r4, r5, pc}"
        ]
    },
    "fcn.000088f8": {
        "function_address": "0x000088f8",
        "instructions": [
            "push {r4, r5, lr}",
            "mov r0, 0x10",
            "sub sp, sp, 0x14",
            "ldr r4, aav.0x000090cc",
            "mov r1, 3",
            "mov r2, 0x16",
            "bl sym.imp.socket",
            "ldr r3, [0x00008994]",
            "add r4, pc, r4",
            "cmn r0, 1",
            "ldr r5, [r4, r3]",
            "str r0, [r5]",
            "beq 0x8968",
            "mov r3, 0x10",
            "strh r3, [sp, 4]",
            "bl sym.imp.getpid",
            "movw r3, 0xffff",
            "str r0, [sp, 8]",
            "add r1, sp, 4",
            "ldr r0, [r5]",
            "mov r2, 0xc",
            "str r3, [sp, 0xc]",
            "bl sym.imp.bind",
            "cmn r0, 1",
            "movne r0, 0",
            "beq 0x897c",
            "add sp, sp, 0x14",
            "pop {r4, r5, pc}",
            "ldr r0, [0x00008998]",
            "add r0, r4, r0",
            "bl sym.imp.perror",
            "mov r0, 1",
            "b 0x8960",
            "ldr r0, [0x0000899c]",
            "add r0, r4, r0",
            "bl sym.imp.perror",
            "mov r0, 1",
            "b 0x8960"
        ]
    },
    "fcn.000089a0": {
        "function_address": "0x000089a0",
        "instructions": [
            "push {r4, r5, r6, r7, lr}",
            "mov r0, 1",
            "sub sp, sp, 0x74",
            "ldr r4, aav.0x00009024",
            "mov r1, 2",
            "mov r2, 0",
            "bl sym.imp.socket",
            "ldr r3, [0x00008a50]",
            "add r4, pc, r4",
            "cmn r0, 1",
            "ldr r6, [r4, r3]",
            "str r0, [r6]",
            "beq 0x8a24",
            "ldr r7, [0x00008a54]",
            "add r5, sp, 0x70",
            "add r7, r4, r7",
            "mov r0, r7",
            "bl sym.imp.unlink",
            "mov r3, 1",
            "mov r1, r7",
            "strh r3, [r5, -0x70]!",
            "mov r2, 0x18",
            "add r0, r5, 2",
            "bl sym.imp.memcpy",
            "ldr r0, [r6]",
            "mov r1, sp",
            "mov r2, 0x6e",
            "bl sym.imp.bind",
            "cmn r0, 1",
            "movne r0, 0",
            "beq 0x8a38",
            "add sp, sp, 0x74",
            "pop {r4, r5, r6, r7, pc}",
            "ldr r0, [0x00008a58]",
            "add r0, r4, r0",
            "bl sym.imp.perror",
            "mov r0, 1",
            "b 0x8a1c",
            "ldr r0, [0x00008a5c]",
            "add r0, r4, r0",
            "bl sym.imp.perror",
            "mov r0, 1",
            "b 0x8a1c"
        ]
    },
    "sym.imp.select": {
        "function_address": "0x00008690",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x380]!"
        ]
    },
    "sym.imp.recvfrom": {
        "function_address": "0x00008678",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x390]!"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00008720",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x320]!"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x00008714",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x328]!"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x0000866c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x398]!"
        ]
    },
    "fcn.00008f60": {
        "function_address": "0x00008f60",
        "instructions": [
            "asr ip, r0, 0x1f",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, fcn.00008a60",
            "mov r5, r0",
            "lsr ip, ip, 0x1d",
            "cmp r5, 0",
            "ldr r3, [0x000090a4]",
            "add r0, r0, 7",
            "add r2, r5, ip",
            "add r6, pc, r6",
            "and r2, r2, 7",
            "movge r0, r5",
            "rsb ip, ip, r2",
            "ldr r3, [r6, r3]",
            "mov r2, 0x80",
            "asr r0, r0, 3",
            "asr r2, r2, ip",
            "sub sp, sp, 0x208",
            "mov r4, 0",
            "ldrb ip, [r3, r0]",
            "tst r2, ip",
            "bne 0x8fd8",
            "add r4, r4, 1",
            "add r3, r3, 2",
            "cmp r4, 4",
            "bne 0x8fac",
            "mvn r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldrb r7, [r3, 1]",
            "add r0, r3, r0",
            "ldrb ip, [r0, 1]",
            "cmp r7, 0",
            "bic r2, ip, r2",
            "strb r2, [r0, 1]",
            "beq 0x8fc8",
            "ldrb r3, [r3, 1]",
            "cmp r3, 0",
            "bne 0x8fc8",
            "ldr r3, [0x000090a8]",
            "cmp r1, 1",
            "ldr r3, [r6, r3]",
            "ldr r0, [r3]",
            "beq 0x9094",
            "ldr r3, [0x000090ac]",
            "add r3, r6, r3",
            "ldr r1, [0x000090b0]",
            "mov r2, r5",
            "str r4, [sp]",
            "add r7, sp, 8",
            "add r8, sp, 0x108",
            "add r1, r6, r1",
            "bl sym.imp.fprintf",
            "mov r0, r4",
            "mov r1, 0",
            "mov r2, 1",
            "bl fcn.00008a60",
            "ldr r2, [0x000090b4]",
            "mov r3, r5",
            "mov r0, r7",
            "mov r1, 0x100",
            "add r2, r6, r2",
            "bl sym.imp.snprintf",
            "mov r3, 1",
            "ldr r2, [0x000090b8]",
            "str r3, [sp, 4]",
            "mov r0, r8",
            "ldr r3, [0x000090bc]",
            "mov r1, 0x100",
            "add r2, r6, r2",
            "str r7, [sp]",
            "add r3, r6, r3",
            "bl sym.imp.snprintf",
            "mov r0, r8",
            "bl sym.imp.system",
            "b 0x8fcc",
            "ldr r3, [0x000090c0]",
            "add r3, r6, r3",
            "b 0x901c"
        ]
    },
    "fcn.00008cd4": {
        "function_address": "0x00008cd4",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sb, sl, lr}",
            "asr r3, r0, 0x1f",
            "ldr r5, aav.0x00008cf0",
            "cmp r0, 0",
            "lsr r3, r3, 0x1d",
            "add r6, r0, 7",
            "ldr r7, [0x00008e04]",
            "movge r6, r0",
            "add r5, pc, r5",
            "add r0, r0, r3",
            "and r0, r0, 7",
            "mov r4, 0x80",
            "ldr r2, [r5, r7]",
            "rsb r3, r3, r0",
            "asr r6, r6, 3",
            "asr r4, r4, r3",
            "mov r8, r1",
            "mov r3, r2",
            "mov ip, 0",
            "ldrb r1, [r3, r6]",
            "ands r0, r4, r1",
            "bne 0x8d40",
            "add ip, ip, 1",
            "add r3, r3, 2",
            "cmp ip, 4",
            "bne 0x8d20",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "cmp r8, ip",
            "mvneq r0, 0",
            "popeq {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mvn sb, r4",
            "ldrb sl, [r3, 1]",
            "uxtb sb, sb",
            "mov r0, r3",
            "and r1, sb, r1",
            "cmp sl, 0",
            "strb r1, [r0, r6]!",
            "ldrb sl, [r0, 1]",
            "and sb, sl, sb",
            "and sl, sl, r4",
            "strb sb, [r0, 1]",
            "beq 0x8d88",
            "ldrb r1, [r3, 1]",
            "cmp r1, 0",
            "beq 0x8dd4",
            "add r2, r2, r8, lsl 1",
            "uxtb r4, r4",
            "ldrb r3, [r2, r6]",
            "cmp sl, 0",
            "ldrb r5, [r2, 1]",
            "orr r3, r3, r4",
            "strb r3, [r2, r6]",
            "addne r6, r2, r6",
            "ldrbne r3, [r6, 1]",
            "orrne r4, r3, r4",
            "strbne r4, [r6, 1]",
            "cmp r5, 0",
            "movne r0, 0",
            "popne {r4, r5, r6, r7, r8, sb, sl, pc}",
            "ldrb r3, [r2, 1]",
            "cmp r3, 0",
            "bne 0x8de8",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}",
            "mov r2, 2",
            "mov r0, ip",
            "bl fcn.00008a60",
            "ldr r2, [r5, r7]",
            "b 0x8d88",
            "mov r0, r8",
            "mov r1, 1",
            "mov r2, 2",
            "bl fcn.00008a60",
            "mov r0, r5",
            "pop {r4, r5, r6, r7, r8, sb, sl, pc}"
        ]
    },
    "sym.imp.fprintf": {
        "function_address": "0x000086a8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x370]!"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00008660",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x3a0]!"
        ]
    },
    "fcn.00008e08": {
        "function_address": "0x00008e08",
        "instructions": [
            "asr ip, r0, 0x1f",
            "push {r4, r5, r6, r7, r8, lr}",
            "ldr r6, aav.0x00008bb8",
            "mov r5, r0",
            "lsr ip, ip, 0x1d",
            "cmp r5, 0",
            "ldr r3, [0x00008f40]",
            "add r0, r0, 7",
            "add r2, r5, ip",
            "add r6, pc, r6",
            "and r2, r2, 7",
            "movge r0, r5",
            "rsb ip, ip, r2",
            "ldr r3, [r6, r3]",
            "mov r2, 0x80",
            "asr r0, r0, 3",
            "asr r2, r2, ip",
            "sub sp, sp, 0x208",
            "mov r4, 0",
            "ldrb ip, [r3, r0]",
            "tst r2, ip",
            "bne 0x8e80",
            "add r4, r4, 1",
            "add r3, r3, 2",
            "cmp r4, 4",
            "bne 0x8e54",
            "mvn r4, 0",
            "mov r0, r4",
            "add sp, sp, 0x208",
            "pop {r4, r5, r6, r7, r8, pc}",
            "ldrb ip, [r3, 1]",
            "add r3, r3, r0",
            "ldrb r0, [r3, 1]",
            "cmp ip, 0",
            "orr r2, r0, r2",
            "strb r2, [r3, 1]",
            "bne 0x8e70",
            "ldr r3, [0x00008f44]",
            "cmp r1, 1",
            "ldr r3, [r6, r3]",
            "ldr r0, [r3]",
            "beq 0x8f30",
            "ldr r3, [0x00008f48]",
            "add r3, r6, r3",
            "ldr r1, [0x00008f4c]",
            "mov r2, r5",
            "str r4, [sp]",
            "add r7, sp, 8",
            "add r8, sp, 0x108",
            "add r1, r6, r1",
            "bl sym.imp.fprintf",
            "mov r1, 1",
            "mov r0, r4",
            "mov r2, r1",
            "bl fcn.00008a60",
            "ldr r2, [0x00008f50]",
            "mov r3, r5",
            "mov r0, r7",
            "mov r1, 0x100",
            "add r2, r6, r2",
            "bl sym.imp.snprintf",
            "mov r3, 0",
            "ldr r2, [0x00008f54]",
            "str r3, [sp, 4]",
            "mov r0, r8",
            "ldr r3, [0x00008f58]",
            "mov r1, 0x100",
            "add r2, r6, r2",
            "str r7, [sp]",
            "add r3, r6, r3",
            "bl sym.imp.snprintf",
            "mov r0, r8",
            "bl sym.imp.system",
            "b 0x8e74",
            "ldr r3, [0x00008f5c]",
            "add r3, r6, r3",
            "b 0x8eb8"
        ]
    },
    "entry.init0": {
        "function_address": "0x000087b8",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, [0x000087f8]",
            "cmp r3, 0",
            "beq 0x87d4",
            "ldr r0, [0x000087fc]",
            "ldr r1, [0x00008800]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x00008804]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "ldr r3, [0x00008808]",
            "cmp r3, 0",
            "popeq {r3, pc}",
            "blx r3",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x0000872c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x318]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008774",
        "instructions": [
            "push {r3, lr}",
            "ldr r3, loc.__bss_start__",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "popne {r3, pc}",
            "ldr r3, [0x000087b0]",
            "cmp r3, 0",
            "beq 0x879c",
            "ldr r0, [0x000087b4]",
            "bl loc.imp.__deregister_frame_info",
            "ldr r3, loc.__bss_start__",
            "mov r2, 1",
            "strb r2, [r3]",
            "pop {r3, pc}"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x000086c0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x360]!"
        ]
    },
    "fcn.00008a60": {
        "function_address": "0x00008a60",
        "instructions": [
            "push {r4, r5, r6, r7, r8, sl, lr}",
            "mov r6, r0",
            "ldr r4, aav.0x00008f6c",
            "sub sp, sp, 0x4c",
            "mov r7, r2",
            "ldr r3, [0x00008ca4]",
            "add r4, pc, r4",
            "add r3, r4, r3",
            "ldr r3, [r3, 4]",
            "cmp r3, 1",
            "beq 0x8a98",
            "mov r0, 0",
            "add sp, sp, 0x4c",
            "pop {r4, r5, r6, r7, r8, sl, pc}",
            "cmp r1, 0",
            "bne 0x8b40",
            "cmp r2, 1",
            "beq 0x8bd0",
            "mov r2, 2",
            "ldr r1, [0x00008ca8]",
            "str r2, [sp]",
            "add r5, sp, 8",
            "ldr r2, [0x00008cac]",
            "add r3, r0, 1",
            "add r1, r4, r1",
            "mov r0, r5",
            "ldr r8, [0x00008cb0]",
            "add r2, r4, r2",
            "ldr sl, [0x00008cb4]",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr r1, [0x00008cb8]",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "mov r0, r5",
            "str r6, [sp]",
            "add r1, r4, r1",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "cmp r7, 2",
            "beq 0x8c38",
            "ldr ip, [0x00008cbc]",
            "add ip, r4, ip",
            "ldr r1, [0x00008cc0]",
            "mov r0, r5",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "str r6, [sp]",
            "add r1, r4, r1",
            "str ip, [sp, 4]",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "b 0x8a8c",
            "cmp r1, 1",
            "bne 0x8a8c",
            "cmp r2, 1",
            "beq 0x8c44",
            "str r1, [sp]",
            "add r5, sp, 8",
            "ldr r1, [0x00008cc4]",
            "add r3, r0, 1",
            "ldr r2, [0x00008cac]",
            "mov r0, r5",
            "ldr r8, [0x00008cb0]",
            "add r1, r4, r1",
            "ldr sl, [0x00008cb4]",
            "add r2, r4, r2",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr r1, [0x00008cc8]",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "mov r0, r5",
            "str r6, [sp]",
            "add r1, r4, r1",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "cmp r7, 2",
            "beq 0x8c2c",
            "ldr ip, [0x00008cbc]",
            "add ip, r4, ip",
            "mov r0, r5",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "str r6, [sp]",
            "ldr r1, [0x00008ccc]",
            "b 0x8b28",
            "str r2, [sp]",
            "add r5, sp, 8",
            "ldr r1, [0x00008ca8]",
            "add r3, r0, 1",
            "ldr r2, [0x00008cac]",
            "mov r0, r5",
            "ldr r8, [0x00008cb0]",
            "add r1, r4, r1",
            "ldr sl, [0x00008cb4]",
            "add r2, r4, r2",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr r1, [0x00008cb8]",
            "mov r0, r5",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "str r6, [sp]",
            "add r1, r4, r1",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "b 0x8b0c",
            "ldr ip, [0x00008cd0]",
            "add ip, r4, ip",
            "b aav.0x00008bb8",
            "ldr ip, [0x00008cd0]",
            "add ip, r4, ip",
            "b 0x8b14",
            "str r2, [sp]",
            "add r5, sp, 8",
            "ldr r1, [0x00008cc4]",
            "add r3, r0, 1",
            "ldr r2, [0x00008cac]",
            "mov r0, r5",
            "ldr r8, [0x00008cb0]",
            "add r1, r4, r1",
            "ldr sl, [0x00008cb4]",
            "add r2, r4, r2",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "ldr r1, [0x00008cc8]",
            "mov r0, r5",
            "add r2, r4, r8",
            "add r3, r4, sl",
            "str r6, [sp]",
            "add r1, r4, r1",
            "bl sym.imp.sprintf",
            "mov r0, r5",
            "bl sym.imp.system",
            "b 0x8bb0"
        ]
    },
    "sym.imp.ftok": {
        "function_address": "0x00008708",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x330]!"
        ]
    },
    "sym.imp.shmget": {
        "function_address": "0x000086cc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x358]!"
        ]
    },
    "sym.imp.shmat": {
        "function_address": "0x00008648",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x3b0]!"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x000086f0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x340]!"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x000086fc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x338]!"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x00008684",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x388]!"
        ]
    },
    "sym.imp.getpid": {
        "function_address": "0x0000863c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x3b8]!"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x000086b4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x368]!"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x000086d8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x350]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008654",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x3a8]!"
        ]
    },
    "sym.imp.snprintf": {
        "function_address": "0x00008630",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0x9000",
            "ldr pc, [ip, 0x3c0]!"
        ]
    }
}