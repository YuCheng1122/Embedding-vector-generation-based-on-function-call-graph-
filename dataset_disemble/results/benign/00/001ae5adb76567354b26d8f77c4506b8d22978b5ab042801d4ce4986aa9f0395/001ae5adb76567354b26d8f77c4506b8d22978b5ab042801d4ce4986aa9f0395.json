{
    "sym.camera_abilities": {
        "function_address": "0x00003160",
        "instructions": [
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov ecx, 0x139",
            "sub rsp, 0x9d8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x9c8], rax",
            "xor eax, eax",
            "mov rdi, rsp",
            "mov rbx, rsp",
            "sub rsp, 0x9d0",
            "rep stosq qword [rdi], rax",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xa54], 4",
            "mov dword [rsp + 0xb64], 0x5ca",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3347206f696c70",
            "mov dword [rsp + 0xb68], 0x2204",
            "mov qword [rsp + 0x9d8], rax",
            "mov dword [rsp + 0xb5c], 0x42",
            "mov rsi, rbx",
            "mov dword [rsp + 0xb60], 0xc",
            "mov rdi, rsp",
            "mov cx, 0x139",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2202",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x335252206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov eax, 0x30",
            "mov rsi, rbx",
            "mov word [rsp + 0x9e0], ax",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov edx, 0x47",
            "mov dword [rsp + 0xb68], 0x2203",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x303033206f696c70",
            "mov word [rsp + 0x9e0], dx",
            "mov qword [rsp + 0x9d8], rax",
            "mov rdi, rsp",
            "mov ecx, 0x139",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x4d3a6e6f6964654d",
            "mov ecx, 0x3632",
            "mov dword [rsp + 0xb68], 0x2205",
            "mov word [rsp + 0x9dc], cx",
            "mov qword [rsp + 0x9d0], rax",
            "mov rdi, rsp",
            "mov dword [rsp + 0x9d8], 0x31362044",
            "mov byte [rsp + 0x9de], 0",
            "mov ecx, 0x139",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2208",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3447206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x220b",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x5852206f6c6970",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x220c",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x5847206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x220d",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3152206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov byte [rsp + 0x9e0], 0",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x315a52206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x6553202620616553",
            "mov dword [rsp + 0xb68], 0x220e",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x47303030353a61",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x643a69656c6c6f52",
            "mov esi, 0x3572",
            "mov dword [rsp + 0xb68], 0x220f",
            "mov word [rsp + 0x9d8], si",
            "mov qword [rsp + 0x9d0], rax",
            "mov rdi, rsp",
            "mov byte [rsp + 0x9da], 0",
            "mov ecx, 0x139",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2212",
            "mov byte [rsp + 0x9e0], 0",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x763152206f696c70",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d8], rax",
            "mov ecx, 0x139",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2213",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3252206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov edi, 0x38",
            "mov dword [rsp + 0xb68], 0x2214",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x205847206f696c70",
            "mov word [rsp + 0x9e0], di",
            "mov qword [rsp + 0x9d8], rax",
            "mov rdi, rsp",
            "mov ecx, 0x139",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2216",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3352206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x2217",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3452206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "movabs rax, 0x61433a686f636952",
            "mov dword [rsp + 0xb68], 0x221a",
            "mov rdi, rsp",
            "mov qword [rsp + 0x9d0], rax",
            "movabs rax, 0x3552206f696c70",
            "mov ecx, 0x139",
            "mov qword [rsp + 0x9d8], rax",
            "mov rsi, rbx",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, rbp",
            "call sym.imp.gp_abilities_list_append",
            "add rsp, 0x9d0",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x9c8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x36b7",
            "add rsp, 0x9d8",
            "pop rbx",
            "pop rbp",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.gp_abilities_list_append": {
        "function_address": "0x00000fa0",
        "instructions": [
            "jmp qword [reloc.gp_abilities_list_append]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00000e60",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "sym.camera_init": {
        "function_address": "0x000036c0",
        "instructions": [
            "push rbp",
            "push rbx",
            "lea rcx, [0x000010e0]",
            "mov rbx, rdi",
            "lea rdx, [0x00001920]",
            "lea rsi, [0x00204580]",
            "sub rsp, 0xa8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x98], rax",
            "xor eax, eax",
            "mov rax, qword [rdi + 0x10]",
            "mov rdi, qword [rdi + 8]",
            "mov rbp, rsp",
            "mov qword [rax + 0x68], rcx",
            "mov qword [rax + 0x58], rdx",
            "mov rdx, rbx",
            "call sym.imp.gp_filesystem_set_funcs",
            "mov rdi, qword [rbx]",
            "mov rsi, rsp",
            "call sym.imp.gp_port_get_settings",
            "mov dword [rsp], 0x81",
            "mov dword [rsp + 4], 2",
            "sub rsp, 0x90",
            "mov dword [rsp + 0x98], 0x83",
            "mov ecx, 0x12",
            "mov rdi, rsp",
            "mov rsi, rbp",
            "rep movsq qword [rdi], qword [rsi]",
            "mov rdi, qword [rbx]",
            "call sym.imp.gp_port_set_settings",
            "add rsp, 0x90",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0x98]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x3777",
            "add rsp, 0xa8",
            "pop rbx",
            "pop rbp",
            "ret",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.gp_filesystem_set_funcs": {
        "function_address": "0x00000f10",
        "instructions": [
            "jmp qword [reloc.gp_filesystem_set_funcs]"
        ]
    },
    "sym.imp.gp_port_get_settings": {
        "function_address": "0x00000ea0",
        "instructions": [
            "jmp qword [reloc.gp_port_get_settings]"
        ]
    },
    "sym.imp.gp_port_set_settings": {
        "function_address": "0x00000e30",
        "instructions": [
            "jmp qword [reloc.gp_port_set_settings]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00001070",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0x10a0",
            "cmp qword [0x00204420], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x1093",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x00000fb0",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x00000fe0",
        "instructions": [
            "lea rdi, [section..bss]",
            "lea rax, [0x002046df]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x1010",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x1010",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00001110": {
        "function_address": "0x00001110",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rsi",
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "push rbx",
            "mov rbp, rdx",
            "mov edx, 0x800",
            "mov r12, rcx",
            "sub rsp, 0x818",
            "mov rsi, rsp",
            "mov r14, rsp",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x808], rax",
            "xor eax, eax",
            "call sym.imp.gp_port_read",
            "test eax, eax",
            "mov ebx, eax",
            "js 0x124d",
            "cmp byte [rsp + 2], 0xff",
            "je 0x116c",
            "cmp byte [rsp + 3], 0xff",
            "jne 0x1305",
            "movzx eax, byte [rsp + 1]",
            "movzx esi, byte [rsp + 4]",
            "mov rdi, qword [rbp]",
            "mov dword [r15], eax",
            "movzx eax, byte [rsp + 5]",
            "shl eax, 8",
            "add eax, esi",
            "movzx esi, byte [rsp + 6]",
            "shl esi, 0x10",
            "add eax, esi",
            "movzx esi, byte [rsp + 7]",
            "shl esi, 0x18",
            "add esi, eax",
            "mov dword [r12], esi",
            "add esi, 0x801",
            "test rdi, rdi",
            "je 0x12d8",
            "movsxd rsi, esi",
            "call sym.imp.realloc",
            "mov qword [rbp], rax",
            "mov rdx, rax",
            "movsxd rax, dword [r12]",
            "mov r15d, 0x7f8",
            "lea rsi, [r14 + 8]",
            "cmp eax, 0x7f8",
            "cmovle r15d, eax",
            "movsxd r8, r15d",
            "cmp r8, 8",
            "jb 0x1290",
            "mov rax, qword [rsp + 8]",
            "lea rdi, [rdx + 8]",
            "and rdi, 0xfffffffffffffff8",
            "mov qword [rdx], rax",
            "mov rax, qword [rsi + r8 - 8]",
            "mov qword [rdx + r8 - 8], rax",
            "sub rdx, rdi",
            "lea rcx, [rdx + r8]",
            "sub rsi, rdx",
            "shr rcx, 3",
            "rep movsq qword [rdi], qword [rsi]",
            "movsxd rax, dword [r12]",
            "cmp r15d, eax",
            "jl 0x1233",
            "jmp 0x12c8",
            "add r15d, eax",
            "movsxd rax, dword [r12]",
            "cmp eax, r15d",
            "jle 0x12c8",
            "movsxd r8, r15d",
            "mov rsi, r8",
            "add rsi, qword [rbp]",
            "mov edx, 0x800",
            "mov rdi, r13",
            "call sym.imp.gp_port_read",
            "test eax, eax",
            "mov ebx, eax",
            "jns 0x1220",
            "lea rdx, str.read_error_in_g3_channel_read_n",
            "lea rsi, [0x000039ad]",
            "xor eax, eax",
            "xor edi, edi",
            "call sym.imp.gp_log",
            "mov eax, ebx",
            "mov rcx, qword [rsp + 0x808]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x1326",
            "add rsp, 0x818",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "test r8b, 4",
            "jne 0x12ec",
            "test r8, r8",
            "je 0x1210",
            "movzx eax, byte [r14 + 8]",
            "test r8b, 2",
            "mov byte [rdx], al",
            "je 0x120c",
            "movzx eax, word [rsi + r8 - 2]",
            "mov word [rdx + r8 - 2], ax",
            "movsxd rax, dword [r12]",
            "jmp 0x1210",
            "mov rdx, qword [rbp]",
            "mov byte [rdx + rax], 0",
            "xor eax, eax",
            "jmp 0x1266",
            "movsxd rdi, esi",
            "call sym.imp.malloc",
            "mov qword [rbp], rax",
            "mov rdx, rax",
            "jmp 0x11bd",
            "mov eax, dword [r14 + 8]",
            "mov dword [rdx], eax",
            "mov eax, dword [rsi + r8 - 4]",
            "mov dword [rdx + r8 - 4], eax",
            "movsxd rax, dword [r12]",
            "jmp 0x1210",
            "lea rdx, str.first_bytes_do_not_match._n",
            "lea rsi, [0x000039ad]",
            "xor eax, eax",
            "xor edi, edi",
            "call sym.imp.gp_log",
            "mov eax, 0xfffffff9",
            "jmp 0x1266",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.gp_port_read": {
        "function_address": "0x00000f80",
        "instructions": [
            "jmp qword [reloc.gp_port_read]"
        ]
    },
    "sym.imp.realloc": {
        "function_address": "0x00000f70",
        "instructions": [
            "jmp qword [reloc.realloc]"
        ]
    },
    "sym.imp.gp_log": {
        "function_address": "0x00000e00",
        "instructions": [
            "jmp qword [reloc.gp_log]"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00000f30",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "fcn.00001330": {
        "function_address": "0x00001330",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "sub rsp, 0x28",
            "mov qword [rsp], rdi",
            "mov rdi, rsi",
            "mov qword [rsp + 8], rdx",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x18], rax",
            "xor eax, eax",
            "call sym.imp.strlen",
            "lea rdi, [rax + 3]",
            "mov rbx, rax",
            "call sym.imp.malloc",
            "mov rdx, rbx",
            "mov r12, rax",
            "mov rsi, rbp",
            "mov rdi, rax",
            "add rbx, r12",
            "call sym.imp.memcpy",
            "mov eax, 0xa0d",
            "lea rdx, str.sending__s",
            "lea rsi, [0x000039ad]",
            "mov word [rbx], ax",
            "mov byte [rbx + 2], 0",
            "mov rcx, rbp",
            "mov edi, 2",
            "xor eax, eax",
            "call sym.imp.gp_log",
            "mov rdx, r12",
            "mov ecx, dword [rdx]",
            "add rdx, 4",
            "lea eax, [rcx - 0x1010101]",
            "not ecx",
            "and eax, ecx",
            "and eax, 0x80808080",
            "je 0x13ae",
            "mov ecx, eax",
            "shr ecx, 0x10",
            "test eax, 0x8080",
            "cmove eax, ecx",
            "lea rcx, [rdx + 2]",
            "cmove rdx, rcx",
            "add al, al",
            "sbb rdx, 3",
            "sub rdx, r12",
            "test edx, edx",
            "mov r15d, edx",
            "jle 0x14c0",
            "xor ebx, ebx",
            "jmp 0x1404",
            "sub r15d, r14d",
            "test r15d, r15d",
            "jle 0x14c0",
            "cmp r15d, 0x10000",
            "mov r14d, 0x10000",
            "mov esi, 1",
            "cmovle r14d, r15d",
            "lea ebp, [r14 + 0xc]",
            "and ebp, 0xfffffffc",
            "movsxd rdi, ebp",
            "call sym.imp.calloc",
            "mov r13, rax",
            "mov byte [rax], 1",
            "mov byte [rax + 1], 1",
            "mov byte [rax + 2], 0",
            "mov byte [rax + 3], 0",
            "lea rdi, [r13 + 8]",
            "mov byte [rax + 4], r14b",
            "mov eax, r14d",
            "movsxd rsi, ebx",
            "sar eax, 8",
            "add rsi, r12",
            "movsxd rdx, r14d",
            "mov byte [r13 + 5], al",
            "mov eax, r14d",
            "mov byte [r13 + 7], 0",
            "sar eax, 0x10",
            "add ebx, r14d",
            "mov byte [r13 + 6], al",
            "call sym.imp.memcpy",
            "mov rdi, qword [rsp]",
            "lea eax, [r14 + 8]",
            "mov edx, ebp",
            "mov rsi, r13",
            "cdqe",
            "mov byte [r13 + rax], 3",
            "call sym.imp.gp_port_write",
            "mov rdi, r13",
            "mov ebp, eax",
            "call sym.imp.free",
            "test ebp, ebp",
            "jns 0x13f8",
            "mov rdi, r12",
            "call sym.imp.free",
            "lea rdx, str.ftp_command_write_failed___d_n",
            "mov ecx, ebp",
            "lea rsi, [0x000039ad]",
            "xor eax, eax",
            "xor edi, edi",
            "call sym.imp.gp_log",
            "mov eax, ebp",
            "jmp 0x1525",
            "mov rdi, r12",
            "call sym.imp.free",
            "mov rdx, qword [rsp + 8]",
            "mov rdi, qword [rsp]",
            "lea rcx, [rsp + 0x14]",
            "lea rsi, [rsp + 0x10]",
            "call fcn.00001110",
            "test eax, eax",
            "mov ebp, eax",
            "js 0x1544",
            "mov r15, qword [rsp + 8]",
            "mov esi, 0xd",
            "mov rbx, qword [r15]",
            "mov rdi, rbx",
            "call sym.imp.strchr",
            "test rax, rax",
            "je 0x1506",
            "mov byte [rax], 0",
            "mov rbx, qword [r15]",
            "lea rdx, str.reply__s",
            "lea rsi, [0x000039ad]",
            "xor eax, eax",
            "mov rcx, rbx",
            "mov edi, 2",
            "call sym.imp.gp_log",
            "xor eax, eax",
            "mov rcx, qword [rsp + 0x18]",
            "xor rcx, qword fs:[0x28]",
            "jne 0x1552",
            "add rsp, 0x28",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov ecx, ebp",
            "lea rdx, str.ftp_reply_read_failed___d_n",
            "jmp 0x14aa",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00000e50",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00000f00",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x00000ec0",
        "instructions": [
            "jmp qword [reloc.calloc]"
        ]
    },
    "sym.imp.gp_port_write": {
        "function_address": "0x00000ee0",
        "instructions": [
            "jmp qword [reloc.gp_port_write]"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00000de0",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00000e80",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "fcn.00001560": {
        "function_address": "0x00001560",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12, rdi",
            "push rbx",
            "mov rdi, rsi",
            "mov rbx, rsi",
            "sub rsp, 0x10",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 8], rax",
            "xor eax, eax",
            "mov qword [rsp], 0",
            "call sym.imp.strlen",
            "lea rdi, [rax + 7]",
            "call sym.imp.malloc",
            "lea rcx, str.CWD__s",
            "mov r8, rbx",
            "mov rbp, rax",
            "mov rdi, rax",
            "mov rdx, 0xffffffffffffffff",
            "mov esi, 1",
            "xor eax, eax",
            "call sym.imp.__sprintf_chk",
            "mov rdx, rsp",
            "mov rsi, rbp",
            "mov rdi, r12",
            "call fcn.00001330",
            "mov rdi, rbp",
            "mov ebx, eax",
            "call sym.imp.free",
            "test ebx, ebx",
            "mov rdi, qword [rsp]",
            "js 0x1608",
            "cmp byte [rdi], 0x35",
            "mov eax, 0xffffff95",
            "cmove ebx, eax",
            "call sym.imp.free",
            "mov rcx, qword [rsp + 8]",
            "xor rcx, qword fs:[0x28]",
            "mov eax, ebx",
            "jne 0x160f",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "test rdi, rdi",
            "jne 0x15e5",
            "jmp 0x15ea",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.__sprintf_chk": {
        "function_address": "0x00000fd0",
        "instructions": [
            "jmp qword [reloc.__sprintf_chk]"
        ]
    }
}