{
    "entry0": {
        "function_address": "0x00402440",
        "instructions": [
            "xor ebp, ebp",
            "mov r9, rdx",
            "pop rsi",
            "mov rdx, rsp",
            "and rsp, 0xfffffffffffffff0",
            "push rax",
            "push rsp",
            "mov r8, sym.__libc_csu_fini",
            "mov rcx, sym.__libc_csu_init",
            "mov rdi, main",
            "call sym.imp.__libc_start_main"
        ]
    },
    "sym.imp.__libc_start_main": {
        "function_address": "0x00401b30",
        "instructions": [
            "jmp qword [reloc.__libc_start_main]"
        ]
    },
    "main": {
        "function_address": "0x00401c60",
        "instructions": [
            "push r13",
            "mov r13d, edi",
            "lea rdi, str..._source3_utils_smbget.c:593",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rsi",
            "sub rsp, 0x3d8",
            "lea rbp, [rsp + 0x10]",
            "mov qword [rsp + 8], 0",
            "mov dword [rsp], 0",
            "mov dword [rsp + 4], 0",
            "call sym.imp._talloc_stackframe",
            "mov ecx, 0x78",
            "mov r12, rax",
            "mov rdi, rbp",
            "xor eax, eax",
            "rep stosq qword [rdi], rax",
            "lea rax, [0x0040413b]",
            "mov byte [rsp + 0x18], 0x61",
            "mov dword [rsp + 0x28], 0x61",
            "mov byte [rsp + 0x48], 0x65",
            "mov dword [rsp + 0x58], 0x65",
            "mov qword [rsp + 0x10], rax",
            "lea rax, str.Work_as_user_guest",
            "mov byte [rsp + 0x78], 0x72",
            "mov byte [rsp + 0xa8], 0x55",
            "mov byte [rsp + 0xd8], 0x52",
            "mov qword [rsp + 0x30], rax",
            "lea rax, str.encrypt",
            "mov byte [rsp + 0x108], 0x75",
            "mov dword [rsp + 0x10c], 1",
            "mov dword [rsp + 0x118], 0x75",
            "mov qword [rsp + 0x40], rax",
            "lea rax, str.Encrypt_SMB_transport__UNIX_extended_servers_only_",
            "mov byte [rsp + 0x138], 0x70",
            "mov dword [rsp + 0x13c], 1",
            "mov dword [rsp + 0x148], 0x70",
            "mov qword [rsp + 0x60], rax",
            "lea rax, str.resume",
            "mov qword [rsp + 0x70], rax",
            "lea rax, [rsp]",
            "mov qword [rsp + 0x80], rax",
            "lea rax, str.Automatically_resume_aborted_files",
            "mov qword [rsp + 0x90], rax",
            "lea rax, str.update",
            "mov qword [rsp + 0xa0], rax",
            "lea rax, [0x00605220]",
            "mov qword [rsp + 0xb0], rax",
            "lea rax, str.Download_only_when_remote_file_is_newer_than_local_file_or_local_file_is_missing",
            "mov qword [rsp + 0xc0], rax",
            "lea rax, str.recursive",
            "mov qword [rsp + 0xd0], rax",
            "lea rax, [rsp + 4]",
            "mov qword [rsp + 0xe0], rax",
            "lea rax, str.Recursively_download_files",
            "mov qword [rsp + 0xf0], rax",
            "lea rax, str.username",
            "mov qword [rsp + 0x100], rax",
            "lea rax, [0x00605228]",
            "mov qword [rsp + 0x110], rax",
            "lea rax, str.Username_to_use",
            "mov qword [rsp + 0x120], rax",
            "lea rax, str.password",
            "mov qword [rsp + 0x130], rax",
            "lea rax, [0x00605230]",
            "mov qword [rsp + 0x140], rax",
            "lea rax, str.Password_to_use",
            "mov qword [rsp + 0x150], rax",
            "lea rax, str.workgroup",
            "mov qword [rsp + 0x160], rax",
            "lea rax, [0x00605238]",
            "mov byte [rsp + 0x168], 0x77",
            "mov dword [rsp + 0x16c], 1",
            "mov dword [rsp + 0x178], 0x77",
            "mov qword [rsp + 0x170], rax",
            "lea rax, str.Workgroup_to_use__optional_",
            "mov byte [rsp + 0x198], 0x6e",
            "mov dword [rsp + 0x1a8], 0x6e",
            "mov byte [rsp + 0x1c8], 0x64",
            "mov qword [rsp + 0x180], rax",
            "lea rax, str.nonprompt",
            "mov dword [rsp + 0x1cc], 2",
            "mov dword [rsp + 0x1d8], 0x64",
            "mov byte [rsp + 0x1f8], 0x6f",
            "mov qword [rsp + 0x190], rax",
            "lea rax, [0x00605240]",
            "mov dword [rsp + 0x1fc], 1",
            "mov dword [rsp + 0x208], 0x6f",
            "mov byte [rsp + 0x228], 0x4f",
            "mov qword [rsp + 0x1a0], rax",
            "lea rax, str.Dont_ask_anything__non_interactive_",
            "mov dword [rsp + 0x238], 0x4f",
            "mov byte [rsp + 0x258], 0x44",
            "mov dword [rsp + 0x268], 0x44",
            "mov qword [rsp + 0x1b0], rax",
            "lea rax, str.debuglevel",
            "mov qword [rsp + 0x1c0], rax",
            "lea rax, [0x00605244]",
            "mov qword [rsp + 0x1d0], rax",
            "lea rax, str.Debuglevel_to_use",
            "mov qword [rsp + 0x1e0], rax",
            "lea rax, str.outputfile",
            "mov qword [rsp + 0x1f0], rax",
            "lea rax, [0x00605248]",
            "mov qword [rsp + 0x200], rax",
            "lea rax, str.Write_downloaded_data_to_specified_file",
            "mov qword [rsp + 0x210], rax",
            "lea rax, [0x00404214]",
            "mov qword [rsp + 0x220], rax",
            "lea rax, [0x00605250]",
            "mov qword [rsp + 0x230], rax",
            "lea rax, str.Write_data_to_stdout",
            "mov qword [rsp + 0x240], rax",
            "lea rax, str.dots",
            "mov qword [rsp + 0x250], rax",
            "lea rax, [0x00605254]",
            "mov qword [rsp + 0x260], rax",
            "lea rax, str.Show_dots_as_progress_indication",
            "mov qword [rsp + 0x270], rax",
            "lea rax, [0x00404223]",
            "mov qword [rsp + 0x280], rax",
            "lea rax, [0x00605258]",
            "mov byte [rsp + 0x288], 0x71",
            "mov dword [rsp + 0x298], 0x71",
            "mov byte [rsp + 0x2b8], 0x76",
            "mov qword [rsp + 0x290], rax",
            "lea rax, str.Be_quiet",
            "mov dword [rsp + 0x2c8], 0x76",
            "mov byte [rsp + 0x2e8], 0x50",
            "mov dword [rsp + 0x2f8], 0x50",
            "mov qword [rsp + 0x2a0], rax",
            "lea rax, [0x0040422c]",
            "mov byte [rsp + 0x318], 0x62",
            "mov dword [rsp + 0x31c], 2",
            "mov dword [rsp + 0x328], 0x62",
            "mov qword [rsp + 0x2b0], rax",
            "lea rax, [0x0060525c]",
            "mov byte [rsp + 0x348], 0x66",
            "mov dword [rsp + 0x34c], 1",
            "mov dword [rsp + 0x358], 0x66",
            "mov qword [rsp + 0x2c0], rax",
            "lea rax, str.Be_verbose",
            "mov dword [rsp + 0x37c], 4",
            "mov qword [rsp + 0x2d0], rax",
            "lea rax, str.keep_permissions",
            "mov qword [rsp + 0x2e0], rax",
            "lea rax, [0x00605260]",
            "mov qword [rsp + 0x2f0], rax",
            "lea rax, str.Keep_permissions",
            "mov qword [rsp + 0x300], rax",
            "lea rax, str.blocksize",
            "mov qword [rsp + 0x310], rax",
            "lea rax, [0x006051f8]",
            "mov qword [rsp + 0x320], rax",
            "lea rax, str.Change_number_of_bytes_in_a_block",
            "mov qword [rsp + 0x330], rax",
            "lea rax, str.rcfile",
            "mov qword [rsp + 0x340], rax",
            "lea rax, str.Use_specified_rc_file",
            "mov qword [rsp + 0x360], rax",
            "mov rax, qword [reloc.poptHelpOptions]",
            "mov qword [rsp + 0x380], rax",
            "lea rax, str.Help_options:",
            "mov qword [rsp + 0x390], rax",
            "call sym.imp.load_case_tables",
            "lea rdi, str.HOME",
            "call sym.imp.getenv",
            "lea rdx, str._s_.smbgetrc",
            "lea rdi, [rsp + 8]",
            "mov rcx, rax",
            "mov esi, 1",
            "xor eax, eax",
            "call sym.imp.__asprintf_chk",
            "cmp eax, 0xffffffff",
            "je 0x4022de",
            "mov rdi, qword [rsp + 8]",
            "xor esi, esi",
            "call sym.imp.access",
            "test eax, eax",
            "je 0x4022f3",
            "mov rdi, qword [rsp + 8]",
            "call sym.imp.free",
            "lea rsi, [0x004028a0]",
            "mov edi, 0x1c",
            "call sym.imp.signal",
            "lea rsi, [0x00402d70]",
            "mov edi, 2",
            "call sym.imp.signal",
            "lea rsi, [0x00402d70]",
            "mov edi, 0xf",
            "call sym.imp.signal",
            "mov rdi, qword [rbx]",
            "mov rdx, rbx",
            "mov esi, r13d",
            "xor r8d, r8d",
            "mov rcx, rbp",
            "xor r13d, r13d",
            "call sym.imp.poptGetContext",
            "mov rbx, rax",
            "nop dword [rax]",
            "mov rdi, rbx",
            "call sym.imp.poptGetNextOpt",
            "test eax, eax",
            "js 0x402218",
            "cmp eax, 0x65",
            "je 0x402270",
            "cmp eax, 0x66",
            "je 0x402258",
            "cmp eax, 0x61",
            "jne 0x4021d8",
            "lea rax, [0x00404095]",
            "mov rdi, rbx",
            "mov qword [0x00605228], rax",
            "mov qword [0x00605230], rax",
            "call sym.imp.poptGetNextOpt",
            "test eax, eax",
            "jns 0x4021e4",
            "mov eax, dword [0x00605250]",
            "test eax, eax",
            "je 0x40227b",
            "cmp dword [0x00605220], 0",
            "je 0x40229e",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.The__o___R_or__O_and__U_options_can_not_be_used_together._n",
            "mov edx, 0x3a",
            "mov esi, 1",
            "mov ebp, 1",
            "mov rcx, qword [rax]",
            "call sym.imp.fwrite",
            "jmp 0x4022e3",
            "mov rdi, rbx",
            "call sym.imp.poptGetOptArg",
            "mov rsi, rbp",
            "mov rdi, rax",
            "call fcn.00402550",
            "jmp 0x4021d8",
            "mov r13d, 1",
            "jmp 0x4021d8",
            "cmp dword [rsp], 0",
            "jne 0x40228b",
            "cmp qword [0x00605248], 0",
            "je 0x402305",
            "cmp dword [0x00605220], 0",
            "jne 0x40222b",
            "cmp qword [0x00605248], 0",
            "je 0x402305",
            "cmp dword [rsp + 4], 0",
            "jne 0x4023c6",
            "cmp qword [0x00605248], 0",
            "je 0x402305",
            "test eax, eax",
            "je 0x402305",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.The__o_and__O_options_cannot_be_used_together._n",
            "mov edx, 0x2f",
            "mov esi, 1",
            "mov ebp, 1",
            "mov rcx, qword [rax]",
            "call sym.imp.fwrite",
            "jmp 0x4022e3",
            "mov ebp, 1",
            "add rsp, 0x3d8",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rdi, qword [rsp + 8]",
            "mov rsi, rbp",
            "call fcn.00402550",
            "jmp 0x40217a",
            "mov esi, dword [0x00605244]",
            "lea rdi, [0x004028c0]",
            "call sym.imp.smbc_init",
            "test eax, eax",
            "js 0x402414",
            "test r13b, r13b",
            "jne 0x4023f0",
            "call fcn.00402860",
            "xor edi, edi",
            "mov dword [0x00605264], eax",
            "xor ebp, ebp",
            "call sym.imp.time_mono",
            "mov qword [0x00605268], rax",
            "nop dword [rax + rax]",
            "mov rdi, rbx",
            "call sym.imp.poptGetArg",
            "test rax, rax",
            "je 0x40238d",
            "mov edx, dword [rsp + 4]",
            "test edx, edx",
            "jne 0x4023b0",
            "mov r9, qword [0x00605248]",
            "mov ecx, dword [rsp]",
            "lea rsi, [0x00404095]",
            "xor edx, edx",
            "mov r8d, 1",
            "mov rdi, rax",
            "call fcn.00402d80",
            "mov rdi, rbx",
            "mov ebp, eax",
            "call sym.imp.poptGetArg",
            "test rax, rax",
            "jne 0x402355",
            "lea rsi, str..._source3_utils_smbget.c:689",
            "mov rdi, r12",
            "call sym.imp._talloc_free",
            "test ebp, ebp",
            "jne 0x4022e3",
            "call fcn.00402d00",
            "mov edx, dword [rsp]",
            "lea rsi, [0x00404095]",
            "mov rdi, rax",
            "call fcn.00403a70",
            "mov ebp, eax",
            "jmp 0x402348",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.The__o_or__O_and__R_options_can_not_be_used_together._n",
            "mov edx, 0x36",
            "mov esi, 1",
            "mov ebp, 1",
            "mov rcx, qword [rax]",
            "call sym.imp.fwrite",
            "jmp 0x4022e3",
            "xor edi, edi",
            "call sym.imp.smbc_set_context",
            "lea rdx, str.require",
            "lea rsi, str.smb_encrypt_level",
            "mov rdi, rax",
            "xor eax, eax",
            "call sym.imp.smbc_option_set",
            "jmp 0x402328",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Unable_to_initialize_libsmbclient_n",
            "mov edx, 0x22",
            "mov esi, 1",
            "mov ebp, 1",
            "mov rcx, qword [rax]",
            "call sym.imp.fwrite",
            "jmp 0x4022e3"
        ]
    },
    "sym.imp._talloc_stackframe": {
        "function_address": "0x00401aa0",
        "instructions": [
            "jmp qword [reloc._talloc_stackframe]"
        ]
    },
    "sym.imp.load_case_tables": {
        "function_address": "0x00401b00",
        "instructions": [
            "jmp qword [reloc.load_case_tables]"
        ]
    },
    "sym.imp.getenv": {
        "function_address": "0x00401a40",
        "instructions": [
            "jmp qword [reloc.getenv]"
        ]
    },
    "sym.imp.__asprintf_chk": {
        "function_address": "0x00401ac0",
        "instructions": [
            "jmp qword [reloc.__asprintf_chk]"
        ]
    },
    "sym.imp.access": {
        "function_address": "0x004018a0",
        "instructions": [
            "jmp qword [reloc.access]"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x004018f0",
        "instructions": [
            "jmp qword [reloc.free]"
        ]
    },
    "sym.imp.signal": {
        "function_address": "0x00401970",
        "instructions": [
            "jmp qword [reloc.signal]"
        ]
    },
    "sym.imp.poptGetContext": {
        "function_address": "0x00401c40",
        "instructions": [
            "jmp qword [reloc.poptGetContext]"
        ]
    },
    "sym.imp.poptGetNextOpt": {
        "function_address": "0x00401c50",
        "instructions": [
            "jmp qword [reloc.poptGetNextOpt]"
        ]
    },
    "sym.imp.fwrite": {
        "function_address": "0x00401ba0",
        "instructions": [
            "jmp qword [reloc.fwrite]"
        ]
    },
    "sym.imp.poptGetOptArg": {
        "function_address": "0x00401bf0",
        "instructions": [
            "jmp qword [reloc.poptGetOptArg]"
        ]
    },
    "fcn.00402550": {
        "function_address": "0x00402550",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rsi",
            "lea rsi, [0x00403f6f]",
            "push r12",
            "xor r12d, r12d",
            "push rbp",
            "push rbx",
            "sub rsp, 0x108",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0xf8], rax",
            "xor eax, eax",
            "mov qword [rsp + 0x18], rdi",
            "call sym.imp.fopen",
            "test rax, rax",
            "mov qword [rsp + 0x10], rax",
            "je 0x40282a",
            "nop dword [rax]",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.feof",
            "test eax, eax",
            "jne 0x402715",
            "mov rdi, qword [rsp + 0x10]",
            "lea rcx, [rsp + 0x90]",
            "lea rdx, [rsp + 0x20]",
            "lea rsi, str._100s__100s_n",
            "xor eax, eax",
            "add r12d, 1",
            "call sym.imp.fscanf",
            "cmp eax, 1",
            "jle 0x402800",
            "xor ebp, ebp",
            "cmp byte [r13 + 8], 0",
            "lea rbx, [r13 + 0x30]",
            "mov r15, r13",
            "jne 0x402655",
            "jmp 0x4026d9",
            "cmp byte [rsp + 0x90], 0x6f",
            "je 0x402798",
            "mov rdx, qword [rsp + 0x18]",
            "mov rax, qword [reloc.stderr]",
            "lea r8, [rsp + 0x20]",
            "lea rcx, [rsp + 0x90]",
            "mov r9d, r12d",
            "mov esi, 1",
            "mov ebp, 1",
            "mov qword [rsp], rdx",
            "mov rdi, qword [rax]",
            "lea rdx, str.Illegal_value__s_for__s_at_line__d_in__s_n",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "nop dword [rax]",
            "mov r15, rbx",
            "add rbx, 0x30",
            "cmp byte [rbx - 0x28], 0",
            "je 0x4026d0",
            "mov rdi, qword [r15]",
            "test rdi, rdi",
            "je 0x402648",
            "lea rsi, [rsp + 0x20]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "jne 0x402648",
            "mov r14, qword [r15 + 0x10]",
            "test r14, r14",
            "je 0x402648",
            "mov eax, dword [r15 + 0xc]",
            "cmp eax, 1",
            "je 0x402750",
            "jb 0x4025f8",
            "cmp eax, 2",
            "je 0x402770",
            "mov rax, qword [reloc.stderr]",
            "mov r9, qword [rsp + 0x18]",
            "lea rcx, [rsp + 0x20]",
            "lea rdx, str.Invalid_variable__s_at_line__d_in__s_n",
            "mov r8d, r12d",
            "mov esi, 1",
            "mov r15, rbx",
            "add rbx, 0x30",
            "mov ebp, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "cmp byte [rbx - 0x28], 0",
            "jne 0x402655",
            "nop dword [rax]",
            "test bpl, bpl",
            "jne 0x4025a0",
            "mov rax, qword [reloc.stderr]",
            "mov r9, qword [rsp + 0x18]",
            "lea rcx, [rsp + 0x20]",
            "lea rdx, str.Invalid_variable__s_at_line__d_in__s_n",
            "mov r8d, r12d",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.feof",
            "test eax, eax",
            "je 0x4025b2",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.fclose",
            "xor eax, eax",
            "mov rdx, qword [rsp + 0xf8]",
            "xor rdx, qword fs:[0x28]",
            "jne 0x402856",
            "add rsp, 0x108",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "lea rdi, [rsp + 0x90]",
            "mov ebp, 1",
            "call sym.imp.__strdup",
            "mov qword [r14], rax",
            "jmp 0x402648",
            "lea rdi, [rsp + 0x90]",
            "mov edx, 0xa",
            "xor esi, esi",
            "mov ebp, 1",
            "call sym.imp.strtol",
            "mov dword [r14], eax",
            "jmp 0x402648",
            "movzx eax, byte [rsp + 0x91]",
            "cmp al, 0x6e",
            "je 0x4027e0",
            "cmp al, 0x66",
            "jne 0x402606",
            "cmp byte [rsp + 0x92], 0x66",
            "jne 0x402606",
            "cmp byte [rsp + 0x93], 0",
            "jne 0x402606",
            "mov dword [r14], 0",
            "mov ebp, 1",
            "jmp 0x402648",
            "cmp byte [rsp + 0x92], 0",
            "jne 0x402606",
            "mov dword [r14], 1",
            "mov ebp, 1",
            "jmp 0x402648",
            "mov rax, qword [reloc.stderr]",
            "mov r8, qword [rsp + 0x18]",
            "lea rdx, str.Cant_parse_line__d_of__s__ignoring._n",
            "mov ecx, r12d",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4025a0",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rsp + 0x18]",
            "lea rdx, str.Cant_open_RC_file__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov eax, 1",
            "jmp 0x402721",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.smbc_init": {
        "function_address": "0x00401b90",
        "instructions": [
            "jmp qword [reloc.smbc_init]"
        ]
    },
    "fcn.00402860": {
        "function_address": "0x00402860",
        "instructions": [
            "sub rsp, 0x18",
            "xor eax, eax",
            "mov esi, 0x5413",
            "mov rdx, rsp",
            "mov edi, 1",
            "call sym.imp.ioctl",
            "test eax, eax",
            "js 0x402890",
            "movzx eax, word [rsp + 2]",
            "add rsp, 0x18",
            "ret",
            "xor eax, eax",
            "add rsp, 0x18",
            "ret"
        ]
    },
    "sym.imp.time_mono": {
        "function_address": "0x00401c00",
        "instructions": [
            "jmp qword [reloc.time_mono]"
        ]
    },
    "sym.imp.poptGetArg": {
        "function_address": "0x00401af0",
        "instructions": [
            "jmp qword [reloc.poptGetArg]"
        ]
    },
    "fcn.00402d80": {
        "function_address": "0x00402d80",
        "instructions": [
            "push r15",
            "mov r15, r9",
            "push r14",
            "push r13",
            "mov r13d, r8d",
            "push r12",
            "lea r12, [0x00404095]",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov rbx, rdi",
            "xor edi, edi",
            "sub rsp, 0x15f8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x15e8], rax",
            "xor eax, eax",
            "mov dword [rsp + 0x30], edx",
            "mov dword [rsp + 0x38], ecx",
            "call sym.imp.time_mono",
            "cmp byte [rbx], 0",
            "mov qword [rsp + 0x40], rax",
            "je 0x402ddc",
            "movzx eax, byte [rbp]",
            "test al, al",
            "jne 0x402f50",
            "lea r14, [rsp + 0x5e0]",
            "lea r8, str._s_s_s",
            "mov qword [rsp], r12",
            "mov r9, rbx",
            "mov ecx, 0x1000",
            "mov edx, 1",
            "mov esi, 0xfff",
            "mov rdi, r14",
            "xor eax, eax",
            "mov qword [rsp + 8], rbp",
            "call sym.imp.__snprintf_chk",
            "xor esi, esi",
            "mov edx, 0x1ed",
            "mov rdi, r14",
            "call sym.imp.smbc_open",
            "test eax, eax",
            "mov r12d, eax",
            "js 0x402f80",
            "lea rsi, [rsp + 0xf0]",
            "mov edi, eax",
            "call sym.imp.smbc_fstat",
            "test eax, eax",
            "js 0x403718",
            "test r15, r15",
            "mov qword [rsp + 0x30], r15",
            "je 0x4036e0",
            "test r13d, r13d",
            "jne 0x402e67",
            "mov rax, qword [rsp + 0x30]",
            "cmp byte [rax], 0x2f",
            "sete al",
            "movzx eax, al",
            "add qword [rsp + 0x30], rax",
            "mov r10d, dword [0x00605220]",
            "test r10d, r10d",
            "jne 0x403440",
            "mov r8d, dword [0x00605250]",
            "test r8d, r8d",
            "je 0x402fe8",
            "mov qword [rsp + 0x48], 0",
            "xor ebx, ebx",
            "mov r13d, 1",
            "movsxd rdx, dword [0x006051f8]",
            "mov rdi, rdx",
            "mov qword [rsp + 0x28], rdx",
            "call sym.imp.malloc",
            "test rax, rax",
            "mov rbp, rax",
            "mov rdx, qword [rsp + 0x28]",
            "je 0x4030ff",
            "cmp rbx, qword [rsp + 0x120]",
            "jl 0x402ef6",
            "jmp 0x4035c8",
            "mov eax, dword [0x00605258]",
            "test eax, eax",
            "je 0x4031c0",
            "movsxd rdx, dword [0x006051f8]",
            "add rbx, rdx",
            "cmp qword [rsp + 0x120], rbx",
            "jle 0x4035c8",
            "mov rsi, rbp",
            "mov edi, r12d",
            "call sym.imp.smbc_read",
            "test rax, rax",
            "mov r15, rax",
            "js 0x403630",
            "mov rdx, rax",
            "mov rsi, rbp",
            "mov edi, r13d",
            "add qword [0x00605278], rax",
            "call sym.imp.write",
            "test rax, rax",
            "js 0x403688",
            "mov eax, dword [0x00605254]",
            "test eax, eax",
            "je 0x402ed0",
            "mov rax, qword [reloc.stderr]",
            "mov edi, 0x2e",
            "mov rsi, qword [rax]",
            "call sym.imp.fputc",
            "jmp 0x402ede",
            "cmp al, 0x2f",
            "je 0x402ddc",
            "mov rdi, rbx",
            "nop dword [rax + rax]",
            "call sym.imp.strlen",
            "cmp byte [rbx + rax - 1], 0x2f",
            "lea rax, [0x004040c2]",
            "cmovne r12, rax",
            "jmp 0x402ddc",
            "call sym.imp.__errno_location",
            "cmp dword [rax], 0x15",
            "jbe 0x402fd0",
            "lea rdi, str.smbc_open",
            "mov ebx, 1",
            "call sym.imp.perror",
            "nop dword [rax + rax]",
            "mov rdx, qword [rsp + 0x15e8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, ebx",
            "jne 0x403a41",
            "add rsp, 0x15f8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov edx, dword [rax]",
            "lea rax, [0x004049c0]",
            "movsxd rdx, dword [rax + rdx*4]",
            "add rax, rdx",
            "jmp rax",
            "cmp dword [rsp + 0x38], 1",
            "mov rdi, qword [rsp + 0x30]",
            "mov edx, 0x1ed",
            "sbb esi, esi",
            "xor eax, eax",
            "and esi, 0x80",
            "add esi, 0x842",
            "call sym.imp.open",
            "test eax, eax",
            "mov r13d, eax",
            "js 0x403870",
            "lea rdx, [rsp + 0x60]",
            "mov esi, eax",
            "mov edi, 1",
            "call sym.imp.__fxstat",
            "test eax, eax",
            "jne 0x4038b3",
            "mov rax, qword [rsp + 0x90]",
            "test rax, rax",
            "mov qword [rsp + 0x48], rax",
            "je 0x4036d0",
            "mov r9, qword [rsp + 0x120]",
            "cmp rax, r9",
            "je 0x40382c",
            "cmp qword [rsp + 0x48], 0x600",
            "jle 0x4036d0",
            "cmp r9, 0x600",
            "jle 0x4036d0",
            "mov rbx, qword [rsp + 0x48]",
            "mov ecx, dword [0x0060525c]",
            "sub rbx, 0x200",
            "test ecx, ecx",
            "jne 0x403974",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov edi, r13d",
            "call sym.imp.lseek",
            "test rax, rax",
            "mov rcx, rax",
            "js 0x403999",
            "xor edx, edx",
            "mov rsi, rbx",
            "mov edi, r12d",
            "mov qword [rsp + 0x28], rcx",
            "call sym.imp.smbc_lseek",
            "test rax, rax",
            "mov rcx, qword [rsp + 0x28]",
            "js 0x403a19",
            "cmp rcx, rax",
            "je 0x40392d",
            "lea rdx, str.Offset_in_local_and_remote_files_is_different__local:__ld__remote:__ld__n",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, r12d",
            "call sym.imp.smbc_close",
            "mov edi, r13d",
            "call sym.imp.close",
            "mov ebx, 1",
            "jmp 0x402fa0",
            "mov r11d, dword [rsp + 0x30]",
            "mov rcx, r14",
            "lea rdx, str._s_is_a_directory._Specify__R_to_download_recursively_n",
            "test r11d, r11d",
            "je 0x40314a",
            "mov edx, dword [rsp + 0x38]",
            "mov rdi, rbx",
            "mov rsi, rbp",
            "call fcn.00403a70",
            "mov ebx, eax",
            "jmp 0x402fa0",
            "lea rdx, str._s_cant_be_found_on_the_remote_server_n",
            "mov rcx, r14",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov ebx, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x402fa0",
            "mov rcx, r14",
            "lea rdx, str.The_share_name_used_in__s_does_not_exist_n",
            "jmp 0x40314a",
            "mov rcx, r14",
            "lea rdx, str.You_dont_have_enough_permissions_to_access__s_n",
            "jmp 0x40314a",
            "mov rax, qword [reloc.stderr]",
            "lea rdi, str.Not_enough_memory_n",
            "mov edx, 0x12",
            "mov esi, 1",
            "mov ebx, 1",
            "mov rcx, qword [rax]",
            "call sym.imp.fwrite",
            "jmp 0x402fa0",
            "xor edi, edi",
            "mov r15, qword [rsp + 0x120]",
            "call sym.imp.time_mono",
            "cmp qword [rsp + 0x40], rax",
            "je 0x403410",
            "mov rdx, rbx",
            "sub rax, qword [rsp + 0x40]",
            "sub rdx, qword [rsp + 0x48]",
            "cvtsi2sd xmm1, rax",
            "cvtsi2sd xmm0, rdx",
            "divsd xmm0, xmm1",
            "cvttsd2si rdx, xmm0",
            "mov qword [rsp + 0x38], rdx",
            "mov rax, r15",
            "sub rax, rbx",
            "test r15, r15",
            "cvtsi2sd xmm1, rax",
            "divsd xmm1, xmm0",
            "xorpd xmm0, xmm0",
            "cvttsd2si rax, xmm1",
            "je 0x403232",
            "cvtsi2sd xmm0, rbx",
            "cvtsi2sd xmm1, r15",
            "mulsd xmm0, qword [0x00404a58]",
            "divsd xmm0, xmm1",
            "lea rsi, [rsp + 0x580]",
            "mov edx, 0x14",
            "mov rdi, rbx",
            "mov qword [rsp + 0x28], rax",
            "movsd qword [rsp + 0x10], xmm0",
            "call fcn.00402c20",
            "lea rsi, [rsp + 0x5a0]",
            "mov edx, 0x14",
            "mov rdi, r15",
            "call fcn.00402c20",
            "mov rdi, qword [rsp + 0x38]",
            "lea rsi, [rsp + 0x5c0]",
            "mov edx, 0x14",
            "call fcn.00402c20",
            "mov rax, qword [rsp + 0x28]",
            "movsd xmm0, qword [rsp + 0x10]",
            "cmp rax, 0xffffffffffffffff",
            "jl 0x403528",
            "mov edx, 0x91a2b3c5",
            "mov esi, eax",
            "mov r8d, 0x88888889",
            "imul edx",
            "mov eax, esi",
            "mov edi, esi",
            "sar edi, 0x1f",
            "mov r10d, 0x3c",
            "mov r11d, 0x3c",
            "movsd qword [rsp + 0x10], xmm0",
            "lea r9d, [rdx + rsi]",
            "imul r8d",
            "sar r9d, 0xb",
            "sub r9d, edi",
            "lea ecx, [rdx + rsi]",
            "sar ecx, 5",
            "sub ecx, edi",
            "lea rdi, [0x00605280]",
            "mov eax, ecx",
            "imul eax, r10d",
            "sub esi, eax",
            "mov eax, ecx",
            "imul r8d",
            "lea r8, str._02d:_02d:_02d",
            "mov dword [rsp + 8], esi",
            "mov esi, 0x63",
            "lea eax, [rdx + rcx]",
            "mov edx, ecx",
            "sar edx, 0x1f",
            "sar eax, 5",
            "sub eax, edx",
            "mov edx, 1",
            "imul eax, r11d",
            "sub ecx, eax",
            "xor eax, eax",
            "mov dword [rsp], ecx",
            "mov ecx, 0x64",
            "call sym.imp.__snprintf_chk",
            "movsd xmm0, qword [rsp + 0x10]",
            "lea rdx, [0x00605280]",
            "lea r9, [rsp + 0x5c0]",
            "lea r8, [rsp + 0x5a0]",
            "lea rcx, [rsp + 0x580]",
            "lea rdi, [rsp + 0x50]",
            "mov esi, 1",
            "mov qword [rsp], rdx",
            "lea rdx, str._s_of__s___.2f____at__s_s_ETA:__s",
            "mov eax, 1",
            "call sym.imp.__asprintf_chk",
            "cmp eax, 0xffffffff",
            "mov r15d, eax",
            "je 0x402ede",
            "mov ecx, dword [0x00605264]",
            "mov rdi, qword [rsp + 0x30]",
            "test ecx, ecx",
            "je 0x403510",
            "mov dword [rsp + 0x28], ecx",
            "call sym.imp.strlen",
            "mov ecx, dword [rsp + 0x28]",
            "sub ecx, r15d",
            "sub ecx, 3",
            "cmp eax, ecx",
            "jle 0x403428",
            "mov rdx, qword [rsp + 0x30]",
            "movsxd rcx, ecx",
            "cdqe",
            "lea rdi, [rsp + 0x58]",
            "mov esi, 1",
            "sub rdx, rcx",
            "lea rcx, [rdx + rax + 3]",
            "lea rdx, str...._s",
            "xor eax, eax",
            "call sym.imp.__asprintf_chk",
            "cmp eax, 0xffffffff",
            "je 0x402ede",
            "mov rcx, qword [rsp + 0x58]",
            "mov rax, qword [reloc.stderr]",
            "mov r8, qword [rsp + 0x50]",
            "lea rdx, str._r__s___s",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rdi, qword [rsp + 0x58]",
            "call sym.imp.free",
            "mov rdi, qword [rsp + 0x50]",
            "call sym.imp.free",
            "jmp 0x402ede",
            "mov qword [rsp + 0x38], 0",
            "xorpd xmm0, xmm0",
            "jmp 0x4031ff",
            "mov rdi, qword [rsp + 0x30]",
            "movsxd rsi, ecx",
            "call sym.imp.__strndup",
            "mov rcx, rax",
            "mov qword [rsp + 0x58], rax",
            "jmp 0x4033d2",
            "mov rsi, qword [rsp + 0x30]",
            "lea rdx, [rsp + 0x60]",
            "mov edi, 1",
            "call sym.imp.__xstat",
            "test eax, eax",
            "jne 0x4034a0",
            "mov rdx, qword [rsp + 0x148]",
            "cmp qword [rsp + 0xb8], rdx",
            "jl 0x4034a0",
            "mov r9d, dword [0x0060525c]",
            "test r9d, r9d",
            "je 0x40348c",
            "mov rdx, qword [rsp + 0x30]",
            "lea rsi, str._s_is_up_to_date__skipping_n",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "mov edi, r12d",
            "xor ebx, ebx",
            "call sym.imp.smbc_close",
            "jmp 0x402fa0",
            "mov rdi, qword [rsp + 0x30]",
            "xor eax, eax",
            "mov edx, 0x1fd",
            "mov esi, 0xa42",
            "xor ebx, ebx",
            "call sym.imp.open",
            "test eax, eax",
            "mov r13d, eax",
            "mov qword [rsp + 0x48], 0",
            "jns 0x402e98",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "mov bl, 1",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rsp + 0x30]",
            "lea rdx, str.Cant_open__s_:__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, r12d",
            "call sym.imp.smbc_close",
            "jmp 0x402fa0",
            "call sym.imp.__strdup",
            "mov rcx, rax",
            "mov qword [rsp + 0x58], rax",
            "jmp 0x4033d2",
            "movabs r15, 0x6e776f6e6b6e55",
            "mov qword [0x00605288], 0",
            "mov qword [0x00605290], 0",
            "mov qword [0x00605280], r15",
            "mov qword [0x00605298], 0",
            "mov qword [0x006052a0], 0",
            "mov qword [0x006052a8], 0",
            "mov qword [0x006052b0], 0",
            "mov qword [0x006052b8], 0",
            "mov qword [0x006052c0], 0",
            "mov qword [0x006052c8], 0",
            "mov qword [0x006052d0], 0",
            "mov qword [0x006052d8], 0",
            "mov dword [0x006052e0], 0",
            "jmp 0x403322",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov eax, dword [0x00605254]",
            "test eax, eax",
            "jne 0x4038d9",
            "mov r8d, dword [0x00605258]",
            "test r8d, r8d",
            "je 0x403798",
            "mov edi, dword [0x00605260]",
            "test edi, edi",
            "je 0x403606",
            "mov esi, dword [0x00605250]",
            "test esi, esi",
            "je 0x403751",
            "mov edi, r12d",
            "xor ebx, ebx",
            "call sym.imp.smbc_close",
            "cmp r13d, 1",
            "je 0x402fa0",
            "mov edi, r13d",
            "call sym.imp.close",
            "jmp 0x402fa0",
            "mov rax, qword [reloc.stderr]",
            "mov ecx, dword [0x006051f8]",
            "lea rdx, str.Cant_read__u_bytes_at_offset__ld__file__s_n",
            "mov r9, r14",
            "mov r8, rbx",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, r12d",
            "call sym.imp.smbc_close",
            "cmp r13d, 1",
            "je 0x40366f",
            "mov edi, r13d",
            "call sym.imp.close",
            "mov rdi, rbp",
            "mov ebx, 1",
            "call sym.imp.free",
            "jmp 0x402fa0",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Cant_write__u_bytes_to_local_file__s_at_offset__ld_n",
            "mov r9, rbx",
            "mov r8, r14",
            "mov ecx, r15d",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov rdi, rbp",
            "call sym.imp.free",
            "mov edi, r12d",
            "call sym.imp.smbc_close",
            "cmp r13d, 1",
            "jne 0x4030f7",
            "jmp 0x4030ff",
            "xor ebx, ebx",
            "jmp 0x402e98",
            "cmp byte [rbp], 0",
            "mov qword [rsp + 0x30], rbp",
            "jne 0x402e4f",
            "mov rdi, rbx",
            "mov esi, 0x2f",
            "call sym.imp.strrchr",
            "lea rdx, [rax + 1]",
            "test rax, rax",
            "cmovne rbx, rdx",
            "mov qword [rsp + 0x30], rbx",
            "jmp 0x402e4f",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "mov ebx, 1",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Cant_stat__s:__s_n",
            "mov rcx, r14",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x402fa0",
            "mov esi, dword [rsp + 0x108]",
            "mov edi, r13d",
            "call sym.imp.fchmod",
            "test eax, eax",
            "jns 0x403606",
            "mov rax, qword [reloc.stderr]",
            "mov r8d, dword [rsp + 0x108]",
            "lea rdx, str.Unable_to_change_mode_of_local_file__s_to__o_n",
            "mov rcx, r14",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4030ef",
            "mov rbp, qword [reloc.stderr]",
            "lea rdx, [0x00404096]",
            "mov rcx, r14",
            "xor eax, eax",
            "mov esi, 1",
            "mov rdi, qword [rbp]",
            "call sym.imp.__fprintf_chk",
            "mov ecx, dword [0x00605264]",
            "test ecx, ecx",
            "je 0x403819",
            "mov rbx, r14",
            "mov edx, dword [rbx]",
            "add rbx, 4",
            "lea eax, [rdx - 0x1010101]",
            "not edx",
            "and eax, edx",
            "and eax, 0x80808080",
            "je 0x4037c6",
            "mov edx, eax",
            "shr edx, 0x10",
            "test eax, 0x8080",
            "cmove eax, edx",
            "lea rdx, [rbx + 2]",
            "cmove rbx, rdx",
            "add al, al",
            "sbb rbx, 3",
            "sub ebx, r14d",
            "cmp ecx, ebx",
            "jle 0x403819",
            "nop",
            "mov rsi, qword [rbp]",
            "mov edi, 0x20",
            "add ebx, 1",
            "call sym.imp.fputc",
            "cmp dword [0x00605264], ebx",
            "jg 0x403800",
            "mov rsi, qword [rbp]",
            "mov edi, 0xa",
            "call sym.imp.fputc",
            "jmp 0x4035ee",
            "mov edi, dword [0x0060525c]",
            "mov rcx, r14",
            "lea rdx, str._s_is_already_downloaded_completely._n",
            "test edi, edi",
            "jne 0x403912",
            "mov esi, dword [0x00605258]",
            "test esi, esi",
            "je 0x403908",
            "mov edi, r12d",
            "xor ebx, ebx",
            "call sym.imp.smbc_close",
            "mov edi, r13d",
            "call sym.imp.close",
            "jmp 0x402fa0",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "mov ebx, 1",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rsp + 0x30]",
            "lea rdx, str.Cant_open__s:__s_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, r12d",
            "call sym.imp.smbc_close",
            "jmp 0x402fa0",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "nop word [rax + rax]",
            "call sym.imp.strerror",
            "mov rcx, qword [rsp + 0x30]",
            "mov r8, rax",
            "lea rdx, str.Cant_fstat__s:__s_n",
            "jmp 0x4030d9",
            "mov rax, qword [reloc.stderr]",
            "mov edi, 0xa",
            "mov rsi, qword [rax]",
            "call sym.imp.fputc",
            "lea rsi, str._s_downloaded_n",
            "mov rdx, r14",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x4035ee",
            "lea rdx, [0x0040403e]",
            "mov rcx, r14",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x403852",
            "lea rsi, [rsp + 0x180]",
            "mov edx, 0x200",
            "mov edi, r12d",
            "call sym.imp.smbc_read",
            "cmp rax, 0x200",
            "je 0x4039ad",
            "lea rdx, str.Cant_read__d_bytes_from_remote_file__s_n",
            "mov r8, r14",
            "mov ecx, 0x200",
            "mov rax, qword [reloc.stderr]",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4030ef",
            "mov r8, qword [rsp + 0x48]",
            "mov rdx, qword [rsp + 0x30]",
            "lea rsi, str.Trying_to_start_resume_of__s_at__ld_nAt_the_moment__ld_of__ld_bytes_have_been_retrieved_n",
            "mov rcx, rbx",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x40308d",
            "mov r8, qword [rsp + 0x30]",
            "mov rcx, rbx",
            "lea rdx, str.Cant_seek_to__ld_in_local_file__s_n",
            "jmp 0x4030d9",
            "lea rbx, [rsp + 0x380]",
            "mov edx, 0x200",
            "mov edi, r13d",
            "mov rsi, rbx",
            "call sym.imp.read",
            "cmp rax, 0x200",
            "jne 0x403a2d",
            "lea rdi, [rsp + 0x180]",
            "mov edx, 0x200",
            "mov rsi, rbx",
            "call sym.imp.memcmp",
            "test eax, eax",
            "jne 0x403a46",
            "mov rbx, qword [rsp + 0x48]",
            "mov edx, dword [0x0060525c]",
            "sub rbx, 0x400",
            "test edx, edx",
            "je 0x402e98",
            "lea rsi, str.Current_local_and_remote_file_appear_to_be_the_same._Starting_download_from_offset__ld_n",
            "mov rdx, rbx",
            "mov edi, 1",
            "call sym.imp.__printf_chk",
            "jmp 0x402e98",
            "mov r8, qword [rsp + 0x30]",
            "mov rcx, rbx",
            "lea rdx, str.Cant_seek_to__ld_in_remote_file__s_n",
            "jmp 0x4030d9",
            "mov r8, rbp",
            "mov ecx, 0x200",
            "lea rdx, str.Cant_read__d_bytes_from_local_file__s_n",
            "jmp 0x403959",
            "call sym.imp.__stack_chk_fail",
            "mov rax, qword [reloc.stderr]",
            "lea rdx, str.Local_and_remote_file_appear_to_be_different__not_doing_resume_for__s_n",
            "mov rcx, r14",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x4030ef"
        ]
    },
    "sym.imp._talloc_free": {
        "function_address": "0x00401900",
        "instructions": [
            "jmp qword [reloc._talloc_free]"
        ]
    },
    "fcn.00402d00": {
        "function_address": "0x00402d00",
        "instructions": [
            "sub rsp, 0x78",
            "mov rdi, qword [0x00605278]",
            "mov edx, 0x64",
            "mov rsi, rsp",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x68], rax",
            "xor eax, eax",
            "call fcn.00402c20",
            "mov ecx, dword [0x00605258]",
            "test ecx, ecx",
            "je 0x402d39",
            "xor edi, edi",
            "call sym.imp.exit",
            "xor edi, edi",
            "call sym.imp.time_mono",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "sub r8, qword [0x00605268]",
            "lea rdx, str.Downloaded__s_in__lu_seconds_n",
            "mov rcx, rsp",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x402d32"
        ]
    },
    "fcn.00403a70": {
        "function_address": "0x00403a70",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "mov r12, rsi",
            "push rbp",
            "push rbx",
            "lea rbx, [0x00404095]",
            "sub rsp, 0x10d8",
            "mov rax, qword fs:[0x28]",
            "mov qword [rsp + 0x10c8], rax",
            "xor eax, eax",
            "cmp byte [rdi], 0",
            "mov dword [rsp + 0x1c], edx",
            "je 0x403ab5",
            "movzx eax, byte [rsi]",
            "test al, al",
            "jne 0x403cd0",
            "lea r8, str._s_s_s",
            "lea rdi, [rsp + 0xc0]",
            "mov r9, r13",
            "mov ecx, 0x1000",
            "mov edx, 1",
            "mov esi, 0xfff",
            "xor eax, eax",
            "mov qword [rsp + 8], r12",
            "mov qword [rsp], rbx",
            "call sym.imp.__snprintf_chk",
            "lea rdi, [rsp + 0xc0]",
            "call sym.imp.smbc_opendir",
            "test eax, eax",
            "mov ebp, eax",
            "jle 0x403de0",
            "cmp byte [r12], 0x2f",
            "mov rbx, r12",
            "jne 0x403b19",
            "nop word [rax + rax]",
            "add rbx, 1",
            "cmp byte [rbx], 0x2f",
            "je 0x403b10",
            "mov esi, 0x1ed",
            "mov rdi, rbx",
            "xor r15d, r15d",
            "call sym.imp.mkdir",
            "mov rdi, r12",
            "call sym.imp.__strdup",
            "mov qword [rsp + 0x10], rax",
            "nop word cs:[rax + rax]",
            "mov edi, ebp",
            "call sym.imp.smbc_readdir",
            "test rax, rax",
            "mov r14, rax",
            "je 0x403be0",
            "cmp byte [r14 + 0x1c], 0x2e",
            "je 0x403c30",
            "lea r12, [r14 + 0x1c]",
            "mov rcx, qword [rsp + 0x10]",
            "lea rdx, str._s__s",
            "lea rdi, [rsp + 0x28]",
            "xor eax, eax",
            "mov esi, 1",
            "mov r8, r12",
            "call sym.imp.__asprintf_chk",
            "cmp eax, 0xffffffff",
            "je 0x403e72",
            "mov r8d, dword [r14]",
            "cmp r8d, 8",
            "jbe 0x403c58",
            "mov rax, qword [reloc.stderr]",
            "mov rcx, qword [rsp + 0x28]",
            "lea rdx, str.Ignoring_file__s_of_type__d_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "nop word [rax + rax]",
            "mov rdi, qword [rsp + 0x28]",
            "call sym.imp.free",
            "mov edi, ebp",
            "call sym.imp.smbc_readdir",
            "test rax, rax",
            "mov r14, rax",
            "jne 0x403b53",
            "nop dword [rax]",
            "mov rdi, qword [rsp + 0x10]",
            "call sym.imp.free",
            "mov r12d, dword [0x00605260]",
            "test r12d, r12d",
            "jne 0x403c70",
            "mov edi, ebp",
            "call sym.imp.smbc_closedir",
            "mov rdx, qword [rsp + 0x10c8]",
            "xor rdx, qword fs:[0x28]",
            "mov eax, r15d",
            "jne 0x403e7d",
            "add rsp, 0x10d8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "movzx eax, byte [r14 + 0x1d]",
            "test al, al",
            "je 0x403b40",
            "cmp al, 0x2e",
            "jne 0x403b5e",
            "cmp byte [r14 + 0x1e], 0",
            "je 0x403b40",
            "jmp 0x403b5e",
            "lea rdx, [0x00404a18]",
            "mov eax, r8d",
            "movsxd rax, dword [rdx + rax*4]",
            "add rax, rdx",
            "jmp rax",
            "lea rsi, [rsp + 0x30]",
            "mov edi, ebp",
            "call sym.imp.smbc_fstat",
            "test eax, eax",
            "js 0x403e46",
            "mov esi, dword [rsp + 0x48]",
            "mov rdi, rbx",
            "call sym.imp.chmod",
            "test eax, eax",
            "jns 0x403bf6",
            "mov rax, qword [reloc.stderr]",
            "mov r8d, dword [rsp + 0x48]",
            "lea rdx, str.Unable_to_change_mode_of_local_dir__s_to__o_n",
            "mov rcx, rbx",
            "mov esi, 1",
            "mov r15d, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, ebp",
            "call sym.imp.smbc_closedir",
            "jmp 0x403bfd",
            "cmp al, 0x2f",
            "je 0x403ab5",
            "nop dword [rax + rax]",
            "call sym.imp.strlen",
            "cmp byte [r13 + rax - 1], 0x2f",
            "lea rax, [0x004040c2]",
            "cmovne rbx, rax",
            "jmp 0x403ab5",
            "mov edx, dword [rsp + 0x1c]",
            "mov rsi, qword [rsp + 0x28]",
            "mov rdi, r13",
            "call fcn.00403a70",
            "mov r15d, eax",
            "jmp 0x403bc0",
            "mov edx, dword [rsp + 0x1c]",
            "lea rdi, str.smb:__",
            "mov rsi, r12",
            "call fcn.00403a70",
            "mov r15d, eax",
            "jmp 0x403bc0",
            "mov r14d, dword [0x00605258]",
            "test r14d, r14d",
            "jne 0x403bc0",
            "lea rsi, str.Ignoring_ipc__share__s_n",
            "mov rdx, r12",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x403bc0",
            "mov ecx, dword [rsp + 0x1c]",
            "mov rsi, qword [rsp + 0x28]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov edx, 1",
            "mov rdi, r13",
            "call fcn.00402d80",
            "mov r15d, eax",
            "jmp 0x403bc0",
            "mov eax, dword [0x00605258]",
            "test eax, eax",
            "jne 0x403bc0",
            "lea rsi, str.Ignoring_comms_share__s_n",
            "mov rdx, r12",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x403bc0",
            "mov eax, dword [0x00605258]",
            "test eax, eax",
            "jne 0x403bc0",
            "lea rsi, str.Ignoring_printer_share__s_n",
            "mov rdx, r12",
            "mov edi, 1",
            "xor eax, eax",
            "call sym.imp.__printf_chk",
            "jmp 0x403bc0",
            "call sym.imp.__errno_location",
            "mov edi, dword [rax]",
            "cmp edi, 0x14",
            "je 0x403e24",
            "call sym.imp.strerror",
            "mov r8, rax",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xc0]",
            "lea rdx, str.Cant_open_directory__s:__s_n",
            "mov esi, 1",
            "mov r15d, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "jmp 0x403bfd",
            "mov ecx, dword [rsp + 0x1c]",
            "xor r9d, r9d",
            "xor r8d, r8d",
            "mov edx, 1",
            "mov rsi, r12",
            "mov rdi, r13",
            "call fcn.00402d80",
            "mov r15d, eax",
            "jmp 0x403bfd",
            "mov rax, qword [reloc.stderr]",
            "lea rcx, [rsp + 0xc0]",
            "lea rdx, str.Unable_to_get_stats_on__s_on_remote_server_n",
            "mov esi, 1",
            "mov rdi, qword [rax]",
            "xor eax, eax",
            "call sym.imp.__fprintf_chk",
            "mov edi, ebp",
            "call sym.imp.smbc_closedir",
            "mov r15d, 1",
            "jmp 0x403bfd",
            "call sym.imp.__stack_chk_fail"
        ]
    },
    "sym.imp.smbc_set_context": {
        "function_address": "0x004019c0",
        "instructions": [
            "jmp qword [reloc.smbc_set_context]"
        ]
    },
    "sym.imp.smbc_option_set": {
        "function_address": "0x00401a90",
        "instructions": [
            "jmp qword [reloc.smbc_option_set]"
        ]
    },
    "sym.__libc_csu_init": {
        "function_address": "0x00403ea0",
        "instructions": [
            "mov qword [rsp - 0x28], rbp",
            "mov qword [rsp - 0x20], r12",
            "lea rbp, section..fini_array",
            "lea r12, segment.GNU_RELRO",
            "mov qword [rsp - 0x18], r13",
            "mov qword [rsp - 0x10], r14",
            "mov qword [rsp - 8], r15",
            "mov qword [rsp - 0x30], rbx",
            "sub rsp, 0x38",
            "sub rbp, r12",
            "mov r13d, edi",
            "mov r14, rsi",
            "sar rbp, 3",
            "mov r15, rdx",
            "call sym._init",
            "test rbp, rbp",
            "je 0x403f06",
            "xor ebx, ebx",
            "nop dword [rax]",
            "mov rdx, r15",
            "mov rsi, r14",
            "mov edi, r13d",
            "call qword [r12 + rbx*8]",
            "add rbx, 1",
            "cmp rbx, rbp",
            "jb 0x403ef0",
            "mov rbx, qword [rsp + 8]",
            "mov rbp, qword [rsp + 0x10]",
            "mov r12, qword [rsp + 0x18]",
            "mov r13, qword [rsp + 0x20]",
            "mov r14, qword [rsp + 0x28]",
            "mov r15, qword [rsp + 0x30]",
            "add rsp, 0x38",
            "ret"
        ]
    },
    "sym._init": {
        "function_address": "0x00401870",
        "instructions": [
            "sub rsp, 8",
            "call fcn.0040246c",
            "add rsp, 8",
            "ret"
        ]
    },
    "fcn.0040246c": {
        "function_address": "0x0040246c",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [reloc.__gmon_start__]",
            "test rax, rax",
            "je 0x40247e",
            "call rax",
            "add rsp, 8",
            "ret"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00402500",
        "instructions": [
            "cmp byte [section..bss], 0",
            "jne 0x40251a",
            "push rbp",
            "mov rbp, rsp",
            "call fcn.00402490",
            "pop rbp",
            "mov byte [section..bss], 1",
            "repz ret"
        ]
    },
    "fcn.00402490": {
        "function_address": "0x00402490",
        "instructions": [
            "mov eax, 0x605207",
            "push rbp",
            "sub rax, section..bss",
            "cmp rax, 0xe",
            "mov rbp, rsp",
            "ja 0x4024a7",
            "pop rbp",
            "ret",
            "mov eax, 0",
            "test rax, rax",
            "je 0x4024a5",
            "pop rbp",
            "mov edi, section..bss",
            "jmp rax"
        ]
    },
    "sym.imp.fopen": {
        "function_address": "0x00401c20",
        "instructions": [
            "jmp qword [reloc.fopen]"
        ]
    },
    "sym.imp.feof": {
        "function_address": "0x00401890",
        "instructions": [
            "jmp qword [reloc.feof]"
        ]
    },
    "sym.imp.fscanf": {
        "function_address": "0x00401ae0",
        "instructions": [
            "jmp qword [reloc.fscanf]"
        ]
    },
    "sym.imp.__fprintf_chk": {
        "function_address": "0x00401920",
        "instructions": [
            "jmp qword [reloc.__fprintf_chk]"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00401a70",
        "instructions": [
            "jmp qword [reloc.strcmp]"
        ]
    },
    "sym.imp.fclose": {
        "function_address": "0x00401990",
        "instructions": [
            "jmp qword [reloc.fclose]"
        ]
    },
    "sym.imp.__strdup": {
        "function_address": "0x00401a20",
        "instructions": [
            "jmp qword [reloc.__strdup]"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x00401ad0",
        "instructions": [
            "jmp qword [reloc.strtol]"
        ]
    },
    "sym.imp.__stack_chk_fail": {
        "function_address": "0x00401950",
        "instructions": [
            "jmp qword [reloc.__stack_chk_fail]"
        ]
    },
    "sym.imp.ioctl": {
        "function_address": "0x004018c0",
        "instructions": [
            "jmp qword [reloc.ioctl]"
        ]
    },
    "sym.imp.__snprintf_chk": {
        "function_address": "0x00401c30",
        "instructions": [
            "jmp qword [reloc.__snprintf_chk]"
        ]
    },
    "sym.imp.smbc_open": {
        "function_address": "0x00401c10",
        "instructions": [
            "jmp qword [reloc.smbc_open]"
        ]
    },
    "sym.imp.smbc_fstat": {
        "function_address": "0x00401b40",
        "instructions": [
            "jmp qword [reloc.smbc_fstat]"
        ]
    },
    "sym.imp.malloc": {
        "function_address": "0x00401b10",
        "instructions": [
            "jmp qword [reloc.malloc]"
        ]
    },
    "sym.imp.smbc_read": {
        "function_address": "0x00401a80",
        "instructions": [
            "jmp qword [reloc.smbc_read]"
        ]
    },
    "sym.imp.write": {
        "function_address": "0x00401b60",
        "instructions": [
            "jmp qword [reloc.write]"
        ]
    },
    "sym.imp.fputc": {
        "function_address": "0x00401ab0",
        "instructions": [
            "jmp qword [reloc.fputc]"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00401980",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.__errno_location": {
        "function_address": "0x00401b50",
        "instructions": [
            "jmp qword [reloc.__errno_location]"
        ]
    },
    "sym.imp.perror": {
        "function_address": "0x00401960",
        "instructions": [
            "jmp qword [reloc.perror]"
        ]
    },
    "sym.imp.open": {
        "function_address": "0x004019b0",
        "instructions": [
            "jmp qword [reloc.open]"
        ]
    },
    "sym.imp.__fxstat": {
        "function_address": "0x00401bc0",
        "instructions": [
            "jmp qword [reloc.__fxstat]"
        ]
    },
    "sym.imp.lseek": {
        "function_address": "0x00401940",
        "instructions": [
            "jmp qword [reloc.lseek]"
        ]
    },
    "sym.imp.smbc_lseek": {
        "function_address": "0x004019d0",
        "instructions": [
            "jmp qword [reloc.smbc_lseek]"
        ]
    },
    "sym.imp.smbc_close": {
        "function_address": "0x00401bd0",
        "instructions": [
            "jmp qword [reloc.smbc_close]"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00401910",
        "instructions": [
            "jmp qword [reloc.close]"
        ]
    },
    "fcn.00402c20": {
        "function_address": "0x00402c20",
        "instructions": [
            "mov r9, rdi",
            "mov rdi, rsi",
            "cmp r9, 0x40000000",
            "jg 0x402c98",
            "cmp r9, 0x100000",
            "jg 0x402cc8",
            "cmp r9, 0x400",
            "jg 0x402c68",
            "lea r8, str._ldb",
            "movsxd rsi, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "xor eax, eax",
            "jmp sym.imp.__snprintf_chk",
            "cvtsi2sd xmm0, r9",
            "lea r8, str._.2fkB",
            "movsxd rsi, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "mov eax, 1",
            "mulsd xmm0, qword [0x00404a50]",
            "jmp sym.imp.__snprintf_chk",
            "cvtsi2sd xmm0, r9",
            "lea r8, str._.2fGB",
            "movsxd rsi, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "mov eax, 1",
            "mulsd xmm0, qword [0x00404a40]",
            "jmp sym.imp.__snprintf_chk",
            "cvtsi2sd xmm0, r9",
            "lea r8, str._.2fMB",
            "movsxd rsi, edx",
            "mov rcx, 0xffffffffffffffff",
            "mov edx, 1",
            "mov eax, 1",
            "mulsd xmm0, qword [0x00404a48]",
            "jmp sym.imp.__snprintf_chk"
        ]
    },
    "sym.imp.__strndup": {
        "function_address": "0x00401a10",
        "instructions": [
            "jmp qword [reloc.__strndup]"
        ]
    },
    "sym.imp.__xstat": {
        "function_address": "0x00401be0",
        "instructions": [
            "jmp qword [reloc.__xstat]"
        ]
    },
    "sym.imp.__printf_chk": {
        "function_address": "0x00401b70",
        "instructions": [
            "jmp qword [reloc.__printf_chk]"
        ]
    },
    "sym.imp.strerror": {
        "function_address": "0x00401a60",
        "instructions": [
            "jmp qword [reloc.strerror]"
        ]
    },
    "sym.imp.strrchr": {
        "function_address": "0x00401b20",
        "instructions": [
            "jmp qword [reloc.strrchr]"
        ]
    },
    "sym.imp.fchmod": {
        "function_address": "0x004019e0",
        "instructions": [
            "jmp qword [reloc.fchmod]"
        ]
    },
    "sym.imp.read": {
        "function_address": "0x00401a50",
        "instructions": [
            "jmp qword [reloc.read]"
        ]
    },
    "sym.imp.memcmp": {
        "function_address": "0x00401bb0",
        "instructions": [
            "jmp qword [reloc.memcmp]"
        ]
    },
    "sym.imp.exit": {
        "function_address": "0x00401a00",
        "instructions": [
            "jmp qword [reloc.exit]"
        ]
    },
    "sym.imp.smbc_opendir": {
        "function_address": "0x004018e0",
        "instructions": [
            "jmp qword [reloc.smbc_opendir]"
        ]
    },
    "sym.imp.mkdir": {
        "function_address": "0x00401930",
        "instructions": [
            "jmp qword [reloc.mkdir]"
        ]
    },
    "sym.imp.smbc_readdir": {
        "function_address": "0x00401a30",
        "instructions": [
            "jmp qword [reloc.smbc_readdir]"
        ]
    },
    "sym.imp.smbc_closedir": {
        "function_address": "0x004019a0",
        "instructions": [
            "jmp qword [reloc.smbc_closedir]"
        ]
    },
    "sym.imp.chmod": {
        "function_address": "0x004018b0",
        "instructions": [
            "jmp qword [reloc.chmod]"
        ]
    }
}