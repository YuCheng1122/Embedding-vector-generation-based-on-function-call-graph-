{
    "fcn.0000e5e0": {
        "function_address": "0x0000e5e0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "ldr r0, str.Landap",
            "mov r1, 0x22",
            "mov r2, 8",
            "bl sym.imp.openlog",
            "mov r0, 3",
            "ldr r1, str.Run_Landap",
            "bl sym.imp.syslog",
            "bl fcn.0000e5a4",
            "bl fcn.0000d74c",
            "mov r0, 1",
            "bl sym.imp.sleep",
            "b 0xe614"
        ]
    },
    "sym.imp.openlog": {
        "function_address": "0x00008d90",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x850]!"
        ]
    },
    "sym.imp.syslog": {
        "function_address": "0x00008e38",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7e0]!"
        ]
    },
    "fcn.0000e5a4": {
        "function_address": "0x0000e5a4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 8",
            "sub r3, fp, 8",
            "mov r0, r3",
            "mov r1, 0",
            "ldr r2, fcn.0000e298",
            "mov r3, 0",
            "bl sym.imp.pthread_create",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "bl sym.imp.pthread_detach",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.0000d74c": {
        "function_address": "0x0000d74c",
        "instructions": [
            "push {r4, fp, lr}",
            "add fp, sp, 8",
            "sub sp, sp, 0xa60",
            "sub sp, sp, 4",
            "mov r3, 1",
            "str r3, [fp, -0x8cc]",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "mov r3, 0",
            "str r3, [fp, -0x14]",
            "mov r3, 0",
            "str r3, [fp, -0x1c]",
            "mov r0, 2",
            "mov r1, 2",
            "mov r2, 0",
            "bl sym.imp.socket",
            "str r0, [fp, -0x20]",
            "ldr r3, [fp, -0x20]",
            "cmp r3, 0",
            "bge 0xd7ac",
            "mov r0, 3",
            "ldr r1, str.create_socket_error",
            "bl sym.imp.syslog",
            "b 0xe210",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "sub r3, fp, 0x8b0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "sub r3, fp, 0x8c0",
            "sub r3, r3, 0xc",
            "mov r2, 4",
            "str r2, [sp]",
            "ldr r0, [fp, -0x20]",
            "mov r1, 1",
            "mov r2, 6",
            "bl sym.imp.setsockopt",
            "str r0, [fp, -0x24]",
            "bl sym.imp.check_lan",
            "mov r2, r0",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r2, r3",
            "beq 0xd89c",
            "bl sym.imp.check_lan",
            "mov r2, r0",
            "ldr r3, [0x0000e21c]",
            "str r2, [r3]",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xd850",
            "ldr r3, [0x0000e220]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xd878",
            "ldr r0, str.Network.Interface.I0.Active.MACAddress",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "b 0xd89c",
            "ldr r0, str.Network.Interface.I1.Active.MACAddress",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xd8bc",
            "ldr r3, [0x0000e220]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xd8e0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "ldr r2, str.eth0",
            "ldm r2, {r0, r1}",
            "str r0, [r3]",
            "add r3, r3, 4",
            "strb r1, [r3]",
            "b 0xd904",
            "ldr r0, str.Network.Interface.I1.Interface",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "sub r2, fp, 0x8a0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x8b0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0xd994",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "str r2, [sp]",
            "ldr r0, [fp, -0x20]",
            "mov r1, 1",
            "mov r2, 0x19",
            "bl sym.imp.setsockopt",
            "str r0, [fp, -0x24]",
            "sub r2, fp, 0x8b0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r3, [0x0000e234]",
            "mov r2, 2",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "mov r0, 0xf600",
            "bl sym.imp.htons",
            "mov r3, r0",
            "mov r2, r3",
            "ldr r3, [0x0000e238]",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "mov r0, 0",
            "bl sym.imp.htonl",
            "mov r3, r0",
            "str r3, [fp, -0x8dc]",
            "sub r3, fp, 0x8d0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 4",
            "ldr r0, [fp, -0x20]",
            "mov r1, r3",
            "mov r2, 0x10",
            "bl sym.imp.bind",
            "str r0, [fp, -0x24]",
            "ldr r3, [fp, -0x24]",
            "cmn r3, 1",
            "bne 0xda14",
            "mov r0, 3",
            "ldr r1, str.LANDAP_socket_error",
            "bl sym.imp.syslog",
            "ldr r0, [fp, -0x20]",
            "bl sym.imp.close",
            "b 0xe210",
            "mov r0, 0",
            "bl sym.imp.htonl",
            "mov r3, r0",
            "str r3, [fp, -0x8ec]",
            "ldr r3, [0x0000e240]",
            "mov r2, 2",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "mov r0, 0",
            "bl sym.imp.htons",
            "mov r3, r0",
            "mov r2, r3",
            "ldr r3, [0x0000e244]",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "mov r3, 0x10",
            "str r3, [fp, -0x8d0]",
            "ldr r0, str.Properties.Wireless.Wireless",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "moveq r3, 1",
            "movne r3, 0",
            "and r3, r3, 0xff",
            "mov r2, r3",
            "ldr r3, [0x0000e220]",
            "str r2, [r3]",
            "sub r3, fp, 0x9c0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x16",
            "bl sym.imp.memset",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "sub r3, fp, 0x810",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "sub r2, fp, 0x8e0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 4",
            "str r2, [sp]",
            "sub r2, fp, 0x8c0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 4",
            "str r2, [sp, 4]",
            "ldr r0, [fp, -0x20]",
            "mov r1, r3",
            "mov r2, 0x800",
            "mov r3, 0",
            "bl sym.imp.recvfrom",
            "str r0, [fp, -0x24]",
            "ldr r3, [fp, -0x24]",
            "cmp r3, 0x15",
            "bhi 0xdb08",
            "b 0xe20c",
            "sub r2, fp, 0x9c0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x810",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, 0x16",
            "bl sym.imp.memcpy",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 0x16",
            "str r3, [fp, -0x10]",
            "ldr r3, [0x0000e250]",
            "sub r2, fp, 0xc",
            "ldrh r3, [r2, r3]",
            "cmp r3, 1",
            "beq 0xdb54",
            "b 0xe20c",
            "ldrb r3, [fp, -0x9d2]",
            "mov r2, r3",
            "ldrb r3, [fp, -0x9d1]",
            "mov ip, r3",
            "ldrb r3, [fp, -0x9d0]",
            "mov r4, r3",
            "ldrb r3, [fp, -0x9cf]",
            "mov lr, r3",
            "ldrb r3, [fp, -0x9ce]",
            "mov r0, r3",
            "ldrb r3, [fp, -0x9cd]",
            "mov r1, r3",
            "sub r3, fp, 0x870",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "str r4, [sp]",
            "str lr, [sp, 4]",
            "str r0, [sp, 8]",
            "str r1, [sp, 0xc]",
            "mov r0, r3",
            "ldr r1, str._02X:_02X:_02X:_02X:_02X:_02X",
            "mov r3, ip",
            "bl sym.imp.sprintf",
            "ldrb r3, [fp, -0x9cc]",
            "mov r2, r3",
            "ldrb r3, [fp, -0x9cb]",
            "mov ip, r3",
            "ldrb r3, [fp, -0x9ca]",
            "mov r0, r3",
            "ldrb r3, [fp, -0x9c9]",
            "mov r1, r3",
            "sub r3, fp, 0x890",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "str r0, [sp]",
            "str r1, [sp, 4]",
            "mov r0, r3",
            "ldr r1, str._d._d._d._d",
            "mov r3, ip",
            "bl sym.imp.sprintf",
            "ldr r3, [0x0000e244]",
            "sub r1, fp, 0xc",
            "ldrh r3, [r1, r3]",
            "mov r0, r3",
            "bl sym.imp.ntohs",
            "mov r3, r0",
            "str r3, [fp, -0x28]",
            "bl sym.imp.check_lan",
            "mov r2, r0",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r2, r3",
            "beq 0xdca4",
            "bl sym.imp.check_lan",
            "mov r2, r0",
            "ldr r3, [0x0000e21c]",
            "str r2, [r3]",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xdc58",
            "ldr r3, [0x0000e220]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xdc80",
            "ldr r0, str.Network.Interface.I0.Active.MACAddress",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "b 0xdca4",
            "ldr r0, str.Network.Interface.I1.Active.MACAddress",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "ldr r3, [0x0000e21c]",
            "ldr r3, [r3]",
            "cmp r3, 1",
            "beq 0xdcc4",
            "ldr r3, [0x0000e220]",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "bne 0xdd58",
            "ldr r0, str.Properties.Network.CoS",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xdd34",
            "ldr r0, str.Network.CoS.Enabled",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xdd34",
            "ldr r0, str.Network.CoS.VLANID",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "ldr r1, str.eth0._s",
            "bl sym.imp.sprintf",
            "b 0xdd7c",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "ldr r2, str.eth0",
            "ldm r2, {r0, r1}",
            "str r0, [r3]",
            "add r3, r3, 4",
            "strb r1, [r3]",
            "b 0xdd7c",
            "ldr r0, str.Network.Interface.I1.Interface",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "sub r2, fp, 0x8a0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x8b0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0xde08",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "str r2, [sp]",
            "ldr r0, [fp, -0x20]",
            "mov r1, 1",
            "mov r2, 0x19",
            "bl sym.imp.setsockopt",
            "sub r2, fp, 0x8b0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r0, str.Network.IPAddress",
            "bl sym.imp.nvram_safe_get",
            "mov r2, r0",
            "sub r3, fp, 0x850",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, r2",
            "bl sym.imp.strcpy",
            "ldr r3, [0x0000e270]",
            "sub r1, fp, 0xc",
            "ldrh r2, [r1, r3]",
            "ldr r3, [0x0000e274]",
            "cmp r2, r3",
            "bne 0xe168",
            "ldr r3, [0x0000e278]",
            "sub r2, fp, 0xc",
            "ldrh r1, [r2, r3]",
            "sub r2, fp, 0x870",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, r3",
            "bl fcn.00009dd8",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0xe168",
            "sub r3, fp, 0x9b0",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0xcc",
            "bl sym.imp.memset",
            "ldr r3, [0x0000e27c]",
            "sub r1, fp, 0xc",
            "ldrh r2, [r1, r3]",
            "ldr r3, [0x0000e280]",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "ldr r3, [fp, -0x28]",
            "str r3, [fp, -0x938]",
            "ldr r3, [0x0000e284]",
            "sub r1, fp, 0xc",
            "ldrh r2, [r1, r3]",
            "ldr r3, [0x0000e288]",
            "sub r1, fp, 0xc",
            "strh r2, [r1, r3]",
            "ldr r3, [fp, -0x20]",
            "str r3, [fp, -0x93c]",
            "sub r3, fp, 0x9b0",
            "sub r3, r3, 0xc",
            "add r2, r3, 0xac",
            "sub r3, fp, 0x850",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "sub r3, fp, 0x9b0",
            "sub r3, r3, 0xc",
            "add r2, r3, 0x8c",
            "sub r3, fp, 0x830",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r3, [0x0000e28c]",
            "str r3, [fp, -0x14]",
            "b 0xe158",
            "ldr r3, [fp, -0x14]",
            "ldrh r2, [r3, 2]",
            "ldr r3, [0x0000e280]",
            "sub r1, fp, 0xc",
            "ldrh r3, [r1, r3]",
            "cmp r2, r3",
            "bne 0xe14c",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 8]",
            "cmp r3, 0",
            "beq 0xe00c",
            "sub r3, fp, 0xa40",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x80",
            "bl sym.imp.memset",
            "ldr r2, [fp, -0x24]",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 0x7f",
            "cmp r2, r3",
            "bhs 0xdf90",
            "b 0xe14c",
            "ldr r2, [fp, -0x10]",
            "sub r3, fp, 0x810",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "add r2, r3, r2",
            "sub r3, fp, 0xa40",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r1, r2",
            "mov r2, 0x80",
            "mov r0, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 0x80",
            "str r3, [fp, -0x10]",
            "sub r3, fp, 0x9b0",
            "sub r3, r3, 0xc",
            "str r3, [fp, -0x9c0]",
            "ldr r3, [fp, -0x14]",
            "ldr ip, [r3, 8]",
            "sub r2, fp, 0x9b0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 4",
            "sub r3, fp, 0xa40",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "blx ip",
            "str r0, [fp, -0x18]",
            "b 0xe014",
            "mov r3, 1",
            "str r3, [fp, -0x18]",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "bne 0xe03c",
            "sub r3, fp, 0x890",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, 0",
            "mov r1, r3",
            "bl sym.imp.g_S_FailLoginCtrl",
            "b 0xe054",
            "sub r3, fp, 0x890",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, 1",
            "mov r1, r3",
            "bl sym.imp.g_S_FailLoginCtrl",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 0xc]",
            "cmp r3, 0",
            "beq 0xe14c",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 1",
            "bne 0xe14c",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 4]",
            "cmp r3, 0",
            "beq 0xe130",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 4]",
            "mov r0, 1",
            "mov r1, r3",
            "bl sym.imp.calloc",
            "mov r3, r0",
            "str r3, [fp, -0x1c]",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "beq 0xe120",
            "ldr r2, [fp, -0x24]",
            "ldr r3, [fp, -0x14]",
            "ldr r1, [r3, 4]",
            "ldr r3, [fp, -0x10]",
            "add r3, r1, r3",
            "sub r3, r3, 1",
            "cmp r2, r3",
            "bhs 0xe0cc",
            "b 0xe14c",
            "ldr r2, [fp, -0x10]",
            "sub r3, fp, 0x810",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "add r2, r3, r2",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 4]",
            "ldr r0, [fp, -0x1c]",
            "mov r1, r2",
            "mov r2, r3",
            "bl sym.imp.memcpy",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 0xc]",
            "sub r2, fp, 0x9b0",
            "sub r2, r2, 0xc",
            "mov r0, r2",
            "ldr r1, [fp, -0x1c]",
            "blx r3",
            "ldr r0, [fp, -0x1c]",
            "bl sym.imp.free",
            "b 0xe14c",
            "mov r0, 3",
            "ldr r1, str.g_S_LANDAPDaemon:__Err__Callocate_memory_to_vm_pBytePointer_fail_",
            "bl sym.imp.syslog",
            "b 0xe14c",
            "ldr r3, [fp, -0x14]",
            "ldr r3, [r3, 0xc]",
            "sub r2, fp, 0x9b0",
            "sub r2, r2, 0xc",
            "mov r0, r2",
            "mov r1, 0",
            "blx r3",
            "ldr r3, [fp, -0x14]",
            "add r3, r3, 0x10",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "ldrh r3, [r3, 2]",
            "cmp r3, 0",
            "bne 0xdf30",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "ldr r1, str.eth0.",
            "bl sym.imp.strstr",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0xe20c",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "ldr r2, str.eth0",
            "ldm r2, {r0, r1}",
            "str r0, [r3]",
            "add r3, r3, 4",
            "strb r1, [r3]",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "str r2, [sp]",
            "ldr r0, [fp, -0x20]",
            "mov r1, 1",
            "mov r2, 0x19",
            "bl sym.imp.setsockopt",
            "sub r2, fp, 0x8b0",
            "sub r2, r2, 0xc",
            "sub r2, r2, 0xc",
            "sub r3, fp, 0x8a0",
            "sub r3, r3, 0xc",
            "sub r3, r3, 0xc",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "b 0xda90",
            "b 0xda90",
            "sub sp, fp, 8",
            "pop {r4, fp, pc}"
        ]
    },
    "sym.imp.sleep": {
        "function_address": "0x00008cd0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8d0]!"
        ]
    },
    "entry.init0": {
        "function_address": "0x00008fec",
        "instructions": [
            "ldr r3, loc.__bss_start__",
            "ldr r0, loc.__bss_start__",
            "rsb r3, r0, r3",
            "asr r3, r3, 2",
            "add r3, r3, r3, lsr 31",
            "asrs r1, r3, 1",
            "bxeq lr",
            "ldr r2, [0x00008fa4]",
            "cmp r2, 0",
            "bxeq lr",
            "bx r2",
            "push {r3, lr}",
            "ldr r3, [0x00009030]",
            "cmp r3, 0",
            "beq 0x9008",
            "ldr r0, [0x00009034]",
            "ldr r1, [0x00009038]",
            "bl loc.imp.__register_frame_info",
            "ldr r0, [0x0000903c]",
            "ldr r3, [r0]",
            "cmp r3, 0",
            "beq 0x9028",
            "ldr r3, [0x00009040]",
            "cmp r3, 0",
            "beq 0x9028",
            "blx r3",
            "pop {r3, lr}",
            "b 0x8f70"
        ]
    },
    "loc.imp.__register_frame_info": {
        "function_address": "0x00008ed4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x778]!"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00008fa8",
        "instructions": [
            "push {r4, lr}",
            "ldr r4, loc.__bss_start__",
            "ldrb r3, [r4]",
            "cmp r3, 0",
            "popne {r4, pc}",
            "bl fcn.00008f40",
            "ldr r3, [0x00008fe4]",
            "cmp r3, 0",
            "beq 0x8fd4",
            "ldr r0, [0x00008fe8]",
            "bl loc.imp.__deregister_frame_info",
            "mov r3, 1",
            "strb r3, [r4]",
            "pop {r4, pc}"
        ]
    },
    "fcn.00008f40": {
        "function_address": "0x00008f40",
        "instructions": [
            "ldr r3, [0x00008f64]",
            "ldr r0, loc.__bss_start__",
            "rsb r3, r0, r3",
            "cmp r3, 6",
            "bxls lr",
            "ldr r3, [0x00008f6c]",
            "cmp r3, 0",
            "bxeq lr",
            "bx r3"
        ]
    },
    "loc.imp.__deregister_frame_info": {
        "function_address": "0x00008d54",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x878]!"
        ]
    },
    "fcn.000090fc": {
        "function_address": "0x000090fc",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x40",
            "str r0, [fp, -0x38]",
            "str r1, [fp, -0x3c]",
            "str r2, [fp, -0x40]",
            "str r3, [fp, -0x44]",
            "ldr r3, [fp, -0x38]",
            "sub r3, r3, 0x760",
            "sub r3, r3, 0xc",
            "str r3, [fp, -0x20]",
            "ldr r3, [fp, -0x3c]",
            "sub r3, r3, 1",
            "str r3, [fp, -0x24]",
            "ldr r3, [fp, -0x40]",
            "str r3, [fp, -0x28]",
            "ldr r3, [fp, -0x44]",
            "str r3, [fp, -0x2c]",
            "ldr r3, [fp, 4]",
            "str r3, [fp, -0x30]",
            "ldr r3, [fp, 8]",
            "str r3, [fp, -0x34]",
            "sub r3, fp, 0x34",
            "mov r0, r3",
            "bl sym.imp.mktime",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.mktime": {
        "function_address": "0x00008d78",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x860]!"
        ]
    },
    "fcn.0000935c": {
        "function_address": "0x0000935c",
        "instructions": [
            "push {r4, fp, lr}",
            "add fp, sp, 8",
            "sub sp, sp, 0x14",
            "str r0, [fp, -0x18]",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "beq 0x93dc",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "b 0x93c4",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0x18]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "blt 0x93b0",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0xff",
            "ble 0x93b8",
            "mov r3, 0",
            "b 0x93e0",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 1",
            "str r3, [fp, -0x10]",
            "ldr r4, [fp, -0x10]",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r4, r3",
            "blo 0x9384",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 8",
            "pop {r4, fp, pc}"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00008ebc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x788]!"
        ]
    },
    "fcn.0000a0c0": {
        "function_address": "0x0000a0c0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "ldr r0, str.sh__script_check_platform_param.sh_reboot_",
            "bl sym.imp.puts",
            "ldr r0, str.sh__script_check_platform_param.sh_reboot_",
            "bl sym.imp.system",
            "mov r0, 2",
            "bl sym.imp.sleep",
            "mov r3, 0",
            "mov r0, r3",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.puts": {
        "function_address": "0x00008cac",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8e8]!"
        ]
    },
    "sym.imp.system": {
        "function_address": "0x00008cc4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8d8]!"
        ]
    },
    "fcn.00009e88": {
        "function_address": "0x00009e88",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -0x18]",
            "str r1, [fp, -0x1c]",
            "mov r3, 0",
            "str r3, [fp, -0xc]",
            "ldr r0, [fp, -0x18]",
            "ldr r1, aav.0x0000e6b8",
            "bl sym.imp.token_parsing",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "beq 0x9f88",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3]",
            "cmp r3, 6",
            "beq 0x9ee0",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 0",
            "b 0x9f94",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9f74",
            "ldr r1, [fp, -0xc]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r2, [r3]",
            "sub r3, fp, 0x14",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, 0x10",
            "bl sym.imp.strtol",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "blt 0x9f64",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0xff",
            "bgt 0x9f64",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r2, r3",
            "ldr r2, [fp, -0x10]",
            "and r2, r2, 0xff",
            "strb r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "b 0x9f74",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 0",
            "b 0x9f94",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "bgt 0x9eec",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.token_parsing": {
        "function_address": "0x00008dd8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x820]!"
        ]
    },
    "sym.imp.free_token": {
        "function_address": "0x00008e74",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7b8]!"
        ]
    },
    "sym.imp.strtol": {
        "function_address": "0x00008d18",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8a0]!"
        ]
    },
    "fcn.00009fa4": {
        "function_address": "0x00009fa4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x18",
            "str r0, [fp, -0x18]",
            "str r1, [fp, -0x1c]",
            "mov r3, 0",
            "str r3, [fp, -0xc]",
            "ldr r0, [fp, -0x18]",
            "ldr r1, aav.0x0000e6bc",
            "bl sym.imp.token_parsing",
            "str r0, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "beq 0xa0a4",
            "ldr r3, [fp, -0xc]",
            "ldr r3, [r3]",
            "cmp r3, 4",
            "beq 0x9ffc",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 0",
            "b 0xa0b0",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0xa090",
            "ldr r1, [fp, -0xc]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r2, [r3]",
            "sub r3, fp, 0x14",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, 0xa",
            "bl sym.imp.strtol",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "blt 0xa080",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0xff",
            "bgt 0xa080",
            "ldr r3, [fp, -0x1c]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r2, r3",
            "ldr r2, [fp, -0x10]",
            "and r2, r2, 0xff",
            "strb r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "b 0xa090",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 0",
            "b 0xa0b0",
            "ldr r3, [fp, -0xc]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "bgt 0xa008",
            "ldr r0, [fp, -0xc]",
            "bl sym.imp.free_token",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.0000a200": {
        "function_address": "0x0000a200",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x8a0",
            "str r0, [fp, -0x898]",
            "str r1, [fp, -0x89c]",
            "str r2, [fp, -0x8a0]",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "mov r3, 0",
            "str r3, [fp, -0x14]",
            "mov r3, 0",
            "str r3, [fp, -0xc]",
            "sub r3, fp, 0x54",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x40",
            "bl sym.imp.memset",
            "sub r3, fp, 0x94",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x40",
            "bl sym.imp.memset",
            "sub r3, fp, 0x490",
            "sub r3, r3, 4",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x400",
            "bl sym.imp.memset",
            "sub r3, fp, 0x890",
            "sub r3, r3, 4",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x400",
            "bl sym.imp.memset",
            "ldr r2, [fp, -0x898]",
            "sub r3, fp, 0x54",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, 0x40",
            "bl sym.imp.b64_decode",
            "ldr r3, [fp, -0x898]",
            "add r2, r3, 0x40",
            "sub r3, fp, 0x94",
            "mov r0, r2",
            "mov r1, r3",
            "mov r2, 0x40",
            "bl sym.imp.b64_decode",
            "ldr r3, [fp, -0x89c]",
            "ldr r2, [r3]",
            "sub r3, fp, 0x54",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r3, [fp, -0x8a0]",
            "ldr r2, [r3]",
            "sub r3, fp, 0x94",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r0, str.user.username",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "sub r2, fp, 0x490",
            "sub r2, r2, 4",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r0, str.user.password",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "sub r2, fp, 0x890",
            "sub r2, r2, 4",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "sub r3, fp, 0x490",
            "sub r3, r3, 4",
            "mov r0, r3",
            "ldr r1, aav.0x0000e7a0",
            "bl sym.imp.token_parsing",
            "str r0, [fp, -0x10]",
            "sub r3, fp, 0x890",
            "sub r3, r3, 4",
            "mov r0, r3",
            "ldr r1, aav.0x0000e7a0",
            "bl sym.imp.token_parsing",
            "str r0, [fp, -0x14]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0xa468",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "beq 0xa468",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0xa454",
            "ldr r1, [fp, -0x10]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xa468",
            "ldr r1, [fp, -0x14]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r3, [r3]",
            "cmp r3, 0",
            "beq 0xa468",
            "ldr r1, [fp, -0x10]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r2, [r3]",
            "sub r3, fp, 0x54",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa448",
            "ldr r1, [fp, -0x14]",
            "ldr r2, [fp, -8]",
            "mov r3, 4",
            "lsl r2, r2, 2",
            "add r2, r1, r2",
            "add r3, r2, r3",
            "ldr r2, [r3]",
            "sub r3, fp, 0x94",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa444",
            "mov r3, 2",
            "str r3, [fp, -0xc]",
            "b 0xa468",
            "b 0xa468",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "cmp r2, r3",
            "bgt 0xa380",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "beq 0xa47c",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.free_token",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "beq 0xa490",
            "ldr r0, [fp, -0x14]",
            "bl sym.imp.free_token",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "beq 0xa4c0",
            "sub r3, fp, 0x54",
            "mov r0, r3",
            "ldr r1, str.admin",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa4c0",
            "mov r3, 1",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.memset": {
        "function_address": "0x00008e20",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7f0]!"
        ]
    },
    "sym.imp.b64_decode": {
        "function_address": "0x00008eb0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x790]!"
        ]
    },
    "sym.imp.strcpy": {
        "function_address": "0x00008c70",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x910]!"
        ]
    },
    "sym.imp.nvram_safe_get": {
        "function_address": "0x00008c7c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x908]!"
        ]
    },
    "sym.imp.strcasecmp": {
        "function_address": "0x00008db4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x838]!"
        ]
    },
    "fcn.0000a4e0": {
        "function_address": "0x0000a4e0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x18]",
            "str r3, [fp, -0x20]",
            "strh r1, [fp, -0x1a]",
            "strh r2, [fp, -0x1c]",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -0x18]",
            "add r3, r3, 6",
            "str r3, [fp, -0x10]",
            "sub r3, fp, 0x10",
            "ldr r0, [fp, -0x20]",
            "mov r1, r3",
            "bl fcn.00009e88",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa544",
            "mov r0, 3",
            "ldr r1, str.g_F_n_InitialHeader:__Err__Can_not_parse_MAC___s_",
            "ldr r2, [fp, -0x20]",
            "bl sym.imp.syslog",
            "mov r3, 0",
            "b 0xa72c",
            "ldr r3, [fp, -0x18]",
            "add r3, r3, 0xc",
            "str r3, [fp, -0x10]",
            "sub r3, fp, 0x10",
            "ldr r0, [fp, 4]",
            "mov r1, r3",
            "bl fcn.00009fa4",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa584",
            "mov r0, 3",
            "ldr r1, str.g_F_n_InitialHeader:__Err__Can_not_parse_IP_Address___s_",
            "ldr r2, [fp, 4]",
            "bl sym.imp.syslog",
            "mov r3, 0",
            "b 0xa72c",
            "ldr r3, [fp, -0x18]",
            "ldr r2, [0x0000a740]",
            "strh r2, [r3]",
            "ldr r3, [fp, -0x18]",
            "ldrh r2, [fp, -0x1c]",
            "strh r2, [r3, 2]",
            "ldr r3, [fp, -0x18]",
            "ldrh r2, [fp, -0x1a]",
            "strh r2, [r3, 4]",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0",
            "strh r2, [r3, 0x10]",
            "ldr r3, [fp, -0x18]",
            "mov r2, 1",
            "strh r2, [r3, 0x12]",
            "ldrh r3, [fp, -0x1a]",
            "sub r3, r3, 0xa1",
            "cmp r3, 0xc",
            "ldrls pc, [pc, r3, lsl 2]",
            "b case.0xa5cc.7",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x138",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 4",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "mov r3, 1",
            "str r3, [fp, -0xc]",
            "ldr r3, [0x0000a744]",
            "str r3, [fp, -8]",
            "b 0xa684",
            "ldr r3, [fp, -8]",
            "ldrb r3, [r3]",
            "cmp r3, 1",
            "bne 0xa678",
            "ldr r3, [fp, -0xc]",
            "add r3, r3, 1",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -8]",
            "add r3, r3, 0x10",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldrh r3, [r3, 2]",
            "cmp r3, 0",
            "bne 0xa65c",
            "ldr r3, [fp, -0xc]",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "lsl r3, r3, 1",
            "lsl r3, r3, 0x10",
            "lsr r2, r3, 0x10",
            "ldr r3, [fp, -0x18]",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "ldr r2, [0x0000a748]",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x64",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0x10",
            "strh r2, [r3, 0x14]",
            "b 0xa728",
            "ldr r3, [fp, -0x18]",
            "mov r2, 0",
            "strh r2, [r3, 0x14]",
            "mov r0, r0",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.0000a74c": {
        "function_address": "0x0000a74c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x28",
            "str r0, [fp, -0x18]",
            "str r1, [fp, -0x1c]",
            "str r2, [fp, -0x20]",
            "str r3, [fp, -0x24]",
            "ldr r0, str.255.255.255.255",
            "bl sym.imp.inet_addr",
            "mov r3, r0",
            "str r3, [fp, -0x10]",
            "mov r3, 2",
            "strh r3, [fp, -0x14]",
            "ldr r3, [fp, -0x1c]",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "mov r0, r3",
            "bl sym.imp.htons",
            "mov r3, r0",
            "strh r3, [fp, -0x12]",
            "ldr r3, [fp, -0x24]",
            "sub r2, fp, 0x14",
            "str r2, [sp]",
            "mov r2, 0x10",
            "str r2, [sp, 4]",
            "ldr r0, [fp, -0x18]",
            "ldr r1, [fp, -0x20]",
            "mov r2, r3",
            "mov r3, 0",
            "bl sym.imp.sendto",
            "mov r3, r0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.inet_addr": {
        "function_address": "0x00008d48",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x880]!"
        ]
    },
    "sym.imp.htons": {
        "function_address": "0x00008e98",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7a0]!"
        ]
    },
    "sym.imp.sendto": {
        "function_address": "0x00008dcc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x828]!"
        ]
    },
    "fcn.000098c4": {
        "function_address": "0x000098c4",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r3, 5",
            "bls 0x9900",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r3, 0x1e",
            "bls 0x9908",
            "mov r3, 0x3f4",
            "b 0x996c",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9958",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "bls 0x9944",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7e",
            "bls 0x994c",
            "ldr r3, [0x00009978]",
            "b 0x996c",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0x14]",
            "cmp r2, r3",
            "blt 0x9914",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.0000997c": {
        "function_address": "0x0000997c",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x99a0",
            "mov r3, 1",
            "b 0x9aac",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "ble 0x99c8",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x20",
            "ble 0x99d0",
            "mov r3, 1",
            "b 0x9aac",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9a98",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x2f",
            "bls 0x9a0c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x39",
            "bls 0x9a8c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x40",
            "bls 0x9a3c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x5a",
            "bls 0x9a8c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x60",
            "bls 0x9a6c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7a",
            "bls 0x9a8c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x2d",
            "beq 0x9a8c",
            "mov r3, 1",
            "b 0x9aac",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0x99dc",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.000095e8": {
        "function_address": "0x000095e8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x78",
            "str r0, [fp, -0x78]",
            "str r1, [fp, -0x7c]",
            "sub r3, fp, 0x60",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 8",
            "bl sym.imp.memset",
            "ldr r3, [fp, -0x78]",
            "cmp r3, 0",
            "bne 0x9624",
            "mov r3, 0",
            "b 0x98b4",
            "ldr r3, [fp, -0x78]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "bne 0x963c",
            "mov r3, 0",
            "b 0x98b4",
            "sub r3, fp, 0x58",
            "ldr r0, [fp, -0x78]",
            "ldr r1, str.__0_9_1_3_.__0_9_1_3_.__0_9_1_3_.__0_9_1_3__",
            "mov r2, r3",
            "mov r3, 5",
            "bl sym.imp.regmatch",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x98b0",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x97d8",
            "ldr r3, [fp, -8]",
            "add r2, r3, 1",
            "mvn r3, 0x53",
            "lsl r2, r2, 3",
            "sub r0, fp, 4",
            "add r2, r0, r2",
            "add r3, r2, r3",
            "ldr r3, [r3]",
            "ldr r2, [fp, -0x78]",
            "add r2, r2, r3",
            "ldr r3, [fp, -8]",
            "add r1, r3, 1",
            "mvn r3, 0x4f",
            "lsl r1, r1, 3",
            "sub ip, fp, 4",
            "add r1, ip, r1",
            "add r3, r1, r3",
            "ldr r1, [r3]",
            "ldr r3, [fp, -8]",
            "add r0, r3, 1",
            "mvn r3, 0x53",
            "lsl r0, r0, 3",
            "sub ip, fp, 4",
            "add r0, ip, r0",
            "add r3, r0, r3",
            "ldr r3, [r3]",
            "rsb r3, r3, r1",
            "sub r1, fp, 0x60",
            "mov r0, r1",
            "mov r1, r2",
            "mov r2, r3",
            "bl sym.imp.strncpy",
            "ldr r3, [fp, -8]",
            "add r2, r3, 1",
            "mvn r3, 0x4f",
            "lsl r2, r2, 3",
            "sub r0, fp, 4",
            "add r2, r0, r2",
            "add r3, r2, r3",
            "ldr r2, [r3]",
            "ldr r3, [fp, -8]",
            "add r1, r3, 1",
            "mvn r3, 0x53",
            "lsl r1, r1, 3",
            "sub ip, fp, 4",
            "add r1, ip, r1",
            "add r3, r1, r3",
            "ldr r3, [r3]",
            "rsb r2, r3, r2",
            "mvn r3, 0x5b",
            "sub r0, fp, 4",
            "add r2, r0, r2",
            "add r3, r2, r3",
            "mov r2, 0",
            "strb r2, [r3]",
            "ldrb r3, [fp, -0x60]",
            "cmp r3, 0x30",
            "bne 0x9774",
            "sub r3, fp, 0x60",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r3, 1",
            "bls 0x9774",
            "mov r3, 0",
            "b 0x98b4",
            "sub r3, fp, 0x60",
            "mov r0, r3",
            "bl sym.imp.atoi",
            "mov r2, r0",
            "ldr r1, [fp, -8]",
            "mvn r3, 0x6b",
            "lsl r1, r1, 2",
            "sub ip, fp, 4",
            "add r1, ip, r1",
            "add r3, r1, r3",
            "str r2, [r3]",
            "ldr r2, [fp, -8]",
            "mvn r3, 0x6b",
            "lsl r2, r2, 2",
            "sub r0, fp, 4",
            "add r2, r0, r2",
            "add r3, r2, r3",
            "ldr r3, [r3]",
            "cmp r3, 0xff",
            "ble 0x97cc",
            "mov r3, 0",
            "b 0x98b4",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 3",
            "ble 0x966c",
            "ldr r3, [fp, -0x7c]",
            "cmp r3, 0",
            "beq 0x9828",
            "ldr r3, [fp, -0x70]",
            "cmp r3, 0x7f",
            "bne 0x98a8",
            "ldr r3, [fp, -0x6c]",
            "cmp r3, 0",
            "bne 0x98a8",
            "ldr r3, [fp, -0x68]",
            "cmp r3, 0",
            "bne 0x98a8",
            "ldr r3, [fp, -0x64]",
            "cmp r3, 1",
            "bne 0x98a8",
            "mov r3, 0",
            "b 0x98b4",
            "ldr r3, [fp, -0x70]",
            "cmp r3, 0x7f",
            "bne 0x9858",
            "ldr r3, [fp, -0x6c]",
            "cmp r3, 0",
            "bne 0x9858",
            "ldr r3, [fp, -0x68]",
            "cmp r3, 0",
            "bne 0x9858",
            "ldr r3, [fp, -0x64]",
            "cmp r3, 1",
            "beq 0x98a0",
            "ldr r3, [fp, -0x70]",
            "cmp r3, 0",
            "bne 0x9888",
            "ldr r3, [fp, -0x6c]",
            "cmp r3, 0",
            "bne 0x9888",
            "ldr r3, [fp, -0x68]",
            "cmp r3, 0",
            "bne 0x9888",
            "ldr r3, [fp, -0x64]",
            "cmp r3, 0",
            "beq 0x98a0",
            "ldr r3, [fp, -0x64]",
            "cmp r3, 0xff",
            "beq 0x98a0",
            "ldr r3, [fp, -0x64]",
            "cmp r3, 0",
            "bne 0x98a8",
            "mov r3, 0",
            "b 0x98b4",
            "mov r3, 1",
            "b 0x98b4",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.regmatch": {
        "function_address": "0x00008d30",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x890]!"
        ]
    },
    "sym.imp.strncpy": {
        "function_address": "0x00008d9c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x848]!"
        ]
    },
    "sym.imp.atoi": {
        "function_address": "0x00008ea4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x798]!"
        ]
    },
    "fcn.000094e8": {
        "function_address": "0x000094e8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x28",
            "str r0, [fp, -0x20]",
            "mov r0, 2",
            "mov r1, 1",
            "mov r2, 0",
            "bl sym.imp.socket",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "cmp r3, 0",
            "bge 0x9520",
            "mov r3, 0",
            "b 0x95dc",
            "sub r3, fp, 0x18",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "mov r3, 2",
            "strh r3, [fp, -0x18]",
            "ldr r3, [fp, -0x20]",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "mov r0, r3",
            "bl sym.imp.htons",
            "mov r3, r0",
            "strh r3, [fp, -0x16]",
            "mov r0, 0",
            "bl sym.imp.htonl",
            "mov r3, r0",
            "str r3, [fp, -0x14]",
            "sub r3, fp, 0x1c",
            "mov r2, 4",
            "str r2, [sp]",
            "ldr r0, [fp, -8]",
            "mov r1, 1",
            "mov r2, 2",
            "bl sym.imp.setsockopt",
            "mov r3, r0",
            "cmp r3, 0",
            "bge 0x95a0",
            "ldr r0, [fp, -8]",
            "bl sym.imp.close",
            "mov r3, 0",
            "b 0x95dc",
            "sub r3, fp, 0x18",
            "ldr r0, [fp, -8]",
            "mov r1, r3",
            "mov r2, 0x10",
            "bl sym.imp.bind",
            "mov r3, r0",
            "cmp r3, 0",
            "bge 0x95d0",
            "ldr r0, [fp, -8]",
            "bl sym.imp.close",
            "mov r3, 0",
            "b 0x95dc",
            "ldr r0, [fp, -8]",
            "bl sym.imp.close",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.socket": {
        "function_address": "0x00008ce8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8c0]!"
        ]
    },
    "sym.imp.htonl": {
        "function_address": "0x00008dc0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x830]!"
        ]
    },
    "sym.imp.setsockopt": {
        "function_address": "0x00008d60",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x870]!"
        ]
    },
    "sym.imp.close": {
        "function_address": "0x00008ee0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x770]!"
        ]
    },
    "sym.imp.bind": {
        "function_address": "0x00008d3c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x888]!"
        ]
    },
    "fcn.0000a1a0": {
        "function_address": "0x0000a1a0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x28",
            "str r0, [fp, -8]",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "ldr r3, [fp, -8]",
            "str r3, [sp]",
            "mov r3, 0",
            "str r3, [sp, 4]",
            "mov r3, 0",
            "str r3, [sp, 8]",
            "mov r3, 0",
            "str r3, [sp, 0xc]",
            "mov r3, 0",
            "str r3, [sp, 0x10]",
            "ldr r0, str.127.0.0.1",
            "ldr r1, [fp, -0xc]",
            "ldr r2, [fp, -0x10]",
            "mov r3, 0",
            "bl sym.imp.send_http_message",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.send_http_message": {
        "function_address": "0x00008e5c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7c8]!"
        ]
    },
    "fcn.00009ab8": {
        "function_address": "0x00009ab8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x9adc",
            "ldr r3, [0x00009b7c]",
            "b 0x9b70",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "ble 0x9b04",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x1e",
            "ble 0x9b0c",
            "ldr r3, [0x00009b7c]",
            "b 0x9b70",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9b5c",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "bls 0x9b48",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7e",
            "bls 0x9b50",
            "ldr r3, [0x00009b7c]",
            "b 0x9b70",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0x9b18",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.00009b80": {
        "function_address": "0x00009b80",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x9ba4",
            "ldr r3, [0x00009c44]",
            "b 0x9c38",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "ble 0x9bcc",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x1e",
            "ble 0x9bd4",
            "ldr r3, [0x00009c44]",
            "b 0x9c38",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9c24",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "bls 0x9c10",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7e",
            "bls 0x9c18",
            "ldr r3, [0x00009c44]",
            "b 0x9c38",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0x9be0",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.00009c48": {
        "function_address": "0x00009c48",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x9c6c",
            "ldr r3, [0x00009d0c]",
            "b 0x9d00",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "ble 0x9c94",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x1e",
            "ble 0x9c9c",
            "ldr r3, [0x00009d0c]",
            "b 0x9d00",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9cec",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "bls 0x9cd8",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7e",
            "bls 0x9ce0",
            "ldr r3, [0x00009d0c]",
            "b 0x9d00",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0x9ca8",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.00009d10": {
        "function_address": "0x00009d10",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bne 0x9d34",
            "ldr r3, [0x00009dd4]",
            "b 0x9dc8",
            "ldr r0, [fp, -0x10]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0",
            "ble 0x9d5c",
            "ldr r3, [fp, -0xc]",
            "cmp r3, 0x1e",
            "ble 0x9d64",
            "ldr r3, [0x00009dd4]",
            "b 0x9dc8",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "b 0x9db4",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x20",
            "bls 0x9da0",
            "ldr r3, [fp, -8]",
            "ldr r2, [fp, -0x10]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "cmp r3, 0x7e",
            "bls 0x9da8",
            "ldr r3, [0x00009dd4]",
            "b 0x9dc8",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0x9d70",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.0000a0f0": {
        "function_address": "0x0000a0f0",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "ldr r0, str.Properties.Firmware.SoftwareVersion",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "sub r2, fp, 0x24",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "ldr r0, str.network_upnp_nat_stop",
            "bl sym.imp.system",
            "ldr r0, str.hard_defaults",
            "bl sym.imp.restore_defaults",
            "ldr r0, str.Login.Reset",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.nvram_set",
            "ldr r0, str._mnt_mtd_wchar_text",
            "bl sym.imp.unlink",
            "sub r3, fp, 0x24",
            "mov r0, r3",
            "ldr r1, aav.0x0000e75c",
            "mov r2, 3",
            "bl sym.imp.strncasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xa160",
            "bl fcn.0000a0c0",
            "ldr r0, str.Recover.Status",
            "ldr r1, aav.0x0000e770",
            "bl sym.imp.nvram_set",
            "mov r0, 0",
            "bl sym.imp.REBOOT",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.restore_defaults": {
        "function_address": "0x00008e8c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7a8]!"
        ]
    },
    "sym.imp.nvram_set": {
        "function_address": "0x00008d6c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x868]!"
        ]
    },
    "sym.imp.unlink": {
        "function_address": "0x00008da8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x840]!"
        ]
    },
    "sym.imp.strncasecmp": {
        "function_address": "0x00008cf4",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8b8]!"
        ]
    },
    "sym.imp.REBOOT": {
        "function_address": "0x00008ec8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x780]!"
        ]
    },
    "fcn.000092cc": {
        "function_address": "0x000092cc",
        "instructions": [
            "push {r4, fp, lr}",
            "add fp, sp, 8",
            "sub sp, sp, 0x14",
            "str r0, [fp, -0x18]",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "beq 0x934c",
            "mov r3, 0",
            "str r3, [fp, -0x10]",
            "b 0x9334",
            "ldr r3, [fp, -0x10]",
            "ldr r2, [fp, -0x18]",
            "add r3, r2, r3",
            "ldrb r3, [r3]",
            "str r3, [fp, -0x14]",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0x2f",
            "ble 0x9320",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0x39",
            "ble 0x9328",
            "mov r3, 0",
            "b 0x9350",
            "ldr r3, [fp, -0x10]",
            "add r3, r3, 1",
            "str r3, [fp, -0x10]",
            "ldr r4, [fp, -0x10]",
            "ldr r0, [fp, -0x18]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r4, r3",
            "blo 0x92f4",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 8",
            "pop {r4, fp, pc}"
        ]
    },
    "fcn.00009174": {
        "function_address": "0x00009174",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x20",
            "str r0, [fp, -0x10]",
            "str r1, [fp, -0x14]",
            "str r2, [fp, -0x18]",
            "str r3, [fp, -0x1c]",
            "ldr r2, [fp, -0x10]",
            "ldr r3, [0x000092c4]",
            "cmp r2, r3",
            "ble 0x91b0",
            "ldr r2, [fp, -0x10]",
            "ldr r3, [0x000092c8]",
            "cmp r2, r3",
            "ble 0x91b8",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0",
            "ble 0x91d0",
            "ldr r3, [fp, -0x14]",
            "cmp r3, 0xc",
            "ble 0x91d8",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0",
            "blt 0x91f0",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 0x1f",
            "ble 0x91f8",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0",
            "blt 0x9210",
            "ldr r3, [fp, -0x1c]",
            "cmp r3, 0x3b",
            "ble 0x9218",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, 4]",
            "cmp r3, 0",
            "blt 0x9230",
            "ldr r3, [fp, 4]",
            "cmp r3, 0x3b",
            "ble 0x9238",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, 8]",
            "cmp r3, 0",
            "blt 0x9250",
            "ldr r3, [fp, 8]",
            "cmp r3, 0x3b",
            "ble 0x9258",
            "mov r3, 0",
            "b 0x92b8",
            "ldr r3, [fp, 4]",
            "str r3, [sp]",
            "ldr r3, [fp, 8]",
            "str r3, [sp, 4]",
            "ldr r0, [fp, -0x10]",
            "ldr r1, [fp, -0x14]",
            "ldr r2, [fp, -0x18]",
            "ldr r3, [fp, -0x1c]",
            "bl fcn.000090fc",
            "mov r3, r0",
            "str r3, [fp, -0xc]",
            "sub r3, fp, 0xc",
            "mov r0, r3",
            "bl sym.imp.localtime",
            "str r0, [fp, -8]",
            "ldr r3, [fp, -8]",
            "ldr r3, [r3, 0x10]",
            "add r2, r3, 1",
            "ldr r3, [fp, -0x14]",
            "cmp r2, r3",
            "beq 0x92b4",
            "mov r3, 0",
            "b 0x92b8",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.localtime": {
        "function_address": "0x00008e14",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7f8]!"
        ]
    },
    "fcn.000093ec": {
        "function_address": "0x000093ec",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x158",
            "str r0, [fp, -0x158]",
            "sub r3, fp, 0x154",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x100",
            "bl sym.imp.memset",
            "ldr r3, [fp, -0x158]",
            "cmp r3, 0",
            "bne 0x9424",
            "mov r3, 0",
            "b 0x94d8",
            "ldr r3, [fp, -0x158]",
            "ldrb r3, [r3]",
            "cmp r3, 0",
            "beq 0x9448",
            "ldr r0, [fp, -0x158]",
            "bl sym.imp.strlen",
            "mov r3, r0",
            "cmp r3, 0x80",
            "bls 0x9450",
            "mov r3, 0",
            "b 0x94d8",
            "ldr r0, [fp, -0x158]",
            "bl fcn.0000935c",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x946c",
            "mov r3, 0",
            "b 0x94d8",
            "sub r2, fp, 0x154",
            "ldr r3, str.______:___________1",
            "mov ip, r2",
            "mov lr, r3",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr!, {r0, r1, r2, r3}",
            "stm ip!, {r0, r1, r2, r3}",
            "ldm lr, {r0, r1, r2}",
            "stm ip!, {r0, r1}",
            "strh r2, [ip]",
            "add ip, ip, 2",
            "lsr r3, r2, 0x10",
            "strb r3, [ip]",
            "sub r2, fp, 0x154",
            "sub r3, fp, 0x54",
            "ldr r0, [fp, -0x158]",
            "mov r1, r2",
            "mov r2, r3",
            "mov r3, 1",
            "bl sym.imp.regmatch",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0x94d4",
            "mov r3, 0",
            "b 0x94d8",
            "mov r3, 1",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "fcn.00009dd8": {
        "function_address": "0x00009dd8",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x10",
            "mov r3, r0",
            "str r1, [fp, -0xc]",
            "str r2, [fp, -0x10]",
            "strh r3, [fp, -6]",
            "ldrh r3, [fp, -6]",
            "cmp r3, 0",
            "bne 0x9e40",
            "ldr r0, [fp, -0xc]",
            "ldr r1, str.FF:FF:FF:FF:FF:FF",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x9e20",
            "mov r3, 1",
            "b 0x9e74",
            "ldr r0, [fp, -0xc]",
            "ldr r1, [fp, -0x10]",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x9e70",
            "mov r3, 1",
            "b 0x9e74",
            "ldrh r2, [fp, -6]",
            "ldr r3, [0x00009e84]",
            "cmp r2, r3",
            "bne 0x9e70",
            "ldr r0, [fp, -0xc]",
            "ldr r1, [fp, -0x10]",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0x9e70",
            "mov r3, 1",
            "b 0x9e74",
            "mov r3, 0",
            "mov r0, r3",
            "sub sp, fp, 4",
            "pop {fp, pc}"
        ]
    },
    "sym.imp.pthread_create": {
        "function_address": "0x00008c88",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x900]!"
        ]
    },
    "sym.imp.pthread_detach": {
        "function_address": "0x00008d00",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8b0]!"
        ]
    },
    "fcn.0000e298": {
        "function_address": "0x0000e298",
        "instructions": [
            "push {fp, lr}",
            "add fp, sp, 4",
            "sub sp, sp, 0x60",
            "str r0, [fp, -0x58]",
            "mov r3, 0",
            "str r3, [fp, -8]",
            "mov r3, 0xa",
            "str r3, [fp, -0xc]",
            "mov r3, 1",
            "str r3, [fp, -0x54]",
            "mov r0, 2",
            "mov r1, 2",
            "mov r2, 0",
            "bl sym.imp.socket",
            "str r0, [fp, -0x10]",
            "ldr r3, [fp, -0x10]",
            "cmp r3, 0",
            "bge 0xe2f4",
            "mov r0, 3",
            "ldr r1, str.create_socket_error",
            "bl sym.imp.syslog",
            "mov r0, 0",
            "bl sym.imp.pthread_exit",
            "sub r3, fp, 0x54",
            "mov r2, 4",
            "str r2, [sp]",
            "ldr r0, [fp, -0x10]",
            "mov r1, 1",
            "mov r2, 6",
            "bl sym.imp.setsockopt",
            "str r0, [fp, -0x14]",
            "bl sym.imp.check_lan",
            "str r0, [fp, -0x18]",
            "sub r3, fp, 0x50",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "ldr r3, [fp, -0x18]",
            "cmp r3, 1",
            "beq 0xe360",
            "ldr r0, str.Properties.Wireless.Wireless",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "beq 0xe3e8",
            "ldr r0, str.Properties.Network.CoS",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xe3cc",
            "ldr r0, str.Network.CoS.Enabled",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "mov r0, r3",
            "ldr r1, aav.0x0000e744",
            "bl sym.imp.strcasecmp",
            "mov r3, r0",
            "cmp r3, 0",
            "bne 0xe3cc",
            "ldr r0, str.Network.CoS.VLANID",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "sub r2, fp, 0x50",
            "mov r0, r2",
            "ldr r1, str.eth0._s",
            "mov r2, r3",
            "bl sym.imp.sprintf",
            "b 0xe404",
            "sub r3, fp, 0x50",
            "ldr r2, str.eth0",
            "ldm r2, {r0, r1}",
            "str r0, [r3]",
            "add r3, r3, 4",
            "strb r1, [r3]",
            "b 0xe404",
            "ldr r0, str.Network.Interface.I1.Interface",
            "bl sym.imp.nvram_safe_get",
            "mov r3, r0",
            "sub r2, fp, 0x50",
            "mov r0, r2",
            "mov r1, r3",
            "bl sym.imp.strcpy",
            "sub r3, fp, 0x50",
            "mov r0, r3",
            "bl sym.imp.strlen",
            "mov r2, r0",
            "sub r3, fp, 0x50",
            "str r2, [sp]",
            "ldr r0, [fp, -0x10]",
            "mov r1, 1",
            "mov r2, 0x19",
            "bl sym.imp.setsockopt",
            "str r0, [fp, -0x14]",
            "sub r3, fp, 0x28",
            "mov r0, r3",
            "mov r1, 0",
            "mov r2, 0x10",
            "bl sym.imp.memset",
            "mov r3, 2",
            "strh r3, [fp, -0x28]",
            "mov r0, 0xf600",
            "bl sym.imp.htons",
            "mov r3, r0",
            "strh r3, [fp, -0x26]",
            "ldr r0, str.255.255.255.255",
            "bl sym.imp.inet_addr",
            "mov r3, r0",
            "str r3, [fp, -0x24]",
            "ldr r3, [0x0000e59c]",
            "strh r3, [fp, -0x40]",
            "mov r3, 0xd1",
            "strh r3, [fp, -0x3c]",
            "mvn r3, 0",
            "strb r3, [fp, -0x3a]",
            "mvn r3, 0",
            "strb r3, [fp, -0x39]",
            "mvn r3, 0",
            "strb r3, [fp, -0x38]",
            "mvn r3, 0",
            "strb r3, [fp, -0x37]",
            "mvn r3, 0",
            "strb r3, [fp, -0x36]",
            "mvn r3, 0",
            "strb r3, [fp, -0x35]",
            "mov r3, 0",
            "strb r3, [fp, -0x34]",
            "mov r3, 0",
            "strb r3, [fp, -0x33]",
            "mov r3, 0",
            "strb r3, [fp, -0x32]",
            "mov r3, 0",
            "strb r3, [fp, -0x31]",
            "mov r3, 0",
            "strh r3, [fp, -0x30]",
            "mov r3, 1",
            "strh r3, [fp, -0x2e]",
            "mov r3, 0",
            "strh r3, [fp, -0x2c]",
            "b 0xe55c",
            "ldr r3, [fp, -8]",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "add r3, r3, 1",
            "lsl r3, r3, 0x10",
            "lsr r3, r3, 0x10",
            "strh r3, [fp, -0x3e]",
            "sub r3, fp, 0x40",
            "sub r2, fp, 0x28",
            "str r2, [sp]",
            "mov r2, 0x10",
            "str r2, [sp, 4]",
            "ldr r0, [fp, -0x10]",
            "mov r1, r3",
            "mov r2, 0x16",
            "mov r3, 0",
            "bl sym.imp.sendto",
            "str r0, [fp, -0x14]",
            "mov r0, 3",
            "ldr r1, str.g_S_SendHelloCmdThread:_vm_nCnt___d__vm_nRes___d",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0x14]",
            "bl sym.imp.syslog",
            "ldr r3, [fp, -8]",
            "add r3, r3, 1",
            "str r3, [fp, -8]",
            "mov r0, 1",
            "mov r1, 0",
            "bl sym.imp.SLEEP",
            "ldr r2, [fp, -8]",
            "ldr r3, [fp, -0xc]",
            "cmp r2, r3",
            "blt 0xe4e8",
            "mov r0, 0",
            "bl sym.imp.pthread_exit",
            "invalid"
        ]
    },
    "sym.imp.pthread_exit": {
        "function_address": "0x00008c94",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8f8]!"
        ]
    },
    "sym.imp.check_lan": {
        "function_address": "0x00008e80",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7b0]!"
        ]
    },
    "sym.imp.sprintf": {
        "function_address": "0x00008e50",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7d0]!"
        ]
    },
    "sym.imp.SLEEP": {
        "function_address": "0x00008cb8",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8e0]!"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00008e44",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7d8]!"
        ]
    },
    "sym.imp.recvfrom": {
        "function_address": "0x00008cdc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8c8]!"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00008ca0",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x8f0]!"
        ]
    },
    "sym.imp.ntohs": {
        "function_address": "0x00008e2c",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x7e8]!"
        ]
    },
    "sym.imp.g_S_FailLoginCtrl": {
        "function_address": "0x00008dfc",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x808]!"
        ]
    },
    "sym.imp.calloc": {
        "function_address": "0x00008d24",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x898]!"
        ]
    },
    "sym.imp.free": {
        "function_address": "0x00008eec",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x768]!"
        ]
    },
    "sym.imp.strstr": {
        "function_address": "0x00008d84",
        "instructions": [
            "add ip, pc, 0, 12",
            "add ip, ip, 0xe000",
            "ldr pc, [ip, 0x858]!"
        ]
    }
}