{
    "sym._init": {
        "function_address": "0x00001ca8",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [0x00209fd0]",
            "test rax, rax",
            "je 0x1cbd",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x00001ec0",
        "instructions": [
            "jmp qword [reloc.__gmon_start__]"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00002190",
        "instructions": [
            "cmp byte [loc._edata], 0",
            "jne 0x21c0",
            "cmp qword [0x00209ff8], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x21b3",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc._edata], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x000020c0",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x00002100",
        "instructions": [
            "lea rdi, [loc._edata]",
            "lea rax, [0x0020a2ef]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x2130",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x2130",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "fcn.00002640": {
        "function_address": "0x00002640",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, rdi",
            "push rbx",
            "mov rbx, rsi",
            "lea rsi, str.DATE_LOCAL",
            "mov rdi, rbx",
            "mov r12, rdx",
            "sub rsp, 0x10",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "je 0x26b0",
            "lea rsi, str.DATE_GMT",
            "mov rdi, rbx",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "je 0x26f0",
            "lea rsi, str.LAST_MODIFIED",
            "mov rdi, rbx",
            "call sym.imp.strcasecmp",
            "test eax, eax",
            "je 0x2710",
            "lea rsi, str.USER_NAME",
            "mov rdi, rbx",
            "call sym.imp.strcasecmp",
            "mov edx, eax",
            "xor eax, eax",
            "test edx, edx",
            "je 0x2720",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rsi, qword [rbp + 0x60]",
            "mov rdi, qword [rbp]",
            "xor ecx, ecx",
            "mov rdx, r12",
            "call loc.imp.ap_ht_time",
            "mov qword [rsp + 8], rax",
            "test rax, rax",
            "je 0x26a5",
            "mov rdi, qword [rbp + 0x108]",
            "mov rdx, rax",
            "mov rsi, rbx",
            "call loc.imp.apr_table_setn",
            "mov rax, qword [rsp + 8]",
            "add rsp, 0x10",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rsi, qword [rbp + 0x60]",
            "mov rdi, qword [rbp]",
            "mov ecx, 1",
            "mov rdx, r12",
            "call loc.imp.ap_ht_time",
            "mov qword [rsp + 8], rax",
            "jmp 0x26c7",
            "mov rsi, qword [rbp + 0x1d8]",
            "jmp 0x26b4",
            "mov esi, dword [rbp + 0x19c]",
            "mov rdx, qword [rbp]",
            "lea rdi, [rsp + 8]",
            "call loc.imp.apr_uid_name_get",
            "test eax, eax",
            "je 0x2750",
            "lea rax, str._unknown_",
            "mov qword [rsp + 8], rax",
            "jmp 0x26cc",
            "mov rax, qword [rsp + 8]",
            "jmp 0x26c7"
        ]
    },
    "sym.imp.strcasecmp": {
        "function_address": "0x00001d00",
        "instructions": [
            "jmp qword [reloc.strcasecmp]"
        ]
    },
    "loc.imp.ap_ht_time": {
        "function_address": "0x00001f70",
        "instructions": [
            "jmp qword [reloc.ap_ht_time]"
        ]
    },
    "loc.imp.apr_table_setn": {
        "function_address": "0x00001ed0",
        "instructions": [
            "jmp qword [reloc.apr_table_setn]"
        ]
    },
    "loc.imp.apr_uid_name_get": {
        "function_address": "0x00002030",
        "instructions": [
            "jmp qword [reloc.apr_uid_name_get]"
        ]
    },
    "fcn.00002760": {
        "function_address": "0x00002760",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "mov rbp, rsi",
            "sub rsp, 8",
            "mov r13, qword [rsi + 0x30]",
            "call sym.imp.__ctype_b_loc",
            "movzx ecx, byte [rbx]",
            "mov rax, qword [rax]",
            "mov r12, qword [r13 + 0x28]",
            "test byte [rax + rcx*2 + 1], 8",
            "je 0x2800",
            "cmp byte [rbx + 1], 0",
            "jne 0x2800",
            "movsx eax, cl",
            "mov rdx, rcx",
            "mov rcx, qword [r13 + 0x70]",
            "sub eax, 0x30",
            "cdqe",
            "test rcx, rcx",
            "je 0x2890",
            "mov esi, dword [rcx + 0x68]",
            "test esi, esi",
            "je 0x2890",
            "cmp rax, qword [rcx + 0x10]",
            "ja 0x2830",
            "cmp rax, 9",
            "ja 0x2830",
            "movsx rdx, dl",
            "lea rax, [rcx + rdx*8]",
            "movsxd rsi, dword [rax - 0x168]",
            "test esi, esi",
            "js 0x28d0",
            "mov edx, dword [rax - 0x164]",
            "test edx, edx",
            "js 0x28d0",
            "sub edx, esi",
            "mov rdi, qword [rbp + 8]",
            "add rsi, qword [rcx]",
            "add rsp, 8",
            "movsxd rdx, edx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "jmp loc.imp.apr_pstrmemdup",
            "mov rdi, qword [r12 + 0x108]",
            "mov rsi, rbx",
            "call loc.imp.apr_table_get",
            "lea rdx, [0x0020a2f0]",
            "cmp rax, rdx",
            "je 0x2870",
            "add rsp, 8",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "sub rsp, 8",
            "lea r9, str.regex_capture___lu_is_out_of_range__last_regex_was:__s__in__s",
            "push qword [r12 + 0x168]",
            "lea rdi, str.mod_include.c",
            "push qword [rcx + 8]",
            "push rax",
            "mov r8, r12",
            "xor eax, eax",
            "xor ecx, ecx",
            "mov edx, 4",
            "mov esi, 0x298",
            "call loc.imp.ap_log_rerror",
            "add rsp, 0x20",
            "xor eax, eax",
            "jmp 0x281c",
            "mov rdx, qword [rbp + 0x28]",
            "add rsp, 8",
            "mov rsi, rbx",
            "mov rdi, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "jmp fcn.00002640",
            "push qword [r12 + 0x168]",
            "lea r9, str.regex_capture___lu_refers_to_no_regex_in__s",
            "push rax",
            "lea rdi, str.mod_include.c",
            "mov edx, 4",
            "xor eax, eax",
            "mov r8, r12",
            "xor ecx, ecx",
            "mov esi, 0x292",
            "call loc.imp.ap_log_rerror",
            "pop rax",
            "xor eax, eax",
            "pop rdx",
            "jmp 0x281c",
            "xor eax, eax",
            "jmp 0x281c"
        ]
    },
    "sym.imp.__ctype_b_loc": {
        "function_address": "0x000020f0",
        "instructions": [
            "jmp qword [reloc.__ctype_b_loc]"
        ]
    },
    "loc.imp.apr_table_get": {
        "function_address": "0x00001d80",
        "instructions": [
            "jmp qword [reloc.apr_table_get]"
        ]
    },
    "loc.imp.ap_log_rerror": {
        "function_address": "0x00001fa0",
        "instructions": [
            "jmp qword [reloc.ap_log_rerror]"
        ]
    },
    "fcn.00002e20": {
        "function_address": "0x00002e20",
        "instructions": [
            "push r15",
            "push r14",
            "mov r15, rdx",
            "push r13",
            "push r12",
            "mov r13, rcx",
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "sub rsp, 0x68",
            "mov rax, qword [rdi + 0x30]",
            "test rdx, rdx",
            "mov qword [rsp + 0x28], rdi",
            "mov dword [rsp + 0x54], r8d",
            "mov rax, qword [rax + 0x28]",
            "mov qword [rsp + 0x58], rax",
            "je 0x3378",
            "test rcx, rcx",
            "je 0x3490",
            "lea rax, [rdx + rcx - 1]",
            "mov qword [rsp + 0x40], rdx",
            "mov qword [rsp + 8], rax",
            "movsx eax, byte [rbp]",
            "test al, al",
            "je 0x3413",
            "cmp eax, 0x5c",
            "je 0x3413",
            "cmp eax, 0x24",
            "je 0x3413",
            "lea rdx, [rbp + 1]",
            "xor ebx, ebx",
            "jmp 0x2ea6",
            "add rdx, 1",
            "cmp eax, 0x5c",
            "je 0x2eb4",
            "cmp eax, 0x24",
            "je 0x2eb4",
            "movsx eax, byte [rdx]",
            "add rbx, 1",
            "mov r12, rdx",
            "test al, al",
            "jne 0x2e98",
            "mov rdi, rbp",
            "call sym.imp.strlen",
            "cmp rbx, rax",
            "mov r14, rax",
            "je 0x32a4",
            "test r15, r15",
            "je 0x341d",
            "test rbx, rbx",
            "mov qword [rsp + 0x48], 0",
            "jne 0x320b",
            "mov rax, qword [rsp + 0x48]",
            "mov qword [rsp + 0x10], rbx",
            "mov qword [rsp + 0x30], rax",
            "lea rax, [rbp + r14]",
            "mov r14, r15",
            "mov r15, r12",
            "mov qword [rsp + 0x18], rax",
            "nop word [rax + rax]",
            "test r14, r14",
            "setne bpl",
            "cmp r14, qword [rsp + 8]",
            "jb 0x2f1f",
            "test bpl, bpl",
            "jne 0x329c",
            "test r13, r13",
            "setne byte [rsp]",
            "cmp qword [rsp + 0x10], r13",
            "movzx eax, byte [rsp]",
            "jb 0x2f39",
            "test al, al",
            "jne 0x3037",
            "test r14, r14",
            "je 0x31b0",
            "movzx eax, byte [r15]",
            "cmp al, 0x5c",
            "je 0x3070",
            "movzx r12d, byte [r15 + 1]",
            "lea r10, [r15 + 1]",
            "cmp r12b, 0x7b",
            "je 0x30a0",
            "mov qword [rsp + 0x20], r10",
            "call sym.imp.__ctype_b_loc",
            "mov r10, qword [rsp + 0x20]",
            "mov rdx, qword [rax]",
            "movzx eax, r12b",
            "mov rbx, r10",
            "jmp 0x2f87",
            "add rbx, 1",
            "movzx eax, byte [rbx]",
            "cmp al, 0x5f",
            "je 0x2f80",
            "test byte [rdx + rax*2], 8",
            "jne 0x2f80",
            "cmp r10, rbx",
            "jb 0x3108",
            "test bpl, bpl",
            "je 0x32f9",
            "movzx eax, byte [r15]",
            "add r14, 1",
            "mov r15, r10",
            "mov byte [r14 - 1], al",
            "cmp r14, qword [rsp + 8]",
            "jb 0x2fc2",
            "test r14, r14",
            "jne 0x329c",
            "movsx eax, byte [r15]",
            "test al, al",
            "je 0x302c",
            "cmp eax, 0x24",
            "je 0x302c",
            "cmp eax, 0x5c",
            "je 0x302c",
            "lea rdx, [r15 + 1]",
            "xor ebp, ebp",
            "jmp 0x2fee",
            "add rdx, 1",
            "cmp eax, 0x5c",
            "je 0x2ffc",
            "cmp eax, 0x24",
            "je 0x2ffc",
            "movsx eax, byte [rdx]",
            "add rbp, 1",
            "mov rbx, rdx",
            "test al, al",
            "jne 0x2fe0",
            "test r14, r14",
            "je 0x32d6",
            "mov rax, qword [rsp + 8]",
            "lea r12, [r14 + rbp]",
            "mov rdi, r14",
            "mov rsi, r15",
            "mov rdx, rax",
            "sub rdx, r14",
            "cmp rax, r12",
            "mov r14, r12",
            "cmovae rdx, rbp",
            "call sym.imp.memcpy",
            "mov r15, rbx",
            "cmp r15, qword [rsp + 0x18]",
            "jb 0x2f08",
            "mov rbx, qword [rsp + 0x10]",
            "mov r15, r14",
            "test r15, r15",
            "je 0x3394",
            "cmp r15, qword [rsp + 8]",
            "jbe 0x325f",
            "mov rax, qword [rsp + 8]",
            "mov byte [rax], 0",
            "mov rax, qword [rsp + 0x40]",
            "add rsp, 0x68",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "test bpl, bpl",
            "je 0x31ca",
            "cmp byte [r15 + 1], 0x24",
            "lea rdx, [r14 + 1]",
            "je 0x3251",
            "mov byte [r14], al",
            "add r15, 1",
            "mov r14, rdx",
            "jmp 0x2fb2",
            "lea rcx, [r15 + 2]",
            "mov esi, 0x7d",
            "mov qword [rsp + 0x38], r10",
            "mov rdi, rcx",
            "mov qword [rsp + 0x20], rcx",
            "call sym.imp.strchr",
            "test rax, rax",
            "mov r12, rax",
            "mov rcx, qword [rsp + 0x20]",
            "mov r10, qword [rsp + 0x38]",
            "je 0x3451",
            "cmp rcx, rax",
            "jae 0x2f9a",
            "mov rdx, rax",
            "mov rax, qword [rsp + 0x28]",
            "mov rsi, rcx",
            "sub rdx, rcx",
            "mov qword [rsp + 0x20], r10",
            "lea rbx, [r12 + 1]",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_pstrmemdup",
            "mov r10, qword [rsp + 0x20]",
            "mov rdi, rax",
            "jmp 0x312f",
            "mov rax, qword [rsp + 0x28]",
            "mov rdx, rbx",
            "mov rsi, r10",
            "sub rdx, r10",
            "mov qword [rsp + 0x20], r10",
            "mov r12, rbx",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_pstrmemdup",
            "mov r10, qword [rsp + 0x20]",
            "mov rdi, rax",
            "test rdi, rdi",
            "je 0x2f9a",
            "mov rsi, qword [rsp + 0x28]",
            "call fcn.00002760",
            "test rax, rax",
            "je 0x3190",
            "mov rdi, rax",
            "mov qword [rsp + 0x20], rax",
            "call sym.imp.strlen",
            "mov rsi, qword [rsp + 0x20]",
            "test rax, rax",
            "je 0x31a0",
            "test bpl, bpl",
            "je 0x32bc",
            "mov rdi, qword [rsp + 8]",
            "lea rbp, [r14 + rax]",
            "mov r15, rbx",
            "mov rdx, rdi",
            "sub rdx, r14",
            "cmp rdi, rbp",
            "mov rdi, r14",
            "cmovae rdx, rax",
            "mov r14, rbp",
            "call sym.imp.memcpy",
            "jmp 0x2fb2",
            "mov eax, dword [rsp + 0x54]",
            "test eax, eax",
            "jne 0x3243",
            "nop dword [rax]",
            "mov r15, rbx",
            "jmp 0x2fc2",
            "mov rax, qword [rsp + 0x30]",
            "cmp qword [rax + 8], 0",
            "jne 0x3268",
            "cmp byte [r15], 0x5c",
            "jne 0x2f4e",
            "mov rcx, qword [rsp + 0x30]",
            "xor eax, eax",
            "mov qword [rcx + 8], 1",
            "cmp byte [r15 + 1], 0x24",
            "sete al",
            "add qword [rsp + 0x10], 1",
            "add r15, rax",
            "mov qword [rcx + 0x10], r15",
            "add r15, 1",
            "cmp r13, qword [rsp + 0x10]",
            "ja 0x3203",
            "cmp byte [rsp], 0",
            "jne 0x338f",
            "xor r14d, r14d",
            "jmp 0x2fc2",
            "mov rax, qword [rsp + 8]",
            "lea rcx, [r15 + rbx]",
            "mov rdi, r15",
            "mov rsi, rbp",
            "mov qword [rsp], rcx",
            "mov rdx, rax",
            "sub rdx, r15",
            "cmp rax, rcx",
            "cmovae rdx, rbx",
            "xor ebx, ebx",
            "call sym.imp.memcpy",
            "mov rcx, qword [rsp]",
            "mov qword [rsp + 0x48], rbx",
            "mov r15, rcx",
            "jmp 0x2ee3",
            "mov rax, r12",
            "mov rsi, r15",
            "sub rax, r15",
            "jmp 0x3159",
            "add r15, 1",
            "mov eax, 0x24",
            "jmp 0x3088",
            "mov byte [r15], 0",
            "jmp 0x305b",
            "mov rax, qword [rsp + 0x28]",
            "mov esi, 0x18",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_palloc",
            "mov rsi, qword [rsp + 0x30]",
            "mov qword [rsp + 0x30], rax",
            "mov qword [rsi], rax",
            "mov qword [rax], 0",
            "mov qword [rax + 8], 0",
            "jmp 0x31c0",
            "mov r15, r14",
            "jmp 0x3048",
            "test r15, r15",
            "je 0x3318",
            "mov rdx, r13",
            "mov rsi, rbp",
            "mov rdi, r15",
            "call loc.imp.apr_cpystrn",
            "jmp 0x305b",
            "mov rcx, qword [rsp + 0x30]",
            "add qword [rsp + 0x10], rax",
            "mov r15, rbx",
            "mov qword [rcx + 8], rax",
            "mov qword [rcx + 0x10], rsi",
            "jmp 0x31f2",
            "mov rax, qword [rsp + 0x30]",
            "cmp qword [rax + 8], 0",
            "jne 0x334c",
            "mov rax, qword [rsp + 0x30]",
            "add qword [rsp + 0x10], rbp",
            "mov qword [rax + 8], rbp",
            "mov qword [rax + 0x10], r15",
            "jmp 0x3029",
            "mov rax, qword [rsp + 0x30]",
            "add qword [rsp + 0x10], 1",
            "mov qword [rax + 0x10], r15",
            "mov r15, r10",
            "mov qword [rax + 8], 1",
            "jmp 0x31f2",
            "cmp rbx, r13",
            "jb 0x3449",
            "test r13, r13",
            "je 0x3449",
            "lea rdx, [r13 - 1]",
            "mov rax, qword [rsp + 0x28]",
            "mov rsi, rbp",
            "mov rdi, qword [rax]",
            "add rsp, 0x68",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "jmp loc.imp.apr_pstrmemdup",
            "mov rax, qword [rsp + 0x28]",
            "mov esi, 0x18",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_palloc",
            "mov rcx, qword [rsp + 0x30]",
            "mov qword [rsp + 0x30], rax",
            "mov qword [rcx], rax",
            "mov qword [rax], 0",
            "jmp 0x32e2",
            "mov qword [rsp + 0x40], 0",
            "mov qword [rsp + 8], 0",
            "jmp 0x2e6f",
            "mov rbx, qword [rsp + 0x10]",
            "cmp rbx, r13",
            "jbe 0x33a9",
            "test r13, r13",
            "setne al",
            "sub r13, 1",
            "test al, al",
            "cmovne rbx, r13",
            "mov rax, qword [rsp + 0x28]",
            "lea rsi, [rbx + 1]",
            "mov rdi, qword [rax]",
            "call loc.imp.apr_palloc",
            "mov rbp, qword [rsp + 0x48]",
            "mov qword [rsp + 0x40], rax",
            "add rbx, rax",
            "mov rcx, rax",
            "jmp 0x33d5",
            "test rbp, rbp",
            "je 0x340b",
            "mov rdx, qword [rbp + 8]",
            "test rdx, rdx",
            "je 0x3402",
            "lea rsi, [rcx + rdx]",
            "mov rax, rbx",
            "mov rdi, rcx",
            "sub rax, rcx",
            "cmp rbx, rsi",
            "mov rsi, qword [rbp + 0x10]",
            "cmovb rdx, rax",
            "call sym.imp.memcpy",
            "mov rcx, rax",
            "add rcx, qword [rbp + 8]",
            "cmp rcx, rbx",
            "mov rbp, qword [rbp]",
            "jb 0x33d0",
            "mov byte [rbx], 0",
            "jmp 0x305b",
            "mov r12, rbp",
            "xor ebx, ebx",
            "jmp 0x2eb4",
            "mov rax, qword [rsp + 0x28]",
            "mov esi, 0x18",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_palloc",
            "mov qword [rsp + 0x48], rax",
            "mov qword [rax], 0",
            "mov qword [rax + 0x10], rbp",
            "mov qword [rax + 8], rbx",
            "jmp 0x2ee3",
            "mov rdx, rbx",
            "jmp 0x332e",
            "mov rax, qword [rsp + 0x58]",
            "mov rbx, qword [rsp + 0x10]",
            "lea r9, str.Missing__on_variable___s__in__s",
            "lea rdi, str.mod_include.c",
            "mov edx, 3",
            "mov esi, 0x313",
            "mov r15, r14",
            "push qword [rax + 0x168]",
            "push rcx",
            "mov r8, rax",
            "xor ecx, ecx",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "pop rdx",
            "pop rcx",
            "jmp 0x303f",
            "lea rsi, str.mod_include.c",
            "lea rdi, str.out__length",
            "mov edx, 0x2c5",
            "call loc.imp.ap_log_assert",
            "nop dword [rax + rax]",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "mov rbp, rsi",
            "push rbx",
            "mov r8, qword [rsi + 0x18]",
            "mov rbx, rdi",
            "mov esi, dword [rdi + 0x1c]",
            "test esi, esi",
            "je 0x3520",
            "cmp dword [rdi + 0x14], 1",
            "mov r12, rdx",
            "lea r9, str.endif_directive_does_not_take_tags_in__s",
            "lea rdi, str.mod_include.c",
            "mov esi, 0x8ea",
            "sbb edx, edx",
            "sub rsp, 8",
            "push qword [r8 + 0x168]",
            "add edx, 4",
            "xor ecx, ecx",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "mov eax, dword [rbx + 0x14]",
            "pop rdx",
            "pop rcx",
            "test eax, eax",
            "jne 0x3527",
            "mov eax, dword [rbx + 0x1c]",
            "test eax, eax",
            "jne 0x3540",
            "or dword [rbx + 0x10], 3",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov eax, dword [rdi + 0x14]",
            "test eax, eax",
            "je 0x350c",
            "sub eax, 1",
            "mov dword [rbx + 0x14], eax",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov rax, qword [rbp + 0x20]",
            "mov rbp, qword [rbx + 0x20]",
            "mov rdi, rbp",
            "mov r14, qword [rax + 0x90]",
            "call sym.imp.strlen",
            "mov rbx, qword [rbx]",
            "mov r13, rax",
            "mov rsi, rbp",
            "mov rdi, rbx",
            "call loc.imp.apr_pstrdup",
            "mov rdx, rbx",
            "mov rcx, r14",
            "mov rsi, r13",
            "mov rdi, rax",
            "call loc.imp.apr_bucket_pool_create",
            "lea rdx, [r12 + 8]",
            "mov qword [rax], rdx",
            "mov rdx, qword [r12 + 0x10]",
            "mov qword [rax + 8], rdx",
            "mov rdx, qword [r12 + 0x10]",
            "mov qword [rdx], rax",
            "mov qword [r12 + 0x10], rax",
            "xor eax, eax",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret"
        ]
    },
    "sym.imp.strlen": {
        "function_address": "0x00001db0",
        "instructions": [
            "jmp qword [reloc.strlen]"
        ]
    },
    "sym.imp.memcpy": {
        "function_address": "0x00001ee0",
        "instructions": [
            "jmp qword [reloc.memcpy]"
        ]
    },
    "sym.imp.strchr": {
        "function_address": "0x00001df0",
        "instructions": [
            "jmp qword [reloc.strchr]"
        ]
    },
    "loc.imp.apr_pstrmemdup": {
        "function_address": "0x00001d30",
        "instructions": [
            "jmp qword [reloc.apr_pstrmemdup]"
        ]
    },
    "loc.imp.apr_palloc": {
        "function_address": "0x00001e50",
        "instructions": [
            "jmp qword [reloc.apr_palloc]"
        ]
    },
    "loc.imp.apr_cpystrn": {
        "function_address": "0x00001d60",
        "instructions": [
            "jmp qword [reloc.apr_cpystrn]"
        ]
    },
    "loc.imp.ap_log_assert": {
        "function_address": "0x00002080",
        "instructions": [
            "jmp qword [reloc.ap_log_assert]"
        ]
    },
    "loc.imp.apr_pstrdup": {
        "function_address": "0x00001ef0",
        "instructions": [
            "jmp qword [reloc.apr_pstrdup]"
        ]
    },
    "loc.imp.apr_bucket_pool_create": {
        "function_address": "0x00001ce0",
        "instructions": [
            "jmp qword [reloc.apr_bucket_pool_create]"
        ]
    },
    "fcn.00002b50": {
        "function_address": "0x00002b50",
        "instructions": [
            "push r14",
            "push r13",
            "mov r13, rdi",
            "push r12",
            "push rbp",
            "lea rdi, str.file",
            "push rbx",
            "mov r9, rsi",
            "mov r12, rcx",
            "mov rsi, rdx",
            "mov ecx, 5",
            "mov rbx, r8",
            "sub rsp, 0x20",
            "repe cmpsb byte [rsi], byte [rdi]",
            "je 0x2c90",
            "lea rdi, str.virtual",
            "mov ecx, 8",
            "mov rsi, rdx",
            "repe cmpsb byte [rsi], byte [rdi]",
            "seta bpl",
            "setb al",
            "sub ebp, eax",
            "movsx ebp, bpl",
            "test ebp, ebp",
            "jne 0x2db0",
            "xor edx, edx",
            "mov rsi, r13",
            "mov rdi, r12",
            "call loc.imp.ap_sub_req_lookup_uri",
            "cmp dword [rax + 0x70], 0xc8",
            "mov r14, rax",
            "jne 0x2cf0",
            "mov edi, dword [rax + 0x198]",
            "test edi, edi",
            "je 0x2cf0",
            "mov rax, qword [rax + 0x188]",
            "mov qword [rbx], rax",
            "mov rax, qword [r14 + 0x190]",
            "mov qword [rbx + 8], rax",
            "mov rax, qword [r14 + 0x198]",
            "mov qword [rbx + 0x10], rax",
            "mov rax, qword [r14 + 0x1a0]",
            "mov qword [rbx + 0x18], rax",
            "mov rax, qword [r14 + 0x1a8]",
            "mov qword [rbx + 0x20], rax",
            "mov rax, qword [r14 + 0x1b0]",
            "mov qword [rbx + 0x28], rax",
            "mov rax, qword [r14 + 0x1b8]",
            "mov qword [rbx + 0x30], rax",
            "mov rax, qword [r14 + 0x1c0]",
            "mov qword [rbx + 0x38], rax",
            "mov rax, qword [r14 + segment.NOTE]",
            "mov qword [rbx + 0x40], rax",
            "mov rax, qword [r14 + 0x1d0]",
            "mov qword [rbx + 0x48], rax",
            "mov rax, qword [r14 + 0x1d8]",
            "mov qword [rbx + 0x50], rax",
            "mov rax, qword [r14 + 0x1e0]",
            "mov qword [rbx + 0x58], rax",
            "mov rax, qword [r14 + 0x1e8]",
            "mov qword [rbx + 0x60], rax",
            "mov rax, qword [r14 + section..hash]",
            "mov qword [rbx + 0x68], rax",
            "mov rax, qword [r14 + 0x1f8]",
            "mov qword [rbx + 0x70], rax",
            "mov rdi, r14",
            "call loc.imp.ap_destroy_sub_req",
            "add rsp, 0x20",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "ret",
            "mov r8, qword [r13]",
            "lea rdi, [rsp + 0x18]",
            "mov ecx, 0xa",
            "xor esi, esi",
            "mov rdx, r12",
            "xor r14d, r14d",
            "call loc.imp.apr_filepath_merge",
            "test eax, eax",
            "mov ecx, eax",
            "lea r9, str.unable_to_access_file___s__in_parsed_file__s",
            "je 0x2d38",
            "push qword [r13 + 0x168]",
            "lea rdi, str.mod_include.c",
            "push r12",
            "xor eax, eax",
            "mov edx, 3",
            "mov r8, r13",
            "mov esi, 0x650",
            "mov ebp, 0xffffffff",
            "call loc.imp.ap_log_rerror",
            "test r14, r14",
            "pop rax",
            "pop rdx",
            "jne 0x2c74",
            "jmp 0x2c7c",
            "push qword [r13 + 0x168]",
            "lea r9, str.unable_to_get_information_about___s__in_parsed_file__s",
            "push r12",
            "lea rdi, str.mod_include.c",
            "xor ecx, ecx",
            "mov esi, 0x664",
            "mov r8, r13",
            "mov edx, 3",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "mov rdi, r14",
            "mov ebp, 0xffffffff",
            "call loc.imp.ap_destroy_sub_req",
            "pop rcx",
            "pop rsi",
            "jmp 0x2c7c",
            "mov rdi, qword [rsp + 0x18]",
            "xor edx, edx",
            "mov rsi, r13",
            "mov dword [rsp + 0xc], eax",
            "call loc.imp.ap_sub_req_lookup_file",
            "cmp dword [rax + 0x70], 0xc8",
            "mov r14, rax",
            "lea r9, str.unable_to_lookup_information_about___s__in_parsed_file__s",
            "mov ecx, dword [rsp + 0xc]",
            "jne 0x2cbc",
            "mov r8d, dword [rax + 0x198]",
            "test r8d, r8d",
            "je 0x2cbc",
            "mov r12, qword [rax + 0x168]",
            "mov rcx, qword [rax]",
            "mov edx, 0x208170",
            "mov rdi, rbx",
            "mov rsi, r12",
            "call loc.imp.apr_stat",
            "test eax, eax",
            "mov ecx, eax",
            "je 0x2da8",
            "cmp eax, 0x11178",
            "lea r9, str.unable_to_get_information_about___s__in_parsed_file__s",
            "jne 0x2cbc",
            "xor ebp, ebp",
            "jmp 0x2c74",
            "sub rsp, 8",
            "lea rdi, str.mod_include.c",
            "push qword [r13 + 0x168]",
            "push r9",
            "lea r9, str.unknown_parameter___s__to_tag__s_in__s",
            "push rdx",
            "mov r8, r13",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x66c",
            "xor eax, eax",
            "mov ebp, 0xffffffff",
            "call loc.imp.ap_log_rerror",
            "add rsp, 0x20",
            "jmp 0x2c7c"
        ]
    },
    "loc.imp.ap_sub_req_lookup_uri": {
        "function_address": "0x00001f40",
        "instructions": [
            "jmp qword [reloc.ap_sub_req_lookup_uri]"
        ]
    },
    "loc.imp.ap_destroy_sub_req": {
        "function_address": "0x00001fe0",
        "instructions": [
            "jmp qword [reloc.ap_destroy_sub_req]"
        ]
    },
    "loc.imp.apr_filepath_merge": {
        "function_address": "0x000020a0",
        "instructions": [
            "jmp qword [reloc.apr_filepath_merge]"
        ]
    },
    "loc.imp.ap_sub_req_lookup_file": {
        "function_address": "0x00001f10",
        "instructions": [
            "jmp qword [reloc.ap_sub_req_lookup_file]"
        ]
    },
    "loc.imp.apr_stat": {
        "function_address": "0x00002010",
        "instructions": [
            "jmp qword [reloc.apr_stat]"
        ]
    },
    "fcn.00005340": {
        "function_address": "0x00005340",
        "instructions": [
            "mov rax, qword [rdi + 0x30]",
            "mov rax, qword [rax + 0x68]",
            "test rax, rax",
            "je 0x54e0",
            "mov rax, qword [rax + 0x18]",
            "test ecx, ecx",
            "mov qword [rdx], rax",
            "mov rax, qword [rdi + 0x30]",
            "mov rax, qword [rax + 0x68]",
            "mov rax, qword [rax + 8]",
            "mov qword [rsi], rax",
            "mov rax, qword [rdi + 0x30]",
            "mov rsi, qword [rax + 0x68]",
            "mov rsi, qword [rsi]",
            "mov qword [rax + 0x68], rsi",
            "je 0x53bd",
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x18",
            "mov rbx, qword [rdx]",
            "test rbx, rbx",
            "je 0x53af",
            "movzx eax, byte [rbx]",
            "cmp al, 0x26",
            "jne 0x53ab",
            "jmp 0x53c0",
            "add rbx, 1",
            "movzx eax, byte [rbx]",
            "cmp al, 0x26",
            "je 0x53c0",
            "test al, al",
            "jne 0x53a0",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "repz ret",
            "mov rbp, rbx",
            "mov eax, 0x26",
            "jmp 0x53ec",
            "mov r12, rbx",
            "mov byte [rbp], al",
            "add rbx, 1",
            "movzx eax, byte [r12 + 1]",
            "add rbp, 1",
            "test al, al",
            "je 0x54c6",
            "cmp al, 0x26",
            "jne 0x53d0",
            "movzx esi, byte [rbx + 1]",
            "lea rax, [rbx + 1]",
            "mov qword [rsp + 8], rax",
            "test sil, sil",
            "je 0x5440",
            "cmp sil, 0x3b",
            "lea rax, [rbx + 2]",
            "mov r15d, 2",
            "setne dl",
            "test dl, dl",
            "je 0x5440",
            "movzx edx, byte [rax]",
            "mov r12, rax",
            "add rax, 1",
            "mov r14d, r15d",
            "lea rdi, [r15 + 1]",
            "test dl, dl",
            "je 0x5453",
            "cmp dl, 0x3b",
            "je 0x5453",
            "mov r15, rdi",
            "jmp 0x5417",
            "mov r12, qword [rsp + 8]",
            "mov edx, esi",
            "mov r15d, 1",
            "mov r14d, 1",
            "test dl, dl",
            "je 0x54a8",
            "cmp sil, 0x23",
            "je 0x54f0",
            "sub r14d, 1",
            "cmp r14d, 6",
            "jg 0x54a8",
            "lea rax, [section..data.rel.ro]",
            "movsxd r14, r14d",
            "mov r13, qword [rax + r14*8]",
            "test r13, r13",
            "jne 0x549b",
            "jmp 0x54a8",
            "mov rdi, qword [rsp + 8]",
            "mov rdx, r14",
            "mov rsi, r13",
            "call sym.imp.strncmp",
            "test eax, eax",
            "je 0x556e",
            "add r13, r15",
            "cmp byte [r13], 0",
            "jne 0x5480",
            "nop word [rax + rax]",
            "mov r12, rbx",
            "mov byte [rbp], 0x26",
            "add rbp, 1",
            "movzx eax, byte [r12 + 1]",
            "mov rbx, qword [rsp + 8]",
            "test al, al",
            "jne 0x53ec",
            "mov byte [rbp], 0",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "jmp 0x53bd",
            "mov qword [rsi], 0",
            "mov qword [rdx], 0",
            "ret",
            "cmp r14d, 2",
            "jle 0x5560",
            "call sym.imp.__ctype_b_loc",
            "add rbx, 2",
            "mov rdi, qword [rax]",
            "mov ecx, 2",
            "xor edx, edx",
            "jmp 0x5523",
            "lea edx, [rdx + rdx*4]",
            "add ecx, 1",
            "add rbx, 1",
            "cmp ecx, r14d",
            "lea edx, [rax + rdx*2 - 0x30]",
            "je 0x5530",
            "movsx eax, byte [rbx]",
            "movzx esi, al",
            "test byte [rdi + rsi*2 + 1], 8",
            "jne 0x5510",
            "cmp edx, 8",
            "jle 0x5560",
            "cmp r14d, ecx",
            "jg 0x5560",
            "lea eax, [rdx - 0xb]",
            "cmp eax, 0x14",
            "jbe 0x5560",
            "cmp edx, 0xff",
            "jg 0x5560",
            "lea eax, [rdx - 0x7f]",
            "cmp eax, 0x21",
            "jbe 0x5560",
            "mov byte [rbp], dl",
            "lea rbx, [r12 + 1]",
            "jmp 0x53da",
            "sub rbp, 1",
            "lea rbx, [r12 + 1]",
            "jmp 0x53da",
            "movzx eax, byte [r13 + r14]",
            "lea rbx, [r12 + 1]",
            "mov byte [rbp], al",
            "jmp 0x53da"
        ]
    },
    "sym.imp.strncmp": {
        "function_address": "0x00001d20",
        "instructions": [
            "jmp qword [reloc.strncmp]"
        ]
    },
    "fcn.00006830": {
        "function_address": "0x00006830",
        "instructions": [
            "push r15",
            "push r14",
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "sub rsp, 0x68",
            "mov rax, qword [rdi + 0x30]",
            "test rsi, rsi",
            "mov rax, qword [rax + 0x28]",
            "mov dword [rdx], 0",
            "mov qword [rsp + 0x18], rax",
            "je 0x6998",
            "mov qword [rsp + 8], rdi",
            "mov rdi, qword [rdi + 8]",
            "mov rbx, rsi",
            "mov qword [rsp + 0x20], rsi",
            "mov esi, 0x30",
            "mov qword [rsp + 0x28], rdx",
            "xor r15d, r15d",
            "call loc.imp.apr_palloc",
            "mov r12, rax",
            "mov qword [rax + 0x10], 0",
            "mov qword [rax + 8], 0",
            "mov qword [rax], 0",
            "mov dword [rax + 0x2c], 0",
            "mov r14, r12",
            "call sym.imp.__ctype_b_loc",
            "mov dword [rsp + 0x3c], 0",
            "mov qword [rsp + 0x10], 0",
            "xor esi, esi",
            "mov r12, rax",
            "mov qword [r14 + 0x20], 0",
            "mov rcx, qword [r12]",
            "jmp 0x68d4",
            "add rbx, 1",
            "movzx edx, byte [rbx]",
            "test byte [rcx + rdx*2 + 1], 0x20",
            "jne 0x68d0",
            "test dl, dl",
            "mov rdi, rbx",
            "je 0x69b0",
            "mov dword [r14 + 0x18], 0",
            "movzx eax, byte [rbx]",
            "lea rcx, [rbx + 1]",
            "sub eax, 0x21",
            "cmp al, 0x5b",
            "ja case.0x6914.1",
            "lea rdx, [0x00008af0]",
            "movzx eax, al",
            "movsxd rax, dword [rdx + rax*4]",
            "add rax, rdx",
            "jmp rax",
            "mov r10d, dword [r15 + 0x18]",
            "test r10d, r10d",
            "jne case.0x6bc1.9",
            "mov rax, qword [r15]",
            "test rax, rax",
            "je 0x6d34",
            "mov edi, dword [rax + 0x18]",
            "lea ecx, [rdi - 2]",
            "cmp ecx, 6",
            "ja case.0x6bc1.9",
            "mov edx, 1",
            "shl rdx, cl",
            "and edx, 0x43",
            "jne 0x6c6f",
            "nop dword [rax]",
            "lea r9, str.Invalid_expression___s__in_file__s",
            "mov rax, qword [rsp + 0x18]",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x524",
            "push qword [rax + 0x168]",
            "push qword [rsp + 0x28]",
            "mov r8, rax",
            "lea rdi, str.mod_include.c",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "mov rax, qword [rsp + 0x38]",
            "mov dword [rax], 1",
            "pop rax",
            "pop rdx",
            "xor eax, eax",
            "add rsp, 0x68",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "cmp qword [rsp + 0x10], 0",
            "mov r14, qword [rsp + 0x10]",
            "je 0x6998",
            "mov rbp, qword [rsp + 8]",
            "lea rbx, [0x00008c60]",
            "mov edx, dword [r14 + 0x18]",
            "cmp edx, 0xe",
            "ja case.0x69df.7",
            "mov eax, edx",
            "movsxd rax, dword [rbx + rax*4]",
            "add rax, rbx",
            "jmp rax",
            "cmp byte [rbx + 1], 0x7c",
            "je 0x6f7f",
            "mov qword [r14 + 0x20], rbx",
            "movsx edx, byte [rbx]",
            "test dl, dl",
            "je 0x734e",
            "xor esi, esi",
            "mov rbx, rdi",
            "xor ecx, ecx",
            "jmp 0x6a20",
            "cmp esi, edx",
            "je 0x6f50",
            "movsx edx, byte [rbx + 1]",
            "add rbx, 1",
            "test dl, dl",
            "je 0x6f59",
            "cmp dl, 0x5c",
            "je 0x6a60",
            "test esi, esi",
            "jne 0x6a08",
            "mov r8, qword [r12]",
            "movzx eax, dl",
            "test byte [r8 + rax*2 + 1], 0x20",
            "jne 0x6f2f",
            "cmp dl, 0x29",
            "jg 0x6a80",
            "cmp dl, 0x28",
            "jge 0x6aa0",
            "cmp dl, 0x21",
            "je 0x6aa0",
            "cmp dl, 0x26",
            "jne 0x6a10",
            "movzx eax, byte [rbx + 1]",
            "cmp dl, al",
            "je 0x6aa0",
            "movsx edx, al",
            "jmp 0x6a14",
            "cmp byte [rbx + 1], 0",
            "lea rax, [rbx + 1]",
            "je 0x6f56",
            "movsx edx, byte [rbx + 2]",
            "add rcx, 1",
            "mov rbx, rax",
            "jmp 0x6a14",
            "cmp dl, 0x3c",
            "jl 0x6a10",
            "cmp dl, 0x3e",
            "jle 0x6aa0",
            "cmp dl, 0x7c",
            "jne 0x6a10",
            "movzx eax, byte [rbx + 1]",
            "cmp dl, al",
            "jne 0x6a58",
            "nop word [rax + rax]",
            "mov rax, rbx",
            "lea r10, [rcx - 1]",
            "sub rax, rdi",
            "sub rax, rcx",
            "lea rsi, [rax + 1]",
            "mov qword [rsp + 0x30], rax",
            "mov rax, qword [rsp + 8]",
            "mov qword [rsp + 0x40], rcx",
            "mov qword [rsp + 0x48], r10",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_palloc",
            "mov rcx, qword [rsp + 0x40]",
            "mov r13, qword [r14 + 0x20]",
            "mov rbp, rax",
            "mov qword [r14 + 0x20], rax",
            "test rcx, rcx",
            "je 0x6b77",
            "mov r10, qword [rsp + 0x48]",
            "mov qword [rsp + 0x40], r15",
            "mov r15, qword [rsp + 0x30]",
            "mov qword [rsp + 0x58], rbx",
            "mov qword [rsp + 0x50], r14",
            "mov qword [rsp + 0x48], r12",
            "mov rbx, r10",
            "nop dword [rax + rax]",
            "mov rdi, r13",
            "mov esi, 0x5c",
            "call sym.imp.strchr",
            "mov r14, rax",
            "mov r12, rax",
            "mov rsi, r13",
            "sub r14, r13",
            "mov rdi, rbp",
            "mov rdx, r14",
            "call sym.imp.memcpy",
            "movzx eax, byte [r12 + 1]",
            "lea rcx, [rbp + r14]",
            "lea rbp, [rcx + 1]",
            "mov byte [rcx], al",
            "lea rax, [r12 + 1]",
            "sub r13, rax",
            "add r15, r13",
            "test rbx, rbx",
            "lea r13, [r12 + 2]",
            "lea rbx, [rbx - 1]",
            "jne 0x6b10",
            "mov qword [rsp + 0x30], r15",
            "mov r14, qword [rsp + 0x50]",
            "mov rbx, qword [rsp + 0x58]",
            "mov r15, qword [rsp + 0x40]",
            "mov r12, qword [rsp + 0x48]",
            "cmp qword [rsp + 0x30], 0",
            "jne 0x6f0d",
            "mov rax, qword [rsp + 0x30]",
            "mov byte [rbp + rax], 0",
            "test rbx, rbx",
            "je 0x69b0",
            "test r15, r15",
            "mov ecx, dword [r14 + 0x18]",
            "je 0x6d4d",
            "cmp ecx, 0xe",
            "ja case.0x6bc1.9",
            "lea rax, [0x00008c9c]",
            "lea rdi, [0x00008c9c]",
            "movsxd rax, dword [rax + rcx*4]",
            "add rax, rdi",
            "jmp rax",
            "cmp dword [r15 + 0x18], 8",
            "je 0x6f22",
            "mov r15, qword [r15]",
            "test r15, r15",
            "jne case.0x6bc1.7",
            "lea r9, [0x00008538]",
            "jmp 0x695f",
            "mov ecx, dword [r15 + 0x18]",
            "cmp ecx, 9",
            "ja 0x6c0c",
            "mov eax, 1",
            "shl rax, cl",
            "test eax, 0x283",
            "jne case.0x6bc1.9",
            "mov qword [r15 + 0x10], r14",
            "mov qword [r14], r15",
            "mov r15, r14",
            "jmp 0x6c84",
            "mov ecx, dword [r15 + 0x18]",
            "cmp ecx, 9",
            "ja case.0x6bc1.9",
            "mov eax, 1",
            "shl rax, cl",
            "test eax, 0x203",
            "je case.0x6bc1.9",
            "mov rax, qword [r15]",
            "test rax, rax",
            "je 0x6d34",
            "mov esi, 1",
            "mov edi, dword [rax + 0x18]",
            "lea ecx, [rdi - 2]",
            "cmp ecx, 6",
            "ja 0x6d28",
            "mov rdx, rsi",
            "shl rdx, cl",
            "and edx, 0x43",
            "je 0x6d28",
            "mov rdx, qword [rax + 0x10]",
            "mov r15, r14",
            "mov qword [r14 + 8], rdx",
            "mov qword [rdx], r14",
            "mov qword [r14], rax",
            "mov qword [rax + 0x10], r14",
            "mov rax, qword [rsp + 8]",
            "mov rdi, qword [rax + 8]",
            "mov esi, 0x30",
            "call loc.imp.apr_palloc",
            "lea rsi, [r15 + 0x18]",
            "mov r14, rax",
            "mov qword [rax + 0x10], 0",
            "mov qword [rax + 8], 0",
            "mov qword [rax], 0",
            "mov dword [rax + 0x2c], 0",
            "jmp 0x68bc",
            "mov eax, dword [r15 + 0x18]",
            "sub eax, 5",
            "cmp eax, 1",
            "ja case.0x6bc1.9",
            "mov qword [r14], r15",
            "add dword [rsp + 0x3c], 1",
            "mov qword [r15 + 0x10], r14",
            "mov r15, r14",
            "jmp 0x6c84",
            "mov eax, dword [r15 + 0x18]",
            "cmp eax, 1",
            "je case.0x6bc1.9",
            "jb 0x6ed1",
            "cmp eax, 7",
            "je case.0x6bc1.9",
            "cmp eax, 9",
            "je case.0x6bc1.9",
            "mov qword [r14], r15",
            "mov qword [r15 + 0x10], r14",
            "mov r15, r14",
            "jmp 0x6c84",
            "mov rax, qword [rax]",
            "test rax, rax",
            "jne 0x6c51",
            "mov rax, qword [rsp + 0x10]",
            "mov r15, r14",
            "mov qword [rsp + 0x10], r14",
            "mov qword [r14 + 8], rax",
            "mov qword [rax], r14",
            "jmp 0x6c84",
            "cmp ecx, 0xe",
            "ja 0x6d61",
            "mov eax, 1",
            "shl rax, cl",
            "test eax, 0x4111",
            "jne 0x6d8b",
            "mov rax, qword [rsp + 0x18]",
            "lea r9, str.Invalid_expression___s__in_file__s",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x48e",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov r15, r14",
            "mov qword [rsp + 0x10], r14",
            "jmp 0x6c84",
            "mov qword [r14 + 0x20], rcx",
            "movsx edx, byte [rbx + 1]",
            "test dl, dl",
            "je 0x72a7",
            "mov rdi, rcx",
            "mov esi, 0x27",
            "jmp 0x69fc",
            "cmp byte [rbx + 1], 0x26",
            "jne case.0x6914.1",
            "mov dword [r14 + 0x18], 2",
            "add rbx, 2",
            "mov ecx, 2",
            "jmp 0x6e40",
            "cmp byte [rbx + 1], 0x3d",
            "je 0x7291",
            "mov dword [r14 + 0x18], 4",
            "mov rbx, rcx",
            "jmp 0x6b8d",
            "mov dword [r14 + 0x18], 8",
            "mov rbx, rcx",
            "jmp 0x6b8d",
            "mov dword [r14 + 0x18], 7",
            "mov rbx, rcx",
            "jmp 0x6b8d",
            "cmp byte [rbx + 1], 0x41",
            "jne case.0x6914.1",
            "mov rax, qword [rsp + 8]",
            "mov rax, qword [rax + 0x30]",
            "mov r11d, dword [rax + 0x88]",
            "test r11d, r11d",
            "je case.0x6914.1",
            "mov dword [r14 + 0x18], 0xe",
            "add rbx, 2",
            "mov ecx, 0xe",
            "test r15, r15",
            "jne 0x6ba3",
            "jmp 0x6d52",
            "test rsi, rsi",
            "je 0x6e5c",
            "cmp dword [rsi], 0xe",
            "je case.0x6914.1",
            "mov dword [r14 + 0x18], 1",
            "mov qword [r14 + 0x20], rcx",
            "movsx edx, byte [rbx + 1]",
            "test dl, dl",
            "je 0x72a7",
            "mov rdi, rcx",
            "mov esi, 0x2f",
            "jmp 0x69fc",
            "cmp byte [rbx + 1], 0x3d",
            "je 0x727b",
            "mov dword [r14 + 0x18], 0xd",
            "mov rbx, rcx",
            "jmp 0x6b8d",
            "cmp byte [rbx + 1], 0x3d",
            "lea rax, [rbx + 2]",
            "mov dword [r14 + 0x18], 5",
            "cmovne rax, rcx",
            "mov rbx, rax",
            "jmp 0x6b8d",
            "cmp byte [rbx + 1], 0x3d",
            "je 0x7265",
            "mov dword [r14 + 0x18], 0xc",
            "mov rbx, rcx",
            "jmp 0x6b8d",
            "mov rsi, qword [r15 + 0x20]",
            "mov rcx, qword [r14 + 0x20]",
            "lea rax, [0x00007d05]",
            "mov r14, qword [rsp + 8]",
            "lea rdx, [0x00007d06]",
            "cmp byte [rsi], 0",
            "mov rdi, qword [r14 + 8]",
            "cmovne rdx, rax",
            "xor r8d, r8d",
            "xor eax, eax",
            "call loc.imp.apr_pstrcat",
            "mov qword [r15 + 0x20], rax",
            "mov rax, r14",
            "jmp 0x6c89",
            "mov rdx, qword [rsp + 0x30]",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call sym.imp.memcpy",
            "jmp 0x6b83",
            "mov dword [r15 + 0x18], 9",
            "jmp 0x6c84",
            "mov rax, rbx",
            "sub rbx, rdi",
            "lea r10, [rcx - 1]",
            "mov rdx, rbx",
            "mov rbx, rax",
            "sub rdx, rcx",
            "lea rsi, [rdx + 1]",
            "mov qword [rsp + 0x30], rdx",
            "jmp 0x6ab6",
            "lea rax, [rbx + 1]",
            "jmp 0x6f32",
            "mov rbx, rax",
            "test esi, esi",
            "je 0x6aa0",
            "mov rax, qword [rsp + 8]",
            "lea rsi, [0x00007d06]",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_pstrdup",
            "mov qword [r14 + 0x20], rax",
            "jmp 0x6b8d",
            "mov dword [r14 + 0x18], 3",
            "add rbx, 2",
            "mov ecx, 3",
            "jmp 0x6e40",
            "cmp qword [r14 + 8], 0",
            "jne 0x74fd",
            "mov r12, qword [r14 + 0x10]",
            "test r12, r12",
            "je 0x74fd",
            "cmp dword [r12 + 0x18], 1",
            "ja 0x74fd",
            "mov rsi, qword [r12 + 0x20]",
            "xor ecx, ecx",
            "xor r8d, r8d",
            "xor edx, edx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov rax, qword [r14 + 0x10]",
            "xor edx, edx",
            "mov rsi, qword [rsp + 0x18]",
            "mov rdi, qword [rax + 0x20]",
            "call loc.imp.ap_sub_req_lookup_uri",
            "mov ecx, dword [rax + 0x70]",
            "mov r12, rax",
            "cmp ecx, 0x18f",
            "jg 0x7396",
            "mov dword [r14 + 0x28], 1",
            "mov rdi, r12",
            "call loc.imp.ap_destroy_sub_req",
            "mov dword [r14 + 0x2c], 1",
            "mov r14, qword [r14]",
            "test r14, r14",
            "jne 0x69c9",
            "mov rax, qword [rsp + 0x10]",
            "mov eax, dword [rax + 0x28]",
            "jmp 0x699a",
            "mov r12, qword [r14 + 8]",
            "test r12, r12",
            "je 0x7527",
            "mov rax, qword [r14 + 0x10]",
            "test rax, rax",
            "je 0x7527",
            "mov r10d, dword [r12 + 0x18]",
            "test r10d, r10d",
            "jne 0x7527",
            "mov r9d, dword [rax + 0x18]",
            "test r9d, r9d",
            "jne 0x7527",
            "mov rsi, qword [r12 + 0x20]",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov r12, qword [r14 + 0x10]",
            "xor edx, edx",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "mov rdi, rbp",
            "mov rsi, qword [r12 + 0x20]",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov rax, qword [r14 + 0x10]",
            "mov rsi, qword [rax + 0x20]",
            "mov rax, qword [r14 + 8]",
            "mov rdi, qword [rax + 0x20]",
            "call sym.imp.strcmp",
            "mov edx, dword [r14 + 0x18]",
            "mov dword [r14 + 0x28], eax",
            "cmp edx, 0xb",
            "je 0x74ec",
            "jbe 0x737e",
            "cmp edx, 0xc",
            "je 0x74db",
            "cmp edx, 0xd",
            "jne 0x7389",
            "shr eax, 0x1f",
            "mov dword [r14 + 0x28], eax",
            "jmp 0x7008",
            "lea r9, str.Unmatched___in___s__in_file__s",
            "mov rax, qword [rsp + 0x18]",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x5f3",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov r12, qword [r14 + 8]",
            "test r12, r12",
            "je 0x757b",
            "mov rax, qword [r14 + 0x10]",
            "test rax, rax",
            "je 0x757b",
            "mov r13d, dword [r12 + 0x18]",
            "test r13d, r13d",
            "jne 0x757b",
            "cmp dword [rax + 0x18], 1",
            "ja 0x757b",
            "mov rsi, qword [r12 + 0x20]",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov r12, qword [r14 + 0x10]",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rdi, rbp",
            "mov rsi, qword [r12 + 0x20]",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov rax, qword [r14 + 0x10]",
            "cmp dword [rax + 0x18], 1",
            "je 0x7411",
            "mov rsi, qword [rax + 0x20]",
            "mov rax, qword [r14 + 8]",
            "mov rdi, qword [rax + 0x20]",
            "call sym.imp.strcmp",
            "test eax, eax",
            "sete al",
            "movzx eax, al",
            "mov dword [r14 + 0x28], eax",
            "cmp dword [r14 + 0x18], 6",
            "jne 0x7008",
            "mov edi, dword [r14 + 0x28]",
            "xor eax, eax",
            "test edi, edi",
            "sete al",
            "mov dword [r14 + 0x28], eax",
            "jmp 0x7008",
            "mov rax, qword [r14 + 0x10]",
            "test rax, rax",
            "je 0x74ce",
            "mov r8d, dword [rax + 0x2c]",
            "test r8d, r8d",
            "je 0x7376",
            "mov eax, dword [rax + 0x28]",
            "mov dword [r14 + 0x28], eax",
            "cmp edx, 4",
            "jne 0x7008",
            "jmp 0x71a6",
            "mov r12, qword [r14 + 8]",
            "test r12, r12",
            "je 0x7551",
            "mov rax, qword [r14 + 0x10]",
            "test rax, rax",
            "je 0x7551",
            "mov r9d, dword [r12 + 0x2c]",
            "test r9d, r9d",
            "jne 0x72af",
            "mov r8d, dword [r12 + 0x18]",
            "test r8d, r8d",
            "je 0x73d4",
            "mov r14, r12",
            "jmp 0x69c9",
            "lea r9, str.No_operator_before_regex_in_expr___s__in_file__s",
            "jmp 0x70e5",
            "mov rsi, qword [r14 + 0x20]",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "xor edx, edx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r14 + 0x20], rax",
            "cmp byte [rax], 0",
            "setne al",
            "movzx eax, al",
            "mov dword [r14 + 0x28], eax",
            "jmp 0x7008",
            "lea r9, str.internal_parser_error_in___s__in_file__s",
            "jmp 0x70e5",
            "mov dword [r14 + 0x18], 0xa",
            "add rbx, 2",
            "mov ecx, 0xa",
            "jmp 0x6e40",
            "mov dword [r14 + 0x18], 0xb",
            "add rbx, 2",
            "mov ecx, 0xb",
            "jmp 0x6e40",
            "mov dword [r14 + 0x18], 6",
            "add rbx, 2",
            "mov ecx, 6",
            "jmp 0x6e40",
            "mov rbx, rcx",
            "jmp 0x6f61",
            "mov r12, rax",
            "mov edi, dword [r12 + 0x2c]",
            "test edi, edi",
            "jne 0x731a",
            "mov esi, dword [rsp + 0x3c]",
            "test esi, esi",
            "jne 0x72d9",
            "mov eax, dword [r14 + 0x18]",
            "cmp eax, 2",
            "je 0x75b9",
            "cmp eax, 3",
            "je 0x75a5",
            "mov ecx, dword [r12 + 0x18]",
            "test ecx, ecx",
            "jne 0x721c",
            "mov rsi, qword [r12 + 0x20]",
            "xor edx, edx",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov rax, qword [r14 + 0x10]",
            "mov rdx, qword [rax + 0x20]",
            "cmp byte [rdx], 0",
            "mov dword [rax + 0x2c], 1",
            "setne dl",
            "movzx edx, dl",
            "mov dword [rax + 0x28], edx",
            "cmp dword [r14 + 0x18], 2",
            "je 0x74ba",
            "mov rdx, qword [r14 + 8]",
            "mov eax, 1",
            "mov edx, dword [rdx + 0x28]",
            "test edx, edx",
            "jne 0x70d5",
            "mov rax, qword [r14 + 0x10]",
            "mov r15d, dword [rax + 0x28]",
            "xor eax, eax",
            "test r15d, r15d",
            "setne al",
            "jmp 0x70d5",
            "mov rax, qword [rsp + 8]",
            "mov esi, 1",
            "mov rdi, qword [rax + 8]",
            "call loc.imp.apr_palloc",
            "mov qword [rsp + 0x30], 0",
            "mov rbp, rax",
            "mov qword [r14 + 0x20], rax",
            "jmp 0x6b83",
            "mov r14, rax",
            "jmp 0x69c9",
            "cmp edx, 0xa",
            "not eax",
            "je 0x70d2",
            "mov dword [r14 + 0x28], 0",
            "jmp 0x7008",
            "mov rax, qword [r14 + 0x10]",
            "sub rsp, 8",
            "mov dword [r14 + 0x28], 0",
            "lea r9, str.mod_include:_The_tested_subrequest__A___s__returned_an_error_code.",
            "lea rdi, str.mod_include.c",
            "mov esi, 0x5de",
            "mov edx, 7",
            "push qword [rax + 0x20]",
            "mov r8, qword [rsp + 0x28]",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "pop rcx",
            "pop rsi",
            "jmp 0x7000",
            "mov rsi, qword [r12 + 0x20]",
            "xor edx, edx",
            "xor r8d, r8d",
            "xor ecx, ecx",
            "mov rdi, rbp",
            "call fcn.00002e20",
            "mov qword [r12 + 0x20], rax",
            "mov rax, qword [r14 + 8]",
            "mov r12, qword [r14 + 0x10]",
            "mov rdx, qword [rax + 0x20]",
            "cmp byte [rdx], 0",
            "mov dword [rax + 0x2c], 1",
            "setne dl",
            "movzx edx, dl",
            "mov dword [rax + 0x28], edx",
            "jmp 0x72b2",
            "mov r13, qword [rax + 0x20]",
            "mov rax, qword [r14 + 8]",
            "xor edx, edx",
            "mov rdi, qword [rbp + 8]",
            "mov rax, qword [rax + 0x20]",
            "mov rsi, r13",
            "mov qword [rsp + 8], rax",
            "mov rax, qword [rbp + 0x30]",
            "mov r15, qword [rax + 0x70]",
            "call loc.imp.ap_pregcomp",
            "test rax, rax",
            "mov r12, rax",
            "je 0x75f5",
            "test r15, r15",
            "je 0x75cd",
            "mov rsi, qword [rsp + 8]",
            "mov rdi, qword [rbp]",
            "call loc.imp.apr_pstrdup",
            "mov rdi, qword [rbp]",
            "mov rsi, r13",
            "mov qword [r15], rax",
            "call loc.imp.apr_pstrdup",
            "mov qword [r15 + 8], rax",
            "mov rax, qword [r12 + 8]",
            "lea rcx, [r15 + 0x18]",
            "mov rsi, qword [rsp + 8]",
            "xor r8d, r8d",
            "mov edx, 0xa",
            "mov rdi, r12",
            "mov qword [r15 + 0x10], rax",
            "call loc.imp.ap_regexec",
            "test eax, eax",
            "mov rdi, qword [rbp + 8]",
            "mov rsi, r12",
            "sete al",
            "movzx eax, al",
            "mov dword [r15 + 0x68], eax",
            "call loc.imp.ap_pregfree",
            "mov eax, dword [r15 + 0x68]",
            "mov dword [r14 + 0x28], eax",
            "sub dword [rsp + 0x3c], 1",
            "jmp 0x719b",
            "mov rax, qword [r14 + 8]",
            "mov eax, dword [rax + 0x28]",
            "test eax, eax",
            "je 0x70d5",
            "jmp 0x7339",
            "mov dword [r14 + 0x28], 1",
            "jmp 0x71db",
            "test eax, eax",
            "setg al",
            "movzx eax, al",
            "mov dword [r14 + 0x28], eax",
            "jmp 0x7008",
            "test eax, eax",
            "setle al",
            "movzx eax, al",
            "mov dword [r14 + 0x28], eax",
            "jmp 0x7008",
            "mov rax, qword [rsp + 0x18]",
            "lea r9, str.Invalid_expression___s__in_file__s:_Token__A_must_be_followed_by_a_URI_string.",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x5ce",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov rax, qword [rsp + 0x18]",
            "lea r9, str.Invalid_expression___s__in_file__s",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x59e",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov rax, qword [rsp + 0x18]",
            "lea r9, str.Invalid_expression___s__in_file__s",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x53a",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov rax, qword [rsp + 0x18]",
            "lea r9, str.Invalid_expression___s__in_file__s",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x57b",
            "push qword [rax + 0x168]",
            "mov r8, rax",
            "push qword [rsp + 0x28]",
            "jmp 0x697d",
            "mov rax, qword [r14 + 8]",
            "mov eax, dword [rax + 0x28]",
            "test eax, eax",
            "jne 0x70d5",
            "jmp 0x72d9",
            "mov rax, qword [r14 + 8]",
            "mov eax, dword [rax + 0x28]",
            "test eax, eax",
            "je 0x70d5",
            "jmp 0x72d9",
            "mov rdx, qword [rbp + 0x30]",
            "mov rdi, qword [rbp]",
            "mov esi, 0x70",
            "mov qword [rsp + 0x30], rdx",
            "call loc.imp.apr_palloc",
            "mov rdx, qword [rsp + 0x30]",
            "mov r15, rax",
            "mov qword [rdx + 0x70], rax",
            "jmp 0x744d",
            "mov rax, qword [rbp + 0x30]",
            "sub rsp, 8",
            "lea r9, str.unable_to_compile_pattern___s_",
            "push r13",
            "lea rdi, str.mod_include.c",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x39f",
            "mov r8, qword [rax + 0x28]",
            "xor eax, eax",
            "call loc.imp.ap_log_rerror",
            "pop r11",
            "mov eax, 0xffffffff",
            "pop r12",
            "jmp 0x74ac"
        ]
    },
    "loc.imp.apr_pstrcat": {
        "function_address": "0x00002050",
        "instructions": [
            "jmp qword [reloc.apr_pstrcat]"
        ]
    },
    "sym.imp.strcmp": {
        "function_address": "0x00001e90",
        "instructions": [
            "jmp qword [reloc.strcmp]"
        ]
    },
    "loc.imp.ap_pregcomp": {
        "function_address": "0x00001f80",
        "instructions": [
            "jmp qword [reloc.ap_pregcomp]"
        ]
    },
    "loc.imp.ap_regexec": {
        "function_address": "0x00001e40",
        "instructions": [
            "jmp qword [reloc.ap_regexec]"
        ]
    },
    "loc.imp.ap_pregfree": {
        "function_address": "0x00001e70",
        "instructions": [
            "jmp qword [reloc.ap_pregfree]"
        ]
    }
}