{
    "sym.ap_dbd_acquire": {
        "function_address": "0x00002c20",
        "instructions": [
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbx, rdi",
            "jmp 0x2c33",
            "mov rbx, rax",
            "mov rdi, rbx",
            "call loc.imp.ap_is_initial_req",
            "test eax, eax",
            "jne 0x2c58",
            "mov rax, qword [rbx + 0x20]",
            "test rax, rax",
            "jne 0x2c30",
            "mov rax, qword [rbx + 0x28]",
            "test rax, rax",
            "cmove rax, rbx",
            "jmp 0x2c30",
            "mov rbp, qword [reloc.dbd_module]",
            "mov rax, qword [rbx + 0x268]",
            "movsxd rdx, dword [rbp + 8]",
            "mov rax, qword [rax + rdx*8]",
            "test rax, rax",
            "je 0x2c7b",
            "mov rax, qword [rax]",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rdi, qword [rbx]",
            "mov esi, 0x10",
            "call loc.imp.apr_palloc",
            "mov rsi, qword [rbx + 0x10]",
            "mov rdi, qword [rbx]",
            "mov r12, rax",
            "call fcn.00001630",
            "test rax, rax",
            "mov qword [r12], rax",
            "je 0x2c76",
            "mov rdx, qword [rbx + 0x10]",
            "movsxd rax, dword [rbp + 8]",
            "mov rcx, qword [rbx + 0x268]",
            "mov rdx, qword [rdx + 0x50]",
            "mov rdx, qword [rdx + rax*8]",
            "mov qword [rcx + rax*8], r12",
            "mov rax, qword [rdx]",
            "mov eax, dword [rax + 0x18]",
            "test eax, eax",
            "je 0x2ceb",
            "mov rax, qword [rdx + 8]",
            "mov rcx, qword [reloc.apr_pool_cleanup_null]",
            "lea rdx, [0x00001b80]",
            "mov rdi, qword [rbx]",
            "mov rsi, r12",
            "mov rax, qword [rax + 0x20]",
            "mov qword [r12 + 8], rax",
            "call loc.imp.apr_pool_cleanup_register",
            "mov rax, qword [r12]",
            "jmp 0x2c76"
        ]
    },
    "loc.imp.ap_is_initial_req": {
        "function_address": "0x00001700",
        "instructions": [
            "jmp qword [reloc.ap_is_initial_req]"
        ]
    },
    "loc.imp.apr_palloc": {
        "function_address": "0x00001680",
        "instructions": [
            "jmp qword [reloc.apr_palloc]"
        ]
    },
    "fcn.00001630": {
        "function_address": "0x00001630",
        "instructions": [
            "jmp qword [reloc.ap_dbd_open]"
        ]
    },
    "loc.imp.apr_pool_cleanup_register": {
        "function_address": "0x00001660",
        "instructions": [
            "jmp qword [reloc.apr_pool_cleanup_register]"
        ]
    },
    "sym.ap_dbd_cacquire": {
        "function_address": "0x00002b80",
        "instructions": [
            "push r12",
            "push rbp",
            "mov rbp, qword [reloc.dbd_module]",
            "push rbx",
            "mov rax, qword [rdi + 0x68]",
            "movsxd rdx, dword [rbp + 8]",
            "mov rax, qword [rax + rdx*8]",
            "test rax, rax",
            "je 0x2ba8",
            "mov rax, qword [rax]",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret",
            "mov rbx, rdi",
            "mov rdi, qword [rdi]",
            "mov esi, 0x10",
            "call loc.imp.apr_palloc",
            "mov rsi, qword [rbx + 8]",
            "mov rdi, qword [rbx]",
            "mov r12, rax",
            "call fcn.00001630",
            "test rax, rax",
            "mov qword [r12], rax",
            "je 0x2b9f",
            "mov rdx, qword [rbx + 8]",
            "movsxd rax, dword [rbp + 8]",
            "mov rcx, qword [rbx + 0x68]",
            "mov rdx, qword [rdx + 0x50]",
            "mov rdx, qword [rdx + rax*8]",
            "mov qword [rcx + rax*8], r12",
            "mov rax, qword [rdx]",
            "mov eax, dword [rax + 0x18]",
            "test eax, eax",
            "je 0x2c18",
            "mov rax, qword [rdx + 8]",
            "mov rcx, qword [reloc.apr_pool_cleanup_null]",
            "lea rdx, [0x00001b80]",
            "mov rdi, qword [rbx]",
            "mov rsi, r12",
            "mov rax, qword [rax + 0x20]",
            "mov qword [r12 + 8], rax",
            "call loc.imp.apr_pool_cleanup_register",
            "mov rax, qword [r12]",
            "jmp 0x2b9f"
        ]
    },
    "sym._init": {
        "function_address": "0x00001530",
        "instructions": [
            "sub rsp, 8",
            "mov rax, qword [0x00203fb0]",
            "test rax, rax",
            "je 0x1545",
            "call loc.imp.__gmon_start__",
            "add rsp, 8",
            "ret"
        ]
    },
    "loc.imp.__gmon_start__": {
        "function_address": "0x000016c0",
        "instructions": [
            "jmp qword [reloc.__gmon_start__]"
        ]
    },
    "sym.ap_dbd_open": {
        "function_address": "0x000028e0",
        "instructions": [
            "push r13",
            "push r12",
            "push rbp",
            "push rbx",
            "mov rbp, rsi",
            "sub rsp, 0x18",
            "mov rax, qword [reloc.dbd_module]",
            "movsxd rdx, dword [rax + 8]",
            "mov rax, qword [rsi + 0x50]",
            "mov rax, qword [rax + rdx*8]",
            "mov rbx, qword [rax]",
            "mov r13, qword [rax + 8]",
            "lea rax, str._DBDriver_unset_",
            "mov qword [rsp + 8], 0",
            "cmp qword [rbx + 8], rax",
            "je 0x2aeb",
            "mov ecx, dword [rbx + 0x18]",
            "mov r12, rdi",
            "test ecx, ecx",
            "je 0x2a00",
            "mov rdi, qword [r13 + 0x20]",
            "test rdi, rdi",
            "je 0x2a50",
            "lea rsi, [rsp + 8]",
            "call loc.imp.apr_reslist_acquire",
            "test eax, eax",
            "jne 0x2ac0",
            "mov rbx, qword [rsp + 8]",
            "mov rsi, r12",
            "mov rdi, qword [rbx + 8]",
            "mov rdx, qword [rbx]",
            "call loc.imp.apr_dbd_check_conn",
            "cmp eax, 0x11187",
            "mov r12d, eax",
            "je 0x29f0",
            "test eax, eax",
            "je 0x29f0",
            "mov rdi, qword [rbx + 8]",
            "mov rsi, qword [rbx]",
            "mov edx, eax",
            "call loc.imp.apr_dbd_error",
            "lea rdx, str._unknown_",
            "test rax, rax",
            "lea r9, str.DBD___s__Error:__s",
            "lea rdi, str.mod_dbd.c",
            "mov r8, rbp",
            "mov ecx, r12d",
            "cmove rax, rdx",
            "mov esi, 0x2d4",
            "push rax",
            "mov rax, qword [reloc.dbd_module]",
            "movsxd rdx, dword [rax + 8]",
            "mov rax, qword [rbp + 0x50]",
            "mov rax, qword [rax + rdx*8]",
            "mov edx, 3",
            "mov rax, qword [rax]",
            "push qword [rax + 8]",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "mov rsi, qword [rsp + 0x18]",
            "mov rdi, qword [r13 + 0x20]",
            "call loc.imp.apr_reslist_invalidate",
            "pop rax",
            "pop rdx",
            "xor eax, eax",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rax, qword [rsp + 8]",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov esi, 0x30",
            "call loc.imp.apr_palloc",
            "lea rdi, [rax + 8]",
            "mov rcx, rax",
            "mov qword [rax + 0x28], 0",
            "mov rsi, rax",
            "xor eax, eax",
            "mov rdx, r12",
            "and rdi, 0xfffffffffffffff8",
            "sub rcx, rdi",
            "add ecx, 0x30",
            "shr ecx, 3",
            "rep stosq qword [rdi], rax",
            "lea rdi, [rsp + 8]",
            "mov qword [rsi], rbx",
            "call fcn.00002320",
            "mov rax, qword [rsp + 8]",
            "add rsp, 0x18",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret",
            "mov rdi, qword [r13 + 0x18]",
            "test rdi, rdi",
            "je 0x2ab8",
            "call loc.imp.apr_thread_mutex_lock",
            "test eax, eax",
            "jne 0x2a90",
            "cmp qword [r13 + 0x20], 0",
            "je 0x2b16",
            "mov rdi, qword [r13 + 0x18]",
            "call loc.imp.apr_thread_mutex_unlock",
            "test eax, eax",
            "jne 0x2b4b",
            "mov rdi, qword [r13 + 0x20]",
            "jmp 0x293c",
            "lea r9, str.DBD:_Failed_to_acquire_thread_mutex",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, eax",
            "mov r8, rbp",
            "mov edx, 3",
            "mov esi, 0x29c",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "nop dword [rax]",
            "xor eax, eax",
            "jmp 0x29e1",
            "lea r9, str.Failed_to_acquire_DBD_connection_from_pool_",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, eax",
            "mov r8, rbp",
            "xor eax, eax",
            "mov edx, 3",
            "mov esi, 0x2fc",
            "call loc.imp.ap_log_error",
            "xor eax, eax",
            "jmp 0x29e1",
            "lea r9, str.DBD:_not_configured",
            "lea rdi, str.mod_dbd.c",
            "mov r8, rsi",
            "xor eax, eax",
            "xor ecx, ecx",
            "mov edx, 3",
            "mov esi, 0x2e5",
            "call loc.imp.ap_log_error",
            "xor eax, eax",
            "jmp 0x29e1",
            "mov rsi, r13",
            "mov rdi, rbp",
            "call fcn.00002730",
            "mov rdi, qword [r13 + 0x18]",
            "mov ebx, eax",
            "call loc.imp.apr_thread_mutex_unlock",
            "test eax, eax",
            "mov ecx, eax",
            "lea r9, str.DBD:_Failed_to_release_thread_mutex",
            "mov r8, rbp",
            "jne 0x2b57",
            "test ebx, ebx",
            "je 0x2a7e",
            "xor eax, eax",
            "jmp 0x29e1",
            "lea r9, str.DBD:_Failed_to_release_thread_mutex",
            "mov r8, rbp",
            "mov ecx, eax",
            "lea rdi, str.mod_dbd.c",
            "xor eax, eax",
            "mov edx, 3",
            "mov esi, 0x2a7",
            "call loc.imp.ap_log_error",
            "xor eax, eax",
            "jmp 0x29e1"
        ]
    },
    "loc.imp.apr_reslist_acquire": {
        "function_address": "0x000017b0",
        "instructions": [
            "jmp qword [reloc.apr_reslist_acquire]"
        ]
    },
    "loc.imp.apr_dbd_check_conn": {
        "function_address": "0x00001600",
        "instructions": [
            "jmp qword [reloc.apr_dbd_check_conn]"
        ]
    },
    "loc.imp.apr_dbd_error": {
        "function_address": "0x000015a0",
        "instructions": [
            "jmp qword [reloc.apr_dbd_error]"
        ]
    },
    "loc.imp.ap_log_error": {
        "function_address": "0x00001710",
        "instructions": [
            "jmp qword [reloc.ap_log_error]"
        ]
    },
    "loc.imp.apr_reslist_invalidate": {
        "function_address": "0x00001590",
        "instructions": [
            "jmp qword [reloc.apr_reslist_invalidate]"
        ]
    },
    "fcn.00002320": {
        "function_address": "0x00002320",
        "instructions": [
            "push r15",
            "push r14",
            "mov rax, rdx",
            "push r13",
            "push r12",
            "mov r12, rdi",
            "push rbp",
            "push rbx",
            "xor ecx, ecx",
            "xor edx, edx",
            "sub rsp, 0x58",
            "mov rbp, qword [rsi]",
            "mov rsi, rax",
            "lea rdi, [rsp + 0x28]",
            "call loc.imp.apr_pool_create_ex",
            "test eax, eax",
            "mov ebx, eax",
            "jne 0x23f0",
            "mov rdi, qword [rsp + 0x28]",
            "mov esi, 0x20",
            "call loc.imp.apr_palloc",
            "mov qword [rax], 0",
            "mov rdi, qword [rsp + 0x28]",
            "lea rdx, [rax + 8]",
            "mov qword [rax + 8], 0",
            "mov qword [rax + 0x10], 0",
            "mov r15, rax",
            "mov rsi, qword [rbp + 8]",
            "mov qword [rax + 0x18], rdi",
            "call loc.imp.apr_dbd_get_driver",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x2430",
            "cmp eax, 0x4e3a",
            "je 0x2520",
            "cmp eax, 0x11187",
            "je 0x24e8",
            "cmp eax, 0x4e33",
            "je 0x24b0",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_mod_dbd_not_compatible_with_APR_in_get_driver",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, eax",
            "mov edx, 3",
            "mov esi, section..hash",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "jmp 0x2490",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_Failed_to_create_memory_pool",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, eax",
            "mov edx, 2",
            "xor eax, eax",
            "mov esi, 0x1d1",
            "call loc.imp.ap_log_error",
            "mov eax, ebx",
            "add rsp, 0x58",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "mov rdx, qword [rbp + 0x10]",
            "mov rsi, qword [r15 + 0x18]",
            "mov rcx, r15",
            "mov rdi, qword [r15 + 8]",
            "call loc.imp.apr_dbd_open",
            "test eax, eax",
            "mov ebx, eax",
            "je 0x2590",
            "cmp eax, 0x4e2e",
            "jne 0x2560",
            "sub rsp, 8",
            "push qword [rbp + 8]",
            "mov r8, qword [rbp]",
            "lea rdi, str.mod_dbd.c",
            "lea r9, str.DBD:_Cant_connect_to__s",
            "mov esi, 0x1fd",
            "mov ecx, 0x4e2e",
            "mov edx, 3",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "pop rsi",
            "pop rdi",
            "nop word [rax + rax]",
            "mov rdi, qword [r15 + 0x18]",
            "call loc.imp.apr_pool_destroy",
            "add rsp, 0x58",
            "mov eax, ebx",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "pop r15",
            "ret",
            "sub rsp, 8",
            "push qword [rbp + 8]",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_cant_find_driver_for__s",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, 0x4e33",
            "mov edx, 3",
            "mov esi, 0x1e7",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "pop r10",
            "pop r11",
            "jmp 0x2490",
            "sub rsp, 8",
            "push qword [rbp + 8]",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_driver_for__s_not_available",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, 0x11187",
            "mov edx, 3",
            "mov esi, 0x1e3",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "pop rbp",
            "pop r12",
            "jmp 0x2490",
            "sub rsp, 8",
            "push qword [rbp + 8]",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_driver_for__s_is_invalid_or_corrupted",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, 0x4e3a",
            "mov edx, 3",
            "mov esi, 0x1eb",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "pop r8",
            "pop r9",
            "jmp 0x2490",
            "mov r8, qword [rbp]",
            "lea r9, str.DBD:_mod_dbd_not_compatible_with_APR_in_open",
            "mov ecx, eax",
            "mov edx, 3",
            "mov esi, 0x201",
            "lea rdi, str.mod_dbd.c",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "jmp 0x2490",
            "mov rdi, qword [r15 + 0x18]",
            "mov rcx, qword [reloc.apr_pool_cleanup_null]",
            "lea rdx, [0x00001ba0]",
            "mov rsi, r15",
            "call loc.imp.apr_pool_cleanup_register",
            "mov rsi, qword [r15 + 0x18]",
            "lea rdi, [rsp + 0x30]",
            "xor ecx, ecx",
            "xor edx, edx",
            "call loc.imp.apr_pool_create_ex",
            "test eax, eax",
            "mov dword [rsp + 0xc], eax",
            "jne 0x2670",
            "mov rax, qword [rsp + 0x30]",
            "mov rdi, rax",
            "mov rbx, rax",
            "mov qword [rsp + 0x10], rax",
            "call loc.imp.apr_hash_make",
            "mov qword [r15 + 0x10], rax",
            "mov rsi, qword [rbp + 0x30]",
            "mov rdi, rbx",
            "call loc.imp.apr_hash_first",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x2698",
            "lea rax, [rsp + 0x48]",
            "lea r14, [rsp + 0x40]",
            "lea r13, [rsp + 0x38]",
            "mov qword [rsp + 0x18], rax",
            "jmp 0x2620",
            "mov rdi, rbx",
            "call loc.imp.apr_hash_next",
            "test rax, rax",
            "mov rbx, rax",
            "je 0x2690",
            "mov rcx, r14",
            "xor edx, edx",
            "mov rsi, r13",
            "mov rdi, rbx",
            "call loc.imp.apr_hash_this",
            "mov rcx, qword [rsp + 0x40]",
            "cmp byte [rcx], 0",
            "je 0x2610",
            "mov rdi, qword [r15 + 8]",
            "mov r9, qword [rsp + 0x18]",
            "mov r8, qword [rsp + 0x38]",
            "mov rdx, qword [r15]",
            "mov rsi, qword [rsp + 0x10]",
            "mov qword [rsp + 0x48], 0",
            "call loc.imp.apr_dbd_prepare",
            "test eax, eax",
            "je 0x26a8",
            "mov dword [rsp + 0xc], 0x4e2e",
            "jmp 0x2610",
            "lea r9, str.DBD:_Failed_to_create_memory_pool",
            "mov r8, qword [rbp]",
            "mov ebx, eax",
            "mov ecx, eax",
            "mov edx, 2",
            "mov esi, 0x212",
            "jmp 0x2577",
            "mov ecx, dword [rsp + 0xc]",
            "test ecx, ecx",
            "jne 0x26c7",
            "mov qword [r12], r15",
            "xor eax, eax",
            "jmp 0x2417",
            "mov rdi, qword [r15 + 0x10]",
            "mov rcx, qword [rsp + 0x48]",
            "mov rdx, 0xffffffffffffffff",
            "mov rsi, qword [rsp + 0x38]",
            "call loc.imp.apr_hash_set",
            "jmp 0x2610",
            "mov ebx, dword [rsp + 0xc]",
            "mov rdi, qword [r15 + 8]",
            "mov rsi, qword [r15]",
            "mov edx, ebx",
            "call loc.imp.apr_dbd_error",
            "lea rdx, str._____",
            "test rax, rax",
            "lea r9, str.DBD:_failed_to_prepare_SQL_statements:__s",
            "lea rdi, str.mod_dbd.c",
            "mov ecx, ebx",
            "mov esi, 0x21c",
            "cmove rax, rdx",
            "sub rsp, 8",
            "mov edx, 3",
            "push rax",
            "mov r8, qword [rbp]",
            "xor eax, eax",
            "call loc.imp.ap_log_error",
            "mov rdi, qword [r15 + 0x18]",
            "call loc.imp.apr_pool_destroy",
            "pop rax",
            "mov eax, ebx",
            "pop rdx",
            "jmp 0x2417"
        ]
    },
    "loc.imp.apr_thread_mutex_lock": {
        "function_address": "0x00001690",
        "instructions": [
            "jmp qword [reloc.apr_thread_mutex_lock]"
        ]
    },
    "loc.imp.apr_thread_mutex_unlock": {
        "function_address": "0x000017e0",
        "instructions": [
            "jmp qword [reloc.apr_thread_mutex_unlock]"
        ]
    },
    "fcn.00002730": {
        "function_address": "0x00002730",
        "instructions": [
            "push r12",
            "push rbp",
            "mov r12, rdi",
            "push rbx",
            "mov rax, qword [rsi]",
            "mov rbx, rsi",
            "lea rdi, [rbx + 0x20]",
            "lea r9, [fcn.00002320]",
            "sub rsp, 8",
            "movsxd r8, dword [rax + 0x28]",
            "mov ecx, dword [rax + 0x24]",
            "mov edx, dword [rax + 0x20]",
            "mov esi, dword [rax + 0x1c]",
            "lea rax, [0x00001b10]",
            "push qword [rbx + 0x10]",
            "push rbx",
            "push rax",
            "imul r8, r8, 0xf4240",
            "call loc.imp.apr_reslist_create",
            "add rsp, 0x20",
            "test eax, eax",
            "mov ebp, eax",
            "jne 0x27a0",
            "mov rdi, qword [rbx + 0x10]",
            "mov rcx, qword [reloc.apr_pool_cleanup_null]",
            "lea rdx, [0x00001940]",
            "mov rsi, rbx",
            "call loc.imp.apr_pool_cleanup_register",
            "pop rbx",
            "xor eax, eax",
            "pop rbp",
            "pop r12",
            "ret",
            "lea r9, str.DBD:_failed_to_initialise",
            "lea rdi, str.mod_dbd.c",
            "mov r8, r12",
            "mov ecx, eax",
            "mov edx, 3",
            "xor eax, eax",
            "mov esi, 0x250",
            "call loc.imp.ap_log_error",
            "mov eax, ebp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "ret"
        ]
    },
    "sym.ap_dbd_prepare": {
        "function_address": "0x00001a10",
        "instructions": [
            "push r14",
            "mov r14, qword [reloc.dbd_module]",
            "push r13",
            "push r12",
            "mov r13, rdi",
            "push rbp",
            "mov rbp, rdx",
            "push rbx",
            "movsxd rdx, dword [r14 + 8]",
            "mov rax, qword [rdi + 0x50]",
            "mov r12, rsi",
            "mov rbx, qword [rax + rdx*8]",
            "test rbx, rbx",
            "je 0x1ab0",
            "mov rax, qword [rbx]",
            "mov rdx, 0xffffffffffffffff",
            "mov rsi, rbp",
            "mov rdi, qword [rax + 0x30]",
            "call loc.imp.apr_hash_get",
            "test rax, rax",
            "je 0x1a86",
            "cmp byte [r12], 0",
            "je 0x1a86",
            "sub rsp, 8",
            "lea r9, str.conflicting_SQL_statements_with_label__s",
            "lea rdi, str.mod_dbd.c",
            "push rbp",
            "mov edx, 4",
            "xor eax, eax",
            "mov r8, r13",
            "xor ecx, ecx",
            "mov esi, 0x124",
            "call loc.imp.ap_log_error",
            "pop rax",
            "pop rdx",
            "mov rax, qword [rbx]",
            "mov rcx, r12",
            "mov rsi, rbp",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "pop r14",
            "mov rdi, qword [rax + 0x30]",
            "mov rdx, 0xffffffffffffffff",
            "jmp loc.imp.apr_hash_set",
            "mov rsi, rdi",
            "mov rdi, qword [0x00204238]",
            "call fcn.00001950",
            "movsxd rdx, dword [r14 + 8]",
            "mov rbx, rax",
            "mov rax, qword [r13 + 0x50]",
            "mov qword [rax + rdx*8], rbx",
            "jmp 0x1a39"
        ]
    },
    "loc.imp.apr_hash_get": {
        "function_address": "0x000017c0",
        "instructions": [
            "jmp qword [reloc.apr_hash_get]"
        ]
    },
    "fcn.00001950": {
        "function_address": "0x00001950",
        "instructions": [
            "push r13",
            "push r12",
            "mov r13, rsi",
            "push rbp",
            "push rbx",
            "mov rbp, rdi",
            "mov esi, 0x10",
            "sub rsp, 8",
            "call loc.imp.apr_palloc",
            "mov rdi, rbp",
            "mov esi, 0x38",
            "mov qword [rax], 0",
            "mov qword [rax + 8], 0",
            "mov r12, rax",
            "call loc.imp.apr_palloc",
            "lea rdi, [rax + 8]",
            "mov rcx, rax",
            "mov rbx, rax",
            "mov qword [rax + 0x30], 0",
            "xor eax, eax",
            "and rdi, 0xfffffffffffffff8",
            "sub rcx, rdi",
            "add ecx, 0x38",
            "shr ecx, 3",
            "rep stosq qword [rdi], rax",
            "lea rax, str._DBDriver_unset_",
            "mov qword [r12], rbx",
            "mov rdi, rbp",
            "mov qword [rbx], r13",
            "mov dword [rbx + 0x18], 0xffffffff",
            "mov qword [rbx + 8], rax",
            "lea rax, [0x00002d7b]",
            "mov dword [rbx + 0x1c], 1",
            "mov dword [rbx + 0x20], 2",
            "mov dword [rbx + 0x24], 0xa",
            "mov qword [rbx + 0x10], rax",
            "mov dword [rbx + 0x28], 0x12c",
            "call loc.imp.apr_hash_make",
            "mov qword [rbx + 0x30], rax",
            "add rsp, 8",
            "mov rax, r12",
            "pop rbx",
            "pop rbp",
            "pop r12",
            "pop r13",
            "ret"
        ]
    },
    "entry.fini0": {
        "function_address": "0x00001880",
        "instructions": [
            "cmp byte [loc._edata], 0",
            "jne 0x18b0",
            "cmp qword [0x00203ff0], 0",
            "push rbp",
            "mov rbp, rsp",
            "je 0x18a3",
            "mov rdi, qword [section..data]",
            "call sym.imp.__cxa_finalize",
            "call entry0",
            "pop rbp",
            "mov byte [loc._edata], 1",
            "repz ret"
        ]
    },
    "sym.imp.__cxa_finalize": {
        "function_address": "0x000017a0",
        "instructions": [
            "jmp qword [reloc.__cxa_finalize]"
        ]
    },
    "rip": {
        "function_address": "0x000017f0",
        "instructions": [
            "lea rdi, [loc._edata]",
            "lea rax, [0x0020422f]",
            "push rbp",
            "sub rax, rdi",
            "mov rbp, rsp",
            "cmp rax, 0xe",
            "jbe 0x1820",
            "mov rax, qword [reloc._ITM_deregisterTMCloneTable]",
            "test rax, rax",
            "je 0x1820",
            "pop rbp",
            "jmp rax",
            "pop rbp",
            "ret"
        ]
    },
    "loc.imp.apr_hash_make": {
        "function_address": "0x000016e0",
        "instructions": [
            "jmp qword [reloc.apr_hash_make]"
        ]
    },
    "loc.imp.apr_reslist_create": {
        "function_address": "0x000015b0",
        "instructions": [
            "jmp qword [reloc.apr_reslist_create]"
        ]
    },
    "loc.imp.apr_pool_create_ex": {
        "function_address": "0x000015e0",
        "instructions": [
            "jmp qword [reloc.apr_pool_create_ex]"
        ]
    },
    "loc.imp.apr_dbd_get_driver": {
        "function_address": "0x00001760",
        "instructions": [
            "jmp qword [reloc.apr_dbd_get_driver]"
        ]
    },
    "loc.imp.apr_dbd_open": {
        "function_address": "0x00001610",
        "instructions": [
            "jmp qword [reloc.apr_dbd_open]"
        ]
    },
    "loc.imp.apr_pool_destroy": {
        "function_address": "0x00001740",
        "instructions": [
            "jmp qword [reloc.apr_pool_destroy]"
        ]
    },
    "loc.imp.apr_hash_first": {
        "function_address": "0x00001560",
        "instructions": [
            "jmp qword [reloc.apr_hash_first]"
        ]
    },
    "loc.imp.apr_hash_next": {
        "function_address": "0x00001770",
        "instructions": [
            "jmp qword [reloc.apr_hash_next]"
        ]
    },
    "loc.imp.apr_hash_this": {
        "function_address": "0x00001670",
        "instructions": [
            "jmp qword [reloc.apr_hash_this]"
        ]
    },
    "loc.imp.apr_dbd_prepare": {
        "function_address": "0x00001580",
        "instructions": [
            "jmp qword [reloc.apr_dbd_prepare]"
        ]
    },
    "loc.imp.apr_hash_set": {
        "function_address": "0x000015c0",
        "instructions": [
            "jmp qword [reloc.apr_hash_set]"
        ]
    }
}